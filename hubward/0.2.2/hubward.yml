&id001 !Command
command:
- hubward
positional: []
named: []
parent:
subcommands:
- !Command
  command:
  - hubward
  - skeleton
  positional:
  - !Positional
    description: Path to contain skeleton project
    position: 0
    name: dirname
    optional: false
  named:
  - !Flag
    description: \
    synonyms:
    - --host
    - --user
    args: !SimpleFlagArg
      name: host
    optional: true
  - !Flag
    description: ''
    synonyms:
    - --hub_remote
    args: !SimpleFlagArg
      name: remotepath
    optional: true
  - !Flag
    description: "Sets up a metadata-builder.py script instead of a\nmetadata.yaml\
      \ config file. Useful for more complicated\nstudies (default: False)\n"
    synonyms:
    - --use-metadata-builder
    args: !EmptyFlagArg {}
    optional: true
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: hubward skeleton [-h] [--use-metadata-builder] dirname\n\n  \
    \  Populate <dirname> with template files that can be customized on\n    a per-study\
    \ basis.\n\n    The skeleton is actually a working example:\n\n        hubward\
    \ skeleton <dirname>\n        hubward process <dirname>\n        hubward upload\
    \ <dirname>/example-group.yaml \\\n                --host <host> --user <user>\
    \ \\\n                --hub_remote <remotepath>\n\n    \n\npositional arguments:\n\
    \  dirname               Path to contain skeleton project\n\noptional arguments:\n\
    \  -h, --help            show this help message and exit\n  --use-metadata-builder\n\
    \                        Sets up a metadata-builder.py script instead of a\n \
    \                       metadata.yaml config file. Useful for more complicated\n\
    \                        studies (default: False)\n"
  generated_using: &id002
  - --help
- !Command
  command:
  - hubward
  - process
  positional:
  - !Positional
    description: '- a file called metadata-builder.py (in which case it is executed
      and'
    position: 0
    name: or
    optional: false
  - !Positional
    description: "Path to directory containing metadata.yaml file or metadata-\nbuilder.yaml\
      \ file, or path to a group config YAML file. Can\nspecify multiple."
    position: 0
    name: items
    optional: false
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: hubward process [-h] items [items ...]\n\n    Process one or\
    \ many studies.\n\n    *items* can be one or more directories or files to process.\
    \ They are\n    handled as follows:\n\n    - If an item to process is a *directory*\
    \ then it is expected to contain\n      either:\n\n        - a file called metadata.yaml\
    \ (in which case that file is used as-is)\n\n            or\n\n        - a file\
    \ called metadata-builder.py (in which case it is executed and\n          is expected\
    \ to create a metadata.yaml file).\n\n        Each output file in the metadata.yaml\
    \ file is considered up-to-date if\n        it are newer than both the input file\
    \ and the script that creates it.\n        If it's up-to-date then nothing is\
    \ done.  Otherwise, the script is run\n        to update the output file.\n\n\
    \    - If an item to process is a *file* then it is assumed to be a group\n  \
    \    configuration YAML-format file. All directories listed in that file's\n \
    \     `studies` section will be processed.\n\n    For creating a new study, see\
    \ `hubward skeleton` which creates template\n    files that can be filled in.\n\
    \    \n\npositional arguments:\n  items       Path to directory containing metadata.yaml\
    \ file or metadata-\n              builder.yaml file, or path to a group config\
    \ YAML file. Can\n              specify multiple.\n\noptional arguments:\n  -h,\
    \ --help  show this help message and exit\n"
  generated_using: *id002
- !Command
  command:
  - hubward
  - liftover
  positional:
  - !Positional
    description: Single study to liftover
    position: 0
    name: dirname
    optional: false
  - !Positional
    description: Destination directory
    position: 1
    name: newdir
    optional: false
  named:
  - !Flag
    description: 'Source assembly (default: -)'
    synonyms:
    - --from_assembly
    args: !SimpleFlagArg
      name: FROM_ASSEMBLY
    optional: true
  - !Flag
    description: "Destination assembly (default: -)\n"
    synonyms:
    - --to_assembly
    args: !SimpleFlagArg
      name: TO_ASSEMBLY
    optional: true
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: hubward liftover [-h] [--from_assembly FROM_ASSEMBLY]\n     \
    \                   [--to_assembly TO_ASSEMBLY]\n                        dirname\
    \ newdir\n\n    Lift over coordinates from one assembly to another, in bulk.\n\
    \n    For all configured tracks in <dirname>/metadata.yaml, if the configured\n\
    \    track genome matches <from_assembly> then perform the liftover to\n    a\
    \ temporary directory and then move the result to <newdir> when complete.\n\n\
    \    Currently, only studies where all tracks are in the same assembly are\n \
    \   supported. If a track is found that is from a different assembly,\n    a ValueError\
    \ is raised.\n\n    The genome field of each track is also edited to reflect the\
    \ new genome,\n    and a symlink called ORIGINAL-STUDY is placed in <newdir>.\
    \ In the end,\n    a complete version of <dirname> is available in <newdir> with\
    \ appropriate\n    tracks lifted over to the new assembly and appropriate metadata\
    \ edited to\n    reflect the liftover.\n\n    Note: this uses CrossMap (http://crossmap.sourceforge.net)\
    \ which currently\n    only runs in Python 2.7.\n    \n\npositional arguments:\n\
    \  dirname               Single study to liftover\n  newdir                Destination\
    \ directory\n\noptional arguments:\n  -h, --help            show this help message\
    \ and exit\n  --from_assembly FROM_ASSEMBLY\n                        Source assembly\
    \ (default: -)\n  --to_assembly TO_ASSEMBLY\n                        Destination\
    \ assembly (default: -)\n"
  generated_using: *id002
- !Command
  command:
  - hubward
  - upload
  positional: []
  named:
  - !Flag
    description: been specified, only these files will be uploaded to the
    synonyms:
    - --hub-only
    args: !SimpleFlagArg
      name: has
    optional: true
  - !Flag
    description: Options for rsync. Default is "'-avrL --progress'"
    synonyms:
    - --rsync_options
    args: !SimpleFlagArg
      name: RSYNC_OPTIONS
    optional: true
  - !Flag
    description: "Host to upload to. Overrides [server][host] in the\ngroup config\
      \ file. (default: -)"
    synonyms:
    - --host
    args: !SimpleFlagArg
      name: HOST
    optional: true
  - !Flag
    description: "User for host. Overrides [server][user] in the group\nconfig file.\
      \ (default: -)"
    synonyms:
    - --user
    args: !SimpleFlagArg
      name: USER
    optional: true
  - !Flag
    description: "Remote filename for the top-level hub file. Overrides\n[server][hub_remote]\
      \ in the config file. (default: -)\n"
    synonyms:
    - --hub_remote
    args: !SimpleFlagArg
      name: HUB_REMOTE
    optional: true
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: hubward upload [-h] [--hub-only] [--rsync_options RSYNC_OPTIONS]\n\
    \                      [--host HOST] [--user USER] [--hub_remote HUB_REMOTE]\n\
    \                      filename\n\n    Creates a track hub and uploads to configured\
    \ host.\n\n    Track hub files include hub.txt, genomes.txt, and trackDb.txt files.\
    \ If\n    --hub-only has been specified, only these files will be uploaded to\
    \ the\n    host configured in the group config file.\n\n    Otherwise, these files\
    \ and all of the configured data files (bigBed,\n    bigWig, BAM, and VCF files)\
    \ from individual studies are uploaded via rsync\n    to their respective configured\
    \ locations on the remote host.\n    \n\npositional arguments:\n  filename   \
    \           Group config file\n\noptional arguments:\n  -h, --help           \
    \ show this help message and exit\n  --hub-only            Just update the hub\
    \ text files, not data files\n                        (default: False)\n  --rsync_options\
    \ RSYNC_OPTIONS\n                        Options for rsync. Default is \"'-avrL\
    \ --progress'\"\n  --host HOST           Host to upload to. Overrides [server][host]\
    \ in the\n                        group config file. (default: -)\n  --user USER\
    \           User for host. Overrides [server][user] in the group\n           \
    \             config file. (default: -)\n  --hub_remote HUB_REMOTE\n         \
    \               Remote filename for the top-level hub file. Overrides\n      \
    \                  [server][hub_remote] in the config file. (default: -)\n"
  generated_using: *id002
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "usage: hubward [-h] {process,upload,liftover,skeleton} ...\n\nCommand-line\
  \ interface for hubward.\n\npositional arguments:\n  {process,upload,liftover,skeleton}\n\
  \    process             Process one or many studies. *items* can be one or\n  \
  \                      more directories or files to process. They are handled\n\
  \                        as follows: - If an item to process is a *directory*\n\
  \                        then it is expected to contain either: - a file called\n\
  \                        metadata.yaml (in which case that file is used as-is)\n\
  \                        or - a file called metadata-builder.py (in which case\n\
  \                        it is executed and is expected to create a\n          \
  \              metadata.yaml file). Each output file in the\n                  \
  \      metadata.yaml file is considered up-to-date if it are\n                 \
  \       newer than both the input file and the script that\n                   \
  \     creates it. If it's up-to-date then nothing is done.\n                   \
  \     Otherwise, the script is run to update the output\n                      \
  \  file. - If an item to process is a *file* then it is\n                      \
  \  assumed to be a group configuration YAML-format file.\n                     \
  \   All directories listed in that file's `studies`\n                        section\
  \ will be processed. For creating a new study,\n                        see `hubward\
  \ skeleton` which creates template files\n                        that can be filled\
  \ in.\n    upload              Creates a track hub and uploads to configured host.\n\
  \                        Track hub files include hub.txt, genomes.txt, and\n   \
  \                     trackDb.txt files. If --hub-only has been specified,\n   \
  \                     only these files will be uploaded to the host\n          \
  \              configured in the group config file. Otherwise, these\n         \
  \               files and all of the configured data files (bigBed,\n          \
  \              bigWig, BAM, and VCF files) from individual studies\n           \
  \             are uploaded via rsync to their respective configured\n          \
  \              locations on the remote host.\n    liftover            Lift over\
  \ coordinates from one assembly to another, in\n                        bulk. For\
  \ all configured tracks in\n                        <dirname>/metadata.yaml, if\
  \ the configured track\n                        genome matches <from_assembly> then\
  \ perform the\n                        liftover to a temporary directory and then\
  \ move the\n                        result to <newdir> when complete. Currently,\
  \ only\n                        studies where all tracks are in the same assembly\
  \ are\n                        supported. If a track is found that is from a\n \
  \                       different assembly, a ValueError is raised. The genome\n\
  \                        field of each track is also edited to reflect the new\n\
  \                        genome, and a symlink called ORIGINAL-STUDY is placed\n\
  \                        in <newdir>. In the end, a complete version of\n      \
  \                  <dirname> is available in <newdir> with appropriate\n       \
  \                 tracks lifted over to the new assembly and appropriate\n     \
  \                   metadata edited to reflect the liftover. Note: this\n      \
  \                  uses CrossMap (http://crossmap.sourceforge.net) which\n     \
  \                   currently only runs in Python 2.7.\n    skeleton           \
  \ Populate <dirname> with template files that can be\n                        customized\
  \ on a per-study basis. The skeleton is\n                        actually a working\
  \ example: hubward skeleton <dirname>\n                        hubward process <dirname>\
  \ hubward upload <dirname\n                        >/example-group.yaml \\ --host\
  \ <host> --user <user> \\\n                        --hub_remote <remotepath>\n\n\
  optional arguments:\n  -h, --help            show this help message and exit\n"
generated_using: *id002
