!Command
positional:
- !Positional
  description: Path to TSV file that contains probe counts for each dataset and combination
    of parameters; the first row must be a header, the first column must give a dataset
    ('dataset'), the last column must list a number of probes ('num_probes'), and
    the intermediary columns give parameter values
  position: 0
  name: probe_count_tsv
  optional: false
- !Positional
  description: Constraint on the total number of probes in the design; generally,
    parameters will be selected such that the number of probes, when pooled across
    datasets, is just below this number
  position: 1
  name: target_probe_count
  optional: false
- !Positional
  description: Path to TSV file in which to output optimal parameter values
  position: 2
  name: param_vals_tsv
  optional: false
named:
- !Flag
  description: Use the higher dimensional (n > 2) interpolation and search functions
    for optimizing parameters. This is required if the input table of probe counts
    contains more than 2 parameters. This does not round parameters to integers or
    to be placed on a grid -- i.e., they will be output as fractional values (from
    which probe counts were interpolated). When using this, --loss- coeffs should
    also be set (default is 1 for all parameters).
  synonyms:
  - --use-nd
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Coefficients on parameters in the loss function. These must be specified
    in the same order as the parameter columns in the input table. Default is 1 for
    mismatches and 1/100 for cover_extension (or, when --use-nd is specified, 1 for
    all parameters).
  synonyms:
  - --loss-coeffs
  args: !RepeatFlagArg
    name: LOSS_COEFFS
  optional: true
- !Flag
  description: Path to TSV file that contains a weight for each dataset to use in
    the loss function. The first row must be a header, the first column must provide
    the dataset ('dataset') and the second column must provide the weight of the dataset
    ('weight'). If not provided, the default is a weight of 1 for each dataset.
  synonyms:
  - --dataset-weights
  args: !SimpleFlagArg
    name: DATASET_WEIGHTS_TSV
  optional: true
- !Flag
  description: Debug output
  synonyms:
  - --debug
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Verbose output
  synonyms:
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ''
  synonyms:
  - --round-params
  args: !SimpleFlagArg
    name: ROUND_PARAMS
  optional: true
command:
- pool.py
parent:
subcommands: []
help_flag: !Flag
  description: ''
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: show program's version number and exit
  synonyms:
  - --version
  - -V
  args: !EmptyFlagArg {}
  optional: true
help_text: "usage: pool.py [-h] [--round-params ROUND_PARAMS ROUND_PARAMS] [--use-nd]\n\
  \               [--loss-coeffs LOSS_COEFFS [LOSS_COEFFS ...]]\n               [--dataset-weights\
  \ DATASET_WEIGHTS_TSV] [--debug] [--verbose]\n               [--version]\n     \
  \          probe_count_tsv target_probe_count param_vals_tsv\n\npositional arguments:\n\
  \  probe_count_tsv       Path to TSV file that contains probe counts for each\n\
  \                        dataset and combination of parameters; the first row\n\
  \                        must be a header, the first column must give a dataset\n\
  \                        ('dataset'), the last column must list a number of\n  \
  \                      probes ('num_probes'), and the intermediary columns\n   \
  \                     give parameter values\n  target_probe_count    Constraint\
  \ on the total number of probes in the\n                        design; generally,\
  \ parameters will be selected such\n                        that the number of probes,\
  \ when pooled across\n                        datasets, is just below this number\n\
  \  param_vals_tsv        Path to TSV file in which to output optimal parameter\n\
  \                        values\n\noptional arguments:\n  -h, --help           \
  \ show this help message and exit\n  --round-params ROUND_PARAMS ROUND_PARAMS\n\
  \                        <m> <e>; round mismatches parameter to the nearest\n  \
  \                      multiple of m and cover_extension parameter to the\n    \
  \                    nearest multiple of e\n  --use-nd              Use the higher\
  \ dimensional (n > 2) interpolation and\n                        search functions\
  \ for optimizing parameters. This is\n                        required if the input\
  \ table of probe counts contains\n                        more than 2 parameters.\
  \ This does not round parameters\n                        to integers or to be placed\
  \ on a grid -- i.e., they\n                        will be output as fractional\
  \ values (from which probe\n                        counts were interpolated). When\
  \ using this, --loss-\n                        coeffs should also be set (default\
  \ is 1 for all\n                        parameters).\n  --loss-coeffs LOSS_COEFFS\
  \ [LOSS_COEFFS ...]\n                        Coefficients on parameters in the loss\
  \ function. These\n                        must be specified in the same order as\
  \ the parameter\n                        columns in the input table. Default is\
  \ 1 for\n                        mismatches and 1/100 for cover_extension (or, when\n\
  \                        --use-nd is specified, 1 for all parameters).\n  --dataset-weights\
  \ DATASET_WEIGHTS_TSV\n                        Path to TSV file that contains a\
  \ weight for each\n                        dataset to use in the loss function.\
  \ The first row\n                        must be a header, the first column must\
  \ provide the\n                        dataset ('dataset') and the second column\
  \ must provide\n                        the weight of the dataset ('weight'). If\
  \ not provided,\n                        the default is a weight of 1 for each dataset.\n\
  \  --debug               Debug output\n  --verbose             Verbose output\n\
  \  --version, -V         show program's version number and exit\n"
generated_using:
- --help
