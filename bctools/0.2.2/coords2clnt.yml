!Command
positional:
- !Positional
  description: Path to bed input file.
  position: 0
  name: infile
  optional: false
named:
- !Flag
  description: Write results to this file.
  synonyms:
  - -o
  - --outfile
  args: !SimpleFlagArg
    name: OUTFILE
  optional: true
- !Flag
  description: Set position one nt downstream of 3'-end as crosslinked nucleotide.
  synonyms:
  - '-3'
  - --threeprime
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Be verbose.
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Print lots of debugging information
  synonyms:
  - -d
  - --debug
  args: !EmptyFlagArg {}
  optional: true
command:
- coords2clnt.py
parent:
subcommands: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "usage: coords2clnt.py [-h] [-o OUTFILE] [-3] [-v] [-d] infile\n\nGiven\
  \ coordinates of aligned reads in bed format, calculate positions of the\ncrosslinked\
  \ nucleotides. By default, crosslinked nts are assumed to be one nt\nupstream of\
  \ the 5'-end of the read.\n\nBy default output is written to stdout.\n\nInput:\n\
  * bed6 file containing coordinates of aligned reads\n* bed6 file containing coordinates\
  \ of crosslinking events\n\nExample usage:\n- convert read coordinates from file\
  \ in.bed to coordinates of the crosslinking\n  events, written to out.bed:\ncoords2clnt.py\
  \ in.bed --outfile out.bed\n\npositional arguments:\n  infile                Path\
  \ to bed input file.\n\noptional arguments:\n  -h, --help            show this help\
  \ message and exit\n  -o OUTFILE, --outfile OUTFILE\n                        Write\
  \ results to this file.\n  -3, --threeprime      Set position one nt downstream\
  \ of 3'-end as\n                        crosslinked nucleotide.\n  -v, --verbose\
  \         Be verbose.\n  -d, --debug           Print lots of debugging information\n"
generated_using:
- --help
