from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory, Int, Float

Analyze_Primers_Py_V0_1_0 = CommandToolBuilder(tool="analyze_primers.py", base_command=["analyze_primers.py"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print information during execution -- useful for\ndebugging [default: False]")), ToolInput(tag="in_primers_file_path", input_type=File(optional=True), prefix="--primers_filepath", doc=InputDocumentation(doc="Path to input primers file.  This file is tab\ndelineated, with the first column being the primer\nname, which must end with an 'f' or a 'r'.  The second\ncolumn contains the primer sequence in 5' to  3'\nformat. One must supply either a primer file or a\nprimer name  (-p parameter) and primer sequence (-s\nparameter). [default: none]")), ToolInput(tag="in_primer_name", input_type=File(optional=True), prefix="--primer_name", doc=InputDocumentation(doc="Specify a single primer to analyze.  One can either\nspecify a single primer that is listed in a primers\nfile (-P parameter) or  specify a sequence with the -s\nparameter.  Primer name must end with a 'f' or 'r' to\ndesignate orientation. [default: none]")), ToolInput(tag="in_primer_sequence", input_type=File(optional=True), prefix="--primer_sequence", doc=InputDocumentation(doc="Primer sequence if using the -p option.  Must be\nspecified if not passing a primers file with the -P\noption.  If both -P and -p parameters are passed, the\nsequence given with this option will be taken rather\nthan sequences in the -P primers file. [default: none]")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="Specify output directory for hits files and primer\nsummary graphs. [default: .]")), ToolInput(tag="in_three_prime_len", input_type=Int(optional=True), prefix="--three_prime_len", doc=InputDocumentation(doc="Length of primer considered to be part of the 3'\nregion for the purpose of giving a weighted score for\nmismatches and/or gaps. [default: 5]")), ToolInput(tag="in_last_base_mismatch", input_type=Int(optional=True), prefix="--last_base_mismatch", doc=InputDocumentation(doc="Sets penalty for mismatch in final base of 3' end of\nthe primer. [default: 3]")), ToolInput(tag="in_three_prime_mismatch", input_type=Int(optional=True), prefix="--three_prime_mismatch", doc=InputDocumentation(doc="Penalty for all 3' mismatches except final\nbase.[default: 1]")), ToolInput(tag="in_non_three_prime_mismatch", input_type=Float(optional=True), prefix="--non_three_prime_mismatch", doc=InputDocumentation(doc="Penalty for all non-3' mismatches. [default: 0.4]")), ToolInput(tag="in_three_prime_gap", input_type=Int(optional=True), prefix="--three_prime_gap", doc=InputDocumentation(doc="Penalty for gaps in the 3' region of the primer.\n[default: 3]")), ToolInput(tag="in_non_three_prime_gap", input_type=Int(optional=True), prefix="--non_three_prime_gap", doc=InputDocumentation(doc="Penalty for non 3' gaps. [default: 1]")), ToolInput(tag="in_fast_a_seqs", input_type=File(optional=True), prefix="--fasta_seqs", doc=InputDocumentation(doc="Target fasta file(s) to score input primer(s) against.\nSeparate multiple files with a colon. [REQUIRED]\n"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Specify output directory for hits files and primer\nsummary graphs. [default: .]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Analyze_Primers_Py_V0_1_0().translate("wdl", allow_empty_container=True)

