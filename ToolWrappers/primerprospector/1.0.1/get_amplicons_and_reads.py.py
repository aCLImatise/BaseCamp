from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, File, Float, Int, String

Get_Amplicons_And_Reads_Py_V0_1_0 = CommandToolBuilder(tool="get_amplicons_and_reads.py", base_command=["get_amplicons_and_reads.py"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print information during execution -- useful for\ndebugging [default: False]")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="Specify output directory for amplicons and reads.\n[default: .]")), ToolInput(tag="in_score_type", input_type=File(optional=True), prefix="--score_type", doc=InputDocumentation(doc="Value to use from primer hits file to determine a\ngiven primer's amplification success.  Valid choices\nare weighted_score, overall_mismatches, tp_mismatches.\nGibbs energy scores not currently implemented\n[default: weighted_score]")), ToolInput(tag="in_score_threshold", input_type=Float(optional=True), prefix="--score_threshold", doc=InputDocumentation(doc="If primer has score at or below this parameter, the\nprimer amplification is considered to be successful\n[default: 1.0]")), ToolInput(tag="in_min_seq_len", input_type=Int(optional=True), prefix="--min_seq_len", doc=InputDocumentation(doc="Sets minimum sequence length of amplicon to be\nincluded in the output amplicon file [default: 100]")), ToolInput(tag="in_read_direction", input_type=String(optional=True), prefix="--read_direction", doc=InputDocumentation(doc="Direction of reads generated. Can be forward (f),\nreverse (r), or paired end (p).  [default: r]")), ToolInput(tag="in_read_len", input_type=Int(optional=True), prefix="--read_len", doc=InputDocumentation(doc="Length of reads to generate.  Should be set according\nto sequencing technology/reagents used.  [default:\n250]")), ToolInput(tag="in_primer_hits", input_type=String(optional=True), prefix="--primer_hits", doc=InputDocumentation(doc="Target primer hits files.  Separate multiple files\nwith a colon. [REQUIRED]")), ToolInput(tag="in_fast_a_fps", input_type=String(optional=True), prefix="--fasta_fps", doc=InputDocumentation(doc="Fasta filepaths.  Must match the fasta files used in\nthe analyze_primers module.  Multiple fasta files can\nbe passed, separated with a colon.  Order not\nimportant. [REQUIRED]\n"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Specify output directory for amplicons and reads.\n[default: .]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Get_Amplicons_And_Reads_Py_V0_1_0().translate("wdl", allow_empty_container=True)

