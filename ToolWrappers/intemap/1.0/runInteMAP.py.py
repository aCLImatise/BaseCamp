from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean

Runintemap_Py_V0_1_0 = CommandToolBuilder(tool="runInteMAP.py", base_command=["runInteMAP.py"], inputs=[ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="Output contig file")), ToolInput(tag="in_thread_num", input_type=Int(optional=True), prefix="--thread_num", doc=InputDocumentation(doc="number of threads, default=2")), ToolInput(tag="in_quality_start", input_type=String(optional=True), prefix="--quality_start", doc=InputDocumentation(doc="Quality value ascii start, default=33")), ToolInput(tag="in_min_high_cov_length", input_type=Int(optional=True), prefix="--minHighCovLength", doc=InputDocumentation(doc="the high coverage length threashold, above which\nInteMAP will deem that high-coverage species exist in\nthe community, and run IDBA-UD and ABySS on the\ncorrected read set, default=1000000")), ToolInput(tag="in_k_for_abyss", input_type=Int(optional=True), prefix="--k_for_abyss", doc=InputDocumentation(doc="kmer size for ABySS, default=61")), ToolInput(tag="in_min_k_for_i_dba", input_type=Int(optional=True), prefix="--min_k_for_idba", doc=InputDocumentation(doc="minimal kmer size for IDBA_UD, default=23")), ToolInput(tag="in_high_cov_i_dba", input_type=Int(optional=True), prefix="--high_cov_idba", doc=InputDocumentation(doc="lower bound for IDBA-contigs of high coverage,\ndefault=30")), ToolInput(tag="in_low_cov_i_dba", input_type=Int(optional=True), prefix="--low_cov_idba", doc=InputDocumentation(doc="higher bound for IDBA-contigs of low coverage,\ndefault=50")), ToolInput(tag="in_high_cov_abyss", input_type=Int(optional=True), prefix="--high_cov_abyss", doc=InputDocumentation(doc="lower bound for ABySS-contigs of high coverage,\ndefault=20")), ToolInput(tag="in_clearance", input_type=Boolean(optional=True), prefix="--clearance", doc=InputDocumentation(doc="make clearance of intermediate output files,\ndefault=False")), ToolInput(tag="in_sequence_position_file", input_type=String(), position=0, doc=InputDocumentation(doc="keeps the directories of sequencing reads in the fastq")), ToolInput(tag="in_formats", input_type=String(), position=1, doc=InputDocumentation(doc="libinfo_file          keeps the information of the library for sequencing")), ToolInput(tag="in_reads", input_type=String(), position=2, doc=InputDocumentation(doc="optional arguments:"))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc="Output contig file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Runintemap_Py_V0_1_0().translate("wdl", allow_empty_container=True)

