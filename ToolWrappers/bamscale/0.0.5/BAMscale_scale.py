from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Float, Directory

Bamscale_Scale_V0_1_0 = CommandToolBuilder(tool="BAMscale_scale", base_command=["BAMscale", "scale"], inputs=[ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="Input BAM file. This has to be specified at least two times.")), ToolInput(tag="in_lib_type", input_type=String(optional=True), prefix="--libtype", doc=InputDocumentation(doc="Sequencing type to be used. Can be: single, paired, and auto (default: autodetect)")), ToolInput(tag="in_frag", input_type=String(optional=True), prefix="--frag", doc=InputDocumentation(doc="Compute coverage using fragments instead of reads (default: no)")), ToolInput(tag="in_frag_size", input_type=Int(optional=True), prefix="--fragsize", doc=InputDocumentation(doc="Fragment size to be used to extend single-end library reads")), ToolInput(tag="in_norm_type", input_type=Int(optional=True), prefix="--normtype", doc=InputDocumentation(doc="Type of normalization. (default: base)\nIf no normalization is needed, set '--scale no' argument, the program will disregard this option.\nOptions:\n1) reads: No. of mapped reads/fragments\n2) base: Sum of per-base coverage of reads/fragments")), ToolInput(tag="in_method_scale_samples", input_type=Float(optional=True), prefix="--scale", doc=InputDocumentation(doc="Method to scale samples together. (default: genome)\nOptions are:\n1) no: no scaling, just calculate coverage\n2) smallest: scale reads to smallest library (multiple-samples only)\n3) genome: scale samples to 1x genome coverage (only possible with 'base' normalization type)\n4) custom: scale to custom scaling factor (--factor or -F <float> has to be supplied)")), ToolInput(tag="in_factor", input_type=Float(optional=True), prefix="--factor", doc=InputDocumentation(doc="Scaling factor(s) when '--scale custom' normalization is selected.\nIf multiple samples are specified, scaling factors should be comma (',') delimited.\nexample in case of three input BAM files: 0.643,0.45667,1.3.")), ToolInput(tag="in_operation", input_type=File(optional=True), prefix="--operation", doc=InputDocumentation(doc="Operation to perform when scaling samples. Default: scaled\nOptions are:\n1) scaled: output scaled tracks\n2) unscaled: do not scale files in any way\n3) log2: log2 transform against first BAM file\n4) ratio: coverage ratio against first BAM file.\n5) subtract: subtract coverage against first BAM file.\n5) rfd: OK-seq RFD calculation\n6) endseq: strand-specific coverages\n7) endseqr: strand-specific coverages (reverse strand score is negative)\n8) reptime: replication timing mode for two BAM files (binsize: 100bp, smoothen: 500 bins)\n9) rna: coverage of RNA-seq file (one file at a time)\n10) strandrna: stranded coverage of RNA-seq file (one file at a time)\n11) strandrnaR: stranded coverage of RNA-seq file (reverse is negative, one file at a time)\nShort description of settings:\nendseq: generates scaled coverage tracks of positive/negative strands,\nand the log2 ratios\nendseqr: generates scaled coverage tracks of positive/negative strands,\nthe negative strand coverage will be negative, and the log2 ratios are calculated\nreptime: generates scaled coverage tracks and log2 ratios of two BAM files,\nsetting the binsize to 100bp and smoothening smoothen to 500 bins\nrna: coverage of RNA-seq, useful for accurate coverages at exon-intron boundaries\nstrandrna: stranded coverage of RNA-seq, useful for accurate coverages at exon-intron boundaries,\ncreating separate tracks for forward and reverse strand\nstrandrnaR: stranded coverage of RNA-seq, useful for accurate coverages at exon-intron boundaries,\ncreating separate tracks for forward and reverse strand, reverse strand is negated")), ToolInput(tag="in_output_strandspecific_normalized", input_type=File(optional=True), prefix="-S", doc=InputDocumentation(doc="Output strand-specific normalized tracks. One BAM file can be specified only")), ToolInput(tag="in_binsize", input_type=Int(optional=True), prefix="--binsize", doc=InputDocumentation(doc="Size of bins for output bigWig/bedgraph generation (default: 5)")), ToolInput(tag="in_seq_cov", input_type=Int(optional=True), prefix="--seqcov", doc=InputDocumentation(doc="Compute sequencing coverage from BAM file. (default: '1', count reads while parsing BAM)\nOptions are:\n1) 0: use reads in index (only if normalization is set to 'reads')\n2) 1: count reads while parsing BAM(s)\nWARNING: this option is only useful when 'reads' are used for normalization")), ToolInput(tag="in_blacklist", input_type=File(optional=True), prefix="--blacklist", doc=InputDocumentation(doc="Input file with list of chromosomes to blacklist during scaling analysis")), ToolInput(tag="in_bed_subtract", input_type=Int(optional=True), prefix="--bedsubtract", doc=InputDocumentation(doc="BED file with regions to subtract when computing coverage for normalization\nThese coordinates should not overlap so reads are not counted multiple times")), ToolInput(tag="in_smoothen", input_type=Int(optional=True), prefix="--smoothen", doc=InputDocumentation(doc="Smoothen signal by calculating mean of N bins flanking both sides of each bin (default: 0)\nIf set to '0', the signal is not smoothened. To turn on specify a value greater than '0'.\nFor replication timing, a good value is to smoothen to 100k bases. If binSize is 100bp, this would be '1000'")), ToolInput(tag="in_track_smooth", input_type=Int(optional=True), prefix="--tracksmooth", doc=InputDocumentation(doc="Which tracks should be smoothened when performing smoothening (default: '1' meaning only binned track).\nOptions are:\n1) 0: Smoothen scaled and transformed tracks (log2, ratio or subtracted)\n2) 1: Smoothen only the scaled sequencing track\n3) 2: Smoothen only the transformed (log2, ratio or subtract) track")), ToolInput(tag="in_mapq", input_type=Int(optional=True), prefix="--mapq", doc=InputDocumentation(doc="Minimum (at least) mapping quality (default: 0)")), ToolInput(tag="in_keep_dup", input_type=String(optional=True), prefix="--keepdup", doc=InputDocumentation(doc="Keep duplicated reads (default: no)")), ToolInput(tag="in_no_proper", input_type=String(optional=True), prefix="--noproper", doc=InputDocumentation(doc="Do not filter un-proper alignments (default: filter)")), ToolInput(tag="in_unmap_pair", input_type=String(optional=True), prefix="--unmappair", doc=InputDocumentation(doc="Do not remove reads with unmapped pairs")), ToolInput(tag="in_min_frag", input_type=Int(optional=True), prefix="--minfrag", doc=InputDocumentation(doc="Minimum fragment size for read pairs (default: 0)")), ToolInput(tag="in_max_frag", input_type=Int(optional=True), prefix="--maxfrag", doc=InputDocumentation(doc="Maximum fragment size for read pairs (default: 2000)")), ToolInput(tag="in_frag_filt", input_type=Int(optional=True), prefix="--fragfilt", doc=InputDocumentation(doc="Filter reads based on fragment size (default: no)")), ToolInput(tag="in_diff_chr", input_type=String(optional=True), prefix="--diffchr", doc=InputDocumentation(doc="Keep reads where read pair aligns to different chromosome (default: no)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory name (default: '.')")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="No. of threads to use (default: 1)")), ToolInput(tag="in_var_25", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_operation", output_type=File(optional=True), selector=InputSelector(input_to_select="in_operation", type_hint=File()), doc=OutputDocumentation(doc="Operation to perform when scaling samples. Default: scaled\nOptions are:\n1) scaled: output scaled tracks\n2) unscaled: do not scale files in any way\n3) log2: log2 transform against first BAM file\n4) ratio: coverage ratio against first BAM file.\n5) subtract: subtract coverage against first BAM file.\n5) rfd: OK-seq RFD calculation\n6) endseq: strand-specific coverages\n7) endseqr: strand-specific coverages (reverse strand score is negative)\n8) reptime: replication timing mode for two BAM files (binsize: 100bp, smoothen: 500 bins)\n9) rna: coverage of RNA-seq file (one file at a time)\n10) strandrna: stranded coverage of RNA-seq file (one file at a time)\n11) strandrnaR: stranded coverage of RNA-seq file (reverse is negative, one file at a time)\nShort description of settings:\nendseq: generates scaled coverage tracks of positive/negative strands,\nand the log2 ratios\nendseqr: generates scaled coverage tracks of positive/negative strands,\nthe negative strand coverage will be negative, and the log2 ratios are calculated\nreptime: generates scaled coverage tracks and log2 ratios of two BAM files,\nsetting the binsize to 100bp and smoothening smoothen to 500 bins\nrna: coverage of RNA-seq, useful for accurate coverages at exon-intron boundaries\nstrandrna: stranded coverage of RNA-seq, useful for accurate coverages at exon-intron boundaries,\ncreating separate tracks for forward and reverse strand\nstrandrnaR: stranded coverage of RNA-seq, useful for accurate coverages at exon-intron boundaries,\ncreating separate tracks for forward and reverse strand, reverse strand is negated")), ToolOutput(tag="out_output_strandspecific_normalized", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_strandspecific_normalized", type_hint=File()), doc=OutputDocumentation(doc="Output strand-specific normalized tracks. One BAM file can be specified only")), ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory name (default: '.')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bamscale_Scale_V0_1_0().translate("wdl", allow_empty_container=True)

