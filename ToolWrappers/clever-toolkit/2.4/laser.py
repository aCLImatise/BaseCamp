from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, File, Directory

Laser_V0_1_0 = CommandToolBuilder(tool="laser", base_command=["laser"], inputs=[ToolInput(tag="in_extra_sensitive", input_type=Boolean(optional=True), prefix="--extra-sensitive", doc=InputDocumentation(doc="Be more sensitive (at the expense of runtime).")), ToolInput(tag="in_threads", input_type=String(optional=True), prefix="-T", doc=InputDocumentation(doc="Threads.")), ToolInput(tag="in_maximum_deletion_length", input_type=Int(optional=True), prefix="-M", doc=InputDocumentation(doc="Maximum deletion length to look for (default: 1000 in\nregular mode, 10000 when using --extra-sensitive).")), ToolInput(tag="in_length_alignment_seeds", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc="Length of alignment seeds to be mapped by external\nread mapper (BWA), default: 40.")), ToolInput(tag="in_filename_fastq_file", input_type=File(optional=True), prefix="-S", doc=InputDocumentation(doc="Filename of FASTQ file with split reads (if not given,\na temporary such file be produced).")), ToolInput(tag="in_tmpdir", input_type=Directory(optional=True), prefix="--tmpdir", doc=InputDocumentation(doc="Directory to use for temporary files (if not given,\nsystem default is used).")), ToolInput(tag="in_core_options", input_type=String(optional=True), prefix="--core-options", doc=InputDocumentation(doc="Additional options to pass on to LASER core algorithm.\nCall 'laser-core' without parameters for a list of\noptions.")), ToolInput(tag="in_recal_options", input_type=String(optional=True), prefix="--recal-options", doc=InputDocumentation(doc="Additional options to pass on to LASER's recalibration\nalgorithm. Call 'laser-recalibrate' without parameters\nfor a list of options.")), ToolInput(tag="in_minimum_expected_support", input_type=File(optional=True), prefix="-w", doc=InputDocumentation(doc="Minimum expected support for a SNP/indel in order to\nbe written to file with putative variations. These\nSNPs/indels will be used for recalibration of\nalignment scores.")), ToolInput(tag="in_keep_raw_bam", input_type=Boolean(optional=True), prefix="--keep_raw_bam", doc=InputDocumentation(doc="Keep BAM file produced by laser-core. Default: only\nkeep BAM after recalibration.")), ToolInput(tag="in_secondary", input_type=Boolean(optional=True), prefix="--secondary", doc=InputDocumentation(doc="Include secondary alignments in the BAM file.")), ToolInput(tag="in_x_a", input_type=Boolean(optional=True), prefix="--xa", doc=InputDocumentation(doc="Encode secondary alignments in XA tags (default:\nseparate lines).")), ToolInput(tag="in_adv_cigar", input_type=Boolean(optional=True), prefix="--adv-cigar", doc=InputDocumentation(doc="Use X/= in CIGAR strings instead of M.")), ToolInput(tag="in_dont_recalibrate", input_type=Boolean(optional=True), prefix="--dont-recalibrate", doc=InputDocumentation(doc="Skip recalibration step.")), ToolInput(tag="in_inter_chromosomal", input_type=Boolean(optional=True), prefix="--interchromosomal", doc=InputDocumentation(doc="Look for interchromosomal read pairs and for\ninterchromosomal split reads.\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Laser_V0_1_0().translate("wdl", allow_empty_container=True)

