from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int

Laser_Recalibrate_V0_1_0 = CommandToolBuilder(tool="laser_recalibrate", base_command=["laser-recalibrate"], inputs=[ToolInput(tag="in_arg_file_name", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="[ --insertion_length_dist ] arg    File name of empiric insertion size")), ToolInput(tag="in_arg_file_read", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="[ --variations ] arg               File to read known indels from. These\nindels will not incur alignment costs.\nWill also be taken into account for\ninternal segment size probability.")), ToolInput(tag="in_arg_value_subtract", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --phred_offset ] arg (=33)       Value to subtract from ASCII code to\nget the PHRED quality.")), ToolInput(tag="in_arg_maximum_distance", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --max_pair_distance ] arg (=50000)\nMaximum distance of reads in a\n'regular' pair. If distance is\nlarger/interchromosomal, reads can\nstill be paired, but only if option\n--distant-pairs is given and no pair\nwith smaller distance is present.")), ToolInput(tag="in_distant_pairs", input_type=Boolean(optional=True), prefix="--distant-pairs", doc=InputDocumentation(doc="Allow long distance and\ninterchromosomal alignments to be\npaired.")), ToolInput(tag="in_omit_alternative_cigar", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --omit_alt_cigars ]              Omit alternative cigar strings stored\nin YA tags.")), ToolInput(tag="in_omit_secondary_alignments", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --omit_secondary_aln ]           Omit secondary alignments.")), ToolInput(tag="in_use_m_mismatches", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="[ --m_in_cigar ]                   Use M for matches and mismatches in\nCIGAR strings (instead of '=' and 'X').")), ToolInput(tag="in_mapq_cut_off", input_type=Int(optional=True), prefix="--mapq_cutoff", doc=InputDocumentation(doc="(=0)                Only report properly paired reads for\nwhich each read has a MAPQ above the\ngiven level. Other alignments will be\nomitted. Requires option -s.")), ToolInput(tag="in_convert_readnames_name", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --readgroup_from_name ]          Convert readnames of the format\n<readgroup>_<name> back to <name> and\nset respective read group tag.")), ToolInput(tag="in_arg_bam_file", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="[ --readgroup_header ] arg         BAM file from which the @RG lines in\nthe header are to be copied.")), ToolInput(tag="in_use_separate_size", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --readgroup_wise_stats ]         Use separate insert size distributions\nfor every read group. If set,\n<insert-length-dist> must be a two\ncolumn text file contain read group\nnames and filenames of corresponding\ninsert size distributions.")), ToolInput(tag="in_put_alignments_readgroup", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --default_readgroup ]            Put all alignments into readgroup\n'default'.")), ToolInput(tag="in_soft_clip_open_cost", input_type=Int(optional=True), prefix="--soft_clip_open_cost", doc=InputDocumentation(doc="(=35)       Cost for soft clipping a read.")), ToolInput(tag="in_soft_clip_extend_cost", input_type=Int(optional=True), prefix="--soft_clip_extend_cost", doc=InputDocumentation(doc="(=3)      Cost for 'extending' a soft clip; i.e.,\nsoftclipping k characters from a read\nwill cost soft_clip_open_cost+k*soft_cl\nip_extend_cost.\n")), ToolInput(tag="in_insert_length_dist", input_type=Int(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Laser_Recalibrate_V0_1_0().translate("wdl", allow_empty_container=True)

