from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String

Laser_Core_V0_1_0 = CommandToolBuilder(tool="laser_core", base_command=["laser-core"], inputs=[ToolInput(tag="in_be_caution_produces", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --verbose ]                      Be (very) verbose. CAUTION: produces a\nlot of output to stderr.")), ToolInput(tag="in_single_end", input_type=Boolean(optional=True), prefix="--single-end", doc=InputDocumentation(doc="Process single end reads (instead of\npaired end).")), ToolInput(tag="in_skip_reads_ispresent", input_type=Boolean(optional=True), prefix="-X", doc=InputDocumentation(doc="[ --skip_non_xa ]                  Skip reads for which other alignments\nexist (i.e. X0+X1>1), but no XA tag is\npresent. Turn on when using BWA.")), ToolInput(tag="in_max_input_aln", input_type=Int(optional=True), prefix="--max_input_aln", doc=InputDocumentation(doc="(=-1)             Maximum number of input anchor\nalignments. If more are given, skip\nthis anchor (but not the whole read).")), ToolInput(tag="in_abort_when_set", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="[ --ignore_wrong_X_tags ]          Do not abort when wrongly set X0/X1\ntags are encountered.")), ToolInput(tag="in_arg_value_subtract", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --phred_offset ] arg (=33)       Value to subtract from ASCII code to\nget the PHRED quality.")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --max_mapping ] arg (=10)        Maximum number of mappings for each\nread in a pair. If more mappings are\nfound, the read is skipped.")), ToolInput(tag="in_arg_maximum_sum", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --cost_threshold ] arg (=115)    Maximum PHRED sum allowed for (split)\nread alignments.")), ToolInput(tag="in_arg_phred_an", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --indel_cost ] arg (=30)         PHRED like cost of an indel.")), ToolInput(tag="in_affine_gap_costs", input_type=Boolean(optional=True), prefix="--affine_gapcosts", doc=InputDocumentation(doc="Use affine gapcosts (instead of linear\ngapcosts). If enabled, gap open costs\nare given by --indel_cost and gap\nextend costs are given by\n--gap_extend_cost, i.e. a gap of length\nk costs indel_cost+k*gap_extend_cost.")), ToolInput(tag="in_gap_extend_cost", input_type=Int(optional=True), prefix="--gap_extend_cost", doc=InputDocumentation(doc="(=10)           Gap extend cost. Only effective in\nconnection with --affine_gapcosts.")), ToolInput(tag="in_arg_phred_splitting", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --split_cost ] arg (=25)         PHRED like cost of splitting an")), ToolInput(tag="in_inversion_split_cost", input_type=Int(optional=True), prefix="--inversion_split_cost", doc=InputDocumentation(doc="(=45)      PHRED like cost of an inversion split.")), ToolInput(tag="in_arg_reportevaluate_split", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --secondary_aln_phred_diff ] arg (=29)\nReport/evaluate split alignments with a\ndifference of at most this value to the\nbest split alignment.")), ToolInput(tag="in_arg_minimal_number", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --min_anchor_length ] arg (=8)   Minimal number of nucleotides on each\nsides of a split.")), ToolInput(tag="in_arg_maximal_allowed_length", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --max_span ] arg (=1000)         Maximal allowed span (i.e. length on\nreference) of a split read alignment.")), ToolInput(tag="in_max_anchors", input_type=Int(optional=True), prefix="--max_anchors", doc=InputDocumentation(doc="(=100)              Maximal allowed anchors per read\nsuffix/prefix.")), ToolInput(tag="in_max_anchor_pairs", input_type=Int(optional=True), prefix="--max_anchor_pairs", doc=InputDocumentation(doc="(=500)         Maximal allowed number of anchor")), ToolInput(tag="in_arg_maximal_allowed_sizewhen", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="[ --max_insert ] arg (=50000)      Maximal allowed internal segment size\nwhen pairing alignments for a read\npair.")), ToolInput(tag="in_also_output_alignments", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="[ --output_secondary ]             Also output secondary alignments.")), ToolInput(tag="in_arg_length_anchor", input_type=Boolean(optional=True), prefix="-A", doc=InputDocumentation(doc="[ --anchor_search_length ] arg (=20)\nLength of anchor used for searching.")), ToolInput(tag="in_arg_allowed_errors", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --anchor_errors ] arg (=2)       Allowed errors when searching for")), ToolInput(tag="in_arg_anchor_search", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --anchor_search_iter ] arg (=3)  Anchor search iterations.")), ToolInput(tag="in_arg_filename_write", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc="[ --putative_variations ] arg      Filename to write a list of all\nvariation candidates to. All candidates\nare written, no matter how weak the\nevidence for them to be true.")), ToolInput(tag="in_arg_file_used", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --input_length_dist_in ] arg     File with known internal segment length\nhistogram to be used to score\nalignments.")), ToolInput(tag="in_arg_file_internal", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="[ --input_length_dist_out ] arg    File to write internal segment length\nhistogram for uniquely mappable reads\nto.")), ToolInput(tag="in_arg_file_insertion", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --insertion_length_dist ] arg    File to write insertion length\nhistogram for uniquely mappable reads\nto.")), ToolInput(tag="in_arg_file_write", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="[ --deletion_length_dist ] arg     File to write deletion length histogram\nfor uniquely mappable reads to.")), ToolInput(tag="in_arg_number_threads", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --threads ] arg (=0)             Number of threads (default: 0 =\nstrictly single-threaded).")), ToolInput(tag="in_use_m_mismatches", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="[ --m_in_cigar ]                   Use M for matches and mismatches in\nCIGAR strings (instead of '=' and 'X').")), ToolInput(tag="in_snp", input_type=File(optional=True), prefix="--snp", doc=InputDocumentation(doc="Filename to store putative SNP\npositions to.")), ToolInput(tag="in_arg_weight_cutoff", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[ --snp_weight_cutoff ] arg (=3)   Weight cutoff for SNPs to be written to\nfilename given as parameter --snp.")), ToolInput(tag="in_in_del_weight_cut_off", input_type=File(optional=True), prefix="--indel_weight_cutoff", doc=InputDocumentation(doc="(=3)        Weight cutoff for indels to be written\nto filename given as parameter -P.")), ToolInput(tag="in_rightmost", input_type=Boolean(optional=True), prefix="--rightmost", doc=InputDocumentation(doc="Report rightmost deletions/insertions\n(default: leftmost).")), ToolInput(tag="in_soft_clip", input_type=Boolean(optional=True), prefix="--soft_clip", doc=InputDocumentation(doc="Allow reads to be soft-clipped.")), ToolInput(tag="in_soft_clip_open_cost", input_type=Int(optional=True), prefix="--soft_clip_open_cost", doc=InputDocumentation(doc="(=35)       Cost for soft clipping a read.")), ToolInput(tag="in_soft_clip_extend_cost", input_type=Int(optional=True), prefix="--soft_clip_extend_cost", doc=InputDocumentation(doc="(=3)      Cost for 'extending' a soft clip; i.e.,\nsoftclipping k characters from a read\nwill cost soft_clip_open_cost+k*soft_cl\nip_extend_cost.")), ToolInput(tag="in_read_group", input_type=String(optional=True), prefix="--read_group", doc=InputDocumentation(doc="Read group for all reads.")), ToolInput(tag="in_read_group_library", input_type=String(optional=True), prefix="--read_group_library", doc=InputDocumentation(doc="Library information for read group")), ToolInput(tag="in_alignment_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--interchromosomal                    Search for interchromosomal split ")), ToolInput(tag="in_reads_dot", input_type=String(), position=1, doc=InputDocumentation(doc="--interchrom_split_cost arg (=60)     PHRED like cost of an inter-chromosomal")), ToolInput(tag="in_split_dot", input_type=String(), position=2, doc=InputDocumentation(doc="--inversions                          Search for inversion split reads.")), ToolInput(tag="in_pairings_dot", input_type=String(), position=3, doc=InputDocumentation(doc="--anchor_length_increment arg (=4)    Number of characters to increase anchor")), ToolInput(tag="in_found_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--max_anchor_length arg (=30)         Maximal anchor length (if reached it ")), ToolInput(tag="in_anchors_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-o [ --anchor_distance ] arg (=600)   Regions size for searching for anchors.")), ToolInput(tag="in_header_dot", input_type=String(), position=1, doc=InputDocumentation(doc="--read_group_sample arg               Sample information for read group "))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Laser_Core_V0_1_0().translate("wdl", allow_empty_container=True)

