from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, File, Boolean, Directory, String, Int, Float

Transabyss_V0_1_0 = CommandToolBuilder(tool="transabyss", base_command=["transabyss"], inputs=[ToolInput(tag="in_se", input_type=Array(t=File(), optional=True), prefix="--se", doc=InputDocumentation(doc="single-end read files")), ToolInput(tag="in_pe", input_type=Array(t=File(), optional=True), prefix="--pe", doc=InputDocumentation(doc="paired-end read files")), ToolInput(tag="in_ss", input_type=Boolean(optional=True), prefix="--SS", doc=InputDocumentation(doc="input reads are strand-specific")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="output directory [/transabyss_2.0.1_assembly]")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="--name", doc=InputDocumentation(doc="assembly name [transabyss] (ie. output assembly:\n'transabyss-final.fa')")), ToolInput(tag="in_stage", input_type=String(optional=True), prefix="--stage", doc=InputDocumentation(doc="run up to the specified stage [final]")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc="minimum output sequence length [100]")), ToolInput(tag="in_cleanup", input_type=String(optional=True), prefix="--cleanup", doc=InputDocumentation(doc="level of clean-up of intermediate files [1]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="number of threads ('j' in abyss-pe) [1]")), ToolInput(tag="in_mpi", input_type=Int(optional=True), prefix="--mpi", doc=InputDocumentation(doc="number of MPI processes ('np' in abyss-pe) [0]")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="k-mer size [32]")), ToolInput(tag="in_cov", input_type=Int(optional=True), prefix="--cov", doc=InputDocumentation(doc="minimum mean k-mer coverage of a unitig [2]")), ToolInput(tag="in_eros", input_type=Int(optional=True), prefix="--eros", doc=InputDocumentation(doc="minimum erosion k-mer coverage [c]")), ToolInput(tag="in_s_eros", input_type=Int(optional=True), prefix="--seros", doc=InputDocumentation(doc="minimum erosion k-mer coverage per strand [0]")), ToolInput(tag="in_q_ends", input_type=Int(optional=True), prefix="--qends", doc=InputDocumentation(doc="minimum base quality on 5' and 3' ends of a read [3]")), ToolInput(tag="in_q_all", input_type=Int(optional=True), prefix="--qall", doc=InputDocumentation(doc="minimum base quality throughout a read")), ToolInput(tag="in_pairs", input_type=Int(optional=True), prefix="--pairs", doc=InputDocumentation(doc="minimum number of pairs for building contigs [2]")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="minimum unitig size for building contigs [k]")), ToolInput(tag="in_g_sim", input_type=Int(optional=True), prefix="--gsim", doc=InputDocumentation(doc="maximum iterations of graph simplification [2]")), ToolInput(tag="in_in_del", input_type=Int(optional=True), prefix="--indel", doc=InputDocumentation(doc="indel size tolerance [1]")), ToolInput(tag="in_island", input_type=Int(optional=True), prefix="--island", doc=InputDocumentation(doc="minimum length of island unitigs [0]")), ToolInput(tag="in_use_blat", input_type=Boolean(optional=True), prefix="--useblat", doc=InputDocumentation(doc="use BLAT alignments to remove redundant sequences.")), ToolInput(tag="in_pid", input_type=Float(optional=True), prefix="--pid", doc=InputDocumentation(doc="minimum percent sequence identity of redundant\nsequences [0.95]")), ToolInput(tag="in_walk", input_type=Float(optional=True), prefix="--walk", doc=InputDocumentation(doc="percentage of mean k-mer coverage of seed for path-\nwalking [0.05]")), ToolInput(tag="in_no_ref", input_type=Boolean(optional=True), prefix="--noref", doc=InputDocumentation(doc="do not include reference paths in final assembly"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="output directory [/transabyss_2.0.1_assembly]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Transabyss_V0_1_0().translate("wdl", allow_empty_container=True)

