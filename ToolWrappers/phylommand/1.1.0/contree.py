from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Contree_V0_1_0 = CommandToolBuilder(tool="contree", base_command=["contree"], inputs=[ToolInput(tag="in_add_to_support", input_type=Boolean(optional=True), prefix="--add_to_support", doc=InputDocumentation(doc="add one to the value of the internal node for\neach tree that that split is present in.")), ToolInput(tag="in_calculate_support", input_type=Boolean(optional=True), prefix="--calculate_support", doc=InputDocumentation(doc="same as --add_to_support but divide the number\nby number of trees compared against.")), ToolInput(tag="in_compare", input_type=Boolean(optional=True), prefix="--compare", doc=InputDocumentation(doc="[value]          output conflicting splits where at least one\nbranch support the conflict with more than given\nsupport, e.g. -c 0.7.")), ToolInput(tag="in_database", input_type=Boolean(optional=True), prefix="--database", doc=InputDocumentation(doc="[file]          give a second file of trees to compare against\ninstead of comparing within the ordinary input.\nIf - is given input will be taken from standard\nin instead of file, e.g. -d -. In that case the\ninput compared to must  be given in a file (by\n-f or as last argument).")), ToolInput(tag="in_decisiveness", input_type=Boolean(optional=True), prefix="--decisiveness", doc=InputDocumentation(doc="[genes]     calculates proportion of random trees for which\ngiven gene sampling is decisive and the mean\nproportion of branches that are distinguished.\n(Sanderson et al. 2010, BMC Evol. Biol. 19:\n155). The genes for each taxon are given as a\ncomma (,) separated string, the genes for\ndifferent taxon are separated by a bar (|). E.g\n-D 'ITS,RPB2|ITS|ITS,RPB2|RPB2|RPB2|ITS', or in\na file (given by -f or as last argument) with a\ncomma separated string with the genes for each\ntaxa on a separate row. No taxon names, trees,\nor sequences are needed.")), ToolInput(tag="in_iterations", input_type=Boolean(optional=True), prefix="--iterations", doc=InputDocumentation(doc="[number]      give numbers of iterations to do when\ncalculating decisiveness, e.g. -i 1000.")), ToolInput(tag="in_file", input_type=Boolean(optional=True), prefix="--file", doc=InputDocumentation(doc="[file]              give file name for trees, or decisiveness, e.g.\n-f file.tree.")), ToolInput(tag="in_format", input_type=Boolean(optional=True), prefix="--format", doc=InputDocumentation(doc="[newick/nexus]         give format of input, e.g. --format nexus. If no\nformat is given and the input is a file contree\nwill try to guess the format, if it is through\nstandard in it will assume newick format. A\nseparate file format can be given for the\ndatabase file after a ',', e.g. --format\nnewick,nexus. If only one format is given, it\nwill be used for both tree files/inputs.")), ToolInput(tag="in_html", input_type=Boolean(optional=True), prefix="--html", doc=InputDocumentation(doc="give output as tree in html (svg) format with\nconflicting tips coloured green and red when\ndoing --compare.")), ToolInput(tag="in_non_shared_tips", input_type=Boolean(optional=True), prefix="--non_shared_tips", doc=InputDocumentation(doc="print tip names not present in the other tree.")), ToolInput(tag="in_output", input_type=Boolean(optional=True), prefix="--output", doc=InputDocumentation(doc="[newick/nexus]         give tree format for output, nexus (nex or x for\nshort) or newick (new or w for short), e.g\n--output x. (default w).")), ToolInput(tag="in_robinson_foulds", input_type=Boolean(optional=True), prefix="--robinson_foulds", doc=InputDocumentation(doc="compute Robinson-Foulds metric between trees.")), ToolInput(tag="in_rooted", input_type=Boolean(optional=True), prefix="--rooted", doc=InputDocumentation(doc="treat trees as rooted for --add_to_support and\n--calculate_support.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="get additional output.")), ToolInput(tag="in_arguments", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_file_dot_trees", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Contree_V0_1_0().translate("wdl", allow_empty_container=True)

