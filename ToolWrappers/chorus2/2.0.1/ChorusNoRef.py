from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, String, Int

Chorusnoref_V0_1_0 = CommandToolBuilder(tool="ChorusNoRef", base_command=["ChorusNoRef"], inputs=[ToolInput(tag="in_jellyfish", input_type=File(optional=True), prefix="--jellyfish", doc=InputDocumentation(doc="The path where Jellyfish software installed")), ToolInput(tag="in_bwa", input_type=File(optional=True), prefix="--bwa", doc=InputDocumentation(doc="The path where BWA software installed")), ToolInput(tag="in_bcf_tools", input_type=File(optional=True), prefix="--bcftools", doc=InputDocumentation(doc="The path where bcftools software installed")), ToolInput(tag="in_sam_tools", input_type=File(optional=True), prefix="--samtools", doc=InputDocumentation(doc="The path where samtools software installed")), ToolInput(tag="in_genome", input_type=File(optional=True), prefix="--genome", doc=InputDocumentation(doc="Fasta format genome file, should include all sequences\nfrom genome")), ToolInput(tag="in_save", input_type=Directory(optional=True), prefix="--save", doc=InputDocumentation(doc="The output folder for saving results")), ToolInput(tag="in_tmp", input_type=String(optional=True), prefix="--tmp", doc=InputDocumentation(doc="The temporary fold for processing")), ToolInput(tag="in_probe", input_type=Int(optional=True), prefix="--probe", doc=InputDocumentation(doc="Original probe design by Chorus2 and filtered by\nChorusNGSfilter")), ToolInput(tag="in_reads_one", input_type=Int(optional=True), prefix="--reads1", doc=InputDocumentation(doc="read1 of species, example: For one Species only:\nspecies_R1.fq; for more than one species:\nspecies1_R1.fq,species2_R1.fq")), ToolInput(tag="in_reads_two", input_type=Int(optional=True), prefix="--reads2", doc=InputDocumentation(doc="read1 of species, example: For one Species only:\nspecies_R2.fq; for more than one species:\nspecies1_R2.fq,species2_R2.fq")), ToolInput(tag="in_names", input_type=Int(optional=True), prefix="--names", doc=InputDocumentation(doc="species name(s), the order must same as r1, r2")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads or CPUs to use. (Default: 1)")), ToolInput(tag="in_mink_mer", input_type=Int(optional=True), prefix="--minkmer", doc=InputDocumentation(doc="Probe min count for illumina reads")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc="The probe length. (Default: 45)")), ToolInput(tag="in_min_depth", input_type=Int(optional=True), prefix="--mindepth", doc=InputDocumentation(doc="Minimum depth covered by illumina sequences. (Default:\n3)"))], outputs=[ToolOutput(tag="out_save", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_save", type_hint=File()), doc=OutputDocumentation(doc="The output folder for saving results"))], container="quay.io/biocontainers/chorus2:2.0.1--py38h0213d0e_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Chorusnoref_V0_1_0().translate("wdl")

