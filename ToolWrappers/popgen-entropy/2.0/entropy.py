from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean

Entropy_V0_1_0 = CommandToolBuilder(tool="entropy", base_command=["entropy"], inputs=[ToolInput(tag="in_genetic_data_population", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="with genetic data for the population (.mpgl)")), ToolInput(tag="in_level_individuals_single", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="level for individuals (1, 2, 3, 4, 6)\n(a single number indicating same ploidy for all individuals")), ToolInput(tag="in_genotype_likelihood_format", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="is in genotype likelihood format [default = 1]")), ToolInput(tag="in_mcmc_steps_analysis", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="of MCMC steps for the analysis [default = 10000]")), ToolInput(tag="in_first_mcmc_samples", input_type=Int(optional=True), prefix="-b", doc=InputDocumentation(doc="the first n MCMC samples as a burn-in [default = 1000]")), ToolInput(tag="in_mcmc_samples_recording", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="MCMC samples by recording every nth value [default = 1]")), ToolInput(tag="in_of_population_clusters", input_type=Int(optional=True), prefix="-k", doc=InputDocumentation(doc="of population clusters [default = 2]")), ToolInput(tag="in_format_outfile_suffix", input_type=Int(optional=True), prefix="-o", doc=InputDocumentation(doc="format outfile with .hdf5 suffix [default = mcmcout.hdf5]")), ToolInput(tag="in_expected_starting_values", input_type=File(optional=True), prefix="-q", doc=InputDocumentation(doc="with expected starting values for admixture proportions")), ToolInput(tag="in_intra__ancestry", input_type=Int(optional=True), prefix="-Q", doc=InputDocumentation(doc="intra- and interspecific ancestry and marginal q [default = 0]")), ToolInput(tag="in_includes_allele_frequencies", input_type=Int(optional=True), prefix="-w", doc=InputDocumentation(doc="includes population allele frequencies [default = 0]")), ToolInput(tag="in_sequence_error_set", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="of sequence error, set to '9' for locus-specific error rates [default = 0] (only required if infile is not in genotype likelihood format)")), ToolInput(tag="in_dirichlet_init_q", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc="for Dirichlet init. of q, inversly prop. to variance [default = 1]")), ToolInput(tag="in_proposal_ancestral_allele", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="+/- proposal for ancestral allele frequency [default = 0.1]")), ToolInput(tag="in__proposal_fst", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="+/- proposal for Fst [default = 0.01]")), ToolInput(tag="in__proposal_gamma", input_type=Boolean(optional=True), prefix="-y", doc=InputDocumentation(doc="+/- proposal for gamma [default = 0.2]")), ToolInput(tag="in__proposal_alpha", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="+/- proposal for alpha [default = 0.1]")), ToolInput(tag="in_seed_random_number", input_type=Int(optional=True), prefix="-r", doc=InputDocumentation(doc="seed for random number generator [default = clock]"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Entropy_V0_1_0().translate("wdl", allow_empty_container=True)

