from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Float, Int

Scpred_Predict_R_V0_1_0 = CommandToolBuilder(tool="scpred_predict.R", base_command=["scpred_predict.R"], inputs=[ToolInput(tag="in_input_object", input_type=File(optional=True), prefix="--input-object", doc=InputDocumentation(doc="Path to the input object of scPred or seurat class in .rds format")), ToolInput(tag="in_pred_data", input_type=File(optional=True), prefix="--pred-data", doc=InputDocumentation(doc="Path to the input prediction matrix in .rds format")), ToolInput(tag="in_normalise_data", input_type=String(optional=True), prefix="--normalise-data", doc=InputDocumentation(doc="Should the predicted expression data be normalised? Default: False")), ToolInput(tag="in_normalisation_method", input_type=String(optional=True), prefix="--normalisation-method", doc=InputDocumentation(doc="If --normalise-data specified, what normalisation method to use? Default: LogNormalize\nNB: normalisation method must be identical to that used for reference data")), ToolInput(tag="in_scale_factor", input_type=Float(optional=True), prefix="--scale-factor", doc=InputDocumentation(doc="If --normalise-data specified, what scale factor should be applied?\nNote: for CPM normalisation, select 1e6")), ToolInput(tag="in_threshold_level", input_type=String(optional=True), prefix="--threshold-level", doc=InputDocumentation(doc="Classification threshold value")), ToolInput(tag="in_max_iter_harmony", input_type=Int(optional=True), prefix="--max-iter-harmony", doc=InputDocumentation(doc="Maximum number of rounds to run Harmony. One round of Harmony involves one clustering and one correction step")), ToolInput(tag="in_recompute_alignment", input_type=String(optional=True), prefix="--recompute-alignment", doc=InputDocumentation(doc="Recompute alignment? Useful if scPredict() has already been run. Default: TRUE")), ToolInput(tag="in_reference_scaling", input_type=String(optional=True), prefix="--reference-scaling", doc=InputDocumentation(doc="Scale new dataset based on means and stdevs from reference dataset before alignment. Default: TRUE")), ToolInput(tag="in_random_seed", input_type=Int(optional=True), prefix="--random-seed", doc=InputDocumentation(doc="Random number generator seed")), ToolInput(tag="in_output_path", input_type=File(optional=True), prefix="--output-path", doc=InputDocumentation(doc="Output path for Seurat object holding predicted values")), ToolInput(tag="in_plot_path", input_type=File(optional=True), prefix="--plot-path", doc=InputDocumentation(doc="Output path for prediction probabilities histograms in .png format"))], outputs=[ToolOutput(tag="out_output_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_path", type_hint=File()), doc=OutputDocumentation(doc="Output path for Seurat object holding predicted values")), ToolOutput(tag="out_plot_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_plot_path", type_hint=File()), doc=OutputDocumentation(doc="Output path for prediction probabilities histograms in .png format"))], container="quay.io/biocontainers/scpred-cli:0.1.0--1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Scpred_Predict_R_V0_1_0().translate("wdl")

