from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Amptk_Taxonomy_V0_1_0 = CommandToolBuilder(tool="amptk_taxonomy", base_command=["amptk", "taxonomy"], inputs=[ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Input FASTA file (i.e. OTUs from amptk cluster) (Required)")), ToolInput(tag="in_otu_table", input_type=Boolean(optional=True), prefix="--otu_table", doc=InputDocumentation(doc="Input OTU table file (i.e. otu_table from amptk cluster)")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Base name for output file. Default: amptk-taxonomy.<method>.txt")), ToolInput(tag="in_db", input_type=Boolean(optional=True), prefix="--db", doc=InputDocumentation(doc="Select Pre-installed database [ITS1, ITS2, ITS, 16S, LSU, COI]. Default: ITS2")), ToolInput(tag="in_mapping_file", input_type=Boolean(optional=True), prefix="--mapping_file", doc=InputDocumentation(doc="QIIME-like mapping file")), ToolInput(tag="in_taxonomy", input_type=Boolean(optional=True), prefix="--taxonomy", doc=InputDocumentation(doc="Taxonomy calculated elsewhere. 2 Column file.")), ToolInput(tag="in_method", input_type=Boolean(optional=True), prefix="--method", doc=InputDocumentation(doc="Taxonomy method. Default: hybrid [utax, sintax, usearch, hybrid, rdp, blast]")), ToolInput(tag="in_add_two_db", input_type=Boolean(optional=True), prefix="--add2db", doc=InputDocumentation(doc="Add FASTA files to DB on the fly.")), ToolInput(tag="in_fast_a_db", input_type=Boolean(optional=True), prefix="--fasta_db", doc=InputDocumentation(doc="Alternative database of fasta sequenes to use for global alignment.")), ToolInput(tag="in_u_tax_db", input_type=Boolean(optional=True), prefix="--utax_db", doc=InputDocumentation(doc="UTAX formatted database. Default: ITS2.udb [See configured DB's below]")), ToolInput(tag="in_u_tax_cut_off", input_type=Boolean(optional=True), prefix="--utax_cutoff", doc=InputDocumentation(doc="UTAX confidence value threshold. Default: 0.8 [0 to 0.9]")), ToolInput(tag="in_u_search_db", input_type=Boolean(optional=True), prefix="--usearch_db", doc=InputDocumentation(doc="USEARCH formatted database. Default: USEARCH.udb")), ToolInput(tag="in_u_search_cut_off", input_type=Boolean(optional=True), prefix="--usearch_cutoff", doc=InputDocumentation(doc="USEARCH threshold percent identity. Default 0.7")), ToolInput(tag="in_sin_tax_cut_off", input_type=Boolean(optional=True), prefix="--sintax_cutoff", doc=InputDocumentation(doc="SINTAX confidence value threshold. Default: 0.8 [0 to 0.9]")), ToolInput(tag="in_rdp", input_type=Boolean(optional=True), prefix="--rdp", doc=InputDocumentation(doc="Path to RDP Classifier. Required if --method rdp")), ToolInput(tag="in_rdp_db", input_type=Boolean(optional=True), prefix="--rdp_db", doc=InputDocumentation(doc="RDP Classifer DB set. [fungalits_unite, fungalits_warcup. fungallsu, 16srrna]")), ToolInput(tag="in_rdp_cut_off", input_type=Boolean(optional=True), prefix="--rdp_cutoff", doc=InputDocumentation(doc="RDP Classifer confidence value threshold. Default: 0.8 [0 to 1.0]")), ToolInput(tag="in_local_blast", input_type=Boolean(optional=True), prefix="--local_blast", doc=InputDocumentation(doc="Local Blast database (full path) Default: NCBI remote nt database")), ToolInput(tag="in_tax_filter", input_type=Boolean(optional=True), prefix="--tax_filter", doc=InputDocumentation(doc="Remove OTUs from OTU table that do not match filter, i.e. Fungi to keep only fungi.")), ToolInput(tag="in_u_search", input_type=Boolean(optional=True), prefix="--usearch", doc=InputDocumentation(doc="USEARCH executable. Default: usearch9")), ToolInput(tag="in_cpus", input_type=Boolean(optional=True), prefix="--cpus", doc=InputDocumentation(doc="Number of CPUs to use. Default: all")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Keep intermediate files")), ToolInput(tag="in_arguments", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Base name for output file. Default: amptk-taxonomy.<method>.txt"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Amptk_Taxonomy_V0_1_0().translate("wdl", allow_empty_container=True)

