from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Arwen_V0_1_0 = CommandToolBuilder(tool="arwen", base_command=["arwen"], inputs=[ToolInput(tag="in_mtm_am", input_type=Boolean(optional=True), prefix="-mtmam", doc=InputDocumentation(doc="Search for Mammalian mitochondrial tRNA\ngenes. -tv switch set.\nMammalian mitochondrial genetic code used.")), ToolInput(tag="in_mtx", input_type=Boolean(optional=True), prefix="-mtx", doc=InputDocumentation(doc="Low scoring tRNA genes are\nnot reported.")), ToolInput(tag="in_gc", input_type=Boolean(optional=True), prefix="-gc", doc=InputDocumentation(doc="<num>      Use the GenBank transl_table = <num> genetic code.")), ToolInput(tag="in_gc_std", input_type=Boolean(optional=True), prefix="-gcstd", doc=InputDocumentation(doc="Use standard genetic code.")), ToolInput(tag="in_gc_met", input_type=Boolean(optional=True), prefix="-gcmet", doc=InputDocumentation(doc="Use composite Metazoan mitochondrial genetic code.")), ToolInput(tag="in_gc_vert", input_type=Boolean(optional=True), prefix="-gcvert", doc=InputDocumentation(doc="Use Vertebrate mitochondrial genetic code.")), ToolInput(tag="in_gc_invert", input_type=Boolean(optional=True), prefix="-gcinvert", doc=InputDocumentation(doc="Use Invertebrate mitochondrial genetic code.")), ToolInput(tag="in_gc_yeast", input_type=Boolean(optional=True), prefix="-gcyeast", doc=InputDocumentation(doc="Use Yeast mitochondrial genetic code.")), ToolInput(tag="in_gc_prot", input_type=Boolean(optional=True), prefix="-gcprot", doc=InputDocumentation(doc="Use Mold/Protozoan/Coelenterate mitochondrial genetic code.")), ToolInput(tag="in_gc_ciliate", input_type=Boolean(optional=True), prefix="-gcciliate", doc=InputDocumentation(doc="Use Ciliate genetic code.")), ToolInput(tag="in_gc_flatworm", input_type=Boolean(optional=True), prefix="-gcflatworm", doc=InputDocumentation(doc="Use Echinoderm/Flatworm mitochondrial genetic code.")), ToolInput(tag="in_gce_up_lot", input_type=Boolean(optional=True), prefix="-gceuplot", doc=InputDocumentation(doc="Use Euplotid genetic code.")), ToolInput(tag="in_gcb_act", input_type=Boolean(optional=True), prefix="-gcbact", doc=InputDocumentation(doc="Use Bacterial/Plant Chloroplast genetic code.")), ToolInput(tag="in_gc_alt_yeast", input_type=Boolean(optional=True), prefix="-gcaltyeast", doc=InputDocumentation(doc="Use alternative Yeast genetic code.")), ToolInput(tag="in_gca_scid", input_type=Boolean(optional=True), prefix="-gcascid", doc=InputDocumentation(doc="Use Ascidian Mitochondrial genetic code.")), ToolInput(tag="in_gc_alt_flat", input_type=Boolean(optional=True), prefix="-gcaltflat", doc=InputDocumentation(doc="Use alternative Flatworm Mitochondrial genetic code.")), ToolInput(tag="in_gcb_lep", input_type=Boolean(optional=True), prefix="-gcblep", doc=InputDocumentation(doc="Use Blepharisma genetic code.")), ToolInput(tag="in_gc_chloro_ph", input_type=Boolean(optional=True), prefix="-gcchloroph", doc=InputDocumentation(doc="Use Chlorophycean Mitochondrial genetic code.")), ToolInput(tag="in_gc_trem", input_type=Boolean(optional=True), prefix="-gctrem", doc=InputDocumentation(doc="Use Trematode Mitochondrial genetic code.")), ToolInput(tag="in_gcs_cen", input_type=Boolean(optional=True), prefix="-gcscen", doc=InputDocumentation(doc="Use Scenedesmus obliquus Mitochondrial genetic code.")), ToolInput(tag="in_gc_thr_aust", input_type=Boolean(optional=True), prefix="-gcthraust", doc=InputDocumentation(doc="Use Thraustochytrium Mitochondrial genetic code.\nIndividual modifications can be appended using")), ToolInput(tag="in_tv", input_type=Boolean(optional=True), prefix="-tv", doc=InputDocumentation(doc="Do not search for mitochondrial TV replacement\nloop tRNA genes.")), ToolInput(tag="in_circulartopology_search_wraps", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Assume that each sequence has a circular\ntopology. Search wraps around each end.\nDefault setting.")), ToolInput(tag="in_assume_lineartopology_search", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="Assume that each sequence has a linear\ntopology. Search does not wrap.")), ToolInput(tag="in_double_search_strands", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="Double. Search both strands of each\nsequence. Default setting.")), ToolInput(tag="in_single_search_strand", input_type=String(optional=True), prefix="-s", doc=InputDocumentation(doc="+     Single. Do not search the complementary\n(antisense) strand of each sequence.")), ToolInput(tag="in_sc", input_type=String(optional=True), prefix="-sc", doc=InputDocumentation(doc="Single complementary. Do not search the sense\nstrand of each sequence.")), ToolInput(tag="in_rp", input_type=Boolean(optional=True), prefix="-rp", doc=InputDocumentation(doc="Report low scoring genes as possible pseudogenes")), ToolInput(tag="in_seq", input_type=Boolean(optional=True), prefix="-seq", doc=InputDocumentation(doc="Print out primary sequence.")), ToolInput(tag="in_br", input_type=Boolean(optional=True), prefix="-br", doc=InputDocumentation(doc="Show secondary structure of tRNA gene primary\nsequence with round brackets.")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="-fasta", doc=InputDocumentation(doc="Print out primary sequence in fasta format.")), ToolInput(tag="in_fo", input_type=Boolean(optional=True), prefix="-fo", doc=InputDocumentation(doc="Print out primary sequence in fasta format only\n(no secondary structure).")), ToolInput(tag="in_display_base_sequence", input_type=Boolean(optional=True), prefix="-j", doc=InputDocumentation(doc="Display 4-base sequence on 3' end of astem\nregardless of predicted amino-acyl acceptor\nlength.")), ToolInput(tag="in_jr", input_type=Boolean(optional=True), prefix="-jr", doc=InputDocumentation(doc="Allow some divergence of 3' amino-acyl acceptor\nsequence from NCCA.")), ToolInput(tag="in_jr_four", input_type=Boolean(optional=True), prefix="-jr4", doc=InputDocumentation(doc="Allow some divergence of 3' amino-acyl acceptor\nsequence from NCCA, and display 4 bases.")), ToolInput(tag="in_verbose_prints_search", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Verbose. Prints out search progress\nto STDERR.")), ToolInput(tag="in_print_output_is", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="print output into <outfile>. If <outfile>\nexists, it is overwritten.\nBy default, output goes to STDOUT.")), ToolInput(tag="in_print_genes_batch", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="Print out genes in batch mode.\nOutput is in the form:\nSequence name\nN genes found\n1 tRNA-<species> [locus 1] <Apos> (nnn)\n.\n.\nN tRNA-<species> [Locus N] <Apos> (nnn)\nN is the number of genes found\n<species> is the tRNA iso-acceptor species\n<Apos> is the tRNA anticodon relative position\n(nnn) is the tRNA anticodon base triplet\n")), ToolInput(tag="in_mt", input_type=Boolean(optional=True), prefix="-mt", doc=InputDocumentation(doc="")), ToolInput(tag="in_a", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="")), ToolInput(tag="in_filename", input_type=File(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/mitofinder:1.4--py27h516909a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Arwen_V0_1_0().translate("wdl")

