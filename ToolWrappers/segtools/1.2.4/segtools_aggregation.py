from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Segtools_Aggregation_V0_1_0 = CommandToolBuilder(tool="segtools_aggregation", base_command=["segtools-aggregation"], inputs=[ToolInput(tag="in_mnemonic_file", input_type=File(optional=True), prefix="--mnemonic-file", doc=InputDocumentation(doc="If specified, labels will be shown using mnemonics\nfound in FILE")), ToolInput(tag="in_outdir", input_type=File(optional=True), prefix="--outdir", doc=InputDocumentation(doc="File output directory (will be created if it does not\nexist) [default: feature_aggregation]")), ToolInput(tag="in_clobber", input_type=Boolean(optional=True), prefix="--clobber", doc=InputDocumentation(doc="Overwrite any existing output files.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Do not print diagnostic messages.")), ToolInput(tag="in_quick", input_type=Boolean(optional=True), prefix="--quick", doc=InputDocumentation(doc="Compute values only for one chromosome.")), ToolInput(tag="in_replot", input_type=Boolean(optional=True), prefix="--replot", doc=InputDocumentation(doc="Load data from output tab files and regenerate plots\ninstead of recomputing data.")), ToolInput(tag="in_no_plot", input_type=Boolean(optional=True), prefix="--noplot", doc=InputDocumentation(doc="Do not generate any plots.")), ToolInput(tag="in_groups", input_type=Boolean(optional=True), prefix="--groups", doc=InputDocumentation(doc="Separate data into different groups based upon\nANNOTATION's 'name'/'feature' field if --mode=region\nor --mode=point. Does nothing if --mode=gene.")), ToolInput(tag="in_normalize", input_type=Boolean(optional=True), prefix="--normalize", doc=InputDocumentation(doc="Plot the relative frequency of SEGMENTATION labels,\nnormalized by the number of segments in that group\ninstead of the raw counts (normalize over SEGMENTATION\nlabels)")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="one of: point, region, gene. [default: point]")), ToolInput(tag="in_flank_bases", input_type=Int(optional=True), prefix="--flank-bases", doc=InputDocumentation(doc="Aggregate this many base pairs off each end of feature\nor gene [default: 500]")), ToolInput(tag="in_region_samples", input_type=Int(optional=True), prefix="--region-samples", doc=InputDocumentation(doc="If --mode=region, aggregate over each internal feature\nby taking this many evenly-spaced samples. Warning:\nfeatures with a length < N will be excluded from the\nresults [default: 50]")), ToolInput(tag="in_intron_samples", input_type=Int(optional=True), prefix="--intron-samples", doc=InputDocumentation(doc="Aggregate over each intron by taking this many evenly-\nspaced samples [default: 50]")), ToolInput(tag="in_exon_samples", input_type=Int(optional=True), prefix="--exon-samples", doc=InputDocumentation(doc="Aggregate over each exon by taking this many evenly-\nspaced samples [default: 25]")), ToolInput(tag="in_val_pass_val", input_type=String(optional=True), prefix="-R", doc=InputDocumentation(doc="=VAL        Pass VAL for PARAM when calling R functions. May be\nspecified multiple times.\n")), ToolInput(tag="in_segmentation", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_annotation", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="File output directory (will be created if it does not\nexist) [default: feature_aggregation]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Segtools_Aggregation_V0_1_0().translate("wdl", allow_empty_container=True)

