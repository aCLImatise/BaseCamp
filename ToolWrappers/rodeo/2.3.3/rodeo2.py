from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Boolean, Int, String

Rodeo2_V0_1_0 = CommandToolBuilder(tool="rodeo2", base_command=["rodeo2"], inputs=[ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="Name of output folder")), ToolInput(tag="in_c", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[CONF_FILE [CONF_FILE ...]], --conf_file [CONF_FILE [CONF_FILE ...]]\nMaximum size of potential ORF")), ToolInput(tag="in_hmm", input_type=Boolean(optional=True), prefix="-hmm", doc=InputDocumentation(doc="[CUSTOM_HMM [CUSTOM_HMM ...]], --custom_hmm [CUSTOM_HMM [CUSTOM_HMM ...]]\nMaximum size of potential ORF")), ToolInput(tag="in_num_cores", input_type=Int(optional=True), prefix="--num_cores", doc=InputDocumentation(doc="Number of cores to use.")), ToolInput(tag="in_precursor_max", input_type=Int(optional=True), prefix="--precursor_max", doc=InputDocumentation(doc="Maximum size of potential ORF")), ToolInput(tag="in_precursor_min", input_type=Int(optional=True), prefix="--precursor_min", doc=InputDocumentation(doc="Minimum size of potential ORF")), ToolInput(tag="in_overlap", input_type=String(optional=True), prefix="--overlap", doc=InputDocumentation(doc="Maximum overlap of search with existing CDSs")), ToolInput(tag="in_fetch_type", input_type=String(optional=True), prefix="--fetch_type", doc=InputDocumentation(doc="Type of window specification. 'cds' will make the\nwindow +/- n CDSs from the query. 'nucs' will make the\nwindow +/- n nucleotides from the query")), ToolInput(tag="in_fetch_n", input_type=String(optional=True), prefix="--fetch_n", doc=InputDocumentation(doc="The 'n' variable for the -ft=orfs,cds")), ToolInput(tag="in_fetch_distance", input_type=Int(optional=True), prefix="--fetch_distance", doc=InputDocumentation(doc="Number of nucleotides to fetch outside of window")), ToolInput(tag="in_pt", input_type=Boolean(optional=True), prefix="-pt", doc=InputDocumentation(doc="[PEPTIDE_TYPES [PEPTIDE_TYPES ...]], --peptide_types [PEPTIDE_TYPES [PEPTIDE_TYPES ...]]\nType(s) of peptides to score.")), ToolInput(tag="in_evaluate_all", input_type=Boolean(optional=True), prefix="--evaluate_all", doc=InputDocumentation(doc="Evaluate all duplicates if accession id corresponds to\nduplicate entries")), ToolInput(tag="in_exhaustive", input_type=Boolean(optional=True), prefix="--exhaustive", doc=InputDocumentation(doc="Score RiPPs even if they don't have a valid split site")), ToolInput(tag="in_print_precursors", input_type=Boolean(optional=True), prefix="--print_precursors", doc=InputDocumentation(doc="Print precursors in HTML file")), ToolInput(tag="in_web", input_type=Boolean(optional=True), prefix="--web", doc=InputDocumentation(doc="Only to use when running as a web tool")), ToolInput(tag="in_main", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_rodeo", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_app_dot", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_conf_file", input_type=String(optional=True), position=3, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Name of output folder"))], container="quay.io/biocontainers/rodeo:2.3.3--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rodeo2_V0_1_0().translate("wdl")

