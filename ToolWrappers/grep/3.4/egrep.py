from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File, Int

Egrep_V0_1_0 = CommandToolBuilder(tool="egrep", base_command=["egrep"], inputs=[ToolInput(tag="in_extended_regexp", input_type=Boolean(optional=True), prefix="--extended-regexp", doc=InputDocumentation(doc="PATTERNS are extended regular expressions")), ToolInput(tag="in_fixed_strings", input_type=Boolean(optional=True), prefix="--fixed-strings", doc=InputDocumentation(doc="PATTERNS are strings")), ToolInput(tag="in_basic_regexp", input_type=Boolean(optional=True), prefix="--basic-regexp", doc=InputDocumentation(doc="PATTERNS are basic regular expressions")), ToolInput(tag="in_perl_regexp", input_type=Boolean(optional=True), prefix="--perl-regexp", doc=InputDocumentation(doc="PATTERNS are Perl regular expressions")), ToolInput(tag="in_regexp", input_type=String(optional=True), prefix="--regexp", doc=InputDocumentation(doc="use PATTERNS for matching")), ToolInput(tag="in_file", input_type=File(optional=True), prefix="--file", doc=InputDocumentation(doc="take PATTERNS from FILE")), ToolInput(tag="in_ignore_case", input_type=Boolean(optional=True), prefix="--ignore-case", doc=InputDocumentation(doc="ignore case distinctions in patterns and data")), ToolInput(tag="in_no_ignore_case", input_type=Boolean(optional=True), prefix="--no-ignore-case", doc=InputDocumentation(doc="do not ignore case distinctions (default)")), ToolInput(tag="in_word_regexp", input_type=Boolean(optional=True), prefix="--word-regexp", doc=InputDocumentation(doc="match only whole words")), ToolInput(tag="in_line_regexp", input_type=Boolean(optional=True), prefix="--line-regexp", doc=InputDocumentation(doc="match only whole lines")), ToolInput(tag="in_null_data", input_type=Boolean(optional=True), prefix="--null-data", doc=InputDocumentation(doc="a data line ends in 0 byte, not newline")), ToolInput(tag="in_no_messages", input_type=Boolean(optional=True), prefix="--no-messages", doc=InputDocumentation(doc="suppress error messages")), ToolInput(tag="in_invert_match", input_type=Boolean(optional=True), prefix="--invert-match", doc=InputDocumentation(doc="select non-matching lines")), ToolInput(tag="in_max_count", input_type=Int(optional=True), prefix="--max-count", doc=InputDocumentation(doc="stop after NUM selected lines")), ToolInput(tag="in_byte_offset", input_type=Boolean(optional=True), prefix="--byte-offset", doc=InputDocumentation(doc="print the byte offset with output lines")), ToolInput(tag="in_line_number", input_type=Boolean(optional=True), prefix="--line-number", doc=InputDocumentation(doc="print line number with output lines")), ToolInput(tag="in_line_buffered", input_type=Boolean(optional=True), prefix="--line-buffered", doc=InputDocumentation(doc="flush output on every line")), ToolInput(tag="in_with_filename", input_type=File(optional=True), prefix="--with-filename", doc=InputDocumentation(doc="print file name with output lines")), ToolInput(tag="in_label", input_type=File(optional=True), prefix="--label", doc=InputDocumentation(doc="use LABEL as the standard input file name prefix")), ToolInput(tag="in_only_matching", input_type=Boolean(optional=True), prefix="--only-matching", doc=InputDocumentation(doc="show only nonempty parts of lines that match")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="--silent", doc=InputDocumentation(doc="suppress all normal output")), ToolInput(tag="in_binary_files", input_type=String(optional=True), prefix="--binary-files", doc=InputDocumentation(doc="assume that binary files are TYPE;\nTYPE is 'binary', 'text', or 'without-match'")), ToolInput(tag="in_text", input_type=Boolean(optional=True), prefix="--text", doc=InputDocumentation(doc="equivalent to --binary-files=text")), ToolInput(tag="in_equivalent_to_binaryfileswithoutmatch", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="equivalent to --binary-files=without-match")), ToolInput(tag="in_directories", input_type=String(optional=True), prefix="--directories", doc=InputDocumentation(doc="how to handle directories;\nACTION is 'read', 'recurse', or 'skip'")), ToolInput(tag="in_devices", input_type=String(optional=True), prefix="--devices", doc=InputDocumentation(doc="how to handle devices, FIFOs and sockets;\nACTION is 'read' or 'skip'")), ToolInput(tag="in_recursive", input_type=Boolean(optional=True), prefix="--recursive", doc=InputDocumentation(doc="like --directories=recurse")), ToolInput(tag="in_dereference_recursive", input_type=Boolean(optional=True), prefix="--dereference-recursive", doc=InputDocumentation(doc="likewise, but follow all symlinks")), ToolInput(tag="in_include", input_type=File(optional=True), prefix="--include", doc=InputDocumentation(doc="search only files that match GLOB (a file pattern)")), ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="skip files that match GLOB")), ToolInput(tag="in_exclude_from", input_type=File(optional=True), prefix="--exclude-from", doc=InputDocumentation(doc="skip files that match any file pattern from FILE")), ToolInput(tag="in_exclude_dir", input_type=String(optional=True), prefix="--exclude-dir", doc=InputDocumentation(doc="skip directories that match GLOB")), ToolInput(tag="in_files_without_match", input_type=Boolean(optional=True), prefix="--files-without-match", doc=InputDocumentation(doc="print only names of FILEs with no selected lines")), ToolInput(tag="in_files_with_matches", input_type=Boolean(optional=True), prefix="--files-with-matches", doc=InputDocumentation(doc="print only names of FILEs with selected lines")), ToolInput(tag="in_count", input_type=Boolean(optional=True), prefix="--count", doc=InputDocumentation(doc="print only a count of selected lines per FILE")), ToolInput(tag="in_initial_tab", input_type=Boolean(optional=True), prefix="--initial-tab", doc=InputDocumentation(doc="make tabs line up (if needed)")), ToolInput(tag="in_null", input_type=Boolean(optional=True), prefix="--null", doc=InputDocumentation(doc="print 0 byte after FILE name")), ToolInput(tag="in_before_context", input_type=Int(optional=True), prefix="--before-context", doc=InputDocumentation(doc="print NUM lines of leading context")), ToolInput(tag="in_after_context", input_type=Int(optional=True), prefix="--after-context", doc=InputDocumentation(doc="print NUM lines of trailing context")), ToolInput(tag="in_context", input_type=Int(optional=True), prefix="--context", doc=InputDocumentation(doc="print NUM lines of output context")), ToolInput(tag="in_num", input_type=Boolean(optional=True), prefix="-NUM", doc=InputDocumentation(doc="same as --context=NUM")), ToolInput(tag="in_color", input_type=Boolean(optional=True), prefix="--color", doc=InputDocumentation(doc="[=WHEN],")), ToolInput(tag="in_colour", input_type=Boolean(optional=True), prefix="--colour", doc=InputDocumentation(doc="[=WHEN]       use markers to highlight the matching strings;\nWHEN is 'always', 'never', or 'auto'")), ToolInput(tag="in_binary", input_type=Boolean(optional=True), prefix="--binary", doc=InputDocumentation(doc="do not strip CR characters at EOL (MSDOS/Windows)")), ToolInput(tag="in_grep", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_with_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_with_filename", type_hint=File()), doc=OutputDocumentation(doc="print file name with output lines"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Egrep_V0_1_0().translate("wdl", allow_empty_container=True)

