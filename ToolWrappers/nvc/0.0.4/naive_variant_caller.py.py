from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String

Naive_Variant_Caller_Py_V0_1_0 = CommandToolBuilder(tool="naive_variant_caller.py", base_command=["naive_variant_caller.py"], inputs=[ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="BAM filename, optionally index filename. Multiple\nallowed.")), ToolInput(tag="in_index", input_type=File(optional=True), prefix="--index", doc=InputDocumentation(doc="optionally index filename. Multiple allowed.")), ToolInput(tag="in_output_vcf_filename", input_type=File(optional=True), prefix="--output_vcf_filename", doc=InputDocumentation(doc="Output VCF filename")), ToolInput(tag="in_reference_genome_filename", input_type=File(optional=True), prefix="--reference_genome_filename", doc=InputDocumentation(doc="Input reference file")), ToolInput(tag="in_variants_only", input_type=Boolean(optional=True), prefix="--variants_only", doc=InputDocumentation(doc="Report only sites with a possible variant allele.")), ToolInput(tag="in_use_strand", input_type=Boolean(optional=True), prefix="--use_strand", doc=InputDocumentation(doc="Report counts by strand")), ToolInput(tag="in_ploidy", input_type=Int(optional=True), prefix="--ploidy", doc=InputDocumentation(doc="Ploidy. Default=2.")), ToolInput(tag="in_min_support_depth", input_type=Int(optional=True), prefix="--min_support_depth", doc=InputDocumentation(doc="Minimum number of reads needed to consider a REF/ALT.\nDefault=0.")), ToolInput(tag="in_min_base_quality", input_type=Int(optional=True), prefix="--min_base_quality", doc=InputDocumentation(doc="Minimum base quality.")), ToolInput(tag="in_min_mapping_quality", input_type=Int(optional=True), prefix="--min_mapping_quality", doc=InputDocumentation(doc="Minimum mapping.")), ToolInput(tag="in_coverage_d_type", input_type=String(optional=True), prefix="--coverage_dtype", doc=InputDocumentation(doc="dtype to use for coverage array")), ToolInput(tag="in_allow_out_of_bounds_positions", input_type=Boolean(optional=True), prefix="--allow_out_of_bounds_positions", doc=InputDocumentation(doc="Allows out of bounds positions to not throw fatal\nerrors")), ToolInput(tag="in_safe", input_type=Boolean(optional=True), prefix="--safe", doc=InputDocumentation(doc="Perform checks to prevent certain errors. Is slower.")), ToolInput(tag="in_region", input_type=Int(optional=True), prefix="--region", doc=InputDocumentation(doc="region. Either <chrom> or <chrom>:<start>-<end>,\norigin-0 half-open.")), ToolInput(tag="in_regions_filename", input_type=File(optional=True), prefix="--regions_filename", doc=InputDocumentation(doc="Regions filename. Three columns, origin-0 half-open.\nExtra columns ignored. Multiple allowed.")), ToolInput(tag="in_regions_file_columns", input_type=File(optional=True), prefix="--regions_file_columns", doc=InputDocumentation(doc="Columns in regions file for chrom,start,end. 0-based"))], outputs=[ToolOutput(tag="out_output_vcf_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_vcf_filename", type_hint=File()), doc=OutputDocumentation(doc="Output VCF filename"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Naive_Variant_Caller_Py_V0_1_0().translate("wdl", allow_empty_container=True)

