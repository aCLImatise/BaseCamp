from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Directory, Boolean, Int, Float

Tsplit_Tir_V0_1_0 = CommandToolBuilder(tool="tsplit_TIR", base_command=["tsplit-TIR"], inputs=[ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--infile", doc=InputDocumentation(doc="Multifasta containing complete elements.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="All output files begin with this string. (Default:\n[infile name])")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Write output files to this directory. (Default: cwd)")), ToolInput(tag="in_split_mode", input_type=String(optional=True), prefix="--splitmode", doc=InputDocumentation(doc="all= Report input sequence as well as internal and\nexternal segments. split= Report internal and external\nsegments after splitting. internal = Report only\ninternal segments external = Report only terminal\nrepeat segments. If set to 'None' then only synthetic\nMITES will be reported if --makemites is also set.\n(Default: split)")), ToolInput(tag="in_make_mites", input_type=Boolean(optional=True), prefix="--makemites", doc=InputDocumentation(doc="Attempt to construct synthetic MITE sequences from")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="If set, report progress.")), ToolInput(tag="in_max_dist", input_type=Int(optional=True), prefix="--maxdist", doc=InputDocumentation(doc="Terminal repeat candidates must be no more than this\nmany bases from end of input element. (Default: 2)\nNote: Increase this value if you suspect that your\nelement is nested within some flanking sequence.")), ToolInput(tag="in_mini_d", input_type=Float(optional=True), prefix="--minid", doc=InputDocumentation(doc="Minimum identity between terminal repeat pairs. As\nfloat. (Default: 80.0)")), ToolInput(tag="in_min_term", input_type=Int(optional=True), prefix="--minterm", doc=InputDocumentation(doc="Minimum length for a terminal repeat to be considered.\nEquivalent to nucmer '--mincluster' (Default: 10)")), ToolInput(tag="in_min_seed", input_type=Int(optional=True), prefix="--minseed", doc=InputDocumentation(doc="Minimum length of a maximal exact match to be included\nin final match cluster. Equivalent to nucmer '--\nminmatch'. (Default: 5)")), ToolInput(tag="in_diag_factor", input_type=Float(optional=True), prefix="--diagfactor", doc=InputDocumentation(doc="Maximum diagonal difference factor for clustering of\nmatches within nucmer, i.e. diagonal difference /\nmatch separation (default 0.20) Note: Increase value\nfor greater tolerance of indels between terminal\nrepeats.")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="Select alignment method: 'blastn' or\n'nucmer'.(Default: nucmer)\n")), ToolInput(tag="in_t_irs_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--keeptemp            If set do not remove temp directory on completion."))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Write output files to this directory. (Default: cwd)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tsplit_Tir_V0_1_0().translate("wdl", allow_empty_container=True)

