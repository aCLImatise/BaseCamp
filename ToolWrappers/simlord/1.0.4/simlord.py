from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Float, Boolean, Array, String

Simlord_V0_1_0 = CommandToolBuilder(tool="simlord", base_command=["simlord"], inputs=[ToolInput(tag="in_read_reference", input_type=File(optional=True), prefix="--read-reference", doc=InputDocumentation(doc="Read a reference from PATH to sample reads from")), ToolInput(tag="in_generate_reference", input_type=Int(optional=True), prefix="--generate-reference", doc=InputDocumentation(doc="LENGTH, -gr GC LENGTH\nGenerate a random reference with given GC-content and\ngiven length")), ToolInput(tag="in_save_reference", input_type=File(optional=True), prefix="--save-reference", doc=InputDocumentation(doc="Save the random reference as fasta-file at given PATH.\nBy default, save at output path with\n'_reference.fasta' appended.")), ToolInput(tag="in_num_reads", input_type=Int(optional=True), prefix="--num-reads", doc=InputDocumentation(doc="Number of reads to simulate (1000).")), ToolInput(tag="in_coverage", input_type=Float(optional=True), prefix="--coverage", doc=InputDocumentation(doc="Desired read coverage.")), ToolInput(tag="in_chi_two_params_s", input_type=Int(optional=True), prefix="--chi2-params-s", doc=InputDocumentation(doc="PAR PAR PAR PAR, -xs PAR PAR PAR PAR PAR\nParameters for the curve determining the parameter\nscale for the chi^2 distribution: m,b, z, c, a for\n'm*x + b' if x <= z and 'c * x^-a' if x > z (default=\n(0.01214, -5.12, 675, 48303.0732881,\n1.4691051212330266))")), ToolInput(tag="in_chi_two_params_n", input_type=Int(optional=True), prefix="--chi2-params-n", doc=InputDocumentation(doc="PAR PAR, -xn PAR PAR PAR\nParameters for the function determining the parameter\nn for the chi^2 distribution: m, b, z for 'm*x + b' if\nx < z and 'm*z + b' for x >=z (default=\n(0.00189237136, 2.5394497, 5500)).")), ToolInput(tag="in_max_passes", input_type=Int(optional=True), prefix="--max-passes", doc=InputDocumentation(doc="Maximal number of passes for one molecule (default=\n40).")), ToolInput(tag="in_sqrt_params", input_type=Float(optional=True), prefix="--sqrt-params", doc=InputDocumentation(doc="PAR, -sq PAR PAR\nParameters for the sqare root function for the quality\nincrease: a, b for 'sqrt(x+a) - b' (default= (0.5,\n0.2247))")), ToolInput(tag="in_norm_params", input_type=Float(optional=True), prefix="--norm-params", doc=InputDocumentation(doc="PAR, -nd PAR PAR\nParameters for normal distributed noise added to\nquality increase sqare root function (default= (0,\n0.2))")), ToolInput(tag="in_probability_threshold", input_type=Float(optional=True), prefix="--probability-threshold", doc=InputDocumentation(doc="Upper bound for the modified total error probability\n(default= 0.2)")), ToolInput(tag="in_prob_ins", input_type=Float(optional=True), prefix="--prob-ins", doc=InputDocumentation(doc="Probability for insertions for reads with one pass.\n(default= 0.11)")), ToolInput(tag="in_prob_del", input_type=Float(optional=True), prefix="--prob-del", doc=InputDocumentation(doc="Probability for deletions for reads with one pass.\n(default= 0.04)")), ToolInput(tag="in_prob_sub", input_type=Float(optional=True), prefix="--prob-sub", doc=InputDocumentation(doc="Probability for substitutions for reads with one pass.\n(default= 0.01)")), ToolInput(tag="in_min_read_length", input_type=Int(optional=True), prefix="--min-readlength", doc=InputDocumentation(doc="Minium read length (default= 50) for lognormal\ndistribution")), ToolInput(tag="in_log_norm_read_length", input_type=Boolean(optional=True), prefix="--lognorm-readlength", doc=InputDocumentation(doc="[PARAMETER [PARAMETER ...]], -ln [PARAMETER [PARAMETER ...]]\nParameters for lognormal read length distribution:\n(sigma, loc, scale), empty for defaults")), ToolInput(tag="in_fixed_read_length", input_type=Int(optional=True), prefix="--fixed-readlength", doc=InputDocumentation(doc="Fixed read length for all reads.")), ToolInput(tag="in_sample_read_length_from_fast_q", input_type=Array(t=File(), optional=True), prefix="--sample-readlength-from-fastq", doc=InputDocumentation(doc="Sample read length from a fastq-file at PATH\ncontaining reads.")), ToolInput(tag="in_sample_read_length_from_text", input_type=File(optional=True), prefix="--sample-readlength-from-text", doc=InputDocumentation(doc="Sample read length from a text file (one length per\nline).")), ToolInput(tag="in_sam_output", input_type=File(optional=True), prefix="--sam-output", doc=InputDocumentation(doc="Save the alignments in a sam-file at SAM_OUTPUT. By\ndefault, use OUTPUT_PREFIX.sam.")), ToolInput(tag="in_no_sam", input_type=Boolean(optional=True), prefix="--no-sam", doc=InputDocumentation(doc="Do not calculate the alignment and write a sam file.")), ToolInput(tag="in_gzip", input_type=Boolean(optional=True), prefix="--gzip", doc=InputDocumentation(doc="Compress the simulated reads using gzip and save them\nat OUTPUT_PREFIX.fastq.gz")), ToolInput(tag="in_without_ns", input_type=Boolean(optional=True), prefix="--without-ns", doc=InputDocumentation(doc="Skip regions containing Ns and sample reads only from\nparts completly without Ns.")), ToolInput(tag="in_uniform_chromosome_probability", input_type=Boolean(optional=True), prefix="--uniform-chromosome-probability", doc=InputDocumentation(doc="Sample chromosomes for reads equally distributed\ninstead of weighted by their length. (Was default\nbehaviour up to version 1.0.1)")), ToolInput(tag="in_old_read_names", input_type=Boolean(optional=True), prefix="--old-read-names", doc=InputDocumentation(doc="Use old long read names where all information is\nencoded in one large string. New format is according\nto PacBio convention m\{\}/\{\}/CCS with read\ninformation following after a whitespace.\n")), ToolInput(tag="in_output_prefix_dot_fast_q", input_type=String(), position=1, doc=InputDocumentation(doc="optional arguments:"))], outputs=[ToolOutput(tag="out_save_reference", output_type=File(optional=True), selector=InputSelector(input_to_select="in_save_reference", type_hint=File()), doc=OutputDocumentation(doc="Save the random reference as fasta-file at given PATH.\nBy default, save at output path with\n'_reference.fasta' appended."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Simlord_V0_1_0().translate("wdl", allow_empty_container=True)

