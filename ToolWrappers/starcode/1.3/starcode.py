from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Starcode_V0_1_0 = CommandToolBuilder(tool="starcode", base_command=["starcode"], inputs=[ToolInput(tag="in_dist", input_type=Boolean(optional=True), prefix="--dist", doc=InputDocumentation(doc=": maximum Levenshtein distance (default auto)")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc=": number of concurrent threads (default 1)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc=": quiet output (default verbose)")), ToolInput(tag="in_cluster_ratio", input_type=Boolean(optional=True), prefix="--cluster-ratio", doc=InputDocumentation(doc=": min size ratio for merging clusters in\nmessage passing (default 5.0)")), ToolInput(tag="in_sphere", input_type=Boolean(optional=True), prefix="--sphere", doc=InputDocumentation(doc=": use sphere clustering algorithm")), ToolInput(tag="in_connected_comp", input_type=Boolean(optional=True), prefix="--connected-comp", doc=InputDocumentation(doc=": cluster connected components")), ToolInput(tag="in_input", input_type=Boolean(optional=True), prefix="--input", doc=InputDocumentation(doc=": input file (default stdin)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc=": output file (default stdout)")), ToolInput(tag="in_input_one", input_type=Boolean(optional=True), prefix="--input1", doc=InputDocumentation(doc=": input file 1")), ToolInput(tag="in_input_two", input_type=Boolean(optional=True), prefix="--input2", doc=InputDocumentation(doc=": input file 2")), ToolInput(tag="in_output_one", input_type=Boolean(optional=True), prefix="--output1", doc=InputDocumentation(doc=": output file1 (default input1-starcode.fastq)")), ToolInput(tag="in_output_two", input_type=Boolean(optional=True), prefix="--output2", doc=InputDocumentation(doc=": output file2 (default input2-starcode.fastq)")), ToolInput(tag="in_non_redundant", input_type=Boolean(optional=True), prefix="--non-redundant", doc=InputDocumentation(doc=": remove redundant sequences from input file(s)")), ToolInput(tag="in_print_clusters", input_type=Boolean(optional=True), prefix="--print-clusters", doc=InputDocumentation(doc=": outputs cluster compositions")), ToolInput(tag="in_seq_id", input_type=Boolean(optional=True), prefix="--seq-id", doc=InputDocumentation(doc=": print sequence id numbers (1-based)"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc=": output file (default stdout)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Starcode_V0_1_0().translate("wdl", allow_empty_container=True)

