from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Arv_Run_Pipeline_Instance_V0_1_0 = CommandToolBuilder(tool="arv_run_pipeline_instance", base_command=["arv-run-pipeline-instance"], inputs=[ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry-run", doc=InputDocumentation(doc="Do not start any new jobs or wait for existing jobs to\nfinish. Just find out whether jobs are finished,\nqueued, or running for each component.")), ToolInput(tag="in_status_text", input_type=File(optional=True), prefix="--status-text", doc=InputDocumentation(doc="Store plain text status in given file. (Default:\n/dev/stdout)")), ToolInput(tag="in_status_json", input_type=File(optional=True), prefix="--status-json", doc=InputDocumentation(doc="Store json-formatted pipeline in given file. (Default:\n/dev/null)")), ToolInput(tag="in_no_wait", input_type=Boolean(optional=True), prefix="--no-wait", doc=InputDocumentation(doc="Do not wait for jobs to finish. Just look up status,\nsubmit new jobs if needed, and exit.")), ToolInput(tag="in_no_reuse", input_type=Boolean(optional=True), prefix="--no-reuse", doc=InputDocumentation(doc="Do not reuse existing jobs to satisfy pipeline\ncomponents. Submit a new job for every component.")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Print extra debugging information on stderr.")), ToolInput(tag="in_debug_level", input_type=String(optional=True), prefix="--debug-level", doc=InputDocumentation(doc="Set debug verbosity level.")), ToolInput(tag="in_template", input_type=File(optional=True), prefix="--template", doc=InputDocumentation(doc="UUID of pipeline template, or path to local pipeline\ntemplate file.")), ToolInput(tag="in_instance", input_type=String(optional=True), prefix="--instance", doc=InputDocumentation(doc="UUID of pipeline instance.")), ToolInput(tag="in_submit", input_type=Boolean(optional=True), prefix="--submit", doc=InputDocumentation(doc="Submit the pipeline instance to the server, and exit.\nLet the Crunch dispatch service satisfy the components\nby finding/running jobs.")), ToolInput(tag="in_run_pipeline_here", input_type=Boolean(optional=True), prefix="--run-pipeline-here", doc=InputDocumentation(doc="Manage the pipeline instance in-process. Submit jobs\nto Crunch as needed. Do not exit until the pipeline\nfinishes (or fails).")), ToolInput(tag="in_run_jobs_here", input_type=Boolean(optional=True), prefix="--run-jobs-here", doc=InputDocumentation(doc="Run jobs in the local terminal session instead of\nsubmitting them to Crunch. Implies\n--run-pipeline-here. Note: this results in a\nsignificantly different job execution environment, and\nsome Crunch features are not supported. It can be\nnecessary to modify a pipeline in order to make it run\nthis way.")), ToolInput(tag="in_run_here", input_type=Boolean(optional=True), prefix="--run-here", doc=InputDocumentation(doc="Synonym for --run-jobs-here.")), ToolInput(tag="in_description", input_type=String(optional=True), prefix="--description", doc=InputDocumentation(doc="Description for the pipeline instance.")), ToolInput(tag="in_project_uuid", input_type=String(optional=True), prefix="--project-uuid", doc=InputDocumentation(doc="UUID of the project for the pipeline instance.")), ToolInput(tag="in_name_dot", input_type=String(), position=0, doc=InputDocumentation(doc="component_name::param_name=param_value"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Arv_Run_Pipeline_Instance_V0_1_0().translate("wdl", allow_empty_container=True)

