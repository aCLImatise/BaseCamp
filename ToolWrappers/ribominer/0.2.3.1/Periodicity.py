from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, String, Int

Periodicity_V0_1_0 = CommandToolBuilder(tool="Periodicity", base_command=["Periodicity"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Input file(s) in bam format.")), ToolInput(tag="in_an_not_dir", input_type=Directory(optional=True), prefix="--annot_dir", doc=InputDocumentation(doc="transcripts annotation directory, generated by\nprepare_transcripts, a function of RiboCode.")), ToolInput(tag="in_coordinate_file", input_type=File(optional=True), prefix="--coordinateFile", doc=InputDocumentation(doc="The file should contain the coordinate of start and\nstop codon. Generated by\nOutputTranscriptInfo.py.[required]")), ToolInput(tag="in_ot_put_prefix", input_type=String(optional=True), prefix="--otput_prefix", doc=InputDocumentation(doc="Prefix of output files.[required]")), ToolInput(tag="in_left_length", input_type=Int(optional=True), prefix="--left_length", doc=InputDocumentation(doc="The left range of read length we will consider.")), ToolInput(tag="in_right_length", input_type=Int(optional=True), prefix="--right_length", doc=InputDocumentation(doc="The right range of read length we will consider.")), ToolInput(tag="in_select_trans_list", input_type=String(optional=True), prefix="--select_trans_list", doc=InputDocumentation(doc="Selected transcript list used for metagene\nanalysis.This files requires the first column must be\nthe transcript ID  with a column name.")), ToolInput(tag="in_id_type", input_type=String(optional=True), prefix="--id-type", doc=InputDocumentation(doc="define the id type users input. the default is\ntranscript id, if not, will be transformed into\ntranscript id. transcript_id=default\n"))], outputs=[], container="quay.io/biocontainers/ribominer:0.2.3.1--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Periodicity_V0_1_0().translate("wdl")

