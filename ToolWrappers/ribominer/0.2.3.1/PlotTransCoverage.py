from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int

Plottranscoverage_V0_1_0 = CommandToolBuilder(tool="PlotTransCoverage", base_command=["PlotTransCoverage"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Coverage file generated by\nCoverageOfEachTrans.py.[required]")), ToolInput(tag="in_ot_put_prefix", input_type=String(optional=True), prefix="--otput_prefix", doc=InputDocumentation(doc="Prefix of output files.[required]")), ToolInput(tag="in_coordinate_file", input_type=File(optional=True), prefix="--coordinateFile", doc=InputDocumentation(doc="The file should contain the coordinate of start and\nstop codon. Generated by\nOutputTranscriptInfo.py.[required]")), ToolInput(tag="in_target_gene", input_type=File(optional=True), prefix="--target-gene", doc=InputDocumentation(doc="Target genes for plot. If '-m single-gene', '-t' is a\ngene name or gene id or transcript id; elif '-m gene-\nlist', '-t' is a file containing some gene names or\ngene ids or transcript ids with a column name.")), ToolInput(tag="in_id_type", input_type=String(optional=True), prefix="--id-type", doc=InputDocumentation(doc="define the id type users input. the default is\ntranscript id, if not, will be transformed into\ntranscript id. default=transcript_id")), ToolInput(tag="in_color", input_type=String(optional=True), prefix="--color", doc=InputDocumentation(doc="Color for plot. default=lightskyblue")), ToolInput(tag="in_ymax", input_type=Int(optional=True), prefix="--ymax", doc=InputDocumentation(doc="The max of ylim. default=none")), ToolInput(tag="in_ymin", input_type=Int(optional=True), prefix="--ymin", doc=InputDocumentation(doc="The min of ylim. default=none")), ToolInput(tag="in_type", input_type=String(optional=True), prefix="--type", doc=InputDocumentation(doc="Type for input. Either 'single-gene' or 'gene-list'.\ndefault=single-gene.")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Mode of calculation. Either coverage or density of a\ntranscript or transcripts. default=coverage\n"))], outputs=[], container="quay.io/biocontainers/ribominer:0.2.3.1--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Plottranscoverage_V0_1_0().translate("wdl")

