from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Directory

Run_Dbcan_Py_V0_1_0 = CommandToolBuilder(tool="run_dbcan.py", base_command=["run_dbcan.py"], inputs=[ToolInput(tag="in_cluster", input_type=File(optional=True), prefix="--cluster", doc=InputDocumentation(doc="Predict CGCs via CGCFinder. This argument requires an\nauxillary locations file if a protein input is being\nused")), ToolInput(tag="in_db_can_file", input_type=File(optional=True), prefix="--dbCANFile", doc=InputDocumentation(doc="Indicate the file name of HMM database such as\ndbCAN.txt, please use the newest one from dbCAN2\nwebsite.")), ToolInput(tag="in_dia_eval", input_type=String(optional=True), prefix="--dia_eval", doc=InputDocumentation(doc="DIAMOND E Value")), ToolInput(tag="in_dia_cpu", input_type=Int(optional=True), prefix="--dia_cpu", doc=InputDocumentation(doc="Number of CPU cores that DIAMOND is allowed to use")), ToolInput(tag="in_hmm_eval", input_type=String(optional=True), prefix="--hmm_eval", doc=InputDocumentation(doc="HMMER E Value")), ToolInput(tag="in_hmm_cov", input_type=String(optional=True), prefix="--hmm_cov", doc=InputDocumentation(doc="HMMER Coverage val")), ToolInput(tag="in_hmm_cpu", input_type=Int(optional=True), prefix="--hmm_cpu", doc=InputDocumentation(doc="Number of CPU cores that HMMER is allowed to use")), ToolInput(tag="in_hot_pep_hits", input_type=String(optional=True), prefix="--hotpep_hits", doc=InputDocumentation(doc="Hotpep Hit value")), ToolInput(tag="in_hot_pep_freq", input_type=String(optional=True), prefix="--hotpep_freq", doc=InputDocumentation(doc="Hotpep Frequency value")), ToolInput(tag="in_hot_pep_cpu", input_type=Int(optional=True), prefix="--hotpep_cpu", doc=InputDocumentation(doc="Number of CPU cores that Hotpep is allowed to use")), ToolInput(tag="in_tf_eval", input_type=String(optional=True), prefix="--tf_eval", doc=InputDocumentation(doc="tf.hmm HMMER E Value")), ToolInput(tag="in_tf_cov", input_type=String(optional=True), prefix="--tf_cov", doc=InputDocumentation(doc="tf.hmm HMMER Coverage val")), ToolInput(tag="in_tf_cpu", input_type=Int(optional=True), prefix="--tf_cpu", doc=InputDocumentation(doc="tf.hmm Number of CPU cores that HMMER is allowed to")), ToolInput(tag="in_stp_cov", input_type=String(optional=True), prefix="--stp_cov", doc=InputDocumentation(doc="stp.hmm HMMER Coverage val")), ToolInput(tag="in_stp_cpu", input_type=Int(optional=True), prefix="--stp_cpu", doc=InputDocumentation(doc="stp.hmm Number of CPU cores that HMMER is allowed to")), ToolInput(tag="in_out_dir", input_type=Directory(optional=True), prefix="--out_dir", doc=InputDocumentation(doc="Output directory")), ToolInput(tag="in_db_dir", input_type=Directory(optional=True), prefix="--db_dir", doc=InputDocumentation(doc="Database directory")), ToolInput(tag="in_cgc_dis", input_type=String(optional=True), prefix="--cgc_dis", doc=InputDocumentation(doc="CGCFinder Distance value")), ToolInput(tag="in_cgc_sig_genes", input_type=String(optional=True), prefix="--cgc_sig_genes", doc=InputDocumentation(doc="CGCFinder Signature Genes value")), ToolInput(tag="in_tools", input_type=String(optional=True), prefix="--tools", doc=InputDocumentation(doc="[{hmmer,diamond,hotpep,all} ...], -t {hmmer,diamond,hotpep,all} [{hmmer,diamond,hotpep,all} ...]\nChoose a combination of tools to run")), ToolInput(tag="in_use_signalp", input_type=String(optional=True), prefix="--use_signalP", doc=InputDocumentation(doc="Use signalP or not, remember, you need to setup\nsignalP tool first. Because of signalP license, Docker\nversion does not have signalP.")), ToolInput(tag="in_gram", input_type=String(optional=True), prefix="--gram", doc=InputDocumentation(doc="Choose gram+(p) or gram-(n) for proteome/prokaryote\nnucleotide, which are params of SingalP, only if user\nuse singalP\n")), ToolInput(tag="in_input_file", input_type=String(), position=0, doc=InputDocumentation(doc="User input file. Must be in FASTA format."))], outputs=[ToolOutput(tag="out_out_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory"))], container="quay.io/biocontainers/run-dbcan:2.0.11--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Run_Dbcan_Py_V0_1_0().translate("wdl")

