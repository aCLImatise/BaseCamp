from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean

Gretel_V0_1_0 = CommandToolBuilder(tool="gretel", base_command=["gretel"], inputs=[ToolInput(tag="in_start", input_type=Int(optional=True), prefix="--start", doc=InputDocumentation(doc="1-indexed included start base position [default: 1]")), ToolInput(tag="in_end", input_type=Int(optional=True), prefix="--end", doc=InputDocumentation(doc="1-indexed inlcuded end base position [default:\nreference length]")), ToolInput(tag="in_paths", input_type=Int(optional=True), prefix="--paths", doc=InputDocumentation(doc="Maximum number of paths to generate [default:100]")), ToolInput(tag="in_master", input_type=String(optional=True), prefix="--master", doc=InputDocumentation(doc="Master sequence (will be used to fill in homogeneous\ngaps in haplotypes, otherwise --gapchar)")), ToolInput(tag="in_gap_char", input_type=String(optional=True), prefix="--gapchar", doc=InputDocumentation(doc="Character to fill homogeneous gaps in haplotypes if no")), ToolInput(tag="in_del_char", input_type=String(optional=True), prefix="--delchar", doc=InputDocumentation(doc="Character to output in haplotype for deletion (eg. -)\n[default is blank]")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Don't output anything other than a single summary")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of BAM iterators [default 1]")), ToolInput(tag="in_debug_reads", input_type=String(optional=True), prefix="--debugreads", doc=InputDocumentation(doc="A newline delimited list of read names to output debug\ndata when parsing the BAM")), ToolInput(tag="in_debug_pos", input_type=Int(optional=True), prefix="--debugpos", doc=InputDocumentation(doc="A newline delimited list of 1-indexed genomic\npositions to output debug data when parsing the BAM")), ToolInput(tag="in_debug_hp_os", input_type=Int(optional=True), prefix="--debughpos", doc=InputDocumentation(doc="A comma delimited list of 1-indexed SNP positions to\noutput debug data when predicting haplotypes")), ToolInput(tag="in_dump_matrix", input_type=String(optional=True), prefix="--dumpmatrix", doc=InputDocumentation(doc="Location to dump the Hansel matrix to disk")), ToolInput(tag="in_dump_snps", input_type=String(optional=True), prefix="--dumpsnps", doc=InputDocumentation(doc="Location to dump the SNP positions to disk")), ToolInput(tag="in_pepper", input_type=Boolean(optional=True), prefix="--pepper", doc=InputDocumentation(doc="enable a more permissive pileup by setting the pysam\npileup stepper to 'all', instead of 'samtools'. Note\nthat this will allow improper pairs.")), ToolInput(tag="in_bam", input_type=String(), position=0, doc=InputDocumentation(doc="vcf")), ToolInput(tag="in_contig", input_type=String(), position=1, doc=InputDocumentation(doc="optional arguments:")), ToolInput(tag="in_line_dot", input_type=String(), position=2, doc=InputDocumentation(doc="-o OUT, --out OUT     Output directory [default .]"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gretel_V0_1_0().translate("wdl", allow_empty_container=True)

