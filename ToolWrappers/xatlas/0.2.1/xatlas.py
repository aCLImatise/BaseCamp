from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Int

Xatlas_V0_1_0 = CommandToolBuilder(tool="xatlas", base_command=["xatlas"], inputs=[ToolInput(tag="in_ref", input_type=String(optional=True), prefix="--ref", doc=InputDocumentation(doc="Reference genome in FASTA format")), ToolInput(tag="in_in", input_type=File(optional=True), prefix="--in", doc=InputDocumentation(doc="Sorted and indexed input BAM or CRAM file")), ToolInput(tag="in_sample_name", input_type=File(optional=True), prefix="--sample-name", doc=InputDocumentation(doc="Sample name to use in the output VCF file")), ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Output VCF file prefix")), ToolInput(tag="in_multithread", input_type=Boolean(optional=True), prefix="--multithread", doc=InputDocumentation(doc="Read alignment file and process records in separate threads")), ToolInput(tag="in_num_hts_threads", input_type=Int(optional=True), prefix="--num-hts-threads", doc=InputDocumentation(doc="Number of HTSlib decompression threads to spawn")), ToolInput(tag="in_capture_bed", input_type=File(optional=True), prefix="--capture-bed", doc=InputDocumentation(doc="BED file of regions to process")), ToolInput(tag="in_min_p_value", input_type=Boolean(optional=True), prefix="--min-p-value", doc=InputDocumentation(doc="Minimum logit P-value to report variants")), ToolInput(tag="in_min_snp_mapq", input_type=Int(optional=True), prefix="--min-snp-mapq", doc=InputDocumentation(doc="Minimum read mapping quality for calling SNPs")), ToolInput(tag="in_min_in_del_mapq", input_type=Int(optional=True), prefix="--min-indel-mapq", doc=InputDocumentation(doc="Minimum read mapping quality for calling indels")), ToolInput(tag="in_max_coverage", input_type=Int(optional=True), prefix="--max-coverage", doc=InputDocumentation(doc="Maximum coverage for calling variants normally")), ToolInput(tag="in_block_abs_lim", input_type=String(optional=True), prefix="--block-abs-lim", doc=InputDocumentation(doc="gVCF non-variant block absolute range limit")), ToolInput(tag="in_block_rel_lim", input_type=String(optional=True), prefix="--block-rel-lim", doc=InputDocumentation(doc="gVCF non-variant block relative range limit coefficient")), ToolInput(tag="in_gvc_f", input_type=File(optional=True), prefix="--gvcf", doc=InputDocumentation(doc="Include non-variant gVCF blocks in output VCF file")), ToolInput(tag="in_bg_zf", input_type=Boolean(optional=True), prefix="--bgzf", doc=InputDocumentation(doc="Write output in bgzip-compressed VCF format")), ToolInput(tag="in_snp_log_it_params", input_type=File(optional=True), prefix="--snp-logit-params", doc=InputDocumentation(doc="File with intercept and coefficients for SNP logit model")), ToolInput(tag="in_in_del_log_it_params", input_type=File(optional=True), prefix="--indel-logit-params", doc=InputDocumentation(doc="File with intercept and coefficients for indel logit model")), ToolInput(tag="in_enable_strand_filter", input_type=Boolean(optional=True), prefix="--enable-strand-filter", doc=InputDocumentation(doc="Enable SNP filter for single-strandedness"))], outputs=[ToolOutput(tag="out_sample_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sample_name", type_hint=File()), doc=OutputDocumentation(doc="Sample name to use in the output VCF file")), ToolOutput(tag="out_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prefix", type_hint=File()), doc=OutputDocumentation(doc="Output VCF file prefix")), ToolOutput(tag="out_gvc_f", output_type=File(optional=True), selector=InputSelector(input_to_select="in_gvc_f", type_hint=File()), doc=OutputDocumentation(doc="Include non-variant gVCF blocks in output VCF file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Xatlas_V0_1_0().translate("wdl", allow_empty_container=True)

