from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, Float, String

Quorum_Error_Correct_Reads_V0_1_0 = CommandToolBuilder(tool="quorum_error_correct_reads", base_command=["quorum_error_correct_reads"], inputs=[ToolInput(tag="in_thread", input_type=Int(optional=True), prefix="--thread", doc=InputDocumentation(doc="Number of threads (1)")), ToolInput(tag="in_min_count", input_type=Int(optional=True), prefix="--min-count", doc=InputDocumentation(doc="Minimum count for a k-mer to be considered 'good' (1)")), ToolInput(tag="in_skip", input_type=Int(optional=True), prefix="--skip", doc=InputDocumentation(doc="Number of bases to skip for start k-mer (1)")), ToolInput(tag="in_good", input_type=Int(optional=True), prefix="--good", doc=InputDocumentation(doc="Number of good k-mer in a row for anchor (2)")), ToolInput(tag="in_anchor_count", input_type=Int(optional=True), prefix="--anchor-count", doc=InputDocumentation(doc="Minimum count for an anchor k-mer (3)")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc="Size of window (10)")), ToolInput(tag="in_error", input_type=Int(optional=True), prefix="--error", doc=InputDocumentation(doc="Maximum number of error in a window (3)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file prefix (error_corrected)")), ToolInput(tag="in_contaminant", input_type=File(optional=True), prefix="--contaminant", doc=InputDocumentation(doc="Jellyfish database of contaminant k-mers")), ToolInput(tag="in_trim_contaminant", input_type=Boolean(optional=True), prefix="--trim-contaminant", doc=InputDocumentation(doc="Trim reads containing contaminated k-mers instead of discarding (false)")), ToolInput(tag="in_homo_trim", input_type=Int(optional=True), prefix="--homo-trim", doc=InputDocumentation(doc="Trim homo-polymer run at the 3' end")), ToolInput(tag="in_gzip", input_type=File(optional=True), prefix="--gzip", doc=InputDocumentation(doc="Gzip output file (false)")), ToolInput(tag="in_no_mmap", input_type=Boolean(optional=True), prefix="--no-mmap", doc=InputDocumentation(doc="Do not memory map the input mer database (false)")), ToolInput(tag="in_a_priori_error_rate", input_type=Float(optional=True), prefix="--apriori-error-rate", doc=InputDocumentation(doc="Probability of a base being an error (0.01)")), ToolInput(tag="in_poisson_threshold", input_type=Float(optional=True), prefix="--poisson-threshold", doc=InputDocumentation(doc="Error probability threshold in Poisson test (1.0e-06)")), ToolInput(tag="in_cut_off", input_type=Int(optional=True), prefix="--cutoff", doc=InputDocumentation(doc="Poisson cutoff when there are multiple choices")), ToolInput(tag="in_qual_cut_off_value", input_type=Int(optional=True), prefix="--qual-cutoff-value", doc=InputDocumentation(doc="Any base above with quality equal or greater is untouched when there are multiple choices")), ToolInput(tag="in_qual_cut_off_char", input_type=String(optional=True), prefix="--qual-cutoff-char", doc=InputDocumentation(doc="Any base above with quality equal or greater is untouched when there are multiple choices")), ToolInput(tag="in_no_discard", input_type=Boolean(optional=True), prefix="--no-discard", doc=InputDocumentation(doc="Do not discard reads, output a single N (false)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose (false)")), ToolInput(tag="in_error_correct_reads", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_db", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file prefix (error_corrected)")), ToolOutput(tag="out_gzip", output_type=File(optional=True), selector=InputSelector(input_to_select="in_gzip", type_hint=File()), doc=OutputDocumentation(doc="Gzip output file (false)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Quorum_Error_Correct_Reads_V0_1_0().translate("wdl", allow_empty_container=True)

