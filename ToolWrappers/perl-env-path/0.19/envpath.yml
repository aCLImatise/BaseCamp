!Command
command:
- envpath
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -A
  description: Append TOKEN to the path variable named 'VAR'
  args: !SimpleFlagArg
    name: TOKEN
- !Flag
  optional: true
  synonyms:
  - -C
  description: =newdir     Change <olddir> to <newdir> within 'VAR'
  args: !SimpleFlagArg
    name: olddir
- !Flag
  optional: true
  synonyms:
  - -P
  description: Prepend TOKEN to the path variable named 'VAR'
  args: !SimpleFlagArg
    name: TOKEN
- !Flag
  optional: true
  synonyms:
  - -I
  description: ",(-|+)TOKEN]   Insert TOKEN before (-) or after (+) 'dir' in VAR"
  args: !SimpleFlagArg
    name: dir
- !Flag
  optional: true
  synonyms:
  - -L
  description: '[VAR]             List specified pathvar(s) in one-entry-per-line
    fmt'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -N
  description: Remove entries which don't exist
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -R
  description: Remove specified dir from path
  args: !SimpleFlagArg
    name: TOKEN
- !Flag
  optional: true
  synonyms:
  - -S
  description: '[VAR]             Print specified pathvars in form suitable for `eval`'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -U
  description: Remove redundant entries from path
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -W
  description: Like 'whence' ksh builtin - look for 'file' on PATH
  args: !SimpleFlagArg
    name: file
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -help
  description: Print this message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "Usage: envpath [VAR=TOKEN,TOKEN,...] ... [-N] [-U]\n                 [-E\
  \ VAR [-A TOKEN] [-P TOKEN] [-I dir,-|+TOKEN]] [-C old=new]\n                 [--]\
  \ command ...\n       envpath [VAR=TOKEN,TOKEN,...] [-E VAR] -L|-S\nFlags:\n   -help\t\
  \tPrint this message and exit\n   -A TOKEN\t\tAppend TOKEN to the path variable\
  \ named 'VAR'\n   -C olddir=newdir\tChange <olddir> to <newdir> within 'VAR'\n \
  \  -P TOKEN\t\tPrepend TOKEN to the path variable named 'VAR'\n   -I dir,(-|+)TOKEN]\t\
  Insert TOKEN before (-) or after (+) 'dir' in VAR\n   -L [VAR]\t\tList specified\
  \ pathvar(s) in one-entry-per-line fmt\n   -N\t\t\tRemove entries which don't exist\n\
  \   -R TOKEN\t\tRemove specified dir from path\n   -S [VAR]\t\tPrint specified pathvars\
  \ in form suitable for `eval`\n   -U\t\t\tRemove redundant entries from path\n \
  \  -W file\t\tLike 'whence' ksh builtin - look for 'file' on PATH\nExamples:\n \
  \   envpath PATH=/tools/@PLATFORM@/bin,@PATH@ -- printenv PATH\n    envpath CLASSPATH=@CLASSPATH@,@JAVA_HOME@/classes\
  \ printenv CLASSPATH\n    envpath -E LD_RUN_PATH -A /usr/openwin/lib -U -- ld ...\n\
  \    envpath -E LD_RUN_PATH -I /usr/openwin/lib,-@LD_LIBRARY_PATH@ ld ...\n    envpath\
  \ -L\n    envpath -E CLASSPATH -L\n    envpath -C /opt/netscape=/usr/local/netscape\
  \ -L\n    eval `envpath -N -U -R /usr/ucb -S`\n    eval `envpath -E LD_RUN_PATH\
  \ -I /usr/openwin/lib,-/usr/local/lib -S`\n    envpath -W cat\n\nIn the above, TOKEN\
  \ refers to a string which may optionally contain\nreferences to environment variables\
  \ in the form @VAR@. These will be\nreplaced by the value $VAR, and the commas will\
  \ be replaced by the\nappropriate path separator (':' or ';') for the current platform.\n\
  See \"perldoc envpath\" and \"perldoc Env::Path\" for full documentation.\n"
generated_using:
- --help
docker_image:
