from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, String, Directory, File

Runlsc_Py_V0_1_0 = CommandToolBuilder(tool="runLSC.py", base_command=["runLSC.py"], inputs=[ToolInput(tag="in_long_reads", input_type=Int(optional=True), prefix="--long_reads", doc=InputDocumentation(doc="FASTAFILE Long reads to correct. Required in mode 0 or\n1. (default: None)")), ToolInput(tag="in_short_reads", input_type=Boolean(optional=True), prefix="--short_reads", doc=InputDocumentation(doc="[SHORT_READS [SHORT_READS ...]]\nFASTA/FASTQ FILE Short reads used to correct the long\nreads. Can be multiple files. If choice is cps reads,\nthen there must be 2 files, the cps and the idx file\nfollowing --short reads. Required in mode 0 or 1.\n(default: None)")), ToolInput(tag="in_short_read_file_type", input_type=String(optional=True), prefix="--short_read_file_type", doc=InputDocumentation(doc="Short read file type (default: fa)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads (Default = cpu_count) (default: 0)")), ToolInput(tag="in_tempdir", input_type=String(optional=True), prefix="--tempdir", doc=InputDocumentation(doc="FOLDERNAME where temporary files can be placed\n(default: /tmp)")), ToolInput(tag="in_specific_tempdir", input_type=Int(optional=True), prefix="--specific_tempdir", doc=InputDocumentation(doc="FOLDERNAME of exactly where to place temproary\nfolders. Required in mode 1, 2 or 3. Recommended for\nany run where you may want to look back at\nintermediate files. (default: None)")), ToolInput(tag="in_output", input_type=Int(optional=True), prefix="--output", doc=InputDocumentation(doc="FOLDERNAME where output is to be written. Required in\nmode 0 or 3. (default: None)")), ToolInput(tag="in_mode", input_type=Directory(optional=True), prefix="--mode", doc=InputDocumentation(doc="0: run through, 1: Prepare homopolymer compressed long\nand short reads. 2: Execute correction on batches of\nlong reads. Can be superseded by --parallelized_mode_2\nwhere you will only execute a single batch. 3: Combine\ncorrected batches into a final output folder.\n(default: 0)")), ToolInput(tag="in_parallelized_mode_two", input_type=Int(optional=True), prefix="--parallelized_mode_2", doc=InputDocumentation(doc="Mode 2, but you specify a sigle batch to execute.\n(default: None)")), ToolInput(tag="in_aligner", input_type=String(optional=True), prefix="--aligner", doc=InputDocumentation(doc="Aligner choice. hisat parameters have not been\noptimized, so we recommend bowtie2. (default: bowtie2)")), ToolInput(tag="in_sort_mem_max", input_type=Int(optional=True), prefix="--sort_mem_max", doc=InputDocumentation(doc="for memory in unix sort (default: None)")), ToolInput(tag="in_min_number_of_non_n", input_type=Int(optional=True), prefix="--minNumberofNonN", doc=InputDocumentation(doc="Minimum number of non-N characters in the compressed\nread (default: 40)")), ToolInput(tag="in_max_n", input_type=Int(optional=True), prefix="--maxN", doc=InputDocumentation(doc="Maximum number of Ns in the compressed read (default:\nNone)")), ToolInput(tag="in_error_rate_threshold", input_type=Int(optional=True), prefix="--error_rate_threshold", doc=InputDocumentation(doc="Maximum percent of errors in a read to use the\nalignment (default: 12)")), ToolInput(tag="in_short_read_coverage_threshold", input_type=Int(optional=True), prefix="--short_read_coverage_threshold", doc=InputDocumentation(doc="Minimum short read coverage to do correction (default:\n20)")), ToolInput(tag="in_long_read_batch_size", input_type=Int(optional=True), prefix="--long_read_batch_size", doc=InputDocumentation(doc="INT number of long reads to work on at a time. This is\na key parameter to adjusting performance. A smaller\nbatch size keeps the sizes and runtimes of\nintermediate steps tractable on large datasets, but\ncan slow down execution on small datasets. The default\nvalue should be suitable for large datasets. (default:\n500)")), ToolInput(tag="in_sam_tools_path", input_type=File(optional=True), prefix="--samtools_path", doc=InputDocumentation(doc="Path to samtools by default assumes its installed. If\nnot specified, the included version will be used.\n(default: /usr/local/bin)\n"))], outputs=[ToolOutput(tag="out_mode", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_mode", type_hint=File()), doc=OutputDocumentation(doc="0: run through, 1: Prepare homopolymer compressed long\nand short reads. 2: Execute correction on batches of\nlong reads. Can be superseded by --parallelized_mode_2\nwhere you will only execute a single batch. 3: Combine\ncorrected batches into a final output folder.\n(default: 0)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Runlsc_Py_V0_1_0().translate("wdl", allow_empty_container=True)

