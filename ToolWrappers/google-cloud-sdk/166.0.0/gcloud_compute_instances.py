from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String

Gcloud_Compute_Instances_V0_1_0 = CommandToolBuilder(tool="gcloud_compute_instances", base_command=["gcloud", "compute", "instances"], inputs=[ToolInput(tag="in_add_access_config", input_type=String(), position=0, doc=InputDocumentation(doc="Create a Google Compute Engine virtual machine access configuration.")), ToolInput(tag="in_add_labels", input_type=String(), position=1, doc=InputDocumentation(doc="Add labels to Google Compute Engine virtual machine instances.")), ToolInput(tag="in_add_metadata", input_type=String(), position=2, doc=InputDocumentation(doc="Add or update instance metadata.")), ToolInput(tag="in_add_tags", input_type=String(), position=3, doc=InputDocumentation(doc="Add tags to Google Compute Engine virtual machine instances.")), ToolInput(tag="in_attach_disk", input_type=String(), position=4, doc=InputDocumentation(doc="Attach a disk to an instance.")), ToolInput(tag="in_create", input_type=String(), position=5, doc=InputDocumentation(doc="Create Google Compute Engine virtual machine instances.")), ToolInput(tag="in_delete", input_type=String(), position=6, doc=InputDocumentation(doc="Delete Google Compute Engine virtual machine instances.")), ToolInput(tag="in_delete_access_config", input_type=String(), position=7, doc=InputDocumentation(doc="Delete an access configuration from a virtual machine network")), ToolInput(tag="in_interface_dot", input_type=String(), position=8, doc=InputDocumentation(doc="describe")), ToolInput(tag="in_detach_disk", input_type=String(), position=0, doc=InputDocumentation(doc="Detach disks from Compute Engine virtual machine instances.")), ToolInput(tag="in_get_serial_port_output", input_type=String(), position=1, doc=InputDocumentation(doc="Read output from a virtual machine instance's serial port.")), ToolInput(tag="in_list", input_type=String(), position=2, doc=InputDocumentation(doc="List Google Compute Engine instances.")), ToolInput(tag="in_move", input_type=String(), position=3, doc=InputDocumentation(doc="Move an instance and its attached persistent disks between zones.")), ToolInput(tag="in_remove_labels", input_type=String(), position=4, doc=InputDocumentation(doc="Remove labels from Google Compute Engine virtual machine instances.")), ToolInput(tag="in_remove_metadata", input_type=String(), position=5, doc=InputDocumentation(doc="Remove instance metadata.")), ToolInput(tag="in_remove_tags", input_type=String(), position=6, doc=InputDocumentation(doc="Remove tags from Google Compute Engine virtual machine instances.")), ToolInput(tag="in_reset", input_type=String(), position=7, doc=InputDocumentation(doc="Reset a virtual machine instance.")), ToolInput(tag="in_set_disk_auto_delete", input_type=String(), position=8, doc=InputDocumentation(doc="Set auto-delete behavior for disks.")), ToolInput(tag="in_set_machine_type", input_type=String(), position=9, doc=InputDocumentation(doc="Set machine type for Google Compute Engine virtual machines.")), ToolInput(tag="in_set_scheduling", input_type=String(), position=10, doc=InputDocumentation(doc="Set scheduling options for Google Compute Engine virtual machines.")), ToolInput(tag="in_set_service_account", input_type=String(), position=11, doc=InputDocumentation(doc="Set service account and scopes for a Google Compute Engine instance.")), ToolInput(tag="in_start", input_type=String(), position=12, doc=InputDocumentation(doc="Start a stopped virtual machine instance.")), ToolInput(tag="in_stop", input_type=String(), position=13, doc=InputDocumentation(doc="Stop a virtual machine instance.")), ToolInput(tag="in_tail_serial_port_output", input_type=String(), position=14, doc=InputDocumentation(doc="Periodically fetch new output from a virtual machine instance's serial\nport and display it as it becomes available.")), ToolInput(tag="in_update", input_type=String(), position=15, doc=InputDocumentation(doc="Update a Google Compute Engine virtual machine."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gcloud_Compute_Instances_V0_1_0().translate("wdl", allow_empty_container=True)

