!Command
command:
- gsutil
- rsync
positional:
- !Positional
  optional: false
  position: 0
  name: workstation.
  description: BE CAREFUL WHEN USING -d OPTION!
- !Positional
  optional: false
  position: 0
  name: operations.
  description: Note that there are cases where retrying will never succeed, such as
    if you
- !Positional
  optional: false
  position: 0
  name: hang.
  description: 4. The gsutil rsync command copies changed files in their entirety
    and does
named:
- !Flag
  optional: true
  synonyms:
  - -a
  description: "Sets named canned_acl when uploaded objects created. See\n\"gsutil\
    \ help acls\" for further details. Note that rsync will\ndecide whether or not\
    \ to perform a copy based only on object size\nand modification time, not current\
    \ ACL state. Also see the -p\noption below."
  args: !SimpleFlagArg
    name: canned_acl
- !Flag
  optional: true
  synonyms:
  - -c
  description: "Causes the rsync command to compute and compare checksums\n(instead\
    \ of comparing mtime) for files if the size of source and\ndestination as well\
    \ as mtime (if available) match. This option\nincreases local disk I/O and run\
    \ time if either src_url or\ndst_url are on the local file system."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -C
  description: "If an error occurs, continue to attempt to copy the remaining\nfiles.\
    \ If errors occurred, gsutil's exit status will be non-zero\neven if this flag\
    \ is set. This option is implicitly set when\nrunning \"gsutil -m rsync...\".\
    \  Note: -C only applies to the\nactual copying operation. If an error occurs\
    \ while iterating\nover the files in the local directory (e.g., invalid Unicode\n\
    file name) gsutil will print an error message and abort."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -d
  description: "Delete extra files under dst_url not found under src_url. By\ndefault\
    \ extra files are not deleted. Note: this option can\ndelete data quickly if you\
    \ specify the wrong source/destination\ncombination. See the help section above,\n\
    \"BE CAREFUL WHEN USING -d OPTION!\"."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -e
  description: "Exclude symlinks. When specified, symbolic links will be\nignored.\
    \ Note that gsutil does not follow directory symlinks,\nregardless of whether\
    \ -e is specified."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -n
  description: "Causes rsync to run in \"dry run\" mode, i.e., just outputting\nwhat\
    \ would be copied or deleted without actually doing any\ncopying/deleting."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  description: "Causes ACLs to be preserved when objects are copied. Note that\nrsync\
    \ will decide whether or not to perform a copy based only\non object size and\
    \ modification time, not current ACL state.\nThus, if the source and destination\
    \ differ in size or\nmodification time and you run gsutil rsync -p, the file will\
    \ be\ncopied and ACL preserved. However, if the source and destination\ndon't\
    \ differ in size or checksum but have different ACLs,\nrunning gsutil rsync -p\
    \ will have no effect.\nNote that this option has performance and cost implications\
    \ when\nusing the XML API, as it requires separate HTTP calls for\ninteracting\
    \ with ACLs. The performance issue can be mitigated to\nsome degree by using gsutil\
    \ -m rsync to cause parallel\nsynchronization. Also, this option only works if\
    \ you have OWNER\naccess to all of the objects that are copied.\nYou can avoid\
    \ the additional performance and cost of using\nrsync -p if you want all objects\
    \ in the destination bucket to\nend up with the same ACL by setting a default\
    \ object ACL on that\nbucket instead of using rsync -p. See 'gsutil help defacl'."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -P
  description: "Causes POSIX attributes to be preserved when objects are copied.\n\
    With this feature enabled, gsutil rsync will copy fields\nprovided by stat. These\
    \ are the user ID of the owner, the group\nID of the owning group, the mode (permissions)\
    \ of the file, and\nthe access/modification time of the file. For downloads, these\n\
    attributes will only be set if the source objects were uploaded\nwith this flag\
    \ enabled.\nOn Windows, this flag will only set and restore access time and\n\
    modification time. This is because Windows doesn't have a notion\nof POSIX uid/gid/mode."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -R
  - -r
  description: "The -R and -r options are synonymous. Causes directories,\nbuckets,\
    \ and bucket subdirectories to be synchronized\nrecursively. If you neglect to\
    \ use this option gsutil will make\nonly the top-level directory in the source\
    \ and destination URLs\nmatch, skipping any sub-directories."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -U
  description: "Skip objects with unsupported object types instead of failing.\nUnsupported\
    \ object types are Amazon S3 Objects in the GLACIER\nstorage class."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -x
  description: "Causes files/objects matching pattern to be excluded, i.e., any\n\
    matching files/objects will not be copied or deleted. Note that\nthe pattern is\
    \ a Python regular expression, not a wildcard (so,\nmatching any string ending\
    \ in \"abc\" would be specified using\n\".*abc$\" rather than \"*abc\"). Note\
    \ also that the exclude path is\nalways relative (similar to Unix rsync or tar\
    \ exclude options).\nFor example, if you run the command:\ngsutil rsync -x \"\
    data./.*\\.txt$\" dir gs://my-bucket\nit will skip the file dir/data1/a.txt.\n\
    You can use regex alternation to specify multiple exclusions,\nfor example:\n\
    gsutil rsync -x \".*\\.txt$|.*\\.jpg$\" dir gs://my-bucket\nNOTE: While it will\
    \ work to surround the regular expression with\neither single or double quotes\
    \ on Linux and MacOS, on Windows\nyou need to use double quotes.\n"
  args: !SimpleFlagArg
    name: pattern
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n  rsync - Synchronize content of two buckets/directories\n\n\nSYNOPSIS\n\
  \n  gsutil rsync [-a] [-c] [-C] [-d] [-e] [-n] [-p] [-r] [-U] [-x] src_url dst_url\n\
  \n\n\nDESCRIPTION\n  The gsutil rsync command makes the contents under dst_url the\
  \ same as the\n  contents under src_url, by copying any missing files/objects (or\
  \ those whose\n  data has changed), and (if the -d option is specified) deleting\
  \ any extra\n  files/objects. src_url must specify a directory, bucket, or bucket\n\
  \  subdirectory. For example, to make gs://mybucket/data match the contents of\n\
  \  the local directory \"data\" you could do:\n\n    gsutil rsync -d data gs://mybucket/data\n\
  \n  To recurse into directories use the -r option:\n\n    gsutil rsync -d -r data\
  \ gs://mybucket/data\n\n  To copy only new/changed files without deleting extra\
  \ files from\n  gs://mybucket/data leave off the -d option:\n\n    gsutil rsync\
  \ -r data gs://mybucket/data\n\n  If you have a large number of objects to synchronize\
  \ you might want to use the\n  gsutil -m option, to perform parallel (multi-threaded/multi-processing)\n\
  \  synchronization:\n\n    gsutil -m rsync -d -r data gs://mybucket/data\n\n  The\
  \ -m option typically will provide a large performance boost if either the\n  source\
  \ or destination (or both) is a cloud URL. If both source and\n  destination are\
  \ file URLs the -m option will typically thrash the disk and\n  slow synchronization\
  \ down.\n\n  To make the local directory \"data\" the same as the contents of\n\
  \  gs://mybucket/data:\n\n    gsutil rsync -d -r gs://mybucket/data data\n\n  To\
  \ make the contents of gs://mybucket2 the same as gs://mybucket1:\n\n    gsutil\
  \ rsync -d -r gs://mybucket1 gs://mybucket2\n\n  You can also mirror data across\
  \ local directories:\n\n    gsutil rsync -d -r dir1 dir2\n\n  To mirror your content\
  \ across clouds:\n\n    gsutil rsync -d -r gs://my-gs-bucket s3://my-s3-bucket\n\
  \n  Note: If you are synchronizing a large amount of data between clouds you might\n\
  \  consider setting up a\n  `Google Compute Engine <https://cloud.google.com/products/compute-engine>`_\n\
  \  account and running gsutil there. Since cross-provider gsutil data transfers\n\
  \  flow through the machine where gsutil is running, doing this can make your\n\
  \  transfer run significantly faster than running gsutil on your local\n  workstation.\n\
  \n\nBE CAREFUL WHEN USING -d OPTION!\n  The rsync -d option is very useful and commonly\
  \ used, because it provides a\n  means of making the contents of a destination bucket\
  \ or directory match those\n  of a source bucket or directory. However, please exercise\
  \ caution when you\n  use this option: It's possible to delete large amounts of\
  \ data accidentally\n  if, for example, you erroneously reverse source and destination.\
  \ For example,\n  if you meant to synchronize a local directory from a bucket in\
  \ the cloud but\n  instead run the command:\n\n    gsutil -m rsync -r -d ./your-dir\
  \ gs://your-bucket\n\n  and your-dir is currently empty, you will quickly delete\
  \ all of the objects in\n  gs://your-bucket.\n\n  You can also cause large amounts\
  \ of data to be lost quickly by specifying a\n  subdirectory of the destination\
  \ as the source of an rsync. For example, the\n  command:\n\n    gsutil -m rsync\
  \ -r -d gs://your-bucket/data gs://your-bucket\n\n  would cause most or all of the\
  \ objects in gs://your-bucket to be deleted\n  (some objects may survive if there\
  \ are any with names that sort lower than\n  \"data\" under gs://your-bucket/data).\n\
  \n  In addition to paying careful attention to the source and destination you\n\
  \  specify with the rsync command, there are two more safety measures your can\n\
  \  take when using gsutil rsync -d:\n\n  1. Try running the command with the rsync\
  \ -n option first, to see what it\n     would do without actually performing the\
  \ operations. For example, if\n     you run the command:\n\n       gsutil -m rsync\
  \ -r -d -n gs://your-bucket/data gs://your-bucket\n\n     it will be immediately\
  \ evident that running that command without the -n\n     option would cause many\
  \ objects to be deleted.\n\n  2. Enable object versioning in your bucket, which\
  \ will allow you to restore\n     objects if you accidentally delete them. For more\
  \ details see\n     \"gsutil help versions\".\n\n\nIMPACT OF OBJECT LISTING EVENTUAL\
  \ CONSISTENCY\n  The rsync command operates by listing the source and destination\
  \ URLs, and\n  then performing copy and remove operations according to the differences\n\
  \  between these listings. Because object listing is eventually (not strongly)\n\
  \  consistent within multi-regional locations, if you upload new objects or\n  delete\
  \ objects from a bucket in a multi-regional location and then\n  immediately run\
  \ gsutil rsync with that bucket as the source or destination,\n  it's possible the\
  \ rsync command will not see the recent updates and thus\n  synchronize incorrectly.\
  \ For example, if you rsync to a ``US`` bucket\n  immediately after uploading to\
  \ or deleting objects from that bucket, it's\n  possible gsutil will re-upload objects\
  \ that have already been uploaded or\n  attempt to delete objects that were already\
  \ deleted. A more troublesome\n  problem can occur if you run gsutil rsync, specifying\
  \ a bucket as the\n  source immediately after uploading to or deleting objects from\
  \ that bucket.\n  In that case it's possible rsync will miss copying objects to,\
  \ or deleting\n  objects from, the destination. If this happens you can rerun the\
  \ rsync\n  operation again later (after the object listing has \"caught up\"), to\
  \ cause\n  the missing objects to be copied and extra objects to be deleted.\n\n\
  \nCHECKSUM VALIDATION AND FAILURE HANDLING\n  At the end of every upload or download,\
  \ the gsutil rsync command validates\n  that the checksum of the source file/object\
  \ matches the checksum of the\n  destination file/object. If the checksums do not\
  \ match, gsutil will delete\n  the invalid copy and print a warning message. This\
  \ very rarely happens, but\n  if it does, please contact gs-team@google.com.\n\n\
  \  The rsync command will retry when failures occur, but if enough failures\n  happen\
  \ during a particular copy or delete operation the command will fail.\n\n  If the\
  \ -C option is provided, the command will instead skip the failing\n  object and\
  \ move on. At the end of the synchronization run if any failures\n  were not successfully\
  \ retried, the rsync command will report the count of\n  failures, and exit with\
  \ non-zero status. At this point you can run the rsync\n  command again, and it\
  \ will attempt any remaining needed copy and/or delete\n  operations.\n\n  Note\
  \ that there are cases where retrying will never succeed, such as if you\n  don't\
  \ have write permission to the destination bucket or if the destination\n  path\
  \ for some objects is longer than the maximum allowed length.\n\n  For more details\
  \ about gsutil's retry handling, please see\n  \"gsutil help retries\".\n\n\nCHANGE\
  \ DETECTION ALGORITHM\n  To determine if a file or object has changed, gsutil rsync\
  \ first checks\n  whether the file modification time (mtime) of both the source\
  \ and destination\n  is available. If mtime is available at both source and destination,\
  \ and the\n  destination mtime is different than the source, or if the source and\n\
  \  destination file size differ, gsutil rsync will update the destination. If the\n\
  \  source is a cloud bucket and the destination is a local file system, and if\n\
  \  mtime is not available for the source, gsutil rsync will use the time created\n\
  \  for the cloud object as a substitute for mtime. Otherwise, if mtime is not\n\
  \  available for either the source or the destination, gsutil rsync will fall\n\
  \  back to using checksums. If the source and destination are both cloud buckets\n\
  \  with checksums available, gsutil rsync will use these hashes instead of mtime.\n\
  \  However, gsutil rsync will still update mtime at the destination if it is not\n\
  \  present. If the source and destination have matching checksums and only the\n\
  \  source has an mtime, gsutil rsync will copy the mtime to the destination. If\n\
  \  neither mtime nor checksums are available, gsutil rsync will resort to\n  comparing\
  \ file sizes.\n\n  Checksums will not be available when comparing composite Google\
  \ Cloud Storage\n  objects with objects at a cloud provider that does not support\
  \ CRC32C (which\n  is the only checksum available for composite objects). See 'gsutil\
  \ help\n  compose' for details about composite objects.\n\n\nCOPYING IN THE CLOUD\
  \ AND METADATA PRESERVATION\n  If both the source and destination URL are cloud\
  \ URLs from the same provider,\n  gsutil copies data \"in the cloud\" (i.e., without\
  \ downloading to and uploading\n  from the machine where you run gsutil). In addition\
  \ to the performance and\n  cost advantages of doing this, copying in the cloud\
  \ preserves metadata (like\n  Content-Type and Cache-Control). In contrast, when\
  \ you download data from the\n  cloud it ends up in a file, which has no associated\
  \ metadata, other than file\n  modification time (mtime). Thus, unless you have\
  \ some way to hold on to or\n  re-create that metadata, synchronizing a bucket to\
  \ a directory in the local\n  file system will not retain the metadata other than\
  \ mtime.\n\n  Note that by default, the gsutil rsync command does not copy the ACLs\
  \ of\n  objects being synchronized and instead will use the default bucket ACL (see\n\
  \  \"gsutil help defacl\"). You can override this behavior with the -p option (see\n\
  \  OPTIONS below).\n\n\nSLOW CHECKSUMS\n  If you find that CRC32C checksum computation\
  \ runs slowly, this is likely\n  because you don't have a compiled CRC32c on your\
  \ system. Try running:\n\n    gsutil ver -l\n\n  If the output contains:\n\n   \
  \ compiled crcmod: False\n\n  you are running a Python library for computing CRC32C,\
  \ which is much slower\n  than using the compiled code. For information on getting\
  \ a compiled CRC32C\n  implementation, see 'gsutil help crc32c'.\n\n\nLIMITATIONS\n\
  \n  1. The gsutil rsync command will only allow non-negative file modification\n\
  \     times to be used in its comparisons. This means gsutil rsync will resort to\n\
  \     using checksums for any file with a timestamp before 1970-01-01 UTC.\n\n \
  \ 2. The gsutil rsync command considers only the current object generations in\n\
  \     the source and destination buckets when deciding what to copy / delete. If\n\
  \     versioning is enabled in the destination bucket then gsutil rsync's\n    \
  \ overwriting or deleting objects will end up creating versions, but the\n     command\
  \ doesn't try to make the archived generations match in the source\n     and destination\
  \ buckets.\n\n  3. The gsutil rsync command does not support copying special file\
  \ types\n     such as sockets, device files, named pipes, or any other non-standard\n\
  \     files intended to represent an operating system resource. If you run\n   \
  \  gsutil rsync on a source directory that includes such files (for example,\n \
  \    copying the root directory on Linux that includes /dev ), you should use\n\
  \     the -x flag to exclude these files. Otherwise, gsutil rsync may fail or\n\
  \     hang.\n\n  4. The gsutil rsync command copies changed files in their entirety\
  \ and does\n     not employ the\n     `rsync delta-transfer algorithm <https://rsync.samba.org/tech_report/>`_\n\
  \     to transfer portions of a changed file. This is because cloud objects are\n\
  \     immutable and no facility exists to read partial cloud object checksums or\n\
  \     perform partial overwrites.\n\nOPTIONS\n  -a canned_acl Sets named canned_acl\
  \ when uploaded objects created. See\n                \"gsutil help acls\" for further\
  \ details. Note that rsync will\n                decide whether or not to perform\
  \ a copy based only on object size\n                and modification time, not current\
  \ ACL state. Also see the -p\n                option below.\n\n  -c            Causes\
  \ the rsync command to compute and compare checksums\n                (instead of\
  \ comparing mtime) for files if the size of source and\n                destination\
  \ as well as mtime (if available) match. This option\n                increases\
  \ local disk I/O and run time if either src_url or\n                dst_url are\
  \ on the local file system.\n\n  -C            If an error occurs, continue to attempt\
  \ to copy the remaining\n                files. If errors occurred, gsutil's exit\
  \ status will be non-zero\n                even if this flag is set. This option\
  \ is implicitly set when\n                running \"gsutil -m rsync...\".  Note:\
  \ -C only applies to the\n                actual copying operation. If an error\
  \ occurs while iterating\n                over the files in the local directory\
  \ (e.g., invalid Unicode\n                file name) gsutil will print an error\
  \ message and abort.\n\n  -d            Delete extra files under dst_url not found\
  \ under src_url. By\n                default extra files are not deleted. Note:\
  \ this option can\n                delete data quickly if you specify the wrong\
  \ source/destination\n                combination. See the help section above,\n\
  \                \"BE CAREFUL WHEN USING -d OPTION!\".\n\n  -e            Exclude\
  \ symlinks. When specified, symbolic links will be\n                ignored. Note\
  \ that gsutil does not follow directory symlinks,\n                regardless of\
  \ whether -e is specified.\n\n  -n            Causes rsync to run in \"dry run\"\
  \ mode, i.e., just outputting\n                what would be copied or deleted without\
  \ actually doing any\n                copying/deleting.\n\n  -p            Causes\
  \ ACLs to be preserved when objects are copied. Note that\n                rsync\
  \ will decide whether or not to perform a copy based only\n                on object\
  \ size and modification time, not current ACL state.\n                Thus, if the\
  \ source and destination differ in size or\n                modification time and\
  \ you run gsutil rsync -p, the file will be\n                copied and ACL preserved.\
  \ However, if the source and destination\n                don't differ in size or\
  \ checksum but have different ACLs,\n                running gsutil rsync -p will\
  \ have no effect.\n\n                Note that this option has performance and cost\
  \ implications when\n                using the XML API, as it requires separate\
  \ HTTP calls for\n                interacting with ACLs. The performance issue can\
  \ be mitigated to\n                some degree by using gsutil -m rsync to cause\
  \ parallel\n                synchronization. Also, this option only works if you\
  \ have OWNER\n                access to all of the objects that are copied.\n\n\
  \                You can avoid the additional performance and cost of using\n  \
  \              rsync -p if you want all objects in the destination bucket to\n \
  \               end up with the same ACL by setting a default object ACL on that\n\
  \                bucket instead of using rsync -p. See 'gsutil help defacl'.\n\n\
  \  -P            Causes POSIX attributes to be preserved when objects are copied.\n\
  \                With this feature enabled, gsutil rsync will copy fields\n    \
  \            provided by stat. These are the user ID of the owner, the group\n \
  \               ID of the owning group, the mode (permissions) of the file, and\n\
  \                the access/modification time of the file. For downloads, these\n\
  \                attributes will only be set if the source objects were uploaded\n\
  \                with this flag enabled.\n\n                On Windows, this flag\
  \ will only set and restore access time and\n                modification time.\
  \ This is because Windows doesn't have a notion\n                of POSIX uid/gid/mode.\n\
  \n  -R, -r        The -R and -r options are synonymous. Causes directories,\n  \
  \              buckets, and bucket subdirectories to be synchronized\n         \
  \       recursively. If you neglect to use this option gsutil will make\n      \
  \          only the top-level directory in the source and destination URLs\n   \
  \             match, skipping any sub-directories.\n\n  -U            Skip objects\
  \ with unsupported object types instead of failing.\n                Unsupported\
  \ object types are Amazon S3 Objects in the GLACIER\n                storage class.\n\
  \n  -x pattern    Causes files/objects matching pattern to be excluded, i.e., any\n\
  \                matching files/objects will not be copied or deleted. Note that\n\
  \                the pattern is a Python regular expression, not a wildcard (so,\n\
  \                matching any string ending in \"abc\" would be specified using\n\
  \                \".*abc$\" rather than \"*abc\"). Note also that the exclude path\
  \ is\n                always relative (similar to Unix rsync or tar exclude options).\n\
  \                For example, if you run the command:\n\n                  gsutil\
  \ rsync -x \"data./.*\\.txt$\" dir gs://my-bucket\n\n                it will skip\
  \ the file dir/data1/a.txt.\n\n                You can use regex alternation to\
  \ specify multiple exclusions,\n                for example:\n\n               \
  \   gsutil rsync -x \".*\\.txt$|.*\\.jpg$\" dir gs://my-bucket\n\n             \
  \   NOTE: While it will work to surround the regular expression with\n         \
  \       either single or double quotes on Linux and MacOS, on Windows\n        \
  \        you need to use double quotes.\n"
generated_using:
- --help
docker_image:
