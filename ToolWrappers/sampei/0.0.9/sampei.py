from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, String, Directory, Boolean, Int, File

Sampei_V0_1_0 = CommandToolBuilder(tool="sampei", base_command=["sampei"], inputs=[ToolInput(tag="in_matched_query_intensity", input_type=Float(optional=True), prefix="--matched-query-intensity", doc=InputDocumentation(doc="The percentage of MS2 intensity of query scan matched\nto target scan over the summation of total MS2\nintensity in the query scan. (default = 0.3)")), ToolInput(tag="in_error_type", input_type=String(optional=True), prefix="--error-type", doc=InputDocumentation(doc="(default = ppm)")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="--output-directory", doc=InputDocumentation(doc="Full path to the directory where output is stored. If\nthis directory does not exist it will be created.\n(default = output)")), ToolInput(tag="in_no_filter", input_type=Boolean(optional=True), prefix="--no-filter", doc=InputDocumentation(doc="Disable the filter and keep DB identified scans in the\ntarget mgf file")), ToolInput(tag="in_largest_gap_percent", input_type=Int(optional=True), prefix="--largest-gap-percent", doc=InputDocumentation(doc="The percentage of the largest consecutive b/y ion\nmissing over the length of the peptide sequence.\n(default = 0.4)")), ToolInput(tag="in_matched_peptide_intensity", input_type=Float(optional=True), prefix="--matched-peptide-intensity", doc=InputDocumentation(doc="The percentage of MS2 intensity of target scan matched\nto the theoretical fragments of peptide sequence over\nthe summation of total MS2 intensity in the target\nscan. (default = 0.5)")), ToolInput(tag="in_min_diff_dalton_bin", input_type=Int(optional=True), prefix="--min-diff-dalton-bin", doc=InputDocumentation(doc="The absolute minimum dalton difference between the\nquery scan and the target scan. (default = 10)")), ToolInput(tag="in_x_tandem_xml", input_type=File(optional=True), prefix="--xtandem-xml", doc=InputDocumentation(doc="The path to an X!tandem xml file which will be used to\nfilter the results.")), ToolInput(tag="in_write_intermediate", input_type=Boolean(optional=True), prefix="--write-intermediate", doc=InputDocumentation(doc="Write files for each step of filtering.")), ToolInput(tag="in_max_peaks_per_scan", input_type=Int(optional=True), prefix="--max-peaks-per-scan", doc=InputDocumentation(doc="")), ToolInput(tag="in_mgf_query_file", input_type=String(), position=0, doc=InputDocumentation(doc="Query mgf file with full path containing query scans\nhave been identified by DB search")), ToolInput(tag="in_mgf_target_file", input_type=String(), position=1, doc=InputDocumentation(doc="Target mgf file with full path containing target scans\nwith undefined modifications")), ToolInput(tag="in_id_file", input_type=String(), position=2, doc=InputDocumentation(doc="File in which query scans have been identified by DB")), ToolInput(tag="in_search", input_type=String(), position=3, doc=InputDocumentation(doc="optional arguments:"))], outputs=[ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="Full path to the directory where output is stored. If\nthis directory does not exist it will be created.\n(default = output)"))], container="quay.io/biocontainers/sampei:0.0.9--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sampei_V0_1_0().translate("wdl")

