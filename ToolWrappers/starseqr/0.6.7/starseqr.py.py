from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Starseqr_Py_V0_1_0 = CommandToolBuilder(tool="starseqr.py", base_command=["starseqr.py"], inputs=[ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="--prefix", doc=InputDocumentation(doc="prefix to name files. Can be string or /path/to/string")), ToolInput(tag="in_fast_a", input_type=String(optional=True), prefix="--fasta", doc=InputDocumentation(doc="indexed fasta (.fa)")), ToolInput(tag="in_gtf", input_type=File(optional=True), prefix="--gtf", doc=InputDocumentation(doc="gtf file. (.gtf)")), ToolInput(tag="in_library", input_type=String(optional=True), prefix="--library", doc=InputDocumentation(doc="salmon library type(A, ISF, ISR, etc)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use for STAR and STAR-SEQR. 4-12\nrecommended.")), ToolInput(tag="in_bed_file", input_type=File(optional=True), prefix="--bed_file", doc=InputDocumentation(doc="Bed file to subset analysis")), ToolInput(tag="in_subset_type", input_type=String(optional=True), prefix="--subset_type", doc=InputDocumentation(doc="allow fusions to pass with either one breakend in bed\nfile or require both. Must use -b.")), ToolInput(tag="in_as_type", input_type=String(optional=True), prefix="--as_type", doc=InputDocumentation(doc="assembler to use")), ToolInput(tag="in_keep_dups", input_type=Boolean(optional=True), prefix="--keep_dups", doc=InputDocumentation(doc="keep read duplicates. Use for PCR data or with\nmolecular tags")), ToolInput(tag="in_keep_gene_dups", input_type=Boolean(optional=True), prefix="--keep_gene_dups", doc=InputDocumentation(doc="allow internal gene duplications to be considered")), ToolInput(tag="in_keep_mi_to", input_type=Boolean(optional=True), prefix="--keep_mito", doc=InputDocumentation(doc="allow RNA fusions to contain at least one breakpoint\nfrom Mitochondria")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose level... repeat up to three times.")), ToolInput(tag="in_star_index", input_type=File(optional=True), prefix="--star_index", doc=InputDocumentation(doc="path to STAR index folder")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="STAR alignment mode. 0=More-specific, 1=More-Sensitive")), ToolInput(tag="in_star_j_xns", input_type=File(optional=True), prefix="--star_jxns", doc=InputDocumentation(doc="chimeric junctions file produced by STAR")), ToolInput(tag="in_star_sam", input_type=File(optional=True), prefix="--star_sam", doc=InputDocumentation(doc="Chimeric.out.sam file produced by STAR. Either use\nthis or -sb")), ToolInput(tag="in_star_bam", input_type=File(optional=True), prefix="--star_bam", doc=InputDocumentation(doc="Aligned.sortedByCoord.out.bam file produced by STAR.\nMust contain chimeric reads with ch tag.\n")), ToolInput(tag="in_two", input_type=Int(optional=True), prefix="-2", doc=InputDocumentation(doc="")), ToolInput(tag="in_one", input_type=Int(optional=True), prefix="-1", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_star_sam", output_type=File(optional=True), selector=InputSelector(input_to_select="in_star_sam", type_hint=File()), doc=OutputDocumentation(doc="Chimeric.out.sam file produced by STAR. Either use\nthis or -sb")), ToolOutput(tag="out_star_bam", output_type=File(optional=True), selector=InputSelector(input_to_select="in_star_bam", type_hint=File()), doc=OutputDocumentation(doc="Aligned.sortedByCoord.out.bam file produced by STAR.\nMust contain chimeric reads with ch tag.\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Starseqr_Py_V0_1_0().translate("wdl", allow_empty_container=True)

