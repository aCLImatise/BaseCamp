from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, File, Boolean

Run_Upp_Py_V0_1_0 = CommandToolBuilder(tool="run_upp.py", base_command=["run_upp.py"], inputs=[ToolInput(tag="in_fragment_chunksize", input_type=Int(optional=True), prefix="--fragmentChunkSize", doc=InputDocumentation(doc="maximum fragment chunk size of N. Helps controlling\nmemory. [default: 20000]")), ToolInput(tag="in_distance", input_type=Int(optional=True), prefix="--distance", doc=InputDocumentation(doc="minimum p-distance before stopping the\ndecomposition[default: 1]")), ToolInput(tag="in_diameter", input_type=String(optional=True), prefix="--diameter", doc=InputDocumentation(doc="maximum tree diameter before stopping the\ndecomposition[default: None]")), ToolInput(tag="in_alignment_size", input_type=Int(optional=True), prefix="--alignmentSize", doc=InputDocumentation(doc="max alignment subset size of N [default: 10]")), ToolInput(tag="in_median_full_length", input_type=Int(optional=True), prefix="--median_full_length", doc=InputDocumentation(doc="Consider all fragments that are 25% longer or shorter\nthan N to be excluded from the backbone. If value is\n-1, then UPP will use the median of the sequences as\nthe median full length [default: None]")), ToolInput(tag="in_backbone_threshold", input_type=Int(optional=True), prefix="--backbone_threshold", doc=InputDocumentation(doc="Only consider sequences with lengths within (1-N)*M\nand (1+N)*M as full-length, where M is the median\nlength of the full-length sequence given by the -M\noption and N is the percentage given by the -T\noption.[default: 0.25]")), ToolInput(tag="in_backbone_size", input_type=Int(optional=True), prefix="--backboneSize", doc=InputDocumentation(doc="(Optional) size of backbone set. If no backbone tree\nand alignment is given, the sequence file will be\nrandomly split into a backbone set (size set to N) and\nquery set (remaining sequences), [default:\nmin(1000,input size)]")), ToolInput(tag="in_decomp_strategy", input_type=String(optional=True), prefix="--decomp_strategy", doc=InputDocumentation(doc="decomposition strategy [default: ensemble of HMMs\n(hierarchical)]")), ToolInput(tag="in_tempdir", input_type=File(optional=True), prefix="--tempdir", doc=InputDocumentation(doc="Tempfile files will be written to DIR. Full-path\nrequired. [default: /tmp/sepp]")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="output files with prefix OUTPUT. [default: output]")), ToolInput(tag="in_outdir", input_type=File(optional=True), prefix="--outdir", doc=InputDocumentation(doc="output to OUTPUT_DIR directory. full-path required.\n[default: .]")), ToolInput(tag="in_molecule", input_type=String(optional=True), prefix="--molecule", doc=InputDocumentation(doc="Molecule type of sequences. Can be amino, dna, or rna\n[default: dna]")), ToolInput(tag="in_sequence_file", input_type=Int(optional=True), prefix="--sequence_file", doc=InputDocumentation(doc="Unaligned sequence file. If no backbone tree and\nalignment is given, the sequence file will be randomly\nsplit into a backbone set (size set to B) and query\nset (remaining sequences), [default: None]")), ToolInput(tag="in_config", input_type=File(optional=True), prefix="--config", doc=InputDocumentation(doc="A config file, including options used to run UPP.\nOptions provided as command line arguments overwrite\nconfig file values for those options. [default: None]")), ToolInput(tag="in_tree", input_type=File(optional=True), prefix="--tree", doc=InputDocumentation(doc="Input tree file (newick format) [default: None]")), ToolInput(tag="in_alignment", input_type=File(optional=True), prefix="--alignment", doc=InputDocumentation(doc="Aligned fasta file [default: None]")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Use N cpus [default: number of cpus available on the\nmachine]")), ToolInput(tag="in_checkpoint", input_type=File(optional=True), prefix="--checkpoint", doc=InputDocumentation(doc="checkpoint file [default: no checkpointing]")), ToolInput(tag="in_interval", input_type=Int(optional=True), prefix="--interval", doc=InputDocumentation(doc="Interval (in seconds) between checkpoint writes. Has\neffect only with -cp provided. [default: 3600]")), ToolInput(tag="in_random_seed", input_type=Int(optional=True), prefix="--randomseed", doc=InputDocumentation(doc="random seed number. [default: 297834]")), ToolInput(tag="in_longbranch_filter", input_type=Int(optional=True), prefix="--longbranchfilter", doc=InputDocumentation(doc="Branches longer than N times the median branch length\nare filtered from backbone and added to fragments.\n[default: None (no filtering)]")), ToolInput(tag="in_placement_size", input_type=Int(optional=True), prefix="--placementSize", doc=InputDocumentation(doc="max placement subset size of N [default: 10% of the\ntotal number of taxa]")), ToolInput(tag="in_ra_xml", input_type=File(optional=True), prefix="--raxml", doc=InputDocumentation(doc="RAxML_info file including model parameters, generated\nby RAxML.[default: None]")), ToolInput(tag="in_fragment", input_type=File(optional=True), prefix="--fragment", doc=InputDocumentation(doc="fragment file [default: None]\n")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="output to OUTPUT_DIR directory. full-path required.\n[default: .]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Run_Upp_Py_V0_1_0().translate("wdl", allow_empty_container=True)

