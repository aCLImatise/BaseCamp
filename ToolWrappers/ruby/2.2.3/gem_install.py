from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Directory, File, Int

Gem_Install_V0_1_0 = CommandToolBuilder(tool="gem_install", base_command=["gem", "install"], inputs=[ToolInput(tag="in_platform", input_type=String(optional=True), prefix="--platform", doc=InputDocumentation(doc="Specify the platform of gem to install")), ToolInput(tag="in__updatesources_update", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc=", --[no-]update-sources        Update local source cache")), ToolInput(tag="in_install_dir", input_type=Directory(optional=True), prefix="--install-dir", doc=InputDocumentation(doc="Gem repository directory to get installed")), ToolInput(tag="in_build_root", input_type=String(optional=True), prefix="--build-root", doc=InputDocumentation(doc="Temporary installation root. Useful for building\npackages. Do not use this when installing remote gems.")), ToolInput(tag="in_vendor", input_type=Boolean(optional=True), prefix="--vendor", doc=InputDocumentation(doc="Install gem into the vendor directory.\nOnly for use by gem repackagers.")), ToolInput(tag="in_no_document", input_type=Boolean(optional=True), prefix="--no-document", doc=InputDocumentation(doc="Disable documentation generation")), ToolInput(tag="in__envshebang_rewrite", input_type=Boolean(optional=True), prefix="-E", doc=InputDocumentation(doc=", --[no-]env-shebang           Rewrite the shebang line on installed\nscripts to use /usr/bin/env")), ToolInput(tag="in__force_gem", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc=", --[no-]force                 Force gem to install, bypassing dependency")), ToolInput(tag="in_trust_policy", input_type=String(optional=True), prefix="--trust-policy", doc=InputDocumentation(doc="Specify gem trust policy")), ToolInput(tag="in_ignore_dependencies", input_type=Boolean(optional=True), prefix="--ignore-dependencies", doc=InputDocumentation(doc="Do not install any required dependent gems")), ToolInput(tag="in_development", input_type=Boolean(optional=True), prefix="--development", doc=InputDocumentation(doc="Install additional development")), ToolInput(tag="in_conservative", input_type=Boolean(optional=True), prefix="--conservative", doc=InputDocumentation(doc="Don't attempt to upgrade gems already\nmeeting version requirement")), ToolInput(tag="in_minimal_deps", input_type=Boolean(optional=True), prefix="--minimal-deps", doc=InputDocumentation(doc="Don't upgrade any dependencies that already\nmeet version requirements")), ToolInput(tag="in_file", input_type=Boolean(optional=True), prefix="--file", doc=InputDocumentation(doc="[FILE]                Read from a gem dependencies API file and\ninstall the listed gems")), ToolInput(tag="in_without", input_type=File(optional=True), prefix="--without", doc=InputDocumentation(doc="Omit the named groups (comma separated)\nwhen installing from a gem dependencies\nfile")), ToolInput(tag="in_default", input_type=Boolean(optional=True), prefix="--default", doc=InputDocumentation(doc="Add the gem's full specification to\nspecifications/default and extract only its bin")), ToolInput(tag="in_explain", input_type=Boolean(optional=True), prefix="--explain", doc=InputDocumentation(doc="Rather than install the gems, indicate which would\nbe installed")), ToolInput(tag="in_local", input_type=Boolean(optional=True), prefix="--local", doc=InputDocumentation(doc="Restrict operations to the LOCAL domain")), ToolInput(tag="in_remote", input_type=Boolean(optional=True), prefix="--remote", doc=InputDocumentation(doc="Restrict operations to the REMOTE domain")), ToolInput(tag="in_both", input_type=Boolean(optional=True), prefix="--both", doc=InputDocumentation(doc="Allow LOCAL and REMOTE operations")), ToolInput(tag="in_bulk_threshold", input_type=Int(optional=True), prefix="--bulk-threshold", doc=InputDocumentation(doc="Threshold for switching to bulk\nsynchronization (default 1000)")), ToolInput(tag="in_clear_sources", input_type=Boolean(optional=True), prefix="--clear-sources", doc=InputDocumentation(doc="Clear the gem sources")), ToolInput(tag="in_source", input_type=String(optional=True), prefix="--source", doc=InputDocumentation(doc="Append URL to list of remote gem sources")), ToolInput(tag="in__use_proxy", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc=", --[no-]http-proxy [URL]      Use HTTP proxy for remote operations")), ToolInput(tag="in__verbose_set", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc=", --[no-]verbose               Set the verbose level of output")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Silence commands")), ToolInput(tag="in_config_file", input_type=File(optional=True), prefix="--config-file", doc=InputDocumentation(doc="Use this config file instead of default")), ToolInput(tag="in_backtrace", input_type=Boolean(optional=True), prefix="--backtrace", doc=InputDocumentation(doc="Show stack backtrace on errors")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Turn on Ruby debugging")), ToolInput(tag="in_gems", input_type=String(), position=0, doc=InputDocumentation(doc="-n, --bindir DIR                 Directory where binary files are")), ToolInput(tag="in_located", input_type=String(), position=1, doc=InputDocumentation(doc="--[no-]document [TYPES]      Generate documentation for installed gems")), ToolInput(tag="in_generate_dot", input_type=String(), position=0, doc=InputDocumentation(doc="For example: rdoc,ri")), ToolInput(tag="in_checks", input_type=String(), position=1, doc=InputDocumentation(doc="-w, --[no-]wrappers              Use bin wrappers for executables")), ToolInput(tag="in_foo_exec_one_eight", input_type=Int(), position=0, doc=InputDocumentation(doc="--[no-]user-install          Install in user's home directory instead")), ToolInput(tag="in_dependencies", input_type=String(), position=0, doc=InputDocumentation(doc="--development-all            Install development dependencies for all")), ToolInput(tag="in_gem_name", input_type=String(), position=0, doc=InputDocumentation(doc="name of gem to install")), ToolInput(tag="in_repository_dot", input_type=String(), position=0, doc=InputDocumentation(doc="You may need to specify the path to the library's headers and"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gem_Install_V0_1_0().translate("wdl", allow_empty_container=True)

