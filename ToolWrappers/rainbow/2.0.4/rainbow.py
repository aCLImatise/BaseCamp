from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, Float, String

Rainbow_V0_1_0 = CommandToolBuilder(tool="rainbow", base_command=["rainbow"], inputs=[ToolInput(tag="in_input_fastafastq_file_supports_multiple", input_type=Int(optional=True), prefix="-1", doc=InputDocumentation(doc="Input fasta/fastq file, supports multiple '-1'")), ToolInput(tag="in_input_fastafastq_file_supports_multiple_", input_type=Int(optional=True), prefix="-2", doc=InputDocumentation(doc="Input fasta/fastq file, supports multiple '-2' [null]")), ToolInput(tag="in_read_length_default", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="Read length, default: 0 variable")), ToolInput(tag="in_maximum_mismatches", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Maximum mismatches [4]")), ToolInput(tag="in_exactly_matching_threshold", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="Exactly matching threshold [2000]")), ToolInput(tag="in_low_level_polymorphism", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="Low level of polymorphism")), ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="Input file [stdin]")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Output file [stdout]")), ToolInput(tag="in_kallele_min_variants", input_type=Int(optional=True), prefix="-k", doc=InputDocumentation(doc="K_allele, min variants to create a new group [2]")), ToolInput(tag="in_kallele_divide_regardless", input_type=Int(optional=True), prefix="-K", doc=InputDocumentation(doc="K_allele, divide regardless of frequency when num of variants exceed this value [50]")), ToolInput(tag="in_frequency_min_variant", input_type=Float(optional=True), prefix="-f", doc=InputDocumentation(doc="Frequency, min variant frequency to create a new group [0.2]")), ToolInput(tag="in_output_assembly", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="output assembly")), ToolInput(tag="in_maximum_number_divided", input_type=Int(optional=True), prefix="-N", doc=InputDocumentation(doc="Maximum number of divided clusters to merge [300]")), ToolInput(tag="in_minimum_number_reads", input_type=Int(optional=True), prefix="-r", doc=InputDocumentation(doc="Minimum number of reads to assemble (valid only when '-a' is opened) [5]")), ToolInput(tag="in_maximum_number_reads", input_type=Int(optional=True), prefix="-R", doc=InputDocumentation(doc="Maximum number of reads to assemble (valid only when '-a' is opened) [300]")), ToolInput(tag="in_merge", input_type=String(), position=0, doc=InputDocumentation(doc="Input File Format: <seqid:int>\t<cluster_id:int>\t<read1:string>\t<read2:string>[\t<pre_cluster_id:int>]"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="Output file [stdout]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rainbow_V0_1_0().translate("wdl", allow_empty_container=True)

