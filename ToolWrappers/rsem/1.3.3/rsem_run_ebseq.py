from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String

Rsem_Run_Ebseq_V0_1_0 = CommandToolBuilder(tool="rsem_run_ebseq", base_command=["rsem-run-ebseq"], inputs=[ToolInput(tag="in_ng_vector", input_type=File(optional=True), prefix="--ngvector", doc=InputDocumentation(doc="This option provides the grouping information required by EBSeq for\nisoform-level differential expression analysis. The file can be\ngenerated by 'rsem-generate-ngvector'. Turning this option on is\nhighly recommended for isoform-level differential expression\nanalysis. (Default: off)")), ToolInput(tag="in_analysis_dot", input_type=String(), position=0, doc=InputDocumentation(doc="SYNOPSIS")), ToolInput(tag="in_data_matrix_file", input_type=String(), position=0, doc=InputDocumentation(doc="This file is a m by n matrix. m is the number of genes/transcripts\nand n is the number of total samples. Each element in the matrix\nrepresents the expected count for a particular gene/transcript in a\nparticular sample. Users can use 'rsem-generate-data-matrix' to\ngenerate this file from expression result files.")), ToolInput(tag="in_conditions", input_type=String(), position=1, doc=InputDocumentation(doc="Comma-separated list of values representing the number of replicates\nfor each condition. For example, '3,3' means the data set contains 2\nconditions and each condition has 3 replicates. '2,3,3' means the\ndata set contains 3 conditions, with 2, 3, and 3 replicates for each\ncondition respectively.")), ToolInput(tag="in_output_file_dot_normalized_data_matrix", input_type=String(), position=1, doc=InputDocumentation(doc="This file contains the median normalized version of the input data")), ToolInput(tag="in_output_file_dot_cond_means", input_type=String(), position=0, doc=InputDocumentation(doc="This file is only generated when there are more than 2 conditions.\nIt gives the normalized mean count value for each gene/transcript at\neach condition. It is formatted as a matrix with names. Each row\nrepresents a gene/transcript and each column represent a condition.\nThe order of genes/transcripts is the same as 'output_file'. This\nfile can be used to calculate fold changes between conditions which\nusers are interested in.")), ToolInput(tag="in_matrix_dot", input_type=String(), position=0, doc=InputDocumentation(doc="2) We're interested in gene-level analysis and there are 3 conditions."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rsem_Run_Ebseq_V0_1_0().translate("wdl", allow_empty_container=True)

