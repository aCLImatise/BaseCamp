from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Cassis_V0_1_0 = CommandToolBuilder(tool="cassis", base_command=["cassis"], inputs=[ToolInput(tag="in_extend_before", input_type=Boolean(optional=True), prefix="--extend_before", doc=InputDocumentation(doc="[T/F]")), ToolInput(tag="in_extend_by_adding_gene", input_type=Boolean(optional=True), prefix="--extend_by_adding_gene", doc=InputDocumentation(doc="[T/F]")), ToolInput(tag="in_extend_ab_by_adding_gene", input_type=Boolean(optional=True), prefix="--extend_ab_by_adding_gene", doc=InputDocumentation(doc="[T/F]")), ToolInput(tag="in_sequence_sr_smaller", input_type=Boolean(optional=True), prefix="-2", doc=InputDocumentation(doc=": Sequence SR smaller than the allowed limit")), ToolInput(tag="in_sequence_sa_smaller", input_type=Boolean(optional=True), prefix="-3", doc=InputDocumentation(doc=": Sequence SA smaller than the allowed limit")), ToolInput(tag="in_sequence_sb_smaller", input_type=Boolean(optional=True), prefix="-4", doc=InputDocumentation(doc=": Sequence SB smaller than the allowed limit")), ToolInput(tag="in_sequence_sa_sb", input_type=Boolean(optional=True), prefix="-5", doc=InputDocumentation(doc=": Sequence SA and SB smaller than the allowed limit")), ToolInput(tag="in_sequence_sr_bigger", input_type=Boolean(optional=True), prefix="-6", doc=InputDocumentation(doc=": Sequence SR bigger than the allowed limit")), ToolInput(tag="in_segmentation_performed_there", input_type=Boolean(optional=True), prefix="-1", doc=InputDocumentation(doc=": Segmentation was not performed because there are no hits on\nthe alignments of the sequences SR vs SA and SR vs SB")), ToolInput(tag="in_segmentation_performed_r", input_type=Boolean(optional=True), prefix="-7", doc=InputDocumentation(doc=": Segmentation was not performed because R aborted the execution")), ToolInput(tag="in_godot", input_type=String(), position=0, doc=InputDocumentation(doc="- id      = Name of the synteny block\n- c1      = Chromosome of the genome GR where the block is located\n- inf1    = Start position of the block in the chromosome c1\n- sup1    = End position of the block in the chromosome c1\n- c2      = Chromosome of the genome GO where the block is located\n- inf2    = Start position of the block in the chromosome c2\n- sup2    = End position of the block in the chromosome c2\n- strand  = If 1, the synteny blocks of the genomes GR and GO are on\nthe same strand. Otherwise, they are on different strands.")), ToolInput(tag="in__breakpoint_id", input_type=String(), position=0, doc=InputDocumentation(doc="- Breakpoint ID")), ToolInput(tag="in_type", input_type=String(), position=1, doc=InputDocumentation(doc="- Type of the breakpoint: inter or intra")), ToolInput(tag="in_sr_gene_a", input_type=String(), position=2, doc=InputDocumentation(doc="- Name of the gene/block A in the sequence SR (genome GR)")), ToolInput(tag="in_sr_gene_b", input_type=String(), position=3, doc=InputDocumentation(doc="- Name of the gene/block B in the sequence SR (genome GR)")), ToolInput(tag="in_src_hr", input_type=String(), position=4, doc=InputDocumentation(doc="- Chromosome of the genes/blocks A and B (genome GR)")), ToolInput(tag="in_sr_inf", input_type=String(), position=0, doc=InputDocumentation(doc="- Inferior boundary of the sequence SR")), ToolInput(tag="in_srs_up", input_type=String(), position=1, doc=InputDocumentation(doc="- Superior boundary of the sequence SR")), ToolInput(tag="in_so_gene_a", input_type=String(), position=2, doc=InputDocumentation(doc="- Name of the gene/block A in the sequence SA (genome GO)")), ToolInput(tag="in_so_gene_b", input_type=String(), position=3, doc=InputDocumentation(doc="- Name of the gene/block B in the sequence SB (genome GO)")), ToolInput(tag="in_so_chra", input_type=String(), position=4, doc=InputDocumentation(doc="- Chromosome of the gene/block A (genome GO)")), ToolInput(tag="in_soc_hrb", input_type=String(), position=5, doc=InputDocumentation(doc="- Chromosome of the gene/block B (genome GO)")), ToolInput(tag="in_so_inf_a", input_type=String(), position=0, doc=InputDocumentation(doc="- Inferior boundary of the sequence SA")), ToolInput(tag="in_so_supa", input_type=String(), position=1, doc=InputDocumentation(doc="- Superior boundary of the sequence SA")), ToolInput(tag="in_so_in_fb", input_type=String(), position=2, doc=InputDocumentation(doc="- Inferior boundary of the sequence SB")), ToolInput(tag="in_so_sup_b", input_type=String(), position=3, doc=InputDocumentation(doc="- Superior boundary of the sequence SB")), ToolInput(tag="in_bkp_begin", input_type=String(), position=4, doc=InputDocumentation(doc="- Relative position of the breakpoint begin (related to sRinf)")), ToolInput(tag="in_bkp_end", input_type=String(), position=5, doc=InputDocumentation(doc="- Relative position of the breakpoint end (related to sRinf)")), ToolInput(tag="in_var_28", input_type=String(), position=6, doc=InputDocumentation(doc="- Status of the breakpoint")), ToolInput(tag="in_breakpoint_i_d", input_type=String(), position=0, doc=InputDocumentation(doc="- Breakpoint id")), ToolInput(tag="in_chr", input_type=String(), position=1, doc=InputDocumentation(doc="- Chromosome where the breakpoint is located (Genome GR)")), ToolInput(tag="in_old_begin", input_type=String(), position=2, doc=InputDocumentation(doc="- Old breakpoint begin position (in the chromosome sequence)")), ToolInput(tag="in_old_end", input_type=String(), position=3, doc=InputDocumentation(doc="- Old breakpoint end position (in the chromosome sequence)")), ToolInput(tag="in_new_begin", input_type=String(), position=0, doc=InputDocumentation(doc="- New breakpoint begin position (in the chromosome sequence) \nafter the segmentation")), ToolInput(tag="in_new_end", input_type=String(), position=1, doc=InputDocumentation(doc="- New breakpoint end position (in the chromosome sequence)\nafter the segmentation")), ToolInput(tag="in_var_35", input_type=String(), position=0, doc=InputDocumentation(doc="- Status of the breakpoint"))], outputs=[], container="quay.io/biocontainers/cassis:0.0.20120106--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cassis_V0_1_0().translate("wdl")

