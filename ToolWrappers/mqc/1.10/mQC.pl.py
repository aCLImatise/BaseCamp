from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory

Mqc_Pl_V0_1_0 = CommandToolBuilder(tool="mQC.pl", base_command=["mQC.pl"], inputs=[ToolInput(tag="in_work_dir", input_type=Boolean(optional=True), prefix="--work_dir", doc=InputDocumentation(doc="working directory to run the scripts in (default: current working directory)")), ToolInput(tag="in_experiment_name", input_type=Boolean(optional=True), prefix="--experiment_name", doc=InputDocumentation(doc="customly chosen experiment name for the mappingQC run (mandatory)")), ToolInput(tag="in_sam_file", input_type=File(optional=True), prefix="--samfile", doc=InputDocumentation(doc="path to the SAM/BAM file that comes out of the mapping script of PROTEOFORMER (mandatory)")), ToolInput(tag="in_cores", input_type=Boolean(optional=True), prefix="--cores", doc=InputDocumentation(doc="the amount of cores to run the script on (integer, default: 5)")), ToolInput(tag="in_species", input_type=Boolean(optional=True), prefix="--species", doc=InputDocumentation(doc="the studied species (mandatory)")), ToolInput(tag="in_ens_v", input_type=Boolean(optional=True), prefix="--ens_v", doc=InputDocumentation(doc="the version of the Ensembl database you want to use")), ToolInput(tag="in_tmp", input_type=Boolean(optional=True), prefix="--tmp", doc=InputDocumentation(doc="temporary folder for storing temporary files of mappingQC (default: work_dir/tmp)")), ToolInput(tag="in_unique", input_type=Boolean(optional=True), prefix="--unique", doc=InputDocumentation(doc="whether to use only the unique alignments.")), ToolInput(tag="in_mapper", input_type=Boolean(optional=True), prefix="--mapper", doc=InputDocumentation(doc="the mapper you used to generate the SAM file (STAR, TopHat2, HiSat2) (default: STAR)")), ToolInput(tag="in_max_multimap", input_type=Boolean(optional=True), prefix="--maxmultimap", doc=InputDocumentation(doc="the maximum amount of multimapped positions used for filtering the reads (default: 16)")), ToolInput(tag="in_ens_db", input_type=Boolean(optional=True), prefix="--ens_db", doc=InputDocumentation(doc="path to the Ensembl SQLite database with annotation info. If you want mappingQC to download the right Ensembl database automatically for you, put in 'get' for this parameter (mandatory)")), ToolInput(tag="in_offset", input_type=Boolean(optional=True), prefix="--offset", doc=InputDocumentation(doc="the offset determination method.\nPossible options:\n- plastid: calculate the offsets with Plastid (Dunn et al. 2016)\n- standard: use the standard offsets from the paper of Ingolia et al. (2012) (default option)\n- from_file: use offsets from an input file")), ToolInput(tag="in_plastid_bam", input_type=Boolean(optional=True), prefix="--plastid_bam", doc=InputDocumentation(doc="the mapping bam file for Plastid offset generation (default: convert)")), ToolInput(tag="in_min_length_plastid", input_type=Boolean(optional=True), prefix="--min_length_plastid", doc=InputDocumentation(doc="the minimum RPF length for Plastid offset generation (default 22)")), ToolInput(tag="in_max_length_plastid", input_type=Boolean(optional=True), prefix="--max_length_plastid", doc=InputDocumentation(doc="the maximum RPF length for Plastid offset generation (default 34)")), ToolInput(tag="in_offset_file", input_type=Boolean(optional=True), prefix="--offset_file", doc=InputDocumentation(doc="the offsets input file")), ToolInput(tag="in_min_length_gd", input_type=Boolean(optional=True), prefix="--min_length_gd", doc=InputDocumentation(doc="minimum RPF length used for gene distributions and metagenic classification (default: 26).")), ToolInput(tag="in_max_length_gd", input_type=Boolean(optional=True), prefix="--max_length_gd", doc=InputDocumentation(doc="maximum RPF length used for gene distributions and metagenic classification (default: 34).")), ToolInput(tag="in_out_folder", input_type=Directory(optional=True), prefix="--outfolder", doc=InputDocumentation(doc="the folder to store the output files (default: work_dir/mQC_output)")), ToolInput(tag="in_tool_dir", input_type=Boolean(optional=True), prefix="--tool_dir", doc=InputDocumentation(doc="folder with necessary additional mappingQC tools. More information below in the dependencies section. (default: search for the default tool directory location in the active conda environment)")), ToolInput(tag="in_plot_rpf_tool", input_type=Boolean(optional=True), prefix="--plotrpftool", doc=InputDocumentation(doc="the module that will be used for plotting the RPF-phase figure\nPossible options:\n- grouped2D: use Seaborn to plot a grouped 2D bar chart (default)\n- pyplot3D: use mplot3d to plot a 3D bar chart. This tool can suffer sometimes from Escher effects, as it tries to plot a 3D plot with the 2D software of pyplot and matplotlib.\n- mayavi: use the mayavi package to plot a 3D bar chart. This tool only works on local systems with graphical cards.")), ToolInput(tag="in_out_html", input_type=File(optional=True), prefix="--outhtml", doc=InputDocumentation(doc="custom name for the output HTML file (default: work_dir/mQC_experiment_name.html)")), ToolInput(tag="in_out_zip", input_type=File(optional=True), prefix="--outzip", doc=InputDocumentation(doc="custom name for output ZIP file (default: work_dir/mQC_experiment_name.zip)"))], outputs=[ToolOutput(tag="out_sam_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sam_file", type_hint=File()), doc=OutputDocumentation(doc="path to the SAM/BAM file that comes out of the mapping script of PROTEOFORMER (mandatory)")), ToolOutput(tag="out_out_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out_folder", type_hint=File()), doc=OutputDocumentation(doc="the folder to store the output files (default: work_dir/mQC_output)")), ToolOutput(tag="out_out_html", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_html", type_hint=File()), doc=OutputDocumentation(doc="custom name for the output HTML file (default: work_dir/mQC_experiment_name.html)")), ToolOutput(tag="out_out_zip", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_zip", type_hint=File()), doc=OutputDocumentation(doc="custom name for output ZIP file (default: work_dir/mQC_experiment_name.zip)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mqc_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

