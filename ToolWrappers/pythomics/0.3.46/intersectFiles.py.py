from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Intersectfiles_Py_V0_1_0 = CommandToolBuilder(tool="intersectFiles.py", base_command=["intersectFiles.py"], inputs=[ToolInput(tag="in_threads_to_run", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="Threads to run")), ToolInput(tag="in_file_lookup_from", input_type=File(optional=True), prefix="-a", doc=InputDocumentation(doc="This is the file to lookup values from.")), ToolInput(tag="in_a_delim", input_type=String(optional=True), prefix="--adelim", doc=InputDocumentation(doc="The delimiter for fields.")), ToolInput(tag="in_a_col", input_type=Int(optional=True), prefix="--acol", doc=InputDocumentation(doc="The column of interest (default: 1). Can be a column")), ToolInput(tag="in_file_lookup_in", input_type=File(optional=True), prefix="-b", doc=InputDocumentation(doc="This is the file to lookup values in.")), ToolInput(tag="in_b_delim", input_type=String(optional=True), prefix="--bdelim", doc=InputDocumentation(doc="The delimiter for fields.")), ToolInput(tag="in_b_col", input_type=Int(optional=True), prefix="--bcol", doc=InputDocumentation(doc="The column of interest (default: 1). Can be a column")), ToolInput(tag="in_b_lookup", input_type=File(optional=True), prefix="--blookup", doc=InputDocumentation(doc="The column to take entries from in file b.")), ToolInput(tag="in_strict", input_type=Boolean(optional=True), prefix="--strict", doc=InputDocumentation(doc="For numeric operations, fail if types are incorrect\n(converting NA to a float for instance).")), ToolInput(tag="in_file_write_results", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[OUT], --out [OUT]\nThe file to write results to. Leave blank for stdout,")), ToolInput(tag="in_function", input_type=String(optional=True), prefix="--function", doc=InputDocumentation(doc="The function to apply to found entries.")), ToolInput(tag="in_colname", input_type=String(optional=True), prefix="--colname", doc=InputDocumentation(doc="The column name to give the new appended value.\nDefaults to function chosen")), ToolInput(tag="in_a_regex", input_type=File(optional=True), prefix="--aregex", doc=InputDocumentation(doc="An optional regex pattern for matching columns in file")), ToolInput(tag="in_a_dot", input_type=String(), position=2, doc=InputDocumentation(doc="--bregex BREGEX       An optional regex pattern for matching columns in file"))], outputs=[ToolOutput(tag="out_file_write_results", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_write_results", type_hint=File()), doc=OutputDocumentation(doc="[OUT], --out [OUT]\nThe file to write results to. Leave blank for stdout,"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Intersectfiles_Py_V0_1_0().translate("wdl", allow_empty_container=True)

