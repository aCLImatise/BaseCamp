from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Abyss_Scaffold_V0_1_0 = CommandToolBuilder(tool="abyss_scaffold", base_command=["abyss-scaffold"], inputs=[ToolInput(tag="in_n_pairs", input_type=Int(optional=True), prefix="--npairs", doc=InputDocumentation(doc="minimum number of pairs [0]")), ToolInput(tag="in_seed_length", input_type=Int(optional=True), prefix="--seed-length", doc=InputDocumentation(doc="minimum contig length [200]\nor -s N0-N1   Find the value of s in [N0,N1]\nthat maximizes the scaffold N50.")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="length of a k-mer")), ToolInput(tag="in_genome_size", input_type=Int(optional=True), prefix="--genome-size", doc=InputDocumentation(doc="expected genome size. Used to calculate NG50\nand associated stats [disabled]")), ToolInput(tag="in_min_gap", input_type=Int(optional=True), prefix="--min-gap", doc=InputDocumentation(doc="minimum scaffold gap length to output [50]")), ToolInput(tag="in_max_gap", input_type=Int(optional=True), prefix="--max-gap", doc=InputDocumentation(doc="maximum scaffold gap length to output [inf]")), ToolInput(tag="in_complex", input_type=Boolean(optional=True), prefix="--complex", doc=InputDocumentation(doc="remove complex transitive edges")), ToolInput(tag="in_no_complex", input_type=Boolean(optional=True), prefix="--no-complex", doc=InputDocumentation(doc="don't remove complex transitive edges [default]")), ToolInput(tag="in_ss", input_type=Boolean(optional=True), prefix="--SS", doc=InputDocumentation(doc="expect contigs to be oriented correctly")), ToolInput(tag="in_no_ss", input_type=Boolean(optional=True), prefix="--no-SS", doc=InputDocumentation(doc="no assumption about contig orientation [default]")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="write the paths to FILE")), ToolInput(tag="in_graph", input_type=File(optional=True), prefix="--graph", doc=InputDocumentation(doc="write the graph to FILE")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="specify path of database repository in FILE")), ToolInput(tag="in_library", input_type=String(optional=True), prefix="--library", doc=InputDocumentation(doc="specify library NAME for sqlite")), ToolInput(tag="in_strain", input_type=String(optional=True), prefix="--strain", doc=InputDocumentation(doc="specify strain NAME for sqlite")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="specify species NAME for sqlite")), ToolInput(tag="in_fast_a", input_type=String(), position=0, doc=InputDocumentation(doc="contigs in FASTA format")), ToolInput(tag="in_overlap", input_type=String(), position=1, doc=InputDocumentation(doc="the contig overlap graph")), ToolInput(tag="in_dist", input_type=String(), position=2, doc=InputDocumentation(doc="estimates of the distance between contigs"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Abyss_Scaffold_V0_1_0().translate("wdl", allow_empty_container=True)

