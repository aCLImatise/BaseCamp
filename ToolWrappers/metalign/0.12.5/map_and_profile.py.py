from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Map_And_Profile_Py_V0_1_0 = CommandToolBuilder(tool="map_and_profile.py", base_command=["map_and_profile.py"], inputs=[ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="Path to database from select_db.py. Required if read\nfiles given")), ToolInput(tag="in_db_info", input_type=File(optional=True), prefix="--dbinfo", doc=InputDocumentation(doc="Location of db_info file. Default: data/db_info.txt")), ToolInput(tag="in_input_type", input_type=String(optional=True), prefix="--input_type", doc=InputDocumentation(doc="Type of input file (fastq/fasta/sam). Default: try to\nautomatically determine")), ToolInput(tag="in_length_normalize", input_type=Boolean(optional=True), prefix="--length_normalize", doc=InputDocumentation(doc="Normalize abundances by genome length.")), ToolInput(tag="in_low_mem", input_type=Boolean(optional=True), prefix="--low_mem", doc=InputDocumentation(doc="Run in low memory mode, with inexact multimapped")), ToolInput(tag="in_rank_renormalize", input_type=Boolean(optional=True), prefix="--rank_renormalize", doc=InputDocumentation(doc="Renormalize abundances to 100 pct. at each rank, e.g\nif an organism has a species but not genus label.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output abundances file. Default: abundances.txt")), ToolInput(tag="in_pct_id", input_type=String(optional=True), prefix="--pct_id", doc=InputDocumentation(doc="Minimum percent identity from reference to count a")), ToolInput(tag="in_sample_id", input_type=File(optional=True), prefix="--sampleID", doc=InputDocumentation(doc="Sample ID for output. Defaults to input file name(s).")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of compute threads for Minimap2. Default: 4")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print verbose output.")), ToolInput(tag="in_in_files", input_type=String(), position=0, doc=InputDocumentation(doc="sam or reads file(s) (space-delimited if multiple).")), ToolInput(tag="in_required_dot", input_type=String(), position=1, doc=InputDocumentation(doc="data                  Path to data/ directory with the files from")), ToolInput(tag="in_setup_data_dots_h", input_type=String(), position=2, doc=InputDocumentation(doc="optional arguments:")), ToolInput(tag="in_processing_dot", input_type=String(), position=3, doc=InputDocumentation(doc="--min_abundance MIN_ABUNDANCE")), ToolInput(tag="in_estimation_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--read_cutoff READ_CUTOFF"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output abundances file. Default: abundances.txt"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Map_And_Profile_Py_V0_1_0().translate("wdl", allow_empty_container=True)

