from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, Float, String

Scanpy_Find_Variable_Genes_V0_1_0 = CommandToolBuilder(tool="scanpy_find_variable_genes", base_command=["scanpy-find-variable-genes"], inputs=[ToolInput(tag="in_input_format", input_type=Boolean(optional=True), prefix="--input-format", doc=InputDocumentation(doc="[anndata|loom]\nInput object format.  [default: anndata]")), ToolInput(tag="in_output_format", input_type=Boolean(optional=True), prefix="--output-format", doc=InputDocumentation(doc="[anndata|loom|zarr]\nOutput object format.  [default: anndata]")), ToolInput(tag="in_zarr_chunk_size", input_type=Int(optional=True), prefix="--zarr-chunk-size", doc=InputDocumentation(doc="Chunk size for writing output in zarr")), ToolInput(tag="in_export_mtx", input_type=File(optional=True), prefix="--export-mtx", doc=InputDocumentation(doc="When specified, using it as prefix for\nexporting mtx files. If not empty and not\nending with '/' or '_', a '_' will be\nappended.")), ToolInput(tag="in_show_obj", input_type=Boolean(optional=True), prefix="--show-obj", doc=InputDocumentation(doc="[stdout|stderr]      Print output object summary info to\nspecified stream.")), ToolInput(tag="in_mean_limits", input_type=Float(optional=True), prefix="--mean-limits", doc=InputDocumentation(doc="...\nCutoffs for the mean of expressionin the\nformat of '-m min max'.  [default: 0.0125,\n3]")), ToolInput(tag="in_disp_limits", input_type=Float(optional=True), prefix="--disp-limits", doc=InputDocumentation(doc="...\nCutoffs for the dispersion of expressionin\nthe format of '-d min max'.  [default: 0.5,\ninf]")), ToolInput(tag="in_n_bins", input_type=Int(optional=True), prefix="--n-bins", doc=InputDocumentation(doc="Number of bins for binning the mean gene")), ToolInput(tag="in_n_top_genes", input_type=Int(optional=True), prefix="--n-top-genes", doc=InputDocumentation(doc="Number of highly-variable genes to keep.")), ToolInput(tag="in_flavor", input_type=Boolean(optional=True), prefix="--flavor", doc=InputDocumentation(doc="[seurat|cellranger]\nChoose the flavor for computing normalized\ndispersion.  [default: seurat]")), ToolInput(tag="in_subset", input_type=Boolean(optional=True), prefix="--subset", doc=InputDocumentation(doc="When set, inplace subset to highly-variable\ngenes, otherwise only flag highly-variable\ngenes.")), ToolInput(tag="in_by_batch", input_type=Int(optional=True), prefix="--by-batch", doc=InputDocumentation(doc="...\nFind highly variable genes within each batch\ndefined by <TEXT> then pool and keep those\nfound in at least <INTEGER> batches.\n[default: None, None]")), ToolInput(tag="in_input_obj", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_output_obj", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Scanpy_Find_Variable_Genes_V0_1_0().translate("wdl", allow_empty_container=True)

