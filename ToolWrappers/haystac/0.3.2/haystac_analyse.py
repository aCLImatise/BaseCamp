from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Float, Int, Directory, Boolean

Haystac_Analyse_V0_1_0 = CommandToolBuilder(tool="haystac_analyse", base_command=["haystac", "analyse"], inputs=[ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Analysis mode for the selected sample [filter, align,\nlikelihoods, probabilities, abundances, reads,\nmapdamage]")), ToolInput(tag="in_database", input_type=File(optional=True), prefix="--database", doc=InputDocumentation(doc="Path to the database output directory")), ToolInput(tag="in_sample", input_type=File(optional=True), prefix="--sample", doc=InputDocumentation(doc="Path to the sample output directory")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Path to the analysis output directory")), ToolInput(tag="in_genera", input_type=String(optional=True), prefix="--genera", doc=InputDocumentation(doc="[<genus> ...]\nList of genera to restrict the abundance calculations\n(default: [])")), ToolInput(tag="in_min_prob", input_type=Float(optional=True), prefix="--min-prob", doc=InputDocumentation(doc="Minimum posterior probability to assign an aligned\nread to a given species (default: 0.75)")), ToolInput(tag="in_mismatch_probability", input_type=Float(optional=True), prefix="--mismatch-probability", doc=InputDocumentation(doc="Base mismatch probability (default: 0.05)")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Maximum number of CPU cores to use (default: 8)")), ToolInput(tag="in_mem", input_type=Int(optional=True), prefix="--mem", doc=InputDocumentation(doc="Maximum memory (MB) to use (default: 16012)")), ToolInput(tag="in_unlock", input_type=Directory(optional=True), prefix="--unlock", doc=InputDocumentation(doc="Unlock the output directory following a crash or hard\nrestart (default: False)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Enable debugging mode (default: False)")), ToolInput(tag="in_snake_make", input_type=Boolean(optional=True), prefix="--snakemake", doc=InputDocumentation(doc="'<json>'  Pass additional flags to the `snakemake` scheduler."))], outputs=[ToolOutput(tag="out_database", output_type=File(optional=True), selector=InputSelector(input_to_select="in_database", type_hint=File()), doc=OutputDocumentation(doc="Path to the database output directory")), ToolOutput(tag="out_sample", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sample", type_hint=File()), doc=OutputDocumentation(doc="Path to the sample output directory")), ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Path to the analysis output directory")), ToolOutput(tag="out_unlock", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_unlock", type_hint=File()), doc=OutputDocumentation(doc="Unlock the output directory following a crash or hard\nrestart (default: False)"))], container="quay.io/biocontainers/haystac:0.3.2--py36_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Haystac_Analyse_V0_1_0().translate("wdl")

