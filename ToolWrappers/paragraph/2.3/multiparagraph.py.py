from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Directory

Multiparagraph_Py_V0_1_0 = CommandToolBuilder(tool="multiparagraph.py", base_command=["multiparagraph.py"], inputs=[ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="BAM file name")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file name")), ToolInput(tag="in_reference_sequence", input_type=String(optional=True), prefix="--reference-sequence", doc=InputDocumentation(doc="Reference FASTA")), ToolInput(tag="in_extended_output", input_type=Boolean(optional=True), prefix="--extended-output", doc=InputDocumentation(doc="Run paragraph with -E 1")), ToolInput(tag="in_max_events", input_type=Int(optional=True), prefix="--max-events", doc=InputDocumentation(doc="Only do the first n events.")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="Minimum event length.")), ToolInput(tag="in_event_threads", input_type=Int(optional=True), prefix="--event-threads", doc=InputDocumentation(doc="Number of events to process in parallel.")), ToolInput(tag="in_paragraph_threads", input_type=Int(optional=True), prefix="--paragraph-threads", doc=InputDocumentation(doc="Number of threads for parallel read processing.")), ToolInput(tag="in_keep_scratch", input_type=Boolean(optional=True), prefix="--keep-scratch", doc=InputDocumentation(doc="Do not delete temp files.")), ToolInput(tag="in_scratch_dir", input_type=Directory(optional=True), prefix="--scratch-dir", doc=InputDocumentation(doc="Directory for temp files")), ToolInput(tag="in_paragraph", input_type=File(optional=True), prefix="--paragraph", doc=InputDocumentation(doc="Path to the paragraph executable")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logfile", doc=InputDocumentation(doc="Write logging information into file rather than to")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Set logging level to output errors only.")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc="optional arguments:")), ToolInput(tag="in_stderr", input_type=String(), position=1, doc=InputDocumentation(doc="--verbose             Raise logging level from warning to info."))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file name"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Multiparagraph_Py_V0_1_0().translate("wdl", allow_empty_container=True)

