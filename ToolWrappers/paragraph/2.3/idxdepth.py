from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Idxdepth_V0_1_0 = CommandToolBuilder(tool="idxdepth", base_command=["idxdepth"], inputs=[ToolInput(tag="in_arg_bam_cram", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --bam ] arg                      BAM / CRAM input file")), ToolInput(tag="in_bam_index", input_type=File(optional=True), prefix="--bam-index", doc=InputDocumentation(doc="BAM / CRAM index file when not at\ndefault location.")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output ] arg                   Output file name. Will output to stdout\nif omitted.")), ToolInput(tag="in_arg_output_binned", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --output-bins ] arg              Output binned coverage in tsv format.")), ToolInput(tag="in_arg_fasta_reference", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg                FASTA with reference genome")), ToolInput(tag="in_alt_contig", input_type=Int(optional=True), prefix="--altcontig", doc=InputDocumentation(doc="(=0)                  Include ALT contigs in estimation")), ToolInput(tag="in_arg_regex_identify", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="[ --include-regex ] arg            Regex to identify contigs to include")), ToolInput(tag="in_auto_some_regex", input_type=Int(optional=True), prefix="--autosome-regex", doc=InputDocumentation(doc="(=(chr)?[1-9][0-9]?)\nRegex to identify autosome chromosome\nnames (default: '(chr)?[1-9][0-9]?'")), ToolInput(tag="in_sex_chromosome_regex", input_type=String(optional=True), prefix="--sex-chromosome-regex", doc=InputDocumentation(doc="(=(chr)?[XY]?)\nRegex to identify sex chromosome names\n(default: '(chr)?[XY]?'")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="(=8)                    Number of threads to use for parallel")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Log to a file instead of stderr.")), ToolInput(tag="in_log_async", input_type=Int(optional=True), prefix="--log-async", doc=InputDocumentation(doc="(=1)                  Enable / disable async logging.")), ToolInput(tag="in_estimation_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--log-level arg (=info)               Set log level (error, warning, info)."))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output ] arg                   Output file name. Will output to stdout\nif omitted."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Idxdepth_V0_1_0().translate("wdl", allow_empty_container=True)

