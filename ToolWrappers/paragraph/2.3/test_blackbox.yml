!Command
command:
- test_blackbox
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - --gtest_list_tests
  description: "List the names of all tests instead of running them. The name of\n\
    TEST(Foo, Bar) is \"Foo.Bar\"."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gtest_filter
  description: "[-NEGATIVE_PATTERNS]\nRun only the tests whose name matches one of\
    \ the positive patterns but\nnone of the negative patterns. '?' matches any single\
    \ character; '*'\nmatches any substring; ':' separates two patterns."
  args: !SimpleFlagArg
    name: POSTIVE_PATTERNS
- !Flag
  optional: true
  synonyms:
  - --gtest_also_run_disabled_tests
  description: Run all disabled tests too.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gtest_repeat
  description: "=[COUNT]\nRun the tests repeatedly; use a negative count to repeat\
    \ forever."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gtest_shuffle
  description: Randomize tests' orders on every iteration.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gtest_random_seed
  description: "=[NUMBER]\nRandom number seed to use for shuffling test orders (between\
    \ 1 and\n99999, or 0 to use a seed based on the current time)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gtest_color
  description: "=(yes|no|auto)\nEnable/disable colored output. The default is auto."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gtest_print_time
  description: Don't print the elapsed time of each test.
  args: !SimpleFlagArg
    name: '0'
- !Flag
  optional: true
  synonyms:
  - --gtest_output
  description: "[:DIRECTORY_PATH/|:FILE_PATH]\nGenerate an XML report in the given\
    \ directory or with the given file\nname. FILE_PATH defaults to test_details.xml."
  args: !SimpleFlagArg
    name: xml
- !Flag
  optional: true
  synonyms:
  - --gtest_stream_result_to
  description: ":PORT\nStream test results to the given server."
  args: !SimpleFlagArg
    name: HOST
- !Flag
  optional: true
  synonyms:
  - --gtest_death_test_style
  description: "=(fast|threadsafe)\nSet the default death test style."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gtest_break_on_failure
  description: Turn assertion failures into debugger break-points.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gtest_throw_on_failure
  description: Turn assertion failures into C++ exceptions.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gtest_catch_exceptions
  description: "Do not report exceptions as test failures. Instead, allow them\nto\
    \ crash the program or throw a pop-up (on Windows)."
  args: !SimpleFlagArg
    name: '0'
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "This program contains tests written using Google Test. You can use the\n\
  following command line flags to control its behavior:\n\nTest Selection:\n  --gtest_list_tests\n\
  \      List the names of all tests instead of running them. The name of\n      TEST(Foo,\
  \ Bar) is \"Foo.Bar\".\n  --gtest_filter=POSTIVE_PATTERNS[-NEGATIVE_PATTERNS]\n\
  \      Run only the tests whose name matches one of the positive patterns but\n\
  \      none of the negative patterns. '?' matches any single character; '*'\n  \
  \    matches any substring; ':' separates two patterns.\n  --gtest_also_run_disabled_tests\n\
  \      Run all disabled tests too.\n\nTest Execution:\n  --gtest_repeat=[COUNT]\n\
  \      Run the tests repeatedly; use a negative count to repeat forever.\n  --gtest_shuffle\n\
  \      Randomize tests' orders on every iteration.\n  --gtest_random_seed=[NUMBER]\n\
  \      Random number seed to use for shuffling test orders (between 1 and\n    \
  \  99999, or 0 to use a seed based on the current time).\n\nTest Output:\n  --gtest_color=(yes|no|auto)\n\
  \      Enable/disable colored output. The default is auto.\n  --gtest_print_time=0\n\
  \      Don't print the elapsed time of each test.\n  --gtest_output=xml[:DIRECTORY_PATH/|:FILE_PATH]\n\
  \      Generate an XML report in the given directory or with the given file\n  \
  \    name. FILE_PATH defaults to test_details.xml.\n  --gtest_stream_result_to=HOST:PORT\n\
  \      Stream test results to the given server.\n\nAssertion Behavior:\n  --gtest_death_test_style=(fast|threadsafe)\n\
  \      Set the default death test style.\n  --gtest_break_on_failure\n      Turn\
  \ assertion failures into debugger break-points.\n  --gtest_throw_on_failure\n \
  \     Turn assertion failures into C++ exceptions.\n  --gtest_catch_exceptions=0\n\
  \      Do not report exceptions as test failures. Instead, allow them\n      to\
  \ crash the program or throw a pop-up (on Windows).\n\nExcept for --gtest_list_tests,\
  \ you can alternatively set the corresponding\nenvironment variable of a flag (all\
  \ letters in upper-case). For example, to\ndisable colored text output, you can\
  \ either specify --gtest_color=no or set\nthe GTEST_COLOR environment variable to\
  \ no.\n\nFor more information, please read the Google Test documentation at\nhttps://github.com/google/googletest/.\
  \ If you find a bug in Google Test\n(not one in your own code or tests), please\
  \ report it to\n<googletestframework@googlegroups.com>.\n"
generated_using:
- --help
docker_image:
