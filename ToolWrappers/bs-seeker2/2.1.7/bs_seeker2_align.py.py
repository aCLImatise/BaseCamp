from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String, Float

Bs_Seeker2_Align_Py_V0_1_0 = CommandToolBuilder(tool="bs_seeker2_align.py", base_command=["bs_seeker2-align.py"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Input read file (FORMAT: sequences, qseq, fasta,\nfastq). Ex: read.fa or read.fa.gz")), ToolInput(tag="in_input_one", input_type=File(optional=True), prefix="--input_1", doc=InputDocumentation(doc="Input read file, mate 1 (FORMAT: sequences, qseq,\nfasta, fastq)")), ToolInput(tag="in_input_two", input_type=File(optional=True), prefix="--input_2", doc=InputDocumentation(doc="Input read file, mate 2 (FORMAT: sequences, qseq,\nfasta, fastq)")), ToolInput(tag="in_mini_ns", input_type=Int(optional=True), prefix="--minins", doc=InputDocumentation(doc="The minimum insert size for valid paired-end\nalignments [Default: 0]")), ToolInput(tag="in_max_ins", input_type=Int(optional=True), prefix="--maxins", doc=InputDocumentation(doc="The maximum insert size for valid paired-end\nalignments [Default: 500]")), ToolInput(tag="in_rrbs", input_type=Boolean(optional=True), prefix="--rrbs", doc=InputDocumentation(doc="Map reads to the Reduced Representation genome")), ToolInput(tag="in_cut_site", input_type=String(optional=True), prefix="--cut-site", doc=InputDocumentation(doc="Cutting sites of restriction enzyme. Ex: MspI(C-CGG),\nMael:(C-TAG), double-enzyme MspI&Mael:(C-CGG,C-TAG).\n[Default: C-CGG]")), ToolInput(tag="in_low", input_type=Int(optional=True), prefix="--low", doc=InputDocumentation(doc="Lower bound of fragment length (excluding C-CGG ends)\n[Default: 20]")), ToolInput(tag="in_up", input_type=Int(optional=True), prefix="--up", doc=InputDocumentation(doc="Upper bound of fragment length (excluding C-CGG ends)\n[Default: 500]")), ToolInput(tag="in_tag", input_type=String(optional=True), prefix="--tag", doc=InputDocumentation(doc="[Y]es for undirectional lib, [N]o for directional\n[Default: N]")), ToolInput(tag="in_start_base", input_type=Int(optional=True), prefix="--start_base", doc=InputDocumentation(doc="The first cycle of the read to be mapped [Default: 1]")), ToolInput(tag="in_end_base", input_type=Int(optional=True), prefix="--end_base", doc=InputDocumentation(doc="The last cycle of the read to be mapped [Default: 200]")), ToolInput(tag="in_adapter", input_type=File(optional=True), prefix="--adapter", doc=InputDocumentation(doc="Input text file of your adaptor sequences (to be\ntrimmed from the 3'end of the reads, ). Input one seq\nfor dir. lib., twon seqs for undir. lib. One line per\nsequence. Only the first 10bp will be used")), ToolInput(tag="in_am", input_type=Int(optional=True), prefix="--am", doc=InputDocumentation(doc="Number of mismatches allowed in adapter [Default: 0]")), ToolInput(tag="in_genome", input_type=Int(optional=True), prefix="--genome", doc=InputDocumentation(doc="Name of the reference genome (should be the same as\n'-f' in bs_seeker2-build.py ) [ex. chr21_hg18.fa]")), ToolInput(tag="in_mismatches", input_type=Int(optional=True), prefix="--mismatches", doc=InputDocumentation(doc="Number(>=1)/Percentage([0, 1)) of mismatches in one\nread. Ex: 4 (allow 4 mismatches) or 0.04 (allow 4%\nmismatches) [Default: 4]")), ToolInput(tag="in_aligner", input_type=Int(optional=True), prefix="--aligner", doc=InputDocumentation(doc="Aligner program for short reads mapping: bowtie,\nbowtie2, soap, rmap [Default: bowtie]")), ToolInput(tag="in_path", input_type=File(optional=True), prefix="--path", doc=InputDocumentation(doc="Path to the aligner program. Detected:\nbowtie: None\nbowtie2: /usr/local/bin\nrmap: None\nsoap: None")), ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="Path to the reference genome library (generated in\npreprocessing genome) [Default:\n/usr/local/bin/bs_utils/reference_genomes]")), ToolInput(tag="in_split_line", input_type=Int(optional=True), prefix="--split_line", doc=InputDocumentation(doc="Number of lines per split (the read file will be split\ninto small files for mapping. The result will be\nmerged. [Default: 4000000]")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="The name of output file [INFILE.bs(se|pe|rrbs)]")), ToolInput(tag="in_output_format", input_type=Int(optional=True), prefix="--output-format", doc=InputDocumentation(doc="Output format: bam, sam, bs_seeker1 [Default: bam]")), ToolInput(tag="in_no_header", input_type=Boolean(optional=True), prefix="--no-header", doc=InputDocumentation(doc="Suppress SAM header lines [Default: False]")), ToolInput(tag="in_temp_dir", input_type=File(optional=True), prefix="--temp_dir", doc=InputDocumentation(doc="The path to your temporary directory [Detected: /tmp]")), ToolInput(tag="in_xs", input_type=Float(optional=True), prefix="--XS", doc=InputDocumentation(doc="Filter definition for tag XS, format X,Y. X=0.8 and\ny=5 indicate that for one read, if #(mCH sites)/#(all\nCH sites)>0.8 and #(mCH sites)>5, then tag XS:i:1; or\nelse tag XS:i:0. [Default: 0.5,5]")), ToolInput(tag="in_x_steve", input_type=Boolean(optional=True), prefix="--XSteve", doc=InputDocumentation(doc="Filter definition for tag XS, proposed by Prof. Steve\nJacobsen, reads with at least 3 successive mCHH will\nbe labeled as XS:i:1,useful for plant genome, which\nhave high mCHG level. Will override --XS option.")), ToolInput(tag="in_multiple_hit", input_type=File(optional=True), prefix="--multiple-hit", doc=InputDocumentation(doc="File to store reads with multiple-hits")), ToolInput(tag="in_unmapped", input_type=File(optional=True), prefix="--unmapped", doc=InputDocumentation(doc="File to store unmapped reads")), ToolInput(tag="in_bt_p", input_type=Int(optional=True), prefix="--bt-p", doc=InputDocumentation(doc="will increase the number of threads for bowtie to 4, --bt--"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="The name of output file [INFILE.bs(se|pe|rrbs)]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bs_Seeker2_Align_Py_V0_1_0().translate("wdl", allow_empty_container=True)

