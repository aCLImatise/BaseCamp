from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Bs_Seeker2_Call_Methylation_Py_V0_1_0 = CommandToolBuilder(tool="bs_seeker2_call_methylation.py", base_command=["bs_seeker2-call_methylation.py"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="BAM output from bs_seeker2-align.py")), ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="Path to the reference genome library (generated in\npreprocessing genome) [Default:\n/usr/local/bin/bs_utils/reference_genomes]")), ToolInput(tag="in_output_prefix", input_type=String(optional=True), prefix="--output-prefix", doc=InputDocumentation(doc="The output prefix to create ATCGmap and wiggle files.\nThree files (ATCGmap, CGmap, wig) will be generated if\nspecified. Omit this if only to generate specific\nformat.")), ToolInput(tag="in_sorted", input_type=Boolean(optional=True), prefix="--sorted", doc=InputDocumentation(doc="Specify when the input bam file is already sorted, the\nsorting step will be skipped [Default: False]")), ToolInput(tag="in_wig", input_type=File(optional=True), prefix="--wig", doc=InputDocumentation(doc="Filename for wig file. Ex: output.wig, or\noutput.wig.gz. Can be overwritten by '-o'.")), ToolInput(tag="in_cg_map", input_type=File(optional=True), prefix="--CGmap", doc=InputDocumentation(doc="Filename for CGmap file. Ex: output.CGmap, or\noutput.CGmap.gz. Can be overwritten by '-o'.")), ToolInput(tag="in_at_cg_map", input_type=File(optional=True), prefix="--ATCGmap", doc=InputDocumentation(doc="Filename for ATCGmap file. Ex: output.ATCGmap, or\noutput.ATCGmap.gz. Can be overwritten by '-o'.")), ToolInput(tag="in_rm_sx", input_type=Boolean(optional=True), prefix="--rm-SX", doc=InputDocumentation(doc="Removed reads with tag 'XS:i:1', which would be\nconsidered as not fully converted by bisulfite\ntreatment [Default: False]")), ToolInput(tag="in_rm_ccgg", input_type=Boolean(optional=True), prefix="--rm-CCGG", doc=InputDocumentation(doc="Removed sites located in CCGG, avoiding the bias\nintroduced by artificial DNA methylation status\n'XS:i:1', which would be considered as not fully\nconverted by bisulfite treatment [Default: False]")), ToolInput(tag="in_rm_overlap", input_type=Boolean(optional=True), prefix="--rm-overlap", doc=InputDocumentation(doc="Removed one mate if two mates are overlapped, for\npaired-end data [Default: False]")), ToolInput(tag="in_txt", input_type=File(optional=True), prefix="--txt", doc=InputDocumentation(doc="When specified, output file will be stored in plain\ntext instead of compressed version (.gz)")), ToolInput(tag="in_read_no", input_type=Int(optional=True), prefix="--read-no", doc=InputDocumentation(doc="The least number of reads covering one site to be\nshown in wig file [Default: 1]")), ToolInput(tag="in_pile_up_maxdepth", input_type=Int(optional=True), prefix="--pileup-maxdepth", doc=InputDocumentation(doc="The max number of read depth can be called for each\nposition. Parameter passing to pysam. Large number\ncosts more time.[Default: 8000]"))], outputs=[ToolOutput(tag="out_wig", output_type=File(optional=True), selector=InputSelector(input_to_select="in_wig", type_hint=File()), doc=OutputDocumentation(doc="Filename for wig file. Ex: output.wig, or\noutput.wig.gz. Can be overwritten by '-o'.")), ToolOutput(tag="out_cg_map", output_type=File(optional=True), selector=InputSelector(input_to_select="in_cg_map", type_hint=File()), doc=OutputDocumentation(doc="Filename for CGmap file. Ex: output.CGmap, or\noutput.CGmap.gz. Can be overwritten by '-o'.")), ToolOutput(tag="out_at_cg_map", output_type=File(optional=True), selector=InputSelector(input_to_select="in_at_cg_map", type_hint=File()), doc=OutputDocumentation(doc="Filename for ATCGmap file. Ex: output.ATCGmap, or\noutput.ATCGmap.gz. Can be overwritten by '-o'.")), ToolOutput(tag="out_txt", output_type=File(optional=True), selector=InputSelector(input_to_select="in_txt", type_hint=File()), doc=OutputDocumentation(doc="When specified, output file will be stored in plain\ntext instead of compressed version (.gz)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bs_Seeker2_Call_Methylation_Py_V0_1_0().translate("wdl", allow_empty_container=True)

