from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Zagros_V0_1_0 = CommandToolBuilder(tool="zagros", base_command=["zagros"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="-output", doc=InputDocumentation(doc="output file name (default: stdout)")), ToolInput(tag="in_width", input_type=Boolean(optional=True), prefix="-width", doc=InputDocumentation(doc="width of motifs to find (4 <= w <= 12; default: 6)")), ToolInput(tag="in_number", input_type=Boolean(optional=True), prefix="-number", doc=InputDocumentation(doc="number of motifs to output (default: 10)")), ToolInput(tag="in_chrom", input_type=Boolean(optional=True), prefix="-chrom", doc=InputDocumentation(doc="directory with chrom files (FASTA format)")), ToolInput(tag="in_structure", input_type=Boolean(optional=True), prefix="-structure", doc=InputDocumentation(doc="structure information file")), ToolInput(tag="in_diagnostic_events", input_type=Boolean(optional=True), prefix="-diagnostic_events", doc=InputDocumentation(doc="diagnostic events information file")), ToolInput(tag="in_delta", input_type=Boolean(optional=True), prefix="-delta", doc=InputDocumentation(doc="provide a fixed value for delta, the offset of\ncross-linking site from motif occurrences. -8 <= l <=\n8; if omitted, delta is optimised using an exhaustive\nsearch")), ToolInput(tag="in_geo", input_type=Boolean(optional=True), prefix="-geo", doc=InputDocumentation(doc="optimize the geometric distributionparameter for\nthe distirbution of cross-link sites around motif\noccurrences, using the Newton-Raphson algorithm.\nIf omitted, this parameter is not optimised and is set\nto a empirically pre-determined default value.")), ToolInput(tag="in_de_weight", input_type=Boolean(optional=True), prefix="-de_weight", doc=InputDocumentation(doc="A weight to determine the diagnostic events' level of\ncontribution (default: 1.1)")), ToolInput(tag="in_indicators", input_type=File(optional=True), prefix="-indicators", doc=InputDocumentation(doc="output indicator probabilities for each sequence\nand motif to this file")), ToolInput(tag="in_starting_points", input_type=Boolean(optional=True), prefix="-starting-points", doc=InputDocumentation(doc="number of starting points to try for EM search. Higher\nvalues will be slower, but more likely to find the\nglobal maximum (default: 10)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="print more run info")), ToolInput(tag="in_about", input_type=Boolean(optional=True), prefix="-about", doc=InputDocumentation(doc="print about message")), ToolInput(tag="in_target_regions_slash_sequences", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output file name (default: stdout)")), ToolOutput(tag="out_indicators", output_type=File(optional=True), selector=InputSelector(input_to_select="in_indicators", type_hint=File()), doc=OutputDocumentation(doc="output indicator probabilities for each sequence\nand motif to this file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Zagros_V0_1_0().translate("wdl", allow_empty_container=True)

