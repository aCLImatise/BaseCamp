version 1.0

task Gottchapl {
  input {
    Boolean? i_string_input
    Boolean? database
    Boolean? threads
    Boolean? db_level
    Directory? outdir
    Boolean? prefix
    Boolean? rel_abu
    File? mode
    Boolean? no_plasmid_hit
    Boolean? bwa_opt
    Boolean? st_dir
    Boolean? dumps_am
    Boolean? min_q
    Boolean? fix_l
    Boolean? ascii
    Boolean? min_cov
    Boolean? min_ml_hl
    Boolean? c_cov
    Boolean? min_len
    Boolean? min_hits
  }
  command <<<
    gottcha_pl \
      ~{if (i_string_input) then "--input" else ""} \
      ~{if (database) then "--database" else ""} \
      ~{if (threads) then "--threads" else ""} \
      ~{if (db_level) then "--dbLevel" else ""} \
      ~{if (outdir) then "--outdir" else ""} \
      ~{if (prefix) then "--prefix" else ""} \
      ~{if (rel_abu) then "--relAbu" else ""} \
      ~{if (mode) then "--mode" else ""} \
      ~{if (no_plasmid_hit) then "--noPlasmidHit" else ""} \
      ~{if (bwa_opt) then "--bwaOpt" else ""} \
      ~{if (st_dir) then "--stDir" else ""} \
      ~{if (dumps_am) then "--dumpSam" else ""} \
      ~{if (min_q) then "--minQ" else ""} \
      ~{if (fix_l) then "--fixL" else ""} \
      ~{if (ascii) then "--ascii" else ""} \
      ~{if (min_cov) then "--minCov" else ""} \
      ~{if (min_ml_hl) then "--minMLHL" else ""} \
      ~{if (c_cov) then "--cCov" else ""} \
      ~{if (min_len) then "--minLen" else ""} \
      ~{if (min_hits) then "--minHits" else ""}
  >>>
  runtime {
    docker: "None"
  }
  parameter_meta {
    i_string_input: "|i    <STRING>  Input one or multiple FASTQ file(s). Use comma (,)\\nto separate multiple input files."
    database: "|d <STRING>  The path of signature database. The database can be\\nin FASTA format or BWA index (5 files)."
    threads: "|t  <INT>     Number of threads [default: auto-detect]"
    db_level: "|l  <STRING>  Specify the taxonomic level of the input database\\n(e.g. family, species, genus, strain, etc.). The\\nvalue will be auto-detected if the input database\\nended with levels (e.g. GOTTCHA_db.species).\\n[default: none]"
    outdir: "|o   <STRING>  Output directory [default: ./]"
    prefix: "|p   <STRING>  Filename prefix of the output.\\n[default: <INPUT_FILENAME_PREFIX>]"
    rel_abu: "|r   <STRING>  The field will be used to calculate relative\\nabundance. You can specify one of the following\\nfields: \\\"LINEAR_LENGTH\\\", \\\"TOTAL_BP_MAPPED\\\",\\n\\\"HIT_COUNT\\\", \\\"LINEAR_DOC\\\".\\n[default: LINEAR_DOC]"
    mode: "|m     <STRING>  You can specify one of the output mode:\\n\\\"summary\\\" : this mode will report a summary of\\nprofiling result to *.gottcha.tsv file.\\n\\\"full\\\"    : other than a summary, this mode will\\nreport unfiltered result to\\n*.gottcha_full.tsv with more detail.\\n\\\"all\\\"     : other than two tables, this mode will\\nkeep all output files that were\\ngenerated by each profiling step.\\n[default: summary]"
    no_plasmid_hit: "|n       Ignore alignments that hit to plasmids\\n[default: null]"
    bwa_opt: "|b   <STRING>  BWA-MEM in this script is used to map input reads to\\nGOTTCHA database. If you want to run it with your own\\nparameters, use this option to specify.\\n[default: \\\"-k 30 -T 0 -B 100 -O 100 -E 100\\\"]"
    st_dir: "|s    <STRING>  Specify a directory contains pre-splitrimmed input\\nfiles. E.g. input file is \\\"test.fastq\\\", the script\\nwill looking for \\\"test_splitrim.fastq\\\" and\\n\\\"test_splitrim.stats.txt\\\" in the specified directory."
    dumps_am: "Dump the mapping result in SAM format."
    min_q: "<INT>     Minimum quality for a read to be considered valid\\n(0-41) [default: 20]"
    fix_l: "<INT>     Fixed length to which each trimmed read will be cut\\ndown to [default: 30]"
    ascii: "<INT>     ASCII encoding of quality score (33 or 64) [default:\\n33]"
    min_cov: "<FLOAT>   Minimum linear coverage to be considered valid in\\nabundance calculation [default: 0.005]"
    min_ml_hl: "<INT>     Minimum Mean-Linear-Hit-Length to be considered valid\\nin abundance calculation [default: 5]"
    c_cov: "<FLOAT>   Critical coverage below which --minMLHL will cause an\\norganism to fail [default: 0.006]"
    min_len: "<INT>     Minimum unique length to be considered valid in\\nabundance calculation [default: 100]"
    min_hits: "<INT>     Minimum number of hits to be considered valid in\\nabundance calculation [10]"
  }
  output {
    File out_stdout = stdout()
    Directory out_outdir = "${in_outdir}"
    File out_mode = "${in_mode}"
  }
}