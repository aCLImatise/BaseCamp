from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, File

Gottcha_Pl_V0_1_0 = CommandToolBuilder(tool="gottcha.pl", base_command=["gottcha.pl"], inputs=[ToolInput(tag="in_input", input_type=Boolean(optional=True), prefix="--input", doc=InputDocumentation(doc="|i    <STRING>  Input one or multiple FASTQ file(s). Use comma (,)\nto separate multiple input files.")), ToolInput(tag="in_database", input_type=Boolean(optional=True), prefix="--database", doc=InputDocumentation(doc="|d <STRING>  The path of signature database. The database can be\nin FASTA format or BWA index (5 files).")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="|t  <INT>     Number of threads [default: auto-detect]")), ToolInput(tag="in_db_level", input_type=Boolean(optional=True), prefix="--dbLevel", doc=InputDocumentation(doc="|l  <STRING>  Specify the taxonomic level of the input database\n(e.g. family, species, genus, strain, etc.). The\nvalue will be auto-detected if the input database\nended with levels (e.g. GOTTCHA_db.species).\n[default: none]")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="|o   <STRING>  Output directory [default: ./]")), ToolInput(tag="in_prefix", input_type=Boolean(optional=True), prefix="--prefix", doc=InputDocumentation(doc="|p   <STRING>  Filename prefix of the output.\n[default: <INPUT_FILENAME_PREFIX>]")), ToolInput(tag="in_rel_abu", input_type=Boolean(optional=True), prefix="--relAbu", doc=InputDocumentation(doc="|r   <STRING>  The field will be used to calculate relative\nabundance. You can specify one of the following\nfields: 'LINEAR_LENGTH', 'TOTAL_BP_MAPPED',\n'HIT_COUNT', 'LINEAR_DOC'.\n[default: LINEAR_DOC]")), ToolInput(tag="in_mode", input_type=File(optional=True), prefix="--mode", doc=InputDocumentation(doc="|m     <STRING>  You can specify one of the output mode:\n'summary' : this mode will report a summary of\nprofiling result to *.gottcha.tsv file.\n'full'    : other than a summary, this mode will\nreport unfiltered result to\n*.gottcha_full.tsv with more detail.\n'all'     : other than two tables, this mode will\nkeep all output files that were\ngenerated by each profiling step.\n[default: summary]")), ToolInput(tag="in_no_plasmid_hit", input_type=Boolean(optional=True), prefix="--noPlasmidHit", doc=InputDocumentation(doc="|n       Ignore alignments that hit to plasmids\n[default: null]")), ToolInput(tag="in_bwa_opt", input_type=Boolean(optional=True), prefix="--bwaOpt", doc=InputDocumentation(doc="|b   <STRING>  BWA-MEM in this script is used to map input reads to\nGOTTCHA database. If you want to run it with your own\nparameters, use this option to specify.\n[default: '-k 30 -T 0 -B 100 -O 100 -E 100']")), ToolInput(tag="in_st_dir", input_type=Boolean(optional=True), prefix="--stDir", doc=InputDocumentation(doc="|s    <STRING>  Specify a directory contains pre-splitrimmed input\nfiles. E.g. input file is 'test.fastq', the script\nwill looking for 'test_splitrim.fastq' and\n'test_splitrim.stats.txt' in the specified directory.")), ToolInput(tag="in_dumps_am", input_type=Boolean(optional=True), prefix="--dumpSam", doc=InputDocumentation(doc="Dump the mapping result in SAM format.")), ToolInput(tag="in_min_q", input_type=Boolean(optional=True), prefix="--minQ", doc=InputDocumentation(doc="<INT>     Minimum quality for a read to be considered valid\n(0-41) [default: 20]")), ToolInput(tag="in_fix_l", input_type=Boolean(optional=True), prefix="--fixL", doc=InputDocumentation(doc="<INT>     Fixed length to which each trimmed read will be cut\ndown to [default: 30]")), ToolInput(tag="in_ascii", input_type=Boolean(optional=True), prefix="--ascii", doc=InputDocumentation(doc="<INT>     ASCII encoding of quality score (33 or 64) [default:\n33]")), ToolInput(tag="in_min_cov", input_type=Boolean(optional=True), prefix="--minCov", doc=InputDocumentation(doc="<FLOAT>   Minimum linear coverage to be considered valid in\nabundance calculation [default: 0.005]")), ToolInput(tag="in_min_ml_hl", input_type=Boolean(optional=True), prefix="--minMLHL", doc=InputDocumentation(doc="<INT>     Minimum Mean-Linear-Hit-Length to be considered valid\nin abundance calculation [default: 5]")), ToolInput(tag="in_c_cov", input_type=Boolean(optional=True), prefix="--cCov", doc=InputDocumentation(doc="<FLOAT>   Critical coverage below which --minMLHL will cause an\norganism to fail [default: 0.006]")), ToolInput(tag="in_min_len", input_type=Boolean(optional=True), prefix="--minLen", doc=InputDocumentation(doc="<INT>     Minimum unique length to be considered valid in\nabundance calculation [default: 100]")), ToolInput(tag="in_min_hits", input_type=Boolean(optional=True), prefix="--minHits", doc=InputDocumentation(doc="<INT>     Minimum number of hits to be considered valid in\nabundance calculation [10]"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="|o   <STRING>  Output directory [default: ./]")), ToolOutput(tag="out_mode", output_type=File(optional=True), selector=InputSelector(input_to_select="in_mode", type_hint=File()), doc=OutputDocumentation(doc="|m     <STRING>  You can specify one of the output mode:\n'summary' : this mode will report a summary of\nprofiling result to *.gottcha.tsv file.\n'full'    : other than a summary, this mode will\nreport unfiltered result to\n*.gottcha_full.tsv with more detail.\n'all'     : other than two tables, this mode will\nkeep all output files that were\ngenerated by each profiling step.\n[default: summary]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gottcha_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

