!Command
command:
- dumbbench
positional: []
named:
- !Flag
  description: 'Set the target precision (default: 0.10=10%)'
  synonyms:
  - --precision
  args: !SimpleFlagArg
    name: X
  optional: true
- !Flag
  description: 'Set the target absolute precision (default: 0)'
  synonyms:
  - --absprecision
  args: !SimpleFlagArg
    name: X
  optional: true
- !Flag
  description: Increase verbosity. Increases up to three times.
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'Set number of initial timing runs (default: 20)'
  synonyms:
  - -i
  - --initial
  args: !SimpleFlagArg
    name: X
  optional: true
- !Flag
  description: Set a hard maximum number of iterations (default:1000)
  synonyms:
  - -m
  - --maxiter
  args: !SimpleFlagArg
    name: X
  optional: true
- !Flag
  description: Set explicit dry-run command or code.
  synonyms:
  - -d
  - --dry-run
  args: !SimpleFlagArg
    name: X
  optional: true
- !Flag
  description: Disable subtraction of dry runs.
  synonyms:
  - --no-dry-run
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Set raw output mode. Only the final count will be
  synonyms:
  - --raw
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Numbers will be printed in
  synonyms:
  - --float
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Use the standard deviation instead of the MAD as a
  synonyms:
  - -s
  - --std
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ='code'     Benchmarks Perl code (can be specified multiple times
  synonyms:
  - --code
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ='package' Perl package of subroutines to benchmark. The
  synonyms:
  - --package
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|table=X       Output timings as a data table suitable for R. Each'
  synonyms:
  - --t
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Advanced option (Linux only): Attempt to use 'sudo'"
  synonyms:
  - --pin-frequency
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "h\n\nUsage: /usr/local/bin/dumbbench [options] -- command with arguments\n\
  Or:    /usr/local/bin/dumbbench [options] --code='Perl-code-to-benchmark'\nOr: \
  \   /usr/local/bin/dumbbench [options] --package='Perl-package-with-subs-to-benchmark'\n\
  \nFor a full manual of the underlying module, see\n\"perldoc Dumbbench\"\n\nOptions:\n\
  \ -p=X\n --precision=X     Set the target precision (default: 0.10=10%)\n      \
  \             Set to 0 to disable.\n -a=x\n --absprecision=X  Set the target absolute\
  \ precision (default: 0)\n                   Set to 0 to disable.\n -v|--verbose\
  \      Increase verbosity. Increases up to three times.\n -i=X|--initial=X  Set\
  \ number of initial timing runs (default: 20)\n                   Increase, not\
  \ decrease this number if possible.\n -m=X|--maxiter=X  Set a hard maximum number\
  \ of iterations (default:1000)\n                   If this hard limit is hit, the\
  \ precision is off.\n -d=X|--dry-run=X  Set explicit dry-run command or code.\n\
  \ --no-dry-run      Disable subtraction of dry runs.\n --raw             Set raw\
  \ output mode. Only the final count will be\n                   printed to stdout.\n\
  \ --float           Numbers will be printed in\n                   default float\
  \ format instead of scientific notation.\n -s|--std          Use the standard deviation\
  \ instead of the MAD as a\n                   measure of variability.\n --code='code'\
  \     Benchmarks Perl code (can be specified multiple times\n                  \
  \ for multiple benchmarks)\n --package='package' Perl package of subroutines to\
  \ benchmark. The\n                   package must define get_subs_to_benchmark()\
  \ that\n                   returns a list of subroutine names to benchmark\n --t|table=X\
  \       Output timings as a data table suitable for R. Each\n                  \
  \ column of timings is headed by the code name.\n --pin-frequency   Advanced option\
  \ (Linux only): Attempt to use 'sudo'\n                   to pin the CPU frequency\
  \ on CPUs that can do dynamic\n                   frequency scaling. This improves\
  \ accuracy, but relies\n                   on a hardcoded location in the /sys/\
  \ filesystem.\n                   Use at your own risk.\n"
generated_using:
- --help
