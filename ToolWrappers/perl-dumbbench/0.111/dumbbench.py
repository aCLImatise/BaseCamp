from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, Int, Boolean, String

Dumbbench_V0_1_0 = CommandToolBuilder(tool="dumbbench", base_command=["dumbbench"], inputs=[ToolInput(tag="in_precision", input_type=Float(optional=True), prefix="--precision", doc=InputDocumentation(doc="Set the target precision (default: 0.10=10%)\nSet to 0 to disable.")), ToolInput(tag="in_abs_precision", input_type=Int(optional=True), prefix="--absprecision", doc=InputDocumentation(doc="Set the target absolute precision (default: 0)\nSet to 0 to disable.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase verbosity. Increases up to three times.")), ToolInput(tag="in_initial", input_type=Int(optional=True), prefix="--initial", doc=InputDocumentation(doc="Set number of initial timing runs (default: 20)\nIncrease, not decrease this number if possible.")), ToolInput(tag="in_maxiter", input_type=Int(optional=True), prefix="--maxiter", doc=InputDocumentation(doc="Set a hard maximum number of iterations (default:1000)\nIf this hard limit is hit, the precision is off.")), ToolInput(tag="in_dry_run", input_type=String(optional=True), prefix="--dry-run", doc=InputDocumentation(doc="Set explicit dry-run command or code.")), ToolInput(tag="in_no_dry_run", input_type=Boolean(optional=True), prefix="--no-dry-run", doc=InputDocumentation(doc="Disable subtraction of dry runs.")), ToolInput(tag="in_raw", input_type=Boolean(optional=True), prefix="--raw", doc=InputDocumentation(doc="Set raw output mode. Only the final count will be\nprinted to stdout.")), ToolInput(tag="in_float", input_type=Boolean(optional=True), prefix="--float", doc=InputDocumentation(doc="Numbers will be printed in\ndefault float format instead of scientific notation.")), ToolInput(tag="in_std", input_type=Boolean(optional=True), prefix="--std", doc=InputDocumentation(doc="Use the standard deviation instead of the MAD as a\nmeasure of variability.")), ToolInput(tag="in_code", input_type=Boolean(optional=True), prefix="--code", doc=InputDocumentation(doc="='code'     Benchmarks Perl code (can be specified multiple times\nfor multiple benchmarks)")), ToolInput(tag="in_package", input_type=Boolean(optional=True), prefix="--package", doc=InputDocumentation(doc="='package' Perl package of subroutines to benchmark. The\npackage must define get_subs_to_benchmark() that\nreturns a list of subroutine names to benchmark")), ToolInput(tag="in_tablex_output_timings", input_type=Boolean(optional=True), prefix="--t", doc=InputDocumentation(doc="|table=X       Output timings as a data table suitable for R. Each\ncolumn of timings is headed by the code name.")), ToolInput(tag="in_pin_frequency", input_type=Boolean(optional=True), prefix="--pin-frequency", doc=InputDocumentation(doc="Advanced option (Linux only): Attempt to use 'sudo'\nto pin the CPU frequency on CPUs that can do dynamic\nfrequency scaling. This improves accuracy, but relies\non a hardcoded location in the /sys/ filesystem.\nUse at your own risk.\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dumbbench_V0_1_0().translate("wdl", allow_empty_container=True)

