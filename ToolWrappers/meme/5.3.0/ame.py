from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, String, File, Int, Boolean, Float

Ame_V0_1_0 = CommandToolBuilder(tool="ame", base_command=["ame"], inputs=[ToolInput(tag="in_output_directory_default", input_type=Directory(optional=True), prefix="--o", doc=InputDocumentation(doc="output directory; default: ame_out")), ToolInput(tag="in_oc", input_type=String(optional=True), prefix="--oc", doc=InputDocumentation(doc="overwrite output; default: ame_out")), ToolInput(tag="in_control", input_type=File(optional=True), prefix="--control", doc=InputDocumentation(doc="control sequences in FASTA format or the keyword\n'--shuffle--' to use shuffled versions of the\nprimary sequences")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="preserve k-mer frequencies when shuffling;\ndefault: 2")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="random number seed (integer); default: 1")), ToolInput(tag="in_method", input_type=Boolean(optional=True), prefix="--method", doc=InputDocumentation(doc="[fisher|3dmhg|4dmhg|ranksum|pearson|spearman]\nstatistical test; default: fisher")), ToolInput(tag="in_scoring", input_type=Boolean(optional=True), prefix="--scoring", doc=InputDocumentation(doc="[avg|max|sum|totalhits]\nsequence scoring method; default: avg")), ToolInput(tag="in_hit_lo_fraction", input_type=Float(optional=True), prefix="--hit-lo-fraction", doc=InputDocumentation(doc="fraction of maximum log-odds for a hit;\ndefault: 0.25")), ToolInput(tag="in_evalue_report_threshold", input_type=Int(optional=True), prefix="--evalue-report-threshold", doc=InputDocumentation(doc="motif significance reporting threshold;\ndefault: 10")), ToolInput(tag="in_fast_a_threshold", input_type=Float(optional=True), prefix="--fasta-threshold", doc=InputDocumentation(doc="maximum FASTA score for sequence to be positive\n(requires --poslist pwm); default: 0.001")), ToolInput(tag="in_fix_partition", input_type=Int(optional=True), prefix="--fix-partition", doc=InputDocumentation(doc="number of sequences in positive partition;")), ToolInput(tag="in_pos_list", input_type=Boolean(optional=True), prefix="--poslist", doc=InputDocumentation(doc="[fasta|pwm]     partition on affinity (fasta) or motif (pwm)\nscores; default: fasta")), ToolInput(tag="in_log_f_scores", input_type=Boolean(optional=True), prefix="--log-fscores", doc=InputDocumentation(doc="use log of FASTA scores (pearson) or log of\nranks (spearman)")), ToolInput(tag="in_log_pwm_scores", input_type=Boolean(optional=True), prefix="--log-pwmscores", doc=InputDocumentation(doc="use log of log of PWM scores")), ToolInput(tag="in_lin_reg_switch_xy", input_type=Boolean(optional=True), prefix="--linreg-switchxy", doc=InputDocumentation(doc="switch roles of X=FASTA scores and Y=PWM scores")), ToolInput(tag="in_x_alph", input_type=File(optional=True), prefix="--xalph", doc=InputDocumentation(doc="motifs will be converted to this custom alphabet")), ToolInput(tag="in_b_file", input_type=File(optional=True), prefix="--bfile", doc=InputDocumentation(doc="background model file; default: motif file freqs\ndefault: unconstrained partition maximization")), ToolInput(tag="in_motif_pseudo", input_type=Float(optional=True), prefix="--motif-pseudo", doc=InputDocumentation(doc="pseudocount for creating PWMs from motifs;\ndefault: 0.1")), ToolInput(tag="in_inc", input_type=String(optional=True), prefix="--inc", doc=InputDocumentation(doc="name pattern to select as motif; may be\nrepeated; default: all motifs are used")), ToolInput(tag="in_exc", input_type=String(optional=True), prefix="--exc", doc=InputDocumentation(doc="name pattern to exclude as motif; may be\nrepeated; default: all motifs are used")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="[1|2|3|4|5]     controls program verbosity (5=maximum verbosity);\ndefault: 2")), ToolInput(tag="in_sequence_file", input_type=File(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_motif_file", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_directory_default", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory_default", type_hint=File()), doc=OutputDocumentation(doc="output directory; default: ame_out"))], container="quay.io/biocontainers/meme:5.3.0--py38pl526hc1f1133_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ame_V0_1_0().translate("wdl")

