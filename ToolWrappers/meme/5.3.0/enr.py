from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean, Float

Enr_V0_1_0 = CommandToolBuilder(tool="enr", base_command=["enr"], inputs=[ToolInput(tag="in_positive_sequence_file", input_type=File(optional=True), prefix="--p", doc=InputDocumentation(doc="positive sequence file name (required)")), ToolInput(tag="in_motif_file_name", input_type=File(optional=True), prefix="--m", doc=InputDocumentation(doc="motif file name (required, may be repeated)")), ToolInput(tag="in_obj_fun", input_type=String(optional=True), prefix="--objfun", doc=InputDocumentation(doc="|cd           objective function (<objfun>)\nde : Differential Enrichment\ncd : Central Distance\ndefault: de")), ToolInput(tag="in_negative_sequence_file", input_type=File(optional=True), prefix="--n", doc=InputDocumentation(doc="negative sequence file name;\ndefaults: if --n is not given, then STREME\ncreates negative sequences as follows:\n<objfun> = de, shuffle positive sequences\n= cd, no negative sequences allowed")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="shuffle positive sequences preserving k-mers\nand the positions of the non-core characters\ndefault: 3 (DNA), 3 (RNA), 1 (Prot), 1 (custom)\ndefault: create text, HTML and XML files in <output_dir>")), ToolInput(tag="in_dna", input_type=Boolean(optional=True), prefix="--dna", doc=InputDocumentation(doc="sequences use standard DNA alphabet (default)")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="--rna", doc=InputDocumentation(doc="sequences use standard RNA alphabet")), ToolInput(tag="in_protein", input_type=Boolean(optional=True), prefix="--protein", doc=InputDocumentation(doc="sequences use standard protein alphabet")), ToolInput(tag="in_alph", input_type=File(optional=True), prefix="--alph", doc=InputDocumentation(doc="sequences use alphabet defined in <alph_file>;\nconverts to uppercase unless both cases in core")), ToolInput(tag="in_ho_fract", input_type=Float(optional=True), prefix="--hofract", doc=InputDocumentation(doc="fraction of sequences in hold-out set;\ndefault: 0.1")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="random seed for shuffling sequences;\ndefault: -1718334814")), ToolInput(tag="in_b_file", input_type=File(optional=True), prefix="--bfile", doc=InputDocumentation(doc="background model file; default: motif file freqs")), ToolInput(tag="in_pseudo_count", input_type=Int(optional=True), prefix="--pseudocount", doc=InputDocumentation(doc="pseudocount for creating PWMs from motifs;\ndefault: 0")), ToolInput(tag="in_inc", input_type=String(optional=True), prefix="--inc", doc=InputDocumentation(doc="name pattern to select as motif; may be\nrepeated; default: all motifs are used")), ToolInput(tag="in_exc", input_type=String(optional=True), prefix="--exc", doc=InputDocumentation(doc="name pattern to exclude as motif; may be\nrepeated; default: all motifs are used")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="|2|3|4|5    level of diagnostic output (default: -1718334814)"))], outputs=[], container="quay.io/biocontainers/meme:5.3.0--py38pl526hc1f1133_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Enr_V0_1_0().translate("wdl")

