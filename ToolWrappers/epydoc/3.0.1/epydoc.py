from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Epydoc_V0_1_0 = CommandToolBuilder(tool="epydoc", base_command=["epydoc"], inputs=[ToolInput(tag="in_config", input_type=File(optional=True), prefix="--config", doc=InputDocumentation(doc="A configuration file, specifying additional OPTIONS\nand/or NAMES.  This option may be repeated.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="The output directory.  If PATH does not exist, then it\nwill be created.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Decrease the verbosity.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase the verbosity.")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Show full tracebacks for internal errors.")), ToolInput(tag="in_simple_term", input_type=Boolean(optional=True), prefix="--simple-term", doc=InputDocumentation(doc="Do not try to use color or cursor control when\ndisplaying the progress bar, warnings, or errors.")), ToolInput(tag="in_html", input_type=Boolean(optional=True), prefix="--html", doc=InputDocumentation(doc="Write HTML output.")), ToolInput(tag="in_text", input_type=Boolean(optional=True), prefix="--text", doc=InputDocumentation(doc="Write plaintext output. (not implemented yet)")), ToolInput(tag="in_latex", input_type=Boolean(optional=True), prefix="--latex", doc=InputDocumentation(doc="Write LaTeX output.")), ToolInput(tag="in_dvi", input_type=Boolean(optional=True), prefix="--dvi", doc=InputDocumentation(doc="Write DVI output.")), ToolInput(tag="in_ps", input_type=Boolean(optional=True), prefix="--ps", doc=InputDocumentation(doc="Write Postscript output.")), ToolInput(tag="in_pdf", input_type=Boolean(optional=True), prefix="--pdf", doc=InputDocumentation(doc="Write PDF output.")), ToolInput(tag="in_check", input_type=Boolean(optional=True), prefix="--check", doc=InputDocumentation(doc="Check completeness of docs.")), ToolInput(tag="in_pickle", input_type=Boolean(optional=True), prefix="--pickle", doc=InputDocumentation(doc="Write the documentation to a pickle file.")), ToolInput(tag="in_doc_format", input_type=String(optional=True), prefix="--docformat", doc=InputDocumentation(doc="The default markup language for docstrings.  Defaults\nto 'epytext'.")), ToolInput(tag="in_parse_only", input_type=Boolean(optional=True), prefix="--parse-only", doc=InputDocumentation(doc="Get all information from parsing (don't introspect)")), ToolInput(tag="in_introspect_only", input_type=Boolean(optional=True), prefix="--introspect-only", doc=InputDocumentation(doc="Get all information from introspecting (don't parse)")), ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="Exclude modules whose dotted name matches the regular\nexpression PATTERN")), ToolInput(tag="in_exclude_introspect", input_type=String(optional=True), prefix="--exclude-introspect", doc=InputDocumentation(doc="Exclude introspection of modules whose dotted name\nmatches the regular expression PATTERN")), ToolInput(tag="in_exclude_parse", input_type=String(optional=True), prefix="--exclude-parse", doc=InputDocumentation(doc="Exclude parsing of modules whose dotted name matches\nthe regular expression PATTERN")), ToolInput(tag="in_inheritance", input_type=String(optional=True), prefix="--inheritance", doc=InputDocumentation(doc="The format for showing inheritance objects.  STYLE\nshould be one of: grouped, listed, included.")), ToolInput(tag="in_show_private", input_type=Boolean(optional=True), prefix="--show-private", doc=InputDocumentation(doc="Include private variables in the output. (default)")), ToolInput(tag="in_no_private", input_type=Boolean(optional=True), prefix="--no-private", doc=InputDocumentation(doc="Do not include private variables in the output.")), ToolInput(tag="in_show_imports", input_type=Boolean(optional=True), prefix="--show-imports", doc=InputDocumentation(doc="List each module's imports.")), ToolInput(tag="in_no_imports", input_type=Boolean(optional=True), prefix="--no-imports", doc=InputDocumentation(doc="Do not list each module's imports. (default)")), ToolInput(tag="in_show_source_code", input_type=Boolean(optional=True), prefix="--show-sourcecode", doc=InputDocumentation(doc="Include source code with syntax highlighting in the\nHTML output. (default)")), ToolInput(tag="in_no_source_code", input_type=Boolean(optional=True), prefix="--no-sourcecode", doc=InputDocumentation(doc="Do not include source code with syntax highlighting in\nthe HTML output.")), ToolInput(tag="in_include_log", input_type=Boolean(optional=True), prefix="--include-log", doc=InputDocumentation(doc="Include a page with the process log (epydoc-log.html)")), ToolInput(tag="in_redundant_details", input_type=Boolean(optional=True), prefix="--redundant-details", doc=InputDocumentation(doc="Include values in the details lists even if all info\nabout them is already provided by the summary table.")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="--name", doc=InputDocumentation(doc="The documented project's name (for the navigation\nbar).")), ToolInput(tag="in_css", input_type=File(optional=True), prefix="--css", doc=InputDocumentation(doc="The CSS stylesheet.  STYLESHEET can be either a\nbuiltin stylesheet or the name of a CSS file.")), ToolInput(tag="in_url", input_type=String(optional=True), prefix="--url", doc=InputDocumentation(doc="The documented project's URL (for the navigation bar).")), ToolInput(tag="in_nav_link", input_type=String(optional=True), prefix="--navlink", doc=InputDocumentation(doc="HTML code for a navigation link to place in the\nnavigation bar.")), ToolInput(tag="in_top", input_type=String(optional=True), prefix="--top", doc=InputDocumentation(doc="The 'top' page for the HTML documentation.  PAGE can\nbe a URL, the name of a module or class, or one of the\nspecial names 'trees.html', 'indices.html', or\n'help.html'")), ToolInput(tag="in_help_file", input_type=File(optional=True), prefix="--help-file", doc=InputDocumentation(doc="An alternate help file.  FILE should contain the body\nof an HTML file -- navigation bars will be added to\nit.")), ToolInput(tag="in_show_frames", input_type=Boolean(optional=True), prefix="--show-frames", doc=InputDocumentation(doc="Include frames in the HTML output. (default)")), ToolInput(tag="in_no_frames", input_type=Boolean(optional=True), prefix="--no-frames", doc=InputDocumentation(doc="Do not include frames in the HTML output.")), ToolInput(tag="in_separate_classes", input_type=Boolean(optional=True), prefix="--separate-classes", doc=InputDocumentation(doc="When generating LaTeX or PDF output, list each class\nin its own section, instead of listing them under\ntheir containing module.")), ToolInput(tag="in_src_code_tab_width", input_type=Int(optional=True), prefix="--src-code-tab-width", doc=InputDocumentation(doc="When generating HTML output, sets the number of spaces\neach tab in source code listings is replaced with.")), ToolInput(tag="in_external_api", input_type=String(optional=True), prefix="--external-api", doc=InputDocumentation(doc="Define a new API document.  A new interpreted text\nrole NAME will be added.")), ToolInput(tag="in_external_api_file", input_type=File(optional=True), prefix="--external-api-file", doc=InputDocumentation(doc=":FILENAME\nUse records in FILENAME to resolve objects in the API\nnamed NAME.")), ToolInput(tag="in_external_api_root", input_type=String(optional=True), prefix="--external-api-root", doc=InputDocumentation(doc=":STRING\nUse STRING as prefix for the URL generated from the\nAPI NAME.")), ToolInput(tag="in_graph", input_type=String(optional=True), prefix="--graph", doc=InputDocumentation(doc="Include graphs of type GRAPHTYPE in the generated")), ToolInput(tag="in_dot_path", input_type=File(optional=True), prefix="--dotpath", doc=InputDocumentation(doc="The path to the Graphviz 'dot' executable.")), ToolInput(tag="in_graph_font", input_type=String(optional=True), prefix="--graph-font", doc=InputDocumentation(doc="Specify the font used to generate Graphviz graphs.\n(e.g., helvetica or times).")), ToolInput(tag="in_graph_font_size", input_type=Int(optional=True), prefix="--graph-font-size", doc=InputDocumentation(doc="Specify the font size used to generate Graphviz\ngraphs, in points.")), ToolInput(tag="in_pst_at", input_type=File(optional=True), prefix="--pstat", doc=InputDocumentation(doc="A pstat output file, to be used in generating call")), ToolInput(tag="in_fail_on_error", input_type=Boolean(optional=True), prefix="--fail-on-error", doc=InputDocumentation(doc="Return a non-zero exit status, indicating failure, if\nany errors are encountered.")), ToolInput(tag="in_fail_on_warning", input_type=Boolean(optional=True), prefix="--fail-on-warning", doc=InputDocumentation(doc="Return a non-zero exit status, indicating failure, if\nany errors or warnings are encountered (not including\ndocstring warnings).")), ToolInput(tag="in_fail_on_docstring_warning", input_type=Boolean(optional=True), prefix="--fail-on-docstring-warning", doc=InputDocumentation(doc="Return a non-zero exit status, indicating failure, if\nany errors or warnings are encountered (including\ndocstring warnings).\n")), ToolInput(tag="in_output_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Graphs are generated using the Graphviz dot")), ToolInput(tag="in_executable_dot", input_type=String(), position=1, doc=InputDocumentation(doc="If this executable is not on the path,")), ToolInput(tag="in_graphs_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Return Value Options:"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="The output directory.  If PATH does not exist, then it\nwill be created.")), ToolOutput(tag="out_pst_at", output_type=File(optional=True), selector=InputSelector(input_to_select="in_pst_at", type_hint=File()), doc=OutputDocumentation(doc="A pstat output file, to be used in generating call"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Epydoc_V0_1_0().translate("wdl", allow_empty_container=True)

