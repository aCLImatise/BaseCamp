from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Boolean, Int, String

Ucsc_To_Json_Pl_V0_1_0 = CommandToolBuilder(tool="ucsc_to_json.pl", base_command=["ucsc-to-json.pl"], inputs=[ToolInput(tag="in_out", input_type=Directory(optional=True), prefix="--out", doc=InputDocumentation(doc="output directory for JSON, defaults to 'data/'")), ToolInput(tag="in_track", input_type=Boolean(optional=True), prefix="--track", doc=InputDocumentation(doc="'trackName'\nname of the database table, e.g., 'knownGene'")), ToolInput(tag="in_primary_name", input_type=Boolean(optional=True), prefix="--primaryName", doc=InputDocumentation(doc="'name2'\nname of the UCSC data column (e.g. 'name2' in the case of the UCSC\n'refGene' track) to use as the primary name of features in the\nJBrowse display. If this is set, the primaryName field will be\nswapped with the name field in the output. For example,\n'--primaryName 'name2'' will cause the output's 'name' to be the\nUCSC 'name2', and 'name2' will be the UCSC 'name'.")), ToolInput(tag="in_css_class_use", input_type=Boolean(optional=True), prefix="--cssClass", doc=InputDocumentation(doc="'classname'\nCSS class to use for features in this track, defaults to 'basic'")), ToolInput(tag="in_arrowhead_class", input_type=Boolean(optional=True), prefix="--arrowheadClass", doc=InputDocumentation(doc="'classname'\nCSS class for arrowheads, e.g., 'transcript-arrowhead'")), ToolInput(tag="in_sub_feature_classes", input_type=Boolean(optional=True), prefix="--subfeatureClasses", doc=InputDocumentation(doc="'{ JSON }'\nCSS classes for each subfeature type, in JSON syntax, e.g.\n'{'CDS': 'transcript-CDS', 'exon': 'transcript-exon'}'")), ToolInput(tag="in_client_config", input_type=Boolean(optional=True), prefix="--clientConfig", doc=InputDocumentation(doc="'{ JSON }'\nextra configuration for the client, in JSON syntax, e.g.\n'{'featureCss': 'background-color: #668; height: 8px;', 'histScale': 2}'\nFor historical reasons, this is only merged into the 'style' section\nof the new track's configuration.")), ToolInput(tag="in_ncl_chunk", input_type=Int(optional=True), prefix="--nclChunk", doc=InputDocumentation(doc="Size of the individual Nested Containment List chunks. Default\n50,000 bp.")), ToolInput(tag="in_compress", input_type=Boolean(optional=True), prefix="--compress", doc=InputDocumentation(doc="If passed, compress the output with gzip, making .jsonz files. This\ncan save a lot of disk space on the server, but serving these files\nto JBrowse requires some web server configuration.")), ToolInput(tag="in_sort_mem", input_type=String(optional=True), prefix="--sortMem", doc=InputDocumentation(doc="The amount of RAM in bytes to use for sorting.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Do not print progress messages.")), ToolInput(tag="in_var_11", input_type=String(optional=True), prefix="--cssclass", doc=InputDocumentation(doc="\")), ToolInput(tag="in_ucsc_to_json_do_tpl", input_type=String(), position=0, doc=InputDocumentation(doc="\"))], outputs=[ToolOutput(tag="out_out", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="output directory for JSON, defaults to 'data/'"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ucsc_To_Json_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

