from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Cactus_Bar_V0_1_0 = CommandToolBuilder(tool="cactus_bar", base_command=["cactus_bar"], inputs=[ToolInput(tag="in_loglevel", input_type=Boolean(optional=True), prefix="--logLevel", doc=InputDocumentation(doc=": Set the log level")), ToolInput(tag="in_cactus_disk", input_type=Boolean(optional=True), prefix="--cactusDisk", doc=InputDocumentation(doc=": The location of the flower disk directory")), ToolInput(tag="in_spanning_tree_s", input_type=Boolean(optional=True), prefix="--spanningTrees", doc=InputDocumentation(doc="(int >= 0) : The number of spanning trees construct in forming the set of pairwise alignments to include. If the number of pairwise alignments is less than the product of the total number of sequences and the number of spanning trees then all pairwise alignments will be included.")), ToolInput(tag="in_maximum_length", input_type=Boolean(optional=True), prefix="--maximumLength", doc=InputDocumentation(doc="(int  >= 0 ) : The maximum length of a sequence to align, only the prefix and suffix maximum length bases are aligned")), ToolInput(tag="in_use_banding", input_type=Boolean(optional=True), prefix="--useBanding", doc=InputDocumentation(doc=": Use banding to speed up the alignments")), ToolInput(tag="in_gap_gamma", input_type=Boolean(optional=True), prefix="--gapGamma", doc=InputDocumentation(doc=": (float >= 0) The gap gamma (as in the AMAP function)")), ToolInput(tag="in_match_gamma", input_type=Boolean(optional=True), prefix="--matchGamma", doc=InputDocumentation(doc=": (float [0, 1]) The match gamma (the avg. weight or greater to be allowed in the alignment)")), ToolInput(tag="in_split_matrix_bigger_than_this", input_type=Boolean(optional=True), prefix="--splitMatrixBiggerThanThis", doc=InputDocumentation(doc=": (int >= 0)  No dp matrix bigger than this number squared will be computed.")), ToolInput(tag="in_anchor_matrix_bigger_than_this", input_type=Boolean(optional=True), prefix="--anchorMatrixBiggerThanThis", doc=InputDocumentation(doc=": (int >= 0)  Any matrix bigger than this number squared will be broken apart with banding.")), ToolInput(tag="in_repeat_mask_matrix_bigger_than_this", input_type=Boolean(optional=True), prefix="--repeatMaskMatrixBiggerThanThis", doc=InputDocumentation(doc=": (int >= 0) Any matrix bigger than this after initial banding will be broken apart without repeat masking of the sequences")), ToolInput(tag="in_dig_a_onal_expansion", input_type=Boolean(optional=True), prefix="--digaonalExpansion", doc=InputDocumentation(doc=": (int >= 0 and even) Number of x-y diagonals to expand around anchors")), ToolInput(tag="in_constraint_diagonal_trim", input_type=Boolean(optional=True), prefix="--constraintDiagonalTrim", doc=InputDocumentation(doc=": (int >= 0) Amount to trim from ends of each anchor")), ToolInput(tag="in_minimum_degree", input_type=Boolean(optional=True), prefix="--minimumDegree", doc=InputDocumentation(doc=": (int >= 0) Minimum number of sequences in a block to be included in the output graph")), ToolInput(tag="in_align_ambiguity_characters", input_type=Boolean(optional=True), prefix="--alignAmbiguityCharacters", doc=InputDocumentation(doc=": Align ambiguity characters (anything not ACTGactg) as a wildcard")), ToolInput(tag="in_prune_out_stub_alignments", input_type=Boolean(optional=True), prefix="--pruneOutStubAlignments", doc=InputDocumentation(doc=": Prune out alignments of sequences that terminates in free stubs stubs")), ToolInput(tag="in_minimum_in_group_degree", input_type=Boolean(optional=True), prefix="--minimumIngroupDegree", doc=InputDocumentation(doc=": Number of ingroup sequences required in a block.")), ToolInput(tag="in_minimum_out_group_degree", input_type=Boolean(optional=True), prefix="--minimumOutgroupDegree", doc=InputDocumentation(doc=": Number of outgroup sequences required in a block.")), ToolInput(tag="in_precomputed_alignments", input_type=Boolean(optional=True), prefix="--precomputedAlignments", doc=InputDocumentation(doc=": Precomputed end alignments.")), ToolInput(tag="in_end_alignments_to_precompute_output_file", input_type=File(optional=True), prefix="--endAlignmentsToPrecomputeOutputFile", doc=InputDocumentation(doc="[fileName] : If this output file is provided then bar will read stdin first to parse the flower, then to parse the names of the end alignments to precompute. The results will be placed in this file.")), ToolInput(tag="in_use_progressive_merging", input_type=Boolean(optional=True), prefix="--useProgressiveMerging", doc=InputDocumentation(doc=": Use progressive merging instead of poset merging for constructing multiple sequence alignments.")), ToolInput(tag="in_calculate_which_ends_to_compute_separately", input_type=Boolean(optional=True), prefix="--calculateWhichEndsToComputeSeparately", doc=InputDocumentation(doc=": Decide which end alignments to compute separately.")), ToolInput(tag="in_large_end_size", input_type=Boolean(optional=True), prefix="--largeEndSize", doc=InputDocumentation(doc=": The size of sequences in an end at which point to compute it separately.")), ToolInput(tag="in_in_group_coverage_file", input_type=Boolean(optional=True), prefix="--ingroupCoverageFile", doc=InputDocumentation(doc=": Binary coverage file containing ingroup regions that are covered by outgroups. These regions will be 'rescued' into single-degree blocks if they haven't been aligned to anything after the bar phase finished.")), ToolInput(tag="in_minimum_size_to_rescue", input_type=Boolean(optional=True), prefix="--minimumSizeToRescue", doc=InputDocumentation(doc=": Unaligned but covered segments must be at least this size to be rescued.")), ToolInput(tag="in_minimum_coverage_to_rescue", input_type=Boolean(optional=True), prefix="--minimumCoverageToRescue", doc=InputDocumentation(doc=": Unaligned segments must have at least this proportion of their bases covered by an outgroup to be rescued."))], outputs=[ToolOutput(tag="out_end_alignments_to_precompute_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_end_alignments_to_precompute_output_file", type_hint=File()), doc=OutputDocumentation(doc="[fileName] : If this output file is provided then bar will read stdin first to parse the flower, then to parse the names of the end alignments to precompute. The results will be placed in this file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cactus_Bar_V0_1_0().translate("wdl", allow_empty_container=True)

