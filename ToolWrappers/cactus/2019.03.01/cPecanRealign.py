from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Cpecanrealign_V0_1_0 = CommandToolBuilder(tool="cPecanRealign", base_command=["cPecanRealign"], inputs=[ToolInput(tag="in_loglevel", input_type=Boolean(optional=True), prefix="--logLevel", doc=InputDocumentation(doc=": Set the log level")), ToolInput(tag="in_gap_gamma", input_type=Boolean(optional=True), prefix="--gapGamma", doc=InputDocumentation(doc=": (float >= 0) The gap gamma (as in the AMAP function)")), ToolInput(tag="in_match_gamma", input_type=Boolean(optional=True), prefix="--matchGamma", doc=InputDocumentation(doc=": (float [0, 1]) The match gamma (the avg. weight or greater to be allowed in the alignment)")), ToolInput(tag="in_split_matrix_bigger_than_this", input_type=Boolean(optional=True), prefix="--splitMatrixBiggerThanThis", doc=InputDocumentation(doc=": (int >= 0)  No dp matrix bigger than this number squared will be computed.")), ToolInput(tag="in_diagonal_expansion", input_type=Boolean(optional=True), prefix="--diagonalExpansion", doc=InputDocumentation(doc=": (int >= 0 and even) Number of x-y diagonals to expand around anchors")), ToolInput(tag="in_constraint_diagonal_trim", input_type=Boolean(optional=True), prefix="--constraintDiagonalTrim", doc=InputDocumentation(doc=": (int >= 0) Amount to trim from ends of each anchor")), ToolInput(tag="in_align_ambiguity_characters", input_type=Boolean(optional=True), prefix="--alignAmbiguityCharacters", doc=InputDocumentation(doc=": Align ambiguity characters (anything not ACTGactg) as a wildcard")), ToolInput(tag="in_re_score_original_alignment", input_type=Boolean(optional=True), prefix="--rescoreOriginalAlignment", doc=InputDocumentation(doc=": Rescore the original alignment. The output cigar is the same alignment.")), ToolInput(tag="in_re_score_by_identity", input_type=Boolean(optional=True), prefix="--rescoreByIdentity", doc=InputDocumentation(doc=": Set score equal to alignment identity, treating indels as mismatches.")), ToolInput(tag="in_re_score_by_posterior_prob", input_type=Boolean(optional=True), prefix="--rescoreByPosteriorProb", doc=InputDocumentation(doc=": Set score equal to avg. posterior match probability, treating indels as residues with 0 match probability.")), ToolInput(tag="in_re_score_by_identity_ignoring_gaps", input_type=Boolean(optional=True), prefix="--rescoreByIdentityIgnoringGaps", doc=InputDocumentation(doc=": Set score equal to alignment identity, ignoring indels.")), ToolInput(tag="in_re_score_by_posterior_prob_ignoring_gaps", input_type=Boolean(optional=True), prefix="--rescoreByPosteriorProbIgnoringGaps", doc=InputDocumentation(doc=": Set score equal to avg. posterior match probability, ignoring gaps.")), ToolInput(tag="in_split_indels_longer_than_this", input_type=Boolean(optional=True), prefix="--splitIndelsLongerThanThis", doc=InputDocumentation(doc=": Split alignments with consecutive runs of indels that are longer than this.")), ToolInput(tag="in_output_posterior_probs", input_type=Boolean(optional=True), prefix="--outputPosteriorProbs", doc=InputDocumentation(doc="[FILE] : Outputs the posterior match probs of positions in the alignment to the given tab separated file, each line being X-coordinate, Y-coordinate, posterior-match prob.")), ToolInput(tag="in_output_all_posterior_probs", input_type=Boolean(optional=True), prefix="--outputAllPosteriorProbs", doc=InputDocumentation(doc="[FILE] : As --outputPosteriorProbs, but for all pairs in the banded alignment")), ToolInput(tag="in_output_expectations", input_type=File(optional=True), prefix="--outputExpectations", doc=InputDocumentation(doc="[FILE] : Instead of realigning, switches to calculating expectations, dumping out expectations as matrix in the given file.")), ToolInput(tag="in_load_hmm", input_type=Boolean(optional=True), prefix="--loadHmm", doc=InputDocumentation(doc="[FILE] : Loads HMM from given file."))], outputs=[ToolOutput(tag="out_output_expectations", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_expectations", type_hint=File()), doc=OutputDocumentation(doc="[FILE] : Instead of realigning, switches to calculating expectations, dumping out expectations as matrix in the given file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cpecanrealign_V0_1_0().translate("wdl", allow_empty_container=True)

