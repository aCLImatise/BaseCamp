from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Halreplacegenome_V0_1_0 = CommandToolBuilder(tool="halReplaceGenome", base_command=["halReplaceGenome"], inputs=[ToolInput(tag="in_bottom_alignment_file", input_type=File(optional=True), prefix="--bottomAlignmentFile", doc=InputDocumentation(doc=":   hal file containing an alignment of the genome and\nits children. Required for non-leaf genomes.\n[default = '']")), ToolInput(tag="in_cache_bytes", input_type=Int(optional=True), prefix="--cacheBytes", doc=InputDocumentation(doc=":            maximum size in bytes of regular hdf5 cache [default\n= 15728640]")), ToolInput(tag="in_cache_mdc", input_type=Int(optional=True), prefix="--cacheMDC", doc=InputDocumentation(doc=":              number of metadata slots in hdf5 cache [default =\n113]")), ToolInput(tag="in_cacher_dc", input_type=Int(optional=True), prefix="--cacheRDC", doc=InputDocumentation(doc=":              number of regular slots in hdf5 cache.  should be a\nprime number ~= 10 * DefaultCacheRDCBytes / chunk\n[default = 599999]")), ToolInput(tag="in_cache_w_zero", input_type=Int(optional=True), prefix="--cacheW0", doc=InputDocumentation(doc=":               w0 parameter fro hdf5 cache [default = 0.75]")), ToolInput(tag="in_chunk", input_type=Int(optional=True), prefix="--chunk", doc=InputDocumentation(doc=":                 hdf5 chunk size [default = 1000]")), ToolInput(tag="in_deflate", input_type=Int(optional=True), prefix="--deflate", doc=InputDocumentation(doc=":               hdf5 compression factor [0:none - 9:max] [default =\n2]")), ToolInput(tag="in_in_memory", input_type=Boolean(optional=True), prefix="--inMemory", doc=InputDocumentation(doc=":                      load all data in memory (and disable hdf5 cache)\n[default = 0]")), ToolInput(tag="in_no_bottom_alignment", input_type=Boolean(optional=True), prefix="--noBottomAlignment", doc=InputDocumentation(doc=":             remove all bottom segments despite being non-leaf.\nThis will result in an invalid HAL file, at least\ntemporarily. [default = 0]")), ToolInput(tag="in_no_mark_ancestors", input_type=Boolean(optional=True), prefix="--noMarkAncestors", doc=InputDocumentation(doc=":               don't mark ancestors for update [default = 0]")), ToolInput(tag="in_no_top_alignment", input_type=Boolean(optional=True), prefix="--noTopAlignment", doc=InputDocumentation(doc=":                remove all top segments despite being non-root. This\nwill result in an invalid HAL file, at least")), ToolInput(tag="in_top_alignment_file", input_type=File(optional=True), prefix="--topAlignmentFile", doc=InputDocumentation(doc=":      hal file containing an alignment of the genome, its\nparent, and its siblings. Required if the genome to\nbe replaced is not the root. [default = '']\n")), ToolInput(tag="in_in_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_genome_name", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Halreplacegenome_V0_1_0().translate("wdl", allow_empty_container=True)

