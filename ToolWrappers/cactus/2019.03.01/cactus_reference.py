from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Cactus_Reference_V0_1_0 = CommandToolBuilder(tool="cactus_reference", base_command=["cactus_reference"], inputs=[ToolInput(tag="in_loglevel", input_type=Boolean(optional=True), prefix="--logLevel", doc=InputDocumentation(doc=": Set the log level")), ToolInput(tag="in_cactus_disk", input_type=Boolean(optional=True), prefix="--cactusDisk", doc=InputDocumentation(doc=": The location of the flower disk directory")), ToolInput(tag="in_matching_algorithm", input_type=Boolean(optional=True), prefix="--matchingAlgorithm", doc=InputDocumentation(doc=": Name of matching algorithm, either 'greedy', 'maxWeight', 'maxCardinality', 'blossom5'")), ToolInput(tag="in_reference_event_string", input_type=Boolean(optional=True), prefix="--referenceEventString", doc=InputDocumentation(doc=": String identifying the reference event.")), ToolInput(tag="in_permutations", input_type=Boolean(optional=True), prefix="--permutations", doc=InputDocumentation(doc=": Number of permutations of gibss sampling, integer >= 0")), ToolInput(tag="in_use_simulated_annealing", input_type=Boolean(optional=True), prefix="--useSimulatedAnnealing", doc=InputDocumentation(doc=": Use a cooling schedule")), ToolInput(tag="in_theta", input_type=Boolean(optional=True), prefix="--theta", doc=InputDocumentation(doc=": The value of theta, higher values are more tolerant of rearrangement.")), ToolInput(tag="in_phi", input_type=Boolean(optional=True), prefix="--phi", doc=InputDocumentation(doc=": The value of phi, value is proportional to exponential decline in support by phylogenetic distance")), ToolInput(tag="in_max_walk_for_calculating_z", input_type=Boolean(optional=True), prefix="--maxWalkForCalculatingZ", doc=InputDocumentation(doc=": The max number segments along a thread before stopping calculating z-scores")), ToolInput(tag="in_ignored_unaligned_gaps", input_type=Boolean(optional=True), prefix="--ignoredUnalignedGaps", doc=InputDocumentation(doc=": Don't consider unaligned sequence (gaps) when calculating the score function.")), ToolInput(tag="in_wiggle", input_type=Boolean(optional=True), prefix="--wiggle", doc=InputDocumentation(doc=": As the chains are being added to the reference greedily, wiggle is the proportion of next best possible insertion score the actual insertion has.")), ToolInput(tag="in_number_of_ns", input_type=Boolean(optional=True), prefix="--numberOfNs", doc=InputDocumentation(doc=": The number of N characters to place in a scaffold gap. Default=10. Must be >=1")), ToolInput(tag="in_min_number_of_sequences_to_support_adjacency", input_type=Boolean(optional=True), prefix="--minNumberOfSequencesToSupportAdjacency", doc=InputDocumentation(doc=": Min number of sequences to support an ancestral adjacency call. Default=1. Must be >=0")), ToolInput(tag="in_make_scaffolds", input_type=Boolean(optional=True), prefix="--makeScaffolds", doc=InputDocumentation(doc=": Scaffold across regions of adjacency uncertainty."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cactus_Reference_V0_1_0().translate("wdl", allow_empty_container=True)

