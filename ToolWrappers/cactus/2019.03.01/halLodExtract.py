from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, Float, String

Hallodextract_V0_1_0 = CommandToolBuilder(tool="halLodExtract", base_command=["halLodExtract"], inputs=[ToolInput(tag="in_all_sequences", input_type=Boolean(optional=True), prefix="--allSequences", doc=InputDocumentation(doc=":            Sample all sequences (chromsomes / contigs / etc.) no\nmatter how small they are.  By default, small sequences\nmay be skipped if they fall within the step size. [default\n= 0]")), ToolInput(tag="in_cache_bytes", input_type=Int(optional=True), prefix="--cacheBytes", doc=InputDocumentation(doc=":      maximum size in bytes of regular hdf5 cache [default =\n15728640]")), ToolInput(tag="in_cache_mdc", input_type=Int(optional=True), prefix="--cacheMDC", doc=InputDocumentation(doc=":        number of metadata slots in hdf5 cache [default = 113]")), ToolInput(tag="in_cacher_dc", input_type=Int(optional=True), prefix="--cacheRDC", doc=InputDocumentation(doc=":        number of regular slots in hdf5 cache.  should be a prime\nnumber ~= 10 * DefaultCacheRDCBytes / chunk [default =\n599999]")), ToolInput(tag="in_cache_w_zero", input_type=Int(optional=True), prefix="--cacheW0", doc=InputDocumentation(doc=":         w0 parameter fro hdf5 cache [default = 0.75]")), ToolInput(tag="in_chunk", input_type=Int(optional=True), prefix="--chunk", doc=InputDocumentation(doc=":           hdf5 chunk size [default = 1000]")), ToolInput(tag="in_deflate", input_type=Int(optional=True), prefix="--deflate", doc=InputDocumentation(doc=":         hdf5 compression factor [0:none - 9:max] [default = 2]")), ToolInput(tag="in_in_memory", input_type=Boolean(optional=True), prefix="--inMemory", doc=InputDocumentation(doc=":                load all data in memory (and disable hdf5 cache) [default\n= 0]")), ToolInput(tag="in_keep_sequences", input_type=File(optional=True), prefix="--keepSequences", doc=InputDocumentation(doc=":           Write the sequence strings to the output file. [default =\n0]")), ToolInput(tag="in_min_seq_frac", input_type=Int(optional=True), prefix="--minSeqFrac", doc=InputDocumentation(doc=":      Minumum sequence length to sample as fraction of step\nsize: ie sequences with length <= floor(minSeqFrac * step)\nare ignored. [default = 0.5]")), ToolInput(tag="in_out_tree", input_type=File(optional=True), prefix="--outTree", doc=InputDocumentation(doc=":         Phylogenetic tree of output HAL file.  Must contain only\ngenomes from the input HAL file. (input's tree used if\nempty) [default = '']")), ToolInput(tag="in_probe_frac", input_type=Float(optional=True), prefix="--probeFrac", doc=InputDocumentation(doc=":       Fraction of bases in step-interval to sample while looking\nfor most aligned column. [default = 0.035]")), ToolInput(tag="in_root", input_type=String(optional=True), prefix="--root", doc=InputDocumentation(doc=":            Name of root genome of tree to extract (root if empty)\n[default = '']\n")), ToolInput(tag="in_in_hal_path", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_out_hal_path", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_scale", input_type=String(), position=2, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_keep_sequences", output_type=File(optional=True), selector=InputSelector(input_to_select="in_keep_sequences", type_hint=File()), doc=OutputDocumentation(doc=":           Write the sequence strings to the output file. [default =\n0]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hallodextract_V0_1_0().translate("wdl", allow_empty_container=True)

