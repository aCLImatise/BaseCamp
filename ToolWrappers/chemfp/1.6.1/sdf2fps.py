from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean

Sdf2Fps_V0_1_0 = CommandToolBuilder(tool="sdf2fps", base_command=["sdf2fps"], inputs=[ToolInput(tag="in_id_tag", input_type=String(optional=True), prefix="--id-tag", doc=InputDocumentation(doc="get the record id from TAG instead of the first line\nof the record")), ToolInput(tag="in_fp_tag", input_type=String(optional=True), prefix="--fp-tag", doc=InputDocumentation(doc="get the fingerprint from tag TAG (required)")), ToolInput(tag="in_in", input_type=File(optional=True), prefix="--in", doc=InputDocumentation(doc="Specify if the input SD file is uncompressed or gzip")), ToolInput(tag="in_errors", input_type=String(optional=True), prefix="--errors", doc=InputDocumentation(doc="how should structure parse errors be handled?\n(default=strict)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="save the fingerprints to FILENAME (default=stdout)")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="output structure format (default guesses from output\nfilename, or is 'fps')")), ToolInput(tag="in_software", input_type=String(optional=True), prefix="--software", doc=InputDocumentation(doc="use TEXT as the software description")), ToolInput(tag="in_type", input_type=String(optional=True), prefix="--type", doc=InputDocumentation(doc="use TEXT as the fingerprint type description")), ToolInput(tag="in_binary", input_type=Boolean(optional=True), prefix="--binary", doc=InputDocumentation(doc="Encoded with the characters '0' and '1'. Bit #0 comes\nfirst. Example: 00100000 encodes the value 4")), ToolInput(tag="in_binary_msb", input_type=Boolean(optional=True), prefix="--binary-msb", doc=InputDocumentation(doc="Encoded with the characters '0' and '1'. Bit #0 comes\nlast. Example: 00000100 encodes the value 4")), ToolInput(tag="in_hex", input_type=Boolean(optional=True), prefix="--hex", doc=InputDocumentation(doc="Hex encoded. Bit #0 is the first bit (1<<0) of the\nfirst byte. Example: 01f2 encodes the value \x01\xf2 =\n498")), ToolInput(tag="in_hex_lsb", input_type=Boolean(optional=True), prefix="--hex-lsb", doc=InputDocumentation(doc="Hex encoded. Bit #0 is the eigth bit (1<<7) of the\nfirst byte. Example: 804f encodes the value \x01\xf2 =\n498")), ToolInput(tag="in_hex_msb", input_type=Boolean(optional=True), prefix="--hex-msb", doc=InputDocumentation(doc="Hex encoded. Bit #0 is the first bit (1<<0) of the\nlast byte. Example: f201 encodes the value \x01\xf2 =\n498")), ToolInput(tag="in_base_six_four", input_type=Boolean(optional=True), prefix="--base64", doc=InputDocumentation(doc="Base-64 encoded. Bit #0 is first bit (1<<0) of first\nbyte. Example: AfI= encodes value \x01\xf2 = 498")), ToolInput(tag="in_cac_tvs", input_type=Boolean(optional=True), prefix="--cactvs", doc=InputDocumentation(doc="CACTVS encoding, based on base64 and includes a\nversion and bit length")), ToolInput(tag="in_daylight", input_type=Boolean(optional=True), prefix="--daylight", doc=InputDocumentation(doc="Daylight encoding, which is is base64 variant")), ToolInput(tag="in_decoder", input_type=String(optional=True), prefix="--decoder", doc=InputDocumentation(doc="import and use the DECODER function to decode the")), ToolInput(tag="in_pubchem", input_type=Boolean(optional=True), prefix="--pubchem", doc=InputDocumentation(doc="decode CACTVS substructure keys used in PubChem. Same\nas --software=CACTVS/unknown --type 'CACTVS-\nE_SCREEN/1.0 extended=2' --fp-\ntag=PUBCHEM_CACTVS_SUBSKEYS --cactvs\n")), ToolInput(tag="in_filenames", input_type=String(), position=0, doc=InputDocumentation(doc="input SD files (default is stdin)")), ToolInput(tag="in_compressed", input_type=String(), position=0, doc=InputDocumentation(doc="--num-bits INT        use the first INT bits of the input. Use only when the")), ToolInput(tag="in_fingerprint", input_type=String(), position=0, doc=InputDocumentation(doc="shortcuts:"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="output structure format (default guesses from output\nfilename, or is 'fps')"))], container="quay.io/biocontainers/chemfp:1.6.1--py27h3dcb392_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sdf2Fps_V0_1_0().translate("wdl")

