from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Mmseqs_Filterdb_V0_1_0 = CommandToolBuilder(tool="mmseqs_filterdb", base_command=["mmseqs", "filterdb"], inputs=[ToolInput(tag="in_add_self_matches", input_type=Boolean(optional=True), prefix="--add-self-matches", doc=InputDocumentation(doc="false           artificially add entries of queries with themselves (for clustering)")), ToolInput(tag="in_filter_column", input_type=Boolean(optional=True), prefix="--filter-column", doc=InputDocumentation(doc="1               column")), ToolInput(tag="in_column_to_take", input_type=Boolean(optional=True), prefix="--column-to-take", doc=InputDocumentation(doc="column to take in join mode. If -1, the whole line is taken")), ToolInput(tag="in_filter_regex", input_type=Boolean(optional=True), prefix="--filter-regex", doc=InputDocumentation(doc="^.*$            regex to select column (example float: [0-9]*(.[0-9]+)? int:[1-9]{1}[0-9])")), ToolInput(tag="in_positive_filter", input_type=File(optional=True), prefix="--positive-filter", doc=InputDocumentation(doc="true            used in conjunction with --filter-file. If true, out  = in \intersect filter ; if false, out = in - filter")), ToolInput(tag="in_filter_file", input_type=Boolean(optional=True), prefix="--filter-file", doc=InputDocumentation(doc="specify a file that contains the filtering elements")), ToolInput(tag="in_beats_first", input_type=Boolean(optional=True), prefix="--beats-first", doc=InputDocumentation(doc="false           Filter by comparing each entry to the first entry.")), ToolInput(tag="in_mapping_file", input_type=Boolean(optional=True), prefix="--mapping-file", doc=InputDocumentation(doc="specify a file that translates the keys of a DB to new keys, TSV format")), ToolInput(tag="in_trim_to_one_column", input_type=Boolean(optional=True), prefix="--trim-to-one-column", doc=InputDocumentation(doc="false           Output only the column specified by --filter-column.")), ToolInput(tag="in_extract_lines", input_type=Boolean(optional=True), prefix="--extract-lines", doc=InputDocumentation(doc="0               extract n lines of each entry.")), ToolInput(tag="in_comparison_operator", input_type=Boolean(optional=True), prefix="--comparison-operator", doc=InputDocumentation(doc="Filter by comparing each entry row numerically by using the le) less-than-equal, ge) greater-than-equal or e) equal operator.")), ToolInput(tag="in_comparison_value", input_type=Boolean(optional=True), prefix="--comparison-value", doc=InputDocumentation(doc="0.000           Filter by comparing each entry to this value.")), ToolInput(tag="in_sort_entries", input_type=Boolean(optional=True), prefix="--sort-entries", doc=InputDocumentation(doc="0               Sort column set by --filter-column, by 0) no sorting, 1) increasing,  2) decreasing or 3) random shuffle.")), ToolInput(tag="in_join_db", input_type=Boolean(optional=True), prefix="--join-db", doc=InputDocumentation(doc="Join another database entry with respect to the database identifier in the chosen column")), ToolInput(tag="in_compute_positions", input_type=Boolean(optional=True), prefix="--compute-positions", doc=InputDocumentation(doc="Add the positions of he hit on the target genome")), ToolInput(tag="in_transitive_replace", input_type=Boolean(optional=True), prefix="--transitive-replace", doc=InputDocumentation(doc="Replace cluster name in a search file by all genes in this cluster")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="8               number of cores used for the computation (uses all cores by default)")), ToolInput(tag="in_verbosity_level_nothing", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="3               verbosity level: 0=nothing, 1: +errors, 2: +warnings, 3: +info"))], outputs=[ToolOutput(tag="out_positive_filter", output_type=File(optional=True), selector=InputSelector(input_to_select="in_positive_filter", type_hint=File()), doc=OutputDocumentation(doc="true            used in conjunction with --filter-file. If true, out  = in \intersect filter ; if false, out = in - filter"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mmseqs_Filterdb_V0_1_0().translate("wdl", allow_empty_container=True)

