from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Mmseqs_Multihitdb_V0_1_0 = CommandToolBuilder(tool="mmseqs_multihitdb", base_command=["mmseqs", "multihitdb"], inputs=[ToolInput(tag="in_dont_split_seq_by_len", input_type=Boolean(optional=True), prefix="--dont-split-seq-by-len", doc=InputDocumentation(doc="true            Dont split sequences by --max-seq-len")), ToolInput(tag="in_dont_shuffle", input_type=Boolean(optional=True), prefix="--dont-shuffle", doc=InputDocumentation(doc="true            Do not shuffle input database")), ToolInput(tag="in_id_offset", input_type=Boolean(optional=True), prefix="--id-offset", doc=InputDocumentation(doc="0               numeric ids in index file are offset by this value")), ToolInput(tag="in_min_length", input_type=Boolean(optional=True), prefix="--min-length", doc=InputDocumentation(doc="30              minimum codon number in open reading frames")), ToolInput(tag="in_max_length", input_type=Boolean(optional=True), prefix="--max-length", doc=InputDocumentation(doc="2147483647      maximum codon number in open reading frames")), ToolInput(tag="in_max_gaps", input_type=Boolean(optional=True), prefix="--max-gaps", doc=InputDocumentation(doc="2147483647      maximum number of codons with gaps or unknown residues before an open reading frame is rejected")), ToolInput(tag="in_contig_start_mode", input_type=Boolean(optional=True), prefix="--contig-start-mode", doc=InputDocumentation(doc="2               Contig start can be 0: incomplete, 1: complete, 2: both")), ToolInput(tag="in_contig_end_mode", input_type=Boolean(optional=True), prefix="--contig-end-mode", doc=InputDocumentation(doc="2               Contig end can be 0: incomplete, 1: complete, 2: both")), ToolInput(tag="in_orf_start_mode", input_type=Boolean(optional=True), prefix="--orf-start-mode", doc=InputDocumentation(doc="0               Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle)")), ToolInput(tag="in_forward_frames", input_type=Boolean(optional=True), prefix="--forward-frames", doc=InputDocumentation(doc="1,2,3           comma-seperated list of ORF frames on the forward strand to be extracted")), ToolInput(tag="in_reverse_frames", input_type=Boolean(optional=True), prefix="--reverse-frames", doc=InputDocumentation(doc="1,2,3           comma-seperated list of ORF frames on the reverse strand to be extracted")), ToolInput(tag="in_translation_table", input_type=Boolean(optional=True), prefix="--translation-table", doc=InputDocumentation(doc="1               1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE, 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL, 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL, 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA, 29) MESODINIUM, 30) PERTRICH, 31) BLASTOCRITHIDIA")), ToolInput(tag="in_use_all_table_starts", input_type=Boolean(optional=True), prefix="--use-all-table-starts", doc=InputDocumentation(doc="false           use all alteratives for a start codon in the genetic table, if false - only ATG (AUG)")), ToolInput(tag="in_add_orf_stop", input_type=Boolean(optional=True), prefix="--add-orf-stop", doc=InputDocumentation(doc="false           add * at complete start and end")), ToolInput(tag="in_stat", input_type=Boolean(optional=True), prefix="--stat", doc=InputDocumentation(doc="can be one of: linecount, mean, doolittle, charges, seqlen, firstline.")), ToolInput(tag="in_max_seq_len", input_type=Boolean(optional=True), prefix="--max-seq-len", doc=InputDocumentation(doc="65535           Maximum sequence length [1,32768]")), ToolInput(tag="in_verbosity_level_nothing", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="3               verbosity level: 0=nothing, 1: +errors, 2: +warnings, 3: +info")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="8               number of cores used for the computation (uses all cores by default)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mmseqs_Multihitdb_V0_1_0().translate("wdl", allow_empty_container=True)

