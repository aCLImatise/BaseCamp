from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean, File

Call_Sbatch_Py_V0_1_0 = CommandToolBuilder(tool="call_sbatch.py", base_command=["call_sbatch.py"], inputs=[ToolInput(tag="in_num_cpus", input_type=Int(optional=True), prefix="--num-cpus", doc=InputDocumentation(doc="The number of CPUs to use (default: 1)")), ToolInput(tag="in_mem", input_type=Int(optional=True), prefix="--mem", doc=InputDocumentation(doc="The amount of RAM to request (default: 10G)")), ToolInput(tag="in_time", input_type=Int(optional=True), prefix="--time", doc=InputDocumentation(doc="The amount of time to request (default: 0-05:59)")), ToolInput(tag="in_partitions", input_type=String(optional=True), prefix="--partitions", doc=InputDocumentation(doc="The partitions to request (default: general)")), ToolInput(tag="in_no_output", input_type=Boolean(optional=True), prefix="--no-output", doc=InputDocumentation(doc="If this flag is present, stdout will be redirected to\n/dev/null (default: False)")), ToolInput(tag="in_no_error", input_type=Boolean(optional=True), prefix="--no-error", doc=InputDocumentation(doc="If this flag is present, stderr will be redirected to\n/dev/null (default: False)")), ToolInput(tag="in_stdout_file", input_type=File(optional=True), prefix="--stdout-file", doc=InputDocumentation(doc="If this is present and the --no-output flag is not\ngiven, then stdout will be directed to this file\nrather than slurm-<job>.out (default: None)")), ToolInput(tag="in_stderr_file", input_type=File(optional=True), prefix="--stderr-file", doc=InputDocumentation(doc="If this is present and the --no-error flag is not\ngiven, then stderr will be directed to this file\nrather than slurm-<job>.err (default: None)")), ToolInput(tag="in_do_not_call", input_type=Boolean(optional=True), prefix="--do-not-call", doc=InputDocumentation(doc="If this flag is present, then the commands will not be\nexecuted (but will be printed). (default: False)")), ToolInput(tag="in_use_slur_m", input_type=Boolean(optional=True), prefix="--use-slurm", doc=InputDocumentation(doc="If this flag is present, the program calls will be\nsubmitted to SLURM. (default: False)")), ToolInput(tag="in_mail_type", input_type=Boolean(optional=True), prefix="--mail-type", doc=InputDocumentation(doc="[{NONE,BEGIN,END,FAIL,REQUEUE,ALL,STAGE_OUT,TIME_LIMIT,TIME_LIMIT_90,TIME_LIMIT_80,TIME_LIMIT_50,ARRAY_TASKS} [{NONE,BEGIN,END,FAIL,REQUEUE,ALL,STAGE_OUT,TIME_LIMIT,TIME_LIMIT_90,TIME_LIMIT_80,TIME_LIMIT_50,ARRAY_TASKS} ...]]\nWhen to send an email notifcation of the job status.\nSee official documentation for a description of the\nvalues. If a mail-user is not specified, this will\nrevert to 'None'. (default: ['FAIL', 'TIME_LIMIT'])")), ToolInput(tag="in_mail_user", input_type=String(optional=True), prefix="--mail-user", doc=InputDocumentation(doc="To whom an email will be sent, in accordance with\nmail-type (default: None)\n")), ToolInput(tag="in_cmd", input_type=String(), position=0, doc=InputDocumentation(doc="The command to execute"))], outputs=[ToolOutput(tag="out_stdout_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_stdout_file", type_hint=File()), doc=OutputDocumentation(doc="If this is present and the --no-output flag is not\ngiven, then stdout will be directed to this file\nrather than slurm-<job>.out (default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Call_Sbatch_Py_V0_1_0().translate("wdl", allow_empty_container=True)

