from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Array, Int, Boolean

Subsample_Bam_V0_1_0 = CommandToolBuilder(tool="subsample_bam", base_command=["subsample_bam"], inputs=[ToolInput(tag="in_output_prefix", input_type=String(optional=True), prefix="--output_prefix", doc=InputDocumentation(doc="Output prefix (default: sub_sampled)")), ToolInput(tag="in_regions", input_type=Array(t=String(), optional=True), prefix="--regions", doc=InputDocumentation(doc="Only process given regions. (default: None)")), ToolInput(tag="in_profile", input_type=Int(optional=True), prefix="--profile", doc=InputDocumentation(doc="Stride in genomic coordinates for depth profile.\n(default: 1000)")), ToolInput(tag="in_orientation", input_type=String(optional=True), prefix="--orientation", doc=InputDocumentation(doc="Sample only forward or reverse reads. (default: None)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use. (default: -1)")), ToolInput(tag="in_quality", input_type=String(optional=True), prefix="--quality", doc=InputDocumentation(doc="Filter reads by mean qscore. (default: None)")), ToolInput(tag="in_accuracy", input_type=String(optional=True), prefix="--accuracy", doc=InputDocumentation(doc="Filter reads by accuracy. (default: None)")), ToolInput(tag="in_coverage", input_type=String(optional=True), prefix="--coverage", doc=InputDocumentation(doc="Filter reads by coverage (what fraction of the read\naligns). (default: None)")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc="Filter reads by read length. (default: None)")), ToolInput(tag="in_any_fail", input_type=Boolean(optional=True), prefix="--any_fail", doc=InputDocumentation(doc="Exit with an error if any region has insufficient\ncoverage. (default: False)")), ToolInput(tag="in_all_fail", input_type=Boolean(optional=True), prefix="--all_fail", doc=InputDocumentation(doc="Exit with an error if all regions have insufficient\ncoverage. (default: False)")), ToolInput(tag="in_patience", input_type=Int(optional=True), prefix="--patience", doc=InputDocumentation(doc="Maximum iterations with no change in median coverage\nbefore aborting. (default: 5)")), ToolInput(tag="in_stride", input_type=Int(optional=True), prefix="--stride", doc=InputDocumentation(doc="Stride in genomic coordinates when searching for new\nreads. Smaller can lead to more compact pileup.\n(default: 1000)")), ToolInput(tag="in_proportional", input_type=Boolean(optional=True), prefix="--proportional", doc=InputDocumentation(doc="Activate proportional sampling, thus keeping depth\nvariations of the pileup. (default: False)")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="Random seed for proportional downsampling of reads.\n(default: None)\n")), ToolInput(tag="in_bam", input_type=String(), position=0, doc=InputDocumentation(doc="input bam file.")), ToolInput(tag="in_depth", input_type=String(), position=1, doc=InputDocumentation(doc="Target depth."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Subsample_Bam_V0_1_0().translate("wdl", allow_empty_container=True)

