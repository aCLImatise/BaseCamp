from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory

Minys_Py_V0_1_0 = CommandToolBuilder(tool="MinYS.py", base_command=["MinYS.py"], inputs=[ToolInput(tag="in_in", input_type=Boolean(optional=True), prefix="-in", doc=InputDocumentation(doc="(1 arg) :    Input reads file")), ToolInput(tag="in_arg_input_reads_first_file", input_type=Boolean(optional=True), prefix="-1", doc=InputDocumentation(doc="(1 arg) :    Input reads first file")), ToolInput(tag="in_arg_input_reads_second_file", input_type=Boolean(optional=True), prefix="-2", doc=InputDocumentation(doc="(1 arg) :    Input reads second file")), ToolInput(tag="in_f_of", input_type=Boolean(optional=True), prefix="-fof", doc=InputDocumentation(doc="(1 arg) :    Input file of read files (if paired files, 2 columns tab-separated)")), ToolInput(tag="in_out", input_type=Directory(optional=True), prefix="-out", doc=InputDocumentation(doc="(1 arg) :    output directory for result files [Default: ./mtg_results]")), ToolInput(tag="in_ref", input_type=Boolean(optional=True), prefix="-ref", doc=InputDocumentation(doc="(1 arg) :    Bwa index")), ToolInput(tag="in_mask", input_type=Boolean(optional=True), prefix="-mask", doc=InputDocumentation(doc="(1 arg) :    Bed file for region removed from mapping")), ToolInput(tag="in_mini_a_bin", input_type=Boolean(optional=True), prefix="-minia-bin", doc=InputDocumentation(doc="(1 arg) :    Path to Minia binary (if not in $PATH")), ToolInput(tag="in_assembly_km_er_size", input_type=Boolean(optional=True), prefix="-assembly-kmer-size", doc=InputDocumentation(doc="(1 arg) :    Kmer size used for Minia assembly (should be given even if bypassing minia assembly step, usefull knowledge for gap-filling) [Default: 31]")), ToolInput(tag="in_assembly_abundance_min", input_type=Boolean(optional=True), prefix="-assembly-abundance-min", doc=InputDocumentation(doc="(1 arg) :    Minimal abundance of kmers used for assembly [Default: auto]")), ToolInput(tag="in_min_contig_size", input_type=Boolean(optional=True), prefix="-min-contig-size", doc=InputDocumentation(doc="(1 arg) :    Minimal size for a contig to be used in gap-filling [Default: 400]")), ToolInput(tag="in_mtg_dir", input_type=Boolean(optional=True), prefix="-mtg-dir", doc=InputDocumentation(doc="(1 arg) :    Path to MindTheGap build directory (if not in $PATH)")), ToolInput(tag="in_gap_filling_km_er_size", input_type=Boolean(optional=True), prefix="-gapfilling-kmer-size", doc=InputDocumentation(doc="(1 arg) :    Kmer size used for gap-filling [Default: 31]")), ToolInput(tag="in_gap_filling_abundance_min", input_type=Boolean(optional=True), prefix="-gapfilling-abundance-min", doc=InputDocumentation(doc="(1 arg) :    Minimal abundance of kmers used for gap-filling [Default: auto]")), ToolInput(tag="in_max_nodes", input_type=Boolean(optional=True), prefix="-max-nodes", doc=InputDocumentation(doc="(1 arg) :    Maximum number of nodes in contig graph [Default: 300]")), ToolInput(tag="in_max_length", input_type=Boolean(optional=True), prefix="-max-length", doc=InputDocumentation(doc="(1 arg) :    Maximum length of gap-filling (nt) [Default: 50000]")), ToolInput(tag="in_arg_length_minimum", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="(1 arg) :    Length of minimum prefix for node merging, default should work for most cases [Default: 100]")), ToolInput(tag="in_contigs", input_type=Boolean(optional=True), prefix="-contigs", doc=InputDocumentation(doc="(1 arg) :    Contigs in fasta format - override mapping and assembly")), ToolInput(tag="in_graph", input_type=Boolean(optional=True), prefix="-graph", doc=InputDocumentation(doc="(1 arg) :    Graph in h5 format - override graph creation")), ToolInput(tag="in_nb_cores", input_type=Boolean(optional=True), prefix="-nb-cores", doc=InputDocumentation(doc="(1 arg) :    Number of cores [Default: 0]"))], outputs=[ToolOutput(tag="out_out", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="(1 arg) :    output directory for result files [Default: ./mtg_results]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Minys_Py_V0_1_0().translate("wdl", allow_empty_container=True)

