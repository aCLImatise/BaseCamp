from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, String, Int, Boolean

Mokapot_V0_1_0 = CommandToolBuilder(tool="mokapot", base_command=["mokapot"], inputs=[ToolInput(tag="in_dest_dir", input_type=Directory(optional=True), prefix="--dest_dir", doc=InputDocumentation(doc="The directory in which to write the result files.\nDefaults to the current working directory")), ToolInput(tag="in_file_root", input_type=File(optional=True), prefix="--file_root", doc=InputDocumentation(doc="The prefix added to all file names.")), ToolInput(tag="in_proteins", input_type=File(optional=True), prefix="--proteins", doc=InputDocumentation(doc="The FASTA file used for the database search. Using\nthis option enable protein-level confidence estimates\nusing the 'picked-protein' approach. Note that the\nFASTA file must contain both target and decoy\nsequences. Additionally, verify that the '--enzyme', '\n--missed_cleavages, '--min_length', '--max_length', '\n--semi', '--clip_nterm_methionine', and '--\ndecoy_prefix' parameters match your search engine\nconditions.")), ToolInput(tag="in_decoy_prefix", input_type=File(optional=True), prefix="--decoy_prefix", doc=InputDocumentation(doc="The prefix used to indicate a decoy protein in the\nFASTA file. For mokapot to provide accurate confidence\nestimates, decoy proteins should have same description\nas the target proteins they were generated from, but\nthis string prepended.")), ToolInput(tag="in_enzyme", input_type=String(optional=True), prefix="--enzyme", doc=InputDocumentation(doc="A regular expression defining the enzyme specificity.\nThe cleavage site is interpreted as the end of the\nmatch. The default is trypsin, without proline\nsuppression: [KR]")), ToolInput(tag="in_missed_cleavages", input_type=Int(optional=True), prefix="--missed_cleavages", doc=InputDocumentation(doc="The allowed number of missed cleavages")), ToolInput(tag="in_clip_n_term_methionine", input_type=Boolean(optional=True), prefix="--clip_nterm_methionine", doc=InputDocumentation(doc="Remove methionine residues that occur at the protein\nN-terminus.")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min_length", doc=InputDocumentation(doc="The minimum peptide length to consider.")), ToolInput(tag="in_max_length", input_type=Int(optional=True), prefix="--max_length", doc=InputDocumentation(doc="The maximum peptide length to consider.")), ToolInput(tag="in_semi", input_type=Boolean(optional=True), prefix="--semi", doc=InputDocumentation(doc="Was a semi-enzymatic digest used to assign PSMs?\nIf'so, the protein database will likely contain shared\npeptides and yield unhelpful protein-level confidence\nestimates. We do not recommend using this option.")), ToolInput(tag="in_train_fdr", input_type=String(optional=True), prefix="--train_fdr", doc=InputDocumentation(doc="The maximum false discovery rate at which to consider\na target PSM as a positive example during model\ntraining.")), ToolInput(tag="in_test_fdr", input_type=String(optional=True), prefix="--test_fdr", doc=InputDocumentation(doc="The false-discovery rate threshold at which to\nevaluate the learned models.")), ToolInput(tag="in_max_iter", input_type=Int(optional=True), prefix="--max_iter", doc=InputDocumentation(doc="The number of iterations to use for training.")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="An integer to use as the random seed.")), ToolInput(tag="in_direction", input_type=String(optional=True), prefix="--direction", doc=InputDocumentation(doc="The name of the feature to use as the initial\ndirection for ranking PSMs. The default automatically\nselects the feature that finds the most PSMs below the\n`train_fdr`.")), ToolInput(tag="in_aggregate", input_type=Boolean(optional=True), prefix="--aggregate", doc=InputDocumentation(doc="If used, PSMs from multiple PIN files will be\naggregated and analyzed together. Otherwise, a joint\nmodel will be trained, but confidence estimates will\nbe calculated separately for each PIN file. This flag\nonly has an effect when multiple PIN files are\nprovided.")), ToolInput(tag="in_subset_max_train", input_type=Int(optional=True), prefix="--subset_max_train", doc=InputDocumentation(doc="Use only a random subset of PSMs for training. This is\nuseful for very large datasets.")), ToolInput(tag="in_override", input_type=Boolean(optional=True), prefix="--override", doc=InputDocumentation(doc="Use the learned model even if it performs worse than\nthe best feature.")), ToolInput(tag="in_save_models", input_type=Boolean(optional=True), prefix="--save_models", doc=InputDocumentation(doc="Save the models learned by mokapot as pickled Python")), ToolInput(tag="in_verbosity", input_type=String(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Specify the verbosity of the current process. Each\nlevel prints the following messages, including all\nthose at a lower verbosity: 0-errors, 1-warnings,\n2-messages, 3-debug info.\n")), ToolInput(tag="in_pin_files", input_type=String(), position=0, doc=InputDocumentation(doc="A collection of PSMs in the Percolator tab-delimited")), ToolInput(tag="in_format_dot", input_type=String(), position=1, doc=InputDocumentation(doc="optional arguments:")), ToolInput(tag="in_objects_dot", input_type=String(), position=2, doc=InputDocumentation(doc="--folds FOLDS         The number of cross-validation folds to use. PSMs"))], outputs=[], container="quay.io/biocontainers/mokapot:0.5.1--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mokapot_V0_1_0().translate("wdl")

