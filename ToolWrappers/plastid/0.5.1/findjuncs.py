from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Array, Int

Findjuncs_V0_1_0 = CommandToolBuilder(tool="findjuncs", base_command=["findjuncs"], inputs=[ToolInput(tag="in_annotation_files", input_type=String(optional=True), prefix="--annotation_files", doc=InputDocumentation(doc="newly_discovered.bed")), ToolInput(tag="in_export_top_hat", input_type=File(optional=True), prefix="--export_tophat", doc=InputDocumentation(doc="Export tophat `.juncs` file in addition to BED output")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppress all warning messages. Cannot use with '-v'.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase verbosity. With '-v', show every warning.\nWith '-vv', turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each type of warning once)")), ToolInput(tag="in_annotation_format", input_type=String(optional=True), prefix="--annotation_format", doc=InputDocumentation(doc="Format of annotation_files (Default: GTF2). Note: GFF3\nassembly assumes SO v.2.5.2 feature ontologies, which\nmay or may not match your specific file.")), ToolInput(tag="in_add_three", input_type=Boolean(optional=True), prefix="--add_three", doc=InputDocumentation(doc="If supplied, coding regions will be extended by 3\nnucleotides at their 3' ends (except for GTF2 files\nthat explicitly include `stop_codon` features). Use if\nyour annotation file excludes stop codons from CDS.")), ToolInput(tag="in_tab_ix", input_type=Boolean(optional=True), prefix="--tabix", doc=InputDocumentation(doc="annotation_files are tabix-compressed and indexed\n(Default: False). Ignored for BigBed files.")), ToolInput(tag="in_sorted", input_type=Boolean(optional=True), prefix="--sorted", doc=InputDocumentation(doc="annotation_files are sorted by chromosomal position\n(Default: False)")), ToolInput(tag="in_bed_extra_columns", input_type=Array(t=String(), optional=True), prefix="--bed_extra_columns", doc=InputDocumentation(doc="Number of extra columns in BED file (e.g. in custom\nENCODE formats) or list of names for those columns.\n(Default: 0).")), ToolInput(tag="in_maxmem", input_type=Int(optional=True), prefix="--maxmem", doc=InputDocumentation(doc="Maximum desired memory footprint in MB to devote to\nBigBed/BigWig files. May be exceeded by large queries.\n(Default: 0, No maximum)")), ToolInput(tag="in_gff_transcript_types", input_type=Array(t=String(), optional=True), prefix="--gff_transcript_types", doc=InputDocumentation(doc="GFF3 feature types to include as transcripts, even if\nno exons are present (for GFF3 only; default: use SO\nv2.5.3 specification)")), ToolInput(tag="in_gff_exon_types", input_type=Array(t=String(), optional=True), prefix="--gff_exon_types", doc=InputDocumentation(doc="GFF3 feature types to include as exons (for GFF3 only;\ndefault: use SO v2.5.3 specification)")), ToolInput(tag="in_gff_cds_types", input_type=Array(t=String(), optional=True), prefix="--gff_cds_types", doc=InputDocumentation(doc="GFF3 feature types to include as CDS (for GFF3 only;\ndefault: use SO v2.5.3 specification)\n")), ToolInput(tag="in_out_base", input_type=String(), position=0, doc=InputDocumentation(doc="Basename for output files"))], outputs=[ToolOutput(tag="out_export_top_hat", output_type=File(optional=True), selector=InputSelector(input_to_select="in_export_top_hat", type_hint=File()), doc=OutputDocumentation(doc="Export tophat `.juncs` file in addition to BED output"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Findjuncs_V0_1_0().translate("wdl", allow_empty_container=True)

