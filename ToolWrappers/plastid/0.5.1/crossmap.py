from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean, File

Crossmap_V0_1_0 = CommandToolBuilder(tool="crossmap", base_command=["crossmap"], inputs=[ToolInput(tag="in_kmer_length_generate", input_type=Int(optional=True), prefix="-k", doc=InputDocumentation(doc="K-mer length to generate from input file. (Default:\n29)")), ToolInput(tag="in_offset", input_type=Int(optional=True), prefix="--offset", doc=InputDocumentation(doc="Offset from 5' end of plus-strand read at which to\nattribute score (Default: 14)")), ToolInput(tag="in_mismatches", input_type=Int(optional=True), prefix="--mismatches", doc=InputDocumentation(doc="Number of mismatches tolerated in alignment. (Default:\n0)")), ToolInput(tag="in_bowtie", input_type=String(optional=True), prefix="--bowtie", doc=InputDocumentation(doc="Location of bowtie binary (Default:\n``/usr/local/bin/bowtie``)")), ToolInput(tag="in_have_km_ers", input_type=Boolean(optional=True), prefix="--have_kmers", doc=InputDocumentation(doc="If specified, use k-mer files from previous run. In\nthis case 'sequence_file' should be the value\n'outbase' from the k-mer files you want to use.")), ToolInput(tag="in_save_km_ers", input_type=Boolean(optional=True), prefix="--save_kmers", doc=InputDocumentation(doc="Save k-mer files for reuse in a subsequent run.")), ToolInput(tag="in_processes", input_type=Int(optional=True), prefix="--processes", doc=InputDocumentation(doc="Number of processes to use (should be <= number of")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppress all warning messages. Cannot use with '-v'.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase verbosity. With '-v', show every warning.\nWith '-vv', turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each type of warning once)")), ToolInput(tag="in_sequence_file", input_type=File(optional=True), prefix="--sequence_file", doc=InputDocumentation(doc="[fasta | fastq | twobit | genbank | embl]\nA file of DNA sequence")), ToolInput(tag="in_sequence_format", input_type=String(optional=True), prefix="--sequence_format", doc=InputDocumentation(doc="Format of sequence_file (Default: fasta).\n")), ToolInput(tag="in_out_base_read_length_mismatches_crossmap_dot_bed", input_type=String(), position=0, doc=InputDocumentation(doc="Final mask file annotation, in BED format")), ToolInput(tag="in_out_base_read_length_mismatches_chromosome_km_ers_dot_fa", input_type=String(), position=1, doc=InputDocumentation(doc="K-mers derived from chromosome `CHROMOSOME`. These\nfiles can be reused in subsequent runs allowing a different number of\nmismatches, using the ``--have_kmers`` option")), ToolInput(tag="in_sequence", input_type=String(), position=0, doc=InputDocumentation(doc="- By default, crossmap creates BED files. Consider converting these to")), ToolInput(tag="in_e_bwt", input_type=String(), position=0, doc=InputDocumentation(doc="Bowtie index of genome against which crossmap will be\nmade. In most cases, should be generated from the same\nsequences that are in `sequence_file`.")), ToolInput(tag="in_out_base", input_type=String(), position=1, doc=InputDocumentation(doc="Basename for output files")), ToolInput(tag="in_chromosomes", input_type=String(), position=0, doc=InputDocumentation(doc="warning/error options:"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Crossmap_V0_1_0().translate("wdl", allow_empty_container=True)

