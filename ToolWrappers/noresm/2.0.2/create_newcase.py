from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File, Directory, Int

Create_Newcase_V0_1_0 = CommandToolBuilder(tool="create_newcase", base_command=["create_newcase"], inputs=[ToolInput(tag="in_res", input_type=String(optional=True), prefix="--res", doc=InputDocumentation(doc="[--machine MACHINE] [--compiler COMPILER]")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Print debug information (very verbose) to file /create_newcase.log")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Add additional context (time and file) to log messages")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="--silent", doc=InputDocumentation(doc="Print only warnings and error messages")), ToolInput(tag="in_case", input_type=File(optional=True), prefix="--case", doc=InputDocumentation(doc="(required) Specify the case name.\nIf this is simply a name (not a path), the case directory is created in the current working directory.\nThis can also be a relative or absolute path specifying where the case should be created;\nwith this usage, the name of the case will be the last component of the path.")), ToolInput(tag="in_comp_set", input_type=Directory(optional=True), prefix="--compset", doc=InputDocumentation(doc="(required) Specify a compset.\nTo see list of current compsets, use the utility ./query_config --compsets in this directory.")), ToolInput(tag="in_machine", input_type=String(optional=True), prefix="--machine", doc=InputDocumentation(doc="Specify a machine. The default value is the match to NODENAME_REGEX in config_machines.xml. To see\nthe list of current machines, invoke ./query_config --machines.")), ToolInput(tag="in_compiler", input_type=Directory(optional=True), prefix="--compiler", doc=InputDocumentation(doc="Specify a compiler.\nTo see list of supported compilers for each machine, use the utility\n./query_config --machines in this directory.\nThe default value will be the first one listed.")), ToolInput(tag="in_multi_driver", input_type=Boolean(optional=True), prefix="--multi-driver", doc=InputDocumentation(doc="Specify that --ninst should modify the number of driver/coupler instances.\nThe default is to have one driver/coupler supporting multiple component instances.")), ToolInput(tag="in_n_inst", input_type=Int(optional=True), prefix="--ninst", doc=InputDocumentation(doc="Specify number of model ensemble instances.\nThe default is multiple components and one driver/coupler.\nUse --multi-driver to run multiple driver/couplers in the ensemble.")), ToolInput(tag="in_mpi_lib", input_type=String(optional=True), prefix="--mpilib", doc=InputDocumentation(doc="Specify the MPI library. To see list of supported mpilibs for each machine, invoke ./query_config --machines.\nThe default is the first listing in MPILIBS in config_machines.xml.")), ToolInput(tag="in_project", input_type=String(optional=True), prefix="--project", doc=InputDocumentation(doc="Specify a project id as used in batch system accounting.")), ToolInput(tag="in_pe_count", input_type=Int(optional=True), prefix="--pecount", doc=InputDocumentation(doc="Specify a target size description for the number of cores.\nThis is used to query the appropriate config_pes.xml file and find the\noptimal PE-layout for your case - if it exists there.\nAllowed options are  ('S','M','L','X1','X2','[0-9]x[0-9]','[0-9]').")), ToolInput(tag="in_user_mods_dir", input_type=Directory(optional=True), prefix="--user-mods-dir", doc=InputDocumentation(doc="Full pathname to a directory containing any combination of user_nl_* files\nand a shell_commands script (typically containing xmlchange commands).\nThe directory can also contain an SourceMods/ directory with the same structure\nas would be found in a case directory.")), ToolInput(tag="in_pes_file", input_type=File(optional=True), prefix="--pesfile", doc=InputDocumentation(doc="Full pathname of an optional pes specification file.\nThe file can follow either the config_pes.xml or the env_mach_pes.xml format.")), ToolInput(tag="in_grid_file", input_type=File(optional=True), prefix="--gridfile", doc=InputDocumentation(doc="Full pathname of config grid file to use.\nThis should be a copy of config/config_grids.xml with the new user grid changes added to it.")), ToolInput(tag="in_srcroot", input_type=Directory(optional=True), prefix="--srcroot", doc=InputDocumentation(doc="Alternative pathname for source root directory. The default is cimeroot/../")), ToolInput(tag="in_output_root", input_type=Directory(optional=True), prefix="--output-root", doc=InputDocumentation(doc="Alternative pathname for the directory where case output is written.")), ToolInput(tag="in_wall_time", input_type=String(optional=True), prefix="--walltime", doc=InputDocumentation(doc="Set the wallclock limit for this case in the format (the usual format is HH:MM:SS).\nYou may use env var CIME_GLOBAL_WALLTIME to set this.\nIf CIME_GLOBAL_WALLTIME is not defined in the environment, then the walltime\nwill be the maximum allowed time defined for the queue in config_batch.xml.")), ToolInput(tag="in_queue", input_type=String(optional=True), prefix="--queue", doc=InputDocumentation(doc="Force batch system to use the specified queue.")), ToolInput(tag="in_handle_preexisting_dirs", input_type=String(optional=True), prefix="--handle-preexisting-dirs", doc=InputDocumentation(doc="Do not query how to handle pre-existing bld/exe dirs.\nValid options are (a)bort (r)eplace or (u)se existing.\nThis can be useful if you need to run create_newcase non-iteractively.")), ToolInput(tag="in_input_dir", input_type=String(optional=True), prefix="--input-dir", doc=InputDocumentation(doc="Use a non-default location for input files. This will change the xml value of DIN_LOC_ROOT.\n"))], outputs=[ToolOutput(tag="out_output_root", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_root", type_hint=File()), doc=OutputDocumentation(doc="Alternative pathname for the directory where case output is written."))], container="quay.io/biocontainers/noresm:2.0.2--py37pl5262h736fc29_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Create_Newcase_V0_1_0().translate("wdl")

