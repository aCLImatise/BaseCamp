from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Lai_V0_1_0 = CommandToolBuilder(tool="LAI", base_command=["LAI"], inputs=[ToolInput(tag="in_genome", input_type=Boolean(optional=True), prefix="-genome", doc=InputDocumentation(doc="[file]  The genome file that is used to generate everything.")), ToolInput(tag="in_intact", input_type=Boolean(optional=True), prefix="-intact", doc=InputDocumentation(doc="[file]  A list of intact LTR-RTs generated by LTR_retriever (genome.fa.pass.list).")), ToolInput(tag="in_all", input_type=File(optional=True), prefix="-all", doc=InputDocumentation(doc="[file]     RepeatMasker annotation of all LTR sequences in the genome (genome.fa.out).")), ToolInput(tag="in_window", input_type=Boolean(optional=True), prefix="-window", doc=InputDocumentation(doc="[int]   Window size for LAI estimation. Default: 3000000 (3 Mb)")), ToolInput(tag="in_step", input_type=Boolean(optional=True), prefix="-step", doc=InputDocumentation(doc="[int]     Step size for the estimation window to move forward. Default: 300000 (300 Kb)\nSet step size = window size if prefer non-overlapping outputs.")), ToolInput(tag="in_quick_estimation_faster", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="Quick estimation of LTR identity (much faster for large genomes, may sacrifice ~0.5% of accuracy).")), ToolInput(tag="in_qq", input_type=Boolean(optional=True), prefix="-qq", doc=InputDocumentation(doc="No estimation of LTR identity, only output raw LAI for within species comparison (very quick).")), ToolInput(tag="in_mono", input_type=Boolean(optional=True), prefix="-mono", doc=InputDocumentation(doc="[file]    This parameter is mainly for ployploid genomes. User provides a list of sequence names that represent a monoploid (1x).\nLAI will calculated only on these sequences if provided. So user can also specify sequence of interest for LAI calculation.")), ToolInput(tag="in_iden", input_type=Boolean(optional=True), prefix="-iden", doc=InputDocumentation(doc="[0-100]   Mean LTR identity (%) in the monoploid (1x) genome. This parameter will inactivate de novo estimation (same speed to -qq).")), ToolInput(tag="in_to_tltr", input_type=Boolean(optional=True), prefix="-totLTR", doc=InputDocumentation(doc="[0-100] Specify the total LTR sequence content (%) in the genome instead of estimating from the -all RepeatMasker file.")), ToolInput(tag="in_blast", input_type=Boolean(optional=True), prefix="-blast", doc=InputDocumentation(doc="[path]   The path to the blastn program. If left unspecified, then blastn must be accessible via shell ENV.")), ToolInput(tag="in_number_threads_run", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[number]     Number of threads to run blastn."))], outputs=[ToolOutput(tag="out_all", output_type=File(optional=True), selector=InputSelector(input_to_select="in_all", type_hint=File()), doc=OutputDocumentation(doc="[file]     RepeatMasker annotation of all LTR sequences in the genome (genome.fa.out)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Lai_V0_1_0().translate("wdl", allow_empty_container=True)

