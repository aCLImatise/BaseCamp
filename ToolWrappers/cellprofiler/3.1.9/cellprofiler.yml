!Command
command:
- cellprofiler
positional:
- !Positional
  optional: true
  position: 0
  name: output-file
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - -p
  - --pipeline
  - --project
  description: "Load this pipeline file or project on startup. If\nspecifying a pipeline\
    \ file rather than a project, the\n-i flag is also needed unless the pipeline\
    \ is saved\nwith the file list."
  args: !SimpleFlagArg
    name: PIPELINE_FILENAME
- !Flag
  optional: true
  synonyms:
  - -c
  - --run-headless
  description: Run headless (without the GUI)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -r
  - --run
  description: Run the given pipeline on startup
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  - --output-directory
  description: Make this directory the default output folder
  args: !SimpleFlagArg
    name: OUTPUT_DIRECTORY
- !Flag
  optional: true
  synonyms:
  - -i
  - --image-directory
  description: Make this directory the default input folder
  args: !SimpleFlagArg
    name: IMAGE_DIRECTORY
- !Flag
  optional: true
  synonyms:
  - -f
  - --first-image-set
  description: The one-based index of the first image set to process
  args: !SimpleFlagArg
    name: FIRST_IMAGE_SET
- !Flag
  optional: true
  synonyms:
  - -l
  - --last-image-set
  description: The one-based index of the last image set to process
  args: !SimpleFlagArg
    name: LAST_IMAGE_SET
- !Flag
  optional: true
  synonyms:
  - -g
  - --group
  description: "Restrict processing to one grouping in a grouped\npipeline. For instance,\
    \ \"-g ROW=H,COL=01\", will\nprocess only the group of image sets that match the\n\
    keys."
  args: !SimpleFlagArg
    name: GROUPS
- !Flag
  optional: true
  synonyms:
  - --plugins-directory
  description: "CellProfiler will look for plugin modules in this\ndirectory (headless-only)."
  args: !SimpleFlagArg
    name: PLUGINS_DIRECTORY
- !Flag
  optional: true
  synonyms:
  - -t
  - --temporary-directory
  description: "Temporary directory. CellProfiler uses this for\ndownloaded image\
    \ files and for the measurements file,\nif not specified. The default is /tmp"
  args: !SimpleFlagArg
    name: TEMP_DIR
- !Flag
  optional: true
  synonyms:
  - -d
  - --done-file
  description: "The path to the \"Done\" file, written by CellProfiler\nshortly before\
    \ exiting"
  args: !SimpleFlagArg
    name: DONE_FILE
- !Flag
  optional: true
  synonyms:
  - --measurements
  description: "Open the pipeline file specified by the -p switch and\nprint the measurements\
    \ made by that pipeline"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --print-groups
  description: "Open the measurements file following the --print-\ngroups switch and\
    \ print the groups in its image sets.\nThe measurements file should be generated\
    \ using\nCreateBatchFiles. The output is a JSON-encoded data\nstructure containing\
    \ the group keys and values and the\nimage sets in each group."
  args: !SimpleFlagArg
    name: PRINT_GROUPS_FILE
- !Flag
  optional: true
  synonyms:
  - --get-batch-commands
  description: "Open the measurements file following the --get-batch-\ncommands switch\
    \ and print one line to the console per\ngroup. The measurements file should be\
    \ generated using\nCreateBatchFiles and the image sets should be grouped\ninto\
    \ the units to be run. Each line is a command to\ninvoke CellProfiler. You can\
    \ use this option to\ngenerate a shell script that will invoke CellProfiler\n\
    on a cluster by substituting \"CellProfiler\" with your\ninvocation command in\
    \ the script's text, for instance:\nCellProfiler --get-batch-commands Batch_data.h5\
    \ | sed\ns/CellProfiler/farm_jobs.sh. Note that CellProfiler\nwill always run\
    \ in headless mode when --get-batch-\ncommands is present and will exit after\
    \ generating the\nbatch commands without processing any pipeline."
  args: !SimpleFlagArg
    name: BATCH_COMMANDS_FILE
- !Flag
  optional: true
  synonyms:
  - --images-per-batch
  description: "For pipelines that do not use image grouping this\noption specifies\
    \ the number of images that should be\nprocessed in each batch if --get-batch-commands\
    \ is\nused. Defaults to 1."
  args: !SimpleFlagArg
    name: IMAGES_PER_BATCH
- !Flag
  optional: true
  synonyms:
  - --data-file
  description: "Specify the location of a .csv file for LoadData. If\nthis switch\
    \ is present, this file is used instead of\nthe one specified in the LoadData\
    \ module."
  args: !SimpleFlagArg
    name: DATA_FILE
- !Flag
  optional: true
  synonyms:
  - --file-list
  description: "Specify a file list of one file or URL per line to be\nused to initially\
    \ populate the Images module's file\nlist."
  args: !SimpleFlagArg
    name: IMAGE_SET_FILE
- !Flag
  optional: true
  synonyms:
  - --do-not-write-schema
  description: "Do not execute the schema definition and other per-\nexperiment SQL\
    \ commands during initialization when\nrunning a pipeline in batch mode."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --write-schema-and-exit
  description: Create the experiment database schema and exit
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --omero-credentials
  description: "Enter login credentials for OMERO. The credentials are\nentered as\
    \ comma-separated key/value pairs with keys,\n\"host\" - the DNS host name for\
    \ the OMERO server,\n\"port\" - the server's port # (typically 4064), \"user\"\
    \n- the name of the connecting user, \"password\" - the\nconnecting user's password,\
    \ \"session-id\" - the session\nID for an OMERO client session., \"config-file\"\
    \ - the\npath to the OMERO credentials config file. A typical\nset of credentials\
    \ might be: --omero-credentials\nhost=demo.openmicroscopy.org,port=4064,session-\n\
    id=atrvomvjcjfe7t01e8eu59amixmqqkfp"
  args: !SimpleFlagArg
    name: OMERO_CREDENTIALS
- !Flag
  optional: true
  synonyms:
  - -L
  - --log-level
  description: "Set the verbosity for logging messages: 10 or DEBUG\nfor debugging,\
    \ 20 or INFO for informational, 30 or\nWARNING for warning, 40 or ERROR for error,\
    \ 50 or\nCRITICAL for critical, 50 or FATAL for fatal.\nOtherwise, the argument\
    \ is interpreted as the file\nname of a log configuration file (see\nhttp://docs.python.org/library/logging.config.html\
    \ for\nfile format)\n"
  args: !SimpleFlagArg
    name: LOG_LEVEL
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - --version
  description: Print the version and exit
  args: !EmptyFlagArg {}
help_text: "Usage: cellprofiler [options] [<output-file>])\n         where <output-file>\
  \ is the optional filename for the output file of\n               measurements when\
  \ running headless.\n         The flags -p, -r and -c are required for a headless\
  \ run.\n\nOptions:\n  -h, --help            show this help message and exit\n  -p\
  \ PIPELINE_FILENAME, --pipeline=PIPELINE_FILENAME, --project=PIPELINE_FILENAME\n\
  \                        Load this pipeline file or project on startup. If\n   \
  \                     specifying a pipeline file rather than a project, the\n  \
  \                      -i flag is also needed unless the pipeline is saved\n   \
  \                     with the file list.\n  -c, --run-headless    Run headless\
  \ (without the GUI)\n  -r, --run             Run the given pipeline on startup\n\
  \  -o OUTPUT_DIRECTORY, --output-directory=OUTPUT_DIRECTORY\n                  \
  \      Make this directory the default output folder\n  -i IMAGE_DIRECTORY, --image-directory=IMAGE_DIRECTORY\n\
  \                        Make this directory the default input folder\n  -f FIRST_IMAGE_SET,\
  \ --first-image-set=FIRST_IMAGE_SET\n                        The one-based index\
  \ of the first image set to process\n  -l LAST_IMAGE_SET, --last-image-set=LAST_IMAGE_SET\n\
  \                        The one-based index of the last image set to process\n\
  \  -g GROUPS, --group=GROUPS\n                        Restrict processing to one\
  \ grouping in a grouped\n                        pipeline. For instance, \"-g ROW=H,COL=01\"\
  , will\n                        process only the group of image sets that match\
  \ the\n                        keys.\n  --plugins-directory=PLUGINS_DIRECTORY\n\
  \                        CellProfiler will look for plugin modules in this\n   \
  \                     directory (headless-only).\n  --version             Print\
  \ the version and exit\n  -t TEMP_DIR, --temporary-directory=TEMP_DIR\n        \
  \                Temporary directory. CellProfiler uses this for\n             \
  \           downloaded image files and for the measurements file,\n            \
  \            if not specified. The default is /tmp\n  -d DONE_FILE, --done-file=DONE_FILE\n\
  \                        The path to the \"Done\" file, written by CellProfiler\n\
  \                        shortly before exiting\n  --measurements        Open the\
  \ pipeline file specified by the -p switch and\n                        print the\
  \ measurements made by that pipeline\n  --print-groups=PRINT_GROUPS_FILE\n     \
  \                   Open the measurements file following the --print-\n        \
  \                groups switch and print the groups in its image sets.\n       \
  \                 The measurements file should be generated using\n            \
  \            CreateBatchFiles. The output is a JSON-encoded data\n             \
  \           structure containing the group keys and values and the\n           \
  \             image sets in each group.\n  --get-batch-commands=BATCH_COMMANDS_FILE\n\
  \                        Open the measurements file following the --get-batch-\n\
  \                        commands switch and print one line to the console per\n\
  \                        group. The measurements file should be generated using\n\
  \                        CreateBatchFiles and the image sets should be grouped\n\
  \                        into the units to be run. Each line is a command to\n \
  \                       invoke CellProfiler. You can use this option to\n      \
  \                  generate a shell script that will invoke CellProfiler\n     \
  \                   on a cluster by substituting \"CellProfiler\" with your\n  \
  \                      invocation command in the script's text, for instance:\n\
  \                        CellProfiler --get-batch-commands Batch_data.h5 | sed\n\
  \                        s/CellProfiler/farm_jobs.sh. Note that CellProfiler\n \
  \                       will always run in headless mode when --get-batch-\n   \
  \                     commands is present and will exit after generating the\n \
  \                       batch commands without processing any pipeline.\n  --images-per-batch=IMAGES_PER_BATCH\n\
  \                        For pipelines that do not use image grouping this\n   \
  \                     option specifies the number of images that should be\n   \
  \                     processed in each batch if --get-batch-commands is\n     \
  \                   used. Defaults to 1.\n  --data-file=DATA_FILE\n            \
  \            Specify the location of a .csv file for LoadData. If\n            \
  \            this switch is present, this file is used instead of\n            \
  \            the one specified in the LoadData module.\n  --file-list=IMAGE_SET_FILE\n\
  \                        Specify a file list of one file or URL per line to be\n\
  \                        used to initially populate the Images module's file\n \
  \                       list.\n  --do-not-write-schema\n                       \
  \ Do not execute the schema definition and other per-\n                        experiment\
  \ SQL commands during initialization when\n                        running a pipeline\
  \ in batch mode.\n  --write-schema-and-exit\n                        Create the\
  \ experiment database schema and exit\n  --omero-credentials=OMERO_CREDENTIALS\n\
  \                        Enter login credentials for OMERO. The credentials are\n\
  \                        entered as comma-separated key/value pairs with keys,\n\
  \                        \"host\" - the DNS host name for the OMERO server,\n  \
  \                      \"port\" - the server's port # (typically 4064), \"user\"\
  \n                        - the name of the connecting user, \"password\" - the\n\
  \                        connecting user's password, \"session-id\" - the session\n\
  \                        ID for an OMERO client session., \"config-file\" - the\n\
  \                        path to the OMERO credentials config file. A typical\n\
  \                        set of credentials might be: --omero-credentials\n    \
  \                    host=demo.openmicroscopy.org,port=4064,session-\n         \
  \               id=atrvomvjcjfe7t01e8eu59amixmqqkfp\n  -L LOG_LEVEL, --log-level=LOG_LEVEL\n\
  \                        Set the verbosity for logging messages: 10 or DEBUG\n \
  \                       for debugging, 20 or INFO for informational, 30 or\n   \
  \                     WARNING for warning, 40 or ERROR for error, 50 or\n      \
  \                  CRITICAL for critical, 50 or FATAL for fatal.\n             \
  \           Otherwise, the argument is interpreted as the file\n               \
  \         name of a log configuration file (see\n                        http://docs.python.org/library/logging.config.html\
  \ for\n                        file format)\n"
generated_using:
- --help
docker_image:
