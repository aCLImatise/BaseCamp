from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, String, Int, Boolean

Round_Statistics_Py_V0_1_0 = CommandToolBuilder(tool="round_statistics.py", base_command=["round_statistics.py"], inputs=[ToolInput(tag="in_input_fasta_file", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="input fasta file.")), ToolInput(tag="in_output_round_directory", input_type=Directory(optional=True), prefix="-d", doc=InputDocumentation(doc="output per round directory.")), ToolInput(tag="in_seed_fastq", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc="seed fastq.")), ToolInput(tag="in_output_folder", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc="output folder.")), ToolInput(tag="in_rounds_check_stop", input_type=String(optional=True), prefix="-R", doc=InputDocumentation(doc="rounds to check. default:automatic stop!")), ToolInput(tag="in_threads", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="threads.")), ToolInput(tag="in_which_bowtie_two", input_type=Int(optional=True), prefix="--which-bowtie2", doc=InputDocumentation(doc="Assign the path to Bowtie2 binary files if not added\nto the path. Default: try\nGetOrganelleDep/linux/bowtie2 first, then $PATH")), ToolInput(tag="in_random_seed", input_type=Int(optional=True), prefix="--random-seed", doc=InputDocumentation(doc="seed for random generator for bowtie2. Default: 12345")), ToolInput(tag="in_threshold", input_type=Int(optional=True), prefix="--threshold", doc=InputDocumentation(doc="sites with coverage above the threshold would be\nmarked as covered. default: 0,10")), ToolInput(tag="in_keep_temp", input_type=Boolean(optional=True), prefix="--keep-temp", doc=InputDocumentation(doc="Draw density plot using matplotlib, which should be")), ToolInput(tag="in_debug", input_type=String(optional=True), prefix="--debug", doc=InputDocumentation(doc="Debug mode.")), ToolInput(tag="in_installed_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--max-coverage-tick=MAX_COV_TICK"))], outputs=[ToolOutput(tag="out_output_round_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_round_directory", type_hint=File()), doc=OutputDocumentation(doc="output per round directory.")), ToolOutput(tag="out_output_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_folder", type_hint=File()), doc=OutputDocumentation(doc="output folder."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Round_Statistics_Py_V0_1_0().translate("wdl", allow_empty_container=True)

