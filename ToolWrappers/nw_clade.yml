!Command
command:
- nw_clade
positional: []
named:
- !Flag
  description: "<levels (int)>: give context, i.e. start the subtree not at the last\n\
    common ancestor of the labels, but 'level' nodes higher (limited\nby the tree's\
    \ root, of course)."
  synonyms:
  - -c
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ": only prints the clade if it is monophyletic, in the sense that ONLY\n\
    the labels passed as arguments are found in the clade.\nSee also -s."
  synonyms:
  - -m
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ": clade is defined by labels that match the regexp (instead.\nof labels\
    \ passed as arguments)"
  synonyms:
  - -r
  args: !SimpleFlagArg
    name: regexp
  optional: true
- !Flag
  description: ": prints the siblings of the clade defined by the labels passed as\n\
    arguments, in the order in which they appear in the Newick.\nIf -m is also passed,\
    \ only prints siblings if the labels passed\nas arguments form a monophyletic\
    \ group."
  synonyms:
  - -s
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: ': prints this message and exits'
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "Extracts a subtree (clade) defined by labels.\n\nSynopsis\n--------\n\n\
  nw_clade [-chmrs] <target tree filename|-> <label> [label]+\n\nInput\n-----\n\n\
  The first argument is the name of a file containing one or more Newick\ntrees, or\
  \ '-' (in which case the trees are read on stdin).\n\nThe next arguments are labels\
  \ found in the tree (both leaf and internal\nlabels work). Any label not found in\
  \ the tree will be ignored. There\nmust be at least one label. (See also option\
  \ -r)\n\nOutput\n------\n\nOutputs the clade rooted at the last common ancestor\
  \ of all labels passed\nas arguments, as Newick.\n\nOptions\n-------\n\n    -c <levels\
  \ (int)>: give context, i.e. start the subtree not at the last\n        common ancestor\
  \ of the labels, but 'level' nodes higher (limited\n        by the tree's root,\
  \ of course).\n    -h: prints this message and exits\n    -m: only prints the clade\
  \ if it is monophyletic, in the sense that ONLY\n        the labels passed as arguments\
  \ are found in the clade.\n        See also -s.\n    -r <regexp>: clade is defined\
  \ by labels that match the regexp (instead.\n        of labels passed as arguments)\n\
  \    -s: prints the siblings of the clade defined by the labels passed as\n    \
  \    arguments, in the order in which they appear in the Newick.\n        If -m\
  \ is also passed, only prints siblings if the labels passed\n        as arguments\
  \ form a monophyletic group.\n\nExamples\n--------\n\n# clade defined by two leaves\n\
  $ nw_clade data/catarrhini Homo Hylobates\n\n# clade defined by a leaf and a inner\
  \ node (Hominini)\n$ nw_clade data/catarrhini Hominini Hylobates\n\n# clade is monophyletic\n\
  $ nw_clade -m data/catarrhini Homo Gorilla Pan\n\n# clade is not monophyletic (Gorilla\
  \ is missing)\n$ nw_clade -m data/catarrhini Homo Pongo Pan\n\n# clade defined by\
  \ a regexp (all Poliovirus)\n$ nw_clade -r data/HRV.nw '^POLIO.*'\n\n# clade defined\
  \ by Homo and Pan, plus 1 level of context\n$ nw_clade -c 1 data/catarrhini Homo\
  \ Pan\n"
generated_using:
- -h
