from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, File, String, Directory, Boolean, Int, Array

Megalodon_V0_1_0 = CommandToolBuilder(tool="megalodon", base_command=["megalodon"], inputs=[ToolInput(tag="in_guppy_config", input_type=Float(optional=True), prefix="--guppy-config", doc=InputDocumentation(doc="Guppy config. Default: dna_r9.4.1_450bps_modbases_dam-\ndcm-cpg_hac.cfg")), ToolInput(tag="in_guppy_server_path", input_type=File(optional=True), prefix="--guppy-server-path", doc=InputDocumentation(doc="Path to guppy server executable. Default: ./ont-\nguppy/bin/guppy_basecall_server")), ToolInput(tag="in_live_processing", input_type=File(optional=True), prefix="--live-processing", doc=InputDocumentation(doc="Process reads from a live sequencing run. The\n[fast5s_dir] must be the base MinKNOW output\ndirectory. Megalodon will continue searching for FAST5\nfiles until the file starting with 'final_summary' is\nfound.")), ToolInput(tag="in_outputs", input_type=String(optional=True), prefix="--outputs", doc=InputDocumentation(doc="[{basecalls,mod_basecalls,mappings,per_read_variants,variants,variant_mappings,per_read_mods,mods,mod_mappings,signal_mappings,per_read_refs} ...]\nDesired output(s).\nOptions:\nbasecalls: Called bases (FASTA/Q)\nmod_basecalls: Basecall-anchored modified base scores (HDF5)\nmappings: Mapped reads (BAM/CRAM/SAM)\nper_read_variants: Per-read, per-site sequence variant scores database\nvariants: Sample-level aggregated sequence variant calls (VCF)\nvariant_mappings: Per-read mappings annotated with variant calls\nper_read_mods: Per-read, per-site modified base scores database\nmods: Sample-level aggregated modified base calls (modVCF)\nmod_mappings: Per-read mappings annotated with modified base calls\nsignal_mappings: Signal mappings for taiyaki model training (HDF5)\nper_read_refs: Per-read reference sequence for model training (FASTA)\nDefault: ['basecalls']")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="--output-directory", doc=InputDocumentation(doc="Directory to store output results. Default:\nmegalodon_results")), ToolInput(tag="in_overwrite", input_type=Directory(optional=True), prefix="--overwrite", doc=InputDocumentation(doc="Overwrite output directory if it exists.")), ToolInput(tag="in_mappings_format", input_type=String(optional=True), prefix="--mappings-format", doc=InputDocumentation(doc="Mappings output format. Choices: bam, cram, sam")), ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="Reference FASTA or minimap2 index file used for\nmapping called reads.")), ToolInput(tag="in_haploid", input_type=Boolean(optional=True), prefix="--haploid", doc=InputDocumentation(doc="Compute variant aggregation for haploid genotypes.\nDefault: diploid")), ToolInput(tag="in_variant_filename", input_type=File(optional=True), prefix="--variant-filename", doc=InputDocumentation(doc="Sequence variants to call for each read in VCF/BCF\nformat (required for variant output).")), ToolInput(tag="in_mod_motif", input_type=Int(optional=True), prefix="--mod-motif", doc=InputDocumentation(doc="MOTIF REL_POSITION\nRestrict modified base calls to specified motif(s).\nArgument takes 3 values representing 1) the single\nletter modified base(s), 2) sequence motif and 3)\nrelative modified base position. Multiple --mod-motif\narguments may be provided to a single command. For\nexample to restrict to CpG sites use '--mod-motif Z CG\n0'.")), ToolInput(tag="in_processes", input_type=Int(optional=True), prefix="--processes", doc=InputDocumentation(doc="Number of parallel processes. Default: 1")), ToolInput(tag="in_devices", input_type=Array(t=String(), optional=True), prefix="--devices", doc=InputDocumentation(doc="GPU devices for guppy or taiyaki basecalling backends.")), ToolInput(tag="in_help_long", input_type=Boolean(optional=True), prefix="--help-long", doc=InputDocumentation(doc="Show all options.")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="--rna", doc=InputDocumentation(doc="RNA input data. Requires RNA model. Default: DNA input")), ToolInput(tag="in_data", input_type=String(), position=0, doc=InputDocumentation(doc="-v, --version         show megalodon version and exit."))], outputs=[ToolOutput(tag="out_live_processing", output_type=File(optional=True), selector=InputSelector(input_to_select="in_live_processing", type_hint=File()), doc=OutputDocumentation(doc="Process reads from a live sequencing run. The\n[fast5s_dir] must be the base MinKNOW output\ndirectory. Megalodon will continue searching for FAST5\nfiles until the file starting with 'final_summary' is\nfound.")), ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="Directory to store output results. Default:\nmegalodon_results")), ToolOutput(tag="out_overwrite", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_overwrite", type_hint=File()), doc=OutputDocumentation(doc="Overwrite output directory if it exists."))], container="quay.io/biocontainers/megalodon:2.2.10--py38h0213d0e_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Megalodon_V0_1_0().translate("wdl")

