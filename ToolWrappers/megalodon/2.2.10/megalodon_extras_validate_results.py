from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, File, Int, Boolean

Megalodon_Extras_Validate_Results_V0_1_0 = CommandToolBuilder(tool="megalodon_extras_validate_results", base_command=["megalodon_extras", "validate", "results"], inputs=[ToolInput(tag="in_control_megalodon_results_dirs", input_type=Array(t=String(), optional=True), prefix="--control-megalodon-results-dirs", doc=InputDocumentation(doc="Megalodon output directories for modified base control\nsample(s). Could be a PCR or IVT sample. Either a\nsingle control for all modified samples or one control\nsample for each modified sample may be provided.")), ToolInput(tag="in_ground_truth_data", input_type=String(optional=True), prefix="--ground-truth-data", doc=InputDocumentation(doc="Ground truth csv with (chrm, strand, pos, is_mod)\nvalues.")), ToolInput(tag="in_valid_sites", input_type=File(optional=True), prefix="--valid-sites", doc=InputDocumentation(doc="VALID_SITES\nName and BED file containing sites over which to\nrestrict modified base results. Multiple sets of valid\nsites may be provided. For example E. coli 6mA sites\ncould be specified as: `--valid-sites 'Dam\nMethylation' Dam_motif_sites.bed --valid-sites 'EcoKI\nMethylation' EcoKI_motif_sites.bed`.")), ToolInput(tag="in_max_stats", input_type=Int(optional=True), prefix="--max-stats", doc=InputDocumentation(doc="Maximum number of statistics to extract. Default:\n1000000")), ToolInput(tag="in_strand_specific_sites", input_type=Boolean(optional=True), prefix="--strand-specific-sites", doc=InputDocumentation(doc="Sites in --ground-truth-data and/or --valid-sites are\nstrand-specific. Default: Sites are not strand\nspecific.")), ToolInput(tag="in_allow_unbalance_classes", input_type=Boolean(optional=True), prefix="--allow-unbalance-classes", doc=InputDocumentation(doc="Allow unbalanced classes in modified base metric\ncomputation. Default: Balance size of modified and\ncanonical classes for each comparison made.")), ToolInput(tag="in_results_labels", input_type=Array(t=String(), optional=True), prefix="--results-labels", doc=InputDocumentation(doc="Name for each Megalodon results directory. Control\ndirectories will have the suffix ' Control' appended\nto the names. Default: 'Sample 1', 'Sample 2', ...")), ToolInput(tag="in_out_pdf", input_type=File(optional=True), prefix="--out-pdf", doc=InputDocumentation(doc="Output pdf filename. Default: megalodon_validation.pdf")), ToolInput(tag="in_out_filename", input_type=File(optional=True), prefix="--out-filename", doc=InputDocumentation(doc="Output filename for text summary. Default: stdout")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppress progress information."))], outputs=[ToolOutput(tag="out_out_pdf", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_pdf", type_hint=File()), doc=OutputDocumentation(doc="Output pdf filename. Default: megalodon_validation.pdf")), ToolOutput(tag="out_out_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_filename", type_hint=File()), doc=OutputDocumentation(doc="Output filename for text summary. Default: stdout"))], container="quay.io/biocontainers/megalodon:2.2.10--py38h0213d0e_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Megalodon_Extras_Validate_Results_V0_1_0().translate("wdl")

