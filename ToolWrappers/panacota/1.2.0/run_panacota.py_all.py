from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean, Float

Run_Panacota_Py_All_V0_1_0 = CommandToolBuilder(tool="run_panacota.py_all", base_command=["run_panacota.py", "all"], inputs=[ToolInput(tag="in_path_your_configuration", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc="Path to your configuration file, defining values of")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Specify how many threads can be used (default=1)")), ToolInput(tag="in_species_taxid_download", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="Species taxid to download, corresponding to the\n'species taxid' provided by the NCBI. A comma-\nseparated list of taxid can also be provided.")), ToolInput(tag="in_species_download_corresponding", input_type=String(optional=True), prefix="-s", doc=InputDocumentation(doc="Species to download, corresponding to the 'organism\nname' provided by the NCBI. Give name between quotes\n(for example 'escherichia coli')")), ToolInput(tag="in_assembly_level", input_type=String(optional=True), prefix="--assembly_level", doc=InputDocumentation(doc="Assembly levels of genomes to download (default: all).\nPossible levels are: 'all', 'complete', 'chromosome',\n'scaffold', 'contig'.You can also provide a comma-\nseparated list of assembly levels. For ex:\n'complete,chromosome'")), ToolInput(tag="in_cut_n", input_type=Int(optional=True), prefix="--cutn", doc=InputDocumentation(doc="By default, each genome will be cut into new contigs\nwhen at least 5 'N' in a row are found in its\nsequence. If you don't want to cut genomes into new\ncontigs when there are rows of 'N', put 0 to this\noption. If you want to cut from a different number of\n'N' in a row, put this value to this option.")), ToolInput(tag="in_l_nine_zero", input_type=Int(optional=True), prefix="--l90", doc=InputDocumentation(doc="Maximum value of L90 allowed to keep a genome. Default\nis 100.")), ToolInput(tag="in_nb_cont", input_type=Int(optional=True), prefix="--nbcont", doc=InputDocumentation(doc="Maximum number of contigs allowed to keep a genome.\nDefault is 999.")), ToolInput(tag="in_prodigal", input_type=Boolean(optional=True), prefix="--prodigal", doc=InputDocumentation(doc="Add this option if you only want syntactical\nannotation, given by prodigal, and not functional\nannotation requiring prokka and is slower.")), ToolInput(tag="in_choose_name_genomes", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="Choose a name for your annotated genomes. This name\nshould contain 4 alphanumeric characters. Generally,\nthey correspond to the 2 first letters of genus, and 2\nfirst letters of species, e.g. ESCO for Escherichia\nColi.")), ToolInput(tag="in_minimum_sequence_identity", input_type=Float(optional=True), prefix="-i", doc=InputDocumentation(doc="Minimum sequence identity to be considered in the same\ncluster (float between 0 and 1). Default is 0.8.")), ToolInput(tag="in_to_l", input_type=Int(optional=True), prefix="--tol", doc=InputDocumentation(doc="min % of genomes having at least 1 member in a family\nto consider the family as persistent (between 0 and 1,\ndefault is 1 = 100% of genomes = Core genome).By\ndefault, the minimum number of genomes will be\nceil('tol'*N) (N being the total number of genomes).\nIf you want to use floor('tol'*N) instead, add the\n'-F' option.")), ToolInput(tag="in_mu", input_type=Boolean(optional=True), prefix="-Mu", doc=InputDocumentation(doc="Add this option if you allow several members in any\ngenome of a family. By default, only 1 (or 0 if tol<1)\nmember per genome are allowed in all genomes. If you\nwant to allow exactly 1 member in 'tol'% of the\ngenomes, and 0, 1 or several members in the '1-tol'%\nleft, use the option -X instead of this one: -M and -X\noptions are not compatible.")), ToolInput(tag="in_add_option_you_want_allow", input_type=Boolean(optional=True), prefix="-X", doc=InputDocumentation(doc="Add this option if you want to allow families having\nseveral members only in '1-tol'% of the genomes. In\nthe other genomes, only 1 member exactly is allowed.\nThis option is not compatible with -M (which is\nallowing multigenic families: having several members\nin any number of genomes).")), ToolInput(tag="in_soft", input_type=String(optional=True), prefix="--soft", doc=InputDocumentation(doc="Choose with which software you want to infer the\nphylogenetic tree. Default is IQtree.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase verbosity in stdout/stderr.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Do not display anything to stdout/stderr. log files\nwill still be created.")), ToolInput(tag="in_o", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="")), ToolInput(tag="in_parameters_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-o OUTDIR             Path to your output folder, where all results from all"))], outputs=[], container="quay.io/biocontainers/panacota:1.2.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Run_Panacota_Py_All_V0_1_0().translate("wdl")

