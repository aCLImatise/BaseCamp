from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int

Vcfannotatefromvcf_V0_1_0 = CommandToolBuilder(tool="VcfAnnotateFromVcf", base_command=["VcfAnnotateFromVcf"], inputs=[ToolInput(tag="in_config_file", input_type=File(optional=True), prefix="-config_file", doc=InputDocumentation(doc="TSV file containing the annotation file path, the prefix, the INFO ids and the id column for multiple annotations.\nDefault value: ''")), ToolInput(tag="in_annotation_file", input_type=File(optional=True), prefix="-annotation_file", doc=InputDocumentation(doc="Tabix indexed VCF.GZ file used for annotation.\nDefault value: ''")), ToolInput(tag="in_info_ids", input_type=File(optional=True), prefix="-info_ids", doc=InputDocumentation(doc="INFO id(s) in annotation VCF file (Multiple ids can be separated by ',', optional new id names in output file can be added by '=': original_id=new_id).\nDefault value: ''")), ToolInput(tag="in_id_column", input_type=File(optional=True), prefix="-id_column", doc=InputDocumentation(doc="Name of the ID column in annotation file. (If  it will be ignored in output file, alternative output name can be specified by old_id_column_name=new_name\nDefault value: ''")), ToolInput(tag="in_id_prefix", input_type=File(optional=True), prefix="-id_prefix", doc=InputDocumentation(doc="Prefix for INFO id(s) in output VCF file.\nDefault value: ''")), ToolInput(tag="in_allow_missing_header", input_type=Boolean(optional=True), prefix="-allow_missing_header", doc=InputDocumentation(doc="If set the execution is not aborted if a INFO header is missing in annotation file\nDefault value: 'false'")), ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="Input VCF(.GZ) file. If unset, reads from STDIN.\nDefault value: ''")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="Output VCF list. If unset, writes to STDOUT.\nDefault value: ''")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="The number of threads used to read, process and write files.\nDefault value: '1'")), ToolInput(tag="in_block_size", input_type=Int(optional=True), prefix="-block_size", doc=InputDocumentation(doc="Number of lines processed in one chunk.\nDefault value: '5000'")), ToolInput(tag="in_changelog", input_type=Boolean(optional=True), prefix="--changelog", doc=InputDocumentation(doc="Prints changeloge and exits.")), ToolInput(tag="in_tdx", input_type=Boolean(optional=True), prefix="--tdx", doc=InputDocumentation(doc="Writes a Tool Definition Xml file. The file name is the application name with the suffix '.tdx'."))], outputs=[ToolOutput(tag="out_info_ids", output_type=File(optional=True), selector=InputSelector(input_to_select="in_info_ids", type_hint=File()), doc=OutputDocumentation(doc="INFO id(s) in annotation VCF file (Multiple ids can be separated by ',', optional new id names in output file can be added by '=': original_id=new_id).\nDefault value: ''")), ToolOutput(tag="out_id_column", output_type=File(optional=True), selector=InputSelector(input_to_select="in_id_column", type_hint=File()), doc=OutputDocumentation(doc="Name of the ID column in annotation file. (If  it will be ignored in output file, alternative output name can be specified by old_id_column_name=new_name\nDefault value: ''")), ToolOutput(tag="out_id_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_id_prefix", type_hint=File()), doc=OutputDocumentation(doc="Prefix for INFO id(s) in output VCF file.\nDefault value: ''"))], container="quay.io/biocontainers/ngs-bits:2020_12--py39h5902420_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Vcfannotatefromvcf_V0_1_0().translate("wdl")

