from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean

Bedannotatefrombed_V0_1_0 = CommandToolBuilder(tool="BedAnnotateFromBed", base_command=["BedAnnotateFromBed"], inputs=[ToolInput(tag="in_in_two", input_type=File(optional=True), prefix="-in2", doc=InputDocumentation(doc="BED file that is used as annotation source.")), ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="Input BED file. If unset, reads from STDIN.\nDefault value: ''")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="Output BED file. If unset, writes to STDOUT.\nDefault value: ''")), ToolInput(tag="in_col", input_type=Int(optional=True), prefix="-col", doc=InputDocumentation(doc="Annotation source column (if column number does not exist, 'yes' is used).\nDefault value: '4'")), ToolInput(tag="in_clear", input_type=Boolean(optional=True), prefix="-clear", doc=InputDocumentation(doc="Clear all annotations present in the 'in' file.\nDefault value: 'false'")), ToolInput(tag="in_no_duplicates", input_type=Boolean(optional=True), prefix="-no_duplicates", doc=InputDocumentation(doc="Remove duplicate annotations if several intervals from 'in2' overlap.\nDefault value: 'false'")), ToolInput(tag="in_overlap", input_type=Boolean(optional=True), prefix="-overlap", doc=InputDocumentation(doc="Annotate overlap with regions in 'in2'. The regular annotation is appended in brackets.\nDefault value: 'false'")), ToolInput(tag="in_url_decode", input_type=Boolean(optional=True), prefix="-url_decode", doc=InputDocumentation(doc="Decode URL encoded characters\nDefault value: 'false'")), ToolInput(tag="in_name", input_type=File(optional=True), prefix="-name", doc=InputDocumentation(doc="Use this name as column header of TSV files output files. If unset, the base file name if 'in2' is used.\nDefault value: ''")), ToolInput(tag="in_changelog", input_type=Boolean(optional=True), prefix="--changelog", doc=InputDocumentation(doc="Prints changeloge and exits.")), ToolInput(tag="in_tdx", input_type=Boolean(optional=True), prefix="--tdx", doc=InputDocumentation(doc="Writes a Tool Definition Xml file. The file name is the application name with the suffix '.tdx'."))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output BED file. If unset, writes to STDOUT.\nDefault value: ''")), ToolOutput(tag="out_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_name", type_hint=File()), doc=OutputDocumentation(doc="Use this name as column header of TSV files output files. If unset, the base file name if 'in2' is used.\nDefault value: ''"))], container="quay.io/biocontainers/ngs-bits:2020_12--py39h5902420_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bedannotatefrombed_V0_1_0().translate("wdl")

