from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Float, String, Boolean

Rohhunter_V0_1_0 = CommandToolBuilder(tool="RohHunter", base_command=["RohHunter"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="Input variant list in VCF format.")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="Output TSV file with ROH regions.")), ToolInput(tag="in_annotate", input_type=File(optional=True), prefix="-annotate", doc=InputDocumentation(doc="List of BED files used for annotation. Each file adds a column to the output file. The base filename is used as colum name and 4th column of the BED file is used as annotation value.\nDefault value: ''")), ToolInput(tag="in_var_min_dp", input_type=Int(optional=True), prefix="-var_min_dp", doc=InputDocumentation(doc="Minimum variant depth ('DP'). Variants with lower depth are excluded from the analysis.\nDefault value: '20'")), ToolInput(tag="in_var_min_q", input_type=Float(optional=True), prefix="-var_min_q", doc=InputDocumentation(doc="Minimum variant quality. Variants with lower quality are excluded from the analysis.\nDefault value: '30'")), ToolInput(tag="in_var_af_keys", input_type=String(optional=True), prefix="-var_af_keys", doc=InputDocumentation(doc="Comma-separated allele frequency info field names in 'in'.\nDefault value: ''")), ToolInput(tag="in_var_af_keys_vep", input_type=String(optional=True), prefix="-var_af_keys_vep", doc=InputDocumentation(doc="Comma-separated VEP CSQ field names of allele frequency annotations in 'in'.\nDefault value: ''")), ToolInput(tag="in_roh_min_q", input_type=Float(optional=True), prefix="-roh_min_q", doc=InputDocumentation(doc="Minimum Q score of output ROH regions.\nDefault value: '30'")), ToolInput(tag="in_roh_min_markers", input_type=Int(optional=True), prefix="-roh_min_markers", doc=InputDocumentation(doc="Minimum marker count of output ROH regions.\nDefault value: '20'")), ToolInput(tag="in_roh_min_size", input_type=Float(optional=True), prefix="-roh_min_size", doc=InputDocumentation(doc="Minimum size in Kb of output ROH regions.\nDefault value: '20'")), ToolInput(tag="in_ext_marker_perc", input_type=Float(optional=True), prefix="-ext_marker_perc", doc=InputDocumentation(doc="Percentage of ROH markers that can be spanned when merging ROH regions .\nDefault value: '1'")), ToolInput(tag="in_ext_size_perc", input_type=Float(optional=True), prefix="-ext_size_perc", doc=InputDocumentation(doc="Percentage of ROH size that can be spanned when merging ROH regions.\nDefault value: '50'")), ToolInput(tag="in_inc_chrx", input_type=Boolean(optional=True), prefix="-inc_chrx", doc=InputDocumentation(doc="Include chrX into the analysis. Excluded by default.\nDefault value: 'false'")), ToolInput(tag="in_changelog", input_type=Boolean(optional=True), prefix="--changelog", doc=InputDocumentation(doc="Prints changeloge and exits.")), ToolInput(tag="in_tdx", input_type=Boolean(optional=True), prefix="--tdx", doc=InputDocumentation(doc="Writes a Tool Definition Xml file. The file name is the application name with the suffix '.tdx'."))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output TSV file with ROH regions.")), ToolOutput(tag="out_annotate", output_type=File(optional=True), selector=InputSelector(input_to_select="in_annotate", type_hint=File()), doc=OutputDocumentation(doc="List of BED files used for annotation. Each file adds a column to the output file. The base filename is used as colum name and 4th column of the BED file is used as annotation value.\nDefault value: ''"))], container="quay.io/biocontainers/ngs-bits:2021_03--py39h5902420_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rohhunter_V0_1_0().translate("wdl")

