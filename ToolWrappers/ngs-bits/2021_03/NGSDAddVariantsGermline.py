from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Float

Ngsdaddvariantsgermline_V0_1_0 = CommandToolBuilder(tool="NGSDAddVariantsGermline", base_command=["NGSDAddVariantsGermline"], inputs=[ToolInput(tag="in_ps", input_type=String(optional=True), prefix="-ps", doc=InputDocumentation(doc="Processed sample name")), ToolInput(tag="in_var", input_type=File(optional=True), prefix="-var", doc=InputDocumentation(doc="Small variant list in GSvar format (as produced by megSAP).\nDefault value: ''")), ToolInput(tag="in_var_force", input_type=Boolean(optional=True), prefix="-var_force", doc=InputDocumentation(doc="Force import of small variants, even if already imported.\nDefault value: 'false'")), ToolInput(tag="in_cnv", input_type=File(optional=True), prefix="-cnv", doc=InputDocumentation(doc="CNV list in TSV format (as produced by megSAP).\nDefault value: ''")), ToolInput(tag="in_cnv_force", input_type=Boolean(optional=True), prefix="-cnv_force", doc=InputDocumentation(doc="Force import of CNVs, even if already imported.\nDefault value: 'false'")), ToolInput(tag="in_sv", input_type=File(optional=True), prefix="-sv", doc=InputDocumentation(doc="SV list in BEDPE format (as produced by megSAP).\nDefault value: ''")), ToolInput(tag="in_sv_force", input_type=Boolean(optional=True), prefix="-sv_force", doc=InputDocumentation(doc="Force import of SVs, even if already imported.\nDefault value: 'false'")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="Output file. If unset, writes to STDOUT.\nDefault value: ''")), ToolInput(tag="in_max_af", input_type=Float(optional=True), prefix="-max_af", doc=InputDocumentation(doc="Maximum allele frequency of small variants to import (1000g and gnomAD).\nDefault value: '0.05'")), ToolInput(tag="in_test", input_type=Boolean(optional=True), prefix="-test", doc=InputDocumentation(doc="Uses the test database instead of on the production database.\nDefault value: 'false'")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="-debug", doc=InputDocumentation(doc="Enable verbose debug output.\nDefault value: 'false'")), ToolInput(tag="in_no_time", input_type=Boolean(optional=True), prefix="-no_time", doc=InputDocumentation(doc="Disable timing output.\nDefault value: 'false'")), ToolInput(tag="in_changelog", input_type=Boolean(optional=True), prefix="--changelog", doc=InputDocumentation(doc="Prints changeloge and exits.")), ToolInput(tag="in_tdx", input_type=Boolean(optional=True), prefix="--tdx", doc=InputDocumentation(doc="Writes a Tool Definition Xml file. The file name is the application name with the suffix '.tdx'."))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output file. If unset, writes to STDOUT.\nDefault value: ''"))], container="quay.io/biocontainers/ngs-bits:2021_03--py39h5902420_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ngsdaddvariantsgermline_V0_1_0().translate("wdl")

