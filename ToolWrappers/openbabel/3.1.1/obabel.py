from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, File

Obabel_V0_1_0 = CommandToolBuilder(tool="obabel", base_command=["obabel"], inputs=[ToolInput(tag="in_start_import_specified", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="<#> Start import at molecule # specified")), ToolInput(tag="in_end_import_molecule", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="<#> End import at molecule # specified")), ToolInput(tag="in_next_object_error", input_type=String(optional=True), prefix="-e", doc=InputDocumentation(doc="with next object after error, if possible")), ToolInput(tag="in_the_output_gzip", input_type=String(optional=True), prefix="-z", doc=InputDocumentation(doc="the output with gzip")), ToolInput(tag="in_z_in", input_type=String(optional=True), prefix="-zin", doc=InputDocumentation(doc="the input with gzip")), ToolInput(tag="in_to_translate_keywords", input_type=String(optional=True), prefix="-k", doc=InputDocumentation(doc="to translate keywords")), ToolInput(tag="in_this_help_text", input_type=String(optional=True), prefix="-H", doc=InputDocumentation(doc="this help text")), ToolInput(tag="in_h_xxx", input_type=Boolean(optional=True), prefix="-Hxxx", doc=InputDocumentation(doc="(xxx is file format ID e.g. -Hcml) gives format info")), ToolInput(tag="in_hall", input_type=String(optional=True), prefix="-Hall", doc=InputDocumentation(doc="details of all formats")), ToolInput(tag="in_version_number", input_type=Int(optional=True), prefix="-V", doc=InputDocumentation(doc="version number")), ToolInput(tag="in_lists_plugin_classes", input_type=String(optional=True), prefix="-L", doc=InputDocumentation(doc="Lists plugin classes of this category, e.g. <formats>\nUse just -L for a list of plugin categories.\nUse -L <ID> e.g. -L sdf for details of a format or other plugin.")), ToolInput(tag="in_multiple_output_files", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="multiple output files, to allow:\nSplitting: e.g.        obabel infile.mol -O new.smi -m\nputs each molecule into new1.smi new2.smi etc\nBatch conversion: e.g. obabel *.mol -osmi -m\nconverts each input file to a .smi file")), ToolInput(tag="in_var_12", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="")), ToolInput(tag="in_var_13", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="")), ToolInput(tag="in_i", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="")), ToolInput(tag="in_input_type", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_in_filename", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_output_type", input_type=String(optional=True), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_out_filename", input_type=String(), position=3, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/openbabel:3.1.1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Obabel_V0_1_0().translate("wdl")

