from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, String, Boolean, File

Pindel2Vcf_V0_1_0 = CommandToolBuilder(tool="pindel2vcf", base_command=["pindel2vcf"], inputs=[ToolInput(tag="in_is", input_type=Float(optional=True), prefix="-is", doc=InputDocumentation(doc="guaranteed to work correctly on output files produced by pindel version 0.2.3 and above.")), ToolInput(tag="in_li", input_type=String(optional=True), prefix="-LI", doc=InputDocumentation(doc="BP files (long insertion and break point files) have a different type of header and\nare not supported yet.")), ToolInput(tag="in_reference", input_type=Boolean(optional=True), prefix="--reference", doc=InputDocumentation(doc="The name of the file containing the reference genome: required parameter")), ToolInput(tag="in_reference_name", input_type=Boolean(optional=True), prefix="--reference_name", doc=InputDocumentation(doc="The name and version of the reference genome: required parameter")), ToolInput(tag="in_reference_date", input_type=Boolean(optional=True), prefix="--reference_date", doc=InputDocumentation(doc="The date of the version of the reference genome used: required parameter")), ToolInput(tag="in_pin_del_output", input_type=File(optional=True), prefix="--pindel_output", doc=InputDocumentation(doc="The name of the pindel output file containing the SVs")), ToolInput(tag="in_pin_del_output_root", input_type=File(optional=True), prefix="--pindel_output_root", doc=InputDocumentation(doc="The root-name of the pindel output file; this will result in")), ToolInput(tag="in_vcf", input_type=File(optional=True), prefix="--vcf", doc=InputDocumentation(doc="The name of the output vcf-file (default: name of pindel output file +'.vcf'")), ToolInput(tag="in_chromosome", input_type=Boolean(optional=True), prefix="--chromosome", doc=InputDocumentation(doc="The name of the chromosome (default: SVs on all chromosomes are processed)")), ToolInput(tag="in_window_size", input_type=Boolean(optional=True), prefix="--window_size", doc=InputDocumentation(doc="Memory saving option: the size of the genomic region in a chromosome of which structural variants are calculated separately, in millions of bases (default 300, for memory saving 100 or 50 recommended)")), ToolInput(tag="in_min_coverage", input_type=Boolean(optional=True), prefix="--min_coverage", doc=InputDocumentation(doc="The minimum number of reads to provide a genotype (default 10)")), ToolInput(tag="in_het_cut_off", input_type=Boolean(optional=True), prefix="--het_cutoff", doc=InputDocumentation(doc="The propertion of reads to call het (default 0.2)")), ToolInput(tag="in_hom_cut_off", input_type=Boolean(optional=True), prefix="--hom_cutoff", doc=InputDocumentation(doc="The propertion of reads to call het (default 0.8)")), ToolInput(tag="in_min_size", input_type=Boolean(optional=True), prefix="--min_size", doc=InputDocumentation(doc="The minimum size of events to be reported (default 1)")), ToolInput(tag="in_max_size", input_type=Boolean(optional=True), prefix="--max_size", doc=InputDocumentation(doc="The maximum size of events to be reported (default infinite)")), ToolInput(tag="in_both_strands_supported", input_type=Boolean(optional=True), prefix="--both_strands_supported", doc=InputDocumentation(doc="Only report events that are detected on both strands (default false)")), ToolInput(tag="in_min_supporting_samples", input_type=Boolean(optional=True), prefix="--min_supporting_samples", doc=InputDocumentation(doc="The minimum number of samples an event needs to occur in with sufficient support to be reported (default 0)")), ToolInput(tag="in_min_supporting_reads", input_type=Boolean(optional=True), prefix="--min_supporting_reads", doc=InputDocumentation(doc="The minimum number of supporting reads required for an event to be reported (default 1)")), ToolInput(tag="in_max_supporting_reads", input_type=Boolean(optional=True), prefix="--max_supporting_reads", doc=InputDocumentation(doc="The maximum number of supporting reads allowed for an event to be reported, allows protection against miscalls in due to segmental duplications or poorly mapped regions (default infinite)")), ToolInput(tag="in_region_start", input_type=Boolean(optional=True), prefix="--region_start", doc=InputDocumentation(doc="The start of the region of which events are to be reported (default 0)")), ToolInput(tag="in_region_end", input_type=Boolean(optional=True), prefix="--region_end", doc=InputDocumentation(doc="The end of the region of which events are to be reported (default infinite)")), ToolInput(tag="in_max_internal_repeats", input_type=Boolean(optional=True), prefix="--max_internal_repeats", doc=InputDocumentation(doc="Filters out all indels where the inserted/deleted sequence is a homopolymer/microsatellite of more than X repetitions (default infinite). For example: T->TCACACA has CACACA as insertion, which is a microsattelite of 3 repeats; this would be filtered out by setting -ir to 2")), ToolInput(tag="in_compact_output_limit", input_type=Boolean(optional=True), prefix="--compact_output_limit", doc=InputDocumentation(doc="Puts all structural variations of which either the ref allele or the alt allele exceeds the specified size (say 10 in '-co 10') in the format 'chrom pos first_base <SVType>'")), ToolInput(tag="in_max_internal_repeat_length", input_type=Boolean(optional=True), prefix="--max_internal_repeatlength", doc=InputDocumentation(doc="Filters out all indels where the inserted/deleted sequence is a homopolymers/microsatellite with an unit size of more than Y, combine with the option -ir. Default value of -il is infinite. For example: T->TCAGCAG has CAGCAG as insertion, which has the fundamental repetitive unit CAG of length 3. This would be filtered out if -il has been set to 3 or above, but would be deemed 'sufficiently unrepetitive' if -il is 2")), ToolInput(tag="in_max_post_in_del_repeats", input_type=Boolean(optional=True), prefix="--max_postindel_repeats", doc=InputDocumentation(doc="Filters out all indels where the inserted/deleted sequence is followed by a repetition (of over X times) of the fundamental repeat unit of the inserted/deleted sequence. For example, T->TCACA would usually be a normal insertion, which is not filtered out, but if the real sequence change is TCACACA->TCACACACACA, it will be filtered out by -pr of 1 or above, as the fundamental repeat unit of the inserted sequence (CA) is repeated more than one time in the postindel sequence [indel sequence CACA, postindel sequence CACACA]. Note: when CAC is inserted next to ACACAC, the repeat sequence is recognized as CA, even though the 'postrepeat' sequence is ACACAC")), ToolInput(tag="in_max_post_in_del_repeat_length", input_type=Boolean(optional=True), prefix="--max_postindel_repeatlength", doc=InputDocumentation(doc="Filters out all indels where the inserted/deleted sequence is followed by a repetition of  the fundamental repeat unit of the inserted/deleted sequence; the maximum size of that 'fundamental unit' given by the value of -pl (default infinite) For example: TCAG->TCAGCAG has insertion CAG and post-insertion sequence CAG. This insertion would be filtered out if -pl has been set to 3 or above, but would be deemed 'sufficiently unrepetitive' if -pl is 2")), ToolInput(tag="in_only_balanced_samples", input_type=Boolean(optional=True), prefix="--only_balanced_samples", doc=InputDocumentation(doc="Only count a sample as supporting an event if it is supported by reads on both strands, minimum reads per strand given by the -ss parameter. (default false)")), ToolInput(tag="in_minimum_strand_support", input_type=Boolean(optional=True), prefix="--minimum_strand_support", doc=InputDocumentation(doc="Only count a sample as supporting an event if at least one of its strands is supported by X reads (default 1)")), ToolInput(tag="in_g_atk_compatible", input_type=Boolean(optional=True), prefix="--gatk_compatible", doc=InputDocumentation(doc="calls genotypes which could either be homozygous or heterozygous not as ./1 but as 0/1, to ensure compatibility with GATK"))], outputs=[ToolOutput(tag="out_pin_del_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_pin_del_output", type_hint=File()), doc=OutputDocumentation(doc="The name of the pindel output file containing the SVs")), ToolOutput(tag="out_pin_del_output_root", output_type=File(optional=True), selector=InputSelector(input_to_select="in_pin_del_output_root", type_hint=File()), doc=OutputDocumentation(doc="The root-name of the pindel output file; this will result in")), ToolOutput(tag="out_vcf", output_type=File(optional=True), selector=InputSelector(input_to_select="in_vcf", type_hint=File()), doc=OutputDocumentation(doc="The name of the output vcf-file (default: name of pindel output file +'.vcf'"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pindel2Vcf_V0_1_0().translate("wdl", allow_empty_container=True)

