from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, File

Tpp_V0_1_0 = CommandToolBuilder(tool="tpp", base_command=["tpp"], inputs=[ToolInput(tag="in_protocol", input_type=Boolean(optional=True), prefix="-protocol", doc=InputDocumentation(doc="[Sassetti|Tn5|Mme1] # which sample prep protocol was used?; sassetti protocol is the default; this sets the default transposon and primer sequence")), ToolInput(tag="in_primer", input_type=String(optional=True), prefix="-primer", doc=InputDocumentation(doc="# prefix of reads corresponding to end of transposon at junction with genomic sequence; can override default seq")), ToolInput(tag="in_mismatches", input_type=Int(optional=True), prefix="-mismatches", doc=InputDocumentation(doc="# when searching for constant regions in reads 1 and 2; default is 1")), ToolInput(tag="in_flags", input_type=Boolean(optional=True), prefix="-flags", doc=InputDocumentation(doc="'<STRING>'  # args to pass to BWA")), ToolInput(tag="in_bwa_alg", input_type=Boolean(optional=True), prefix="-bwa-alg", doc=InputDocumentation(doc="[aln|mem]  # Default: mem. Algorithm to use for mapping reads with bwa")), ToolInput(tag="in_primer_start_window", input_type=Int(optional=True), prefix="-primer-start-window", doc=InputDocumentation(doc=",INT # position in read to search for start of primer; default is [0,20]")), ToolInput(tag="in_window_size", input_type=Int(optional=True), prefix="-window-size", doc=InputDocumentation(doc="# automatic method to set window")), ToolInput(tag="in_bar_seq_catalog_out", input_type=File(optional=True), prefix="-barseq_catalog_out", doc=InputDocumentation(doc="# if multiple replicons/genomes/contigs/sequences were provided in -ref, give them names.\n# Enter 'auto' for autogenerated ids.\n")), ToolInput(tag="in_python", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_path", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tpp_V0_1_0().translate("wdl", allow_empty_container=True)

