from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, String

Flashlfq_V0_1_0 = CommandToolBuilder(tool="FlashLFQ", base_command=["FlashLFQ"], inputs=[ToolInput(tag="in_idt", input_type=Boolean(optional=True), prefix="--idt", doc=InputDocumentation(doc="Required. string; identification file path")), ToolInput(tag="in_rep", input_type=Boolean(optional=True), prefix="--rep", doc=InputDocumentation(doc="Required. string; directory containing spectral data files")), ToolInput(tag="in_sil", input_type=Boolean(optional=True), prefix="--sil", doc=InputDocumentation(doc="(Default: false) bool; silent mode")), ToolInput(tag="in_out", input_type=Directory(optional=True), prefix="--out", doc=InputDocumentation(doc="string; output directory")), ToolInput(tag="in_nor", input_type=Boolean(optional=True), prefix="--nor", doc=InputDocumentation(doc="(Default: false) bool; normalize intensity results")), ToolInput(tag="in_ppm", input_type=Boolean(optional=True), prefix="--ppm", doc=InputDocumentation(doc="(Default: 10) double; ppm tolerance")), ToolInput(tag="in_iso", input_type=Boolean(optional=True), prefix="--iso", doc=InputDocumentation(doc="(Default: 5) double; isotopic distribution tolerance in ppm")), ToolInput(tag="in_int", input_type=Boolean(optional=True), prefix="--int", doc=InputDocumentation(doc="(Default: false) bool; integrate peak areas (not recommended)")), ToolInput(tag="in_nis", input_type=Boolean(optional=True), prefix="--nis", doc=InputDocumentation(doc="(Default: 2) int; number of isotopes required to be observed")), ToolInput(tag="in_chg", input_type=Boolean(optional=True), prefix="--chg", doc=InputDocumentation(doc="(Default: false) bool; use only precursor charge state")), ToolInput(tag="in_thr", input_type=Boolean(optional=True), prefix="--thr", doc=InputDocumentation(doc="(Default: -1) int; number of CPU threads to use")), ToolInput(tag="in_mbr", input_type=Boolean(optional=True), prefix="--mbr", doc=InputDocumentation(doc="(Default: false) bool; match between runs")), ToolInput(tag="in_mrt", input_type=Boolean(optional=True), prefix="--mrt", doc=InputDocumentation(doc="(Default: 2.5) double; maximum MBR window in minutes")), ToolInput(tag="in_rmc", input_type=Boolean(optional=True), prefix="--rmc", doc=InputDocumentation(doc="(Default: false) bool; require MS/MS ID in condition")), ToolInput(tag="in_bay", input_type=Boolean(optional=True), prefix="--bay", doc=InputDocumentation(doc="(Default: false) bool; Bayesian protein fold-change analysis")), ToolInput(tag="in_ctr", input_type=Boolean(optional=True), prefix="--ctr", doc=InputDocumentation(doc="string; control condition for Bayesian protein fold-change")), ToolInput(tag="in_mcm", input_type=Boolean(optional=True), prefix="--mcm", doc=InputDocumentation(doc="(Default: 3000) int; number of markov-chain monte carlo\niterations for the Bayesian protein fold-change analysis")), ToolInput(tag="in_bur", input_type=Boolean(optional=True), prefix="--bur", doc=InputDocumentation(doc="(Default: 1000) int; number of markov-chain monte carlo burn-in")), ToolInput(tag="in_analysis", input_type=String(), position=0, doc=InputDocumentation(doc="--fcc        (Default: 0.1) double; fold-change cutoff for Bayesian protein")), ToolInput(tag="in_iterations", input_type=String(), position=0, doc=InputDocumentation(doc="--sha        (Default: false) bool; use shared peptides for protein")), ToolInput(tag="in_quantification", input_type=String(), position=1, doc=InputDocumentation(doc="--rns        int; random seed for the Bayesian protein fold-change analysis"))], outputs=[ToolOutput(tag="out_out", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="string; output directory"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Flashlfq_V0_1_0().translate("wdl", allow_empty_container=True)

