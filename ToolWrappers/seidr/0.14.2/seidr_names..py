from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String

Seidr_Names__V0_1_0 = CommandToolBuilder(tool="seidr_names.", base_command=["seidr", "names."], inputs=[ToolInput(tag="in_import", input_type=String(), position=0, doc=InputDocumentation(doc="Convert network text files to SeidrFiles.")), ToolInput(tag="in_aggregate", input_type=String(), position=1, doc=InputDocumentation(doc="Aggregate a set of SeidrFiles into a crowd")), ToolInput(tag="in_network_dot", input_type=String(), position=2, doc=InputDocumentation(doc="[Filter, threshold or search SeidrFiles]")), ToolInput(tag="in_backbone", input_type=String(), position=3, doc=InputDocumentation(doc="Calculate network backbone and filter edges\nbased on noise corrected backbone measure.")), ToolInput(tag="in_index", input_type=String(), position=4, doc=InputDocumentation(doc="Create index for SeidrFiles.")), ToolInput(tag="in_neighbours", input_type=String(), position=5, doc=InputDocumentation(doc="Extract N first degree neighbours of all nodes\nor a list of nodes in a SeidrFile.")), ToolInput(tag="in_sample", input_type=String(), position=6, doc=InputDocumentation(doc="Sample random edges from a SeidrFile.")), ToolInput(tag="in_threshold", input_type=String(), position=7, doc=InputDocumentation(doc="Calculate network threshold based on scale\nfree fit and transitivity.")), ToolInput(tag="in_view", input_type=String(), position=8, doc=InputDocumentation(doc="View, filter or search SeidrFiles.")), ToolInput(tag="in_stats", input_type=String(), position=0, doc=InputDocumentation(doc="Compute node and edge centrality")), ToolInput(tag="in_graph_stats", input_type=String(), position=1, doc=InputDocumentation(doc="Calculate summary statistics of the network")), ToolInput(tag="in_adjacency", input_type=String(), position=0, doc=InputDocumentation(doc="Convert a SeidrFile to an adjacency")), ToolInput(tag="in_matrix_dot", input_type=String(), position=1, doc=InputDocumentation(doc="convert                        Interconvert various text based formats.")), ToolInput(tag="in_resolve", input_type=String(), position=2, doc=InputDocumentation(doc="Convert node indices in text file to node")), ToolInput(tag="in_names_dot", input_type=String(), position=3, doc=InputDocumentation(doc="[Compare networks]")), ToolInput(tag="in_cluster_enrichment", input_type=String(), position=4, doc=InputDocumentation(doc="Test wether members of clusters in two\nnetworks overlap significantly or extract\nclusters.")), ToolInput(tag="in_compare", input_type=String(), position=5, doc=InputDocumentation(doc="Compare two networks for shared/unique")), ToolInput(tag="in_edges_dot", input_type=String(), position=6, doc=InputDocumentation(doc="[Evaluate networks]")), ToolInput(tag="in_roc", input_type=String(), position=7, doc=InputDocumentation(doc="Compute ROC curves of predictions in \nSeidrFiles given true edges.")), ToolInput(tag="in_re_header", input_type=String(), position=0, doc=InputDocumentation(doc="Modify SeidrFile headers.")), ToolInput(tag="in_version", input_type=String(), position=1, doc=InputDocumentation(doc="Print version."))], outputs=[], container="quay.io/biocontainers/seidr:0.14.2--mpi_mpich_h6f92565", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seidr_Names__V0_1_0().translate("wdl")

