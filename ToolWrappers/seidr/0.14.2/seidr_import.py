from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Seidr_Import_V0_1_0 = CommandToolBuilder(tool="seidr_import", base_command=["seidr", "import"], inputs=[ToolInput(tag="in_i", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --infile ] arg        Input file name ['-' for stdin]")), ToolInput(tag="in_var_1", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="[ --format ] arg        The input file format [el, lm, m, ara]")), ToolInput(tag="in_arg_gene_file", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --genes ] arg         Gene file for input")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg       Output file name")), ToolInput(tag="in_arg_import_name", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --name ] arg          Import name (algorithm name)")), ToolInput(tag="in_rank_absolute_scores", input_type=Boolean(optional=True), prefix="-A", doc=InputDocumentation(doc="[ --absolute ]          Rank on absolute of scores")), ToolInput(tag="in_rank_scores_highest", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reverse ]           Rank scores in descending order (highest first)")), ToolInput(tag="in_drop_edges_weight", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="[ --drop-zero ]         Drop edges with a weight of zero from the network")), ToolInput(tag="in_force_edges_interpreted", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="[ --undirected ]        Force all edges to be interpreted as undirected")), ToolInput(tag="in_arg_number_openmp", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --threads ] arg (=1)  Number of OpenMP threads for parallel sorting")), ToolInput(tag="in_force_overwrite_output", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --force ]             Force overwrite output file if it exists"))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --outfile ] arg       Output file name")), ToolOutput(tag="out_force_overwrite_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force_overwrite_output", type_hint=File()), doc=OutputDocumentation(doc="[ --force ]             Force overwrite output file if it exists"))], container="quay.io/biocontainers/seidr:0.14.2--mpi_mpich_h6f92565", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seidr_Import_V0_1_0().translate("wdl")

