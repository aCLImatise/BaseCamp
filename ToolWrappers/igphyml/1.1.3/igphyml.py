from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean

Igphyml_V0_1_0 = CommandToolBuilder(tool="igphyml", base_command=["igphyml"], inputs=[ToolInput(tag="in_run_id", input_type=File(optional=True), prefix="--run_id", doc=InputDocumentation(doc="[00;04mID_string[00;00m\n[00;00mAppend the string [00;04mID_string[00;00m at the end of each output file.")), ToolInput(tag="in_musertreefilem_only_i", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="[00;04muser_tree_file[00;00m (only if -i used)\n[00;04muser_tree_file[00;00m : starting tree filename. The tree must be in Newick format.")), ToolInput(tag="in_part_file", input_type=Boolean(optional=True), prefix="--partfile", doc=InputDocumentation(doc="[00;04mpartition_file[00;00m (only if -i used)\n[00;04mpartition_file[00;00m : Partition file specifying CDRs/FWRs for sequence file.")), ToolInput(tag="in_mmodelm_mrequiredmmodelm_substitution", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[00;04mmodel[00;00m [00;01m(required)\n[00;04mmodel[00;00m : substitution model name.\n[00;00mCodon[00;00m based models: [00;04mHLP[00;00m (HLP19) | [00;04mGY[00;00m | [00;04mHLP17[00;00m\n[00;00mUse GY for quick tree construction.\nHLP for B cell specific features (see docs).")), ToolInput(tag="in_set_transitiontransversion_ratio", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[00;04mts/tv_ratio[00;00m = [e|ce|i|ci|>0]\nSet the transition/transversion ratio.")), ToolInput(tag="in_omega", input_type=Boolean(optional=True), prefix="--omega", doc=InputDocumentation(doc="[00;04momega[00;00m = [e|ce|i|ci|>0]\nSet number/value of omegas to estimate.\nFirst value (0) corresponds to FWRs, second (1) to CDRs.\nMay specify multiple omegas if partition file(s) specified.")), ToolInput(tag="in_hotness", input_type=Boolean(optional=True), prefix="--hotness", doc=InputDocumentation(doc="[00;04mhotness[00;00m = [e|ce|i|ci|>-1]\nSet number hot- and coldspot rates to estimate.\nMay specify multiple values according to --motifs option.\n'e,e,e,e,e,e' is default.")), ToolInput(tag="in_motifs", input_type=Boolean(optional=True), prefix="--motifs", doc=InputDocumentation(doc="[00;04mmotifs[00;00m\nSpecify hot- and coldspot motifs to be modeled.\n[00;04mmotifs[00;00m = FCH (default) : Free coldspots and hotspots. Estimate separate rates for six canonical motifs.\nOtherwise, motifs specified by <motif>_<mutable position>:<index_in_hotness>.\n[00;04mmotifs[00;00m = WRC_2:0 | GYW_0:0 | WA_1:0 | TW_0:0 | SYC_2:0 | GRS_0:0 : Model rate specific motif(s).\ne.g. [00;04mmotifs[00;00m = WRC_2:0,GYW_0:0 symmetric WR[00;04mC[00;00m/[00;04mG[00;00mYW motifs.\ne.g. [00;04mmotifs[00;00m = WRC_2:0,GYW_0:1 asymmetric WR[00;04mC[00;00m/[00;04mG[00;00mYW motifs. Must specify two values in --hotness.")), ToolInput(tag="in_frequencies_mempiricalm_mftfcfafgmmftfcfafgftfcfafgftfcfafgmmorm", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="(or --frequencies) [00;04mempirical[00;01m, [00;04mmodel[00;00m, [00;04moptimized[00;00m, [00;04mfT,fC,fA,fG[00;00m,\n[00;04mfT1,fC1,fA1,fG1,fT2,fC2,fA2,fG2,fT3,fC3,fA3,fG3[00;00m\n[00;01mor[00;00m [00;04mfC1,fC2, ... ,fC64[00;00m\n[00;04mempirical[00;00m: (GY default) the equilibrium codon frequencies are estimated by counting\nthe occurence of bases or codons in the alignment.\n[00;04moptimize[00;00m : (HLP17 default) codon frequencies are estimated using maximum likelihood")), ToolInput(tag="in_f_model", input_type=Boolean(optional=True), prefix="--fmodel", doc=InputDocumentation(doc="[00;04mfrequency model[00;00m\nWhich frequency model to use.\n[00;04mfrequency model[00;00m = [00;04mF1XCODONS[00;00m | [00;04mF1X4[00;00m | [00;04mF3X4[00;00m | [00;04mCF3X4[00;00m (default)")), ToolInput(tag="in__optimize_focuses", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="(or --optimize) [00;04mparams[00;00m\nThis option focuses on specific parameter optimisation.\n[00;04mparams[00;00m = tlr : (default) tree topology (t), branch length (l) and rate parameters (r) are optimised.\n[00;04mparams[00;00m = tl  : tree topology and branch length are optimised.\n[00;04mparams[00;00m = lr  : branch length and rate parameters are optimised.\n[00;04mparams[00;00m = l   : branch length are optimised.\n[00;04mparams[00;00m = r   : rate parameters are optimised.\n[00;04mparams[00;00m = n   : no parameter is optimised.")), ToolInput(tag="in__search_operation", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="(or --search) [00;04mmove[00;00m\nTree topology search operation option.\nCan be either [00;04mNNI[00;00m (default, fast) or [00;04mSPR[00;00m (thorough, slow).")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="[00;04mnum_threads[00;00m\nNumber of threads to use for parallelization. Default is 1.")), ToolInput(tag="in_min_seq", input_type=Boolean(optional=True), prefix="--minSeq", doc=InputDocumentation(doc="[00;04mminimum_sequences[00;00m\nMinimum number of sequences (including germline) per lineage for inclusion in analysis."))], outputs=[ToolOutput(tag="out_run_id", output_type=File(optional=True), selector=InputSelector(input_to_select="in_run_id", type_hint=File()), doc=OutputDocumentation(doc="[00;04mID_string[00;00m\n[00;00mAppend the string [00;04mID_string[00;00m at the end of each output file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Igphyml_V0_1_0().translate("wdl", allow_empty_container=True)

