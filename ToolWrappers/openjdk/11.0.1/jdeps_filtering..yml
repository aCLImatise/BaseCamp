&id001 !Command
command:
- jdeps
- filtering.
positional:
- !Positional
  description: ''
  position: 0
  name: jdeps
  optional: false
- !Positional
  description: ''
  position: 1
  name: options
  optional: false
- !Positional
  description: ''
  position: 2
  name: path ...
  optional: false
named: []
parent: !Command
  command:
  - jdeps
  positional: []
  named:
  - !Flag
    description: ''
    synonyms:
    - -dotoutput
    args: !SimpleFlagArg
      name: dir
    optional: true
  - !Flag
    description: Destination directory for DOT file output
    synonyms:
    - --dot-output
    args: !SimpleFlagArg
      name: dir
    optional: true
  - !Flag
    description: -summary             Print dependency summary only.
    synonyms:
    - -s
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "-verbose             Print all class level dependences\nEquivalent\
      \ to -verbose:class -filter:none."
    synonyms:
    - -v
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -apionly
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Restrict analysis to APIs i.e. dependences\nfrom the signature of\
      \ public and protected\nmembers of public classes including field\ntype, method\
      \ parameter types, returned type,\nchecked exception types etc."
    synonyms:
    - --api-only
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -jdkinternals
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Finds class-level dependences on JDK internal\nAPIs. By default,\
      \ it analyzes all classes\non --class-path and input files unless -include\n\
      option is specified. This option cannot be\nused with -p, -e and -s options.\n\
      WARNING: JDK internal APIs are inaccessible."
    synonyms:
    - --jdk-internals
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -cp
    args: !SimpleFlagArg
      name: path
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -classpath
    args: !SimpleFlagArg
      name: path
    optional: true
  - !Flag
    description: Specify where to find class files
    synonyms:
    - --class-path
    args: !SimpleFlagArg
      name: path
    optional: true
  - !Flag
    description: Specify module path
    synonyms:
    - --module-path
    args: !SimpleFlagArg
      name: module path
    optional: true
  - !Flag
    description: Specify upgrade module path
    synonyms:
    - --upgrade-module-path
    args: !SimpleFlagArg
      name: module path
    optional: true
  - !Flag
    description: Specify an alternate system module path
    synonyms:
    - --system
    args: !SimpleFlagArg
      name: java-home
    optional: true
  - !Flag
    description: "[,<module-name>...]\nAdds modules to the root set for analysis"
    synonyms:
    - --add-modules
    args: !SimpleFlagArg
      name: module-name
    optional: true
  - !Flag
    description: "Specifies the version when processing\nmulti-release jar files.\
      \  <version> should\nbe integer >= 9 or base."
    synonyms:
    - --multi-release
    args: !SimpleFlagArg
      name: version
    optional: true
  - !Flag
    description: -quiet               Suppress warning messages
    synonyms:
    - -q
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -m
    args: !SimpleFlagArg
      name: module-name
    optional: true
  - !Flag
    description: Specify the root module for analysis
    synonyms:
    - --module
    args: !SimpleFlagArg
      name: module-name
    optional: true
  - !Flag
    description: "Generate module-info.java under the specified\ndirectory. The specified\
      \ JAR files will be\nanalyzed. This option cannot be used with\n--dot-output\
      \ or --class-path. Use\n--generate-open-module option for open modules."
    synonyms:
    - --generate-module-info
    args: !SimpleFlagArg
      name: dir
    optional: true
  - !Flag
    description: "Generate module-info.java for the specified\nJAR files under the\
      \ specified directory as\nopen modules. This option cannot be used with\n--dot-output\
      \ or --class-path."
    synonyms:
    - --generate-open-module
    args: !SimpleFlagArg
      name: dir
    optional: true
  - !Flag
    description: "[,<module-name>...\nAnalyze the dependence of the specified modules\n\
      It prints the module descriptor, the resulting\nmodule dependences after analysis\
      \ and the\ngraph after transition reduction.  It also\nidentifies any unused\
      \ qualified exports."
    synonyms:
    - --check
    args: !SimpleFlagArg
      name: module-name
    optional: true
  - !Flag
    description: "Lists the module dependences.  It also prints\nany JDK internal\
      \ API packages if referenced.\nThis option does not show dependences on the\n\
      class path or not found."
    synonyms:
    - --list-deps
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Same as --list-deps with not listing\nthe implied reads edges from\
      \ the module graph.\nIf module M1 reads M2, and M2 requires\ntransitive on M3,\
      \ then M1 reading M3 is implied\nand is not shown in the graph."
    synonyms:
    - --list-reduced-deps
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Same as --list-reduced-deps with printing\na comma-separated list\
      \ of module dependences.\nThis output can be used by jlink --add-modules\nin\
      \ order to create a custom image containing\nthose modules and their transitive\
      \ dependences."
    synonyms:
    - --print-module-deps
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -p
    args: !SimpleFlagArg
      name: pkg
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -package
    args: !SimpleFlagArg
      name: pkg
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -e
    args: !SimpleFlagArg
      name: regex
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -regex
    args: !SimpleFlagArg
      name: regex
    optional: true
  - !Flag
    description: "Finds dependences matching the given module\nname (may be given\
      \ multiple times). --package,\n--regex, --require are mutual exclusive."
    synonyms:
    - --require
    args: !SimpleFlagArg
      name: module-name
    optional: true
  - !Flag
    description: "Restrict analysis to classes matching pattern\nThis option filters\
      \ the list of classes to\nbe analyzed.  It can be used together with\n-p and\
      \ -e which apply pattern to the dependences"
    synonyms:
    - -include
    args: !SimpleFlagArg
      name: regex
    optional: true
  - !Flag
    description: -profile             Show profile containing a package
    synonyms:
    - -P
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "-recursive           Recursively traverse all run-time dependences.\n\
      The -R option implies -filter:none.  If -p,\n-e, -f option is specified, only\
      \ the matching\ndependences are analyzed."
    synonyms:
    - -R
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "--inverse            Analyzes the dependences per other given options\n\
      and then find all artifacts that directly\nand indirectly depend on the matching\
      \ nodes.\nThis is equivalent to the inverse of\ncompile-time view analysis and\
      \ print\ndependency summary.  This option must use\nwith --require, --package\
      \ or --regex option."
    synonyms:
    - -I
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Compile-time view of transitive dependences\ni.e. compile-time view\
      \ of -R option.\nAnalyzes the dependences per other given options\nIf a dependence\
      \ is found from a directory,\na JAR file or a module, all classes in that\n\
      containing archive are analyzed.\n"
    synonyms:
    - --compile-time
    args: !EmptyFlagArg {}
    optional: true
  parent:
  subcommands:
  - *id001
  usage: []
  help_flag: !Flag
    description: -? --help                  Print this help message
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag: !Flag
    description: Version information
    synonyms:
    - -version
    - --version
    args: !EmptyFlagArg {}
    optional: true
  help_text: "Usage: jdeps <options> <path ...>]\n<path> can be a pathname to a .class\
    \ file, a directory, a JAR file.\n\nPossible options include:\n  -h -? --help\
    \                  Print this help message\n  -dotoutput <dir>\n  --dot-output\
    \ <dir>            Destination directory for DOT file output\n  -s       -summary\
    \             Print dependency summary only.\n  -v       -verbose            \
    \ Print all class level dependences\n                                Equivalent\
    \ to -verbose:class -filter:none.\n  -verbose:package              Print package-level\
    \ dependences excluding\n                                dependences within the\
    \ same package by default\n  -verbose:class                Print class-level dependences\
    \ excluding\n                                dependences within the same package\
    \ by default\n  -apionly\n  --api-only                    Restrict analysis to\
    \ APIs i.e. dependences\n                                from the signature of\
    \ public and protected\n                                members of public classes\
    \ including field\n                                type, method parameter types,\
    \ returned type,\n                                checked exception types etc.\n\
    \  -jdkinternals\n  --jdk-internals               Finds class-level dependences\
    \ on JDK internal\n                                APIs. By default, it analyzes\
    \ all classes\n                                on --class-path and input files\
    \ unless -include\n                                option is specified. This option\
    \ cannot be\n                                used with -p, -e and -s options.\n\
    \                                WARNING: JDK internal APIs are inaccessible.\n\
    \  -cp <path>\n  -classpath <path>\n  --class-path <path>           Specify where\
    \ to find class files\n  --module-path <module path>   Specify module path\n \
    \ --upgrade-module-path <module path>  Specify upgrade module path\n  --system\
    \ <java-home>          Specify an alternate system module path\n  --add-modules\
    \ <module-name>[,<module-name>...]\n                                Adds modules\
    \ to the root set for analysis\n  --multi-release <version>     Specifies the\
    \ version when processing\n                                multi-release jar files.\
    \  <version> should\n                                be integer >= 9 or base.\n\
    \  -q       -quiet               Suppress warning messages\n  -version --version\
    \            Version information\n\nModule dependence analysis options:\n  -m\
    \ <module-name>\n  --module <module-name>        Specify the root module for analysis\n\
    \  --generate-module-info <dir>  Generate module-info.java under the specified\n\
    \                                directory. The specified JAR files will be\n\
    \                                analyzed. This option cannot be used with\n \
    \                               --dot-output or --class-path. Use \n         \
    \                       --generate-open-module option for open modules.\n  --generate-open-module\
    \ <dir>  Generate module-info.java for the specified\n                       \
    \         JAR files under the specified directory as\n                       \
    \         open modules. This option cannot be used with\n                    \
    \            --dot-output or --class-path.\n  --check <module-name>[,<module-name>...\n\
    \                                Analyze the dependence of the specified modules\n\
    \                                It prints the module descriptor, the resulting\n\
    \                                module dependences after analysis and the\n \
    \                               graph after transition reduction.  It also\n \
    \                               identifies any unused qualified exports.\n  --list-deps\
    \                   Lists the module dependences.  It also prints\n          \
    \                      any JDK internal API packages if referenced.\n        \
    \                        This option does not show dependences on the\n      \
    \                          class path or not found.\n  --list-reduced-deps   \
    \        Same as --list-deps with not listing\n                              \
    \  the implied reads edges from the module graph.\n                          \
    \      If module M1 reads M2, and M2 requires\n                              \
    \  transitive on M3, then M1 reading M3 is implied\n                         \
    \       and is not shown in the graph.\n  --print-module-deps           Same as\
    \ --list-reduced-deps with printing\n                                a comma-separated\
    \ list of module dependences.\n                                This output can\
    \ be used by jlink --add-modules\n                                in order to\
    \ create a custom image containing\n                                those modules\
    \ and their transitive dependences.\n\nOptions to filter dependences:\n  -p <pkg>\n\
    \  -package <pkg>\n  --package <pkg>               Finds dependences matching\
    \ the given package\n                                name (may be given multiple\
    \ times).\n  -e <regex>\n  -regex <regex>\n  --regex <regex>               Finds\
    \ dependences matching the given pattern.\n  --require <module-name>       Finds\
    \ dependences matching the given module\n                                name\
    \ (may be given multiple times). --package,\n                                --regex,\
    \ --require are mutual exclusive.\n  -f <regex> -filter <regex>    Filter dependences\
    \ matching the given\n                                pattern. If given multiple\
    \ times, the last\n                                one will be used.\n  -filter:package\
    \               Filter dependences within the same package.\n                \
    \                This is the default.\n  -filter:archive               Filter\
    \ dependences within the same archive.\n  -filter:module                Filter\
    \ dependences within the same module.\n  -filter:none                  No -filter:package\
    \ and -filter:archive\n                                filtering.  Filtering specified\
    \ via the\n                                -filter option still applies.\n\n\n\
    Options to filter classes to be analyzed:\n  -include <regex>              Restrict\
    \ analysis to classes matching pattern\n                                This option\
    \ filters the list of classes to\n                                be analyzed.\
    \  It can be used together with\n                                -p and -e which\
    \ apply pattern to the dependences\n  -P       -profile             Show profile\
    \ containing a package\n  -R       -recursive           Recursively traverse all\
    \ run-time dependences.\n                                The -R option implies\
    \ -filter:none.  If -p,\n                                -e, -f option is specified,\
    \ only the matching\n                                dependences are analyzed.\n\
    \  -I       --inverse            Analyzes the dependences per other given options\n\
    \                                and then find all artifacts that directly\n \
    \                               and indirectly depend on the matching nodes.\n\
    \                                This is equivalent to the inverse of\n      \
    \                          compile-time view analysis and print\n            \
    \                    dependency summary.  This option must use\n             \
    \                   with --require, --package or --regex option.\n  --compile-time\
    \                Compile-time view of transitive dependences\n               \
    \                 i.e. compile-time view of -R option.\n                     \
    \           Analyzes the dependences per other given options\n               \
    \                 If a dependence is found from a directory,\n               \
    \                 a JAR file or a module, all classes in that \n             \
    \                   containing archive are analyzed.\n"
  generated_using: &id002
  - --help
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "Error: option must be specified before classes: --help\nUsage: jdeps <options>\
  \ <path ...>]\nuse --help for a list of possible options\n"
generated_using: *id002
