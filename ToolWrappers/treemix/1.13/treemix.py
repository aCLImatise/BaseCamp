from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int

Treemix_V0_1_0 = CommandToolBuilder(tool="treemix", base_command=["treemix"], inputs=[ToolInput(tag="in_this_help", input_type=String(optional=True), prefix="-h", doc=InputDocumentation(doc="this help")), ToolInput(tag="in__input_file", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[file name] input file")), ToolInput(tag="in_modelcovgz", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="[stem] output stem (will be [stem].treeout.gz, [stem].cov.gz, [stem].modelcov.gz)")), ToolInput(tag="in_number_snps_block", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="[int] number of SNPs per block for estimation of covariance matrix (1)")), ToolInput(tag="in_global", input_type=String(optional=True), prefix="-global", doc=InputDocumentation(doc="a round of global rearrangements after adding all populations")), ToolInput(tag="in_tf", input_type=Boolean(optional=True), prefix="-tf", doc=InputDocumentation(doc="[file name] Read the tree topology from a file, rather than estimating it")), ToolInput(tag="in_number_migration_add", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[int] number of migration edges to add (0)")), ToolInput(tag="in_root", input_type=Boolean(optional=True), prefix="-root", doc=InputDocumentation(doc="[string] comma-delimited list of populations to set on one side of the root (for migration)")), ToolInput(tag="in_read_graph_run", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[vertices file name] [edges file name] read the graph from a previous TreeMix run")), ToolInput(tag="in_se", input_type=String(optional=True), prefix="-se", doc=InputDocumentation(doc="standard errors of migration weights (computationally expensive)")), ToolInput(tag="in_micro", input_type=String(optional=True), prefix="-micro", doc=InputDocumentation(doc="data")), ToolInput(tag="in_bootstrap", input_type=String(optional=True), prefix="-bootstrap", doc=InputDocumentation(doc="a single bootstrap replicate")), ToolInput(tag="in_cor_mig", input_type=Boolean(optional=True), prefix="-cor_mig", doc=InputDocumentation(doc="[file] list of known migration events to include (also use -climb)")), ToolInput(tag="in_noss", input_type=Int(optional=True), prefix="-noss", doc=InputDocumentation(doc="off sample size correction")), ToolInput(tag="in_seed", input_type=Boolean(optional=True), prefix="-seed", doc=InputDocumentation(doc="[int] Set the seed for random number generation")), ToolInput(tag="in_n_warn", input_type=Boolean(optional=True), prefix="-n_warn", doc=InputDocumentation(doc="[int] Display first N warnings"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Treemix_V0_1_0().translate("wdl", allow_empty_container=True)

