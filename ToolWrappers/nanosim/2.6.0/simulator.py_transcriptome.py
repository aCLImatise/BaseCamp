from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean

Simulator_Py_Transcriptome_V0_1_0 = CommandToolBuilder(tool="simulator.py_transcriptome", base_command=["simulator.py", "transcriptome"], inputs=[ToolInput(tag="in_ref_t", input_type=String(optional=True), prefix="--ref_t", doc=InputDocumentation(doc="Input reference transcriptome")), ToolInput(tag="in_ref_g", input_type=String(optional=True), prefix="--ref_g", doc=InputDocumentation(doc="Input reference genome, required if intron retention\nsimulatin is on")), ToolInput(tag="in_exp", input_type=String(optional=True), prefix="--exp", doc=InputDocumentation(doc="Expression profile in the specified format as\ndescribed in README")), ToolInput(tag="in_model_prefix", input_type=String(optional=True), prefix="--model_prefix", doc=InputDocumentation(doc="Location and prefix of error profiles generated from\ncharacterization step (Default = training)")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Output location and prefix for simulated reads\n(Default = simulated)")), ToolInput(tag="in_number", input_type=Int(optional=True), prefix="--number", doc=InputDocumentation(doc="Number of reads to be simulated (Default = 20000)")), ToolInput(tag="in_max_len", input_type=Int(optional=True), prefix="--max_len", doc=InputDocumentation(doc="The maximum length for simulated reads (Default =\nInfinity)")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--min_len", doc=InputDocumentation(doc="The minimum length for simulated reads (Default = 50)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Manually seeds the pseudo-random number generator")), ToolInput(tag="in_km_er_bias", input_type=Int(optional=True), prefix="--KmerBias", doc=InputDocumentation(doc="Minimum homopolymer length to simulate homopolymer\ncontraction and expansion events in")), ToolInput(tag="in_base_caller", input_type=String(optional=True), prefix="--basecaller", doc=InputDocumentation(doc="Simulate homopolymers and/or base qualities with\nrespect to chosen basecaller: albacore or guppy")), ToolInput(tag="in_read_type", input_type=String(optional=True), prefix="--read_type", doc=InputDocumentation(doc="Simulate homopolymers and/or base qualities with\nrespect to chosen read type: dRNA, cDNA_1D or cDNA_1D2")), ToolInput(tag="in_strand_ness", input_type=Int(optional=True), prefix="--strandness", doc=InputDocumentation(doc="Percentage of antisense sequences. Overrides the value\nprofiled in characterization stage. Should be between\n0 and 1")), ToolInput(tag="in_no_model_ir", input_type=Boolean(optional=True), prefix="--no_model_ir", doc=InputDocumentation(doc="Ignore simulating intron retention events")), ToolInput(tag="in_perfect", input_type=Boolean(optional=True), prefix="--perfect", doc=InputDocumentation(doc="Ignore profiles and simulate perfect reads")), ToolInput(tag="in_polya", input_type=String(optional=True), prefix="--polya", doc=InputDocumentation(doc="Simulate polyA tails for given list of transcripts")), ToolInput(tag="in_fast_q", input_type=Boolean(optional=True), prefix="--fastq", doc=InputDocumentation(doc="Output fastq files instead of fasta files")), ToolInput(tag="in_num_threads", input_type=Int(optional=True), prefix="--num_threads", doc=InputDocumentation(doc="Number of threads for simulation (Default = 1)")), ToolInput(tag="in_uracil", input_type=Boolean(optional=True), prefix="--uracil", doc=InputDocumentation(doc="Converts the thymine (T) bases to uracil (U) in the\noutput fasta format\n"))], outputs=[], container="quay.io/biocontainers/nanosim:2.6.0--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Simulator_Py_Transcriptome_V0_1_0().translate("wdl")

