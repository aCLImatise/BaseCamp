from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Dfgtrain_V0_1_0 = CommandToolBuilder(tool="dfgTrain", base_command=["dfgTrain"], inputs=[ToolInput(tag="in_arg_output_precision", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --precision ] arg (=5)           Output precision of real numbers.")), ToolInput(tag="in_arg_defines_stopping", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --minDeltaLogLik ] arg (=0.0001) Defines stopping criteria for the EM\ntraining. The training will stop when\nthe difference in log likelihood is\nbelow minDeltaLogLik (default is 1e-4).")), ToolInput(tag="in_arg_max_numbr", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --maxIter ] arg (=100)           Max numbr if iterations of the EM\ntraining (default is 100).")), ToolInput(tag="in_arg_logfiletxt_log", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --logFile ] arg (=logFile.txt)   Log file for EM training.")), ToolInput(tag="in_perform_em_training", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --emTrain ]                      Perform EM training.")), ToolInput(tag="in_dotfile", input_type=File(optional=True), prefix="--dotFile", doc=InputDocumentation(doc="Output dfg in dot format to given\nfileName. (To convert to ps format,\ne.g. run: 'cat fileName.dot | dot -Tps\n-Kneato -Gsize='7.5,10' -o dfg.ps'.)")), ToolInput(tag="in_arg_dfgspecprefix_dfg", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --dfgSpecPrefix ] arg (=./dfgSpec/)\nPrefix of DFG specification files.")), ToolInput(tag="in_arg__prefix", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outSpecPrefix ] arg (=out_)    Prefix of DFG specification files. Any\nincluded prefix directory must already\nexist.")), ToolInput(tag="in_arg_prefix_fileswritten", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --tmpSpecPrefix ] arg            Prefix of DFG specification files\nwritten during each iteration of\ntraining. Allows state of EM to be\nsaved - especially useful for large\ndatasets. Any included prefix directory\nmust already exist. Not defined and not\nperformed by default.")), ToolInput(tag="in_factor_graph_file", input_type=String(optional=True), prefix="--factorGraphFile", doc=InputDocumentation(doc="(=factorGraph.txt)\nSpecification of the factor graph\nstructure.")), ToolInput(tag="in_variables_file", input_type=String(optional=True), prefix="--variablesFile", doc=InputDocumentation(doc="(=variables.txt)  Specification of the state map used by\neach variable.")), ToolInput(tag="in_state_map_file", input_type=String(optional=True), prefix="--stateMapFile", doc=InputDocumentation(doc="(=stateMaps.txt)   Specification of state maps.")), ToolInput(tag="in_fac_pot_file", input_type=String(optional=True), prefix="--facPotFile", doc=InputDocumentation(doc="(=factorPotentials.txt)\nSpecification of factor potentials.")), ToolInput(tag="in_sub_var_file", input_type=File(optional=True), prefix="--subVarFile", doc=InputDocumentation(doc="Input subscribed variables file in\nnamed data format. Must use same\nidentifiers in same order as varFile")), ToolInput(tag="in_write_info", input_type=Boolean(optional=True), prefix="--writeInfo", doc=InputDocumentation(doc="Print factor graph info. Useful for\ndebugging factor graph specification.\n")), ToolInput(tag="in_input_var_data_dot_tab", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_input_fac_data_dot_tab", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_dotfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_dotfile", type_hint=File()), doc=OutputDocumentation(doc="Output dfg in dot format to given\nfileName. (To convert to ps format,\ne.g. run: 'cat fileName.dot | dot -Tps\n-Kneato -Gsize='7.5,10' -o dfg.ps'.)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dfgtrain_V0_1_0().translate("wdl", allow_empty_container=True)

