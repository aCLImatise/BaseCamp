from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String

Mummer_V0_1_0 = CommandToolBuilder(tool="mummer", base_command=["mummer"], inputs=[ToolInput(tag="in_mum", input_type=Boolean(optional=True), prefix="-mum", doc=InputDocumentation(doc="compute maximal matches that are unique in both sequences")), ToolInput(tag="in_mum_reference", input_type=Boolean(optional=True), prefix="-mumreference", doc=InputDocumentation(doc="compute maximal matches that are unique in the reference-\nsequence but not necessarily in the query-sequence (default)")), ToolInput(tag="in_m_umc_and", input_type=Boolean(optional=True), prefix="-mumcand", doc=InputDocumentation(doc="same as -mumreference")), ToolInput(tag="in_max_match", input_type=Boolean(optional=True), prefix="-maxmatch", doc=InputDocumentation(doc="compute all maximal matches regardless of their uniqueness")), ToolInput(tag="in_set_minimum_length", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="set the minimum length of a match\nif not set, the default value is 20")), ToolInput(tag="in_compute_forward_reverse", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="compute forward and reverse complement matches")), ToolInput(tag="in_force_column_output", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="force 4 column output format regardless of the number of\nreference sequence inputs")), ToolInput(tag="in_match_only_characters", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="match only the characters a, c, g, or t")), ToolInput(tag="in_print_length_query", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="print length of query sequence in header of matches")), ToolInput(tag="in_compute_only_reverse", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="compute only reverse complement matches")), ToolInput(tag="in_print_first_characters", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="print first 53 characters of the matching substring")), ToolInput(tag="in_report_query_position", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Report the query position of a reverse complement match relative to the forward strand of the query sequence")), ToolInput(tag="in_sampled_suffix_positions", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="sampled suffix positions (one by default)")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="-threads", doc=InputDocumentation(doc="number of threads to use for -maxmatch, only valid k > 1")), ToolInput(tag="in_q_threads", input_type=Boolean(optional=True), prefix="-qthreads", doc=InputDocumentation(doc="number of threads to use for queries")), ToolInput(tag="in_suf_link", input_type=Boolean(optional=True), prefix="-suflink", doc=InputDocumentation(doc="use suffix links (1=yes or 0=no) in the index and during search [auto]")), ToolInput(tag="in_child", input_type=Boolean(optional=True), prefix="-child", doc=InputDocumentation(doc="use child table (1=yes or 0=no) in the index and during search [auto]")), ToolInput(tag="in_skip", input_type=Boolean(optional=True), prefix="-skip", doc=InputDocumentation(doc="sparsify the MEM-finding algorithm even more, performing jumps of skip*k [auto (l-10)/k]\nthis is a performance parameter that trade-offs SA traversal with checking of right-maximal MEMs")), ToolInput(tag="in_km_er", input_type=Boolean(optional=True), prefix="-kmer", doc=InputDocumentation(doc="use kmer table containing sa-intervals (speeds up searching first k characters) in the index and during search [int value, auto]")), ToolInput(tag="in_save", input_type=Boolean(optional=True), prefix="-save", doc=InputDocumentation(doc="(string) save index to file to use again later (string)")), ToolInput(tag="in_load", input_type=Boolean(optional=True), prefix="-load", doc=InputDocumentation(doc="(string) load index from file")), ToolInput(tag="in_query_file_one", input_type=Int(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_query", input_type=String(optional=True), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_file_three_two", input_type=Int(optional=True), position=2, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/mummer4:4.0.0rc1--pl526he1b5a44_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mummer_V0_1_0().translate("wdl")

