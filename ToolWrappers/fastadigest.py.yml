!Command
command:
- fastadigest.py
positional:
- !Positional
  description: ''
  position: 0
  name: FASTA
  optional: true
named:
- !Flag
  description: Threads to run
  synonyms:
  - -p
  args: !SimpleFlagArg
    name: P
  optional: true
- !Flag
  description: "[FASTA], --fasta [FASTA]\nThe fasta file to operate on."
  synonyms:
  - -f
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: The type of fasta file (default protein).
  synonyms:
  - -t
  - --type
  args: !ChoiceFlagArg
    choices: !!set
      nt:
      prot:
  optional: true
- !Flag
  description: "If using a nucleotide file, translate in how many\nframes?"
  synonyms:
  - --frame
  args: !ChoiceFlagArg
    choices: !!set
      '6':
      '1':
      '3':
  optional: true
- !Flag
  description: "Are we translating a genome? This will keep chromosome\npositions\
    \ in the header."
  synonyms:
  - --genome
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[OUT], --out [OUT]\nThe file to write results to. Leave blank for\
    \ stdout,"
  synonyms:
  - -o
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[{trypsin,lysc,none,argc,gluc,aspn,V8} ...]\nThe enzyme to cleave\
    \ with."
  synonyms:
  - --enzyme
  args: !ChoiceFlagArg
    choices: !!set
      V8:
      lysc:
      gluc:
      none:
      argc:
      aspn:
      trypsin:
  optional: true
- !Flag
  description: "A regex cleavage pattern such as [KR]|{P} to cleave\nproteins with."
  synonyms:
  - --enzyme-pattern
  args: !SimpleFlagArg
    name: ENZYME_PATTERN
  optional: true
- !Flag
  description: Minimum cleavage length
  synonyms:
  - --min
  args: !SimpleFlagArg
    name: MIN
  optional: true
- !Flag
  description: Maximum cleavage length
  synonyms:
  - --max
  args: !SimpleFlagArg
    name: MAX
  optional: true
- !Flag
  description: Only return unique peptides per cleavage
  synonyms:
  - --unique
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "usage: fastadigest.py [-h] [-p P] -f [FASTA] [-t {prot,nt}] [--frame {1,3,6}]\n\
  \                      [--genome] [-o [OUT]]\n                      [--enzyme {trypsin,lysc,none,argc,gluc,aspn,V8}\
  \ [{trypsin,lysc,none,argc,gluc,aspn,V8} ...]]\n                      [--enzyme-pattern\
  \ ENZYME_PATTERN] [--min MIN]\n                      [--max MAX] [--unique]\n\n\
  This script will digest a given fasta file with the specified enzymes. Both\nprotein\
  \ and nucleotide fasta files are valid inputs, and when digesting fasta\nfiles,\
  \ it is possible to create 6 frame as well as 3 frame translations.\n\noptional\
  \ arguments:\n  -h, --help            show this help message and exit\n  -p P  \
  \                Threads to run\n  -f [FASTA], --fasta [FASTA]\n               \
  \         The fasta file to operate on.\n  -t {prot,nt}, --type {prot,nt}\n    \
  \                    The type of fasta file (default protein).\n  --frame {1,3,6}\
  \       If using a nucleotide file, translate in how many\n                    \
  \    frames?\n  --genome              Are we translating a genome? This will keep\
  \ chromosome\n                        positions in the header.\n  -o [OUT], --out\
  \ [OUT]\n                        The file to write results to. Leave blank for stdout,\n\
  \  --enzyme {trypsin,lysc,none,argc,gluc,aspn,V8} [{trypsin,lysc,none,argc,gluc,aspn,V8}\
  \ ...]\n                        The enzyme to cleave with.\n  --enzyme-pattern ENZYME_PATTERN\n\
  \                        A regex cleavage pattern such as [KR]|{P} to cleave\n \
  \                       proteins with.\n  --min MIN             Minimum cleavage\
  \ length\n  --max MAX             Maximum cleavage length\n  --unique          \
  \    Only return unique peptides per cleavage\n"
generated_using:
- --help
