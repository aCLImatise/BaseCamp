from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Memembed_V0_1_0 = CommandToolBuilder(tool="memembed", base_command=["memembed"], inputs=[ToolInput(tag="in_output_pdb_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Output pdb file. Default <input pdb file>_EMBED.pdb")), ToolInput(tag="in_comma_separated_list", input_type=String(optional=True), prefix="-c", doc=InputDocumentation(doc="Comma separated list of transmembrane chains. Default all")), ToolInput(tag="in_output_chains_regardless", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="Output all chains regardless of chains passed by -c parameter.")), ToolInput(tag="in_use_alternative_file", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="Use alternative potential file.")), ToolInput(tag="in_comma_seperated_list_helix", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="Comma seperated list of helix boundaries used to calculate helix tilt angles.")), ToolInput(tag="in_comma_seperated_list_skip", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="Comma seperated list of residues to skip.")), ToolInput(tag="in_chain_topology_refers", input_type=String(optional=True), prefix="-r", doc=InputDocumentation(doc="Chain that topology refers to. Default 'A'")), ToolInput(tag="in_maximum_cbcb_distance", input_type=Int(optional=True), prefix="-v", doc=InputDocumentation(doc="Maximum Cb-Cb distance to allow.")), ToolInput(tag="in_threads_to_use", input_type=Int(optional=True), prefix="-a", doc=InputDocumentation(doc="Threads to use.")), ToolInput(tag="in_search_type_algorithm", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc="Search type. 0 = Genetic algorithm, 1 = Grid, 2 = Direct, 3 = GA repeated 5 times. Default 0.")), ToolInput(tag="in_optimise_membrane_thickness", input_type=Int(optional=True), prefix="-q", doc=InputDocumentation(doc="Optimise membrane thickness. 0 = Do not optimise, 1 = After orientation, 2 = Do not orientate. Default 0.")), ToolInput(tag="in_location_nterminal_first", input_type=String(optional=True), prefix="-n", doc=InputDocumentation(doc="Location of N-terminal (first residue of first chain).")), ToolInput(tag="in_target_is_betabarrel", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="Target is a beta-barrel.")), ToolInput(tag="in_force_target_span", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="Force target to span membrane.")), ToolInput(tag="in_draw_lines_representing", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="Draw lines representing polar head groups.")), ToolInput(tag="in_just_compute_energy", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="Just compute energy.")), ToolInput(tag="in_just_compute_helix", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="Just compute helix tilt angles."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Memembed_V0_1_0().translate("wdl", allow_empty_container=True)

