from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, String, Int

Megagta_Py_V0_1_0 = CommandToolBuilder(tool="megagta.py", base_command=["megagta.py"], inputs=[ToolInput(tag="in_one", input_type=Boolean(optional=True), prefix="-1", doc=InputDocumentation(doc="<pe1>          comma-separated list of fasta/q paired-end #1 files, paired with files in <pe2>")), ToolInput(tag="in_two", input_type=Boolean(optional=True), prefix="-2", doc=InputDocumentation(doc="<pe2>          comma-separated list of fasta/q paired-end #2 files, paired with files in <pe1>")), ToolInput(tag="in_commaseparated_list_interleaved", input_type=Boolean(optional=True), prefix="--12", doc=InputDocumentation(doc="<pe12>         comma-separated list of interleaved fasta/q paired-end files")), ToolInput(tag="in_read", input_type=Boolean(optional=True), prefix="--read", doc=InputDocumentation(doc="<se>           comma-separated list of fasta/q single-end files")), ToolInput(tag="in_gene_list", input_type=Boolean(optional=True), prefix="--gene-list", doc=InputDocumentation(doc="<string>       gene list")), ToolInput(tag="in_min_count", input_type=Boolean(optional=True), prefix="--min-count", doc=InputDocumentation(doc="<int>          minimum multiplicity for filtering k-mers [1]")), ToolInput(tag="in_k_list", input_type=Boolean(optional=True), prefix="--k-list", doc=InputDocumentation(doc="<int,int,..>   comma-separated list of kmer size (in range 15-127)\nthe last k must be a multiple of 3) [30,36,45]")), ToolInput(tag="in_prune_len", input_type=Boolean(optional=True), prefix="--prune-len", doc=InputDocumentation(doc="<int>          prune the search if the score does not improve after <int> steps [20]")), ToolInput(tag="in_low_cov_penalty", input_type=Boolean(optional=True), prefix="--low-cov-penalty", doc=InputDocumentation(doc="<float>        penalty for coverage one edges (in [0,1]) [0.5]")), ToolInput(tag="in_max_tip_len", input_type=Boolean(optional=True), prefix="--max-tip-len", doc=InputDocumentation(doc="<int>          max tip length [150]")), ToolInput(tag="in_no_mercy", input_type=Boolean(optional=True), prefix="--no-mercy", doc=InputDocumentation(doc="do not add mercy kmers")), ToolInput(tag="in_memory", input_type=Boolean(optional=True), prefix="--memory", doc=InputDocumentation(doc="<float>        max memory in byte to be used in SdBG construction [0.9]\n(if set between 0-1, fraction of the machine's total memory)")), ToolInput(tag="in_mem_flag", input_type=Boolean(optional=True), prefix="--mem-flag", doc=InputDocumentation(doc="<int>          SdBG builder memory mode [1]\n0: minimum; 1: moderate; others: use all memory specified by '-m/--memory'.")), ToolInput(tag="in_use_gpu", input_type=Boolean(optional=True), prefix="--use-gpu", doc=InputDocumentation(doc="use GPU")), ToolInput(tag="in_gpu_mem", input_type=Boolean(optional=True), prefix="--gpu-mem", doc=InputDocumentation(doc="<float>        GPU memory in byte to be used. Default: auto detect to use up all free GPU memory [0]")), ToolInput(tag="in_num_cpu_threads", input_type=Boolean(optional=True), prefix="--num-cpu-threads", doc=InputDocumentation(doc="<int>          number of CPU threads, at least 2. Default: auto detect to use all CPU threads [auto]")), ToolInput(tag="in_out_dir", input_type=Directory(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="<string>       output directory [./megagta_out]")), ToolInput(tag="in_min_contig_len", input_type=Boolean(optional=True), prefix="--min-contig-len", doc=InputDocumentation(doc="<int>          minimum length of contigs to output [450]")), ToolInput(tag="in_keep_tmp_files", input_type=Boolean(optional=True), prefix="--keep-tmp-files", doc=InputDocumentation(doc="keep all temporary files")), ToolInput(tag="in_continue", input_type=Directory(optional=True), prefix="--continue", doc=InputDocumentation(doc="continue a MEGAHIT run from its last available check point.\nplease set the output directory correctly when using this option.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose mode")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_pe_one", input_type=Int(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_pe_one_two", input_type=Int(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_pe_two", input_type=Int(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_comma_separated", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_that", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_can", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_list", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_be", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_of", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_fast_a", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_interleaved", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_specified", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_for", input_type=String(), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_multiple", input_type=String(), position=6, doc=InputDocumentation(doc="")), ToolInput(tag="in_times", input_type=String(), position=7, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_out_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out_dir", type_hint=File()), doc=OutputDocumentation(doc="<string>       output directory [./megagta_out]")), ToolOutput(tag="out_continue", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_continue", type_hint=File()), doc=OutputDocumentation(doc="continue a MEGAHIT run from its last available check point.\nplease set the output directory correctly when using this option."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Megagta_Py_V0_1_0().translate("wdl", allow_empty_container=True)

