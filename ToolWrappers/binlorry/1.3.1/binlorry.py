from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, Array, String

Binlorry_V0_1_0 = CommandToolBuilder(tool="binlorry", base_command=["binlorry"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="FASTA/FASTQ of input reads or a directory which will\nbe recursively searched for FASTQ files (required).")), ToolInput(tag="in_data", input_type=File(optional=True), prefix="--data", doc=InputDocumentation(doc="A CSV file with metadata fields for reads or a\ndirectory of csv files that will be recursively\nsearched for names corresponding to a matching input\nFASTA/FASTQ files.")), ToolInput(tag="in_unordered_data", input_type=Boolean(optional=True), prefix="--unordered_data", doc=InputDocumentation(doc="The metadata tables are not in the same order as the\nreads - they will all beloaded and then looked up as\nneeded (slower). (default: False)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output filename (or filename prefix)")), ToolInput(tag="in_out_report", input_type=Boolean(optional=True), prefix="--out-report", doc=InputDocumentation(doc="Output a report along with FASTA/FASTQ. (default:\nFalse)")), ToolInput(tag="in_force_output", input_type=Boolean(optional=True), prefix="--force-output", doc=InputDocumentation(doc="Output binned/filtered files even if empty.\n(default: False)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of output information: 0 = none, 1 = some, 2 =\nlots (default: 1)")), ToolInput(tag="in_bin_by", input_type=Array(t=String(), optional=True), prefix="--bin-by", doc=InputDocumentation(doc="Specify header field(s) to bin the reads by. For\nmultiple fields these will be nested in order\nspecified. e.g. `--bin-by barcode reference`")), ToolInput(tag="in_filter_by", input_type=Array(t=String(), optional=True), prefix="--filter-by", doc=InputDocumentation(doc="Specify header field and accepted values to filter\nthe reads by. Multiple instances of this option can\nbe specified. e.g. `--filter-by barcode BC01 BC02--\nfilter-by genotype Type1`")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="Filter the reads by their length, specifying the\nminimum length.")), ToolInput(tag="in_max_length", input_type=Int(optional=True), prefix="--max-length", doc=InputDocumentation(doc="Filter the reads by their length, specifying the\nmaximum length.")), ToolInput(tag="in_header_delimiters", input_type=String(optional=True), prefix="--header-delimiters", doc=InputDocumentation(doc="Delimiters to use when searching for key:value pairs\nin FASTA/FASTQ header. (default: =)"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output filename (or filename prefix)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Binlorry_V0_1_0().translate("wdl", allow_empty_container=True)

