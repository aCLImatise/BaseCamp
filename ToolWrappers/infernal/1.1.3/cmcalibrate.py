from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, String, File

Cmcalibrate_V0_1_0 = CommandToolBuilder(tool="cmcalibrate", base_command=["cmcalibrate"], inputs=[ToolInput(tag="in_set_random_length", input_type=Int(optional=True), prefix="-L", doc=InputDocumentation(doc=": set random seq length to search in Mb to <x>  [1.6]  (0.01<=x<=160.)")), ToolInput(tag="in_forecast", input_type=Boolean(optional=True), prefix="--forecast", doc=InputDocumentation(doc=": don't do calibration, predict running time and exit")), ToolInput(tag="in_n_forecast", input_type=String(optional=True), prefix="--nforecast", doc=InputDocumentation(doc=": w/--forecast, predict time with <n> processors (maybe for MPI)")), ToolInput(tag="in_mem_req", input_type=Boolean(optional=True), prefix="--memreq", doc=InputDocumentation(doc=": don't do calibration, print required memory and exit")), ToolInput(tag="in_no_forecast", input_type=Boolean(optional=True), prefix="--noforecast", doc=InputDocumentation(doc=": do calibration, but skip running time prediction")), ToolInput(tag="in_g_tail_n", input_type=Int(optional=True), prefix="--gtailn", doc=InputDocumentation(doc=": fit the top <n> hits/Mb in histogram for glocal modes [df: 250]")), ToolInput(tag="in_l_tail_n", input_type=Int(optional=True), prefix="--ltailn", doc=InputDocumentation(doc=": fit the top <n> hits/Mb in histogram for  local modes [df: 750]")), ToolInput(tag="in_tail_p", input_type=String(optional=True), prefix="--tailp", doc=InputDocumentation(doc=": set fraction of histogram tail to fit to exp tail to <x>")), ToolInput(tag="in_h_file", input_type=File(optional=True), prefix="--hfile", doc=InputDocumentation(doc=": save fitted score histogram(s) to file <f>")), ToolInput(tag="in_s_file", input_type=File(optional=True), prefix="--sfile", doc=InputDocumentation(doc=": save survival plot to file <f>")), ToolInput(tag="in_qq_file", input_type=File(optional=True), prefix="--qqfile", doc=InputDocumentation(doc=": save Q-Q plot for score histograms to file <f>")), ToolInput(tag="in_f_file", input_type=File(optional=True), prefix="--ffile", doc=InputDocumentation(doc=": save lambdas for different tail fit probs to file <f>")), ToolInput(tag="in_x_file", input_type=File(optional=True), prefix="--xfile", doc=InputDocumentation(doc=": save scores in fit tail to file <f>")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc=": set RNG seed to <n> (if 0: one-time arbitrary seed)")), ToolInput(tag="in_beta", input_type=String(optional=True), prefix="--beta", doc=InputDocumentation(doc=": set tail loss prob for query dependent banding (QDB) to <x>")), ToolInput(tag="in_non_banded", input_type=Boolean(optional=True), prefix="--nonbanded", doc=InputDocumentation(doc=": do not use QDB")), ToolInput(tag="in_no_null_three", input_type=Boolean(optional=True), prefix="--nonull3", doc=InputDocumentation(doc=": turn OFF the NULL3 post hoc additional null model")), ToolInput(tag="in_random", input_type=Boolean(optional=True), prefix="--random", doc=InputDocumentation(doc=": use GC content of random null background model of CM")), ToolInput(tag="in_gc", input_type=File(optional=True), prefix="--gc", doc=InputDocumentation(doc=": use GC content distribution from file <f>")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc=": number of parallel CPU workers to use for multithreads")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc="")), ToolInput(tag="in_cm_file", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/infernal:1.1.3--h516909a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cmcalibrate_V0_1_0().translate("wdl")

