from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Cmemit_V0_1_0 = CommandToolBuilder(tool="cmemit", base_command=["cmemit"], inputs=[ToolInput(tag="in_send_sequence_output", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc=": send sequence output to file <f>, not stdout")), ToolInput(tag="in__generate_sequences", input_type=Int(optional=True), prefix="-N", doc=InputDocumentation(doc=": generate <n> sequences  [10]")), ToolInput(tag="in_write_generated_sequences_unaligned", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc=": write generated sequences as unaligned FASTA [default]  [default]")), ToolInput(tag="in_write_generated_sequences_alignment", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc=": write generated sequences as an alignment")), ToolInput(tag="in_generate_single_sequence", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc=": generate a single 'consensus' sequence only")), ToolInput(tag="in_embed_emitted_sequences", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc=": embed emitted sequences within larger random sequences of length <n>")), ToolInput(tag="in_local_emit_locally", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc=": local; emit from a locally configured model [default: global]")), ToolInput(tag="in_u_five_p", input_type=Boolean(optional=True), prefix="--u5p", doc=InputDocumentation(doc=": truncate unaligned sequences 5', choosing a random start posn")), ToolInput(tag="in_u_three_p", input_type=Boolean(optional=True), prefix="--u3p", doc=InputDocumentation(doc=": truncate unaligned sequences 3', choosing a random end   posn")), ToolInput(tag="in_a_five_p", input_type=Int(optional=True), prefix="--a5p", doc=InputDocumentation(doc=": truncate aln 5', start at match column <n> (use 0 for random posn)")), ToolInput(tag="in_a_three_p", input_type=Int(optional=True), prefix="--a3p", doc=InputDocumentation(doc=": truncate aln 3', end   at match column <n> (use 0 for random posn)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc=": set RNG seed to <n> [default: one-time arbitrary seed]  [0]")), ToolInput(tag="in_iid", input_type=Boolean(optional=True), prefix="--iid", doc=InputDocumentation(doc=": with -e, generate larger sequences as 25% ACGU (iid)")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="--rna", doc=InputDocumentation(doc=": output as RNA sequence data  [default]")), ToolInput(tag="in_dna", input_type=Boolean(optional=True), prefix="--dna", doc=InputDocumentation(doc=": output as DNA sequence data")), ToolInput(tag="in_idx", input_type=Int(optional=True), prefix="--idx", doc=InputDocumentation(doc=": start sequence numbering at <n>  [1]")), ToolInput(tag="in_out_format", input_type=String(optional=True), prefix="--outformat", doc=InputDocumentation(doc=": w/-a output alignment in format <s>  [Stockholm]")), ToolInput(tag="in_t_file", input_type=File(optional=True), prefix="--tfile", doc=InputDocumentation(doc=": dump parsetrees to file <f>")), ToolInput(tag="in_exp", input_type=String(optional=True), prefix="--exp", doc=InputDocumentation(doc=": exponentiate CM probabilities by <x> before emitting")), ToolInput(tag="in_hmm_only", input_type=Boolean(optional=True), prefix="--hmmonly", doc=InputDocumentation(doc=": emit from filter HMM, not from CM")), ToolInput(tag="in_no_hmm_only", input_type=Boolean(optional=True), prefix="--nohmmonly", doc=InputDocumentation(doc=": always emit from CM, even for models with 0 basepairs")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc="")), ToolInput(tag="in_cm_file", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_send_sequence_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_send_sequence_output", type_hint=File()), doc=OutputDocumentation(doc=": send sequence output to file <f>, not stdout"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cmemit_V0_1_0().translate("wdl", allow_empty_container=True)

