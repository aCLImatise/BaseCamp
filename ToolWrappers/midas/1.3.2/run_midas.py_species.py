from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, Float, String

Run_Midas_Py_Species_V0_1_0 = CommandToolBuilder(tool="run_midas.py_species", base_command=["run_midas.py", "species"], inputs=[ToolInput(tag="in_fastafastq_file_containing_st_mate", input_type=Int(optional=True), prefix="-1", doc=InputDocumentation(doc="FASTA/FASTQ file containing 1st mate if using paired-end reads.\nOtherwise FASTA/FASTQ containing unpaired reads.\nCan be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2)")), ToolInput(tag="in_fastafastq_file_containing_nd_mate", input_type=Int(optional=True), prefix="-2", doc=InputDocumentation(doc="FASTA/FASTQ file containing 2nd mate if using paired-end reads.\nCan be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2)")), ToolInput(tag="in_number_reads_use", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="Number of reads to use from input file(s) (use all)")), ToolInput(tag="in_number_threads_use", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="Number of threads to use for database search (1)")), ToolInput(tag="in_path_reference_databaseby", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="Path to reference database\nBy default, the MIDAS_DB environmental variable is used")), ToolInput(tag="in_remove_temp", input_type=Boolean(optional=True), prefix="--remove_temp", doc=InputDocumentation(doc="Remove intermediate files generated by MIDAS (False).\nUseful to reduce disk space of MIDAS output")), ToolInput(tag="in_word_size", input_type=Int(optional=True), prefix="--word_size", doc=InputDocumentation(doc="Word size for BLAST search (28)\nUse word sizes > 16 for greatest efficiency.")), ToolInput(tag="in_map_id", input_type=Float(optional=True), prefix="--mapid", doc=InputDocumentation(doc="Discard reads with alignment identity < MAPID\nBy default gene-specific species-level cutoffs are used\nValues between 0-100 accepted")), ToolInput(tag="in_aln_cov", input_type=Float(optional=True), prefix="--aln_cov", doc=InputDocumentation(doc="Discard reads with alignment coverage < ALN_COV (0.75)\nValues between 0-1 accepted")), ToolInput(tag="in_read_length", input_type=Int(optional=True), prefix="--read_length", doc=InputDocumentation(doc="Trim reads to READ_LENGTH and discard reads with length < READ_LENGTH\nBy default, reads are not trimmed or filtered")), ToolInput(tag="in_outdir", input_type=String(), position=0, doc=InputDocumentation(doc="Path to directory to store results.\nDirectory name should correspond to sample identifier"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Run_Midas_Py_Species_V0_1_0().translate("wdl", allow_empty_container=True)

