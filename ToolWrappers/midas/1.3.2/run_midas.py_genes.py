from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Float, Int, String

Run_Midas_Py_Genes_V0_1_0 = CommandToolBuilder(tool="run_midas.py_genes", base_command=["run_midas.py", "genes"], inputs=[ToolInput(tag="in_remove_temp", input_type=Boolean(optional=True), prefix="--remove_temp", doc=InputDocumentation(doc="Remove intermediate files generated by MIDAS (False).\nUseful to reduce disk space of MIDAS output")), ToolInput(tag="in_build_db", input_type=Boolean(optional=True), prefix="--build_db", doc=InputDocumentation(doc="Build bowtie2 database of pangenomes")), ToolInput(tag="in_align", input_type=Boolean(optional=True), prefix="--align", doc=InputDocumentation(doc="Align reads to pangenome database")), ToolInput(tag="in_call_genes", input_type=Boolean(optional=True), prefix="--call_genes", doc=InputDocumentation(doc="Compute coverage of genes in pangenome database")), ToolInput(tag="in_path_reference_databaseby", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="Path to reference database\nBy default, the MIDAS_DB environmental variable is used")), ToolInput(tag="in_species_cov", input_type=Float(optional=True), prefix="--species_cov", doc=InputDocumentation(doc="Include species with >X coverage (3.0)")), ToolInput(tag="in_species_top_n", input_type=Int(optional=True), prefix="--species_topn", doc=InputDocumentation(doc="Include top N most abundant species")), ToolInput(tag="in_species_id", input_type=String(optional=True), prefix="--species_id", doc=InputDocumentation(doc="Include specified species. Separate ids with a comma")), ToolInput(tag="in_fastafastq_file_containing_st_mate", input_type=Int(optional=True), prefix="-1", doc=InputDocumentation(doc="FASTA/FASTQ file containing 1st mate if using paired-end reads.\nOtherwise FASTA/FASTQ containing unpaired reads.\nCan be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2)")), ToolInput(tag="in_fastafastq_file_containing_nd_mate", input_type=Int(optional=True), prefix="-2", doc=InputDocumentation(doc="FASTA/FASTQ file containing 2nd mate if using paired-end reads.\nCan be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2)")), ToolInput(tag="in_interleaved", input_type=Boolean(optional=True), prefix="--interleaved", doc=InputDocumentation(doc="FASTA/FASTQ file in -1 are paired and contain forward AND reverse reads")), ToolInput(tag="in_alignment_speedsensitivity_verysensitive", input_type=String(optional=True), prefix="-s", doc=InputDocumentation(doc="Alignment speed/sensitivity (very-sensitive)")), ToolInput(tag="in_globallocal_read_alignment", input_type=String(optional=True), prefix="-m", doc=InputDocumentation(doc="Global/local read alignment (local)")), ToolInput(tag="in_reads_use_use", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="# reads to use from input file(s) (use all)")), ToolInput(tag="in_number_threads_use", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="Number of threads to use (1)")), ToolInput(tag="in_read_q", input_type=Int(optional=True), prefix="--readq", doc=InputDocumentation(doc="Discard reads with mean quality < READQ (20)")), ToolInput(tag="in_map_id", input_type=Float(optional=True), prefix="--mapid", doc=InputDocumentation(doc="Discard reads with alignment identity < MAPID (94.0)")), ToolInput(tag="in_aln_cov", input_type=Float(optional=True), prefix="--aln_cov", doc=InputDocumentation(doc="Discard reads with alignment coverage < ALN_COV (0.75)")), ToolInput(tag="in_trim", input_type=Int(optional=True), prefix="--trim", doc=InputDocumentation(doc="Trim N base-pairs from 3'/right end of read (0)")), ToolInput(tag="in_outdir", input_type=String(), position=0, doc=InputDocumentation(doc="Path to directory to store results. \nDirectory name should correspond to sample identifier"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Run_Midas_Py_Genes_V0_1_0().translate("wdl", allow_empty_container=True)

