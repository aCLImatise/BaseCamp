!Command
command:
- go-filter-subset.pl
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -id
  description: "ID to use as leaf node in subgraph. All ancestors of this ID are\n\
    included in the exported graph (unless -partial is set)\nMultiple IDs can be passed\n\
    -id ID1 -id ID2 -id ID3 ....etc"
  args: !SimpleFlagArg
    name: ID
- !Flag
  optional: true
  synonyms:
  - -subset
  description: "Extracts a named subset from the ontology file. (only works with obo\n\
    format files). For example, a specific GO slim\nONLY terms belonging to the subset\
    \ are exported - the -partial\noption is automatically set"
  args: !SimpleFlagArg
    name: SUBSET_ID
- !Flag
  optional: true
  synonyms:
  - -namespace
  description: only terms in this namespace
  args: !SimpleFlagArg
    name: NAMESPACE
- !Flag
  optional: true
  synonyms:
  - -filter_code
  description: "advanced option\nA subroutine with which the GO::Model::Term object\
    \ is tested for\ninclusion in the subgraph (all ancestors are automatically included)\n\
    You should have an understanding of the go-perl object model before\nusing this\
    \ option\nExample:\ngo-filter-subset -filter_code 'sub {shift->namespace eq 'molecular_function'}'\
    \ go.obo\n(the same things can be achieved with the -namespace option)"
  args: !SimpleFlagArg
    name: SUBROUTINE
- !Flag
  optional: true
  synonyms:
  - -partial
  description: "If this is set, then only terms that match the user query are\nincluded.\
    \ Parentage is set to the next recursive parent node in the\nfilter\nFor example,\
    \ with the -subset option: if X and Y belong to the\nsubset, and Z does not, and\
    \ X is_a Z is_a Y, then the exported graph\nwithh have X is_a Y"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -use_cache
  description: "If this switch is specified, then caching mode is turned on.\nWith\
    \ caching mode, the first time you parse a file, then an\nadditional file will\
    \ be exported in a special format that is fast to\nparse. This file will have\
    \ the same filename as the original file,\nexcept it will have the \".cache\"\
    \ suffix.\nThe next time you parse the file, this program will automatically\n\
    check for the existence of the \".cache\" file. If it exists, and is\nmore recent\
    \ than the file you specified, this is parsed instead. If\nit does not exist,\
    \ it is rebuilt."
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    go-filter-subset.pl - extracts a subgraph from an ontology file\n\
  \nSYNOPSIS\n      go-filter-subset.pl -id GO:0003767 go.obo\n\n      go-filter-subset.pl\
  \ -id GO:0003767 -to png go.obo | xv -\n\n      go-filter-subset.pl -filter_code\
  \ 'sub{shift->name =~ /transcr/}' go.obo\n\nDESCRIPTION\n    Exports a subset of\
  \ an ontology from a file. The subset can be based on\n    a specified set of IDs,\
  \ a preset \"subset\" filter in the ontology file\n    (eg a GO \"slim\" or subset),\
  \ or a user-defined filter.\n\n    The subset can be exported in any format, including\
  \ a graphical image\n\nARGUMENTS\n    -id ID\n        ID to use as leaf node in\
  \ subgraph. All ancestors of this ID are\n        included in the exported graph\
  \ (unless -partial is set)\n\n        Multiple IDs can be passed\n\n          -id\
  \ ID1 -id ID2 -id ID3 ....etc\n\n    -subset SUBSET_ID\n        Extracts a named\
  \ subset from the ontology file. (only works with obo\n        format files). For\
  \ example, a specific GO slim\n\n        ONLY terms belonging to the subset are\
  \ exported - the -partial\n        option is automatically set\n\n    -namespace\
  \ NAMESPACE\n        only terms in this namespace\n\n    -filter_code SUBROUTINE\n\
  \        advanced option\n\n        A subroutine with which the GO::Model::Term\
  \ object is tested for\n        inclusion in the subgraph (all ancestors are automatically\
  \ included)\n\n        You should have an understanding of the go-perl object model\
  \ before\n        using this option\n\n        Example:\n\n          go-filter-subset\
  \ -filter_code 'sub {shift->namespace eq 'molecular_function'}' go.obo\n\n     \
  \   (the same things can be achieved with the -namespace option)\n\n    -partial\n\
  \        If this is set, then only terms that match the user query are\n       \
  \ included. Parentage is set to the next recursive parent node in the\n        filter\n\
  \n        For example, with the -subset option: if X and Y belong to the\n     \
  \   subset, and Z does not, and X is_a Z is_a Y, then the exported graph\n     \
  \   withh have X is_a Y\n\n    -use_cache\n        If this switch is specified,\
  \ then caching mode is turned on.\n\n        With caching mode, the first time you\
  \ parse a file, then an\n        additional file will be exported in a special format\
  \ that is fast to\n        parse. This file will have the same filename as the original\
  \ file,\n        except it will have the \".cache\" suffix.\n\n        The next\
  \ time you parse the file, this program will automatically\n        check for the\
  \ existence of the \".cache\" file. If it exists, and is\n        more recent than\
  \ the file you specified, this is parsed instead. If\n        it does not exist,\
  \ it is rebuilt.\n\n  DOCUMENTATION\n    <http://www.godatabase.org/dev>\n\n"
generated_using:
- --help
docker_image:
