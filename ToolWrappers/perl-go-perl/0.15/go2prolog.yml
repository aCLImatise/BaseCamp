!Command
command:
- go2prolog
positional:
- !Positional
  description: ARGUMENTS
  position: 0
  name: format
  optional: false
- !Positional
  description: writable formats are
  position: 0
  name: FORMATS
  optional: false
- !Positional
  description: "Files with suffix \".ontology\"\nThese store the ontology DAGs"
  position: 1
  name: go_ont
  optional: false
- !Positional
  description: Files with suffix ".defs"
  position: 2
  name: go_def
  optional: false
- !Positional
  description: "External database references for GO terms\nFiles with suffix \"2go\"\
    \ (eg ec2go, metacyc2go)"
  position: 3
  name: go_xref
  optional: false
- !Positional
  description: "Annotations of genes or gene products using GO\nFiles with prefix\
    \ \"gene-association.\""
  position: 4
  name: go_assoc
  optional: false
- !Positional
  description: "Files with suffix \".obo\"\nThis is a new file format replacement\
    \ for the existing GO flat file\nformats. It handles ontologies, definitions and\
    \ xrefs (but not\nassociations)"
  position: 5
  name: obo_text
  optional: false
- !Positional
  description: "Files with suffix \".obo.xml\" or \".obo-xml\"\nThis is the XML version\
    \ of the OBO flat file format above"
  position: 6
  name: obo_xml
  optional: false
- !Positional
  description: "prolog facts - you will need a prolog compiler/interpreter to use\n\
    these. You can reason over these facts using Obol or the forthcoming\nBio-LP project"
  position: 7
  name: prolog
  optional: false
- !Positional
  description: can be used on both ontology files and association files
  position: 0
  name: summary
  optional: false
- !Positional
  description: shows all paths to the root
  position: 1
  name: pathlist
  optional: false
- !Positional
  description: a YAML representation of a GO::Model::Graph object
  position: 0
  name: obj_yaml
  optional: false
- !Positional
  description: "A dump of the perl GO::Model::Graph object. You need Storable from\n\
    CPAN for this to work. This is intended to cache objects on the\nfilesystem, for\
    \ fast access. The obj_storable representation may not\nbe portable"
  position: 1
  name: obj_storable
  optional: false
- !Positional
  description: A html-ified OBO output format
  position: 2
  name: text_html
  optional: false
- !Positional
  description: "XML that maps directly to the GODB relational schema (can then be\n\
    loaded using stag-storenode.pl)"
  position: 3
  name: godb_prestore
  optional: false
- !Positional
  description: "XML that maps directly to the Chado relational schema (can then be\n\
    loaded using stag-storenode.pl)"
  position: 4
  name: chadodb_prestore
  optional: false
- !Positional
  description: <http://www.godatabase.org/dev>
  position: 5
  name: DOCUMENTATION
  optional: false
named:
- !Flag
  description: "writes parse errors in XML - defaults to STDERR (there should be no\n\
    parse errors in well formed files)"
  synonyms:
  - -e
  args: !SimpleFlagArg
    name: ERRFILE
  optional: true
- !Flag
  description: "determines which parser to use; if left unspecified, will make a guess\n\
    based on file suffix. See below for formats"
  synonyms:
  - -p
  args: !SimpleFlagArg
    name: FORMAT
  optional: true
- !Flag
  description: "|writer FORMAT\nformat for output - see below for list"
  synonyms:
  - -w
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "If this switch is specified, then caching mode is turned on.\nWith\
    \ caching mode, the first time you parse a file, then an additional\nfile will\
    \ be exported in a special format that is fast to parse. This\nfile will have\
    \ the same filename as the original file, except it will\nhave the \".cache\"\
    \ suffix.\nThe next time you parse the file, this program will automatically check\n\
    for the existence of the \".cache\" file. If it exists, and is more recent\nthan\
    \ the file you specified, this is parsed instead. If it does not\nexist, it is\
    \ rebuilt.\nThis will bring a speed improvement for b<some> of the output formats\n\
    below (such as pathlist). Most output formats work with event-based\nparsing,\
    \ so caching the object brings no benefit and will in fact be\nslower than bypassing\
    \ the cache"
  synonyms:
  - -use_cache
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    go2fmt.pl go2obo_xml go2owl go2rdf_xml go2obo_text\n\nSYNOPSIS\n\
  \      go2fmt.pl -w obo_xml -e errlog.xml ontology/*.ontology\n      go2fmt.pl -w\
  \ obo_xml -e errlog.xml ontology/gene_ontology.obo\n\nDESCRIPTION\n    parses any\
  \ GO/OBO style ontology file and writes out as a different\n    format\n\n  ARGUMENTS\n\
  \   -e ERRFILE\n    writes parse errors in XML - defaults to STDERR (there should\
  \ be no\n    parse errors in well formed files)\n\n   -p FORMAT\n    determines\
  \ which parser to use; if left unspecified, will make a guess\n    based on file\
  \ suffix. See below for formats\n\n   -w|writer FORMAT\n    format for output -\
  \ see below for list\n\n   -|xslt XSLT\n    The name or filename of an XSLT transform\n\
  \n    This can either be an absolute path to a file anywhere on the\n    filesystem,\
  \ or it can just be the name of the xslt; eg\n\n      go2fmt.pl -xslt oboxml_to_owl\
  \ go.obo\n\n    If the name is specified, then first of all $GO_ROOT/xml/xsl/*.xsl\
  \ will\n    be searched; if GO_ROOT is not set, then the perl modules dir where\
  \ GO\n    is installed will be searched (the xslts will be installed here\n    automatically\
  \ if you follow the normal install process)\n\n  -use_cache\n    If this switch\
  \ is specified, then caching mode is turned on.\n\n    With caching mode, the first\
  \ time you parse a file, then an additional\n    file will be exported in a special\
  \ format that is fast to parse. This\n    file will have the same filename as the\
  \ original file, except it will\n    have the \".cache\" suffix.\n\n    The next\
  \ time you parse the file, this program will automatically check\n    for the existence\
  \ of the \".cache\" file. If it exists, and is more recent\n    than the file you\
  \ specified, this is parsed instead. If it does not\n    exist, it is rebuilt.\n\
  \n    This will bring a speed improvement for b<some> of the output formats\n  \
  \  below (such as pathlist). Most output formats work with event-based\n    parsing,\
  \ so caching the object brings no benefit and will in fact be\n    slower than bypassing\
  \ the cache\n\n  FORMATS\n    writable formats are\n\n    go_ont\n        Files\
  \ with suffix \".ontology\"\n\n        These store the ontology DAGs\n\n    go_def\n\
  \        Files with suffix \".defs\"\n\n    go_xref\n        External database references\
  \ for GO terms\n\n        Files with suffix \"2go\" (eg ec2go, metacyc2go)\n\n \
  \   go_assoc\n        Annotations of genes or gene products using GO\n\n       \
  \ Files with prefix \"gene-association.\"\n\n    obo_text\n        Files with suffix\
  \ \".obo\"\n\n        This is a new file format replacement for the existing GO\
  \ flat file\n        formats. It handles ontologies, definitions and xrefs (but\
  \ not\n        associations)\n\n    obo_xml\n        Files with suffix \".obo.xml\"\
  \ or \".obo-xml\"\n\n        This is the XML version of the OBO flat file format\
  \ above\n\n    prolog\n        prolog facts - you will need a prolog compiler/interpreter\
  \ to use\n        these. You can reason over these facts using Obol or the forthcoming\n\
  \        Bio-LP project\n\n    tbl simple (lossy) tabular representation\n\n   \
  \ summary\n        can be used on both ontology files and association files\n\n\
  \    pathlist\n        shows all paths to the root\n\n    owl OWL format (default:\
  \ OWL-DL)\n\n        OWL is a W3C standard format for ontologies\n\n        You\
  \ will need the XSL files from the full go-dev distribution to run\n        this;\
  \ see the XML section in <http://www.godatabase.org/dev>\n\n    obj_yaml\n     \
  \   a YAML representation of a GO::Model::Graph object\n\n    obj_storable\n   \
  \     A dump of the perl GO::Model::Graph object. You need Storable from\n     \
  \   CPAN for this to work. This is intended to cache objects on the\n        filesystem,\
  \ for fast access. The obj_storable representation may not\n        be portable\n\
  \n    text_html\n        A html-ified OBO output format\n\n    godb_prestore\n \
  \       XML that maps directly to the GODB relational schema (can then be\n    \
  \    loaded using stag-storenode.pl)\n\n    chadodb_prestore\n        XML that maps\
  \ directly to the Chado relational schema (can then be\n        loaded using stag-storenode.pl)\n\
  \n  DOCUMENTATION\n    <http://www.godatabase.org/dev>\n\n"
generated_using:
- --help
