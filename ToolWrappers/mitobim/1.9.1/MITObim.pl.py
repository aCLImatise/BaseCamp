from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, File, Boolean

Mitobim_Pl_V0_1_0 = CommandToolBuilder(tool="MITObim.pl", base_command=["MITObim.pl"], inputs=[ToolInput(tag="in_start", input_type=Int(optional=True), prefix="-start", doc=InputDocumentation(doc="iteration to start with (default=0, when using '-quick' reference)")), ToolInput(tag="in_end", input_type=Int(optional=True), prefix="-end", doc=InputDocumentation(doc="iteration to end with (default=startiteration, i.e. if not specified otherwise stop after 1 iteration)")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="-sample", doc=InputDocumentation(doc="sampleID (please don't use '.' in the sampleID). If resuming, the sampleID needs to be identical to that of the previous iteration / MIRA assembly.")), ToolInput(tag="in_ref", input_type=String(optional=True), prefix="-ref", doc=InputDocumentation(doc="referenceID. If resuming, use the same as in previous iteration/initial MIRA assembly.")), ToolInput(tag="in_read_pool", input_type=File(optional=True), prefix="-readpool", doc=InputDocumentation(doc="readpool in fastq format (*.gz is also allowed). read pairs need to be interleaved for full functionality of the '-pair' option below.")), ToolInput(tag="in_quick", input_type=File(optional=True), prefix="-quick", doc=InputDocumentation(doc="reference sequence to be used as bait in fasta format")), ToolInput(tag="in_maf", input_type=File(optional=True), prefix="-maf", doc=InputDocumentation(doc="extracts reference from maf file created by previous MITObim iteration/MIRA assembly (resume)")), ToolInput(tag="in_kb_a_it", input_type=Int(optional=True), prefix="--kbait", doc=InputDocumentation(doc="set kmer for baiting stringency (default: 31)")), ToolInput(tag="in_platform", input_type=Boolean(optional=True), prefix="--platform", doc=InputDocumentation(doc="specify sequencing platform (default: 'solexa'; other options: 'iontor', '454', 'pacbio')")), ToolInput(tag="in_de_novo", input_type=Boolean(optional=True), prefix="--denovo", doc=InputDocumentation(doc="runs MIRA in denovo mode")), ToolInput(tag="in_pair", input_type=Boolean(optional=True), prefix="--pair", doc=InputDocumentation(doc="extend readpool to contain full read pairs, even if only one member was baited (relies on /1 and /2 header convention for read pairs) (default: no).")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="show detailed output of MIRA modules (default: no)")), ToolInput(tag="in_split", input_type=Boolean(optional=True), prefix="--split", doc=InputDocumentation(doc="split reference at positions with more than 5N (default: no)")), ToolInput(tag="in_clean", input_type=Boolean(optional=True), prefix="--clean", doc=InputDocumentation(doc="retain only the last 2 iteration directories (default: no)")), ToolInput(tag="in_trim_reads", input_type=Boolean(optional=True), prefix="--trimreads", doc=InputDocumentation(doc="trim data (default: no; we recommend to trim beforehand and feed MITObim with pre trimmed data)")), ToolInput(tag="in_trim_overhang", input_type=Boolean(optional=True), prefix="--trimoverhang", doc=InputDocumentation(doc="trim overhang up- and downstream of reference, i.e. don't extend the bait, just re-assemble (default: no)")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="--mismatch", doc=InputDocumentation(doc="number of allowed mismatches in mapping - only for illumina data (default: 15% of avg. read length)")), ToolInput(tag="in_min_cov", input_type=Int(optional=True), prefix="--min_cov", doc=InputDocumentation(doc="minimum average coverage of contigs to be retained (default: 0 - off)")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--min_len", doc=InputDocumentation(doc="minimum length of contig to be retained as backbone (default: 0 - off)")), ToolInput(tag="in_mira_path", input_type=File(optional=True), prefix="--mirapath", doc=InputDocumentation(doc="full path to MIRA binaries (only needed if MIRA is not in PATH)")), ToolInput(tag="in_redirect_tmp", input_type=Boolean(optional=True), prefix="--redirect_tmp", doc=InputDocumentation(doc="redirect temporary output to this location (useful in case you are running MITObim on an NFS mount)")), ToolInput(tag="in_nfs_warn_only", input_type=Boolean(optional=True), prefix="--NFS_warn_only", doc=InputDocumentation(doc="allow MIRA to run on NFS mount without aborting -  warn only (expert option - see MIRA documentation 'check_nfs')"))], outputs=[], container="quay.io/biocontainers/mitobim:1.9.1--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mitobim_Pl_V0_1_0().translate("wdl")

