from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean

Split_V0_1_0 = CommandToolBuilder(tool="split", base_command=["split"], inputs=[ToolInput(tag="in_suffix_length", input_type=Int(optional=True), prefix="--suffix-length", doc=InputDocumentation(doc="generate suffixes of length N (default 2)")), ToolInput(tag="in_additional_suffix", input_type=File(optional=True), prefix="--additional-suffix", doc=InputDocumentation(doc="append an additional SUFFIX to file names")), ToolInput(tag="in_bytes", input_type=Int(optional=True), prefix="--bytes", doc=InputDocumentation(doc="put SIZE bytes per output file")), ToolInput(tag="in_line_bytes", input_type=Int(optional=True), prefix="--line-bytes", doc=InputDocumentation(doc="put at most SIZE bytes of records per output file")), ToolInput(tag="in_use_numeric_suffixes", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="use numeric suffixes starting at 0, not alphabetic")), ToolInput(tag="in_numeric_suffixes", input_type=Boolean(optional=True), prefix="--numeric-suffixes", doc=InputDocumentation(doc="[=FROM]  same as -d, but allow setting the start value")), ToolInput(tag="in_use_hex_suffixes", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="use hex suffixes starting at 0, not alphabetic")), ToolInput(tag="in_hex_suffixes", input_type=Boolean(optional=True), prefix="--hex-suffixes", doc=InputDocumentation(doc="[=FROM]  same as -x, but allow setting the start value")), ToolInput(tag="in_elide_empty_files", input_type=Boolean(optional=True), prefix="--elide-empty-files", doc=InputDocumentation(doc="do not generate empty output files with '-n'")), ToolInput(tag="in_filter", input_type=File(optional=True), prefix="--filter", doc=InputDocumentation(doc="write to shell COMMAND; file name is $FILE")), ToolInput(tag="in_lines", input_type=Int(optional=True), prefix="--lines", doc=InputDocumentation(doc="put NUMBER lines/records per output file")), ToolInput(tag="in_number", input_type=Int(optional=True), prefix="--number", doc=InputDocumentation(doc="generate CHUNKS output files; see explanation below")), ToolInput(tag="in_separator", input_type=Int(optional=True), prefix="--separator", doc=InputDocumentation(doc="use SEP instead of newline as the record separator;\n'\0' (zero) specifies the NUL character")), ToolInput(tag="in_unbuffered", input_type=Boolean(optional=True), prefix="--unbuffered", doc=InputDocumentation(doc="immediately copy input to output with '-n r/...'")), ToolInput(tag="in_verbose", input_type=File(optional=True), prefix="--verbose", doc=InputDocumentation(doc="print a diagnostic just before each\noutput file is opened"))], outputs=[ToolOutput(tag="out_verbose", output_type=File(optional=True), selector=InputSelector(input_to_select="in_verbose", type_hint=File()), doc=OutputDocumentation(doc="print a diagnostic just before each\noutput file is opened"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Split_V0_1_0().translate("wdl", allow_empty_container=True)

