!Command
command:
- usher
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -v
  description: "[ --vcf ] arg                      Input VCF file (in uncompressed\
    \ or\ngzip-compressed .gz format) [REQUIRED]"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -t
  description: '[ --tree ] arg                     Input tree file'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -d
  description: "[ --outdir ] arg (=.)              Output directory to dump output\
    \ and log\nfiles [DEFAULT uses current directory]"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -i
  description: "[ --load-mutation-annotated-tree ] arg\nLoad mutation-annotated tree\
    \ object"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  description: "[ --save-mutation-annotated-tree ] arg\nSave output mutation-annotated\
    \ tree\nobject to the specified filename"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  description: "[ --sort-before-placement-1 ]      Sort new samples based on computed\n\
    parsimony score and then number of\noptimal placements before the actual\nplacement\
    \ [EXPERIMENTAL]."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -S
  description: "[ --sort-before-placement-2 ]      Sort new samples based on the number\
    \ of\noptimal placements and then the\nparsimony score before the actual\nplacement\
    \ [EXPERIMENTAL]."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -r
  description: "[ --reverse-sort ]                 Reverse the sorting order of sorting\n\
    options (sort-before-placement-1 or\nsort-before-placement-2) [EXPERIMENTAL]"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -c
  description: "[ --collapse-tree ]                Collapse internal nodes of the\
    \ input\ntree with no mutations and condense\nidentical sequences in polytomies\
    \ into\na single node and the save the tree to\nfile condensed-tree.nh in outdir"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -e
  description: "[ --max-uncertainty-per-sample ] arg (=1000000)\nMaximum number of\
    \ equally parsimonious\nplacements allowed per sample beyond\nwhich the sample\
    \ is ignored"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -u
  description: "[ --write-uncondensed-final-tree ]\nWrite the final tree in uncondensed\n\
    format and save to file\nuncondensed-final-tree.nh in outdir"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -k
  description: "[ --write-subtrees-size ] arg (=0) Write minimum set of subtrees covering\n\
    the newly added samples of size equal\nto or larger than this value"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  description: "[ --write-parsimony-scores-per-node ]\nWrite the parsimony scores\
    \ for adding\nnew samples at each existing node in\nthe tree without modifying\
    \ the tree in\na file names parsimony-scores.tsv in\noutdir"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -M
  description: "[ --multiple-placements ] arg (=1) Create a new tree up to this limit\
    \ for\neach possibility of parsimony-optimal\nplacement"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -l
  description: "[ --retain-input-branch-lengths ]  Retain the branch lengths from\
    \ the\ninput tree in out newick files instead\nof using number of mutations for\
    \ the\nbranch lengths."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -T
  description: "[ --threads ] arg (=2)             Number of threads to use when possible\n\
    [DEFAULT uses all available cores, 2\ndetected on this machine]"
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  description: '[ --help ]                         Print help messages'
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "Options:\n  -v [ --vcf ] arg                      Input VCF file (in uncompressed\
  \ or \n                                        gzip-compressed .gz format) [REQUIRED]\n\
  \  -t [ --tree ] arg                     Input tree file\n  -d [ --outdir ] arg\
  \ (=.)              Output directory to dump output and log\n                  \
  \                      files [DEFAULT uses current directory]\n  -i [ --load-mutation-annotated-tree\
  \ ] arg\n                                        Load mutation-annotated tree object\n\
  \  -o [ --save-mutation-annotated-tree ] arg\n                                 \
  \       Save output mutation-annotated tree \n                                 \
  \       object to the specified filename\n  -s [ --sort-before-placement-1 ]   \
  \   Sort new samples based on computed \n                                      \
  \  parsimony score and then number of \n                                       \
  \ optimal placements before the actual \n                                      \
  \  placement [EXPERIMENTAL].\n  -S [ --sort-before-placement-2 ]      Sort new samples\
  \ based on the number of\n                                        optimal placements\
  \ and then the \n                                        parsimony score before\
  \ the actual \n                                        placement [EXPERIMENTAL].\n\
  \  -r [ --reverse-sort ]                 Reverse the sorting order of sorting \n\
  \                                        options (sort-before-placement-1 or \n\
  \                                        sort-before-placement-2) [EXPERIMENTAL]\n\
  \  -c [ --collapse-tree ]                Collapse internal nodes of the input \n\
  \                                        tree with no mutations and condense \n\
  \                                        identical sequences in polytomies into\
  \ \n                                        a single node and the save the tree\
  \ to \n                                        file condensed-tree.nh in outdir\n\
  \  -e [ --max-uncertainty-per-sample ] arg (=1000000)\n                        \
  \                Maximum number of equally parsimonious \n                     \
  \                   placements allowed per sample beyond \n                    \
  \                    which the sample is ignored\n  -u [ --write-uncondensed-final-tree\
  \ ] \n                                        Write the final tree in uncondensed\
  \ \n                                        format and save to file \n         \
  \                               uncondensed-final-tree.nh in outdir\n  -k [ --write-subtrees-size\
  \ ] arg (=0) Write minimum set of subtrees covering \n                         \
  \               the newly added samples of size equal \n                       \
  \                 to or larger than this value\n  -p [ --write-parsimony-scores-per-node\
  \ ] \n                                        Write the parsimony scores for adding\
  \ \n                                        new samples at each existing node in\
  \ \n                                        the tree without modifying the tree\
  \ in \n                                        a file names parsimony-scores.tsv\
  \ in \n                                        outdir\n  -M [ --multiple-placements\
  \ ] arg (=1) Create a new tree up to this limit for \n                         \
  \               each possibility of parsimony-optimal \n                       \
  \                 placement\n  -l [ --retain-input-branch-lengths ]  Retain the\
  \ branch lengths from the \n                                        input tree in\
  \ out newick files instead \n                                        of using number\
  \ of mutations for the \n                                        branch lengths.\n\
  \  -T [ --threads ] arg (=2)             Number of threads to use when possible\
  \ \n                                        [DEFAULT uses all available cores, 2\
  \ \n                                        detected on this machine]\n  -h [ --help\
  \ ]                         Print help messages\n\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/usher:0.1.3--hfcd16c1_0
