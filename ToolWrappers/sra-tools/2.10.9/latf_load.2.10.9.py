from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String

Latf_Load_2_10_9_V0_1_0 = CommandToolBuilder(tool="latf_load.2.10.9", base_command=["latf-load.2.10.9"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Path and Name of the output database.")), ToolInput(tag="in_quality", input_type=Boolean(optional=True), prefix="--quality", doc=InputDocumentation(doc="Quality encoding (PHRED_33, PHRED_64,\nLOGODDS)")), ToolInput(tag="in_tmpfs", input_type=File(optional=True), prefix="--tmpfs", doc=InputDocumentation(doc="Path to be used for scratch files.")), ToolInput(tag="in_qual_quant", input_type=Int(optional=True), prefix="--qual-quant", doc=InputDocumentation(doc="Quality scores quantization level, can be\nnumber (0: none default, 1: 2bit, 2:\n1bit), or string like\n'1:10,10:20,20:30,30:-' (which is\nequivalent to 1).")), ToolInput(tag="in_cache_size", input_type=Int(optional=True), prefix="--cache-size", doc=InputDocumentation(doc="Set the cache size in MB for the temporary")), ToolInput(tag="in_max_err_count", input_type=Int(optional=True), prefix="--max-err-count", doc=InputDocumentation(doc="Set the maximum number of errors to ignore\nfrom the FASTQ file")), ToolInput(tag="in_platform", input_type=Boolean(optional=True), prefix="--platform", doc=InputDocumentation(doc="Platform (ILLUMINA, LS454, SOLID,\nCOMPLETE_GENOMICS, HELICOS, PACBIO,\nIONTORRENT, CAPILLARY)")), ToolInput(tag="in_max_err_pct", input_type=Boolean(optional=True), prefix="--max-err-pct", doc=InputDocumentation(doc="acceptable percentage of spots creation\nerrors, default is 5")), ToolInput(tag="in_ignore_illumina_tags", input_type=Boolean(optional=True), prefix="--ignore-illumina-tags", doc=InputDocumentation(doc="ignore barcodes contained in\nIllumina-formatted names")), ToolInput(tag="in_no_read_names", input_type=Boolean(optional=True), prefix="--no-readnames", doc=InputDocumentation(doc="drop original read names")), ToolInput(tag="in_xml_log", input_type=File(optional=True), prefix="--xml-log", doc=InputDocumentation(doc="produce XML-formatted log file")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase the verbosity of the program\nstatus messages. Use multiple times for more\nverbosity. Negates quiet.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Turn off all status messages for the\nprogram. Negated by verbose.")), ToolInput(tag="in_option_file", input_type=File(optional=True), prefix="--option-file", doc=InputDocumentation(doc="Read more options and parameters from the")), ToolInput(tag="in_indices", input_type=String(), position=0, doc=InputDocumentation(doc="--max-rec-count <count>          Set the maximum number of records to ")), ToolInput(tag="in_quit_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-L|--log-level <level>           Logging level as number or enum string. One ")), ToolInput(tag="in_file_dot", input_type=File(), position=0, doc=InputDocumentation(doc="latf-load.2.10.9 : 2.10.9"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Path and Name of the output database."))], container="quay.io/biocontainers/sra-tools:2.10.9--pl526haddd2b5_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Latf_Load_2_10_9_V0_1_0().translate("wdl")

