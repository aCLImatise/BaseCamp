from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean, Directory

Prefetch_V0_1_0 = CommandToolBuilder(tool="prefetch", base_command=["prefetch"], inputs=[ToolInput(tag="in_type", input_type=File(optional=True), prefix="--type", doc=InputDocumentation(doc="Specify file type to download. Default: sra")), ToolInput(tag="in_min_size", input_type=Int(optional=True), prefix="--min-size", doc=InputDocumentation(doc="Minimum file size to download in KB\n(inclusive).")), ToolInput(tag="in_max_size", input_type=Int(optional=True), prefix="--max-size", doc=InputDocumentation(doc="Maximum file size to download in KB\n(exclusive). Default: 20G")), ToolInput(tag="in_force", input_type=String(optional=True), prefix="--force", doc=InputDocumentation(doc="Force object download - one of: no, yes,\nall, ALL. no [default]: skip download if\nthe object if found and complete; yes:\ndownload it even if it is found and is\ncomplete; all: ignore lock files (stale\nlocks or it is being downloaded by\nanother process - use at your own\nrisk!); ALL: ignore lock files, restart\ndownload from beginning")), ToolInput(tag="in_progress", input_type=Boolean(optional=True), prefix="--progress", doc=InputDocumentation(doc="Show progress")), ToolInput(tag="in_resume", input_type=String(optional=True), prefix="--resume", doc=InputDocumentation(doc="Resume partial downloads - one of: no, yes\n[default]")), ToolInput(tag="in_verify", input_type=String(optional=True), prefix="--verify", doc=InputDocumentation(doc="Verify after download - one of: no, yes\n[default]")), ToolInput(tag="in_check_all", input_type=Boolean(optional=True), prefix="--check-all", doc=InputDocumentation(doc="Double-check all refseqs")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="Write file to <file> when downloading\nsingle file")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="--output-directory", doc=InputDocumentation(doc="Save files to <directory>/")), ToolInput(tag="in_ngc", input_type=File(optional=True), prefix="--ngc", doc=InputDocumentation(doc="<path> to ngc file")), ToolInput(tag="in_perm", input_type=File(optional=True), prefix="--perm", doc=InputDocumentation(doc="<path> to permission file")), ToolInput(tag="in_location", input_type=String(optional=True), prefix="--location", doc=InputDocumentation(doc="location in cloud")), ToolInput(tag="in_cart", input_type=File(optional=True), prefix="--cart", doc=InputDocumentation(doc="<path> to cart file")), ToolInput(tag="in_disable_multithreading", input_type=Boolean(optional=True), prefix="--disable-multithreading", doc=InputDocumentation(doc="disable multithreading")), ToolInput(tag="in_log_level", input_type=Int(optional=True), prefix="--log-level", doc=InputDocumentation(doc="Logging level as number or enum string.\nOne of\n(fatal|sys|int|err|warn|info|debug) or\n(0-6) Current/default is warn")), ToolInput(tag="in_option_file", input_type=File(optional=True), prefix="--option-file", doc=InputDocumentation(doc="Read more options and parameters from the")), ToolInput(tag="in_file_dot", input_type=File(), position=0, doc=InputDocumentation(doc="-h|--help                        print this message"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="Write file to <file> when downloading\nsingle file")), ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="Save files to <directory>/"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Prefetch_V0_1_0().translate("wdl", allow_empty_container=True)

