!Command
command:
- qgrs
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -csv
  description: output in csv mode
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -json
  description: output in JSON mode
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -i
  description: '[input filename]   read input from a file as specified (defaults to
    stdin)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  description: '[output filename]  write output to file as specified (defaults to
    stdout)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -t
  description: '[n]                filter output to QGRS with number tetrads equal
    to or greater than n (defaults to 2)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  description: '[n]                filter output to QGRS with g-score equal to or
    greater than n (defaults to 17)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -g
  description: '[c]                replace all G characters within tetrads with given
    character.'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -v
  description: include overlapping QGRS in output (very large outputs may be generated)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -notitle
  description: omit column titles in output (does not apply to JSON)
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  description: help (this)
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "-----------------------------------------------------------------------------------------------------------\n\
  \ Command line options\n-----------------------------------------------------------------------------------------------------------\n\
  -h                    help (this)\n-csv                  output in csv mode\n-json\
  \                 output in JSON mode\n-i [input filename]   read input from a file\
  \ as specified (defaults to stdin)\n-o [output filename]  write output to file as\
  \ specified (defaults to stdout)\n-t [n]                filter output to QGRS with\
  \ number tetrads equal to or greater than n (defaults to 2)\n-s [n]            \
  \    filter output to QGRS with g-score equal to or greater than n (defaults to\
  \ 17)\n-g [c]                replace all G characters within tetrads with given\
  \ character.\n-v                    include overlapping QGRS in output (very large\
  \ outputs may be generated)\n-notitle              omit column titles in output\
  \ (does not apply to JSON)\n\n-----------------------------------------------------------------------------------------------------------\n\
  \ Output (default or csv)\n-----------------------------------------------------------------------------------------------------------\n\
  Column 1 - ID (order found in sequence).  x.y where x is the primary id, and y is\
  \ number assigned overlaps.  \n           For example, all QGRS listed as 2.y overlap\
  \ QGRS listed with ID 2 - where 2 is the QGRS resulting\n           in the highest\
  \ G-Score in the group.\nColumn 2 - Position of the start of the first tetrad (relative\
  \ to beginning of input sequence)\nColumn 3 - Position of the start of the second\
  \ tetrad (relative to beginning of input sequence)\nColumn 4 - Position of the start\
  \ of the third tetrad (relative to beginning of input sequence)\nColumn 5 - Position\
  \ of the start of the fourth tetrad (relative to beginning of input sequence)\n\
  Column 6 - Number of tetrads\nColumn 7 - G-Score\nColumn 8 - Sequence\n\n-----------------------------------------------------------------------------------------------------------\n\
  \ Manual sequence entry)\n-----------------------------------------------------------------------------------------------------------\n\
  When you run this program without the -i option, the sequence must be entered via\
  \ stdin.  Unless you are piping \nin file contents, you will need to actually copy/paste\
  \ or type the sequence data.  The program expects an EOF\nsignal at the end of the\
  \ sequence - which will signal that it has received all input.  On the keyboard,\
  \ type \nCtrl+D to enter the EOF signal!\n-----------------------------------------------------------------------------------------------------------\n"
generated_using:
- -h
docker_image:
