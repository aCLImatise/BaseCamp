from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Float, Boolean

Gnali_V0_1_0 = CommandToolBuilder(tool="gnali", base_command=["gnali"], inputs=[ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--input_file", doc=InputDocumentation(doc="File of genes to test. Accepted formats: csv, txt")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="Name of output directory. Default: results-ID/")), ToolInput(tag="in_force", input_type=Directory(optional=True), prefix="--force", doc=InputDocumentation(doc="Force existing output folder to be overwritten")), ToolInput(tag="in_database", input_type=Float(optional=True), prefix="--database", doc=InputDocumentation(doc="Database to query. Default: gnomadv2.1.1 Options:\n['gnomadv2.1.1', 'gnomadv3']")), ToolInput(tag="in_vcf", input_type=Boolean(optional=True), prefix="--vcf", doc=InputDocumentation(doc="Generate vcf file for filtered variants")), ToolInput(tag="in_predefined_filters_use", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[PREDEFINED_FILTERS [PREDEFINED_FILTERS ...]], --predefined_filters [PREDEFINED_FILTERS [PREDEFINED_FILTERS ...]]\nPredefined filters. To use multiple, separate them by\nspaces. Options: {'gnomadv2.1.1': {'homozygous-\ncontrols': 'controls_nhomalt>0', 'heterozygous-\ncontrols': 'controls_nhomalt=0', 'homozygous':\n'nhomalt>0'}, 'gnomadv3': {'homozygous': 'nhomalt>0'}}")), ToolInput(tag="in_additional_filters_use", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ADDITIONAL_FILTERS [ADDITIONAL_FILTERS ...]], --additional_filters [ADDITIONAL_FILTERS [ADDITIONAL_FILTERS ...]]\nAdditional filters. To use multiple, separate them by\nspaces. Please enclose each in quotes (ex. 'AC>3')")), ToolInput(tag="in_pop_freqs", input_type=File(optional=True), prefix="--pop_freqs", doc=InputDocumentation(doc="Get population frequencies (in detailed output file)")), ToolInput(tag="in_config", input_type=File(optional=True), prefix="--config", doc=InputDocumentation(doc="Use a custom config file. To get started, check out\nthe --config_template commands")), ToolInput(tag="in_config_template_gr_ch_three_seven", input_type=Boolean(optional=True), prefix="--config_template_grch37", doc=InputDocumentation(doc="Create a fillable template for a config for a database\nusing the GRCh37 assembly")), ToolInput(tag="in_config_template_gr_ch_three_eight", input_type=Boolean(optional=True), prefix="--config_template_grch38", doc=InputDocumentation(doc="Create a fillable template for a config for a database\nusing the GRCh38 assembly\n"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Name of output directory. Default: results-ID/")), ToolOutput(tag="out_force", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Force existing output folder to be overwritten")), ToolOutput(tag="out_pop_freqs", output_type=File(optional=True), selector=InputSelector(input_to_select="in_pop_freqs", type_hint=File()), doc=OutputDocumentation(doc="Get population frequencies (in detailed output file)")), ToolOutput(tag="out_config", output_type=File(optional=True), selector=InputSelector(input_to_select="in_config", type_hint=File()), doc=OutputDocumentation(doc="Use a custom config file. To get started, check out\nthe --config_template commands"))], container="quay.io/biocontainers/gnali:1.0.2--py37heccd8a3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gnali_V0_1_0().translate("wdl")

