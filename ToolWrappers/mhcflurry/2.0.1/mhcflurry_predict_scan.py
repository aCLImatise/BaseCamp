from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Array, Int, Float, Directory

Mhcflurry_Predict_Scan_V0_1_0 = CommandToolBuilder(tool="mhcflurry_predict_scan", base_command=["mhcflurry-predict-scan"], inputs=[ToolInput(tag="in_list_supported_alleles", input_type=Boolean(optional=True), prefix="--list-supported-alleles", doc=InputDocumentation(doc="Print the list of supported alleles and exits")), ToolInput(tag="in_list_supported_peptide_lengths", input_type=Boolean(optional=True), prefix="--list-supported-peptide-lengths", doc=InputDocumentation(doc="Print the list of supported peptide lengths and exits")), ToolInput(tag="in_input_format", input_type=String(optional=True), prefix="--input-format", doc=InputDocumentation(doc="Format of input file. By default, it is guessed from\nthe file extension.")), ToolInput(tag="in_alleles", input_type=Array(t=String(), optional=True), prefix="--alleles", doc=InputDocumentation(doc="Alleles to predict")), ToolInput(tag="in_sequences", input_type=Array(t=String(), optional=True), prefix="--sequences", doc=InputDocumentation(doc="Sequences to predict (exclusive with passing an input\nfile)")), ToolInput(tag="in_sequence_id_column", input_type=String(optional=True), prefix="--sequence-id-column", doc=InputDocumentation(doc="Input CSV column name for sequence IDs. Default:\n'sequence_id'")), ToolInput(tag="in_sequence_column", input_type=String(optional=True), prefix="--sequence-column", doc=InputDocumentation(doc="Input CSV column name for sequences. Default:\n'sequence'")), ToolInput(tag="in_no_throw", input_type=Boolean(optional=True), prefix="--no-throw", doc=InputDocumentation(doc="Return NaNs for unsupported alleles or peptides\ninstead of raising")), ToolInput(tag="in_peptide_lengths", input_type=Int(optional=True), prefix="--peptide-lengths", doc=InputDocumentation(doc="Peptide lengths to consider. Pass as START-END (e.g.\n8-11) or a comma-separated list (8,9,10,11). When\nusing START-END, the range is INCLUSIVE on both ends.\nDefault: 8-11.")), ToolInput(tag="in_results_all", input_type=Boolean(optional=True), prefix="--results-all", doc=InputDocumentation(doc="Return results for all peptides regardless of\naffinity, etc.")), ToolInput(tag="in_results_best", input_type=String(optional=True), prefix="--results-best", doc=InputDocumentation(doc="Take the top result for each sequence according to the\nspecified predicted quantity")), ToolInput(tag="in_results_filtered", input_type=String(optional=True), prefix="--results-filtered", doc=InputDocumentation(doc="Filter results by the specified quantity.")), ToolInput(tag="in_threshold_presentation_score", input_type=Float(optional=True), prefix="--threshold-presentation-score", doc=InputDocumentation(doc="Threshold if filtering by presentation score. Default:\n0.7")), ToolInput(tag="in_threshold_processing_score", input_type=Float(optional=True), prefix="--threshold-processing-score", doc=InputDocumentation(doc="Threshold if filtering by processing score. Default:\n0.5")), ToolInput(tag="in_threshold_affinity", input_type=Int(optional=True), prefix="--threshold-affinity", doc=InputDocumentation(doc="Threshold if filtering by affinity. Default: 500")), ToolInput(tag="in_threshold_affinity_percentile", input_type=Float(optional=True), prefix="--threshold-affinity-percentile", doc=InputDocumentation(doc="Threshold if filtering by affinity percentile.\nDefault: 2.0")), ToolInput(tag="in_out", input_type=String(optional=True), prefix="--out", doc=InputDocumentation(doc="Output CSV")), ToolInput(tag="in_output_delimiter", input_type=String(optional=True), prefix="--output-delimiter", doc=InputDocumentation(doc="Delimiter character for results. Default: ','")), ToolInput(tag="in_no_affinity_percentile", input_type=Boolean(optional=True), prefix="--no-affinity-percentile", doc=InputDocumentation(doc="Do not include affinity percentile rank")), ToolInput(tag="in_models", input_type=Directory(optional=True), prefix="--models", doc=InputDocumentation(doc="Directory containing presentation models.Default: /roo\nt/.local/share/mhcflurry/4/2.0.0/models_class1_present\nation/models")), ToolInput(tag="in_no_flanking", input_type=Boolean(optional=True), prefix="--no-flanking", doc=InputDocumentation(doc="Do not use flanking sequence information in\npredictions\n")), ToolInput(tag="in_help", input_type=Int(), position=0, doc=InputDocumentation(doc="Help:")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc="Input CSV or FASTA"))], outputs=[], container="quay.io/biocontainers/mhcflurry:2.0.1--pyh864c0ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mhcflurry_Predict_Scan_V0_1_0().translate("wdl")

