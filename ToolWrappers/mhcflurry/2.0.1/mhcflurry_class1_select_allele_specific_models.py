from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, String, Int, Array

Mhcflurry_Class1_Select_Allele_Specific_Models_V0_1_0 = CommandToolBuilder(tool="mhcflurry_class1_select_allele_specific_models", base_command=["mhcflurry-class1-select-allele-specific-models"], inputs=[ToolInput(tag="in_data", input_type=File(optional=True), prefix="--data", doc=InputDocumentation(doc="Model selection data CSV. Expected columns: allele,\npeptide, measurement_value")), ToolInput(tag="in_exclude_data", input_type=File(optional=True), prefix="--exclude-data", doc=InputDocumentation(doc="Data to EXCLUDE from model selection. Useful to\nspecify the original training data used")), ToolInput(tag="in_models_dir", input_type=Directory(optional=True), prefix="--models-dir", doc=InputDocumentation(doc="Directory to read models")), ToolInput(tag="in_out_models_dir", input_type=Directory(optional=True), prefix="--out-models-dir", doc=InputDocumentation(doc="Directory to write selected models")), ToolInput(tag="in_out_unselected_predictions", input_type=File(optional=True), prefix="--out-unselected-predictions", doc=InputDocumentation(doc="Write predictions for validation data using unselected\npredictor to FILE.csv")), ToolInput(tag="in_unselected_accuracy_percentile_threshold", input_type=String(optional=True), prefix="--unselected-accuracy-percentile-threshold", doc=InputDocumentation(doc="Alleles to select models for. If not specified, all\nalleles with enough measurements will be used.")), ToolInput(tag="in_combined_min_models", input_type=Int(optional=True), prefix="--combined-min-models", doc=InputDocumentation(doc="Min number of models to select per allele when using\ncombined selector")), ToolInput(tag="in_combined_max_models", input_type=Int(optional=True), prefix="--combined-max-models", doc=InputDocumentation(doc="Max number of models to select per allele when using\ncombined selector")), ToolInput(tag="in_combined_min_contribution_percent", input_type=Int(optional=True), prefix="--combined-min-contribution-percent", doc=InputDocumentation(doc="Use only model selectors that can contribute at least\nX % to the total score. Default: 1.0")), ToolInput(tag="in_mass_spec_min_measurements", input_type=Int(optional=True), prefix="--mass-spec-min-measurements", doc=InputDocumentation(doc="Min number of measurements required for an allele to\nuse mass-spec model selection")), ToolInput(tag="in_mass_spec_min_models", input_type=Int(optional=True), prefix="--mass-spec-min-models", doc=InputDocumentation(doc="Min number of models to select per allele when using\nmass-spec selector")), ToolInput(tag="in_mass_spec_max_models", input_type=Int(optional=True), prefix="--mass-spec-max-models", doc=InputDocumentation(doc="Max number of models to select per allele when using\nmass-spec selector")), ToolInput(tag="in_mse_min_measurements", input_type=Int(optional=True), prefix="--mse-min-measurements", doc=InputDocumentation(doc="Min number of measurements required for an allele to\nuse MSE model selection")), ToolInput(tag="in_mse_min_models", input_type=Int(optional=True), prefix="--mse-min-models", doc=InputDocumentation(doc="Min number of models to select per allele when using\nMSE selector")), ToolInput(tag="in_mse_max_models", input_type=Int(optional=True), prefix="--mse-max-models", doc=InputDocumentation(doc="Max number of models to select per allele when using\nMSE selector")), ToolInput(tag="in_scoring", input_type=Array(t=String(), optional=True), prefix="--scoring", doc=InputDocumentation(doc="Scoring procedures to use in order")), ToolInput(tag="in_consensus_min_models", input_type=Int(optional=True), prefix="--consensus-min-models", doc=InputDocumentation(doc="Min number of models to select per allele when using\nconsensus selector")), ToolInput(tag="in_consensus_max_models", input_type=Int(optional=True), prefix="--consensus-max-models", doc=InputDocumentation(doc="Max number of models to select per allele when using\nconsensus selector")), ToolInput(tag="in_consensus_num_peptides_per_length", input_type=Int(optional=True), prefix="--consensus-num-peptides-per-length", doc=InputDocumentation(doc="Num peptides per length to use for consensus scoring")), ToolInput(tag="in_mass_spec_regex", input_type=String(optional=True), prefix="--mass-spec-regex", doc=InputDocumentation(doc="Regular expression for mass-spec data. Runs on\nmeasurement_source col.Default: mass[- ]spec.")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Keras verbosity. Default: 0")), ToolInput(tag="in_num_jobs", input_type=Int(optional=True), prefix="--num-jobs", doc=InputDocumentation(doc="Number of local processes to parallelize training\nover. Set to 0 for serial run. Default: 0.")), ToolInput(tag="in_backend", input_type=String(optional=True), prefix="--backend", doc=InputDocumentation(doc="Keras backend. If not specified will use system\ndefault.")), ToolInput(tag="in_gpus", input_type=Int(optional=True), prefix="--gpus", doc=InputDocumentation(doc="Number of GPUs to attempt to parallelize across.\nRequires running in parallel.")), ToolInput(tag="in_max_workers_per_gpu", input_type=Int(optional=True), prefix="--max-workers-per-gpu", doc=InputDocumentation(doc="Maximum number of workers to assign to a GPU.\nAdditional tasks will run on CPU.")), ToolInput(tag="in_max_tasks_per_worker", input_type=Int(optional=True), prefix="--max-tasks-per-worker", doc=InputDocumentation(doc="Restart workers after N tasks. Workaround for\ntensorflow memory leaks. Requires Python >=3.2.")), ToolInput(tag="in_worker_log_dir", input_type=Directory(optional=True), prefix="--worker-log-dir", doc=InputDocumentation(doc="Write worker stdout and stderr logs to given\ndirectory.\n")), ToolInput(tag="in_model", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_select", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_class_one", input_type=Int(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_single", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_allele", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_models_dot", input_type=String(), position=5, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/mhcflurry:2.0.1--pyh864c0ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mhcflurry_Class1_Select_Allele_Specific_Models_V0_1_0().translate("wdl")

