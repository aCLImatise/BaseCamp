from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, Int, Float, String, File

Filter_Py_V0_1_0 = CommandToolBuilder(tool="filter.py", base_command=["filter.py"], inputs=[ToolInput(tag="in_p_one", input_type=Array(t=Int(), optional=True), prefix="--p1", doc=InputDocumentation(doc="Single end input files or left files for paired-end\ndata (.fastq, .fq). Multiple sample files must be\nseparated by comma or space")), ToolInput(tag="in_p_two", input_type=Array(t=Int(), optional=True), prefix="--p2", doc=InputDocumentation(doc="Right files for paired-end data (.fastq, .fq).\nMultiple files must be separated by comma or space")), ToolInput(tag="in_q_fmt", input_type=Float(optional=True), prefix="--qfmt", doc=InputDocumentation(doc="Quality value format [1= Illumina 1.8, 2= Illumina\n1.3,3= Sanger]. If quality format not provided, it\nwill automatically detect based on sequence data")), ToolInput(tag="in_nb", input_type=String(optional=True), prefix="--nb", doc=InputDocumentation(doc="Filter the reads containing given % of uncalled bases\n(N)")), ToolInput(tag="in_adp", input_type=String(optional=True), prefix="--adp", doc=InputDocumentation(doc="Trim the adapter and truncate the read sequence\n(multiple adapter sequences must be separated by\ncomma)")), ToolInput(tag="in_msz", input_type=Int(optional=True), prefix="--msz", doc=InputDocumentation(doc="Filter the reads which are lesser than minimum size")), ToolInput(tag="in_per", input_type=Float(optional=True), prefix="--per", doc=InputDocumentation(doc="Truncate the read sequence if it matches to adapter\nsequence equal or more than given percent (0.0-1.0)\n[default=0.9]")), ToolInput(tag="in_q_thr", input_type=Int(optional=True), prefix="--qthr", doc=InputDocumentation(doc="Filter the read sequence if average quality of bases\nin reads is lower than threshold (1-40) [default:20]")), ToolInput(tag="in_trim", input_type=String(optional=True), prefix="--trim", doc=InputDocumentation(doc="If trim option set to True, the reads with low quality\n(as defined by option --qthr) will be trimmed instead\nof discarding [True|False] [default: False]")), ToolInput(tag="in_ws_z", input_type=Int(optional=True), prefix="--wsz", doc=InputDocumentation(doc="The window size for trimming (5->3) the reads. This\noption should always set when -trim option is defined\n[default: 5]")), ToolInput(tag="in_mlk", input_type=Int(optional=True), prefix="--mlk", doc=InputDocumentation(doc="Minimum length of the reads to retain after trimming")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Number of CPU [default:2]")), ToolInput(tag="in_of_mt", input_type=File(optional=True), prefix="--ofmt", doc=InputDocumentation(doc="Output file format (fastq/fasta) [default:fastq]")), ToolInput(tag="in_no_vis", input_type=String(optional=True), prefix="--no-vis", doc=InputDocumentation(doc="No figures will be produced [True|False]\n[default:False]"))], outputs=[ToolOutput(tag="out_of_mt", output_type=File(optional=True), selector=InputSelector(input_to_select="in_of_mt", type_hint=File()), doc=OutputDocumentation(doc="Output file format (fastq/fasta) [default:fastq]"))], container="quay.io/biocontainers/htseqqc:v1.0--pyh5bfb8f1_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Filter_Py_V0_1_0().translate("wdl")

