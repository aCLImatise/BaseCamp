from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Array, File, Boolean, Float

Unicycler_Polish_V0_1_0 = CommandToolBuilder(tool="unicycler_polish", base_command=["unicycler_polish"], inputs=[ToolInput(tag="in_assembly", input_type=String(optional=True), prefix="--assembly", doc=InputDocumentation(doc="Input assembly to be polished")), ToolInput(tag="in_short_one", input_type=Int(optional=True), prefix="--short1", doc=InputDocumentation(doc="FASTQ file of short reads (first reads in each pair)")), ToolInput(tag="in_short_two", input_type=Int(optional=True), prefix="--short2", doc=InputDocumentation(doc="FASTQ file of short reads (second reads in each\npair)")), ToolInput(tag="in_pb_bax", input_type=Array(t=String(), optional=True), prefix="--pb_bax", doc=InputDocumentation(doc="PacBio raw bax.h5 read files")), ToolInput(tag="in_pb_bam", input_type=File(optional=True), prefix="--pb_bam", doc=InputDocumentation(doc="PacBio BAM read file")), ToolInput(tag="in_pb_fast_a", input_type=File(optional=True), prefix="--pb_fasta", doc=InputDocumentation(doc="FASTA file of PacBio reads")), ToolInput(tag="in_long_reads", input_type=File(optional=True), prefix="--long_reads", doc=InputDocumentation(doc="FASTQ/FASTA file of long reads")), ToolInput(tag="in_no_fix_local", input_type=Boolean(optional=True), prefix="--no_fix_local", doc=InputDocumentation(doc="do not fix local misassemblies (default: False)")), ToolInput(tag="in_min_insert", input_type=Int(optional=True), prefix="--min_insert", doc=InputDocumentation(doc="minimum valid short read insert size (default: auto)")), ToolInput(tag="in_max_insert", input_type=Int(optional=True), prefix="--max_insert", doc=InputDocumentation(doc="maximum valid short read insert size (default: auto)")), ToolInput(tag="in_min_align_length", input_type=Int(optional=True), prefix="--min_align_length", doc=InputDocumentation(doc="Minimum long read alignment length (default: 1000)")), ToolInput(tag="in_homopolymer", input_type=Int(optional=True), prefix="--homopolymer", doc=InputDocumentation(doc="Long read polish changes to a homopolymer of this\nlength or greater will be ignored (default: 4)")), ToolInput(tag="in_large", input_type=Int(optional=True), prefix="--large", doc=InputDocumentation(doc="Variants of this size or greater will be assess as\nlarge variants (default: 10)")), ToolInput(tag="in_illumina_alt", input_type=Int(optional=True), prefix="--illumina_alt", doc=InputDocumentation(doc="When assessing long read changes with short read\nalignments, a variant will only be applied if the\nalternative occurrences in the short read alignments\nexceed this percentage (default: 5)")), ToolInput(tag="in_free_bayes_qual_cut_off", input_type=Float(optional=True), prefix="--freebayes_qual_cutoff", doc=InputDocumentation(doc="Reject Pilon substitutions from long reads if the\nFreeBayes quality is less than this value (default:\n10.0)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="CPU threads to use in alignment and consensus\n(default: number of CPUs)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of stdout information (0 to 3, default: 2)\n0 = no stdout, 1 = basic progress indicators,\n2 = extra info, 3 = debugging info")), ToolInput(tag="in_sam_tools", input_type=File(optional=True), prefix="--samtools", doc=InputDocumentation(doc="path to samtools executable (default: samtools)")), ToolInput(tag="in_bowtie_two", input_type=Int(optional=True), prefix="--bowtie2", doc=InputDocumentation(doc="path to bowtie2 executable (default: bowtie2)")), ToolInput(tag="in_minimap_two", input_type=Int(optional=True), prefix="--minimap2", doc=InputDocumentation(doc="path to minimap2 executable (default: minimap2)")), ToolInput(tag="in_free_bayes", input_type=File(optional=True), prefix="--freebayes", doc=InputDocumentation(doc="path to freebayes executable (default: freebayes)")), ToolInput(tag="in_pitchfork", input_type=File(optional=True), prefix="--pitchfork", doc=InputDocumentation(doc="Path to Pitchfork installation of PacBio tools\n(should contain bin and lib directories) (default: )")), ToolInput(tag="in_bax_two_bam", input_type=Int(optional=True), prefix="--bax2bam", doc=InputDocumentation(doc="path to bax2bam executable (default: bax2bam)")), ToolInput(tag="in_pb_align", input_type=File(optional=True), prefix="--pbalign", doc=InputDocumentation(doc="path to pbalign executable (default: pbalign)")), ToolInput(tag="in_arrow", input_type=File(optional=True), prefix="--arrow", doc=InputDocumentation(doc="path to arrow executable (default: arrow)")), ToolInput(tag="in_pilon", input_type=File(optional=True), prefix="--pilon", doc=InputDocumentation(doc="path to pilon jar file (default: pilon*.jar)")), ToolInput(tag="in_java", input_type=File(optional=True), prefix="--java", doc=InputDocumentation(doc="path to java executable (default: java)")), ToolInput(tag="in_ale", input_type=File(optional=True), prefix="--ale", doc=InputDocumentation(doc="path to ALE executable (default: ALE)")), ToolInput(tag="in_rac_on", input_type=File(optional=True), prefix="--racon", doc=InputDocumentation(doc="path to racon executable (default: racon)")), ToolInput(tag="in_minimap", input_type=File(optional=True), prefix="--minimap", doc=InputDocumentation(doc="path to miniasm executable (default: minimap)")), ToolInput(tag="in_nuc_mer", input_type=File(optional=True), prefix="--nucmer", doc=InputDocumentation(doc="path to nucmer executable (default: nucmer)")), ToolInput(tag="in_shows_nps", input_type=File(optional=True), prefix="--showsnps", doc=InputDocumentation(doc="path to show-snps executable (default: show-snps)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Unicycler_Polish_V0_1_0().translate("wdl", allow_empty_container=True)

