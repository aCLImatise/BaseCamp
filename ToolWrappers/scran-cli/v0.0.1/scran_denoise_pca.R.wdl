version 1.0

task ScrandenoisepcaR {
  input {
    File? input_sce_object
    Int? technical
    Int? subset_row
    Int? min_rank
    Int? max_rank
    Int? assay_type
    String? get_spikes
    Int? value
    Int? output_sce_object
  }
  command <<<
    scran_denoise_pca_R \
      ~{if defined(input_sce_object) then ("--input-sce-object " +  '"' + input_sce_object + '"') else ""} \
      ~{if defined(technical) then ("--technical " +  '"' + technical + '"') else ""} \
      ~{if defined(subset_row) then ("--subset_row " +  '"' + subset_row + '"') else ""} \
      ~{if defined(min_rank) then ("--min-rank " +  '"' + min_rank + '"') else ""} \
      ~{if defined(max_rank) then ("--max-rank " +  '"' + max_rank + '"') else ""} \
      ~{if defined(assay_type) then ("--assay-type " +  '"' + assay_type + '"') else ""} \
      ~{if defined(get_spikes) then ("--get-spikes " +  '"' + get_spikes + '"') else ""} \
      ~{if defined(value) then ("--value " +  '"' + value + '"') else ""} \
      ~{if defined(output_sce_object) then ("--output-sce-object " +  '"' + output_sce_object + '"') else ""}
  >>>
  runtime {
    docker: "None"
  }
  parameter_meta {
    input_sce_object: "Path to the input SCE object in rds format."
    technical: "This can be: 1) a function that computes the technical component of the variance for a gene as FitTrendVar,\\n2) a numeric vector of length equal to the number of rows in x, containing the technical component for each gene.\\n3) a DataFrame of variance decomposition results generated by modelGeneVar or related functions."
    subset_row: "Logical, integer or character vector specifying the rows for which to model the variance. Defaults to all genes in x."
    min_rank: "Integer scalars specifying the minimum number of PCs to retain."
    max_rank: "Integer scalars specifying the maximum number of PCs to retain."
    assay_type: "String or integer scalar specifying the assay containing the log-expression values."
    get_spikes: "If get-spikes = FALSE, spike-in transcripts are automatically removed. If get.spikes=TRUE, no filtering on the spike-in transcripts will be performed."
    value: "String specifying the type of value to return. \\\"pca\\\" will return the PCs, \\\"n\\\" will return the number of retained components, and \\\"lowrank\\\" will return a low-rank approximation."
    output_sce_object: "Path to the output SCE object with denoised PC number."
  }
  output {
    File out_stdout = stdout()
  }
}