from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String

Scran_Denoise_Pca_R_V0_1_0 = CommandToolBuilder(tool="scran_denoise_pca.R", base_command=["scran-denoise-pca.R"], inputs=[ToolInput(tag="in_input_sce_object", input_type=File(optional=True), prefix="--input-sce-object", doc=InputDocumentation(doc="Path to the input SCE object in rds format.")), ToolInput(tag="in_technical", input_type=Int(optional=True), prefix="--technical", doc=InputDocumentation(doc="This can be: 1) a function that computes the technical component of the variance for a gene as FitTrendVar,\n2) a numeric vector of length equal to the number of rows in x, containing the technical component for each gene.\n3) a DataFrame of variance decomposition results generated by modelGeneVar or related functions.")), ToolInput(tag="in_subset_row", input_type=Int(optional=True), prefix="--subset_row", doc=InputDocumentation(doc="Logical, integer or character vector specifying the rows for which to model the variance. Defaults to all genes in x.")), ToolInput(tag="in_min_rank", input_type=Int(optional=True), prefix="--min-rank", doc=InputDocumentation(doc="Integer scalars specifying the minimum number of PCs to retain.")), ToolInput(tag="in_max_rank", input_type=Int(optional=True), prefix="--max-rank", doc=InputDocumentation(doc="Integer scalars specifying the maximum number of PCs to retain.")), ToolInput(tag="in_assay_type", input_type=Int(optional=True), prefix="--assay-type", doc=InputDocumentation(doc="String or integer scalar specifying the assay containing the log-expression values.")), ToolInput(tag="in_get_spikes", input_type=String(optional=True), prefix="--get-spikes", doc=InputDocumentation(doc="If get-spikes = FALSE, spike-in transcripts are automatically removed. If get.spikes=TRUE, no filtering on the spike-in transcripts will be performed.")), ToolInput(tag="in_value", input_type=Int(optional=True), prefix="--value", doc=InputDocumentation(doc="String specifying the type of value to return. 'pca' will return the PCs, 'n' will return the number of retained components, and 'lowrank' will return a low-rank approximation.")), ToolInput(tag="in_output_sce_object", input_type=Int(optional=True), prefix="--output-sce-object", doc=InputDocumentation(doc="Path to the output SCE object with denoised PC number."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Scran_Denoise_Pca_R_V0_1_0().translate("wdl", allow_empty_container=True)

