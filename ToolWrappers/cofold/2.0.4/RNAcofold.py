from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Rnacofold_V0_1_0 = CommandToolBuilder(tool="RNAcofold", base_command=["RNAcofold"], inputs=[ToolInput(tag="in_detailed_help", input_type=Boolean(optional=True), prefix="--detailed-help", doc=InputDocumentation(doc="Print help, including all details and hidden\noptions, and exit")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--full-help", doc=InputDocumentation(doc="Print help, including hidden options, and exit")), ToolInput(tag="in_noconv", input_type=Boolean(optional=True), prefix="--noconv", doc=InputDocumentation(doc="Do not automatically substitude nucleotide\n'T' with 'U'\n(default=off)")), ToolInput(tag="in_nops", input_type=Boolean(optional=True), prefix="--noPS", doc=InputDocumentation(doc="Do not produce postscript output\n(default=off)")), ToolInput(tag="in_part_func", input_type=Boolean(optional=True), prefix="--partfunc", doc=InputDocumentation(doc="[=INT]          Calculate the partition function and base\npairing probability matrix in addition to the\nmfe structure. Default is calculation of mfe\nstructure only.\n(default=`1')")), ToolInput(tag="in_all_pf", input_type=Boolean(optional=True), prefix="--all_pf", doc=InputDocumentation(doc="Compute the partition function and free\nenergies not only of the hetero-dimer\nconsisting of the two input sequences (the\n'AB dimer'), but also of the homo-dimers AA\nand BB as well as A and B monomers.\n(default=off)")), ToolInput(tag="in_concentrations", input_type=Boolean(optional=True), prefix="--concentrations", doc=InputDocumentation(doc="In addition to everything listed under the -a\noption, read in initial monomer\nconcentrations and compute the expected\nequilibrium concentrations of the 5 possible\nspecies (AB, AA, BB, A, B).\n(default=off)")), ToolInput(tag="in_conc_file", input_type=File(optional=True), prefix="--concfile", doc=InputDocumentation(doc="Specify a file with initial concentrations for\nthe to sequences.")), ToolInput(tag="in_temp", input_type=Int(optional=True), prefix="--temp", doc=InputDocumentation(doc="Rescale energy parameters to a temperature of\ntemp C. Default is 37C.")), ToolInput(tag="in_no_tetra", input_type=Boolean(optional=True), prefix="--noTetra", doc=InputDocumentation(doc="Do not include special stabilizing energies for\ncertain tetra-loops. Mostly for testing.\n(default=off)")), ToolInput(tag="in_dangles", input_type=Int(optional=True), prefix="--dangles", doc=InputDocumentation(doc="How to treat 'dangling end' energies for\nbases adjacent to helices in free ends and\nmulti-loops\n(default=`2')")), ToolInput(tag="in_no_lp", input_type=Boolean(optional=True), prefix="--noLP", doc=InputDocumentation(doc="Produce structures without lonely pairs\n(helices of length 1).\n(default=off)")), ToolInput(tag="in_no_gu", input_type=Boolean(optional=True), prefix="--noGU", doc=InputDocumentation(doc="Do not allow GU pairs\n(default=off)")), ToolInput(tag="in_no_closing_gu", input_type=Boolean(optional=True), prefix="--noClosingGU", doc=InputDocumentation(doc="Do not allow GU pairs at the end of helices\n(default=off)")), ToolInput(tag="in_param_file", input_type=File(optional=True), prefix="--paramFile", doc=InputDocumentation(doc="Read energy parameters from paramfile, instead\nof using the default parameter set.")), ToolInput(tag="in_program", input_type=String(), position=0, doc=InputDocumentation(doc="-C, --constraint              Calculate structures subject to constraints.\n(default=off)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rnacofold_V0_1_0().translate("wdl", allow_empty_container=True)

