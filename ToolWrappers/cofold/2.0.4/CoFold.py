from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String

Cofold_V0_1_0 = CommandToolBuilder(tool="CoFold", base_command=["CoFold"], inputs=[ToolInput(tag="in_detailed_help", input_type=Boolean(optional=True), prefix="--detailed-help", doc=InputDocumentation(doc="Print help, including all details and hidden\noptions, and exit")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--full-help", doc=InputDocumentation(doc="Print help, including hidden options, and exit")), ToolInput(tag="in_noconv", input_type=Boolean(optional=True), prefix="--noconv", doc=InputDocumentation(doc="Do not automatically substitude nucleotide\n'T' with 'U'\n(default=off)")), ToolInput(tag="in_nops", input_type=Boolean(optional=True), prefix="--noPS", doc=InputDocumentation(doc="Do not produce postscript drawing of the mfe")), ToolInput(tag="in_part_func", input_type=Boolean(optional=True), prefix="--partfunc", doc=InputDocumentation(doc="[=INT]          Calculate the partition function and base\npairing probability matrix.\n(default=`1')")), ToolInput(tag="in_me_a", input_type=Boolean(optional=True), prefix="--MEA", doc=InputDocumentation(doc="[=gamma]             Calculate an MEA (maximum expected accuracy)\nstructure, where the expected accuracy is\ncomputed from the pair probabilities: each\nbase pair (i,j) gets a score 2*gamma*p_ij and\nthe score of an unpaired base is given by the\nprobability of not forming a pair.\n(default=`1.')")), ToolInput(tag="in_circ", input_type=Boolean(optional=True), prefix="--circ", doc=InputDocumentation(doc="Assume a circular (instead of linear) RNA")), ToolInput(tag="in_temp", input_type=Int(optional=True), prefix="--temp", doc=InputDocumentation(doc="Rescale energy parameters to a temperature of\ntemp C. Default is 37C.")), ToolInput(tag="in_no_tetra", input_type=Boolean(optional=True), prefix="--noTetra", doc=InputDocumentation(doc="Do not include special tabulated stabilizing\nenergies for tri-, tetra- and hexaloop\nhairpins. Mostly for testing.\n(default=off)")), ToolInput(tag="in_dangles", input_type=Int(optional=True), prefix="--dangles", doc=InputDocumentation(doc="How to treat 'dangling end' energies for\nbases adjacent to helices in free ends and\nmulti-loops\n(default=`2')")), ToolInput(tag="in_no_lp", input_type=Boolean(optional=True), prefix="--noLP", doc=InputDocumentation(doc="Produce structures without lonely pairs\n(helices of length 1).\n(default=off)")), ToolInput(tag="in_no_gu", input_type=Boolean(optional=True), prefix="--noGU", doc=InputDocumentation(doc="Do not allow GU pairs\n(default=off)")), ToolInput(tag="in_no_closing_gu", input_type=Boolean(optional=True), prefix="--noClosingGU", doc=InputDocumentation(doc="Do not allow GU pairs at the end of helices\n(default=off)")), ToolInput(tag="in_param_file", input_type=File(optional=True), prefix="--paramFile", doc=InputDocumentation(doc="Read energy parameters from paramfile, instead\nof using the default parameter set.")), ToolInput(tag="in_program", input_type=String(), position=0, doc=InputDocumentation(doc="-C, --constraint              Calculate structures subject to constraints.\n(default=off)")), ToolInput(tag="in_structure_dot", input_type=String(), position=1, doc=InputDocumentation(doc="(default=off)")), ToolInput(tag="in_molecule_dot", input_type=String(), position=0, doc=InputDocumentation(doc="(default=off)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cofold_V0_1_0().translate("wdl", allow_empty_container=True)

