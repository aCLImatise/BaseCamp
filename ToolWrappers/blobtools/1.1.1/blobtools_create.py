from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Float, Boolean

Blobtools_Create_V0_1_0 = CommandToolBuilder(tool="blobtools_create", base_command=["blobtools", "create"], inputs=[ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--infile", doc=InputDocumentation(doc="FASTA file of assembly. Headers are split at whitespaces.")), ToolInput(tag="in_type", input_type=String(optional=True), prefix="--type", doc=InputDocumentation(doc="Assembly program used to create FASTA. If specified,\ncoverage will be parsed from FASTA header.\n(Parsing supported for 'spades', 'velvet', 'platanus')")), ToolInput(tag="in_hits_file", input_type=File(optional=True), prefix="--hitsfile", doc=InputDocumentation(doc="Hits file in format (qseqid\ttaxid\tbitscore)\n(e.g. BLAST output '--outfmt '6 qseqid staxids bitscore'')\nCan be specified multiple times")), ToolInput(tag="in_tax_rule", input_type=File(optional=True), prefix="--taxrule", doc=InputDocumentation(doc="...      Taxrule determines how taxonomy of blobs\nis computed (by default both are calculated)\n'bestsum'       : sum bitscore across all\nhits for each taxonomic rank\n'bestsumorder'  : sum bitscore across all\nhits for each taxonomic rank.\n- If first <TAX> file supplies hits, bestsum is calculated.\n- If no hit is found, the next <TAX> file is used.")), ToolInput(tag="in_min_score", input_type=Float(optional=True), prefix="--min_score", doc=InputDocumentation(doc="Minimal score necessary to be considered for taxonomy calculaton, otherwise set to 'no-hit'\n[default: 0.0]")), ToolInput(tag="in_min_diff", input_type=Float(optional=True), prefix="--min_diff", doc=InputDocumentation(doc="Minimal score difference between highest scoring\ntaxonomies (otherwise 'unresolved') [default: 0.0]")), ToolInput(tag="in_tax_collision_random", input_type=Boolean(optional=True), prefix="--tax_collision_random", doc=InputDocumentation(doc="Random allocation of taxonomy if highest scoring\ntaxonomies have equal scores (otherwise 'unresolved') [default: False]")), ToolInput(tag="in_nodes", input_type=File(optional=True), prefix="--nodes", doc=InputDocumentation(doc="NCBI nodes.dmp file. Not required if '--db'")), ToolInput(tag="in_names", input_type=File(optional=True), prefix="--names", doc=InputDocumentation(doc="NCBI names.dmp file. Not required if '--db'")), ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="NodesDB file (default: $BLOBTOOLS/data/nodesDB.txt).  If --nodes, --names and --db\nare all given and NODESDB does not exist, create it from NODES and NAMES.")), ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="...              BAM file(s), can be specified multiple times")), ToolInput(tag="in_cas", input_type=File(optional=True), prefix="--cas", doc=InputDocumentation(doc="...              CAS file(s) (requires clc_mapping_info in $PATH), can be specified multiple times")), ToolInput(tag="in_cov", input_type=File(optional=True), prefix="--cov", doc=InputDocumentation(doc="...              COV file(s), can be specified multiple times")), ToolInput(tag="in_calculate_cov", input_type=Boolean(optional=True), prefix="--calculate_cov", doc=InputDocumentation(doc="Legacy coverage when getting coverage from BAM (does not apply to COV parsing).\nNew default is to estimate coverages which is faster,")), ToolInput(tag="in_out", input_type=String(optional=True), prefix="--out", doc=InputDocumentation(doc="BlobDB output prefix")), ToolInput(tag="in_title", input_type=String(optional=True), prefix="--title", doc=InputDocumentation(doc="Title of BlobDB [default: output prefix)"))], outputs=[ToolOutput(tag="out_hits_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_hits_file", type_hint=File()), doc=OutputDocumentation(doc="Hits file in format (qseqid\ttaxid\tbitscore)\n(e.g. BLAST output '--outfmt '6 qseqid staxids bitscore'')\nCan be specified multiple times"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Blobtools_Create_V0_1_0().translate("wdl", allow_empty_container=True)

