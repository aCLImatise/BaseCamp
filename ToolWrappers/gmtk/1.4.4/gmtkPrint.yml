!Command
command:
- gmtkPrint
positional: []
named: []
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "Argument Error: Unknown switch: --help\nUsage: gmtkPrint  [[[-flag] [option]]\
  \ ...]\nOptions:\nRequired: <>; Optional: []; Flagless arguments must be in order.\n\
  \n\n*** Observation input file handling ***\n\n <-ofX str>                     \
  \       Observation File.  Replace X with the file number {null}\n [-nfX unsigned]\
  \                       Number of floats in observation file X {0}\n [-niX unsigned]\
  \                       Number of ints in observation file X {0}\n [-fmtX str] \
  \                          Format (htk,binary,ascii,flatascii,hdf5,pfile) for observation\
  \ file X {pfile}\n [-fileBufferSize unsigned]            Size in MB of the file\
  \ observation frame buffer {16}\n [-constantSpace bool]                 Use only\
  \ fileBufferSize memory to hold the observation data {F}\n [-fileWindowSize unsigned]\
  \            Size in MB to load at once if constantSpace is active {4}\n [-fileWindowDelta\
  \ unsigned]           How close (in frames) from the edge of the current window\
  \ triggers loading more frames {100}\n [-iswpX bool]                         Endian\
  \ swap condition for observation file X {T}\n [-prefrX str]                    \
  \     Float range for observation file X (before transforms) {all}\n [-preirX str]\
  \                         Int range for observation file X {all}\n [-frX str]  \
  \                          Float range for observation file X (after transforms)\
  \ {all}\n [-irX str]                            Int range for observation file X\
  \ {all}\n [-srX str]                            Segment range for observation file\
  \ X {all}\n [-leftPadX unsigned]                  Prepend padding frames to file\
  \ X {0}\n [-rightPadX unsigned]                 Append padding frames to file X\
  \ {0}\n [-preprX str]                         Pre Per-segment frame Range for obs\
  \ file X before any transforms are applied {null}\n [-postprX str]             \
  \           Post Per-segment frame Range for obs file X after per-stream transforms\
  \ are applied {null}\n [-gpr str]                            Global Per-segment\
  \ final frame Range {null}\n [-justification str]                  Justification\
  \ of usable frames (left, center, right) {left}\n [-obsNAN bool]               \
  \         True if observation files allow FP NAN values {F}\n\n*** File range options\
  \ ***\n\n [-dcdrng str]                         Range to decode over segment file\
  \ {all}\n [-startSkip integer]                  Frames to skip at beginning (i.e.,\
  \ first frame is buff[startSkip]) {0}\n [-endSkip integer]                    Frames\
  \ to skip at end (i.e., last frame is buff[len-1-endSkip]) {0}\n\n*** Help options\
  \ ***\n\n [-help [unsigned]]                    Print this message. Add an argument\
  \ from 1 to 5 for increasing help info. {0}\n [-version bool]                  \
  \     Print GMTK version number and exit. {F}\n\n*** Observation matrix transformation\
  \ options ***\n\n [-fdiffactX str]                      Action if different number\
  \ of frames in streams: error (er), repeat last frame (rl), first frame (rf), segmentally\
  \ expand (se), truncate from start (ts), truncate from end (te) {er}\n [-sdiffactX\
  \ str]                      Action if different number of segments in streams: error\
  \ (er), truncate from end (te), repeat last sent (rl), and wrap around (wa). {te}\n\
  \ [-cppifascii bool]                    Pre-process ASCII files using CPP {F}\n\
  \ [-transX str]                         per stream transformations string {null}\n\
  \ [-posttrans str]                      Final global transformations string {null}\n\
  \ [-comb str]                           Combine float features (none: no combination,\
  \ add, sub, mul,div {none}\n [-cppCommandOptions str]              Command line\
  \ options to give to 'cpp' {null}\n\n*** Input trainable parameter file handling\
  \ ***\n\n <-inputMasterFile str>                Input file of multi-level master\
  \ CPP processed GM input parameters {null}\n [-mapX str]                       \
  \    Deterministic mapping dynamic library file. Replace X with the file number\
  \ {null}\n [-inputTrainableParameters str]       File of only and all trainable\
  \ parameters {null}\n [-binInputTrainableParameters bool]   Binary condition of\
  \ trainable parameters file {F}\n [-allocateDenseCpts integer]          Automatically\
  \ allocate undefined CPTs. (-1) = don't read params, (0) = don't allocate, (1) =\
  \ use random initial CPT values, (2) = use uniform values {0}\n [-cptNormThreshold\
  \ double]            Read error if |Sum-1.0|/card > norm_threshold {1.000000e-02}\n\
  \n*** Input model file handling ***\n\n <-strFile str>                        Graphical\
  \ Model Structure File {null}\n [-checkTriFileCards bool]             Verify rv\
  \ cardinalities in triangulation file match .str file {T}\n [-triFile str]     \
  \                   Triangulation file for strFile {null}\n [-jtFile str]      \
  \                   Name of file to write junction tree information {jt_info.txt}\n\
  \ [-jtwUB bool]                         True means jtWeight is allways an upper\
  \ bound on true JT weight, false means jtWeight is estimate {F}\n\n*** Continuous\
  \ random variable options ***\n\n [-varFloor double]                    Variance\
  \ Floor (variances can't fall below this value) {1.000000e-10}\n [-floorVarOnRead\
  \ bool]                Floor the variances to varFloor when they are read in {F}\n\
  \n*** Memory management options ***\n\n [-memoryGrowth str]                   Rate\
  \ to grow data structures (conservative, default, aggressive) {default}\n [-hashLoadFactor\
  \ float]               Hash table load factor, in range 0.05 <= lf <= 1.0 {5.000000e-01}\n\
  \ [-deterministicChildrenStore bool]    Store deterministic children in clique memory\
  \ {T}\n [-clearCliqueValMem bool]             Free clique/separator value cache\
  \ for each segment {T}\n [-mmapViterbiValues bool]             Use mmap() to get\
  \ memory to hold Viterbi values {T}\n\n*** General options ***\n\n [-seed bool]\
  \                          Seed the random number generator {F}\n [-skipStartupChecks\
  \ bool]             Skip expensive model validity checks performed at GMTK startup\
  \ {F}\n [-verbosity str]                      Verbosity - coma separated list of\
  \ m=v, where m is all, default, inference, inference-memory, training, triangulation,\
  \ boundary, unrolling, printing, modelinfo, obsfile, obsstream; 0 <= v <= 100 {null}\n\
  \ [-printIntValues bool]                Always print rv values as integer rather\
  \ than symbols {F}\n\n*** Clique posterior output options ***\n\n [-pCliquePrintRange\
  \ str]              With CE/DE, print range cliques from P section. {null}\n [-cCliquePrintRange\
  \ str]              With CE/DE, print range cliques from C section. {null}\n [-eCliquePrintRange\
  \ str]              With CE/DE, print range cliques from E section. {null}\n [-cliquePrintOnlyEntropy\
  \ bool]        With CE/DE, print only clique entropies. {F}\n [-cliquePosteriorNormalize\
  \ bool]      Normalize posterior probabilities to sum to 1. {T}\n [-cliquePosteriorUnlog\
  \ bool]          Output probabilities instead of log probabilities. {T}\n [-cliqueOutputFileName\
  \ str]           Output filename for clique posteriors. {null}\n [-cliqueListFileName\
  \ str]             Output list filename for clique posteriors (HDF5, HTK, ASCII,\
  \ Binary). {null}\n [-cliquePrintSeparator str]           String to use as separator\
  \ when outputting HTK, ASCII, or binary clique posteriors. {_}\n [-cliquePrintSwap\
  \ bool]               Do byte swapping when outputting PFile, HTK, or binary clique\
  \ posteriors. {F}\n [-cliquePrintFormat str]              Output file format for\
  \ clique posteriors (hdf5,htk,binary,ascii,flatascii,pfile). {pfile}\n [-debugSections\
  \ str]                  Section range to generate debug output {all}\n [-vsap str]\
  \                           Variable section assignment priority. Sequence of chars\
  \ in set [C,D,O,B,S,I,A,F,N] {COI}\n [-vcap str]                           Variable\
  \ clique sorting priority. Sequence of chars in set [C,D,O,B,S,I,A,F,N,T,M,+,.]\
  \ {COT}\n\n*** Decoding options ***\n\n [-vitObsFileName str]                 Output\
  \ filename for Viterbi observation file {null}\n [-vitObsListFileName str]     \
  \        Output list filename for Viterbi observation file (HDF5, HTK, ASCII, Binary)\
  \ {null}\n [-vitObsNameSeparator str]            String to use as separator when\
  \ outputting HTK, ASCII, or binary Viterbi observation file {_}\n [-vitObsFileFormat\
  \ str]               Output Viterbi observation file format (hdf5,htk,binary,ascii,flatascii,pfile)\
  \ {pfile}\n [-vitObsFileSwap bool]                Do byte swapping when outputting\
  \ PFile, HTK, or binary Viterbi observation file {F}\n [-mVitValsFile str]     \
  \              Modified Section Vit: file to print viterbi values in ASCII, '-'\
  \ for stdout {null}\n [-vitValsFile str]                    Original Section Vit:\
  \ file to print viterbi values in ASCII, '-' for stdout {null}\n <-binaryVitFile\
  \ str>                  File containing binary Viterbi values for printing {null}\n\
  \ [-pVitRegexFilter str]                Regular expression to filter variable names\
  \ in prolog {null}\n [-cVitRegexFilter str]                Regular expression to\
  \ filter variable names in chunk {null}\n [-eVitRegexFilter str]               \
  \ Regular expression to filter variable names in epilog {null}\n [-vitCaseSensitiveRegexFilter\
  \ bool]   Case sensitivity of the rv regular expression filter {F}\n [-pVitTrigger\
  \ str]                    Leaf node expression for Viteribi printing trigger in\
  \ prolog {null}\n [-cVitTrigger str]                    Leaf node expression for\
  \ Viteribi printing trigger in chunk {null}\n [-eVitTrigger str]               \
  \     Leaf node expression for Viteribi printing trigger in epilog {null}\n [-vitRunLengthCompress\
  \ bool]          Only print a chunk when its Viterbi values differ from the previous\
  \ chunk {F}\n [-vitSectionRange str]                Value printing, integer range\
  \ filter for sections (e.g., frames, slices) to print. {null}\n [-vitFrameRange\
  \ str]                  Value printing, integer range filter for frames to print.\
  \ {null}\n [-vitPrintObservedVariables bool]     Also print observed random variables\
  \ in addtion to hidden {F}\n\n*** Lattice options ***\n\n [-latticeDefaultFrameRate\
  \ double]     Lattice, default frame rate (if negative, compute from file) {-1.000000e+02}\n\
  \ [-latticeUseMaxScore bool]            Lattice, use max edge score for node CPT\
  \ {T}\n [-latticeIgnoreNodeTimeMarks bool]    Lattice, ignore lattice node time\
  \ marks in all lattices {F}\n\n*** Resource limiting options ***\n\n [-maxMem integer]\
  \                     Maximum virtual memory  (Bytes); 0 means 'unlimited' {0}\n\
  \ [-maxTime integer]                    Maximum CPU time      (seconds); 0 means\
  \ 'unlimited' {0}\n [-maxCore integer]                    Maximum core file size\
  \  (Bytes);-1 means 'unlimited' {-1}\n\n*** Additional arguments ***\n\n [-argsFile\
  \ <str>]                     File to obtain additional arguments from {}\n"
generated_using:
- --help
docker_image:
