from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Netreg_V0_1_0 = CommandToolBuilder(tool="netReg", base_command=["netReg"], inputs=[ToolInput(tag="in_arg_filename_design", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --design ] arg                  Filename of the design matrix X.")), ToolInput(tag="in_arg_filename_gx", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="[ --gx ] arg                      Filename of the affinity matrix GX for")), ToolInput(tag="in_arg_filename_gy", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --gy ] arg                      Filename of the affinity matrix GY for")), ToolInput(tag="in_arg_penalization_parameter_gx", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --psi ] arg (=0)                Penalization parameter for affinity\nmatrix GX.")), ToolInput(tag="in_arg_penalization_parameter_affinitymatrix", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="[ --xi ] arg (=0)                 Penalization parameter for affinity\nmatrix GY.")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --maxit ] arg (=100000)         Maximum number of iterations of\ncoordinate descent. You should choose a\nsufficiently large number.")), ToolInput(tag="in_arg_convergence_threshold_coordinatedescent", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --threshold ] arg (=0.0000001)  Convergence threshold for coordinate\ndescent. Anything below 0.0001 should\nsuffice.")), ToolInput(tag="in_arg_filename_output", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg                 Filename of the output file.")), ToolInput(tag="in_model_selection", input_type=Boolean(optional=True), prefix="--modelselection", doc=InputDocumentation(doc="Use modelselection, i.e. estimation of\noptimal shrinkage parameters using\ncrossvalition, before doing the\nestimation of coefficients.")), ToolInput(tag="in_arg_number_foldsthis", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --nfolds ] arg (=10)            The number of cross-validation folds.\nThis can be maximal the number of rows\nof X/Y and minimal 3.")), ToolInput(tag="in_arg_convergence_threshold_bobyqaalgorithm", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --epsilon ] arg (=0.001)        Convergence threshold for the BOBYQA\nalgorithm, i.e. the stop criterion for\nthe model selection.")), ToolInput(tag="in_arg_maximal_number", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --bobit ] arg (=1000)           Maximal number of iterations for the\nBOBYQA algorithm.\n")), ToolInput(tag="in_x_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-r [ --reponse ] arg                 Filename of the reponse matrix Y.")), ToolInput(tag="in_y_dot", input_type=String(), position=1, doc=InputDocumentation(doc="-l [ --lambda ] arg (=1)             LASSO penalization parameter."))], outputs=[ToolOutput(tag="out_arg_filename_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_filename_output", type_hint=File()), doc=OutputDocumentation(doc="[ --outfile ] arg                 Filename of the output file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Netreg_V0_1_0().translate("wdl", allow_empty_container=True)

