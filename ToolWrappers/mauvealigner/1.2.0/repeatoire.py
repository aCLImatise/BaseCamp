from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Float, File, String

Repeatoire_V0_1_0 = CommandToolBuilder(tool="repeatoire", base_command=["repeatoire"], inputs=[ToolInput(tag="in_allow_redundant", input_type=Int(optional=True), prefix="--allow-redundant", doc=InputDocumentation(doc="(=1)        allow redundant alignments?")), ToolInput(tag="in_chain", input_type=Int(optional=True), prefix="--chain", doc=InputDocumentation(doc="(=1)                  chain seeds?")), ToolInput(tag="in_extend", input_type=Int(optional=True), prefix="--extend", doc=InputDocumentation(doc="(=1)                 perform gapped extension on chains?")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc="(=-1)                size of window to use during gapped")), ToolInput(tag="in_gap_extend", input_type=Int(optional=True), prefix="--gapextend", doc=InputDocumentation(doc="(=0)              gap extension penalty")), ToolInput(tag="in__transition_homologous", input_type=Float(optional=True), prefix="--h", doc=InputDocumentation(doc="(=0.00800000038)          Transition to Homologous")), ToolInput(tag="in_highest", input_type=File(optional=True), prefix="--highest", doc=InputDocumentation(doc="(=procrast.highest) file containing highest scoring alignment\nfor each multiplicity")), ToolInput(tag="in_minimum_repeat_length", input_type=Int(optional=True), prefix="--l", doc=InputDocumentation(doc="(=1)                      minimum repeat length")), ToolInput(tag="in_large_repeats", input_type=Int(optional=True), prefix="--large-repeats", doc=InputDocumentation(doc="(=0)          optimize for large repeats")), ToolInput(tag="in_load_sml", input_type=File(optional=True), prefix="--load-sml", doc=InputDocumentation(doc="(=0)               try to load existing SML file?")), ToolInput(tag="in_only_direct", input_type=Int(optional=True), prefix="--onlydirect", doc=InputDocumentation(doc="(=0)             only process seed matches on same strand?")), ToolInput(tag="in_only_extended", input_type=Int(optional=True), prefix="--onlyextended", doc=InputDocumentation(doc="(=0)           only output extended matches?")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="procrastAligner output")), ToolInput(tag="in_percentid", input_type=Int(optional=True), prefix="--percentid", doc=InputDocumentation(doc="(=0)              min repeat family % id")), ToolInput(tag="in_novel_subsets", input_type=Int(optional=True), prefix="--novel-subsets", doc=InputDocumentation(doc="(=0)          find novel subset matches?")), ToolInput(tag="in_novel_matches", input_type=Int(optional=True), prefix="--novel-matches", doc=InputDocumentation(doc="(=1)          use novel matches found during gapped\nextension?")), ToolInput(tag="in_rmax", input_type=Int(optional=True), prefix="--rmax", doc=InputDocumentation(doc="(=500)                 maximum repeat multiplicity (max copy\nnumber)")), ToolInput(tag="in_rm_in", input_type=Int(optional=True), prefix="--rmin", doc=InputDocumentation(doc="(=2)                   minimum repeat multiplicity (min copy\nnumber)")), ToolInput(tag="in_seeds", input_type=File(optional=True), prefix="--seeds", doc=InputDocumentation(doc="seed output file")), ToolInput(tag="in_sequence", input_type=File(optional=True), prefix="--sequence", doc=InputDocumentation(doc="FastA sequence file")), ToolInput(tag="in_small_repeats", input_type=Int(optional=True), prefix="--small-repeats", doc=InputDocumentation(doc="(=0)          optimize for small repeats")), ToolInput(tag="in_score_out", input_type=String(optional=True), prefix="--score-out", doc=InputDocumentation(doc="output with corresponding score and\nalignment info")), ToolInput(tag="in_solid", input_type=Int(optional=True), prefix="--solid", doc=InputDocumentation(doc="(=0)                  use solid/exact seeds?")), ToolInput(tag="in_sp", input_type=Int(optional=True), prefix="--sp", doc=InputDocumentation(doc="(=0)                     minimum Sum-of-Pairs alignment score")), ToolInput(tag="in_tandem", input_type=Int(optional=True), prefix="--tandem", doc=InputDocumentation(doc="(=1)                 allow tandem repeats?")), ToolInput(tag="in_two_hits", input_type=Int(optional=True), prefix="--two-hits", doc=InputDocumentation(doc="(=0)               require two hits within w to trigger gapped\nextension?")), ToolInput(tag="in__transition_unrelated", input_type=Float(optional=True), prefix="--u", doc=InputDocumentation(doc="(=0.00100000005)          Transition to Unrelated")), ToolInput(tag="in_un_align", input_type=Int(optional=True), prefix="--unalign", doc=InputDocumentation(doc="(=1)                unalign non-homologous sequence?")), ToolInput(tag="in_max_gap_width", input_type=Int(optional=True), prefix="--w", doc=InputDocumentation(doc="(=0)                      max gap width")), ToolInput(tag="in_x_mfa", input_type=String(optional=True), prefix="--xmfa", doc=InputDocumentation(doc="XMFA format output")), ToolInput(tag="in_xml", input_type=String(optional=True), prefix="--xml", doc=InputDocumentation(doc="XML format output")), ToolInput(tag="in__seed_weight", input_type=Int(optional=True), prefix="--z", doc=InputDocumentation(doc="(=0)                      seed weight")), ToolInput(tag="in_extension", input_type=String(), position=0, doc=InputDocumentation(doc="--gapopen arg (=0)                gap open penalty"))], outputs=[ToolOutput(tag="out_seeds", output_type=File(optional=True), selector=InputSelector(input_to_select="in_seeds", type_hint=File()), doc=OutputDocumentation(doc="seed output file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Repeatoire_V0_1_0().translate("wdl", allow_empty_container=True)

