from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, String, Boolean

Progressivemauvestatic_V0_1_0 = CommandToolBuilder(tool="progressiveMauveStatic", base_command=["progressiveMauveStatic"], inputs=[ToolInput(tag="in_island_gap_size", input_type=Int(optional=True), prefix="--island-gap-size", doc=InputDocumentation(doc="Alignment gaps above this size in nucleotides are considered to be islands [20]")), ToolInput(tag="in_profile", input_type=File(optional=True), prefix="--profile", doc=InputDocumentation(doc="(Not yet implemented) Read an existing sequence alignment in XMFA format and align it to other sequences or alignments")), ToolInput(tag="in_apply_backbone", input_type=File(optional=True), prefix="--apply-backbone", doc=InputDocumentation(doc="Read an existing sequence alignment in XMFA format and apply backbone statistics to it")), ToolInput(tag="in_disable_backbone", input_type=String(optional=True), prefix="--disable-backbone", doc=InputDocumentation(doc="backbone detection")), ToolInput(tag="in_mums", input_type=String(optional=True), prefix="--mums", doc=InputDocumentation(doc="MUMs only, do not attempt to determine locally collinear blocks (LCBs)")), ToolInput(tag="in_seed_weight", input_type=Int(optional=True), prefix="--seed-weight", doc=InputDocumentation(doc="Use the specified seed weight for calculating initial anchors")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file name.  Prints to screen by default")), ToolInput(tag="in_backbone_output", input_type=File(optional=True), prefix="--backbone-output", doc=InputDocumentation(doc="Backbone output file name (optional).")), ToolInput(tag="in_match_input", input_type=File(optional=True), prefix="--match-input", doc=InputDocumentation(doc="Use specified match file instead of searching for matches")), ToolInput(tag="in_max_gapped_aligner_length", input_type=Int(optional=True), prefix="--max-gapped-aligner-length", doc=InputDocumentation(doc="Maximum number of base pairs to attempt aligning with the gapped aligner")), ToolInput(tag="in_input_guide_tree", input_type=File(optional=True), prefix="--input-guide-tree", doc=InputDocumentation(doc="A phylogenetic guide tree in NEWICK format that describes the order in which sequences will be aligned")), ToolInput(tag="in_output_guide_tree", input_type=File(optional=True), prefix="--output-guide-tree", doc=InputDocumentation(doc="Write out the guide tree used for alignment to a file")), ToolInput(tag="in_debug", input_type=String(optional=True), prefix="--debug", doc=InputDocumentation(doc="in debug mode (perform internal consistency checks--very slow)")), ToolInput(tag="in_scratch_path_one", input_type=File(optional=True), prefix="--scratch-path-1", doc=InputDocumentation(doc="Designate a path that can be used for temporary data storage.  Two or more paths should be specified.")), ToolInput(tag="in_scratch_path_two", input_type=File(optional=True), prefix="--scratch-path-2", doc=InputDocumentation(doc="Designate a path that can be used for temporary data storage.  Two or more paths should be specified.")), ToolInput(tag="in_collinear", input_type=String(optional=True), prefix="--collinear", doc=InputDocumentation(doc="that input sequences are collinear--they have no rearrangements")), ToolInput(tag="in_scoring_scheme", input_type=String(optional=True), prefix="--scoring-scheme", doc=InputDocumentation(doc="Selects the anchoring score function.  Default is extant sum-of-pairs (sp).")), ToolInput(tag="in_no_weight_scaling", input_type=String(optional=True), prefix="--no-weight-scaling", doc=InputDocumentation(doc="'t scale LCB weights by conservation distance and breakpoint distance")), ToolInput(tag="in_max_breakpoint_distance_scale", input_type=Boolean(optional=True), prefix="--max-breakpoint-distance-scale", doc=InputDocumentation(doc="=<number [0,1]> Set the maximum weight scaling by breakpoint distance.  Defaults to 0.5")), ToolInput(tag="in_conservation_distance_scale", input_type=Boolean(optional=True), prefix="--conservation-distance-scale", doc=InputDocumentation(doc="=<number [0,1]> Scale conservation distances by this amount.  Defaults to 0.5")), ToolInput(tag="in_muscle_args", input_type=String(optional=True), prefix="--muscle-args", doc=InputDocumentation(doc="Additional command-line options for MUSCLE.  Any quotes should be escaped with a backslash")), ToolInput(tag="in_skip_refinement", input_type=String(optional=True), prefix="--skip-refinement", doc=InputDocumentation(doc="not perform iterative refinement")), ToolInput(tag="in_skip_gapped_alignment", input_type=String(optional=True), prefix="--skip-gapped-alignment", doc=InputDocumentation(doc="not perform gapped alignment")), ToolInput(tag="in_bp_dist_estimate_min_score", input_type=Int(optional=True), prefix="--bp-dist-estimate-min-score", doc=InputDocumentation(doc="Minimum LCB score for estimating pairwise breakpoint distance")), ToolInput(tag="in_mem_clean", input_type=String(optional=True), prefix="--mem-clean", doc=InputDocumentation(doc="this to true when debugging memory allocations")), ToolInput(tag="in_gap_open", input_type=Int(optional=True), prefix="--gap-open", doc=InputDocumentation(doc="Gap open penalty")), ToolInput(tag="in_repeat_penalty", input_type=String(optional=True), prefix="--repeat-penalty", doc=InputDocumentation(doc="Sets whether the repeat scores go negative or go to zero for highly repetitive sequences.  Default is negative.")), ToolInput(tag="in_gap_extend", input_type=Int(optional=True), prefix="--gap-extend", doc=InputDocumentation(doc="Gap extend penalty")), ToolInput(tag="in_substitution_matrix", input_type=File(optional=True), prefix="--substitution-matrix", doc=InputDocumentation(doc="Nucleotide substitution matrix in NCBI format")), ToolInput(tag="in_weight", input_type=Int(optional=True), prefix="--weight", doc=InputDocumentation(doc="Minimum pairwise LCB score")), ToolInput(tag="in_min_scaled_penalty", input_type=Int(optional=True), prefix="--min-scaled-penalty", doc=InputDocumentation(doc="Minimum breakpoint penalty after scaling the penalty by expected divergence")), ToolInput(tag="in_hmm_p_go_homologous", input_type=Int(optional=True), prefix="--hmm-p-go-homologous", doc=InputDocumentation(doc="Probability of transitioning from the unrelated to the homologous state [0.00001]")), ToolInput(tag="in_hmm_p_go_unrelated", input_type=Int(optional=True), prefix="--hmm-p-go-unrelated", doc=InputDocumentation(doc="Probability of transitioning from the homologous to the unrelated state [0.000000001]")), ToolInput(tag="in_hmm_identity", input_type=Int(optional=True), prefix="--hmm-identity", doc=InputDocumentation(doc="Expected level of sequence identity among pairs of sequences, ranging between 0 and 1 [0.7]")), ToolInput(tag="in_seed_family", input_type=String(optional=True), prefix="--seed-family", doc=InputDocumentation(doc="a family of spaced seeds to improve sensitivity")), ToolInput(tag="in_solid_seeds", input_type=String(optional=True), prefix="--solid-seeds", doc=InputDocumentation(doc="solid seeds. Do not permit substitutions in anchor matches.")), ToolInput(tag="in_coding_seeds", input_type=Int(optional=True), prefix="--coding-seeds", doc=InputDocumentation(doc="coding pattern seeds. Useful to generate matches coding regions with 3rd codon position degeneracy.")), ToolInput(tag="in_disable_cache", input_type=String(optional=True), prefix="--disable-cache", doc=InputDocumentation(doc="recursive anchor search cacheing to workaround a crash bug")), ToolInput(tag="in_no_recursion", input_type=String(optional=True), prefix="--no-recursion", doc=InputDocumentation(doc="recursive anchor search"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file name.  Prints to screen by default")), ToolOutput(tag="out_backbone_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_backbone_output", type_hint=File()), doc=OutputDocumentation(doc="Backbone output file name (optional).")), ToolOutput(tag="out_output_guide_tree", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_guide_tree", type_hint=File()), doc=OutputDocumentation(doc="Write out the guide tree used for alignment to a file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Progressivemauvestatic_V0_1_0().translate("wdl", allow_empty_container=True)

