from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Float, Int, Array, String, Directory

Refgenie_Build_V0_1_0 = CommandToolBuilder(tool="refgenie_build", base_command=["refgenie", "build"], inputs=[ToolInput(tag="in_genome_config", input_type=File(optional=True), prefix="--genome-config", doc=InputDocumentation(doc="Path to local genome configuration file. Optional if\nREFGENIE environment variable is set.")), ToolInput(tag="in_recover", input_type=Boolean(optional=True), prefix="--recover", doc=InputDocumentation(doc="Overwrite locks to recover from previous failed run")), ToolInput(tag="in_config", input_type=File(optional=True), prefix="--config", doc=InputDocumentation(doc="Pipeline configuration file (YAML). Relative paths are\nwith respect to the pipeline script.")), ToolInput(tag="in_new_start", input_type=Boolean(optional=True), prefix="--new-start", doc=InputDocumentation(doc="Overwrite all results to start a fresh run")), ToolInput(tag="in_tag_description", input_type=Float(optional=True), prefix="--tag-description", doc=InputDocumentation(doc="Add tag level description (e.g. built with version\n0.3.2).")), ToolInput(tag="in_genome_description", input_type=Int(optional=True), prefix="--genome-description", doc=InputDocumentation(doc="Add genome level description (e.g. The mouse\nmitochondrial genome, released in Dec 2013).")), ToolInput(tag="in_docker", input_type=Boolean(optional=True), prefix="--docker", doc=InputDocumentation(doc="Run all commands in the refgenie docker container.")), ToolInput(tag="in_assets", input_type=Array(t=String(), optional=True), prefix="--assets", doc=InputDocumentation(doc="Override the default genome, asset and tag of the\nparents (e.g. fasta=hg38/fasta:default\ngtf=mm10/gencode_gtf:default).")), ToolInput(tag="in_files", input_type=Array(t=String(), optional=True), prefix="--files", doc=InputDocumentation(doc="Provide paths to the required files (e.g.\nfasta=/path/to/file.fa.gz).")), ToolInput(tag="in_params", input_type=Array(t=String(), optional=True), prefix="--params", doc=InputDocumentation(doc="Provide required parameter values (e.g.\nparam1=value1).")), ToolInput(tag="in_volumes", input_type=Array(t=String(), optional=True), prefix="--volumes", doc=InputDocumentation(doc="If using docker, also mount these folders as volumes.")), ToolInput(tag="in_out_folder", input_type=Directory(optional=True), prefix="--outfolder", doc=InputDocumentation(doc="Override the default path to genomes folder, which is\nthe genome_folder attribute in the genome\nconfiguration file.")), ToolInput(tag="in_requirements", input_type=Boolean(optional=True), prefix="--requirements", doc=InputDocumentation(doc="Show the build requirements for the specified asset\nand exit.")), ToolInput(tag="in_recipe", input_type=String(optional=True), prefix="--recipe", doc=InputDocumentation(doc="Provide a recipe to use.")), ToolInput(tag="in_genome", input_type=Int(optional=True), prefix="--genome", doc=InputDocumentation(doc="Reference assembly ID, e.g. mm10.\n")), ToolInput(tag="in_asset_registry_paths", input_type=String(), position=0, doc=InputDocumentation(doc="One or more registry path strings that identify assets\n(e.g. hg38/fasta or hg38/fasta:tag)."))], outputs=[ToolOutput(tag="out_out_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out_folder", type_hint=File()), doc=OutputDocumentation(doc="Override the default path to genomes folder, which is\nthe genome_folder attribute in the genome\nconfiguration file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Refgenie_Build_V0_1_0().translate("wdl", allow_empty_container=True)

