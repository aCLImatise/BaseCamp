from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Pancake_Ovl_Hifi_V0_1_0 = CommandToolBuilder(tool="pancake_ovl_hifi", base_command=["pancake", "ovl-hifi"], inputs=[ToolInput(tag="in_out_fmt", input_type=Boolean(optional=True), prefix="--out-fmt", doc=InputDocumentation(doc="STR    Select the output format. Valid choices: (m4, ipa, paf, sam). [m4]")), ToolInput(tag="in_freq_percentile", input_type=Boolean(optional=True), prefix="--freq-percentile", doc=InputDocumentation(doc="FLOAT  Filter frequent kmers. [0.0002]")), ToolInput(tag="in_min_qlen", input_type=Boolean(optional=True), prefix="--min-qlen", doc=InputDocumentation(doc="INT    Ignore queries shorter than this. [50]")), ToolInput(tag="in_min_tlen", input_type=Boolean(optional=True), prefix="--min-tlen", doc=InputDocumentation(doc="INT    Ignore targets shorter than this. [50]")), ToolInput(tag="in_max_seed_dist", input_type=Boolean(optional=True), prefix="--max-seed-dist", doc=InputDocumentation(doc="INT    Maximum distance between two seeds to join into an anchor. [5000]")), ToolInput(tag="in_min_num_seeds", input_type=Boolean(optional=True), prefix="--min-num-seeds", doc=InputDocumentation(doc="INT    Minimum number of seeds in an anchor. [3]")), ToolInput(tag="in_min_cov_bases", input_type=Boolean(optional=True), prefix="--min-cov-bases", doc=InputDocumentation(doc="INT    Minimum number of bases covered by kmers in an anchor. [30]")), ToolInput(tag="in_min_anchor_span", input_type=Boolean(optional=True), prefix="--min-anchor-span", doc=InputDocumentation(doc="INT    Minimum chain span to retain it. [1000]")), ToolInput(tag="in_chain_bw", input_type=Boolean(optional=True), prefix="--chain-bw", doc=InputDocumentation(doc="INT    Diagonal bandwidth to merge seeds into chains. [100]")), ToolInput(tag="in_aln_bw", input_type=Boolean(optional=True), prefix="--aln-bw", doc=InputDocumentation(doc="FLOAT  Bandwidth for alignment, fraction of the query span. [0.01]")), ToolInput(tag="in_aln_diff_rate", input_type=Boolean(optional=True), prefix="--aln-diff-rate", doc=InputDocumentation(doc="FLOAT  Expected maximum diff rate between sequences. [0.03]")), ToolInput(tag="in_min_idt", input_type=Boolean(optional=True), prefix="--min-idt", doc=InputDocumentation(doc="FLOAT  Minimum percent alignment identity allowed to report the alignment. This is an\noverall threshold which takes into account both indels and SNPs. [98]")), ToolInput(tag="in_no_snps", input_type=Boolean(optional=True), prefix="--no-snps", doc=InputDocumentation(doc="Ignore SNPs when computing the identity for an overlap. This only works in the\ntraceback mode.")), ToolInput(tag="in_no_indels", input_type=Boolean(optional=True), prefix="--no-indels", doc=InputDocumentation(doc="Ignore indels when computing the identity for an overlap. This only works in the\ntraceback mode.")), ToolInput(tag="in_min_map_len", input_type=Boolean(optional=True), prefix="--min-map-len", doc=InputDocumentation(doc="INT    Output only alignments above this length. [1000]")), ToolInput(tag="in_skip_sym", input_type=Boolean(optional=True), prefix="--skip-sym", doc=InputDocumentation(doc="If Aid < Bid, only compute overlap Aid->Bid and skip computing overlap for\nBid->Aid.")), ToolInput(tag="in_allow_self_hits", input_type=Boolean(optional=True), prefix="--allow-self-hits", doc=InputDocumentation(doc="If both the query and the target DBs are the same and Aid == Bid then this is a\nself-hit. This option enables the output of such overlaps.")), ToolInput(tag="in_one_hit_per_target", input_type=Boolean(optional=True), prefix="--one-hit-per-target", doc=InputDocumentation(doc="Allow only one alignment per query/target pair.")), ToolInput(tag="in_write_rev", input_type=Boolean(optional=True), prefix="--write-rev", doc=InputDocumentation(doc="For eveery overlap, write out its reverse complement too.")), ToolInput(tag="in_write_ids", input_type=Boolean(optional=True), prefix="--write-ids", doc=InputDocumentation(doc="Output overlaps will contain numeric IDs for the A and B reads (instead of names).")), ToolInput(tag="in_write_cigar", input_type=Boolean(optional=True), prefix="--write-cigar", doc=InputDocumentation(doc="Write the CIGAR string if the sensitive alignment mode is applied.")), ToolInput(tag="in_dt_dist", input_type=Boolean(optional=True), prefix="--dt-dist", doc=InputDocumentation(doc="INT    Allowed distance of an overlap from the beginning of the sequences to call the\noverlap a dovetail. [0]")), ToolInput(tag="in_ext_dist", input_type=Boolean(optional=True), prefix="--ext-dist", doc=InputDocumentation(doc="INT    Heuristically modify the coordinats of an overlap into a dovetail overlap if are\nwithin this distance from the edges of the reads. [0]")), ToolInput(tag="in_combine", input_type=Boolean(optional=True), prefix="--combine", doc=InputDocumentation(doc="INT    Combines this many query blocks into one larger block for processing. [1]")), ToolInput(tag="in_best_n", input_type=Boolean(optional=True), prefix="--bestn", doc=InputDocumentation(doc="INT    Output only best N alignments. [0]")), ToolInput(tag="in_use_hpc", input_type=Boolean(optional=True), prefix="--use-hpc", doc=InputDocumentation(doc="Enable homopolymer compression.")), ToolInput(tag="in_traceback", input_type=Boolean(optional=True), prefix="--traceback", doc=InputDocumentation(doc="Run alignment traceback and compute mismatches.")), ToolInput(tag="in_mask_hp", input_type=Boolean(optional=True), prefix="--mask-hp", doc=InputDocumentation(doc="Mask homopolymer errors when traceback is generated. This will impact identity")), ToolInput(tag="in_mask_hp_snps", input_type=Boolean(optional=True), prefix="--mask-hp-snps", doc=InputDocumentation(doc="Mask mismatches which occur in the homopolymer sequences. Applied only when\ntraceback is generated. This will impact identity calculation.")), ToolInput(tag="in_mask_hp_arbitrary", input_type=Boolean(optional=True), prefix="--mask-hp-arbitrary", doc=InputDocumentation(doc="Allows arbitrary bases to be inserted into the HP stretches (the bases don't have\nto match the HP). Only used in combination with '--mask-hp'.")), ToolInput(tag="in_mark_secondary", input_type=Boolean(optional=True), prefix="--mark-secondary", doc=InputDocumentation(doc="Mask homopolymer errors when traceback is generated. This will impact identity")), ToolInput(tag="in_secondary_min_score_frac", input_type=Boolean(optional=True), prefix="--secondary-min-score-frac", doc=InputDocumentation(doc="FLOAT  Minimum secondary-to-primary score ratio. [0.8]")), ToolInput(tag="in_trim", input_type=Boolean(optional=True), prefix="--trim", doc=InputDocumentation(doc="Applies window-based trimming of the front and end of the alignment. Can be used\nonly in combination with '--traceback'.")), ToolInput(tag="in_trim_window_size", input_type=Boolean(optional=True), prefix="--trim-window-size", doc=InputDocumentation(doc="INT    Window size for trimming. [30]")), ToolInput(tag="in_trim_match_frac", input_type=Boolean(optional=True), prefix="--trim-match-frac", doc=InputDocumentation(doc="FLOAT  Minimum fraction in a trimming window of match bases to stop trimming. [0.75]")), ToolInput(tag="in_trim_to_first_match", input_type=Boolean(optional=True), prefix="--trim-to-first-match", doc=InputDocumentation(doc="When trimming is applied, this option ensures that the first non-trimmed base will\nbe a match operation. Can be used only in combination with '--trim'.")), ToolInput(tag="in_num_threads", input_type=Boolean(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="INT    Number of threads to use, 0 means autodetection. [0]")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="STR    Set log level. Valid choices: (TRACE, DEBUG, INFO, WARN, FATAL). [WARN]")), ToolInput(tag="in_log_file", input_type=Boolean(optional=True), prefix="--log-file", doc=InputDocumentation(doc="FILE   Log to a file, instead of stderr.")), ToolInput(tag="in_target_prefix", input_type=String(), position=0, doc=InputDocumentation(doc="STR    Prefix of the target SeqDB and SeedDB files. It should match.")), ToolInput(tag="in_query_prefix", input_type=String(), position=1, doc=InputDocumentation(doc="STR    Prefix of the query SeqDB and SeedDB files. It should match.")), ToolInput(tag="in_target_block", input_type=String(), position=2, doc=InputDocumentation(doc="INT    Block ID from the target DB. Queries will be mapped only onto this block.")), ToolInput(tag="in_query_block_start", input_type=String(), position=3, doc=InputDocumentation(doc="INT    Start block ID for a range of blocks to map. Zero based.")), ToolInput(tag="in_query_block_end", input_type=String(), position=4, doc=InputDocumentation(doc="INT    Start block ID for a range of blocks to map. Zero based, non-inclusive. Value == 0\nruns until the end block."))], outputs=[], container="quay.io/biocontainers/pbipa:1.3.2--hee625c5_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pancake_Ovl_Hifi_V0_1_0().translate("wdl")

