from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int, Float

Ssu_Cmalign_V0_1_0 = CommandToolBuilder(tool="ssu_cmalign", base_command=["ssu-cmalign"], inputs=[ToolInput(tag="in_output_alignment_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc=": output the alignment to file <f>, not stdout")), ToolInput(tag="in_align_locally_model", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc=": align locally w.r.t. the model")), ToolInput(tag="in_quiet_suppress_banner", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc=": quiet; suppress banner and scores, print only the alignment")), ToolInput(tag="in_metacm_mode_cmfile", input_type=String(optional=True), prefix="-M", doc=InputDocumentation(doc=": meta-cm mode: <cmfile> is a meta-cm built from aln in <f>")), ToolInput(tag="in_i_leaved", input_type=Boolean(optional=True), prefix="--ileaved", doc=InputDocumentation(doc=": output alnment in interleaved Stockholm format (not 1 line/seq)")), ToolInput(tag="in_no_prob", input_type=Boolean(optional=True), prefix="--no-prob", doc=InputDocumentation(doc=": do not append posterior probabilities to alignment")), ToolInput(tag="in_in_format", input_type=File(optional=True), prefix="--informat", doc=InputDocumentation(doc=": specify the input file is in format <x>, not FASTA")), ToolInput(tag="in_chunk", input_type=Int(optional=True), prefix="--chunk", doc=InputDocumentation(doc=": num seqs for each temp alnment, for saving memory  [1000]")), ToolInput(tag="in_devhelp", input_type=Boolean(optional=True), prefix="--devhelp", doc=InputDocumentation(doc=": show list of undocumented developer options")), ToolInput(tag="in_opt_acc", input_type=Boolean(optional=True), prefix="--optacc", doc=InputDocumentation(doc=": align with the Holmes/Durbin optimal accuracy algorithm")), ToolInput(tag="in_cy_k", input_type=Boolean(optional=True), prefix="--cyk", doc=InputDocumentation(doc=": align with the CYK algorithm")), ToolInput(tag="in_sample", input_type=Boolean(optional=True), prefix="--sample", doc=InputDocumentation(doc=": sample alignment of each seq from posterior distribution")), ToolInput(tag="in_wsample_set_seed", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc=": w/--sample, set RNG seed to <n> (if 0: one-time arbitrary seed)")), ToolInput(tag="in_viterbi", input_type=Boolean(optional=True), prefix="--viterbi", doc=InputDocumentation(doc=": align to a CM Plan 9 HMM with the Viterbi algorithm")), ToolInput(tag="in_sub", input_type=Boolean(optional=True), prefix="--sub", doc=InputDocumentation(doc=": build sub CM for columns b/t HMM predicted start/end points")), ToolInput(tag="in_small", input_type=Boolean(optional=True), prefix="--small", doc=InputDocumentation(doc=": use divide and conquer (d&c) alignment algorithm")), ToolInput(tag="in_h_banded", input_type=Boolean(optional=True), prefix="--hbanded", doc=InputDocumentation(doc=": accelerate using CM plan 9 HMM derived bands  [default]")), ToolInput(tag="in_non_banded", input_type=Boolean(optional=True), prefix="--nonbanded", doc=InputDocumentation(doc=": do not use bands to accelerate aln algorithm")), ToolInput(tag="in_tau", input_type=Float(optional=True), prefix="--tau", doc=InputDocumentation(doc=": set tail loss prob for --hbanded to <x>  [1E-7]  (0<x<1)")), ToolInput(tag="in_mx_size", input_type=Int(optional=True), prefix="--mxsize", doc=InputDocumentation(doc=": set maximum allowable DP matrix size to <x> Mb  [2048.0]  (x>0.)")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="--rna", doc=InputDocumentation(doc=": output alignment as RNA sequence data")), ToolInput(tag="in_dna", input_type=Boolean(optional=True), prefix="--dna", doc=InputDocumentation(doc=": output alignment as DNA (not RNA) sequence data")), ToolInput(tag="in_match_only", input_type=Boolean(optional=True), prefix="--matchonly", doc=InputDocumentation(doc=": include only match columns in output alignment")), ToolInput(tag="in_with_ali", input_type=File(optional=True), prefix="--withali", doc=InputDocumentation(doc=": incl. alignment in <f> (must be aln <cm file> was built from)")), ToolInput(tag="in_with_p_knots", input_type=Boolean(optional=True), prefix="--withpknots", doc=InputDocumentation(doc=": incl. structure (w/pknots) from <f> from --withali <f>")), ToolInput(tag="in_rf", input_type=Boolean(optional=True), prefix="--rf", doc=InputDocumentation(doc=": --rf was originally used with cmbuild")), ToolInput(tag="in_gap_thresh", input_type=Float(optional=True), prefix="--gapthresh", doc=InputDocumentation(doc=": --gapthresh <x> was originally used with cmbuild  [0.5]")), ToolInput(tag="in_cm_idx", input_type=Int(optional=True), prefix="--cm-idx", doc=InputDocumentation(doc=": only align seqs with CM number <n>    in the CM file  (n>0)")), ToolInput(tag="in_cm_name", input_type=File(optional=True), prefix="--cm-name", doc=InputDocumentation(doc=": only align seqs with the CM named <s> in the CM file")), ToolInput(tag="in_t_file", input_type=File(optional=True), prefix="--tfile", doc=InputDocumentation(doc=": dump individual sequence parsetrees to file <f>")), ToolInput(tag="in_i_file", input_type=File(optional=True), prefix="--ifile", doc=InputDocumentation(doc=": dump information on per-sequence inserts to file <f>")), ToolInput(tag="in_el_file", input_type=File(optional=True), prefix="--elfile", doc=InputDocumentation(doc=": dump information on per-sequence EL inserts to file <f>")), ToolInput(tag="in_s_file", input_type=File(optional=True), prefix="--sfile", doc=InputDocumentation(doc=": dump alignment score information to file <f>")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc="")), ToolInput(tag="in_cm_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_sequence_file", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_alignment_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_alignment_file", type_hint=File()), doc=OutputDocumentation(doc=": output the alignment to file <f>, not stdout"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ssu_Cmalign_V0_1_0().translate("wdl", allow_empty_container=True)

