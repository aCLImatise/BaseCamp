from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Ssu_Cmemit_V0_1_0 = CommandToolBuilder(tool="ssu_cmemit", base_command=["ssu-cmemit"], inputs=[ToolInput(tag="in__generate_sequences", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc=": generate <n> sequences  [10]  (n>0)")), ToolInput(tag="in_write_generated_sequences_unaligned", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc=": write generated sequences as unaligned FASTA  [default]")), ToolInput(tag="in_write_generated_sequences_stockholm", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc=": write generated sequences as a STOCKHOLM alignment")), ToolInput(tag="in_generate_single_sequence", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc=": generate a single 'consensus' sequence only")), ToolInput(tag="in_local_emit_locally", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc=": local; emit from a locally configured model")), ToolInput(tag="in_start_sequence_numbering", input_type=Int(optional=True), prefix="-i", doc=InputDocumentation(doc=": start sequence numbering at <n>  [1]  (n>0)")), ToolInput(tag="in_set_random_seed", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc=": set random number generator seed to <n>  [0]  (n>=0)")), ToolInput(tag="in_devhelp", input_type=Boolean(optional=True), prefix="--devhelp", doc=InputDocumentation(doc=": show list of otherwise undocumented developer options")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="--rna", doc=InputDocumentation(doc=": output alignment as RNA sequence data  [default]")), ToolInput(tag="in_dna", input_type=Boolean(optional=True), prefix="--dna", doc=InputDocumentation(doc=": output alignment as DNA (not RNA) sequence data")), ToolInput(tag="in_i_leaved", input_type=Boolean(optional=True), prefix="--ileaved", doc=InputDocumentation(doc=": with -a, output alnment in interleaved Stockholm format")), ToolInput(tag="in_t_file", input_type=File(optional=True), prefix="--tfile", doc=InputDocumentation(doc=": dump parsetrees to file <f>")), ToolInput(tag="in_exp", input_type=Int(optional=True), prefix="--exp", doc=InputDocumentation(doc=": exponentiate CM probabilities by <x> before emitting  (x>0)")), ToolInput(tag="in_begin", input_type=Int(optional=True), prefix="--begin", doc=InputDocumentation(doc=": truncate alignment, begin at match column <n>  (n>=1)")), ToolInput(tag="in_end", input_type=Int(optional=True), prefix="--end", doc=InputDocumentation(doc=": truncate alignment,   end at match column <n>  (n>=1)")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc="")), ToolInput(tag="in_cm_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_sequence_output_file", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_sequence_output_file", output_type=File(), selector=InputSelector(input_to_select="in_sequence_output_file", type_hint=File()), doc=OutputDocumentation(doc=""))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ssu_Cmemit_V0_1_0().translate("wdl", allow_empty_container=True)

