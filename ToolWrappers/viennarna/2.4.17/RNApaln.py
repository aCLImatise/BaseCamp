from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, File

Rnapaln_V0_1_0 = CommandToolBuilder(tool="RNApaln", base_command=["RNApaln"], inputs=[ToolInput(tag="in_detailed_help", input_type=Boolean(optional=True), prefix="--detailed-help", doc=InputDocumentation(doc="Print help, including all details and hidden\noptions, and exit")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--full-help", doc=InputDocumentation(doc="Print help, including hidden options, and exit")), ToolInput(tag="in_noconv", input_type=Boolean(optional=True), prefix="--noconv", doc=InputDocumentation(doc="Do not automatically substitude nucleotide\n'T' with 'U'\n(default=off)")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Set the alignment mode to be used")), ToolInput(tag="in_gap_o", input_type=String(optional=True), prefix="--gapo", doc=InputDocumentation(doc="Set the gap open penalty")), ToolInput(tag="in_gape", input_type=String(optional=True), prefix="--gape", doc=InputDocumentation(doc="Set the gap extension penalty")), ToolInput(tag="in_seq_w", input_type=String(optional=True), prefix="--seqw", doc=InputDocumentation(doc="Set the weight of sequence (compared to\nstructure) in the scoring function.")), ToolInput(tag="in_end_gaps", input_type=Boolean(optional=True), prefix="--endgaps", doc=InputDocumentation(doc="Use free end-gaps\n(default=off)")), ToolInput(tag="in_temp", input_type=Int(optional=True), prefix="--temp", doc=InputDocumentation(doc="Rescale energy parameters to a temperature of\ntemp C. Default is 37C.")), ToolInput(tag="in_no_tetra", input_type=Boolean(optional=True), prefix="--noTetra", doc=InputDocumentation(doc="Do not include special tabulated stabilizing\nenergies for tri-, tetra- and hexaloop\nhairpins. Mostly for testing.\n(default=off)")), ToolInput(tag="in_dangles", input_type=Int(optional=True), prefix="--dangles", doc=InputDocumentation(doc="How to treat 'dangling end' energies for\nbases adjacent to helices in free ends and\nmulti-loops\n(default=`2')")), ToolInput(tag="in_no_lp", input_type=Boolean(optional=True), prefix="--noLP", doc=InputDocumentation(doc="Produce structures without lonely pairs\n(helices of length 1).\n(default=off)")), ToolInput(tag="in_no_gu", input_type=Boolean(optional=True), prefix="--noGU", doc=InputDocumentation(doc="Do not allow GU pairs\n(default=off)")), ToolInput(tag="in_no_closing_gu", input_type=Boolean(optional=True), prefix="--noClosingGU", doc=InputDocumentation(doc="Do not allow GU pairs at the end of helices\n(default=off)")), ToolInput(tag="in_param_file", input_type=File(optional=True), prefix="--paramFile", doc=InputDocumentation(doc="Read energy parameters from paramfile, instead\nof using the default parameter set.")), ToolInput(tag="in_program", input_type=String(), position=0, doc=InputDocumentation(doc="-B, --printAlignment[=filename]\nPrint an 'alignment' with gaps of the\nprofiles\nThe aligned structures are written to\nfilename, if specified\nOtherwise output is written to stdout, unless\nthe -Xm option is set in which case\n'backtrack.file' is used.\n(default=`stdout')"))], outputs=[], container="quay.io/biocontainers/viennarna:2.4.17--py36hd181a71_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rnapaln_V0_1_0().translate("wdl")

