from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int, Float

Rnalocmin_V0_1_0 = CommandToolBuilder(tool="RNAlocmin", base_command=["RNAlocmin"], inputs=[ToolInput(tag="in_detailed_help", input_type=Boolean(optional=True), prefix="--detailed-help", doc=InputDocumentation(doc="Print help, including all details and hidden\noptions, and exit")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--full-help", doc=InputDocumentation(doc="Print help, including hidden options, and exit")), ToolInput(tag="in_seq", input_type=File(optional=True), prefix="--seq", doc=InputDocumentation(doc="Sequence file in FASTA format. If the sequence is\nthe first line of the input file, this is not\nneeded  (default=`seq.txt')")), ToolInput(tag="in_previous", input_type=String(optional=True), prefix="--previous", doc=InputDocumentation(doc="Previously found LM (output from RNAlocmin or\nbarriers), if specified does not need --seq\noption")), ToolInput(tag="in_move", input_type=String(optional=True), prefix="--move", doc=InputDocumentation(doc="Move set:\nI ==> insertion & deletion of base pairs\nS ==> I&D& switch of base pairs  (possible\nvalues='I', 'S' default=`I')")), ToolInput(tag="in_min_num", input_type=Int(optional=True), prefix="--min-num", doc=InputDocumentation(doc="Maximal number of local minima returned\n(0 == unlimited)  (default=`100000')")), ToolInput(tag="in_find_num", input_type=Int(optional=True), prefix="--find-num", doc=InputDocumentation(doc="Maximal number of local minima found\n(default = unlimited - crawl through whole input\nfile)")), ToolInput(tag="in_verbose_lvl", input_type=Int(optional=True), prefix="--verbose-lvl", doc=InputDocumentation(doc="Level of verbosity (0 = nothing, 4 = full)\nWARNING: higher verbose levels increase the\ncomputation time  (default=`0')")), ToolInput(tag="in_depth", input_type=Int(optional=True), prefix="--depth", doc=InputDocumentation(doc="Depth of findpath search (higher value increases\nrunning time linearly)  (default=`10')")), ToolInput(tag="in_minh", input_type=String(optional=True), prefix="--minh", doc=InputDocumentation(doc="Print only minima with energy barrier greater than")), ToolInput(tag="in_walk", input_type=String(optional=True), prefix="--walk", doc=InputDocumentation(doc="Walking method used\nD ==> gradient descent\nF ==> use first found lower energy structure\nR ==> use random lower energy structure (does\nnot work with --noLP and -m S options)\n(possible values='D', 'F', 'R'\ndefault=`D')")), ToolInput(tag="in_no_lp", input_type=Boolean(optional=True), prefix="--noLP", doc=InputDocumentation(doc="Work only with canonical RNA structures (w/o\nisolated base pairs, cannot be combined with\nranodm walk (-w R option) and shift move set (-m\nS))  (default=off)")), ToolInput(tag="in_param_file", input_type=String(optional=True), prefix="--paramFile", doc=InputDocumentation(doc="Read energy parameters from paramfile, instead of\nusing the default parameter set")), ToolInput(tag="in_dangles", input_type=Int(optional=True), prefix="--dangles", doc=InputDocumentation(doc="How to treat 'dangling end' energies for bases\nadjacent to helices in free ends and multi-loops\n(default=`2')")), ToolInput(tag="in_pseudo_knots", input_type=Boolean(optional=True), prefix="--pseudoknots", doc=InputDocumentation(doc="Allow for pseudoknots according to 'gfold' model\n- H, K, L, and M types (genus one) of\npseudoknots are allowed (increases computation\ntime greatly), cannot be combined with shift\nmove set (-m S)  (default=off)")), ToolInput(tag="in_just_read", input_type=Boolean(optional=True), prefix="--just-read", doc=InputDocumentation(doc="Do not expect input from stdin, just do")), ToolInput(tag="in_neighborhood", input_type=Boolean(optional=True), prefix="--neighborhood", doc=InputDocumentation(doc="Use the Neighborhood routines to perform gradient\ndescend. Cannot be combined with shift move set\n(-m S) and pseudoknots (-k). Test option.\n(default=off)")), ToolInput(tag="in_degeneracy_off", input_type=Boolean(optional=True), prefix="--degeneracy-off", doc=InputDocumentation(doc="Do not deal with degeneracy, select the\nlexicographically first from the same energy\nneighbors.  (default=off)")), ToolInput(tag="in_just_output", input_type=File(optional=True), prefix="--just-output", doc=InputDocumentation(doc="Do not store the minima and optimize, just compute\ndirectly minima and output them. Output file can\ncontain duplicates.  (default=off)")), ToolInput(tag="in_bar_tree", input_type=Boolean(optional=True), prefix="--bartree", doc=InputDocumentation(doc="Generate an approximate barrier tree.\n(default=off)")), ToolInput(tag="in_barr_name", input_type=File(optional=True), prefix="--barr-name", doc=InputDocumentation(doc="Name of barrier tree output file, switches on -b")), ToolInput(tag="in_barrier_file", input_type=File(optional=True), prefix="--barrier-file", doc=InputDocumentation(doc="File for saddle heights between LM (simulates the\noutput format of barriers program)")), ToolInput(tag="in_rates", input_type=Boolean(optional=True), prefix="--rates", doc=InputDocumentation(doc="Create rates for treekin  (default=off)")), ToolInput(tag="in_rates_file", input_type=File(optional=True), prefix="--rates-file", doc=InputDocumentation(doc="File where to write rates, switches on -r flag\n(default=`rates.out')")), ToolInput(tag="in_temp", input_type=Float(optional=True), prefix="--temp", doc=InputDocumentation(doc="Temperature in Celsius (only for rates)\n(default=`37.0')")), ToolInput(tag="in_flood_portion", input_type=Int(optional=True), prefix="--floodPortion", doc=InputDocumentation(doc="Fraction of minima to flood (floods first minima\nwith low number of inwalking sample structures)\n(0.0 -> no flood; 1.0 -> try to flood all)\nUsable only with -r or -b options.\n(default=`0.95')")), ToolInput(tag="in_flood_max", input_type=Int(optional=True), prefix="--floodMax", doc=InputDocumentation(doc="Flood cap - how many structures to flood in one")), ToolInput(tag="in_e_range", input_type=Float(optional=True), prefix="--eRange", doc=InputDocumentation(doc="Report only LM, which energy is in range <MFE (or\nlowest found LM), MFE+eRange> in kcal/mol.\n")), ToolInput(tag="in_this", input_type=String(), position=0, doc=InputDocumentation(doc="(default=`0.0')")), ToolInput(tag="in_postprocessing_dot", input_type=String(), position=1, doc=InputDocumentation(doc="(default=off)")), ToolInput(tag="in_flag_dot", input_type=String(), position=0, doc=InputDocumentation(doc="(default=`treeRNAloc.ps')")), ToolInput(tag="in_basin", input_type=String(), position=0, doc=InputDocumentation(doc="(default=`1000')"))], outputs=[ToolOutput(tag="out_just_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_just_output", type_hint=File()), doc=OutputDocumentation(doc="Do not store the minima and optimize, just compute\ndirectly minima and output them. Output file can\ncontain duplicates.  (default=off)")), ToolOutput(tag="out_barr_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_barr_name", type_hint=File()), doc=OutputDocumentation(doc="Name of barrier tree output file, switches on -b")), ToolOutput(tag="out_barrier_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_barrier_file", type_hint=File()), doc=OutputDocumentation(doc="File for saddle heights between LM (simulates the\noutput format of barriers program)")), ToolOutput(tag="out_rates_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_rates_file", type_hint=File()), doc=OutputDocumentation(doc="File where to write rates, switches on -r flag\n(default=`rates.out')"))], container="quay.io/biocontainers/viennarna:2.4.17--py36hd181a71_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rnalocmin_V0_1_0().translate("wdl")

