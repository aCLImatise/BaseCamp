from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Rnaplot_V0_1_0 = CommandToolBuilder(tool="RNAplot", base_command=["RNAplot"], inputs=[ToolInput(tag="in_detailed_help", input_type=Boolean(optional=True), prefix="--detailed-help", doc=InputDocumentation(doc="Print help, including all details and hidden\noptions, and exit")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--full-help", doc=InputDocumentation(doc="Print help, including hidden options, and exit")), ToolInput(tag="in_jobs", input_type=Boolean(optional=True), prefix="--jobs", doc=InputDocumentation(doc="[=number]           Split batch input into jobs and start\nprocessing in parallel using multiple\nthreads. A value of 0 indicates to use as\nmany parallel threads as computation cores\nare available.\n(default=`0')")), ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--infile", doc=InputDocumentation(doc="Read a file instead of reading from stdin")), ToolInput(tag="in_msa", input_type=Boolean(optional=True), prefix="--msa", doc=InputDocumentation(doc="Input is multiple sequence alignment in\nStockholm 1.0 format\n(default=off)")), ToolInput(tag="in_mis", input_type=Boolean(optional=True), prefix="--mis", doc=InputDocumentation(doc="Output 'most informative sequence' instead of\nsimple consensus: For each column of the\nalignment output the set of nucleotides with\nfrequency greater than average in IUPAC\nnotation.\n(default=off)")), ToolInput(tag="in_co_var", input_type=Boolean(optional=True), prefix="--covar", doc=InputDocumentation(doc="Annotate covariance of base pairs in consensus")), ToolInput(tag="in_aln", input_type=Boolean(optional=True), prefix="--aln", doc=InputDocumentation(doc="Produce a colored and structure annotated\nalignment in PostScript format in the file\n'aln.ps' in the current directory.\n(default=off)")), ToolInput(tag="in_layout_type", input_type=Int(optional=True), prefix="--layout-type", doc=InputDocumentation(doc="Choose the layout algorithm.\n(default=`1')")), ToolInput(tag="in_no_optimization", input_type=Boolean(optional=True), prefix="--noOptimization", doc=InputDocumentation(doc="Disable the drawing space optimization of")), ToolInput(tag="in_ignore_exterior_intersections", input_type=Boolean(optional=True), prefix="--ignoreExteriorIntersections", doc=InputDocumentation(doc="Ignore intersections with the exterior loop\nwithin the RNA-tree.  (default=off)")), ToolInput(tag="in_ignore_ancestor_intersections", input_type=Boolean(optional=True), prefix="--ignoreAncestorIntersections", doc=InputDocumentation(doc="Ignore ancestor intersections within the\nRNA-tree.  (default=off)")), ToolInput(tag="in_ignore_sibling_intersections", input_type=Boolean(optional=True), prefix="--ignoreSiblingIntersections", doc=InputDocumentation(doc="Ignore sibling intersections within the\nRNA-tree  (default=off)")), ToolInput(tag="in_allow_flipping", input_type=Boolean(optional=True), prefix="--allowFlipping", doc=InputDocumentation(doc="Allow flipping of exterior loop branches to\nresolve exterior branch intersections.\n(default=off)")), ToolInput(tag="in_output_format", input_type=File(optional=True), prefix="--output-format", doc=InputDocumentation(doc="|gml|xrna|svg\nSpecify output format. Available formats are:\nPostScript (ps), Graph Meta Language (gml),\nScalable Vector Graphics (svg), and XRNA save\nfile (xrna). Output filenames will end in\n'.ps' '.gml' '.svg' '.ss',\nrespectively.\n(default=`ps')")), ToolInput(tag="in_pre", input_type=File(optional=True), prefix="--pre", doc=InputDocumentation(doc="Add annotation macros to postscript file, and\nadd the postscript code in 'string' just\nbefore the code to draw the structure. This\nis an easy way to add annotation.")), ToolInput(tag="in_post", input_type=Int(optional=True), prefix="--post", doc=InputDocumentation(doc="Same as --pre but in contrast to adding the\nannotation macros. E.g to mark position 15\nwith circle use --post '15 cmark'")), ToolInput(tag="in_auto_id", input_type=Boolean(optional=True), prefix="--auto-id", doc=InputDocumentation(doc="Automatically generate an ID for each sequence.\n(default=off)")), ToolInput(tag="in_id_prefix", input_type=File(optional=True), prefix="--id-prefix", doc=InputDocumentation(doc="Prefix for automatically generated IDs (as used\nin output file names)\n(default=`sequence')")), ToolInput(tag="in_structure", input_type=String(), position=0, doc=InputDocumentation(doc="(default=off)")), ToolInput(tag="in_rna_puzzler", input_type=String(), position=1, doc=InputDocumentation(doc="(default=off)"))], outputs=[ToolOutput(tag="out_output_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_format", type_hint=File()), doc=OutputDocumentation(doc="|gml|xrna|svg\nSpecify output format. Available formats are:\nPostScript (ps), Graph Meta Language (gml),\nScalable Vector Graphics (svg), and XRNA save\nfile (xrna). Output filenames will end in\n'.ps' '.gml' '.svg' '.ss',\nrespectively.\n(default=`ps')")), ToolOutput(tag="out_id_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_id_prefix", type_hint=File()), doc=OutputDocumentation(doc="Prefix for automatically generated IDs (as used\nin output file names)\n(default=`sequence')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rnaplot_V0_1_0().translate("wdl", allow_empty_container=True)

