from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Nanoplexer_V0_1_0 = CommandToolBuilder(tool="nanoplexer", base_command=["nanoplexer"], inputs=[ToolInput(tag="in_file_barcode_file", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="FILE    barcode file")), ToolInput(tag="in_file_dual_barcode", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="FILE    dual barcode pair file")), ToolInput(tag="in_char_output_path", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="CHAR    output path")), ToolInput(tag="in_file_output_log", input_type=File(optional=True), prefix="-l", doc=InputDocumentation(doc="FILE    output log file")), ToolInput(tag="in_char_output_mode", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="CHAR    output mode, fastq or fasta [default fastq]")), ToolInput(tag="in_num_batch_size", input_type=Boolean(optional=True), prefix="-B", doc=InputDocumentation(doc="NUM     batch size [default 400M]")), ToolInput(tag="in_int_number_threads", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="INT     number of threads [default 3]")), ToolInput(tag="in_int_target_length", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="INT     target length for detecting barcode [default 150]")), ToolInput(tag="in_int_match_score", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="INT     match score [default 2]")), ToolInput(tag="in_int_mismatch_score", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="INT     mismatch score [default 2]")), ToolInput(tag="in_int_gap_open", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="INT     gap open score [default 3]")), ToolInput(tag="in_int_gap_extension", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="INT     gap extension score [default 1]")), ToolInput(tag="in_int_minimal_alignment", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="INT     minimal alignment score for demultiplexing")), ToolInput(tag="in_ignore_parameter_estimation", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="ignore parameter estimation")), ToolInput(tag="in_show_version_number", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="show version number")), ToolInput(tag="in_input_dot_fast_q", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_char_output_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_char_output_path", type_hint=File()), doc=OutputDocumentation(doc="CHAR    output path")), ToolOutput(tag="out_file_output_log", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_output_log", type_hint=File()), doc=OutputDocumentation(doc="FILE    output log file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nanoplexer_V0_1_0().translate("wdl", allow_empty_container=True)

