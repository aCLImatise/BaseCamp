!Command
command:
- gatekeeper
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -a
  description: append to existing store
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  description: append to or create gkpStore
  args: !SimpleFlagArg
    name: gkpStore
- !Flag
  optional: true
  synonyms:
  - -T
  description: do not check minimum length (for OBT)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -F
  description: fix invalid insert size estimates
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -v
  description: "load vector clear ranges into each read.\nMUST be done on an existing,\
    \ complete store.\nexample: -a -v vectorfile -o that.gkpStore\nformat: 'UID vec-clr-begin\
    \ vec-clr-end'"
  args: !SimpleFlagArg
    name: vector-info
- !Flag
  optional: true
  synonyms:
  - -P
  description: a list of (partition fragiid)
  args: !SimpleFlagArg
    name: partitionfile
- !Flag
  optional: true
  synonyms:
  - -b
  description: dump starting at this library or read
  args: !SimpleFlagArg
    name: begin-iid
- !Flag
  optional: true
  synonyms:
  - -e
  description: dump stopping after this iid
  args: !SimpleFlagArg
    name: ending-iid
- !Flag
  optional: true
  synonyms:
  - -uid
  description: dump only objects listed in 'uid-file'
  args: !SimpleFlagArg
    name: uid-file
- !Flag
  optional: true
  synonyms:
  - -iid
  description: dump only objects listed in 'iid-file'
  args: !SimpleFlagArg
    name: iid-file
- !Flag
  optional: true
  synonyms:
  - -randommated
  description: <lib> <n> pick n mates (2n frags) at random from library lib
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -randomsubset
  description: <f> dump a random fraction f (0.0-1.0) of library lib
  args: !SimpleFlagArg
    name: lib
- !Flag
  optional: true
  synonyms:
  - -randomlength
  description: "<l> dump a random fraction of library lib, fraction picked\nso that\
    \ the untrimmed length is close to l bp"
  args: !SimpleFlagArg
    name: lib
- !Flag
  optional: true
  synonyms:
  - -longestovermin
  description: <n> pick all reads longer than n bp from library lib
  args: !SimpleFlagArg
    name: lib
- !Flag
  optional: true
  synonyms:
  - -longestlength
  description: <lib> <n> pick longest reads from library lib to add up to n total
    bp
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -deterministic
  description: use a constant seed for random subset dumps
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -tabular
  description: "dump info, libraries or fragments in a tabular\nformat (for -dumpinfo,\
    \ -dumplibraries,\nand -dumpfragments, ignores -withsequence and -clear)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -isfeatureset
  description: "<X> sets exit value to 0 if feature X is set in library libID, 1 otherwise.\n\
    If libID == 0, check all libraries."
  args: !SimpleFlagArg
    name: libID
- !Flag
  optional: true
  synonyms:
  - -nouid
  description: dump info without including the read UID (for -dumpinfo, -dumplibraries,
    -dumpfragments)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -dumpinfo
  description: print information on the store
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -lastfragiid
  description: just print the last IID in the store
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -dumplibraries
  description: dump all library records
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -dumpfragments
  description: dump fragment info, no sequence
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -withsequence
  description: '...and include sequence'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -clear
  description: '...in clear range <clr>, default=LATEST'
  args: !SimpleFlagArg
    name: clr
- !Flag
  optional: true
  synonyms:
  - -invert
  description: '...invert'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -dumpfasta
  description: dump fragment sequence and quality into <p.fasta> and <p.fasta.qual>
  args: !SimpleFlagArg
    name: prefix
- !Flag
  optional: true
  synonyms:
  - -allreads
  description: '...all reads, regardless of deletion status (deleted are lowercase)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -allbases
  description: '...all bases (lowercase for non-clear)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -decoded
  description: "...quality as integers ('20 21 19')"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -dumpfrg
  description: extract LIB, FRG and LKG messages
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -donotfixmates
  description: "...only extract the fragments given, do not add in\nmissing mated\
    \ reads"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -legacyformat
  description: '...extract using frg format version 1 (legacy format, for compatibility)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -dumpnewbler
  description: "extract LIB, FRG and LKG messages, write in a\nformat appropriate\
    \ for Newbler.  This will create\nfiles 'prefix.fna' and 'prefix.fna.qual'.  Options\n\
    -donotfixmates and -clear also apply."
  args: !SimpleFlagArg
    name: prefix
- !Flag
  optional: true
  synonyms:
  - -dumpfastq
  description: "extract LIB, FRG and LKG messages, write in FastQ format.  Currently\n\
    this works only on a store with one library as all the mated reads\nare dumped\
    \ into a single file. This will create files 'prefix.paired.fastq',\n'prefix.1.fastq',\
    \ 'prefix.2.fastq' and 'prefix.unmated.fastq' for unmated\nreads. Options -donotfixmates\
    \ and -clear also apply."
  args: !SimpleFlagArg
    name: prefix
- !Flag
  optional: true
  synonyms:
  - -withlibname
  description: "For -dumpfasta, -dumpnewbler and -dumpfastq, embed the libraryname\
    \ in the\ncreated files, e.g., prefix.libname.1.fastq for fastq files."
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "usage1: gatekeeper -o gkpStore [append/create options] <input.frg> <input.frg>\
  \ ...\nusage2: gatekeeper -P partitionfile gkpStore\nusage3: gatekeeper [id-selection]\
  \ [options] [format] gkpStore\n\n----------------------------------------------------------------------\n\
  The first usage will append to or create a GateKeeper store:\n  -a             \
  \        append to existing store\n  -o <gkpStore>          append to or create\
  \ gkpStore\n\n  -T                     do not check minimum length (for OBT)\n \
  \ -F                     fix invalid insert size estimates\n\n  -v <vector-info>\
  \       load vector clear ranges into each read.\n                         MUST\
  \ be done on an existing, complete store.\n                         example: -a\
  \ -v vectorfile -o that.gkpStore\n                         format: 'UID vec-clr-begin\
  \ vec-clr-end'\n\n----------------------------------------------------------------------\n\
  The second usage will partition an existing store, allowing\nthe entire store partition\
  \ to be loaded into memory.\n  -P <partitionfile>     a list of (partition fragiid)\n\
  \n----------------------------------------------------------------------\nThe third\
  \ usage will dump the contents of a GateKeeper store.\nThere are THREE components\
  \ to a dump, what to dump, options, and format.\nThe first two are optional, the\
  \ last is mandatory.  Examples:\n\n  Dump metainfo for the first 100 fragments\n\
  \    gatekeeper -b 1 -e 100 -tabular -dumpfragments my.gkpStore > first100.tsv\n\
  \n  Dump a random 25% of the reads in the first library\n    gatekeeper -randomsubset\
  \ 1 0.25 -dumpfrg my.gkpStore > random25.frg\n\n  Dump fasta sequence for the UIDs\
  \ in 'uidFile'\n    gatekeeper -uid uidFile -dumpfastaseq file -dumpfrg my.gkpStore\n\
  \n  -----------------------------------\n  [selection of what objects to dump]\n\
  \  -----------------------------------\n  -b <begin-iid>          dump starting\
  \ at this library or read\n  -e <ending-iid>         dump stopping after this iid\n\
  \  -uid <uid-file>         dump only objects listed in 'uid-file'\n  -iid <iid-file>\
  \         dump only objects listed in 'iid-file'\n  -randommated  <lib> <n> pick\
  \ n mates (2n frags) at random from library lib\n  -randomsubset <lib> <f> dump\
  \ a random fraction f (0.0-1.0) of library lib\n  -randomlength <lib> <l> dump a\
  \ random fraction of library lib, fraction picked\n                          so\
  \ that the untrimmed length is close to l bp\n  -longestovermin <lib> <n> pick all\
  \ reads longer than n bp from library lib\n  -longestlength  <lib> <n> pick longest\
  \ reads from library lib to add up to n total bp\n  -deterministic\t     use a constant\
  \ seed for random subset dumps\n\n  ---------\n  [options]\n  ---------\n  -tabular\
  \               dump info, libraries or fragments in a tabular\n               \
  \          format (for -dumpinfo, -dumplibraries,\n                         and\
  \ -dumpfragments, ignores -withsequence and -clear)\n  -isfeatureset <libID> <X>\
  \ sets exit value to 0 if feature X is set in library libID, 1 otherwise.\n    \
  \                    If libID == 0, check all libraries.\n  -nouid             \
  \   dump info without including the read UID (for -dumpinfo, -dumplibraries, -dumpfragments)\n\
  \n  ----------------\n  [format of dump]\n  ----------------\n  -dumpinfo      \
  \            print information on the store\n    -lastfragiid             just print\
  \ the last IID in the store\n  -dumplibraries             dump all library records\n\
  \  -dumpfragments             dump fragment info, no sequence\n    -withsequence\
  \              ...and include sequence\n    -clear <clr>               ...in clear\
  \ range <clr>, default=LATEST\n    -invert                    ...invert \n  -dumpfasta\
  \ <prefix>        dump fragment sequence and quality into <p.fasta> and <p.fasta.qual>\n\
  \    -allreads                  ...all reads, regardless of deletion status (deleted\
  \ are lowercase)\n    -allbases                  ...all bases (lowercase for non-clear)\n\
  \    -decoded                   ...quality as integers ('20 21 19')\n    -clear\
  \ <clr>               ...in clear range <clr>, default=LATEST\n  -dumpfrg      \
  \             extract LIB, FRG and LKG messages\n    -allreads                 \
  \ ...all reads, regardless of deletion status\n    -donotfixmates             ...only\
  \ extract the fragments given, do not add in\n                                 \
  \ missing mated reads\n    -clear <clr>               ...use clear range <clr>,\
  \ default=LATEST\n    -legacyformat              ...extract using frg format version\
  \ 1 (legacy format, for compatibility)\n  -dumpnewbler <prefix>      extract LIB,\
  \ FRG and LKG messages, write in a\n                             format appropriate\
  \ for Newbler.  This will create\n                             files 'prefix.fna'\
  \ and 'prefix.fna.qual'.  Options\n                             -donotfixmates and\
  \ -clear also apply.\n  -dumpfastq <prefix>        extract LIB, FRG and LKG messages,\
  \ write in FastQ format.  Currently\n                             this works only\
  \ on a store with one library as all the mated reads\n                         \
  \    are dumped into a single file. This will create files 'prefix.paired.fastq',\n\
  \                             'prefix.1.fastq', 'prefix.2.fastq' and 'prefix.unmated.fastq'\
  \ for unmated\n                             reads. Options -donotfixmates and -clear\
  \ also apply.\n  -withlibname               For -dumpfasta, -dumpnewbler and -dumpfastq,\
  \ embed the libraryname in the\n                             created files, e.g.,\
  \ prefix.libname.1.fastq for fastq files.\n\nUse '-h' to get a discussion of what\
  \ gatekeeper is.\n\n"
generated_using:
- --help
docker_image:
