from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int

Buildunitigs_V0_1_0 = CommandToolBuilder(tool="buildUnitigs", base_command=["buildUnitigs"], inputs=[ToolInput(tag="in_mandatory_path_ovlstore", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="Mandatory path to an ovlStore.")), ToolInput(tag="in_mandatory_path_gkpstore", input_type=Boolean(optional=True), prefix="-G", doc=InputDocumentation(doc="Mandatory path to a gkpStore.")), ToolInput(tag="in_mandatory_path_tigstore", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="Mandatory path to a tigStore (can exist or not).")), ToolInput(tag="in_mandatory_name_output", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="Mandatory name for the output files")), ToolInput(tag="in_target_number_fragments", input_type=Int(optional=True), prefix="-B", doc=InputDocumentation(doc="Target number of fragments per tigStore (consensus) partition")), ToolInput(tag="in_enable_experimental_short", input_type=Boolean(optional=True), prefix="-U", doc=InputDocumentation(doc="Enable EXPERIMENTAL short unitig merging (aka bubble popping).")), ToolInput(tag="in_enable_experimental_long", input_type=Boolean(optional=True), prefix="-J", doc=InputDocumentation(doc="Enable EXPERIMENTAL long unitig joining.")), ToolInput(tag="in_break_promisciuous_unitigs", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="Break promisciuous unitigs at unitig intersection points")), ToolInput(tag="in_break_unitig_has", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Break a unitig if a region has more than 7 bad mates")), ToolInput(tag="in_no_more_fraction", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="no more than 0.015 fraction (1.5%) error")), ToolInput(tag="in_no_more_errors", input_type=Int(optional=True), prefix="-E", doc=InputDocumentation(doc="no more than 0 errors")), ToolInput(tag="in_enable_loggingdebugging_specific", input_type=String(optional=True), prefix="-D", doc=InputDocumentation(doc="enable logging/debugging for a specific component.")), ToolInput(tag="in_overlap_quality", input_type=String(), position=0, doc=InputDocumentation(doc="overlapsUsed")), ToolInput(tag="in_chunk_graph", input_type=String(), position=1, doc=InputDocumentation(doc="intersections")), ToolInput(tag="in_populate", input_type=String(), position=2, doc=InputDocumentation(doc="intersectionBreaking")), ToolInput(tag="in_intersection_bubbles", input_type=String(), position=3, doc=InputDocumentation(doc="intersectionBubblesDebug")), ToolInput(tag="in_intersection_joining", input_type=String(), position=4, doc=InputDocumentation(doc="intersectionJoiningDebug")), ToolInput(tag="in_contained_placement", input_type=String(), position=5, doc=InputDocumentation(doc="happiness")), ToolInput(tag="in_intermediate_unit_igs", input_type=String(), position=6, doc=InputDocumentation(doc="mateSplitAnalysis")), ToolInput(tag="in_mate_split_discontinuous", input_type=String(), position=7, doc=InputDocumentation(doc="mateSplitUnhappyContains")), ToolInput(tag="in_mate_split_coverage_plot", input_type=String(), position=8, doc=InputDocumentation(doc="stderr"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Buildunitigs_V0_1_0().translate("wdl", allow_empty_container=True)

