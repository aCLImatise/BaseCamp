!Command
command:
- blasr
positional:
- !Positional
  description: The extra quality information improves variant detection and mapping
  position: 0
  name: maintained.
  optional: false
- !Positional
  description: -sa suffixArrayFile
  position: 1
  name: speed.
  optional: false
- !Positional
  description: Reads produced by spurrious reads from empty ZMWs have a high
  position: 0
  name: reads.
  optional: false
named:
- !Flag
  description: "A table of tuple counts used to estimate match significance.  This\
    \ is\nby the program 'printTupleCountTable'.  While it is quick to generate on\n\
    the fly, if there are many invocations of blasr, it is useful to\nprecompute the\
    \ ctab."
  synonyms:
  - -ctab
  args: !SimpleFlagArg
    name: tab
  optional: true
- !Flag
  description: "Read in a read-region table in HDF format for masking portions of\
    \ reads.\nThis may be a single table if there is just one input file,\nor a fofn.\
    \  When a region table is specified, any region table inside\nthe reads.plx.h5\
    \ or reads.bax.h5 files are ignored."
  synonyms:
  - -regionTable
  args: !SimpleFlagArg
    name: table
  optional: true
- !Flag
  description: "Align the circular consensus sequence (ccs), then report alignments\n\
    of the ccs subreads to the window that the ccs was mapped to.  Only\nalignments\
    \ of the subreads are reported."
  synonyms:
  - -useccs
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Similar to -useccs, except all subreads are aligned, rather than just\n\
    the subreads used to call the ccs.  This will include reads that only\ncover part\
    \ of the template."
  synonyms:
  - -useccsall
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Align the circular consensus, and report only the alignment of the\
    \ ccs\nsequence."
  synonyms:
  - -useccsdenovo
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(false)\nDo not split subreads at adapters.  This is typically only\n\
    useful when the genome in an unrolled version of a known template, and\ncontains\
    \ template-adapter-reverse_template sequence."
  synonyms:
  - -noSplitSubreads
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(false)\nIgnore any information in the region table."
  synonyms:
  - -ignoreRegions
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (false)Ignore any hq regions in the region table.
  synonyms:
  - -ignoreHQRegions
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(10)\nReport the top 'n' alignments."
  synonyms:
  - -bestn
  args: !SimpleFlagArg
    name: n
  optional: true
- !Flag
  description: Write output in SAM format.
  synonyms:
  - -sam
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[none|hard|subread|soft] (none)\nUse no/hard/subread/soft clipping\
    \ for SAM output."
  synonyms:
  - -clipping
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(terminal)\nWrite output to 'out'."
  synonyms:
  - -out
  args: !SimpleFlagArg
    name: out
  optional: true
- !Flag
  description: Output reads that are not aligned to 'file'
  synonyms:
  - -unaligned
  args: !SimpleFlagArg
    name: file
  optional: true
- !Flag
  description: "If not printing SAM, modify the output of the alignment.\nt=0 Print\
    \ blast like output with |'s connecting matched nucleotides.\n1 Print only a summary:\
    \ score and pos.\n2 Print in Compare.xml format.\n3 Print in vulgar format (deprecated).\n\
    4 Print a longer tabular version of the alignment.\n5 Print in a machine-parsable\
    \ format that is read by compareSequences.py."
  synonyms:
  - -m
  args: !SimpleFlagArg
    name: t
  optional: true
- !Flag
  description: "(false)\nOnce candidate alignments are generated and scored via sparse\
    \ dynamic\nprogramming, they are rescored using local alignment that accounts\n\
    for different error profiles.\nResorting based on the local alignment may change\
    \ the order the hits are returned."
  synonyms:
  - -noSortRefinedAlignments
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "When specified, adjacent insertion or deletions are allowed. Otherwise,\
    \ adjacent\ninsertion and deletions are merged into one operation.  Using quality\
    \ values\nto guide pairwise alignments may dictate that the higher probability\
    \ alignment\ncontains adjacent insertions or deletions.  Current tools such as\
    \ GATK do not permit\nthis and so they are not reported by default."
  synonyms:
  - -allowAdjacentIndels
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Print a header as the first line of the output file describing the
    contents of each column.
  synonyms:
  - -header
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(NULL)\nConstruct a table of reference sequence titles.  The reference\
    \ sequences are\nenumerated by row, 0,1,...  The reference index is printed in\
    \ alignment results\nrather than the full reference name.  This makes output concise,\
    \ particularly when\nvery verbose titles exist in reference names."
  synonyms:
  - -titleTable
  args: !SimpleFlagArg
    name: tab
  optional: true
- !Flag
  description: "(0)\nOnly report alignments if they are greater than p percent identity."
  synonyms:
  - -minPctIdentity
  args: !SimpleFlagArg
    name: p
  optional: true
- !Flag
  description: "When specified, only align reads whose ZMW hole numbers are in LIST.\n\
    LIST is a comma-delimited string of ranges, such as '1,2,3,10-13'.\nThis option\
    \ only works when reads are in base or pulse h5 format."
  synonyms:
  - -holeNumbers
  args: !SimpleFlagArg
    name: LIST
  optional: true
- !Flag
  description: "(false)\nWhen there are multiple positions to map a read with equal\
    \ alignment scores, place the\nread randomly at one of them."
  synonyms:
  - -placeRepeatsRandomly
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(false)\nPrint quality values to sam files."
  synonyms:
  - -printSAMQV
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(12)\nMinimum seed length.  Higher minMatch will speed up alignment,\n\
    but decrease sensitivity."
  synonyms:
  - -minMatch
  args: !SimpleFlagArg
    name: m
  optional: true
- !Flag
  description: "(inf)\nStop mapping a read to the genome when the lcp length reaches\
    \ l.\nThis is useful when the query is part of the reference, for example when\n\
    constructing pairwise alignments for de novo assembly."
  synonyms:
  - -maxMatch
  args: !SimpleFlagArg
    name: l
  optional: true
- !Flag
  description: "(inf)\nThe same as -maxMatch."
  synonyms:
  - -maxLCPLength
  args: !SimpleFlagArg
    name: l
  optional: true
- !Flag
  description: "(10000)\nDo not add anchors from a position if it matches to more\
    \ than 'm' locations in the target."
  synonyms:
  - -maxAnchorsPerPosition
  args: !SimpleFlagArg
    name: m
  optional: true
- !Flag
  description: "(0)\nAnother trick for speeding up alignments with match - E fewer\
    \ anchors.  Rather than\nfinding anchors between the read and the genome at every\
    \ position in the read,\nwhen an anchor is found at position i in a read of length\
    \ L, the next position\nin a read to find an anchor is at i+L-E.\nUse this when\
    \ alignining already assembled contigs."
  synonyms:
  - -advanceExactMatches
  args: !SimpleFlagArg
    name: E
  optional: true
- !Flag
  description: "(10)\nKeep up to 'n' candidates for the best alignment.  A large value\
    \ of n will slow mapping\nbecause the slower dynamic programming steps are applied\
    \ to more clusters of anchors\nwhich can be a rate limiting step when reads are\
    \ very long."
  synonyms:
  - -nCandidates
  args: !SimpleFlagArg
    name: n
  optional: true
- !Flag
  description: "(false)\nMap all subreads of a zmw (hole) to where the longest full\
    \ pass subread of the zmw\naligned to. This requires to use the region table and\
    \ hq regions.\nThis option only works when reads are in base or pulse h5 format."
  synonyms:
  - -concordant
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(mediansubread)\nSelect a full pass subread of a zmw as template for\
    \ concordant mapping.\nlongestsubread - use the longest full pass subread\nmediansubread\
    \  - use the median length full pass subread\ntypicalsubread - use the second\
    \ longest full pass subread if length of\nthe longest full pass subread is an\
    \ outlier"
  synonyms:
  - -concordantTemplate
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(false)\nFast search maximum increasing intervals as alignment candidates.\
    \ The search\nis not as exhaustive as the default, but is much faster."
  synonyms:
  - -fastMaxInterval
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(false)\nAgreesively filter out non-promising alignment candidates,\
    \ if there\nexists at least one promising candidate. If this option is turned\
    \ on,\nBlasr is likely to ignore short alignments of ALU elements."
  synonyms:
  - -aggressiveIntervalCut
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(false)\nUse a fast heuristic algorithm to speed up sparse dynamic\
    \ programming."
  synonyms:
  - -fastSDP
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(11)\nUse matches of length K to speed dynamic programming alignments.\
    \  This controls\naccuracy of assigning gaps in pairwise alignments once a mapping\
    \ has been found,\nrather than mapping sensitivity itself."
  synonyms:
  - -sdpTupleSize
  args: !SimpleFlagArg
    name: K
  optional: true
- !Flag
  description: "\"score matrix string\"\nSpecify an alternative score matrix for scoring\
    \ fasta reads.  The matrix is\nin the format\nACGTN\nA abcde\nC fghij\nG klmno\n\
    T pqrst\nN uvwxy . The values a...y should be input as a quoted space separated\n\
    string: \"a b c ... y\". Lower scores are better, so matches should be less\n\
    than mismatches e.g. a,g,m,s = -5 (match), mismatch = 6."
  synonyms:
  - -scoreMatrix
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(10)\nSet the penalty for opening an affine alignment."
  synonyms:
  - -affineOpen
  args: !SimpleFlagArg
    name: value
  optional: true
- !Flag
  description: "(0)\nChange affine (extension) gap penalty. Lower value allows more\
    \ gaps."
  synonyms:
  - -affineExtend
  args: !SimpleFlagArg
    name: a
  optional: true
- !Flag
  description: "(false)\nUse substitution/insertion/deletion/merge quality values\
    \ to score gap and\nmismatch penalties in pairwise alignments.  Because the insertion\
    \ and deletion\nrates are much higher than substitution, this will make many alignments\n\
    favor an insertion/deletion over a substitution.  Naive consensus calling methods\n\
    will then often miss substitution polymorphisms. This option should be\nused when\
    \ calling consensus using the Quiver method.  Furthermore, when\nnot using quality\
    \ values to score alignments, there will be a lower consensus\naccuracy in homolymer\
    \ regions."
  synonyms:
  - -useQuality
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(false)\nRefine alignment using affine guided align."
  synonyms:
  - -affineAlign
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(50)\nSkip reads that have a full length less than l. Subreads may\
    \ be shorter."
  synonyms:
  - -minReadLength
  args: !SimpleFlagArg
    name: l
  optional: true
- !Flag
  description: "(0)\nDo not align subreads of length less than l."
  synonyms:
  - -minSubreadLength
  args: !SimpleFlagArg
    name: l
  optional: true
- !Flag
  description: "(0)\nMaximum score to output (high is bad, negative good)."
  synonyms:
  - -maxScore
  args: !SimpleFlagArg
    name: m
  optional: true
- !Flag
  description: "(1)\nAlign using N processes.  All large data structures such as the\
    \ suffix array and\ntuple count table are shared."
  synonyms:
  - -nproc
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: "(0)\nIndex of the first read to begin aligning. This is useful when\
    \ multiple instances\nare running on the same data, for example when on a multi-rack\
    \ cluster."
  synonyms:
  - -start
  args: !SimpleFlagArg
    name: S
  optional: true
- !Flag
  description: "(1)\nAlign one read every 'S' reads."
  synonyms:
  - -stride
  args: !SimpleFlagArg
    name: S
  optional: true
- !Flag
  description: "(0)\nProportion of reads to randomly subsample (expressed as a decimal)\
    \ and align."
  synonyms:
  - -subsample
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: Print this help file.
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "   Options for blasr \n   Basic usage: 'blasr reads.{fasta,bax.h5} genome.fasta\
  \ [-options] \n option\tDescription (default_value).\n\n Input Files.\n   reads.fasta\
  \ is a multi-fasta file of reads.  While any fasta file is valid input, \n     \
  \          it is preferable to use plx.h5 or bax.h5 files because they contain\n\
  \               more rich quality value information.\n\n   reads.bax.h5|reads.plx.h5\
  \ Is the native output format in Hierarchical Data Format of \n               SMRT\
  \ reads. This is the preferred input to blasr because rich quality\n           \
  \    value (insertion,deletion, and substitution quality values) information is\
  \ \n               maintained.  The extra quality information improves variant detection\
  \ and mapping\n               speed.\n\n   -sa suffixArrayFile\n               Use\
  \ the suffix array 'sa' for detecting matches\n               between the reads\
  \ and the reference.  The suffix\n               array has been prepared by the\
  \ sawriter program.\n\n   -ctab tab \n               A table of tuple counts used\
  \ to estimate match significance.  This is \n               by the program 'printTupleCountTable'.\
  \  While it is quick to generate on \n               the fly, if there are many\
  \ invocations of blasr, it is useful to\n               precompute the ctab.\n\n\
  \   -regionTable table\n               Read in a read-region table in HDF format\
  \ for masking portions of reads.\n               This may be a single table if there\
  \ is just one input file, \n               or a fofn.  When a region table is specified,\
  \ any region table inside \n               the reads.plx.h5 or reads.bax.h5 files\
  \ are ignored.\n\n Options for modifying reads. There is ancilliary information\
  \ about substrings of reads \n               that is stored in a 'region table'\
  \ for each read file.  Because \n               HDF is used, the region table may\
  \ be part of the .bax.h5 or .plx.h5 file,\n               or a separate file.  A\
  \ contiguously read substring from the template \n               is a subread, and\
  \ any read may contain multiple subreads. The boundaries \n               of the\
  \ subreads may be inferred from the region table either directly or \n         \
  \      by definition of adapter boundaries.  Typically region tables also\n    \
  \           contain information for the location of the high and low quality regions\
  \ of\n               reads.  Reads produced by spurrious reads from empty ZMWs have\
  \ a high\n               quality start coordinate equal to high quality end, making\
  \ no usable read.\n   -useccs   \n               Align the circular consensus sequence\
  \ (ccs), then report alignments\n               of the ccs subreads to the window\
  \ that the ccs was mapped to.  Only \n               alignments of the subreads\
  \ are reported.\n   -useccsall\n               Similar to -useccs, except all subreads\
  \ are aligned, rather than just\n               the subreads used to call the ccs.\
  \  This will include reads that only\n               cover part of the template.\n\
  \   -useccsdenovo\n               Align the circular consensus, and report only\
  \ the alignment of the ccs\n               sequence.\n   -noSplitSubreads (false)\n\
  \               Do not split subreads at adapters.  This is typically only \n  \
  \             useful when the genome in an unrolled version of a known template,\
  \ and \n               contains template-adapter-reverse_template sequence.\n  \
  \ -ignoreRegions(false)\n               Ignore any information in the region table.\n\
  \   -ignoreHQRegions (false)Ignore any hq regions in the region table.\n\n Alignment\
  \ Output.\n   -bestn n (10)\n               Report the top 'n' alignments.\n   -sam\
  \        Write output in SAM format.\n   -clipping [none|hard|subread|soft] (none)\n\
  \               Use no/hard/subread/soft clipping for SAM output.\n   -out out (terminal)\
  \  \n               Write output to 'out'.\n   -unaligned file\n               Output\
  \ reads that are not aligned to 'file'\n   -m t           \n               If not\
  \ printing SAM, modify the output of the alignment.\n                t=0 Print blast\
  \ like output with |'s connecting matched nucleotides.\n                  1 Print\
  \ only a summary: score and pos.\n                  2 Print in Compare.xml format.\n\
  \                  3 Print in vulgar format (deprecated).\n                  4 Print\
  \ a longer tabular version of the alignment.\n                  5 Print in a machine-parsable\
  \ format that is read by compareSequences.py.\n   -noSortRefinedAlignments (false)\
  \ \n               Once candidate alignments are generated and scored via sparse\
  \ dynamic \n               programming, they are rescored using local alignment\
  \ that accounts \n               for different error profiles.\n               Resorting\
  \ based on the local alignment may change the order the hits are returned.\n   -allowAdjacentIndels\
  \ \n               When specified, adjacent insertion or deletions are allowed.\
  \ Otherwise, adjacent \n               insertion and deletions are merged into one\
  \ operation.  Using quality values \n               to guide pairwise alignments\
  \ may dictate that the higher probability alignment \n               contains adjacent\
  \ insertions or deletions.  Current tools such as GATK do not permit\n         \
  \      this and so they are not reported by default.\n   -header\n             \
  \  Print a header as the first line of the output file describing the contents of\
  \ each column.\n   -titleTable tab (NULL) \n               Construct a table of\
  \ reference sequence titles.  The reference sequences are \n               enumerated\
  \ by row, 0,1,...  The reference index is printed in alignment results\n       \
  \        rather than the full reference name.  This makes output concise, particularly\
  \ when\n               very verbose titles exist in reference names.\n   -minPctIdentity\
  \ p (0)\n               Only report alignments if they are greater than p percent\
  \ identity.\n   -unaligned file\n               Output reads that are not aligned\
  \ to 'file'.\n   -holeNumbers LIST \n               When specified, only align reads\
  \ whose ZMW hole numbers are in LIST.\n               LIST is a comma-delimited\
  \ string of ranges, such as '1,2,3,10-13'.\n               This option only works\
  \ when reads are in base or pulse h5 format.\n   -placeRepeatsRandomly (false)\n\
  \               When there are multiple positions to map a read with equal alignment\
  \ scores, place the\n               read randomly at one of them.\n   -printSAMQV\
  \ (false)\n               Print quality values to sam files.\n\n Options for anchoring\
  \ alignment regions. This will have the greatest effect on speed and sensitivity.\n\
  \   -minMatch m (12) \n               Minimum seed length.  Higher minMatch will\
  \ speed up alignment, \n               but decrease sensitivity.\n   -maxMatch l\
  \ (inf)\n               Stop mapping a read to the genome when the lcp length reaches\
  \ l.  \n               This is useful when the query is part of the reference, for\
  \ example when \n               constructing pairwise alignments for de novo assembly.\n\
  \   -maxLCPLength l (inf)\n               The same as -maxMatch.\n   -maxAnchorsPerPosition\
  \ m (10000) \n               Do not add anchors from a position if it matches to\
  \ more than 'm' locations in the target.\n   -advanceExactMatches E (0)\n      \
  \         Another trick for speeding up alignments with match - E fewer anchors.\
  \  Rather than\n               finding anchors between the read and the genome at\
  \ every position in the read, \n               when an anchor is found at position\
  \ i in a read of length L, the next position \n               in a read to find\
  \ an anchor is at i+L-E.\n               Use this when alignining already assembled\
  \ contigs.\n   -nCandidates n (10)\n               Keep up to 'n' candidates for\
  \ the best alignment.  A large value of n will slow mapping\n               because\
  \ the slower dynamic programming steps are applied to more clusters of anchors\n\
  \               which can be a rate limiting step when reads are very long.\n  \
  \ -concordant(false)\n               Map all subreads of a zmw (hole) to where the\
  \ longest full pass subread of the zmw \n               aligned to. This requires\
  \ to use the region table and hq regions.\n               This option only works\
  \ when reads are in base or pulse h5 format.\n   -concordantTemplate(mediansubread)\n\
  \               Select a full pass subread of a zmw as template for concordant mapping.\n\
  \               longestsubread - use the longest full pass subread\n           \
  \    mediansubread  - use the median length full pass subread\n               typicalsubread\
  \ - use the second longest full pass subread if length of\n                    \
  \            the longest full pass subread is an outlier\n   -fastMaxInterval(false)\n\
  \               Fast search maximum increasing intervals as alignment candidates.\
  \ The search \n               is not as exhaustive as the default, but is much faster.\n\
  \   -aggressiveIntervalCut(false)\n               Agreesively filter out non-promising\
  \ alignment candidates, if there \n               exists at least one promising\
  \ candidate. If this option is turned on, \n               Blasr is likely to ignore\
  \ short alignments of ALU elements.\n   -fastSDP(false)\n               Use a fast\
  \ heuristic algorithm to speed up sparse dynamic programming.\n\n  Options for Refining\
  \ Hits.\n   -sdpTupleSize K (11)\n               Use matches of length K to speed\
  \ dynamic programming alignments.  This controls\n               accuracy of assigning\
  \ gaps in pairwise alignments once a mapping has been found,\n               rather\
  \ than mapping sensitivity itself.\n   -scoreMatrix \"score matrix string\" \n \
  \              Specify an alternative score matrix for scoring fasta reads.  The\
  \ matrix is \n               in the format \n                  ACGTN\n         \
  \       A abcde\n                C fghij\n                G klmno\n            \
  \    T pqrst\n                N uvwxy . The values a...y should be input as a quoted\
  \ space separated \n               string: \"a b c ... y\". Lower scores are better,\
  \ so matches should be less \n               than mismatches e.g. a,g,m,s = -5 (match),\
  \ mismatch = 6. \n   -affineOpen value (10) \n               Set the penalty for\
  \ opening an affine alignment.\n   -affineExtend a (0)\n               Change affine\
  \ (extension) gap penalty. Lower value allows more gaps.\n\n Options for overlap/dynamic\
  \ programming alignments and pairwise overlap for de novo assembly. \n   -useQuality\
  \ (false)\n               Use substitution/insertion/deletion/merge quality values\
  \ to score gap and \n               mismatch penalties in pairwise alignments. \
  \ Because the insertion and deletion\n               rates are much higher than\
  \ substitution, this will make many alignments \n               favor an insertion/deletion\
  \ over a substitution.  Naive consensus calling methods \n               will then\
  \ often miss substitution polymorphisms. This option should be \n              \
  \ used when calling consensus using the Quiver method.  Furthermore, when \n   \
  \            not using quality values to score alignments, there will be a lower\
  \ consensus \n               accuracy in homolymer regions.\n   -affineAlign (false)\n\
  \               Refine alignment using affine guided align.\n\n Options for filtering\
  \ reads.\n   -minReadLength l(50)\n               Skip reads that have a full length\
  \ less than l. Subreads may be shorter.\n   -minSubreadLength l(0)\n           \
  \    Do not align subreads of length less than l.\n   -maxScore m (0)\n        \
  \       Maximum score to output (high is bad, negative good).\n\n Options for parallel\
  \ alignment.\n   -nproc N (1)\n               Align using N processes.  All large\
  \ data structures such as the suffix array and \n               tuple count table\
  \ are shared.\n   -start S (0)\n               Index of the first read to begin\
  \ aligning. This is useful when multiple instances \n               are running\
  \ on the same data, for example when on a multi-rack cluster.\n   -stride S (1)\n\
  \               Align one read every 'S' reads.\n\n Options for subsampling reads.\n\
  \   -subsample (0)\n               Proportion of reads to randomly subsample (expressed\
  \ as a decimal) and align.\n\n -h            Print this help file.\n\nTo cite BLASR,\
  \ please use: Chaisson M.J., and Tesler G., Mapping \nsingle molecule sequencing\
  \ reads using Basic Local Alignment with \nSuccessive Refinement (BLASR): Theory\
  \ and Application, BMC \nBioinformatics 2012, 13:238.\nPlease report any bugs to\
  \ 'https://github.com/PacificBiosciences/blasr/issues'.\n\n\nERROR: -help is not\
  \ a valid option.\n"
generated_using:
- --help
