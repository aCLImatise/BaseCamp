from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Directory

Tigstore_V0_1_0 = CommandToolBuilder(tool="tigStore", base_command=["tigStore"], inputs=[ToolInput(tag="in_path_gatekeeper_store", input_type=File(optional=True), prefix="-g", doc=InputDocumentation(doc="Path to the gatekeeper store")), ToolInput(tag="in_path_tigstore_version", input_type=File(optional=True), prefix="-t", doc=InputDocumentation(doc="<v>       Path to the tigStore, and version to use")), ToolInput(tag="in_up", input_type=String(optional=True), prefix="-up", doc=InputDocumentation(doc="...limit to unitigs in partition <p>")), ToolInput(tag="in_cp", input_type=String(optional=True), prefix="-cp", doc=InputDocumentation(doc="...limit to contigs in partition <p>")), ToolInput(tag="in_dump_something_store", input_type=String(optional=True), prefix="-D", doc=InputDocumentation(doc="Dump something about the store")), ToolInput(tag="in_unitig_dump_dump", input_type=String(optional=True), prefix="-u", doc=InputDocumentation(doc="[-id]            Unitig to dump (for -d option); if A-B, dump tigs from id A to id B, inclusive")), ToolInput(tag="in_contig_dump_dump", input_type=String(optional=True), prefix="-c", doc=InputDocumentation(doc="[-id]            Contig to dump (for -d option); if A-B, dump tigs from id A to id B, inclusive")), ToolInput(tag="in_dump_unitigs_d", input_type=Boolean(optional=True), prefix="-U", doc=InputDocumentation(doc="Dump ALL unitigs (for -d option)")), ToolInput(tag="in_dump_contigs_d", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="Dump ALL contigs (for -d option)")), ToolInput(tag="in_n_reads", input_type=Int(optional=True), prefix="-nreads", doc=InputDocumentation(doc="max       Dump tigs with between min and max reads (inclusive)")), ToolInput(tag="in_dump_something_multialign", input_type=String(optional=True), prefix="-d", doc=InputDocumentation(doc="Dump something about a multialign (-c or -u) in the store")), ToolInput(tag="in_change_properties_multialigns", input_type=File(optional=True), prefix="-E", doc=InputDocumentation(doc="Change properties of multialigns")), ToolInput(tag="in_construct_new_store", input_type=File(optional=True), prefix="-B", doc=InputDocumentation(doc="Construct a new store with unitigs in 'layout-file'.  Store versions\nbefore that specified on the '-t' option are created but are empty.")), ToolInput(tag="in_replace_multialign_i", input_type=String(optional=True), prefix="-R", doc=InputDocumentation(doc="Replace a multialign with this one (type and id are from the layout)\nThe multialign is replaced in version <v> from -t.")), ToolInput(tag="in_replace_multialign_next", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="Replace a multialign in the next version of the store.  This option is\nneeded if the version of the store to add a multialign does not exist.\nThe multialign is replaced in version <v>+1 from -t.")), ToolInput(tag="in_compress", input_type=Boolean(optional=True), prefix="-compress", doc=InputDocumentation(doc="Move tigs from earlier versions into the specified version.  This removes\nhistorical versions of unitigs/contigs, and can save tremendous storage space,\nbut makes it impossible to back up the assembly past the specified versions")), ToolInput(tag="in_width_of_page", input_type=String(optional=True), prefix="-w", doc=InputDocumentation(doc="Width of the page.")), ToolInput(tag="in_spacing_reads_same", input_type=String(optional=True), prefix="-s", doc=InputDocumentation(doc="Spacing between reads on the same line.")), ToolInput(tag="in_output_files_written", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc="Output files will be written to 'prefix.*' in the current directory.\n(defaults to 'tigStore' (the -t option) if not set.)")), ToolInput(tag="in_unit_ig_list", input_type=String(), position=0, doc=InputDocumentation(doc="...a list of the unitigs in the store")), ToolInput(tag="in_contig_list", input_type=String(), position=1, doc=InputDocumentation(doc="...a list of the contigs in the store")), ToolInput(tag="in_frags", input_type=String(), position=4, doc=InputDocumentation(doc="...a list of fragments")), ToolInput(tag="in_unit_igs", input_type=String(), position=5, doc=InputDocumentation(doc="...a list of unitigs")), ToolInput(tag="in_consensus_gapped", input_type=String(), position=0, doc=InputDocumentation(doc="...the consensus sequence, with gaps as indicated in the multialignment")), ToolInput(tag="in_layout", input_type=String(), position=1, doc=InputDocumentation(doc="...the layout")), ToolInput(tag="in_multi_align", input_type=String(), position=2, doc=InputDocumentation(doc="...the full multialignment")), ToolInput(tag="in_mate_pair", input_type=String(), position=3, doc=InputDocumentation(doc="...an analysis of the mate pairs")), ToolInput(tag="in_sizes", input_type=String(), position=4, doc=InputDocumentation(doc="...an analysis of sizes of the tigs")), ToolInput(tag="in_coverage", input_type=String(), position=5, doc=InputDocumentation(doc="...an analysis of read coverage of the tigs")), ToolInput(tag="in_overlap", input_type=String(), position=6, doc=InputDocumentation(doc="...an analysis of read overlaps in the tigs")), ToolInput(tag="in_f_map", input_type=String(), position=7, doc=InputDocumentation(doc="...a map from fragment IID to unitig IID"))], outputs=[ToolOutput(tag="out_output_files_written", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_files_written", type_hint=File()), doc=OutputDocumentation(doc="Output files will be written to 'prefix.*' in the current directory.\n(defaults to 'tigStore' (the -t option) if not set.)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tigstore_V0_1_0().translate("wdl", allow_empty_container=True)

