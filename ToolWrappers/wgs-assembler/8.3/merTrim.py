from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean

Mertrim_V0_1_0 = CommandToolBuilder(tool="merTrim", base_command=["merTrim"], inputs=[ToolInput(tag="in_input_reads", input_type=String(optional=True), prefix="-F", doc=InputDocumentation(doc="input reads")), ToolInput(tag="in_output_reads", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="output reads")), ToolInput(tag="in_truth_reads_validation", input_type=String(optional=True), prefix="-T", doc=InputDocumentation(doc="truth reads for validation")), ToolInput(tag="in_mer_size", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="mer size")), ToolInput(tag="in_kmer_database_in", input_type=String(optional=True), prefix="-mc", doc=InputDocumentation(doc="kmer database (in 'counts.mcdat' and 'counts.mcidx')")), ToolInput(tag="in_enable_cache", input_type=Boolean(optional=True), prefix="-enablecache", doc=InputDocumentation(doc="dump the final kmer data to 'counts.merTrimDB'")), ToolInput(tag="in_coverage", input_type=String(optional=True), prefix="-coverage", doc=InputDocumentation(doc="mers with count below n can be changed\n(that is, count >= n are correct mers)")), ToolInput(tag="in_evidence", input_type=String(optional=True), prefix="-evidence", doc=InputDocumentation(doc="mers with count at least n will be used for changes")), ToolInput(tag="in_screen_adapter_sequences", input_type=String(optional=True), prefix="-mC", doc=InputDocumentation(doc="screen for these adapter sequences")), ToolInput(tag="in_mc_illumina", input_type=Boolean(optional=True), prefix="-mCillumina", doc=InputDocumentation(doc="screen for common Illumina adapter sequences")), ToolInput(tag="in_mc_four_five_four", input_type=Boolean(optional=True), prefix="-mC454", doc=InputDocumentation(doc="screen for common 454 adapter and linker sequences")), ToolInput(tag="in_end_trim", input_type=Boolean(optional=True), prefix="-endtrim", doc=InputDocumentation(doc="(undocumented)")), ToolInput(tag="in_not_rimming", input_type=Boolean(optional=True), prefix="-notrimming", doc=InputDocumentation(doc="do only correction, no trimming")), ToolInput(tag="in_discard_zero", input_type=Boolean(optional=True), prefix="-discardzero", doc=InputDocumentation(doc="trash the whole read if coverage drops to zero in the middle")), ToolInput(tag="in_discard_imperfect", input_type=Boolean(optional=True), prefix="-discardimperfect", doc=InputDocumentation(doc="trash the whole read if coverage isn't perfect")), ToolInput(tag="in_not_rim_imperfect", input_type=Boolean(optional=True), prefix="-notrimimperfect", doc=InputDocumentation(doc="do NOT trim off ends that make the coverage imperfect")), ToolInput(tag="in_end_trim_qv", input_type=Int(optional=True), prefix="-endtrimqv", doc=InputDocumentation(doc="trim ends of reads if they are below qv Q (Sanger encoded; default '2')")), ToolInput(tag="in_nm", input_type=Boolean(optional=True), prefix="-NM", doc=InputDocumentation(doc="do NOT correct mismatch errors")), ToolInput(tag="in_ni", input_type=Boolean(optional=True), prefix="-NI", doc=InputDocumentation(doc="do NOT correct indel errors")), ToolInput(tag="in_use_t_cpu", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="use T CPU cores")), ToolInput(tag="in_report_progress_stderr", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="report progress to stderr")), ToolInput(tag="in_report_trimming_evidence", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="report trimming evidence to stdout (more -V -> more reports)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mertrim_V0_1_0().translate("wdl", allow_empty_container=True)

