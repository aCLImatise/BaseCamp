from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int, Directory, File

Taxonkit_Reformat_V0_1_0 = CommandToolBuilder(tool="taxonkit_reformat", base_command=["taxonkit", "reformat"], inputs=[ToolInput(tag="in_delimiter", input_type=String(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="field delimiter in input lineage (default ';')")), ToolInput(tag="in_fill_miss_rank", input_type=Boolean(optional=True), prefix="--fill-miss-rank", doc=InputDocumentation(doc="fill missing rank with original lineage information (experimental)")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="output format, placeholders of rank are needed (default '{k};{p};{c};{o};{f};{g};{s}')")), ToolInput(tag="in_lineage_field", input_type=Int(optional=True), prefix="--lineage-field", doc=InputDocumentation(doc="field index of lineage. data should be tab-separated (default 2)")), ToolInput(tag="in_miss_rank_repl", input_type=String(optional=True), prefix="--miss-rank-repl", doc=InputDocumentation(doc="replacement string for missing rank, if given '', 'unclassified xxx xxx' will used, where 'unclassified ' is settable by flag -p/--miss-rank-repl-prefix")), ToolInput(tag="in_miss_rank_repl_prefix", input_type=String(optional=True), prefix="--miss-rank-repl-prefix", doc=InputDocumentation(doc="prefix for estimated taxon level (default 'unclassified ')")), ToolInput(tag="in_miss_taxid_repl", input_type=String(optional=True), prefix="--miss-taxid-repl", doc=InputDocumentation(doc="replacement string for missing taxid")), ToolInput(tag="in_show_lineage_tax_ids", input_type=Boolean(optional=True), prefix="--show-lineage-taxids", doc=InputDocumentation(doc="show corresponding taxids of reformated lineage")), ToolInput(tag="in_data_dir", input_type=Directory(optional=True), prefix="--data-dir", doc=InputDocumentation(doc="directory containing nodes.dmp and names.dmp (default '/root/.taxonkit')")), ToolInput(tag="in_line_buffered", input_type=File(optional=True), prefix="--line-buffered", doc=InputDocumentation(doc="use line buffering on output, i.e., immediately writing to stdin/file for every line of output")), ToolInput(tag="in_out_file", input_type=File(optional=True), prefix="--out-file", doc=InputDocumentation(doc="out file ('-' for stdout, suffix .gz for gzipped out) (default '-')")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="number of CPUs. 2 is enough (default value: 1 for single-CPU PC, 2 for others) (default 2)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="print verbose information"))], outputs=[ToolOutput(tag="out_line_buffered", output_type=File(optional=True), selector=InputSelector(input_to_select="in_line_buffered", type_hint=File()), doc=OutputDocumentation(doc="use line buffering on output, i.e., immediately writing to stdin/file for every line of output")), ToolOutput(tag="out_out_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_file", type_hint=File()), doc=OutputDocumentation(doc="out file ('-' for stdout, suffix .gz for gzipped out) (default '-')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Taxonkit_Reformat_V0_1_0().translate("wdl", allow_empty_container=True)

