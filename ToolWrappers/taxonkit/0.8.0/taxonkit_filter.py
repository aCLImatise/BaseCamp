from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File, Int, Directory

Taxonkit_Filter_V0_1_0 = CommandToolBuilder(tool="taxonkit_filter", base_command=["taxonkit", "filter"], inputs=[ToolInput(tag="in_save_predictable_no_rank", input_type=String(optional=True), prefix="--save-predictable-norank", doc=InputDocumentation(doc="save some special ranks without order,")), ToolInput(tag="in_black_list", input_type=String(optional=True), prefix="--black-list", doc=InputDocumentation(doc="black list of ranks to discard, e.g., '-B 'no rank' -B 'clade'")), ToolInput(tag="in_discard_no_ranks", input_type=Boolean(optional=True), prefix="--discard-noranks", doc=InputDocumentation(doc="discard all ranks without order, type 'taxonkit filter --help' for details")), ToolInput(tag="in_discard_root", input_type=Boolean(optional=True), prefix="--discard-root", doc=InputDocumentation(doc="discard root taxid, defined by --root-taxid")), ToolInput(tag="in_equal_to", input_type=String(optional=True), prefix="--equal-to", doc=InputDocumentation(doc="output TaxIds with rank equal to some ranks, multiple values can be separated with comma ',' (e.g., -E 'genus,species'), or give multiple times (e.g., -E genus -E species)")), ToolInput(tag="in_higher_than", input_type=String(optional=True), prefix="--higher-than", doc=InputDocumentation(doc="output TaxIds with rank higher than a rank, exclusive with --lower-than")), ToolInput(tag="in_list_order", input_type=Boolean(optional=True), prefix="--list-order", doc=InputDocumentation(doc="list user defined ranks in order, from '$HOME/.taxonkit/ranks.txt'")), ToolInput(tag="in_list_ranks", input_type=Boolean(optional=True), prefix="--list-ranks", doc=InputDocumentation(doc="list ordered ranks in taxonomy database, sorted in user defined order")), ToolInput(tag="in_lower_than", input_type=String(optional=True), prefix="--lower-than", doc=InputDocumentation(doc="output TaxIds with rank lower than a rank, exclusive with --higher-than")), ToolInput(tag="in_rank_file", input_type=File(optional=True), prefix="--rank-file", doc=InputDocumentation(doc="user-defined ordered taxonomic ranks, type 'taxonkit filter --help' for details")), ToolInput(tag="in_root_taxid", input_type=Int(optional=True), prefix="--root-taxid", doc=InputDocumentation(doc="root taxid (default 1)")), ToolInput(tag="in_taxid_field", input_type=Int(optional=True), prefix="--taxid-field", doc=InputDocumentation(doc="field index of taxid. input data should be tab-separated (default 1)")), ToolInput(tag="in_data_dir", input_type=Directory(optional=True), prefix="--data-dir", doc=InputDocumentation(doc="directory containing nodes.dmp and names.dmp (default '/root/.taxonkit')")), ToolInput(tag="in_line_buffered", input_type=File(optional=True), prefix="--line-buffered", doc=InputDocumentation(doc="use line buffering on output, i.e., immediately writing to stdin/file for every line of output")), ToolInput(tag="in_out_file", input_type=File(optional=True), prefix="--out-file", doc=InputDocumentation(doc="out file ('-' for stdout, suffix .gz for gzipped out) (default '-')")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="number of CPUs. 4 is enough (default 2)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="print verbose information"))], outputs=[ToolOutput(tag="out_line_buffered", output_type=File(optional=True), selector=InputSelector(input_to_select="in_line_buffered", type_hint=File()), doc=OutputDocumentation(doc="use line buffering on output, i.e., immediately writing to stdin/file for every line of output")), ToolOutput(tag="out_out_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_file", type_hint=File()), doc=OutputDocumentation(doc="out file ('-' for stdout, suffix .gz for gzipped out) (default '-')"))], container="quay.io/biocontainers/taxonkit:0.8.0--h9ee0642_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Taxonkit_Filter_V0_1_0().translate("wdl")

