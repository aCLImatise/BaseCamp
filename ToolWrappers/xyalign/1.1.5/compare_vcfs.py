from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String

Compare_Vcfs_V0_1_0 = CommandToolBuilder(tool="compare_vcfs", base_command=["compare_vcfs"], inputs=[ToolInput(tag="in_vcf_before", input_type=File(optional=True), prefix="--vcf_before", doc=InputDocumentation(doc="Full path to first Platypus VCF output from\nBAM_ANALYSIS module. This will be treated as the\n'before' condition for comparisons.")), ToolInput(tag="in_vcf_after", input_type=File(optional=True), prefix="--vcf_after", doc=InputDocumentation(doc="Full path to second Platypus VCF output from\nBAM_ANALYSIS module. This will be treated as the\n'after' condition for comparisons.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output_file", doc=InputDocumentation(doc="Name of output file (including path, if to be created\nelsewhere).")), ToolInput(tag="in_variant_site_quality", input_type=Int(optional=True), prefix="--variant_site_quality", doc=InputDocumentation(doc="Consider all SNPs with a site quality (QUAL) greater\nthan or equal to this value. Default is 30.")), ToolInput(tag="in_variant_genotype_quality", input_type=Int(optional=True), prefix="--variant_genotype_quality", doc=InputDocumentation(doc="Consider all SNPs with a sample genotype quality\ngreater than or equal to this value. Default is 30.")), ToolInput(tag="in_variant_depth", input_type=Int(optional=True), prefix="--variant_depth", doc=InputDocumentation(doc="Consider all SNPs with a sample depth greater than or\nequal to this value. Default is 4.")), ToolInput(tag="in_chrom", input_type=String(optional=True), prefix="--chrom", doc=InputDocumentation(doc="Name of chromosome to analyze."))], outputs=[ToolOutput(tag="out_vcf_before", output_type=File(optional=True), selector=InputSelector(input_to_select="in_vcf_before", type_hint=File()), doc=OutputDocumentation(doc="Full path to first Platypus VCF output from\nBAM_ANALYSIS module. This will be treated as the\n'before' condition for comparisons.")), ToolOutput(tag="out_vcf_after", output_type=File(optional=True), selector=InputSelector(input_to_select="in_vcf_after", type_hint=File()), doc=OutputDocumentation(doc="Full path to second Platypus VCF output from\nBAM_ANALYSIS module. This will be treated as the\n'after' condition for comparisons.")), ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="Name of output file (including path, if to be created\nelsewhere)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Compare_Vcfs_V0_1_0().translate("wdl", allow_empty_container=True)

