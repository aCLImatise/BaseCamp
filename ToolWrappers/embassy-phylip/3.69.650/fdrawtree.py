from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Fdrawtree_V0_1_0 = CommandToolBuilder(tool="fdrawtree", base_command=["fdrawtree"], inputs=[ToolInput(tag="in_plotter", input_type=Boolean(optional=True), prefix="-plotter", doc=InputDocumentation(doc="menu       [l] Plotter or printer the tree will be\ndrawn on (Values: l (Postscript printer file\nformat); m (PICT format (for drawing\nprograms)); j (HP Laserjet 75 dpi PCL file\nformat); s (HP Laserjet 150 dpi PCL file\nformat); y (HP Laserjet 300 dpi PCL file\nformat); w (MS-Windows Bitmap); f (FIG 2.0\ndrawing program format); a (Idraw drawing\nprogram format); z (VRML Virtual Reality\nMarkup Language file); n (PCX 640x350 file\nformat (for drawing programs)); p (PCX\n800x600 file format (for drawing programs));\nq (PCX 1024x768 file format (for drawing\nprograms)); k (TeKtronix 4010 graphics\nterminal); x (X Bitmap format); v (POVRAY 3D\nrendering program file); r (Rayshade 3D\nrendering program file); h (Hewlett-Packard\npen plotter (HPGL file format)); d (DEC\nReGIS graphics (VT240 terminal)); e (Epson\nMX-80 dot-matrix printer); c\n(Prowriter/Imagewriter dot-matrix printer);\nt (Toshiba 24-pin dot-matrix printer); o\n(Okidata dot-matrix printer); b (Houston\nInstruments plotter); u (other (one you have\ninserted code for)))")), ToolInput(tag="in_previewer", input_type=Boolean(optional=True), prefix="-previewer", doc=InputDocumentation(doc="menu       [x] Previewing device (Values: n (Will not\nbe previewed); I i (MSDOS graphics screen\nm:Macintosh screens); x (X Windows display);\nw (MS Windows display); k (TeKtronix 4010\ngraphics terminal); d (DEC ReGIS graphics\n(VT240 terminal)); o (Other (one you have\ninserted code for)))")), ToolInput(tag="in_iterate", input_type=Boolean(optional=True), prefix="-iterate", doc=InputDocumentation(doc="menu       [e] Iterate to improve tree (Values: n (No);\ne (Equal-Daylight algorithm); b (n-Body\nalgorithm))")), ToolInput(tag="in_lengths", input_type=Boolean(optional=True), prefix="-lengths", doc=InputDocumentation(doc="boolean    [N] Use branch lengths from user trees")), ToolInput(tag="in_label_direction", input_type=Boolean(optional=True), prefix="-labeldirection", doc=InputDocumentation(doc="menu       [m] Label direction (Values: a (along); f\n(fixed); r (radial); m (middle))")), ToolInput(tag="in_tree_angle", input_type=Boolean(optional=True), prefix="-treeangle", doc=InputDocumentation(doc="float      [90.0] Angle the tree is to be plotted\n(Number from -360.000 to 360.000)")), ToolInput(tag="in_arc", input_type=Boolean(optional=True), prefix="-arc", doc=InputDocumentation(doc="float      [360] Degrees the arc should occupy (Number\nfrom 0.000 to 360.000)")), ToolInput(tag="in_tree_depth", input_type=Boolean(optional=True), prefix="-treedepth", doc=InputDocumentation(doc="float      [0.53] Depth of tree as fraction of its\nbreadth (Number from 0.100 to 100.000)")), ToolInput(tag="in_paper_x", input_type=Boolean(optional=True), prefix="-paperx", doc=InputDocumentation(doc="float      [20.63750] Paper width (Any numeric value)")), ToolInput(tag="in_papery", input_type=Boolean(optional=True), prefix="-papery", doc=InputDocumentation(doc="float      [26.98750] Paper height (Number 0.100 or\nmore)")), ToolInput(tag="in_pages_height", input_type=Boolean(optional=True), prefix="-pagesheight", doc=InputDocumentation(doc="float      [1] Number of trees across height of page\n(Number 1.000 or more)")), ToolInput(tag="in_pages_width", input_type=Boolean(optional=True), prefix="-pageswidth", doc=InputDocumentation(doc="float      [1] Number of trees across width of page\n(Number 1.000 or more)")), ToolInput(tag="in_hp_margin", input_type=Boolean(optional=True), prefix="-hpmargin", doc=InputDocumentation(doc="float      [0.41275] Horizontal overlap (cm) (Number\n0.001 or more)")), ToolInput(tag="in_vp_margin", input_type=Boolean(optional=True), prefix="-vpmargin", doc=InputDocumentation(doc="float      [0.53975] Vertical overlap (cm) (Number\n0.001 or more)")), ToolInput(tag="in_font_file", input_type=Boolean(optional=True), prefix="-fontfile", doc=InputDocumentation(doc="string     [font1] Fontfile name (Any string)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fdrawtree_V0_1_0().translate("wdl", allow_empty_container=True)

