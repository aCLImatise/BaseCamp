from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Emmtyper_V0_1_0 = CommandToolBuilder(tool="emmtyper", base_command=["emmtyper"], inputs=[ToolInput(tag="in_workflow", input_type=Boolean(optional=True), prefix="--workflow", doc=InputDocumentation(doc="[blast|pcr]      Choose workflow  [default: blast]")), ToolInput(tag="in_blast_db", input_type=File(optional=True), prefix="--blast_db", doc=InputDocumentation(doc="Path to EMM BLAST DB  [default:\n/usr/local/lib/python3.7/site-\npackages/emmtyper/db/emm.fna]")), ToolInput(tag="in_keep", input_type=Boolean(optional=True), prefix="--keep", doc=InputDocumentation(doc="Keep BLAST and isPcr output files.\n[default: False]")), ToolInput(tag="in_cluster_distance", input_type=Int(optional=True), prefix="--cluster-distance", doc=InputDocumentation(doc="Distance between cluster of matches to\nconsider as different clusters.  [default:\n500]")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output stream. Path to file for output to a")), ToolInput(tag="in_output_format", input_type=Boolean(optional=True), prefix="--output-format", doc=InputDocumentation(doc="[short|verbose|visual]\nOutput format.")), ToolInput(tag="in_dust", input_type=Boolean(optional=True), prefix="--dust", doc=InputDocumentation(doc="[yes|no|level window linker]\n[BLAST] Filter query sequence with DUST.\n[default: no]")), ToolInput(tag="in_percent_identity", input_type=Int(optional=True), prefix="--percent-identity", doc=InputDocumentation(doc="[BLAST] Minimal percent identity of")), ToolInput(tag="in_culling_limit", input_type=Int(optional=True), prefix="--culling-limit", doc=InputDocumentation(doc="[BLAST] Total hits to return in a position.\n[default: 5]")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="--mismatch", doc=InputDocumentation(doc="[BLAST] Threshold for number of mismatch to\nallow in BLAST hit.  [default: 4]")), ToolInput(tag="in_align_diff", input_type=Int(optional=True), prefix="--align-diff", doc=InputDocumentation(doc="[BLAST] Threshold for difference between\nalignment length and subject length in BLAST\nhit.  [default: 5]")), ToolInput(tag="in_gap", input_type=Int(optional=True), prefix="--gap", doc=InputDocumentation(doc="[BLAST] Threshold gap to allow in BLAST hit.\n[default: 2]")), ToolInput(tag="in_blast_path", input_type=File(optional=True), prefix="--blast-path", doc=InputDocumentation(doc="[BLAST] Specify full path to blastn")), ToolInput(tag="in_min_perfect", input_type=Int(optional=True), prefix="--min-perfect", doc=InputDocumentation(doc="[isPcr] Minimum size of perfect match at 3'\nprimer end.  [default: 15]")), ToolInput(tag="in_min_good", input_type=Int(optional=True), prefix="--min-good", doc=InputDocumentation(doc="[isPcr] Minimum size where there must be 2\nmatches for each mismatch.  [default: 15]")), ToolInput(tag="in_max_size", input_type=Int(optional=True), prefix="--max-size", doc=InputDocumentation(doc="[isPcr] Maximum size of PCR product.\n[default: 2000]")), ToolInput(tag="in_is_pcr_path", input_type=File(optional=True), prefix="--ispcr-path", doc=InputDocumentation(doc="[isPcr] Specify full path to isPcr")), ToolInput(tag="in_file_dot", input_type=File(), position=0, doc=InputDocumentation(doc="[default: stdout]")), ToolInput(tag="in__primerdb_text", input_type=String(), position=1, doc=InputDocumentation(doc="--primer-db TEXT                [isPcr] PCR primer. Text file with 3")), ToolInput(tag="in_primer_dot", input_type=String(), position=0, doc=InputDocumentation(doc="[default:")), ToolInput(tag="in_help_show_message", input_type=String(), position=0, doc=InputDocumentation(doc="--help                          Show this message and exit."))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output stream. Path to file for output to a"))], container="quay.io/biocontainers/emmtyper:0.2.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Emmtyper_V0_1_0().translate("wdl")

