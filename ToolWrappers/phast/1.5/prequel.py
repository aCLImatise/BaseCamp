from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File

Prequel_V0_1_0 = CommandToolBuilder(tool="prequel", base_command=["prequel"], inputs=[ToolInput(tag="in_seqs", input_type=String(optional=True), prefix="--seqs", doc=InputDocumentation(doc="Only produce output for specified sequences.  Argument should\nbe comma-separated list of names of ancestral nodes.")), ToolInput(tag="in_exclude", input_type=Boolean(optional=True), prefix="--exclude", doc=InputDocumentation(doc="(for use with --seqs) Exclude rather than include specified\nsequences.")), ToolInput(tag="in_keep_gaps", input_type=Boolean(optional=True), prefix="--keep-gaps", doc=InputDocumentation(doc="Retain gaps in output, as described above.")), ToolInput(tag="in_no_probs", input_type=Boolean(optional=True), prefix="--no-probs", doc=InputDocumentation(doc="Instead of reporting a probability distribution for each ancestral\nbase, output the base with the maximum posterior probability.\nOutput will be in FASTA format to files having suffix '.fa' rather\nthan '.probs'.  If used with --keep-gaps, gap characters ('-') will\nappear in reconstructed sequences.")), ToolInput(tag="in_suff_stats", input_type=File(optional=True), prefix="--suff-stats", doc=InputDocumentation(doc="Output a table of probability vectors and counts, pooling\ntogether all nodes of the tree (or a subset defined by\n--seqs).  Produces a file that can be used for code estimation\nby pbsTrain.  Output file will have suffix '.stats'.")), ToolInput(tag="in_encode", input_type=File(optional=True), prefix="--encode", doc=InputDocumentation(doc="Encode probabilities using given code and output as binary\nfiles.  Output files will have suffix '.bin' rather than '.probs'")), ToolInput(tag="in_msa_format", input_type=File(optional=True), prefix="--msa-format", doc=InputDocumentation(doc="|PHYLIP|MPM|MAF|SS\nAlignment format (default is to guess format from file content).\nNote that the program msa_view can be used for conversion.")), ToolInput(tag="in_refseq", input_type=File(optional=True), prefix="--refseq", doc=InputDocumentation(doc="(for use with --msa-format MAF) Read the complete text of the\nreference sequence from <fname> (FASTA format) and combine it\nwith the contents of the MAF file to produce a complete,\nordered representation of the alignment.  The reference\nsequence of the MAF file is assumed to be the one that appears\nfirst in each block.")), ToolInput(tag="in_gibbs", input_type=String(optional=True), prefix="--gibbs", doc=InputDocumentation(doc="(experimental) Estimate posterior probabilities by Gibbs sampling\nrather than by the sum-product algorithm.  Sample each sequence\n<nsamples> times and estimate posterior probabilities as fraction\nof times each base appeared at each position.  This option is used\nby default if a dinucleotide or trinucleotide model is given (exact\ninference not possible).   NOT YET IMPLEMENTED")), ToolInput(tag="in_independence_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Specifically, each base is assumed to have been inserted")), ToolInput(tag="in_data_dot", input_type=String(), position=0, doc=InputDocumentation(doc="The --suff-stats option produces a more compact output"))], outputs=[ToolOutput(tag="out_suff_stats", output_type=File(optional=True), selector=InputSelector(input_to_select="in_suff_stats", type_hint=File()), doc=OutputDocumentation(doc="Output a table of probability vectors and counts, pooling\ntogether all nodes of the tree (or a subset defined by\n--seqs).  Produces a file that can be used for code estimation\nby pbsTrain.  Output file will have suffix '.stats'."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Prequel_V0_1_0().translate("wdl", allow_empty_container=True)

