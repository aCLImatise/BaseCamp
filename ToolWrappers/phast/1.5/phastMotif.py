from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Phastmotif_V0_1_0 = CommandToolBuilder(tool="phastMotif", base_command=["phastMotif"], inputs=[ToolInput(tag="in_required_use_specified", input_type=File(optional=True), prefix="-t", doc=InputDocumentation(doc="(Required unless -m or -p) Use specified tree topology for\nall phylogenetic models (Newick format).")), ToolInput(tag="in_input_format_alignment", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc="Input format for alignment.  May be FASTA, PHYLIP, MPM, SS,\nor MAF (default FASTA).")), ToolInput(tag="in_read_background_model", input_type=File(optional=True), prefix="-b", doc=InputDocumentation(doc="Read background model from specified file (.mod format).\nBy default, the background model is estimated\nin a preprocessing step, by pooling all data.")), ToolInput(tag="in_estimate_separate_model", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Estimate a separate background model for each multiple alignment.\n(Not yet implemented.)")), ToolInput(tag="in_learn_motifs_specified", input_type=Int(optional=True), prefix="-k", doc=InputDocumentation(doc="Learn motifs of the specified size (default is 10).")), ToolInput(tag="in_report_best_motifs", input_type=Int(optional=True), prefix="-B", doc=InputDocumentation(doc="Report best <n> motifs (default 3).")), ToolInput(tag="in_meme_mode_use", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="MEME mode.  Use multinomial rather than phylogenetic")), ToolInput(tag="in_use_models_modelscharacters", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="Use 'profile' models rather than phylogenetic models\n(characters in each alignment column assumed\nindependent).  The resulting model is a hybrid of the\nfull model and MEME's model.  Essentially, it uses the\nmultiple alignments but not the phylogeny.  NOT YET IMPLEMENTED.")), ToolInput(tag="in_perform_random_restarts", input_type=String(optional=True), prefix="-n", doc=InputDocumentation(doc="Perform <n> random restarts and report the motif with highest")), ToolInput(tag="in_specified_see_below", input_type=String(optional=True), prefix="-R", doc=InputDocumentation(doc="specified (see below).")), ToolInput(tag="in_run_algorithm_see", input_type=Int(optional=True), prefix="-I", doc=InputDocumentation(doc="Run the algorithm after a 'soft' initialization with\neach of the consensus sequences in the specified list.\nAt each position, <pc> pseudocounts (see -c) are given\nto the consensus base and 1 pseudocount to all other\nbases.  Each string must have length at most equal to\nthe size of the motif.  If shorter, it is used as a\n'seed' for a motif, with flanking positions treated as\nwildcards.")), ToolInput(tag="in_initialize_most_prevalent", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc="<x,y>  Initialize with the x most prevalent y-tuples.  A soft\ninitialization is performed, as above.  If y is less\nthan the motif size, y-tuples are used as a 'seed' for\na motif, as above.")), ToolInput(tag="in_use_r_winnow", input_type=String(optional=True), prefix="-w", doc=InputDocumentation(doc="(for use with -I, -P, -R) Winnow initialization sequences\nto the top <n> based on the unmaximized likelihood.")), ToolInput(tag="in_p_r_number", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="(for use with -I, -P, -R) Number of pseudocounts for\nconsensus bases (default 5).")), ToolInput(tag="in_use_specified_prefix", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="Use the specified prefix for all output files (dflt. 'phastm').")), ToolInput(tag="in_produce_html_formatted", input_type=File(optional=True), prefix="-H", doc=InputDocumentation(doc="Produce HTML formatted output, in addition to ordinary output.\nOne file is produced per predicted motif, as well as a\nsingle HTML-formatted summary file.")), ToolInput(tag="in_produce_bed_file", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="Produce a BED file with predicted motifs, for use in the\nUCSC browser.  Currently, sequence names must be\nformatted such as 'chr10:102553847-102554897+', with\nthe final '+' or '-' indicating strand.")), ToolInput(tag="in_use_h_suppress", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="(For use with -H or -D) Suppress ordinary output to stdout.")), ToolInput(tag="in_distributions_dot", input_type=String(), position=0, doc=InputDocumentation(doc="The specified multiple alignments may")), ToolInput(tag="in_models_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Causes multiple alignments to be ignored -- any")), ToolInput(tag="in_independent_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-d <+lst> Use the discriminative training method of Segal et")), ToolInput(tag="in_examples_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Can be used with or without -m.")), ToolInput(tag="in_likelihood_dot", input_type=String(), position=1, doc=InputDocumentation(doc="Default number is 10.  Ignored with -I, -P, and"))], outputs=[ToolOutput(tag="out_produce_html_formatted", output_type=File(optional=True), selector=InputSelector(input_to_select="in_produce_html_formatted", type_hint=File()), doc=OutputDocumentation(doc="Produce HTML formatted output, in addition to ordinary output.\nOne file is produced per predicted motif, as well as a\nsingle HTML-formatted summary file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phastmotif_V0_1_0().translate("wdl", allow_empty_container=True)

