!Command
command:
- dfgEval
positional:
- !Positional
  description: -p [ --precision ] arg (=5)           Output precision of real numbers.
  position: 0
  name: file
  optional: false
named:
- !Flag
  description: "[ --ppFile ] arg                   Calculate posterior probabilities\
    \ for\neach state of each random variable and\noutput to file."
  synonyms:
  - -o
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[ --ncFile ] arg                   Calculate normalization constant\
    \ output\nto file."
  synonyms:
  - -n
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[ --mpsFile ] arg                  Calculate most probable state for\
    \ each\nrandom variable and output to file."
  synonyms:
  - -m
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Calculate expectancies and output to
  synonyms:
  - --expFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: "For post probs, for each state output\nsum of post probs for all the\
    \ other\nstates for that variable. This retains\nprecision for post probs very\
    \ close to\none."
  synonyms:
  - --ppSumOther
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[ --minusLogarithm ]               Output minus the natural logarithm\
    \ of\nresult values (program will terminate\non negative results...)."
  synonyms:
  - -l
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Define the random variables for which\nthe most probable state (mps)\
    \ should be\noutput. Default is to output the mps\nfor all random variables. The\n\
    specification string must be enclosed\nin citation marks and whitespace\nseparated\
    \ if it includes more than one\nrandom variable, e.g.: \"X Y\"."
  synonyms:
  - --mpsVars
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: "Define the random variables for which\nthe posterior state probabilities\
    \ (pp)\nshould be calculated. Default is to\noutput the pp for all states of all\n\
    random variables (may generate much\noutput!). Random variables are\nspecified\
    \ similar to mpsVars, but must\nbe semicolon (';') separated. It is\npossible\
    \ to only output pp's for\ncertain states, in which case the\nfollowing specification\
    \ format is used:\n\"X=a b c; Y=a b\"."
  synonyms:
  - --ppVars
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: "[ --dfgSpecPrefix ] arg (=./dfgSpec/)\nPrefix of DFG specification\
    \ files.."
  synonyms:
  - -s
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(=factorGraph.txt)\nSpecification of the factor graph\nstructure."
  synonyms:
  - --factorGraphFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: "(=variables.txt)  Specification of the state map used by\neach variable."
  synonyms:
  - --variablesFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: (=stateMaps.txt)   Specification of state maps.
  synonyms:
  - --stateMapFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: "(=factorPotentials.txt)\nSpecification of factor potentials."
  synonyms:
  - --facPotFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: "Input subscribed variables file in\nnamed data format. Must use same\n\
    identifiers in same order as varFile\n"
  synonyms:
  - --subVarFile
  args: !SimpleFlagArg
    name: arg
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: '[ --help ]                         produce help message'
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "dfgEval allows implementation of discrete factor graphs and evaluates\
  \ the probability of data sets under these models.\n\n  Usage: dfgEval [options]\
  \ <inputVarData.tab> [inputFacData.tab]\n\nThe arguments inputVarData.tab and inputFacData.tab\
  \ are both in named data format.\nAllowed options:\n  -h [ --help ]            \
  \             produce help message\n  -o [ --ppFile ] arg                   Calculate\
  \ posterior probabilities for \n                                        each state\
  \ of each random variable and \n                                        output to\
  \ file.\n  -n [ --ncFile ] arg                   Calculate normalization constant\
  \ output\n                                        to file.\n  -m [ --mpsFile ] arg\
  \                  Calculate most probable state for each \n                   \
  \                     random variable and output to file.\n  --expFile arg     \
  \                    Calculate expectancies and output to \n                   \
  \                     file\n  -p [ --precision ] arg (=5)           Output precision\
  \ of real numbers.\n  --ppSumOther                          For post probs, for\
  \ each state output \n                                        sum of post probs\
  \ for all the other \n                                        states for that variable.\
  \ This retains \n                                        precision for post probs\
  \ very close to \n                                        one.\n  -l [ --minusLogarithm\
  \ ]               Output minus the natural logarithm of \n                     \
  \                   result values (program will terminate \n                   \
  \                     on negative results...).\n  --mpsVars arg                \
  \         Define the random variables for which \n                             \
  \           the most probable state (mps) should be\n                          \
  \              output. Default is to output the mps \n                         \
  \               for all random variables. The \n                               \
  \         specification string must be enclosed \n                             \
  \           in citation marks and whitespace \n                                \
  \        separated if it includes more than one \n                             \
  \           random variable, e.g.: \"X Y\".\n  --ppVars arg                    \
  \      Define the random variables for which \n                                \
  \        the posterior state probabilities (pp) \n                             \
  \           should be calculated. Default is to \n                             \
  \           output the pp for all states of all \n                             \
  \           random variables (may generate much \n                             \
  \           output!). Random variables are \n                                  \
  \      specified similar to mpsVars, but must \n                               \
  \         be semicolon (';') separated. It is \n                               \
  \         possible to only output pp's for \n                                  \
  \      certain states, in which case the \n                                    \
  \    following specification format is used:\n                                 \
  \       \"X=a b c; Y=a b\".\n  -s [ --dfgSpecPrefix ] arg (=./dfgSpec/)\n      \
  \                                  Prefix of DFG specification files..\n  --factorGraphFile\
  \ arg (=factorGraph.txt)\n                                        Specification\
  \ of the factor graph \n                                        structure.\n  --variablesFile\
  \ arg (=variables.txt)  Specification of the state map used by \n              \
  \                          each variable.\n  --stateMapFile arg (=stateMaps.txt)\
  \   Specification of state maps.\n  --facPotFile arg (=factorPotentials.txt)\n \
  \                                       Specification of factor potentials.\n  --subVarFile\
  \ arg                      Input subscribed variables file in \n               \
  \                         named data format. Must use same \n                  \
  \                      identifiers in same order as varFile\n\n"
generated_using:
- --help
