from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Fragsim_V0_1_0 = CommandToolBuilder(tool="fragSim", base_command=["fragSim"], inputs=[ToolInput(tag="in__fragments_default", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[number]                        Generate [number] fragments (default: 10)")), ToolInput(tag="in_comp", input_type=Boolean(optional=True), prefix="--comp", doc=InputDocumentation(doc="[file]                          Base composition for the fragments (default none)")), ToolInput(tag="in_dist", input_type=Boolean(optional=True), prefix="--dist", doc=InputDocumentation(doc="[file]                          Distance from ends to consider  (default: 1)\nif this is not specified, the base composition\nwill only reflect the chromosome file used")), ToolInput(tag="in_norev", input_type=Boolean(optional=True), prefix="--norev", doc=InputDocumentation(doc="Do not reverse complement (default: rev. comp half of seqs.)")), ToolInput(tag="in_case", input_type=Boolean(optional=True), prefix="--case", doc=InputDocumentation(doc="Do not set the sequence to upper-case (default: uppercase the seqs.)")), ToolInput(tag="in_write_output_bam", input_type=File(optional=True), prefix="-b", doc=InputDocumentation(doc="[bam out]                       Write output as a BAM file (default: fasta in stdout)")), ToolInput(tag="in_write_output_zipped", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="[fasta out]                     Write output as a zipped fasta (default: fasta in stdout)")), ToolInput(tag="in_produce_uncompressed_bam", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="Produce uncompressed BAM (good for unix pipe)")), ToolInput(tag="in_tag", input_type=Boolean(optional=True), prefix="-tag", doc=InputDocumentation(doc="[tag]                           Append this string to deflines or BAM tags (Default:  not on/not used)")), ToolInput(tag="in_tmp", input_type=Boolean(optional=True), prefix="-tmp", doc=InputDocumentation(doc="[tmp dir]                       Use this directory as the temporary dir for zipped files (default:  /tmp/)")), ToolInput(tag="in_uniq", input_type=Boolean(optional=True), prefix="-uniq", doc=InputDocumentation(doc="Make sure that the fragment names are unique by appending a suffix (default:  not on/not used)\nnote: this might not be practical for large datasets")), ToolInput(tag="in_minimum_fragments_length", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[length]                        Minimum fragments length < (default: 0)")), ToolInput(tag="in_maximum_fragments_length", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="[length]                        Maximum fragments length > (default: 1000)")), ToolInput(tag="in_generate_fragments_fixed", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[length]                        Generate fragments of fixed length  (default: 20)")), ToolInput(tag="in_open_file_length", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[file]                          Open file with size distribution (one fragment length per line)")), ToolInput(tag="in_open_file_size", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[file]                          Open file with size frequency in the following format:\nlength[TAB]freq ex:\n40      0.0525\n41      0.0491\n...")), ToolInput(tag="in_loc", input_type=Boolean(optional=True), prefix="--loc", doc=InputDocumentation(doc="[file]                  Location for lognormal distribution (default none)")), ToolInput(tag="in_scale", input_type=Boolean(optional=True), prefix="--scale", doc=InputDocumentation(doc="[file]                  Scale for lognormal distribution      (default none)")), ToolInput(tag="in_gc", input_type=Boolean(optional=True), prefix="-gc", doc=InputDocumentation(doc="[gc bias]                       Use GC bias factor  (default: 0)"))], outputs=[ToolOutput(tag="out_write_output_bam", output_type=File(optional=True), selector=InputSelector(input_to_select="in_write_output_bam", type_hint=File()), doc=OutputDocumentation(doc="[bam out]                       Write output as a BAM file (default: fasta in stdout)"))], container="quay.io/biocontainers/gargammel-slim:1.1.2--h68ad25a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fragsim_V0_1_0().translate("wdl")

