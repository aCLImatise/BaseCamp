from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Deamsim_V0_1_0 = CommandToolBuilder(tool="deamSim", base_command=["deamSim"], inputs=[ToolInput(tag="in_read_bam_write", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[BAM out]                       Read BAM and write output as a BAM (default: fasta)")), ToolInput(tag="in_produce_uncompressed_bam", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="Produce uncompressed BAM (good for unix pipe)")), ToolInput(tag="in_write_fasta_output", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="[fasta out]                     Write fasta output as a zipped fasta")), ToolInput(tag="in_name", input_type=Boolean(optional=True), prefix="-name", doc=InputDocumentation(doc="Put a tag in the read name with deam bases (default not on/not used)")), ToolInput(tag="in_verbose_mode", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="verbose mode")), ToolInput(tag="in_last", input_type=Boolean(optional=True), prefix="-last", doc=InputDocumentation(doc="If matfile is used, do not use the substitution rates of the\nlast row over the rest of the molecule (default: no data = use last row)")), ToolInput(tag="in_map_damage", input_type=Boolean(optional=True), prefix="-mapdamage", doc=InputDocumentation(doc="[mis.txt] [protocol]        Read the miscorporation file [mis.txt]\nproduced by mapDamage\n[protocol] can be either 'single' or 'double' (without quotes)\nSingle strand will have C->T damage on both ends\nDouble strand will have and C->T at the 5' end and G->A damage at the 3' end")), ToolInput(tag="in_mat_file", input_type=Boolean(optional=True), prefix="-matfile", doc=InputDocumentation(doc="[matrix file prefix]          Read the matrix file of substitutions instead of the default\nProvide the prefix only, both files must end with\n5.dat and 3.dat")), ToolInput(tag="in_mat_file_non_meth", input_type=Boolean(optional=True), prefix="-matfilenonmeth", doc=InputDocumentation(doc="[matrix file prefix]   Read the matrix file of substitutions for non-methylated Cs\nProvide the prefix only, both files must end with\n5.dat and 3.dat")), ToolInput(tag="in_mat_file_meth", input_type=Boolean(optional=True), prefix="-matfilemeth", doc=InputDocumentation(doc="[matrix file prefix]      Read the matrix file of substitutions for methylated Cs\nProvide the prefix only, both files must end with\n5.dat and 3.dat")), ToolInput(tag="in_mat", input_type=Boolean(optional=True), prefix="-mat", doc=InputDocumentation(doc="[ancient DNA matrix]          For default matrices, use either 'single' or 'double' (without quotes)\nSingle strand will have C->T damage on both ends\nDouble strand will have and C->T at the 5p end and G->A damage at the 3p end")), ToolInput(tag="in_damage", input_type=Boolean(optional=True), prefix="-damage", doc=InputDocumentation(doc="[v,l,d,s]                   For the Briggs et al. 2007 model\nThe parameters must be comma-separated e.g.: -damage 0.03,0.4,0.01,0.7\nv: nick frequency\nl: length of overhanging ends (geometric parameter)\nd: prob. of deamination of Cs in double-stranded parts\ns: prob. of deamination of Cs in single-stranded parts\n")), ToolInput(tag="in_double", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_i", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_mandatory", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_single", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_specify", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_this", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_adds", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_ancient", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_fast_a", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_if", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_matrix", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_mis_dot_txt", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_some", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_dna", input_type=String(optional=True), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_deamination", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_either", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_or", input_type=String(optional=True), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_program", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_protocol", input_type=String(optional=True), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_strand", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_bam", input_type=String(optional=True), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_read", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_according", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_files", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_input", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_prefix", input_type=String(optional=True), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_reads", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_will", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_40", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_a", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_are", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_have", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_is", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_to", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_c", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_and", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_found", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_mis_corporation", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_certain", input_type=String(), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_file", input_type=File(optional=True), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_matrices", input_type=String(), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_the", input_type=String(), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_model", input_type=String(), position=6, doc=InputDocumentation(doc="")), ToolInput(tag="in_models", input_type=String(), position=6, doc=InputDocumentation(doc="")), ToolInput(tag="in_of", input_type=String(), position=7, doc=InputDocumentation(doc="")), ToolInput(tag="in_substitutions", input_type=String(), position=8, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_58", input_type=String(), position=9, doc=InputDocumentation(doc="")), ToolInput(tag="in_instead", input_type=String(), position=9, doc=InputDocumentation(doc="")), ToolInput(tag="in_methylated", input_type=String(), position=10, doc=InputDocumentation(doc="")), ToolInput(tag="in_non_methylated", input_type=String(), position=10, doc=InputDocumentation(doc="")), ToolInput(tag="in_cs", input_type=String(), position=11, doc=InputDocumentation(doc="")), ToolInput(tag="in_default", input_type=String(), position=12, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/gargammel-slim:1.1.2--h68ad25a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Deamsim_V0_1_0().translate("wdl")

