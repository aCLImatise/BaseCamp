from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, String, Array, Boolean

Tombo_Build_Model_Event_Resquiggle_V0_1_0 = CommandToolBuilder(tool="tombo_build_model_event_resquiggle", base_command=["tombo", "build_model", "event_resquiggle"], inputs=[ToolInput(tag="in_minimap_two_executable", input_type=Int(optional=True), prefix="--minimap2-executable", doc=InputDocumentation(doc="Path to minimap2 executable.")), ToolInput(tag="in_minimap_two_index", input_type=Int(optional=True), prefix="--minimap2-index", doc=InputDocumentation(doc="Path to minimap2 index (with map-ont preset) file\ncorresponding to the [genome_fasta] provided.")), ToolInput(tag="in_bwa_mem_executable", input_type=File(optional=True), prefix="--bwa-mem-executable", doc=InputDocumentation(doc="Path to bwa-mem executable.")), ToolInput(tag="in_graph_map_executable", input_type=File(optional=True), prefix="--graphmap-executable", doc=InputDocumentation(doc="Path to graphmap executable.")), ToolInput(tag="in_alignment_batch_size", input_type=Int(optional=True), prefix="--alignment-batch-size", doc=InputDocumentation(doc="Number of reads included in each alignment call. Note:\nA new system mapping call is made for each batch\n(including loading of the genome), so it is advised to\nuse larger values for larger genomes. Default: 1000")), ToolInput(tag="in_normalization_type", input_type=String(optional=True), prefix="--normalization-type", doc=InputDocumentation(doc="Choices: 'none': raw 16-bit DAQ values, 'pA_raw': pA\nas in the ONT events (using offset, range and\ndigitization), 'pA': k-mer-based correction for pA\ndrift as in nanopolish (requires [--pore-model-\nfilename]), 'median': median and MAD from raw signal.\nDefault: median")), ToolInput(tag="in_pore_model_filename", input_type=File(optional=True), prefix="--pore-model-filename", doc=InputDocumentation(doc="File containing kmer model parameters (level_mean and\nlevel_stdv) used in order to compute kmer-based\ncorrected pA values. E.g. https://github.com/jts/nanop\nolish/blob/master/etc/r9-models/template_median68pA.5m\ners.model")), ToolInput(tag="in_outlier_threshold", input_type=Int(optional=True), prefix="--outlier-threshold", doc=InputDocumentation(doc="Windosrize the signal at this number of scale values.\nNegative value disables outlier clipping. Default:\n5.000000")), ToolInput(tag="in_segmentation_parameters", input_type=Int(optional=True), prefix="--segmentation-parameters", doc=InputDocumentation(doc="SEGMENTATION_PARAMETERS\nSpecify the 2 parameters for segmentation 1) running\nneighboring windows width 2) minimum raw observations\nper genomic base. Sample type defaults: RNA : 12 6 ||\nDNA : 5 3")), ToolInput(tag="in_obs_per_base_filter", input_type=Array(t=String(), optional=True), prefix="--obs-per-base-filter", doc=InputDocumentation(doc="Filter reads based on observations per base percentile\nthresholds. Format thresholds as 'percentile:thresh\n[pctl2:thresh2 ...]'. For example to filter reads with\n99th pctl > 200 obs/base or max > 5k obs/base use\n'99:200 100:5000'.")), ToolInput(tag="in_timeout", input_type=String(optional=True), prefix="--timeout", doc=InputDocumentation(doc="Timeout in seconds for processing a single read.\nDefault: No timeout.")), ToolInput(tag="in_cpts_limit", input_type=Int(optional=True), prefix="--cpts-limit", doc=InputDocumentation(doc="Maximum number of changepoints to find within a single\nindel group. Default: No limit.")), ToolInput(tag="in_skip_index", input_type=Boolean(optional=True), prefix="--skip-index", doc=InputDocumentation(doc="Skip creation of tombo index. This drastically slows\ndownstream tombo commands. Default stores tombo index\nnamed '.[--fast5-basedir].[--corrected-\ngroup].tombo.index' to be loaded automatically for\ndownstream commands.")), ToolInput(tag="in_overwrite", input_type=Boolean(optional=True), prefix="--overwrite", doc=InputDocumentation(doc="Overwrite previous corrected group in FAST5 files.\nNote: only effects --corrected-group or --new-\ncorrected-group.")), ToolInput(tag="in_failed_reads_filename", input_type=File(optional=True), prefix="--failed-reads-filename", doc=InputDocumentation(doc="Output failed read filenames with assoicated error.\nDefault: Do not store failed reads.")), ToolInput(tag="in_include_event_stdev", input_type=Boolean(optional=True), prefix="--include-event-stdev", doc=InputDocumentation(doc="Include corrected event standard deviation in output\nFAST5 data.")), ToolInput(tag="in_corrected_group", input_type=Int(optional=True), prefix="--corrected-group", doc=InputDocumentation(doc="FAST5 group created by resquiggle command. Default:\nRawGenomeCorrected_000")), ToolInput(tag="in_base_call_group", input_type=Int(optional=True), prefix="--basecall-group", doc=InputDocumentation(doc="FAST5 group obtain original basecalls (under Analyses\ngroup). Default: Basecall_1D_000")), ToolInput(tag="in_base_call_subgroups", input_type=Array(t=String(), optional=True), prefix="--basecall-subgroups", doc=InputDocumentation(doc="FAST5 subgroup(s) (under /Analyses/[--basecall-\ngroup]/) containing basecalls and created within\n[--corrected-group] containing re-squiggle results.\nDefault: ['BaseCalled_template']")), ToolInput(tag="in_processes", input_type=Int(optional=True), prefix="--processes", doc=InputDocumentation(doc="Number of processes. Default: 2")), ToolInput(tag="in_align_processes", input_type=Int(optional=True), prefix="--align-processes", doc=InputDocumentation(doc="Number of processes to use for parsing and aligning\noriginal basecalls. Each process will independently\nload the genome into memory, so use caution with\nlarger genomes (e.g. human). Default: 1")), ToolInput(tag="in_align_threads_per_process", input_type=Int(optional=True), prefix="--align-threads-per-process", doc=InputDocumentation(doc="Number of threads to use for aligner system call.\nDefault: [--processes] / (2 * [--align-processes)]")), ToolInput(tag="in_re_squiggle_processes", input_type=Int(optional=True), prefix="--resquiggle-processes", doc=InputDocumentation(doc="Number of processes to use for resquiggle algorithm.\nDefault: [--processes] / 2")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Don't print status information.")), ToolInput(tag="in_fast_fives_basedir", input_type=Int(), position=0, doc=InputDocumentation(doc="Directory containing fast5 files. All files ending in\n'fast5' found recursively within this base directory\nwill be processed.")), ToolInput(tag="in_reference_fast_a", input_type=String(), position=1, doc=InputDocumentation(doc="Reference genome/transcriptome FASTA file for mapping."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tombo_Build_Model_Event_Resquiggle_V0_1_0().translate("wdl", allow_empty_container=True)

