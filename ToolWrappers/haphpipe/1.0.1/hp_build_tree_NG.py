from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Directory, Boolean, Int

Hp_Build_Tree_Ng_V0_1_0 = CommandToolBuilder(tool="hp_build_tree_NG", base_command=["hp_build_tree_NG"], inputs=[ToolInput(tag="in_seqs", input_type=String(optional=True), prefix="--seqs", doc=InputDocumentation(doc="Input alignment in FASTA or PHYLIP format")), ToolInput(tag="in_in_type", input_type=File(optional=True), prefix="--in_type", doc=InputDocumentation(doc="File format: FASTA or PHYLIP (Default is FASTA)")), ToolInput(tag="in_output_name", input_type=String(optional=True), prefix="--output_name", doc=InputDocumentation(doc="Run name for trees")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory (default: .)")), ToolInput(tag="in_model", input_type=File(optional=True), prefix="--model", doc=InputDocumentation(doc="Substitution model OR path to partition file")), ToolInput(tag="in_all", input_type=Boolean(optional=True), prefix="--all", doc=InputDocumentation(doc="Run bootstrap search and find best ML tree (default:\nFalse)")), ToolInput(tag="in_branch_length", input_type=Int(optional=True), prefix="--branch_length", doc=InputDocumentation(doc="Branch length estimation mode: linked, scaled,\nunlinked (partitioned analysis only)")), ToolInput(tag="in_con_sense", input_type=String(optional=True), prefix="--consense", doc=InputDocumentation(doc="Consensus tree building options: STRICT, MR, or MRE")), ToolInput(tag="in_rand_tree", input_type=String(optional=True), prefix="--rand_tree", doc=InputDocumentation(doc="Start from a random topology")), ToolInput(tag="in_pars_tree", input_type=String(optional=True), prefix="--pars_tree", doc=InputDocumentation(doc="Start from a tree generated by the parsimony-based\nrandomized stepwise addition algorithm")), ToolInput(tag="in_user_tree", input_type=File(optional=True), prefix="--user_tree", doc=InputDocumentation(doc="Load a custom starting tree from the NEWICK file")), ToolInput(tag="in_search", input_type=Boolean(optional=True), prefix="--search", doc=InputDocumentation(doc="Find best scoring ML tree (default) (default: False)")), ToolInput(tag="in_search_one_random", input_type=Boolean(optional=True), prefix="--search_1random", doc=InputDocumentation(doc="Find best scoring ML tree with 1 random tree (default:\nFalse)")), ToolInput(tag="in_constraint_tree", input_type=String(optional=True), prefix="--constraint_tree", doc=InputDocumentation(doc="Specify a constraint tree to e.g. enforce monophyly of\ncertain groups")), ToolInput(tag="in_out_group", input_type=String(optional=True), prefix="--outgroup", doc=InputDocumentation(doc="Outgroup(s) for tree")), ToolInput(tag="in_bs_converge", input_type=Boolean(optional=True), prefix="--bsconverge", doc=InputDocumentation(doc="A posteriori bootstrap convergence test (default:\nFalse)")), ToolInput(tag="in_bs_msa", input_type=Boolean(optional=True), prefix="--bs_msa", doc=InputDocumentation(doc="Generate bootstrap replicate alignments (default:\nFalse)")), ToolInput(tag="in_bs_trees", input_type=Int(optional=True), prefix="--bs_trees", doc=InputDocumentation(doc="Number of bootstrap trees OR autoMRE")), ToolInput(tag="in_bs_tree_cut_off", input_type=String(optional=True), prefix="--bs_tree_cutoff", doc=InputDocumentation(doc="Change the bootstopping cutoff value to make the test\nmore or less stringent")), ToolInput(tag="in_bs_metric", input_type=String(optional=True), prefix="--bs_metric", doc=InputDocumentation(doc="Options: tbe or fbp,tbe")), ToolInput(tag="in_bootstrap", input_type=Boolean(optional=True), prefix="--bootstrap", doc=InputDocumentation(doc="Run non-parametric bootstrap analysis (default: False)")), ToolInput(tag="in_check", input_type=Boolean(optional=True), prefix="--check", doc=InputDocumentation(doc="Check alignment file and remove any columns consisting\nentirely of gaps (default: False)")), ToolInput(tag="in_log", input_type=String(optional=True), prefix="--log", doc=InputDocumentation(doc="Options for output verbosity: ERROR, WARNING, RESULT,\nINFO, PROGRESS, VERBOSE, or DEBUG")), ToolInput(tag="in_log_lh", input_type=Boolean(optional=True), prefix="--loglh", doc=InputDocumentation(doc="Compute log-likelihood of a given tree without any\noptimization (default: False)")), ToolInput(tag="in_terrace", input_type=Boolean(optional=True), prefix="--terrace", doc=InputDocumentation(doc="Check whether a tree lies on a phylogenetic terrace\n(default: False)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Seed for random numbers (default: 12345)")), ToolInput(tag="in_redo", input_type=Boolean(optional=True), prefix="--redo", doc=InputDocumentation(doc="Run even if there are existing files with the same\nname (use with caution!) (default: False)")), ToolInput(tag="in_keep_tmp", input_type=Boolean(optional=True), prefix="--keep_tmp", doc=InputDocumentation(doc="Keep temporary directory (default: False)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Do not write output to console (silence stdout and\nstderr) (default: False)")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logfile", doc=InputDocumentation(doc="Append console output to this file")), ToolInput(tag="in_n_cpu", input_type=Int(optional=True), prefix="--ncpu", doc=InputDocumentation(doc="Number of CPU to use (default: 1)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Print commands but do not run (default: False)"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory (default: .)")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Append console output to this file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hp_Build_Tree_Ng_V0_1_0().translate("wdl", allow_empty_container=True)

