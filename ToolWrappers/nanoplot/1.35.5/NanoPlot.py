from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, Directory, String, File, Array

Nanoplot_V0_1_0 = CommandToolBuilder(tool="NanoPlot", base_command=["NanoPlot"], inputs=[ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Set the allowed number of threads to be used by the script")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Write log messages also to terminal.")), ToolInput(tag="in_store", input_type=Boolean(optional=True), prefix="--store", doc=InputDocumentation(doc="Store the extracted data in a pickle file for future plotting.")), ToolInput(tag="in_raw", input_type=Boolean(optional=True), prefix="--raw", doc=InputDocumentation(doc="Store the extracted data in tab separated file.")), ToolInput(tag="in_huge", input_type=Boolean(optional=True), prefix="--huge", doc=InputDocumentation(doc="Input data is one very large file.")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Specify directory in which output has to be created.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Specify an optional prefix to be used for the output files.")), ToolInput(tag="in_tsv_stats", input_type=File(optional=True), prefix="--tsv_stats", doc=InputDocumentation(doc="Output the stats file as a properly formatted TSV.")), ToolInput(tag="in_info_in_report", input_type=Boolean(optional=True), prefix="--info_in_report", doc=InputDocumentation(doc="Add NanoPlot run info in the report.")), ToolInput(tag="in_legacy", input_type=Boolean(optional=True), prefix="--legacy", doc=InputDocumentation(doc="Create four types of bivariate plots of x vs y, containing marginal summaries,\nusing the matplotlib and seaborn package")), ToolInput(tag="in_maxlength", input_type=Int(optional=True), prefix="--maxlength", doc=InputDocumentation(doc="Hide reads longer than length specified.")), ToolInput(tag="in_minlength", input_type=Int(optional=True), prefix="--minlength", doc=InputDocumentation(doc="Hide reads shorter than length specified.")), ToolInput(tag="in_drop_outliers", input_type=Boolean(optional=True), prefix="--drop_outliers", doc=InputDocumentation(doc="Drop outlier reads with extreme long length.")), ToolInput(tag="in_down_sample", input_type=String(optional=True), prefix="--downsample", doc=InputDocumentation(doc="Reduce dataset to N reads by random sampling.")), ToolInput(tag="in_log_length", input_type=Boolean(optional=True), prefix="--loglength", doc=InputDocumentation(doc="Additionally show logarithmic scaling of lengths in plots.")), ToolInput(tag="in_percent_qual", input_type=Boolean(optional=True), prefix="--percentqual", doc=InputDocumentation(doc="Use qualities as theoretical percent identities.")), ToolInput(tag="in_a_length", input_type=Boolean(optional=True), prefix="--alength", doc=InputDocumentation(doc="Use aligned read lengths rather than sequenced length (bam mode)")), ToolInput(tag="in_min_qual", input_type=String(optional=True), prefix="--minqual", doc=InputDocumentation(doc="Drop reads with an average quality lower than specified.")), ToolInput(tag="in_runtime_until", input_type=String(optional=True), prefix="--runtime_until", doc=InputDocumentation(doc="Only take the N first hours of a run")), ToolInput(tag="in_read_type", input_type=String(optional=True), prefix="--readtype", doc=InputDocumentation(doc="Which read type to extract information about from summary. Options are 1D, 2D,\n1D2")), ToolInput(tag="in_barcoded", input_type=Boolean(optional=True), prefix="--barcoded", doc=InputDocumentation(doc="Use if you want to split the summary file by barcode")), ToolInput(tag="in_no_supplementary", input_type=Boolean(optional=True), prefix="--no_supplementary", doc=InputDocumentation(doc="Use if you want to remove supplementary alignments")), ToolInput(tag="in_color", input_type=String(optional=True), prefix="--color", doc=InputDocumentation(doc="Specify a valid matplotlib color for the plots")), ToolInput(tag="in_colormap", input_type=String(optional=True), prefix="--colormap", doc=InputDocumentation(doc="Specify a valid matplotlib colormap for the heatmap")), ToolInput(tag="in_plots", input_type=Boolean(optional=True), prefix="--plots", doc=InputDocumentation(doc="[{kde,hex,dot,pauvre} ...]\nSpecify which bivariate plots have to be made.")), ToolInput(tag="in_list_colors", input_type=Boolean(optional=True), prefix="--listcolors", doc=InputDocumentation(doc="List the colors which are available for plotting and exit.")), ToolInput(tag="in_list_colormaps", input_type=Boolean(optional=True), prefix="--listcolormaps", doc=InputDocumentation(doc="List the colors which are available for plotting and exit.")), ToolInput(tag="in_no_n_five_zero", input_type=Boolean(optional=True), prefix="--no-N50", doc=InputDocumentation(doc="Hide the N50 mark in the read length histogram")), ToolInput(tag="in_n_five_zero", input_type=Boolean(optional=True), prefix="--N50", doc=InputDocumentation(doc="Show the N50 mark in the read length histogram")), ToolInput(tag="in_title", input_type=String(optional=True), prefix="--title", doc=InputDocumentation(doc="Add a title to all plots, requires quoting if using spaces")), ToolInput(tag="in_font_scale", input_type=String(optional=True), prefix="--font_scale", doc=InputDocumentation(doc="Scale the font of the plots by a factor")), ToolInput(tag="in_dpi", input_type=String(optional=True), prefix="--dpi", doc=InputDocumentation(doc="Set the dpi for saving images")), ToolInput(tag="in_hide_stats", input_type=Boolean(optional=True), prefix="--hide_stats", doc=InputDocumentation(doc="Not adding Pearson R stats in some bivariate plots")), ToolInput(tag="in_fast_q", input_type=Array(t=File(), optional=True), prefix="--fastq", doc=InputDocumentation(doc="Data is in one or more default fastq file(s).")), ToolInput(tag="in_fast_a", input_type=Array(t=File(), optional=True), prefix="--fasta", doc=InputDocumentation(doc="Data is in one or more fasta file(s).")), ToolInput(tag="in_fast_q_rich", input_type=Array(t=File(), optional=True), prefix="--fastq_rich", doc=InputDocumentation(doc="Data is in one or more fastq file(s) generated by albacore, MinKNOW or guppy\nwith additional information concerning channel and time.")), ToolInput(tag="in_fast_q_minimal", input_type=Array(t=File(), optional=True), prefix="--fastq_minimal", doc=InputDocumentation(doc="Data is in one or more fastq file(s) generated by albacore, MinKNOW or guppy\nwith additional information concerning channel and time. Is extracted swiftly\nwithout elaborate checks.")), ToolInput(tag="in_summary", input_type=Array(t=File(), optional=True), prefix="--summary", doc=InputDocumentation(doc="Data is in one or more summary file(s) generated by albacore or guppy.")), ToolInput(tag="in_bam", input_type=Array(t=File(), optional=True), prefix="--bam", doc=InputDocumentation(doc="Data is in one or more sorted bam file(s).")), ToolInput(tag="in_ub_am", input_type=Array(t=File(), optional=True), prefix="--ubam", doc=InputDocumentation(doc="Data is in one or more unmapped bam file(s).")), ToolInput(tag="in_cram", input_type=Array(t=File(), optional=True), prefix="--cram", doc=InputDocumentation(doc="Data is in one or more sorted cram file(s).")), ToolInput(tag="in_pickle", input_type=File(optional=True), prefix="--pickle", doc=InputDocumentation(doc="Data is a pickle file stored earlier.")), ToolInput(tag="in_feather", input_type=Array(t=File(), optional=True), prefix="--feather", doc=InputDocumentation(doc="Data is in one or more feather file(s).")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Specify directory in which output has to be created.")), ToolOutput(tag="out_tsv_stats", output_type=File(optional=True), selector=InputSelector(input_to_select="in_tsv_stats", type_hint=File()), doc=OutputDocumentation(doc="Output the stats file as a properly formatted TSV."))], container="quay.io/biocontainers/nanoplot:1.35.5--pyhdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nanoplot_V0_1_0().translate("wdl")

