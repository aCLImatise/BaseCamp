!Command
command:
- maskOutFa
positional:
- !Positional
  description: ''
  position: 0
  name: in.fa
  optional: false
- !Positional
  description: ''
  position: 1
  name: maskFile
  optional: false
named:
- !Flag
  description: '- puts masked parts in lower case other in upper.'
  synonyms:
  - -soft
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '- lower cases masked bits, leaves others unchanged'
  synonyms:
  - -softAdd
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '- clip out of bounds mask records rather than dying.'
  synonyms:
  - -clip
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '- "out" or "bed" for when input does not have required extension.'
  synonyms:
  - -maskFormat
  args: !SimpleFlagArg
    name: fmt
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "maskOutFa - Produce a masked .fa file given an unmasked .fa and\na RepeatMasker\
  \ .out file, or a .bed file to mask on.\nusage:\n   maskOutFa in.fa maskFile out.fa.masked\n\
  where in.fa and out.fa.masked can be the same file, and\nmaskFile can end in .out\
  \ (for RepeatMasker) or .bed.\nMaskFile parameter can also be the word 'hard' in\
  \ which case \nlower case letters are converted to N's.\noptions:\n   -soft - puts\
  \ masked parts in lower case other in upper.\n   -softAdd - lower cases masked bits,\
  \ leaves others unchanged\n   -clip - clip out of bounds mask records rather than\
  \ dying.\n   -maskFormat=fmt - \"out\" or \"bed\" for when input does not have required\
  \ extension.\n\n"
generated_using: []
