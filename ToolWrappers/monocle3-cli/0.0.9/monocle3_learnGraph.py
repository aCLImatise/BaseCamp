from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, Float, String

Monocle3_Learngraph_V0_1_0 = CommandToolBuilder(tool="monocle3_learnGraph", base_command=["monocle3", "learnGraph"], inputs=[ToolInput(tag="in_input_object_format", input_type=Int(optional=True), prefix="--input-object-format", doc=InputDocumentation(doc="Format of input object. [Default: cds3]")), ToolInput(tag="in_output_object_format", input_type=Int(optional=True), prefix="--output-object-format", doc=InputDocumentation(doc="Format of output object. [Default: cds3]")), ToolInput(tag="in_introspective", input_type=Boolean(optional=True), prefix="--introspective", doc=InputDocumentation(doc="Print introspective information of the output object.")), ToolInput(tag="in_no_partition", input_type=Boolean(optional=True), prefix="--no-partition", doc=InputDocumentation(doc="When this option is set, learn a single tree structure for all the partitions. If not set, use the partitions calculated when clustering and identify disjoint graphs in each.")), ToolInput(tag="in_no_close_loop", input_type=Boolean(optional=True), prefix="--no-close-loop", doc=InputDocumentation(doc="When this option is set, skip the additional run of loop closing after computing the principal graphs to identify potential loop structure in the data space.")), ToolInput(tag="in_euclidean_distance_ratio", input_type=Float(optional=True), prefix="--euclidean-distance-ratio", doc=InputDocumentation(doc="The maximal ratio between the euclidean distance of two tip nodes in the spanning tree inferred from SimplePPT algorithm and that of the maximum distance between any connecting points on the spanning tree allowed to be connected during the loop closure procedure. [Default: 1]")), ToolInput(tag="in_geodesic_distance_ratio", input_type=Float(optional=True), prefix="--geodesic-distance-ratio", doc=InputDocumentation(doc="The minimal ratio between the geodestic distance of two tip nodes in the spanning tree inferred from SimplePPT algorithm and that of the length of the diameter path on the spanning tree allowed to be connected during the loop closure procedure. (Both euclidean_distance_ratio and geodestic_distance_ratio need to be satisfied to introduce the edge for loop closure.)")), ToolInput(tag="in_no_prune_graph", input_type=Boolean(optional=True), prefix="--no-prune-graph", doc=InputDocumentation(doc="When this option is set, perform an additional run of graph pruning to remove smaller insignificant branches.")), ToolInput(tag="in_minimal_branch_len", input_type=Int(optional=True), prefix="--minimal-branch-len", doc=InputDocumentation(doc="The minimal length of the diameter path for a branch to be preserved during graph pruning procedure. [Default: 10]")), ToolInput(tag="in_orthogonal_proj_tip", input_type=Boolean(optional=True), prefix="--orthogonal-proj-tip", doc=InputDocumentation(doc="When this option is set, perform orthogonal projection for cells corresponding to the tip principal points.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Emit verbose output.")), ToolInput(tag="in_input_object", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_output_object", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Monocle3_Learngraph_V0_1_0().translate("wdl", allow_empty_container=True)

