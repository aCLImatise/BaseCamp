from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean

Rambok_Py_V0_1_0 = CommandToolBuilder(tool="RAMBOK.py", base_command=["RAMBOK.py"], inputs=[ToolInput(tag="in_ref_file_one", input_type=Int(optional=True), prefix="--reffile1", doc=InputDocumentation(doc="Reference file of species 1 in fasta-format. Should\npair with name1")), ToolInput(tag="in_ref_file_two", input_type=Int(optional=True), prefix="--reffile2", doc=InputDocumentation(doc="Reference file of species 2 in fasta-format. Should\npair with name2")), ToolInput(tag="in_name_one", input_type=Int(optional=True), prefix="--name1", doc=InputDocumentation(doc="Name of species 1")), ToolInput(tag="in_name_two", input_type=Int(optional=True), prefix="--name2", doc=InputDocumentation(doc="Name of species 2")), ToolInput(tag="in_unassigned_one", input_type=Int(optional=True), prefix="--unassigned1", doc=InputDocumentation(doc="Fasta- or fastq-file containing mixed reads.")), ToolInput(tag="in_unassigned_two", input_type=Int(optional=True), prefix="--unassigned2", doc=InputDocumentation(doc="Fasta- or fastq-file containing mixed reads, only\nrequired in paired end mode.")), ToolInput(tag="in_km_er_sizes", input_type=Int(optional=True), prefix="--kmersizes", doc=InputDocumentation(doc="Order of Markov-Chain/kmer length. Enter as range\n(e.g. 4:8) or list (e.g. 4,6,8) or integer (e.g. 8).\nDefault = 8")), ToolInput(tag="in_out_path", input_type=File(optional=True), prefix="--outpath", doc=InputDocumentation(doc="Folder to write results to. Default = $name1_$name2/\nin your working directory")), ToolInput(tag="in_amount", input_type=Int(optional=True), prefix="--amount", doc=InputDocumentation(doc="Number of reads to be simulated, default = 50000")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of Threads to use")), ToolInput(tag="in_chunksize", input_type=Int(optional=True), prefix="--chunksize", doc=InputDocumentation(doc="Size of chunks created at a time for simulation,\ndefault = 100000. Only change if you know what you are\ndoing!")), ToolInput(tag="in_gap_size", input_type=Int(optional=True), prefix="--gapsize", doc=InputDocumentation(doc="Estimated size of gapsize in case of paired end reads,\ndefault = 1")), ToolInput(tag="in_cut_off_lower", input_type=Int(optional=True), prefix="--cutoff_lower", doc=InputDocumentation(doc="Lower cutoff: Output only reads with a score lower\nthan or equal to this value, use m1 for -1")), ToolInput(tag="in_cut_off_higher", input_type=Int(optional=True), prefix="--cutoff_higher", doc=InputDocumentation(doc="Higher cutoff: Output only reads with a score higher\nthan or equal to this value, use m1 for -1")), ToolInput(tag="in_delete_temp", input_type=Boolean(optional=True), prefix="--delete_temp", doc=InputDocumentation(doc="\Delete temporary files. Calculations will start from\nbeginning next time.")), ToolInput(tag="in_file_type", input_type=File(optional=True), prefix="--filetype", doc=InputDocumentation(doc="Type of your input reads. fasta or fastq, default =\nfastq\n"))], outputs=[ToolOutput(tag="out_out_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_path", type_hint=File()), doc=OutputDocumentation(doc="Folder to write results to. Default = $name1_$name2/\nin your working directory"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rambok_Py_V0_1_0().translate("wdl", allow_empty_container=True)

