from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, Float

Fc_Consensus_V0_1_0 = CommandToolBuilder(tool="fc_consensus", base_command=["fc_consensus"], inputs=[ToolInput(tag="in_n_core", input_type=Int(optional=True), prefix="--n-core", doc=InputDocumentation(doc="number of processes used for generating consensus; 0 for main process only (default: 24)")), ToolInput(tag="in_min_cov", input_type=Int(optional=True), prefix="--min-cov", doc=InputDocumentation(doc="minimum coverage to break the consensus (default: 6)")), ToolInput(tag="in_min_cov_aln", input_type=Int(optional=True), prefix="--min-cov-aln", doc=InputDocumentation(doc="minimum coverage of alignment data; a seed read with less than MIN_COV_ALN average depth of coverage will be completely ignored (default: 10)")), ToolInput(tag="in_max_cov_aln", input_type=Int(optional=True), prefix="--max-cov-aln", doc=InputDocumentation(doc="maximum coverage of alignment data; a seed read with more than MAX_COV_ALN average depth of coverage of the longest alignments will be capped, excess shorter alignments will be ignored (default: 0)")), ToolInput(tag="in_min_len_aln", input_type=Int(optional=True), prefix="--min-len-aln", doc=InputDocumentation(doc="minimum length of a sequence in an alignment to be used in consensus; any shorter sequence will be completely ignored (default: 0)")), ToolInput(tag="in_min_n_read", input_type=Int(optional=True), prefix="--min-n-read", doc=InputDocumentation(doc="1 + minimum number of reads used in generating the consensus; a seed read with fewer alignments will be completely ignored (default: 10)")), ToolInput(tag="in_max_n_read", input_type=Int(optional=True), prefix="--max-n-read", doc=InputDocumentation(doc="1 + maximum number of reads used in generating the consensus (default: 500)")), ToolInput(tag="in_trim", input_type=Boolean(optional=True), prefix="--trim", doc=InputDocumentation(doc="trim the input sequence with k-mer spare dynamic programming to find the mapped range (default: False)")), ToolInput(tag="in_output_full", input_type=Boolean(optional=True), prefix="--output-full", doc=InputDocumentation(doc="output uncorrected regions too (default: False)")), ToolInput(tag="in_output_multi", input_type=Boolean(optional=True), prefix="--output-multi", doc=InputDocumentation(doc="output multi correct regions (default: False)")), ToolInput(tag="in_min_idt", input_type=Int(optional=True), prefix="--min-idt", doc=InputDocumentation(doc="minimum identity of the alignments used for correction (default: 0.7)")), ToolInput(tag="in_edge_tolerance", input_type=Int(optional=True), prefix="--edge-tolerance", doc=InputDocumentation(doc="for trimming, the there is unaligned edge leng > edge_tolerance, ignore the read (default: 1000)")), ToolInput(tag="in_trim_size", input_type=Int(optional=True), prefix="--trim-size", doc=InputDocumentation(doc="the size for triming both ends from initial sparse aligned region (default: 50)")), ToolInput(tag="in_allow_external_mapping", input_type=Boolean(optional=True), prefix="--allow-external-mapping", doc=InputDocumentation(doc="if provided, externally determined mapping coordinates will be used for error correction (default: False)")), ToolInput(tag="in_verbose_level", input_type=Float(optional=True), prefix="--verbose-level", doc=InputDocumentation(doc="logging level (WARNING=3, INFO=2, DEBUG=1) (default: 2.0)\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fc_Consensus_V0_1_0().translate("wdl", allow_empty_container=True)

