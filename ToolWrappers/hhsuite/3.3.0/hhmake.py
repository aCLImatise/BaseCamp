from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Hhmake_V0_1_0 = CommandToolBuilder(tool="hhmake", base_command=["hhmake"], inputs=[ToolInput(tag="in_query_alignment_am", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="query alignment (A2M, A3M, or FASTA), or query HMM")), ToolInput(tag="in_hmm_file_written", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="HMM file to be written to  (default=<infile.hhm>)")), ToolInput(tag="in_hmm_file_appended", input_type=File(optional=True), prefix="-a", doc=InputDocumentation(doc="HMM file to be appended to")), ToolInput(tag="in_verbose_mode_screen", input_type=Int(optional=True), prefix="-v", doc=InputDocumentation(doc="verbose mode: 0:no screen output  1:only warings  2: verbose")), ToolInput(tag="in_seq", input_type=Int(optional=True), prefix="-seq", doc=InputDocumentation(doc="max. number of query/template sequences displayed (def=10)\nBeware of overflows! All these sequences are stored in memory.")), ToolInput(tag="in_add_cons", input_type=Boolean(optional=True), prefix="-add_cons", doc=InputDocumentation(doc="make consensus sequence master sequence of query MSA")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="-name", doc=InputDocumentation(doc="use this name for HMM (default: use name of first sequence)")), ToolInput(tag="in_id", input_type=Boolean(optional=True), prefix="-id", doc=InputDocumentation(doc="[0,100]  maximum pairwise sequence identity (%) (def=90)")), ToolInput(tag="in_diff", input_type=Boolean(optional=True), prefix="-diff", doc=InputDocumentation(doc="[0,inf[  filter MSA by selecting most diverse set of sequences, keeping\nat least this many seqs in each MSA block of length 50 (def=100)")), ToolInput(tag="in_cov", input_type=Boolean(optional=True), prefix="-cov", doc=InputDocumentation(doc="[0,100]  minimum coverage with query (%) (def=0)")), ToolInput(tag="in_qid", input_type=Boolean(optional=True), prefix="-qid", doc=InputDocumentation(doc="[0,100]  minimum sequence identity with query (%) (def=0)")), ToolInput(tag="in_qsc", input_type=Boolean(optional=True), prefix="-qsc", doc=InputDocumentation(doc="[0,100]  minimum score per column with query  (def=-20.0)")), ToolInput(tag="in_neff", input_type=Boolean(optional=True), prefix="-neff", doc=InputDocumentation(doc="[1,inf]  target diversity of alignment (default=off)")), ToolInput(tag="in_pc_hhm_con_txt_mode", input_type=Boolean(optional=True), prefix="-pc_hhm_contxt_mode", doc=InputDocumentation(doc="{0,..,3}   position dependence of pc admixture 'tau' (pc mode, default=0)\n0: no pseudo counts:    tau = 0\n1: constant             tau = a\n2: diversity-dependent: tau = a/(1+((Neff[i]-1)/b)^c)\n3: CSBlast admixture:   tau = a(1+b)/(Neff[i]+b)\n(Neff[i]: number of effective seqs in local MSA around column i)")), ToolInput(tag="in_pc_hhm_con_txt_a", input_type=Boolean(optional=True), prefix="-pc_hhm_contxt_a", doc=InputDocumentation(doc="[0,1]        overall pseudocount admixture (def=0.9)")), ToolInput(tag="in_pc_hhm_con_txt_b", input_type=Boolean(optional=True), prefix="-pc_hhm_contxt_b", doc=InputDocumentation(doc="[1,inf[      Neff threshold value for mode 2 (def=4.0)")), ToolInput(tag="in_pc_hhm_con_txt_c", input_type=Boolean(optional=True), prefix="-pc_hhm_contxt_c", doc=InputDocumentation(doc="[0,3]        extinction exponent c for mode 2 (def=1.0)")), ToolInput(tag="in_pc_hhm_no_con_txt_mode", input_type=Boolean(optional=True), prefix="-pc_hhm_nocontxt_mode", doc=InputDocumentation(doc="{0,..,3}   position dependence of pc admixture 'tau' (pc mode, default=2)\n0: no pseudo counts:    tau = 0\n1: constant             tau = a\n2: diversity-dependent: tau = a/(1+((Neff[i]-1)/b)^c)\n(Neff[i]: number of effective seqs in local MSA around column i)")), ToolInput(tag="in_pc_hhm_no_con_txt_a", input_type=Boolean(optional=True), prefix="-pc_hhm_nocontxt_a", doc=InputDocumentation(doc="[0,1]        overall pseudocount admixture (def=1.0)")), ToolInput(tag="in_pc_hhm_no_con_txt_b", input_type=Boolean(optional=True), prefix="-pc_hhm_nocontxt_b", doc=InputDocumentation(doc="[1,inf[      Neff threshold value for mode 2 (def=1.5)")), ToolInput(tag="in_pc_hhm_no_con_txt_c", input_type=Boolean(optional=True), prefix="-pc_hhm_nocontxt_c", doc=InputDocumentation(doc="[0,3]        extinction exponent c for mode 2 (def=1.0)")), ToolInput(tag="in_no_con_txt", input_type=Boolean(optional=True), prefix="-nocontxt", doc=InputDocumentation(doc="use substitution-matrix instead of context-specific pseudocounts")), ToolInput(tag="in_con_txt", input_type=File(optional=True), prefix="-contxt", doc=InputDocumentation(doc="context file for computing context-specific pseudocounts (default=)")), ToolInput(tag="in_max_seq", input_type=Int(optional=True), prefix="-maxseq", doc=InputDocumentation(doc="max number of input rows (def=65535)")), ToolInput(tag="in_max_res", input_type=Int(optional=True), prefix="-maxres", doc=InputDocumentation(doc="max number of HMM columns (def=20001)"))], outputs=[], container="quay.io/biocontainers/hhsuite:3.3.0--py38pl526h6ed170a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hhmake_V0_1_0().translate("wdl")

