from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean

Hhfilter_V0_1_0 = CommandToolBuilder(tool="hhfilter", base_command=["hhfilter"], inputs=[ToolInput(tag="in_read_input_file", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="read input file in A3M/A2M or FASTA format")), ToolInput(tag="in_write_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="write to output file in A3M format")), ToolInput(tag="in_append_output_file", input_type=File(optional=True), prefix="-a", doc=InputDocumentation(doc="append to output file in A3M format")), ToolInput(tag="in_verbose_mode_screen", input_type=Int(optional=True), prefix="-v", doc=InputDocumentation(doc="verbose mode: 0:no screen output  1:only warings  2: verbose")), ToolInput(tag="in_id", input_type=Boolean(optional=True), prefix="-id", doc=InputDocumentation(doc="[0,100]  maximum pairwise sequence identity (%) (def=90)")), ToolInput(tag="in_diff", input_type=Boolean(optional=True), prefix="-diff", doc=InputDocumentation(doc="[0,inf[  filter MSA by selecting most diverse set of sequences, keeping\nat least this many seqs in each MSA block of length 50 (def=0)")), ToolInput(tag="in_cov", input_type=Boolean(optional=True), prefix="-cov", doc=InputDocumentation(doc="[0,100]  minimum coverage with query (%) (def=0)")), ToolInput(tag="in_qid", input_type=Boolean(optional=True), prefix="-qid", doc=InputDocumentation(doc="[0,100]  minimum sequence identity with query (%) (def=0)")), ToolInput(tag="in_qsc", input_type=Boolean(optional=True), prefix="-qsc", doc=InputDocumentation(doc="[0,100]  minimum score per column with query  (def=-20.0)")), ToolInput(tag="in_neff", input_type=Boolean(optional=True), prefix="-neff", doc=InputDocumentation(doc="[1,inf]  target diversity of alignment (default=off)")), ToolInput(tag="in_max_seq", input_type=Int(optional=True), prefix="-maxseq", doc=InputDocumentation(doc="max number of input rows (def=65535)")), ToolInput(tag="in_max_res", input_type=Int(optional=True), prefix="-maxres", doc=InputDocumentation(doc="max number of HMM columns (def=20001)"))], outputs=[ToolOutput(tag="out_write_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_write_output_file", type_hint=File()), doc=OutputDocumentation(doc="write to output file in A3M format")), ToolOutput(tag="out_append_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_append_output_file", type_hint=File()), doc=OutputDocumentation(doc="append to output file in A3M format"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hhfilter_V0_1_0().translate("wdl", allow_empty_container=True)

