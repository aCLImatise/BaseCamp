from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Papaa_Pancancer_Classifier_Py_V0_1_0 = CommandToolBuilder(tool="papaa_pancancer_classifier.py", base_command=["papaa_pancancer_classifier.py"], inputs=[ToolInput(tag="in_genes", input_type=File(optional=True), prefix="--genes", doc=InputDocumentation(doc="string of the genes to extract or genelist file")), ToolInput(tag="in_diseases", input_type=String(optional=True), prefix="--diseases", doc=InputDocumentation(doc="Comma sep string of TCGA disease acronyms.\ndiseases_list_fileIf no arguments are passed,\nfiltering will default to options given in\n--filter_count and --filter_prop.")), ToolInput(tag="in_folds", input_type=Int(optional=True), prefix="--folds", doc=InputDocumentation(doc="Number of cross validation folds to perform")), ToolInput(tag="in_drop", input_type=Boolean(optional=True), prefix="--drop", doc=InputDocumentation(doc="Decision to drop input genes from X matrix")), ToolInput(tag="in_copy_number", input_type=Boolean(optional=True), prefix="--copy_number", doc=InputDocumentation(doc="Supplement Y matrix with copy number events")), ToolInput(tag="in_filter_count", input_type=Int(optional=True), prefix="--filter_count", doc=InputDocumentation(doc="Min number of mutations in diseases to include")), ToolInput(tag="in_filter_prop", input_type=Int(optional=True), prefix="--filter_prop", doc=InputDocumentation(doc="Min proportion of positives to include disease")), ToolInput(tag="in_num_features", input_type=Int(optional=True), prefix="--num_features", doc=InputDocumentation(doc="Number of MAD genes to include in classifier")), ToolInput(tag="in_alphas", input_type=String(optional=True), prefix="--alphas", doc=InputDocumentation(doc="the alphas for parameter sweep")), ToolInput(tag="in_lone_ratios", input_type=Int(optional=True), prefix="--l1_ratios", doc=InputDocumentation(doc="the l1 ratios for parameter sweep")), ToolInput(tag="in_alt_genes", input_type=File(optional=True), prefix="--alt_genes", doc=InputDocumentation(doc="string of the alt_genes to extract or alt_genelist\nfile to test performance")), ToolInput(tag="in_alt_diseases", input_type=String(optional=True), prefix="--alt_diseases", doc=InputDocumentation(doc="The alternative diseases to test performance")), ToolInput(tag="in_alt_filter_count", input_type=Int(optional=True), prefix="--alt_filter_count", doc=InputDocumentation(doc="Min number of mutations in disease to include")), ToolInput(tag="in_alt_filter_prop", input_type=Int(optional=True), prefix="--alt_filter_prop", doc=InputDocumentation(doc="Min proportion of positives to include disease")), ToolInput(tag="in_classifier_results", input_type=String(optional=True), prefix="--classifier_results", doc=InputDocumentation(doc="Location to save classifier outputs")), ToolInput(tag="in_remove_hyper", input_type=Boolean(optional=True), prefix="--remove_hyper", doc=InputDocumentation(doc="Remove hypermutated samples")), ToolInput(tag="in_keep_intermediate", input_type=Boolean(optional=True), prefix="--keep_intermediate", doc=InputDocumentation(doc="Keep intermediate ROC values for plotting")), ToolInput(tag="in_x_matrix", input_type=File(optional=True), prefix="--x_matrix", doc=InputDocumentation(doc="Filename of features to use in model")), ToolInput(tag="in_shuffled", input_type=Boolean(optional=True), prefix="--shuffled", doc=InputDocumentation(doc="Shuffle the input gene exprs matrix alongside")), ToolInput(tag="in_shuffled_before_training", input_type=Boolean(optional=True), prefix="--shuffled_before_training", doc=InputDocumentation(doc="Shuffle the gene exprs matrix before training")), ToolInput(tag="in_no_mutation", input_type=Boolean(optional=True), prefix="--no_mutation", doc=InputDocumentation(doc="Remove mutation data from y matrix")), ToolInput(tag="in_drop_x_genes", input_type=File(optional=True), prefix="--drop_x_genes", doc=InputDocumentation(doc="Comma separated list of genes to be dropped from X\nmatrix, x_genelist file")), ToolInput(tag="in_drop_expression", input_type=Boolean(optional=True), prefix="--drop_expression", doc=InputDocumentation(doc="Decision to drop gene expression values from X")), ToolInput(tag="in_drop_covariates", input_type=Boolean(optional=True), prefix="--drop_covariates", doc=InputDocumentation(doc="Decision to drop covariate information from X")), ToolInput(tag="in_filename_mut", input_type=File(optional=True), prefix="--filename_mut", doc=InputDocumentation(doc="Filename of sample/gene mutations to use in model")), ToolInput(tag="in_filename_mut_burden", input_type=File(optional=True), prefix="--filename_mut_burden", doc=InputDocumentation(doc="Filename of sample mutation burden to use in model")), ToolInput(tag="in_filename_sample", input_type=File(optional=True), prefix="--filename_sample", doc=InputDocumentation(doc="Filename of patient/samples to use in model")), ToolInput(tag="in_filename_copy_loss", input_type=File(optional=True), prefix="--filename_copy_loss", doc=InputDocumentation(doc="Filename of copy number loss")), ToolInput(tag="in_filename_copy_gain", input_type=File(optional=True), prefix="--filename_copy_gain", doc=InputDocumentation(doc="Filename of copy number gain")), ToolInput(tag="in_filename_cancer_gene_classification", input_type=File(optional=True), prefix="--filename_cancer_gene_classification", doc=InputDocumentation(doc="Filename of cancer gene classification table")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="option to set seed"))], outputs=[], container="quay.io/biocontainers/papaa:0.1.9--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Papaa_Pancancer_Classifier_Py_V0_1_0().translate("wdl")

