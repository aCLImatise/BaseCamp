from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, String, Int

Secapr_Align_Sequences_V0_1_0 = CommandToolBuilder(tool="secapr_align_sequences", base_command=["secapr", "align_sequences"], inputs=[ToolInput(tag="in_sequences", input_type=File(optional=True), prefix="--sequences", doc=InputDocumentation(doc="The fasta file containing individual sequences for\nseveral samples and loci")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="The directory in which to store the resulting")), ToolInput(tag="in_exclude_ambiguous", input_type=Boolean(optional=True), prefix="--exclude_ambiguous", doc=InputDocumentation(doc="Don't allow reads in alignments containing N-bases.")), ToolInput(tag="in_gap_opening_penalty", input_type=String(optional=True), prefix="--gap_opening_penalty", doc=InputDocumentation(doc="Set gap opening penalty for aligner.")), ToolInput(tag="in_gap_extension_penalty", input_type=String(optional=True), prefix="--gap_extension_penalty", doc=InputDocumentation(doc="Set gap extension penalty for aligner.")), ToolInput(tag="in_min_seqs_per_locus", input_type=Int(optional=True), prefix="--min_seqs_per_locus", doc=InputDocumentation(doc="Minimum number of sequences required for building\nalignment.")), ToolInput(tag="in_no_trim", input_type=Boolean(optional=True), prefix="--no_trim", doc=InputDocumentation(doc="Suppress trimming of alignments. By default secapr\nuses trimal to trim gappy positions from alignments.")), ToolInput(tag="in_trim_al_setting", input_type=String(optional=True), prefix="--trimal_setting", doc=InputDocumentation(doc="Use one of trimal automated scenarios. These will\noverwrite all other trimming flags (see below). See\ntrimal tutorial for more info about settings.")), ToolInput(tag="in_window_size", input_type=Int(optional=True), prefix="--window_size", doc=InputDocumentation(doc="Sliding window size for trimming.")), ToolInput(tag="in_seq_proportion", input_type=Int(optional=True), prefix="--seq_proportion", doc=InputDocumentation(doc="The proportion of sequences required. All alignment\ncolumns with fewer sequences will be deleted (0-1).")), ToolInput(tag="in_conserve_alignment_percentage", input_type=Int(optional=True), prefix="--conserve_alignment_percentage", doc=InputDocumentation(doc="This setting will ensure to conserve the specified\npercentage of the alignment when trimming (0-100).")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min_length", doc=InputDocumentation(doc="The minimum length of alignments to keep.")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Process alignments in parallel using --cores for\nalignment. This is the number of PHYSICAL CPUs.\n")), ToolInput(tag="in_alignments_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--aligner {muscle,mafft}"))], outputs=[], container="quay.io/biocontainers/secapr:2.1.1--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Secapr_Align_Sequences_V0_1_0().translate("wdl")

