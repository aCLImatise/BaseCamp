!Command
command:
- piconv
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -l
  - --list
  description: lists all available encodings
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -r
  - --resolve
  description: resolve encoding to its (Encode) canonical name
  args: !SimpleFlagArg
    name: encoding_alias
- !Flag
  optional: true
  synonyms:
  - -f
  - --from
  description: when omitted, the current locale will be used
  args: !SimpleFlagArg
    name: from_encoding
- !Flag
  optional: true
  synonyms:
  - -t
  - --to
  description: when omitted, the current locale will be used
  args: !SimpleFlagArg
    name: to_encoding
- !Flag
  optional: true
  synonyms:
  - -s
  - --string
  description: '"string" will be the input instead of STDIN or files'
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -C
  - -c
  description: check the validity of the input
  args: !SimpleFlagArg
    name: N
- !Flag
  optional: true
  synonyms:
  - -D
  - --debug
  description: show debug information
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -S
  - --scheme
  description: use the scheme for conversion
  args: !SimpleFlagArg
    name: scheme
- !Flag
  optional: true
  synonyms:
  - -p
  - --perlqq
  description: "transliterate characters missing in encoding to \\x{HHHH}\nwhere HHHH\
    \ is the hexadecimal Unicode code point"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --htmlcref
  description: "transliterate characters missing in encoding to &#NNN;\nwhere NNN\
    \ is the decimal Unicode code point"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --xmlcref
  description: "transliterate characters missing in encoding to &#xHHHH;\nwhere HHHH\
    \ is the hexadecimal Unicode code point\n"
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "piconv [-f from_encoding] [-t to_encoding]\n      [-p|--perlqq|--htmlcref|--xmlcref]\
  \ [-C N|-c] [-D] [-S scheme]\n      [-s string|file...]\npiconv -l\npiconv -r encoding_alias\n\
  piconv -h\nCommon options:\n  -l,--list\n     lists all available encodings\n  -r,--resolve\
  \ encoding_alias\n    resolve encoding to its (Encode) canonical name\n  -f,--from\
  \ from_encoding  \n     when omitted, the current locale will be used\n  -t,--to\
  \ to_encoding    \n     when omitted, the current locale will be used\n  -s,--string\
  \ string         \n     \"string\" will be the input instead of STDIN or files\n\
  The following are mainly of interest to Encode hackers:\n  -C N | -c           check\
  \ the validity of the input\n  -D,--debug          show debug information\n  -S,--scheme\
  \ scheme  use the scheme for conversion\nThose are handy when you can only see ASCII\
  \ characters:\n  -p,--perlqq         transliterate characters missing in encoding\
  \ to \\x{HHHH}\n                      where HHHH is the hexadecimal Unicode code\
  \ point\n  --htmlcref          transliterate characters missing in encoding to &#NNN;\n\
  \                      where NNN is the decimal Unicode code point\n  --xmlcref\
  \           transliterate characters missing in encoding to &#xHHHH;\n         \
  \             where HHHH is the hexadecimal Unicode code point\n\n"
generated_using:
- --help
docker_image:
