from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, Float, Array, String

Tadbit_Normalize_V0_1_0 = CommandToolBuilder(tool="tadbit_normalize", base_command=["tadbit", "normalize"], inputs=[ToolInput(tag="in_workdir", input_type=File(optional=True), prefix="--workdir", doc=InputDocumentation(doc="path to working directory (generated with the tool tadbit mapper)")), ToolInput(tag="in_resolution", input_type=Int(optional=True), prefix="--resolution", doc=InputDocumentation(doc="resolution at which to output matrices")), ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="path to a TADbit-generated BAM file with all reads (other wise the\ntool will guess from the working directory database)")), ToolInput(tag="in_jobid", input_type=Int(optional=True), prefix="--jobid", doc=InputDocumentation(doc="Use as input data generated by a job with a given jobid. Use tadbit\ndescribe to find out which.")), ToolInput(tag="in_max_n_jobs", input_type=Int(optional=True), prefix="--max_njobs", doc=InputDocumentation(doc="[100] Define maximum number of jobs for reading BAM file (set to\nhigher numbers for large files and low RAM memory).")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="overwrite previously run job")), ToolInput(tag="in_tmp_db", input_type=File(optional=True), prefix="--tmpdb", doc=InputDocumentation(doc="if provided uses this directory to manipulate the database")), ToolInput(tag="in_cpus", input_type=Int(optional=True), prefix="--cpus", doc=InputDocumentation(doc="[8] Maximum number of CPU cores available in the execution host. If\nhigher than 1, tasks with multi-threading capabilities will enabled\n(if 0 all available) cores will be used")), ToolInput(tag="in_normalize_only", input_type=Boolean(optional=True), prefix="--normalize_only", doc=InputDocumentation(doc="skip calculation of Cis-percentage and decay")), ToolInput(tag="in_nox", input_type=Boolean(optional=True), prefix="--noX", doc=InputDocumentation(doc="no display server (X screen)")), ToolInput(tag="in_perc_zeros", input_type=Float(optional=True), prefix="--perc_zeros", doc=InputDocumentation(doc="[95%] maximum percentage of zeroes allowed per column.")), ToolInput(tag="in_min_count", input_type=Int(optional=True), prefix="--min_count", doc=InputDocumentation(doc="[None] minimum number of reads mapped to a bin (recommended value\ncould be 2500). If set this option overrides the perc_zero\nfiltering... This option is slightly slower.")), ToolInput(tag="in_min_perc", input_type=Int(optional=True), prefix="--min_perc", doc=InputDocumentation(doc="[None] lower percentile from which consider bins as good.")), ToolInput(tag="in_max_perc", input_type=Int(optional=True), prefix="--max_perc", doc=InputDocumentation(doc="[None] upper percentile until which consider bins as good.")), ToolInput(tag="in_filter_only", input_type=Boolean(optional=True), prefix="--filter_only", doc=InputDocumentation(doc="skip normalization")), ToolInput(tag="in_fast_filter", input_type=Boolean(optional=True), prefix="--fast_filter", doc=InputDocumentation(doc="only filter according to the percentage of zero count or minimum\ncount of reads")), ToolInput(tag="in_extra_regions_added", input_type=Int(optional=True), prefix="-B", doc=InputDocumentation(doc=":POS1-POS2 [CHR:POS1-POS2 ...], --badcols CHR:POS1-POS2 [CHR:POS1-POS2 ...]\nextra regions to be added to bad-columns (ingenomic position). e.g.:\n--badcols 1:150000000-160000000 2:1200000-1300000")), ToolInput(tag="in_filter", input_type=Array(t=Int(), optional=True), prefix="--filter", doc=InputDocumentation(doc="[[1, 2, 3, 4, 6, 7, 9, 10]] Use filters to define a set os valid\npair of reads e.g.: '--apply 1 2 3 4 8 9 10'. Where these\nnumberscorrespond to: 1: self-circle, 2: dangling-end, 3: error, 4:\nextra dangling-end, 5: too close from RES, 6: too short, 7: too\nlarge, 8: over-represented, 9: duplicated, 10: random breaks, 11:\ntrans-chromosomic")), ToolInput(tag="in_valid", input_type=Boolean(optional=True), prefix="--valid", doc=InputDocumentation(doc="input BAM file contains only valid pairs (already filtered).")), ToolInput(tag="in_normalization", input_type=String(optional=True), prefix="--normalization", doc=InputDocumentation(doc="[Vanilla] normalization(s) to apply. Order matters. Choices:\nVanilla, ICE, SQRT, oneD, custom")), ToolInput(tag="in_biases_path", input_type=File(optional=True), prefix="--biases_path", doc=InputDocumentation(doc="biases file to compute decay. REQUIRED with 'custom' normalization.\nFormat: single column with header")), ToolInput(tag="in_mapp_ability", input_type=File(optional=True), prefix="--mappability", doc=InputDocumentation(doc="Path to mappability bedGraph file, required for oneD normalization.\nMappability file can be generated with GEM (example from the genomic FASTA file hg38.fa):\ngem-indexer -i hg38.fa -o hg38\ngem-mappability -I hg38.gem -l 50 -o hg38.50mer -T 8\ngem-2-wig -I hg38.gem -i hg38.50mer.mappability -o hg38.50mer\nwigToBigWig hg38.50mer.wig hg38.50mer.sizes hg38.50mer.bw\nbigWigToBedGraph hg38.50mer.bw  hg38.50mer.bedGraph")), ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Path to FASTA file with genome sequence, to compute GC content and\nnumber of restriction sites per bin. Required for oneD normalization")), ToolInput(tag="in_renz", input_type=String(optional=True), prefix="--renz", doc=InputDocumentation(doc="restriction enzyme name(s). Required for oneD normalization")), ToolInput(tag="in_factor", input_type=Int(optional=True), prefix="--factor", doc=InputDocumentation(doc="[1] target mean value of a cell after normalization (can be used to\nweight experiments before merging)")), ToolInput(tag="in_prop_data", input_type=Float(optional=True), prefix="--prop_data", doc=InputDocumentation(doc="[1] Only for oneD normalization: proportion of data to be used in\nfitting (for very large datasets). Number between 0 and 1.")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="[1] Only for oneD normalization: seed number for the random picking\nof data when using the 'prop_data' parameter\n"))], outputs=[], container="quay.io/biocontainers/tadbit:1.0.1--py38h6ed170a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tadbit_Normalize_V0_1_0().translate("wdl")

