from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, Array, String, Float, Directory

Model_And_Analyze_Py_V0_1_0 = CommandToolBuilder(tool="model_and_analyze.py", base_command=["model_and_analyze.py"], inputs=[ToolInput(tag="in_cfg", input_type=File(optional=True), prefix="--cfg", doc=InputDocumentation(doc="path to a configuration file with predefined parameters")), ToolInput(tag="in_analyze_only", input_type=Boolean(optional=True), prefix="--analyze_only", doc=InputDocumentation(doc="load precomputed models in outdir, skip optimization, modeling")), ToolInput(tag="in_optimize_only", input_type=Boolean(optional=True), prefix="--optimize_only", doc=InputDocumentation(doc="do the optimization of the region and exit")), ToolInput(tag="in_model_only", input_type=Boolean(optional=True), prefix="--model_only", doc=InputDocumentation(doc="skip optimization, model with inputparameters only.")), ToolInput(tag="in_tad_only", input_type=Boolean(optional=True), prefix="--tad_only", doc=InputDocumentation(doc="[False] exit after searching for TADs")), ToolInput(tag="in_n_cpus", input_type=Int(optional=True), prefix="--ncpus", doc=InputDocumentation(doc="[1] Number of CPUs to use")), ToolInput(tag="in_root_path", input_type=File(optional=True), prefix="--root_path", doc=InputDocumentation(doc="path to search for data files (just pass file namein 'data')")), ToolInput(tag="in_data", input_type=Array(t=File(), optional=True), prefix="--data", doc=InputDocumentation(doc="path to file(s) with Hi-C data matrix. If many, experiments will be\nsummed up. I.e.: --data replicate_1.txt replicate_2.txt")), ToolInput(tag="in_biases", input_type=Array(t=File(), optional=True), prefix="--biases", doc=InputDocumentation(doc="path to pickle file(s) with Hi-C data matrix biases. Use same order\nas data. If data are bam files use these biases to skip\nnormalization")), ToolInput(tag="in_x_name", input_type=Array(t=String(), optional=True), prefix="--xname", doc=InputDocumentation(doc="[file name] experiment name(s). Use same order as data.")), ToolInput(tag="in_norm", input_type=Array(t=File(), optional=True), prefix="--norm", doc=InputDocumentation(doc="path to file(s) with normalizedHi-C data matrix.")), ToolInput(tag="in_perc_zeros", input_type=Float(optional=True), prefix="--perc_zeros", doc=InputDocumentation(doc="[95%] maximum percentage of zeroes allowed per column.")), ToolInput(tag="in_min_count", input_type=Int(optional=True), prefix="--min_count", doc=InputDocumentation(doc="[None] minimum number of reads mapped to a bin (recommended value\ncould be 2500). If set this option overrides the perc_zero\nfiltering... This option is slightly slower.")), ToolInput(tag="in_crm", input_type=String(optional=True), prefix="--crm", doc=InputDocumentation(doc="chromosome name")), ToolInput(tag="in_beg", input_type=Int(optional=True), prefix="--beg", doc=InputDocumentation(doc="genomic coordinate from which to start modeling")), ToolInput(tag="in_chrom_start", input_type=Int(optional=True), prefix="--chrom_start", doc=InputDocumentation(doc="genomic coordinate corresponding to the bin 0 of the input matrices")), ToolInput(tag="in_end", input_type=Int(optional=True), prefix="--end", doc=InputDocumentation(doc="genomic coordinate where to end modeling")), ToolInput(tag="in_res", input_type=Int(optional=True), prefix="--res", doc=InputDocumentation(doc="resolution of the Hi-C experiment")), ToolInput(tag="in_fig_format", input_type=File(optional=True), prefix="--fig_format", doc=InputDocumentation(doc="file format and extension for figures and plots (can be any\nsupported by matplotlib, png, eps...)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="out directory for results")), ToolInput(tag="in_tad", input_type=Boolean(optional=True), prefix="--tad", doc=InputDocumentation(doc="[False] search for TADs in experiments")), ToolInput(tag="in_centromere", input_type=Boolean(optional=True), prefix="--centromere", doc=InputDocumentation(doc="[False] search for centromeric region")), ToolInput(tag="in_group", input_type=Array(t=Int(), optional=True), prefix="--group", doc=InputDocumentation(doc="[all together] How to group Hi-C experiments for the detection of\nTAD borders. I.e.: '--exp_group 2 2 1' first 2 experiments used\ntogether, next 2 also, and last alone (batch_mode option used)")), ToolInput(tag="in_max_dist", input_type=Int(optional=True), prefix="--maxdist", doc=InputDocumentation(doc="range of numbers for maxdist, i.e. 400:1000:100 -- or just a number")), ToolInput(tag="in_up_freq", input_type=Int(optional=True), prefix="--upfreq", doc=InputDocumentation(doc="range of numbers for upfreq, i.e. 0:1.2:0.3 -- or just a number")), ToolInput(tag="in_low_freq", input_type=Int(optional=True), prefix="--lowfreq", doc=InputDocumentation(doc="range of numbers for lowfreq, i.e. -1.2:0:0.3 -- or just a number")), ToolInput(tag="in_scale", input_type=Int(optional=True), prefix="--scale", doc=InputDocumentation(doc="[0.01] range of numbers to be test as optimal scale value, i.e.\n0.005:0.01:0.001 -- Can also pass only one number")), ToolInput(tag="in_d_cut_off", input_type=Int(optional=True), prefix="--dcutoff", doc=InputDocumentation(doc="[2] range of numbers to be test as optimal distance cutoff parameter\n(distance, in number of beads, from which to consider 2 beads as\nbeing close), i.e. 1:5:0.5 -- Can also pass only one number")), ToolInput(tag="in_n_models_opt", input_type=Int(optional=True), prefix="--nmodels_opt", doc=InputDocumentation(doc="[500] number of models to generate for optimization")), ToolInput(tag="in_n_keep_opt", input_type=Int(optional=True), prefix="--nkeep_opt", doc=InputDocumentation(doc="[100] number of models to keep for optimization")), ToolInput(tag="in_force_opt", input_type=Boolean(optional=True), prefix="--force_opt", doc=InputDocumentation(doc="[False] do not take into account previous optimizations. Usefull for\nrunning in parallel in a cluster for example.")), ToolInput(tag="in_n_models_mod", input_type=Int(optional=True), prefix="--nmodels_mod", doc=InputDocumentation(doc="[5000] number of models to generate for modeling")), ToolInput(tag="in_n_keep_mod", input_type=Int(optional=True), prefix="--nkeep_mod", doc=InputDocumentation(doc="[1000] number of models to keep for modeling")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="[1] seed number from which to start modeling")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="species name, with no spaces, i.e.: homo_sapiens")), ToolInput(tag="in_cell", input_type=String(optional=True), prefix="--cell", doc=InputDocumentation(doc="cell type name")), ToolInput(tag="in_exp_type", input_type=String(optional=True), prefix="--exp_type", doc=InputDocumentation(doc="experiment type name (i.e.: Hi-C)")), ToolInput(tag="in_assembly", input_type=Int(optional=True), prefix="--assembly", doc=InputDocumentation(doc="NCBI ID of the original assembly (i.e.: NCBI36 for human)")), ToolInput(tag="in_enzyme", input_type=String(optional=True), prefix="--enzyme", doc=InputDocumentation(doc="name of the enzyme used to digest chromatin (i.e. HindIII)")), ToolInput(tag="in_identifier", input_type=String(optional=True), prefix="--identifier", doc=InputDocumentation(doc="NCBI identifier of the experiment")), ToolInput(tag="in_project", input_type=String(optional=True), prefix="--project", doc=InputDocumentation(doc="project name")), ToolInput(tag="in_analyze", input_type=Array(t=Int(), optional=True), prefix="--analyze", doc=InputDocumentation(doc="[2 3 4 5 6 7 8 9 10 11 12 13 14 15 16] list of numbers representing\nthe analysis to be done. Choose between: 0) do nothing 1) column\nfiltering 2) TAD borders 3) TAD alignment 4) optimization plot 5)\ncorrelation real/models 6) z-score plot 7) constraints 8) objective\nfunction 9) centroid 10) consistency 11) density 12) contact map 13)\nwalking angle 14) persistence length 15) accessibility 16)\ninteraction")), ToolInput(tag="in_not_write_cmm", input_type=Boolean(optional=True), prefix="--not_write_cmm", doc=InputDocumentation(doc="[False] do not generate cmm files for each model (Chimera input)")), ToolInput(tag="in_not_write_xyz", input_type=Boolean(optional=True), prefix="--not_write_xyz", doc=InputDocumentation(doc="[False] do not generate xyz files for each model (3D coordinates)")), ToolInput(tag="in_not_write_json", input_type=Boolean(optional=True), prefix="--not_write_json", doc=InputDocumentation(doc="[False] do not generate json file."))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="out directory for results"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Model_And_Analyze_Py_V0_1_0().translate("wdl", allow_empty_container=True)

