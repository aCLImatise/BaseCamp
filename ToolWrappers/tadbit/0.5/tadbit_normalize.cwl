class: CommandLineTool
id: tadbit_normalize.cwl
inputs:
- id: in_workdir
  doc: path to working directory (generated with the tool tadbit mapper)
  type: File?
  inputBinding:
    prefix: --workdir
- id: in_resolution
  doc: resolution at which to output matrices
  type: long?
  inputBinding:
    prefix: --resolution
- id: in_bam
  doc: "path to a TADbit-generated BAM file with all reads (other wise the\ntool will\
    \ guess from the working directory database)"
  type: File?
  inputBinding:
    prefix: --bam
- id: in_jobid
  doc: "Use as input data generated by a job with a given jobid. Use tadbit\ndescribe\
    \ to find out which."
  type: long?
  inputBinding:
    prefix: --jobid
- id: in_max_n_jobs
  doc: "[100] Define maximum number of jobs for reading BAM file (set to\nhigher numbers\
    \ for large files and low RAM memory)."
  type: long?
  inputBinding:
    prefix: --max_njobs
- id: in_force
  doc: overwrite previously run job
  type: boolean?
  inputBinding:
    prefix: --force
- id: in_tmp_db
  doc: if provided uses this directory to manipulate the database
  type: File?
  inputBinding:
    prefix: --tmpdb
- id: in_cpus
  doc: "[8] Maximum number of CPU cores available in the execution host. If\nhigher\
    \ than 1, tasks with multi-threading capabilities will enabled\n(if 0 all available)\
    \ cores will be used"
  type: long?
  inputBinding:
    prefix: --cpus
- id: in_normalize_only
  doc: skip calculation of Cis-percentage and decay
  type: boolean?
  inputBinding:
    prefix: --normalize_only
- id: in_nox
  doc: no display server (X screen)
  type: boolean?
  inputBinding:
    prefix: --noX
- id: in_perc_zeros
  doc: '[95%] maximum percentage of zeroes allowed per column.'
  type: double?
  inputBinding:
    prefix: --perc_zeros
- id: in_min_count
  doc: "[None] minimum number of reads mapped to a bin (recommended value\ncould be\
    \ 2500). If set this option overrides the perc_zero\nfiltering... This option\
    \ is slightly slower."
  type: long?
  inputBinding:
    prefix: --min_count
- id: in_min_perc
  doc: '[None] lower percentile from which consider bins as good.'
  type: long?
  inputBinding:
    prefix: --min_perc
- id: in_max_perc
  doc: '[None] upper percentile until which consider bins as good.'
  type: long?
  inputBinding:
    prefix: --max_perc
- id: in_filter_only
  doc: skip normalization
  type: boolean?
  inputBinding:
    prefix: --filter_only
- id: in_fast_filter
  doc: "only filter according to the percentage of zero count or minimum\ncount of\
    \ reads"
  type: boolean?
  inputBinding:
    prefix: --fast_filter
- id: in_extra_regions_added
  doc: ":POS1-POS2 [CHR:POS1-POS2 ...], --badcols CHR:POS1-POS2 [CHR:POS1-POS2 ...]\n\
    extra regions to be added to bad-columns (ingenomic position). e.g.:\n--badcols\
    \ 1:150000000-160000000 2:1200000-1300000"
  type: long?
  inputBinding:
    prefix: -B
- id: in_filter
  doc: "[[1, 2, 3, 4, 6, 7, 9, 10]] Use filters to define a set os valid\npair of\
    \ reads e.g.: '--apply 1 2 3 4 8 9 10'. Where these\nnumberscorrespond to: 1:\
    \ self-circle, 2: dangling-end, 3: error, 4:\nextra dangling-end, 5: too close\
    \ from RES, 6: too short, 7: too\nlarge, 8: over-represented, 9: duplicated, 10:\
    \ random breaks, 11:\ntrans-chromosomic"
  type: long[]
  inputBinding:
    prefix: --filter
- id: in_valid
  doc: input BAM file contains only valid pairs (already filtered).
  type: boolean?
  inputBinding:
    prefix: --valid
- id: in_normalization
  doc: "[Vanilla] normalization(s) to apply. Order matters. Choices:\nVanilla, ICE,\
    \ SQRT, oneD, custom"
  type: string?
  inputBinding:
    prefix: --normalization
- id: in_biases_path
  doc: "biases file to compute decay. REQUIRED with \"custom\" normalization.\nFormat:\
    \ single column with header"
  type: File?
  inputBinding:
    prefix: --biases_path
- id: in_mapp_ability
  doc: "Path to mappability bedGraph file, required for oneD normalization.\nMappability\
    \ file can be generated with GEM (example from the genomic FASTA file hg38.fa):\n\
    gem-indexer -i hg38.fa -o hg38\ngem-mappability -I hg38.gem -l 50 -o hg38.50mer\
    \ -T 8\ngem-2-wig -I hg38.gem -i hg38.50mer.mappability -o hg38.50mer\nwigToBigWig\
    \ hg38.50mer.wig hg38.50mer.sizes hg38.50mer.bw\nbigWigToBedGraph hg38.50mer.bw\
    \  hg38.50mer.bedGraph"
  type: File?
  inputBinding:
    prefix: --mappability
- id: in_fast_a
  doc: "Path to FASTA file with genome sequence, to compute GC content and\nnumber\
    \ of restriction sites per bin. Required for oneD normalization"
  type: File?
  inputBinding:
    prefix: --fasta
- id: in_renz
  doc: restriction enzyme name(s). Required for oneD normalization
  type: string?
  inputBinding:
    prefix: --renz
- id: in_factor
  doc: "[1] target mean value of a cell after normalization (can be used to\nweight\
    \ experiments before merging)"
  type: long?
  inputBinding:
    prefix: --factor
- id: in_prop_data
  doc: "[1] Only for oneD normalization: proportion of data to be used in\nfitting\
    \ (for very large datasets). Number between 0 and 1."
  type: double?
  inputBinding:
    prefix: --prop_data
- id: in_seed
  doc: "[1] Only for oneD normalization: seed number for the random picking\nof data\
    \ when using the \"prop_data\" parameter\n"
  type: long?
  inputBinding:
    prefix: --seed
outputs:
- id: out_stdout
  doc: Standard output stream
  type: stdout
hints: []
cwlVersion: v1.1
baseCommand:
- tadbit
- normalize
