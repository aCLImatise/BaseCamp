class: CommandLineTool
id: tadbit_filter.cwl
inputs:
- id: in_force
  doc: overwrite previously run job
  type: boolean
  inputBinding:
    prefix: --force
- id: in_resume
  doc: use filters of previously run job
  type: boolean
  inputBinding:
    prefix: --resume
- id: in_workdir
  doc: path to working directory (generated with the tool tadbit mapper)
  type: File
  inputBinding:
    prefix: --workdir
- id: in_cpus
  doc: "[8] Maximum number of CPU cores available in the execution host. If\nhigher\
    \ than 1, tasks with multi-threading capabilities will enabled\n(if 0 all available)\
    \ cores will be used"
  type: long
  inputBinding:
    prefix: --cpus
- id: in_nox
  doc: no display server (X screen)
  type: boolean
  inputBinding:
    prefix: --noX
- id: in_tmp_db
  doc: if provided uses this directory to manipulate the database
  type: File
  inputBinding:
    prefix: --tmpdb
- id: in_path_ids
  doc: "Use as input data generated by a job under a given pathids. Use\ntadbit describe\
    \ to find out which. To filter an intersected file\nproduced with tadbit map --fast_fragment\
    \ only one PATHid is needed\notherwise one per read is needed, first for read\
    \ 1, second for read\n2."
  type: long[]
  inputBinding:
    prefix: --pathids
- id: in_compress_input
  doc: "Compress input mapped files when parsing is done. This is done in\nbackground,\
    \ while next MAP file is processed, or while reads are\nsorted."
  type: boolean
  inputBinding:
    prefix: --compress_input
- id: in_sam_tools
  doc: path samtools binary
  type: File
  inputBinding:
    prefix: --samtools
- id: in_format
  doc: "[mid] for compression into pseudo-BAM format. Short contains only\npositions\
    \ of reads mapped, mid everything but restriction sites."
  type: string
  inputBinding:
    prefix: --format
- id: in_valid
  doc: stores only valid-pairs discards filtered out reads.
  type: boolean
  inputBinding:
    prefix: --valid
- id: in_clean
  doc: "remove intermediate files. WARNING: together with format \"short\" or\nvalid\
    \ options, this may results in losing data"
  type: boolean
  inputBinding:
    prefix: --clean
- id: in_apply
  doc: "[[1, 2, 3, 4, 6, 7, 9, 10]] Use filters to define a set os valid\npair of\
    \ reads e.g.: '--apply 1 2 3 4 6 7 8 9'. Where these\nnumberscorrespond to: 1:\
    \ self-circle, 2: dangling-end, 3: error, 4:\nextra dangling-end, 5: too close\
    \ from RES, 6: too short, 7: too\nlarge, 8: over-represented, 9: duplicated, 10:\
    \ random breaks"
  type: long[]
  inputBinding:
    prefix: --apply
- id: in_over_represented
  doc: "[0.001%] percentage of restriction-enzyme (RE) genomic fragments\nwith more\
    \ coverage to exclude (possible PCR artifact)."
  type: long
  inputBinding:
    prefix: --over_represented
- id: in_max_frag_size
  doc: "[100000] to exclude large genomic RE fragments (probably resulting\nfrom gaps\
    \ in the reference genome)"
  type: long
  inputBinding:
    prefix: --max_frag_size
- id: in_min_frag_size
  doc: "[50] to exclude small genomic RE fragments (smaller than sequenced\nreads)"
  type: long
  inputBinding:
    prefix: --min_frag_size
- id: in_re_proximity
  doc: "[5] to exclude read-ends falling too close from RE site (pseudo-\ndangling-ends)\n"
  type: long
  inputBinding:
    prefix: --re_proximity
outputs:
- id: out_stdout
  doc: Standard output stream
  type: stdout
cwlVersion: v1.1
baseCommand:
- tadbit
- filter
