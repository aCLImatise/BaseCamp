from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Array, Int, String

Tadbit_Map_V0_1_0 = CommandToolBuilder(tool="tadbit_map", base_command=["tadbit", "map"], inputs=[ToolInput(tag="in_skip_mapping", input_type=Boolean(optional=True), prefix="--skip_mapping", doc=InputDocumentation(doc="generate a Hi-C specific quality plot from FASTQ and exits")), ToolInput(tag="in_workdir", input_type=File(optional=True), prefix="--workdir", doc=InputDocumentation(doc="path to an output folder.")), ToolInput(tag="in_fast_q", input_type=File(optional=True), prefix="--fastq", doc=InputDocumentation(doc="path to a FASTQ files (can be compressed files)")), ToolInput(tag="in_fast_q_two", input_type=File(optional=True), prefix="--fastq2", doc=InputDocumentation(doc="(beta) path to a FASTQ file of read 2 (can be compressed files).\nNeeded for fast_fragment")), ToolInput(tag="in_index", input_type=File(optional=True), prefix="--index", doc=InputDocumentation(doc="paths to file(s) with indexed FASTA files of the reference genome.")), ToolInput(tag="in_genome", input_type=Array(t=File(), optional=True), prefix="--genome", doc=InputDocumentation(doc="paths to file(s) with FASTA files of the reference genome. Needed\nfor fast_fragment mapping. If many, files will be concatenated.\nI.e.: --genome chr_1.fa chr_2.fa In this last case, order is\nimportant or the rest of the analysis. Note: it can also be the path\nto a previously parsed genome in pickle format.")), ToolInput(tag="in_read", input_type=Int(optional=True), prefix="--read", doc=InputDocumentation(doc="read number")), ToolInput(tag="in_renz", input_type=Array(t=String(), optional=True), prefix="--renz", doc=InputDocumentation(doc="restriction enzyme name(s). Use '--renz CHECK' to search for most\nprobable and exit; and use '--renz NONE' to avoid using RE site\ninformation.")), ToolInput(tag="in_chr_name", input_type=Array(t=String(), optional=True), prefix="--chr_name", doc=InputDocumentation(doc="[fasta header] chromosome name(s). Used in the same order as data.")), ToolInput(tag="in_tmp", input_type=File(optional=True), prefix="--tmp", doc=InputDocumentation(doc="path to a temporary directory (default next to 'workdir' directory)")), ToolInput(tag="in_tmp_db", input_type=File(optional=True), prefix="--tmpdb", doc=InputDocumentation(doc="if provided uses this directory to manipulate the database")), ToolInput(tag="in_nox", input_type=Boolean(optional=True), prefix="--noX", doc=InputDocumentation(doc="no display server (X screen)")), ToolInput(tag="in_skip", input_type=Boolean(optional=True), prefix="--skip", doc=InputDocumentation(doc="[DEBUG] in case already mapped.")), ToolInput(tag="in_keep_tmp", input_type=Boolean(optional=True), prefix="--keep_tmp", doc=InputDocumentation(doc="[DEBUG] keep temporary files.")), ToolInput(tag="in_iterative", input_type=Boolean(optional=True), prefix="--iterative", doc=InputDocumentation(doc="default mapping strategy is fragment based use this flag for\niterative mapping")), ToolInput(tag="in_fast_fragment", input_type=File(optional=True), prefix="--fast_fragment", doc=InputDocumentation(doc="(beta) use fast fragment mapping. Both fastq files are mapped using\nfragment based mapping in GEM v3. The output file is an intersected\nread file than can be used directly in tadbit filter (no tadbit\nparse needed). Access to samtools is needed for fast_fragment to\nwork. --fastq2 and --genome needs to be specified and --read value\nshould be 0.")), ToolInput(tag="in_windows", input_type=Array(t=String(), optional=True), prefix="--windows", doc=InputDocumentation(doc="defines windows to be used to trim the input FASTQ reads, for\nexample an iterative mapping can be defined as: '--windows 1:20 1:25\n1:30 1:35 1:40 1:45 1:50'. But this parameter can also be used for\nfragment based mapping if for example pair-end reads are both in the\nsame FASTQ, for example: '--windows 1:50' (if the length of the\nreads is 100). Note: that the numbers are both inclusive.")), ToolInput(tag="in_cpus", input_type=Int(optional=True), prefix="--cpus", doc=InputDocumentation(doc="[8] Maximum number of CPU cores available in the execution host. If\nhigher than 1, tasks with multi-threading capabilities will enabled\n(if 0 all available) cores will be used")), ToolInput(tag="in_mapper", input_type=Int(optional=True), prefix="--mapper", doc=InputDocumentation(doc="[gem] mapper used, options are gem, bowtie2 or hisat2")), ToolInput(tag="in_mapper_binary", input_type=File(optional=True), prefix="--mapper_binary", doc=InputDocumentation(doc="[None] path to mapper binary")), ToolInput(tag="in_mapper_param", input_type=Array(t=String(), optional=True), prefix="--mapper_param", doc=InputDocumentation(doc="any parameter that could be passed to the GEM, BOWTIE2 or HISAT2\nmapper. e.g. if we want to set the proportion of mismatches to 0.05\nand the maximum indel length to 10, (in GEM it would be: -e 0.05\n--max-big-indel-length 10), here we could write: '--gem_param e:0.05\nmax-big-indel-length:10'. IMPORTANT: some options are incompatible\nwith 3C-derived experiments.")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="species name")), ToolInput(tag="in_descr", input_type=Array(t=String(), optional=True), prefix="--descr", doc=InputDocumentation(doc="extra descriptive fields each filed separated by coma, and inside\neach, name and value separated by column:\n--descr=cell:lymphoblast,flowcell:C68AEACXX,index:24nf\n"))], outputs=[ToolOutput(tag="out_workdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_workdir", type_hint=File()), doc=OutputDocumentation(doc="path to an output folder.")), ToolOutput(tag="out_fast_fragment", output_type=File(optional=True), selector=InputSelector(input_to_select="in_fast_fragment", type_hint=File()), doc=OutputDocumentation(doc="(beta) use fast fragment mapping. Both fastq files are mapped using\nfragment based mapping in GEM v3. The output file is an intersected\nread file than can be used directly in tadbit filter (no tadbit\nparse needed). Access to samtools is needed for fast_fragment to\nwork. --fastq2 and --genome needs to be specified and --read value\nshould be 0."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tadbit_Map_V0_1_0().translate("wdl", allow_empty_container=True)

