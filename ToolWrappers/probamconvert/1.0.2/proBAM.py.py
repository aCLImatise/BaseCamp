from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Directory

Probam_Py_V0_1_0 = CommandToolBuilder(tool="proBAM.py", base_command=["proBAM.py"], inputs=[ToolInput(tag="in_file", input_type=File(optional=True), prefix="--file", doc=InputDocumentation(doc="location of the psm file to be processed")), ToolInput(tag="in_name", input_type=File(optional=True), prefix="--name", doc=InputDocumentation(doc="name of the project (will be determine how the output\nfile is called")), ToolInput(tag="in_mismatches", input_type=String(optional=True), prefix="--mismatches", doc=InputDocumentation(doc="numpber of mismatches allowed during mapping")), ToolInput(tag="in_database", input_type=String(optional=True), prefix="--database", doc=InputDocumentation(doc="Which database has to be used (currently only ENSEMBL\nis available")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="species to be used")), ToolInput(tag="in_directory", input_type=Directory(optional=True), prefix="--directory", doc=InputDocumentation(doc="location where to output files should be stored")), ToolInput(tag="in_rm_duplicates", input_type=String(optional=True), prefix="--rm_duplicates", doc=InputDocumentation(doc="Whether duplicates should be removes")), ToolInput(tag="in_three_frame_translation", input_type=String(optional=True), prefix="--three_frame_translation", doc=InputDocumentation(doc="translate transcript sequences in 3 frames")), ToolInput(tag="in_decoy_annotation", input_type=String(optional=True), prefix="--decoy_annotation", doc=InputDocumentation(doc="annotation for DECOY PSM")), ToolInput(tag="in_sorting_order", input_type=String(optional=True), prefix="--sorting_order", doc=InputDocumentation(doc="sorting order of the SAM file")), ToolInput(tag="in_pre_picked_annotation", input_type=String(optional=True), prefix="--pre_picked_annotation", doc=InputDocumentation(doc="Which/How annotation should be identified")), ToolInput(tag="in_include_unmapped", input_type=String(optional=True), prefix="--include_unmapped", doc=InputDocumentation(doc="Whether unmapped psm should be included in the output")), ToolInput(tag="in_conversion_mode", input_type=String(optional=True), prefix="--conversion_mode", doc=InputDocumentation(doc="which ouput format should be generated")), ToolInput(tag="in_comments", input_type=File(optional=True), prefix="--comments", doc=InputDocumentation(doc="add a comment to the file")), ToolInput(tag="in_validated_only", input_type=String(optional=True), prefix="--validated_only", doc=InputDocumentation(doc="only process validated PSMs (for mzIdentML\n"))], outputs=[ToolOutput(tag="out_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_name", type_hint=File()), doc=OutputDocumentation(doc="name of the project (will be determine how the output\nfile is called"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Probam_Py_V0_1_0().translate("wdl", allow_empty_container=True)

