from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String

Proteinortho_V0_1_0 = CommandToolBuilder(tool="proteinortho", base_command=["proteinortho"], inputs=[ToolInput(tag="in_project", input_type=Boolean(optional=True), prefix="-project", doc=InputDocumentation(doc="=    prefix for all result file names [default: myproject]")), ToolInput(tag="in_cpus", input_type=Boolean(optional=True), prefix="-cpus", doc=InputDocumentation(doc="=       number of processors to use [default: auto]")), ToolInput(tag="in_ram", input_type=Boolean(optional=True), prefix="-ram", doc=InputDocumentation(doc="=        maximal used ram threshold for LAPACK and the input graph in MB [default: 75% of the free memory]")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="-silent", doc=InputDocumentation(doc="sets verbose to 0")), ToolInput(tag="in_temp", input_type=Boolean(optional=True), prefix="-temp", doc=InputDocumentation(doc="=       path for temporary files [default: working directory]")), ToolInput(tag="in_keep", input_type=Boolean(optional=True), prefix="-keep", doc=InputDocumentation(doc="stores temporary blast results for reuse (same -project= name is mandatory)")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="-force", doc=InputDocumentation(doc="forces the recalculation of the blast results in any case in step=2. Also forces the recreation of the database generation in step=1")), ToolInput(tag="in_clean", input_type=Boolean(optional=True), prefix="-clean", doc=InputDocumentation(doc="remove all unnecessary files after processing")), ToolInput(tag="in_step", input_type=Boolean(optional=True), prefix="-step", doc=InputDocumentation(doc="=       1 -> generate indices\n2 -> run blast (and ff-adj, if -synteny is set)\n3 -> clustering\n0 -> all (default)")), ToolInput(tag="in_isoform", input_type=Boolean(optional=True), prefix="-isoform", doc=InputDocumentation(doc="=    Enables the isoform merging. All isoforms are united to a single entity and treated as one. Extracting a group with an isoform will result in all isoforms.\nncbi -> if the word 'isoform' is found\nuniprot -> 'Isoform of XYZ' (You need to add the *_additional.fasta files to the analysis)\ntrinity -> using '_iX' suffix\nFor more information have a look at:\nhttps://gitlab.com/paulklemm_PHD/proteinortho/-/wikis/FAQ#how-does-the-isoform-work")), ToolInput(tag="in_blast_program_need", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="=          blast program [default: diamond]\n{blastp|blastn|tblastx|blastp_legacy|blastn_legacy|tblastx_legacy|diamond|usearch|ublast|lastp|lastn|rapsearch|topaz|blatp|blatn|mmseqsp|mmseqsn}\nThe program need to be installed first.\nA suffix 'p' or 'n' indicates aminoacid fasta files (p) or nucleotide fasta files (n).\nThe '_legacy' suffix indicates legacy blastall (otherwise blast+ is used).\nautoblast : automatically detects the blast+ program (blastp,blastn,tblastn,blastx) depending on the input (can also be mixed together!)\nblast*|tblastx : standard blast+ family (blastp : protein files, blastn : dna files)\nblast*_legacy : legacy blast family (blastall)\ndiamond : Only for protein files! standard diamond procedure and for genes/proteins of length >40 with the additional --sensitive flag\nusearch : usearch_local procedure with -id 0 (minimum identity percentage).\nublast : usearch_ublast procedure.\nlastn : standard lastal. Only for dna files!\nlastp : lastal using -p and BLOSUM62 scoring matrix. Only for protein files!\nrapsearch : Only for protein files!\ntopaz : Only for protein files!\nblat* : Blat family. blatp : For protein files! blatn : For dna files! blatx : For dna files!\nmmseqs* : mmseqs family. mmseqsp : For protein files! mmseqsn : For dna files! blatx : For dna files!")), ToolInput(tag="in_check_fast_a", input_type=Boolean(optional=True), prefix="-checkfasta", doc=InputDocumentation(doc="Checks if the given fasta files are compatible with the algorithm of -p")), ToolInput(tag="in__evalue_blast", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="=          E-value for blast [default: 1e-05]")), ToolInput(tag="in_self_blast", input_type=Boolean(optional=True), prefix="-selfblast", doc=InputDocumentation(doc="apply selfblast, detects paralogs without orthologs")), ToolInput(tag="in_sim", input_type=Boolean(optional=True), prefix="-sim", doc=InputDocumentation(doc="=        min. reciprocal similarity for additional hits (0..1) [default: 0.95]\n1 : only the best reciprocal hits are reported\n0 : all possible reciprocal blast matches (within the -evalue) are reported")), ToolInput(tag="in_identity", input_type=Boolean(optional=True), prefix="-identity", doc=InputDocumentation(doc="=   min. percent identity of best blast hits [default: 25]")), ToolInput(tag="in_cov", input_type=Boolean(optional=True), prefix="-cov", doc=InputDocumentation(doc="=        min. coverage of best blast alignments in % [default: 50]")), ToolInput(tag="in_subpara_blast", input_type=Boolean(optional=True), prefix="-subparaBlast", doc=InputDocumentation(doc="=    additional parameters for the search tool\nexample -subparaBlast='-seg no' or -subparaBlast='--more-sensitive' for diamond")), ToolInput(tag="in_synteny", input_type=Boolean(optional=True), prefix="-synteny", doc=InputDocumentation(doc="activate PoFF extension to separate similar sequences print\nby contextual adjacencies (requires .gff for each .fasta)")), ToolInput(tag="in_dups", input_type=Boolean(optional=True), prefix="-dups", doc=InputDocumentation(doc="=       PoFF: number of reiterations for adjacencies heuristic,\nto determine duplicated regions (default: 0)")), ToolInput(tag="in_cs", input_type=Boolean(optional=True), prefix="-cs", doc=InputDocumentation(doc="=         PoFF: Size of a maximum common substring (MCS) for\nadjacency matches (default: 3)")), ToolInput(tag="in_alpha", input_type=Boolean(optional=True), prefix="-alpha", doc=InputDocumentation(doc="=      PoFF: weight of adjacencies vs. sequence similarity\n(default: 0.5)")), ToolInput(tag="in_singles", input_type=Boolean(optional=True), prefix="-singles", doc=InputDocumentation(doc="report singleton genes without any hit")), ToolInput(tag="in_conn", input_type=Boolean(optional=True), prefix="-conn", doc=InputDocumentation(doc="=       min. algebraic connectivity [default: 0.1]")), ToolInput(tag="in_xml", input_type=Boolean(optional=True), prefix="-xml", doc=InputDocumentation(doc="produces an OrthoXML formatted file of the *.proteinortho.tsv file.")), ToolInput(tag="in_purity", input_type=Boolean(optional=True), prefix="-purity", doc=InputDocumentation(doc="=     avoid spurious graph assignments, the higher the more uncertain edges are cut [0-1, default: 1e-07]")), ToolInput(tag="in_mcl", input_type=Boolean(optional=True), prefix="-mcl", doc=InputDocumentation(doc="enables the mcl algorithm for clustering instead of power iteration or lapacks routine. (needs mcl to be installed)")), ToolInput(tag="in_no_graph", input_type=Boolean(optional=True), prefix="-nograph", doc=InputDocumentation(doc="do not generate .proteinortho-graph file (pairwise orthology relations)")), ToolInput(tag="in_desc", input_type=Boolean(optional=True), prefix="-desc", doc=InputDocumentation(doc="write description files (for NCBI FASTA input only)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="-debug", doc=InputDocumentation(doc="gives detailed information for bug tracking")), ToolInput(tag="in_bin_path", input_type=Boolean(optional=True), prefix="-binpath", doc=InputDocumentation(doc="=    path to your directory of local programs that are not available globally (this should not be needed)")), ToolInput(tag="in_protein_ortho_six_do_tpl", input_type=Int(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_fast_a_one", input_type=Int(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_fast_a_two", input_type=Int(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_fast_a_dot_dot_dot", input_type=String(optional=True), position=3, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/proteinortho:6.0.30--hb0e25da_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Proteinortho_V0_1_0().translate("wdl")

