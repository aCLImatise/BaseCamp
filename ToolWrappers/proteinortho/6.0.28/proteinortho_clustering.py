from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Float, Int, File, String

Proteinortho_Clustering_V0_1_0 = CommandToolBuilder(tool="proteinortho_clustering", base_command=["proteinortho_clustering"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="report progress")), ToolInput(tag="in_conn", input_type=Float(optional=True), prefix="-conn", doc=InputDocumentation(doc="threshold for connectivity [0.1]")), ToolInput(tag="in_purity", input_type=Float(optional=True), prefix="-purity", doc=InputDocumentation(doc="threshold for purity [1e-07]")), ToolInput(tag="in_max_nodes", input_type=Int(optional=True), prefix="-maxnodes", doc=InputDocumentation(doc="max. number of nodes for alg. clustering [16777216]")), ToolInput(tag="in_min_species", input_type=Float(optional=True), prefix="-minspecies", doc=InputDocumentation(doc="threshold for species number [1]")), ToolInput(tag="in_rm_graph", input_type=File(optional=True), prefix="-rmgraph", doc=InputDocumentation(doc="output file for graph")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="-seed", doc=InputDocumentation(doc="seed value for srand [current unix time]")), ToolInput(tag="in_epsilon", input_type=Float(optional=True), prefix="-epsilon", doc=InputDocumentation(doc="convergence threshold [1e-08]")), ToolInput(tag="in_lapack", input_type=Boolean(optional=True), prefix="-lapack", doc=InputDocumentation(doc="use the lapack package for the computation of the algebraic connectivity [1]")), ToolInput(tag="in_ram", input_type=Int(optional=True), prefix="-ram", doc=InputDocumentation(doc="maximal used ram threshold for LAPACK and the input graph in MB [16384]")), ToolInput(tag="in_weighted", input_type=Boolean(optional=True), prefix="-weighted", doc=InputDocumentation(doc="the spectral partition is calculated using the bitscores [1]")), ToolInput(tag="in_cpus", input_type=Int(optional=True), prefix="-cpus", doc=InputDocumentation(doc="the number of threads used for openMP [1]")), ToolInput(tag="in_min_openmp", input_type=Int(optional=True), prefix="-minOpenmp", doc=InputDocumentation(doc="the minimum number of nodes for parallel power iteration [256]")), ToolInput(tag="in_k_mere", input_type=Boolean(optional=True), prefix="-kmere", doc=InputDocumentation(doc="use the kmere-split heuristic [1]")), ToolInput(tag="in_pow_lapd", input_type=Float(optional=True), prefix="-powLapD", doc=InputDocumentation(doc="the minimum graph density for the power iteration method, lapacks (d|s)syevr is used otherwise [linear:d<10^(-5.2)*n]")), ToolInput(tag="in_test", input_type=Boolean(optional=True), prefix="-test", doc=InputDocumentation(doc="various test-functions are called first [not set]")), ToolInput(tag="in_max_runs_convergence", input_type=Int(optional=True), prefix="-maxRunsConvergence", doc=InputDocumentation(doc="the maximum number of runs for the calculation of the algebraic connectivity [8192]")), ToolInput(tag="in_graph_files_dot_dot_dot", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_rm_graph", output_type=File(optional=True), selector=InputSelector(input_to_select="in_rm_graph", type_hint=File()), doc=OutputDocumentation(doc="output file for graph"))], container="quay.io/biocontainers/proteinortho:6.0.28--hfd40d39_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Proteinortho_Clustering_V0_1_0().translate("wdl")

