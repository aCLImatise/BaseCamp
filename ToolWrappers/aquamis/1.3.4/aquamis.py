from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Directory, File, Int, Boolean

Aquamis_V0_1_0 = CommandToolBuilder(tool="aquamis", base_command=["aquamis"], inputs=[ToolInput(tag="in_sample_list", input_type=String(optional=True), prefix="--sample_list", doc=InputDocumentation(doc="List of samples to assemble, format as defined by ...")), ToolInput(tag="in_working_directory", input_type=Directory(optional=True), prefix="--working_directory", doc=InputDocumentation(doc="Working directory")), ToolInput(tag="in_snake_file", input_type=File(optional=True), prefix="--snakefile", doc=InputDocumentation(doc="Path to Snakefile of bakcharak pipeline; default: path\nto Snakefile in same directory")), ToolInput(tag="in_run_name", input_type=Int(optional=True), prefix="--run_name", doc=InputDocumentation(doc="Name of the sequencing run for all samples in the\nsample list, e.g.\n'210401_M02387_0709_000000000-HBXX6', or a self-chosen\nanalysis title")), ToolInput(tag="in_docker", input_type=File(optional=True), prefix="--docker", doc=InputDocumentation(doc="Mapped volume path of the host system")), ToolInput(tag="in_qc_thresholds", input_type=File(optional=True), prefix="--qc_thresholds", doc=InputDocumentation(doc="Definition of thresholds in JSON file; default: /usr/l\nocal/opt/aquamis/thresholds/AQUAMIS_thresholds.json")), ToolInput(tag="in_json_schema", input_type=Int(optional=True), prefix="--json_schema", doc=InputDocumentation(doc="JSON schema used for validation; default: /usr/local/o\npt/aquamis/resources/AQUAMIS_schema_v20210226.json")), ToolInput(tag="in_json_filter", input_type=File(optional=True), prefix="--json_filter", doc=InputDocumentation(doc="Definition of thresholds in JSON file; default: /usr/l\nocal/opt/aquamis/thresholds/AQUAMIS_schema_filter_v202\n10226.json")), ToolInput(tag="in_mash_db", input_type=File(optional=True), prefix="--mashdb", doc=InputDocumentation(doc="Path to reference mash database; default:/usr/local/op\nt/aquamis/reference_db/mash/mashDB.msh")), ToolInput(tag="in_mash_km_er_size", input_type=Int(optional=True), prefix="--mash_kmersize", doc=InputDocumentation(doc="kmer size for mash, must match size of database;\ndefault: 21")), ToolInput(tag="in_mash_sketch_size", input_type=Int(optional=True), prefix="--mash_sketchsize", doc=InputDocumentation(doc="sketch size for mash, must match size of database;\ndefault: 1000")), ToolInput(tag="in_kraken_two_db", input_type=Int(optional=True), prefix="--kraken2db", doc=InputDocumentation(doc="Path to kraken2 database; default:\n/usr/local/opt/aquamis/reference_db/kraken2")), ToolInput(tag="in_tax_level_qc", input_type=Int(optional=True), prefix="--taxlevel_qc", doc=InputDocumentation(doc="Taxonomic level for kraken2 classification quality\ncontrol. Choose S for species or G for genus; default:\n'G'")), ToolInput(tag="in_read_length", input_type=Int(optional=True), prefix="--read_length", doc=InputDocumentation(doc="Read length to be used in bracken abundance\nestimation; default: 150")), ToolInput(tag="in_tax_on_kit_db", input_type=File(optional=True), prefix="--taxonkit_db", doc=InputDocumentation(doc="Path to taxonkit_db;\ndefault:/usr/local/opt/aquamis/reference_db/taxonkit")), ToolInput(tag="in_con_find_r_database", input_type=File(optional=True), prefix="--confindr_database", doc=InputDocumentation(doc="Path to confindr databases;\ndefault:/usr/local/opt/aquamis/reference_db/confindr")), ToolInput(tag="in_min_trimmed_length", input_type=Int(optional=True), prefix="--min_trimmed_length", doc=InputDocumentation(doc="Minimum length of a read to keep; default: 15")), ToolInput(tag="in_assembler", input_type=String(optional=True), prefix="--assembler", doc=InputDocumentation(doc="Assembler to use in shovill, choose from megahit\nvelvet skesa spades; default: 'spades'")), ToolInput(tag="in_shov_ill_output_options", input_type=String(optional=True), prefix="--shovill_output_options", doc=InputDocumentation(doc="Extra output options for shovill; default: ''")), ToolInput(tag="in_shov_ill_depth", input_type=Int(optional=True), prefix="--shovill_depth", doc=InputDocumentation(doc="Sub-sample --R1/--R2 to this depth. Disable with\n--depth 0; default: 100")), ToolInput(tag="in_shov_ill_ram", input_type=Int(optional=True), prefix="--shovill_ram", doc=InputDocumentation(doc="Limit amount of RAM provided to shovill; default: 16")), ToolInput(tag="in_shov_ill_tmpdir", input_type=Directory(optional=True), prefix="--shovill_tmpdir", doc=InputDocumentation(doc="Fast temporary directory; default: '/tmp/shovill'")), ToolInput(tag="in_shov_ill_extra_opts", input_type=String(optional=True), prefix="--shovill_extraopts", doc=InputDocumentation(doc="Extra options for shovill; default: ''")), ToolInput(tag="in_shov_ill_modules", input_type=String(optional=True), prefix="--shovill_modules", doc=InputDocumentation(doc="Module options for shovill; choose from --noreadcorr\n--trim --nostitch --nocorr --noreadcorr; default: '--\nnoreadcorr'")), ToolInput(tag="in_mlst_scheme", input_type=String(optional=True), prefix="--mlst_scheme", doc=InputDocumentation(doc="Extra options for MLST; default: ''")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of Threads to use. Ideally multiple of 10;\ndefault: 10")), ToolInput(tag="in_threads_sample", input_type=Int(optional=True), prefix="--threads_sample", doc=InputDocumentation(doc="Number of Threads to use per sample; default: 1")), ToolInput(tag="in_cond_a_prefix", input_type=File(optional=True), prefix="--condaprefix", doc=InputDocumentation(doc="Path of default conda environment, enables recycling\nbuilt environments; default: '<AQUAMIS>/conda_env'")), ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dryrun", doc=InputDocumentation(doc="Snakemake dryrun. Only calculate graph without\nexecuting anything")), ToolInput(tag="in_force_all", input_type=Boolean(optional=True), prefix="--forceall", doc=InputDocumentation(doc="Snakemake force. Force recalculation of all steps")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="--force", doc=InputDocumentation(doc="Snakemake force. Force recalculation of output (rule\nor file) speciefied here")), ToolInput(tag="in_fix_fails", input_type=Boolean(optional=True), prefix="--fix_fails", doc=InputDocumentation(doc="Re-run snakemake after failure removing failed samples")), ToolInput(tag="in_unlock", input_type=Boolean(optional=True), prefix="--unlock", doc=InputDocumentation(doc="Unlock a snakemake execution folder if it had been")), ToolInput(tag="in_use_cond_a", input_type=Boolean(optional=True), prefix="--use_conda", doc=InputDocumentation(doc="Utilize the Snakemake '--useconda' option, i.e. Smk\nrules require execution with a specific conda env")), ToolInput(tag="in_cond_a_front_end", input_type=Boolean(optional=True), prefix="--conda_frontend", doc=InputDocumentation(doc="Do not use mamba but conda as frontend to create\nindividual conda environments")), ToolInput(tag="in_remove_temp", input_type=Boolean(optional=True), prefix="--remove_temp", doc=InputDocumentation(doc="Remove large temporary files. May lead to slower re-\nruns but saves disk space.")), ToolInput(tag="in_logdir", input_type=File(optional=True), prefix="--logdir", doc=InputDocumentation(doc="Path to directory where .snakemake output is to be\nsaved\n")), ToolInput(tag="in_interrupted", input_type=String(), position=0, doc=InputDocumentation(doc="--no_assembly         Only trimming and kraken analysis"))], outputs=[ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Snakemake force. Force recalculation of output (rule\nor file) speciefied here")), ToolOutput(tag="out_logdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_logdir", type_hint=File()), doc=OutputDocumentation(doc="Path to directory where .snakemake output is to be\nsaved\n"))], container="quay.io/biocontainers/aquamis:1.3.4--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Aquamis_V0_1_0().translate("wdl")

