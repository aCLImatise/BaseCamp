from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int

Crux_Algorithm__V0_1_0 = CommandToolBuilder(tool="crux_algorithm.", base_command=["crux", "algorithm."], inputs=[ToolInput(tag="in_bullseye", input_type=String(), position=0, doc=InputDocumentation(doc="Assign high resolution precursor m/z values to\nMS/MS data using the Hardkl√∂r algorithm.")), ToolInput(tag="in_tide_index", input_type=String(), position=1, doc=InputDocumentation(doc="Create an index for all peptides in a fasta file,\nfor use in subsequent calls to tide-search.")), ToolInput(tag="in_tide_search", input_type=String(), position=2, doc=InputDocumentation(doc="Search a collection of spectra against a sequence\ndatabase, returning a collection of\npeptide-spectrum matches (PSMs). This is a fast\nsearch engine but requires that you first build an\nindex with tide-index.")), ToolInput(tag="in_comet", input_type=String(), position=3, doc=InputDocumentation(doc="Search a collection of spectra against a sequence\ndatabase, returning a collection of PSMs. This\nsearch engine runs directly on a protein database\nin FASTA format.")), ToolInput(tag="in_percolator", input_type=String(), position=4, doc=InputDocumentation(doc="Re-rank a collection of PSMs using the Percolator\nalgorithm. Optionally, also produce protein\nrankings using the Fido algorithm.")), ToolInput(tag="in_q_ranker", input_type=String(), position=5, doc=InputDocumentation(doc="Re-rank a collection of PSMs using the Q-ranker")), ToolInput(tag="in_algorithm_dot", input_type=String(), position=6, doc=InputDocumentation(doc="barista                  Rank PSMs, peptides and proteins, assigning a")), ToolInput(tag="in_search_for_x_links", input_type=String(), position=0, doc=InputDocumentation(doc="Search a collection of spectra against a sequence\ndatabase, returning a collection of matches\ncorresponding to linear and cross-linked peptides\nscored by XCorr.")), ToolInput(tag="in_spectral_counts", input_type=String(), position=1, doc=InputDocumentation(doc="Quantify peptides or proteins using one of three\nspectral counting methods.")), ToolInput(tag="in_pipeline", input_type=String(), position=2, doc=InputDocumentation(doc="Runs a series of Crux tools on a protein database\nand one or more sets of tandem mass spectra.")), ToolInput(tag="in_cascade_search", input_type=String(), position=3, doc=InputDocumentation(doc="An iterative procedure for incorporating\ninformation about peptide groups into the database\nsearch and confidence estimation procedure.")), ToolInput(tag="in_assign_confidence", input_type=String(), position=4, doc=InputDocumentation(doc="Assign two types of statistical confidence measures\n(q-values and posterior error probabilities) to\neach PSM in a given set.")), ToolInput(tag="in_make_pin", input_type=String(), position=0, doc=InputDocumentation(doc="Given a set of search results files, generate a pin\nfile for input to crux percolator")), ToolInput(tag="in_predict_peptide_ions", input_type=String(), position=1, doc=InputDocumentation(doc="Given a peptide and a charge state, predict the m/z\nvalues of the resulting fragment ions.")), ToolInput(tag="in_hard_klor", input_type=String(), position=2, doc=InputDocumentation(doc="Identify isotopic distributions from\nhigh-resolution mass spectra.")), ToolInput(tag="in_param_medic", input_type=String(), position=3, doc=InputDocumentation(doc="Examine the spectra in a file to estimate the best\nprecursor and fragment error tolerances for\ndatabase search.")), ToolInput(tag="in_print_processed_spectra", input_type=String(), position=4, doc=InputDocumentation(doc="Process spectra as for scoring xcorr and print the\nresults to a file.")), ToolInput(tag="in_generate_peptides", input_type=String(), position=5, doc=InputDocumentation(doc="Extract from a given set of protein sequences a\nlist of target and decoy peptides fitting the\nspecified criteria.")), ToolInput(tag="in_get_ms_two_spectrum", input_type=Int(), position=6, doc=InputDocumentation(doc="Extract one or more fragmentation spectra,\nspecified by scan number, from an MS2 file.")), ToolInput(tag="in_version", input_type=String(), position=7, doc=InputDocumentation(doc="Print the Crux version number to standard output,\nthen exit.")), ToolInput(tag="in_psm_convert", input_type=String(), position=8, doc=InputDocumentation(doc="Reads in a file containing peptide-spectrum matches\n(PSMs) in one of the variety of supported formats\nand outputs the same PSMs in a different format")), ToolInput(tag="in_subtract_index", input_type=String(), position=9, doc=InputDocumentation(doc="This command takes two peptide indices, created by\nthe tide-index command, and subtracts the second\nindex from the first. The result is an output index\nthat contains peptides that appear in the first\nindex but not the second.")), ToolInput(tag="in_xlink_assign_ions", input_type=String(), position=10, doc=InputDocumentation(doc="Given a spectrum and a pair of cross-linked\npeptides, assign theoretical ion type labels to\npeaks in the observed spectrum.")), ToolInput(tag="in_xlink_score_spectrum", input_type=String(), position=11, doc=InputDocumentation(doc="Given a cross-linked peptide and a spectrum\ncalculate the corresponding XCorr score a number of\ndifferent ways.")), ToolInput(tag="in_localize_modification", input_type=String(), position=12, doc=InputDocumentation(doc="This command finds, for each peptide-spectrum match\n(PSM) in a given set, the most likely location\nalong the peptide for a post-translational\nmodification (PTM). The mass of the PTM is inferred\nfrom the difference between the spectrum neutral\nmass and the peptide mass.")), ToolInput(tag="in_extract_columns", input_type=String(), position=13, doc=InputDocumentation(doc="Print specified columns from a tab-delimited file.")), ToolInput(tag="in_extract_rows", input_type=String(), position=14, doc=InputDocumentation(doc="Print specified rows from a tab-delimited file.")), ToolInput(tag="in_stat_column", input_type=String(), position=15, doc=InputDocumentation(doc="Collect summary statistics from a column in a\ntab-delimited file.")), ToolInput(tag="in_sort_by_column", input_type=String(), position=16, doc=InputDocumentation(doc="Sorts a tab-delimited file by a column."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Crux_Algorithm__V0_1_0().translate("wdl", allow_empty_container=True)

