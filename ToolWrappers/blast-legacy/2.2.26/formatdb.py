from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Formatdb_V0_1_0 = CommandToolBuilder(tool="formatdb", base_command=["formatdb"], inputs=[ToolInput(tag="in_title_database_file", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="Title for database file [String]  Optional")), ToolInput(tag="in_input_files_formatting", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="Input file(s) for formatting [File In]  Optional")), ToolInput(tag="in_logfile_name_optionaldefault", input_type=File(optional=True), prefix="-l", doc=InputDocumentation(doc="Logfile name: [File Out]  Optional\ndefault = formatdb.log")), ToolInput(tag="in_type_filet_optionaldefault", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="Type of file\nT - protein\nF - nucleotide [T/F]  Optional\ndefault = T")), ToolInput(tag="in_parse_optionst_create", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="Parse options\nT - True: Parse SeqId and create indexes.\nF - False: Do not parse SeqId. Do not create indexes.")), ToolInput(tag="in_input_file_database", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="Input file is database in ASN.1 format (otherwise FASTA is expected)\nT - True,\nF - False.")), ToolInput(tag="in_asn_database_binaryf", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="ASN.1 database in binary mode\nT - binary,\nF - text mode.")), ToolInput(tag="in_input_seqentry_optionaldefault", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="Input is a Seq-entry [T/F]  Optional\ndefault = F")), ToolInput(tag="in_base_name_optional", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="Base name for BLAST files [String]  Optional")), ToolInput(tag="in_database_volume_size", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Database volume size in millions of letters [Integer]  Optional\ndefault = 4000")), ToolInput(tag="in_create_indexes_limited", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Create indexes limited only to accessions - sparse [T/F]  Optional\ndefault = F")), ToolInput(tag="in_verbose_check_nonunique", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="Verbose: check for non-unique string ids in the database [T/F]  Optional\ndefault = F")), ToolInput(tag="in_create_alias_file", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="Create an alias file with this name\nuse the gifile arg (below) if set to calculate db size\nuse the BLAST db specified with -i (above) [File Out]  Optional")), ToolInput(tag="in_gifile_file_containing", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="Gifile (file containing list of gi's) [File In]  Optional")), ToolInput(tag="in_binary_gifile_produced", input_type=File(optional=True), prefix="-B", doc=InputDocumentation(doc="Binary Gifile produced from the Gifile specified above [File Out]  Optional")), ToolInput(tag="in_taxid_file_set", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="Taxid file to set the taxonomy ids in ASN.1 deflines [File In]  Optional"))], outputs=[ToolOutput(tag="out_logfile_name_optionaldefault", output_type=File(optional=True), selector=InputSelector(input_to_select="in_logfile_name_optionaldefault", type_hint=File()), doc=OutputDocumentation(doc="Logfile name: [File Out]  Optional\ndefault = formatdb.log")), ToolOutput(tag="out_binary_gifile_produced", output_type=File(optional=True), selector=InputSelector(input_to_select="in_binary_gifile_produced", type_hint=File()), doc=OutputDocumentation(doc="Binary Gifile produced from the Gifile specified above [File Out]  Optional"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Formatdb_V0_1_0().translate("wdl", allow_empty_container=True)

