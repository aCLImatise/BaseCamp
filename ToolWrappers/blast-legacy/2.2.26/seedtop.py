from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Seedtop_V0_1_0 = CommandToolBuilder(tool="seedtop", base_command=["seedtop"], inputs=[ToolInput(tag="in_database_default_", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="Database [String]\ndefault = nr")), ToolInput(tag="in_query_file_default", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="Query File [File In]\ndefault = stdin")), ToolInput(tag="in_hit_file_default", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="Hit File [File In]\ndefault = hit_file")), ToolInput(tag="in_output_file_stdout", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Output File for Alignment [File Out]  Optional\ndefault = stdout")), ToolInput(tag="in_cost_open_default", input_type=Boolean(optional=True), prefix="-G", doc=InputDocumentation(doc="Cost to open a gap [Integer]\ndefault = 11")), ToolInput(tag="in_cost_extend_default", input_type=Boolean(optional=True), prefix="-E", doc=InputDocumentation(doc="Cost to extend a gap [Integer]\ndefault = 1")), ToolInput(tag="in_cost_decline_align", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="Cost decline to align [Integer]\ndefault = 99999")), ToolInput(tag="in_x_dropoff_value", input_type=Boolean(optional=True), prefix="-X", doc=InputDocumentation(doc="X dropoff value for gapped alignment (in bits) [Integer]\ndefault = 15")), ToolInput(tag="in_cutoff_cost_default", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="Cutoff cost [Integer]\ndefault = 30")), ToolInput(tag="in_score_only_default", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="Score only or not [Integer]\ndefault = 1")), ToolInput(tag="in_show_gis_deflines", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="Show GI's in deflines [T/F]\ndefault = F")), ToolInput(tag="in_expectation_valuee_default", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="Expectation value(E) [Real]\ndefault = 10.0")), ToolInput(tag="in_believe_defline_default", input_type=Boolean(optional=True), prefix="-J", doc=InputDocumentation(doc="Believe the query defline [T/F]\ndefault = F")), ToolInput(tag="in_seqalign_file_be", input_type=File(optional=True), prefix="-O", doc=InputDocumentation(doc="SeqAlign file ('Believe the query defline' must be TRUE) [File Out]  Optional")), ToolInput(tag="in_matrix_default_blosum", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="Matrix [String]\ndefault = BLOSUM62")), ToolInput(tag="in_program_name_default", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="Program Name [String]\ndefault = patmatchp")), ToolInput(tag="in_cost_match_default", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="Cost for a match [Integer]\ndefault = 10")), ToolInput(tag="in_cost_mismatch_default", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="Cost for a mismatch [Integer]\ndefault = -10")), ToolInput(tag="in_filter_query_sequence", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="Filter query sequence with SEG [T/F]\ndefault = F")), ToolInput(tag="in_force_searching_are", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Force searching for patterns even if they are too likely [T/F]\ndefault = F")), ToolInput(tag="in_internal_hit_buffer", input_type=Boolean(optional=True), prefix="-K", doc=InputDocumentation(doc="internal hit buffer size multiplier (default: 2 /query_length/ ) [Integer]\ndefault = 2\n"))], outputs=[ToolOutput(tag="out_output_file_stdout", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_stdout", type_hint=File()), doc=OutputDocumentation(doc="Output File for Alignment [File Out]  Optional\ndefault = stdout")), ToolOutput(tag="out_seqalign_file_be", output_type=File(optional=True), selector=InputSelector(input_to_select="in_seqalign_file_be", type_hint=File()), doc=OutputDocumentation(doc="SeqAlign file ('Believe the query defline' must be TRUE) [File Out]  Optional"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seedtop_V0_1_0().translate("wdl", allow_empty_container=True)

