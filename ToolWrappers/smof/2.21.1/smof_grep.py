from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Smof_Grep_V0_1_0 = CommandToolBuilder(tool="smof_grep", base_command=["smof", "grep"], inputs=[ToolInput(tag="in_match_sequence", input_type=Boolean(optional=True), prefix="--match-sequence", doc=InputDocumentation(doc="match sequence rather than header")), ToolInput(tag="in_file", input_type=File(optional=True), prefix="--file", doc=InputDocumentation(doc="obtain patterns from FILE, one per line")), ToolInput(tag="in_files_without_match", input_type=Boolean(optional=True), prefix="--files-without-match", doc=InputDocumentation(doc="print names files with no matches")), ToolInput(tag="in_files_with_matches", input_type=Boolean(optional=True), prefix="--files-with-matches", doc=InputDocumentation(doc="print names input files with matches")), ToolInput(tag="in_wrap", input_type=String(optional=True), prefix="--wrap", doc=InputDocumentation(doc="a regular expression to capture patterns")), ToolInput(tag="in_perl_regexp", input_type=Boolean(optional=True), prefix="--perl-regexp", doc=InputDocumentation(doc="treat patterns as perl regular expressions")), ToolInput(tag="in_ambiguous_nucl", input_type=Boolean(optional=True), prefix="--ambiguous-nucl", doc=InputDocumentation(doc="parse extended nucleotide alphabet")), ToolInput(tag="in_case_sensitive", input_type=Boolean(optional=True), prefix="--case-sensitive", doc=InputDocumentation(doc="DO NOT ignore case distinctions (ignore by default)")), ToolInput(tag="in_invert_match", input_type=Boolean(optional=True), prefix="--invert-match", doc=InputDocumentation(doc="print non-matching entries")), ToolInput(tag="in_only_matching", input_type=Boolean(optional=True), prefix="--only-matching", doc=InputDocumentation(doc="show only the part that matches")), ToolInput(tag="in_before_context", input_type=String(optional=True), prefix="--before-context", doc=InputDocumentation(doc="Include N characters before match")), ToolInput(tag="in_after_context", input_type=String(optional=True), prefix="--after-context", doc=InputDocumentation(doc="Include N characters after match")), ToolInput(tag="in_context", input_type=String(optional=True), prefix="--context", doc=InputDocumentation(doc="Include N characters before and after match")), ToolInput(tag="in_count", input_type=Boolean(optional=True), prefix="--count", doc=InputDocumentation(doc="print number of entries with matches")), ToolInput(tag="in_count_matches", input_type=Boolean(optional=True), prefix="--count-matches", doc=InputDocumentation(doc="print number of non-overlapping matches")), ToolInput(tag="in_line_regexp", input_type=Boolean(optional=True), prefix="--line-regexp", doc=InputDocumentation(doc="force PATTERN to match the whole text (regex allowed)")), ToolInput(tag="in_exact", input_type=Boolean(optional=True), prefix="--exact", doc=InputDocumentation(doc="force PATTERN to literally equal the text (fast)")), ToolInput(tag="in_gapped", input_type=Boolean(optional=True), prefix="--gapped", doc=InputDocumentation(doc="match across gaps when searching aligned sequences")), ToolInput(tag="in_both_strands", input_type=Boolean(optional=True), prefix="--both-strands", doc=InputDocumentation(doc="search both strands")), ToolInput(tag="in_reverse_only", input_type=Boolean(optional=True), prefix="--reverse-only", doc=InputDocumentation(doc="only search the reverse strand")), ToolInput(tag="in_no_color", input_type=Boolean(optional=True), prefix="--no-color", doc=InputDocumentation(doc="do not print in color")), ToolInput(tag="in_force_color", input_type=Boolean(optional=True), prefix="--force-color", doc=InputDocumentation(doc="print in color even to non-tty (DANGEROUS)")), ToolInput(tag="in_preserve_color", input_type=Boolean(optional=True), prefix="--preserve-color", doc=InputDocumentation(doc="Preserve incoming color")), ToolInput(tag="in_color", input_type=String(optional=True), prefix="--color", doc=InputDocumentation(doc="Choose a highlight color")), ToolInput(tag="in_gff", input_type=Boolean(optional=True), prefix="--gff", doc=InputDocumentation(doc="output matches in gff format")), ToolInput(tag="in_gff_type", input_type=String(optional=True), prefix="--gff-type", doc=InputDocumentation(doc="name of searched feature")), ToolInput(tag="in_fasta_in", input_type=String(optional=True), prefix="--fastain", doc=InputDocumentation(doc="Search for exact sequence matches against FASTA")), ToolInput(tag="in_pattern", input_type=String(), position=0, doc=InputDocumentation(doc="pattern to match")), ToolInput(tag="in_input", input_type=String(), position=1, doc=InputDocumentation(doc="input fasta sequence (default = stdin)"))], outputs=[], container="quay.io/biocontainers/smof:2.21.1--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Smof_Grep_V0_1_0().translate("wdl")

