from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Directory, Int

Planemo_Shed_Update_V0_1_0 = CommandToolBuilder(tool="planemo_shed_update", base_command=["planemo", "shed_update"], inputs=[ToolInput(tag="in_report_x_unit", input_type=File(optional=True), prefix="--report_xunit", doc=InputDocumentation(doc="Output an XUnit report, useful for CI testing")), ToolInput(tag="in_recursive", input_type=Boolean(optional=True), prefix="--recursive", doc=InputDocumentation(doc="Recursively perform command for nested\nrepository directories.")), ToolInput(tag="in_fail_fast", input_type=Boolean(optional=True), prefix="--fail_fast", doc=InputDocumentation(doc="If multiple repositories are specified and an\nerror occurs stop immediately instead of\nprocessing remaining repositories.")), ToolInput(tag="in_owner", input_type=String(optional=True), prefix="--owner", doc=InputDocumentation(doc="Tool Shed repository owner (username).")), ToolInput(tag="in_name", input_type=Directory(optional=True), prefix="--name", doc=InputDocumentation(doc="Tool Shed repository name (defaults to the\ninferred tool directory name).")), ToolInput(tag="in_shed_email", input_type=String(optional=True), prefix="--shed_email", doc=InputDocumentation(doc="E-mail for Tool Shed auth (required unless\nshed_key is specified).")), ToolInput(tag="in_shed_key", input_type=String(optional=True), prefix="--shed_key", doc=InputDocumentation(doc="API key for Tool Shed access. An API key is\nrequired unless e-mail and password is\nspecified. This key can be specified with\neither --shed_key or --shed_key_from_env.")), ToolInput(tag="in_shed_key_from_env", input_type=String(optional=True), prefix="--shed_key_from_env", doc=InputDocumentation(doc="Environment variable to read API key for Tool\nShed access from.")), ToolInput(tag="in_shed_password", input_type=String(optional=True), prefix="--shed_password", doc=InputDocumentation(doc="Password for Tool Shed auth (required unless\nshed_key is specified).")), ToolInput(tag="in_shed_target", input_type=Int(optional=True), prefix="--shed_target", doc=InputDocumentation(doc="Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local' (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined ~/.planemo.yml.")), ToolInput(tag="in_message", input_type=String(optional=True), prefix="--message", doc=InputDocumentation(doc="Commit message for tool shed upload.")), ToolInput(tag="in_force_repository_creation", input_type=Boolean(optional=True), prefix="--force_repository_creation", doc=InputDocumentation(doc="If a repository cannot be found for the\nspecified user/repo name pair, then\nautomatically create the repository in the\ntoolshed.")), ToolInput(tag="in_check_diff", input_type=Boolean(optional=True), prefix="--check_diff", doc=InputDocumentation(doc="Skip uploading if the shed_diff detects there\nwould be no 'difference' (only attributes\npopulated by the shed would be updated.)")), ToolInput(tag="in_skip_upload", input_type=Boolean(optional=True), prefix="--skip_upload", doc=InputDocumentation(doc="Skip upload contents as part of operation, only\nupdate metadata.")), ToolInput(tag="in_skip_metadata", input_type=Boolean(optional=True), prefix="--skip_metadata", doc=InputDocumentation(doc="Skip metadata update as part of operation, only\nupload new contents.")), ToolInput(tag="in_shed_dot", input_type=String(), position=0, doc=InputDocumentation(doc="% planemo shed_update --shed_target testtoolshed path/to/repo")), ToolInput(tag="in_changes_dot", input_type=String(), position=0, doc=InputDocumentation(doc="The lower-level ``shed_upload`` command should be used instead if the"))], outputs=[], container="quay.io/biocontainers/planemo:0.74.2--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Planemo_Shed_Update_V0_1_0().translate("wdl")

