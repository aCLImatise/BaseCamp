!Command
command:
- initializeDatasource
positional: []
named:
- !Flag
  description: datasource type.  Type of datasource to create.
  synonyms:
  - --ds_type
  args: !ChoiceFlagArg
    choices: !!set
      gene_tsv:
      indexed_tsv:
      gp_tsv:
      indexed_vcf:
      transcript_tsv:
      bigwig:
      gpp_tsv:
  optional: true
- !Flag
  description: datasource filename.  Headers must be on the first line.  This is the
    source file that contains annotation data.
  synonyms:
  - --ds_file
  args: !SimpleFlagArg
    name: DS_FILE
  optional: true
- !Flag
  description: datasource name. Plain name for the datasource.  E.g. 'MutSig_Published_Results'
  synonyms:
  - --name
  args: !SimpleFlagArg
    name: NAME
  optional: true
- !Flag
  description: Main datasource directory that contains other datasources.  I.e. the
    destination directory for the newly created datasource.
  synonyms:
  - --dbDir
  args: !SimpleFlagArg
    name: DBDIR
  optional: true
- !Flag
  description: Name of the folder that should appear in dbDir
  synonyms:
  - --ds_foldername
  args: !SimpleFlagArg
    name: DS_FOLDERNAME
  optional: true
- !Flag
  description: Genome build.  For example, hg19.
  synonyms:
  - --genome_build
  args: !ChoiceFlagArg
    choices: !!set
      hg19:
  optional: true
- !Flag
  description: Comma separated list of index columns.  MUST be the name of the columns
    and each row must have unique values across all index columns.
  synonyms:
  - --index_columns
  args: !SimpleFlagArg
    name: INDEX_COLUMNS
  optional: true
- !Flag
  description: Comma separated list of annotation columns. MUST be the subset of the
    columns.  This (optional) parameter is specified for indexed_tsv only.
  synonyms:
  - --annotation_columns
  args: !SimpleFlagArg
    name: ANNOTATION_COLUMNS
  optional: true
- !Flag
  description: "Mode to use when annotating.  This parameter ought to be specified\
    \ for indexed_tsv and indexed_vcf only [default: exact].\nDetailed parameter information:\n\
    datasource type  --\n\"gene_tsv\" -- gene indexed file.  gene must be a Hugo Symbol.\n\
    TSVs must:\n1) have a single column for the Hugo Symbol\n2) have column names\
    \ on the first line.\nTODO: Support prefix comment lines starting with '#'\n\"\
    gp_tsv\" -- tsv file referenced by genome position.\nTSVs must:\n1) have the column\
    \ names on the first line.\nTODO: Support prefix comment lines starting with '#'\n\
    2) have three distinct columns for chromosome, start position, and end position.\
    \  Note that the names of these columns are specified in the\ngenomic position\
    \ columns (see the command line example below)\n3) tsv --> tab separated values,\
    \ so the file must be a table of tab-separated values with the same number of\
    \ values on every row.\n\"gpp_tsv\" -- tsv file referenced by gene and protein\
    \ position.\nTSVs must:\n1) have the column names on the first line.\nTODO: Support\
    \ prefix comment lines starting with '#'\n2) have three distinct columns for gene,\
    \ start AA position, and end AA position.  Note that the names of these columns\
    \ are specified in the\ngene protein position columns (see the command line example\
    \ below)\n3) tsv --> tab separated values, so the file must be a table of tab-separated\
    \ values with the same number of values on every row.\n\"transcript_tsv\" -- tsv\
    \ file referenced by transcript_id\nTSV has the same requirements as gene_tsv,\
    \ except that the single column must be for transcript_id.\nNote:  This is inherently\
    \ coupled with the transcript providing datasource used.\n\"indexed_tsv\" -- tsv\
    \ file referenced by chromosome, start position and end position\nTSVs must:\n\
    1) have the column names on the first line.\nTODO: Support prefix comment lines\
    \ starting with '#'\n2) have three distinct columns for chromosome, start position,\
    \ and end position.  Note that the names of these columns are specified in the\n\
    chromosome, start and end positions columns (see the command line example below)\n\
    3) tsv --> tab separated values, so the file must be a table of tab-separated\
    \ values with the same number of values on every row.\n\"indexed_vcf\" -- vcf\
    \ or tabix indexed vcf file referenced by chromosome and position.\ndatasource\
    \ filename -- input data file.  In the case of tabix_gp_tsv, it would be the source\
    \ tsv file.\nname -- arbitrary name for the datasource.  This will be the folder\
    \ moved into the the destination db dir.  Must be unique from other datasources.\n\
    This will be a prefix on all annotations from this datasource.\nE.g. CancerGeneCensus\n\
    version -- version of the datasource.  This should be the version of the data\
    \ itself, such as '3.0' for Gaf 3.0\ndestination database directory -- an Oncotator\
    \ database directory.\ndestination datasource directory -- directory name that\
    \ this datasource should have.  E.g. cancer_gene_census\ngenome_build -- The genome\
    \ build.  E.g. hg19\nindex columns -- the columns that are indexed.\nFor gene_tsv,\
    \ this would be a single column name for the Hugo_Symbol, e.g. \"Symbol\"\nFor\
    \ gpp_tsv, this MUST be a triple specifying gene, AA start, and AA end.  For a\
    \ single amino acid, start should equal end.\nFor indexed_tsv, this MUST be either\
    \ a triple, specifying chromosome, start and end, or a quintuple, sepcifying chromosome,\
    \ start, end, reference and alternate.\nmatch mode -- The type of annotation mode\
    \ for indels when annotating with indexed tsvs and vcfs. Select either exact,\
    \ overlap or avg.\nFor exact, annotations are only added when the database record\
    \ is an exact match for the input indel.\nFor overlap, annotations from all the\
    \ database records that span the length of the indel are added. The annotated\
    \ values are pipe delimited.\nFor average, annotations from all the database records\
    \ that span the length of the indel are averaged. In cases where the annotation\
    \ is not of type float or int, average switches to overlap mode.\nannotation columns\
    \ -- comma separated list of column names that are a subset of columns (used for\
    \ indexed_tsv, only)\nExample usages:\n# Create the abridged cancer gene census\
    \ datasource as a generic tsv, using the Symbol column as the gene column\npython\
    \ initializeDataSource.py --ds_type gene_tsv --ds_file CancerGeneCensus_Table_1_full_2012-03-15_trim.txt\
    \ --name CGC --version full_2012_03_15 --dbDir ~/oncotest --ds_foldername cgc\
    \ --genome_build hg19 --index_columns Symbol\n# Create a datasource for ORegAnno\
    \ (a generic genome position tsv)\npython initializeDataSource.py --ds_type gp_tsv\
    \ --ds_file oreganno_trim.hg19.txt --name ORegAnno --version \"UCSC Track\" --dbDir\
    \ ~/oncotest oreganno --genome_build hg19 --index_columns hg19.oreganno.chrom,hg19.oreganno.chromStart,hg19.oreganno.chromEnd\n\
    # Create a MutSig Published Results datasource (a gene tsv) and put it into ~/oncotest/mutsig.\n\
    python initializeDataSource.py --ds_type gene_tsv --ds_file mutsig_results.import.20110905.txt\
    \ --name \"MutSig Published Results\" --version \"20110905\" --dbDir ~/oncotest\
    \ mutsig --genome_build hg19 --index_columns gene\n# Create a protein position\
    \ lookup datasource\ninitializeDatasource --ds_type gpp_tsv --ds_file uniprot_protein_seq_tsv.out\
    \ --name UniProt_AA --version 2011_09 --dbDir ~/oncotest uniprot_AA_annotations\
    \ --genome_build hg19 --index_columns gene,startAA,endAA\n# Create a datasource\
    \ using Exome Seq. Project (ESP) coverage data that is in tsv format\ninitializeDatasource\
    \ --ds_type indexed_tsv --ds_file ESP6500SI-V2.coverage.txt --name ESP --version\
    \ 6500SI-V2 --dbDir ~/oncotest_ESP6500SI-V2_coverage --genome_build hg19 --match_mode\
    \ avg --ds_foldername ESP6500SI-V2_coverage_avg --annotation_columns Chromosome,Position,TotalSamplesCovered,AvgSampleReadDepth,TotalEAsamplesCovered,AvgEAsampleReadDepth,TotalAAsamplesCovered,AvgAAsampleReadDepth,TotalChromosomesCovered,TotalEAchromosomesCovered,TotalAAchromosomesCovered\
    \ --index_columns Chromosome,Position,Position\n# Create a datasource using Exome\
    \ Seq. Project (ESP) data that is in variant call format (VCF)\ninitializeDatasource\
    \ --ds_type indexed_vcf --ds_file ESP6500SI-V2.vcf --name ESP --version 6500SI-V2\
    \ --dbDir ~/oncotest_ESP6500SI-V2 --genome_build hg19 --match_mode exact --ds_foldername\
    \ ~/ESP6500SI-V2_exact\n"
  synonyms:
  - --match_mode
  args: !ChoiceFlagArg
    choices: !!set
      exact:
      avg:
      overlap:
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: version of the datasource.  This should be the version of the data
    itself, such as '3.0' for Gaf 3.0
  synonyms:
  - --version
  args: !SimpleFlagArg
    name: VERSION
  optional: true
help_text: "usage: initializeDatasource [-h] --ds_type\n                         \
  \   {gp_tsv,gene_tsv,transcript_tsv,gpp_tsv,indexed_vcf,indexed_tsv,bigwig}\n  \
  \                          --ds_file DS_FILE --name NAME --version VERSION\n   \
  \                         --dbDir DBDIR --ds_foldername DS_FOLDERNAME\n        \
  \                    --genome_build {hg19}\n                            [--index_columns\
  \ INDEX_COLUMNS]\n                            [--annotation_columns ANNOTATION_COLUMNS]\n\
  \                            [--match_mode {overlap,exact,avg}]\n\n    This convenience\
  \ script creates datasources in the given directory for simple datasource types.\
  \ \n\n    For gencode and ensembl transcript providing datasources, please use initializeTranscriptDatasource.\n\
  \n    Output: Creates a datasource directory (with config file) in the given destination\
  \ database directory.\n        All columns in the given input data will be used\
  \ to create annotations with the format <name>_<column>\n        If aliases for\
  \ annotations are required, the config file generated by this script must be edited\
  \ manually.\n        \n    IMPORTANT NOTE:  If this script detects another directory\
  \ in dbDir with the same name as being created, this script will fail, not overwrite.\n\
  \    \n\noptional arguments:\n  -h, --help            show this help message and\
  \ exit\n  --ds_type {gp_tsv,gene_tsv,transcript_tsv,gpp_tsv,indexed_vcf,indexed_tsv,bigwig}\n\
  \                        datasource type.  Type of datasource to create.\n  --ds_file\
  \ DS_FILE     datasource filename.  Headers must be on the first line.  This is\
  \ the source file that contains annotation data.\n  --name NAME           datasource\
  \ name. Plain name for the datasource.  E.g. 'MutSig_Published_Results'\n  --version\
  \ VERSION     version of the datasource.  This should be the version of the data\
  \ itself, such as '3.0' for Gaf 3.0\n  --dbDir DBDIR         Main datasource directory\
  \ that contains other datasources.  I.e. the destination directory for the newly\
  \ created datasource.\n  --ds_foldername DS_FOLDERNAME\n                       \
  \ Name of the folder that should appear in dbDir\n  --genome_build {hg19}\n    \
  \                    Genome build.  For example, hg19.\n  --index_columns INDEX_COLUMNS\n\
  \                        Comma separated list of index columns.  MUST be the name\
  \ of the columns and each row must have unique values across all index columns.\n\
  \  --annotation_columns ANNOTATION_COLUMNS\n                        Comma separated\
  \ list of annotation columns. MUST be the subset of the columns.  This (optional)\
  \ parameter is specified for indexed_tsv only.\n  --match_mode {overlap,exact,avg}\n\
  \                        Mode to use when annotating.  This parameter ought to be\
  \ specified for indexed_tsv and indexed_vcf only [default: exact].\n\n   Detailed\
  \ parameter information:\n       \n   datasource type  -- \n       \"gene_tsv\"\
  \ -- gene indexed file.  gene must be a Hugo Symbol.\n           TSVs must:\n  \
  \             1) have a single column for the Hugo Symbol\n               2) have\
  \ column names on the first line.  \n                   TODO: Support prefix comment\
  \ lines starting with '#'\n       \n       \"gp_tsv\" -- tsv file referenced by\
  \ genome position.\n           TSVs must:\n               1) have the column names\
  \ on the first line.  \n                   TODO: Support prefix comment lines starting\
  \ with '#'\n               2) have three distinct columns for chromosome, start\
  \ position, and end position.  Note that the names of these columns are specified\
  \ in the \n                   genomic position columns (see the command line example\
  \ below)\n               3) tsv --> tab separated values, so the file must be a\
  \ table of tab-separated values with the same number of values on every row.\n\n\
  \       \"gpp_tsv\" -- tsv file referenced by gene and protein position.\n     \
  \      TSVs must:\n               1) have the column names on the first line.\n\
  \                   TODO: Support prefix comment lines starting with '#'\n     \
  \          2) have three distinct columns for gene, start AA position, and end AA\
  \ position.  Note that the names of these columns are specified in the\n       \
  \            gene protein position columns (see the command line example below)\n\
  \               3) tsv --> tab separated values, so the file must be a table of\
  \ tab-separated values with the same number of values on every row.\n\n       \"\
  transcript_tsv\" -- tsv file referenced by transcript_id\n            TSV has the\
  \ same requirements as gene_tsv, except that the single column must be for transcript_id.\n\
  \             Note:  This is inherently coupled with the transcript providing datasource\
  \ used.\n\n       \"indexed_tsv\" -- tsv file referenced by chromosome, start position\
  \ and end position\n           TSVs must:\n               1) have the column names\
  \ on the first line.\n                   TODO: Support prefix comment lines starting\
  \ with '#'\n               2) have three distinct columns for chromosome, start\
  \ position, and end position.  Note that the names of these columns are specified\
  \ in the\n                   chromosome, start and end positions columns (see the\
  \ command line example below)\n               3) tsv --> tab separated values, so\
  \ the file must be a table of tab-separated values with the same number of values\
  \ on every row.\n\n       \"indexed_vcf\" -- vcf or tabix indexed vcf file referenced\
  \ by chromosome and position.\n\n   datasource filename -- input data file.  In\
  \ the case of tabix_gp_tsv, it would be the source tsv file.\n   name -- arbitrary\
  \ name for the datasource.  This will be the folder moved into the the destination\
  \ db dir.  Must be unique from other datasources.  \n       This will be a prefix\
  \ on all annotations from this datasource.\n       E.g. CancerGeneCensus\n   version\
  \ -- version of the datasource.  This should be the version of the data itself,\
  \ such as '3.0' for Gaf 3.0\n   destination database directory -- an Oncotator database\
  \ directory.\n   destination datasource directory -- directory name that this datasource\
  \ should have.  E.g. cancer_gene_census\n   genome_build -- The genome build.  E.g.\
  \ hg19        \n   index columns -- the columns that are indexed.\n       For gene_tsv,\
  \ this would be a single column name for the Hugo_Symbol, e.g. \"Symbol\"\n    \
  \   For gpp_tsv, this MUST be a triple specifying gene, AA start, and AA end.  For\
  \ a single amino acid, start should equal end.\n       For indexed_tsv, this MUST\
  \ be either a triple, specifying chromosome, start and end, or a quintuple, sepcifying\
  \ chromosome, start, end, reference and alternate.\n   match mode -- The type of\
  \ annotation mode for indels when annotating with indexed tsvs and vcfs. Select\
  \ either exact, overlap or avg.\n       For exact, annotations are only added when\
  \ the database record is an exact match for the input indel.\n       For overlap,\
  \ annotations from all the database records that span the length of the indel are\
  \ added. The annotated values are pipe delimited.\n       For average, annotations\
  \ from all the database records that span the length of the indel are averaged.\
  \ In cases where the annotation is not of type float or int, average switches to\
  \ overlap mode.\n   annotation columns -- comma separated list of column names that\
  \ are a subset of columns (used for indexed_tsv, only)\n\n   Example usages:\n \
  \  # Create the abridged cancer gene census datasource as a generic tsv, using the\
  \ Symbol column as the gene column \n   python initializeDataSource.py --ds_type\
  \ gene_tsv --ds_file CancerGeneCensus_Table_1_full_2012-03-15_trim.txt --name CGC\
  \ --version full_2012_03_15 --dbDir ~/oncotest --ds_foldername cgc --genome_build\
  \ hg19 --index_columns Symbol\n\n   # Create a datasource for ORegAnno (a generic\
  \ genome position tsv)\n   python initializeDataSource.py --ds_type gp_tsv --ds_file\
  \ oreganno_trim.hg19.txt --name ORegAnno --version \"UCSC Track\" --dbDir ~/oncotest\
  \ oreganno --genome_build hg19 --index_columns hg19.oreganno.chrom,hg19.oreganno.chromStart,hg19.oreganno.chromEnd\n\
  \   \n   # Create a MutSig Published Results datasource (a gene tsv) and put it\
  \ into ~/oncotest/mutsig.  \n   python initializeDataSource.py --ds_type gene_tsv\
  \ --ds_file mutsig_results.import.20110905.txt --name \"MutSig Published Results\"\
  \ --version \"20110905\" --dbDir ~/oncotest mutsig --genome_build hg19 --index_columns\
  \ gene\n\n   # Create a protein position lookup datasource\n   initializeDatasource\
  \ --ds_type gpp_tsv --ds_file uniprot_protein_seq_tsv.out --name UniProt_AA --version\
  \ 2011_09 --dbDir ~/oncotest uniprot_AA_annotations --genome_build hg19 --index_columns\
  \ gene,startAA,endAA\n\n   # Create a datasource using Exome Seq. Project (ESP)\
  \ coverage data that is in tsv format\n   initializeDatasource --ds_type indexed_tsv\
  \ --ds_file ESP6500SI-V2.coverage.txt --name ESP --version 6500SI-V2 --dbDir ~/oncotest_ESP6500SI-V2_coverage\
  \ --genome_build hg19 --match_mode avg --ds_foldername ESP6500SI-V2_coverage_avg\
  \ --annotation_columns Chromosome,Position,TotalSamplesCovered,AvgSampleReadDepth,TotalEAsamplesCovered,AvgEAsampleReadDepth,TotalAAsamplesCovered,AvgAAsampleReadDepth,TotalChromosomesCovered,TotalEAchromosomesCovered,TotalAAchromosomesCovered\
  \ --index_columns Chromosome,Position,Position\n\n   # Create a datasource using\
  \ Exome Seq. Project (ESP) data that is in variant call format (VCF)\n   initializeDatasource\
  \ --ds_type indexed_vcf --ds_file ESP6500SI-V2.vcf --name ESP --version 6500SI-V2\
  \ --dbDir ~/oncotest_ESP6500SI-V2 --genome_build hg19 --match_mode exact --ds_foldername\
  \ ~/ESP6500SI-V2_exact\n\n    \n"
generated_using:
- --help
