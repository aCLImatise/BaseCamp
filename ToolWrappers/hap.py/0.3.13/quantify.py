from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Quantify_V0_1_0 = CommandToolBuilder(tool="quantify", base_command=["quantify"], inputs=[ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--input-file", doc=InputDocumentation(doc="The input file")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output-file ] arg   The output file name (TSV Format).")), ToolInput(tag="in_arg_annotated_file", input_type=File(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --output-vcf ] arg    Annotated VCF file (with bed annotations).")), ToolInput(tag="in_output_summary", input_type=String(optional=True), prefix="--output-summary", doc=InputDocumentation(doc="Output a summary table with TP / FP / FN / UNK\ncounts, precision, recall, etc.")), ToolInput(tag="in_output_filter_rocs", input_type=String(optional=True), prefix="--output-filter-rocs", doc=InputDocumentation(doc="Output ROC levels for filters.")), ToolInput(tag="in_roc_filter", input_type=String(optional=True), prefix="--roc-filter", doc=InputDocumentation(doc="Ignore certain filters when creating a ROC.")), ToolInput(tag="in_roc_delta", input_type=String(optional=True), prefix="--roc-delta", doc=InputDocumentation(doc="Minium spacing of levels on ROC QQ trace.")), ToolInput(tag="in_qq", input_type=String(optional=True), prefix="--qq", doc=InputDocumentation(doc="Field to use for QQ (ROC quantity). Can be QUAL /\nGQ / ... / any INFO field name.")), ToolInput(tag="in_qq_header", input_type=String(optional=True), prefix="--qq-header", doc=InputDocumentation(doc="Field header to use for QQ in output tables (ROC\nquantity). Defaults to QQ.")), ToolInput(tag="in_arg_reference_fasta", input_type=File(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg     The reference fasta file (needed only for VCF\noutput).")), ToolInput(tag="in_arg_start_location", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --location ] arg      Start location.")), ToolInput(tag="in_arg_region_bed", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --regions ] arg       Region bed file. You can attach a label by\nprefixing with a colon, e.g. -R\nFP2:false-positives-type2.bed")), ToolInput(tag="in_roc_regions", input_type=Int(optional=True), prefix="--roc-regions", doc=InputDocumentation(doc="Regions to compute ROCs in. By default, only the\n'*' region (total unstratified counts) will\nproduce ROC counts. For example, --roc-regions '*'\n--roc-regions FP2 also produces a ROC in the FP2\nregions.")), ToolInput(tag="in_type", input_type=Int(optional=True), prefix="--type", doc=InputDocumentation(doc="Quantification method to use. Current choices are\nxcmp or ga4gh.")), ToolInput(tag="in_arg_bed_file", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --only ] arg          Bed file of locations (equivalent to -R in\nbcftools)")), ToolInput(tag="in_limit_records", input_type=String(optional=True), prefix="--limit-records", doc=InputDocumentation(doc="Maximum umber of records to process")), ToolInput(tag="in_message_every", input_type=String(optional=True), prefix="--message-every", doc=InputDocumentation(doc="Print a message every N records.")), ToolInput(tag="in_arg_apply_filtering", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --apply-filters ] arg Apply filtering in VCF.")), ToolInput(tag="in_count_hom_ref", input_type=String(optional=True), prefix="--count-homref", doc=InputDocumentation(doc="Count homref locations.")), ToolInput(tag="in_output_vtc", input_type=String(optional=True), prefix="--output-vtc", doc=InputDocumentation(doc="Output variant types counted (debugging).")), ToolInput(tag="in_clean_info", input_type=Int(optional=True), prefix="--clean-info", doc=InputDocumentation(doc="Set to zero to preserve INFO fields (default is 1)")), ToolInput(tag="in_output_rocs", input_type=Int(optional=True), prefix="--output-rocs", doc=InputDocumentation(doc="Output ROCs with full set of levels of QQ values\n(default is 1, disable for more concise output)")), ToolInput(tag="in_fix_chr_regions", input_type=String(optional=True), prefix="--fix-chr-regions", doc=InputDocumentation(doc="Add chr prefix to regions if necessary (default is\noff).")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use.")), ToolInput(tag="in_block_size", input_type=Int(optional=True), prefix="--blocksize", doc=InputDocumentation(doc="Number of variants per block."))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output-file ] arg   The output file name (TSV Format).")), ToolOutput(tag="out_arg_annotated_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_annotated_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output-vcf ] arg    Annotated VCF file (with bed annotations).")), ToolOutput(tag="out_arg_reference_fasta", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_reference_fasta", type_hint=File()), doc=OutputDocumentation(doc="[ --reference ] arg     The reference fasta file (needed only for VCF\noutput)."))], container="quay.io/biocontainers/hap.py:0.3.13--py27h5c5a3ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Quantify_V0_1_0().translate("wdl")

