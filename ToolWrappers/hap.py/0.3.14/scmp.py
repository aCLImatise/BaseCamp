from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Scmp_V0_1_0 = CommandToolBuilder(tool="scmp", base_command=["scmp"], inputs=[ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--input-file", doc=InputDocumentation(doc="Input VCF file. Must have exactly two\nsamples, the first sample will be used\nas truth, the second one as query. This\ncan be obtained using bcftools:\nbcftools merge truth.vcf.gz\nquery.vcf.gz --force-samples")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output-file ] arg              The output file name (VCF / BCF /\nVCF.gz).")), ToolInput(tag="in_arg_reference_fasta", input_type=File(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg                The reference fasta file (needed only\nfor VCF output).")), ToolInput(tag="in_arg_start_location", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --location ] arg                 Start location.")), ToolInput(tag="in_qq_field", input_type=String(optional=True), prefix="--qq-field", doc=InputDocumentation(doc="QQ field name -- this can be QUAL, an\nINFO or FORMAT field name")), ToolInput(tag="in_arg_bed_file", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --only ] arg                     Bed file of locations (equivalent to -R\nin bcftools)")), ToolInput(tag="in_limit_records", input_type=String(optional=True), prefix="--limit-records", doc=InputDocumentation(doc="Maximum umber of records to process")), ToolInput(tag="in_message_every", input_type=String(optional=True), prefix="--message-every", doc=InputDocumentation(doc="Print a message every N records.")), ToolInput(tag="in_arg_apply_filtering", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --apply-filters ] arg            Apply filtering in VCF.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use.")), ToolInput(tag="in_block_size", input_type=Int(optional=True), prefix="--blocksize", doc=InputDocumentation(doc="Number of variants per block.")), ToolInput(tag="in_min_var_distance", input_type=Int(optional=True), prefix="--min-var-distance", doc=InputDocumentation(doc="Minimum distance between variants\nallowed to end up in separate blocks")), ToolInput(tag="in_arg_allelehow_compare", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="[ --comparison-mode ] arg (=allele)\nHow to compare variants: allele\n(default) / distance / enumerate")), ToolInput(tag="in_distance_max_dist", input_type=Int(optional=True), prefix="--distance-maxdist", doc=InputDocumentation(doc="(=50)          For distance comparison, this is the\nmaximum distance between variants s.t.\nthey get matched.")), ToolInput(tag="in_enumerate_max_enum", input_type=Int(optional=True), prefix="--enumerate-maxenum", doc=InputDocumentation(doc="(=65536)      For haplotype enumeration comparison,\nthis is the number of possibilities to\nenumerate before giving up\n"))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output-file ] arg              The output file name (VCF / BCF /\nVCF.gz).")), ToolOutput(tag="out_arg_reference_fasta", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_reference_fasta", type_hint=File()), doc=OutputDocumentation(doc="[ --reference ] arg                The reference fasta file (needed only\nfor VCF output)."))], container="quay.io/biocontainers/hap.py:0.3.14--py27h5c5a3ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Scmp_V0_1_0().translate("wdl")

