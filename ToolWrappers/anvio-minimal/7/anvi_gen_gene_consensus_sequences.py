from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Anvi_Gen_Gene_Consensus_Sequences_V0_1_0 = CommandToolBuilder(tool="anvi_gen_gene_consensus_sequences", base_command=["anvi-gen-gene-consensus-sequences"], inputs=[ToolInput(tag="in_compress_samples", input_type=Boolean(optional=True), prefix="--compress-samples", doc=InputDocumentation(doc="Normally all samples with variation will have their\nown consensus sequence. If this flag is provided, the\ncoverages from each sample of interest will be summed\nand only a single consenus sequence for each\ngene/contig will be output. (default: False)")), ToolInput(tag="in_profile_db", input_type=String(optional=True), prefix="--profile-db", doc=InputDocumentation(doc="Anvi'o profile database (default: None)")), ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs-database' (default: None)")), ToolInput(tag="in_gene_caller_ids", input_type=String(optional=True), prefix="--gene-caller-ids", doc=InputDocumentation(doc="Gene caller ids. Multiple of them can be declared\nseparated by a delimiter (the default is a comma). In\nanvi-gen-variability-profile, if you declare nothing\nyou will get all genes matching your other filtering\ncriteria. In other programs, you may get everything,\nnothing, or an error. It really depends on the\nsituation. Fortunately, mistakes are cheap, so it's\nworth a try. (default: None)")), ToolInput(tag="in_genes_of_interest", input_type=File(optional=True), prefix="--genes-of-interest", doc=InputDocumentation(doc="A file with anvi'o gene caller IDs. There should be\nonly one column in the file, and each line should\ncorrespond to a unique gene caller id (without a\ncolumn header). (default: None)")), ToolInput(tag="in_samples_of_interest", input_type=File(optional=True), prefix="--samples-of-interest", doc=InputDocumentation(doc="A file with samples names. There should be only one\ncolumn in the file, and each line should correspond to\na unique sample name (without a column header).\n(default: None)")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="The output file name. The boring default is\n'genes.fa'. You can change the output file format to a\nTAB-delimited file using teh flag `--tab-delimited`,\nin which case please do not forget to change the file\nname, too.")), ToolInput(tag="in_tab_delimited", input_type=File(optional=True), prefix="--tab-delimited", doc=InputDocumentation(doc="Use the TAB-delimited format for the output file.\n(default: False)")), ToolInput(tag="in_engine", input_type=String(optional=True), prefix="--engine", doc=InputDocumentation(doc="Variability engine. The default is 'NT'.")), ToolInput(tag="in_contigs_mode", input_type=Boolean(optional=True), prefix="--contigs-mode", doc=InputDocumentation(doc="Use this flag to output consensus sequences of\ncontigs, instead of the default, which is genes\n(default: False)")), ToolInput(tag="in_quince_mode", input_type=Boolean(optional=True), prefix="--quince-mode", doc=InputDocumentation(doc="Use this flag to output consensus sequences for cases\neven where there is no variability (default: False)")), ToolInput(tag="in_genes_fast_a", input_type=String(), position=0, doc=InputDocumentation(doc="üç∫ More on `anvi-gen-gene-consensus-sequences`:"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="The output file name. The boring default is\n'genes.fa'. You can change the output file format to a\nTAB-delimited file using teh flag `--tab-delimited`,\nin which case please do not forget to change the file\nname, too.")), ToolOutput(tag="out_tab_delimited", output_type=File(optional=True), selector=InputSelector(input_to_select="in_tab_delimited", type_hint=File()), doc=OutputDocumentation(doc="Use the TAB-delimited format for the output file.\n(default: False)"))], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Gen_Gene_Consensus_Sequences_V0_1_0().translate("wdl")

