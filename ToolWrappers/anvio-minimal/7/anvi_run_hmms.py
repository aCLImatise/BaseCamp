from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean

Anvi_Run_Hmms_V0_1_0 = CommandToolBuilder(tool="anvi_run_hmms", base_command=["anvi-run-hmms"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs-database' (default: None)")), ToolInput(tag="in_profile_name_", input_type=Int(optional=True), prefix="-I", doc=InputDocumentation(doc="PROFILE NAME, --installed-hmm-profile HMM PROFILE NAME\nWhen you run this program without any parameter, it\nruns all 0 HMM profiles installed on your system. If\nyou want only a specific one to run, you can select it\nby using this parameter. These are the currently\navailable ones: . (default: None)")), ToolInput(tag="in_also_scan_trnas", input_type=Boolean(optional=True), prefix="--also-scan-trnas", doc=InputDocumentation(doc="Also scan tRNAs while you're at it. (default: False)")), ToolInput(tag="in_hmmer_program", input_type=Int(optional=True), prefix="--hmmer-program", doc=InputDocumentation(doc="Which of the HMMER programs to use to run HMMs\n(hmmscan or hmmsearch). By default anvi'o will use\nhmmscan for typical HMM operations like those in anvi-\nrun-hmms (as these tend to scan a very large number of\ngenes against a relatively small number of HMMs), but\nif you are using this program to scan a very large\nnumber of HMMs, hmmsearch might be a better choice for\nperformance. For this reason, hmmsearch is the default\nin operations like anvi-run-pfams and anvi-run-kegg-\nkofams. See this article for a discussion on the\nperformance of these two programs:\nhttps://cryptogenomicon.org/2011/05/27/hmmscan-vs-\nhmmsearch-speed-the-numerology/ (default: None)")), ToolInput(tag="in_just_do_it", input_type=Boolean(optional=True), prefix="--just-do-it", doc=InputDocumentation(doc="Don't bother me with questions or warnings, just do\nit. (default: False)")), ToolInput(tag="in_h", input_type=String(optional=True), prefix="-H", doc=InputDocumentation(doc="")), ToolInput(tag="in_stop_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-H HMM PROFILE PATH, --hmm-profile-dir HMM PROFILE PATH\nYou can use this parameter you can specify a directory\npath that contain an HMM profile. This way you can run\nHMM profiles that are not included in anvi'o. See the\nonline to find out about the specifics of this\ndirectory structure . (default: None)")), ToolInput(tag="in_goes_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-T NUM_THREADS, --num-threads NUM_THREADS\nMaximum number of threads to use for multithreading\nwhenever possible. Very conservatively, the default is\n1. It is a good idea to not exceed the number of CPUs\n/ cores on your system. Plus, please be careful with\nthis option if you are running your commands on a SGE\n--if you are clusterizing your runs, and asking for\nmultiple threads to use, you may deplete your\nresources very fast. (default: 1)")), ToolInput(tag="in_hmm_hits", input_type=String(), position=0, doc=InputDocumentation(doc="üç∫ More on `anvi-run-hmms`:"))], outputs=[], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Run_Hmms_V0_1_0().translate("wdl")

