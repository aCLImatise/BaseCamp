from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File, Int

Anvi_Estimate_Metabolism_V0_1_0 = CommandToolBuilder(tool="anvi_estimate_metabolism", base_command=["anvi-estimate-metabolism"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs-database' (default: None)")), ToolInput(tag="in_meta_genome_mode", input_type=Boolean(optional=True), prefix="--metagenome-mode", doc=InputDocumentation(doc="Treat a given contigs database as a metagenome rather\nthan treating it as a single genome. (default: False)")), ToolInput(tag="in_kegg_data_dir", input_type=File(optional=True), prefix="--kegg-data-dir", doc=InputDocumentation(doc="The directory path for your KEGG setup, which will\ninclude things like KOfam profiles and KEGG MODULE\ndata. Anvi'o will try to use the default path if you\ndo not specify anything. (default: None)")), ToolInput(tag="in_collection_name", input_type=String(optional=True), prefix="--collection-name", doc=InputDocumentation(doc="Collection name. (default: None)")), ToolInput(tag="in_bin_id", input_type=String(optional=True), prefix="--bin-id", doc=InputDocumentation(doc="Bin name you are interested in. (default: None)")), ToolInput(tag="in_bin_ids_file", input_type=File(optional=True), prefix="--bin-ids-file", doc=InputDocumentation(doc="Text file for bins (each line should be a unique bin\nid). (default: None)")), ToolInput(tag="in_external_genomes", input_type=File(optional=True), prefix="--external-genomes", doc=InputDocumentation(doc="A two-column TAB-delimited flat text file that lists\nanvi'o contigs databases. The first item in the header\nline should read 'name', and the second should read\n'contigs_db_path'. Each line in the file should\ndescribe a single entry, where the first column is the\nname of the genome (or MAG), and the second column is\nthe anvi'o contigs database generated for this genome.\n(default: None)")), ToolInput(tag="in_internal_genomes", input_type=File(optional=True), prefix="--internal-genomes", doc=InputDocumentation(doc="A five-column TAB-delimited flat text file. The header\nline must contain these columns: 'name', 'bin_id',\n'collection_id', 'profile_db_path', 'contigs_db_path'.\nEach line should list a single entry, where 'name' can\nbe any name to describe the anvi'o bin identified as\n'bin_id' that is stored in a collection. (default:\nNone)")), ToolInput(tag="in_meta_genomes", input_type=File(optional=True), prefix="--metagenomes", doc=InputDocumentation(doc="A two-column TAB-delimited flat text file. The header\nline must contain these columns: 'name',\n'contigs_db_path', and 'profile_db_path'. Each line\nshould list a single entry, where 'name' can be any\nname to describe the metagenome stored in the anvi'o\ncontigs database. In this context, the anvi'o profiles\nassociated with contigs database must be SINGLE\nPROFILES, as in generated by the program `anvi-\nprofile` and not `anvi-merge`. (default: None)")), ToolInput(tag="in_module_completion_threshold", input_type=Int(optional=True), prefix="--module-completion-threshold", doc=InputDocumentation(doc="This threshold defines the point at which we consider\na KEGG module to be 'complete' or 'present' in a given\ngenome or bin. It is the fraction of steps that must\nbe complete in in order for the entire module to be\nmarked complete. The default is 0.75.")), ToolInput(tag="in_output_file_prefix", input_type=File(optional=True), prefix="--output-file-prefix", doc=InputDocumentation(doc="A prefix to be used while naming the output files (no\nfile type extensions please; just a prefix). (default:\nNone)")), ToolInput(tag="in_kegg_output_modes", input_type=File(optional=True), prefix="--kegg-output-modes", doc=InputDocumentation(doc="Use this flag to indicate what information you want in\nthe kegg metabolism output files, by providing a\ncomma-separated list of output modes (each 'mode' you\nprovide will result in a different output file, all\nwith the same prefix). The default output modes are\n'kofam_hits' and 'complete_modules'. To see a list of\navailable output modes, run this script with the flag\n--list-available-modes. (default: None)")), ToolInput(tag="in_list_available_modes", input_type=Boolean(optional=True), prefix="--list-available-modes", doc=InputDocumentation(doc="Use this flag to see the available output modes and\ntheir descriptions. (default: False)")), ToolInput(tag="in_custom_output_headers", input_type=String(optional=True), prefix="--custom-output-headers", doc=InputDocumentation(doc="For use with the 'custom' output mode. Provide a\ncomma-separated list of headers to include in the\noutput matrix. To see a list of available headers, run\nthis script with the flag --list-available-output-\nheaders. (default: None)")), ToolInput(tag="in_list_available_output_headers", input_type=Boolean(optional=True), prefix="--list-available-output-headers", doc=InputDocumentation(doc="Use this flag to see the available output headers.\n(default: False)")), ToolInput(tag="in_matrix_format", input_type=Boolean(optional=True), prefix="--matrix-format", doc=InputDocumentation(doc="If you want to generate the output in several sparse\nmatrices instead of one file, use this flag. In each\nmatrix, contigs DBs will be arranged in columns and\nKEGG modules in rows. This output option is especially\nappropriate for input option #3. (default: False)")), ToolInput(tag="in_include_metadata", input_type=Boolean(optional=True), prefix="--include-metadata", doc=InputDocumentation(doc="When asking for --matrix-format, you can use this flag\nto make sure the output matrix files include columns\nwith metadata for each KEGG Module or KO (like the\nmodule name and category for example) before the\nsample columns. (default: False)")), ToolInput(tag="in_include_zeros", input_type=Boolean(optional=True), prefix="--include-zeros", doc=InputDocumentation(doc="If you use this flag, long-format output files will\ninclude modules with 0 percent completeness score.\n(default: False)")), ToolInput(tag="in_only_complete", input_type=Boolean(optional=True), prefix="--only-complete", doc=InputDocumentation(doc="Choose this flag if you want only modules over the\nmodule completeness threshold to be included in any\noutput files. (default: False)")), ToolInput(tag="in_get_raw_data_as_json", input_type=File(optional=True), prefix="--get-raw-data-as-json", doc=InputDocumentation(doc="If you want the raw metabolism estimation data\ndictionary in JSON-format, provide a filename prefix\nto this argument.The program will then output a file\nwith the .json extension containing this data.\n(default: None)")), ToolInput(tag="in_store_json_without_estimation", input_type=Boolean(optional=True), prefix="--store-json-without-estimation", doc=InputDocumentation(doc="This flag is used to control what is stored in the\nJSON-formatted metabolism data dictionary. When this\nflag is provided alongside the --get-raw-data-as-json\nflag, the JSON file will be created without running\nmetabolism estimation, and that file will consequently\ninclude only information about KOfam hits and gene\ncalls. The idea is that you can then modify this file\nas you like and re-run this program using the flag\n--estimate-from-json. (default: False)")), ToolInput(tag="in_estimate_from_json", input_type=File(optional=True), prefix="--estimate-from-json", doc=InputDocumentation(doc="If you have a JSON file containing KOfam hits and gene\ncall information from your contigs database (such as a\nfile produced using the --get-raw-data-as-json flag),\nyou can provide that file to this flag and KEGG\nmetabolism estimates will be computed from the\ninformation within instead of from a contigs database.\n(default: None)")), ToolInput(tag="in_respectively_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-p PROFILE_DB, --profile-db PROFILE_DB\nAnvi'o profile database (default: None)")), ToolInput(tag="in_kegg_metabolism", input_type=String(), position=0, doc=InputDocumentation(doc="üç∫ More on `anvi-estimate-metabolism`:"))], outputs=[ToolOutput(tag="out_output_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_prefix", type_hint=File()), doc=OutputDocumentation(doc="A prefix to be used while naming the output files (no\nfile type extensions please; just a prefix). (default:\nNone)")), ToolOutput(tag="out_kegg_output_modes", output_type=File(optional=True), selector=InputSelector(input_to_select="in_kegg_output_modes", type_hint=File()), doc=OutputDocumentation(doc="Use this flag to indicate what information you want in\nthe kegg metabolism output files, by providing a\ncomma-separated list of output modes (each 'mode' you\nprovide will result in a different output file, all\nwith the same prefix). The default output modes are\n'kofam_hits' and 'complete_modules'. To see a list of\navailable output modes, run this script with the flag\n--list-available-modes. (default: None)")), ToolOutput(tag="out_get_raw_data_as_json", output_type=File(optional=True), selector=InputSelector(input_to_select="in_get_raw_data_as_json", type_hint=File()), doc=OutputDocumentation(doc="If you want the raw metabolism estimation data\ndictionary in JSON-format, provide a filename prefix\nto this argument.The program will then output a file\nwith the .json extension containing this data.\n(default: None)"))], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Estimate_Metabolism_V0_1_0().translate("wdl")

