from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean

Anvi_Analyze_Synteny_V0_1_0 = CommandToolBuilder(tool="anvi_analyze_synteny", base_command=["anvi-analyze-synteny"], inputs=[ToolInput(tag="in_genomes_storage", input_type=File(optional=True), prefix="--genomes-storage", doc=InputDocumentation(doc="Anvi'o genomes storage file (default: None)")), ToolInput(tag="in_n_gram_window_range", input_type=Int(optional=True), prefix="--ngram-window-range", doc=InputDocumentation(doc="The range of window sizes of Ngrams to analyze for\nsynteny patterns.Please format the window-range as x:y\n(e.g. Window sizes 2 to 4 would be denoted as: 2:4)\n(default: 2:3)")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File path to store results. (default: None)")), ToolInput(tag="in_annotation_source", input_type=String(optional=True), prefix="--annotation-source", doc=InputDocumentation(doc="NAME\nGet functional annotations for a specific annotation\nsource. You can use the flag '--list-annotation-\nsources' to learn about what sources are available.\n(default: None)")), ToolInput(tag="in_pan_db", input_type=String(optional=True), prefix="--pan-db", doc=InputDocumentation(doc="Anvi'o pan database (default: None)")), ToolInput(tag="in_n_gram_source", input_type=String(optional=True), prefix="--ngram-source", doc=InputDocumentation(doc="If two annotation sources are provided, please choose\none annotation source that will be used to calcuate\nNgrams (e.g. gene_clusters, COG_FUNCTION) (default:\nNone)")), ToolInput(tag="in_list_annotation_sources", input_type=Boolean(optional=True), prefix="--list-annotation-sources", doc=InputDocumentation(doc="List available functional annotation sources.\n(default: False)")), ToolInput(tag="in_analyze_unknown_functions", input_type=Boolean(optional=True), prefix="--analyze-unknown-functions", doc=InputDocumentation(doc="Provide this flag if you want anvi-analyze-synteny to\nreport Ngrams that contain gene calls that have no\nannotation. (default: False)")), ToolInput(tag="in_genome_names", input_type=File(optional=True), prefix="--genome-names", doc=InputDocumentation(doc="Genome names to 'focus'. You can use this parameter to\nlimit the genomes included in your analysis. You can\nprovide these names as a comma-separated list of\nnames, or you can put them in a file, where you have a\nsingle genome name in each line, and provide the file\npath. (default: None)")), ToolInput(tag="in_first_functional_hit_only", input_type=Boolean(optional=True), prefix="--first-functional-hit-only", doc=InputDocumentation(doc="Use this flag if you want to use on the first\nfunctional annotation when making ngrams and assigning\nannotations. In some cases, anvio reports more than\none annotation when there are multiple good hits to\nthe gene. When this happens, all annotations will be\nreported in order of alignment score and delimited by\n'!!!' e.g. 'COG123!!!COG456!!!COG789'. This flag will\nreport 'COG123!!!COG456!!!COG789' as 'COG123'.\n(default: False)")), ToolInput(tag="in_n_grams", input_type=String(), position=0, doc=InputDocumentation(doc="üç∫ More on `anvi-analyze-synteny`:"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store results. (default: None)"))], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Analyze_Synteny_V0_1_0().translate("wdl")

