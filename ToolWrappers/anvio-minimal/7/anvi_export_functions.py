from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Anvi_Export_Functions_V0_1_0 = CommandToolBuilder(tool="anvi_export_functions", base_command=["anvi-export-functions"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs-database' (default: None)")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File path to store results. (default: None)")), ToolInput(tag="in_annotation_sources", input_type=Int(optional=True), prefix="--annotation-sources", doc=InputDocumentation(doc="NAME[S]\nGet functional annotations for a specific list of\nannotation sources. You can specify one or more\nsources by separating them from each other with a\ncomma character (i.e., '--annotation-sources\nsource_1,source_2,source_3'). The default behavior is\nto return everything (default: None)")), ToolInput(tag="in_list_annotation_sources", input_type=Boolean(optional=True), prefix="--list-annotation-sources", doc=InputDocumentation(doc="List available functional annotation sources.\n(default: False)")), ToolInput(tag="in_functions_txt", input_type=String(), position=0, doc=InputDocumentation(doc="üç∫ More on `anvi-export-functions`:"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store results. (default: None)"))], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Export_Functions_V0_1_0().translate("wdl")

