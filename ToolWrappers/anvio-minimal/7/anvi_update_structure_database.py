from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Directory, Boolean, Float, Int

Anvi_Update_Structure_Database_V0_1_0 = CommandToolBuilder(tool="anvi_update_structure_database", base_command=["anvi-update-structure-database"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs-database' (default: None)")), ToolInput(tag="in_structure_db", input_type=String(optional=True), prefix="--structure-db", doc=InputDocumentation(doc="Anvi'o structure database. (default: None)")), ToolInput(tag="in_genes_of_interest", input_type=File(optional=True), prefix="--genes-of-interest", doc=InputDocumentation(doc="A file with anvi'o gene caller IDs. There should be\nonly one column in the file, and each line should\ncorrespond to a unique gene caller id (without a\ncolumn header). (default: None)")), ToolInput(tag="in_gene_caller_ids", input_type=String(optional=True), prefix="--gene-caller-ids", doc=InputDocumentation(doc="Gene caller ids. Multiple of them can be declared\nseparated by a delimiter (the default is a comma). In\nanvi-gen-variability-profile, if you declare nothing\nyou will get all genes matching your other filtering\ncriteria. In other programs, you may get everything,\nnothing, or an error. It really depends on the\nsituation. Fortunately, mistakes are cheap, so it's\nworth a try. (default: None)")), ToolInput(tag="in_dump_dir", input_type=Directory(optional=True), prefix="--dump-dir", doc=InputDocumentation(doc="Modeling and annotating structures requires a lot of\nmoving parts, each which have their own outputs. The\noutput of this program is a structure database\ncontaining the pertinent results of this computation,\nhowever a lot of stuff doesn't make the cut. By\nproviding a directory for this parameter you will get,\nin addition to the structure database, a directory\ncontaining the raw output for everything. (default:\nNone)")), ToolInput(tag="in_list_modeller_params", input_type=Boolean(optional=True), prefix="--list-modeller-params", doc=InputDocumentation(doc="Since you are updating an existing DB, modeller params\nare set in place. You can have this program list them\nby providing this flag (default: False)")), ToolInput(tag="in_rerun_genes", input_type=Boolean(optional=True), prefix="--rerun-genes", doc=InputDocumentation(doc="Supply if you would like to rerun structural modelling\nfor your genes of interest if they are already present\nin your DB (default: False)")), ToolInput(tag="in_modeller_executable", input_type=Float(optional=True), prefix="--modeller-executable", doc=InputDocumentation(doc="The MODELLER program to use. For example, `mod9.19`.\nAnvi'o will try and find it if not provided. (default:\nNone)")), ToolInput(tag="in_num_threads", input_type=Int(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="Maximum number of threads to use for multithreading\nwhenever possible. Very conservatively, the default is\n1. It is a good idea to not exceed the number of CPUs\n/ cores on your system. Plus, please be careful with\nthis option if you are running your commands on a SGE\n--if you are clusterizing your runs, and asking for\nmultiple threads to use, you may deplete your\nresources very fast. (default: 1)")), ToolInput(tag="in_write_buffer_size_per_thread", input_type=Int(optional=True), prefix="--write-buffer-size-per-thread", doc=InputDocumentation(doc="How many items should be kept in memory before they\nare written do the disk. The default is 25 per thread.\nSo a single-threaded job would have a write buffer\nsize of 25, whereas a job with 4 threads would have a\nwrite buffer size of 4*25. The larger the buffer size,\nthe less frequent the program will access to the disk,\nyet the more memory will be consumed since the\nprocessed items will be cleared off the memory only\nafter they are written to the disk. The default buffer\nsize will likely work for most cases. Please keep an\neye on the memory usage output to make sure the memory\nuse never exceeds the size of the physical memory. If\n--num-threads is 1, this parameter is ignored because\nthe DB is written to after each gene"))], outputs=[ToolOutput(tag="out_dump_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_dump_dir", type_hint=File()), doc=OutputDocumentation(doc="Modeling and annotating structures requires a lot of\nmoving parts, each which have their own outputs. The\noutput of this program is a structure database\ncontaining the pertinent results of this computation,\nhowever a lot of stuff doesn't make the cut. By\nproviding a directory for this parameter you will get,\nin addition to the structure database, a directory\ncontaining the raw output for everything. (default:\nNone)"))], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Update_Structure_Database_V0_1_0().translate("wdl")

