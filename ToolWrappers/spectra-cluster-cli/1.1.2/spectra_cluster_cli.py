from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String

Spectra_Cluster_Cli_V0_1_0 = CommandToolBuilder(tool="spectra_cluster_cli", base_command=["spectra-cluster-cli"], inputs=[ToolInput(tag="in_add_scores", input_type=File(optional=True), prefix="-add_scores", doc=InputDocumentation(doc="if set, the similarity\nscores of each spectrum\nto the cluster's\nconsensus spectrum\nisadded to the output\nfile.")), ToolInput(tag="in_binary_directory", input_type=File(optional=True), prefix="-binary_directory", doc=InputDocumentation(doc="path to the directory to\n(temporarily) store the\nbinary files. By default\na temporary directory is\nbeing created")), ToolInput(tag="in_fast_mode", input_type=Boolean(optional=True), prefix="-fast_mode", doc=InputDocumentation(doc="if this option is set the\n'fast mode' is enabled.\nIn this mode, the radical\npeak filtering used for\nthe comparison function\nis already applied during\nspectrum conversion.\nThereby, the clustering\nand consensus spectrum\nquality is slightly\ndecreased but speed\nincreases 2-3 fold.")), ToolInput(tag="in_filter", input_type=Int(optional=True), prefix="-filter", doc=InputDocumentation(doc="adds a filter to be\napplied to the input\nspectrum. Available\nvalues are\n['immonium_ions',\n'mz_150', 'mz_200']")), ToolInput(tag="in_fragment_tolerance", input_type=Boolean(optional=True), prefix="-fragment_tolerance", doc=InputDocumentation(doc="fragment ion tolerance in\nm/z to use for fragment\npeak matching")), ToolInput(tag="in_keep_binary_files", input_type=Boolean(optional=True), prefix="-keep_binary_files", doc=InputDocumentation(doc="if this options is set,\nthe binary files are not\ndeleted after clustering.")), ToolInput(tag="in_major_peak_jobs", input_type=Int(optional=True), prefix="-major_peak_jobs", doc=InputDocumentation(doc="number of threads to use\nfor major peak\nclustering.")), ToolInput(tag="in_only_identified", input_type=Boolean(optional=True), prefix="-only_identified", doc=InputDocumentation(doc="if set, only identified\nspectra are considered\nfor clustering.")), ToolInput(tag="in_only_unidentified", input_type=Boolean(optional=True), prefix="-only_unidentified", doc=InputDocumentation(doc="if set, only unidentified\nspectra are considered\nfor clustering.")), ToolInput(tag="in_output_path", input_type=File(optional=True), prefix="-output_path", doc=InputDocumentation(doc="path to the outputfile.\nOutputfile must not\nexist.")), ToolInput(tag="in_precursor_tolerance", input_type=Int(optional=True), prefix="-precursor_tolerance", doc=InputDocumentation(doc="precursor tolerance\n(clustering window size)\nin m/z (default) or ppm\nused during matching. The\nunit can be changed by\nsetting the\n-precursor_tolerance_unit\nparameter")), ToolInput(tag="in_precursor_tolerance_unit", input_type=String(optional=True), prefix="-precursor_tolerance_unit", doc=InputDocumentation(doc="sets the precursor\ntolerance unit. Allowed\nvalues are 'mz' and\n'ppm'. Default is 'mz'.")), ToolInput(tag="in_remove_reporters", input_type=String(optional=True), prefix="-remove_reporters", doc=InputDocumentation(doc="remove reporter ion peaks\nin quantitation\nexperiments. Possible\nQUANTIATION TYPES are\n'ITRAQ', 'TMT' and 'ALL'\n('TMT' and 'ITRAQ' peaks\nare removed.")), ToolInput(tag="in_reuse_binary_files", input_type=Boolean(optional=True), prefix="-reuse_binary_files", doc=InputDocumentation(doc="if this option is set,\nthe binary files found in\nthe binary file directory\nwill be used for\nclustering.")), ToolInput(tag="in_rounds", input_type=Int(optional=True), prefix="-rounds", doc=InputDocumentation(doc="number of clustering\nrounds to use.")), ToolInput(tag="in_threshold_end", input_type=String(optional=True), prefix="-threshold_end", doc=InputDocumentation(doc="(lowest) final clustering")), ToolInput(tag="in_x_convert_cgf", input_type=Boolean(optional=True), prefix="-x_convert_cgf", doc=InputDocumentation(doc="(Advanced option) It this\noption is set, the input\nfile in CGF format will\nbe converted to the\n.clustering file. No\nother processing will be\nperformed.")), ToolInput(tag="in_x_disable_mgf_comments", input_type=Boolean(optional=True), prefix="-x_disable_mgf_comments", doc=InputDocumentation(doc="(Advanced option) If set,\nMGF comment strings are\nNOT supported. This will\nincrease performance but\nonly works for MGF files\nthat do not contain any\ncomments")), ToolInput(tag="in_x_filter_peaks_mz", input_type=Boolean(optional=True), prefix="-x_filter_peaks_mz", doc=InputDocumentation(doc="(Advanced option) If this\noption is set, the top 10\npeaks per 100 m/z are\nretained instead of the\ntop N peaks overall.")), ToolInput(tag="in_x_learn_cdf", input_type=File(optional=True), prefix="-x_learn_cdf", doc=InputDocumentation(doc="(Experimental option)\nLearn the used cumulative\ndistribution function\ndirectly from the\nprocessed data. This is\nonly recommended for\nhigh-resolution data. The\nresult will be written to\nthe defined file.")), ToolInput(tag="in_x_load_cdf", input_type=File(optional=True), prefix="-x_load_cdf", doc=InputDocumentation(doc="(Experimental option)\nLoads the cumulative\ndistribution function to\nuse from the specified\nfile. These files can be\ncreated using the\nx_learn_cdf parameter")), ToolInput(tag="in_x_merge_binary_files", input_type=Boolean(optional=True), prefix="-x_merge_binary_files", doc=InputDocumentation(doc="(Advanced option) If this\noption is set, the input\nfiles should be binary\nresult files from the\nclustering process. In\nthis mode, the\nspectra-cluster-cli only\nmerges the binary files\nand creates the final\noutput file.")), ToolInput(tag="in_x_min_adapt_comparisons", input_type=Int(optional=True), prefix="-x_min_adapt_comparisons", doc=InputDocumentation(doc="(Experimental option)\nUses an adaptive function\nfor the minimum\ncomparisons together with\na minimum number always\nto return.")), ToolInput(tag="in_x_min_comparisons", input_type=Int(optional=True), prefix="-x_min_comparisons", doc=InputDocumentation(doc="(Experimental option)\nSets the minimum number\nof comparisons used to\ncalculate the probability\nthat incorrect spectra\nare clustered.")), ToolInput(tag="in_x_min_consensus_peaks_to_keep", input_type=Int(optional=True), prefix="-x_min_consensus_peaks_to_keep", doc=InputDocumentation(doc="(Advanced option) Sets\nthe minimum number of\npeaks to keep in a\nconsensus spectrum. If\nthe consensus spectrum\ncontains fewer than these\npeaks, the noise\nfiltering which retains N\npeaks per M m/z is not\nused but all peaks are\nkept")), ToolInput(tag="in_x_n_pre_filtered_peaks", input_type=Int(optional=True), prefix="-x_n_prefiltered_peaks", doc=InputDocumentation(doc="(Experimental option) Set\nthe number of highest\npeaks that are kept per\nspectrum during loading.\n")), ToolInput(tag="in_spectra", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_cluster", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_add_scores", output_type=File(optional=True), selector=InputSelector(input_to_select="in_add_scores", type_hint=File()), doc=OutputDocumentation(doc="if set, the similarity\nscores of each spectrum\nto the cluster's\nconsensus spectrum\nisadded to the output\nfile.")), ToolOutput(tag="out_x_learn_cdf", output_type=File(optional=True), selector=InputSelector(input_to_select="in_x_learn_cdf", type_hint=File()), doc=OutputDocumentation(doc="(Experimental option)\nLearn the used cumulative\ndistribution function\ndirectly from the\nprocessed data. This is\nonly recommended for\nhigh-resolution data. The\nresult will be written to\nthe defined file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Spectra_Cluster_Cli_V0_1_0().translate("wdl", allow_empty_container=True)

