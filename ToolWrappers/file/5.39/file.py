from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

File_V0_1_0 = CommandToolBuilder(tool="file", base_command=["file"], inputs=[ToolInput(tag="in_magic_file", input_type=File(optional=True), prefix="--magic-file", doc=InputDocumentation(doc="use LIST as a colon-separated list of magic\nnumber files")), ToolInput(tag="in_uncompress", input_type=Boolean(optional=True), prefix="--uncompress", doc=InputDocumentation(doc="try to look inside compressed files")), ToolInput(tag="in_uncompress_no_report", input_type=Boolean(optional=True), prefix="--uncompress-noreport", doc=InputDocumentation(doc="only print the contents of compressed files")), ToolInput(tag="in_brief", input_type=Boolean(optional=True), prefix="--brief", doc=InputDocumentation(doc="do not prepend filenames to output lines")), ToolInput(tag="in_checking_print_out", input_type=Boolean(optional=True), prefix="--checking-printout", doc=InputDocumentation(doc="print the parsed form of the magic file, use in\nconjunction with -m to debug a new magic file\nbefore installing it")), ToolInput(tag="in_exclude", input_type=File(optional=True), prefix="--exclude", doc=InputDocumentation(doc="exclude TEST from the list of test to be\nperformed for file. Valid tests are:\napptype, ascii, cdf, compress, csv, elf,\nencoding, soft, tar, json, text,\ntokens")), ToolInput(tag="in_exclude_quiet", input_type=String(optional=True), prefix="--exclude-quiet", doc=InputDocumentation(doc="like exclude, but ignore unknown tests")), ToolInput(tag="in_files_from", input_type=File(optional=True), prefix="--files-from", doc=InputDocumentation(doc="read the filenames to be examined from FILE")), ToolInput(tag="in_separator", input_type=String(optional=True), prefix="--separator", doc=InputDocumentation(doc="use string as separator instead of `:'")), ToolInput(tag="in_mime", input_type=Boolean(optional=True), prefix="--mime", doc=InputDocumentation(doc="output MIME type strings (--mime-type and")), ToolInput(tag="in_apple", input_type=Boolean(optional=True), prefix="--apple", doc=InputDocumentation(doc="output the Apple CREATOR/TYPE")), ToolInput(tag="in_extension", input_type=Boolean(optional=True), prefix="--extension", doc=InputDocumentation(doc="output a slash-separated list of extensions")), ToolInput(tag="in_mime_type", input_type=Boolean(optional=True), prefix="--mime-type", doc=InputDocumentation(doc="output the MIME type")), ToolInput(tag="in_mime_encoding", input_type=Boolean(optional=True), prefix="--mime-encoding", doc=InputDocumentation(doc="output the MIME encoding")), ToolInput(tag="in_keep_going", input_type=Boolean(optional=True), prefix="--keep-going", doc=InputDocumentation(doc="don't stop at the first match")), ToolInput(tag="in_list", input_type=Boolean(optional=True), prefix="--list", doc=InputDocumentation(doc="list magic strength")), ToolInput(tag="in_dereference", input_type=Boolean(optional=True), prefix="--dereference", doc=InputDocumentation(doc="follow symlinks")), ToolInput(tag="in_no_buffer", input_type=Boolean(optional=True), prefix="--no-buffer", doc=InputDocumentation(doc="do not buffer output")), ToolInput(tag="in_no_pad", input_type=Boolean(optional=True), prefix="--no-pad", doc=InputDocumentation(doc="do not pad output")), ToolInput(tag="in_print_zero", input_type=Boolean(optional=True), prefix="--print0", doc=InputDocumentation(doc="terminate filenames with ASCII NUL")), ToolInput(tag="in_preserve_date", input_type=Boolean(optional=True), prefix="--preserve-date", doc=InputDocumentation(doc="preserve access times on files")), ToolInput(tag="in_parameter", input_type=Boolean(optional=True), prefix="--parameter", doc=InputDocumentation(doc="set file engine parameter limits\nbytes 1048576 max bytes to look inside file")), ToolInput(tag="in_raw", input_type=Boolean(optional=True), prefix="--raw", doc=InputDocumentation(doc="don't translate unprintable chars to \ooo")), ToolInput(tag="in_special_files", input_type=Boolean(optional=True), prefix="--special-files", doc=InputDocumentation(doc="treat special (block/char devices) files as\nordinary ones")), ToolInput(tag="in_no_sandbox", input_type=Boolean(optional=True), prefix="--no-sandbox", doc=InputDocumentation(doc="disable system call sandboxing")), ToolInput(tag="in_compile", input_type=Boolean(optional=True), prefix="--compile", doc=InputDocumentation(doc="compile file specified by -m")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="print debugging messages")), ToolInput(tag="in_elf_notes", input_type=String(), position=0, doc=InputDocumentation(doc="256 max ELF notes processed")), ToolInput(tag="in_elf_ph_num", input_type=String(), position=1, doc=InputDocumentation(doc="2048 max ELF prog sections processed")), ToolInput(tag="in_elf_sh_num", input_type=String(), position=2, doc=InputDocumentation(doc="32768 max ELF sections processed")), ToolInput(tag="in_in_dir", input_type=String(), position=3, doc=InputDocumentation(doc="50 recursion limit for indirection")), ToolInput(tag="in_name", input_type=String(), position=4, doc=InputDocumentation(doc="50 use limit for name/use magic")), ToolInput(tag="in_regex", input_type=String(), position=5, doc=InputDocumentation(doc="8192 length limit for REGEX searches"))], outputs=[], container="quay.io/biocontainers/file:5.39", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    File_V0_1_0().translate("wdl")

