from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Int

Bcftools_Convert_V0_1_0 = CommandToolBuilder(tool="bcftools_convert", base_command=["bcftools", "convert"], inputs=[ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="exclude sites for which the expression is true")), ToolInput(tag="in_include", input_type=String(optional=True), prefix="--include", doc=InputDocumentation(doc="select sites for which the expression is true")), ToolInput(tag="in_regions", input_type=String(optional=True), prefix="--regions", doc=InputDocumentation(doc="restrict to comma-separated list of regions")), ToolInput(tag="in_regions_file", input_type=File(optional=True), prefix="--regions-file", doc=InputDocumentation(doc="restrict to regions listed in a file")), ToolInput(tag="in_samples", input_type=String(optional=True), prefix="--samples", doc=InputDocumentation(doc="list of samples to include")), ToolInput(tag="in_samples_file", input_type=File(optional=True), prefix="--samples-file", doc=InputDocumentation(doc="file of samples to include")), ToolInput(tag="in_targets", input_type=String(optional=True), prefix="--targets", doc=InputDocumentation(doc="similar to -r but streams rather than index-jumps")), ToolInput(tag="in_targets_file", input_type=File(optional=True), prefix="--targets-file", doc=InputDocumentation(doc="similar to -R but streams rather than index-jumps")), ToolInput(tag="in_no_version", input_type=Boolean(optional=True), prefix="--no-version", doc=InputDocumentation(doc="do not append version and command line to the header")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output file name [stdout]")), ToolInput(tag="in_output_type", input_type=String(optional=True), prefix="--output-type", doc=InputDocumentation(doc="b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF [v]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="use multithreading with <int> worker threads [0]")), ToolInput(tag="in_gen_sample_two_vcf", input_type=Boolean(optional=True), prefix="--gensample2vcf", doc=InputDocumentation(doc="<...>   <prefix>|<gen-file>,<sample-file>")), ToolInput(tag="in_gen_sample", input_type=Boolean(optional=True), prefix="--gensample", doc=InputDocumentation(doc="<...>       <prefix>|<gen-file>,<sample-file>")), ToolInput(tag="in_tag", input_type=File(optional=True), prefix="--tag", doc=InputDocumentation(doc="tag to take values for .gen file: GT,PL,GL,GP [GT]")), ToolInput(tag="in_chrom", input_type=Boolean(optional=True), prefix="--chrom", doc=InputDocumentation(doc="output chromosome in first column instead of CHROM:POS_REF_ALT")), ToolInput(tag="in_sex", input_type=File(optional=True), prefix="--sex", doc=InputDocumentation(doc="output sex column in the sample-file, input format is: Sample\t[MF]")), ToolInput(tag="in_vcf_ids", input_type=Boolean(optional=True), prefix="--vcf-ids", doc=InputDocumentation(doc="output VCF IDs in second column instead of CHROM:POS_REF_ALT")), ToolInput(tag="in_gvc_f_two_vcf", input_type=Boolean(optional=True), prefix="--gvcf2vcf", doc=InputDocumentation(doc="expand gVCF reference blocks")), ToolInput(tag="in_fast_a_ref", input_type=File(optional=True), prefix="--fasta-ref", doc=InputDocumentation(doc="reference sequence in fasta format")), ToolInput(tag="in_hap_sample_two_vcf", input_type=Boolean(optional=True), prefix="--hapsample2vcf", doc=InputDocumentation(doc="<...>   <prefix>|<hap-file>,<sample-file>")), ToolInput(tag="in_hap_sample", input_type=Boolean(optional=True), prefix="--hapsample", doc=InputDocumentation(doc="<...>       <prefix>|<hap-file>,<sample-file>")), ToolInput(tag="in_haploid_two_diploid", input_type=Boolean(optional=True), prefix="--haploid2diploid", doc=InputDocumentation(doc="convert haploid genotypes to diploid homozygotes")), ToolInput(tag="in_hap_legend_sample_two_vcf", input_type=Boolean(optional=True), prefix="--haplegendsample2vcf", doc=InputDocumentation(doc="<...>  <prefix>|<hap-file>,<legend-file>,<sample-file>")), ToolInput(tag="in_tsv_two_vcf", input_type=File(optional=True), prefix="--tsv2vcf", doc=InputDocumentation(doc="columns of the input tsv file [ID,CHROM,POS,AA]")), ToolInput(tag="in_input_file", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output file name [stdout]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bcftools_Convert_V0_1_0().translate("wdl", allow_empty_container=True)

