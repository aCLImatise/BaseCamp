from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean, File

Bcftools_Filter_V0_1_0 = CommandToolBuilder(tool="bcftools_filter", base_command=["bcftools", "filter"], inputs=[ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="exclude sites for which the expression is true (see man page for details)")), ToolInput(tag="in_snp_gap", input_type=Int(optional=True), prefix="--SnpGap", doc=InputDocumentation(doc="[:type]     filter SNPs within <int> base pairs of an indel (the default) or any combination of indel,mnp,bnd,other,overlap")), ToolInput(tag="in_in_del_gap", input_type=Int(optional=True), prefix="--IndelGap", doc=InputDocumentation(doc="filter clusters of indels separated by <int> or fewer base pairs allowing only one to pass")), ToolInput(tag="in_include", input_type=String(optional=True), prefix="--include", doc=InputDocumentation(doc="include only sites for which the expression is true (see man page for details")), ToolInput(tag="in_mode", input_type=Boolean(optional=True), prefix="--mode", doc=InputDocumentation(doc="[+x]               '+': do not replace but add to existing FILTER; 'x': reset filters at sites which pass")), ToolInput(tag="in_no_version", input_type=Boolean(optional=True), prefix="--no-version", doc=InputDocumentation(doc="do not append version and command line to the header")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="write output to a file [standard output]")), ToolInput(tag="in_output_type", input_type=String(optional=True), prefix="--output-type", doc=InputDocumentation(doc="b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF [v]")), ToolInput(tag="in_regions", input_type=String(optional=True), prefix="--regions", doc=InputDocumentation(doc="restrict to comma-separated list of regions")), ToolInput(tag="in_regions_file", input_type=File(optional=True), prefix="--regions-file", doc=InputDocumentation(doc="restrict to regions listed in a file")), ToolInput(tag="in_soft_filter", input_type=String(optional=True), prefix="--soft-filter", doc=InputDocumentation(doc="annotate FILTER column with <string> or unique filter name ('Filter%d') made up by the program ('+')")), ToolInput(tag="in_set_gts", input_type=Boolean(optional=True), prefix="--set-GTs", doc=InputDocumentation(doc="<.|0>           set genotypes of failed samples to missing (.) or ref (0)")), ToolInput(tag="in_targets", input_type=String(optional=True), prefix="--targets", doc=InputDocumentation(doc="similar to -r but streams rather than index-jumps")), ToolInput(tag="in_targets_file", input_type=File(optional=True), prefix="--targets-file", doc=InputDocumentation(doc="similar to -R but streams rather than index-jumps")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="use multithreading with <int> worker threads [0]")), ToolInput(tag="in_in_dot_vcf_do_tgz", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="write output to a file [standard output]"))], container="quay.io/biocontainers/bcftools:1.11--h7c999a4_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bcftools_Filter_V0_1_0().translate("wdl")

