from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean, Directory

Illumina_Py_Illumina_Demux_V0_1_0 = CommandToolBuilder(tool="illumina.py_illumina_demux", base_command=["illumina.py", "illumina_demux"], inputs=[ToolInput(tag="in_out_metrics", input_type=File(optional=True), prefix="--outMetrics", doc=InputDocumentation(doc="Output ExtractIlluminaBarcodes metrics file. Default\nis to dump to a temp file.")), ToolInput(tag="in_common_barcodes", input_type=String(optional=True), prefix="--commonBarcodes", doc=InputDocumentation(doc="Write a TSV report of all barcode counts, in\ndescending order.")), ToolInput(tag="in_sample_sheet", input_type=File(optional=True), prefix="--sampleSheet", doc=InputDocumentation(doc="Override SampleSheet. Input tab or CSV file w/header\nand four named columns: barcode_name, library_name,\nbarcode_sequence_1, barcode_sequence_2. Default is to\nlook for a SampleSheet.csv in the inDir.")), ToolInput(tag="in_flow_cell", input_type=String(optional=True), prefix="--flowcell", doc=InputDocumentation(doc="Override flowcell ID (default: read from RunInfo.xml).")), ToolInput(tag="in_read_structure", input_type=String(optional=True), prefix="--read_structure", doc=InputDocumentation(doc="Override read structure (default: read from\nRunInfo.xml).")), ToolInput(tag="in_max_mismatches", input_type=Int(optional=True), prefix="--max_mismatches", doc=InputDocumentation(doc="Picard ExtractIlluminaBarcodes MAX_MISMATCHES\n(default: 0)")), ToolInput(tag="in_minimum_base_quality", input_type=Int(optional=True), prefix="--minimum_base_quality", doc=InputDocumentation(doc="Picard ExtractIlluminaBarcodes MINIMUM_BASE_QUALITY\n(default: 25)")), ToolInput(tag="in_min_mismatch_delta", input_type=Int(optional=True), prefix="--min_mismatch_delta", doc=InputDocumentation(doc="Picard ExtractIlluminaBarcodes MIN_MISMATCH_DELTA\n(default: None)")), ToolInput(tag="in_max_no_calls", input_type=Int(optional=True), prefix="--max_no_calls", doc=InputDocumentation(doc="Picard ExtractIlluminaBarcodes MAX_NO_CALLS (default:\nNone)")), ToolInput(tag="in_minimum_quality", input_type=String(optional=True), prefix="--minimum_quality", doc=InputDocumentation(doc="Picard ExtractIlluminaBarcodes MINIMUM_QUALITY\n(default: None)")), ToolInput(tag="in_compress_outputs", input_type=String(optional=True), prefix="--compress_outputs", doc=InputDocumentation(doc="Picard ExtractIlluminaBarcodes COMPRESS_OUTPUTS\n(default: None)")), ToolInput(tag="in_sequencing_center", input_type=String(optional=True), prefix="--sequencing_center", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam SEQUENCING_CENTER\n(default: None)")), ToolInput(tag="in_adapters_to_check", input_type=Boolean(optional=True), prefix="--adapters_to_check", doc=InputDocumentation(doc="[ADAPTERS_TO_CHECK [ADAPTERS_TO_CHECK ...]]\nPicard IlluminaBasecallsToSam ADAPTERS_TO_CHECK\n(default: ('PAIRED_END', 'NEXTERA_V1', 'NEXTERA_V2'))")), ToolInput(tag="in_platform", input_type=String(optional=True), prefix="--platform", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam PLATFORM (default: None)")), ToolInput(tag="in_max_reads_in_ram_per_tile", input_type=Int(optional=True), prefix="--max_reads_in_ram_per_tile", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam\nMAX_READS_IN_RAM_PER_TILE (default: 100000)")), ToolInput(tag="in_max_records_in_ram", input_type=Int(optional=True), prefix="--max_records_in_ram", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam MAX_RECORDS_IN_RAM\n(default: 100000)")), ToolInput(tag="in_num_processors", input_type=Int(optional=True), prefix="--num_processors", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam NUM_PROCESSORS (default:\n4)")), ToolInput(tag="in_apply_ea_mss_filter", input_type=String(optional=True), prefix="--apply_eamss_filter", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam APPLY_EAMSS_FILTER\n(default: None)")), ToolInput(tag="in_force_gc", input_type=String(optional=True), prefix="--force_gc", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam FORCE_GC (default:\nFalse)")), ToolInput(tag="in_first_tile", input_type=String(optional=True), prefix="--first_tile", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam FIRST_TILE (default:\nNone)")), ToolInput(tag="in_tile_limit", input_type=String(optional=True), prefix="--tile_limit", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam TILE_LIMIT (default:\nNone)")), ToolInput(tag="in_include_non_pf_reads", input_type=String(optional=True), prefix="--include_non_pf_reads", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam INCLUDE_NON_PF_READS\n(default: False)")), ToolInput(tag="in_run_start_date", input_type=String(optional=True), prefix="--run_start_date", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam RUN_START_DATE (default:\nNone)")), ToolInput(tag="in_read_group_id", input_type=String(optional=True), prefix="--read_group_id", doc=InputDocumentation(doc="Picard IlluminaBasecallsToSam READ_GROUP_ID (default:\nNone)")), ToolInput(tag="in_jvm_memory", input_type=Int(optional=True), prefix="--JVMmemory", doc=InputDocumentation(doc="JVM virtual memory size (default: 54g)")), ToolInput(tag="in_loglevel", input_type=String(optional=True), prefix="--loglevel", doc=InputDocumentation(doc="Verboseness of output. [default: DEBUG]")), ToolInput(tag="in_tmp_dir", input_type=Directory(optional=True), prefix="--tmp_dir", doc=InputDocumentation(doc="Base directory for temp files. [default: /tmp]")), ToolInput(tag="in_tmp_dir_keep", input_type=Boolean(optional=True), prefix="--tmp_dirKeep", doc=InputDocumentation(doc="Keep the tmp_dir if an exception occurs while running.\nDefault is to delete all temp files at the end, even\nif there's a failure.\n")), ToolInput(tag="in_in_dir", input_type=String(), position=0, doc=InputDocumentation(doc="Illumina BCL directory (or tar.gz of BCL directory).\nThis is the top-level run directory.")), ToolInput(tag="in_lane", input_type=String(), position=1, doc=InputDocumentation(doc="Lane number.")), ToolInput(tag="in_outdir", input_type=String(), position=2, doc=InputDocumentation(doc="Output directory for BAM files."))], outputs=[ToolOutput(tag="out_out_metrics", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_metrics", type_hint=File()), doc=OutputDocumentation(doc="Output ExtractIlluminaBarcodes metrics file. Default\nis to dump to a temp file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Illumina_Py_Illumina_Demux_V0_1_0().translate("wdl", allow_empty_container=True)

