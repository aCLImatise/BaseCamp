from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Array, Int, Directory, Boolean

Taxon_Filter_Py_Deplete_Human_V0_1_0 = CommandToolBuilder(tool="taxon_filter.py_deplete_human", base_command=["taxon_filter.py", "deplete_human"], inputs=[ToolInput(tag="in_tax_filt_bam", input_type=String(optional=True), prefix="--taxfiltBam", doc=InputDocumentation(doc="Output BAM: blastnBam run through taxonomic selection\nvia LASTAL.")), ToolInput(tag="in_bm_tagger_dbs", input_type=Array(t=String(), optional=True), prefix="--bmtaggerDbs", doc=InputDocumentation(doc="Reference databases (one or more) to deplete from\ninput. For each db, requires prior creation of\ndb.bitmask by bmtool, and db.srprism.idx,\ndb.srprism.map, etc. by srprism mkindex.")), ToolInput(tag="in_blast_dbs", input_type=Array(t=String(), optional=True), prefix="--blastDbs", doc=InputDocumentation(doc="One or more reference databases for blast to deplete\nfrom input.")), ToolInput(tag="in_last_db", input_type=String(optional=True), prefix="--lastDb", doc=InputDocumentation(doc="One reference database for last (required if")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="The number of threads to use in running blastn.")), ToolInput(tag="in_jvm_memory", input_type=Int(optional=True), prefix="--JVMmemory", doc=InputDocumentation(doc="JVM virtual memory size for Picard FilterSamReads\n(default: 4g)")), ToolInput(tag="in_loglevel", input_type=String(optional=True), prefix="--loglevel", doc=InputDocumentation(doc="Verboseness of output. [default: DEBUG]")), ToolInput(tag="in_tmp_dir", input_type=Directory(optional=True), prefix="--tmp_dir", doc=InputDocumentation(doc="Base directory for temp files. [default: /tmp]")), ToolInput(tag="in_tmp_dir_keep", input_type=Boolean(optional=True), prefix="--tmp_dirKeep", doc=InputDocumentation(doc="Keep the tmp_dir if an exception occurs while running.\nDefault is to delete all temp files at the end, even\nif there's a failure.\n")), ToolInput(tag="in_in_bam", input_type=String(), position=0, doc=InputDocumentation(doc="Input BAM file.")), ToolInput(tag="in_revert_bam", input_type=String(), position=1, doc=InputDocumentation(doc="Output BAM: read markup reverted with Picard.")), ToolInput(tag="in_bm_tagger_bam", input_type=String(), position=2, doc=InputDocumentation(doc="Output BAM: depleted of human reads with BMTagger.")), ToolInput(tag="in_rmd_up_bam", input_type=String(), position=3, doc=InputDocumentation(doc="Output BAM: bmtaggerBam run through M-Vicuna duplicate")), ToolInput(tag="in_removal_dot", input_type=String(), position=4, doc=InputDocumentation(doc="blastnBam             Output BAM: rmdupBam run through another depletion of"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Taxon_Filter_Py_Deplete_Human_V0_1_0().translate("wdl", allow_empty_container=True)

