from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int, File, Directory

Assembly_Py_Refine_Assembly_V0_1_0 = CommandToolBuilder(tool="assembly.py_refine_assembly", base_command=["assembly.py", "refine_assembly"], inputs=[ToolInput(tag="in_already_realigned_bam", input_type=String(optional=True), prefix="--already_realigned_bam", doc=InputDocumentation(doc="BAM with reads that are already aligned to inFasta.\nThis bypasses the alignment process by novoalign and\ninstead uses the given BAM to make an assembly. When\nset, outBam is ignored.")), ToolInput(tag="in_out_bam", input_type=String(optional=True), prefix="--outBam", doc=InputDocumentation(doc="Reads aligned to inFasta. Unaligned and duplicate\nreads have been removed. GATK indel realigned.")), ToolInput(tag="in_out_vcf", input_type=String(optional=True), prefix="--outVcf", doc=InputDocumentation(doc="GATK genotype calls for genome in inFasta coordinate")), ToolInput(tag="in_novo_params", input_type=String(optional=True), prefix="--novo_params", doc=InputDocumentation(doc="Alignment parameters for Novoalign.")), ToolInput(tag="in_chr_names", input_type=Boolean(optional=True), prefix="--chr_names", doc=InputDocumentation(doc="[CHR_NAMES [CHR_NAMES ...]]\nRename all output chromosomes (default: retain\noriginal chromosome names)")), ToolInput(tag="in_keep_all_reads", input_type=Boolean(optional=True), prefix="--keep_all_reads", doc=InputDocumentation(doc="Retain all reads in BAM file? Default is to remove\nunaligned and duplicate reads.")), ToolInput(tag="in_jvm_memory", input_type=Int(optional=True), prefix="--JVMmemory", doc=InputDocumentation(doc="JVM virtual memory size (default: 2g)")), ToolInput(tag="in_g_atk_path", input_type=File(optional=True), prefix="--GATK_PATH", doc=InputDocumentation(doc="A path containing the GATK jar file. This overrides\nthe GATK_ENV environment variable or the GATK conda\npackage. (default: None)")), ToolInput(tag="in_novo_align_license_path", input_type=File(optional=True), prefix="--NOVOALIGN_LICENSE_PATH", doc=InputDocumentation(doc="A path to the novoalign.lic file. This overrides the\nNOVOALIGN_LICENSE_PATH environment variable. (default:\nNone)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads (default: 1)")), ToolInput(tag="in_loglevel", input_type=String(optional=True), prefix="--loglevel", doc=InputDocumentation(doc="Verboseness of output. [default: DEBUG]")), ToolInput(tag="in_tmp_dir", input_type=Directory(optional=True), prefix="--tmp_dir", doc=InputDocumentation(doc="Base directory for temp files. [default: /tmp]")), ToolInput(tag="in_tmp_dir_keep", input_type=Boolean(optional=True), prefix="--tmp_dirKeep", doc=InputDocumentation(doc="Keep the tmp_dir if an exception occurs while running.\nDefault is to delete all temp files at the end, even\nif there's a failure.\n")), ToolInput(tag="in_in_fasta", input_type=String(), position=0, doc=InputDocumentation(doc="Input assembly, FASTA format, pre-indexed for Picard,\nSamtools, and Novoalign.")), ToolInput(tag="in_in_bam", input_type=String(), position=1, doc=InputDocumentation(doc="Input reads, unaligned BAM format.")), ToolInput(tag="in_out_fast_a", input_type=String(), position=2, doc=InputDocumentation(doc="Output refined assembly, FASTA format, indexed for\nPicard, Samtools, and Novoalign.")), ToolInput(tag="in_space_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--min_coverage MIN_COVERAGE")), ToolInput(tag="in_unambiguous_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--major_cutoff MAJOR_CUTOFF"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Assembly_Py_Refine_Assembly_V0_1_0().translate("wdl", allow_empty_container=True)

