from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Bamtools_2_4_1_Filter_V0_1_0 = CommandToolBuilder(tool="bamtools_2.4.1_filter", base_command=["bamtools-2.4.1", "filter"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="the input BAM file(s) [stdin]")), ToolInput(tag="in_list", input_type=File(optional=True), prefix="-list", doc=InputDocumentation(doc="the input BAM file list, one\nline per file")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="the output BAM file [stdout]")), ToolInput(tag="in_region", input_type=String(optional=True), prefix="-region", doc=InputDocumentation(doc="only read data from this\ngenomic region (see documentation for more\ndetails)")), ToolInput(tag="in_script", input_type=File(optional=True), prefix="-script", doc=InputDocumentation(doc="the filter script file (see\ndocumentation for more details)")), ToolInput(tag="in_force_compression", input_type=Boolean(optional=True), prefix="-forceCompression", doc=InputDocumentation(doc="if results are sent to stdout\n(like when piping to another tool),\ndefault behavior is to leave output\nuncompressed. Use this flag to override\nand force compression")), ToolInput(tag="in_alignment_flag", input_type=Int(optional=True), prefix="-alignmentFlag", doc=InputDocumentation(doc="keep reads with this *exact*\nalignment flag (for more detailed queries,\nsee below)")), ToolInput(tag="in_insert_size", input_type=Int(optional=True), prefix="-insertSize", doc=InputDocumentation(doc="keep reads with insert size\nthat matches pattern")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="-length", doc=InputDocumentation(doc="keep reads with length that\nmatches pattern")), ToolInput(tag="in_map_quality", input_type=Boolean(optional=True), prefix="-mapQuality", doc=InputDocumentation(doc="<[0-255]>             keep reads with map quality\nthat matches pattern")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="-name", doc=InputDocumentation(doc="keep reads with name that\nmatches pattern")), ToolInput(tag="in_query_bases", input_type=String(optional=True), prefix="-queryBases", doc=InputDocumentation(doc="keep reads with motif that\nmatches pattern")), ToolInput(tag="in_tag", input_type=Boolean(optional=True), prefix="-tag", doc=InputDocumentation(doc="<TAG:VALUE>                  keep reads with this\nkey=>value pair")), ToolInput(tag="in_is_duplicate", input_type=String(optional=True), prefix="-isDuplicate", doc=InputDocumentation(doc="keep only alignments that are\nmarked as duplicate? [true]")), ToolInput(tag="in_is_failed_qc", input_type=String(optional=True), prefix="-isFailedQC", doc=InputDocumentation(doc="keep only alignments that\nfailed QC? [true]")), ToolInput(tag="in_is_first_mate", input_type=String(optional=True), prefix="-isFirstMate", doc=InputDocumentation(doc="keep only alignments marked as\nfirst mate? [true]")), ToolInput(tag="in_is_mapped", input_type=String(optional=True), prefix="-isMapped", doc=InputDocumentation(doc="keep only alignments that were\nmapped? [true]")), ToolInput(tag="in_is_mate_mapped", input_type=String(optional=True), prefix="-isMateMapped", doc=InputDocumentation(doc="keep only alignments with\nmates that mapped [true]")), ToolInput(tag="in_is_mate_reverse_strand", input_type=String(optional=True), prefix="-isMateReverseStrand", doc=InputDocumentation(doc="keep only alignments with mate\non reverese strand? [true]")), ToolInput(tag="in_is_paired", input_type=String(optional=True), prefix="-isPaired", doc=InputDocumentation(doc="keep only alignments that were\nsequenced as paired? [true]")), ToolInput(tag="in_is_primary_alignment", input_type=String(optional=True), prefix="-isPrimaryAlignment", doc=InputDocumentation(doc="keep only alignments marked as\nprimary? [true]")), ToolInput(tag="in_is_proper_pair", input_type=String(optional=True), prefix="-isProperPair", doc=InputDocumentation(doc="keep only alignments that\npassed PE resolution? [true]")), ToolInput(tag="in_is_reverse_strand", input_type=String(optional=True), prefix="-isReverseStrand", doc=InputDocumentation(doc="keep only alignments on\nreverse strand? [true]")), ToolInput(tag="in_is_second_mate", input_type=String(optional=True), prefix="-isSecondMate", doc=InputDocumentation(doc="keep only alignments marked as\nsecond mate? [true]")), ToolInput(tag="in_is_singleton", input_type=String(optional=True), prefix="-isSingleton", doc=InputDocumentation(doc="keep only singletons [true]")), ToolInput(tag="in_bam_tools", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_filter", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="the output BAM file [stdout]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bamtools_2_4_1_Filter_V0_1_0().translate("wdl", allow_empty_container=True)

