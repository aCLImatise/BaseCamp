from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Bamtools_2_4_1_Resolve_V0_1_0 = CommandToolBuilder(tool="bamtools_2.4.1_resolve", base_command=["bamtools-2.4.1", "resolve"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="the input BAM file(s) [stdin]")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="the output BAM file [stdout]")), ToolInput(tag="in_stats", input_type=File(optional=True), prefix="-stats", doc=InputDocumentation(doc="input/output stats file,\ndepending on selected mode (see below).\nThis file is human-readable, storing\nfragment length data generated per read\ngroup, as well as the options used to\nconfigure the -makeStats mode")), ToolInput(tag="in_force_compression", input_type=Boolean(optional=True), prefix="-forceCompression", doc=InputDocumentation(doc="if results are sent to stdout\n(like when piping to another tool),\ndefault behavior is to leave output\nuncompressed.Use this flag to override and\nforce compression. This feature is\ndisabled in -makeStats mode.")), ToolInput(tag="in_make_stats", input_type=Boolean(optional=True), prefix="-makeStats", doc=InputDocumentation(doc="generates a fragment-length\nstats file from the input BAM. Data is\nwritten to file specified using the -stats\noption. MarkPairs Mode Settings are\nDISABLED.")), ToolInput(tag="in_mark_pairs", input_type=File(optional=True), prefix="-markPairs", doc=InputDocumentation(doc="generates an output BAM with\nalignments marked with proper-pair status.\nStats data is read from file specified\nusing the -stats option. MakeStats Mode\nSettings are DISABLED")), ToolInput(tag="in_two_pass", input_type=Boolean(optional=True), prefix="-twoPass", doc=InputDocumentation(doc="combines the -makeStats &")), ToolInput(tag="in_min_mq", input_type=String(optional=True), prefix="-minMQ", doc=InputDocumentation(doc="minimum map quality. Used in")), ToolInput(tag="in_ci", input_type=Int(optional=True), prefix="-ci", doc=InputDocumentation(doc="confidence interval. Set\nmin/max fragment lengths such that we\ncapture this fraction of pairs")), ToolInput(tag="in_umt", input_type=Int(optional=True), prefix="-umt", doc=InputDocumentation(doc="unused model threshold. The\nresolve tool considers 8 possible\norientation models for pairs. The top 2\nare selected for later use when actually\nmarking alignments. This value determines\nthe cutoff for marking a read group as\nambiguous. Meaning that if the ratio of\nthe number of alignments from bottom 6\nmodels to the top 2 is greater than this\nthreshold, then the read group is flagged\nas ambiguous. By default, NO alignments\nfrom ambiguous read groups will be marked\nas proper pairs. You may override this\nbehavior with the -force option in\n-markPairs mode")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="-force", doc=InputDocumentation(doc="forces all read groups to be\nmarked according to their top 2\n'orientation models'. When generating\nstats, the 2 (out of 8 possible) models\nwith the most observations are chosen as\nthe top models for each read group. If the\nremaining 6 models account for more than\nsome threshold ([default=10%], see -umt),\nthen the read group is marked as\nambiguous. The default behavior is that\nfor an ambiguous read group, NONE of its\nalignments are marked as proper-pairs. By\nsetting this option, a read group's\nambiguity flag will be ignored, and all of\nits alignments will be compared to the top\n2 models.")), ToolInput(tag="in_purposes_dot", input_type=String(), position=0, doc=InputDocumentation(doc="General Resolve Options (available in all modes):"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="the output BAM file [stdout]")), ToolOutput(tag="out_mark_pairs", output_type=File(optional=True), selector=InputSelector(input_to_select="in_mark_pairs", type_hint=File()), doc=OutputDocumentation(doc="generates an output BAM with\nalignments marked with proper-pair status.\nStats data is read from file specified\nusing the -stats option. MakeStats Mode\nSettings are DISABLED"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bamtools_2_4_1_Resolve_V0_1_0().translate("wdl", allow_empty_container=True)

