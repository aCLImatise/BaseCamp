from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Array, String, Boolean, Int

Methylpy_Add_Methylation_Level_V0_1_0 = CommandToolBuilder(tool="methylpy_add_methylation_level", base_command=["methylpy", "add-methylation-level"], inputs=[ToolInput(tag="in_input_tsv_file", input_type=File(optional=True), prefix="--input-tsv-file", doc=InputDocumentation(doc="A tab-separate file that specifies genomic intervals.\nThe file contains a header.First three columns are\nrequired to be chromosome, start and end, which are\n1-based cooridates. It may contain additional\ncolumn(s). (default: None)")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="Name of output file (default: None)")), ToolInput(tag="in_all_c_files", input_type=Array(t=String(), optional=True), prefix="--allc-files", doc=InputDocumentation(doc="List of allc files. (default: None)")), ToolInput(tag="in_samples", input_type=Array(t=String(), optional=True), prefix="--samples", doc=InputDocumentation(doc="List of space separated samples matching allc files.\nBy default sample names will be inferred from allc\nfilenames (default: None)")), ToolInput(tag="in_mc_type", input_type=Array(t=String(), optional=True), prefix="--mc-type", doc=InputDocumentation(doc="List of space separated mc nucleotide contexts for\nwhich you want to look for DMRs. These classifications\nmay use the wildcards H (indicating anything but a G)\nand N (indicating any nucleotide). (default: ['CGN'])")), ToolInput(tag="in_extra_info", input_type=Boolean(optional=True), prefix="--extra-info", doc=InputDocumentation(doc="Boolean to indicate whether to generate two output\nextra files with the total basecalls and covered sites\nin each of the regions. (default: False)")), ToolInput(tag="in_num_procs", input_type=Int(optional=True), prefix="--num-procs", doc=InputDocumentation(doc="Number of processors you wish to use to parallelize\nthis function (default: 1)")), ToolInput(tag="in_min_cov", input_type=Int(optional=True), prefix="--min-cov", doc=InputDocumentation(doc="Minimum coverage for a site to be included (default:\n0)")), ToolInput(tag="in_max_cov", input_type=Int(optional=True), prefix="--max-cov", doc=InputDocumentation(doc="Maximum coverage for a site to be included. By default\nthis cutoff is not applied. (default: None)")), ToolInput(tag="in_buffer_line_number", input_type=Int(optional=True), prefix="--buffer-line-number", doc=InputDocumentation(doc="size of buffer for reads to be written on hard drive.\n(default: 100000)")), ToolInput(tag="in_input_no_header", input_type=File(optional=True), prefix="--input-no-header", doc=InputDocumentation(doc="Indicating whether input tsv file contains a header.\nIf this is set to True, a header will be automatically\ngenerated in the output file. (default: False)\n"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="Name of output file (default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Methylpy_Add_Methylation_Level_V0_1_0().translate("wdl", allow_empty_container=True)

