from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String, Float

Ococo_V0_1_0 = CommandToolBuilder(tool="ococo", base_command=["ococo"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="input SAM/BAM file (- for standard input)")), ToolInput(tag="in_fast_a_ref", input_type=File(optional=True), prefix="--fasta-ref", doc=InputDocumentation(doc="initial FASTA reference (otherwise seq of N's is used)")), ToolInput(tag="in_stats_in", input_type=File(optional=True), prefix="--stats-in", doc=InputDocumentation(doc="input statistics")), ToolInput(tag="in_fast_a_cons", input_type=File(optional=True), prefix="--fasta-cons", doc=InputDocumentation(doc="FASTA file with consensus")), ToolInput(tag="in_stats_out", input_type=File(optional=True), prefix="--stats-out", doc=InputDocumentation(doc="output statistics")), ToolInput(tag="in_vcf_cons", input_type=File(optional=True), prefix="--vcf-cons", doc=InputDocumentation(doc="VCF file with updates of consensus (- for standard output)")), ToolInput(tag="in_pile_up", input_type=File(optional=True), prefix="--pileup", doc=InputDocumentation(doc="truncated pileup (- for standard output)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose mode (report every update of a counter)")), ToolInput(tag="in_counters", input_type=Int(optional=True), prefix="--counters", doc=InputDocumentation(doc="counter configuration: [ococo16]\n- ococo16 (3b/counter, 16b/position)\n- ococo32 (7b/counter, 32b/position)\n- ococo64 (15b/counter, 64b/position)")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="mode: [batch]\n- real-time (updates reported immediately)\n- batch (updates reported after end of algn stream)")), ToolInput(tag="in_strategy", input_type=String(optional=True), prefix="--strategy", doc=InputDocumentation(doc="strategy for updates: [majority]\n- majority (update to majority base)\n- stochastic (update to stochastically drawn base)\n- no-updates (no updates, only counters updated)")), ToolInput(tag="in_min_mq", input_type=Int(optional=True), prefix="--min-MQ", doc=InputDocumentation(doc="skip alignments with mapping quality smaller than INT [1]")), ToolInput(tag="in_min_bq", input_type=Int(optional=True), prefix="--min-BQ", doc=InputDocumentation(doc="skip bases with base quality smaller than INT [13]")), ToolInput(tag="in_ref_weight", input_type=Int(optional=True), prefix="--ref-weight", doc=InputDocumentation(doc="initial counter value for nucleotides from ref [0]")), ToolInput(tag="in_min_cov", input_type=Int(optional=True), prefix="--min-cov", doc=InputDocumentation(doc="minimum coverage required for update [2]")), ToolInput(tag="in_maj_th_res", input_type=Float(optional=True), prefix="--maj-thres", doc=InputDocumentation(doc="majority threshold [0.51]")), ToolInput(tag="in_other", input_type=String(optional=True), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_vcf_cons", output_type=File(optional=True), selector=InputSelector(input_to_select="in_vcf_cons", type_hint=File()), doc=OutputDocumentation(doc="VCF file with updates of consensus (- for standard output)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ococo_V0_1_0().translate("wdl", allow_empty_container=True)

