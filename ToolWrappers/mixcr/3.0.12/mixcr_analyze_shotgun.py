from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Mixcr_Analyze_Shotgun_V0_1_0 = CommandToolBuilder(tool="mixcr_analyze_shotgun", base_command=["mixcr", "analyze", "shotgun"], inputs=[ToolInput(tag="in_no_warnings", input_type=Boolean(optional=True), prefix="--no-warnings", doc=InputDocumentation(doc="Suppress all warning messages.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose warning messages.")), ToolInput(tag="in_force_overwrite", input_type=File(optional=True), prefix="--force-overwrite", doc=InputDocumentation(doc="Force overwrite of output file(s).")), ToolInput(tag="in_species", input_type=File(optional=True), prefix="--species", doc=InputDocumentation(doc="Species (organism), as specified in library file or taxon id.\nPossible values: hs, HomoSapiens, musmusculus, mmu, hsa, 9606, 10090 etc.")), ToolInput(tag="in_impute_germline_on_export", input_type=Boolean(optional=True), prefix="--impute-germline-on-export", doc=InputDocumentation(doc="Export germline segments")), ToolInput(tag="in_only_productive", input_type=Boolean(optional=True), prefix="--only-productive", doc=InputDocumentation(doc="Filter out-of-frame sequences and clonotypes with stop-codons in clonal\nsequence export")), ToolInput(tag="in_contig_assembly", input_type=Boolean(optional=True), prefix="--contig-assembly", doc=InputDocumentation(doc="Assemble longest possible sequences from input data. Useful for shotgun-like")), ToolInput(tag="in_no_export", input_type=Boolean(optional=True), prefix="--no-export", doc=InputDocumentation(doc="Do not export clonotypes to tab-delimited file.")), ToolInput(tag="in_report", input_type=File(optional=True), prefix="--report", doc=InputDocumentation(doc="Report file path")), ToolInput(tag="in_align", input_type=Int(optional=True), prefix="--align", doc=InputDocumentation(doc="Additional parameters for align step specified with double quotes (e.g\n--align '--limit 1000' --align '-OminSumScore=100' etc.")), ToolInput(tag="in_assemble_partial", input_type=Int(optional=True), prefix="--assemblePartial", doc=InputDocumentation(doc="Additional parameters for assemblePartial step specified with double quotes\n(e.g --assemblePartial '--overlappedOnly' --assemblePartial '-OkOffset=0'\netc.")), ToolInput(tag="in_extend", input_type=Int(optional=True), prefix="--extend", doc=InputDocumentation(doc="Additional parameters for extend step specified with double quotes (e.g\n--extend '--chains TRB' --extend '--quality 0' etc.")), ToolInput(tag="in_assemble", input_type=Int(optional=True), prefix="--assemble", doc=InputDocumentation(doc="Additional parameters for assemble step specified with double quotes (e.g\n--assemble '-OassemblingFeatures=[V5UTR+L1+L2+FR1,FR3+CDR3]' --assemble\n'-ObadQualityThreshold=0' etc.")), ToolInput(tag="in_assemble_contigs", input_type=String(optional=True), prefix="--assembleContigs", doc=InputDocumentation(doc="Additional parameters for assemble contigs step specified with double quotes")), ToolInput(tag="in_export", input_type=String(optional=True), prefix="--export", doc=InputDocumentation(doc="Additional parameters for exportClones step specified with double quotes (e.\ng --export '-p full' --export '-cloneId' etc.")), ToolInput(tag="in_assemble_partial_rounds", input_type=Int(optional=True), prefix="--assemble-partial-rounds", doc=InputDocumentation(doc="Number of rounds of assemblePartial")), ToolInput(tag="in_do_not_extend_alignments", input_type=Boolean(optional=True), prefix="--do-not-extend-alignments", doc=InputDocumentation(doc="Skip TCR alignments extension")), ToolInput(tag="in_receptor_type", input_type=String(optional=True), prefix="--receptor-type", doc=InputDocumentation(doc="Receptor type. Possible values: tcr, bcr, xcr, tra, trb, trd, trg, igh, igk,\nigl")), ToolInput(tag="in_starting_material", input_type=String(optional=True), prefix="--starting-material", doc=InputDocumentation(doc="Starting material. Possible values: rna, dna\n")), ToolInput(tag="in_data_dot", input_type=String(), position=0, doc=InputDocumentation(doc="NOTE: this will substantially increase analysis time."))], outputs=[ToolOutput(tag="out_force_overwrite", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force_overwrite", type_hint=File()), doc=OutputDocumentation(doc="Force overwrite of output file(s)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mixcr_Analyze_Shotgun_V0_1_0().translate("wdl", allow_empty_container=True)

