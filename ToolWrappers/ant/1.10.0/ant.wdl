version 1.0

task Ant {
  input {
    Boolean? no_config
    Boolean? use_jikes
    Boolean? exec_debug
    Boolean? project_help
    Boolean? version
    Boolean? diagnostics
    Boolean? quiet
    Boolean? silent
    Boolean? verbose
    Boolean? debug
    Boolean? emacs
    File? lib
    File? log_file
    Boolean? l
    String? logger
    String? listener
    Boolean? no_input
    File? buildfile
    Boolean? var_file
    Boolean? f
    Boolean? propertyvalue_use_value
    Boolean? keep_going
    File? property_file
    String? input_handler
    File? find
    Boolean? file_use_it
    Boolean? nice
    Boolean? no_user_lib
    Boolean? no_classpath
    Boolean? auto_proxy
    String? main
  }
  command <<<
    ant \
      ~{if (no_config) then "--noconfig" else ""} \
      ~{if (use_jikes) then "--usejikes" else ""} \
      ~{if (exec_debug) then "--execdebug" else ""} \
      ~{if (project_help) then "-projecthelp" else ""} \
      ~{if (version) then "-version" else ""} \
      ~{if (diagnostics) then "-diagnostics" else ""} \
      ~{if (quiet) then "-quiet" else ""} \
      ~{if (silent) then "-silent" else ""} \
      ~{if (verbose) then "-verbose" else ""} \
      ~{if (debug) then "-debug" else ""} \
      ~{if (emacs) then "-emacs" else ""} \
      ~{if defined(lib) then ("-lib " +  '"' + lib + '"') else ""} \
      ~{if defined(log_file) then ("-logfile " +  '"' + log_file + '"') else ""} \
      ~{if (l) then "-l" else ""} \
      ~{if defined(logger) then ("-logger " +  '"' + logger + '"') else ""} \
      ~{if defined(listener) then ("-listener " +  '"' + listener + '"') else ""} \
      ~{if (no_input) then "-noinput" else ""} \
      ~{if defined(buildfile) then ("-buildfile " +  '"' + buildfile + '"') else ""} \
      ~{if (var_file) then "-file" else ""} \
      ~{if (f) then "-f" else ""} \
      ~{if (propertyvalue_use_value) then "-D" else ""} \
      ~{if (keep_going) then "-keep-going" else ""} \
      ~{if defined(property_file) then ("-propertyfile " +  '"' + property_file + '"') else ""} \
      ~{if defined(input_handler) then ("-inputhandler " +  '"' + input_handler + '"') else ""} \
      ~{if defined(find) then ("-find " +  '"' + find + '"') else ""} \
      ~{if (file_use_it) then "-s" else ""} \
      ~{if (nice) then "-nice" else ""} \
      ~{if (no_user_lib) then "-nouserlib" else ""} \
      ~{if (no_classpath) then "-noclasspath" else ""} \
      ~{if (auto_proxy) then "-autoproxy" else ""} \
      ~{if defined(main) then ("-main " +  '"' + main + '"') else ""}
  >>>
  runtime {
    docker: "None"
  }
  parameter_meta {
    no_config: "suppress sourcing of /etc/ant.conf,\\n$HOME/.ant/ant.conf, and $HOME/.antrc\\nconfiguration files"
    use_jikes: "enable use of jikes by default, unless\\nset explicitly in configuration files"
    exec_debug: "print ant exec line generated by this\\nlaunch script"
    project_help: "print project help information and exit"
    version: "print the version information and exit"
    diagnostics: "print information that might be helpful to\\ndiagnose or report problems and exit"
    quiet: "be extra quiet"
    silent: "print nothing but task outputs and build failures"
    verbose: "be extra verbose"
    debug: "print debugging information"
    emacs: "produce logging information without adornments"
    lib: "specifies a path to search for jars and classes"
    log_file: "use given file for log"
    l: "<file>                ''"
    logger: "the class which is to perform logging"
    listener: "add an instance of class as a project listener"
    no_input: "do not allow interactive input"
    buildfile: "use given buildfile"
    var_file: "<file>              ''"
    f: "<file>              ''"
    propertyvalue_use_value: "<property>=<value>   use value for given property"
    keep_going: "execute all targets that do not depend\\non failed target(s)"
    property_file: "load all properties from file with -D\\nproperties taking precedence"
    input_handler: "the class which will handle input requests"
    find: "(s)earch for buildfile towards the root of"
    file_use_it: "<file>           the filesystem and use it"
    nice: "number          A niceness value for the main thread:                         1 (lowest) to 10 (highest); 5 is the default"
    no_user_lib: "Run ant without using the jar files from                         ${user.home}/.ant/lib"
    no_classpath: "Run ant without using CLASSPATH"
    auto_proxy: "Java1.5+: use the OS proxy settings"
    main: "override Ant's normal entry point"
  }
  output {
    File out_stdout = stdout()
  }
}