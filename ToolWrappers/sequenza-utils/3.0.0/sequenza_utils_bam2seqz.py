from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, Float, String, Array

Sequenza_Utils_Bam2Seqz_V0_1_0 = CommandToolBuilder(tool="sequenza_utils_bam2seqz", base_command=["sequenza-utils", "bam2seqz"], inputs=[ToolInput(tag="in_pile_up", input_type=Boolean(optional=True), prefix="--pileup", doc=InputDocumentation(doc="Use pileups as input files instead of BAMs.")), ToolInput(tag="in_normal", input_type=File(optional=True), prefix="--normal", doc=InputDocumentation(doc="Name of the BAM/pileup file from the reference/normal\nsample")), ToolInput(tag="in_tumor", input_type=File(optional=True), prefix="--tumor", doc=InputDocumentation(doc="Name of the BAM/pileup file from the tumor sample")), ToolInput(tag="in_gc", input_type=File(optional=True), prefix="-gc", doc=InputDocumentation(doc="The GC-content wiggle file")), ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="The reference FASTA file used to generate the\nintermediate pileup. Required when input are BAM")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Name of the output file. To use gzip compression name\nthe file ending in .gz. Default STDOUT.")), ToolInput(tag="in_normal_two", input_type=Int(optional=True), prefix="--normal2", doc=InputDocumentation(doc="Optional BAM/pileup file used to compute the\ndepth.normal and depth-ratio, instead of using the\nnormal BAM.")), ToolInput(tag="in_hom", input_type=Float(optional=True), prefix="--hom", doc=InputDocumentation(doc="Threshold to select homozygous positions. Default 0.9.")), ToolInput(tag="in_het", input_type=String(optional=True), prefix="--het", doc=InputDocumentation(doc="Threshold to select heterozygous positions. Default")), ToolInput(tag="in_chromosome", input_type=Array(t=String(), optional=True), prefix="--chromosome", doc=InputDocumentation(doc="Argument to restrict the input/output to a chromosome\nor a chromosome region. Coordinate format is\nName:pos.start-pos.end, eg: chr17:7565097-7590856, for\na particular region; eg: chr17, for the entire\nchromosome. Chromosome names can checked in the\nBAM/pileup files and are depending on the FASTA\nreference used for alignment. Default behavior is to\nnot selecting any chromosome.")), ToolInput(tag="in_parallel", input_type=Int(optional=True), prefix="--parallel", doc=InputDocumentation(doc="Defines the number of chromosomes to run in parallel.\nThe output will be divided in multiple files, one for\neach chromosome. The file name will be composed by the\noutput argument (used as prefix) and a chromosome name\ngiven by the chromosome argument list. This imply that\nboth output and chromosome argument need to be set\ncorrectly.")), ToolInput(tag="in_sam_tools", input_type=File(optional=True), prefix="--samtools", doc=InputDocumentation(doc="Path of samtools exec file to access the indexes and\ncompute the pileups. Default 'samtools'")), ToolInput(tag="in_tab_ix", input_type=File(optional=True), prefix="--tabix", doc=InputDocumentation(doc="Path of the tabix binary. Default 'tabix'")), ToolInput(tag="in_q_limit", input_type=Int(optional=True), prefix="--qlimit", doc=InputDocumentation(doc="Minimum nucleotide quality score for inclusion in the\ncounts. Default 20.")), ToolInput(tag="in_q_format", input_type=Int(optional=True), prefix="--qformat", doc=InputDocumentation(doc="Quality format, options are 'sanger' or 'illumina'.\nThis will add an offset of 33 or 64 respectively to\nthe qlimit value. Default 'sanger'.")), ToolInput(tag="in_threshold_filter_positions", input_type=Int(optional=True), prefix="-N", doc=InputDocumentation(doc="Threshold to filter positions by the sum of read depth\nof the two samples. Default 20.\n")), ToolInput(tag="in_zero_dot_two_five_dot", input_type=Float(), position=0, doc=InputDocumentation(doc="--het_f HET_F         Threshold of frequency in the forward strand to trust"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Name of the output file. To use gzip compression name\nthe file ending in .gz. Default STDOUT."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sequenza_Utils_Bam2Seqz_V0_1_0().translate("wdl", allow_empty_container=True)

