!Command
command:
- finestructure
positional: []
named:
- !Flag
  description: "Method to use.  Default: oMCMC.\n<method> is either MCMCwithTree,\
    \ oMCMC (MCMC without tree),\nSplitMerge, Tree, or admixture, or a contraction\
    \ of any.\nNote that admixture does not infer the population\nso should be provided\
    \ with a good one in \"initialpopfile\"."
  synonyms:
  - -m
  args: !SimpleFlagArg
    name: method
  optional: true
- !Flag
  description: "Initial number of populations.  <x> is either a number\nor \"n\" for\
    \ the number of individuals, or \"l\" for label detected\npopulations.  Default\
    \ is 1."
  synonyms:
  - -I
  args: !SimpleFlagArg
    name: x
  optional: true
- !Flag
  description: Sets the RNG seed to s (>0)
  synonyms:
  - -s
  args: !SimpleFlagArg
    name: s
  optional: true
- !Flag
  description: Ignores the first i lines of the input file
  synonyms:
  - -i
  args: !SimpleFlagArg
    name: i
  optional: true
- !Flag
  description: Number of burn in iterations for MCMC method.
  synonyms:
  - -x
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: Number of sample iterations for MCMC method.
  synonyms:
  - -y
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: Thin interval in the output file, for MCMC method.
  synonyms:
  - -z
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: Maximum number of tree comparisons for splitting/merging.
  synonyms:
  - -t
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: "Fix the number of populations to whatever you started with.\nThis\
    \ would be set by '-I' or by an initial state file."
  synonyms:
  - -K
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Specify the average copy length datafile.  -i,-X,-Y options\n*preciding*\
    \ this file will affect this read; you can set different\noptions for the copy\
    \ rate datafile by specifying these -i,-X,-Y again\nafter the -l option."
  synonyms:
  - -l
  args: !SimpleFlagArg
    name: filename
  optional: true
- !Flag
  description: "Use a data inference method; one of :\ncounts: use only the copy counts\
    \ data. (default if -l not specified)\nlengths: use only the copy length data\
    \ (still needs valid counts data!)\ntotallengths: use the mean length of chunk\
    \ sizes\nall: use all data (careful: this may not be statistically valid).\ndefault:\
    \ use counts and totallengths (default with -l specified)."
  synonyms:
  - -u
  args: !SimpleFlagArg
    name: datatype
  optional: true
- !Flag
  description: "Set alpha, the prior of the number of parameters\n(default: 1.0)."
  synonyms:
  - -a
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: "Set the likelihood correction factor: L_{used}=L^{1/<corfactor>}.\n\
    (default: 1.0)"
  synonyms:
  - -c
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: "Choose a model for beta:\n1/e/E:  Equipartition model of Pella and\
    \ Masuda.\n2/c/C:  Constant model.\n4/o/O:  F model of Falush et al 2003 with\
    \ a single parameter\nfor all populations (default)."
  synonyms:
  - -B
  args: !SimpleFlagArg
    name: model
  optional: true
- !Flag
  description: "(,<num>,..) Hyperparameters for ALL models, in the order COUNTS,LENGTHS,MEANS.\n\
    COUNTS: *must* be included, even if count matrix not used!\nFor model 1, there\
    \ are no parameters.\nFor model 2, set the prior of the distribution of\npopulation\
    \ sizes (each population has beta_i=<num>).\n(default: 1.0).\nFor model 4, set\
    \ the hyperprior of the distribution of\ndelta and F. Parameters are\n(k_f,k_delta,theta_f,theta_delta)\
    \ for the parameters of the\ngamma distribution F~Gamma(k_f,theta_f),\nand delta~Gamma(k_delta,theta_delta)\n\
    (default: -b 2,2,0.01,0.01).\nLENGTHS: 8 parameters:\n(k_alpha0,k_beta0,k_alpha,k_beta,beta_alpha0,beta_beta0,beta_alpha,beta_beta)\n\
    MEANS: 6 parameters:\n(k_betamu, k_alphamu, k_kappa, beta_alphamu,beta_betamu,beta_kappa)\n\
    Set K parameters negative for fixed =|k|\ne.g. when finding a tree given the mean\
    \ parameters."
  synonyms:
  - -b
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: "Specify the type of inference model for chunk counts.\n<modeltype>\
    \ accept contractions and lower case, and can be:\n1 or Finestructure: standard\
    \ finestructure model (default).\n2 or Normalised: Normalise data row and columns\
    \ within a population.\n3 or MergeOnly: As 2, but only compare populations being\
    \ merged or split.\n4 or Individual: Prior is placed on individual rows instead\
    \ of\npopulation rows. (slowest model)."
  synonyms:
  - -M
  args: !SimpleFlagArg
    name: modeltype
  optional: true
- !Flag
  description: "Extract details from a state; can be (a unique contraction of):\n\
    beta: the parameter matrix\nX: the copying data matrix for populations\nX2: the\
    \ normalised copying matrix\nmaxstate: maximum observed posterior probability\
    \ state\nmeancoincidence: the mean coincidence matrix\nmerge<:value><:split>:\
    \ create a merge(or split)\npopulation from the mean coincidence.\nadmixture:\
    \ gets the population as an admixture matrix.\nPmatrix: gets the P matrix for\
    \ the admixture.\nrange:<from>:<to> gets the iterations in the specified range.\n\
    thin:<step>: thins the output by step.\nprobability: get the posterior probability\
    \ of the data\ngiven the conditions of the outputfile.\nlikelihood: samples the\
    \ likelihood of the data given the conditions\nin the outputfile.\ntree: extract\
    \ the tree in newick format and print it to a FOURTH file"
  synonyms:
  - -e
  args: !SimpleFlagArg
    name: name
  optional: true
- !Flag
  description: "Fix the populations specified in the file.  They should be specified\
    \ as\npopulation format, i.e. PopA(ind1,ind2) would fix the data rows ind1 and\
    \ ind2\nto always be in the same population (they form a 'super individual')\n\
    called PopA. Continents are specified with a * before the name, and are treated\n\
    specially in the tree building phase,  i.e. *ContA(ind1,ind2).  Continents\nare\
    \ not merged with the rest of the tree."
  synonyms:
  - -F
  args: !SimpleFlagArg
    name: filename
  optional: true
- !Flag
  description: "When using a merge tree, initialisation can be set to the following:\n\
    1:      Use the initial state \"as is\".\n2:      Perform merging to get to best\
    \ posterior state.\n3:      Perform full range of moves to to get to best posterior\
    \ state.\nThis is the default.  Set number of attempts with -x <num>.\n4:    \
    \  As 1, but don't flatten maximum copy rates for the main tree.\n5:      As 2,\
    \ but don't flatten maximum copy rates for the main tree.\n6:      As 3, but don't\
    \ flatten maximum copy rates for the main tree.\n7:      As 1, but maximise hyperparameters\
    \ between merges.\n8:      As 2, but maximise hyperparameters between merges.\n\
    9:      As 3, but maximise hyperparameters between merges."
  synonyms:
  - -T
  args: !SimpleFlagArg
    name: type
  optional: true
- !Flag
  description: File containing a state to use for ordering, if not the main file.
  synonyms:
  - -o
  args: !SimpleFlagArg
    name: name
  optional: true
- !Flag
  description: "Change the tree building algorithm.\n0:      Discard all ordering\
    \ and likelihood information (default).\n1:      Maintain ordering.\n2:      Maintain\
    \ ordering and likelihood."
  synonyms:
  - -k
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: "Specifies that there are row names in the data (not necessary for\n\
    ChromoPainter or ChromoCombine style files.)"
  synonyms:
  - -X
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Specifies that there are column names in the data file (as -X, not
    necessary.)
  synonyms:
  - -Y
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Verbose mode
  synonyms:
  - -v
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Print Version info
  synonyms:
  - -V
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: This help message
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "    Usage: finestructure [OPTIONS] datafile <initialpopfile> outputfile\n\
  \    \tDatafile is a matrix of copy counts.\n\tinitialpopfile (optional) is a population\
  \ state e.g. an outputfile.\n\toutputfile is the destination.\n    -m <method>\t\
  \tMethod to use.  Default: oMCMC.\n\t\t\t<method> is either MCMCwithTree, oMCMC\
  \ (MCMC without tree), \n\t\t\tSplitMerge, Tree, or admixture, or a contraction\
  \ of any.\n\t\t\tNote that admixture does not infer the population\n \t\t\tso should\
  \ be provided with a good one in \"initialpopfile\".\n    -I <x>          \tInitial\
  \ number of populations.  <x> is either a number\n\t\t\tor \"n\" for the number\
  \ of individuals, or \"l\" for label detected \n\t\t\tpopulations.  Default is 1.\n\
  \    -s <s>\t\tSets the RNG seed to s (>0)\n    -i <i>\t\tIgnores the first i lines\
  \ of the input file\n    -x <num>\t\tNumber of burn in iterations for MCMC method.\n\
  \    -y <num>\t\tNumber of sample iterations for MCMC method.\n    -z <num>\t\t\
  Thin interval in the output file, for MCMC method.\n    -t <num>\t\tMaximum number\
  \ of tree comparisons for splitting/merging.\n    -K                  Fix the number\
  \ of populations to whatever you started with.\n                        This would\
  \ be set by '-I' or by an initial state file.\n    -l <filename>\tSpecify the average\
  \ copy length datafile.  -i,-X,-Y options\n\t\t\t*preciding* this file will affect\
  \ this read; you can set different\n\t\t\toptions for the copy rate datafile by\
  \ specifying these -i,-X,-Y again\n\t\t\tafter the -l option.\n    -u <datatype>\t\
  Use a data inference method; one of :\n\t\t\tcounts: use only the copy counts data.\
  \ (default if -l not specified)\n\t\t\tlengths: use only the copy length data (still\
  \ needs valid counts data!)\n\t\t\ttotallengths: use the mean length of chunk sizes\
  \ \n\t\t\tall: use all data (careful: this may not be statistically valid).\n\t\t\
  \tdefault: use counts and totallengths (default with -l specified).\n    -a <num>\t\
  \tSet alpha, the prior of the number of parameters\n\t\t\t(default: 1.0).\n    -c\
  \ <num>\t\tSet the likelihood correction factor: L_{used}=L^{1/<corfactor>}.\n\t\
  \t\t(default: 1.0)\n    -B <model>\t\tChoose a model for beta:\n\t\t\t1/e/E:\tEquipartition\
  \ model of Pella and Masuda.\n\t\t\t2/c/C:\tConstant model.\n\t\t\t4/o/O:  F model\
  \ of Falush et al 2003 with a single parameter\n\t\t\t\tfor all populations (default).\n\
  \    -b <num>(,<num>,..)\tHyperparameters for ALL models, in the order COUNTS,LENGTHS,MEANS.\
  \  \n\t\t\tCOUNTS: *must* be included, even if count matrix not used!\n\t\t\tFor\
  \ model 1, there are no parameters.\n\t\t\tFor model 2, set the prior of the distribution\
  \ of\n\t\t\tpopulation sizes (each population has beta_i=<num>).\n\t\t\t(default:\
  \ 1.0).\n\t\t\tFor model 4, set the hyperprior of the distribution of\n\t\t\tdelta\
  \ and F. Parameters are \n\t\t\t(k_f,k_delta,theta_f,theta_delta) for the parameters\
  \ of the\n\t\t\tgamma distribution F~Gamma(k_f,theta_f), \n\t\t\tand delta~Gamma(k_delta,theta_delta)\n\
  \t\t\t(default: -b 2,2,0.01,0.01).\n\t\t\tLENGTHS: 8 parameters:\n\t\t\t(k_alpha0,k_beta0,k_alpha,k_beta,beta_alpha0,beta_beta0,beta_alpha,beta_beta)\n\
  \t\t\tMEANS: 6 parameters:\n\t\t\t(k_betamu, k_alphamu, k_kappa, beta_alphamu,beta_betamu,beta_kappa)\n\
  \t\t\tSet K parameters negative for fixed =|k|\n\t\t\te.g. when finding a tree given\
  \ the mean parameters.\n    -M <modeltype>\tSpecify the type of inference model\
  \ for chunk counts.  \n\t\t\t<modeltype> accept contractions and lower case, and\
  \ can be:\n\t\t\t  1 or Finestructure: standard finestructure model (default).\n\
  \t\t\t  2 or Normalised: Normalise data row and columns within a population.\n\t\
  \t\t  3 or MergeOnly: As 2, but only compare populations being merged or split.\n\
  \t\t\t  4 or Individual: Prior is placed on individual rows instead of \n\t\t\t\t\
  \t  population rows. (slowest model).\n    -e <name>\t\tExtract details from a state;\
  \ can be (a unique contraction of):\n\t\t\tbeta: the parameter matrix\n\t\t\tX:\
  \ the copying data matrix for populations\n\t\t\tX2: the normalised copying matrix\n\
  \t\t\tmaxstate: maximum observed posterior probability state\n\t\t\tmeancoincidence:\
  \ the mean coincidence matrix\n\t\t\tmerge<:value><:split>: create a merge(or split)\n\
  \t\t\t  population from the mean coincidence.\n\t\t\tadmixture: gets the population\
  \ as an admixture matrix.\n\t\t\tPmatrix: gets the P matrix for the admixture.\n\
  \  \t\t\trange:<from>:<to> gets the iterations in the specified range.\n\t\t\tthin:<step>:\
  \ thins the output by step.\n\t\t\tprobability: get the posterior probability of\
  \ the data\n\t\t\tgiven the conditions of the outputfile.\n\t\t\tlikelihood: samples\
  \ the likelihood of the data given the conditions\n\t\t\tin the outputfile.\n\t\t\
  \ttree: extract the tree in newick format and print it to a FOURTH file\n    -F\
  \ <filename>\tFix the populations specified in the file.  They should be specified\
  \ as\n\t\t\tpopulation format, i.e. PopA(ind1,ind2) would fix the data rows ind1\
  \ and ind2\n\t\t\tto always be in the same population (they form a 'super individual')\n\
  \t\t\tcalled PopA. Continents are specified with a * before the name, and are treated\n\
  \t\t\tspecially in the tree building phase,  i.e. *ContA(ind1,ind2).  Continents\n\
  \t\t\tare not merged with the rest of the tree.\n    -T <type>\t\tWhen using a merge\
  \ tree, initialisation can be set to the following:\n\t\t\t1:\tUse the initial state\
  \ \"as is\".\n\t\t\t2:\tPerform merging to get to best posterior state.\n\t\t\t\
  3:\tPerform full range of moves to to get to best posterior state.\n\t\t\t\tThis\
  \ is the default.  Set number of attempts with -x <num>.\n\t\t\t4:\tAs 1, but don't\
  \ flatten maximum copy rates for the main tree.\n\t\t\t5:\tAs 2, but don't flatten\
  \ maximum copy rates for the main tree.\n\t\t\t6:\tAs 3, but don't flatten maximum\
  \ copy rates for the main tree.\n\t\t\t7:\tAs 1, but maximise hyperparameters between\
  \ merges.\n\t\t\t8:\tAs 2, but maximise hyperparameters between merges.\n\t\t\t\
  9:\tAs 3, but maximise hyperparameters between merges.\n    -o <name>\t\tFile containing\
  \ a state to use for ordering, if not the main file.\n    -k <num>\t\tChange the\
  \ tree building algorithm.\n\t\t\t0:\tDiscard all ordering and likelihood information\
  \ (default).\n\t\t\t1:\tMaintain ordering.\n\t\t\t2:\tMaintain ordering and likelihood.\n\
  \    -X\t\t\tSpecifies that there are row names in the data (not necessary for \n\
  \t\t\tChromoPainter or ChromoCombine style files.)\n    -Y\t\t\tSpecifies that there\
  \ are column names in the data file (as -X, not necessary.)\n    -v          \t\
  Verbose mode\n    -V          \tPrint Version info\n    -h          \tThis help\
  \ message\n\t\n    Examples:\n    finestructure -X -Y -m omcmc -i 2 -B 4 -b 2,2,0.01,0.01\
  \ -s 1 -x 100000 -y 100000 \n\t-z 1000 datafile.csv resfile.xml\n\t\t\tInfers population\
  \ structure (-m omcmc) from datafile.csv which\n\t\t\tcontains 2 irrelevent lines\
  \ (-i 2) with row (-X) and column (-Y)\n\t\t\tnames, using the F model with a global\
  \ F and Delta (-B 4) using\n\t\t\tGamma(2,0.01) distributions. 100000 burn in steps\
  \ are used (-x)\n\t\t\tand 100000 further iterations are sampled (-y) keeping every\n\
  \t\t\t1000th sample (-z).\n    finestructure -X -Y -i 2 -e min datafile.csv resfile.xml\
  \ resmsfile.xml\n\t\t\tCreate a minimum state file from the MCMC output.\n    finestructure\
  \ -X -Y -i 2 -m T -t 20000 -B 4 -b -0.003,-0.94,-1,-1 \n\tdatafile.csv resmsfile.xml\
  \ restree.xml\n\t\t\tCreate a tree (-m T) from the minimum state using the inferred\n\
  \t\t\tvalues of F (0.003) and Delta (0.94), allowing 20000 (-t 20000).\n\t\t\tdifferent\
  \ trees to be examined per merge attempt (slow!).\n    finestructure -X -Y -i 2\
  \ -m admixture -B 4 -b -0.003,-0.94,-1,-1 -x 100000 -y 100000 \n\t-z 1000 datafile.csv\
  \ resmsfile.xml admixfile.xml\n\t\t\tPerform admixture (-m admixiture) MCMC using\
  \ the minimum state \n\t\t\tand parameters found as above.\n    finestructure -X\
  \ -Y -i 2 -e admixture datafile.csv resmsfile.xml admixstate.csv\n\t\t\tExtract\
  \ the admixture matrix Q for a state in csv format.  This\n\t\t\tis useful for making\
  \ comparisons to the observed admixture matrix.\n    \n"
generated_using:
- -h
