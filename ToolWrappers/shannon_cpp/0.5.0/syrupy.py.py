from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Syrupy_Py_V0_1_0 = CommandToolBuilder(tool="syrupy.py", base_command=["syrupy.py"], inputs=[ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="do not report miscellaneous run information to stderr")), ToolInput(tag="in_replace", input_type=File(optional=True), prefix="--replace", doc=InputDocumentation(doc="replace output file(s) without asking if already")), ToolInput(tag="in__debugleveldebugging_level", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="#, --debug-level=#\ndebugging information level (0, 1, 2, 3; default=0)")), ToolInput(tag="in_explain", input_type=Boolean(optional=True), prefix="--explain", doc=InputDocumentation(doc="show detailed information on the meaning of each of\nthe columns, and then exit")), ToolInput(tag="in_poll_pid", input_type=String(optional=True), prefix="--poll-pid", doc=InputDocumentation(doc="ignore COMMAND if given, and poll external process\nwith specified PID")), ToolInput(tag="in_ssh", input_type=String(optional=True), prefix="--ssh", doc=InputDocumentation(doc="use SSH to remote view PS with syrupy")), ToolInput(tag="in_poll_top_memory", input_type=String(optional=True), prefix="--poll-top-memory", doc=InputDocumentation(doc="ignore COMMAND if given and poll top MEM processes by\nmemory usage")), ToolInput(tag="in_poll_command", input_type=String(optional=True), prefix="--poll-command", doc=InputDocumentation(doc="ignore COMMAND if given, and poll external process\nwith command matching specified regular expression\npattern")), ToolInput(tag="in__intervalpolling_interval", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="#.##, --interval=#.##\npolling interval in seconds (default=1)")), ToolInput(tag="in_syrupy_in_front", input_type=Boolean(optional=True), prefix="--syrupy-in-front", doc=InputDocumentation(doc="redirect Syrupy output and miscellaneous information\nto standard output and standard error instead of\nlogging to files")), ToolInput(tag="in_command_in_front", input_type=Boolean(optional=True), prefix="--command-in-front", doc=InputDocumentation(doc="run COMMAND in foreground: send output and error\nstream of COMMAND to standard output and standard\nerror, respectively")), ToolInput(tag="in_no_command_output", input_type=Boolean(optional=True), prefix="--no-command-output", doc=InputDocumentation(doc="suppress all output from COMMAND")), ToolInput(tag="in_flush_output", input_type=Boolean(optional=True), prefix="--flush-output", doc=InputDocumentation(doc="force flushing of stream buffers after every write")), ToolInput(tag="in_no_raw_process_log", input_type=Boolean(optional=True), prefix="--no-raw-process-log", doc=InputDocumentation(doc="suppress writing of raw results from process sampling")), ToolInput(tag="in_show_command", input_type=Boolean(optional=True), prefix="--show-command", doc=InputDocumentation(doc="show command column in output")), ToolInput(tag="in_separator", input_type=String(optional=True), prefix="--separator", doc=InputDocumentation(doc="character(s) to used to separate columns in results")), ToolInput(tag="in_no_align", input_type=Boolean(optional=True), prefix="--no-align", doc=InputDocumentation(doc="do not align/justify columns")), ToolInput(tag="in_no_headers", input_type=Boolean(optional=True), prefix="--no-headers", doc=InputDocumentation(doc="do not output column headers")), ToolInput(tag="in_exists", input_type=String(), position=0, doc=InputDocumentation(doc="-t PROCESS-TITLE, --title=PROCESS-TITLE"))], outputs=[ToolOutput(tag="out_replace", output_type=File(optional=True), selector=InputSelector(input_to_select="in_replace", type_hint=File()), doc=OutputDocumentation(doc="replace output file(s) without asking if already"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Syrupy_Py_V0_1_0().translate("wdl", allow_empty_container=True)

