!Command
command:
- cooc-mutbamscan
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -s
  - --samples
  description: V-pipe samples list tsv
  args: !SimpleFlagArg
    name: TSV
- !Flag
  optional: true
  synonyms:
  - -a
  description: "/CRAM [BAM/CRAM ...], --alignments BAM/CRAM [BAM/CRAM ...]\nalignment\
    \ files"
  args: !SimpleFlagArg
    name: BAM
- !Flag
  optional: true
  synonyms:
  - -p
  - --prefix
  description: "V-pipe work directory prefix for where to look at\nalign files when\
    \ using TSV samples list"
  args: !SimpleFlagArg
    name: PATH
- !Flag
  optional: true
  synonyms:
  - -j
  - --json
  description: output results to as JSON file
  args: !SimpleFlagArg
    name: JSON
- !Flag
  optional: true
  synonyms:
  - -y
  - --yaml
  description: output results to as yaml file
  args: !SimpleFlagArg
    name: YAML
- !Flag
  optional: true
  synonyms:
  - -t
  - --tsv
  description: output results to as (raw) tsv file
  args: !SimpleFlagArg
    name: TSV
- !Flag
  optional: true
  synonyms:
  - -d
  - --dump
  description: dump the python object to the terminal
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: cooc-mutbamscan [-h] (-s TSV | -a BAM/CRAM [BAM/CRAM ...]) [-p\
  \ PATH]\n                       [-j JSON] [-y YAML] [-t TSV] [-d]\n\nscan amplicon\
  \ (covered by long read pairs) for mutation cooccurrence\n\noptional arguments:\n\
  \  -h, --help            show this help message and exit\n  -s TSV, --samples TSV\n\
  \                        V-pipe samples list tsv\n  -a BAM/CRAM [BAM/CRAM ...],\
  \ --alignments BAM/CRAM [BAM/CRAM ...]\n                        alignment files\n\
  \  -p PATH, --prefix PATH\n                        V-pipe work directory prefix\
  \ for where to look at\n                        align files when using TSV samples\
  \ list\n  -j JSON, --json JSON  output results to as JSON file\n  -y YAML, --yaml\
  \ YAML  output results to as yaml file\n  -t TSV, --tsv TSV     output results to\
  \ as (raw) tsv file\n  -d, --dump            dump the python object to the terminal\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/cojac:0.1--0
