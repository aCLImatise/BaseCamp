from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, Directory, File

Rapidnj_V0_1_0 = CommandToolBuilder(tool="rapidnj", base_command=["rapidnj"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="turn on verbose output.")), ToolInput(tag="in_input_format", input_type=String(optional=True), prefix="--input-format", doc=InputDocumentation(doc="Specifies the type of input. pd = distance\nmatrix in phylip format, sth = multiple alignment in (single line) stockholm format.\nfa = multiple alignment in (single line) FASTA format.")), ToolInput(tag="in_output_format", input_type=String(optional=True), prefix="--output-format", doc=InputDocumentation(doc="Specifies the type of output. t = phylogenetic tree in newick format\n(default), m = distance matrix.")), ToolInput(tag="in_evolution_model", input_type=String(optional=True), prefix="--evolution-model", doc=InputDocumentation(doc="Specifies which sequence evolution method to use when computing\ndistance estimates from multiple alignments. jc = juke cantor,\nkim = Kimura's distance (default).")), ToolInput(tag="in_memory_size", input_type=Boolean(optional=True), prefix="--memory-size", doc=InputDocumentation(doc="The maximum amount of memory which rapidNJ is allowed to use (in MB).\nDefault is 90% of all available memory.")), ToolInput(tag="in_rapid_nj_mem", input_type=Int(optional=True), prefix="--rapidnj-mem", doc=InputDocumentation(doc="Force RapidNJ to use a memory efficient version of rapidNJ. The 'arg'\nspecifies the percentage of a sorted distance matrix which should be\nstored in memory (arg=10 means 10%).")), ToolInput(tag="in_rapid_nj_disk", input_type=Directory(optional=True), prefix="--rapidnj-disk", doc=InputDocumentation(doc="Force RapidNJ to use HDD caching where 'arg' is the directory used to\nstore cached files.")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Number of cores to use for computating distance matrices from multiple\nalignments. All available cores are used by default.")), ToolInput(tag="in_bootstrap", input_type=String(optional=True), prefix="--bootstrap", doc=InputDocumentation(doc="Compute bootstrap values using ARG samples. The output tree will be\nannotated with the bootstrap values.")), ToolInput(tag="in_alignment_type", input_type=String(optional=True), prefix="--alignment-type", doc=InputDocumentation(doc="Force the input alignment to be treated as: p = protein alignment,\nd = DNA alignment.")), ToolInput(tag="in_no_negative_length", input_type=Boolean(optional=True), prefix="--no-negative-length", doc=InputDocumentation(doc="Adjust for negative branch lengths.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="Output the result to this file instead of stdout.")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="Output the result to this file instead of stdout."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rapidnj_V0_1_0().translate("wdl", allow_empty_container=True)

