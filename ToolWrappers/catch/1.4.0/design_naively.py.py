from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean

Design_Naively_Py_V0_1_0 = CommandToolBuilder(tool="design_naively.py", base_command=["design_naively.py"], inputs=[ToolInput(tag="in_probe_length", input_type=Int(optional=True), prefix="--probe-length", doc=InputDocumentation(doc="(Optional) The number of bp in each probe")), ToolInput(tag="in_probe_stride", input_type=Int(optional=True), prefix="--probe-stride", doc=InputDocumentation(doc="(Optional) Generate candidate probes from the input\nthat are separated by this number of bp")), ToolInput(tag="in_nrf", input_type=String(optional=True), prefix="-nrf", doc=InputDocumentation(doc="NAIVE_REDUNDANT_FILTER, --naive-redundant-filter NAIVE_REDUNDANT_FILTER NAIVE_REDUNDANT_FILTER\nArgs: <MISMATCHES> <LCF_THRES>. Use the 'naive\nredundant filter' -- i.e., iterate through a list of\nprobes and, for each probe p, remove the following\nprobes that are redundant to p. Deem one probe\nredundant to another if the longest common substring\nbetween them, up to MISMATCHES mismatches, is >=\nLCF_THRES.")), ToolInput(tag="in_dsf", input_type=String(optional=True), prefix="-dsf", doc=InputDocumentation(doc="DOMINATING_SET_FILTER, --dominating-set-filter DOMINATING_SET_FILTER DOMINATING_SET_FILTER\nArgs: <MISMATCHES> <LCF_THRES>. Use the 'dominating\nset filter' -- i.e., filter redundant probes by\nconstructing a graph connecting redundant probes and\napproximating the smallest dominating set. Deem one\nprobe redundant to another if the longest common\nsubstring between them, up to MISMATCHES mismatches,\nis >= LCF_THRES.")), ToolInput(tag="in_add_reverse_complements", input_type=Boolean(optional=True), prefix="--add-reverse-complements", doc=InputDocumentation(doc="Add to the output the reverse complement of each probe")), ToolInput(tag="in_limit_target_genomes", input_type=String(optional=True), prefix="--limit-target-genomes", doc=InputDocumentation(doc="(Optional) Use only the first N target genomes in the\ndataset")), ToolInput(tag="in_limit_target_genomes_randomly_with_replacement", input_type=String(optional=True), prefix="--limit-target-genomes-randomly-with-replacement", doc=InputDocumentation(doc="(Optional) Randomly select N target genomes in the\ndataset with replacement")), ToolInput(tag="in_print_analysis", input_type=Boolean(optional=True), prefix="--print-analysis", doc=InputDocumentation(doc="Print analysis of the probe set's coverage")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Debug output")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output"))], outputs=[], container="quay.io/biocontainers/catch:1.4.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Design_Naively_Py_V0_1_0().translate("wdl")

