from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Array, File

Pool_Py_V0_1_0 = CommandToolBuilder(tool="pool.py", base_command=["pool.py"], inputs=[ToolInput(tag="in_round_params", input_type=String(optional=True), prefix="--round-params", doc=InputDocumentation(doc="ROUND_PARAMS\n<m> <e>; round mismatches parameter to the nearest\nmultiple of m and cover_extension parameter to the\nnearest multiple of e")), ToolInput(tag="in_use_nd", input_type=Boolean(optional=True), prefix="--use-nd", doc=InputDocumentation(doc="Use the higher dimensional (n > 2) interpolation and\nsearch functions for optimizing parameters. This is\nrequired if the input table of probe counts contains\nmore than 2 parameters. This does not round parameters\nto integers or to be placed on a grid -- i.e., they\nwill be output as fractional values (from which probe\ncounts were interpolated). When using this, --loss-\ncoeffs should also be set (default is 1 for all\nparameters).")), ToolInput(tag="in_loss_coeffs", input_type=Array(t=String(), optional=True), prefix="--loss-coeffs", doc=InputDocumentation(doc="Coefficients on parameters in the loss function. These\nmust be specified in the same order as the parameter\ncolumns in the input table. Default is 1 for\nmismatches and 1/100 for cover_extension (or, when\n--use-nd is specified, 1 for all parameters).")), ToolInput(tag="in_dataset_weights", input_type=File(optional=True), prefix="--dataset-weights", doc=InputDocumentation(doc="Path to TSV file that contains a weight for each\ndataset to use in the loss function. The first row\nmust be a header, the first column must provide the\ndataset ('dataset') and the second column must provide\nthe weight of the dataset ('weight'). If not provided,\nthe default is a weight of 1 for each dataset.")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Debug output")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output")), ToolInput(tag="in_probe_count_tsv", input_type=String(), position=0, doc=InputDocumentation(doc="Path to TSV file that contains probe counts for each\ndataset and combination of parameters; the first row\nmust be a header, the first column must give a dataset\n('dataset'), the last column must list a number of\nprobes ('num_probes'), and the intermediary columns\ngive parameter values")), ToolInput(tag="in_target_probe_count", input_type=String(), position=1, doc=InputDocumentation(doc="Constraint on the total number of probes in the\ndesign; generally, parameters will be selected such\nthat the number of probes, when pooled across\ndatasets, is just below this number")), ToolInput(tag="in_param_vals_tsv", input_type=String(), position=2, doc=InputDocumentation(doc="Path to TSV file in which to output optimal parameter")), ToolInput(tag="in_values", input_type=String(), position=3, doc=InputDocumentation(doc="optional arguments:"))], outputs=[], container="quay.io/biocontainers/catch:1.4.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pool_Py_V0_1_0().translate("wdl")

