from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Float

Dfamscan_Pl_V0_1_0 = CommandToolBuilder(tool="dfamscan.pl", base_command=["dfamscan.pl"], inputs=[ToolInput(tag="in_df_am_in_file", input_type=File(optional=True), prefix="--dfam_infile", doc=InputDocumentation(doc="Use this is you've already run nhmmscan, and\njust want to perfom dfamscan filtering/sorting.\nThe file must be the one produced by nhmmscan's\n--dfamtblout flag.\n(Note: must be nhmmscan output, not nhmmer output)")), ToolInput(tag="in_fast_a_file", input_type=String(optional=True), prefix="--fastafile", doc=InputDocumentation(doc="Use these if you want dfamscan to control a")), ToolInput(tag="in_hmm_file", input_type=String(optional=True), prefix="--hmmfile", doc=InputDocumentation(doc="run of nhmmscan, then do filtering/sorting")), ToolInput(tag="in_annotation_thresh", input_type=String(optional=True), prefix="--annotation_thresh", doc=InputDocumentation(doc="Default")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="Currently allowed are 'Other', 'Homo sapiens',\n'Mus Musculus', 'Danio rerio', 'Drosophila melanogaster',\nor 'Caenorhabditis elegans'")), ToolInput(tag="in_sort_by_model", input_type=Boolean(optional=True), prefix="--sortby_model", doc=InputDocumentation(doc="Default")), ToolInput(tag="in_min_cov_frac", input_type=String(optional=True), prefix="--min_cov_frac", doc=InputDocumentation(doc="This is similar to the MaskLevel concept in")), ToolInput(tag="in_trf_outfile", input_type=String(optional=True), prefix="--trf_outfile", doc=InputDocumentation(doc="Runs trf, put results in <s>; only with --fastafile")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Default 8")), ToolInput(tag="in_no_rph_removal", input_type=Boolean(optional=True), prefix="--no_rph_removal", doc=InputDocumentation(doc="Don't remove redundant profile hits")), ToolInput(tag="in_requires", input_type=String(), position=0, doc=InputDocumentation(doc="--dfam_outfile <s>   Output file, also in dfamtblout format")), ToolInput(tag="in_crossmatch_dot", input_type=String(), position=0, doc=InputDocumentation(doc="A match is considered non-redundant")), ToolInput(tag="in_zero_dot_seven_five", input_type=Float(), position=0, doc=InputDocumentation(doc="All optional"))], outputs=[ToolOutput(tag="out_df_am_in_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_df_am_in_file", type_hint=File()), doc=OutputDocumentation(doc="Use this is you've already run nhmmscan, and\njust want to perfom dfamscan filtering/sorting.\nThe file must be the one produced by nhmmscan's\n--dfamtblout flag.\n(Note: must be nhmmscan output, not nhmmer output)"))], container="quay.io/biocontainers/dfam:3.3--hdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dfamscan_Pl_V0_1_0().translate("wdl")

