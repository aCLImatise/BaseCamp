from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String

Design_Redprint_Multistate_Py_V0_1_0 = CommandToolBuilder(tool="design_redprint_multistate.py", base_command=["design-redprint-multistate.py"], inputs=[ToolInput(tag="in_file", input_type=File(optional=True), prefix="--file", doc=InputDocumentation(doc="Read file in *.inp format")), ToolInput(tag="in_input", input_type=Boolean(optional=True), prefix="--input", doc=InputDocumentation(doc="Read custom structures and sequence constraints from")), ToolInput(tag="in_objective", input_type=Int(optional=True), prefix="--objective", doc=InputDocumentation(doc="Chose the objective function: 1 for abs differences\nand 2 for squared (default: 1)")), ToolInput(tag="in_temperature", input_type=String(optional=True), prefix="--temperature", doc=InputDocumentation(doc="Temperature of the energy calculations.")), ToolInput(tag="in_number", input_type=Int(optional=True), prefix="--number", doc=InputDocumentation(doc="Number of designs to generate")), ToolInput(tag="in_model", input_type=String(optional=True), prefix="--model", doc=InputDocumentation(doc="Model for getting a new sequence: uniform, nussinov,\nbasepairs, stacking")), ToolInput(tag="in_stop", input_type=Int(optional=True), prefix="--stop", doc=InputDocumentation(doc="Stop optimization run of unpaired bases if no better\nsolution is aquired after (stop) trials. 0 is no\nunpaired bases optimization.")), ToolInput(tag="in_kill", input_type=String(optional=True), prefix="--kill", doc=InputDocumentation(doc="Timeout value of graph construction in seconds.\n(default: infinite)")), ToolInput(tag="in_graph_ml", input_type=File(optional=True), prefix="--graphml", doc=InputDocumentation(doc="Write a graphml file with the given filename.")), ToolInput(tag="in_csv", input_type=File(optional=True), prefix="--csv", doc=InputDocumentation(doc="Write output as semi-colon csv file to stdout")), ToolInput(tag="in_progress", input_type=Boolean(optional=True), prefix="--progress", doc=InputDocumentation(doc="Show progress of optimization")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Show debug information of library")), ToolInput(tag="in_q", input_type=String(optional=True), prefix="-q", doc=InputDocumentation(doc="")), ToolInput(tag="in_stdin", input_type=String(), position=0, doc=InputDocumentation(doc="-q PACKAGE, --package PACKAGE"))], outputs=[ToolOutput(tag="out_csv", output_type=File(optional=True), selector=InputSelector(input_to_select="in_csv", type_hint=File()), doc=OutputDocumentation(doc="Write output as semi-colon csv file to stdout"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Design_Redprint_Multistate_Py_V0_1_0().translate("wdl", allow_empty_container=True)

