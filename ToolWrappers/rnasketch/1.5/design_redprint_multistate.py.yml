!Command
command:
- design-redprint-multistate.py
positional:
- !Positional
  optional: false
  position: 0
  name: stdin
  description: -q PACKAGE, --package PACKAGE
named:
- !Flag
  optional: true
  synonyms:
  - -f
  - --file
  description: Read file in *.inp format
  args: !SimpleFlagArg
    name: FILE
- !Flag
  optional: true
  synonyms:
  - -i
  - --input
  description: Read custom structures and sequence constraints from
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -j
  - --objective
  description: "Chose the objective function: 1 for abs differences\nand 2 for squared\
    \ (default: 1)"
  args: !SimpleFlagArg
    name: OBJECTIVE
- !Flag
  optional: true
  synonyms:
  - -T
  - --temperature
  description: Temperature of the energy calculations.
  args: !SimpleFlagArg
    name: TEMPERATURE
- !Flag
  optional: true
  synonyms:
  - -n
  - --number
  description: Number of designs to generate
  args: !SimpleFlagArg
    name: NUMBER
- !Flag
  optional: true
  synonyms:
  - -m
  - --model
  description: "Model for getting a new sequence: uniform, nussinov,\nbasepairs, stacking"
  args: !SimpleFlagArg
    name: MODEL
- !Flag
  optional: true
  synonyms:
  - -s
  - --stop
  description: "Stop optimization run of unpaired bases if no better\nsolution is\
    \ aquired after (stop) trials. 0 is no\nunpaired bases optimization."
  args: !SimpleFlagArg
    name: STOP
- !Flag
  optional: true
  synonyms:
  - -k
  - --kill
  description: "Timeout value of graph construction in seconds.\n(default: infinite)"
  args: !SimpleFlagArg
    name: KILL
- !Flag
  optional: true
  synonyms:
  - -g
  - --graphml
  description: Write a graphml file with the given filename.
  args: !SimpleFlagArg
    name: GRAPHML
- !Flag
  optional: true
  synonyms:
  - -c
  - --csv
  description: Write output as semi-colon csv file to stdout
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  - --progress
  description: Show progress of optimization
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -d
  - --debug
  description: Show debug information of library
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -q
  description: ''
  args: !SimpleFlagArg
    name: PACKAGE
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: design-redprint-multistate.py [-h] [-f FILE] [-i] [-q PACKAGE]\n\
  \                                     [-j OBJECTIVE] [-T TEMPERATURE]\n        \
  \                             [-n NUMBER] [-m MODEL] [-s STOP]\n               \
  \                      [-k KILL] [-g GRAPHML] [-c] [-p] [-d]\n\nDesign a multi-stable\
  \ riboswitch similar using Boltzmann sampling.\n\noptional arguments:\n  -h, --help\
  \            show this help message and exit\n  -f FILE, --file FILE  Read file\
  \ in *.inp format\n  -i, --input           Read custom structures and sequence constraints\
  \ from\n                        stdin\n  -q PACKAGE, --package PACKAGE\n       \
  \                 Chose the calculation package: hotknots, pkiss,\n            \
  \            nupack, or vrna/ViennaRNA (default: vrna)\n  -j OBJECTIVE, --objective\
  \ OBJECTIVE\n                        Chose the objective function: 1 for abs differences\n\
  \                        and 2 for squared (default: 1)\n  -T TEMPERATURE, --temperature\
  \ TEMPERATURE\n                        Temperature of the energy calculations.\n\
  \  -n NUMBER, --number NUMBER\n                        Number of designs to generate\n\
  \  -m MODEL, --model MODEL\n                        Model for getting a new sequence:\
  \ uniform, nussinov,\n                        basepairs, stacking\n  -s STOP, --stop\
  \ STOP  Stop optimization run of unpaired bases if no better\n                 \
  \       solution is aquired after (stop) trials. 0 is no\n                     \
  \   unpaired bases optimization.\n  -k KILL, --kill KILL  Timeout value of graph\
  \ construction in seconds.\n                        (default: infinite)\n  -g GRAPHML,\
  \ --graphml GRAPHML\n                        Write a graphml file with the given\
  \ filename.\n  -c, --csv             Write output as semi-colon csv file to stdout\n\
  \  -p, --progress        Show progress of optimization\n  -d, --debug          \
  \ Show debug information of library\n"
generated_using:
- --help
docker_image:
