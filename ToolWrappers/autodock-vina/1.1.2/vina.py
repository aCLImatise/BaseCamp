from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, File, Boolean

Vina_V0_1_0 = CommandToolBuilder(tool="vina", base_command=["vina"], inputs=[ToolInput(tag="in_receptor", input_type=String(optional=True), prefix="--receptor", doc=InputDocumentation(doc="rigid part of the receptor (PDBQT)")), ToolInput(tag="in_flex", input_type=String(optional=True), prefix="--flex", doc=InputDocumentation(doc="flexible side chains, if any (PDBQT)")), ToolInput(tag="in_ligand", input_type=String(optional=True), prefix="--ligand", doc=InputDocumentation(doc="ligand (PDBQT)")), ToolInput(tag="in_center_x", input_type=String(optional=True), prefix="--center_x", doc=InputDocumentation(doc="X coordinate of the center")), ToolInput(tag="in_center_y", input_type=String(optional=True), prefix="--center_y", doc=InputDocumentation(doc="Y coordinate of the center")), ToolInput(tag="in_center_z", input_type=String(optional=True), prefix="--center_z", doc=InputDocumentation(doc="Z coordinate of the center")), ToolInput(tag="in_size_x", input_type=Int(optional=True), prefix="--size_x", doc=InputDocumentation(doc="size in the X dimension (Angstroms)")), ToolInput(tag="in_size_y", input_type=Int(optional=True), prefix="--size_y", doc=InputDocumentation(doc="size in the Y dimension (Angstroms)")), ToolInput(tag="in_size_z", input_type=Int(optional=True), prefix="--size_z", doc=InputDocumentation(doc="size in the Z dimension (Angstroms)")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="output models (PDBQT), the default is chosen based on\nthe ligand file name")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="optionally, write log file")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="the number of CPUs to use (the default is to try to\ndetect the number of CPUs or, failing that, use 1)")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="explicit random seed")), ToolInput(tag="in_exhaustive_ness", input_type=Int(optional=True), prefix="--exhaustiveness", doc=InputDocumentation(doc="(=8) exhaustiveness of the global search (roughly\nproportional to time): 1+")), ToolInput(tag="in_num_modes", input_type=Int(optional=True), prefix="--num_modes", doc=InputDocumentation(doc="(=9)      maximum number of binding modes to generate")), ToolInput(tag="in_energy_range", input_type=Int(optional=True), prefix="--energy_range", doc=InputDocumentation(doc="(=3)   maximum energy difference between the best binding\nmode and the worst one displayed (kcal/mol)")), ToolInput(tag="in_config", input_type=String(optional=True), prefix="--config", doc=InputDocumentation(doc="the above options can be put here")), ToolInput(tag="in_help_advanced", input_type=Boolean(optional=True), prefix="--help_advanced", doc=InputDocumentation(doc="display usage summary with advanced options"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="output models (PDBQT), the default is chosen based on\nthe ligand file name"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Vina_V0_1_0().translate("wdl", allow_empty_container=True)

