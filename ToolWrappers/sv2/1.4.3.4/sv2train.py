from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, File

Sv2Train_V0_1_0 = CommandToolBuilder(tool="sv2train", base_command=["sv2train"], inputs=[ToolInput(tag="in_bam", input_type=Boolean(optional=True), prefix="-bam", doc=InputDocumentation(doc="...     bam file(s)")), ToolInput(tag="in_vcf", input_type=Boolean(optional=True), prefix="-vcf", doc=InputDocumentation(doc="...     vcf files(s) of SVs")), ToolInput(tag="in_bed", input_type=Boolean(optional=True), prefix="-bed", doc=InputDocumentation(doc="...     bed files(s) of SVs")), ToolInput(tag="in_snv", input_type=Boolean(optional=True), prefix="-snv", doc=InputDocumentation(doc="...     snv vcf files(s), must be bgzipped and tabixed")), ToolInput(tag="in_ped", input_type=Boolean(optional=True), prefix="-ped", doc=InputDocumentation(doc="...     ped files(s)")), ToolInput(tag="in_ini", input_type=Boolean(optional=True), prefix="-ini", doc=InputDocumentation(doc="...     path to configuration INI file, default lives in sv2 package")), ToolInput(tag="in_genome", input_type=Boolean(optional=True), prefix="-genome", doc=InputDocumentation(doc="reference genome build <hg19, hg38, mm10> [default: hg19]")), ToolInput(tag="in_pcr_free", input_type=Boolean(optional=True), prefix="-pcrfree", doc=InputDocumentation(doc="GC content normalization for pcr free sequences")), ToolInput(tag="in_bwa_mem_flagged", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="bwa mem -M compatibility, split-reads flagged as secondary instead of supplementary")), ToolInput(tag="in_pre", input_type=Directory(optional=True), prefix="-pre", doc=InputDocumentation(doc="preprocessing output directory, skips preprocessing")), ToolInput(tag="in_feats", input_type=Directory(optional=True), prefix="-feats", doc=InputDocumentation(doc="feature extraction output directory, skips feature extraction")), ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="-log", doc=InputDocumentation(doc="log file for standard error messages [default: STDOUT]")), ToolInput(tag="in_tmp_dir", input_type=Boolean(optional=True), prefix="-tmp-dir", doc=InputDocumentation(doc="directory for temporary files [default: working directory]")), ToolInput(tag="in_seed", input_type=Boolean(optional=True), prefix="-seed", doc=InputDocumentation(doc="random seed for preprocessing shuffling [default: 42]")), ToolInput(tag="in_out", input_type=Boolean(optional=True), prefix="-out", doc=InputDocumentation(doc="output prefix [default: sv2_training_features]")), ToolInput(tag="in_o_dir", input_type=File(optional=True), prefix="-odir", doc=InputDocumentation(doc="output path, location for sv2 output directories [default: working directory]"))], outputs=[ToolOutput(tag="out_pre", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_pre", type_hint=File()), doc=OutputDocumentation(doc="preprocessing output directory, skips preprocessing")), ToolOutput(tag="out_feats", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_feats", type_hint=File()), doc=OutputDocumentation(doc="feature extraction output directory, skips feature extraction")), ToolOutput(tag="out_o_dir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_o_dir", type_hint=File()), doc=OutputDocumentation(doc="output path, location for sv2 output directories [default: working directory]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sv2Train_V0_1_0().translate("wdl", allow_empty_container=True)

