from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, Float, String

Decifer_V0_1_0 = CommandToolBuilder(tool="decifer", base_command=["decifer"], inputs=[ToolInput(tag="in_purity_file", input_type=File(optional=True), prefix="--purityfile", doc=InputDocumentation(doc="File with purity of each sample (TSV file in two\ncolumns`SAMPLE PURITY`)")), ToolInput(tag="in_beta_binomial", input_type=File(optional=True), prefix="--betabinomial", doc=InputDocumentation(doc="File with precisions for betabinomial fit (default:\nbinomial likelihood)")), ToolInput(tag="in_ccf", input_type=Boolean(optional=True), prefix="--ccf", doc=InputDocumentation(doc="Run with CCF instead of DCF (default: False)")), ToolInput(tag="in_mink", input_type=Int(optional=True), prefix="--mink", doc=InputDocumentation(doc="Minimum number of clusters, which must be at least 2\n(default: 2)")), ToolInput(tag="in_max_k", input_type=Int(optional=True), prefix="--maxk", doc=InputDocumentation(doc="Maximum number of clusters (default: 12)")), ToolInput(tag="in_restarts", input_type=Int(optional=True), prefix="--restarts", doc=InputDocumentation(doc="Number of restarts (default: 100)")), ToolInput(tag="in_max_it", input_type=Int(optional=True), prefix="--maxit", doc=InputDocumentation(doc="Maximum number of iterations per restart (default:\n200)")), ToolInput(tag="in_elbow", input_type=Float(optional=True), prefix="--elbow", doc=InputDocumentation(doc="Elbow sensitivity, lower values increase sensitivity\n(default: 0.06)")), ToolInput(tag="in_binary_search", input_type=Boolean(optional=True), prefix="--binarysearch", doc=InputDocumentation(doc="Use binary-search model selection (default: False,\niterative is used; use binary search when considering\nlarge numbers of clusters")), ToolInput(tag="in_record", input_type=Boolean(optional=True), prefix="--record", doc=InputDocumentation(doc="Record objectives (default: False")), ToolInput(tag="in_jobs", input_type=Int(optional=True), prefix="--jobs", doc=InputDocumentation(doc="Number of parallele jobs to use (default: equal to\nnumber of available processors)")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Output prefix (default: ./decifer)")), ToolInput(tag="in_state_trees", input_type=File(optional=True), prefix="--statetrees", doc=InputDocumentation(doc="Filename of state-trees file (default: use\nstate_trees.txt in the package)")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="Random-generator seed (default: None)"))], outputs=[], container="quay.io/biocontainers/decifer:0.0.2--py27ha58320b_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Decifer_V0_1_0().translate("wdl")

