from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int, Directory

Mascotadapter_V0_1_0 = CommandToolBuilder(tool="MascotAdapter", base_command=["MascotAdapter"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*                      Input file in mzData format.\nNote: In mode 'mascot_out' a Mascot results file (.mascotXML) is read")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*                     Output file in idXML format.\nNote: In mode 'mascot_in' Mascot generic format is written.")), ToolInput(tag="in_mascot_in", input_type=Boolean(optional=True), prefix="-mascot_in", doc=InputDocumentation(doc="If this flag is set the MascotAdapter will read in mzData and write Mascot generic format")), ToolInput(tag="in_mascot_out", input_type=Boolean(optional=True), prefix="-mascot_out", doc=InputDocumentation(doc="If this flag is set the MascotAdapter will read in a Mascot results file (.mascotXML) and write idXML")), ToolInput(tag="in_instrument", input_type=String(optional=True), prefix="-instrument", doc=InputDocumentation(doc="The instrument that was used to measure the spectra (default: 'Default')")), ToolInput(tag="in_precursor_mass_tolerance", input_type=Int(optional=True), prefix="-precursor_mass_tolerance", doc=InputDocumentation(doc="The precursor mass tolerance (default: '2')")), ToolInput(tag="in_peak_mass_tolerance", input_type=Int(optional=True), prefix="-peak_mass_tolerance", doc=InputDocumentation(doc="The peak mass tolerance (default: '1')")), ToolInput(tag="in_modifications", input_type=String(optional=True), prefix="-modifications", doc=InputDocumentation(doc="The modifications i.e. Carboxymethyl (C)")), ToolInput(tag="in_variable_modifications", input_type=String(optional=True), prefix="-variable_modifications", doc=InputDocumentation(doc="The variable modifications i.e. Carboxymethyl (C)")), ToolInput(tag="in_db", input_type=String(optional=True), prefix="-db", doc=InputDocumentation(doc="The database to search in (default: 'MSDB')")), ToolInput(tag="in_hits", input_type=Int(optional=True), prefix="-hits", doc=InputDocumentation(doc="The number of hits to report (default: 'AUTO')")), ToolInput(tag="in_cleavage", input_type=Int(optional=True), prefix="-cleavage", doc=InputDocumentation(doc="The enzyme descriptor to the enzyme used for digestion. (Trypsin is default, None would be best for peptide input or unspecific digestion, for more please refer to your mascot server). (default: 'Trypsin' valid: 'Trypsin', 'Arg-C', 'Asp-N', 'Asp-N_ambic', 'Chymotrypsin', 'CNBr', 'CNBr+Trypsin', 'Formic_acid', 'Lys-C', 'Lys-C/P', 'PepsinA', 'Tryp-CNBr', 'TrypChymo', 'Trypsin/P', 'V8-DE', 'V8-E', 'semiTrypsin', 'LysC+AspN', 'None')")), ToolInput(tag="in_missed_cleavages", input_type=Int(optional=True), prefix="-missed_cleavages", doc=InputDocumentation(doc="Number of allowed missed cleavages (default: '0' min: '0')")), ToolInput(tag="in_sig_threshold", input_type=Int(optional=True), prefix="-sig_threshold", doc=InputDocumentation(doc="Significance threshold (default: '0.05')")), ToolInput(tag="in_pep_homol", input_type=Int(optional=True), prefix="-pep_homol", doc=InputDocumentation(doc="Peptide homology threshold (default: '1')")), ToolInput(tag="in_pep_ident", input_type=Int(optional=True), prefix="-pep_ident", doc=InputDocumentation(doc="Peptide ident threshold (default: '1')")), ToolInput(tag="in_pep_rank", input_type=Int(optional=True), prefix="-pep_rank", doc=InputDocumentation(doc="Peptide rank (default: '1')")), ToolInput(tag="in_prot_score", input_type=Int(optional=True), prefix="-prot_score", doc=InputDocumentation(doc="Protein score (default: '1')")), ToolInput(tag="in_pep_score", input_type=Int(optional=True), prefix="-pep_score", doc=InputDocumentation(doc="Peptide score (default: '1')")), ToolInput(tag="in_pep_exp_z", input_type=Int(optional=True), prefix="-pep_exp_z", doc=InputDocumentation(doc="Peptide expected charge (default: '1')")), ToolInput(tag="in_show_unassigned", input_type=Int(optional=True), prefix="-show_unassigned", doc=InputDocumentation(doc="Show_unassigned (default: '1')")), ToolInput(tag="in_first_dim_rt", input_type=Int(optional=True), prefix="-first_dim_rt", doc=InputDocumentation(doc="Additional information which is added to every peptide identification as metavalue if set > 0 (default: '0')")), ToolInput(tag="in_boundary", input_type=String(optional=True), prefix="-boundary", doc=InputDocumentation(doc="MIME boundary for mascot output format")), ToolInput(tag="in_mass_type", input_type=String(optional=True), prefix="-mass_type", doc=InputDocumentation(doc="Mass type (default: 'Monoisotopic' valid: 'Monoisotopic', 'Average')")), ToolInput(tag="in_mascot_directory", input_type=Directory(optional=True), prefix="-mascot_directory", doc=InputDocumentation(doc="The directory in which mascot is located")), ToolInput(tag="in_temp_data_directory", input_type=Directory(optional=True), prefix="-temp_data_directory", doc=InputDocumentation(doc="A directory in which some temporary files can be stored")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*                     Output file in idXML format.\nNote: In mode 'mascot_in' Mascot generic format is written."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mascotadapter_V0_1_0().translate("wdl", allow_empty_container=True)

