from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Float, String, Int

Idmassaccuracy_V0_1_0 = CommandToolBuilder(tool="IDMassAccuracy", base_command=["IDMassAccuracy"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*                      Input mzML file list, containing the spectra. (valid formats: 'mzML')")), ToolInput(tag="in_id_in", input_type=File(optional=True), prefix="-id_in", doc=InputDocumentation(doc="*                   Input idXML file list, containing the identifications. (valid formats: 'idXML')")), ToolInput(tag="in_precursor_out", input_type=File(optional=True), prefix="-precursor_out", doc=InputDocumentation(doc="Output file which contains the deviations from the precursors (valid formats: 'csv')")), ToolInput(tag="in_precursor_columns", input_type=File(optional=True), prefix="-precursor_columns", doc=InputDocumentation(doc="Columns which will be written to the output file (default: '[MassDifference]' valid: 'MassDifference')")), ToolInput(tag="in_precursor_error_ppm", input_type=Boolean(optional=True), prefix="-precursor_error_ppm", doc=InputDocumentation(doc="If this flag is used, the precursor mass tolerances are estimated in ppm instead of Da.")), ToolInput(tag="in_fragment_out", input_type=File(optional=True), prefix="-fragment_out", doc=InputDocumentation(doc="Output file which contains the fragment ion m/z deviations (valid formats: 'csv')")), ToolInput(tag="in_fragment_columns", input_type=File(optional=True), prefix="-fragment_columns", doc=InputDocumentation(doc="Columns which will be written to the output file (default: '[MassDifference]' valid: 'MassDifference')")), ToolInput(tag="in_fragment_error_ppm", input_type=Boolean(optional=True), prefix="-fragment_error_ppm", doc=InputDocumentation(doc="If this flag is used, the fragment mass tolerances are estimated in ppm instead of Da.")), ToolInput(tag="in_fragment_mass_tolerance", input_type=Float(optional=True), prefix="-fragment_mass_tolerance", doc=InputDocumentation(doc="Maximal fragment mass tolerance which is allowed for MS/MS spectra, used for the calculation of matching ions. (default: '0.5')")), ToolInput(tag="in_separator", input_type=String(optional=True), prefix="-separator", doc=InputDocumentation(doc="Character which should be used to separate the columns in the output files (default: ' ')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_precursor_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_precursor_out", type_hint=File()), doc=OutputDocumentation(doc="Output file which contains the deviations from the precursors (valid formats: 'csv')")), ToolOutput(tag="out_precursor_columns", output_type=File(optional=True), selector=InputSelector(input_to_select="in_precursor_columns", type_hint=File()), doc=OutputDocumentation(doc="Columns which will be written to the output file (default: '[MassDifference]' valid: 'MassDifference')")), ToolOutput(tag="out_fragment_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_fragment_out", type_hint=File()), doc=OutputDocumentation(doc="Output file which contains the fragment ion m/z deviations (valid formats: 'csv')")), ToolOutput(tag="out_fragment_columns", output_type=File(optional=True), selector=InputSelector(input_to_select="in_fragment_columns", type_hint=File()), doc=OutputDocumentation(doc="Columns which will be written to the output file (default: '[MassDifference]' valid: 'MassDifference')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Idmassaccuracy_V0_1_0().translate("wdl", allow_empty_container=True)

