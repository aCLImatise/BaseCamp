from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File, Int, Directory

Caper_Server_V0_1_0 = CommandToolBuilder(tool="caper_server", base_command=["caper", "server"], inputs=[ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry-run", doc=InputDocumentation(doc="Caper does not take any action.")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Prints all logs >= DEBUG level")), ToolInput(tag="in_port", input_type=String(optional=True), prefix="--port", doc=InputDocumentation(doc="Port for Caper server")), ToolInput(tag="in_ip", input_type=String(optional=True), prefix="--ip", doc=InputDocumentation(doc="IP address for Caper server")), ToolInput(tag="in_no_server_heartbeat", input_type=Boolean(optional=True), prefix="--no-server-heartbeat", doc=InputDocumentation(doc="Disable server heartbeat file.")), ToolInput(tag="in_server_heartbeat_file", input_type=File(optional=True), prefix="--server-heartbeat-file", doc=InputDocumentation(doc="Heartbeat file for Caper clients to get IP and port of\na server")), ToolInput(tag="in_server_heartbeat_timeout", input_type=File(optional=True), prefix="--server-heartbeat-timeout", doc=InputDocumentation(doc="Timeout for a heartbeat file in Milliseconds. A\nheartbeat file older than this interval will be\nignored.")), ToolInput(tag="in_java_heap_server", input_type=Int(optional=True), prefix="--java-heap-server", doc=InputDocumentation(doc="Cromwell Java heap size for 'server' mode (java -Xmx)")), ToolInput(tag="in_backend", input_type=String(optional=True), prefix="--backend", doc=InputDocumentation(doc="Backend to run a workflow")), ToolInput(tag="in_db", input_type=String(optional=True), prefix="--db", doc=InputDocumentation(doc="Cromwell metadata database type")), ToolInput(tag="in_db_timeout", input_type=String(optional=True), prefix="--db-timeout", doc=InputDocumentation(doc="Milliseconds to wait for DB connection.")), ToolInput(tag="in_file_db", input_type=File(optional=True), prefix="--file-db", doc=InputDocumentation(doc="Default DB file for Cromwell's built-in HyperSQL\ndatabase.")), ToolInput(tag="in_mysql_db_ip", input_type=String(optional=True), prefix="--mysql-db-ip", doc=InputDocumentation(doc="MySQL Database IP address (e.g. localhost)")), ToolInput(tag="in_mysql_db_port", input_type=Int(optional=True), prefix="--mysql-db-port", doc=InputDocumentation(doc="MySQL Database TCP/IP port (e.g. 3306)")), ToolInput(tag="in_mysql_db_user", input_type=String(optional=True), prefix="--mysql-db-user", doc=InputDocumentation(doc="MySQL DB username")), ToolInput(tag="in_mysql_db_password", input_type=String(optional=True), prefix="--mysql-db-password", doc=InputDocumentation(doc="MySQL DB password")), ToolInput(tag="in_mysql_db_name", input_type=String(optional=True), prefix="--mysql-db-name", doc=InputDocumentation(doc="MySQL DB name for Cromwell")), ToolInput(tag="in_postgresql_db_ip", input_type=String(optional=True), prefix="--postgresql-db-ip", doc=InputDocumentation(doc="PostgreSQL DB IP address (e.g. localhost)")), ToolInput(tag="in_postgresql_db_port", input_type=Int(optional=True), prefix="--postgresql-db-port", doc=InputDocumentation(doc="PostgreSQL DB TCP/IP port (e.g. 5432)")), ToolInput(tag="in_postgresql_db_user", input_type=String(optional=True), prefix="--postgresql-db-user", doc=InputDocumentation(doc="PostgreSQL DB username")), ToolInput(tag="in_postgresql_db_password", input_type=String(optional=True), prefix="--postgresql-db-password", doc=InputDocumentation(doc="PostgreSQL DB password")), ToolInput(tag="in_postgresql_db_name", input_type=String(optional=True), prefix="--postgresql-db-name", doc=InputDocumentation(doc="PostgreSQL DB name for Cromwell")), ToolInput(tag="in_cromwell", input_type=File(optional=True), prefix="--cromwell", doc=InputDocumentation(doc="Path or URL for Cromwell JAR file")), ToolInput(tag="in_max_concurrent_tasks", input_type=Int(optional=True), prefix="--max-concurrent-tasks", doc=InputDocumentation(doc="Number of concurrent tasks. 'config.concurrent-job-\nlimit' in Cromwell backend configuration for each\nbackend")), ToolInput(tag="in_max_concurrent_workflows", input_type=Int(optional=True), prefix="--max-concurrent-workflows", doc=InputDocumentation(doc="Number of concurrent workflows. 'system.max-\nconcurrent-workflows' in backend configuration")), ToolInput(tag="in_max_retries", input_type=Int(optional=True), prefix="--max-retries", doc=InputDocumentation(doc="Number of retries for failing tasks. equivalent to\n'maxRetries' in workflow options JSON file.")), ToolInput(tag="in_disable_call_caching", input_type=Boolean(optional=True), prefix="--disable-call-caching", doc=InputDocumentation(doc="Disable Cromwell's call caching, which re-uses outputs\nfrom previous workflows")), ToolInput(tag="in_backend_file", input_type=File(optional=True), prefix="--backend-file", doc=InputDocumentation(doc="Custom Cromwell backend configuration file to override\nall")), ToolInput(tag="in_soft_glob_output", input_type=Boolean(optional=True), prefix="--soft-glob-output", doc=InputDocumentation(doc="Use soft-linking when globbing outputs for a\nfilesystem that does not allow hard-linking. e.g.\nbeeGFS. This flag does not work with backends based on\na Docker container. i.e. gcp and aws. Also, it does\nnot work with local backends (local/slurm/sge/pbs)\nwith --docker. However, it works fine with\n--singularity.")), ToolInput(tag="in_out_dir", input_type=Directory(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="Output directory for local backend")), ToolInput(tag="in_tmp_dir", input_type=Directory(optional=True), prefix="--tmp-dir", doc=InputDocumentation(doc="Temporary directory for local backend")), ToolInput(tag="in_gcp_prj", input_type=String(optional=True), prefix="--gcp-prj", doc=InputDocumentation(doc="GC project")), ToolInput(tag="in_gcp_zones", input_type=Int(optional=True), prefix="--gcp-zones", doc=InputDocumentation(doc="GCP zones (e.g. us-west1-b,us-central1-b)")), ToolInput(tag="in_gcp_call_caching_dup_strat", input_type=String(optional=True), prefix="--gcp-call-caching-dup-strat", doc=InputDocumentation(doc="Duplication strategy for call-cached outputs for GCP\nbackend: copy: make a copy, reference: refer to old\noutput in metadata.json.")), ToolInput(tag="in_out_gcs_bucket", input_type=String(optional=True), prefix="--out-gcs-bucket", doc=InputDocumentation(doc="Output GCS bucket for GCP backend")), ToolInput(tag="in_tmp_gcs_bucket", input_type=String(optional=True), prefix="--tmp-gcs-bucket", doc=InputDocumentation(doc="Temporary GCS bucket for GCP backend")), ToolInput(tag="in_aws_batch_arn", input_type=String(optional=True), prefix="--aws-batch-arn", doc=InputDocumentation(doc="ARN for AWS Batch")), ToolInput(tag="in_aws_region", input_type=Int(optional=True), prefix="--aws-region", doc=InputDocumentation(doc="AWS region (e.g. us-west-1)")), ToolInput(tag="in_out_s_three_bucket", input_type=Int(optional=True), prefix="--out-s3-bucket", doc=InputDocumentation(doc="Output S3 bucket for AWS backend")), ToolInput(tag="in_tmp_s_three_bucket", input_type=Int(optional=True), prefix="--tmp-s3-bucket", doc=InputDocumentation(doc="Temporary S3 bucket for AWS backend\n"))], outputs=[ToolOutput(tag="out_out_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory for local backend"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Caper_Server_V0_1_0().translate("wdl", allow_empty_container=True)

