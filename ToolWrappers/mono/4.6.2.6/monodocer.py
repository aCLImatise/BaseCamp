from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File, Directory

Monodocer_V0_1_0 = CommandToolBuilder(tool="monodocer", base_command=["monodocer"], inputs=[ToolInput(tag="in_delete", input_type=Boolean(optional=True), prefix="--delete", doc=InputDocumentation(doc="Delete removed members from the XML files.")), ToolInput(tag="in_exceptions", input_type=Boolean(optional=True), prefix="--exceptions", doc=InputDocumentation(doc="[=SOURCES] Document potential exceptions that members can")), ToolInput(tag="in_specify_flag_alter", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="Specify a FLAG to alter behavior.  See later -f*\noptions for available flags.")), ToolInput(tag="in_f_ignore_missing_types", input_type=Boolean(optional=True), prefix="--fignore-missing-types", doc=InputDocumentation(doc="Do not report an error if a --type=TYPE type\nwas not found.")), ToolInput(tag="in_fno_assembly_versions", input_type=Boolean(optional=True), prefix="--fno-assembly-versions", doc=InputDocumentation(doc="Do not generate //AssemblyVersion elements.")), ToolInput(tag="in_import", input_type=File(optional=True), prefix="--import", doc=InputDocumentation(doc="Import documentation from FILE.")), ToolInput(tag="in_lib", input_type=Directory(optional=True), prefix="--lib", doc=InputDocumentation(doc="Check for assembly references in DIRECTORY.")), ToolInput(tag="in_library", input_type=String(optional=True), prefix="--library", doc=InputDocumentation(doc="Ignored for compatibility with update-ecma-xml.")), ToolInput(tag="in_out", input_type=Directory(optional=True), prefix="--out", doc=InputDocumentation(doc="Root DIRECTORY to generate/update documentation.")), ToolInput(tag="in_search_dependent_assemblies", input_type=Directory(optional=True), prefix="-r", doc=InputDocumentation(doc="Search for dependent assemblies in the directory\ncontaining ASSEMBLY.\n(Equivalent to '-L `dirname ASSEMBLY`'.)")), ToolInput(tag="in_since", input_type=String(optional=True), prefix="--since", doc=InputDocumentation(doc="Manually specify the assembly VERSION that new\nmembers were added in.")), ToolInput(tag="in_type", input_type=String(optional=True), prefix="--type", doc=InputDocumentation(doc="Only update documentation for TYPE.")), ToolInput(tag="in_drop_ns", input_type=String(optional=True), prefix="--dropns", doc=InputDocumentation(doc="When processing assembly ASSEMBLY, strip off\nleading namespace PREFIX:\ne.g. --dropns ASSEMBLY=PREFIX")), ToolInput(tag="in_n_types", input_type=Boolean(optional=True), prefix="--ntypes", doc=InputDocumentation(doc="If the new assembly is switching to 'magic types',\nthen this switch should be defined.")), ToolInput(tag="in_preserve", input_type=Boolean(optional=True), prefix="--preserve", doc=InputDocumentation(doc="Do not delete members that don't exist in the\nassembly, but rather mark them as preserved.")), ToolInput(tag="in_multi_assembly", input_type=Boolean(optional=True), prefix="--multiassembly", doc=InputDocumentation(doc="Allow types to be in multiple assemblies.")), ToolInput(tag="in_api_style", input_type=String(optional=True), prefix="--api-style", doc=InputDocumentation(doc="Denotes the apistyle. Currently, only `classic`\nand `unified` are supported. `classic` set of\nassemblies should be run first, immediately\nfollowed by 'unified' assemblies with the `\ndropns` parameter.")), ToolInput(tag="in_generate_dot", input_type=String(), position=0, doc=InputDocumentation(doc="SOURCES is a comma-separated list of:")), ToolInput(tag="in_asm", input_type=String(), position=1, doc=InputDocumentation(doc="Method calls in same assembly")), ToolInput(tag="in_dep_asm", input_type=String(), position=2, doc=InputDocumentation(doc="Method calls in dependent assemblies")), ToolInput(tag="in_all", input_type=String(), position=3, doc=InputDocumentation(doc="Record all possible exceptions")), ToolInput(tag="in_added", input_type=String(), position=4, doc=InputDocumentation(doc="Modifier; only create <exception/>s\nfor NEW types/members"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Monodocer_V0_1_0().translate("wdl", allow_empty_container=True)

