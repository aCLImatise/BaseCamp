from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, Int, Directory, Boolean, Float

Seqsero2_Package_Py_V0_1_0 = CommandToolBuilder(tool="SeqSero2_package.py", base_command=["SeqSero2_package.py"], inputs=[ToolInput(tag="in_string_pathtoinputdata", input_type=Array(t=String(), optional=True), prefix="-i", doc=InputDocumentation(doc="<string>: path/to/input_data")), ToolInput(tag="in_int_forseparated_pairedend", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="<int>: '1' for interleaved paired-end reads, '2' for\nseparated paired-end reads, '3' for single reads, '4' for\ngenome assembly, '5' for nanopore fasta, '6' for nanopore\nfastq")), ToolInput(tag="in_string_algorithms_defaultmemoptional", input_type=String(optional=True), prefix="-b", doc=InputDocumentation(doc="<string>: algorithms for bwa mapping for allele mode;\n'mem' for mem, 'sam' for samse/sampe; default=mem;\noptional; for now we only optimized for default 'mem' mode")), ToolInput(tag="in_int_number_threads", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="<int>: number of threads for allele mode, if p >4, only 4\nthreads will be used for assembly since the amount of\nextracted reads is small, default=1")), ToolInput(tag="in_string_workflow_apply", input_type=String(optional=True), prefix="-m", doc=InputDocumentation(doc="<string>: which workflow to apply, 'a'(raw reads allele\nmicro-assembly), 'k'(raw reads and genome assembly k-mer),\ndefault=a")), ToolInput(tag="in_string_optional_specify", input_type=String(optional=True), prefix="-n", doc=InputDocumentation(doc="<string>: optional, to specify a sample name in the report")), ToolInput(tag="in_flag_flagged_only", input_type=Directory(optional=True), prefix="-c", doc=InputDocumentation(doc="<flag>: if '-c' was flagged, SeqSero2 will only output\nserotype prediction without the directory containing log\nfiles")), ToolInput(tag="in_flag_flagged_not", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="<flag>: if '-s' was flagged, SeqSero2 will not output\nheader in SeqSero_result.tsv")), ToolInput(tag="in_check", input_type=Boolean(optional=True), prefix="--check", doc=InputDocumentation(doc="<flag>: use '--check' flag to check the required")), ToolInput(tag="in_d", input_type=Directory(optional=True), prefix="-d", doc=InputDocumentation(doc="")), ToolInput(tag="in_v_one_dot_one_dot_one", input_type=Float(), position=0, doc=InputDocumentation(doc="optional arguments:")), ToolInput(tag="in_output", input_type=String(), position=1, doc=InputDocumentation(doc="-d D              <string>: optional, to specify an output directory name,")), ToolInput(tag="in_dependencies", input_type=String(), position=0, doc=InputDocumentation(doc="-v, --version     show program's version number and exit"))], outputs=[ToolOutput(tag="out_flag_flagged_only", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_flag_flagged_only", type_hint=File()), doc=OutputDocumentation(doc="<flag>: if '-c' was flagged, SeqSero2 will only output\nserotype prediction without the directory containing log\nfiles")), ToolOutput(tag="out_d", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_d", type_hint=File()), doc=OutputDocumentation(doc=""))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seqsero2_Package_Py_V0_1_0().translate("wdl", allow_empty_container=True)

