from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Int, Boolean, String, File

Pargenes_Hpc_Debug_Py_V0_1_0 = CommandToolBuilder(tool="pargenes_hpc_debug.py", base_command=["pargenes-hpc-debug.py"], inputs=[ToolInput(tag="in_alignments_dir", input_type=Directory(optional=True), prefix="--alignments-dir", doc=InputDocumentation(doc="Directory containing the fasta files")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Output directory")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="The number of computational cores available for\ncomputation. Should at least 2.")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Random seed, for reproductibility of RAxML-NG runs.\nSet to 0 by default")), ToolInput(tag="in_continue", input_type=Boolean(optional=True), prefix="--continue", doc=InputDocumentation(doc="Allow pargenes to continue the analysis from the last")), ToolInput(tag="in_scheduler", input_type=String(optional=True), prefix="--scheduler", doc=InputDocumentation(doc="Expert-user only.")), ToolInput(tag="in_core_assignment", input_type=String(optional=True), prefix="--core-assignment", doc=InputDocumentation(doc="Policy to decide the per-job number of cores (low\nfavors a low per-job number of cores)")), ToolInput(tag="in_valgrind", input_type=Boolean(optional=True), prefix="--valgrind", doc=InputDocumentation(doc="Run the scheduler with valgrind")), ToolInput(tag="in_job_failure_fatal", input_type=Boolean(optional=True), prefix="--job-failure-fatal", doc=InputDocumentation(doc="Stop ParGenes when a job fails")), ToolInput(tag="in_per_msa_ra_xml_parameters", input_type=File(optional=True), prefix="--per-msa-raxml-parameters", doc=InputDocumentation(doc="A file containing per-msa raxml parameters")), ToolInput(tag="in_random_starting_trees", input_type=Int(optional=True), prefix="--random-starting-trees", doc=InputDocumentation(doc="The number of starting trees")), ToolInput(tag="in_parsimony_starting_trees", input_type=Int(optional=True), prefix="--parsimony-starting-trees", doc=InputDocumentation(doc="The number of starting parsimony trees")), ToolInput(tag="in_ra_xml_global_parameters", input_type=File(optional=True), prefix="--raxml-global-parameters", doc=InputDocumentation(doc="A file containing the parameters to pass to raxml")), ToolInput(tag="in_ra_xml_global_parameters_string", input_type=String(optional=True), prefix="--raxml-global-parameters-string", doc=InputDocumentation(doc="List of parameters to pass to raxml (see also --raxml-\nglobal-parameters)")), ToolInput(tag="in_bs_trees", input_type=Int(optional=True), prefix="--bs-trees", doc=InputDocumentation(doc="The number of bootstrap trees to compute")), ToolInput(tag="in_autom_re", input_type=Boolean(optional=True), prefix="--autoMRE", doc=InputDocumentation(doc="Stop computing bootstrap trees after autoMRE bootstrap\nconvergence test. You have to specify the maximum\nnumber of bootstrap trees with -b or --bs-tree")), ToolInput(tag="in_ra_xml_binary", input_type=File(optional=True), prefix="--raxml-binary", doc=InputDocumentation(doc="Custom path to raxml-ng executable. Please refer to\nthe wiki before setting this variable yourself.")), ToolInput(tag="in_percentage_jobs_double_cores", input_type=Int(optional=True), prefix="--percentage-jobs-double-cores", doc=InputDocumentation(doc="Percentage (between 0 and 1) of jobs that will receive\ntwice more cores")), ToolInput(tag="in_use_model_test", input_type=Boolean(optional=True), prefix="--use-modeltest", doc=InputDocumentation(doc="Autodetect the model with modeltest")), ToolInput(tag="in_model_test_global_parameters", input_type=File(optional=True), prefix="--modeltest-global-parameters", doc=InputDocumentation(doc="A file containing the parameters to pass to modeltest")), ToolInput(tag="in_per_msa_model_test_parameters", input_type=File(optional=True), prefix="--per-msa-modeltest-parameters", doc=InputDocumentation(doc="A file containing per-msa modeltest parameters")), ToolInput(tag="in_model_test_criteria", input_type=String(optional=True), prefix="--modeltest-criteria", doc=InputDocumentation(doc="Alignments datatype")), ToolInput(tag="in_model_test_per_job_cores", input_type=Int(optional=True), prefix="--modeltest-perjob-cores", doc=InputDocumentation(doc="Number of cores to assign to each modeltest core (at\nleast 4)")), ToolInput(tag="in_model_test_binary", input_type=File(optional=True), prefix="--modeltest-binary", doc=InputDocumentation(doc="Custom path to modeltest-ng executable. Please refer\nto the wiki before setting this variable yourself.")), ToolInput(tag="in_use_astral", input_type=Boolean(optional=True), prefix="--use-astral", doc=InputDocumentation(doc="Infer a species tree with astral")), ToolInput(tag="in_astral_global_parameters", input_type=File(optional=True), prefix="--astral-global-parameters", doc=InputDocumentation(doc="A file containing additional parameters to pass to\nastral")), ToolInput(tag="in_experiment_disable_jobs_sorting", input_type=Boolean(optional=True), prefix="--experiment-disable-jobs-sorting", doc=InputDocumentation(doc="For experimenting only! Removes the sorting step in\nthe scheduler")), ToolInput(tag="in_retry", input_type=Int(optional=True), prefix="--retry", doc=InputDocumentation(doc="Number of time the scheduler should try to restart\nafter an error\n")), ToolInput(tag="in_checkpoint", input_type=String(), position=0, doc=InputDocumentation(doc="--msa-filter MSA_FILTER")), ToolInput(tag="in_process", input_type=String(), position=0, doc=InputDocumentation(doc="-d {nt,aa}, --datatype {nt,aa}"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory"))], container="quay.io/biocontainers/pargenes:1.2.0--py37hf7b2935_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pargenes_Hpc_Debug_Py_V0_1_0().translate("wdl")

