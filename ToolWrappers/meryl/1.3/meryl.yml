!Command
command:
- meryl
positional:
- !Positional
  optional: false
  position: 0
  name: statistics
  description: display total, unique, distnict, present number of the kmers on the
    screen.  accepts exactly one input.
- !Positional
  optional: false
  position: 1
  name: histogram
  description: display kmer frequency on the screen as 'frequency<tab>count'.  accepts
    exactly one input.
- !Positional
  optional: false
  position: 2
  name: print
  description: display kmers on the screen as 'kmer<tab>count'.  accepts exactly one
    input.
- !Positional
  optional: false
  position: 3
  name: count
  description: Count the occurrences of canonical kmers in the input.  must have 'output'
    specified.
- !Positional
  optional: false
  position: 4
  name: count-forward
  description: Count the occurrences of forward kmers in the input.  must have 'output'
    specified.
- !Positional
  optional: false
  position: 5
  name: count-reverse
  description: "Count the occurrences of reverse kmers in the input.  must have 'output'\
    \ specified.\nk=<K>              create mers of size K bases (mandatory).\nn=<N>\
    \              expect N mers in the input (optional; for precise memory sizing).\n\
    memory=M           use no more than (about) M GB memory.\nthreads=T          use\
    \ no more than T threads.\ncompress           compress homopolymer runs to a single\
    \ letter."
- !Positional
  optional: false
  position: 0
  name: union
  description: return kmers that occur in any input, set the count to the number of
    inputs with this kmer.
- !Positional
  optional: false
  position: 1
  name: union-min
  description: return kmers that occur in any input, set the count to the minimum
    count
- !Positional
  optional: false
  position: 2
  name: union-max
  description: return kmers that occur in any input, set the count to the maximum
    count
- !Positional
  optional: false
  position: 3
  name: union-sum
  description: return kmers that occur in any input, set the count to the sum of the
    counts
- !Positional
  optional: false
  position: 4
  name: intersect
  description: return kmers that occur in all inputs, set the count to the count in
    the first input.
- !Positional
  optional: false
  position: 5
  name: intersect-min
  description: return kmers that occur in all inputs, set the count to the minimum
    count.
- !Positional
  optional: false
  position: 6
  name: intersect-max
  description: return kmers that occur in all inputs, set the count to the maximum
    count.
- !Positional
  optional: false
  position: 7
  name: intersect-sum
  description: return kmers that occur in all inputs, set the count to the sum of
    the counts.
- !Positional
  optional: false
  position: 8
  name: subtract
  description: return kmers that occur in the first input, subtracting counts from
    the other inputs
- !Positional
  optional: false
  position: 9
  name: difference
  description: return kmers that occur in the first input, but none of the other inputs
named: []
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "usage: meryl ...\n\n  A meryl command line is formed as a series of commands\
  \ and files, possibly\n  grouped using square brackets.  Each command operates on\
  \ the file(s) that\n  are listed after it.\n\n  COMMANDS:\n\n    statistics    \
  \       display total, unique, distnict, present number of the kmers on the screen.\
  \  accepts exactly one input.\n    histogram            display kmer frequency on\
  \ the screen as 'frequency<tab>count'.  accepts exactly one input.\n    print  \
  \              display kmers on the screen as 'kmer<tab>count'.  accepts exactly\
  \ one input.\n\n    count                Count the occurrences of canonical kmers\
  \ in the input.  must have 'output' specified.\n    count-forward        Count the\
  \ occurrences of forward kmers in the input.  must have 'output' specified.\n  \
  \  count-reverse        Count the occurrences of reverse kmers in the input.  must\
  \ have 'output' specified.\n      k=<K>              create mers of size K bases\
  \ (mandatory).\n      n=<N>              expect N mers in the input (optional; for\
  \ precise memory sizing).\n      memory=M           use no more than (about) M GB\
  \ memory.\n      threads=T          use no more than T threads.\n      compress\
  \           compress homopolymer runs to a single letter.\n\n    less-than N   \
  \       return kmers that occur fewer than N times in the input.  accepts exactly\
  \ one input.\n    greater-than N       return kmers that occur more than N times\
  \ in the input.  accepts exactly one input.\n    equal-to N           return kmers\
  \ that occur exactly N times in the input.  accepts exactly one input.\n    not-equal-to\
  \ N       return kmers that do not occur exactly N times in the input.  accepts\
  \ exactly one input.\n\n    increase X           add X to the count of each kmer.\n\
  \    decrease X           subtract X from the count of each kmer.\n    multiply\
  \ X           multiply the count of each kmer by X.\n    divide X             divide\
  \ the count of each kmer by X.\n    divide-round X       divide the count of each\
  \ kmer by X and round results. count < X will become 1.\n    modulo X          \
  \   set the count of each kmer to the remainder of the count divided by X.\n\n \
  \   union                return kmers that occur in any input, set the count to\
  \ the number of inputs with this kmer.\n    union-min            return kmers that\
  \ occur in any input, set the count to the minimum count\n    union-max        \
  \    return kmers that occur in any input, set the count to the maximum count\n\
  \    union-sum            return kmers that occur in any input, set the count to\
  \ the sum of the counts\n\n    intersect            return kmers that occur in all\
  \ inputs, set the count to the count in the first input.\n    intersect-min    \
  \    return kmers that occur in all inputs, set the count to the minimum count.\n\
  \    intersect-max        return kmers that occur in all inputs, set the count to\
  \ the maximum count.\n    intersect-sum        return kmers that occur in all inputs,\
  \ set the count to the sum of the counts.\n\n    subtract             return kmers\
  \ that occur in the first input, subtracting counts from the other inputs\n\n  \
  \  difference           return kmers that occur in the first input, but none of\
  \ the other inputs\n    symmetric-difference return kmers that occur in exactly\
  \ one input\n\n  MODIFIERS:\n\n    output O             write kmers generated by\
  \ the present command to an output  meryl database O\n                         mandatory\
  \ for count operations.\n\n  EXAMPLES:\n\n  Example:  Report 22-mers present in\
  \ at least one of input1.fasta and input2.fasta.\n            Kmers from each input\
  \ are saved in meryl databases 'input1' and 'input2',\n            but the kmers\
  \ in the union are only reported to the screen.\n\n            meryl print \\\n\
  \                    union \\\n                      [count k=22 input1.fasta output\
  \ input1] \\\n                      [count k=22 input2.fasta output input2]\n\n\
  \  Example:  Find the highest count of each kmer present in both files, save the\
  \ kmers to\n            database 'maxCount'.\n\n            meryl intersect-max\
  \ input1 input2 output maxCount\n\n  Example:  Find unique kmers common to both\
  \ files.  Brackets are necessary\n            on the first 'equal-to' command to\
  \ prevent the second 'equal-to' from\n            being used as an input to the\
  \ first 'equal-to'.\n\n            meryl intersect [equal-to 1 input1] equal-to\
  \ 1 input2\n\nCan't interpret '--help': not a meryl command, option, or recognized\
  \ input file.\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/meryl:1.3--h1b792b2_0
