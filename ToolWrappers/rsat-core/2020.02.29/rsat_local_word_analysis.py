from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String

Rsat_Local_Word_Analysis_V0_1_0 = CommandToolBuilder(tool="rsat_local_word_analysis", base_command=["rsat", "local-word-analysis"], inputs=[ToolInput(tag="in_verbosity_set_verbosity", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="#, --verbosity=#   set verbosity to level #")), ToolInput(tag="in__input_read", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="#, --input=#       read sequence from # (must be in FASTA format)\nif not specified, the standard input is used")), ToolInput(tag="in__output_results", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="#, --output=#      output results to #\nif not specified, the standard output is used")), ToolInput(tag="in_length_set_length", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="#, --length=#      set oligomer length to # (REQUIRED ARGUMENT)\nwhen the option dyad is used # represents the length of one monad\nEXAMPLE: --length=7")), ToolInput(tag="in_dyad", input_type=Boolean(optional=True), prefix="--dyad", doc=InputDocumentation(doc="count dyads instead of oligomers")), ToolInput(tag="in_spacing", input_type=Int(optional=True), prefix="--spacing", doc=InputDocumentation(doc=":B         when using dyads set the spacing between A to B\nEXAMPLE: --length=3 --dyad --spacing=1:20")), ToolInput(tag="in_under", input_type=Boolean(optional=True), prefix="--under", doc=InputDocumentation(doc="use under-represented words statistics")), ToolInput(tag="in__strand_search", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="#, --strand=#      search in forward strand + or in both strands +- (default)\nEXAMPLE: --strand=+")), ToolInput(tag="in_overlap", input_type=Boolean(optional=True), prefix="--overlap", doc=InputDocumentation(doc="allow overlapping oligomer occurrences\nEXAMPLE: --overlap")), ToolInput(tag="in_window", input_type=Boolean(optional=True), prefix="--window", doc=InputDocumentation(doc="=#            count oligomers in fixed window of length #\nuse --window=variable to use a variable size window (slower)\nuse --window=none to search without window\nEXAMPLE: --window=20 (window of length 20)")), ToolInput(tag="in_window_group", input_type=Boolean(optional=True), prefix="--windowgroup", doc=InputDocumentation(doc="=#       count oligomers in fixed window of length #, 2#, ...\nonly valid when the --center option is used\nEXAMPLE: --center=0 --windowgroup=20 (use a window of length 20, 40, 60, ...)")), ToolInput(tag="in_right", input_type=Boolean(optional=True), prefix="--right", doc=InputDocumentation(doc="=#             use right bound position as reference\nposition #. This should be used when dealing with\nupstream sequences.\nEXAMPLE: --right=-1 (use right bound of input\nsequence as position -1)")), ToolInput(tag="in_left", input_type=Boolean(optional=True), prefix="--left", doc=InputDocumentation(doc="=#              use left bound position as reference\nposition #. This should be used when dealing with\ndownstream sequences.\nEXAMPLE: --left=0 (use left bound of input\nsequences as position 0)")), ToolInput(tag="in_center", input_type=Boolean(optional=True), prefix="--center", doc=InputDocumentation(doc="=#            use center position as reference\nposition #.\nEXAMPLE: --center=0 (use center of input\nsequences as position 0)")), ToolInput(tag="in__markov_use", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="#, --markov=#      use a Markov model of order # calibrated from\ninput sequences\norder 0 corresponds to single nucleotide frequencies\nEXAMPLE: --markov=2 (Markov chain of order 2)")), ToolInput(tag="in_bg_file", input_type=Boolean(optional=True), prefix="--bgfile", doc=InputDocumentation(doc="=#            use a predefined local-word-analysis background model.\nEXAMPLE --bgfile=mybgfile")), ToolInput(tag="in_bg_oligo", input_type=Boolean(optional=True), prefix="--bgoligo", doc=InputDocumentation(doc="=#           use a predefined oligo-analysis background model\nEXAMPLE: --bgolio=myfile.gz")), ToolInput(tag="in_bg_oligo_markov", input_type=Boolean(optional=True), prefix="--bgoligomarkov", doc=InputDocumentation(doc="=#     use a Markovian background model loaded from a\npredefined oligo-analysis file\nEXAMPLE: --bgoligomarkov=myfile.gz")), ToolInput(tag="in_bg_window", input_type=Boolean(optional=True), prefix="--bgwindow", doc=InputDocumentation(doc="=#          use a widow size of length # in background model\nEXAMPLE: --bgwindow=200 (use a background window of length 200)")), ToolInput(tag="in_max", input_type=Int(optional=True), prefix="--max", doc=InputDocumentation(doc="VALUE     limit output to items that have PARAM <= VALUE\nEXAMPLE: --max rank 10\nSupported parameters: seq,identifier,obs_freq,exp_\nfreq,occ,exp_occ,occ_P,occ_E,occ_sig,start,end,wid\nth,n_win,n_pos,w_rank,rank")), ToolInput(tag="in_min", input_type=Int(optional=True), prefix="--min", doc=InputDocumentation(doc="VALUE     limit output to items that have PARAM >= VALUE\nEXAMPLE: --min occ_sig 0\nSupported parameters:seq,identifier,obs_freq,exp_f\nreq,occ,exp_occ,occ_P,occ_E,occ_sig,start,end,widt\nh,n_win,n_pos,w_rank,rank")), ToolInput(tag="in_sort", input_type=Boolean(optional=True), prefix="--sort", doc=InputDocumentation(doc="=[+][-]PARAM    sort ouput according to PARAM in growing\norder (+) or inverse (-)\nEXAMPLE: --sort=+label\nSupported parameters:seq,identifier,obs_freq,exp_f\nreq,occ,exp_occ,occ_P,occ_E,occ_sig,start,end,width\nh,n_win,n_pos,w_rank,rank")), ToolInput(tag="in_local_word_analysis", input_type=String(), position=0, doc=InputDocumentation(doc="VERSION")), ToolInput(tag="in_author", input_type=Int(), position=1, doc=InputDocumentation(doc="AUTHOR")), ToolInput(tag="in_sequences", input_type=String(), position=0, doc=InputDocumentation(doc="pattern discovery")), ToolInput(tag="in_p_value", input_type=String(), position=0, doc=InputDocumentation(doc="The probability to observe exactly k occurrences of a given oligomer\nis computed using the binomial statistics\nunderrepresentation\nk           k       (N-k)\nP(X<=k) = SUM C(k,N)  p   (1-p)\ni=0\noverreprensentation\nN            k       (N-k)\nP(X>=k) = SUM  C(k,N)  p   (1-p)\ni=k")), ToolInput(tag="in_e_value", input_type=String(), position=1, doc=InputDocumentation(doc="E-VALUE = number_of_tests * P-VALUE"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rsat_Local_Word_Analysis_V0_1_0().translate("wdl", allow_empty_container=True)

