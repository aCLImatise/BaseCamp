!Command
command:
- rsat
- reverse-complement
positional:
- !Positional
  optional: false
  position: 0
  name: reverse-complement
  description: "\e[1mDESCRIPTION\e[0m"
- !Positional
  optional: false
  position: 0
  name: sequences
  description: "\e[1mAUTHORS\e[0m"
- !Positional
  optional: false
  position: 0
  name: util
  description: "\e[1mUSAGE\e[0m"
named: []
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\e[1mNAME\e[0m\n    reverse-complement\n\n\e[1mDESCRIPTION\e[0m\n    Returns\
  \ the reverse complement of input DNA sequences or IUPAC-formatted\n    motifs.\
  \ The IUPAC code for ambiguous nucleotides is supported, as well\n    as dyad-type\
  \ spacings.\n\n\e[1mCATEGORY\e[0m\n    sequences\n\n\e[1mAUTHORS\e[0m\n    Jacques.van-Helden\\\
  @univ-amu.fr\n\n\e[1mCATEGORY\e[0m\n    util\n\n\e[1mUSAGE\e[0m\n    reverse-complement\
  \ [-i inputfile] [-o outputfile] [-v #] [...]\n\n\e[1mINPUT FORMAT\e[0m\n    Any\
  \ input format supported by \e[33mconvert-seq\e[0m. For details, type convert-seq\n\
  \    -h\n\n    The standard degenerate nucleotide code of the IUPAC-IUB commission\
  \ is\n    supported. The pattern sequence should thus only contain the following\n\
  \    characters: A, T, G, C single nucleotide codes R = A or G Y = C or T M =\n\
  \    A or C K = G or T S = G or C W = A or T B = all except A D = all except\n \
  \   C H = all except G V = all except T N = any nucleotide\n\n    Upper and lower\
  \ case are considered equivalent. The multiplier (ex: A{5}\n    = AAAAA, T{5,10}\
  \ = any combination of 5 to 10 Ts) can be used, but in\n    this case the input\
  \ sequence must be embraced in single quotes (ex:\n    'CCCN{8}GGG').\n\n    Alternatively\
  \ to the degenerate code, brackets can be used (ex: [AG]\n    means A or G).\n\n\
  \e[1mEXAMPLES\e[0m\n     echo GATAAG | reverse-complement -in_format raw\n     \
  \   Returns GTTATC\n\n     echo TTTRTT  | reverse-complement -in_format raw\n  \
  \      returns AAYAAA\n\n     echo 'GAT[TA]A' | reverse-complement -in_format raw\n\
  \        returns T[TA]ATC\n\n     echo 'cccn{8,10}aaa' | reverse-complement -in_format\
  \ raw -lc\n        returns tttn{8,10}ggg\n\n\e[1mOPTIONS\e[0m\n    \e[1m-v #\e[0m\n\
  \        Level of verbosity (detail in the warning messages during execution)\n\n\
  \    \e[1m-h\e[0m  Display full help message\n\n    \e[1m-help\e[0m\n        Same\
  \ as -h\n\n    \e[1m-i inputfile\e[0m\n        If no input file is specified, the\
  \ standard input is used. This\n        allows to use the command within a pipe.\n\
  \n    \e[1m-o outputfile\e[0m\n        If no output file is specified, the standard\
  \ output is used. This\n        allows to use the command within a pipe.\n\n   \
  \ \e[1m-in_format input_format\e[0m\n        Input sequence format. Can be any input\
  \ format supported by\n        \e[33mconvert-seq\e[0m.\n\n        Default: fasta.\n\
  \n    \e[1m-out_format output_format\e[0m\n        Output sequence format. Can be\
  \ any output format supported by\n        \e[33mconvert-seq\e[0m.\n\n        Default:\
  \ fasta.\n\n    \e[1m-lc\e[0m Export sequences in lowercases.\n\n    \e[1m-uc\e\
  [0m Export sequences in uppercases.\n\n    \e[1m-add\e[0m\n        Add the reverse\
  \ complement besides the direct sequences of the\n        input. The result is a\
  \ tab-delimited file with 2 columns: 1) input\n        sequence 2) reverse complement\n\
  \n    \e[1m-sep\e[0m\n        Output separator between direct and reverse complementary\
  \ sequence.\n\n        Default: \\t (tab character)\n\n        This option is only\
  \ valid when the option -add is active.\n\n\e[1mSEE ALSO\e[0m\n  \e[1mconvert-seq\e\
  [0m\n    \e[33mconvert-seq\e[0m includes an option -addrc that adds the reverse\
  \ complement.\n\n"
generated_using:
- -h
docker_image:
