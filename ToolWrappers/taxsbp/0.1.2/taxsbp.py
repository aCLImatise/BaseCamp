from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean

Taxsbp_V0_1_0 = CommandToolBuilder(tool="taxsbp", base_command=["taxsbp"], inputs=[ToolInput(tag="in_tabseparated_fields_sequence", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="Tab-separated with the fields: sequence id <tab>\nsequence length <tab> taxonomic id [<tab>\nspecialization]")), ToolInput(tag="in_nodesdmp_ncbi_taxonomy", input_type=File(optional=True), prefix="-n", doc=InputDocumentation(doc="nodes.dmp from NCBI Taxonomy")), ToolInput(tag="in_mergeddmp_ncbi_taxonomy", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="merged.dmp from NCBI Taxonomy")), ToolInput(tag="in_approximate_number_bins", input_type=Int(optional=True), prefix="-b", doc=InputDocumentation(doc="Approximate number of bins (estimated by total\nlength/bin number). Default: 50 [Mutually exclusive -l]")), ToolInput(tag="in_maximum_bin_length", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="Maximum bin length (in bp). Use this parameter insted\nof -b to define the number of bins [Mutually exclusive\n-b]")), ToolInput(tag="in_fragment_sequences_accesionstartend", input_type=String(optional=True), prefix="-a", doc=InputDocumentation(doc="Fragment sequences into pieces, output accession will\nbe modified with positions: ACCESION/start:end")), ToolInput(tag="in_overlap_length_fragments", input_type=Int(optional=True), prefix="-o", doc=InputDocumentation(doc="Overlap length between fragments [Only valid with -a]")), ToolInput(tag="in_precluster_sequences_ranktaxidspecializationso", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="Pre-cluster sequences into rank/taxid/specialization,\nso they won't be splitted among bins\n[none,specialization name,taxid,species,genus,...]\nDefault: none")), ToolInput(tag="in_make_bins_ranktaxidspecialization", input_type=String(optional=True), prefix="-r", doc=InputDocumentation(doc="Make bins rank/taxid/specialization exclusive, so bins\nwon't have mixed sequences. When the chosen rank is not\npresent on a sequence lineage, this sequence will be\ntaxid/specialization exclusive. [none,specialization\nname,taxid,species,genus,...] Default: none")), ToolInput(tag="in_specialization_name_eg", input_type=String(optional=True), prefix="-z", doc=InputDocumentation(doc="Specialization name (e.g. assembly, strain). If given,\nTaxSBP will cluster entries on a specialized level\nafter the taxonomic id. The specialization identifier\nshould be provided as an extra collumn in the\ninput_file ans should respect the taxonomic hiercharchy\n(one taxid -> multiple specializations / one\nspecialization -> one taxid). Default: ''")), ToolInput(tag="in_previously_generated_files", input_type=File(optional=True), prefix="-u", doc=InputDocumentation(doc="Previously generated files to be updated. Default: ''")), ToolInput(tag="in_show_programs_number", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="show program's version number and exit"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Taxsbp_V0_1_0().translate("wdl", allow_empty_container=True)

