from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Dsrc_V0_1_0 = CommandToolBuilder(tool="dsrc", base_command=["dsrc"], inputs=[ToolInput(tag="in_dna_compression_mode", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="<n>   : DNA compression mode: 0-3, default: 0")), ToolInput(tag="in_quality_compression_mode", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="<n>   : Quality compression mode: 0-2, default: 0")), ToolInput(tag="in_keep_only_fields", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="<1,..>: keep only those fields no. in tag field string, default: keep all")), ToolInput(tag="in_fastq_input_buffer", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="<n>   : FASTQ input buffer size in MB, default: 8")), ToolInput(tag="in_quality_offset_default", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="<n>   : Quality offset, default: 0")), ToolInput(tag="in_use_quality_mode", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc=": use Quality lossy mode (Illumina binning scheme), default: 0")), ToolInput(tag="in_calculate_check_calculation", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc=": calculate and check CRC32 checksum calculation per block, default: 0")), ToolInput(tag="in_compression_mode_version", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="<n>   : compression mode, where n:\n* 0    - fast version with decent ratio (-d0 -q0 -b16)\n* 1    - slower version with better ratio (-d2 -q2 -b64)\n* 2    - slow version with best ratio (-d3 -q2 -b256)")), ToolInput(tag="in_processing_threads_number", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="<n>   : processing threads number, default (available h/w threads): 8, max: 64")), ToolInput(tag="in_use_stdinstdout_readingwriting", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc=": use stdin/stdout for reading/writing raw FASTQ data")), ToolInput(tag="in_verbose_mode_default", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=": verbose mode, default: false")), ToolInput(tag="in_c_vertical_lined", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_input_filename", input_type=File(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_output_filename", input_type=File(), position=2, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_filename", output_type=File(), selector=InputSelector(input_to_select="in_output_filename", type_hint=File()), doc=OutputDocumentation(doc=""))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dsrc_V0_1_0().translate("wdl", allow_empty_container=True)

