from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, Float, File

Cath_Resolve_Hits_V0_1_0 = CommandToolBuilder(tool="cath_resolve_hits", base_command=["cath-resolve-hits"], inputs=[ToolInput(tag="in_output_version_information", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --version ]                               Output version information")), ToolInput(tag="in_input_format", input_type=String(optional=True), prefix="--input-format", doc=InputDocumentation(doc="(=raw_with_scores)     Parse the input data from <format>, one of available formats:")), ToolInput(tag="in_min_gap_length", input_type=Int(optional=True), prefix="--min-gap-length", doc=InputDocumentation(doc="(=30)                When parsing starts/stops from alignment data, ignore gaps of less than <length> residues")), ToolInput(tag="in_input_hits_are_grouped", input_type=Boolean(optional=True), prefix="--input-hits-are-grouped", doc=InputDocumentation(doc="Rely on the input hits being grouped by query protein\n(so the run is faster and uses less memory)")), ToolInput(tag="in_overlap_trim_spec", input_type=Int(optional=True), prefix="--overlap-trim-spec", doc=InputDocumentation(doc="(=30/10)            Allow different hits' segments to overlap a bit by trimming all segments using spec <trim>\nof the form n/m (n is a segment length; m is the *total* length to be trimmed off both ends)\nFor longer segments, total trim stays at m; for shorter, it decreases linearly (to 0 for length 1).\nTo choose: set m to the biggest total trim you'd want for a really long segment;\nthen, set n to length of the shortest segment you'd want to have that total trim")), ToolInput(tag="in_min_seg_length", input_type=Int(optional=True), prefix="--min-seg-length", doc=InputDocumentation(doc="(=7)                 Ignore all segments that are fewer than <length> residues long")), ToolInput(tag="in_long_domains_preference", input_type=Int(optional=True), prefix="--long-domains-preference", doc=InputDocumentation(doc="(=0)           Prefer longer hits to degree <val>\n(<val> may be negative to prefer shorter; 0 leaves scores unaffected)")), ToolInput(tag="in_high_scores_preference", input_type=Int(optional=True), prefix="--high-scores-preference", doc=InputDocumentation(doc="(=0)            Prefer higher scores to degree <val>\n(<val> may be negative to reduce preference for higher scores; 0 leaves scores unaffected)")), ToolInput(tag="in_apply_cath_rules", input_type=Boolean(optional=True), prefix="--apply-cath-rules", doc=InputDocumentation(doc="[DEPRECATED] Apply rules specific to CATH-Gene3D during the parsing and processing")), ToolInput(tag="in_naive_greedy", input_type=Boolean(optional=True), prefix="--naive-greedy", doc=InputDocumentation(doc="Use a naive, greedy approach to resolving (not recommended except for comparison)")), ToolInput(tag="in_worst_permissible_evalue", input_type=Float(optional=True), prefix="--worst-permissible-evalue", doc=InputDocumentation(doc="(=0.001)   Ignore any hits with an evalue worse than <evalue>")), ToolInput(tag="in_worst_permissible_bit_score", input_type=Int(optional=True), prefix="--worst-permissible-bitscore", doc=InputDocumentation(doc="(=10)  Ignore any hits with a bitscore worse than <bitscore>")), ToolInput(tag="in_worst_permissible_score", input_type=String(optional=True), prefix="--worst-permissible-score", doc=InputDocumentation(doc="Ignore any hits with a score worse than <score>")), ToolInput(tag="in_filter_query_id", input_type=String(optional=True), prefix="--filter-query-id", doc=InputDocumentation(doc="Ignore all input data except that for query protein(s) <id>\n(may be specified multiple times for multiple query proteins)")), ToolInput(tag="in_limit_queries", input_type=Boolean(optional=True), prefix="--limit-queries", doc=InputDocumentation(doc="[=<num>(=1)]                   Only process the first <num> query protein(s) encountered in the input data")), ToolInput(tag="in_hits_text_to_file", input_type=File(optional=True), prefix="--hits-text-to-file", doc=InputDocumentation(doc="Write the resolved hits in plain text to file <file>")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppress the default output of resolved hits in plain text to stdout")), ToolInput(tag="in_output_trimmed_hits", input_type=Boolean(optional=True), prefix="--output-trimmed-hits", doc=InputDocumentation(doc="When writing out the final hits, output the hits' starts/stop as they are *after trimming*")), ToolInput(tag="in_summarise_to_file", input_type=File(optional=True), prefix="--summarise-to-file", doc=InputDocumentation(doc="Write a brief text summary of the input data to file <file> (or '-' for stdout)")), ToolInput(tag="in_html_output_to_file", input_type=File(optional=True), prefix="--html-output-to-file", doc=InputDocumentation(doc="Write the results as HTML to file <file> (or '-' for stdout)")), ToolInput(tag="in_json_output_to_file", input_type=File(optional=True), prefix="--json-output-to-file", doc=InputDocumentation(doc="Write the results as JSON to file <file> (or '-' for stdout)")), ToolInput(tag="in_export_css_file", input_type=File(optional=True), prefix="--export-css-file", doc=InputDocumentation(doc="Export the CSS used in the HTML output to <file> (or '-' for stdout)")), ToolInput(tag="in_restrict_html_within_body", input_type=Boolean(optional=True), prefix="--restrict-html-within-body", doc=InputDocumentation(doc="Restrict HTML output to the contents of the body tag.\nThe contents should be included inside a body tag of class crh-body")), ToolInput(tag="in_html_max_num_non_soln_hits", input_type=Int(optional=True), prefix="--html-max-num-non-soln-hits", doc=InputDocumentation(doc="(=80)       Only display up to <num> non-solution hits in the HTML")), ToolInput(tag="in_html_exclude_rejected_hits", input_type=Boolean(optional=True), prefix="--html-exclude-rejected-hits", doc=InputDocumentation(doc="Exclude hits rejected by the score filters from the HTML")), ToolInput(tag="in_cath_rules_help", input_type=Boolean(optional=True), prefix="--cath-rules-help", doc=InputDocumentation(doc="Show help on the rules activated by the (DEPRECATED) --apply-cath-rules option")), ToolInput(tag="in_raw_format_help", input_type=Boolean(optional=True), prefix="--raw-format-help", doc=InputDocumentation(doc="Show help about the raw input formats (raw_with_scores and raw_with_evalues)")), ToolInput(tag="in_hmmer_dom_tbl_out", input_type=String(), position=0, doc=InputDocumentation(doc="- HMMER domtblout format (must assume all hits are continuous)")), ToolInput(tag="in_hmms_can_out", input_type=String(), position=1, doc=InputDocumentation(doc="- HMMER hmmscan output format (can be used to deduce discontinuous hits)")), ToolInput(tag="in_hmm_search_out", input_type=String(), position=2, doc=InputDocumentation(doc="- HMMER hmmsearch output format (can be used to deduce discontinuous hits)")), ToolInput(tag="in_raw_with_scores", input_type=String(), position=3, doc=InputDocumentation(doc="- 'raw' format with scores"))], outputs=[ToolOutput(tag="out_html_output_to_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_html_output_to_file", type_hint=File()), doc=OutputDocumentation(doc="Write the results as HTML to file <file> (or '-' for stdout)")), ToolOutput(tag="out_json_output_to_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_json_output_to_file", type_hint=File()), doc=OutputDocumentation(doc="Write the results as JSON to file <file> (or '-' for stdout)")), ToolOutput(tag="out_export_css_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_export_css_file", type_hint=File()), doc=OutputDocumentation(doc="Export the CSS used in the HTML output to <file> (or '-' for stdout)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cath_Resolve_Hits_V0_1_0().translate("wdl", allow_empty_container=True)

