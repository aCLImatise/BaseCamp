from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String

Filter_Abund_Py_V0_1_0 = CommandToolBuilder(tool="filter_abund.py", base_command=["filter-abund.py"], inputs=[ToolInput(tag="in_info", input_type=Boolean(optional=True), prefix="--info", doc=InputDocumentation(doc="print citation information")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of simultaneous threads to execute (default: 1)")), ToolInput(tag="in_cut_off", input_type=Int(optional=True), prefix="--cutoff", doc=InputDocumentation(doc="Trim at k-mers below this abundance. (default: 2)")), ToolInput(tag="in_variable_coverage", input_type=Boolean(optional=True), prefix="--variable-coverage", doc=InputDocumentation(doc="Only trim low-abundance k-mers from sequences that\nhave high coverage. (default: False)")), ToolInput(tag="in_normalize_to", input_type=Int(optional=True), prefix="--normalize-to", doc=InputDocumentation(doc="Base the variable-coverage cutoff on this median k-mer\nabundance. (default: 20)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output the trimmed sequences into a single file with\nthe given filename instead of creating a new file for\neach input file. (default: None)")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite output file if it exists (default: False)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Compress output using gzip (default: False)")), ToolInput(tag="in_bzip", input_type=Boolean(optional=True), prefix="--bzip", doc=InputDocumentation(doc="Compress output using bzip2 (default: False)")), ToolInput(tag="in_input_count_graph_filename", input_type=String(), position=0, doc=InputDocumentation(doc="The input k-mer countgraph filename")), ToolInput(tag="in_input_sequence_filename", input_type=String(), position=1, doc=InputDocumentation(doc="Input FAST[AQ] sequence filename"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output the trimmed sequences into a single file with\nthe given filename instead of creating a new file for\neach input file. (default: None)")), ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Overwrite output file if it exists (default: False)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Filter_Abund_Py_V0_1_0().translate("wdl", allow_empty_container=True)

