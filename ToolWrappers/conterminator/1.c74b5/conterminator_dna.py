from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, Float, String, Directory

Conterminator_Dna_V0_1_0 = CommandToolBuilder(tool="conterminator_dna", base_command=["conterminator", "dna"], inputs=[ToolInput(tag="in_comp_bias_corr", input_type=Int(optional=True), prefix="--comp-bias-corr", doc=InputDocumentation(doc="correct for locally biased amino acid composition (range 0-1) [0]")), ToolInput(tag="in_add_self_matches", input_type=Boolean(optional=True), prefix="--add-self-matches", doc=InputDocumentation(doc="artificially add entries of queries with themselves (for clustering)")), ToolInput(tag="in_seed_sub_mat", input_type=File(optional=True), prefix="--seed-sub-mat", doc=InputDocumentation(doc="amino acid substitution matrix for kmer generation file [nucl:nucleotide.out,aa:VTML80.out]")), ToolInput(tag="in_sensitivity_faster_fast", input_type=Float(optional=True), prefix="-s", doc=InputDocumentation(doc="sensitivity: 1.0 faster; 4.0 fast default; 7.5 sensitive (range 1.0-7.5) [5.700]")), ToolInput(tag="in_kmer_size_set", input_type=Int(optional=True), prefix="-k", doc=InputDocumentation(doc="k-mer size in the range (0: set automatically to optimum) [15]")), ToolInput(tag="in_k_score", input_type=Int(optional=True), prefix="--k-score", doc=InputDocumentation(doc="K-mer threshold for generating similar k-mer lists [2147483647]")), ToolInput(tag="in_alph_size", input_type=Int(optional=True), prefix="--alph-size", doc=InputDocumentation(doc="alphabet size (range 2-21) [21]")), ToolInput(tag="in_split", input_type=Int(optional=True), prefix="--split", doc=InputDocumentation(doc="Splits input sets into N equally distributed chunks. The default value sets the best split automatically. createindex can only be used with split 1. [0]")), ToolInput(tag="in_split_mode", input_type=Int(optional=True), prefix="--split-mode", doc=InputDocumentation(doc="0: split target db; 1: split query db;  2: auto, depending on main memory [2]")), ToolInput(tag="in_diag_score", input_type=Boolean(optional=True), prefix="--diag-score", doc=InputDocumentation(doc="Use ungapped diagonal scoring during prefilter")), ToolInput(tag="in_exact_km_er_matching", input_type=Int(optional=True), prefix="--exact-kmer-matching", doc=InputDocumentation(doc="only exact k-mer matching (range 0-1) [1]")), ToolInput(tag="in_mask", input_type=Int(optional=True), prefix="--mask", doc=InputDocumentation(doc="mask sequences in k-mer stage 0: w/o low complexity masking, 1: with low complexity masking [0]")), ToolInput(tag="in_mask_lower_case", input_type=Int(optional=True), prefix="--mask-lower-case", doc=InputDocumentation(doc="lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]")), ToolInput(tag="in_min_un_gapped_score", input_type=Int(optional=True), prefix="--min-ungapped-score", doc=InputDocumentation(doc="accept only matches with ungapped alignment score above this threshold [25]")), ToolInput(tag="in_spaced_km_er_mode", input_type=Int(optional=True), prefix="--spaced-kmer-mode", doc=InputDocumentation(doc="0: use consecutive positions a k-mers; 1: use spaced k-mers [1]")), ToolInput(tag="in_spaced_km_er_pattern", input_type=String(optional=True), prefix="--spaced-kmer-pattern", doc=InputDocumentation(doc="User-specified spaced k-mer pattern []")), ToolInput(tag="in_local_tmp", input_type=File(optional=True), prefix="--local-tmp", doc=InputDocumentation(doc="Path where some of the temporary files will be created []")), ToolInput(tag="in_disk_space_limit", input_type=Int(optional=True), prefix="--disk-space-limit", doc=InputDocumentation(doc="Set max disk space to use for reverse profile searches. E.g. 800B, 5K, 10M, 1G. Defaults (0) to all available disk space in the temp folder. [0]")), ToolInput(tag="in_add_string_convert", input_type=Int(optional=True), prefix="-a", doc=InputDocumentation(doc="add backtrace string (convert to alignments with mmseqs convertalis utility) [1, set to 0 to disable]")), ToolInput(tag="in_alignment_mode", input_type=Int(optional=True), prefix="--alignment-mode", doc=InputDocumentation(doc="How to compute the alignment: 0: automatic; 1: only score and end_pos; 2: also start_pos and cov; 3: also seq.id; 4: only ungapped alignment [3]")), ToolInput(tag="in_list_matches_evalue", input_type=Float(optional=True), prefix="-e", doc=InputDocumentation(doc="list matches below this E-value (range 0.0-inf) [0.001]")), ToolInput(tag="in_min_seq_id", input_type=Float(optional=True), prefix="--min-seq-id", doc=InputDocumentation(doc="list matches above this sequence identity (for clustering) (range 0.0-1.0) [0.900]")), ToolInput(tag="in_min_aln_len", input_type=Int(optional=True), prefix="--min-aln-len", doc=InputDocumentation(doc="minimum alignment length (range 0-INT_MAX) [100]")), ToolInput(tag="in_seq_id_mode", input_type=Int(optional=True), prefix="--seq-id-mode", doc=InputDocumentation(doc="0: alignment length 1: shorter, 2: longer sequence [0]")), ToolInput(tag="in_alt_ali", input_type=Int(optional=True), prefix="--alt-ali", doc=InputDocumentation(doc="Show up to this many alternative alignments [0]")), ToolInput(tag="in_list_matches_fraction", input_type=Float(optional=True), prefix="-c", doc=InputDocumentation(doc="list matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]")), ToolInput(tag="in_cov_mode", input_type=Int(optional=True), prefix="--cov-mode", doc=InputDocumentation(doc="0: coverage of query and target, 1: coverage of target, 2: coverage of query 3: target seq. length needs to be at least x% of query length, 4: query seq. length needs to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]")), ToolInput(tag="in_realign", input_type=Boolean(optional=True), prefix="--realign", doc=InputDocumentation(doc="compute more conservative, shorter alignments (scores and E-values not changed)")), ToolInput(tag="in_max_rejected", input_type=Int(optional=True), prefix="--max-rejected", doc=InputDocumentation(doc="maximum rejected alignments before alignment calculation for a query is aborted [2147483647]")), ToolInput(tag="in_max_accept", input_type=Int(optional=True), prefix="--max-accept", doc=InputDocumentation(doc="maximum accepted alignments before alignment calculation for a query is stopped [2147483647]")), ToolInput(tag="in_score_bias", input_type=Float(optional=True), prefix="--score-bias", doc=InputDocumentation(doc="Score bias when computing the SW alignment (in bits) [0.000]")), ToolInput(tag="in_gap_open", input_type=Int(optional=True), prefix="--gap-open", doc=InputDocumentation(doc="Gap open cost [5]")), ToolInput(tag="in_gap_extend", input_type=Int(optional=True), prefix="--gap-extend", doc=InputDocumentation(doc="Gap extension cost [2]")), ToolInput(tag="in_pc_a", input_type=Float(optional=True), prefix="--pca", doc=InputDocumentation(doc="pseudo count admixture strength [1.000]")), ToolInput(tag="in_pcb", input_type=Float(optional=True), prefix="--pcb", doc=InputDocumentation(doc="pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]")), ToolInput(tag="in_mask_profile", input_type=Int(optional=True), prefix="--mask-profile", doc=InputDocumentation(doc="mask query sequence of profile using tantan [0,1] [1]")), ToolInput(tag="in_e_profile", input_type=Float(optional=True), prefix="--e-profile", doc=InputDocumentation(doc="includes sequences matches with < e-value thr. into the profile (>=0.0) [0.001]")), ToolInput(tag="in_wg", input_type=Boolean(optional=True), prefix="--wg", doc=InputDocumentation(doc="use global sequence weighting for profile calculation")), ToolInput(tag="in_filter_msa", input_type=Int(optional=True), prefix="--filter-msa", doc=InputDocumentation(doc="filter msa: 0: do not filter, 1: filter [1]")), ToolInput(tag="in_max_seq_id", input_type=Float(optional=True), prefix="--max-seq-id", doc=InputDocumentation(doc="reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]")), ToolInput(tag="in_qid", input_type=Float(optional=True), prefix="--qid", doc=InputDocumentation(doc="reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]")), ToolInput(tag="in_qsc", input_type=Float(optional=True), prefix="--qsc", doc=InputDocumentation(doc="reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]")), ToolInput(tag="in_cov", input_type=Float(optional=True), prefix="--cov", doc=InputDocumentation(doc="filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]")), ToolInput(tag="in_diff", input_type=Int(optional=True), prefix="--diff", doc=InputDocumentation(doc="filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]")), ToolInput(tag="in_num_iterations", input_type=Int(optional=True), prefix="--num-iterations", doc=InputDocumentation(doc="Search iterations [1]")), ToolInput(tag="in_slice_search", input_type=Boolean(optional=True), prefix="--slice-search", doc=InputDocumentation(doc="For bigger profile DB, run iteratively the search by greedily swapping the search results.")), ToolInput(tag="in_wrapped_scoring", input_type=Boolean(optional=True), prefix="--wrapped-scoring", doc=InputDocumentation(doc="Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start")), ToolInput(tag="in_re_score_mode", input_type=Int(optional=True), prefix="--rescore-mode", doc=InputDocumentation(doc="Rescore diagonal with: 0: Hamming distance, 1: local alignment (score only), 2: local alignment, 3: global alignment or 4: longest alignment fullfilling window quality criterion [2]")), ToolInput(tag="in_allow_deletion", input_type=Boolean(optional=True), prefix="--allow-deletion", doc=InputDocumentation(doc="allow deletions in a MSA")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="minimum codon number in open reading frames [30]")), ToolInput(tag="in_max_length", input_type=Int(optional=True), prefix="--max-length", doc=InputDocumentation(doc="maximum codon number in open reading frames [32734]")), ToolInput(tag="in_max_gaps", input_type=Int(optional=True), prefix="--max-gaps", doc=InputDocumentation(doc="maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]")), ToolInput(tag="in_contig_start_mode", input_type=Int(optional=True), prefix="--contig-start-mode", doc=InputDocumentation(doc="Contig start can be 0: incomplete, 1: complete, 2: both [2]")), ToolInput(tag="in_contig_end_mode", input_type=Int(optional=True), prefix="--contig-end-mode", doc=InputDocumentation(doc="Contig end can be 0: incomplete, 1: complete, 2: both  [2]")), ToolInput(tag="in_orf_start_mode", input_type=Int(optional=True), prefix="--orf-start-mode", doc=InputDocumentation(doc="Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]")), ToolInput(tag="in_forward_frames", input_type=Int(optional=True), prefix="--forward-frames", doc=InputDocumentation(doc="comma-seperated list of ORF frames on the forward strand to be extracted [1]")), ToolInput(tag="in_reverse_frames", input_type=Int(optional=True), prefix="--reverse-frames", doc=InputDocumentation(doc="comma-seperated list of ORF frames on the reverse strand to be extracted [1]")), ToolInput(tag="in_translation_table", input_type=Int(optional=True), prefix="--translation-table", doc=InputDocumentation(doc="1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE, 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL, 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL, 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA, 29) MESODINIUM, 30) PERTRICH, 31) BLASTOCRITHIDIA [1]")), ToolInput(tag="in_translate", input_type=Int(optional=True), prefix="--translate", doc=InputDocumentation(doc="translate ORF to amino acid [0]")), ToolInput(tag="in_use_all_table_starts", input_type=Boolean(optional=True), prefix="--use-all-table-starts", doc=InputDocumentation(doc="use all alteratives for a start codon in the genetic table, if false - only ATG (AUG)")), ToolInput(tag="in_id_offset", input_type=Int(optional=True), prefix="--id-offset", doc=InputDocumentation(doc="numeric ids in index file are offset by this value  [0]")), ToolInput(tag="in_add_orf_stop", input_type=Boolean(optional=True), prefix="--add-orf-stop", doc=InputDocumentation(doc="add * at complete start and end")), ToolInput(tag="in_search_type", input_type=Int(optional=True), prefix="--search-type", doc=InputDocumentation(doc="search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]")), ToolInput(tag="in_start_sens", input_type=Float(optional=True), prefix="--start-sens", doc=InputDocumentation(doc="start sensitivity [4.000]")), ToolInput(tag="in_sens_steps", input_type=Int(optional=True), prefix="--sens-steps", doc=InputDocumentation(doc="Search steps performed from --start-sense and -s. [1]")), ToolInput(tag="in_remove_tmp_files", input_type=Int(optional=True), prefix="--remove-tmp-files", doc=InputDocumentation(doc="Delete temporary files [1, set to 0 to disable]")), ToolInput(tag="in_dbtype", input_type=Int(optional=True), prefix="--dbtype", doc=InputDocumentation(doc="Database type 0: auto, 1: amino acid 2: nucleotides [0]")), ToolInput(tag="in_shuffle", input_type=Int(optional=True), prefix="--shuffle", doc=InputDocumentation(doc="Shuffle input database [1, set to 0 to disable]")), ToolInput(tag="in_created_b_mode", input_type=Int(optional=True), prefix="--createdb-mode", doc=InputDocumentation(doc="createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) [0]")), ToolInput(tag="in_ncbi_tax_dump", input_type=Directory(optional=True), prefix="--ncbi-tax-dump", doc=InputDocumentation(doc="NCBI tax dump directory. The tax dump can be downloaded here 'ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz' []")), ToolInput(tag="in_tax_mapping_file", input_type=File(optional=True), prefix="--tax-mapping-file", doc=InputDocumentation(doc="File to map sequence identifer to taxonomical identifier []")), ToolInput(tag="in_blacklist", input_type=Int(optional=True), prefix="--blacklist", doc=InputDocumentation(doc="Comma separated list of ignored taxa in LCA computation [10239,12908,28384,81077,11632,340016,61964,48479,48510]")), ToolInput(tag="in_sub_mat", input_type=File(optional=True), prefix="--sub-mat", doc=InputDocumentation(doc="amino acid substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]")), ToolInput(tag="in_max_seq_len", input_type=Int(optional=True), prefix="--max-seq-len", doc=InputDocumentation(doc="maximum sequence length (range 1-32768]) [1000]")), ToolInput(tag="in_db_load_mode", input_type=Int(optional=True), prefix="--db-load-mode", doc=InputDocumentation(doc="Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="number of cores used for the computation (uses all cores by default) [8]")), ToolInput(tag="in_compressed", input_type=Int(optional=True), prefix="--compressed", doc=InputDocumentation(doc="write results in compressed format [0]")), ToolInput(tag="in_verbosity_level_nothing", input_type=Int(optional=True), prefix="-v", doc=InputDocumentation(doc="verbosity level: 0=nothing, 1: +errors, 2: +warnings, 3: +info [3]")), ToolInput(tag="in_split_memory_limit", input_type=Int(optional=True), prefix="--split-memory-limit", doc=InputDocumentation(doc="Set max memory per split. E.g. 800B, 5K, 10M, 1G. Defaults (0) to all available system memory. [0]")), ToolInput(tag="in_mpi_runner", input_type=Int(optional=True), prefix="--mpi-runner", doc=InputDocumentation(doc="Use MPI on compute grid with this MPI command (e.g. 'mpirun -np 42') []")), ToolInput(tag="in_force_reuse", input_type=Boolean(optional=True), prefix="--force-reuse", doc=InputDocumentation(doc="reuse tmp file in tmp/latest folder ignoring parameters and git version change")), ToolInput(tag="in_filter_hits", input_type=Boolean(optional=True), prefix="--filter-hits", doc=InputDocumentation(doc="filter hits by seq.id. and coverage")), ToolInput(tag="in_sort_results", input_type=Int(optional=True), prefix="--sort-results", doc=InputDocumentation(doc="Sort results: 0: no sorting, 1: sort by evalue (Alignment) or seq.id. (Hamming) [0]")), ToolInput(tag="in_omit_consensus", input_type=Boolean(optional=True), prefix="--omit-consensus", doc=InputDocumentation(doc="Omit consensus sequence in alignment")), ToolInput(tag="in_create_lookup", input_type=Int(optional=True), prefix="--create-lookup", doc=InputDocumentation(doc="Create database lookup file (can be very large) [0]")), ToolInput(tag="in_chain_alignments", input_type=Int(optional=True), prefix="--chain-alignments", doc=InputDocumentation(doc="Chain overlapping alignments [0]")), ToolInput(tag="in_merge_query", input_type=Int(optional=True), prefix="--merge-query", doc=InputDocumentation(doc="combine ORFs/split sequences to a single entry [1]")), ToolInput(tag="in_strand", input_type=Int(optional=True), prefix="--strand", doc=InputDocumentation(doc="Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [2]"))], outputs=[ToolOutput(tag="out_seed_sub_mat", output_type=File(optional=True), selector=InputSelector(input_to_select="in_seed_sub_mat", type_hint=File()), doc=OutputDocumentation(doc="amino acid substitution matrix for kmer generation file [nucl:nucleotide.out,aa:VTML80.out]")), ToolOutput(tag="out_sub_mat", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sub_mat", type_hint=File()), doc=OutputDocumentation(doc="amino acid substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Conterminator_Dna_V0_1_0().translate("wdl", allow_empty_container=True)

