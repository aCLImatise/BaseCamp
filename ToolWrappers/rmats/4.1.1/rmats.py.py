from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Directory, Boolean, File, Float

Rmats_Py_V0_1_0 = CommandToolBuilder(tool="rmats.py", base_command=["rmats.py"], inputs=[ToolInput(tag="in_gtf", input_type=String(optional=True), prefix="--gtf", doc=InputDocumentation(doc="An annotation of genes and transcripts in GTF format")), ToolInput(tag="in_bone", input_type=Int(optional=True), prefix="--b1", doc=InputDocumentation(doc="A text file containing a comma separated list of the\nBAM files for sample_1. (Only if using BAM)")), ToolInput(tag="in_b_two", input_type=Int(optional=True), prefix="--b2", doc=InputDocumentation(doc="A text file containing a comma separated list of the\nBAM files for sample_2. (Only if using BAM)")), ToolInput(tag="in_s_one", input_type=Int(optional=True), prefix="--s1", doc=InputDocumentation(doc="A text file containing a comma separated list of the\nFASTQ files for sample_1. If using paired reads the\nformat is ':' to separate pairs and ',' to separate\nreplicates. (Only if using fastq)")), ToolInput(tag="in_s_two", input_type=Int(optional=True), prefix="--s2", doc=InputDocumentation(doc="A text file containing a comma separated list of the\nFASTQ files for sample_2. If using paired reads the\nformat is ':' to separate pairs and ',' to separate\nreplicates. (Only if using fastq)")), ToolInput(tag="in_od", input_type=Directory(optional=True), prefix="--od", doc=InputDocumentation(doc="The directory for final output from the post step")), ToolInput(tag="in_tmp", input_type=Directory(optional=True), prefix="--tmp", doc=InputDocumentation(doc="The directory for intermediate output such as '.rmats'\nfiles from the prep step")), ToolInput(tag="in_type_used_forpairedend", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="Type of read used in the analysis: either 'paired' for\npaired-end data or 'single' for single-end data.\nDefault: paired")), ToolInput(tag="in_lib_type", input_type=String(optional=True), prefix="--libType", doc=InputDocumentation(doc="Library type. Use fr-firststrand or fr-secondstrand\nfor strand-specific data. Default: fr-unstranded")), ToolInput(tag="in_read_length", input_type=Int(optional=True), prefix="--readLength", doc=InputDocumentation(doc="The length of each read")), ToolInput(tag="in_variable_read_length", input_type=Boolean(optional=True), prefix="--variable-read-length", doc=InputDocumentation(doc="Allow reads with lengths that differ from --readLength\nto be processed. --readLength will still be used to\ndetermine IncFormLen and SkipFormLen")), ToolInput(tag="in_anchor_length", input_type=Int(optional=True), prefix="--anchorLength", doc=InputDocumentation(doc="The anchor length. Default is 1")), ToolInput(tag="in_top_hat_anchor", input_type=Int(optional=True), prefix="--tophatAnchor", doc=InputDocumentation(doc="The 'anchor length' or 'overhang length' used in the\naligner. At least 'anchor length' NT must be mapped to\neach end of a given junction. The default is 6. (Only\nif using fastq)")), ToolInput(tag="in_bi", input_type=File(optional=True), prefix="--bi", doc=InputDocumentation(doc="The directory name of the STAR binary indices (name of\nthe directory that contains the SA file). (Only if\nusing fastq)")), ToolInput(tag="in_n_thread", input_type=Int(optional=True), prefix="--nthread", doc=InputDocumentation(doc="The number of threads. The optimal number of threads\nshould be equal to the number of CPU cores. Default: 1")), ToolInput(tag="in_t_stat", input_type=Int(optional=True), prefix="--tstat", doc=InputDocumentation(doc="The number of threads for the statistical model. If\nnot set then the value of --nthread is used")), ToolInput(tag="in_cst_at", input_type=Float(optional=True), prefix="--cstat", doc=InputDocumentation(doc="The cutoff splicing difference. The cutoff used in the\nnull hypothesis test for differential splicing. The\ndefault is 0.0001 for 0.01% difference. Valid: 0 <=\ncutoff < 1. Does not apply to the paired stats model")), ToolInput(tag="in_task", input_type=File(optional=True), prefix="--task", doc=InputDocumentation(doc="Specify which step(s) of rMATS to run. Default: both.\nprep: preprocess BAMs and generate a .rmats file.\npost: load .rmats file(s) into memory, detect and\ncount alternative splicing events, and calculate P\nvalue (if not --statoff). both: prep + post. inte\n(integrity): check that the BAM filenames recorded by\nthe prep task(s) match the BAM filenames for the\ncurrent command line. stat: run statistical test on\nexisting output files")), ToolInput(tag="in_stat_off", input_type=Boolean(optional=True), prefix="--statoff", doc=InputDocumentation(doc="Skip the statistical analysis")), ToolInput(tag="in_paired_stats", input_type=Boolean(optional=True), prefix="--paired-stats", doc=InputDocumentation(doc="Use the paired stats model")), ToolInput(tag="in_novels_s", input_type=Boolean(optional=True), prefix="--novelSS", doc=InputDocumentation(doc="Enable detection of novel splice sites (unannotated\nsplice sites). Default is no detection of novel splice\nsites")), ToolInput(tag="in_mil", input_type=Int(optional=True), prefix="--mil", doc=InputDocumentation(doc="Minimum Intron Length. Only impacts --novelSS\nbehavior. Default: 50")), ToolInput(tag="in_mel", input_type=Int(optional=True), prefix="--mel", doc=InputDocumentation(doc="Maximum Exon Length. Only impacts --novelSS behavior.\nDefault: 500")), ToolInput(tag="in_allow_clipping", input_type=Boolean(optional=True), prefix="--allow-clipping", doc=InputDocumentation(doc="Allow alignments with soft or hard clipping to be used")), ToolInput(tag="in_fixed_event_set", input_type=Directory(optional=True), prefix="--fixed-event-set", doc=InputDocumentation(doc="A directory containing fromGTF.[AS].txt files to be\nused instead of detecting a new set of events\n"))], outputs=[ToolOutput(tag="out_od", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_od", type_hint=File()), doc=OutputDocumentation(doc="The directory for final output from the post step")), ToolOutput(tag="out_tmp", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_tmp", type_hint=File()), doc=OutputDocumentation(doc="The directory for intermediate output such as '.rmats'\nfiles from the prep step")), ToolOutput(tag="out_task", output_type=File(optional=True), selector=InputSelector(input_to_select="in_task", type_hint=File()), doc=OutputDocumentation(doc="Specify which step(s) of rMATS to run. Default: both.\nprep: preprocess BAMs and generate a .rmats file.\npost: load .rmats file(s) into memory, detect and\ncount alternative splicing events, and calculate P\nvalue (if not --statoff). both: prep + post. inte\n(integrity): check that the BAM filenames recorded by\nthe prep task(s) match the BAM filenames for the\ncurrent command line. stat: run statistical test on\nexisting output files"))], container="quay.io/biocontainers/rmats:4.1.1--py27h9b06725_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rmats_Py_V0_1_0().translate("wdl")

