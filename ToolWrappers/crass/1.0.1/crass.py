from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory

Crass_V0_1_0 = CommandToolBuilder(tool="crass", base_command=["crass"], inputs=[ToolInput(tag="in_loglevel", input_type=Boolean(optional=True), prefix="--logLevel", doc=InputDocumentation(doc="<INT>   Output a log file and set a log level [1 - 4]")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outDir", doc=InputDocumentation(doc="<DIR>   Output directory [default: .]")), ToolInput(tag="in_log_to_screen", input_type=Boolean(optional=True), prefix="--logToScreen", doc=InputDocumentation(doc="Print the logging information to screen rather than a file")), ToolInput(tag="in_mind_r", input_type=Boolean(optional=True), prefix="--minDR", doc=InputDocumentation(doc="<INT>   Minimim length of the direct repeat\nto search for [Default: 23]")), ToolInput(tag="in_max_dr", input_type=Boolean(optional=True), prefix="--maxDR", doc=InputDocumentation(doc="<INT>   Maximim length of the direct repeat\nto search for [Default: 47]")), ToolInput(tag="in_min_num_repeats", input_type=Boolean(optional=True), prefix="--minNumRepeats", doc=InputDocumentation(doc="<INT>   Total number of direct repeats in a CRISPR for\nit to be considered real [Default: 2]")), ToolInput(tag="in_min_spacer", input_type=Boolean(optional=True), prefix="--minSpacer", doc=InputDocumentation(doc="<INT>   Minimim length of the spacer to search for [Default: 26]")), ToolInput(tag="in_max_spacer", input_type=Boolean(optional=True), prefix="--maxSpacer", doc=InputDocumentation(doc="<INT>   Maximim length of the spacer to search for [Default: 50]")), ToolInput(tag="in_window_length", input_type=Boolean(optional=True), prefix="--windowLength", doc=InputDocumentation(doc="<INT>   The length of the search window. Can only be\na number between 6 - 9 [Default: 8]")), ToolInput(tag="in_cov_cut_off", input_type=Boolean(optional=True), prefix="--covCutoff", doc=InputDocumentation(doc="<INT>   Remove groups with less than x spacers [Default: 3]")), ToolInput(tag="in_km_er_count", input_type=Boolean(optional=True), prefix="--kmerCount", doc=InputDocumentation(doc="<INT>   The number of the kmers that need to be\nshared for clustering [Default: 6]")), ToolInput(tag="in_graph_node_len", input_type=Boolean(optional=True), prefix="--graphNodeLen", doc=InputDocumentation(doc="<INT>   Length of the kmers used to make crispr nodes [Default: 7]")), ToolInput(tag="in_num_bins", input_type=Boolean(optional=True), prefix="--numBins", doc=InputDocumentation(doc="<INT>   The number of colour bins for the output graph.\nDefault is to have as many colours as there are\ndifferent values for the coverage of Nodes in the graph")), ToolInput(tag="in_graph_colour", input_type=Boolean(optional=True), prefix="--graphColour", doc=InputDocumentation(doc="<TYPE>   Defines the range of colours to use for the output graph\nthe different types available are:\nred-blue, blue-red, green-red-blue, red-blue-green")), ToolInput(tag="in_long_description", input_type=Boolean(optional=True), prefix="--longDescription", doc=InputDocumentation(doc="Set if you want the spacer sequence printed along with the ID in the spacer graph. [Default: false]")), ToolInput(tag="in_show_singl_tons", input_type=Boolean(optional=True), prefix="--showSingltons", doc=InputDocumentation(doc="Set if you want to print singleton spacers in the spacer graph [Default: false]"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="<DIR>   Output directory [default: .]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Crass_V0_1_0().translate("wdl", allow_empty_container=True)

