!Command
command:
- crisprtools
- extract
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -o
  description: 'output file directory  [default: .]'
  args: !SimpleFlagArg
    name: DIR
- !Flag
  optional: true
  synonyms:
  - -O
  description: 'Give a custom prefix to each of the outputed files [default: ]'
  args: !SimpleFlagArg
    name: STRING
- !Flag
  optional: true
  synonyms:
  - -g
  description: "A comma separated list of group IDs that you would like to extract\
    \ data from.\nNote that only the group number is needed, do not use prefixes like\
    \ 'Group' or 'G', which\nare sometimes used in file names or in a .crispr file"
  args: !OptionalFlagArg
    names:
    - INT
    - INT
    separator: ','
- !Flag
  optional: true
  synonyms:
  - -s
  description: "[FILE] --spacer[=FILE]         Extract the spacers of the listed group.\
    \  By default\nprints to stdout however an output file can also be given as an\
    \ optional arguement"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -d
  description: "[FILE] --direct-repeat[=FILE]  Extract the direct repeats of the listed\
    \ group. By default\nprints to stdout however an output file can also be given\
    \ as an optional arguement"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -f
  description: "[FILE] --flanker[=FILE]        Extract the flanking sequences of the\
    \ listed group. By default\nprints to stdout however an output file can also be\
    \ given as an optional arguement"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -C
  description: Supress coverage information when printing spacers
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -H
  - --header-prefix
  description: 'Print a prefix to each of the headers [default: ]'
  args: !SimpleFlagArg
    name: STRING
- !Flag
  optional: true
  synonyms:
  - -x
  - --split-group
  description: "Split the results into different files for each group.  File names\n\
    specified with -s -d -f will not be used in this mode but instead\noutput files\
    \ will take the form of PREFIX_GROUP_[type].fa\n"
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  description: print this handy help message
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "crass extract [-ghxsdfCoOH] file.crispr\nOptions:\n-h\t\t\t\t\t      \
  \       print this handy help message\n-o DIR                           output file\
  \ directory  [default: .]\n-O STRING                        Give a custom prefix\
  \ to each of the outputed files [default: ]\n-g INT[,INT]                     A\
  \ comma separated list of group IDs that you would like to extract data from.\n\t\
  \t\t\t\t             Note that only the group number is needed, do not use prefixes\
  \ like 'Group' or 'G', which\n\t\t\t\t\t             are sometimes used in file\
  \ names or in a .crispr file\n-s[FILE] --spacer[=FILE]         Extract the spacers\
  \ of the listed group.  By default\n                                 prints to stdout\
  \ however an output file can also be given as an optional arguement\n-d[FILE] --direct-repeat[=FILE]\t\
  \ Extract the direct repeats of the listed group. By default\n                 \
  \                prints to stdout however an output file can also be given as an\
  \ optional arguement\n-f[FILE] --flanker[=FILE]        Extract the flanking sequences\
  \ of the listed group. By default\n                                 prints to stdout\
  \ however an output file can also be given as an optional arguement\n-C        \
  \                       Supress coverage information when printing spacers\n-H STRING\
  \ --header-prefix STRING Print a prefix to each of the headers [default: ]\n-x --split-group\
  \                 Split the results into different files for each group.  File names\n\
  \                                 specified with -s -d -f will not be used in this\
  \ mode but instead\n                                 output files will take the\
  \ form of PREFIX_GROUP_[type].fa\n"
generated_using:
- --help
docker_image:
