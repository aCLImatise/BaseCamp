from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Directory, Boolean, Int

Hansel_V0_1_0 = CommandToolBuilder(tool="hansel", base_command=["hansel"], inputs=[ToolInput(tag="in_scheme", input_type=File(optional=True), prefix="--scheme", doc=InputDocumentation(doc="Scheme to use for subtyping (built-in: 'heidelberg',\n'enteritidis', 'typhi', 'typhimurium', 'tb_lineage';\nOR user-specified: /path/to/user/scheme)")), ToolInput(tag="in_scheme_name", input_type=String(optional=True), prefix="--scheme-name", doc=InputDocumentation(doc="Custom user-specified SNP substyping scheme name")), ToolInput(tag="in_scheme_metadata", input_type=File(optional=True), prefix="--scheme-metadata", doc=InputDocumentation(doc="Scheme subtype metadata table (tab-delimited file with\n'.tsv' or '.tab' extension or CSV with '.csv'\nextension format accepted; MUST contain column called\n'subtype')")), ToolInput(tag="in_reversereads__forwardreads", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="reverse_reads, --paired-reads forward_reads reverse_reads\nFASTQ paired-end reads")), ToolInput(tag="in__inputfastagenomename_fastapath", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="genome_name, --input-fasta-genome-name fasta_path genome_name\ninput fasta file path AND genome name")), ToolInput(tag="in_input_directory", input_type=Directory(optional=True), prefix="--input-directory", doc=InputDocumentation(doc="directory of input fasta files (.fasta|.fa|.fna) or\nFASTQ files (paired FASTQ should have same basename\nwith '_\d\.(fastq|fq)' postfix to be automatically\npaired) (files can be Gzipped)")), ToolInput(tag="in_output_summary", input_type=File(optional=True), prefix="--output-summary", doc=InputDocumentation(doc="Subtyping summary output path (tab-delimited)")), ToolInput(tag="in_output_km_er_results", input_type=File(optional=True), prefix="--output-kmer-results", doc=InputDocumentation(doc="Subtyping kmer matching output path (tab-delimited)")), ToolInput(tag="in_output_simple_summary", input_type=File(optional=True), prefix="--output-simple-summary", doc=InputDocumentation(doc="Subtyping simple summary output path")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Force existing output files to be overwritten")), ToolInput(tag="in_json", input_type=Boolean(optional=True), prefix="--json", doc=InputDocumentation(doc="Output JSON representation of output files")), ToolInput(tag="in_min_km_er_freq", input_type=Int(optional=True), prefix="--min-kmer-freq", doc=InputDocumentation(doc="Min k-mer freq/coverage")), ToolInput(tag="in_min_km_er_frac", input_type=Int(optional=True), prefix="--min-kmer-frac", doc=InputDocumentation(doc="Proportion of k-mer required for detection (0.0 - 1)")), ToolInput(tag="in_max_km_er_freq", input_type=Int(optional=True), prefix="--max-kmer-freq", doc=InputDocumentation(doc="Max k-mer freq/coverage")), ToolInput(tag="in_low_cov_depth_freq", input_type=String(optional=True), prefix="--low-cov-depth-freq", doc=InputDocumentation(doc="Frequencies below this coverage are considered low\ncoverage")), ToolInput(tag="in_max_missing_km_ers", input_type=Int(optional=True), prefix="--max-missing-kmers", doc=InputDocumentation(doc="Decimal proportion of maximum allowable missing kmers\nbefore being considered an error. (0.0 - 1.0)")), ToolInput(tag="in_min_ambiguous_km_ers", input_type=Int(optional=True), prefix="--min-ambiguous-kmers", doc=InputDocumentation(doc="Minimum number of missing kmers to be considered an\nambiguous result")), ToolInput(tag="in_low_cov_warning", input_type=String(optional=True), prefix="--low-cov-warning", doc=InputDocumentation(doc="Overall kmer coverage below this value will trigger a\nlow coverage warning")), ToolInput(tag="in_max_intermediate_km_ers", input_type=Int(optional=True), prefix="--max-intermediate-kmers", doc=InputDocumentation(doc="Decimal proportion of maximum allowable missing kmers\nto be considered an intermediate subtype. (0.0 - 1.0)")), ToolInput(tag="in_max_degenerate_km_ers", input_type=Int(optional=True), prefix="--max-degenerate-kmers", doc=InputDocumentation(doc="Maximum number of scheme k-mers allowed before\nquitting with a usage warning. Default is 100000")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of parallel threads to run analysis (default=1)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Logging verbosity level (-v == show warnings; -vvv ==\nshow debug info)"))], outputs=[ToolOutput(tag="out_output_summary", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_summary", type_hint=File()), doc=OutputDocumentation(doc="Subtyping summary output path (tab-delimited)")), ToolOutput(tag="out_output_km_er_results", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_km_er_results", type_hint=File()), doc=OutputDocumentation(doc="Subtyping kmer matching output path (tab-delimited)")), ToolOutput(tag="out_output_simple_summary", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_simple_summary", type_hint=File()), doc=OutputDocumentation(doc="Subtyping simple summary output path"))], container="quay.io/biocontainers/bio_hansel:2.6.1--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hansel_V0_1_0().translate("wdl")

