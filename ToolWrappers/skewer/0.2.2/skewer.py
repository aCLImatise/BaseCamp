from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Skewer_V0_1_0 = CommandToolBuilder(tool="skewer", base_command=["skewer"], inputs=[ToolInput(tag="in_adapter_sequencefile_agatcggaagagcacacgtctgaactccagtcac", input_type=File(optional=True), prefix="-x", doc=InputDocumentation(doc="Adapter sequence/file (AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC)")), ToolInput(tag="in_adapter_sequencefile_agatcggaagagcgtcgtgtagggaaagagtgtaimplied", input_type=File(optional=True), prefix="-y", doc=InputDocumentation(doc="Adapter sequence/file for pair-end reads (AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTA),\nimplied by -x if -x is the only one specified explicitly.")), ToolInput(tag="in_matrix", input_type=File(optional=True), prefix="--matrix", doc=InputDocumentation(doc="File indicates valid adapter pairing (all-ones matrix).")), ToolInput(tag="in_junction_adapter_sequencefile", input_type=File(optional=True), prefix="-j", doc=InputDocumentation(doc="Junction adapter sequence/file for Nextera Mate Pair reads (CTGTCTCTTATACACATCTAGATGTGTATAAGAGACAG)")), ToolInput(tag="in_mode", input_type=Int(optional=True), prefix="--mode", doc=InputDocumentation(doc="trimming mode; 1) single-end -- head: 5' end; tail: 3' end; any: anywhere (tail)\n2) paired-end -- pe: paired-end; mp: mate-pair; ap: amplicon (pe)")), ToolInput(tag="in_barcode", input_type=Boolean(optional=True), prefix="--barcode", doc=InputDocumentation(doc="Demultiplex reads according to adapters/primers (no)")), ToolInput(tag="in_maximum_allowed_normalized", input_type=Int(optional=True), prefix="-r", doc=InputDocumentation(doc="Maximum allowed error rate (normalized #errors / length of aligned region) [0, 0.5], (0.1)")), ToolInput(tag="in_maximum_allowed_rate", input_type=Int(optional=True), prefix="-d", doc=InputDocumentation(doc="Maximum allowed indel error rate [0, r], (0.03)\nreciprocal is used for -r, -e and -d when num > or = 2")), ToolInput(tag="in_minimum_overlap_length", input_type=Int(optional=True), prefix="-k", doc=InputDocumentation(doc="Minimum overlap length for adapter detection [1, inf);\n(max(1, int(4-10*r)) for single-end; (<junction length>/2) for mate-pair)")), ToolInput(tag="in_cut", input_type=Int(optional=True), prefix="--cut", doc=InputDocumentation(doc=",<int> Hard clip off the 5' leading bases as the barcodes in amplicon mode; (no)")), ToolInput(tag="in_cut_three", input_type=Boolean(optional=True), prefix="--cut3", doc=InputDocumentation(doc="Hard clip off the 3' tailing bases if the read length is greater than\nthe maximum read length specified by -L; (no)")), ToolInput(tag="in_end_quality", input_type=Boolean(optional=True), prefix="--end-quality", doc=InputDocumentation(doc="<int> Trim 3' end until specified or higher quality reached; (0)")), ToolInput(tag="in_mean_quality", input_type=Int(optional=True), prefix="--mean-quality", doc=InputDocumentation(doc="The lowest mean quality value allowed before trimming; (0)")), ToolInput(tag="in_min", input_type=Int(optional=True), prefix="--min", doc=InputDocumentation(doc="The minimum read length allowed after trimming; (18)")), ToolInput(tag="in_max", input_type=Int(optional=True), prefix="--max", doc=InputDocumentation(doc="The maximum read length allowed after trimming; (no limit)")), ToolInput(tag="in_filter_degenerative_reads", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="Whether to filter out highly degenerative (many Ns) reads; (no)")), ToolInput(tag="in_filter_undetermined_matepair", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="Whether to filter out undetermined mate-pair reads; (no)")), ToolInput(tag="in_fill_ns", input_type=String(optional=True), prefix="--fillNs", doc=InputDocumentation(doc="to replace trimmed bases with Ns (has no effect with 'b' or '-m mp'); (no)")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="Format of FASTQ quality value: sanger|solexa|auto; (auto)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Base name of output file; ('<reads>.trimmed')")), ToolInput(tag="in_compress", input_type=Boolean(optional=True), prefix="--compress", doc=InputDocumentation(doc="Compress output in GZIP format (no)")), ToolInput(tag="in_stdout", input_type=Boolean(optional=True), prefix="--stdout", doc=InputDocumentation(doc="Redirect output to STDOUT, suppressing -b, -o, and -z options (no)")), ToolInput(tag="in_q_ii_me", input_type=Boolean(optional=True), prefix="--qiime", doc=InputDocumentation(doc="Prepare the 'barcodes.fastq' and 'mapping_file.txt' for processing with QIIME; (default: no)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="No progress update (not quiet)")), ToolInput(tag="in_masked_output", input_type=File(optional=True), prefix="--masked-output", doc=InputDocumentation(doc="Write output file(s) for trimmed reads (trimmed bases converted to lower case) (no)")), ToolInput(tag="in_excluded_output", input_type=File(optional=True), prefix="--excluded-output", doc=InputDocumentation(doc="output file(s) for excluded reads (no)")), ToolInput(tag="in_intelligent", input_type=Boolean(optional=True), prefix="--intelligent", doc=InputDocumentation(doc="For mate-pair mode, whether to redistribute reads based on junction information; (no)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of concurrent threads [1, 32]; (1)")), ToolInput(tag="in_reads_dot_fast_q", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_paired_reads_dot_fast_q", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Base name of output file; ('<reads>.trimmed')")), ToolOutput(tag="out_masked_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_masked_output", type_hint=File()), doc=OutputDocumentation(doc="Write output file(s) for trimmed reads (trimmed bases converted to lower case) (no)")), ToolOutput(tag="out_excluded_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_excluded_output", type_hint=File()), doc=OutputDocumentation(doc="output file(s) for excluded reads (no)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Skewer_V0_1_0().translate("wdl", allow_empty_container=True)

