from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Int, String, Boolean

Snpiphy_V0_1_0 = CommandToolBuilder(tool="snpiphy", base_command=["snpiphy"], inputs=[ToolInput(tag="in_fast_q_dir", input_type=File(optional=True), prefix="--fastq-dir", doc=InputDocumentation(doc="Path to a directory with your interleaved fastq\nsequencing reads or fasta assemblies.")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="--output-directory", doc=InputDocumentation(doc="Path to the output directory. A directory will be\ncreated if one does not exist.")), ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="Path to the reference sequence. Only fasta format is\naccepted currently.")), ToolInput(tag="in_cov_cut_off", input_type=Int(optional=True), prefix="--cov-cutoff", doc=InputDocumentation(doc="Percent coverage of reference sequence (0-100%) used\nto reject a sample. Samples lower than this threshold\nwill be excluded from phylogenetic pipeline steps.\nDefaults to 85%.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix for output files")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use for multiprocessing.")), ToolInput(tag="in_parallel", input_type=Boolean(optional=True), prefix="--parallel", doc=InputDocumentation(doc="Use GNU parallel to run multiple instances of snippy\n(can speed things up if you have multiple cores\navailable)")), ToolInput(tag="in_single_end", input_type=Boolean(optional=True), prefix="--single_end", doc=InputDocumentation(doc="fastq reads are single end instead of paired-end. Use\nfor ion torrent or non-paired end illumina data")), ToolInput(tag="in_gamma_model", input_type=Boolean(optional=True), prefix="--gamma_model", doc=InputDocumentation(doc="Use GTRGAMMA model instead of GTRCAT during the\ngubbins and RAxML tree building steps.")), ToolInput(tag="in_tree_builder", input_type=String(optional=True), prefix="--tree_builder", doc=InputDocumentation(doc="Algorithm used for building the phylogenetic tree\n(default: raxml)")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite files in the output directories.")), ToolInput(tag="in_verbose", input_type=Directory(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase verbosity on command line output (n.b.\nverbose output is always saved to snpiphy.log in the\noutput directory).\n"))], outputs=[ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="Path to the output directory. A directory will be\ncreated if one does not exist.")), ToolOutput(tag="out_verbose", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_verbose", type_hint=File()), doc=OutputDocumentation(doc="Increase verbosity on command line output (n.b.\nverbose output is always saved to snpiphy.log in the\noutput directory).\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Snpiphy_V0_1_0().translate("wdl", allow_empty_container=True)

