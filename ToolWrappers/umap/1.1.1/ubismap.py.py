from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int, File

Ubismap_Py_V0_1_0 = CommandToolBuilder(tool="ubismap.py", base_command=["ubismap.py"], inputs=[ToolInput(tag="in_terse_dot", input_type=String(optional=True), prefix="-terse.", doc=InputDocumentation(doc="these options do not exist in your cluster,")), ToolInput(tag="in_km_ers", input_type=Boolean(optional=True), prefix="--kmers", doc=InputDocumentation(doc="[KMERS [KMERS ...]]\nKmer length for mappability. e.g. 24 36 50 100")), ToolInput(tag="in_genome_ready", input_type=Boolean(optional=True), prefix="-GenomeReady", doc=InputDocumentation(doc="If in the 'out_dir' there already exists a /chrs and\n/genome subdirectory where genome directory has a\ngenome.fasta with bowtie index suffix as\n'BisMap_bowtie.ind' or 'Umap_bowtie.ind' if --Bismap\nis not specified and the ./chrs directory has\nindivudal chromosome FASTA files, specify this option")), ToolInput(tag="in_bis_map", input_type=Boolean(optional=True), prefix="-Bismap", doc=InputDocumentation(doc="Specify -Bismap if double genome indexing is expected.\nThis would create a genome that is concatenation of\nforward and reverse complement. If -C2T or -G2A is\nexpected, this must be specified")), ToolInput(tag="in_c_two_t", input_type=Boolean(optional=True), prefix="-C2T", doc=InputDocumentation(doc="If --Bismap is provided, specify --C2T or --G2A")), ToolInput(tag="in_g_two_a", input_type=Boolean(optional=True), prefix="-G2A", doc=InputDocumentation(doc="If --Bismap is provided, specify --C2T or --G2A")), ToolInput(tag="in_exit_after_indexing", input_type=Boolean(optional=True), prefix="-ExitAfterIndexing", doc=InputDocumentation(doc="If you only want the index, specify this option")), ToolInput(tag="in_simultaneous_jobs", input_type=Int(optional=True), prefix="-SimultaneousJobs", doc=InputDocumentation(doc="Number of jobs to run simultaneously")), ToolInput(tag="in_var_id", input_type=String(optional=True), prefix="-var_id", doc=InputDocumentation(doc="Environmental variable for accessing job IDs. By\ndefault is set to SGE_TASK_ID assuming a sungrid\nengine environment.")), ToolInput(tag="in_write_script", input_type=File(optional=True), prefix="-write_script", doc=InputDocumentation(doc="Specify -write <Path to output job submission file> if\ninstead of direct execution, you want to save the job\nsubmission file.")), ToolInput(tag="in_pipe", input_type=Boolean(optional=True), prefix="-pipe", doc=InputDocumentation(doc="If -pipe is specified, the software command will be\npiped into the qsub command. For example instead of:\n'qsub -q <queuename> -N <jobname> python <script>.py\n<arg1> <arg2>', 'echo python <script>.py <arg1> <arg2>\n| qsub -q <queuename> -N <jobname>' will be\nwritten/executed.")), ToolInput(tag="in_chunk", input_type=Int(optional=True), prefix="-chunk", doc=InputDocumentation(doc="Length of chromosomal chunks")), ToolInput(tag="in_fast_a_path", input_type=String(), position=0, doc=InputDocumentation(doc="Path to the genome fasta file.")), ToolInput(tag="in_chr_size_path", input_type=String(), position=1, doc=InputDocumentation(doc="Path to a 2-column file where the first column is the\nchromosome name and the second column is its size")), ToolInput(tag="in_out_dir", input_type=String(), position=2, doc=InputDocumentation(doc="Path to directory to create output files/folders")), ToolInput(tag="in_queue_name", input_type=String(), position=3, doc=InputDocumentation(doc="Queue name for qsub job submission.")), ToolInput(tag="in_bowtie_path", input_type=String(), position=4, doc=InputDocumentation(doc="Path to bowtie-build executable"))], outputs=[ToolOutput(tag="out_write_script", output_type=File(optional=True), selector=InputSelector(input_to_select="in_write_script", type_hint=File()), doc=OutputDocumentation(doc="Specify -write <Path to output job submission file> if\ninstead of direct execution, you want to save the job\nsubmission file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ubismap_Py_V0_1_0().translate("wdl", allow_empty_container=True)

