from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, String

Samtools_Ampliconstats_V0_1_0 = CommandToolBuilder(tool="samtools_ampliconstats", base_command=["samtools", "ampliconstats"], inputs=[ToolInput(tag="in_required_flag", input_type=Int(optional=True), prefix="--required-flag", doc=InputDocumentation(doc="|INT\nOnly include reads with all of the FLAGs present [0x0]")), ToolInput(tag="in_filter_flag", input_type=Int(optional=True), prefix="--filter-flag", doc=InputDocumentation(doc="|INT\nOnly include reads with none of the FLAGs present [0xB04]")), ToolInput(tag="in_max_amplicons", input_type=Int(optional=True), prefix="--max-amplicons", doc=InputDocumentation(doc="Change the maximum number of amplicons permitted [1000]")), ToolInput(tag="in_max_amplicon_length", input_type=Int(optional=True), prefix="--max-amplicon-length", doc=InputDocumentation(doc="Change the maximum length of an individual amplicon [1000]")), ToolInput(tag="in_min_depth", input_type=Int(), prefix="--min-depth", doc=InputDocumentation(doc="...\nMinimum base depth(s) to consider position covered [1]")), ToolInput(tag="in_pos_margin", input_type=Int(optional=True), prefix="--pos-margin", doc=InputDocumentation(doc="Margin of error for matching primer positions [30]")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Specify output file [stdout if unset]")), ToolInput(tag="in_use_sample_name", input_type=Boolean(optional=True), prefix="--use-sample-name", doc=InputDocumentation(doc="Use the sample name from the first @RG header line")), ToolInput(tag="in_tlen_adjust", input_type=Int(optional=True), prefix="--tlen-adjust", doc=InputDocumentation(doc="Add/subtract from TLEN; use when clipping but no fixmate step")), ToolInput(tag="in_t_coord_bin", input_type=Int(optional=True), prefix="--tcoord-bin", doc=InputDocumentation(doc="Bin template start,end positions into multiples of INT[1]")), ToolInput(tag="in_t_coord_min_count", input_type=Int(optional=True), prefix="--tcoord-min-count", doc=InputDocumentation(doc="Minimum template start,end frequency for recording [10]")), ToolInput(tag="in_depth_bin", input_type=String(optional=True), prefix="--depth-bin", doc=InputDocumentation(doc="Merge FDP values within +/- FRACTION together.")), ToolInput(tag="in_input_fmt", input_type=String(optional=True), prefix="--input-fmt", doc=InputDocumentation(doc="[,OPT[=VAL]]...\nSpecify input format (SAM, BAM, CRAM)")), ToolInput(tag="in_input_fmt_option", input_type=File(optional=True), prefix="--input-fmt-option", doc=InputDocumentation(doc="[=VAL]\nSpecify a single input file format option in the form\nof OPTION or OPTION=VALUE")), ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="Reference sequence FASTA FILE [null]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of additional threads to use [0]\n")), ToolInput(tag="in_primers_dot_bed", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Specify output file [stdout if unset]"))], container="quay.io/biocontainers/samtools:1.12--hd5e65b6_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Samtools_Ampliconstats_V0_1_0().translate("wdl")

