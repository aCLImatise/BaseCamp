from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Shed_Tools_Test_V0_1_0 = CommandToolBuilder(tool="shed_tools_test", base_command=["shed-tools", "test"], inputs=[ToolInput(tag="in_tools_file", input_type=File(optional=True), prefix="--toolsfile", doc=InputDocumentation(doc="Tools file to use (see tool_list.yaml.sample)")), ToolInput(tag="in_yaml_tool", input_type=String(optional=True), prefix="--yaml_tool", doc=InputDocumentation(doc="Install tool represented by yaml string")), ToolInput(tag="in_name", input_type=File(optional=True), prefix="--name", doc=InputDocumentation(doc="The name of the tool to install (only applicable if\nthe tools file is not provided).")), ToolInput(tag="in_owner", input_type=File(optional=True), prefix="--owner", doc=InputDocumentation(doc="The owner of the tool to install (only applicable if\nthe tools file is not provided).")), ToolInput(tag="in_revisions", input_type=Boolean(optional=True), prefix="--revisions", doc=InputDocumentation(doc="[REVISIONS [REVISIONS ...]]\nThe revisions of the tool repository that will be\ninstalled. All revisions must be specified after this\nflag by a space.Example: --revisions 0a5c7992b1ac\nf048033da666(Only applicable if the tools file is not\nprovided).")), ToolInput(tag="in_toolshed", input_type=File(optional=True), prefix="--toolshed", doc=InputDocumentation(doc="The Tool Shed URL where to install the tool from. This\nis applicable only if the tool info is provided as an\noption vs. in the tools file.")), ToolInput(tag="in_test_json", input_type=File(optional=True), prefix="--test_json", doc=InputDocumentation(doc="Record tool test output to specified file. This file\ncan be turned into reports with ``planemo test_reports\n<output.json>``.")), ToolInput(tag="in_test_user_api_key", input_type=String(optional=True), prefix="--test_user_api_key", doc=InputDocumentation(doc="A user is needed to execute the tests. This can be\ndifferent the --api_key which is assumed to be an\nadmin key. If --api_key is a valid user (e.g. it is\nnot a master API key) this does not need to be\nspecified and --api_key will be reused.")), ToolInput(tag="in_test_user", input_type=String(optional=True), prefix="--test_user", doc=InputDocumentation(doc="A user is needed to execute the tests. If --api_key is\na master api key (i.e. not tied to a real user) and\n--test_user_api_key isn't specified, this user email\nwill be used. This user will be created if needed.")), ToolInput(tag="in_parallel_tests", input_type=Int(optional=True), prefix="--parallel_tests", doc=InputDocumentation(doc="Specify the maximum number of tests that will be run\nin parallel.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase output verbosity.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log_file", doc=InputDocumentation(doc="Where the log file should be stored. Default is a file\nin your system's temp folder")), ToolInput(tag="in_galaxy", input_type=String(optional=True), prefix="--galaxy", doc=InputDocumentation(doc="Target Galaxy instance URL/IP address")), ToolInput(tag="in_user", input_type=String(optional=True), prefix="--user", doc=InputDocumentation(doc="Galaxy user email address")), ToolInput(tag="in_password", input_type=String(optional=True), prefix="--password", doc=InputDocumentation(doc="Password for the Galaxy user")), ToolInput(tag="in_api_key", input_type=File(optional=True), prefix="--api_key", doc=InputDocumentation(doc="Galaxy admin user API key (required if not defined in\nthe tools list file)\n"))], outputs=[ToolOutput(tag="out_test_json", output_type=File(optional=True), selector=InputSelector(input_to_select="in_test_json", type_hint=File()), doc=OutputDocumentation(doc="Record tool test output to specified file. This file\ncan be turned into reports with ``planemo test_reports\n<output.json>``."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Shed_Tools_Test_V0_1_0().translate("wdl", allow_empty_container=True)

