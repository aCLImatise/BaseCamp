version 1.0

task Nplikeness {
  input {
    File? in
    File? in_type
    File? np_trainer
    String? out
    File? out_fragments
    File? out_type
    Boolean? reconstruct_fragments
    Boolean? serialize_signatures
    Int? signature_height
    File? sm_trainer
    Boolean? application_infofor_input
    String? in_signatures_file
    Boolean? var_12
    String below_dot
    String insignaturesfile_arg_specify
  }
  command <<<
    np_likeness \
      ~{below_dot} \
      ~{insignaturesfile_arg_specify} \
      ~{if defined(in) then ("-in " +  '"' + in + '"') else ""} \
      ~{if defined(in_type) then ("-intype " +  '"' + in_type + '"') else ""} \
      ~{if defined(np_trainer) then ("-npTrainer " +  '"' + np_trainer + '"') else ""} \
      ~{if defined(out) then ("-out " +  '"' + out + '"') else ""} \
      ~{if defined(out_fragments) then ("-outFragments " +  '"' + out_fragments + '"') else ""} \
      ~{if defined(out_type) then ("-outtype " +  '"' + out_type + '"') else ""} \
      ~{if defined(reconstruct_fragments) then ("-reconstructFragments " +  '"' + reconstruct_fragments + '"') else ""} \
      ~{if (serialize_signatures) then "-serializeSignatures" else ""} \
      ~{if defined(signature_height) then ("-signatureHeight " +  '"' + signature_height + '"') else ""} \
      ~{if defined(sm_trainer) then ("-smTrainer " +  '"' + sm_trainer + '"') else ""} \
      ~{if (application_infofor_input) then "-v" else ""} \
      ~{if defined(in_signatures_file) then ("-inSignaturesFile " +  '"' + in_signatures_file + '"') else ""} \
      ~{if (var_12) then "-generateSignatures" else ""}
  >>>
  runtime {
    docker: "None"
  }
  parameter_meta {
    in: "Input structure file to score or to"
    in_type: "Input file type: Enter sdf/smi"
    np_trainer: "Serialized NP atomSignatures file generated\\nby this program"
    out: "Output structure from scoring"
    out_fragments: "Output .txt file for reconstructed\\nfragments. Specify this option only if 'reconstructFragments' is true.\\nAlternatively, this option can also be specified along with\\n'generateSignatures' as a output file"
    out_type: "Output file type: Enter sdf/smi"
    reconstruct_fragments: "Optional boolean argument {true/false} to\\nreconstruct fragments. If true individual fragments with scores are\\nwritten out in SMILES format"
    serialize_signatures: "Use this function to serialize .txt\\nsignatures file generated by this program using 'generateSignatures'\\noption.The input for this function is taken via option 'inSignaturesFile'.\\nAlternatively, this function can be used alongside 'generateSignatures'\\nfunction to directly serialize and store the generated signatures."
    signature_height: "Signature height to be generated; Use this\\nalong 'generateSignatures'; Default size: 2"
    sm_trainer: "Serialized SM atomSignatures file generated\\nby this program"
    application_infofor_input: "Application info\\nFor input and output file please specify the type using -intype and -outtype repectively.\\nCurrently the types can be either sdf/smi.\\nIf my mistake you input a sdf file but give it a different format type,\\nthe program will not complain but will finish without any output. If output file options (out/outFragments) are unspecified,\\nauto generated output files (based on Input format) will be written to the directory of the input file.\\n"
    in_signatures_file: ""
    var_12: ""
    below_dot: "-generateSignatures           Given input sdf/smi file use this function\\nto generate atomSignatures for training molecules."
    insignaturesfile_arg_specify: "-inSignaturesFile <arg>       To specify atomSignatures .txt file"
  }
  output {
    File out_stdout = stdout()
    File out_out_fragments = "${in_out_fragments}"
    File out_out_type = "${in_out_type}"
  }
}