!Command
command:
- jq
positional:
- !Positional
  optional: false
  position: 0
  name: jq filter
  description: ''
- !Positional
  optional: true
  position: 1
  name: file...
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - -c
  description: compact instead of pretty-printed output;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -n
  description: use `null` as the single input value;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -e
  description: set the exit status code based on the output;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  description: read (slurp) all inputs into an array; apply filter to it;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -r
  description: output raw strings, not JSON texts;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -R
  description: read raw strings, not JSON texts;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -C
  description: colorize JSON;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -M
  description: monochrome (don't colorize JSON);
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -S
  description: sort keys of objects on output;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --tab
  description: use tabs for indentation;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --arg
  description: v        set variable $a to value <v>;
  args: !SimpleFlagArg
    name: a
- !Flag
  optional: true
  synonyms:
  - --argjson
  description: v    set variable $a to JSON value <v>;
  args: !SimpleFlagArg
    name: a
- !Flag
  optional: true
  synonyms:
  - --slurpfile
  description: f  set variable $a to an array of JSON texts read from <f>;
  args: !SimpleFlagArg
    name: a
- !Flag
  optional: true
  synonyms:
  - --rawfile
  description: f    set variable $a to a string consisting of the contents of <f>;
  args: !SimpleFlagArg
    name: a
- !Flag
  optional: true
  synonyms:
  - --args
  description: remaining arguments are string arguments, not files;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --jsonargs
  description: remaining arguments are JSON arguments, not files;
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "jq - commandline JSON processor [version 1.6]\n\nUsage:\tjq [options]\
  \ <jq filter> [file...]\n\tjq [options] --args <jq filter> [strings...]\n\tjq [options]\
  \ --jsonargs <jq filter> [JSON_TEXTS...]\n\njq is a tool for processing JSON inputs,\
  \ applying the given filter to\nits JSON text inputs and producing the filter's\
  \ results as JSON on\nstandard output.\n\nThe simplest filter is ., which copies\
  \ jq's input to its output\nunmodified (except for formatting, but note that IEEE754\
  \ is used\nfor number representation internally, with all that that implies).\n\n\
  For more advanced filters see the jq(1) manpage (\"man jq\")\nand/or https://stedolan.github.io/jq\n\
  \nExample:\n\n\t$ echo '{\"foo\": 0}' | jq .\n\t{\n\t\t\"foo\": 0\n\t}\n\nSome of\
  \ the options include:\n  -c               compact instead of pretty-printed output;\n\
  \  -n               use `null` as the single input value;\n  -e               set\
  \ the exit status code based on the output;\n  -s               read (slurp) all\
  \ inputs into an array; apply filter to it;\n  -r               output raw strings,\
  \ not JSON texts;\n  -R               read raw strings, not JSON texts;\n  -C  \
  \             colorize JSON;\n  -M               monochrome (don't colorize JSON);\n\
  \  -S               sort keys of objects on output;\n  --tab            use tabs\
  \ for indentation;\n  --arg a v        set variable $a to value <v>;\n  --argjson\
  \ a v    set variable $a to JSON value <v>;\n  --slurpfile a f  set variable $a\
  \ to an array of JSON texts read from <f>;\n  --rawfile a f    set variable $a to\
  \ a string consisting of the contents of <f>;\n  --args           remaining arguments\
  \ are string arguments, not files;\n  --jsonargs       remaining arguments are JSON\
  \ arguments, not files;\n  --               terminates argument processing;\n\n\
  Named arguments are also available as $ARGS.named[], while\npositional arguments\
  \ are available as $ARGS.positional[].\n\nSee the manpage for more options.\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/jq:1.6
