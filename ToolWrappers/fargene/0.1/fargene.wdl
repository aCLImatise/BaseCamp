version 1.0

task Fargene {
  input {
    Array[String] in_files
    File? hmm_model
    String? score
    Boolean? input_data_paired
    String? meta_score
    Directory? output_directory_defaultfargeneoutput
    Directory? force
    Directory? tmp_dir
    Boolean? protein
    Int? processes
    Int? min_orf_length
    Boolean? retrieve_whole
    Boolean? no_orf_predict
    Boolean? no_quality_filtering
    Boolean? no_assembly
    Boolean? orf_finder
    Boolean? store_peptides
    Boolean? rerun
    String? amino_dir
    String? fast_a_dir
    String? translation_format
    String? loglevel
    File? log_file
  }
  command <<<
    fargene \
      ~{if defined(in_files) then ("--infiles " +  '"' + in_files + '"') else ""} \
      ~{if defined(hmm_model) then ("--hmm-model " +  '"' + hmm_model + '"') else ""} \
      ~{if defined(score) then ("--score " +  '"' + score + '"') else ""} \
      ~{if (input_data_paired) then "--meta" else ""} \
      ~{if defined(meta_score) then ("--meta-score " +  '"' + meta_score + '"') else ""} \
      ~{if defined(output_directory_defaultfargeneoutput) then ("--output " +  '"' + output_directory_defaultfargeneoutput + '"') else ""} \
      ~{if (force) then "--force" else ""} \
      ~{if defined(tmp_dir) then ("--tmp-dir " +  '"' + tmp_dir + '"') else ""} \
      ~{if (protein) then "--protein" else ""} \
      ~{if defined(processes) then ("--processes " +  '"' + processes + '"') else ""} \
      ~{if defined(min_orf_length) then ("--min-orf-length " +  '"' + min_orf_length + '"') else ""} \
      ~{if (retrieve_whole) then "--retrieve-whole" else ""} \
      ~{if (no_orf_predict) then "--no-orf-predict" else ""} \
      ~{if (no_quality_filtering) then "--no-quality-filtering" else ""} \
      ~{if (no_assembly) then "--no-assembly" else ""} \
      ~{if (orf_finder) then "--orf-finder" else ""} \
      ~{if (store_peptides) then "--store-peptides" else ""} \
      ~{if (rerun) then "--rerun" else ""} \
      ~{if defined(amino_dir) then ("--amino-dir " +  '"' + amino_dir + '"') else ""} \
      ~{if defined(fast_a_dir) then ("--fasta-dir " +  '"' + fast_a_dir + '"') else ""} \
      ~{if defined(translation_format) then ("--translation-format " +  '"' + translation_format + '"') else ""} \
      ~{if defined(loglevel) then ("--loglevel " +  '"' + loglevel + '"') else ""} \
      ~{if defined(log_file) then ("--logfile " +  '"' + log_file + '"') else ""}
  >>>
  runtime {
    docker: "None"
  }
  parameter_meta {
    in_files: "Input file(s) to be searched. Could either be in FASTA\\nor FASTQ format."
    hmm_model: "The Hidden Markov Model that should be used to analyse\\nthe data. Could either be one of the pre-defined\\nmodels or the path to a custom HMM."
    score: "The threshold score for a sequence to be classified as\\na (almost) complete gene (default: None)."
    input_data_paired: "If the input data is paired end metagenomic data\\n(default: False)."
    meta_score: "The threshold score for a fragment to be classified as\\na positive. Expressed as score per amino acid\\n(default: None)."
    output_directory_defaultfargeneoutput: "The output directory for the whole run (default:\\n./fargene_output)."
    force: "Overwrite output directory if it exists (default:\\nFalse)."
    tmp_dir: "Directory for (sometimes large) intermediate files.\\n(default: OUT_DIR/tmpdir)"
    protein: "If the input sequence(s) is amino acids (default:\\nFalse)."
    processes: "Number of processes to be used when processing\\nmetagenomic data (default: 1)."
    min_orf_length: "The minimal length for a retrieved predicted ORF (nt).\\n(default: 90% of the length of the chosen hmm.)"
    retrieve_whole: "Use this flag if the whole sequence where a hit is\\ndetected should be retrieved (default: False)."
    no_orf_predict: "Do not perform ORF prediction."
    no_quality_filtering: "Use if no quality control should be performed on the\\nmetagenomic data (default: False)."
    no_assembly: "Use if you want to skip the assembly and retrieval of\\ncontigs for metagenomic data (default: False)."
    orf_finder: "Use NCBI ORFfinder instead of prodigal for ORF\\nprediction of genomes/contigs (default: False)."
    store_peptides: "Store the translated sequences. Useful if you plan to\\nredo the analysis using a different model and want to\\nskip the preprocessing steps (default: False)."
    rerun: "Use of you want to redo the analysis or do the\\nanalysis using a different model and have kept either\\nthe nucletide or amino acid sequences. Please note\\nthat this only works if the input data is the same for\\nboth runs (default: False)."
    amino_dir: "Where the amino acid sequences generated by the method\\nare located. Only to be used in combination with\\n--rerun"
    fast_a_dir: "Where the nucleotide sequences in FASTA generated by\\nprevious runs of the method are located. Only to be\\nused in combination with --rerun"
    translation_format: "The translation format that transeq should use.\\n(default: pearson)"
    loglevel: "Set logging level (default: INFO)."
    log_file: "Logfile (default: fargene_analysis.log)."
  }
  output {
    File out_stdout = stdout()
    Directory out_output_directory_defaultfargeneoutput = "${in_output_directory_defaultfargeneoutput}"
    Directory out_force = "${in_force}"
  }
}