!Command
command:
- wtzmo
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -t
  description: Number of threads, [1]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -P
  description: Total parallel jobs, [1]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -p
  description: "Index of current job (0-based), [0]\nSuppose to run wtzmo parallelly\
    \ in 60 nodes. For node1, -P 60 -p 0; node2, -P 60 -p 1, ..."
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -i
  description: Long reads sequences file, + *
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -I
  description: "Long reads sequence file, DON'T build index on them, +\nIf specified,\
    \ program will only align them against all sequences from <-i>\nUseful in -I mapping\
    \ contigs(not too large) against -i pacbio reads"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -b
  description: "Long reads retained region, often from wtobt/wtcyc, +\nFormat: read_name\\\
    toffset\\tlength\\toriginal_len"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -J
  description: Jack knife of original read length, [0]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -L
  description: Load pairs of read name from file, will avoid to calculate overlap
    them again, + [NULL]
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -o
  description: Output file of alignments, *
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - '-9'
  description: "Record pairs of sequences have beed aligned regardless of successful,\
    \ including pairs from '-L'\nFormat: read1\\tread2"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -f
  description: Force overwrite
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -H
  description: "Option of homopolymer compression, [3]\n1: trun on compression on\
    \ kmer\n2: trun on compression on small-kmer(zmer)"
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -K
  description: "Filter high frequency kmers, maybe repetitive, [0]\n0: set K to 5\
    \ * <average_kmer_depth>, but no less than 100"
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -d
  description: Minimum size of total seeding region for kmer windows, [300]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -S
  description: Subsampling kmers, 1/<-S> kmers are indexed, [4]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -G
  description: "Build kmer index in multiple iterations to save memory, 1: once, [1]\n\
    Given 10M reads having 100G bases, about 100/(4)=25G used in seq storage, about\
    \ 100*(6)G=600G\nused in kmer-index. If -G = 10, kmer-index is divided into 10\
    \ pieces, thus taking 60G. But we need additional\n10M / <tot_jobs: -P> * 8 *\
    \ <num_of_cand: -A> memory to store candidates to be aligned."
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -Z
  description: Filter high frequency z-mers, maybe repetitive, [64]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -U
  description: "Ultra-fast dot matrix alignment, pattern search in zmer image\nUsage:\
    \ wtzmo <other_options> -s 200 -m 0.1 -U 128 -U 64 -U 160 -U 1.0 -U 0.05\n(1)\
    \    (2)   (3)    (4)    (5)\nIntra-block (1): max_gap, (2): max_deviation, (3):\
    \ min_size\nInter-block (4): deviation penalty, (5): gap size penalty\nuse -U\
    \ -1 instead of type six default parameters\nWill trun off -y -R -r -l -q -B -C\
    \ -M -X -O -W -T -w -W -e -n -y <int>    Zmer window, [800]"
  args: !SimpleFlagArg
    name: float
- !Flag
  optional: true
  synonyms:
  - -R
  description: Minimum size of seeding region within zmer window, [200]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -r
  description: Minimum size of total seeding region for zmer windows, [300]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -l
  description: Maximum variant of uncompressed sizes between two matched hz-kmer,
    [2]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -q
  description: THreshold of seed-window coverage along query, will be used to decrease
    weight of repetitive region, [100]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -A
  description: Limit number of best candidates per read, [500]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -B
  description: "Limit number of best overlaps per read, [100]\nSo call 'best' is estimated\
    \ by seed-windows, and increase as rd_len / avg_rd_len"
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -C
  description: Don't skip calculation of its overlaps even when the read was contained
    by others
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -F
  description: Reads from this file(s) are to be exclued, one line for one read name,
    + [NULL]
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -M
  description: 'Alignment penalty: match, [2]'
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -X
  description: 'Alignment penalty: mismatch, [-5]'
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -O
  description: 'Alignment penalty: insertion or deletion, [-3]'
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -E
  description: 'Alignment penalty: gap extension, [-1]'
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -T
  description: 'Alignment penalty: read end clipping, 0: distable HSP extension, otherwise
    set to -50 or other [-50]'
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -w
  description: Minimum bandwidth, iteratively doubled to maximum [50]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -W
  description: Maximum bandwidth, [3200]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -e
  description: Maximum bandwidth at ending extension, [800]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -s
  description: Minimum alignment score, [200]
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -m
  description: Minimum alignment identity, [0.5]
  args: !SimpleFlagArg
    name: float
- !Flag
  optional: true
  synonyms:
  - -n
  description: Refine the alignment
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -v
  description: Verbose, BE careful, HUGEEEEEEEE output on STDOUT
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "WTZMO: Overlaper of long reads using homopolymer compressed k-mer seeding\n\
  SMARTdenovo: Ultra-fast de novo assembler for high noisy long reads\nAuthor: Jue\
  \ Ruan <ruanjue@gmail.com>\nVersion: 1.0\nUsage: wtzmo [options]\nOptions:\n -t\
  \ <int>    Number of threads, [1]\n -P <int>    Total parallel jobs, [1]\n -p <int>\
  \    Index of current job (0-based), [0]\n             Suppose to run wtzmo parallelly\
  \ in 60 nodes. For node1, -P 60 -p 0; node2, -P 60 -p 1, ...\n -i <string> Long\
  \ reads sequences file, + *\n -I <string> Long reads sequence file, DON'T build\
  \ index on them, +\n             If specified, program will only align them against\
  \ all sequences from <-i>\n             Useful in -I mapping contigs(not too large)\
  \ against -i pacbio reads\n -b <string> Long reads retained region, often from wtobt/wtcyc,\
  \ +\n             Format: read_name\\toffset\\tlength\\toriginal_len\n -J <int>\
  \    Jack knife of original read length, [0]\n -L <string> Load pairs of read name\
  \ from file, will avoid to calculate overlap them again, + [NULL]\n -o <string>\
  \ Output file of alignments, *\n -9 <string> Record pairs of sequences have beed\
  \ aligned regardless of successful, including pairs from '-L'\n             Format:\
  \ read1\\tread2\n -f          Force overwrite\n -H <int>    Option of homopolymer\
  \ compression, [3]\n             1: trun on compression on kmer\n             2:\
  \ trun on compression on small-kmer(zmer)\n -k <int>    Kmer size, 5 <= <-k> <=\
  \ 32, [16]\n -K <int>    Filter high frequency kmers, maybe repetitive, [0]\n  \
  \           0: set K to 5 * <average_kmer_depth>, but no less than 100\n -d <int>\
  \    Minimum size of total seeding region for kmer windows, [300]\n -S <int>   \
  \ Subsampling kmers, 1/<-S> kmers are indexed, [4]\n -G <int>    Build kmer index\
  \ in multiple iterations to save memory, 1: once, [1]\n             Given 10M reads\
  \ having 100G bases, about 100/(4)=25G used in seq storage, about 100*(6)G=600G\n\
  \             used in kmer-index. If -G = 10, kmer-index is divided into 10 pieces,\
  \ thus taking 60G. But we need additional\n             10M / <tot_jobs: -P> * 8\
  \ * <num_of_cand: -A> memory to store candidates to be aligned.\n -z <int>    Smaller\
  \ kmer size (z-mer), 5 <= <-z> <= 16, [10]\n -Z <int>    Filter high frequency z-mers,\
  \ maybe repetitive, [64]\n -U <float>  Ultra-fast dot matrix alignment, pattern\
  \ search in zmer image\n             Usage: wtzmo <other_options> -s 200 -m 0.1\
  \ -U 128 -U 64 -U 160 -U 1.0 -U 0.05\n                                         \
  \               (1)    (2)   (3)    (4)    (5)\n             Intra-block (1): max_gap,\
  \ (2): max_deviation, (3): min_size\n             Inter-block (4): deviation penalty,\
  \ (5): gap size penalty\n             use -U -1 instead of type six default parameters\n\
  \             Will trun off -y -R -r -l -q -B -C -M -X -O -W -T -w -W -e -n -y <int>\
  \    Zmer window, [800]\n -R <int>    Minimum size of seeding region within zmer\
  \ window, [200]\n -r <int>    Minimum size of total seeding region for zmer windows,\
  \ [300]\n -l <int>    Maximum variant of uncompressed sizes between two matched\
  \ hz-kmer, [2]\n -q <int>    THreshold of seed-window coverage along query, will\
  \ be used to decrease weight of repetitive region, [100]\n -A <int>    Limit number\
  \ of best candidates per read, [500]\n -B <int>    Limit number of best overlaps\
  \ per read, [100]\n             So call 'best' is estimated by seed-windows, and\
  \ increase as rd_len / avg_rd_len\n -C          Don't skip calculation of its overlaps\
  \ even when the read was contained by others\n -F <string> Reads from this file(s)\
  \ are to be exclued, one line for one read name, + [NULL]\n -M <int>    Alignment\
  \ penalty: match, [2]\n -X <int>    Alignment penalty: mismatch, [-5]\n -O <int>\
  \    Alignment penalty: insertion or deletion, [-3]\n -E <int>    Alignment penalty:\
  \ gap extension, [-1]\n -T <int>    Alignment penalty: read end clipping, 0: distable\
  \ HSP extension, otherwise set to -50 or other [-50]\n -w <int>    Minimum bandwidth,\
  \ iteratively doubled to maximum [50]\n -W <int>    Maximum bandwidth, [3200]\n\
  \ -e <int>    Maximum bandwidth at ending extension, [800]\n -s <int>    Minimum\
  \ alignment score, [200]\n -m <float>  Minimum alignment identity, [0.5]\n -n  \
  \        Refine the alignment\n -v          Verbose, BE careful, HUGEEEEEEEE output\
  \ on STDOUT\n\nExample1: for pacbio reads\n$> wtzmo -t 32 -i wt.fa -o wt.zmo.ovl\
  \ -m 0.6\nExample2: for high accurate reads\n$> wtzmo -t 32 -i wt.corrected.fa -o\
  \ wt.zmo.ovl -n -m 0.99 -k 31 -z 16 -H 0 -y 800 -R 500 -r 800 -T -10 -W 200 -e 200\n\
  \n"
generated_using:
- --help
docker_image:
