from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, File

Wtcyc_V0_1_0 = CommandToolBuilder(tool="wtcyc", base_command=["wtcyc"], inputs=[ToolInput(tag="in_number_of_threads", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="Number of threads, [1]")), ToolInput(tag="in_total_parallel_jobs", input_type=Int(optional=True), prefix="-P", doc=InputDocumentation(doc="Total parallel jobs, [1]")), ToolInput(tag="in_index_current_p", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="Index of current job (0-based), [0]\nSuppose to run it parallelly in 60 nodes. For node1, -P 60 -p 0; node2, -P 60 -p 1, ...")), ToolInput(tag="in_output_reads_regions", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="Output of reads' regions after trimming, [-]")), ToolInput(tag="in_output_of_alignments", input_type=String(optional=True), prefix="-a", doc=InputDocumentation(doc="Output of alignments, [NULL]")), ToolInput(tag="in_force_overwrite_output", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="Force overwrite output file")), ToolInput(tag="in_mininum_alignment_score", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc="Mininum alignment score, [400]")), ToolInput(tag="in_mininum_alignment_identity", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Mininum alignment identity, [0.7]")), ToolInput(tag="in_alignment_penalty_match", input_type=Int(optional=True), prefix="-M", doc=InputDocumentation(doc="Alignment penalty: match, [2]")), ToolInput(tag="in_alignment_penalty_mismatch", input_type=Int(optional=True), prefix="-X", doc=InputDocumentation(doc="Alignment penalty: mismatch, [-5]")), ToolInput(tag="in_alignment_penalty_gap_open", input_type=Int(optional=True), prefix="-O", doc=InputDocumentation(doc="Alignment penalty: gap open, [-3]")), ToolInput(tag="in_alignment_penalty_gap_extension", input_type=Int(optional=True), prefix="-E", doc=InputDocumentation(doc="Alignment penalty: gap extension, [-1]")), ToolInput(tag="in_alignment_penalty_read", input_type=Int(optional=True), prefix="-T", doc=InputDocumentation(doc="Alignment penalty: read end clipping, 0: distable HSP extension, otherwise set to -30 or other [-100]")), ToolInput(tag="in_long_read_file", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_force_overwrite_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force_overwrite_output", type_hint=File()), doc=OutputDocumentation(doc="Force overwrite output file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Wtcyc_V0_1_0().translate("wdl", allow_empty_container=True)

