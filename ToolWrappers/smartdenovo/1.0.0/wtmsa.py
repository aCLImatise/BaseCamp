from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, Float

Wtmsa_V0_1_0 = CommandToolBuilder(tool="wtmsa", base_command=["wtmsa"], inputs=[ToolInput(tag="in_total_parallel_jobs", input_type=Int(optional=True), prefix="-P", doc=InputDocumentation(doc="Total parallel jobs, [1]")), ToolInput(tag="in_index_current_cpu", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="Index of current job (0-based), [0]\nSuppose to run wtmsa for the same layout file parallelly in 60 cpu. For cpu1, -P 60 -p 0; cpu2, -P 60 -p 1, ...")), ToolInput(tag="in_input_file_layout", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="Input file, layout from wtlay, +, *")), ToolInput(tag="in_output_file_sequences", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Output file, consensus sequences, *")), ToolInput(tag="in_print_backbone_sequences", input_type=File(optional=True), prefix="-B", doc=InputDocumentation(doc="Print backbone sequences on file for debug [NULL]")), ToolInput(tag="in_print_dot_graph", input_type=File(optional=True), prefix="-G", doc=InputDocumentation(doc="Print dot graph on file, H U G E, be careful, [NULL]")), ToolInput(tag="in_force_overwrite", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Force overwrite")), ToolInput(tag="in_trun_homopolymer_compression", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="Trun off homopolymer compression")), ToolInput(tag="in_zmer_window", input_type=Int(optional=True), prefix="-y", doc=InputDocumentation(doc="Zmer window, [800]")), ToolInput(tag="in_minimum_size_seeding", input_type=Int(optional=True), prefix="-R", doc=InputDocumentation(doc="Minimum size of seeding region within zmer window, [200]")), ToolInput(tag="in_maximum_variant_uncompressed", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="Maximum variant of uncompressed sizes between two matched zmer, [2]")), ToolInput(tag="in_alignment_penalty_match", input_type=Int(optional=True), prefix="-M", doc=InputDocumentation(doc="Alignment penalty: match, [2]")), ToolInput(tag="in_alignment_penalty_mismatch", input_type=Int(optional=True), prefix="-X", doc=InputDocumentation(doc="Alignment penalty: mismatch, [-5]")), ToolInput(tag="in_alignment_penalty_insertion", input_type=Int(optional=True), prefix="-I", doc=InputDocumentation(doc="Alignment penalty: insertion, [-2]")), ToolInput(tag="in_alignment_penalty_deletion", input_type=Int(optional=True), prefix="-D", doc=InputDocumentation(doc="Alignment penalty: deletion, [-3]")), ToolInput(tag="in_turn_merge_penalty", input_type=Int(optional=True), prefix="-V", doc=InputDocumentation(doc="turn on homopolymer merge penalty")), ToolInput(tag="in_alignment_penalty_gap", input_type=Int(optional=True), prefix="-E", doc=InputDocumentation(doc="Alignment penalty: gap extension, [-1]")), ToolInput(tag="in_alignment_penalty_read", input_type=Int(optional=True), prefix="-T", doc=InputDocumentation(doc="Alignment penalty: read end clipping [-10]")), ToolInput(tag="in_disable_phreadqv_refinealignment", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="Disable PhreadQV in refine-alignment")), ToolInput(tag="in_minimum_bandwidth_pairwise", input_type=Int(optional=True), prefix="-w", doc=InputDocumentation(doc="Minimum bandwidth of pairwise alignment, iteratively doubled to maximum [50]")), ToolInput(tag="in_maximum_bandwidth_pairwise", input_type=Int(optional=True), prefix="-W", doc=InputDocumentation(doc="Maximum bandwidth of pairwise alignment, [3200]")), ToolInput(tag="in_maximum_bandwidth_graph", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="Maximum bandwidth at graph alignment and ending extension, [800]")), ToolInput(tag="in_basic_bandwidth_graph", input_type=Int(optional=True), prefix="-g", doc=InputDocumentation(doc="Basic bandwidth in graph alignment, [100]")), ToolInput(tag="in_minimum_alignment_identity", input_type=Float(optional=True), prefix="-m", doc=InputDocumentation(doc="Minimum alignment identity, [0.5]")), ToolInput(tag="in_number_iterations_consensus", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="Number of iterations for consensus calling, the more, the accurater, the slower [2]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Verbose, +"))], outputs=[ToolOutput(tag="out_output_file_sequences", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_sequences", type_hint=File()), doc=OutputDocumentation(doc="Output file, consensus sequences, *"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Wtmsa_V0_1_0().translate("wdl", allow_empty_container=True)

