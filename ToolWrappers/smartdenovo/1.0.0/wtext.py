from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, String, Float, Boolean

Wtext_V0_1_0 = CommandToolBuilder(tool="wtext", base_command=["wtext"], inputs=[ToolInput(tag="in_number_of_threads", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="Number of threads, [1]")), ToolInput(tag="in_total_parallel_jobs", input_type=Int(optional=True), prefix="-P", doc=InputDocumentation(doc="Total parallel jobs, [1]")), ToolInput(tag="in_index_current_p", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="Index of current job (0-based), [0]\nSuppose to run it parallelly in 60 nodes. For node1, -P 60 -p 0; node2, -P 60 -p 1, ...")), ToolInput(tag="in_long_reads_file", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="Long reads sequences file, + *")), ToolInput(tag="in_long_reads_previous_region", input_type=String(optional=True), prefix="-B", doc=InputDocumentation(doc="Long reads previous retained region, often from wtcyc, +\nFormat: read_name\toffset\tlength")), ToolInput(tag="in_long_reads_retained_region", input_type=String(optional=True), prefix="-b", doc=InputDocumentation(doc="Long reads retained region, often from wtobt, +\nFormat: read_name\toffset\tlength")), ToolInput(tag="in_overlap_files_readsttlentbegtendtreadsttlentbegtendtscoretidentityfloattmattmistinstdeltcigar", input_type=Float(optional=True), prefix="-j", doc=InputDocumentation(doc="Overlap file(s), + *\nFormat: reads1\t+/-\tlen1\tbeg1\tend1\treads2\t+/-\tlen2\tbeg2\tend2\tscore\tidentity<float>\tmat\tmis\tins\tdel\tcigar")), ToolInput(tag="in_output_file_extended", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Output file of extended alignments, -:stdout, *")), ToolInput(tag="in_force_overwrite", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Force overwrite")), ToolInput(tag="in_alignment_penalty_match", input_type=Int(optional=True), prefix="-M", doc=InputDocumentation(doc="Alignment penalty: match, [2]")), ToolInput(tag="in_alignment_penalty_mismatch", input_type=Int(optional=True), prefix="-X", doc=InputDocumentation(doc="Alignment penalty: mismatch, [-5]")), ToolInput(tag="in_alignment_penalty_insertion", input_type=Int(optional=True), prefix="-O", doc=InputDocumentation(doc="Alignment penalty: insertion or deletion, [-3]")), ToolInput(tag="in_alignment_penalty_gap", input_type=Int(optional=True), prefix="-E", doc=InputDocumentation(doc="Alignment penalty: gap extension, [-1]")), ToolInput(tag="in_alignment_penalty_read", input_type=Int(optional=True), prefix="-T", doc=InputDocumentation(doc="Alignment penalty: read end clipping [-100]")), ToolInput(tag="in_maximum_extension_bp", input_type=Int(optional=True), prefix="-S", doc=InputDocumentation(doc="Maximum extension (bp) in each end, [400]"))], outputs=[ToolOutput(tag="out_output_file_extended", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_extended", type_hint=File()), doc=OutputDocumentation(doc="Output file of extended alignments, -:stdout, *"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Wtext_V0_1_0().translate("wdl", allow_empty_container=True)

