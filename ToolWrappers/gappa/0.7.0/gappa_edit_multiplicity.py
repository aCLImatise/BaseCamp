from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, Int

Gappa_Edit_Multiplicity_V0_1_0 = CommandToolBuilder(tool="gappa_edit_multiplicity", base_command=["gappa", "edit", "multiplicity"], inputs=[ToolInput(tag="in_j_place_path", input_type=File(optional=True), prefix="--jplace-path", doc=InputDocumentation(doc=":PATH(existing)=[] ... REQUIRED\nList of jplace files or directories to process. For directories, only files with the extension `.jplace[.gz]` are processed.")), ToolInput(tag="in_multiplicity_file", input_type=File(optional=True), prefix="--multiplicity-file", doc=InputDocumentation(doc=":FILE Excludes: --fasta-path --write-multiplicity-file\nFile containing a tab-separated list of [sample name,] query name, and multiplicity.")), ToolInput(tag="in_fast_a_path", input_type=File(optional=True), prefix="--fasta-path", doc=InputDocumentation(doc=":PATH(existing)=[] ... Excludes: --multiplicity-file --write-multiplicity-file\nList of fasta files or directories to process. For directories, only files with the extension `.(fasta|fas|fsa|fna|ffn|faa|frn)[.gz]` are processed.")), ToolInput(tag="in_keep_full_label", input_type=File(optional=True), prefix="--keep-full-label", doc=InputDocumentation(doc=": --fasta-path\nIf fasta files are used, keep their whole label as the name for jplace pqueries, instead of removing the abundance annotation.")), ToolInput(tag="in_write_multiplicity_file", input_type=File(optional=True), prefix="--write-multiplicity-file", doc=InputDocumentation(doc=": --multiplicity-file --fasta-path\nDo not change the existing multiplicities, but instead produce a file that lists them.")), ToolInput(tag="in_out_dir", input_type=Directory(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="=.            Directory to write files to")), ToolInput(tag="in_file_prefix", input_type=File(optional=True), prefix="--file-prefix", doc=InputDocumentation(doc="File prefix for output files")), ToolInput(tag="in_file_suffix", input_type=File(optional=True), prefix="--file-suffix", doc=InputDocumentation(doc="File suffix for output files")), ToolInput(tag="in_compress", input_type=File(optional=True), prefix="--compress", doc=InputDocumentation(doc="If set, compress the output files using gzip. Output file extensions are automatically extended by `.gz`.")), ToolInput(tag="in_allow_file_overwriting", input_type=Boolean(optional=True), prefix="--allow-file-overwriting", doc=InputDocumentation(doc="Allow to overwrite existing output files instead of aborting the command.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Produce more verbose output.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="=8            Number of threads to use for calculations.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], outputs=[ToolOutput(tag="out_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_prefix", type_hint=File()), doc=OutputDocumentation(doc="File prefix for output files")), ToolOutput(tag="out_file_suffix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_suffix", type_hint=File()), doc=OutputDocumentation(doc="File suffix for output files")), ToolOutput(tag="out_compress", output_type=File(optional=True), selector=InputSelector(input_to_select="in_compress", type_hint=File()), doc=OutputDocumentation(doc="If set, compress the output files using gzip. Output file extensions are automatically extended by `.gz`.")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], container="quay.io/biocontainers/gappa:0.7.0--he513fc3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gappa_Edit_Multiplicity_V0_1_0().translate("wdl")

