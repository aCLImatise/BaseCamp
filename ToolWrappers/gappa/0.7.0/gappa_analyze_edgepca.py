from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Int, Boolean, String, Directory

Gappa_Analyze_Edgepca_V0_1_0 = CommandToolBuilder(tool="gappa_analyze_edgepca", base_command=["gappa", "analyze", "edgepca"], inputs=[ToolInput(tag="in_j_place_path", input_type=File(optional=True), prefix="--jplace-path", doc=InputDocumentation(doc=":PATH(existing)=[] ... REQUIRED\nList of jplace files or directories to process. For directories, only files with the extension `.jplace[.gz]` are processed.")), ToolInput(tag="in_kappa", input_type=Float(optional=True), prefix="--kappa", doc=InputDocumentation(doc="=1             Exponent for scaling between weighted and unweighted splitification.")), ToolInput(tag="in_epsilon", input_type=Float(optional=True), prefix="--epsilon", doc=InputDocumentation(doc="=1e-05       Epsilon to use to determine if a split matrixâ€™s column is constant for filtering. Set to a negative value to deavtivate constant columnn filtering.")), ToolInput(tag="in_components", input_type=Int(optional=True), prefix="--components", doc=InputDocumentation(doc="=5         Number of principal coordinates to calculate. Use 0 to calculate all possible coordinates.")), ToolInput(tag="in_point_mass", input_type=Boolean(optional=True), prefix="--point-mass", doc=InputDocumentation(doc="Treat every pquery as a point mass concentrated on the highest-weight placement.")), ToolInput(tag="in_ignore_multiplicities", input_type=Boolean(optional=True), prefix="--ignore-multiplicities", doc=InputDocumentation(doc="Set the multiplicity of each pquery to 1.")), ToolInput(tag="in_color_list", input_type=File(optional=True), prefix="--color-list", doc=InputDocumentation(doc="=spectral  List of colors to use for the palette. Can either be the name of a color list, a file containing one color per line, or an actual list of colors.")), ToolInput(tag="in_reverse_color_list", input_type=Boolean(optional=True), prefix="--reverse-color-list", doc=InputDocumentation(doc="If set, the `--color-list` is reversed.")), ToolInput(tag="in_mask_color", input_type=String(optional=True), prefix="--mask-color", doc=InputDocumentation(doc="=#dfdfdf   Color used to indicate masked or invalid values.")), ToolInput(tag="in_out_dir", input_type=Directory(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="=.            Directory to write files to")), ToolInput(tag="in_file_prefix", input_type=File(optional=True), prefix="--file-prefix", doc=InputDocumentation(doc="File prefix for output files")), ToolInput(tag="in_file_suffix", input_type=File(optional=True), prefix="--file-suffix", doc=InputDocumentation(doc="File suffix for output files")), ToolInput(tag="in_write_newick_tree", input_type=Boolean(optional=True), prefix="--write-newick-tree", doc=InputDocumentation(doc="If set, the tree is written to a Newick file.")), ToolInput(tag="in_write_nexus_tree", input_type=Boolean(optional=True), prefix="--write-nexus-tree", doc=InputDocumentation(doc="If set, the tree is written to a Nexus file.")), ToolInput(tag="in_write_phylo_xml_tree", input_type=Boolean(optional=True), prefix="--write-phyloxml-tree", doc=InputDocumentation(doc="If set, the tree is written to a Phyloxml file.")), ToolInput(tag="in_write_svg_tree", input_type=Boolean(optional=True), prefix="--write-svg-tree", doc=InputDocumentation(doc="If set, the tree is written to a Svg file.")), ToolInput(tag="in_svg_tree_shape", input_type=String(optional=True), prefix="--svg-tree-shape", doc=InputDocumentation(doc=":{circular,rectangular}=circular\nShape of the tree.")), ToolInput(tag="in_svg_tree_type", input_type=String(optional=True), prefix="--svg-tree-type", doc=InputDocumentation(doc=":{cladogram,phylogram}=cladogram\nType of the tree.")), ToolInput(tag="in_svg_tree_stroke_width", input_type=Float(optional=True), prefix="--svg-tree-stroke-width", doc=InputDocumentation(doc="=5\nSvg stroke width for the branches of the tree.")), ToolInput(tag="in_svg_tree_ladder_ize", input_type=Boolean(optional=True), prefix="--svg-tree-ladderize", doc=InputDocumentation(doc="If set, the tree is ladderized.")), ToolInput(tag="in_allow_file_overwriting", input_type=Boolean(optional=True), prefix="--allow-file-overwriting", doc=InputDocumentation(doc="Allow to overwrite existing output files instead of aborting the command.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Produce more verbose output.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="=8            Number of threads to use for calculations.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], outputs=[ToolOutput(tag="out_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_prefix", type_hint=File()), doc=OutputDocumentation(doc="File prefix for output files")), ToolOutput(tag="out_file_suffix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_suffix", type_hint=File()), doc=OutputDocumentation(doc="File suffix for output files")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], container="quay.io/biocontainers/gappa:0.7.0--he513fc3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gappa_Analyze_Edgepca_V0_1_0().translate("wdl")

