from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Boolean, Directory, Int

Gappa_Prepare_Extract_V0_1_0 = CommandToolBuilder(tool="gappa_prepare_extract", base_command=["gappa", "prepare", "extract"], inputs=[ToolInput(tag="in_j_place_path", input_type=File(optional=True), prefix="--jplace-path", doc=InputDocumentation(doc=":PATH(existing)=[] ... REQUIRED\nList of jplace files or directories to process. For directories, only files with the extension `.jplace[.gz]` are processed.")), ToolInput(tag="in_clade_list_file", input_type=File(optional=True), prefix="--clade-list-file", doc=InputDocumentation(doc=":FILE REQUIRED\nFile containing a tab-separated list of taxon to clade mapping.")), ToolInput(tag="in_fast_a_path", input_type=File(optional=True), prefix="--fasta-path", doc=InputDocumentation(doc=":PATH(existing)=[] ...\nList of fasta files or directories to process. For directories, only files with the extension `.(fasta|fas|fsa|fna|ffn|faa|frn)[.gz]` are processed.")), ToolInput(tag="in_threshold", input_type=Float(optional=True), prefix="--threshold", doc=InputDocumentation(doc=":FLOAT in [0.5 - 1]=0.95\nThreshold of how much placement mass needs to be in a clade for extracting a pquery.")), ToolInput(tag="in_point_mass", input_type=Boolean(optional=True), prefix="--point-mass", doc=InputDocumentation(doc="Treat every pquery as a point mass concentrated on the highest-weight placement.")), ToolInput(tag="in_color_tree_file", input_type=File(optional=True), prefix="--color-tree-file", doc=InputDocumentation(doc=":PATH(non-existing)\nIf a path is provided, an svg file with a tree colored by clades is written.")), ToolInput(tag="in_samples_out_dir", input_type=Directory(optional=True), prefix="--samples-out-dir", doc=InputDocumentation(doc="=samples\nDirectory to write samples files to")), ToolInput(tag="in_samples_file_prefix", input_type=File(optional=True), prefix="--samples-file-prefix", doc=InputDocumentation(doc="File prefix for samples files")), ToolInput(tag="in_samples_file_suffix", input_type=File(optional=True), prefix="--samples-file-suffix", doc=InputDocumentation(doc="File suffix for samples files")), ToolInput(tag="in_sequences_out_dir", input_type=Directory(optional=True), prefix="--sequences-out-dir", doc=InputDocumentation(doc="=sequences\nDirectory to write sequences files to")), ToolInput(tag="in_sequences_file_prefix", input_type=File(optional=True), prefix="--sequences-file-prefix", doc=InputDocumentation(doc="File prefix for sequences files")), ToolInput(tag="in_sequences_file_suffix", input_type=File(optional=True), prefix="--sequences-file-suffix", doc=InputDocumentation(doc="File suffix for sequences files")), ToolInput(tag="in_allow_file_overwriting", input_type=Boolean(optional=True), prefix="--allow-file-overwriting", doc=InputDocumentation(doc="Allow to overwrite existing output files instead of aborting the command.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Produce more verbose output.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="=1            Number of threads to use for calculations.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], outputs=[ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], container="quay.io/biocontainers/gappa:0.7.1--he513fc3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gappa_Prepare_Extract_V0_1_0().translate("wdl")

