from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Boolean, Directory, Int

Gappa_Analyze_Krd_V0_1_0 = CommandToolBuilder(tool="gappa_analyze_krd", base_command=["gappa", "analyze", "krd"], inputs=[ToolInput(tag="in_j_place_path", input_type=File(optional=True), prefix="--jplace-path", doc=InputDocumentation(doc=":PATH(existing)=[] ... REQUIRED\nList of jplace files or directories to process. For directories, only files with the extension `.jplace[.gz]` are processed.")), ToolInput(tag="in_exponent", input_type=Float(optional=True), prefix="--exponent", doc=InputDocumentation(doc="=1          Exponent for KR integration.")), ToolInput(tag="in_normalize", input_type=Boolean(optional=True), prefix="--normalize", doc=InputDocumentation(doc="Divide the KR distance by the tree length to get normalized values.")), ToolInput(tag="in_point_mass", input_type=Boolean(optional=True), prefix="--point-mass", doc=InputDocumentation(doc="Treat every pquery as a point mass concentrated on the highest-weight placement.")), ToolInput(tag="in_ignore_multiplicities", input_type=Boolean(optional=True), prefix="--ignore-multiplicities", doc=InputDocumentation(doc="Set the multiplicity of each pquery to 1.")), ToolInput(tag="in_krd_out_dir", input_type=Directory(optional=True), prefix="--krd-out-dir", doc=InputDocumentation(doc="=.        Directory to write krd files to")), ToolInput(tag="in_krd_file_prefix", input_type=File(optional=True), prefix="--krd-file-prefix", doc=InputDocumentation(doc="File prefix for krd files")), ToolInput(tag="in_krd_file_suffix", input_type=File(optional=True), prefix="--krd-file-suffix", doc=InputDocumentation(doc="File suffix for krd files")), ToolInput(tag="in_krd_compress", input_type=File(optional=True), prefix="--krd-compress", doc=InputDocumentation(doc="If set, compress the krd files using gzip. Output file extensions are automatically extended by `.gz`.")), ToolInput(tag="in_krd_matrix_format", input_type=File(optional=True), prefix="--krd-matrix-format", doc=InputDocumentation(doc=":{list,matrix,triangular}=matrix\nFormat of the output matrix file.")), ToolInput(tag="in_omit_krd_matrix_labels", input_type=Boolean(optional=True), prefix="--omit-krd-matrix-labels", doc=InputDocumentation(doc="If set, the output matrix is written without column and row labels.")), ToolInput(tag="in_allow_file_overwriting", input_type=Boolean(optional=True), prefix="--allow-file-overwriting", doc=InputDocumentation(doc="Allow to overwrite existing output files instead of aborting the command.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Produce more verbose output.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="=1            Number of threads to use for calculations.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], outputs=[ToolOutput(tag="out_krd_compress", output_type=File(optional=True), selector=InputSelector(input_to_select="in_krd_compress", type_hint=File()), doc=OutputDocumentation(doc="If set, compress the krd files using gzip. Output file extensions are automatically extended by `.gz`.")), ToolOutput(tag="out_krd_matrix_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_krd_matrix_format", type_hint=File()), doc=OutputDocumentation(doc=":{list,matrix,triangular}=matrix\nFormat of the output matrix file.")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], container="quay.io/biocontainers/gappa:0.7.1--he513fc3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gappa_Analyze_Krd_V0_1_0().translate("wdl")

