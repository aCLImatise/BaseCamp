from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Locarnate_V0_1_0 = CommandToolBuilder(tool="locarnate", base_command=["locarnate"], inputs=[ToolInput(tag="in_pairwise_parameters", input_type=Boolean(optional=True), prefix="--pairwise_parameters", doc=InputDocumentation(doc="parameters for the pairwise alignment step")), ToolInput(tag="in_t_coffee_params", input_type=Boolean(optional=True), prefix="--tcoffee_params", doc=InputDocumentation(doc="parameters for tcoffee")), ToolInput(tag="in_pp_calculator_params", input_type=Boolean(optional=True), prefix="--pp_calculator_params", doc=InputDocumentation(doc="parameters for locarna_rnafold_pp")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="path to output folder")), ToolInput(tag="in_library_only", input_type=Boolean(optional=True), prefix="--library-only", doc=InputDocumentation(doc="if given only a t-coffee library will be written without actual\ncomputation")), ToolInput(tag="in_library_name", input_type=Boolean(optional=True), prefix="--library-name", doc=InputDocumentation(doc="the file name of the produced t-coffee library (default:\n'input.lib')")), ToolInput(tag="in_additional_libraries", input_type=Boolean(optional=True), prefix="--additional-libraries", doc=InputDocumentation(doc="a comma separated list of paths to t-coffee library files that\nshould be given to t-coffee in addition to the one generated during\nthis run")), ToolInput(tag="in_pairwise_aligner", input_type=Boolean(optional=True), prefix="--pairwise_aligner", doc=InputDocumentation(doc="which pairwise aligner to use (default: locarna)")), ToolInput(tag="in_scaling_factor", input_type=Boolean(optional=True), prefix="--scaling_factor", doc=InputDocumentation(doc="each edge from each EPM gets the same weight (exparnap only!)")), ToolInput(tag="in_pp_calculater_params", input_type=String(optional=True), prefix="--pp_calculater_params", doc=InputDocumentation(doc="")), ToolInput(tag="in_creates", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_alignment", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_or", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_msas", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_exp_a_rnap", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_using", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_different", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_pairwise", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_aligners", input_type=String(), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_and", input_type=String(), position=6, doc=InputDocumentation(doc="")), ToolInput(tag="in_t_coffee", input_type=String(), position=7, doc=InputDocumentation(doc="")), ToolInput(tag="in_as", input_type=String(), position=8, doc=InputDocumentation(doc="")), ToolInput(tag="in_a", input_type=String(), position=9, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="path to output folder"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Locarnate_V0_1_0().translate("wdl", allow_empty_container=True)

