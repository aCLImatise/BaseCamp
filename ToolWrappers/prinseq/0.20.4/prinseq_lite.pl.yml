!Command
command:
- prinseq-lite.pl
positional:
- !Positional
  optional: false
  position: 0
  name: tabs.
  description: If you specify any statistic option, no other ouput will be
- !Positional
  optional: false
  position: 0
  name: option.
  description: -stats_info
named:
- !Flag
  optional: true
  synonyms:
  - -man
  description: Print the full documentation; ignore other arguments.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -version
  description: Print program version; ignore other arguments.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -verbose
  description: Prints status and info messages during processing.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -fastq
  description: "Input file in FASTQ format that contains the sequence and\nquality\
    \ data. Use stdin instead of a file name to read from\nSTDIN (-fasta stdin). This\
    \ can be useful to process compressed\nfiles using Unix pipes."
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -fasta
  description: "Input file in FASTA format that contains the sequence data. Use\n\
    stdin instead of a file name to read from STDIN (-fastq stdin).\nThis can be useful\
    \ to process compressed files using Unix pipes."
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -qual
  description: Input file in QUAL format that contains the quality data.
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -fastq2
  description: "For paired-end data only. Input file in FASTQ format that\ncontains\
    \ the sequence and quality data. The sequence identifiers\nfor two matching paired-end\
    \ sequences in separate files can be\nmarked by /1 and /2, or _L and _R, or _left\
    \ and _right, or must\nhave the exact same identifier in both input files. The\
    \ input\nsequences must be sorted by their sequence identifiers.\nSingletons are\
    \ allowed in the input files."
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -fasta2
  description: "For paired-end data only. Input file in FASTA format that\ncontains\
    \ the sequence data. The sequence identifiers for two\nmatching paired-end sequences\
    \ in separate files can be marked by\n/1 and /2, or _L and _R, or _left and _right,\
    \ or must have the\nexact same identifier in both input files. The input sequences\n\
    must be sorted by their sequence identifiers. Singletons are\nallowed in the input\
    \ files."
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -params
  description: "Input file in text format that contains PRINSEQ parameters. Each\n\
    parameter should be specified on a new line and arguments should\nbe separated\
    \ by spaces or tabs. Comments can be specified on\nlines starting with the # sign.\
    \ Can be combined with command\nline parameters. Parameters specified on the command\
    \ line will\noverwrite the arguments in the file (if any)."
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -si13
  description: This option was replaced by option -phred64.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -phred64
  description: "Quality data in FASTQ file is in Phred+64 format\n(http://en.wikipedia.org/wiki/FASTQ_format#Encoding).\
    \ Not\nrequired for Illumina 1.8+, Sanger, Roche/454, Ion Torrent,\nPacBio data."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -aa
  description: "Input is amino acid (protein) sequences instead of nucleic acid\n\
    (DNA or RNA) sequences. Allowed amino acid characters:\nABCDEFGHIKLMNOPQRSTUVWYZXabcdefghiklmmopqrstuvwyzx*-\
    \ and allowed\nnucleic acid characters: ACGTURYKMSWBDHVNXacgturykmswbdhvnx-\n\
    The following options are ignored for -aa:\nstats_dinuc,stats_tag,stats_ns,dna_rna"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -out_format
  description: "To change the output format, use one of the following options.\nIf\
    \ not defined, the output format will be the same as the input\nformat.\n1 (FASTA\
    \ only), 2 (FASTA and QUAL), 3 (FASTQ), 4 (FASTQ and\nFASTA), or 5 (FASTQ, FASTA\
    \ and QUAL)"
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -out_good
  description: "By default, the output files are created in the same directory\nas\
    \ the input file containing the sequence data with an\nadditional \"_prinseq_good_XXXX\"\
    \ in their name (where XXXX is\nreplaced by random characters to prevent overwriting\
    \ previous\nfiles). To change the output filename and location, specify the\n\
    filename using this option. The file extension will be added\nautomatically (either\
    \ .fasta, .qual, or .fastq). For paired-end\ndata, filenames contain additionally\
    \ \"_1\", \"_1_singletons\",\n\"_2\", and \"_2_singletons\" before the file extension.\
    \ Use\n\"-out_good null\" to prevent the program from generating the\noutput file(s)\
    \ for data passing all filters. Use \"-out_good\nstdout\" to write data passing\
    \ all filters to STDOUT (only for\nFASTA or FASTQ output files).\nExample: use\
    \ \"file_passed\" to generate the output file\nfile_passed.fasta in the current\
    \ directory"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -out_bad
  description: "By default, the output files are created in the same directory\nas\
    \ the input file containing the sequence data with an\nadditional \"_prinseq_bad_XXXX\"\
    \ in their name (where XXXX is\nreplaced by random characters to prevent overwriting\
    \ previous\nfiles). To change the output filename and location, specify the\n\
    filename using this option. The file extension will be added\nautomatically (either\
    \ .fasta, .qual, or .fastq). For paired-end\ndata, filenames contain additionally\
    \ \"_1\" and \"_2\" before the\nfile extension. Use \"-out_bad null\" to prevent\
    \ the program from\ngenerating the output file(s) for data not passing any filter.\n\
    Use \"-out_bad stdout\" to write data not passing any filter to\nSTDOUT (only\
    \ for FASTA or FASTQ output files).\nExample: use \"file_filtered\" to generate\
    \ the output file\nfile_filtered.fasta in the current directory\nExample: \"-out_good\
    \ stdout -out_bad null\" will write data\npassing filters to STDOUT and data not\
    \ passing any filter will\nbe ignored"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -log
  description: "Log file to keep track of parameters, errors, etc. The log file\n\
    name is optional. If no file name is given, the log file name\nwill be \"inputname.log\"\
    . If the log file already exists, new\ncontent will be added to the file."
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -graph_data
  description: "File that contains the necessary information to generate the\ngraphs\
    \ similar to the ones in the web version. The file name is\noptional. If no file\
    \ name is given, the file name will be\n\"inputname.gd\". If the file already\
    \ exists, new content will\noverwrite the file. Use \"-out_good null -out_bad\
    \ null\" to\nprevent generating any additional outputs. (See below for more\n\
    options related to the graph data.)\nThe graph data can be used as input for the\
    \ prinseq-graphs.pl\nfile to generate the PNG graph files or an HTML report file.\
    \ If\nyou have trouble installing the required prinseq-graphs.pl\nmodules or want\
    \ to see an output example report, upload the\ngraph data file at: http://edwards.sdsu.edu/prinseq/\
    \ -> Choose\n\"Get Report\""
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -graph_stats
  description: "Use this option to select what statistics should be calculated\nand\
    \ included in the graph_data file. This is useful if you e.g.\ndo not need sequence\
    \ complexity information, which requires a\nlot of computation. Requires to have\
    \ graph_data specified.\nDefault is all selected.\nAllowed option are (separate\
    \ multiple by comma with no spaces):\nld (Length distribution), gc (GC content\
    \ distribution), qd (Base\nquality distribution), ns (Occurence of N), pt (Poly-A/T\
    \ tails),\nts (Tag sequence check), aq (Assembly quality measure), de\n(Sequence\
    \ duplication - exact only), da (Sequence duplication -\nexact + 5'/3'), sc (Sequence\
    \ complexity), dn (Dinucleotide odds\nratios, includes the PCA plots)\nExample\
    \ use: -graph_stats ld,gc,qd,de"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -qual_noscale
  description: "Use this option if all your sequences are shorter than 100bp as\n\
    they do not require to scale quality data to 100 data points in\nthe graph. By\
    \ default, quality scores of sequences shorter than\n100bp or longer than 100bp\
    \ are fit to 100 data points. (To\nretrieve this information and calculate the\
    \ graph data would\notherwise require to parse the data two times or store all\
    \ the\nquality data in memory.)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -no_qual_header
  description: "In order to reduce the file size, this option will generate an\nempty\
    \ header line for the quality data in FASTQ files. Instead\nof +header, only the\
    \ + sign will be output. The header of the\nsequence data will be left unchanged.\
    \ This option applies to\nFASTQ output files only."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -exact_only
  description: "Use this option to check for exact (forward and reverse)\nduplicates\
    \ only when generating the graph data. This allows to\nkeep the memory requirements\
    \ low for large input files and is\nfaster. This option will automatically be\
    \ applied when using\n-derep options 1 and/or 4 only. Specify option -derep 1\
    \ or\n-derep 4 if you do not want to apply both at the same time."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -seq_id_mappings
  description: "Text file containing the old and new (specified with -seq_id)\nidentifiers\
    \ for later reference. This option is useful if e.g. a\nrenamed sequence has to\
    \ be identified based on the new sequence\nidentifier. The file name is optional.\
    \ If no file name is given,\nthe file name will be \"inputname_prinseq_good.ids\"\
    \ (only good\nsequences are renamed). If a file with the same name already\nexists,\
    \ new content will overwrite the old file. The text file\ncontains one sequence\
    \ identifier pair per line, separated by\ntabs (old-tab-new). Requires option\
    \ -seq_id."
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -min_len
  description: Filter sequence shorter than min_len.
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -max_len
  description: Filter sequence longer than max_len.
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -range_len
  description: "Filter sequence by length range. Multiple range values should be\n\
    separated by comma without spaces.\nExample: -range_len 50-100,250-300"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -min_gc
  description: Filter sequence with GC content below min_gc.
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -max_gc
  description: Filter sequence with GC content above max_gc.
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -range_gc
  description: "Filter sequence by GC content range. Multiple range values\nshould\
    \ be separated by comma without spaces.\nExample: -range_gc 50-60,75-90"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -min_qual_score
  description: "Filter sequence with at least one quality score below\nmin_qual_score."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -max_qual_score
  description: "Filter sequence with at least one quality score above\nmax_qual_score."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -min_qual_mean
  description: Filter sequence with quality score mean below min_qual_mean.
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -max_qual_mean
  description: Filter sequence with quality score mean above max_qual_mean.
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -ns_max_p
  description: Filter sequence with more than ns_max_p percentage of Ns.
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -ns_max_n
  description: Filter sequence with more than ns_max_n Ns.
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -noniupac
  description: Filter sequence with characters other than A, C, G, T or N.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -seq_num
  description: "Only keep the first seq_num number of sequences (that pass all\nother\
    \ filters)."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -derep
  description: "Type of duplicates to filter. Allowed values are 1, 2, 3, 4 and\n\
    5. Use integers for multiple selections (e.g. 124 to use type 1,\n2 and 4). The\
    \ order does not matter. Option 2 and 3 will set 1\nand option 5 will set 4 as\
    \ these are subsets of the other\noption.\n1 (exact duplicate), 2 (5' duplicate),\
    \ 3 (3' duplicate), 4\n(reverse complement exact duplicate), 5 (reverse complement\n\
    5'/3' duplicate)"
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -derep_min
  description: "This option specifies the number of allowed duplicates. If you\nwant\
    \ to remove sequence duplicates that occur more than x times,\nthen you would\
    \ specify x+1 as the -derep_min values. For\nexamples, to remove sequences that\
    \ occur more than 5 times, you\nwould specify -derep_min 6. This option can only\
    \ be used in\ncombination with -derep 1 and/or 4 (forward and/or reverse exact\n\
    duplicates). [default : 2]"
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -lc_method
  description: "Method to filter low complexity sequences. The current options\nare\
    \ \"dust\" and \"entropy\". Use \"-lc_method dust\" to calculate the\ncomplexity\
    \ using the dust method."
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -lc_threshold
  description: "The threshold value (between 0 and 100) used to filter sequences\n\
    by sequence complexity. The dust method uses this as maximum\nallowed score and\
    \ the entropy method as minimum allowed value."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -custom_params
  description: "Can be used to specify additional filters. The current set of\npossible\
    \ rules is limited and has to follow the specifications\nbelow. The custom parameters\
    \ have to be specified within quotes\n(either ' or \").\nPlease separate parameter\
    \ values with a space and separate new\nparameter sets with semicolon (;). Parameters\
    \ are defined by two\nvalues: (1) the pattern (any combination of the letters\n\
    \"ACGTN\"), (2) the number of repeats or percentage of occurence\nPercentage values\
    \ are defined by a number followed by the %-sign\n(without space). If no %-sign\
    \ is given, it is assumed that the\ngiven number specifies the number of repeats\
    \ of the pattern.\nExamples: \"AAT 10\" (filters out sequences containing\nAATAATAATAATAATAATAATAATAATAAT\
    \ anywhere in the sequence), \"T\n70%\" (filters out sequences with more than\
    \ 70% Ts in the\nsequence), \"A 15\" (filters out sequences containing\nAAAAAAAAAAAAAAA\
    \ anywhere in the sequence), \"AAT 10;T 70%;A 15\"\n(apply all three filters)"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -trim_to_len
  description: "Trim all sequence from the 3'-end to result in sequence with\nthis\
    \ length."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_left
  description: Trim sequence at the 5'-end by trim_left positions.
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_right
  description: Trim sequence at the 3'-end by trim_right positions.
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_left_p
  description: "Trim sequence at the 5'-end by trim_left_p percentage of read\nlength.\
    \ The trim length is rounded towards the lower integer\n(e.g. 143.6 is rounded\
    \ to 143 positions). Use an integer between\n1 and 100 for the percentage value."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_right_p
  description: "Trim sequence at the 3'-end by trim_right_p percentage of read\nlength.\
    \ The trim length is rounded towards the lower integer\n(e.g. 143.6 is rounded\
    \ to 143 positions). Use an integer between\n1 and 100 for the percentage value."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_tail_left
  description: "Trim poly-A/T tail with a minimum length of trim_tail_left at\nthe\
    \ 5'-end."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_tail_right
  description: "Trim poly-A/T tail with a minimum length of trim_tail_right at\nthe\
    \ 3'-end."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_ns_left
  description: "Trim poly-N tail with a minimum length of trim_ns_left at the\n5'-end."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_ns_right
  description: "Trim poly-N tail with a minimum length of trim_ns_right at the\n3'-end."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_qual_left
  description: "Trim sequence by quality score from the 5'-end with this\nthreshold\
    \ score."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_qual_right
  description: "Trim sequence by quality score from the 3'-end with this\nthreshold\
    \ score."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_qual_type
  description: "Type of quality score calculation to use. Allowed options are\nmin,\
    \ mean, max and sum. [default: min]"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -trim_qual_rule
  description: "Rule to use to compare quality score to calculated value.\nAllowed\
    \ options are lt (less than), gt (greater than) and et\n(equal to). [default:\
    \ lt]"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -trim_qual_window
  description: "The sliding window size used to calculate quality score by type.\n\
    To stop at the first base that fails the rule defined, use a\nwindow size of 1.\
    \ [default: 1]"
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_qual_step
  description: "Step size used to move the sliding window. To move the window\nover\
    \ all quality scores without missing any, the step size\nshould be less or equal\
    \ to the window size. [default: 1]"
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -seq_case
  description: "Changes sequence character case to upper or lower case. Allowed\n\
    options are \"upper\" and \"lower\". Use this option to remove\nsoft-masking from\
    \ your sequences."
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -dna_rna
  description: "Convert sequence between DNA and RNA. Allowed options are \"dna\"\n\
    (convert from RNA to DNA) and \"rna\" (convert from DNA to RNA)."
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -line_width
  description: "Sequence characters per line. Use 0 if you want each sequence in\n\
    a single line. Use 80 for line breaks every 80 characters. Note\nthat this option\
    \ only applies to FASTA output files, since FASTQ\nfiles store sequences without\
    \ additional line breaks. [default:\n60]"
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -rm_header
  description: "Remove the sequence header. This includes everything after the\nsequence\
    \ identifier (which is kept unchanged)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -seq_id
  description: "Rename the sequence identifier. A counter is added to each\nidentifier\
    \ to assure its uniqueness. Use option -seq_id_mappings\nto generate a file containing\
    \ the old and new identifiers for\nlater reference.\nExample: \"mySeq_10\" will\
    \ generate the IDs (in FASTA format)\n>mySeq_101, >mySeq_102, >mySeq_103, ..."
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -stats_len
  description: "Outputs minimum (min), maximum (max), range (range), mean\n(mean),\
    \ standard deviation (stddev), mode (mode) and mode value\n(modeval), and median\
    \ (median) for read length."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -stats_dinuc
  description: "Outputs the dinucleotide odds ratio for AA/TT (aatt), AC/GT\n(acgt),\
    \ AG/CT (agct), AT (at), CA/TG (catg), CC/GG (ccgg), CG\n(cg), GA/TC (gatc), GC\
    \ (gc) and TA (ta)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -stats_tag
  description: "Outputs the probability of a tag sequence at the 5'-end (prob5)\n\
    and 3'-end (prob3) in percentage (0..100). Provides the number\nof predefined\
    \ MIDs (midnum) and the MID sequences (midseq,\nseparated by comma, only provided\
    \ if midnum > 0) that occur in\nmore than 34/100 (approx. 3%) of the reads."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -stats_dupl
  description: "Outputs the number of exact duplicates (exact), 5' duplicates\n(5),\
    \ 3' duplicates (3), exact duplicates with reverse\ncomplements (exactrevcom)\
    \ and 5'/3' duplicates with reverse\ncomplements (revcomp), and total number of\
    \ duplicates (total).\nThe maximum number of duplicates is given under the value\
    \ name\nwith an additional \"maxd\" (e.g. exactmaxd or 5maxd)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -stats_ns
  description: "Outputs the number of reads with ambiguous base N (seqswithn),\nthe\
    \ maximum number of Ns per read (maxn) and the maximum\npercentage of Ns per read\
    \ (maxp). The maxn and maxp value are\nnot necessary from the same sequence."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -stats_assembly
  description: "Outputs the N50, N90, etc contig sizes. The Nxx contig size is a\n\
    weighted median that is defined as the length of the smallest\ncontig C in the\
    \ sorted list of all contigs where the cumulative\nlength from the largest contig\
    \ to contig C is at least xx% of\nthe total length (sum of contig lengths)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -stats_all
  description: Outputs all available summary statistics.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -stats_info
  description: ''
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -h
  description: ''
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -help
  - -h
  description: Print the help message; ignore other arguments.
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "Usage:\n    perl prinseq-lite.pl [-h] [-help] [-version] [-man] [-verbose]\
  \ [-fastq\n    input_fastq_file] [-fasta input_fasta_file] [-fastq2 input_fastq_file_2]\n\
  \    [-fasta2 input_fasta_file_2] [-qual input_quality_file] [-min_len\n    int_value]\
  \ [-max_len int_value] [-range_len ranges] [-min_gc int_value]\n    [-max_gc int_value]\
  \ [-range_gc ranges] [-min_qual_score int_value]\n    [-max_qual_score int_value]\
  \ [-min_qual_mean int_value] [-max_qual_mean\n    int_value] [-ns_max_p int_value]\
  \ [-ns_max_n int_value] [-noniupac]\n    [-seq_num int_value] [-derep int_value]\
  \ [-derep_min int_value]\n    [-lc_method method_name] [-lc_threshold int_value]\
  \ [-trim_to_len\n    int_value] [-trim_left int_value] [-trim_right int_value] [-trim_left_p\n\
  \    int_value] [-trim_right_p int_value] [-trim_ns_left int_value]\n    [-trim_ns_right\
  \ int_value] [-trim_tail_left int_value] [-trim_tail_right\n    int_value] [-trim_qual_left\
  \ int_value] [-trim_qual_right int_value]\n    [-trim_qual_type type] [-trim_qual_rule\
  \ rule] [-trim_qual_window\n    int_value] [-trim_qual_step int_value] [-seq_case\
  \ case] [-dna_rna type]\n    [-line_width int_value] [-rm_header] [-seq_id id_string]\
  \ [-out_format\n    int_value] [-out_good filename_prefix] [-out_bad filename_prefix]\n\
  \    [-phred64] [-stats_info] [-stats_len] [-stats_dinuc] [-stats_tag]\n    [-stats_dupl]\
  \ [-stats_ns] [-stats_assembly] [-stats_all] [-aa]\n    [-graph_data file] [-graph_stats\
  \ string] [-qual_noscale]\n    [-no_qual_header] [-exact_only] [-log file] [-custom_params\
  \ string]\n    [-params file] [-seq_id_mappings file]\n\nOptions:\n    -help | -h\n\
  \            Print the help message; ignore other arguments.\n\n    -man    Print\
  \ the full documentation; ignore other arguments.\n\n    -version\n            Print\
  \ program version; ignore other arguments.\n\n    -verbose\n            Prints status\
  \ and info messages during processing.\n\n    ***** INPUT OPTIONS *****\n    -fastq\
  \ <file>\n            Input file in FASTQ format that contains the sequence and\n\
  \            quality data. Use stdin instead of a file name to read from\n     \
  \       STDIN (-fasta stdin). This can be useful to process compressed\n       \
  \     files using Unix pipes.\n\n    -fasta <file>\n            Input file in FASTA\
  \ format that contains the sequence data. Use\n            stdin instead of a file\
  \ name to read from STDIN (-fastq stdin).\n            This can be useful to process\
  \ compressed files using Unix pipes.\n\n    -qual <file>\n            Input file\
  \ in QUAL format that contains the quality data.\n\n    -fastq2 <file>\n       \
  \     For paired-end data only. Input file in FASTQ format that\n            contains\
  \ the sequence and quality data. The sequence identifiers\n            for two matching\
  \ paired-end sequences in separate files can be\n            marked by /1 and /2,\
  \ or _L and _R, or _left and _right, or must\n            have the exact same identifier\
  \ in both input files. The input\n            sequences must be sorted by their\
  \ sequence identifiers.\n            Singletons are allowed in the input files.\n\
  \n    -fasta2 <file>\n            For paired-end data only. Input file in FASTA\
  \ format that\n            contains the sequence data. The sequence identifiers\
  \ for two\n            matching paired-end sequences in separate files can be marked\
  \ by\n            /1 and /2, or _L and _R, or _left and _right, or must have the\n\
  \            exact same identifier in both input files. The input sequences\n  \
  \          must be sorted by their sequence identifiers. Singletons are\n      \
  \      allowed in the input files.\n\n    -params <file>\n            Input file\
  \ in text format that contains PRINSEQ parameters. Each\n            parameter should\
  \ be specified on a new line and arguments should\n            be separated by spaces\
  \ or tabs. Comments can be specified on\n            lines starting with the # sign.\
  \ Can be combined with command\n            line parameters. Parameters specified\
  \ on the command line will\n            overwrite the arguments in the file (if\
  \ any).\n\n    -si13   This option was replaced by option -phred64.\n\n    -phred64\n\
  \            Quality data in FASTQ file is in Phred+64 format\n            (http://en.wikipedia.org/wiki/FASTQ_format#Encoding).\
  \ Not\n            required for Illumina 1.8+, Sanger, Roche/454, Ion Torrent,\n\
  \            PacBio data.\n\n    -aa     Input is amino acid (protein) sequences\
  \ instead of nucleic acid\n            (DNA or RNA) sequences. Allowed amino acid\
  \ characters:\n            ABCDEFGHIKLMNOPQRSTUVWYZXabcdefghiklmmopqrstuvwyzx*-\
  \ and allowed\n            nucleic acid characters: ACGTURYKMSWBDHVNXacgturykmswbdhvnx-\n\
  \n            The following options are ignored for -aa:\n            stats_dinuc,stats_tag,stats_ns,dna_rna\n\
  \n    ***** OUTPUT OPTIONS *****\n    -out_format <integer>\n            To change\
  \ the output format, use one of the following options.\n            If not defined,\
  \ the output format will be the same as the input\n            format.\n\n     \
  \       1 (FASTA only), 2 (FASTA and QUAL), 3 (FASTQ), 4 (FASTQ and\n          \
  \  FASTA), or 5 (FASTQ, FASTA and QUAL)\n\n    -out_good <string>\n            By\
  \ default, the output files are created in the same directory\n            as the\
  \ input file containing the sequence data with an\n            additional \"_prinseq_good_XXXX\"\
  \ in their name (where XXXX is\n            replaced by random characters to prevent\
  \ overwriting previous\n            files). To change the output filename and location,\
  \ specify the\n            filename using this option. The file extension will be\
  \ added\n            automatically (either .fasta, .qual, or .fastq). For paired-end\n\
  \            data, filenames contain additionally \"_1\", \"_1_singletons\",\n \
  \           \"_2\", and \"_2_singletons\" before the file extension. Use\n     \
  \       \"-out_good null\" to prevent the program from generating the\n        \
  \    output file(s) for data passing all filters. Use \"-out_good\n            stdout\"\
  \ to write data passing all filters to STDOUT (only for\n            FASTA or FASTQ\
  \ output files).\n\n            Example: use \"file_passed\" to generate the output\
  \ file\n            file_passed.fasta in the current directory\n\n    -out_bad <string>\n\
  \            By default, the output files are created in the same directory\n  \
  \          as the input file containing the sequence data with an\n            additional\
  \ \"_prinseq_bad_XXXX\" in their name (where XXXX is\n            replaced by random\
  \ characters to prevent overwriting previous\n            files). To change the\
  \ output filename and location, specify the\n            filename using this option.\
  \ The file extension will be added\n            automatically (either .fasta, .qual,\
  \ or .fastq). For paired-end\n            data, filenames contain additionally \"\
  _1\" and \"_2\" before the\n            file extension. Use \"-out_bad null\" to\
  \ prevent the program from\n            generating the output file(s) for data not\
  \ passing any filter.\n            Use \"-out_bad stdout\" to write data not passing\
  \ any filter to\n            STDOUT (only for FASTA or FASTQ output files).\n\n\
  \            Example: use \"file_filtered\" to generate the output file\n      \
  \      file_filtered.fasta in the current directory\n\n            Example: \"-out_good\
  \ stdout -out_bad null\" will write data\n            passing filters to STDOUT\
  \ and data not passing any filter will\n            be ignored\n\n    -log <file>\n\
  \            Log file to keep track of parameters, errors, etc. The log file\n \
  \           name is optional. If no file name is given, the log file name\n    \
  \        will be \"inputname.log\". If the log file already exists, new\n      \
  \      content will be added to the file.\n\n    -graph_data <file>\n          \
  \  File that contains the necessary information to generate the\n            graphs\
  \ similar to the ones in the web version. The file name is\n            optional.\
  \ If no file name is given, the file name will be\n            \"inputname.gd\"\
  . If the file already exists, new content will\n            overwrite the file.\
  \ Use \"-out_good null -out_bad null\" to\n            prevent generating any additional\
  \ outputs. (See below for more\n            options related to the graph data.)\n\
  \n            The graph data can be used as input for the prinseq-graphs.pl\n  \
  \          file to generate the PNG graph files or an HTML report file. If\n   \
  \         you have trouble installing the required prinseq-graphs.pl\n         \
  \   modules or want to see an output example report, upload the\n            graph\
  \ data file at: http://edwards.sdsu.edu/prinseq/ -> Choose\n            \"Get Report\"\
  \n\n    -graph_stats <string>\n            Use this option to select what statistics\
  \ should be calculated\n            and included in the graph_data file. This is\
  \ useful if you e.g.\n            do not need sequence complexity information, which\
  \ requires a\n            lot of computation. Requires to have graph_data specified.\n\
  \            Default is all selected.\n\n            Allowed option are (separate\
  \ multiple by comma with no spaces):\n            ld (Length distribution), gc (GC\
  \ content distribution), qd (Base\n            quality distribution), ns (Occurence\
  \ of N), pt (Poly-A/T tails),\n            ts (Tag sequence check), aq (Assembly\
  \ quality measure), de\n            (Sequence duplication - exact only), da (Sequence\
  \ duplication -\n            exact + 5'/3'), sc (Sequence complexity), dn (Dinucleotide\
  \ odds\n            ratios, includes the PCA plots)\n\n            Example use:\
  \ -graph_stats ld,gc,qd,de\n\n    -qual_noscale\n            Use this option if\
  \ all your sequences are shorter than 100bp as\n            they do not require\
  \ to scale quality data to 100 data points in\n            the graph. By default,\
  \ quality scores of sequences shorter than\n            100bp or longer than 100bp\
  \ are fit to 100 data points. (To\n            retrieve this information and calculate\
  \ the graph data would\n            otherwise require to parse the data two times\
  \ or store all the\n            quality data in memory.)\n\n    -no_qual_header\n\
  \            In order to reduce the file size, this option will generate an\n  \
  \          empty header line for the quality data in FASTQ files. Instead\n    \
  \        of +header, only the + sign will be output. The header of the\n       \
  \     sequence data will be left unchanged. This option applies to\n           \
  \ FASTQ output files only.\n\n    -exact_only\n            Use this option to check\
  \ for exact (forward and reverse)\n            duplicates only when generating the\
  \ graph data. This allows to\n            keep the memory requirements low for large\
  \ input files and is\n            faster. This option will automatically be applied\
  \ when using\n            -derep options 1 and/or 4 only. Specify option -derep\
  \ 1 or\n            -derep 4 if you do not want to apply both at the same time.\n\
  \n    -seq_id_mappings <file>\n            Text file containing the old and new\
  \ (specified with -seq_id)\n            identifiers for later reference. This option\
  \ is useful if e.g. a\n            renamed sequence has to be identified based on\
  \ the new sequence\n            identifier. The file name is optional. If no file\
  \ name is given,\n            the file name will be \"inputname_prinseq_good.ids\"\
  \ (only good\n            sequences are renamed). If a file with the same name already\n\
  \            exists, new content will overwrite the old file. The text file\n  \
  \          contains one sequence identifier pair per line, separated by\n      \
  \      tabs (old-tab-new). Requires option -seq_id.\n\n    ***** FILTER OPTIONS\
  \ *****\n    -min_len <integer>\n            Filter sequence shorter than min_len.\n\
  \n    -max_len <integer>\n            Filter sequence longer than max_len.\n\n \
  \   -range_len <string>\n            Filter sequence by length range. Multiple range\
  \ values should be\n            separated by comma without spaces.\n\n         \
  \   Example: -range_len 50-100,250-300\n\n    -min_gc <integer>\n            Filter\
  \ sequence with GC content below min_gc.\n\n    -max_gc <integer>\n            Filter\
  \ sequence with GC content above max_gc.\n\n    -range_gc <string>\n           \
  \ Filter sequence by GC content range. Multiple range values\n            should\
  \ be separated by comma without spaces.\n\n            Example: -range_gc 50-60,75-90\n\
  \n    -min_qual_score <integer>\n            Filter sequence with at least one quality\
  \ score below\n            min_qual_score.\n\n    -max_qual_score <integer>\n  \
  \          Filter sequence with at least one quality score above\n            max_qual_score.\n\
  \n    -min_qual_mean <integer>\n            Filter sequence with quality score mean\
  \ below min_qual_mean.\n\n    -max_qual_mean <integer>\n            Filter sequence\
  \ with quality score mean above max_qual_mean.\n\n    -ns_max_p <integer>\n    \
  \        Filter sequence with more than ns_max_p percentage of Ns.\n\n    -ns_max_n\
  \ <integer>\n            Filter sequence with more than ns_max_n Ns.\n\n    -noniupac\n\
  \            Filter sequence with characters other than A, C, G, T or N.\n\n   \
  \ -seq_num <integer>\n            Only keep the first seq_num number of sequences\
  \ (that pass all\n            other filters).\n\n    -derep <integer>\n        \
  \    Type of duplicates to filter. Allowed values are 1, 2, 3, 4 and\n         \
  \   5. Use integers for multiple selections (e.g. 124 to use type 1,\n         \
  \   2 and 4). The order does not matter. Option 2 and 3 will set 1\n           \
  \ and option 5 will set 4 as these are subsets of the other\n            option.\n\
  \n            1 (exact duplicate), 2 (5' duplicate), 3 (3' duplicate), 4\n     \
  \       (reverse complement exact duplicate), 5 (reverse complement\n          \
  \  5'/3' duplicate)\n\n    -derep_min <integer>\n            This option specifies\
  \ the number of allowed duplicates. If you\n            want to remove sequence\
  \ duplicates that occur more than x times,\n            then you would specify x+1\
  \ as the -derep_min values. For\n            examples, to remove sequences that\
  \ occur more than 5 times, you\n            would specify -derep_min 6. This option\
  \ can only be used in\n            combination with -derep 1 and/or 4 (forward and/or\
  \ reverse exact\n            duplicates). [default : 2]\n\n    -lc_method <string>\n\
  \            Method to filter low complexity sequences. The current options\n  \
  \          are \"dust\" and \"entropy\". Use \"-lc_method dust\" to calculate the\n\
  \            complexity using the dust method.\n\n    -lc_threshold <integer>\n\
  \            The threshold value (between 0 and 100) used to filter sequences\n\
  \            by sequence complexity. The dust method uses this as maximum\n    \
  \        allowed score and the entropy method as minimum allowed value.\n\n    -custom_params\
  \ <string>\n            Can be used to specify additional filters. The current set\
  \ of\n            possible rules is limited and has to follow the specifications\n\
  \            below. The custom parameters have to be specified within quotes\n \
  \           (either ' or \").\n\n            Please separate parameter values with\
  \ a space and separate new\n            parameter sets with semicolon (;). Parameters\
  \ are defined by two\n            values: (1) the pattern (any combination of the\
  \ letters\n            \"ACGTN\"), (2) the number of repeats or percentage of occurence\n\
  \            Percentage values are defined by a number followed by the %-sign\n\
  \            (without space). If no %-sign is given, it is assumed that the\n  \
  \          given number specifies the number of repeats of the pattern.\n\n    \
  \        Examples: \"AAT 10\" (filters out sequences containing\n            AATAATAATAATAATAATAATAATAATAAT\
  \ anywhere in the sequence), \"T\n            70%\" (filters out sequences with\
  \ more than 70% Ts in the\n            sequence), \"A 15\" (filters out sequences\
  \ containing\n            AAAAAAAAAAAAAAA anywhere in the sequence), \"AAT 10;T\
  \ 70%;A 15\"\n            (apply all three filters)\n\n    ***** TRIM OPTIONS *****\n\
  \    -trim_to_len <integer>\n            Trim all sequence from the 3'-end to result\
  \ in sequence with\n            this length.\n\n    -trim_left <integer>\n     \
  \       Trim sequence at the 5'-end by trim_left positions.\n\n    -trim_right <integer>\n\
  \            Trim sequence at the 3'-end by trim_right positions.\n\n    -trim_left_p\
  \ <integer>\n            Trim sequence at the 5'-end by trim_left_p percentage of\
  \ read\n            length. The trim length is rounded towards the lower integer\n\
  \            (e.g. 143.6 is rounded to 143 positions). Use an integer between\n\
  \            1 and 100 for the percentage value.\n\n    -trim_right_p <integer>\n\
  \            Trim sequence at the 3'-end by trim_right_p percentage of read\n  \
  \          length. The trim length is rounded towards the lower integer\n      \
  \      (e.g. 143.6 is rounded to 143 positions). Use an integer between\n      \
  \      1 and 100 for the percentage value.\n\n    -trim_tail_left <integer>\n  \
  \          Trim poly-A/T tail with a minimum length of trim_tail_left at\n     \
  \       the 5'-end.\n\n    -trim_tail_right <integer>\n            Trim poly-A/T\
  \ tail with a minimum length of trim_tail_right at\n            the 3'-end.\n\n\
  \    -trim_ns_left <integer>\n            Trim poly-N tail with a minimum length\
  \ of trim_ns_left at the\n            5'-end.\n\n    -trim_ns_right <integer>\n\
  \            Trim poly-N tail with a minimum length of trim_ns_right at the\n  \
  \          3'-end.\n\n    -trim_qual_left <integer>\n            Trim sequence by\
  \ quality score from the 5'-end with this\n            threshold score.\n\n    -trim_qual_right\
  \ <integer>\n            Trim sequence by quality score from the 3'-end with this\n\
  \            threshold score.\n\n    -trim_qual_type <string>\n            Type\
  \ of quality score calculation to use. Allowed options are\n            min, mean,\
  \ max and sum. [default: min]\n\n    -trim_qual_rule <string>\n            Rule\
  \ to use to compare quality score to calculated value.\n            Allowed options\
  \ are lt (less than), gt (greater than) and et\n            (equal to). [default:\
  \ lt]\n\n    -trim_qual_window <integer>\n            The sliding window size used\
  \ to calculate quality score by type.\n            To stop at the first base that\
  \ fails the rule defined, use a\n            window size of 1. [default: 1]\n\n\
  \    -trim_qual_step <integer>\n            Step size used to move the sliding window.\
  \ To move the window\n            over all quality scores without missing any, the\
  \ step size\n            should be less or equal to the window size. [default: 1]\n\
  \n    ***** REFORMAT OPTIONS *****\n    -seq_case <string>\n            Changes\
  \ sequence character case to upper or lower case. Allowed\n            options are\
  \ \"upper\" and \"lower\". Use this option to remove\n            soft-masking from\
  \ your sequences.\n\n    -dna_rna <string>\n            Convert sequence between\
  \ DNA and RNA. Allowed options are \"dna\"\n            (convert from RNA to DNA)\
  \ and \"rna\" (convert from DNA to RNA).\n\n    -line_width <integer>\n        \
  \    Sequence characters per line. Use 0 if you want each sequence in\n        \
  \    a single line. Use 80 for line breaks every 80 characters. Note\n         \
  \   that this option only applies to FASTA output files, since FASTQ\n         \
  \   files store sequences without additional line breaks. [default:\n          \
  \  60]\n\n    -rm_header\n            Remove the sequence header. This includes\
  \ everything after the\n            sequence identifier (which is kept unchanged).\n\
  \n    -seq_id <string>\n            Rename the sequence identifier. A counter is\
  \ added to each\n            identifier to assure its uniqueness. Use option -seq_id_mappings\n\
  \            to generate a file containing the old and new identifiers for\n   \
  \         later reference.\n\n            Example: \"mySeq_10\" will generate the\
  \ IDs (in FASTA format)\n            >mySeq_101, >mySeq_102, >mySeq_103, ...\n\n\
  \    ***** SUMMARY STATISTIC OPTIONS *****\n            The summary statistic values\
  \ are written to STDOUT in the form:\n            \"parameter_name statistic_name\
  \ value\" (without the quotes). For\n            example, \"stats_info reads 10000\"\
  \ or \"stats_len max 500\". Only\n            one statistic is written per line\
  \ and values are separated by\n            tabs.\n\n            If you specify any\
  \ statistic option, no other ouput will be\n            generated. To preprocess\
  \ data, do not specify a statistics\n            option.\n\n    -stats_info\n  \
  \          Outputs basic information such as number of reads (reads) and\n     \
  \       total bases (bases).\n\n    -stats_len\n            Outputs minimum (min),\
  \ maximum (max), range (range), mean\n            (mean), standard deviation (stddev),\
  \ mode (mode) and mode value\n            (modeval), and median (median) for read\
  \ length.\n\n    -stats_dinuc\n            Outputs the dinucleotide odds ratio for\
  \ AA/TT (aatt), AC/GT\n            (acgt), AG/CT (agct), AT (at), CA/TG (catg),\
  \ CC/GG (ccgg), CG\n            (cg), GA/TC (gatc), GC (gc) and TA (ta).\n\n   \
  \ -stats_tag\n            Outputs the probability of a tag sequence at the 5'-end\
  \ (prob5)\n            and 3'-end (prob3) in percentage (0..100). Provides the number\n\
  \            of predefined MIDs (midnum) and the MID sequences (midseq,\n      \
  \      separated by comma, only provided if midnum > 0) that occur in\n        \
  \    more than 34/100 (approx. 3%) of the reads.\n\n    -stats_dupl\n          \
  \  Outputs the number of exact duplicates (exact), 5' duplicates\n            (5),\
  \ 3' duplicates (3), exact duplicates with reverse\n            complements (exactrevcom)\
  \ and 5'/3' duplicates with reverse\n            complements (revcomp), and total\
  \ number of duplicates (total).\n            The maximum number of duplicates is\
  \ given under the value name\n            with an additional \"maxd\" (e.g. exactmaxd\
  \ or 5maxd).\n\n    -stats_ns\n            Outputs the number of reads with ambiguous\
  \ base N (seqswithn),\n            the maximum number of Ns per read (maxn) and\
  \ the maximum\n            percentage of Ns per read (maxp). The maxn and maxp value\
  \ are\n            not necessary from the same sequence.\n\n    -stats_assembly\n\
  \            Outputs the N50, N90, etc contig sizes. The Nxx contig size is a\n\
  \            weighted median that is defined as the length of the smallest\n   \
  \         contig C in the sorted list of all contigs where the cumulative\n    \
  \        length from the largest contig to contig C is at least xx% of\n       \
  \     the total length (sum of contig lengths).\n\n    -stats_all\n            Outputs\
  \ all available summary statistics.\n\n    ***** ORDER OF PROCESSING *****\n   \
  \         The available options are processed in the following order:\n\n      \
  \      seq_num, trim_left, trim_right, trim_left_p, trim_right_p,\n            trim_qual_left,\
  \ trim_qual_right, trim_tail_left,\n            trim_tail_right, trim_ns_left, trim_ns_right,\
  \ trim_to_len,\n            min_len, max_len, range_len, min_qual_score, max_qual_score,\n\
  \            min_qual_mean, max_qual_mean, min_gc, max_gc, range_gc,\n         \
  \   ns_max_p, ns_max_n, noniupac, lc_method, derep, seq_id,\n            seq_case,\
  \ dna_rna, out_format\n\n"
generated_using:
- --help
docker_image:
