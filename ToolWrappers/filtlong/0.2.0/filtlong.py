from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Filtlong_V0_1_0 = CommandToolBuilder(tool="filtlong", base_command=["filtlong"], inputs=[ToolInput(tag="in_keep_only_best", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[int], --target_bases [int]          keep only the best reads up to this many total bases")), ToolInput(tag="in_keep_only_percentage", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[float], --keep_percent [float]      keep only this percentage of the best reads (measured by bases)")), ToolInput(tag="in_min_length", input_type=Boolean(optional=True), prefix="--min_length", doc=InputDocumentation(doc="[int]                     minimum length threshold")), ToolInput(tag="in_min_mean_q", input_type=Boolean(optional=True), prefix="--min_mean_q", doc=InputDocumentation(doc="[float]                   minimum mean quality threshold")), ToolInput(tag="in_min_window_q", input_type=Boolean(optional=True), prefix="--min_window_q", doc=InputDocumentation(doc="[float]                 minimum window quality threshold")), ToolInput(tag="in_reference_assembly_fasta", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[file], --assembly [file]            reference assembly in FASTA format")), ToolInput(tag="in_one", input_type=Boolean(optional=True), prefix="-1", doc=InputDocumentation(doc="[file], --illumina_1 [file]          reference Illumina reads in FASTQ format")), ToolInput(tag="in_two", input_type=Boolean(optional=True), prefix="-2", doc=InputDocumentation(doc="[file], --illumina_2 [file]          reference Illumina reads in FASTQ format")), ToolInput(tag="in_length_weight", input_type=Boolean(optional=True), prefix="--length_weight", doc=InputDocumentation(doc="[float]                weight given to the length score (default: 1)")), ToolInput(tag="in_mean_q_weight", input_type=Boolean(optional=True), prefix="--mean_q_weight", doc=InputDocumentation(doc="[float]                weight given to the mean quality score (default: 1)")), ToolInput(tag="in_window_q_weight", input_type=Boolean(optional=True), prefix="--window_q_weight", doc=InputDocumentation(doc="[float]              weight given to the window quality score (default: 1)")), ToolInput(tag="in_trim", input_type=Boolean(optional=True), prefix="--trim", doc=InputDocumentation(doc="trim non-k-mer-matching bases from start/end of reads")), ToolInput(tag="in_split", input_type=Boolean(optional=True), prefix="--split", doc=InputDocumentation(doc="[split]                        split reads at this many (or more) consecutive non-k-mer-matching bases")), ToolInput(tag="in_window_size", input_type=Boolean(optional=True), prefix="--window_size", doc=InputDocumentation(doc="[int]                    size of sliding window used when measuring window quality (default: 250)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose output to stderr with info for each read")), ToolInput(tag="in_input_reads", input_type=String(), position=0, doc=InputDocumentation(doc="input long reads to be filtered"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Filtlong_V0_1_0().translate("wdl", allow_empty_container=True)

