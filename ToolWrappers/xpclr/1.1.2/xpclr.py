from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean

Xpclr_V0_1_0 = CommandToolBuilder(tool="xpclr", base_command=["xpclr"], inputs=[ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="output file")), ToolInput(tag="in_format", input_type=Int(optional=True), prefix="--format", doc=InputDocumentation(doc="input expected. One of 'vcf' (default), 'hdf5', 'zarr'\nor 'txt'")), ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="input file vcf or hdf5")), ToolInput(tag="in_g_dist_key", input_type=Int(optional=True), prefix="--gdistkey", doc=InputDocumentation(doc="key for genetic position in variants table of hdf5/VCF")), ToolInput(tag="in_samples_a", input_type=File(optional=True), prefix="--samplesA", doc=InputDocumentation(doc="Samples comprising population A. Comma separated list\nor path to file with each ID on a line")), ToolInput(tag="in_samples_b", input_type=File(optional=True), prefix="--samplesB", doc=InputDocumentation(doc="Samples comprising population B. Comma separated list\nor path to file with each ID on a line")), ToolInput(tag="in_r_rate", input_type=String(optional=True), prefix="--rrate", doc=InputDocumentation(doc="recombination rate per base")), ToolInput(tag="in_map", input_type=File(optional=True), prefix="--map", doc=InputDocumentation(doc="If using XPCLR-style text format. Input map file as\nper XPCLR specs (tab separated)")), ToolInput(tag="in_popa", input_type=File(optional=True), prefix="--popA", doc=InputDocumentation(doc="If using XPCLR-style text format. Filepath to\npopulation A genotypes (space separated)")), ToolInput(tag="in_pop_b", input_type=File(optional=True), prefix="--popB", doc=InputDocumentation(doc="If using XPCLR-style text format. Filepath to\npopulation B genotypes (space separated)")), ToolInput(tag="in_chr", input_type=String(optional=True), prefix="--chr", doc=InputDocumentation(doc="Which contig analysis is based on")), ToolInput(tag="in_ld", input_type=String(optional=True), prefix="--ld", doc=InputDocumentation(doc="LD cutoff to apply for weighting")), ToolInput(tag="in_phased", input_type=Boolean(optional=True), prefix="--phased", doc=InputDocumentation(doc="whether data is phased for more precise r2 calculation")), ToolInput(tag="in_verbose", input_type=Int(optional=True), prefix="--verbose", doc=InputDocumentation(doc="How verbose to be in logging. 10=DEBUG, 20=INFO,\n30=WARN, 40=ERROR, 50=CRITICAL")), ToolInput(tag="in_max_snps", input_type=Int(optional=True), prefix="--maxsnps", doc=InputDocumentation(doc="max SNPs in a window")), ToolInput(tag="in_min_snps", input_type=Int(optional=True), prefix="--minsnps", doc=InputDocumentation(doc="min SNPs in a window")), ToolInput(tag="in_size", input_type=Int(optional=True), prefix="--size", doc=InputDocumentation(doc="window size in base pairs")), ToolInput(tag="in_start", input_type=String(optional=True), prefix="--start", doc=InputDocumentation(doc="start base position for windows")), ToolInput(tag="in_stop", input_type=String(optional=True), prefix="--stop", doc=InputDocumentation(doc="stop base position for windows")), ToolInput(tag="in_step", input_type=Int(optional=True), prefix="--step", doc=InputDocumentation(doc="step size for sliding windows"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="output file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Xpclr_V0_1_0().translate("wdl", allow_empty_container=True)

