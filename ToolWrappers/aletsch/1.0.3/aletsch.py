from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File, Directory, Int, Float

Aletsch_V0_1_0 = CommandToolBuilder(tool="aletsch", base_command=["aletsch"], inputs=[ToolInput(tag="in_profile", input_type=Boolean(optional=True), prefix="--profile", doc=InputDocumentation(doc="profiling individual samples and exit (will write to files if -p provided)")), ToolInput(tag="in_boost_precision", input_type=Boolean(optional=True), prefix="--boost_precision", doc=InputDocumentation(doc="reduce false positives, default: not to do so")), ToolInput(tag="in_chrm_list_string", input_type=String(optional=True), prefix="--chrm_list_string", doc=InputDocumentation(doc="list of chromosomes that will be assembled, default: N/A (i.e., assemble all)")), ToolInput(tag="in_chrm_list_file", input_type=File(optional=True), prefix="--chrm_list_file", doc=InputDocumentation(doc="file with chromosomes that will be assembled, default: N/A (i.e., assemble all)")), ToolInput(tag="in_output_gtf_dir", input_type=Directory(optional=True), prefix="--output_gtf_dir", doc=InputDocumentation(doc="existing directory for individual transcripts, default: N/A")), ToolInput(tag="in_output_bridged_bam_dir", input_type=Directory(optional=True), prefix="--output_bridged_bam_dir", doc=InputDocumentation(doc="existing directory for individual bridged alignments, default: N/A")), ToolInput(tag="in_profile_dir", input_type=Directory(optional=True), prefix="--profile_dir", doc=InputDocumentation(doc="existing directory for saving/loading profiles of each samples, default: N/A")), ToolInput(tag="in_max_threads", input_type=Int(optional=True), prefix="--max_threads", doc=InputDocumentation(doc="maximized number of threads, default: 10")), ToolInput(tag="in_max_group_size", input_type=Int(optional=True), prefix="--max_group_size", doc=InputDocumentation(doc="the maximized number of splice graphs that will be combined, default: 20")), ToolInput(tag="in_min_grouping_similarity", input_type=Float(optional=True), prefix="--min_grouping_similarity", doc=InputDocumentation(doc="the minimized similarity for two graphs to be combined, default: 0.2")), ToolInput(tag="in_min_bridging_score", input_type=Float(optional=True), prefix="--min_bridging_score", doc=InputDocumentation(doc="the minimum score for bridging a paired-end reads, default: 1.5")), ToolInput(tag="in_min_splice_bund_ary_hits", input_type=Int(optional=True), prefix="--min_splice_bundary_hits", doc=InputDocumentation(doc="the minimum number of spliced reads required to support a junction, default: 1")), ToolInput(tag="in_min_transcript_coverage", input_type=Float(optional=True), prefix="--min_transcript_coverage", doc=InputDocumentation(doc="minimum coverage required for a multi-exon transcript, default: 1.0")), ToolInput(tag="in_min_transcript_length_base", input_type=Int(optional=True), prefix="--min_transcript_length_base", doc=InputDocumentation(doc="default: 150")), ToolInput(tag="in_min_transcript_length_increase", input_type=Int(optional=True), prefix="--min_transcript_length_increase", doc=InputDocumentation(doc="default: 50, minimum length of a transcript: base + #exons * increase")), ToolInput(tag="in_min_single_exon_coverage", input_type=Float(optional=True), prefix="--min_single_exon_coverage", doc=InputDocumentation(doc="minimum coverage required for a single-exon transcript, default: 20")), ToolInput(tag="in_min_single_exon_transcript_length", input_type=Int(optional=True), prefix="--min_single_exon_transcript_length", doc=InputDocumentation(doc="minimum length of single-exon transcript, default: 250")), ToolInput(tag="in_min_single_exon_clustering_overlap", input_type=Float(optional=True), prefix="--min_single_exon_clustering_overlap", doc=InputDocumentation(doc="minimum overlaping ratio to merge two single-exon transcripts, default: 0.8")), ToolInput(tag="in_min_mapping_quality", input_type=Int(optional=True), prefix="--min_mapping_quality", doc=InputDocumentation(doc="ignore reads with mapping quality less than this value, default: 1")), ToolInput(tag="in_max_num_cigar", input_type=Int(optional=True), prefix="--max_num_cigar", doc=InputDocumentation(doc="ignore reads with CIGAR size larger than this value, default: 1000")), ToolInput(tag="in_min_bundle_gap", input_type=Int(optional=True), prefix="--min_bundle_gap", doc=InputDocumentation(doc="minimum distances required to start a new bundle, default: 50")), ToolInput(tag="in_min_num_hits_in_bundle", input_type=Int(optional=True), prefix="--min_num_hits_in_bundle", doc=InputDocumentation(doc="minimum number of reads required in a bundle, default: 20")), ToolInput(tag="in_min_flank_length", input_type=Int(optional=True), prefix="--min_flank_length", doc=InputDocumentation(doc="minimum match length in each side for a spliced read, default: 3")), ToolInput(tag="in_min_boundary_log_ratio", input_type=Float(optional=True), prefix="--min_boundary_log_ratio", doc=InputDocumentation(doc="minimum log-ratio to identify a new boundary, default: 2.0")), ToolInput(tag="in_o", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="")), ToolInput(tag="in_i", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Aletsch_V0_1_0().translate("wdl", allow_empty_container=True)

