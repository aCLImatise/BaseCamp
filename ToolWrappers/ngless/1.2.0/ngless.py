from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Directory, File

Ngless_V0_1_0 = CommandToolBuilder(tool="ngless", base_command=["ngless"], inputs=[ToolInput(tag="in_version_short", input_type=Boolean(optional=True), prefix="--version-short", doc=InputDocumentation(doc="print just version string (useful for scripting)")), ToolInput(tag="in_version_debug", input_type=Boolean(optional=True), prefix="--version-debug", doc=InputDocumentation(doc="print detailed version information")), ToolInput(tag="in_date_short", input_type=Boolean(optional=True), prefix="--date-short", doc=InputDocumentation(doc="print just release date string (useful for scripting)")), ToolInput(tag="in_script", input_type=String(optional=True), prefix="--script", doc=InputDocumentation(doc="inline script to execute")), ToolInput(tag="in_validate_only", input_type=Boolean(optional=True), prefix="--validate-only", doc=InputDocumentation(doc="Only validate input, do not run script")), ToolInput(tag="in_print_last", input_type=Boolean(optional=True), prefix="--print-last", doc=InputDocumentation(doc="print value of last line in script")), ToolInput(tag="in_trace", input_type=Boolean(optional=True), prefix="--trace", doc=InputDocumentation(doc="Set highest verbosity mode")), ToolInput(tag="in_no_trace", input_type=Boolean(optional=True), prefix="--no-trace", doc=InputDocumentation(doc="opposite of --trace")), ToolInput(tag="in_threads", input_type=String(optional=True), prefix="--threads", doc=InputDocumentation(doc="Nr of threads to use")), ToolInput(tag="in_strict_threads", input_type=Boolean(optional=True), prefix="--strict-threads", doc=InputDocumentation(doc="strictly respect the --threads option (by default,\nNGLess will, occasionally, use more threads than\nspecified)")), ToolInput(tag="in_no_strict_threads", input_type=Boolean(optional=True), prefix="--no-strict-threads", doc=InputDocumentation(doc="opposite of --strict-threads")), ToolInput(tag="in_create_report", input_type=Boolean(optional=True), prefix="--create-report", doc=InputDocumentation(doc="create the report directory")), ToolInput(tag="in_no_create_report", input_type=Boolean(optional=True), prefix="--no-create-report", doc=InputDocumentation(doc="opposite of --create-report")), ToolInput(tag="in_html_report_directory", input_type=Directory(optional=True), prefix="--html-report-directory", doc=InputDocumentation(doc="name of output directory")), ToolInput(tag="in_temporary_directory", input_type=Directory(optional=True), prefix="--temporary-directory", doc=InputDocumentation(doc="Directory where to store temporary files")), ToolInput(tag="in_keep_temporary_files", input_type=Boolean(optional=True), prefix="--keep-temporary-files", doc=InputDocumentation(doc="Whether to keep temporary files (default is delete\nthem)")), ToolInput(tag="in_no_keep_temporary_files", input_type=Boolean(optional=True), prefix="--no-keep-temporary-files", doc=InputDocumentation(doc="opposite of --keep-temporary-files")), ToolInput(tag="in_config_file", input_type=File(optional=True), prefix="--config-file", doc=InputDocumentation(doc="Configuration files to parse")), ToolInput(tag="in_no_header", input_type=Boolean(optional=True), prefix="--no-header", doc=InputDocumentation(doc="Do not print copyright information")), ToolInput(tag="in_subsample", input_type=Boolean(optional=True), prefix="--subsample", doc=InputDocumentation(doc="Subsample mode: quickly test a pipeline by discarding\n99% of the input")), ToolInput(tag="in_experimental_features", input_type=Boolean(optional=True), prefix="--experimental-features", doc=InputDocumentation(doc="Whether to allow the use of experimental features")), ToolInput(tag="in_export_json", input_type=File(optional=True), prefix="--export-json", doc=InputDocumentation(doc="File to write JSON representation of script to")), ToolInput(tag="in_export_cwl", input_type=File(optional=True), prefix="--export-cwl", doc=InputDocumentation(doc="File to write CWL wrapper of given script")), ToolInput(tag="in_check_deprecation", input_type=Boolean(optional=True), prefix="--check-deprecation", doc=InputDocumentation(doc="Check if ngless version or any used modules have been")), ToolInput(tag="in_search_path", input_type=File(optional=True), prefix="--search-path", doc=InputDocumentation(doc="Reference search directories (replace <references> in\nscript)")), ToolInput(tag="in_index_path", input_type=File(optional=True), prefix="--index-path", doc=InputDocumentation(doc="Index path (directory where indices are stored)")), ToolInput(tag="in_check_install", input_type=Boolean(optional=True), prefix="--check-install", doc=InputDocumentation(doc="Check if ngless is correctly installed")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print paths")), ToolInput(tag="in_color", input_type=String(optional=True), prefix="--color", doc=InputDocumentation(doc="Color settings, one of 'auto' (color if writing to a\nterminal, this is the default), 'force' (always\ncolor), 'no' (no color).")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc="Filename of script to interpret")), ToolInput(tag="in_deprecated", input_type=String(), position=1, doc=InputDocumentation(doc="--search-dir ARG         Deprecated. Use --search-path instead")), ToolInput(tag="in_ref", input_type=String(), position=2, doc=InputDocumentation(doc="Name of reference to install"))], outputs=[ToolOutput(tag="out_html_report_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_html_report_directory", type_hint=File()), doc=OutputDocumentation(doc="name of output directory"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ngless_V0_1_0().translate("wdl", allow_empty_container=True)

