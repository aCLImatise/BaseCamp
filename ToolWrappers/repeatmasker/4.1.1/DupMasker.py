from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, File

Dupmasker_V0_1_0 = CommandToolBuilder(tool="DupMasker", base_command=["DupMasker"], inputs=[ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="Displays the version of the program")), ToolInput(tag="in_engine", input_type=String(optional=True), prefix="-engine", doc=InputDocumentation(doc="The name of the search engine we are using. I.e abblast/wublast or\nncbi (rmblast version). If not specified it will attempt to use the\ndefault configured for RepeatMasker.")), ToolInput(tag="in_max_div", input_type=String(optional=True), prefix="-maxDiv", doc=InputDocumentation(doc="Filter out duplicon seeds which have a divergence greater than this\nvalue.")), ToolInput(tag="in_maxwidth", input_type=Int(optional=True), prefix="-maxWidth", doc=InputDocumentation(doc="The maximum non-repetitive/non-seed realign gaps, default is 300bp")), ToolInput(tag="in_force_search", input_type=Boolean(optional=True), prefix="-forceSearch", doc=InputDocumentation(doc="DupMasker uses RepeatMasker .out and previous runs of DupMasker's\n*.dupout files by default. Use this option if you would like to\nrerun these searches.")), ToolInput(tag="in_align", input_type=File(optional=True), prefix="-align", doc=InputDocumentation(doc="Produce alignments. These are stored in the output file.")), ToolInput(tag="in_gff", input_type=File(optional=True), prefix="-gff", doc=InputDocumentation(doc="Creates an additional Gene Feature Finding (gff) output file.")), ToolInput(tag="in_crossmatch_dir", input_type=File(optional=True), prefix="-crossmatch_dir", doc=InputDocumentation(doc="The path Phil Green's cross_match program ( phrap program suite ).")), ToolInput(tag="in_default_search_engine", input_type=String(optional=True), prefix="-default_search_engine", doc=InputDocumentation(doc="The default search engine to use")), ToolInput(tag="in_rmb_last_dir", input_type=File(optional=True), prefix="-rmblast_dir", doc=InputDocumentation(doc="The path to the installation of the RMBLAST sequence alignment\nprogram.")), ToolInput(tag="in_libdir", input_type=File(optional=True), prefix="-libdir", doc=InputDocumentation(doc="Path to the RepeatMasker libraries directory.")), ToolInput(tag="in_abb_last_dir", input_type=File(optional=True), prefix="-abblast_dir", doc=InputDocumentation(doc="The path to the installation of the ABBLAST sequence alignment\nprogram.")), ToolInput(tag="in_hmmer_dir", input_type=File(optional=True), prefix="-hmmer_dir", doc=InputDocumentation(doc="The path to the HMMER profile HMM search software.")), ToolInput(tag="in_trf_prgm", input_type=File(optional=True), prefix="-trf_prgm", doc=InputDocumentation(doc="The full path including the name for the TRF program.")), ToolInput(tag="in_one_dot", input_type=String(), position=0, doc=InputDocumentation(doc="The output is placed in a file named ")), ToolInput(tag="in_my_filed_otf_a_dot_dupl_icons_dot", input_type=String(), position=1, doc=InputDocumentation(doc="The basic program flow is:\n- RepeatMask the sequence ( Human libraries )\n- Search the masked squence against the duplicon library\n- Build realignment regions for each duplicon\n- Realign using non-repeat-masked dna\n- Join duplicons and output results")), ToolInput(tag="in_repeatmasker", input_type=String(), position=0, doc=InputDocumentation(doc="COPYRIGHT"))], outputs=[ToolOutput(tag="out_align", output_type=File(optional=True), selector=InputSelector(input_to_select="in_align", type_hint=File()), doc=OutputDocumentation(doc="Produce alignments. These are stored in the output file.")), ToolOutput(tag="out_gff", output_type=File(optional=True), selector=InputSelector(input_to_select="in_gff", type_hint=File()), doc=OutputDocumentation(doc="Creates an additional Gene Feature Finding (gff) output file."))], container="quay.io/biocontainers/repeatmasker:4.1.1--pl526_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dupmasker_V0_1_0().translate("wdl")

