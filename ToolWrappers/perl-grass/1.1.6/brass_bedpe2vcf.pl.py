from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Brass_Bedpe2Vcf_Pl_V0_1_0 = CommandToolBuilder(tool="brass_bedpe2vcf.pl", base_command=["brass_bedpe2vcf.pl"], inputs=[ToolInput(tag="in_species", input_type=Boolean(optional=True), prefix="-species", doc=InputDocumentation(doc=": species (HUMAN, MOUSE, DOG etc)")), ToolInput(tag="in_file", input_type=Boolean(optional=True), prefix="-file", doc=InputDocumentation(doc=": input file - format type: bedpe)")), ToolInput(tag="in_outfile", input_type=Boolean(optional=True), prefix="-outfile", doc=InputDocumentation(doc=": what file to print output to. Default is input_file.bedpe")), ToolInput(tag="in_ref", input_type=File(optional=True), prefix="-ref", doc=InputDocumentation(doc=": fasta reference file (with associated fai file). For vcf out file generation.")), ToolInput(tag="in_assembly", input_type=File(optional=True), prefix="-assembly", doc=InputDocumentation(doc=": sequence assembly used (eg GRCh37). For vcf out file generation.")), ToolInput(tag="in_platform", input_type=File(optional=True), prefix="-platform", doc=InputDocumentation(doc=": sequencing platform used (eg HiSeq). For vcf out file generation.")), ToolInput(tag="in_protocol", input_type=File(optional=True), prefix="-protocol", doc=InputDocumentation(doc=": sequencing experimental design (eg genomic, pulldown). For vcf out file generation.")), ToolInput(tag="in_tumour", input_type=File(optional=True), prefix="-tumour", doc=InputDocumentation(doc=": name of tumour sample. For vcf out file generation.")), ToolInput(tag="in_acc_tumour", input_type=File(optional=True), prefix="-acc_tumour", doc=InputDocumentation(doc=": name of tumour sample accession id. For vcf out file generation.")), ToolInput(tag="in_acc_source_tumour", input_type=File(optional=True), prefix="-acc_source_tumour", doc=InputDocumentation(doc=": source of tumour sample accession id. For vcf out file generation.")), ToolInput(tag="in_study_tumour", input_type=File(optional=True), prefix="-study_tumour", doc=InputDocumentation(doc=": study id associated with tumour sample. For vcf out file generation.")), ToolInput(tag="in_normal", input_type=File(optional=True), prefix="-normal", doc=InputDocumentation(doc=": name of normal sample. For vcf out file generation.")), ToolInput(tag="in_acc_normal", input_type=File(optional=True), prefix="-acc_normal", doc=InputDocumentation(doc=": name of normal sample accession id. For vcf out file generation.")), ToolInput(tag="in_acc_source_normal", input_type=File(optional=True), prefix="-acc_source_normal", doc=InputDocumentation(doc=": source of normal sample accession id. For vcf out file generation.")), ToolInput(tag="in_study_normal", input_type=File(optional=True), prefix="-study_normal", doc=InputDocumentation(doc=": study id associated with normal sample. For vcf out file generation."))], outputs=[ToolOutput(tag="out_ref", output_type=File(optional=True), selector=InputSelector(input_to_select="in_ref", type_hint=File()), doc=OutputDocumentation(doc=": fasta reference file (with associated fai file). For vcf out file generation.")), ToolOutput(tag="out_assembly", output_type=File(optional=True), selector=InputSelector(input_to_select="in_assembly", type_hint=File()), doc=OutputDocumentation(doc=": sequence assembly used (eg GRCh37). For vcf out file generation.")), ToolOutput(tag="out_platform", output_type=File(optional=True), selector=InputSelector(input_to_select="in_platform", type_hint=File()), doc=OutputDocumentation(doc=": sequencing platform used (eg HiSeq). For vcf out file generation.")), ToolOutput(tag="out_protocol", output_type=File(optional=True), selector=InputSelector(input_to_select="in_protocol", type_hint=File()), doc=OutputDocumentation(doc=": sequencing experimental design (eg genomic, pulldown). For vcf out file generation.")), ToolOutput(tag="out_tumour", output_type=File(optional=True), selector=InputSelector(input_to_select="in_tumour", type_hint=File()), doc=OutputDocumentation(doc=": name of tumour sample. For vcf out file generation.")), ToolOutput(tag="out_acc_tumour", output_type=File(optional=True), selector=InputSelector(input_to_select="in_acc_tumour", type_hint=File()), doc=OutputDocumentation(doc=": name of tumour sample accession id. For vcf out file generation.")), ToolOutput(tag="out_acc_source_tumour", output_type=File(optional=True), selector=InputSelector(input_to_select="in_acc_source_tumour", type_hint=File()), doc=OutputDocumentation(doc=": source of tumour sample accession id. For vcf out file generation.")), ToolOutput(tag="out_study_tumour", output_type=File(optional=True), selector=InputSelector(input_to_select="in_study_tumour", type_hint=File()), doc=OutputDocumentation(doc=": study id associated with tumour sample. For vcf out file generation.")), ToolOutput(tag="out_normal", output_type=File(optional=True), selector=InputSelector(input_to_select="in_normal", type_hint=File()), doc=OutputDocumentation(doc=": name of normal sample. For vcf out file generation.")), ToolOutput(tag="out_acc_normal", output_type=File(optional=True), selector=InputSelector(input_to_select="in_acc_normal", type_hint=File()), doc=OutputDocumentation(doc=": name of normal sample accession id. For vcf out file generation.")), ToolOutput(tag="out_acc_source_normal", output_type=File(optional=True), selector=InputSelector(input_to_select="in_acc_source_normal", type_hint=File()), doc=OutputDocumentation(doc=": source of normal sample accession id. For vcf out file generation.")), ToolOutput(tag="out_study_normal", output_type=File(optional=True), selector=InputSelector(input_to_select="in_study_normal", type_hint=File()), doc=OutputDocumentation(doc=": study id associated with normal sample. For vcf out file generation."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Brass_Bedpe2Vcf_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

