!Command
command:
- snakefmt
positional:
- !Positional
  description: Files are modified in-place by default; use diff, check, or  `snakefmt
    - <
  position: 0
  name: provided.
  optional: false
named:
- !Flag
  description: 'Lines longer than INT will be wrapped.  [default: 88]'
  synonyms:
  - -l
  - --line-length
  args: !SimpleFlagArg
    name: INT
  optional: true
- !Flag
  description: "Don't write the files back, just return the status.\nReturn code 0\
    \ means nothing would change. Return code\n1 means some files would be reformatted.\
    \ Return code\n123 means there was an error."
  synonyms:
  - --check
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Don't write the files back, just output a diff for\neach file to stdout."
  synonyms:
  - -d
  - --diff
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Same as --diff but only shows lines that would change\nplus a few\
    \ lines of context."
  synonyms:
  - --compact-diff
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "A regular expression that matches files and\ndirectories that should\
    \ be included on recursive\nsearches.  An empty value means all files are\nincluded\
    \ regardless of the name.  Use forward slashes\nfor directories on all platforms\
    \ (Windows, too).\nExclusions are calculated first, inclusions later.\n[default:\
    \ (\\.smk$|^Snakefile)]"
  synonyms:
  - --include
  args: !SimpleFlagArg
    name: PATTERN
  optional: true
- !Flag
  description: "A regular expression that matches files and\ndirectories that should\
    \ be excluded on recursive\nsearches.  An empty value means no paths are\nexcluded.\
    \ Use forward slashes for directories on all\nplatforms (Windows, too). Exclusions\
    \ are calculated\nfirst, inclusions later.  [default: (\\.snakemake|\\.eg\ngs|\\\
    .git|\\.hg|\\.mypy_cache|\\.nox|\\.tox|\\.venv|\\.svn|_\nbuild|buck-out|build|dist)]"
  synonyms:
  - --exclude
  args: !SimpleFlagArg
    name: PATTERN
  optional: true
- !Flag
  description: "Read configuration from PATH. By default, will try to\nread from `./pyproject.toml`"
  synonyms:
  - -c
  - --config
  args: !SimpleFlagArg
    name: PATH
  optional: true
- !Flag
  description: Turns on debug-level logging.
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: Show this message and exit.
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: Show the version and exit.
  synonyms:
  - -V
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "Usage: snakefmt [OPTIONS] [SRC]...\n\n  The uncompromising Snakemake code\
  \ formatter.\n\n  SRC specifies directories and files to format. Directories will\
  \ be\n  searched for file names that conform to the include/exclude patterns\n \
  \ provided.\n\n  Files are modified in-place by default; use diff, check, or  `snakefmt\
  \ - <\n  Snakefile` to avoid this.\n\nOptions:\n  -l, --line-length INT  Lines longer\
  \ than INT will be wrapped.  [default: 88]\n  --check                Don't write\
  \ the files back, just return the status.\n                         Return code\
  \ 0 means nothing would change. Return code\n                         1 means some\
  \ files would be reformatted. Return code\n                         123 means there\
  \ was an error.\n\n  -d, --diff             Don't write the files back, just output\
  \ a diff for\n                         each file to stdout.\n\n  --compact-diff\
  \         Same as --diff but only shows lines that would change\n              \
  \           plus a few lines of context.\n\n  --include PATTERN      A regular expression\
  \ that matches files and\n                         directories that should be included\
  \ on recursive\n                         searches.  An empty value means all files\
  \ are\n                         included regardless of the name.  Use forward slashes\n\
  \                         for directories on all platforms (Windows, too).\n   \
  \                      Exclusions are calculated first, inclusions later.\n    \
  \                     [default: (\\.smk$|^Snakefile)]\n\n  --exclude PATTERN   \
  \   A regular expression that matches files and\n                         directories\
  \ that should be excluded on recursive\n                         searches.  An empty\
  \ value means no paths are\n                         excluded. Use forward slashes\
  \ for directories on all\n                         platforms (Windows, too). Exclusions\
  \ are calculated\n                         first, inclusions later.  [default: (\\\
  .snakemake|\\.eg\n                         gs|\\.git|\\.hg|\\.mypy_cache|\\.nox|\\\
  .tox|\\.venv|\\.svn|_\n                         build|buck-out|build|dist)]\n\n\
  \  -c, --config PATH      Read configuration from PATH. By default, will try to\n\
  \                         read from `./pyproject.toml`\n\n  -h, --help         \
  \    Show this message and exit.\n  -V, --version          Show the version and\
  \ exit.\n  -v, --verbose          Turns on debug-level logging.\n"
generated_using:
- --help
