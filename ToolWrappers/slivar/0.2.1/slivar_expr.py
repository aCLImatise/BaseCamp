from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Slivar_Expr_V0_1_0 = CommandToolBuilder(tool="slivar_expr", base_command=["slivar", "expr"], inputs=[ToolInput(tag="in_vcf", input_type=File(optional=True), prefix="--vcf", doc=InputDocumentation(doc="path to VCF/BCF")), ToolInput(tag="in_region", input_type=File(optional=True), prefix="--region", doc=InputDocumentation(doc="optional region to limit evaluation. e.g. chr1 or 1:222-333 (or a BED file of regions)")), ToolInput(tag="in_exclude", input_type=File(optional=True), prefix="--exclude", doc=InputDocumentation(doc="BED file of exclude regions (will never output excluded variants regardless of pass-only flag)")), ToolInput(tag="in_js", input_type=File(optional=True), prefix="--js", doc=InputDocumentation(doc="path to javascript functions to expose to user")), ToolInput(tag="in_ped", input_type=File(optional=True), prefix="--ped", doc=InputDocumentation(doc="pedigree file with family relations, sex, and affected status")), ToolInput(tag="in_alias", input_type=File(optional=True), prefix="--alias", doc=InputDocumentation(doc="path to file of group aliases")), ToolInput(tag="in_out_vcf", input_type=File(optional=True), prefix="--out-vcf", doc=InputDocumentation(doc="path to output VCF/BCF (default: /dev/stdout)")), ToolInput(tag="in_pass_only", input_type=Boolean(optional=True), prefix="--pass-only", doc=InputDocumentation(doc="only output variants that pass at least one of the filters")), ToolInput(tag="in_skip_non_variable", input_type=Boolean(optional=True), prefix="--skip-non-variable", doc=InputDocumentation(doc="don't evaluate expression unless at least 1 sample is variable at the variant this can improve speed")), ToolInput(tag="in_trio", input_type=File(optional=True), prefix="--trio", doc=InputDocumentation(doc="expression(s) applied to each trio where 'mom', 'dad', 'kid' labels are available; trios inferred from ped file.")), ToolInput(tag="in_family_expr", input_type=File(optional=True), prefix="--family-expr", doc=InputDocumentation(doc="expression(s) applied to each family where 'fam' is available with a list of samples in each family from ped file.")), ToolInput(tag="in_group_expr", input_type=String(optional=True), prefix="--group-expr", doc=InputDocumentation(doc="expression(s) applied to the groups defined in the alias option [see: https://github.com/brentp/slivar/wiki/groups-in-slivar].")), ToolInput(tag="in_sample_expr", input_type=String(optional=True), prefix="--sample-expr", doc=InputDocumentation(doc="expression(s) applied to each sample in the VCF.")), ToolInput(tag="in_info", input_type=String(optional=True), prefix="--info", doc=InputDocumentation(doc="expression using only attributes from  the INFO field or variant. If this does not pass trio/group/sample expressions are not applied.")), ToolInput(tag="in_g_notate", input_type=File(optional=True), prefix="--gnotate", doc=InputDocumentation(doc="path(s) to compressed gnotate file(s)")), ToolInput(tag="in_sli_var", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_exclude", output_type=File(optional=True), selector=InputSelector(input_to_select="in_exclude", type_hint=File()), doc=OutputDocumentation(doc="BED file of exclude regions (will never output excluded variants regardless of pass-only flag)")), ToolOutput(tag="out_out_vcf", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_vcf", type_hint=File()), doc=OutputDocumentation(doc="path to output VCF/BCF (default: /dev/stdout)"))], container="quay.io/biocontainers/slivar:0.2.1--hecda079_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Slivar_Expr_V0_1_0().translate("wdl")

