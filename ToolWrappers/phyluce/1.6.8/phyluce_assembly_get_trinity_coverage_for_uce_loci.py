from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, String, Array

Phyluce_Assembly_Get_Trinity_Coverage_For_Uce_Loci_V0_1_0 = CommandToolBuilder(tool="phyluce_assembly_get_trinity_coverage_for_uce_loci", base_command=["phyluce_assembly_get_trinity_coverage_for_uce_loci"], inputs=[ToolInput(tag="in_directory_containing_assemblies", input_type=Directory(optional=True), prefix="--assemblies", doc=InputDocumentation(doc="The directory containing the assemblies")), ToolInput(tag="in_match_count_output", input_type=File(optional=True), prefix="--match-count-output", doc=InputDocumentation(doc="The output file containing taxa and loci in\ncomplete/incomplete matrices generated by\nget_match_counts.py.")), ToolInput(tag="in_type", input_type=String(optional=True), prefix="--type", doc=InputDocumentation(doc="Whether to compute stats on trimmed or untrimmed UCE\ndata.")), ToolInput(tag="in_exclude", input_type=Array(t=String(), optional=True), prefix="--exclude", doc=InputDocumentation(doc="A list of assemblies to ignore.")), ToolInput(tag="in_locus_db", input_type=File(optional=True), prefix="--locus-db", doc=InputDocumentation(doc="The SQL database file holding probe matches to\ntargeted loci (usually 'lastz/probe.matches.sqlite').")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="The output directory to hold the UCE coverage files")), ToolInput(tag="in_resume", input_type=Directory(optional=True), prefix="--resume", doc=InputDocumentation(doc="The output directory in which to resume after a")), ToolInput(tag="in_log_path", input_type=File(optional=True), prefix="--log-path", doc=InputDocumentation(doc="The path to a directory to hold logs.")), ToolInput(tag="in__matchcountoutput", input_type=String(), position=0, doc=InputDocumentation(doc="--match-count-output")), ToolInput(tag="in_failure_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--verbosity {INFO,WARN,CRITICAL}"))], outputs=[ToolOutput(tag="out_match_count_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_match_count_output", type_hint=File()), doc=OutputDocumentation(doc="The output file containing taxa and loci in\ncomplete/incomplete matrices generated by\nget_match_counts.py.")), ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="The output directory to hold the UCE coverage files")), ToolOutput(tag="out_resume", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_resume", type_hint=File()), doc=OutputDocumentation(doc="The output directory in which to resume after a"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phyluce_Assembly_Get_Trinity_Coverage_For_Uce_Loci_V0_1_0().translate("wdl", allow_empty_container=True)

