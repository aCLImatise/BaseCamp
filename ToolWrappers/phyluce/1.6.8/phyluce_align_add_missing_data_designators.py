from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Phyluce_Align_Add_Missing_Data_Designators_V0_1_0 = CommandToolBuilder(tool="phyluce_align_add_missing_data_designators", base_command=["phyluce_align_add_missing_data_designators"], inputs=[ToolInput(tag="in_alignments", input_type=String(optional=True), prefix="--alignments", doc=InputDocumentation(doc="Alignment files to process (default: None)")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="The output dir in which to store copies of the\nalignments (default: None)")), ToolInput(tag="in_match_count_output", input_type=File(optional=True), prefix="--match-count-output", doc=InputDocumentation(doc="The output file containing taxa and loci in\ncomplete/incomplete matrices generated by\nget_match_counts.py. (default: None)")), ToolInput(tag="in_incomplete_matrix", input_type=File(optional=True), prefix="--incomplete-matrix", doc=InputDocumentation(doc="The output file for incomplete-matrix records\ngenerated by get_match_counts.py. (default: None)")), ToolInput(tag="in_min_tax_a", input_type=Int(optional=True), prefix="--min-taxa", doc=InputDocumentation(doc="The minimum number of taxa to keep (default: 3)")), ToolInput(tag="in_missing_character", input_type=String(optional=True), prefix="--missing-character", doc=InputDocumentation(doc="The character to use for missing data (default: ?)")), ToolInput(tag="in_verbatim", input_type=Boolean(optional=True), prefix="--verbatim", doc=InputDocumentation(doc="Do not parse species names at all - use them verbatim\n(default: False)")), ToolInput(tag="in_input_format", input_type=String(optional=True), prefix="--input-format", doc=InputDocumentation(doc="The input alignment format. (default: nexus)")), ToolInput(tag="in_output_format", input_type=String(optional=True), prefix="--output-format", doc=InputDocumentation(doc="The output alignment format. (default: nexus)")), ToolInput(tag="in_no_check_missing", input_type=Boolean(optional=True), prefix="--no-check-missing", doc=InputDocumentation(doc="Do not check the list of missing loci (default: True)")), ToolInput(tag="in_verbosity", input_type=String(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="The logging level to use. (default: INFO)")), ToolInput(tag="in_log_path", input_type=File(optional=True), prefix="--log-path", doc=InputDocumentation(doc="The path to a directory to hold logs. (default: None)")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Process alignments in parallel using --cores for\nalignment. This is the number of PHYSICAL CPUs.\n(default: 1)\n"))], outputs=[ToolOutput(tag="out_match_count_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_match_count_output", type_hint=File()), doc=OutputDocumentation(doc="The output file containing taxa and loci in\ncomplete/incomplete matrices generated by\nget_match_counts.py. (default: None)")), ToolOutput(tag="out_incomplete_matrix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_incomplete_matrix", type_hint=File()), doc=OutputDocumentation(doc="The output file for incomplete-matrix records\ngenerated by get_match_counts.py. (default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phyluce_Align_Add_Missing_Data_Designators_V0_1_0().translate("wdl", allow_empty_container=True)

