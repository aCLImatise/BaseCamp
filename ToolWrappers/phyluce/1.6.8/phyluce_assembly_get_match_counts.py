from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Phyluce_Assembly_Get_Match_Counts_V0_1_0 = CommandToolBuilder(tool="phyluce_assembly_get_match_counts", base_command=["phyluce_assembly_get_match_counts"], inputs=[ToolInput(tag="in_locus_db", input_type=File(optional=True), prefix="--locus-db", doc=InputDocumentation(doc="The SQL database file holding probe matches to\ntargeted loci (usually 'lastz/probe.matches.sqlite'.)")), ToolInput(tag="in_tax_on_list_config", input_type=File(optional=True), prefix="--taxon-list-config", doc=InputDocumentation(doc="The config file containing lists of the taxa you want\nto include in matrices.")), ToolInput(tag="in_tax_on_group", input_type=File(optional=True), prefix="--taxon-group", doc=InputDocumentation(doc="The [group] in the config file whose specific data\nmatrix you want to create.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="The path to the output file you want to create.")), ToolInput(tag="in_incomplete_matrix", input_type=Boolean(optional=True), prefix="--incomplete-matrix", doc=InputDocumentation(doc="Generate an incomplete matrix of data.")), ToolInput(tag="in_verbosity", input_type=String(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="The logging level to use.")), ToolInput(tag="in_log_path", input_type=File(optional=True), prefix="--log-path", doc=InputDocumentation(doc="The path to a directory to hold logs.")), ToolInput(tag="in_optimize", input_type=Boolean(optional=True), prefix="--optimize", doc=InputDocumentation(doc="Return optimum groups of probes by enumeration\n(default) or sampling.")), ToolInput(tag="in_random", input_type=Boolean(optional=True), prefix="--random", doc=InputDocumentation(doc="Optimize by sampling.")), ToolInput(tag="in_samples", input_type=Int(optional=True), prefix="--samples", doc=InputDocumentation(doc="The number of samples to take.")), ToolInput(tag="in_sample_size", input_type=Int(optional=True), prefix="--sample-size", doc=InputDocumentation(doc="The group size of samples.")), ToolInput(tag="in_extend_locus_db", input_type=File(optional=True), prefix="--extend-locus-db", doc=InputDocumentation(doc="An SQLlite database file holding probe matches to\nother targeted loci")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="--silent", doc=InputDocumentation(doc="Don't print probe names."))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="The path to the output file you want to create."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phyluce_Assembly_Get_Match_Counts_V0_1_0().translate("wdl", allow_empty_container=True)

