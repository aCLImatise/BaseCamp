from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, String

Phyluce_Assembly_Get_Fastas_From_Match_Counts_V0_1_0 = CommandToolBuilder(tool="phyluce_assembly_get_fastas_from_match_counts", base_command=["phyluce_assembly_get_fastas_from_match_counts"], inputs=[ToolInput(tag="in_contigs", input_type=Directory(optional=True), prefix="--contigs", doc=InputDocumentation(doc="The directory containing the assembled contigs in\nwhich you searched for UCE loci. (default: None)")), ToolInput(tag="in_locus_db", input_type=File(optional=True), prefix="--locus-db", doc=InputDocumentation(doc="The SQL database file holding probe matches to\ntargeted loci (usually 'lastz/probe.matches.sqlite').\n(default: None)")), ToolInput(tag="in_match_count_output", input_type=File(optional=True), prefix="--match-count-output", doc=InputDocumentation(doc="The output file containing taxa and loci in\ncomplete/incomplete matrices generated by\nget_match_counts.py. (default: None)")), ToolInput(tag="in_incomplete_matrix", input_type=File(optional=True), prefix="--incomplete-matrix", doc=InputDocumentation(doc="The path to the outfile for incomplete-matrix records.\nRequired when processing an incomplete data matrix.\n(default: False)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="The path to the output FASTA file you want to create.\n(default: None)")), ToolInput(tag="in_verbosity", input_type=String(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="The logging level to use. (default: INFO)")), ToolInput(tag="in_log_path", input_type=File(optional=True), prefix="--log-path", doc=InputDocumentation(doc="The path to a directory to hold logs. (default: None)")), ToolInput(tag="in_extend_locus_db", input_type=File(optional=True), prefix="--extend-locus-db", doc=InputDocumentation(doc="An SQLlite database file holding probe matches to\nother targeted loci. (default: None)")), ToolInput(tag="in_extend_locus_contigs", input_type=Directory(optional=True), prefix="--extend-locus-contigs", doc=InputDocumentation(doc="A directory holding the assembled contigs (from\ngenomes or another study) referenced by --extend-\nlocus-db. (default: None)\n"))], outputs=[ToolOutput(tag="out_match_count_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_match_count_output", type_hint=File()), doc=OutputDocumentation(doc="The output file containing taxa and loci in\ncomplete/incomplete matrices generated by\nget_match_counts.py. (default: None)")), ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="The path to the output FASTA file you want to create.\n(default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phyluce_Assembly_Get_Fastas_From_Match_Counts_V0_1_0().translate("wdl", allow_empty_container=True)

