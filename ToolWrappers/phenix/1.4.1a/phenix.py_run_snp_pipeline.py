from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Float, Array, Boolean

Phenix_Py_Run_Snp_Pipeline_V0_1_0 = CommandToolBuilder(tool="phenix.py_run_snp_pipeline", base_command=["phenix.py", "run_snp_pipeline"], inputs=[ToolInput(tag="in_workflow", input_type=Int(optional=True), prefix="--workflow", doc=InputDocumentation(doc="R1/Forward read in Fastq format.")), ToolInput(tag="in_r_two", input_type=Int(optional=True), prefix="-r2", doc=InputDocumentation(doc="R2/Reverse read in Fastq format.")), ToolInput(tag="in_reference", input_type=String(optional=True), prefix="--reference", doc=InputDocumentation(doc="Rerefence to use for mapping.")), ToolInput(tag="in_sample_name", input_type=String(optional=True), prefix="--sample-name", doc=InputDocumentation(doc="Name of the sample for mapper to include as read groups.")), ToolInput(tag="in_outdir", input_type=Int(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Available mappers: ['bwa', 'bowtie2']")), ToolInput(tag="in_mapper_options", input_type=String(optional=True), prefix="--mapper-options", doc=InputDocumentation(doc="Custom maper options (advanced)")), ToolInput(tag="in_variant", input_type=String(optional=True), prefix="--variant", doc=InputDocumentation(doc="Available variant callers: ['mpileup', 'gatk']")), ToolInput(tag="in_variant_options", input_type=String(optional=True), prefix="--variant-options", doc=InputDocumentation(doc="Custom variant options (advanced)")), ToolInput(tag="in_filters", input_type=Float(optional=True), prefix="--filters", doc=InputDocumentation(doc="Filters to be applied to the VCF in key:value pairs, separated by comma (,). Available_filters: ['gq_score', 'dp4_ratio', 'ad_ratio', 'min_depth', 'mq_score', 'mq0_ratio', 'uncall_gt', 'qual_score', 'mq0f_ratio']. Recommendations: GATK: mq_score:30,min_depth:10,ad_ratio:0.9 Mpileup: mq_score:30,min_depth:10,dp4_ratio:0.9")), ToolInput(tag="in_annotators", input_type=Array(t=String(), optional=True), prefix="--annotators", doc=InputDocumentation(doc="List of annotators to run before filters. Available: ['coverage']")), ToolInput(tag="in_keep_temp", input_type=Boolean(optional=True), prefix="--keep-temp", doc=InputDocumentation(doc="Keep intermediate files like BAMs and VCFs (default: False).")), ToolInput(tag="in_json", input_type=Boolean(optional=True), prefix="--json", doc=InputDocumentation(doc="Also write variant positions in filtered vcf as json file (default: False).")), ToolInput(tag="in_json_info", input_type=Boolean(optional=True), prefix="--json-info", doc=InputDocumentation(doc="When writing a json file, log some stats to stdout. (default: False)."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phenix_Py_Run_Snp_Pipeline_V0_1_0().translate("wdl", allow_empty_container=True)

