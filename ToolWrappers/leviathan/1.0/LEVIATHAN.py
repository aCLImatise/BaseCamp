from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Leviathan_V0_1_0 = CommandToolBuilder(tool="LEVIATHAN", base_command=["LEVIATHAN"], inputs=[ToolInput(tag="in_region_size", input_type=Boolean(optional=True), prefix="--regionSize", doc=InputDocumentation(doc=":          Size of the regions on the reference genome to consider (default: 1000)")), ToolInput(tag="in_m_invariant_size", input_type=Boolean(optional=True), prefix="--minVariantSize", doc=InputDocumentation(doc=":     Minimum size of the SVs to detect (default: same as regionSize)")), ToolInput(tag="in_max_links", input_type=Boolean(optional=True), prefix="--maxLinks", doc=InputDocumentation(doc=":           Remove from candidates list all candidates which have a region involved in that much candidates (default: 1000)")), ToolInput(tag="in_medium_size", input_type=Boolean(optional=True), prefix="--mediumSize", doc=InputDocumentation(doc=":         Minimum size of medium variants (default: 2000)")), ToolInput(tag="in_large_size", input_type=Boolean(optional=True), prefix="--largeSize", doc=InputDocumentation(doc=":          Minimum size of large variants (default: 10000)")), ToolInput(tag="in_small_rate", input_type=Boolean(optional=True), prefix="--smallRate", doc=InputDocumentation(doc=":          Percentile to chose as a threshold in the distribution of the number of shared barcodes for small variants (default: 99)")), ToolInput(tag="in_medium_rate", input_type=Boolean(optional=True), prefix="--mediumRate", doc=InputDocumentation(doc=":         Percentile to chose as a threshold in the distribution of the number of shared barcodes for medium variants (default: 99)")), ToolInput(tag="in_large_rate", input_type=Boolean(optional=True), prefix="--largeRate", doc=InputDocumentation(doc=":          Percentile to chose as a threshold in the distribution of the number of shared barcodes for large variants (default: 99)")), ToolInput(tag="in_duplicates", input_type=Boolean(optional=True), prefix="--duplicates", doc=InputDocumentation(doc=":         Consider SV as duplicates if they have the same type and if their breakpoints are within this distance (default: 10)")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc=":            Number of threads (default: 8)")), ToolInput(tag="in_pool_size", input_type=Boolean(optional=True), prefix="--poolSize", doc=InputDocumentation(doc=":           Size of the thread pool (default: 100000)")), ToolInput(tag="in_nb_bins", input_type=Boolean(optional=True), prefix="--nbBins", doc=InputDocumentation(doc=":             Number of iterations to perform through the barcode index (default: 10)")), ToolInput(tag="in_min_barcodes", input_type=Boolean(optional=True), prefix="--minBarcodes", doc=InputDocumentation(doc=":        Always remove candidates that share less than this number of barcodes (default: 1)")), ToolInput(tag="in_candidates", input_type=Boolean(optional=True), prefix="--candidates", doc=InputDocumentation(doc=":         File where to store valid SV candidates (default: 'candidates.bedpe')")), ToolInput(tag="in_g", input_type=String(optional=True), prefix="-g", doc=InputDocumentation(doc="")), ToolInput(tag="in_i", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc="")), ToolInput(tag="in_b", input_type=File(optional=True), prefix="-b", doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/leviathan:1.0--h7d875b9_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Leviathan_V0_1_0().translate("wdl")

