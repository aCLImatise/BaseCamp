from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, File

Smina_V0_1_0 = CommandToolBuilder(tool="smina", base_command=["smina"], inputs=[ToolInput(tag="in_arg_rigid_part", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --receptor ] arg         rigid part of the receptor (PDBQT)")), ToolInput(tag="in_flex", input_type=String(optional=True), prefix="--flex", doc=InputDocumentation(doc="flexible side chains, if any (PDBQT)")), ToolInput(tag="in__arg_ligands", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --ligand ] arg           ligand(s)")), ToolInput(tag="in_flex_res", input_type=String(optional=True), prefix="--flexres", doc=InputDocumentation(doc="flexible side chains specified by comma\nseparated list of chain:resid")), ToolInput(tag="in_flex_dist_ligand", input_type=String(optional=True), prefix="--flexdist_ligand", doc=InputDocumentation(doc="Ligand to use for flexdist")), ToolInput(tag="in_flex_dist", input_type=String(optional=True), prefix="--flexdist", doc=InputDocumentation(doc="set all side chains within specified distance\nto flexdist_ligand to flexible")), ToolInput(tag="in_center_x", input_type=String(optional=True), prefix="--center_x", doc=InputDocumentation(doc="X coordinate of the center")), ToolInput(tag="in_center_y", input_type=String(optional=True), prefix="--center_y", doc=InputDocumentation(doc="Y coordinate of the center")), ToolInput(tag="in_center_z", input_type=String(optional=True), prefix="--center_z", doc=InputDocumentation(doc="Z coordinate of the center")), ToolInput(tag="in_size_x", input_type=Int(optional=True), prefix="--size_x", doc=InputDocumentation(doc="size in the X dimension (Angstroms)")), ToolInput(tag="in_size_y", input_type=Int(optional=True), prefix="--size_y", doc=InputDocumentation(doc="size in the Y dimension (Angstroms)")), ToolInput(tag="in_size_z", input_type=Int(optional=True), prefix="--size_z", doc=InputDocumentation(doc="size in the Z dimension (Angstroms)")), ToolInput(tag="in_auto_box_ligand", input_type=String(optional=True), prefix="--autobox_ligand", doc=InputDocumentation(doc="Ligand to use for autobox")), ToolInput(tag="in_auto_box_add", input_type=Int(optional=True), prefix="--autobox_add", doc=InputDocumentation(doc="Amount of buffer space to add to auto-generated\nbox (default +4 on all six sides)")), ToolInput(tag="in_no_lig", input_type=Boolean(optional=True), prefix="--no_lig", doc=InputDocumentation(doc="no ligand; for sampling/minimizing flexible")), ToolInput(tag="in_scoring", input_type=String(optional=True), prefix="--scoring", doc=InputDocumentation(doc="specify alternative builtin scoring function")), ToolInput(tag="in_custom_scoring", input_type=File(optional=True), prefix="--custom_scoring", doc=InputDocumentation(doc="custom scoring function file")), ToolInput(tag="in_custom_atoms", input_type=File(optional=True), prefix="--custom_atoms", doc=InputDocumentation(doc="custom atom type parameters file")), ToolInput(tag="in_score_only", input_type=Boolean(optional=True), prefix="--score_only", doc=InputDocumentation(doc="score provided ligand pose")), ToolInput(tag="in_local_only", input_type=Boolean(optional=True), prefix="--local_only", doc=InputDocumentation(doc="local search only using autobox (you probably\nwant to use --minimize)")), ToolInput(tag="in_minimize", input_type=Boolean(optional=True), prefix="--minimize", doc=InputDocumentation(doc="energy minimization")), ToolInput(tag="in_randomize_only", input_type=Boolean(optional=True), prefix="--randomize_only", doc=InputDocumentation(doc="generate random poses, attempting to avoid")), ToolInput(tag="in_accurate_line", input_type=Boolean(optional=True), prefix="--accurate_line", doc=InputDocumentation(doc="use accurate line search")), ToolInput(tag="in_minimize_early_term", input_type=Boolean(optional=True), prefix="--minimize_early_term", doc=InputDocumentation(doc="Stop minimization before convergence conditions\nare fully met.")), ToolInput(tag="in_approximation", input_type=String(optional=True), prefix="--approximation", doc=InputDocumentation(doc="approximation (linear, spline, or exact) to use")), ToolInput(tag="in_factor", input_type=String(optional=True), prefix="--factor", doc=InputDocumentation(doc="approximation factor: higher results in a\nfiner-grained approximation")), ToolInput(tag="in_force_cap", input_type=Int(optional=True), prefix="--force_cap", doc=InputDocumentation(doc="max allowed force; lower values more gently\nminimize clashing structures")), ToolInput(tag="in_user_grid", input_type=File(optional=True), prefix="--user_grid", doc=InputDocumentation(doc="Autodock map file for user grid data based")), ToolInput(tag="in_print_terms", input_type=Boolean(optional=True), prefix="--print_terms", doc=InputDocumentation(doc="Print all available terms with default")), ToolInput(tag="in_arg_output_file_name", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --out ] arg              output file name, format taken from file")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="optionally, write log file")), ToolInput(tag="in_atom_terms", input_type=String(optional=True), prefix="--atom_terms", doc=InputDocumentation(doc="optionally write per-atom interaction term")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="the number of CPUs to use (the default is to\ntry to detect the number of CPUs or, failing\nthat, use 1)")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="explicit random seed")), ToolInput(tag="in_exhaustive_ness", input_type=Int(optional=True), prefix="--exhaustiveness", doc=InputDocumentation(doc="(=8)     exhaustiveness of the global search (roughly\nproportional to time)")), ToolInput(tag="in_num_modes", input_type=Int(optional=True), prefix="--num_modes", doc=InputDocumentation(doc="(=9)          maximum number of binding modes to generate")), ToolInput(tag="in_energy_range", input_type=Int(optional=True), prefix="--energy_range", doc=InputDocumentation(doc="(=3)       maximum energy difference between the best\nbinding mode and the worst one displayed\n(kcal/mol)")), ToolInput(tag="in_min_rmsd_filter", input_type=Int(optional=True), prefix="--min_rmsd_filter", doc=InputDocumentation(doc="(=1)    rmsd value used to filter final poses to remove")), ToolInput(tag="in_add_h", input_type=String(optional=True), prefix="--addH", doc=InputDocumentation(doc="automatically add hydrogens in ligands (on by\ndefault)")), ToolInput(tag="in_config", input_type=String(optional=True), prefix="--config", doc=InputDocumentation(doc="the above options can be put here")), ToolInput(tag="in_help_hidden", input_type=Boolean(optional=True), prefix="--help_hidden", doc=InputDocumentation(doc="display usage summary with hidden options")), ToolInput(tag="in_residues", input_type=String(), position=0, doc=InputDocumentation(doc="Scoring and minimization options:")), ToolInput(tag="in_clashes", input_type=String(), position=1, doc=InputDocumentation(doc="--minimize_iters arg (=0)     number iterations of steepest descent; default ")), ToolInput(tag="in_calculations", input_type=String(), position=0, doc=InputDocumentation(doc="--user_grid_lambda arg (=-1)  Scales user_grid and functional scoring")), ToolInput(tag="in_parameterizations", input_type=String(), position=1, doc=InputDocumentation(doc="--print_atom_types            Print all available atom types")), ToolInput(tag="in_extension", input_type=String(), position=0, doc=InputDocumentation(doc="--out_flex arg                output file for flexible receptor residues")), ToolInput(tag="in_values", input_type=String(), position=1, doc=InputDocumentation(doc="--atom_term_data              embedded per-atom interaction terms in output ")), ToolInput(tag="in_redundancy", input_type=String(), position=0, doc=InputDocumentation(doc="-q [ --quiet ]                Suppress output messages"))], outputs=[ToolOutput(tag="out_arg_output_file_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file_name", type_hint=File()), doc=OutputDocumentation(doc="[ --out ] arg              output file name, format taken from file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Smina_V0_1_0().translate("wdl", allow_empty_container=True)

