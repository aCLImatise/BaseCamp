from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean, Directory

Cargo_Install_V0_1_0 = CommandToolBuilder(tool="cargo_install", base_command=["cargo", "install"], inputs=[ToolInput(tag="in_vers", input_type=String(optional=True), prefix="--vers", doc=InputDocumentation(doc="Specify a version to install from crates.io")), ToolInput(tag="in_git", input_type=String(optional=True), prefix="--git", doc=InputDocumentation(doc="Git URL to install the specified crate from")), ToolInput(tag="in_branch", input_type=String(optional=True), prefix="--branch", doc=InputDocumentation(doc="Branch to use when installing from git")), ToolInput(tag="in_tag", input_type=String(optional=True), prefix="--tag", doc=InputDocumentation(doc="Tag to use when installing from git")), ToolInput(tag="in_rev", input_type=String(optional=True), prefix="--rev", doc=InputDocumentation(doc="Specific commit to use when installing from git")), ToolInput(tag="in_path", input_type=File(optional=True), prefix="--path", doc=InputDocumentation(doc="Filesystem path to local crate to install")), ToolInput(tag="in_jobs", input_type=Int(optional=True), prefix="--jobs", doc=InputDocumentation(doc="Number of parallel jobs, defaults to # of CPUs")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Force overwriting existing crates or binaries")), ToolInput(tag="in_features", input_type=String(optional=True), prefix="--features", doc=InputDocumentation(doc="Space-separated list of features to activate")), ToolInput(tag="in_all_features", input_type=Boolean(optional=True), prefix="--all-features", doc=InputDocumentation(doc="Build all available features")), ToolInput(tag="in_no_default_features", input_type=Boolean(optional=True), prefix="--no-default-features", doc=InputDocumentation(doc="Do not build the `default` feature")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Build in debug mode instead of release mode")), ToolInput(tag="in_bin", input_type=String(optional=True), prefix="--bin", doc=InputDocumentation(doc="Only install the binary NAME")), ToolInput(tag="in_example", input_type=String(optional=True), prefix="--example", doc=InputDocumentation(doc="Install the example EXAMPLE instead of binaries")), ToolInput(tag="in_root", input_type=Directory(optional=True), prefix="--root", doc=InputDocumentation(doc="Directory to install packages into")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="...         Use verbose output")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Less output printed to stdout")), ToolInput(tag="in_color", input_type=String(optional=True), prefix="--color", doc=InputDocumentation(doc="Coloring: auto, always, never")), ToolInput(tag="in_frozen", input_type=Boolean(optional=True), prefix="--frozen", doc=InputDocumentation(doc="Require Cargo.lock and cache are up to date")), ToolInput(tag="in_locked", input_type=Boolean(optional=True), prefix="--locked", doc=InputDocumentation(doc="Require Cargo.lock is up to date"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cargo_Install_V0_1_0().translate("wdl", allow_empty_container=True)

