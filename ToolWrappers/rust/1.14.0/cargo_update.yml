&id003 !Command
command:
- cargo
- update
positional:
- !Positional
  description: ''
  position: 0
  name: cargo
  optional: false
named:
- !Flag
  description: to update
  synonyms:
  - -p
  - --package
  args: !SimpleFlagArg
    name: SPEC
  optional: true
- !Flag
  description: Force updating all dependencies of <name> as well
  synonyms:
  - --aggressive
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Update a single dependency to exactly PRECISE
  synonyms:
  - --precise
  args: !SimpleFlagArg
    name: PRECISE
  optional: true
- !Flag
  description: Path to the crate's manifest
  synonyms:
  - --manifest-path
  args: !SimpleFlagArg
    name: PATH
  optional: true
- !Flag
  description: '...            Use verbose output'
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: No output printed to stdout
  synonyms:
  - -q
  - --quiet
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'Coloring: auto, always, never'
  synonyms:
  - --color
  args: !SimpleFlagArg
    name: WHEN
  optional: true
- !Flag
  description: Require Cargo.lock and cache are up to date
  synonyms:
  - --frozen
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Require Cargo.lock is up to date
  synonyms:
  - --locked
  args: !EmptyFlagArg {}
  optional: true
parent: &id001 !Command
  command:
  - cargo
  positional: []
  named:
  - !Flag
    description: List installed commands
    synonyms:
    - --list
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Run `rustc --explain CODE`
    synonyms:
    - --explain
    args: !SimpleFlagArg
      name: CODE
    optional: true
  - !Flag
    description: '...   Use verbose output'
    synonyms:
    - -v
    - --verbose
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: No output printed to stdout
    synonyms:
    - -q
    - --quiet
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: 'Coloring: auto, always, never'
    synonyms:
    - --color
    args: !SimpleFlagArg
      name: WHEN
    optional: true
  - !Flag
    description: Require Cargo.lock and cache are up to date
    synonyms:
    - --frozen
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Require Cargo.lock is up to date
    synonyms:
    - --locked
    args: !EmptyFlagArg {}
    optional: true
  parent:
  subcommands:
  - !Command
    command:
    - cargo
    - clean
    positional:
    - !Positional
      description: ''
      position: 0
      name: cargo
      optional: false
    named:
    - !Flag
      description: to clean artifacts for
      synonyms:
      - -p
      - --package
      args: !SimpleFlagArg
        name: SPEC
      optional: true
    - !Flag
      description: Path to the manifest to the package to clean
      synonyms:
      - --manifest-path
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: Target triple to clean output for (default all)
      synonyms:
      - --target
      args: !SimpleFlagArg
        name: TRIPLE
      optional: true
    - !Flag
      description: Whether or not to clean release artifacts
      synonyms:
      - --release
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '...            Use verbose output'
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: No output printed to stdout
      synonyms:
      - -q
      - --quiet
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Coloring: auto, always, never'
      synonyms:
      - --color
      args: !SimpleFlagArg
        name: WHEN
      optional: true
    - !Flag
      description: Require Cargo.lock and cache are up to date
      synonyms:
      - --frozen
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock is up to date
      synonyms:
      - --locked
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Print this message
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Remove artifacts that cargo has generated in the past\n\nUsage:\n\
      \    cargo clean [options]\n\nOptions:\n    -h, --help                   Print\
      \ this message\n    -p SPEC, --package SPEC ...  Package to clean artifacts\
      \ for\n    --manifest-path PATH         Path to the manifest to the package\
      \ to clean\n    --target TRIPLE              Target triple to clean output for\
      \ (default all)\n    --release                    Whether or not to clean release\
      \ artifacts\n    -v, --verbose ...            Use verbose output\n    -q, --quiet\
      \                  No output printed to stdout\n    --color WHEN           \
      \      Coloring: auto, always, never\n    --frozen                     Require\
      \ Cargo.lock and cache are up to date\n    --locked                     Require\
      \ Cargo.lock is up to date\n\nIf the --package argument is given, then SPEC\
      \ is a package id specification\nwhich indicates which package's artifacts should\
      \ be cleaned out. If it is not\ngiven, then all packages' artifacts are removed.\
      \ For more information on SPEC\nand its format, see the `cargo help pkgid` command.\n"
    generated_using: &id002
    - --help
  - !Command
    command:
    - cargo
    - test
    positional: []
    named:
    - !Flag
      description: Test only this package's library
      synonyms:
      - --lib
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Test only this library's documentation
      synonyms:
      - --doc
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Test only the specified binary
      synonyms:
      - --bin
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Test only the specified example
      synonyms:
      - --example
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Test only the specified integration test target
      synonyms:
      - --test
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Test only the specified benchmark target
      synonyms:
      - --bench
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Compile, but don't run tests
      synonyms:
      - --no-run
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: to run tests for
      synonyms:
      - -p
      - --package
      args: !SimpleFlagArg
        name: SPEC
      optional: true
    - !Flag
      description: 'Number of parallel jobs, defaults to # of CPUs'
      synonyms:
      - -j
      - --jobs
      args: !SimpleFlagArg
        name: N
      optional: true
    - !Flag
      description: Build artifacts in release mode, with optimizations
      synonyms:
      - --release
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Space-separated list of features to also build
      synonyms:
      - --features
      args: !SimpleFlagArg
        name: FEATURES
      optional: true
    - !Flag
      description: Build all available features
      synonyms:
      - --all-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not build the `default` feature
      synonyms:
      - --no-default-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Build for the target triple
      synonyms:
      - --target
      args: !SimpleFlagArg
        name: TRIPLE
      optional: true
    - !Flag
      description: Path to the manifest to build tests for
      synonyms:
      - --manifest-path
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: '...            Use verbose output'
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: No output printed to stdout
      synonyms:
      - -q
      - --quiet
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Coloring: auto, always, never'
      synonyms:
      - --color
      args: !SimpleFlagArg
        name: WHEN
      optional: true
    - !Flag
      description: 'Error format: human, json [default: human]'
      synonyms:
      - --message-format
      args: !SimpleFlagArg
        name: FMT
      optional: true
    - !Flag
      description: Run all tests regardless of failure
      synonyms:
      - --no-fail-fast
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock and cache are up to date
      synonyms:
      - --frozen
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock is up to date
      synonyms:
      - --locked
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Print this message
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Execute all unit and integration tests of a local package\n\nUsage:\n\
      \    cargo test [options] [--] [<args>...]\n\nOptions:\n    -h, --help     \
      \              Print this message\n    --lib                        Test only\
      \ this package's library\n    --doc                        Test only this library's\
      \ documentation\n    --bin NAME                   Test only the specified binary\n\
      \    --example NAME               Test only the specified example\n    --test\
      \ NAME                  Test only the specified integration test target\n  \
      \  --bench NAME                 Test only the specified benchmark target\n \
      \   --no-run                     Compile, but don't run tests\n    -p SPEC,\
      \ --package SPEC ...  Package to run tests for\n    -j N, --jobs N         \
      \      Number of parallel jobs, defaults to # of CPUs\n    --release       \
      \             Build artifacts in release mode, with optimizations\n    --features\
      \ FEATURES          Space-separated list of features to also build\n    --all-features\
      \               Build all available features\n    --no-default-features    \
      \    Do not build the `default` feature\n    --target TRIPLE              Build\
      \ for the target triple\n    --manifest-path PATH         Path to the manifest\
      \ to build tests for\n    -v, --verbose ...            Use verbose output\n\
      \    -q, --quiet                  No output printed to stdout\n    --color WHEN\
      \                 Coloring: auto, always, never\n    --message-format FMT  \
      \       Error format: human, json [default: human]\n    --no-fail-fast     \
      \          Run all tests regardless of failure\n    --frozen               \
      \      Require Cargo.lock and cache are up to date\n    --locked           \
      \          Require Cargo.lock is up to date\n\nAll of the trailing arguments\
      \ are passed to the test binaries generated for\nfiltering tests and generally\
      \ providing options configuring how they run. For\nexample, this will run all\
      \ tests with the name `foo` in their name:\n\n    cargo test foo\n\nIf the --package\
      \ argument is given, then SPEC is a package id specification\nwhich indicates\
      \ which package should be tested. If it is not given, then the\ncurrent package\
      \ is tested. For more information on SPEC and its format, see the\n`cargo help\
      \ pkgid` command.\n\nThe --jobs argument affects the building of the test executable\
      \ but does\nnot affect how many jobs are used when running the tests.\n\nCompilation\
      \ can be configured via the `test` profile in the manifest.\n\nBy default the\
      \ rust test harness hides output from test execution to\nkeep results readable.\
      \ Test output can be recovered (e.g. for debugging)\nby passing `--nocapture`\
      \ to the test binaries:\n\n  cargo test -- --nocapture\n\nTo get the list of\
      \ all options available for the test binaries use this:\n\n  cargo test -- --help\n"
    generated_using: *id002
  - !Command
    command:
    - cargo
    - init
    positional: []
    named:
    - !Flag
      description: "Initialize a new repository for the given version\ncontrol system\
        \ (git or hg) or do not initialize any version\ncontrol at all (none) overriding\
        \ a global configuration."
      synonyms:
      - --vcs
      args: !SimpleFlagArg
        name: VCS
      optional: true
    - !Flag
      description: Use a binary (application) template
      synonyms:
      - --bin
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Use a library template
      synonyms:
      - --lib
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Set the resulting package name
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: '...   Use verbose output'
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: No output printed to stdout
      synonyms:
      - -q
      - --quiet
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Coloring: auto, always, never'
      synonyms:
      - --color
      args: !SimpleFlagArg
        name: WHEN
      optional: true
    - !Flag
      description: Require Cargo.lock and cache are up to date
      synonyms:
      - --frozen
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock is up to date
      synonyms:
      - --locked
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Print this message
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Create a new cargo package in current directory\n\nUsage:\n    cargo\
      \ init [options] [<path>]\n    cargo init -h | --help\n\nOptions:\n    -h, --help\
      \          Print this message\n    --vcs VCS           Initialize a new repository\
      \ for the given version\n                        control system (git or hg)\
      \ or do not initialize any version\n                        control at all (none)\
      \ overriding a global configuration.\n    --bin               Use a binary (application)\
      \ template\n    --lib               Use a library template\n    --name NAME\
      \         Set the resulting package name\n    -v, --verbose ...   Use verbose\
      \ output\n    -q, --quiet         No output printed to stdout\n    --color WHEN\
      \        Coloring: auto, always, never\n    --frozen            Require Cargo.lock\
      \ and cache are up to date\n    --locked            Require Cargo.lock is up\
      \ to date\n"
    generated_using: *id002
  - !Command
    command:
    - cargo
    - new
    positional: []
    named:
    - !Flag
      description: "Initialize a new repository for the given version\ncontrol system\
        \ (git or hg) or do not initialize any version\ncontrol at all (none) overriding\
        \ a global configuration."
      synonyms:
      - --vcs
      args: !SimpleFlagArg
        name: VCS
      optional: true
    - !Flag
      description: Use a binary (application) template
      synonyms:
      - --bin
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Use a library template
      synonyms:
      - --lib
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Set the resulting package name
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: '...   Use verbose output'
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: No output printed to stdout
      synonyms:
      - -q
      - --quiet
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Coloring: auto, always, never'
      synonyms:
      - --color
      args: !SimpleFlagArg
        name: WHEN
      optional: true
    - !Flag
      description: Require Cargo.lock and cache are up to date
      synonyms:
      - --frozen
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock is up to date
      synonyms:
      - --locked
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Print this message
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Create a new cargo package at <path>\n\nUsage:\n    cargo new [options]\
      \ <path>\n    cargo new -h | --help\n\nOptions:\n    -h, --help          Print\
      \ this message\n    --vcs VCS           Initialize a new repository for the\
      \ given version\n                        control system (git or hg) or do not\
      \ initialize any version\n                        control at all (none) overriding\
      \ a global configuration.\n    --bin               Use a binary (application)\
      \ template\n    --lib               Use a library template\n    --name NAME\
      \         Set the resulting package name\n    -v, --verbose ...   Use verbose\
      \ output\n    -q, --quiet         No output printed to stdout\n    --color WHEN\
      \        Coloring: auto, always, never\n    --frozen            Require Cargo.lock\
      \ and cache are up to date\n    --locked            Require Cargo.lock is up\
      \ to date\n"
    generated_using: *id002
  - !Command
    command:
    - cargo
    - bench
    positional: []
    named:
    - !Flag
      description: Benchmark only this package's library
      synonyms:
      - --lib
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Benchmark only the specified binary
      synonyms:
      - --bin
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Benchmark only the specified example
      synonyms:
      - --example
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Benchmark only the specified test target
      synonyms:
      - --test
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Benchmark only the specified bench target
      synonyms:
      - --bench
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Compile, but don't run benchmarks
      synonyms:
      - --no-run
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: to run benchmarks for
      synonyms:
      - -p
      - --package
      args: !SimpleFlagArg
        name: SPEC
      optional: true
    - !Flag
      description: 'Number of parallel jobs, defaults to # of CPUs'
      synonyms:
      - -j
      - --jobs
      args: !SimpleFlagArg
        name: N
      optional: true
    - !Flag
      description: Space-separated list of features to also build
      synonyms:
      - --features
      args: !SimpleFlagArg
        name: FEATURES
      optional: true
    - !Flag
      description: Build all available features
      synonyms:
      - --all-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not build the `default` feature
      synonyms:
      - --no-default-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Build for the target triple
      synonyms:
      - --target
      args: !SimpleFlagArg
        name: TRIPLE
      optional: true
    - !Flag
      description: Path to the manifest to build benchmarks for
      synonyms:
      - --manifest-path
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: '...            Use verbose output'
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: No output printed to stdout
      synonyms:
      - -q
      - --quiet
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Coloring: auto, always, never'
      synonyms:
      - --color
      args: !SimpleFlagArg
        name: WHEN
      optional: true
    - !Flag
      description: 'Error format: human, json [default: human]'
      synonyms:
      - --message-format
      args: !SimpleFlagArg
        name: FMT
      optional: true
    - !Flag
      description: Require Cargo.lock and cache are up to date
      synonyms:
      - --frozen
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock is up to date
      synonyms:
      - --locked
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Print this message
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Execute all benchmarks of a local package\n\nUsage:\n    cargo bench\
      \ [options] [--] [<args>...]\n\nOptions:\n    -h, --help                   Print\
      \ this message\n    --lib                        Benchmark only this package's\
      \ library\n    --bin NAME                   Benchmark only the specified binary\n\
      \    --example NAME               Benchmark only the specified example\n   \
      \ --test NAME                  Benchmark only the specified test target\n  \
      \  --bench NAME                 Benchmark only the specified bench target\n\
      \    --no-run                     Compile, but don't run benchmarks\n    -p\
      \ SPEC, --package SPEC ...  Package to run benchmarks for\n    -j N, --jobs\
      \ N               Number of parallel jobs, defaults to # of CPUs\n    --features\
      \ FEATURES          Space-separated list of features to also build\n    --all-features\
      \               Build all available features\n    --no-default-features    \
      \    Do not build the `default` feature\n    --target TRIPLE              Build\
      \ for the target triple\n    --manifest-path PATH         Path to the manifest\
      \ to build benchmarks for\n    -v, --verbose ...            Use verbose output\n\
      \    -q, --quiet                  No output printed to stdout\n    --color WHEN\
      \                 Coloring: auto, always, never\n    --message-format FMT  \
      \       Error format: human, json [default: human]\n    --frozen           \
      \          Require Cargo.lock and cache are up to date\n    --locked       \
      \              Require Cargo.lock is up to date\n\nAll of the trailing arguments\
      \ are passed to the benchmark binaries generated\nfor filtering benchmarks and\
      \ generally providing options configuring how they\nrun.\n\nIf the --package\
      \ argument is given, then SPEC is a package id specification\nwhich indicates\
      \ which package should be benchmarked. If it is not given, then\nthe current\
      \ package is benchmarked. For more information on SPEC and its format,\nsee\
      \ the `cargo help pkgid` command.\n\nThe --jobs argument affects the building\
      \ of the benchmark executable but does\nnot affect how many jobs are used when\
      \ running the benchmarks.\n\nCompilation can be customized with the `bench`\
      \ profile in the manifest.\n"
    generated_using: *id002
  - !Command
    command:
    - cargo
    - run
    positional: []
    named:
    - !Flag
      description: Name of the bin target to run
      synonyms:
      - --bin
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Name of the example target to run
      synonyms:
      - --example
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: 'Number of parallel jobs, defaults to # of CPUs'
      synonyms:
      - -j
      - --jobs
      args: !SimpleFlagArg
        name: N
      optional: true
    - !Flag
      description: Build artifacts in release mode, with optimizations
      synonyms:
      - --release
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Space-separated list of features to also build
      synonyms:
      - --features
      args: !SimpleFlagArg
        name: FEATURES
      optional: true
    - !Flag
      description: Build all available features
      synonyms:
      - --all-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not build the `default` feature
      synonyms:
      - --no-default-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Build for the target triple
      synonyms:
      - --target
      args: !SimpleFlagArg
        name: TRIPLE
      optional: true
    - !Flag
      description: Path to the manifest to execute
      synonyms:
      - --manifest-path
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: '...       Use verbose output'
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: No output printed to stdout
      synonyms:
      - -q
      - --quiet
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Coloring: auto, always, never'
      synonyms:
      - --color
      args: !SimpleFlagArg
        name: WHEN
      optional: true
    - !Flag
      description: 'Error format: human, json [default: human]'
      synonyms:
      - --message-format
      args: !SimpleFlagArg
        name: FMT
      optional: true
    - !Flag
      description: Require Cargo.lock and cache are up to date
      synonyms:
      - --frozen
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock is up to date
      synonyms:
      - --locked
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Print this message
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Run the main binary of the local package (src/main.rs)\n\nUsage:\n\
      \    cargo run [options] [--] [<args>...]\n\nOptions:\n    -h, --help      \
      \        Print this message\n    --bin NAME              Name of the bin target\
      \ to run\n    --example NAME          Name of the example target to run\n  \
      \  -j N, --jobs N          Number of parallel jobs, defaults to # of CPUs\n\
      \    --release               Build artifacts in release mode, with optimizations\n\
      \    --features FEATURES     Space-separated list of features to also build\n\
      \    --all-features          Build all available features\n    --no-default-features\
      \   Do not build the `default` feature\n    --target TRIPLE         Build for\
      \ the target triple\n    --manifest-path PATH    Path to the manifest to execute\n\
      \    -v, --verbose ...       Use verbose output\n    -q, --quiet           \
      \  No output printed to stdout\n    --color WHEN            Coloring: auto,\
      \ always, never\n    --message-format FMT    Error format: human, json [default:\
      \ human]\n    --frozen                Require Cargo.lock and cache are up to\
      \ date\n    --locked                Require Cargo.lock is up to date\n\nIf neither\
      \ `--bin` nor `--example` are given, then if the project only has one\nbin target\
      \ it will be run. Otherwise `--bin` specifies the bin target to run,\nand `--example`\
      \ specifies the example target to run. At most one of `--bin` or\n`--example`\
      \ can be provided.\n\nAll of the trailing arguments are passed to the binary\
      \ to run. If you're passing\narguments to both Cargo and the binary, the ones\
      \ after `--` go to the binary,\nthe ones before go to Cargo.\n"
    generated_using: *id002
  - !Command
    command:
    - cargo
    - publish
    positional:
    - !Positional
      description: ''
      position: 0
      name: cargo
      optional: false
    named:
    - !Flag
      description: Host to upload the package to
      synonyms:
      - --host
      args: !SimpleFlagArg
        name: HOST
      optional: true
    - !Flag
      description: Token to use when uploading
      synonyms:
      - --token
      args: !SimpleFlagArg
        name: TOKEN
      optional: true
    - !Flag
      description: Don't verify package tarball before publish
      synonyms:
      - --no-verify
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Allow publishing with a dirty source directory
      synonyms:
      - --allow-dirty
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Path to the manifest of the package to publish
      synonyms:
      - --manifest-path
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: 'Number of parallel jobs, defaults to # of CPUs'
      synonyms:
      - -j
      - --jobs
      args: !SimpleFlagArg
        name: N
      optional: true
    - !Flag
      description: Perform all checks without uploading
      synonyms:
      - --dry-run
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '...        Use verbose output'
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: No output printed to stdout
      synonyms:
      - -q
      - --quiet
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Coloring: auto, always, never'
      synonyms:
      - --color
      args: !SimpleFlagArg
        name: WHEN
      optional: true
    - !Flag
      description: Require Cargo.lock and cache are up to date
      synonyms:
      - --frozen
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock is up to date
      synonyms:
      - --locked
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Print this message
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Upload a package to the registry\n\nUsage:\n    cargo publish [options]\n\
      \nOptions:\n    -h, --help               Print this message\n    --host HOST\
      \              Host to upload the package to\n    --token TOKEN            Token\
      \ to use when uploading\n    --no-verify              Don't verify package tarball\
      \ before publish\n    --allow-dirty            Allow publishing with a dirty\
      \ source directory\n    --manifest-path PATH     Path to the manifest of the\
      \ package to publish\n    -j N, --jobs N           Number of parallel jobs,\
      \ defaults to # of CPUs\n    --dry-run                Perform all checks without\
      \ uploading\n    -v, --verbose ...        Use verbose output\n    -q, --quiet\
      \              No output printed to stdout\n    --color WHEN             Coloring:\
      \ auto, always, never\n    --frozen                 Require Cargo.lock and cache\
      \ are up to date\n    --locked                 Require Cargo.lock is up to date\n"
    generated_using: *id002
  - !Command
    command:
    - cargo
    - build
    positional:
    - !Positional
      description: ''
      position: 0
      name: cargo
      optional: false
    named:
    - !Flag
      description: to build
      synonyms:
      - -p
      - --package
      args: !SimpleFlagArg
        name: SPEC
      optional: true
    - !Flag
      description: 'Number of parallel jobs, defaults to # of CPUs'
      synonyms:
      - -j
      - --jobs
      args: !SimpleFlagArg
        name: N
      optional: true
    - !Flag
      description: Build only this package's library
      synonyms:
      - --lib
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Build only the specified binary
      synonyms:
      - --bin
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Build only the specified example
      synonyms:
      - --example
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Build only the specified test target
      synonyms:
      - --test
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Build only the specified benchmark target
      synonyms:
      - --bench
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Build artifacts in release mode, with optimizations
      synonyms:
      - --release
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Space-separated list of features to also build
      synonyms:
      - --features
      args: !SimpleFlagArg
        name: FEATURES
      optional: true
    - !Flag
      description: Build all available features
      synonyms:
      - --all-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not build the `default` feature
      synonyms:
      - --no-default-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Build for the target triple
      synonyms:
      - --target
      args: !SimpleFlagArg
        name: TRIPLE
      optional: true
    - !Flag
      description: Path to the manifest to compile
      synonyms:
      - --manifest-path
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: '...            Use verbose output'
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: No output printed to stdout
      synonyms:
      - -q
      - --quiet
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Coloring: auto, always, never'
      synonyms:
      - --color
      args: !SimpleFlagArg
        name: WHEN
      optional: true
    - !Flag
      description: 'Error format: human, json [default: human]'
      synonyms:
      - --message-format
      args: !SimpleFlagArg
        name: FMT
      optional: true
    - !Flag
      description: Require Cargo.lock and cache are up to date
      synonyms:
      - --frozen
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock is up to date
      synonyms:
      - --locked
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Print this message
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Compile a local package and all of its dependencies\n\nUsage:\n  \
      \  cargo build [options]\n\nOptions:\n    -h, --help                   Print\
      \ this message\n    -p SPEC, --package SPEC ...  Package to build\n    -j N,\
      \ --jobs N               Number of parallel jobs, defaults to # of CPUs\n  \
      \  --lib                        Build only this package's library\n    --bin\
      \ NAME                   Build only the specified binary\n    --example NAME\
      \               Build only the specified example\n    --test NAME          \
      \        Build only the specified test target\n    --bench NAME            \
      \     Build only the specified benchmark target\n    --release             \
      \       Build artifacts in release mode, with optimizations\n    --features\
      \ FEATURES          Space-separated list of features to also build\n    --all-features\
      \               Build all available features\n    --no-default-features    \
      \    Do not build the `default` feature\n    --target TRIPLE              Build\
      \ for the target triple\n    --manifest-path PATH         Path to the manifest\
      \ to compile\n    -v, --verbose ...            Use verbose output\n    -q, --quiet\
      \                  No output printed to stdout\n    --color WHEN           \
      \      Coloring: auto, always, never\n    --message-format FMT         Error\
      \ format: human, json [default: human]\n    --frozen                     Require\
      \ Cargo.lock and cache are up to date\n    --locked                     Require\
      \ Cargo.lock is up to date\n\nIf the --package argument is given, then SPEC\
      \ is a package id specification\nwhich indicates which package should be built.\
      \ If it is not given, then the\ncurrent package is built. For more information\
      \ on SPEC and its format, see the\n`cargo help pkgid` command.\n\nCompilation\
      \ can be configured via the use of profiles which are configured in\nthe manifest.\
      \ The default profile for this command is `dev`, but passing\nthe --release\
      \ flag will use the `release` profile instead.\n"
    generated_using: *id002
  - !Command
    command:
    - cargo
    - install
    positional: []
    named:
    - !Flag
      description: Specify a version to install from crates.io
      synonyms:
      - --vers
      args: !SimpleFlagArg
        name: VERS
      optional: true
    - !Flag
      description: Git URL to install the specified crate from
      synonyms:
      - --git
      args: !SimpleFlagArg
        name: URL
      optional: true
    - !Flag
      description: Branch to use when installing from git
      synonyms:
      - --branch
      args: !SimpleFlagArg
        name: BRANCH
      optional: true
    - !Flag
      description: Tag to use when installing from git
      synonyms:
      - --tag
      args: !SimpleFlagArg
        name: TAG
      optional: true
    - !Flag
      description: Specific commit to use when installing from git
      synonyms:
      - --rev
      args: !SimpleFlagArg
        name: SHA
      optional: true
    - !Flag
      description: Filesystem path to local crate to install
      synonyms:
      - --path
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: 'Number of parallel jobs, defaults to # of CPUs'
      synonyms:
      - -j
      - --jobs
      args: !SimpleFlagArg
        name: N
      optional: true
    - !Flag
      description: Force overwriting existing crates or binaries
      synonyms:
      - -f
      - --force
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Space-separated list of features to activate
      synonyms:
      - --features
      args: !SimpleFlagArg
        name: FEATURES
      optional: true
    - !Flag
      description: Build all available features
      synonyms:
      - --all-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not build the `default` feature
      synonyms:
      - --no-default-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Build in debug mode instead of release mode
      synonyms:
      - --debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Only install the binary NAME
      synonyms:
      - --bin
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Install the example EXAMPLE instead of binaries
      synonyms:
      - --example
      args: !SimpleFlagArg
        name: EXAMPLE
      optional: true
    - !Flag
      description: Directory to install packages into
      synonyms:
      - --root
      args: !SimpleFlagArg
        name: DIR
      optional: true
    - !Flag
      description: '...         Use verbose output'
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Less output printed to stdout
      synonyms:
      - -q
      - --quiet
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Coloring: auto, always, never'
      synonyms:
      - --color
      args: !SimpleFlagArg
        name: WHEN
      optional: true
    - !Flag
      description: Require Cargo.lock and cache are up to date
      synonyms:
      - --frozen
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock is up to date
      synonyms:
      - --locked
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Print this message
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Install a Rust binary\n\nUsage:\n    cargo install [options] [<crate>]\n\
      \    cargo install [options] --list\n\nSpecifying what crate to install:\n \
      \   --vers VERS               Specify a version to install from crates.io\n\
      \    --git URL                 Git URL to install the specified crate from\n\
      \    --branch BRANCH           Branch to use when installing from git\n    --tag\
      \ TAG                 Tag to use when installing from git\n    --rev SHA   \
      \              Specific commit to use when installing from git\n    --path PATH\
      \               Filesystem path to local crate to install\n\nBuild and install\
      \ options:\n    -h, --help                Print this message\n    -j N, --jobs\
      \ N            Number of parallel jobs, defaults to # of CPUs\n    -f, --force\
      \               Force overwriting existing crates or binaries\n    --features\
      \ FEATURES       Space-separated list of features to activate\n    --all-features\
      \            Build all available features\n    --no-default-features     Do\
      \ not build the `default` feature\n    --debug                   Build in debug\
      \ mode instead of release mode\n    --bin NAME                Only install the\
      \ binary NAME\n    --example EXAMPLE         Install the example EXAMPLE instead\
      \ of binaries\n    --root DIR                Directory to install packages into\n\
      \    -v, --verbose ...         Use verbose output\n    -q, --quiet         \
      \      Less output printed to stdout\n    --color WHEN              Coloring:\
      \ auto, always, never\n    --frozen                  Require Cargo.lock and\
      \ cache are up to date\n    --locked                  Require Cargo.lock is\
      \ up to date\n\nThis command manages Cargo's local set of installed binary crates.\
      \ Only packages\nwhich have [[bin]] targets can be installed, and all binaries\
      \ are installed into\nthe installation root's `bin` folder. The installation\
      \ root is determined, in\norder of precedence, by `--root`, `$CARGO_INSTALL_ROOT`,\
      \ the `install.root`\nconfiguration key, and finally the home directory (which\
      \ is either\n`$CARGO_HOME` if set or `$HOME/.cargo` by default).\n\nThere are\
      \ multiple sources from which a crate can be installed. The default\nlocation\
      \ is crates.io but the `--git` and `--path` flags can change this source.\n\
      If the source contains more than one package (such as crates.io or a git\nrepository\
      \ with multiple crates) the `<crate>` argument is required to indicate\nwhich\
      \ crate should be installed.\n\nCrates from crates.io can optionally specify\
      \ the version they wish to install\nvia the `--vers` flags, and similarly packages\
      \ from git repositories can\noptionally specify the branch, tag, or revision\
      \ that should be installed. If a\ncrate has multiple binaries, the `--bin` argument\
      \ can selectively install only\none of them, and if you'd rather install examples\
      \ the `--example` argument can\nbe used as well.\n\nBy default cargo will refuse\
      \ to overwrite existing binaries. The `--force` flag\nenables overwriting existing\
      \ binaries. Thus you can reinstall a crate with\n`cargo install --force <crate>`.\n\
      \nAs a special convenience, omitting the <crate> specification entirely will\n\
      install the crate in the current directory. That is, `install` is equivalent\
      \ to\nthe more explicit `install --path .`.\n\nThe `--list` option will list\
      \ all installed packages (and their versions).\n"
    generated_using: *id002
  - *id003
  - !Command
    command:
    - cargo
    - doc
    positional:
    - !Positional
      description: ''
      position: 0
      name: cargo
      optional: false
    named:
    - !Flag
      description: Opens the docs in a browser after the operation
      synonyms:
      - --open
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: to document
      synonyms:
      - -p
      - --package
      args: !SimpleFlagArg
        name: SPEC
      optional: true
    - !Flag
      description: Don't build documentation for dependencies
      synonyms:
      - --no-deps
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Number of parallel jobs, defaults to # of CPUs'
      synonyms:
      - -j
      - --jobs
      args: !SimpleFlagArg
        name: N
      optional: true
    - !Flag
      description: Document only this package's library
      synonyms:
      - --lib
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Document only the specified binary
      synonyms:
      - --bin
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Build artifacts in release mode, with optimizations
      synonyms:
      - --release
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Space-separated list of features to also build
      synonyms:
      - --features
      args: !SimpleFlagArg
        name: FEATURES
      optional: true
    - !Flag
      description: Build all available features
      synonyms:
      - --all-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not build the `default` feature
      synonyms:
      - --no-default-features
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Build for the target triple
      synonyms:
      - --target
      args: !SimpleFlagArg
        name: TRIPLE
      optional: true
    - !Flag
      description: Path to the manifest to document
      synonyms:
      - --manifest-path
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: '...            Use verbose output'
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: No output printed to stdout
      synonyms:
      - -q
      - --quiet
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Coloring: auto, always, never'
      synonyms:
      - --color
      args: !SimpleFlagArg
        name: WHEN
      optional: true
    - !Flag
      description: 'Error format: human, json [default: human]'
      synonyms:
      - --message-format
      args: !SimpleFlagArg
        name: FMT
      optional: true
    - !Flag
      description: Require Cargo.lock and cache are up to date
      synonyms:
      - --frozen
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Require Cargo.lock is up to date
      synonyms:
      - --locked
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Print this message
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Build a package's documentation\n\nUsage:\n    cargo doc [options]\n\
      \nOptions:\n    -h, --help                   Print this message\n    --open\
      \                       Opens the docs in a browser after the operation\n  \
      \  -p SPEC, --package SPEC ...  Package to document\n    --no-deps         \
      \           Don't build documentation for dependencies\n    -j N, --jobs N \
      \              Number of parallel jobs, defaults to # of CPUs\n    --lib   \
      \                     Document only this package's library\n    --bin NAME \
      \                  Document only the specified binary\n    --release       \
      \             Build artifacts in release mode, with optimizations\n    --features\
      \ FEATURES          Space-separated list of features to also build\n    --all-features\
      \               Build all available features\n    --no-default-features    \
      \    Do not build the `default` feature\n    --target TRIPLE              Build\
      \ for the target triple\n    --manifest-path PATH         Path to the manifest\
      \ to document\n    -v, --verbose ...            Use verbose output\n    -q,\
      \ --quiet                  No output printed to stdout\n    --color WHEN   \
      \              Coloring: auto, always, never\n    --message-format FMT     \
      \    Error format: human, json [default: human]\n    --frozen              \
      \       Require Cargo.lock and cache are up to date\n    --locked          \
      \           Require Cargo.lock is up to date\n\nBy default the documentation\
      \ for the local package and all dependencies is\nbuilt. The output is all placed\
      \ in `target/doc` in rustdoc's usual format.\n\nIf the --package argument is\
      \ given, then SPEC is a package id specification\nwhich indicates which package\
      \ should be documented. If it is not given, then the\ncurrent package is documented.\
      \ For more information on SPEC and its format, see\nthe `cargo help pkgid` command.\n"
    generated_using: *id002
  usage: []
  help_flag: !Flag
    description: Display this message
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag: !Flag
    description: Print version info and exit
    synonyms:
    - -V
    - --version
    args: !EmptyFlagArg {}
    optional: true
  help_text: "Rust's package manager\n\nUsage:\n    cargo <command> [<args>...]\n\
    \    cargo [options]\n\nOptions:\n    -h, --help          Display this message\n\
    \    -V, --version       Print version info and exit\n    --list             \
    \ List installed commands\n    --explain CODE      Run `rustc --explain CODE`\n\
    \    -v, --verbose ...   Use verbose output\n    -q, --quiet         No output\
    \ printed to stdout\n    --color WHEN        Coloring: auto, always, never\n \
    \   --frozen            Require Cargo.lock and cache are up to date\n    --locked\
    \            Require Cargo.lock is up to date\n\nSome common cargo commands are\
    \ (see all commands with --list):\n    build       Compile the current project\n\
    \    clean       Remove the target directory\n    doc         Build this project's\
    \ and its dependencies' documentation\n    new         Create a new cargo project\n\
    \    init        Create a new cargo project in an existing directory\n    run\
    \         Build and execute src/main.rs\n    test        Run the tests\n    bench\
    \       Run the benchmarks\n    update      Update dependencies listed in Cargo.lock\n\
    \    search      Search registry for crates\n    publish     Package and upload\
    \ this project to the registry\n    install     Install a Rust binary\n\nSee 'cargo\
    \ help <command>' for more information on a specific command.\n"
  generated_using: *id002
subcommands: []
usage: []
help_flag: !Flag
  description: Print this message
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "Update dependencies as recorded in the local lock file.\n\nUsage:\n  \
  \  cargo update [options]\n\nOptions:\n    -h, --help                   Print this\
  \ message\n    -p SPEC, --package SPEC ...  Package to update\n    --aggressive\
  \                 Force updating all dependencies of <name> as well\n    --precise\
  \ PRECISE            Update a single dependency to exactly PRECISE\n    --manifest-path\
  \ PATH         Path to the crate's manifest\n    -v, --verbose ...            Use\
  \ verbose output\n    -q, --quiet                  No output printed to stdout\n\
  \    --color WHEN                 Coloring: auto, always, never\n    --frozen  \
  \                   Require Cargo.lock and cache are up to date\n    --locked  \
  \                   Require Cargo.lock is up to date\n\nThis command requires that\
  \ a `Cargo.lock` already exists as generated by\n`cargo build` or related commands.\n\
  \nIf SPEC is given, then a conservative update of the lockfile will be\nperformed.\
  \ This means that only the dependency specified by SPEC will be\nupdated. Its transitive\
  \ dependencies will be updated only if SPEC cannot be\nupdated without updating\
  \ dependencies.  All other dependencies will remain\nlocked at their currently recorded\
  \ versions.\n\nIf PRECISE is specified, then --aggressive must not also be specified.\
  \ The\nargument PRECISE is a string representing a precise revision that the package\n\
  being updated should be updated to. For example, if the package comes from a git\n\
  repository, then PRECISE would be the exact revision that the repository should\n\
  be updated to.\n\nIf SPEC is not given, then all dependencies will be re-resolved\
  \ and\nupdated.\n\nFor more information about package id specifications, see `cargo\
  \ help pkgid`.\n"
generated_using: *id002
