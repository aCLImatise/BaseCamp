from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Rustdoc_V0_1_0 = CommandToolBuilder(tool="rustdoc", base_command=["rustdoc"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="use verbose output")), ToolInput(tag="in_input_format", input_type=Boolean(optional=True), prefix="--input-format", doc=InputDocumentation(doc="[rust]\nthe input type of the specified file")), ToolInput(tag="in_output_format", input_type=Boolean(optional=True), prefix="--output-format", doc=InputDocumentation(doc="[html]\nthe output type to write")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="where to place the output")), ToolInput(tag="in_crate_name", input_type=String(optional=True), prefix="--crate-name", doc=InputDocumentation(doc="specify the name of this crate")), ToolInput(tag="in_library_path", input_type=File(optional=True), prefix="--library-path", doc=InputDocumentation(doc="directory to add to crate search path")), ToolInput(tag="in_cfg", input_type=Boolean(optional=True), prefix="--cfg", doc=InputDocumentation(doc="pass a --cfg to rustc")), ToolInput(tag="in_extern", input_type=File(optional=True), prefix="--extern", doc=InputDocumentation(doc="=PATH  pass an --extern to rustc")), ToolInput(tag="in_plugin_path", input_type=File(optional=True), prefix="--plugin-path", doc=InputDocumentation(doc="directory to load plugins from")), ToolInput(tag="in_passes", input_type=String(optional=True), prefix="--passes", doc=InputDocumentation(doc="list of passes to also run, you might want to pass it\nmultiple times; a value of `list` will print available\npasses")), ToolInput(tag="in_plugins", input_type=String(optional=True), prefix="--plugins", doc=InputDocumentation(doc="space separated list of plugins to also load")), ToolInput(tag="in_no_defaults", input_type=Boolean(optional=True), prefix="--no-defaults", doc=InputDocumentation(doc="don't run the default passes")), ToolInput(tag="in_test", input_type=Boolean(optional=True), prefix="--test", doc=InputDocumentation(doc="run code examples as tests")), ToolInput(tag="in_test_args", input_type=String(optional=True), prefix="--test-args", doc=InputDocumentation(doc="arguments to pass to the test runner")), ToolInput(tag="in_target", input_type=String(optional=True), prefix="--target", doc=InputDocumentation(doc="target triple to document")), ToolInput(tag="in_markdown_css", input_type=File(optional=True), prefix="--markdown-css", doc=InputDocumentation(doc="CSS files to include via <link> in a rendered Markdown\nfile")), ToolInput(tag="in_html_in_header", input_type=File(optional=True), prefix="--html-in-header", doc=InputDocumentation(doc="files to include inline in the <head> section of a\nrendered Markdown file or generated documentation")), ToolInput(tag="in_html_before_content", input_type=File(optional=True), prefix="--html-before-content", doc=InputDocumentation(doc="files to include inline between <body> and the content\nof a rendered Markdown file or generated documentation")), ToolInput(tag="in_html_after_content", input_type=File(optional=True), prefix="--html-after-content", doc=InputDocumentation(doc="files to include inline between the content and\n</body> of a rendered Markdown file or generated\ndocumentation")), ToolInput(tag="in_markdown_playground_url", input_type=String(optional=True), prefix="--markdown-playground-url", doc=InputDocumentation(doc="URL to send code snippets to")), ToolInput(tag="in_markdown_no_toc", input_type=Boolean(optional=True), prefix="--markdown-no-toc", doc=InputDocumentation(doc="don't include table of contents")), ToolInput(tag="in_extend_css", input_type=File(optional=True), prefix="--extend-css", doc=InputDocumentation(doc="to redefine some css rules with a given file to\ngenerate doc with your own theme")), ToolInput(tag="in_internal_debugging_options", input_type=String(optional=True), prefix="-Z", doc=InputDocumentation(doc="internal and debugging options (only on nightly build)")), ToolInput(tag="in_sys_root", input_type=File(optional=True), prefix="--sysroot", doc=InputDocumentation(doc="Override the system root"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rustdoc_V0_1_0().translate("wdl", allow_empty_container=True)

