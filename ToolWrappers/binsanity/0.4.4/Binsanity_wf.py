from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Int, Float, String

Binsanity_Wf_V0_1_0 = CommandToolBuilder(tool="Binsanity_wf", base_command=["Binsanity-wf"], inputs=[ToolInput(tag="in_specify_coverage_log", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc="Specify a Transformed Coverage File\ne.g Log transformed")), ToolInput(tag="in_specify_directory_containing", input_type=Directory(optional=True), prefix="-f", doc=InputDocumentation(doc="Specify directory containing your contigs")), ToolInput(tag="in_specify_preference_note", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="Specify a preference [Default: -3]\nNote: decreasing the preference leads to more lumping,\nincreasing will lead to more splitting. If your range\nof coverages are low you will want to decrease the\npreference, if you have 10 or less replicates increasing\nthe preference could benefit you.")), ToolInput(tag="in_specify_max_number", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Specify a max number of iterations [Default: 4000]")), ToolInput(tag="in_specify_iteration_number", input_type=Int(optional=True), prefix="-v", doc=InputDocumentation(doc="Specify the convergence iteration number [Default: 400]\ne.g Number of iterations with no change in the number\nof estimated clusters that stops the convergence.")), ToolInput(tag="in_specify_damping_factor", input_type=Float(optional=True), prefix="-d", doc=InputDocumentation(doc="Specify a damping factor between 0.5 and 1, [Default: 0.95]")), ToolInput(tag="in_specify_fasta_file", input_type=File(optional=True), prefix="-l", doc=InputDocumentation(doc="Specify the fasta file containing contigs you want to cluster")), ToolInput(tag="in_specify_contig_size", input_type=Int(optional=True), prefix="-x", doc=InputDocumentation(doc="Specify the contig size cut-off [Default: 1000 bp]")), ToolInput(tag="in_give_name_directory", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc="Give a name to the directory BinSanity results will be output in\n[Default: 'BINSANITY-RESULTS']")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Indicate how many threads you want dedicated to the subprocess CheckM. [Default=1]")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="Indicate a number for the kmer calculation, the [Default: 4]")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--Prefix", doc=InputDocumentation(doc="Specify a prefix to append to the start of all files generated during Binsanity")), ToolInput(tag="in_refine_preference", input_type=Int(optional=True), prefix="--refine-preference", doc=InputDocumentation(doc="Specify a preference for refinement. [Default: -25]")), ToolInput(tag="in_bin_prefix", input_type=String(optional=True), prefix="--binPrefix", doc=InputDocumentation(doc="Sepcify what prefix you want appended to final Bins {optional}"))], outputs=[ToolOutput(tag="out_give_name_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_give_name_directory", type_hint=File()), doc=OutputDocumentation(doc="Give a name to the directory BinSanity results will be output in\n[Default: 'BINSANITY-RESULTS']"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Binsanity_Wf_V0_1_0().translate("wdl", allow_empty_container=True)

