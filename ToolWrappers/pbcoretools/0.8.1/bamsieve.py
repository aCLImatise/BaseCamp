from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Bamsieve_V0_1_0 = CommandToolBuilder(tool="bamsieve", base_command=["bamsieve"], inputs=[ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Write the log to file. Default(None) will write to\nstdout. (default: None)")), ToolInput(tag="in_log_level", input_type=String(optional=True), prefix="--log-level", doc=InputDocumentation(doc="Set log level (default: WARN)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Alias for setting log level to DEBUG (default: False)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Alias for setting log level to CRITICAL to suppress\noutput. (default: False)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Set the verbosity level. (default: None)")), ToolInput(tag="in_show_z_mws", input_type=Boolean(optional=True), prefix="--show-zmws", doc=InputDocumentation(doc="Print a list of ZMWs and exit (default: False)")), ToolInput(tag="in_whitelist", input_type=Int(optional=True), prefix="--whitelist", doc=InputDocumentation(doc="Comma-separated list of ZMWs, or file containing\nwhitelist of one hole number per line, or BAM/DataSet\nfile from which to extract ZMWs (default: None)")), ToolInput(tag="in_blacklist", input_type=String(optional=True), prefix="--blacklist", doc=InputDocumentation(doc="Opposite of --whitelist, specifies ZMWs to discard\n(default: None)")), ToolInput(tag="in_sub_reads", input_type=Boolean(optional=True), prefix="--subreads", doc=InputDocumentation(doc="If set, the whitelist or blacklist will be assumed to\ncontain one subread name per line, or a BAM/DataSet\nfile from which to extract subreads (default: False)")), ToolInput(tag="in_percentage", input_type=Int(optional=True), prefix="--percentage", doc=InputDocumentation(doc="If you prefer to recover a percentage of a SMRTcell\nrather than a specific list of reads specify that\npercentage (range 0-100) here (default: None)")), ToolInput(tag="in_count", input_type=Int(optional=True), prefix="--count", doc=InputDocumentation(doc="Recover a specific number of ZMWs picked at random\n(default: None)")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="Random seed for selecting a percentage of reads\n(default: None)")), ToolInput(tag="in_ignore_metadata", input_type=Boolean(optional=True), prefix="--ignore-metadata", doc=InputDocumentation(doc="Discard input DataSet metadata (default: False)")), ToolInput(tag="in_relative", input_type=Boolean(optional=True), prefix="--relative", doc=InputDocumentation(doc="Make external resource paths relative (default: False)")), ToolInput(tag="in_anonymize", input_type=Boolean(optional=True), prefix="--anonymize", doc=InputDocumentation(doc="Randomize sequences for privacy (default: False)")), ToolInput(tag="in_barcodes", input_type=Boolean(optional=True), prefix="--barcodes", doc=InputDocumentation(doc="Indicates that the whitelist or blacklist contains\nbarcode indices instead of ZMW numbers (default:\nFalse)")), ToolInput(tag="in_sample_scraps", input_type=Boolean(optional=True), prefix="--sample-scraps", doc=InputDocumentation(doc="If enabled, --percentage and --count will include hole\nnumbers from scraps BAM files when picking a random\nsample (default is to sample only ZMWs present in\nsubreads BAM). (default: False)")), ToolInput(tag="in_keep_uuid", input_type=Boolean(optional=True), prefix="--keep-uuid", doc=InputDocumentation(doc="If enabled, the UUID from the input dataset will be\nused for the output as well. (default: False)")), ToolInput(tag="in_min_adapters", input_type=Int(optional=True), prefix="--min-adapters", doc=InputDocumentation(doc="Minimum number of adapters to filter for (default:\nNone)\n")), ToolInput(tag="in_input_bam", input_type=String(), position=0, doc=InputDocumentation(doc="Input BAM or DataSet from which reads will be read")), ToolInput(tag="in_output_bam", input_type=String(), position=1, doc=InputDocumentation(doc="Output BAM or DataSet to which filtered reads will be\nwritten (default: None)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bamsieve_V0_1_0().translate("wdl", allow_empty_container=True)

