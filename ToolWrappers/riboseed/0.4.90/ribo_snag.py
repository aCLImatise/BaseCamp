from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, String, Int, Boolean, File

Ribo_Snag_V0_1_0 = CommandToolBuilder(tool="ribo_snag", base_command=["ribo", "snag"], inputs=[ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="output directory; default: /")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="--name", doc=InputDocumentation(doc="rename the contigs with this prefix; default: date\n(YYYYMMDD)")), ToolInput(tag="in_flanking_length", input_type=Int(optional=True), prefix="--flanking_length", doc=InputDocumentation(doc="length of flanking regions, in bp; default: 1000")), ToolInput(tag="in_msa_km_ers", input_type=Boolean(optional=True), prefix="--msa_kmers", doc=InputDocumentation(doc="calculate kmer similarity based on aligned sequences\ninstead of raw sequences;default: False")), ToolInput(tag="in_skip_km_ers", input_type=Boolean(optional=True), prefix="--skip_kmers", doc=InputDocumentation(doc="Just plot entropy if MSAdefault: False")), ToolInput(tag="in_skip_blast", input_type=Boolean(optional=True), prefix="--skip_blast", doc=InputDocumentation(doc="Skip running BLAST Comparisonsdefault: False")), ToolInput(tag="in_linear", input_type=Boolean(optional=True), prefix="--linear", doc=InputDocumentation(doc="if the genome is not circular, and an region of\ninterest (including flanking bits) extends past\nchromosome end, this extends the sequence past\nchromosome origin forward by 5kb; default: False")), ToolInput(tag="in_padding", input_type=Int(optional=True), prefix="--padding", doc=InputDocumentation(doc="if treating as circular, this controls the length of\nsequence added to the 5' and 3' ends to allow for\nselecting regions that cross the chromosome's origin;\ndefault: 5000")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="1 = debug(), 2 = info(), 3 = warning(), 4 = error()\nand 5 = critical(); default: 2")), ToolInput(tag="in_title", input_type=String(optional=True), prefix="--title", doc=InputDocumentation(doc="String for plot title; uses matplotlib math processing\nfor italics (you know, the LaTeX $..$ syntax):\nhttps://matplotlib.org/users/mathtext.html default:\ninferred from --seq_name")), ToolInput(tag="in_clobber", input_type=Boolean(optional=True), prefix="--clobber", doc=InputDocumentation(doc="overwrite previous output files; default: False")), ToolInput(tag="in_no_rev_comp", input_type=Boolean(optional=True), prefix="--no_revcomp", doc=InputDocumentation(doc="default returns reverse complimented seq if majority\nof regions on reverse strand. if --no_revcomp, this is\noverwridden; default: False")), ToolInput(tag="in_just_extract", input_type=Boolean(optional=True), prefix="--just_extract", doc=InputDocumentation(doc="Dont bother making an MSA, calculating Shannon\nEntropy, BLASTing, generating plots etc; just extract\nthe regions ; default: False")), ToolInput(tag="in_msa_tool", input_type=String(optional=True), prefix="--msa_tool", doc=InputDocumentation(doc="Path to PRANK executable; default: mafft")), ToolInput(tag="in_prank_exe", input_type=File(optional=True), prefix="--prank_exe", doc=InputDocumentation(doc="Path to PRANK executable; default: prank")), ToolInput(tag="in_maff_t_exe", input_type=File(optional=True), prefix="--mafft_exe", doc=InputDocumentation(doc="Path to MAFFT executable; default: mafft")), ToolInput(tag="in_barr_nap_exe", input_type=File(optional=True), prefix="--barrnap_exe", doc=InputDocumentation(doc="Path to barrnap executable; default: barrnap")), ToolInput(tag="in_make_blast_db_exe", input_type=File(optional=True), prefix="--makeblastdb_exe", doc=InputDocumentation(doc="Path to makeblastdb executable; default: makeblastdb")), ToolInput(tag="in_kingdom", input_type=String(optional=True), prefix="--kingdom", doc=InputDocumentation(doc="kingdom for barrnap; default: bac")), ToolInput(tag="in_seq_name", input_type=File(optional=True), prefix="--seq_name", doc=InputDocumentation(doc="name of genome; default: inferred from file name, as\nmany casesinvolve multiple contigs, etc, making\ninference from record intractable")), ToolInput(tag="in_genbank_genome", input_type=String(), position=0, doc=InputDocumentation(doc="Genbank file (WITH SEQUENCE)")), ToolInput(tag="in_clustered_loci", input_type=String(), position=1, doc=InputDocumentation(doc="output from riboSelect"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output directory; default: /"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ribo_Snag_V0_1_0().translate("wdl", allow_empty_container=True)

