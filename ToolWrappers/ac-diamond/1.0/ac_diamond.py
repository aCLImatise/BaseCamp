from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Ac_Diamond_V0_1_0 = CommandToolBuilder(tool="ac_diamond", base_command=["ac-diamond"], inputs=[ToolInput(tag="in_arg_number_cpu", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --threads ] arg (=0) number of cpu threads")), ToolInput(tag="in_arg_database_file", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --db ] arg           database file")), ToolInput(tag="in_arg_acdiamond_alignment", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --daa ] arg          AC-DIAMOND alignment archive (DAA) file")), ToolInput(tag="in__enable_verbose", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --verbose ]          enable verbose out")), ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="--log", doc=InputDocumentation(doc="enable debug log")), ToolInput(tag="in_in", input_type=File(optional=True), prefix="--in", doc=InputDocumentation(doc="input reference file in FASTA format")), ToolInput(tag="in_arg_reference_sequence", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --block-size ] arg reference sequence block size in billions of letters\n(default=4)")), ToolInput(tag="in_sensitive", input_type=Boolean(optional=True), prefix="--sensitive", doc=InputDocumentation(doc="enable building index for sensitive mode\n(default:fast)")), ToolInput(tag="in_arg_query_sequence", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="[ --query-block-size ] arg (=6) query sequence block size in billions of\nletters (default=6)")), ToolInput(tag="in_arg_input_query", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="[ --query ] arg                 input query file")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="[ --max-target-seqs ] arg (=25) maximum number of target sequences to\nreport alignments for")), ToolInput(tag="in_top", input_type=Int(optional=True), prefix="--top", doc=InputDocumentation(doc="(=100)                   report alignments within this percentage\nrange of top alignment score (overrides\n--max-target-seqs)")), ToolInput(tag="in_compress", input_type=Int(optional=True), prefix="--compress", doc=InputDocumentation(doc="(=0)                compression for output files (0=none,\n1=gzip)")), ToolInput(tag="in_arg_maximum_evalue", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --evalue ] arg (=0.001)       maximum e-value to report alignments")), ToolInput(tag="in_min_score", input_type=Int(optional=True), prefix="--min-score", doc=InputDocumentation(doc="(=0)               minimum bit score to report alignments\n(overrides e-value setting)")), ToolInput(tag="in_id", input_type=Int(optional=True), prefix="--id", doc=InputDocumentation(doc="(=0)                      minimum identity% to report an alignment")), ToolInput(tag="in_arg_devshm_directory", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --tmpdir ] arg (=/dev/shm)    directory for temporary files")), ToolInput(tag="in_gap_open", input_type=Int(optional=True), prefix="--gapopen", doc=InputDocumentation(doc="(=-1)                gap open penalty, -1=default (11 for\nprotein)")), ToolInput(tag="in_gap_extend", input_type=Int(optional=True), prefix="--gapextend", doc=InputDocumentation(doc="(=-1)              gap extension penalty, -1=default (1 for\nprotein)")), ToolInput(tag="in_matrix", input_type=Int(optional=True), prefix="--matrix", doc=InputDocumentation(doc="(=blosum62)           score matrix for protein alignment")), ToolInput(tag="in_seg", input_type=String(optional=True), prefix="--seg", doc=InputDocumentation(doc="enable SEG masking of queries (yes/no)")), ToolInput(tag="in_arg_window_size", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[ --window ] arg (=0)        window size for local hit search")), ToolInput(tag="in_x_drop", input_type=Int(optional=True), prefix="--xdrop", doc=InputDocumentation(doc="(=20)               xdrop for ungapped alignment")), ToolInput(tag="in_arg_xdrop_gapped", input_type=Boolean(optional=True), prefix="-X", doc=InputDocumentation(doc="[ --gapped-xdrop ] arg (=20) xdrop for gapped alignment in bits")), ToolInput(tag="in_un_gapped_score", input_type=Int(optional=True), prefix="--ungapped-score", doc=InputDocumentation(doc="(=0)       minimum raw alignment score to continue local")), ToolInput(tag="in_hit_score", input_type=Int(optional=True), prefix="--hit-score", doc=InputDocumentation(doc="(=0)            minimum score to keep a tentative alignment")), ToolInput(tag="in_band", input_type=Int(optional=True), prefix="--band", doc=InputDocumentation(doc="(=0)                 band for dynamic programming computation")), ToolInput(tag="in_index_mode", input_type=Int(optional=True), prefix="--index-mode", doc=InputDocumentation(doc="(=0)           index mode (1=10x1, 2=10x8)")), ToolInput(tag="in_fetch_size", input_type=Int(optional=True), prefix="--fetch-size", doc=InputDocumentation(doc="(=4096)        trace point fetch size")), ToolInput(tag="in_single_domain", input_type=Boolean(optional=True), prefix="--single-domain", doc=InputDocumentation(doc="Discard secondary domains within one target")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --out ] arg           output file")), ToolInput(tag="in_arg_tab_output", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --outfmt ] arg (=tab) output format (tab/sam)")), ToolInput(tag="in_forward_only", input_type=Boolean(optional=True), prefix="--forwardonly", doc=InputDocumentation(doc="only show alignments of forward strand")), ToolInput(tag="in_make_db", input_type=String(), position=0, doc=InputDocumentation(doc="Build AC-DIAMOND database from a FASTA file")), ToolInput(tag="in_view", input_type=String(), position=0, doc=InputDocumentation(doc="View AC-DIAMOND alignment archive (DAA) formatted file")), ToolInput(tag="in_extension", input_type=String(), position=0, doc=InputDocumentation(doc="--hit-band arg (=0)             band for hit verification")), ToolInput(tag="in_sequence", input_type=String(), position=1, doc=InputDocumentation(doc="View options:"))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --out ] arg           output file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ac_Diamond_V0_1_0().translate("wdl", allow_empty_container=True)

