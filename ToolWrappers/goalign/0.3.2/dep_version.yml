&id003 !Command
command:
- dep
- version
positional:
- !Positional
  description: ': devel'
  position: 0
  name: version
  optional: false
- !Positional
  description: 'go compiler : gc'
  position: 0
  name: go1.13.5
  optional: false
- !Positional
  description: ': linux/amd64'
  position: 1
  name: platform
  optional: false
- !Positional
  description: ': ImportDuringSolve=false'
  position: 2
  name: features
  optional: false
named: []
parent: &id001 !Command
  command:
  - dep
  positional: []
  named: []
  parent:
  subcommands:
  - !Command
    command:
    - dep
    - status
    positional:
    - !Positional
      description: Import path
      position: 0
      name: PROJECT
      optional: false
    - !Positional
      description: Version constraint, from the manifest
      position: 1
      name: CONSTRAINT
      optional: false
    - !Positional
      description: Version chosen, from the lock
      position: 2
      name: VERSION
      optional: false
    - !Positional
      description: VCS revision of the chosen version
      position: 3
      name: REVISION
      optional: false
    - !Positional
      description: Latest VCS revision available
      position: 4
      name: LATEST
      optional: false
    named:
    - !Flag
      description: 'include more detail in the chosen format (default: false)'
      synonyms:
      - -detail
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'output the dependency graph in GraphViz format (default: false)'
      synonyms:
      - -dot
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'print detailed usage examples (default: false)'
      synonyms:
      - -examples
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'output in text/template format (default: <none>)'
      synonyms:
      - -f
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'output in JSON format (default: false)'
      synonyms:
      - -json
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'output in the lock file format (assumes -detail) (default: false)'
      synonyms:
      - -lock
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'only show missing dependencies (default: false)'
      synonyms:
      - -missing
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'only show out-of-date dependencies (default: false)'
      synonyms:
      - -old
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'path to a file to which to write the output. Blank value will
        be ignored (default: <none>)'
      synonyms:
      - -out
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'enable verbose logging (default: false)'
      synonyms:
      - -v
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage: dep status [package...]\n\nWith no arguments, print the status\
      \ of each dependency of the project.\n\n  PROJECT     Import path\n  CONSTRAINT\
      \  Version constraint, from the manifest\n  VERSION     Version chosen, from\
      \ the lock\n  REVISION    VCS revision of the chosen version\n  LATEST     \
      \ Latest VCS revision available\n  PKGS USED   Number of packages from this\
      \ project that are actually used\n\nYou may use the -f flag to create a custom\
      \ format for the output of the\ndep status command. The available fields you\
      \ can utilize are as follows:\nProjectRoot, Constraint, Version, Revision, Latest,\
      \ and PackageCount.\n\nStatus returns exit code zero if all dependencies are\
      \ in a \"good state\".\n\nFlags:\n\n  -detail    include more detail in the\
      \ chosen format (default: false)\n  -dot       output the dependency graph in\
      \ GraphViz format (default: false)\n  -examples  print detailed usage examples\
      \ (default: false)\n  -f         output in text/template format (default: <none>)\n\
      \  -json      output in JSON format (default: false)\n  -lock      output in\
      \ the lock file format (assumes -detail) (default: false)\n  -missing   only\
      \ show missing dependencies (default: false)\n  -old       only show out-of-date\
      \ dependencies (default: false)\n  -out       path to a file to which to write\
      \ the output. Blank value will be ignored (default: <none>)\n  -v         enable\
      \ verbose logging (default: false)\n\n"
    generated_using: &id002
    - --help
  - !Command
    command:
    - dep
    - check
    positional: []
    named:
    - !Flag
      description: 'Suppress non-error output (default: false)'
      synonyms:
      - -q
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Skip checking that imports and Gopkg.toml are in sync with Gopkg.lock
        (default: false)'
      synonyms:
      - -skip-lock
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Skip checking that vendor is in sync with Gopkg.lock (default:
        false)'
      synonyms:
      - -skip-vendor
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage: dep check [-q] [-skip-lock] [-skip-vendor]\n\nCheck determines\
      \ if your project is in a good state. If problems are found, it\nprints a description\
      \ of each issue, then exits 1. Passing -q suppresses output.\n\nFlags control\
      \ which specific checks will be run. By default, dep check verifies\nthat Gopkg.lock\
      \ is in sync with Gopkg.toml and the imports in your project's .go\nfiles, and\
      \ that the vendor directory is in sync with Gopkg.lock. These checks\ncan be\
      \ disabled with -skip-lock and -skip-vendor, respectively.\n\n(See https://golang.github.io/dep/docs/ensure-mechanics.html#staying-in-sync\
      \ for\nmore information on what it means to be \"in sync.\")\n\nIf your workflow\
      \ necessitates that you modify the contents of vendor, you can\nforce check\
      \ to ignore hash mismatches on a per-project basis by naming\nproject roots\
      \ in Gopkg.toml's \"noverify\" list.\n\nFlags:\n\n  -q            Suppress non-error\
      \ output (default: false)\n  -skip-lock    Skip checking that imports and Gopkg.toml\
      \ are in sync with Gopkg.lock (default: false)\n  -skip-vendor  Skip checking\
      \ that vendor is in sync with Gopkg.lock (default: false)\n\n"
    generated_using: *id002
  - *id003
  - !Command
    command:
    - dep
    - ensure
    positional: []
    named:
    - !Flag
      description: 'add new dependencies, or populate Gopkg.toml with constraints
        for existing dependencies (default: false)'
      synonyms:
      - -add
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'only report the changes that would be made (default: false)'
      synonyms:
      - -dry-run
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'print detailed usage examples (default: false)'
      synonyms:
      - -examples
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'update Gopkg.lock (if needed), but do not update vendor/ (default:
        false)'
      synonyms:
      - -no-vendor
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'update the named dependencies (or all, if none are named) in Gopkg.lock
        to the latest allowed by Gopkg.toml (default: false)'
      synonyms:
      - -update
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'enable verbose logging (default: false)'
      synonyms:
      - -v
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'populate vendor/ from Gopkg.lock without updating it first (default:
        false)'
      synonyms:
      - -vendor-only
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage: dep ensure [-update | -add] [-no-vendor | -vendor-only] [-dry-run]\
      \ [-v] [<spec>...]\n\nProject spec:\n\n  <import path>[:alt source URL][@<constraint>]\n\
      \n\nEnsure gets a project into a complete, reproducible, and likely compilable\
      \ state:\n\n  * All imports are fulfilled\n  * All rules in Gopkg.toml are respected\n\
      \  * Gopkg.lock records immutable versions for all dependencies\n  * vendor/\
      \ is populated according to Gopkg.lock\n\nEnsure has fast techniques to determine\
      \ that some of these steps may be\nunnecessary. If that determination is made,\
      \ ensure may skip some steps. Flags\nmay be passed to bypass these checks; -vendor-only\
      \ will allow an out-of-date\nGopkg.lock to populate vendor/, and -no-vendor\
      \ will update Gopkg.lock (if\nneeded), but never touch vendor/.\n\nThe effect\
      \ of passing project spec arguments varies slightly depending on the\ncombination\
      \ of flags that are passed.\n\n\nExamples:\n\n  dep ensure                 \
      \                Populate vendor from existing Gopkg.toml and Gopkg.lock\n \
      \ dep ensure -add github.com/pkg/foo         Introduce a named dependency at\
      \ its newest version\n  dep ensure -add github.com/pkg/foo@^1.0.1  Introduce\
      \ a named dependency with a particular constraint\n\nFor more detailed usage\
      \ examples, see dep ensure -examples.\n\nFlags:\n\n  -add          add new dependencies,\
      \ or populate Gopkg.toml with constraints for existing dependencies (default:\
      \ false)\n  -dry-run      only report the changes that would be made (default:\
      \ false)\n  -examples     print detailed usage examples (default: false)\n \
      \ -no-vendor    update Gopkg.lock (if needed), but do not update vendor/ (default:\
      \ false)\n  -update       update the named dependencies (or all, if none are\
      \ named) in Gopkg.lock to the latest allowed by Gopkg.toml (default: false)\n\
      \  -v            enable verbose logging (default: false)\n  -vendor-only  populate\
      \ vendor/ from Gopkg.lock without updating it first (default: false)\n\n"
    generated_using: *id002
  - !Command
    command:
    - dep
    - init
    positional:
    - !Positional
      description: ''
      position: 0
      name: root
      optional: true
    named:
    - !Flag
      description: 'search in GOPATH for dependencies (default: false)'
      synonyms:
      - -gopath
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "don't include example in Gopkg.toml (default: false)"
      synonyms:
      - -no-examples
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'skip importing configuration from other dependency managers (default:
        false)'
      synonyms:
      - -skip-tools
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'enable verbose logging (default: false)'
      synonyms:
      - -v
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage: dep init [root]\n\nInitialize the project at filepath root\
      \ by parsing its dependencies, writing\nmanifest and lock files, and vendoring\
      \ the dependencies. If root isn't\nspecified, use the current directory.\n\n\
      When configuration for another dependency management tool is detected, it is\n\
      imported into the initial manifest and lock. Use the -skip-tools flag to\ndisable\
      \ this behavior. The following external tools are supported:\nglide, godep,\
      \ vndr, govend, gb, gvt, govendor, glock.\n\nAny dependencies that are not constrained\
      \ by external configuration use the\nGOPATH analysis below.\n\nBy default, the\
      \ dependencies are resolved over the network. A version will be\nselected from\
      \ the versions available from the upstream source per the following\nalgorithm:\n\
      \n - Tags conforming to semver (sorted by semver rules)\n - Default branch(es)\
      \ (sorted lexicographically)\n - Non-semver tags (sorted lexicographically)\n\
      \nAn alternate mode can be activated by passing -gopath. In this mode, the version\n\
      of each dependency will reflect the current state of the GOPATH. If a dependency\n\
      doesn't exist in the GOPATH, a version will be selected based on the above\n\
      network version selection algorithm.\n\nA Gopkg.toml file will be written with\
      \ inferred version constraints for all\ndirect dependencies. Gopkg.lock will\
      \ be written with precise versions, and\nvendor/ will be populated with the\
      \ precise versions written to Gopkg.lock.\n\nFlags:\n\n  -gopath       search\
      \ in GOPATH for dependencies (default: false)\n  -no-examples  don't include\
      \ example in Gopkg.toml (default: false)\n  -skip-tools   skip importing configuration\
      \ from other dependency managers (default: false)\n  -v            enable verbose\
      \ logging (default: false)\n\n"
    generated_using: *id002
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "Dep is a tool for managing dependencies for Go projects\n\nUsage: \"\
    dep [command]\"\n\nCommands:\n\n  init     Set up a new Go project, or migrate\
    \ an existing one\n  status   Report the status of the project's dependencies\n\
    \  ensure   Ensure a dependency is safely vendored in the project\n  version \
    \ Show the dep version information\n  check    Check if imports, Gopkg.toml, and\
    \ Gopkg.lock are in sync\n\nExamples:\n  dep init                            \
    \   set up a new project\n  dep ensure                             install the\
    \ project's dependencies\n  dep ensure -update                     update the\
    \ locked versions of all dependencies\n  dep ensure -add github.com/pkg/errors\
    \  add a dependency to the project\n\nUse \"dep help [command]\" for more information\
    \ about a command.\n"
  generated_using: *id002
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "dep:\n version     : devel\n build date  : \n git hash    : \n go version\
  \  : go1.13.5\n go compiler : gc\n platform    : linux/amd64\n features    : ImportDuringSolve=false\n"
generated_using: []
