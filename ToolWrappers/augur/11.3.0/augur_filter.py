from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Array, Boolean

Augur_Filter_V0_1_0 = CommandToolBuilder(tool="augur_filter", base_command=["augur", "filter"], inputs=[ToolInput(tag="in_metadata", input_type=File(optional=True), prefix="--metadata", doc=InputDocumentation(doc="sequence metadata, as CSV or TSV (default: None)")), ToolInput(tag="in_sequences", input_type=String(optional=True), prefix="--sequences", doc=InputDocumentation(doc="sequences in FASTA or VCF format (default: None)")), ToolInput(tag="in_sequence_index", input_type=String(optional=True), prefix="--sequence-index", doc=InputDocumentation(doc="sequence composition report generated by augur index.\nIf not provided, an index will be created on the fly.\n(default: None)")), ToolInput(tag="in_query", input_type=String(optional=True), prefix="--query", doc=InputDocumentation(doc="Filter samples by attribute. Uses Pandas Dataframe\nquerying, see https://pandas.pydata.org/pandas-\ndocs/stable/user_guide/indexing.html#indexing-query\nfor syntax. (e.g., --query 'country == 'Colombia'' or\n--query '(country == 'USA' & (division ==\n'Washington'))') (default: None)")), ToolInput(tag="in_min_date", input_type=Int(optional=True), prefix="--min-date", doc=InputDocumentation(doc="minimal cutoff for date; may be specified as an Augur-\nstyle numeric date (with the year as the integer part)\nor YYYY-MM-DD (default: None)")), ToolInput(tag="in_max_date", input_type=Int(optional=True), prefix="--max-date", doc=InputDocumentation(doc="maximal cutoff for date; may be specified as an Augur-\nstyle numeric date (with the year as the integer part)\nor YYYY-MM-DD (default: None)")), ToolInput(tag="in_exclude_ambiguous_dates_by", input_type=String(optional=True), prefix="--exclude-ambiguous-dates-by", doc=InputDocumentation(doc="Exclude ambiguous dates by day (e.g., 2020-09-XX),\nmonth (e.g., 2020-XX-XX), year (e.g., 200X-10-01), or\nany date fields. An ambiguous year makes the\ncorresponding month and day ambiguous, too, even if\nthose fields have unambiguous values (e.g.,\n'201X-10-01'). Similarly, an ambiguous month makes the\ncorresponding day ambiguous (e.g., '2010-XX-01').\n(default: None)")), ToolInput(tag="in_exclude", input_type=Array(t=String(), optional=True), prefix="--exclude", doc=InputDocumentation(doc="file(s) with list of strains to exclude (default:\nNone)")), ToolInput(tag="in_exclude_where", input_type=Array(t=String(), optional=True), prefix="--exclude-where", doc=InputDocumentation(doc="Exclude samples matching these conditions. Ex:\n'host=rat' or 'host!=rat'. Multiple values are\nprocessed as OR (matching any of those specified will\nbe excluded), not AND (default: None)")), ToolInput(tag="in_exclude_all", input_type=Boolean(optional=True), prefix="--exclude-all", doc=InputDocumentation(doc="exclude all strains by default. Use this with the\ninclude arguments to select a specific subset of\nstrains. (default: False)")), ToolInput(tag="in_include", input_type=Array(t=String(), optional=True), prefix="--include", doc=InputDocumentation(doc="file(s) with list of strains to include regardless of\npriorities or subsampling (default: None)")), ToolInput(tag="in_include_where", input_type=Array(t=String(), optional=True), prefix="--include-where", doc=InputDocumentation(doc="Include samples with these values. ex: host=rat.\nMultiple values are processed as OR (having any of\nthose specified will be included), not AND. This rule\nis applied last and ensures any sequences matching\nthese rules will be included. (default: None)")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="minimal length of the sequences (default: None)")), ToolInput(tag="in_non_nucleotide", input_type=Boolean(optional=True), prefix="--non-nucleotide", doc=InputDocumentation(doc="exclude sequences that contain illegal characters\n(default: False)")), ToolInput(tag="in_group_by", input_type=Array(t=String(), optional=True), prefix="--group-by", doc=InputDocumentation(doc="categories with respect to subsample; two virtual\nfields, 'month' and 'year', are supported if they\ndon't already exist as real fields but a 'date' field\ndoes exist (default: None)")), ToolInput(tag="in_sequences_per_group", input_type=Int(optional=True), prefix="--sequences-per-group", doc=InputDocumentation(doc="subsample to no more than this number of sequences per\ncategory (default: None)")), ToolInput(tag="in_subsample_max_sequences", input_type=Int(optional=True), prefix="--subsample-max-sequences", doc=InputDocumentation(doc="subsample to no more than this number of sequences\n(default: None)")), ToolInput(tag="in_probabilistic_sampling", input_type=Boolean(optional=True), prefix="--probabilistic-sampling", doc=InputDocumentation(doc="Enable probabilistic sampling during subsampling. This\nis useful when there are more groups than requested\nsequences. This option only applies when `--subsample-\nmax-sequences` is provided. (default: True)")), ToolInput(tag="in_no_probabilistic_sampling", input_type=Int(optional=True), prefix="--no-probabilistic-sampling", doc=InputDocumentation(doc="tab-delimited file with list of priority scores for\nstrains (e.g., '<strain>\t<priority>') and no header.\nWhen scores are provided, Augur converts scores to\nfloating point values, sorts strains within each\nsubsampling group from highest to lowest priority, and\nselects the top N strains per group where N is the\ncalculated or requested number of strains per group.\nHigher numbers indicate higher priority. Since\npriorities represent relative values between strains,\nthese values can be arbitrary. (default: None)")), ToolInput(tag="in_subsample_seed", input_type=Int(optional=True), prefix="--subsample-seed", doc=InputDocumentation(doc="random number generator seed to allow reproducible\nsub-sampling (with same input data). Can be number or\nstring. (default: None)")), ToolInput(tag="in_output_sequences", input_type=String(optional=True), prefix="--output-sequences", doc=InputDocumentation(doc="filtered sequences in FASTA format (default: None)")), ToolInput(tag="in_output_metadata", input_type=String(optional=True), prefix="--output-metadata", doc=InputDocumentation(doc="metadata for strains that passed filters (default:\nNone)")), ToolInput(tag="in_output_strains", input_type=String(optional=True), prefix="--output-strains", doc=InputDocumentation(doc="list of strains that passed filters (no header)\n(default: None)\n"))], outputs=[], container="quay.io/biocontainers/augur:11.3.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Augur_Filter_V0_1_0().translate("wdl")

