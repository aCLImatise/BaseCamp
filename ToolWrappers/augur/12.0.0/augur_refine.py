from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Float, Int, Array

Augur_Refine_V0_1_0 = CommandToolBuilder(tool="augur_refine", base_command=["augur", "refine"], inputs=[ToolInput(tag="in_alignment", input_type=String(optional=True), prefix="--alignment", doc=InputDocumentation(doc="alignment in fasta or VCF format (default: None)")), ToolInput(tag="in_tree", input_type=String(optional=True), prefix="--tree", doc=InputDocumentation(doc="prebuilt Newick (default: None)")), ToolInput(tag="in_metadata", input_type=File(optional=True), prefix="--metadata", doc=InputDocumentation(doc="sequence metadata, as CSV or TSV (default: None)")), ToolInput(tag="in_output_tree", input_type=File(optional=True), prefix="--output-tree", doc=InputDocumentation(doc="file name to write tree to (default: None)")), ToolInput(tag="in_output_node_data", input_type=File(optional=True), prefix="--output-node-data", doc=InputDocumentation(doc="file name to write branch lengths as node data\n(default: None)")), ToolInput(tag="in_time_tree", input_type=Boolean(optional=True), prefix="--timetree", doc=InputDocumentation(doc="produce timetree using treetime (default: False)")), ToolInput(tag="in_coalescent", input_type=Float(optional=True), prefix="--coalescent", doc=InputDocumentation(doc="coalescent time scale in units of inverse clock rate\n(float), optimize as scalar ('opt'), or skyline\n('skyline') (default: None)")), ToolInput(tag="in_gen_per_year", input_type=Int(optional=True), prefix="--gen-per-year", doc=InputDocumentation(doc="number of generations per year, relevant for skyline\noutput('skyline') (default: 50)")), ToolInput(tag="in_clock_rate", input_type=String(optional=True), prefix="--clock-rate", doc=InputDocumentation(doc="fixed clock rate (default: None)")), ToolInput(tag="in_clock_std_dev", input_type=String(optional=True), prefix="--clock-std-dev", doc=InputDocumentation(doc="standard deviation of the fixed clock_rate estimate\n(default: None)")), ToolInput(tag="in_root", input_type=Array(t=String(), optional=True), prefix="--root", doc=InputDocumentation(doc="rooting mechanism ('best', least-squares', 'min_dev',\n'oldest') OR node to root by OR two nodes indicating a\nmonophyletic group to root by. Run treetime -h for\ndefinitions of rooting methods. (default: best)")), ToolInput(tag="in_keep_root", input_type=Boolean(optional=True), prefix="--keep-root", doc=InputDocumentation(doc="do not reroot the tree; use it as-is. Overrides\nanything specified by --root. (default: False)")), ToolInput(tag="in_covariance", input_type=Boolean(optional=True), prefix="--covariance", doc=InputDocumentation(doc="Account for covariation when estimating rates and/or\nrerooting. Use --no-covariance to turn off. (default:\nTrue)")), ToolInput(tag="in_keep_poly_to_mies", input_type=Boolean(optional=True), prefix="--keep-polytomies", doc=InputDocumentation(doc="Do not attempt to resolve polytomies (default: False)")), ToolInput(tag="in_precision", input_type=String(optional=True), prefix="--precision", doc=InputDocumentation(doc="precision used by TreeTime to determine the number of\ngrid points that are used for the evaluation of the\nbranch length interpolation objects. Values range from\n0 (rough) to 3 (ultra fine) and default to 'auto'.\n(default: None)")), ToolInput(tag="in_date_format", input_type=String(optional=True), prefix="--date-format", doc=InputDocumentation(doc="date format (default: %Y-%m-%d)")), ToolInput(tag="in_date_confidence", input_type=Boolean(optional=True), prefix="--date-confidence", doc=InputDocumentation(doc="calculate confidence intervals for node dates\n(default: False)")), ToolInput(tag="in_date_inference", input_type=String(optional=True), prefix="--date-inference", doc=InputDocumentation(doc="assign internal nodes to their marginally most likely\ndates, not jointly most likely (default: joint)")), ToolInput(tag="in_branch_length_inference", input_type=String(optional=True), prefix="--branch-length-inference", doc=InputDocumentation(doc="branch length mode of treetime to use (default: auto)")), ToolInput(tag="in_clock_filter_iqd", input_type=String(optional=True), prefix="--clock-filter-iqd", doc=InputDocumentation(doc="clock-filter: remove tips that deviate more than n_iqd\ninterquartile ranges from the root-to-tip vs time\nregression (default: None)")), ToolInput(tag="in_vcf_reference", input_type=File(optional=True), prefix="--vcf-reference", doc=InputDocumentation(doc="fasta file of the sequence the VCF was mapped to\n(default: None)")), ToolInput(tag="in_year_bounds", input_type=Array(t=String(), optional=True), prefix="--year-bounds", doc=InputDocumentation(doc="specify min or max & min prediction bounds for samples\nwith XX in year (default: None)")), ToolInput(tag="in_divergence_units", input_type=String(optional=True), prefix="--divergence-units", doc=InputDocumentation(doc="Units in which sequence divergences is exported.\n(default: mutations-per-site)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="seed for random number generation (default: None)"))], outputs=[], container="quay.io/biocontainers/augur:12.0.0--pyhdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Augur_Refine_V0_1_0().translate("wdl")

