from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, File, Int, Boolean

Augur_Align_V0_1_0 = CommandToolBuilder(tool="augur_align", base_command=["augur", "align"], inputs=[ToolInput(tag="in_sequences", input_type=Array(t=String(), optional=True), prefix="--sequences", doc=InputDocumentation(doc="sequences to align (default: None)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output file (default: alignment.fasta)")), ToolInput(tag="in_n_threads", input_type=Int(optional=True), prefix="--nthreads", doc=InputDocumentation(doc="number of threads to use; specifying the value 'auto'\nwill cause the number of available CPU cores on your\nsystem, if determinable, to be used (default: 1)")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="alignment program to use (default: mafft)")), ToolInput(tag="in_reference_name", input_type=String(optional=True), prefix="--reference-name", doc=InputDocumentation(doc="strip insertions relative to reference sequence; use\nif the reference is already in the input sequences\n(default: None)")), ToolInput(tag="in_reference_sequence", input_type=File(optional=True), prefix="--reference-sequence", doc=InputDocumentation(doc="Add this reference sequence to the dataset & strip\ninsertions relative to this. Use if the reference is\nNOT already in the input sequences (default: None)")), ToolInput(tag="in_remove_reference", input_type=Boolean(optional=True), prefix="--remove-reference", doc=InputDocumentation(doc="remove reference sequence from the alignment (default:\nFalse)")), ToolInput(tag="in_fill_gaps", input_type=Boolean(optional=True), prefix="--fill-gaps", doc=InputDocumentation(doc="If gaps represent missing data rather than true\nindels, replace by N after aligning. (default: False)")), ToolInput(tag="in_existing_alignment", input_type=Int(optional=True), prefix="--existing-alignment", doc=InputDocumentation(doc="An existing alignment to which the sequences will be\nadded. The ouput alignment will be the same length as\nthis existing alignment. (default: False)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Produce extra files (e.g. pre- and post-aligner files)\nwhich can help with debugging poor alignments.\n(default: False)\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output file (default: alignment.fasta)"))], container="quay.io/biocontainers/augur:12.0.0--pyhdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Augur_Align_V0_1_0().translate("wdl")

