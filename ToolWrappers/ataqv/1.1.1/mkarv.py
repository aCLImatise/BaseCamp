from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Directory, Boolean, File

Mkarv_V0_1_0 = CommandToolBuilder(tool="mkarv", base_command=["mkarv"], inputs=[ToolInput(tag="in_concurrency", input_type=Int(optional=True), prefix="--concurrency", doc=InputDocumentation(doc="The number of concurrent processes to use (default:\n1). (default: 1)")), ToolInput(tag="in_description", input_type=String(optional=True), prefix="--description", doc=InputDocumentation(doc="A description for the viewer instance. (default: None)")), ToolInput(tag="in_force", input_type=Directory(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite the output directory if it exists. (default:\nFalse)")), ToolInput(tag="in_indent", input_type=Boolean(optional=True), prefix="--indent", doc=InputDocumentation(doc="If indent is given, JSON output will be pretty-printed\nand indented. (default: False)")), ToolInput(tag="in_maximum_fragment_length", input_type=Int(optional=True), prefix="--maximum-fragment-length", doc=InputDocumentation(doc="The maximum fragment length for which the distance to\nthe reference fragment length count distribution will\nbe measured. (default: 1000)")), ToolInput(tag="in_peak_reference", input_type=File(optional=True), prefix="--peak-reference", doc=InputDocumentation(doc="A reference set of peak metrics to plot. The default\nvalue is 'SRR891268', the peak metrics of that sample\nin the ATAC-seq paper, as generated with MACS2 in our\npipeline. It can be specified as 'calculate', in which\ncase these metrics will be averaged from the given\nmetrics. It can also be the name of a JSON file, which\nmust contain an object with two keys,\n'cumulative_fraction_of_hqaa' and\n'cumulative_fraction_of_territory', the value of each\nbeing an array of fractions of high-quality autosomal\nalignments (HQAA) or total peak territory,\nrespectively. A tab- or comma-separated value file may\nalso be given, in which each line contains two\nfractions, of HQAA and peak territory. All of these\narrays should represent values at percentiles from\n1-100. (default: SRR891268)")), ToolInput(tag="in_reference", input_type=Int(optional=True), prefix="--reference", doc=InputDocumentation(doc="How to make the reference fragment length count\ndistribution. The default value is 'SRR891268', the\nfragment length distribution of that sample in the\nATAC-seq paper. It can be specified as 'calculate', in\nwhich case a distance will be calculated for each set\nof metrics from a reference distribution constructed\nfrom the rest of the given metrics. It can also be the\nname of a file containing a reference distribution.\nThis file may be in JSON format, containing an object\nmapping fragment lengths to counts (e.g. '{0: 0, 1:\n10, 2: 17}', or it may be a tab- or comma-separated\nvalue file in which each line contains a fragment\nlength and count. It may (default: SRR891268)")), ToolInput(tag="in_template_directory", input_type=Directory(optional=True), prefix="--template-directory", doc=InputDocumentation(doc="The location of the web app directory template.\n(default: /usr/local/web)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Talk more. (default: False)")), ToolInput(tag="in_directory", input_type=Directory(), position=0, doc=InputDocumentation(doc="The path to the directory where the web app will be")), ToolInput(tag="in_created_dot", input_type=String(), position=1, doc=InputDocumentation(doc="metrics               One or more ataqv metrics files in JSON format."))], outputs=[ToolOutput(tag="out_force", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Overwrite the output directory if it exists. (default:\nFalse)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mkarv_V0_1_0().translate("wdl", allow_empty_container=True)

