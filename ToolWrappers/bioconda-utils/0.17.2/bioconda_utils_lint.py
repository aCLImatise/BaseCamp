from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, File, Boolean, Int

Bioconda_Utils_Lint_V0_1_0 = CommandToolBuilder(tool="bioconda_utils_lint", base_command=["bioconda-utils", "lint"], inputs=[ToolInput(tag="in_packages", input_type=Array(t=String(), optional=True), prefix="--packages", doc=InputDocumentation(doc="Glob for package[s] to build. Default is to build all\npackages. Can be specified more than once (default:\n'*')")), ToolInput(tag="in_cache", input_type=File(optional=True), prefix="--cache", doc=InputDocumentation(doc="To speed up debugging, use repodata cached locally in\nthe provided filename. If the file does not exist, it\nwill be created the first time. (default: -)")), ToolInput(tag="in_list_checks", input_type=Boolean(optional=True), prefix="--list-checks", doc=InputDocumentation(doc="List the linting functions to be used and then exit\n(default: False)")), ToolInput(tag="in_exclude", input_type=Array(t=String(), optional=True), prefix="--exclude", doc=InputDocumentation(doc="Exclude this linting function. Can be used multiple\ntimes. (default: -)")), ToolInput(tag="in_push_status", input_type=Boolean(optional=True), prefix="--push-status", doc=InputDocumentation(doc="If set, the lint status will be sent to the current\ncommit on github. Also needs --user and --repo to be\nset. Requires the env var GITHUB_TOKEN to be set. Note\nthat pull requests from forks will not have access to\nencrypted variables on ci, so this feature may be of\nlimited use. (default: False)")), ToolInput(tag="in_user", input_type=String(optional=True), prefix="--user", doc=InputDocumentation(doc="Github user (default: 'bioconda')")), ToolInput(tag="in_commit", input_type=String(optional=True), prefix="--commit", doc=InputDocumentation(doc="Commit on github on which to update status (default:\n-)")), ToolInput(tag="in_push_comment", input_type=Boolean(optional=True), prefix="--push-comment", doc=InputDocumentation(doc="If set, the lint status will be posted as a comment in\nthe corresponding pull request (given by --pull-\nrequest). Also needs --user and --repo to be set.\nRequires the env var GITHUB_TOKEN to be set. (default:\nFalse)")), ToolInput(tag="in_pull_request", input_type=String(optional=True), prefix="--pull-request", doc=InputDocumentation(doc="Pull request id on github on which to post a comment.\n(default: -)")), ToolInput(tag="in_repo", input_type=String(optional=True), prefix="--repo", doc=InputDocumentation(doc="Github repo (default: 'bioconda-recipes')")), ToolInput(tag="in_git_range", input_type=Array(t=String(), optional=True), prefix="--git-range", doc=InputDocumentation(doc="Git range (e.g. commits or something like 'master\nHEAD' to check commits in HEAD vs master, or just\n'HEAD' to include uncommitted changes). All recipes\nmodified within this range will be built if not\npresent in the channel. (default: -)")), ToolInput(tag="in_full_report", input_type=Boolean(optional=True), prefix="--full-report", doc=InputDocumentation(doc="Default behavior is to summarize the linting results;\nuse this argument to get the full results as a TSV\nprinted to stdout. (default: False)")), ToolInput(tag="in_try_fix", input_type=Boolean(optional=True), prefix="--try-fix", doc=InputDocumentation(doc="Attempt to fix problems where found (default: False)")), ToolInput(tag="in_pdb", input_type=Boolean(optional=True), prefix="--pdb", doc=InputDocumentation(doc="Drop into debugger on exception (default: False)")), ToolInput(tag="in_loglevel", input_type=String(optional=True), prefix="--loglevel", doc=InputDocumentation(doc="Set logging level (debug, info, warning, error,\ncritical) (default: 'info')")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logfile", doc=InputDocumentation(doc="Write log to file (default: -)")), ToolInput(tag="in_log_file_level", input_type=File(optional=True), prefix="--logfile-level", doc=InputDocumentation(doc="Log level for log file (default: 'debug')")), ToolInput(tag="in_log_command_max_lines", input_type=Int(optional=True), prefix="--log-command-max-lines", doc=InputDocumentation(doc="Limit lines emitted for commands executed (default: -)\n")), ToolInput(tag="in_recipe_folder", input_type=String(), position=0, doc=InputDocumentation(doc="Path to folder containing recipes (default: recipes/)\n(default: -)")), ToolInput(tag="in_config", input_type=String(), position=1, doc=InputDocumentation(doc="Path to Bioconda config (default: config.yml)\n(default: -)"))], outputs=[], container="quay.io/biocontainers/bioconda-utils:0.17.2--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bioconda_Utils_Lint_V0_1_0().translate("wdl")

