from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean, File

Fastmlst_V0_1_0 = CommandToolBuilder(tool="fastmlst", base_command=["fastmlst"], inputs=[ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use (default 8)")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output level choices: [0, 1, 2]")), ToolInput(tag="in_separator", input_type=String(optional=True), prefix="--separator", doc=InputDocumentation(doc="Choose a character to use as a separator (default ',')")), ToolInput(tag="in_scheme", input_type=String(optional=True), prefix="--scheme", doc=InputDocumentation(doc="Set a scheme target (I am not dumb, let me choose a\nscheme by myself!)")), ToolInput(tag="in_scheme_list", input_type=Boolean(optional=True), prefix="--scheme-list", doc=InputDocumentation(doc="Show all schemes supported")), ToolInput(tag="in_fast_a_output", input_type=File(optional=True), prefix="--fastaoutput", doc=InputDocumentation(doc="File name of the concatenated alleles output (default\n'')")), ToolInput(tag="in_table_output", input_type=File(optional=True), prefix="--tableoutput", doc=InputDocumentation(doc="File name of the MLST table output (default STDOUT)")), ToolInput(tag="in_coverage", input_type=Int(optional=True), prefix="--coverage", doc=InputDocumentation(doc="DNA %Cov to report high quality partial allele [?]\n(default 99%)")), ToolInput(tag="in_identity", input_type=Int(optional=True), prefix="--identity", doc=InputDocumentation(doc="DNA %Identity of full allelle to consider 'similar'\n[~] (default 95%)")), ToolInput(tag="in_update_mlst", input_type=Boolean(optional=True), prefix="--update-mlst", doc=InputDocumentation(doc="Perform an update of the PubMLST database")), ToolInput(tag="in_fast_a_two_line", input_type=Boolean(optional=True), prefix="--fasta2line", doc=InputDocumentation(doc="The fasta files will be in fasta2line format")), ToolInput(tag="in_long_header", input_type=Boolean(optional=True), prefix="--longheader", doc=InputDocumentation(doc="If --longheader is invoked, the header of FASTA file\ncontain a long description")), ToolInput(tag="in_legacy", input_type=Boolean(optional=True), prefix="--legacy", doc=InputDocumentation(doc="If --legacy is invoked, the csv reported contain the\ngene name and the allele id in the row [adk(1),atpA(4)\n,dxr(7),glyA(1),recA(1),sodA(3),tpi(3)]. This option\nis only available when the --scheme is defined")), ToolInput(tag="in_novel", input_type=File(optional=True), prefix="--novel", doc=InputDocumentation(doc="File name of the novel alleles")), ToolInput(tag="in_genomes", input_type=String(), position=0, doc=InputDocumentation(doc="optional arguments:"))], outputs=[ToolOutput(tag="out_fast_a_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_fast_a_output", type_hint=File()), doc=OutputDocumentation(doc="File name of the concatenated alleles output (default\n'')")), ToolOutput(tag="out_table_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_table_output", type_hint=File()), doc=OutputDocumentation(doc="File name of the MLST table output (default STDOUT)"))], container="quay.io/biocontainers/fastmlst:0.0.12--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fastmlst_V0_1_0().translate("wdl")

