!Command
command:
- filter_vep.pl
positional:
- !Positional
  description: ''
  position: 0
  name: arguments
  optional: true
named:
- !Flag
  description: "[file]  -i   Specify the input file (i.e. the VEP results file).\n\
    If no input file is specified, the script will\nattempt to read from STDIN. Input\
    \ may be gzipped - to\nforce the script to read a file as gzipped, use --gz"
  synonyms:
  - --input_file
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[format]         Specify input file format (vep or vcf)'
  synonyms:
  - --format
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[file] -o   Specify the output file to write to. If no output file\n\
    is specified, the script will write to STDOUT"
  synonyms:
  - --output_file
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Force the script to overwrite the output file if it\nalready exists"
  synonyms:
  - --force_overwrite
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[filters]   -f   Add filter. Multiple --filter flags may be used,\
    \ and\nare treated as logical ANDs, i.e. all filters must\npass for a line to\
    \ be printed"
  synonyms:
  - --filter
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: -l   List allowed fields from the input file
  synonyms:
  - --list
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: -c   Print only a count of matched lines
  synonyms:
  - --count
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "In VCF files, the CSQ field that contains the\nconsequence data will\
    \ often contain more than one\n\"block\" of consequence data, where each block\n\
    corresponds to a variant/feature overlap. Using\n--only_matched will remove blocks\
    \ that do not pass the\nfilters. By default, the script prints out the entire\n\
    VCF line if any of the blocks pass the filters."
  synonyms:
  - --only_matched
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "-y   Use Sequence Ontology to match consequence terms. Use\nwith operator\
    \ \"is\" to match against all child terms of\nyour value.\ne.g. \"Consequence\
    \ is coding_sequence_variant\" will\nmatch missense_variant, synonymous_variant\
    \ etc.\nRequires database connection; defaults to connecting\nto ensembldb.ensembl.org.\
    \ Use --host, --port, --user,\n--password, --version as per\nvariant_effect_predictor.pl\
    \ to change connection\nparameters.\n"
  synonyms:
  - --ontology
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: -h   Print usage message and exit
  synonyms:
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "#---------------#\n# filter_vep.pl #\n#---------------#\n\nBy Will McLaren\
  \ (wm2@ebi.ac.uk)\n\nhttp://www.ensembl.org/info/docs/variation/vep/vep_script.html#filter\n\
  \nUsage:\nperl filter_vep.pl [arguments]\n  \n--help               -h   Print usage\
  \ message and exit\n\n--input_file [file]  -i   Specify the input file (i.e. the\
  \ VEP results file).\n                          If no input file is specified, the\
  \ script will\n                          attempt to read from STDIN. Input may be\
  \ gzipped - to\n                          force the script to read a file as gzipped,\
  \ use --gz\n--format [format]         Specify input file format (vep or vcf)\n\n\
  --output_file [file] -o   Specify the output file to write to. If no output file\n\
  \                          is specified, the script will write to STDOUT\n--force_overwrite\
  \         Force the script to overwrite the output file if it\n                \
  \          already exists\n\n--filter [filters]   -f   Add filter. Multiple --filter\
  \ flags may be used, and\n                          are treated as logical ANDs,\
  \ i.e. all filters must\n                          pass for a line to be printed\n\
  \n--list               -l   List allowed fields from the input file\n--count   \
  \           -c   Print only a count of matched lines\n\n--only_matched         \
  \   In VCF files, the CSQ field that contains the\n                          consequence\
  \ data will often contain more than one\n                          \"block\" of\
  \ consequence data, where each block\n                          corresponds to a\
  \ variant/feature overlap. Using\n                          --only_matched will\
  \ remove blocks that do not pass the\n                          filters. By default,\
  \ the script prints out the entire\n                          VCF line if any of\
  \ the blocks pass the filters.\n                          \n--ontology         \
  \  -y   Use Sequence Ontology to match consequence terms. Use\n                \
  \          with operator \"is\" to match against all child terms of\n          \
  \                your value.\n                          e.g. \"Consequence is coding_sequence_variant\"\
  \ will\n                          match missense_variant, synonymous_variant etc.\n\
  \                          Requires database connection; defaults to connecting\n\
  \                          to ensembldb.ensembl.org. Use --host, --port, --user,\n\
  \                          --password, --version as per\n                      \
  \    variant_effect_predictor.pl to change connection\n                        \
  \  parameters.\n"
generated_using:
- --help
