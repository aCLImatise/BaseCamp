from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Mindthegap_Find_V0_1_0 = CommandToolBuilder(tool="MindTheGap_find", base_command=["MindTheGap", "find"], inputs=[ToolInput(tag="in_in", input_type=Boolean(optional=True), prefix="-in", doc=InputDocumentation(doc="(1 arg) :    input read file(s)  [default '']")), ToolInput(tag="in_graph", input_type=Boolean(optional=True), prefix="-graph", doc=InputDocumentation(doc="(1 arg) :    input graph file (likely a hdf5 file)  [default '']")), ToolInput(tag="in_ref", input_type=Boolean(optional=True), prefix="-ref", doc=InputDocumentation(doc="(1 arg) :    reference genome file")), ToolInput(tag="in_bed", input_type=Boolean(optional=True), prefix="-bed", doc=InputDocumentation(doc="(1 arg) :    bed file to restrict breakpoint search in specific regions  [default '']")), ToolInput(tag="in_out_tmp", input_type=Boolean(optional=True), prefix="-out-tmp", doc=InputDocumentation(doc="(1 arg) :    prefix for output temporary files  [default '.']")), ToolInput(tag="in_out", input_type=Boolean(optional=True), prefix="-out", doc=InputDocumentation(doc="(1 arg) :    prefix for output files  [default '']")), ToolInput(tag="in_km_er_size", input_type=Boolean(optional=True), prefix="-kmer-size", doc=InputDocumentation(doc="(1 arg) :    size of a kmer  [default '31']")), ToolInput(tag="in_abundance_min", input_type=Boolean(optional=True), prefix="-abundance-min", doc=InputDocumentation(doc="(1 arg) :    minimal abundance threshold for solid kmers  [default 'auto']")), ToolInput(tag="in_abundance_max", input_type=Boolean(optional=True), prefix="-abundance-max", doc=InputDocumentation(doc="(1 arg) :    maximal abundance threshold for solid kmers  [default '2147483647']")), ToolInput(tag="in_homo_only", input_type=Boolean(optional=True), prefix="-homo-only", doc=InputDocumentation(doc="(0 arg) :    search only homozygous breakpoints")), ToolInput(tag="in_max_rep", input_type=Boolean(optional=True), prefix="-max-rep", doc=InputDocumentation(doc="(1 arg) :    maximal repeat size detected for fuzzy sites  [default '5']")), ToolInput(tag="in_het_max_occ", input_type=Boolean(optional=True), prefix="-het-max-occ", doc=InputDocumentation(doc="(1 arg) :    maximal number of occurrences of a kmer in the reference genome allowed for heterozyguous breakpoints  [default '1']")), ToolInput(tag="in_insert_only", input_type=Boolean(optional=True), prefix="-insert-only", doc=InputDocumentation(doc="(0 arg) :    search only insertion breakpoints (do not report other variants)")), ToolInput(tag="in_nb_cores", input_type=Boolean(optional=True), prefix="-nb-cores", doc=InputDocumentation(doc="(1 arg) :    number of cores  [default '0']")), ToolInput(tag="in_max_disk", input_type=Boolean(optional=True), prefix="-max-disk", doc=InputDocumentation(doc="(1 arg) :    max disk for graph building (in MBytes)  [default '0']")), ToolInput(tag="in_max_memory", input_type=Boolean(optional=True), prefix="-max-memory", doc=InputDocumentation(doc="(1 arg) :    max memory for graph building (in MBytes)  [default '2000']")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="(1 arg) :    verbosity level  [default '1']"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mindthegap_Find_V0_1_0().translate("wdl", allow_empty_container=True)

