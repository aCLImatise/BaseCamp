from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, Directory, Array, String, Float

Coconet_Run_V0_1_0 = CommandToolBuilder(tool="coconet_run", base_command=["coconet", "run"], inputs=[ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Path to your assembly file (fasta formatted) (default:\nNone)")), ToolInput(tag="in_h_five", input_type=Int(optional=True), prefix="--h5", doc=InputDocumentation(doc="Experimental: coverage in hdf5 format (keys are\ncontigs, values are (sample, contig_len) ndarrays\n(default: None)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Path to output directory (default: output)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads (default: 5)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Print debugging statements (default: 20)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Less verbose (default: None)")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="--silent", doc=InputDocumentation(doc="Only error messages (default: None)")), ToolInput(tag="in_continue", input_type=Directory(optional=True), prefix="--continue", doc=InputDocumentation(doc="Start from last checkpoint. The output directory needs\nto be the same. (default: False)")), ToolInput(tag="in_bam", input_type=Array(t=String(), optional=True), prefix="--bam", doc=InputDocumentation(doc="List of paths to your coverage files (bam formatted)\n(default: None)")), ToolInput(tag="in_min_ctg_len", input_type=Int(optional=True), prefix="--min-ctg-len", doc=InputDocumentation(doc="Minimum contig length (default: 2048)")), ToolInput(tag="in_min_prevalence", input_type=Int(optional=True), prefix="--min-prevalence", doc=InputDocumentation(doc="Minimum contig prevalence for binning. Contig with\nless that value are filtered out. (default: 2)")), ToolInput(tag="in_min_mapping_quality", input_type=Int(optional=True), prefix="--min-mapping-quality", doc=InputDocumentation(doc="Minimum alignment quality (default: 30)")), ToolInput(tag="in_min_aln_coverage", input_type=Int(optional=True), prefix="--min-aln-coverage", doc=InputDocumentation(doc="Discard alignments with less than 50% aligned\nnucleotides")), ToolInput(tag="in_flag", input_type=Int(optional=True), prefix="--flag", doc=InputDocumentation(doc="SAM flag for filtering (same as samtools '-F' option)\n(default: 3596)")), ToolInput(tag="in_tlen_range", input_type=String(optional=True), prefix="--tlen-range", doc=InputDocumentation(doc="TLEN_RANGE\nOnly allow for paired alignments with spacing within\nthis range (default: None)")), ToolInput(tag="in_min_dtr_size", input_type=Int(optional=True), prefix="--min-dtr-size", doc=InputDocumentation(doc="Minimum size of DTR to flag complete contigs (default:\n10)")), ToolInput(tag="in_fragment_step", input_type=Int(optional=True), prefix="--fragment-step", doc=InputDocumentation(doc="Fragments spacing (default: 128)")), ToolInput(tag="in_test_ratio", input_type=Float(optional=True), prefix="--test-ratio", doc=InputDocumentation(doc="Ratio for train / test split (default: 0.1)")), ToolInput(tag="in_n_train", input_type=Int(optional=True), prefix="--n-train", doc=InputDocumentation(doc="Maximum number of training examples (default: 4000000)")), ToolInput(tag="in_n_test", input_type=Int(optional=True), prefix="--n-test", doc=InputDocumentation(doc="Number of test examples (default: 10000)")), ToolInput(tag="in_learning_rate", input_type=Float(optional=True), prefix="--learning-rate", doc=InputDocumentation(doc="Learning rate for gradient descent (default: 0.001)")), ToolInput(tag="in_batch_size", input_type=Int(optional=True), prefix="--batch-size", doc=InputDocumentation(doc="Batch size for training (default: 256)")), ToolInput(tag="in_test_batch", input_type=Int(optional=True), prefix="--test-batch", doc=InputDocumentation(doc="Run test every 400 batches")), ToolInput(tag="in_patience", input_type=Int(optional=True), prefix="--patience", doc=InputDocumentation(doc="Early stopping if test accuracy does not improve for 5\nconsecutive tests")), ToolInput(tag="in_load_batch", input_type=Int(optional=True), prefix="--load-batch", doc=InputDocumentation(doc="Number of coverage batch to load in memory. Consider\nlowering this value if your RAM is limited. (default:\n100)")), ToolInput(tag="in_compo_neurons", input_type=Int(optional=True), prefix="--compo-neurons", doc=InputDocumentation(doc="COMPO_NEURONS\nNumber of neurons for the composition dense layers\n(x2) (default: [64, 32])")), ToolInput(tag="in_cover_neurons", input_type=Int(optional=True), prefix="--cover-neurons", doc=InputDocumentation(doc="COVER_NEURONS\nNumber of neurons for the coverage dense layers (x2)\n(default: [64, 32])")), ToolInput(tag="in_cover_filters", input_type=Int(optional=True), prefix="--cover-filters", doc=InputDocumentation(doc="Number of filters for convolution layer of coverage\nnetwork. (default: 16)")), ToolInput(tag="in_cover_kernel", input_type=Int(optional=True), prefix="--cover-kernel", doc=InputDocumentation(doc="Kernel size for convolution layer of coverage network.\n(default: 4)")), ToolInput(tag="in_cover_stride", input_type=Int(optional=True), prefix="--cover-stride", doc=InputDocumentation(doc="Convolution stride for convolution layer of coverage\nnetwork. (default: 2)")), ToolInput(tag="in_merge_neurons", input_type=Int(optional=True), prefix="--merge-neurons", doc=InputDocumentation(doc="Number of neurons for the merging layer (x1) (default:\n32)")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="k-mer size for composition vector (default: 4)")), ToolInput(tag="in_no_rc", input_type=Boolean(optional=True), prefix="--no-rc", doc=InputDocumentation(doc="Do not add the reverse complement k-mer occurrences to\nthe composition vector. (default: False)")), ToolInput(tag="in_w_size", input_type=Int(optional=True), prefix="--wsize", doc=InputDocumentation(doc="Smoothing window size for coverage vector (default:\n64)")), ToolInput(tag="in_w_step", input_type=Int(optional=True), prefix="--wstep", doc=InputDocumentation(doc="Subsampling step for coverage vector (default: 32)")), ToolInput(tag="in_n_frags", input_type=Int(optional=True), prefix="--n-frags", doc=InputDocumentation(doc="Number of fragments to split the contigs for the\nclustering phase (default: 30)")), ToolInput(tag="in_max_neighbors", input_type=Int(optional=True), prefix="--max-neighbors", doc=InputDocumentation(doc="Maximum number of neighbors to consider to compute the\nadjacency matrix. (default: 250)")), ToolInput(tag="in_vote_threshold", input_type=String(optional=True), prefix="--vote-threshold", doc=InputDocumentation(doc="When this parameter is not set, contig-contig edges\nare computed by summing the probability between all\npairwise fragments between them.Otherwise, adopt a\nvoting strategy and sets a hard-threshold on the\nprobabilityfrom each pairwise comparison. (default:\nNone)")), ToolInput(tag="in_algorithm", input_type=String(optional=True), prefix="--algorithm", doc=InputDocumentation(doc="Algorithm for clustering the contig-contig graph.\nNote: the number of cluster is required if 'spectral'\nis chosen. (default: leiden)")), ToolInput(tag="in_theta", input_type=Float(optional=True), prefix="--theta", doc=InputDocumentation(doc="(leiden) Minimum percent of edges between two contigs\nto form an edge between them (default: 0.8)")), ToolInput(tag="in_gamma_one", input_type=Int(optional=True), prefix="--gamma1", doc=InputDocumentation(doc="(leiden) CPM optimization value for the first run of\nthe Leiden clustering (default: 0.3)")), ToolInput(tag="in_gamma_two", input_type=Int(optional=True), prefix="--gamma2", doc=InputDocumentation(doc="(leiden) CPM optimization value for the second run of\nthe Leiden clustering (default: 0.4)")), ToolInput(tag="in_n_clusters", input_type=Int(optional=True), prefix="--n-clusters", doc=InputDocumentation(doc="(spectral clustering) Maximum number of clusters\n(default: None)")), ToolInput(tag="in_recruit_small_contigs", input_type=Boolean(optional=True), prefix="--recruit-small-contigs", doc=InputDocumentation(doc="Salvage short contigs (<2048) (default: False)")), ToolInput(tag="in_fragment_length", input_type=Int(optional=True), prefix="--fragment-length", doc=InputDocumentation(doc="Length of contig fragments in bp. Default is half the\nminimum contig length. (default: -1)")), ToolInput(tag="in_features", input_type=String(optional=True), prefix="--features", doc=InputDocumentation(doc="[{coverage,composition} ...]\nFeatures for binning (composition, coverage, or both)\n(default: ['coverage', 'composition'])\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Path to output directory (default: output)")), ToolOutput(tag="out_continue", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_continue", type_hint=File()), doc=OutputDocumentation(doc="Start from last checkpoint. The output directory needs\nto be the same. (default: False)"))], container="quay.io/biocontainers/coconet-binning:1.1.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Coconet_Run_V0_1_0().translate("wdl")

