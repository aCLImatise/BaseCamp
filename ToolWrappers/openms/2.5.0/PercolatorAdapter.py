from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Percolatoradapter_V0_1_0 = CommandToolBuilder(tool="PercolatorAdapter", base_command=["PercolatorAdapter"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="Input file(s) (valid formats: 'mzid', 'idXML')")), ToolInput(tag="in_in_decoy", input_type=File(optional=True), prefix="-in_decoy", doc=InputDocumentation(doc="Input decoy file(s) in case of separate searches (valid formats: 'mzid', 'idXML')")), ToolInput(tag="in_in_osw", input_type=File(optional=True), prefix="-in_osw", doc=InputDocumentation(doc="Input file in OSW format (valid formats: 'OSW')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*                          Output file (valid formats: 'mzid', 'idXML', 'osw')")), ToolInput(tag="in_out_type", input_type=File(optional=True), prefix="-out_type", doc=InputDocumentation(doc="Output file type -- default: determined from file extension or content. (valid: 'mzid', 'idXML', 'osw')")), ToolInput(tag="in_enzyme", input_type=String(optional=True), prefix="-enzyme", doc=InputDocumentation(doc="Type of enzyme: no_enzyme,elastase,pepsin,proteinasek,thermolysin,chymotrypsin,lys-n,lys-c,arg-c,asp-n,glu-c,trypsin,trypsinp (default: 'trypsin' valid: 'no_enzyme', 'elastase', 'pepsin', 'proteinasek', 'thermolysin', 'chymotrypsin', 'lys-n', 'lys-c', 'arg-c', 'asp-n', 'glu-c', 'trypsin', 'trypsinp')")), ToolInput(tag="in_percolator_executable", input_type=File(optional=True), prefix="-percolator_executable", doc=InputDocumentation(doc="*  The Percolator executable. Provide a full or relative path, or make sure it can be found in your PATH environment.")), ToolInput(tag="in_peptide_level_f_drs", input_type=Boolean(optional=True), prefix="-peptide-level-fdrs", doc=InputDocumentation(doc="Calculate peptide-level FDRs instead of PSM-level FDRs.")), ToolInput(tag="in_protein_level_f_drs", input_type=Boolean(optional=True), prefix="-protein-level-fdrs", doc=InputDocumentation(doc="Use the picked protein-level FDR to infer protein probabilities. Use the -fasta option and -decoy-pattern to set the Fasta file and decoy pattern.")), ToolInput(tag="in_osw_level", input_type=Int(optional=True), prefix="-osw_level", doc=InputDocumentation(doc="OSW: Either 'ms1', 'ms2' or 'transition'; the data level selected for scoring. (default: 'ms2')")), ToolInput(tag="in_score_type", input_type=String(optional=True), prefix="-score_type", doc=InputDocumentation(doc="Type of the peptide main score (default: 'q-value' valid: 'q-value', 'pep', 'svm')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*                          Output file (valid formats: 'mzid', 'idXML', 'osw')")), ToolOutput(tag="out_out_type", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_type", type_hint=File()), doc=OutputDocumentation(doc="Output file type -- default: determined from file extension or content. (valid: 'mzid', 'idXML', 'osw')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Percolatoradapter_V0_1_0().translate("wdl", allow_empty_container=True)

