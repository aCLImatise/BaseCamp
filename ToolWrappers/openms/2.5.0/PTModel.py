from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, String, Int, Boolean

Ptmodel_V0_1_0 = CommandToolBuilder(tool="PTModel", base_command=["PTModel"], inputs=[ToolInput(tag="in_in_positive", input_type=File(optional=True), prefix="-in_positive", doc=InputDocumentation(doc="*            Input file with positive examples (valid formats: 'idXML')")), ToolInput(tag="in_in_negative", input_type=File(optional=True), prefix="-in_negative", doc=InputDocumentation(doc="*            Input file with negative examples (valid formats: 'idXML')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*                    Output file: the model in libsvm format (valid formats: 'txt')")), ToolInput(tag="in_penalty_parameter_svm", input_type=Float(optional=True), prefix="-c", doc=InputDocumentation(doc="The penalty parameter of the svm (default: '1.0')")), ToolInput(tag="in_svm_type", input_type=String(optional=True), prefix="-svm_type", doc=InputDocumentation(doc="The type of the svm (NU_SVC or C_SVC) (default: 'C_SVC' valid: 'NU_SVC', 'C_SVC')")), ToolInput(tag="in_nu", input_type=Float(optional=True), prefix="-nu", doc=InputDocumentation(doc="The nu parameter [0..1] of the svm (for nu-SVR) (default: '0.5' min: '0.0' max: '1.0')")), ToolInput(tag="in_kernel_type", input_type=String(optional=True), prefix="-kernel_type", doc=InputDocumentation(doc="The kernel type of the svm (default: 'OLIGO' valid: 'LINEAR', 'RBF', 'POLY', 'OLIGO')")), ToolInput(tag="in_degree", input_type=Int(optional=True), prefix="-degree", doc=InputDocumentation(doc="The degree parameter of the kernel function of the svm (POLY kernel) (default: '1' min: '1')")), ToolInput(tag="in_border_length", input_type=Int(optional=True), prefix="-border_length", doc=InputDocumentation(doc="Length of the POBK (default: '22' min: '1')")), ToolInput(tag="in_k_mer_length", input_type=Int(optional=True), prefix="-k_mer_length", doc=InputDocumentation(doc="K_mer length of the POBK (default: '1' min: '1')")), ToolInput(tag="in_sigma", input_type=Float(optional=True), prefix="-sigma", doc=InputDocumentation(doc="Sigma of the POBK (default: '5.0')")), ToolInput(tag="in_max_positive_count", input_type=Int(optional=True), prefix="-max_positive_count", doc=InputDocumentation(doc="Quantity of positive samples for training (randomly chosen if smaller than available quantity) (default: '1000' min: '1')")), ToolInput(tag="in_max_negative_count", input_type=Int(optional=True), prefix="-max_negative_count", doc=InputDocumentation(doc="Quantity of positive samples for training (randomly chosen if smaller than available quantity) (default: '1000' min: '1')")), ToolInput(tag="in_redundant", input_type=Boolean(optional=True), prefix="-redundant", doc=InputDocumentation(doc="If the input sets are redundant and the redundant peptides should occur more than once in the training set, this flag has to be set")), ToolInput(tag="in_additive_cv", input_type=Boolean(optional=True), prefix="-additive_cv", doc=InputDocumentation(doc="If the step sizes should be interpreted additively (otherwise the actual value is multiplied with the step size to get the new value")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*                    Output file: the model in libsvm format (valid formats: 'txt')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ptmodel_V0_1_0().translate("wdl", allow_empty_container=True)

