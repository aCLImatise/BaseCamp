from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int

Filefilter_V0_1_0 = CommandToolBuilder(tool="FileFilter", base_command=["FileFilter"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*                                                  Input file (valid formats: 'mzML', 'featureXML', 'consensusXML')")), ToolInput(tag="in_in_type", input_type=File(optional=True), prefix="-in_type", doc=InputDocumentation(doc="Input file type -- default: determined from file extension or content (valid: 'mzML', 'featureXML', 'consensusXML')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*                                                 Output file (valid formats: 'mzML', 'featureXML', 'consensusXML')")), ToolInput(tag="in_out_type", input_type=File(optional=True), prefix="-out_type", doc=InputDocumentation(doc="Output file type -- default: determined from file extension or content (valid: 'mzML', 'featureXML', 'consensusXML')")), ToolInput(tag="in_rt", input_type=Boolean(optional=True), prefix="-rt", doc=InputDocumentation(doc="[min]:[max]                                              Retention time range to extract (default: ':')")), ToolInput(tag="in_mz", input_type=Boolean(optional=True), prefix="-mz", doc=InputDocumentation(doc="[min]:[max]                                              M/z range to extract (applies to ALL ms levels!) (default: ':')")), ToolInput(tag="in_int", input_type=Boolean(optional=True), prefix="-int", doc=InputDocumentation(doc="[min]:[max]                                             Intensity range to extract (default: ':')")), ToolInput(tag="in_sort", input_type=Boolean(optional=True), prefix="-sort", doc=InputDocumentation(doc="Sorts the output according to RT and m/z.")), ToolInput(tag="in_feature", input_type=Boolean(optional=True), prefix="-feature", doc=InputDocumentation(doc=":q [min]:[max]                                       Overall quality range to extract [0:1] (default: ':')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*                                                 Output file (valid formats: 'mzML', 'featureXML', 'consensusXML')")), ToolOutput(tag="out_out_type", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_type", type_hint=File()), doc=OutputDocumentation(doc="Output file type -- default: determined from file extension or content (valid: 'mzML', 'featureXML', 'consensusXML')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Filefilter_V0_1_0().translate("wdl", allow_empty_container=True)

