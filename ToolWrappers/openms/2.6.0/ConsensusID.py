from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int

Consensusid_V0_1_0 = CommandToolBuilder(tool="ConsensusID", base_command=["ConsensusID"], inputs=[ToolInput(tag="in_in", input_type=Boolean(optional=True), prefix="-in", doc=InputDocumentation(doc="<file(s)>*                    Input file (valid formats: 'idXML', 'featureXML', 'consensusXML')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*                      Output file (valid formats: 'idXML', 'featureXML', 'consensusXML')")), ToolInput(tag="in_rt_delta", input_type=Int(optional=True), prefix="-rt_delta", doc=InputDocumentation(doc="[idXML input only] Maximum allowed retention time deviation between identifications belonging to the same spectrum. (default: '0.1' min: '0.0')")), ToolInput(tag="in_mz_delta", input_type=Int(optional=True), prefix="-mz_delta", doc=InputDocumentation(doc="[idXML input only] Maximum allowed precursor m/z deviation between identifications belonging to the same spectrum. (default: '0.1' min: '0.0')")), ToolInput(tag="in_per_spectrum", input_type=Boolean(optional=True), prefix="-per_spectrum", doc=InputDocumentation(doc="(only idXML) if set, mapping will be done based on exact matching of originating mzml file and spectrum_ref")), ToolInput(tag="in_algorithm", input_type=Int(optional=True), prefix="-algorithm", doc=InputDocumentation(doc="Algorithm used for consensus scoring.\n* PEPMatrix: Scoring based on posterior error probabilities (PEPs) and peptide sequence similarities (scored by a substitution matrix). Requires PEPs as scores.\n* PEPIons: Scoring based on posterior error probabilities (PEPs) and fragment ion similarities ('shared peak count'). Requires PEPs as scores.\n* best: For each peptide ID, use the best score of any search engine as the consensus score. Requires the same score type in all ID runs.\n* worst: For each peptide ID, use the worst score of any search engine as the consensus score. Requires the same score type in all ID runs.\n* average:  For each peptide ID, use the average score of all search engines as the consensus. Requires the same score type in all ID runs.\n* ranks: Calculates a consensus score based on the ranks of peptide IDs in the results of different search engines. The final score is in the range (0, 1], with 1 being the best score. No requirements about score types. (default: 'PEPMatrix' valid: 'PEPMatrix', 'PEPIons', 'best', 'worst', 'average', 'ranks')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*                      Output file (valid formats: 'idXML', 'featureXML', 'consensusXML')"))], container="quay.io/biocontainers/openms:2.6.0--h4afb90d_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Consensusid_V0_1_0().translate("wdl")

