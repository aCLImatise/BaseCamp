from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int

Featurefindermetaboident_V0_1_0 = CommandToolBuilder(tool="FeatureFinderMetaboIdent", base_command=["FeatureFinderMetaboIdent"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*                   Input file: LC-MS raw data (valid formats: 'mzML')")), ToolInput(tag="in_id", input_type=File(optional=True), prefix="-id", doc=InputDocumentation(doc="*                   Input file: Metabolite identifications (valid formats: 'tsv')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*                  Output file: Features (valid formats: 'featureXML')")), ToolInput(tag="in_lib_out", input_type=File(optional=True), prefix="-lib_out", doc=InputDocumentation(doc="Output file: Assay library (valid formats: 'traML')")), ToolInput(tag="in_chrom_out", input_type=File(optional=True), prefix="-chrom_out", doc=InputDocumentation(doc="Output file: Chromatograms (valid formats: 'mzML')")), ToolInput(tag="in_candidates_out", input_type=File(optional=True), prefix="-candidates_out", doc=InputDocumentation(doc="Output file: Feature candidates (before filtering and model fitting) (valid formats: 'featureXML')")), ToolInput(tag="in_traf_o_out", input_type=File(optional=True), prefix="-trafo_out", doc=InputDocumentation(doc="Output file: Retention times (expected vs. observed) (valid formats: 'trafoXML')")), ToolInput(tag="in_detect", input_type=Boolean(optional=True), prefix="-detect", doc=InputDocumentation(doc=":peak_width <value>    Expected elution peak width in seconds, for smoothing (Gauss filter). Also determines the RT extration window, unless set explicitly via 'extract:rt_window'. (default: '5.0' min: '0.0')")), ToolInput(tag="in_model", input_type=Boolean(optional=True), prefix="-model", doc=InputDocumentation(doc=":type <choice>          Type of elution model to fit to features (default: 'symmetric' valid: 'symmetric', 'asymmetric', 'none')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*                  Output file: Features (valid formats: 'featureXML')")), ToolOutput(tag="out_lib_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_lib_out", type_hint=File()), doc=OutputDocumentation(doc="Output file: Assay library (valid formats: 'traML')")), ToolOutput(tag="out_chrom_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_chrom_out", type_hint=File()), doc=OutputDocumentation(doc="Output file: Chromatograms (valid formats: 'mzML')")), ToolOutput(tag="out_candidates_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_candidates_out", type_hint=File()), doc=OutputDocumentation(doc="Output file: Feature candidates (before filtering and model fitting) (valid formats: 'featureXML')")), ToolOutput(tag="out_traf_o_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_traf_o_out", type_hint=File()), doc=OutputDocumentation(doc="Output file: Retention times (expected vs. observed) (valid formats: 'trafoXML')"))], container="quay.io/biocontainers/openms:2.6.0--h4afb90d_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Featurefindermetaboident_V0_1_0().translate("wdl")

