from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int

Topas_V0_1_0 = CommandToolBuilder(tool="topas", base_command=["topas"], inputs=[ToolInput(tag="in_validate_fast_a", input_type=String(), position=0, doc=InputDocumentation(doc="validate a fasta file")), ToolInput(tag="in_correct_fast_a", input_type=String(), position=1, doc=InputDocumentation(doc="correct a fasta file")), ToolInput(tag="in_index_fast_a", input_type=String(), position=2, doc=InputDocumentation(doc="generate fasta index from a fasta file")), ToolInput(tag="in_tabulate_fast_a", input_type=String(), position=3, doc=InputDocumentation(doc="tabulates a fasta file into: HEADER TAB SEQUENCE")), ToolInput(tag="in_extract_fast_a", input_type=String(), position=4, doc=InputDocumentation(doc="sort a fasta file and return only the fasta sequences which match a given pattern")), ToolInput(tag="in_primary_base_fast_a", input_type=String(), position=5, doc=InputDocumentation(doc="crawl through every sequence in a fasta file and replace secondary bases with primary ones")), ToolInput(tag="in_validate_gff_three", input_type=Int(), position=6, doc=InputDocumentation(doc="validate a gff3 file")), ToolInput(tag="in_filter_gff_three", input_type=Int(), position=7, doc=InputDocumentation(doc="a GFF3 file can be filtered by seqid + range, source, type, score, strand, phase, attribute")), ToolInput(tag="in_sort_gff_three", input_type=Int(), position=8, doc=InputDocumentation(doc="sorts a GFF3 File first by SeqId, then by Start/End")), ToolInput(tag="in_format_fast_q", input_type=String(), position=9, doc=InputDocumentation(doc="format the sequence string line(s) and the quality string line(s) of a fastq file to a certain length")), ToolInput(tag="in_validate_fast_q", input_type=String(), position=10, doc=InputDocumentation(doc="validate a fastq file")), ToolInput(tag="in_index_vcf", input_type=String(), position=11, doc=InputDocumentation(doc="generate vcf index from a vcf file")), ToolInput(tag="in_filter_vcf", input_type=String(), position=12, doc=InputDocumentation(doc="a VCF file can be filtered by CHROM:START-END, ID and by INFO (SNP or INDEL)")), ToolInput(tag="in_annotate_vcf", input_type=String(), position=13, doc=InputDocumentation(doc="annotate a vcf file by reference of a vcf CHROM:POSITION to SEQID:START-END of a gff3 file")), ToolInput(tag="in_analyse_vcf", input_type=String(), position=0, doc=InputDocumentation(doc="analyse a given vcf file by given windows")), ToolInput(tag="in_gen_cons", input_type=String(), position=1, doc=InputDocumentation(doc="generate a consensus sequence from a GATK Unified Genotyper generated VCF file")), ToolInput(tag="in_join_expr_tables", input_type=String(), position=2, doc=InputDocumentation(doc="join expression tables together (based on gene names)")), ToolInput(tag="in_norm_expr_table", input_type=String(), position=3, doc=InputDocumentation(doc="normalize expression table")), ToolInput(tag="in_phy_cc", input_type=String(), position=4, doc=InputDocumentation(doc="crawl through a given SNP table in tsv format and calculate simple statistics "))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Topas_V0_1_0().translate("wdl", allow_empty_container=True)

