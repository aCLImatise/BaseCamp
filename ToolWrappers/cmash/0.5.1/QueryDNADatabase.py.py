from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, Float, File, String

Querydnadatabase_Py_V0_1_0 = CommandToolBuilder(tool="QueryDNADatabase.py", base_command=["QueryDNADatabase.py"], inputs=[ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use (default: 8)")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Force creation of new NodeGraph. (default: False)")), ToolInput(tag="in_fp_rate", input_type=Float(optional=True), prefix="--fp_rate", doc=InputDocumentation(doc="False positive rate. (default: 0.0001)")), ToolInput(tag="in_containment_threshold", input_type=Float(optional=True), prefix="--containment_threshold", doc=InputDocumentation(doc="Only return results with containment index above this\nvalue (default: 0.02)")), ToolInput(tag="in_confidence", input_type=Float(optional=True), prefix="--confidence", doc=InputDocumentation(doc="Desired probability that all results were returned\nwith containment index above threshold [-ct] (default:\n0.95)")), ToolInput(tag="in_node_graph", input_type=File(optional=True), prefix="--node_graph", doc=InputDocumentation(doc="NodeGraph/bloom filter location. Used if it exists; if\nnot, one will be created and put in the same directory\nas the specified output CSV file. (default: None)")), ToolInput(tag="in_base_name", input_type=File(optional=True), prefix="--base_name", doc=InputDocumentation(doc="Flag to indicate that only the base names (not the\nfull path) should be saved in the output CSV file\n(default: False)")), ToolInput(tag="in_intersect_node_graph", input_type=Boolean(optional=True), prefix="--intersect_nodegraph", doc=InputDocumentation(doc="Option to only insert query k-mers in bloom filter if\nthey appear anywhere in the training database. Note\nthat the Jaccard estimates will now be J(query\nintersect union_i training_i, training_i) instead of\nJ(query, training_i), but will use significantly less\nspace. (default: False)\n")), ToolInput(tag="in_in_file", input_type=String(), position=0, doc=InputDocumentation(doc="Input file: FASTQ/A file (can be gzipped).")), ToolInput(tag="in_training_data", input_type=String(), position=1, doc=InputDocumentation(doc="Training/reference data (HDF5 file created by\nMakeTrainingDatabase.py)")), ToolInput(tag="in_out_csv", input_type=String(), position=2, doc=InputDocumentation(doc="Output CSV file"))], outputs=[ToolOutput(tag="out_node_graph", output_type=File(optional=True), selector=InputSelector(input_to_select="in_node_graph", type_hint=File()), doc=OutputDocumentation(doc="NodeGraph/bloom filter location. Used if it exists; if\nnot, one will be created and put in the same directory\nas the specified output CSV file. (default: None)")), ToolOutput(tag="out_base_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_base_name", type_hint=File()), doc=OutputDocumentation(doc="Flag to indicate that only the base names (not the\nfull path) should be saved in the output CSV file\n(default: False)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Querydnadatabase_Py_V0_1_0().translate("wdl", allow_empty_container=True)

