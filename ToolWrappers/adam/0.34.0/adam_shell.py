from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean, Directory

Adam_Shell_V0_1_0 = CommandToolBuilder(tool="adam_shell", base_command=["adam-shell"], inputs=[ToolInput(tag="in_preload_file_enforcing", input_type=File(optional=True), prefix="-I", doc=InputDocumentation(doc="preload <file>, enforcing line-by-line interpretation")), ToolInput(tag="in_master", input_type=Int(optional=True), prefix="--master", doc=InputDocumentation(doc="spark://host:port, mesos://host:port, yarn,\nk8s://https://host:port, or local (Default: local[*]).")), ToolInput(tag="in_deploy_mode", input_type=String(optional=True), prefix="--deploy-mode", doc=InputDocumentation(doc="Whether to launch the driver program locally ('client') or\non one of the worker machines inside the cluster ('cluster')\n(Default: client).")), ToolInput(tag="in_class", input_type=String(optional=True), prefix="--class", doc=InputDocumentation(doc="Your application's main class (for Java / Scala apps).")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="--name", doc=InputDocumentation(doc="A name of your application.")), ToolInput(tag="in_jars", input_type=String(optional=True), prefix="--jars", doc=InputDocumentation(doc="Comma-separated list of jars to include on the driver\nand executor classpaths.")), ToolInput(tag="in_packages", input_type=Boolean(optional=True), prefix="--packages", doc=InputDocumentation(doc="Comma-separated list of maven coordinates of jars to include\non the driver and executor classpaths. Will search the local\nmaven repo, then maven central and any additional remote\nrepositories given by --repositories. The format for the\ncoordinates should be groupId:artifactId:version.")), ToolInput(tag="in_exclude_packages", input_type=Boolean(optional=True), prefix="--exclude-packages", doc=InputDocumentation(doc="Comma-separated list of groupId:artifactId, to exclude while\nresolving the dependencies provided in --packages to avoid\ndependency conflicts.")), ToolInput(tag="in_repositories", input_type=Boolean(optional=True), prefix="--repositories", doc=InputDocumentation(doc="Comma-separated list of additional remote repositories to\nsearch for the maven coordinates given with --packages.")), ToolInput(tag="in_py_files", input_type=String(optional=True), prefix="--py-files", doc=InputDocumentation(doc="Comma-separated list of .zip, .egg, or .py files to place\non the PYTHONPATH for Python apps.")), ToolInput(tag="in_files", input_type=File(optional=True), prefix="--files", doc=InputDocumentation(doc="Comma-separated list of files to be placed in the working\ndirectory of each executor. File paths of these files\nin executors can be accessed via SparkFiles.get(fileName).")), ToolInput(tag="in_archives", input_type=Directory(optional=True), prefix="--archives", doc=InputDocumentation(doc="Comma-separated list of archives to be extracted into the\nworking directory of each executor.")), ToolInput(tag="in_conf", input_type=String(optional=True), prefix="--conf", doc=InputDocumentation(doc="=VALUE       Arbitrary Spark configuration property.")), ToolInput(tag="in_properties_file", input_type=File(optional=True), prefix="--properties-file", doc=InputDocumentation(doc="Path to a file from which to load extra properties. If not\nspecified, this will look for conf/spark-defaults.conf.")), ToolInput(tag="in_driver_memory", input_type=Int(optional=True), prefix="--driver-memory", doc=InputDocumentation(doc="Memory for driver (e.g. 1000M, 2G) (Default: 1024M).")), ToolInput(tag="in_driver_java_options", input_type=Boolean(optional=True), prefix="--driver-java-options", doc=InputDocumentation(doc="Extra Java options to pass to the driver.")), ToolInput(tag="in_driver_library_path", input_type=Boolean(optional=True), prefix="--driver-library-path", doc=InputDocumentation(doc="Extra library path entries to pass to the driver.")), ToolInput(tag="in_driver_class_path", input_type=Boolean(optional=True), prefix="--driver-class-path", doc=InputDocumentation(doc="Extra class path entries to pass to the driver. Note that\njars added with --jars are automatically included in the\nclasspath.")), ToolInput(tag="in_executor_memory", input_type=Int(optional=True), prefix="--executor-memory", doc=InputDocumentation(doc="Memory per executor (e.g. 1000M, 2G) (Default: 1G).")), ToolInput(tag="in_proxy_user", input_type=String(optional=True), prefix="--proxy-user", doc=InputDocumentation(doc="User to impersonate when submitting the application.\nThis argument does not work with --principal / --keytab.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print additional debug output.")), ToolInput(tag="in_driver_cores", input_type=Int(optional=True), prefix="--driver-cores", doc=InputDocumentation(doc="Number of cores used by the driver, only in cluster mode\n(Default: 1).")), ToolInput(tag="in_supervise", input_type=Boolean(optional=True), prefix="--supervise", doc=InputDocumentation(doc="If given, restarts the driver on failure.")), ToolInput(tag="in_kill", input_type=String(optional=True), prefix="--kill", doc=InputDocumentation(doc="If given, kills the driver specified.")), ToolInput(tag="in_status", input_type=String(optional=True), prefix="--status", doc=InputDocumentation(doc="If given, requests the status of the driver specified.")), ToolInput(tag="in_total_executor_cores", input_type=Int(optional=True), prefix="--total-executor-cores", doc=InputDocumentation(doc="Total cores for all executors.")), ToolInput(tag="in_executor_cores", input_type=Int(optional=True), prefix="--executor-cores", doc=InputDocumentation(doc="Number of cores used by each executor. (Default: 1 in\nYARN and K8S modes, or all available cores on the worker\nin standalone mode).")), ToolInput(tag="in_num_executors", input_type=Int(optional=True), prefix="--num-executors", doc=InputDocumentation(doc="Number of executors to launch (Default: 2).\nIf dynamic allocation is enabled, the initial number of\nexecutors will be at least NUM.")), ToolInput(tag="in_principal", input_type=String(optional=True), prefix="--principal", doc=InputDocumentation(doc="Principal to be used to login to KDC.")), ToolInput(tag="in_keytab", input_type=File(optional=True), prefix="--keytab", doc=InputDocumentation(doc="The full path to the file that contains the keytab for the\nprincipal specified above.")), ToolInput(tag="in_queue", input_type=String(optional=True), prefix="--queue", doc=InputDocumentation(doc="The YARN queue to submit to (Default: 'default')."))], outputs=[], container="quay.io/biocontainers/adam:0.34.0--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Adam_Shell_V0_1_0().translate("wdl")

