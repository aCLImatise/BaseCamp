from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Satrap_V0_1_0 = CommandToolBuilder(tool="satrap", base_command=["satrap"], inputs=[ToolInput(tag="in_step", input_type=Boolean(optional=True), prefix="-step", doc=InputDocumentation(doc="(vector<int>)     PLEASE SELECT THE DESIRED STEP OF THE ANALYSIS USING '-step' parameter:\n'1' for STEP 1, '2' for STEP 2 etc. For instance the Oases pipeline\nrequires: '-step 1 2'. The steps 3 and 4 are set by default, so the\nomitting of this parameter will erase the previous results in these steps")), ToolInput(tag="in_bin", input_type=Boolean(optional=True), prefix="-bin", doc=InputDocumentation(doc="(string)        Set the directory path where binaries are located [bin/]")), ToolInput(tag="in_tmp_dir", input_type=Boolean(optional=True), prefix="-tmp_dir", doc=InputDocumentation(doc="(string)        Set the temporary directory where results will be saved [tmp/].")), ToolInput(tag="in_max_reads", input_type=Boolean(optional=True), prefix="-max_reads", doc=InputDocumentation(doc="(float)         Max number of reads per analyzed file or files [10]")), ToolInput(tag="in_tags", input_type=Boolean(optional=True), prefix="-tags", doc=InputDocumentation(doc="(string,string)    pair-end tag names for assembling purpose. It enables paired-end\nmanagement (-t1) (tag examples: F3, F5-RNA ...)")), ToolInput(tag="in_tone", input_type=Boolean(optional=True), prefix="-t1", doc=InputDocumentation(doc="(int)          it trims the first sequenced end at 3' (if paired-end) [0]")), ToolInput(tag="in_int_it_trims_second_end", input_type=Boolean(optional=True), prefix="-t2", doc=InputDocumentation(doc="(int)          it trims the second sequenced end at 3' [0]")), ToolInput(tag="in_int_minimum_mean_quality_tolerated", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="(int)          minimum mean quality tolerated for paired_end sequences [15]")), ToolInput(tag="in_len", input_type=Boolean(optional=True), prefix="-len", doc=InputDocumentation(doc="(int)          minimum read size after trimming [30]")), ToolInput(tag="in_mate_pair", input_type=Boolean(optional=True), prefix="-mate-pair", doc=InputDocumentation(doc="The sequences coming from mate pair libraries will be\nmanaged as paired-end (for assembling purpose) [disabled]")), ToolInput(tag="in_velvet_path", input_type=Boolean(optional=True), prefix="-velvet_path", doc=InputDocumentation(doc="(string)       path to velvet binaries - example: path/velvet/")), ToolInput(tag="in_oases_path", input_type=Boolean(optional=True), prefix="-oases_path", doc=InputDocumentation(doc="(string)       path to Oases binary - example: path/oases/")), ToolInput(tag="in_strand_specific", input_type=Boolean(optional=True), prefix="-strand_specific", doc=InputDocumentation(doc="Velvet will be set considering specific strand")), ToolInput(tag="in_km_er_set", input_type=Boolean(optional=True), prefix="-kmer_set", doc=InputDocumentation(doc="(vector<int>)    Set the kmer to be considered. [23 25 27 29 31]")), ToolInput(tag="in_oases_km_er", input_type=Boolean(optional=True), prefix="-oases_kmer", doc=InputDocumentation(doc="(int)          Oases kmer parameter [27]")), ToolInput(tag="in_int_it_trims_sequences", input_type=Boolean(optional=True), prefix="-T2", doc=InputDocumentation(doc="(int)          it trims sequences at 3' end [0]")), ToolInput(tag="in_int_minimum_mean_quality_reads", input_type=Boolean(optional=True), prefix="-Q", doc=InputDocumentation(doc="(int)          minimum mean quality for reads [9]")), ToolInput(tag="in_int_minimum_contig", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="(int)          Minimum contig length [100]")), ToolInput(tag="in_float_maximum_fraction", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="(float)         Maximum tolerated fraction of Ns for each translated contig[1].")), ToolInput(tag="in_int_minimum_coverage_required", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="(int)          Minimum coverage required to operate the assembly correction\nIf this parameter is used -z will be not considered.")), ToolInput(tag="in_erode", input_type=Boolean(optional=True), prefix="-erode", doc=InputDocumentation(doc="(int)          Minimum coverage considered to erode contig ends [2]")), ToolInput(tag="in_float_zscore_required", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="(float)         z-score required to calculate the coverage threshold basing on\nthe statistical analysis of the sequence coverage [3]. Low values\nare more conservative when the error correction is applied. As\nconsequence of this fact Ns will be introduced around color\nincoherence not supported by enough sequence coverage.")), ToolInput(tag="in_erosion", input_type=Boolean(optional=True), prefix="-erosion", doc=InputDocumentation(doc="it doesn't erodes contig ends in any way")), ToolInput(tag="in_no_clustering", input_type=Boolean(optional=True), prefix="-no_clustering", doc=InputDocumentation(doc="For DNA-seq assembly. It doesn't considers the clustering analysis"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Satrap_V0_1_0().translate("wdl", allow_empty_container=True)

