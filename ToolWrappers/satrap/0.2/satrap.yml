!Command
command:
- satrap
positional: []
named:
- !Flag
  description: "(vector<int>)     PLEASE SELECT THE DESIRED STEP OF THE ANALYSIS USING\
    \ \"-step\" parameter:\n\"1\" for STEP 1, \"2\" for STEP 2 etc. For instance the\
    \ Oases pipeline\nrequires: \"-step 1 2\". The steps 3 and 4 are set by default,\
    \ so the\nomitting of this parameter will erase the previous results in these\
    \ steps"
  synonyms:
  - -step
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (string)        Set the directory path where binaries are located [bin/]
  synonyms:
  - -bin
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (string)        Set the temporary directory where results will be saved
    [tmp/].
  synonyms:
  - -tmp_dir
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (float)         Max number of reads per analyzed file or files [10]
  synonyms:
  - -max_reads
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(string,string)    pair-end tag names for assembling purpose. It enables\
    \ paired-end\nmanagement (-t1) (tag examples: F3, F5-RNA ...)"
  synonyms:
  - -tags
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (int)          it trims the first sequenced end at 3' (if paired-end)
    [0]
  synonyms:
  - -t1
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (int)          it trims the second sequenced end at 3' [0]
  synonyms:
  - -t2
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (int)          minimum mean quality tolerated for paired_end sequences
    [15]
  synonyms:
  - -q
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (int)          minimum read size after trimming [30]
  synonyms:
  - -len
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "The sequences coming from mate pair libraries will be\nmanaged as\
    \ paired-end (for assembling purpose) [disabled]"
  synonyms:
  - -mate-pair
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '(string)       path to velvet binaries - example: path/velvet/'
  synonyms:
  - -velvet_path
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '(string)       path to Oases binary - example: path/oases/'
  synonyms:
  - -oases_path
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Velvet will be set considering specific strand
  synonyms:
  - -strand_specific
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (vector<int>)    Set the kmer to be considered. [23 25 27 29 31]
  synonyms:
  - -kmer_set
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (int)          Oases kmer parameter [27]
  synonyms:
  - -oases_kmer
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (int)          it trims sequences at 3' end [0]
  synonyms:
  - -T2
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (int)          minimum mean quality for reads [9]
  synonyms:
  - -Q
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (int)          Minimum contig length [100]
  synonyms:
  - -l
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (float)         Maximum tolerated fraction of Ns for each translated
    contig[1].
  synonyms:
  - -n
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(int)          Minimum coverage required to operate the assembly correction\n\
    If this parameter is used -z will be not considered."
  synonyms:
  - -c
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (int)          Minimum coverage considered to erode contig ends [2]
  synonyms:
  - -erode
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "(float)         z-score required to calculate the coverage threshold\
    \ basing on\nthe statistical analysis of the sequence coverage [3]. Low values\n\
    are more conservative when the error correction is applied. As\nconsequence of\
    \ this fact Ns will be introduced around color\nincoherence not supported by enough\
    \ sequence coverage."
  synonyms:
  - -z
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: it doesn't erodes contig ends in any way
  synonyms:
  - -erosion
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: For DNA-seq assembly. It doesn't considers the clustering analysis
  synonyms:
  - -no_clustering
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\n\nSATRAP - a Solid Assembly TRAnslator Program\nVersion 0.1 - 10/8/13\n\
  \nUsage example :  bin/satrap -step 3 4 -reads_path directory/ -file_esten .csfastq\
  \ \\\n                            -fasta double_encoded_assembly\n\n---------------\n\
  GENERAL SETTING\n---------------\n   (1) There are 2 possible situations. In the\
  \ first one the SOLiD raw data must be assembled to produce a \n       de novo transcriptome\
  \ assembly. In this case you can consider all steps of the pipeline using \n   \
  \    (-step 1 2 3 4) parameter. In the second situation a color space assembly produced\
  \ in a previous time\n       must be translated. In this case only the steps 3 and\
  \ 4 are required and you can use (-step 3 4).\n   (2) If step 1 or 3 are considered\
  \ you need to create a directory containing the csfastq files or \n       the symbolic\
  \ links to these files and then you should pass the path to the \"-reads_path\"\
  \ parameter.\n       If your data are in the native color space format you can use\
  \ the program \"csfasta_to_fastq\" inside\n       this package to convert them in\
  \ the csfastq format. Example of conversion:\n       \"csfasta_fastq -csfasta reads_file\
  \ -qual quality_file > DIR/reads.csfastq\"\n\n-step                (vector<int>)\
  \     PLEASE SELECT THE DESIRED STEP OF THE ANALYSIS USING \"-step\" parameter:\n\
  \                                       \"1\" for STEP 1, \"2\" for STEP 2 etc.\
  \ For instance the Oases pipeline\n                                       requires:\
  \ \"-step 1 2\". The steps 3 and 4 are set by default, so the\n                \
  \                       omitting of this parameter will erase the previous results\
  \ in these steps\n-bin                   (string)        Set the directory path\
  \ where binaries are located [bin/]\n-tmp_dir               (string)        Set\
  \ the temporary directory where results will be saved [tmp/].\n\n---------------------------------------------------------------\n\
  STEP 1 - HOW TO PRODUCE THE DOUBLE ENCODED READS FOR ASSEMBLING \n---------------------------------------------------------------\n\
  \   (1) Please skips this step if you have just produced a double encoded assembly\
  \ to be translated.\n       This step has the only purpose to produce the double\
  \ encoded reads to be assembled with the\n       assembly pipelines (for instance\
  \ Oases). Basing on the hardware capability, users can tune the amount\n       of\
  \ reads to be assembled also considering quality and trimming. The file 1.de that\
  \ will be saved in \n       the STEP1 directory inside the temporary directory will\
  \ contain the double encoded reads. This file\n       will not be considered for\
  \ translation purpose (see STEP3).\n   (2) You need to create the directory containing\
  \ the csfastq files or the symbolic links to these\n       files and then you should\
  \ pass the directory path to the \"-reads_path\" parameter.\n   (3) You need to\
  \ indicate the extension of the csfastq files with \"-file_esten\" parameter\n\n\
  \       (*) -reads_path (string)        directory containing the SOLiD reads in\
  \ CSFASTQ format\n       (*) -file_esten (string)        extension of read files.\
  \ Example \"-file_esten .csfastq\"\n           -max_reads  (float)         Max number\
  \ of reads per analyzed file or files [10]\n           -tags    (string,string)\
  \    pair-end tag names for assembling purpose. It enables paired-end\n        \
  \                               management (-t1) (tag examples: F3, F5-RNA ...)\n\
  \           -t1          (int)          it trims the first sequenced end at 3' (if\
  \ paired-end) [0]\n           -t2          (int)          it trims the second sequenced\
  \ end at 3' [0]\n           -q           (int)          minimum mean quality tolerated\
  \ for paired_end sequences [15]\n           -len         (int)          minimum\
  \ read size after trimming [30]\n           -mate-pair                  The sequences\
  \ coming from mate pair libraries will be \n                                   \
  \    managed as paired-end (for assembling purpose) [disabled]\n\n----------------------------------\n\
  STEP 2 - OASES PIPELINE PROCESSING\n----------------------------------\n   (1) Please\
  \ skips this step if you have just produced a double encoded assembly to be translated.\n\
  \       In this step the Oases pipeline will be executed. In the bin directory the\
  \ CONFIG file contains\n       the base setting for velvet and oases programs. You\
  \ can edit and modify this file to change the\n       setting but some parameters\
  \ and the output will be managed by the pipeline. Before to run this step\n    \
  \   you must set the paths for Velvet and oases binaries using -velvet_path and\
  \ -oases_path parameters.\n       Remember that Oases and velvet must be compiled\
  \ using the color option. This is the example for\n       Oases: make color 'VELVET_DIR=/full_path_of_velvet_dir/'\
  \ 'MAXKMERLENGTH=63' 'LONGSEQUENCES=1' and\n       this is the other one for Velvet:\
  \ make color 'MAXKMERLENGTH=63' 'LONGSEQUENCES=1'\n\n           -velvet_path (string)\
  \       path to velvet binaries - example: path/velvet/ \n           -oases_path\
  \  (string)       path to Oases binary - example: path/oases/ \n           -strand_specific\
  \            Velvet will be set considering specific strand\n           -kmer_set\
  \  (vector<int>)    Set the kmer to be considered. [23 25 27 29 31]\n          \
  \ -oases_kmer  (int)          Oases kmer parameter [27]\n\n----------------------------------------\n\
  STEP 3 - DOUBLE ENCODING FOR TRANSLATION\n----------------------------------------\n\
  \   (1) Firstly you need to create the directory containing the csfastq files or\
  \ the symbolic links to\n       these files and then you should pass the directory\
  \ path to the \"-reads_path\" parameter.\n       If your data are in the native\
  \ color space format you can use the program \"csfasta_to_fastq\" inside\n     \
  \  this package to convert them in the csfastq format. Example of conversion:\n\
  \       \"csfasta_fastq -csfasta reads_file -qual quality_file > DIR/reads.csfastq\"\
  \n   (2) You need to indicate the extension of the csfastq files with \"-file_esten\"\
  \ parameter\n\n       (*) -reads_path (string)        directory containing the SOLiD\
  \ reads in CSFASTQ format\n       (*) -file_esten (string)        extension of read\
  \ files. Example \"-file_esten .csfastq\"\n           -T2          (int)       \
  \   it trims sequences at 3' end [0]\n           -Q           (int)          minimum\
  \ mean quality for reads [9]\n           -len         (int)          minimum read\
  \ size after trimming [30]\n\n--------------------------------\nSTEP 4 - COLOR SPACE\
  \ TRANSLATION\n--------------------------------\n   (1) it executes the color space\
  \ translation and requires the output of STEP 3 or the path where the\n       color\
  \ space assembly is located (you should set the -fasta parameter)\n\n       (*)\
  \ -fasta      (string)        Double encoded color space assembly in FASTA format.\n\
  \           -l           (int)          Minimum contig length [100]\n          \
  \ -n          (float)         Maximum tolerated fraction of Ns for each translated\
  \ contig[1].\n           -c           (int)          Minimum coverage required to\
  \ operate the assembly correction\n                                       If this\
  \ parameter is used -z will be not considered.\n           -erode       (int)  \
  \        Minimum coverage considered to erode contig ends [2]\n           -z   \
  \       (float)         z-score required to calculate the coverage threshold basing\
  \ on\n                                       the statistical analysis of the sequence\
  \ coverage [3]. Low values\n                                       are more conservative\
  \ when the error correction is applied. As\n                                   \
  \    consequence of this fact Ns will be introduced around color\n             \
  \                          incoherence not supported by enough sequence coverage.\n\
  \           -erosion                    it doesn't erodes contig ends in any way\n\
  \           -no_clustering              For DNA-seq assembly. It doesn't considers\
  \ the clustering analysis\n\n(*) required input.\n\nOUTPUT:\nA temporary directory\
  \ will be created in the directory where the pipeline is running. All results\n\
  will be saved in the \"-tmp_dir\" path. Inside this directory other STEP* directory\
  \ will be created and\nthe translated assembly will be saved into the file STEP4/translated.fa.\
  \ The files STEP4/clusters.* \nrepresent the files produced by the clustering process\
  \ of transcripts. Finally, the file \nSTEP4/translated_clustered_transcrips.fa represents\
  \ the final output file and the file STEP4/STEP4.log\nwill contain some statistics\
  \ about the color space translation.\n\nCONFIG FILE DESCRIPTION:\nImportant notice:\
  \ The row order follow the order of commands! If you erase a row the associated\
  \ command\nwill not be executed. For optimization purpose we strongly suggest to\
  \ modify only the field number 4.\nField 1: Referred analysis step\nField 2: Referred\
  \ loop or sub-step inside the analysis\nField 3: binary name to be executed\nField\
  \ 4: base setting that doesn't need changes during the analysis or loops\n\nAuthor:\
  \ Davide Campagna\n\n"
generated_using: []
