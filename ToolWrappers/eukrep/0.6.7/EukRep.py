from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String

Eukrep_V0_1_0 = CommandToolBuilder(tool="EukRep", base_command=["EukRep"], inputs=[ToolInput(tag="in_input_fasta_file", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="input fasta file")), ToolInput(tag="in_output_file_name", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="output file name")), ToolInput(tag="in_ff", input_type=Boolean(optional=True), prefix="-ff", doc=InputDocumentation(doc="Force overwrite of existing output files")), ToolInput(tag="in_min", input_type=Int(optional=True), prefix="--min", doc=InputDocumentation(doc="Minimum sequence length cutoff for sequences to be included in prediction. Default is 3kb")), ToolInput(tag="in_model", input_type=File(optional=True), prefix="--model", doc=InputDocumentation(doc="Path to an alternate trained linear SVM model. Default is lin_svm_160_3.0.pickle")), ToolInput(tag="in_km_er_len", input_type=Int(optional=True), prefix="--kmer_len", doc=InputDocumentation(doc="Kmer length to use for making predictions. Lengths between 3-7bp are available by default. If using a custom trained model, specify kmer length here.")), ToolInput(tag="in_pro_karya", input_type=File(optional=True), prefix="--prokarya", doc=InputDocumentation(doc="Name of file to output predicted prokaryotic sequences to. Default is to not output prokaryotic sequences.")), ToolInput(tag="in_seq_names", input_type=Boolean(optional=True), prefix="--seq_names", doc=InputDocumentation(doc="Only output fasta headers of identified sequences. Default is full fasta entry")), ToolInput(tag="in_compatable__modelhow", input_type=String(optional=True), prefix="-m", doc=InputDocumentation(doc="Not compatable with --model.\nHow stringent the algorithm is in identifying eukaryotic scaffolds. Strict has a lower false positive rate and true positive rate; vice verso for leneient. Default is balanced.")), ToolInput(tag="in_tie", input_type=Int(optional=True), prefix="--tie", doc=InputDocumentation(doc="Specify how to handle cases where an equal number of a sequences chunks are predicted to be of eukaryotic and prokaryotic origin (Generally occurs infrequently).\neuk = classify as euk\nprok = classify as prok\nrand = assign randomly\nskip = do not classify\nDefault is to classify as eukaryotic.\n"))], outputs=[ToolOutput(tag="out_output_file_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_name", type_hint=File()), doc=OutputDocumentation(doc="output file name")), ToolOutput(tag="out_pro_karya", output_type=File(optional=True), selector=InputSelector(input_to_select="in_pro_karya", type_hint=File()), doc=OutputDocumentation(doc="Name of file to output predicted prokaryotic sequences to. Default is to not output prokaryotic sequences."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Eukrep_V0_1_0().translate("wdl", allow_empty_container=True)

