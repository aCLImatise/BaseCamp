from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, Directory, File, Boolean, Int

Oc_Run_V0_1_0 = CommandToolBuilder(tool="oc_run", base_command=["oc", "run"], inputs=[ToolInput(tag="in_annotators_to_run", input_type=Array(t=String(), optional=True), prefix="-a", doc=InputDocumentation(doc="annotators to run")), ToolInput(tag="in_annotators_to_exclude", input_type=Array(t=String(), optional=True), prefix="-e", doc=InputDocumentation(doc="annotators to exclude")), ToolInput(tag="in_name_cravat_run", input_type=String(optional=True), prefix="-n", doc=InputDocumentation(doc="name of cravat run")), ToolInput(tag="in_directory_output_files", input_type=Directory(optional=True), prefix="-d", doc=InputDocumentation(doc="directory for output files")), ToolInput(tag="in_start_at", input_type=String(optional=True), prefix="--startat", doc=InputDocumentation(doc="starts at given stage")), ToolInput(tag="in_end_at", input_type=String(optional=True), prefix="--endat", doc=InputDocumentation(doc="ends after given stage.")), ToolInput(tag="in_skip", input_type=String(optional=True), prefix="--skip", doc=InputDocumentation(doc="[{converter,mapper,annotator,aggregator,postaggregator,reporter} ...]\nskips given stage(s).")), ToolInput(tag="in_path_conf_file", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc="path to a conf file")), ToolInput(tag="in_cs", input_type=String(optional=True), prefix="--cs", doc=InputDocumentation(doc="configuration string")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="verbose")), ToolInput(tag="in_report_types_omitted", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="[{text,excel} ...]\nreport types. If omitted, default one in cravat.yml is\nused.")), ToolInput(tag="in_lift_over", input_type=String(optional=True), prefix="--liftover", doc=InputDocumentation(doc="reference genome of input. CRAVAT will lift over to\nhg38 if needed.")), ToolInput(tag="in_deletes_existing_database", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="deletes the existing result database and creates a new")), ToolInput(tag="in_note", input_type=File(optional=True), prefix="--note", doc=InputDocumentation(doc="note will be written to the run status file\n(.status.json)")), ToolInput(tag="in_mp", input_type=Int(optional=True), prefix="--mp", doc=InputDocumentation(doc="number of processes to use to run annotators")), ToolInput(tag="in_input_format", input_type=String(optional=True), prefix="--input-format", doc=InputDocumentation(doc="Force input format")), ToolInput(tag="in_temp_files", input_type=Boolean(optional=True), prefix="--temp-files", doc=InputDocumentation(doc="Leave temporary files after run is complete.")), ToolInput(tag="in_write_admin_db", input_type=Boolean(optional=True), prefix="--writeadmindb", doc=InputDocumentation(doc="Write job information to admin db after job completion")), ToolInput(tag="in_jobid", input_type=String(optional=True), prefix="--jobid", doc=InputDocumentation(doc="Job ID for server version")), ToolInput(tag="in_separate_sample", input_type=Boolean(optional=True), prefix="--separatesample", doc=InputDocumentation(doc="Separate variant results by sample")), ToolInput(tag="in_primary_transcript", input_type=Boolean(optional=True), prefix="--primary-transcript", doc=InputDocumentation(doc="[PRIMARY_TRANSCRIPT ...]\n'mane' for MANE transcripts as primary transcripts, or\na path to a file of primary transcripts. MANE is\ndefault.")), ToolInput(tag="in_clean_run", input_type=Boolean(optional=True), prefix="--cleanrun", doc=InputDocumentation(doc="Deletes all previous output files for the job and\ngenerate new ones.")), ToolInput(tag="in_do_not_change_status", input_type=Boolean(optional=True), prefix="--do-not-change-status", doc=InputDocumentation(doc="Job status in status.json will not be changed")), ToolInput(tag="in_module_option", input_type=Boolean(optional=True), prefix="--module-option", doc=InputDocumentation(doc="[MODULE_OPTION ...]\nModule-specific option in module_name.key=value\nsyntax. For example, --module-option\nvcfreporter.type=separate")), ToolInput(tag="in_system_option", input_type=Boolean(optional=True), prefix="--system-option", doc=InputDocumentation(doc="[SYSTEM_OPTION ...]\nSystem option in key=value syntax. For example,\n--system-option modules_dir=/home/user/open-\ncravat/modules")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="--silent", doc=InputDocumentation(doc="Runs silently.")), ToolInput(tag="in_concise_report", input_type=Boolean(optional=True), prefix="--concise-report", doc=InputDocumentation(doc="Generate concise reports with default columns defined\nby each annotation module")), ToolInput(tag="in_inputs", input_type=String(), position=0, doc=InputDocumentation(doc="Input file(s). One or more variant files in a\nsupported format like VCF. See the -i/--input-format\nflag for supported formats. In the special case where\nyou want to add annotations to an existing open-cravat\nanalysis, provide the output sqlite database from the\nprevious run as input instead of a variant input file.")), ToolInput(tag="in_one_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--newlog              deletes the existing log file and creates a new one."))], outputs=[ToolOutput(tag="out_directory_output_files", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_directory_output_files", type_hint=File()), doc=OutputDocumentation(doc="directory for output files"))], container="quay.io/biocontainers/open-cravat:2.2.2--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Oc_Run_V0_1_0().translate("wdl")

