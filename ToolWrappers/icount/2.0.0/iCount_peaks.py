from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Icount_Peaks_V0_1_0 = CommandToolBuilder(tool="iCount_peaks", base_command=["iCount", "peaks"], inputs=[ToolInput(tag="in_scores", input_type=File(optional=True), prefix="--scores", doc=InputDocumentation(doc="File name for 'scores' output. File reports all cross-link events,\nindependent from their FDR score It should have .tsv, .csv, .txt or .gz\nextension (default: None)")), ToolInput(tag="in_features", input_type=Boolean(optional=True), prefix="--features", doc=InputDocumentation(doc="[ ...]    Features from annotation to consider. If None, ['gene'] is used.\nSometimes, it is advised to use ['gene', 'intergenic'] (default: None)")), ToolInput(tag="in_group_by", input_type=Boolean(optional=True), prefix="--group_by", doc=InputDocumentation(doc="Attribute by which cross-link positions are grouped (default: gene_id)")), ToolInput(tag="in_merge_features", input_type=Boolean(optional=True), prefix="--merge_features", doc=InputDocumentation(doc="Treat all features as one when grouping. Has no effect when only one\nfeature is given in features parameter (default: False)")), ToolInput(tag="in_half_window", input_type=Boolean(optional=True), prefix="--half_window", doc=InputDocumentation(doc="Half-window size (default: 3)")), ToolInput(tag="in_fdr", input_type=Boolean(optional=True), prefix="--fdr", doc=InputDocumentation(doc="FDR threshold (default: 0.05)")), ToolInput(tag="in_perms", input_type=Boolean(optional=True), prefix="--perms", doc=InputDocumentation(doc="Number of permutations when calculating random distribution (default: 100)")), ToolInput(tag="in_rnd_seed", input_type=Boolean(optional=True), prefix="--rnd_seed", doc=InputDocumentation(doc="Seed for random generator (default: 42)")), ToolInput(tag="in_report_progress", input_type=Boolean(optional=True), prefix="--report_progress", doc=InputDocumentation(doc="Report analysis progress (default: False)")), ToolInput(tag="in_stdout_log", input_type=Boolean(optional=True), prefix="--stdout_log", doc=InputDocumentation(doc="Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.")), ToolInput(tag="in_file_log", input_type=Boolean(optional=True), prefix="--file_log", doc=InputDocumentation(doc="Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.")), ToolInput(tag="in_file_log_path", input_type=Boolean(optional=True), prefix="--file_logpath", doc=InputDocumentation(doc="Path to log file.")), ToolInput(tag="in_results_file", input_type=Boolean(optional=True), prefix="--results_file", doc=InputDocumentation(doc="File into which to store Metrics.")), ToolInput(tag="in_annotation", input_type=String(), position=0, doc=InputDocumentation(doc="Annotation file in GTF format, obtained from 'iCount segment' command")), ToolInput(tag="in_sites", input_type=String(), position=1, doc=InputDocumentation(doc="File with cross-links in BED6 format")), ToolInput(tag="in_peaks", input_type=String(), position=2, doc=InputDocumentation(doc="File name for 'peaks' output. File reports positions with significant\nnumber of cross-link events. It should have .bed or .bed.gz extension"))], outputs=[ToolOutput(tag="out_scores", output_type=File(optional=True), selector=InputSelector(input_to_select="in_scores", type_hint=File()), doc=OutputDocumentation(doc="File name for 'scores' output. File reports all cross-link events,\nindependent from their FDR score It should have .tsv, .csv, .txt or .gz\nextension (default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Icount_Peaks_V0_1_0().translate("wdl", allow_empty_container=True)

