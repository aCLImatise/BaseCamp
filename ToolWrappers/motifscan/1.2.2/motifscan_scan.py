from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int, Directory

Motifscan_Scan_V0_1_0 = CommandToolBuilder(tool="motifscan_scan", base_command=["motifscan", "scan"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Enable verbose log messages.")), ToolInput(tag="in_input_genomic_regions", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="Input genomic regions (peaks) to be scanned.")), ToolInput(tag="in_format_default_bed", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="Format of the input file. Default: bed")), ToolInput(tag="in_motif", input_type=String(optional=True), prefix="--motif", doc=InputDocumentation(doc="Motif set name to scan for.")), ToolInput(tag="in_genome", input_type=String(optional=True), prefix="--genome", doc=InputDocumentation(doc="Genome assembly name.")), ToolInput(tag="in_p_value_cutoff", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="P value cutoff for motif scores. Default: 1e-4")), ToolInput(tag="in_loc", input_type=String(optional=True), prefix="--loc", doc=InputDocumentation(doc="If specified, only scan promoter or distal regions.")), ToolInput(tag="in_upstream", input_type=Int(optional=True), prefix="--upstream", doc=InputDocumentation(doc="TSS upstream distance for promoters. Default: 4000")), ToolInput(tag="in_downstream", input_type=Int(optional=True), prefix="--downstream", doc=InputDocumentation(doc="TSS downstream distance for promoters. Default: 2000")), ToolInput(tag="in_window_size", input_type=Int(optional=True), prefix="--window-size", doc=InputDocumentation(doc="Window size for scanning. In most cases, motifs occur\nclosely around the centers or summits of genomic\npeaks. Scanning a fixed-size window is often\nsufficient to detect motif sites and unbiased for the\nenrichment analysis. If set to 0, the whole input\nregions are included for scanning. Default: 1000")), ToolInput(tag="in_strand", input_type=Boolean(optional=True), prefix="--strand", doc=InputDocumentation(doc="{both,+,-}   Enable strand-specific scanning, defaults to scan both")), ToolInput(tag="in_no_enrich", input_type=Boolean(optional=True), prefix="--no-enrich", doc=InputDocumentation(doc="Disable the enrichment analysis.")), ToolInput(tag="in_n_random", input_type=Int(optional=True), prefix="--n-random", doc=InputDocumentation(doc="Generate N random control regions for each input\nregion. Default: 5")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="Random seed used to generate control regions.")), ToolInput(tag="in_use_control_regions", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc="Use custom control regions for the enrichment")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of processes used to run in parallel.")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Directory to write output files.")), ToolInput(tag="in_site", input_type=Boolean(optional=True), prefix="--site", doc=InputDocumentation(doc="If set, report the position for each detected motif")), ToolInput(tag="in_strands_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Enrichment Analysis Options:")), ToolInput(tag="in_analysis_dot", input_type=String(), position=1, doc=InputDocumentation(doc="--cf {bed,bed3-summit,macs,macs2,narrowpeak,broadpeak,manorm}")), ToolInput(tag="in_bed", input_type=String(), position=0, doc=InputDocumentation(doc="Threads Options:")), ToolInput(tag="in_site_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--plot                If set, plot the distributions of detected motif")), ToolInput(tag="in_sites_dot", input_type=String(), position=1, doc=InputDocumentation(doc="Examples:"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Directory to write output files."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Motifscan_Scan_V0_1_0().translate("wdl", allow_empty_container=True)

