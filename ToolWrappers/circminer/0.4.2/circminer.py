from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Circminer_V0_1_0 = CommandToolBuilder(tool="circminer", base_command=["circminer"], inputs=[ToolInput(tag="in_index", input_type=Boolean(optional=True), prefix="--index", doc=InputDocumentation(doc=":            Indicates the indexing stage.")), ToolInput(tag="in_compact_index", input_type=Boolean(optional=True), prefix="--compact-index", doc=InputDocumentation(doc=":    Use this option only while building the index to enable compact version of the index.")), ToolInput(tag="in_km_er", input_type=Boolean(optional=True), prefix="--kmer", doc=InputDocumentation(doc=":             Kmer size [14..22] (default = 20).")), ToolInput(tag="in_reference", input_type=Boolean(optional=True), prefix="--reference", doc=InputDocumentation(doc=":        Reference file.")), ToolInput(tag="in_gtf", input_type=Boolean(optional=True), prefix="--gtf", doc=InputDocumentation(doc=":              Gene model file.")), ToolInput(tag="in_seq", input_type=Boolean(optional=True), prefix="--seq", doc=InputDocumentation(doc=":              Single-end sequence file.")), ToolInput(tag="in_seq_one", input_type=Boolean(optional=True), prefix="--seq1", doc=InputDocumentation(doc=":             1st paired-end sequence file.")), ToolInput(tag="in_seq_two", input_type=Boolean(optional=True), prefix="--seq2", doc=InputDocumentation(doc=":             2nd paired-end sequence file.")), ToolInput(tag="in_rlen", input_type=Boolean(optional=True), prefix="--rlen", doc=InputDocumentation(doc=":             Max read length (default = 300).")), ToolInput(tag="in_max_ed", input_type=Boolean(optional=True), prefix="--max-ed", doc=InputDocumentation(doc=":           Max allowed edit distance on each mate (default = 4).")), ToolInput(tag="in_max_sc", input_type=Boolean(optional=True), prefix="--max-sc", doc=InputDocumentation(doc=":           Max allowed soft clipping on each mate (default = 7).")), ToolInput(tag="in_band", input_type=Boolean(optional=True), prefix="--band", doc=InputDocumentation(doc=":             Band width for banded alignment (default = 3).")), ToolInput(tag="in_seed_lim", input_type=Boolean(optional=True), prefix="--seed-lim", doc=InputDocumentation(doc=":         Skip seeds that have more than INT occurrences (default = 500).")), ToolInput(tag="in_max_tlen", input_type=Boolean(optional=True), prefix="--max-tlen", doc=InputDocumentation(doc=":         Maximum template length of concordant mapping. Paired-end mode only (default = 500).")), ToolInput(tag="in_max_intron", input_type=Boolean(optional=True), prefix="--max-intron", doc=InputDocumentation(doc=":       Maximum length of an intron (default = 2000000).")), ToolInput(tag="in_max_chain_list", input_type=Boolean(optional=True), prefix="--max-chain-list", doc=InputDocumentation(doc=":   Maximum number of chained candidates to be processed (default = 30).")), ToolInput(tag="in_output", input_type=Boolean(optional=True), prefix="--output", doc=InputDocumentation(doc=":           Prefix of output files (default = output).")), ToolInput(tag="in_thread", input_type=Boolean(optional=True), prefix="--thread", doc=InputDocumentation(doc=":           Number of threads (default = 1).")), ToolInput(tag="in_sam", input_type=Boolean(optional=True), prefix="--sam", doc=InputDocumentation(doc=":              Enables SAM output for aligned reads. Cannot be set along with --pam.")), ToolInput(tag="in_pam", input_type=Boolean(optional=True), prefix="--pam", doc=InputDocumentation(doc=":              Enables custom pam output for aligned reads. Cannot be set along with --sam.")), ToolInput(tag="in_verbosity", input_type=Boolean(optional=True), prefix="--verbosity", doc=InputDocumentation(doc=":        Verbosity mode: 0 or 1. Higher values output more information (default = 0).")), ToolInput(tag="in_scan_lev", input_type=Boolean(optional=True), prefix="--scan-lev", doc=InputDocumentation(doc=":         Transcriptome/Genome scan level: 0 to 2. (default = 0)\n0: Report the first mapping.\n1: Continue processing the read unless it is perfectly mapped to cDNA.\n2: Report the best mapping."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Circminer_V0_1_0().translate("wdl", allow_empty_container=True)

