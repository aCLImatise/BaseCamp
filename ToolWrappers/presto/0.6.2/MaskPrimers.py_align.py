from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, File, Boolean, Int

Maskprimers_Py_Align_V0_1_0 = CommandToolBuilder(tool="MaskPrimers.py_align", base_command=["MaskPrimers.py", "align"], inputs=[ToolInput(tag="in_list_fastafastq_files", input_type=Array(t=String(), optional=True), prefix="-s", doc=InputDocumentation(doc="A list of FASTA/FASTQ files containing sequences to\nprocess. (default: None)")), ToolInput(tag="in_explicit_output_file", input_type=Array(t=String(), optional=True), prefix="-o", doc=InputDocumentation(doc="Explicit output file name(s). Note, this argument\ncannot be used with the --failed, --outdir, or\n--outname arguments. If unspecified, then the output\nfilename will be based on the input filename(s).\n(default: None)")), ToolInput(tag="in_outdir", input_type=File(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Specify to changes the output directory to the\nlocation specified. The input file directory is used\nif this is not specified. (default: None)")), ToolInput(tag="in_out_name", input_type=File(optional=True), prefix="--outname", doc=InputDocumentation(doc="Changes the prefix of the successfully processed\noutput file to the string specified. May not be\nspecified with multiple input files. (default: None)")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="Specify to write verbose logging to a file. May not be\nspecified with multiple input files. (default: None)")), ToolInput(tag="in_failed", input_type=Boolean(optional=True), prefix="--failed", doc=InputDocumentation(doc="If specified create files containing records that fail\nprocessing. (default: False)")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Specify to force output as FASTA rather than FASTQ.\n(default: None)")), ToolInput(tag="in_delim", input_type=String(optional=True), prefix="--delim", doc=InputDocumentation(doc="DELIMITER DELIMITER\nA list of the three delimiters that separate\nannotation blocks, field names and values, and values\nwithin a field, respectively. (default: ('|', '=',\n','))")), ToolInput(tag="in_nproc", input_type=Int(optional=True), prefix="--nproc", doc=InputDocumentation(doc="The number of simultaneous computational processes to\nexecute (CPU cores to utilized). (default: 8)")), ToolInput(tag="in_fasta_file_containing", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="A FASTA file containing primer sequences. (default:\nNone)")), ToolInput(tag="in_max_error", input_type=Int(optional=True), prefix="--maxerror", doc=InputDocumentation(doc="Maximum allowable error rate. (default: 0.2)")), ToolInput(tag="in_maxlen", input_type=Int(optional=True), prefix="--maxlen", doc=InputDocumentation(doc="Length of the sequence window to scan for primers.\n(default: 50)")), ToolInput(tag="in_gap", input_type=Int(optional=True), prefix="--gap", doc=InputDocumentation(doc="GAP_PENALTY\nA list of two positive values defining the gap open\nand gap extension penalties for aligning the primers.\nNote: the error rate is calculated as the percentage\nof mismatches from the primer sequence with gap\npenalties reducing the match count accordingly; this\nmay lead to error rates that differ from strict\nmismatch percentage when gaps are present in the\nalignment. (default: (1, 1))")), ToolInput(tag="in_rev_pr", input_type=Boolean(optional=True), prefix="--revpr", doc=InputDocumentation(doc="Specify to match the tail-end of the sequence against\nthe reverse complement of the primers. This also\nreverses the behavior of the --maxlen argument, such\nthat the search window begins at the tail-end of the\nsequence. (default: False)")), ToolInput(tag="in_skip_rc", input_type=Boolean(optional=True), prefix="--skiprc", doc=InputDocumentation(doc="Specify to prevent checking of sample reverse\ncomplement sequences. (default: False)")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Specifies the action to take with the primer sequence.\nThe 'cut' mode will remove both the primer region and\nthe preceding sequence. The 'mask' mode will replace\nthe primer region with Ns and remove the preceding\nsequence. The 'trim' mode will remove the region\npreceding the primer, but leave the primer region\nintact. The 'tag' mode will leave the input sequence\nunmodified. (default: mask)")), ToolInput(tag="in_barcode", input_type=Boolean(optional=True), prefix="--barcode", doc=InputDocumentation(doc="Specify to annotate reads sequences with barcode\nsequences (unique molecular identifiers) found\npreceding the primer. (default: False)")), ToolInput(tag="in_bf", input_type=String(optional=True), prefix="--bf", doc=InputDocumentation(doc="Name of the barcode annotation field. (default:\nBARCODE)")), ToolInput(tag="in_pf", input_type=String(optional=True), prefix="--pf", doc=InputDocumentation(doc="Name of the annotation field containing the primer\nname. (default: PRIMER)\n"))], outputs=[], container="quay.io/biocontainers/presto:0.6.2--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Maskprimers_Py_Align_V0_1_0().translate("wdl")

