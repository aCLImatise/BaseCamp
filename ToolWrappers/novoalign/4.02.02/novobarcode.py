from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, Int

Novobarcode_V0_1_0 = CommandToolBuilder(tool="novobarcode", base_command=["novobarcode"], inputs=[ToolInput(tag="in_specifies_code_file", input_type=File(optional=True), prefix="-b", doc=InputDocumentation(doc="Specifies the bar code tag file.")), ToolInput(tag="in_sets_folder_name", input_type=Directory(optional=True), prefix="-d", doc=InputDocumentation(doc="Sets folder name for demux'd reads. Default ./")), ToolInput(tag="in_specifies_read_files", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="[file2]    Specifies read file(s). Two filenames if paired end.")), ToolInput(tag="in_specifies_format_file", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="Specifies the qseq format file for the index tag reads.")), ToolInput(tag="in_specifies_read_file", input_type=File(optional=True), prefix="-F", doc=InputDocumentation(doc="[option]  Specifies a read file format, refer to manual for full list of options.\nFor Fastq '_sequence.txt' files from Illumina\nCASAVA 1.3 to 1.7 use -F ILMFQ.\nCASAVA 1.8 and later use -F ILM1.8\nPre 1.3 use -F SLXFQ\nQSEQ & ILM1.8 files include reads that have been flagged as low quality by the\nbase caller. Specify how these are processed with the following options:")), ToolInput(tag="in_il_q_use", input_type=Boolean(optional=True), prefix="--ILQ_USE", doc=InputDocumentation(doc="Ignore QC flag and classify the reads.")), ToolInput(tag="in_il_q_skip", input_type=Boolean(optional=True), prefix="--ILQ_SKIP", doc=InputDocumentation(doc="Write reads to NC folder")), ToolInput(tag="in_il_q_qc", input_type=Boolean(optional=True), prefix="--ILQ_QC", doc=InputDocumentation(doc="ditto")), ToolInput(tag="in_q_seq_out", input_type=Boolean(optional=True), prefix="--QSEQ_OUT", doc=InputDocumentation(doc="Write qseq format output files if input is qseq. Without this the output may be in fastq format.")), ToolInput(tag="in_sets_bar_code", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="Sets bar code read length if different from tag length.")), ToolInput(tag="in_specifies_alignment_difference", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="Specifies a minimum tag alignment score difference between best tag and next best tag.\nIf difference is less than this reads are written to the catch all file.\nDefault is 30 * Distance/2")), ToolInput(tag="in_enables_adapter_stripping", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[3' adapter sequence]\nEnables adapter stripping from 3' end of reads before checking for a 3' index tag.\nDefault adapter sequence is TCGTATGCCGTCTTCTGCTTG."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Novobarcode_V0_1_0().translate("wdl", allow_empty_container=True)

