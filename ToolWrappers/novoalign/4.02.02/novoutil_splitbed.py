from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Novoutil_Splitbed_V0_1_0 = CommandToolBuilder(tool="novoutil_splitbed", base_command=["novoutil", "splitbed"], inputs=[ToolInput(tag="in_add", input_type=Boolean(optional=True), prefix="--add", doc=InputDocumentation(doc="[3m99[0m            Number of bp to add or to each input bed file region.")), ToolInput(tag="in_merge", input_type=Boolean(optional=True), prefix="--merge", doc=InputDocumentation(doc="[3m99[0m          Minimum gap between regions to merge them. Applied after extension.")), ToolInput(tag="in_splits", input_type=Boolean(optional=True), prefix="--splits", doc=InputDocumentation(doc="[3m99[0m         Number of files to split input BED into.")), ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="--prefix", doc=InputDocumentation(doc="[3mprefix[0m     Filename prefix for the output bed files.")), ToolInput(tag="in_include", input_type=File(optional=True), prefix="--include", doc=InputDocumentation(doc="[3mfilename[0m  A file listing reference sequences (Chrom) to include in the output. One per line!")), ToolInput(tag="in_exclude", input_type=File(optional=True), prefix="--exclude", doc=InputDocumentation(doc="[3mfilename[0m  A file listing reference sequences (Chrom) to exclude from the output. One per line!\nNormally you would supply only an include list or an exclude list, not both!")), ToolInput(tag="in_sam", input_type=Boolean(optional=True), prefix="--sam", doc=InputDocumentation(doc="[3msamfilename[0m   SAM file. Headers are used to determine sequence lengths from @SQ records and\nensure we don't make regions extend passed the end of the sequences."))], outputs=[ToolOutput(tag="out_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prefix", type_hint=File()), doc=OutputDocumentation(doc="[3mprefix[0m     Filename prefix for the output bed files.")), ToolOutput(tag="out_include", output_type=File(optional=True), selector=InputSelector(input_to_select="in_include", type_hint=File()), doc=OutputDocumentation(doc="[3mfilename[0m  A file listing reference sequences (Chrom) to include in the output. One per line!")), ToolOutput(tag="out_exclude", output_type=File(optional=True), selector=InputSelector(input_to_select="in_exclude", type_hint=File()), doc=OutputDocumentation(doc="[3mfilename[0m  A file listing reference sequences (Chrom) to exclude from the output. One per line!\nNormally you would supply only an include list or an exclude list, not both!"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Novoutil_Splitbed_V0_1_0().translate("wdl", allow_empty_container=True)

