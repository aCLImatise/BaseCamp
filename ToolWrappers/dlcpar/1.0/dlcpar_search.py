from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Float, Boolean, Int

Dlcpar_Search_V0_1_0 = CommandToolBuilder(tool="dlcpar_search", base_command=["dlcpar_search"], inputs=[ToolInput(tag="in_stree", input_type=File(optional=True), prefix="--stree", doc=InputDocumentation(doc="species tree file in newick format")), ToolInput(tag="in_s_map", input_type=String(optional=True), prefix="--smap", doc=InputDocumentation(doc="gene to species map")), ToolInput(tag="in_input_ext", input_type=File(optional=True), prefix="--inputext", doc=InputDocumentation(doc="input file extension (default: '')")), ToolInput(tag="in_output_ext", input_type=File(optional=True), prefix="--outputext", doc=InputDocumentation(doc="output file extension (default: '.dlcpar')")), ToolInput(tag="in_dup_cost", input_type=Float(optional=True), prefix="--dupcost", doc=InputDocumentation(doc="duplication cost (default: 1.0)")), ToolInput(tag="in_loss_cost", input_type=Float(optional=True), prefix="--losscost", doc=InputDocumentation(doc="loss cost (default: 1.0)")), ToolInput(tag="in_coal_cost", input_type=Float(optional=True), prefix="--coalcost", doc=InputDocumentation(doc="deep coalescence cost (default: 0.5)")), ToolInput(tag="in_explicit", input_type=Boolean(optional=True), prefix="--explicit", doc=InputDocumentation(doc="set to ignore extra lineages at implied speciation")), ToolInput(tag="in_iterations__iterationsnumber", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="<# iterations>, --iter=<# iterations>\nnumber of search iterations (default: 10)")), ToolInput(tag="in_n_prescreen", input_type=Boolean(optional=True), prefix="--nprescreen", doc=InputDocumentation(doc="=<# prescreens>\nnumber of prescreening iterations (default: 20)")), ToolInput(tag="in_in_it_locus_tree", input_type=File(optional=True), prefix="--init-locus-tree", doc=InputDocumentation(doc="initial locus tree for search")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="random number seed")), ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="--log", doc=InputDocumentation(doc="if given, output debugging log")), ToolInput(tag="in_nodes", input_type=String(), position=0, doc=InputDocumentation(doc="Search:"))], outputs=[ToolOutput(tag="out_output_ext", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_ext", type_hint=File()), doc=OutputDocumentation(doc="output file extension (default: '.dlcpar')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dlcpar_Search_V0_1_0().translate("wdl", allow_empty_container=True)

