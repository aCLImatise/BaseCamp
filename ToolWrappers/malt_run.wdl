version 1.0

task Maltrun {
  input {
    Boolean? mode
    Boolean? alignment_type
    Boolean? in_file
    Boolean? index
    File? output_rma_files
    File? include_unaligned
    File? alignments
    Boolean? format
    Boolean? gzip_alignments
    Boolean? sam_soft_clip
    Boolean? sparse_sam
    File? out_aligned
    Boolean? gzip_aligned
    File? out_unaligned
    Boolean? gzip_unaligned
    Boolean? num_threads
    Boolean? memory_mode
    Boolean? max_tables
    Boolean? replicate_query_cache
    Boolean? min_bit_score
    Boolean? max_expected
    Boolean? min_percent_identity
    Boolean? max_alignments_per_query
    Boolean? max_alignments_per_ref
    Boolean? match_score
    Boolean? mismatch_score
    Boolean? set_lambda
    Boolean? set_k
    Boolean? submatrix
    Boolean? forward_only
    Boolean? reverse_only
    Boolean? top_percent
    Boolean? min_support_percent
    Boolean? min_support
    Boolean? min_percent_identity_lca
    Boolean? use_min_percent_identity_filter_lca
    Boolean? weighted_lca
    Boolean? lca_coverage_percent
    Boolean? magnitudes
    Boolean? con_file
    Boolean? max_seeds_per_frame
    Boolean? max_seeds_per_ref
    Boolean? seed_shift
    Boolean? gap_open
    Boolean? gap_extend
    Boolean? band
    Boolean? replicate_query_cache_bits
    Boolean? x_part
    Boolean? verbose
  }
  command <<<
    malt_run \
      ~{if (mode) then "--mode" else ""} \
      ~{if (alignment_type) then "--alignmentType" else ""} \
      ~{if (in_file) then "--inFile" else ""} \
      ~{if (index) then "--index" else ""} \
      ~{if (output_rma_files) then "--output" else ""} \
      ~{if (include_unaligned) then "--includeUnaligned" else ""} \
      ~{if (alignments) then "--alignments" else ""} \
      ~{if (format) then "--format" else ""} \
      ~{if (gzip_alignments) then "--gzipAlignments" else ""} \
      ~{if (sam_soft_clip) then "--samSoftClip" else ""} \
      ~{if (sparse_sam) then "--sparseSAM" else ""} \
      ~{if (out_aligned) then "--outAligned" else ""} \
      ~{if (gzip_aligned) then "--gzipAligned" else ""} \
      ~{if (out_unaligned) then "--outUnaligned" else ""} \
      ~{if (gzip_unaligned) then "--gzipUnaligned" else ""} \
      ~{if (num_threads) then "--numThreads" else ""} \
      ~{if (memory_mode) then "--memoryMode" else ""} \
      ~{if (max_tables) then "--maxTables" else ""} \
      ~{if (replicate_query_cache) then "--replicateQueryCache" else ""} \
      ~{if (min_bit_score) then "--minBitScore" else ""} \
      ~{if (max_expected) then "--maxExpected" else ""} \
      ~{if (min_percent_identity) then "--minPercentIdentity" else ""} \
      ~{if (max_alignments_per_query) then "--maxAlignmentsPerQuery" else ""} \
      ~{if (max_alignments_per_ref) then "--maxAlignmentsPerRef" else ""} \
      ~{if (match_score) then "--matchScore" else ""} \
      ~{if (mismatch_score) then "--mismatchScore" else ""} \
      ~{if (set_lambda) then "--setLambda" else ""} \
      ~{if (set_k) then "--setK" else ""} \
      ~{if (submatrix) then "--subMatrix" else ""} \
      ~{if (forward_only) then "--forwardOnly" else ""} \
      ~{if (reverse_only) then "--reverseOnly" else ""} \
      ~{if (top_percent) then "--topPercent" else ""} \
      ~{if (min_support_percent) then "--minSupportPercent" else ""} \
      ~{if (min_support) then "--minSupport" else ""} \
      ~{if (min_percent_identity_lca) then "--minPercentIdentityLCA" else ""} \
      ~{if (use_min_percent_identity_filter_lca) then "--useMinPercentIdentityFilterLCA" else ""} \
      ~{if (weighted_lca) then "--weightedLCA" else ""} \
      ~{if (lca_coverage_percent) then "--lcaCoveragePercent" else ""} \
      ~{if (magnitudes) then "--magnitudes" else ""} \
      ~{if (con_file) then "--conFile" else ""} \
      ~{if (max_seeds_per_frame) then "--maxSeedsPerFrame" else ""} \
      ~{if (max_seeds_per_ref) then "--maxSeedsPerRef" else ""} \
      ~{if (seed_shift) then "--seedShift" else ""} \
      ~{if (gap_open) then "--gapOpen" else ""} \
      ~{if (gap_extend) then "--gapExtend" else ""} \
      ~{if (band) then "--band" else ""} \
      ~{if (replicate_query_cache_bits) then "--replicateQueryCacheBits" else ""} \
      ~{if (x_part) then "--xPart" else ""} \
      ~{if (verbose) then "--verbose" else ""}
  >>>
  parameter_meta {
    mode: "[string]                  Program mode. Mandatory option. Legal values: Unknown, BlastN, BlastP, BlastX, Classifier"
    alignment_type: "[string]        Type of alignment to be performed. Default value: Local. Legal values: Local, SemiGlobal"
    in_file: "[string(s)]             Input file(s) containing queries in FastA or FastQ format (gzip or zip ok). Mandatory option."
    index: "[string]                 Index directory as generated by MaltBuild. Mandatory option."
    output_rma_files: "[string(s)]             Output RMA file(s) or directory."
    include_unaligned: "Include unaligned queries in RMA output file. Default value: false."
    alignments: "[string(s)]         Output alignment file(s) or directory or STDOUT."
    format: "[string]                Alignment output format. Default value: SAM. Legal values: SAM, Tab, Text"
    gzip_alignments: "Compress alignments using gzip. Default value: true."
    sam_soft_clip: "Use soft clipping in SAM files (BlastN mode only). Default value: false."
    sparse_sam: "Produce sparse SAM format (smaller, faster, but only suitable for MEGAN). Default value: false."
    out_aligned: "[string(s)]        Aligned reads output file(s) or directory or STDOUT."
    gzip_aligned: "Compress aligned reads output using gzip. Default value: true."
    out_unaligned: "[string(s)]      Unaligned reads output file(s) or directory or STDOUT."
    gzip_unaligned: "Compress unaligned reads output using gzip. Default value: true."
    num_threads: "[number]            Number of worker threads. Default value: 8."
    memory_mode: "[string]          Memory mode. Default value: load. Legal values: load, page, map"
    max_tables: "[number]            Set the maximum number of seed tables to use (0=all). Default value: 0."
    replicate_query_cache: "Cache results for replicated queries. Default value: false."
    min_bit_score: "[number]           Minimum bit score. Default value: 50.0."
    max_expected: "[number]           Maximum expected score. Default value: 1.0."
    min_percent_identity: "[number]   Minimum percent identity. Default value: 0.0."
    max_alignments_per_query: "[number]   Maximum number of alignments per query. Default value: 25."
    max_alignments_per_ref: "[number]   Maximum number of (non-overlapping) alignments per reference. Default value: 1."
    match_score: "[number]           Match score. Default value: 2."
    mismatch_score: "[number]        Mismatch score. Default value: -3."
    set_lambda: "[number]            Parameter Lambda for BLASTN statistics. Default value: 0.625."
    set_k: "[number]                  Parameter K for BLASTN statistics. Default value: 0.41."
    submatrix: "[string]           Protein substitution matrix to use. Default value: BLOSUM62. Legal values: BLOSUM45, BLOSUM50, BLOSUM62, BLOSUM80, BLOSUM90"
    forward_only: "Align query forward strand only. Default value: false."
    reverse_only: "Align query reverse strand only. Default value: false."
    top_percent: "[number]          Top percent value for LCA algorithm. Default value: 10.0."
    min_support_percent: "[number]   Min support value for LCA algorithm as a percent of assigned reads (0==off). Default value: 0.001."
    min_support: "[number]          Min support value for LCA algorithm (overrides --minSupportPercent). Default value: 0."
    min_percent_identity_lca: "[number]   Min percent identity used by LCA algorithm. Default value: 0.0."
    use_min_percent_identity_filter_lca: "Use percent identity assignment filter. Default value: false."
    weighted_lca: "Use the weighted LCA for taxonomic assignment. Default value: false."
    lca_coverage_percent: "[number]   Set the percent for the LCA to cover. Default value: 100.0."
    magnitudes: "Reads have magnitudes (to be used in taxonomic or functional analysis). Default value: false."
    con_file: "[string]              File of contaminant taxa (one Id or name per line)."
    max_seeds_per_frame: "[number]    Maximum number of seed matches per offset per read frame. Default value: 100."
    max_seeds_per_ref: "[number]      Maximum number of seed matches per read and reference. Default value: 20."
    seed_shift: "[number]            Seed shift. Default value: 1."
    gap_open: "[number]              Gap open penalty. Default value: 11."
    gap_extend: "[number]            Gap extension penalty. Default value: 1."
    band: "[number]                 Band width/2 for banded alignment. Default value: 4."
    replicate_query_cache_bits: "[number]   Bits used for caching replicate queries (size is then 2^bits). Default value: 20."
    x_part: "Show part of the table in human readable form for debugging. Default value: false."
    verbose: "Echo commandline options and be verbose. Default value: false."
  }
  output {
    File out_stdout = stdout()
    File out_output_rma_files = "${in_output_rma_files}"
    File out_include_unaligned = "${in_include_unaligned}"
    File out_alignments = "${in_alignments}"
    File out_out_aligned = "${in_out_aligned}"
    File out_out_unaligned = "${in_out_unaligned}"
  }
}