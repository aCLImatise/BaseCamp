from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Pbsv_Discover_V0_1_0 = CommandToolBuilder(tool="pbsv_discover", base_command=["pbsv", "discover"], inputs=[ToolInput(tag="in_sample", input_type=Boolean(optional=True), prefix="--sample", doc=InputDocumentation(doc="STR   Override sample name tag from BAM read group.")), ToolInput(tag="in_min_mapq", input_type=Boolean(optional=True), prefix="--min-mapq", doc=InputDocumentation(doc="INT   Ignore alignments with mapping quality < N. [20]")), ToolInput(tag="in_min_ref_span", input_type=Boolean(optional=True), prefix="--min-ref-span", doc=InputDocumentation(doc="STR   Ignore alignments with reference length < N bp. [100]")), ToolInput(tag="in_down_sample_window_length", input_type=Boolean(optional=True), prefix="--downsample-window-length", doc=InputDocumentation(doc="STR   Window in which to limit coverage, in basepairs. [10K]")), ToolInput(tag="in_down_sample_max_alignments", input_type=Boolean(optional=True), prefix="--downsample-max-alignments", doc=InputDocumentation(doc="INT   Consider up to N alignments in a window; 0 means disabled. [100]")), ToolInput(tag="in_region", input_type=Boolean(optional=True), prefix="--region", doc=InputDocumentation(doc="STR   Limit discovery to this reference region: CHR|CHR:START-END.")), ToolInput(tag="in_min_sv_sig_length", input_type=Boolean(optional=True), prefix="--min-svsig-length", doc=InputDocumentation(doc="STR   Ignore SV signatures with length < N bp. [7]")), ToolInput(tag="in_tandem_repeats", input_type=Boolean(optional=True), prefix="--tandem-repeats", doc=InputDocumentation(doc="STR   Tandem repeat intervals for indel clustering.")), ToolInput(tag="in_max_skip_split", input_type=Boolean(optional=True), prefix="--max-skip-split", doc=InputDocumentation(doc="STR   Ignore alignment pairs separated by > N bp of a read or reference. [100]")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="STR   Set log level. Valid choices: (TRACE, DEBUG, INFO, WARN, FATAL). [WARN]")), ToolInput(tag="in_log_file", input_type=Boolean(optional=True), prefix="--log-file", doc=InputDocumentation(doc="FILE  Log to a file, instead of stderr.")), ToolInput(tag="in_refdotoutdotsvsigdotgz", input_type=String(), position=0, doc=InputDocumentation(doc="STR   Structural variant signatures output."))], outputs=[], container="quay.io/biocontainers/pbsv:2.4.0--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pbsv_Discover_V0_1_0().translate("wdl")

