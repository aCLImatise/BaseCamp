from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Float, String

Clipkit_V0_1_0 = CommandToolBuilder(tool="clipkit", base_command=["clipkit"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output file name\n(default: input file named with '.clipkit' suffix)")), ToolInput(tag="in_gappy_trimming_medium", input_type=Boolean(optional=True), prefix="--modes", doc=InputDocumentation(doc="<gappy,                         trimming mode\nkpic (alias: medium),           (default: gappy)\nkpic-gappy (alias: medium-gappy),\nkpi (alias: heavy),\nkpi-gappy (alias: heavy-gappy)>")), ToolInput(tag="in_specifies_gaps_thresholddefault", input_type=Float(optional=True), prefix="--gaps", doc=InputDocumentation(doc="specifies gaps threshold\n(default: 0.9)")), ToolInput(tag="in_input_file_format", input_type=File(optional=True), prefix="--input_file_format", doc=InputDocumentation(doc="specifies input file format\n(default: auto-detect)")), ToolInput(tag="in_output_file_format", input_type=File(optional=True), prefix="--output_file_format", doc=InputDocumentation(doc="specifies output file format\n(default: same as input file format)")), ToolInput(tag="in_creates_fileinput_file", input_type=Boolean(optional=True), prefix="--log", doc=InputDocumentation(doc="creates a log file\n(input file named with '.log' suffix)")), ToolInput(tag="in_creates_complementary_alignment", input_type=Boolean(optional=True), prefix="--complementary", doc=InputDocumentation(doc="creates complementary alignment of trimmed sequences\n(input file named with '.log' suffix)")), ToolInput(tag="in_gappy_trim_sites", input_type=String(), position=0, doc=InputDocumentation(doc="gappy: trim sites that are greater than the gaps threshold\nkpic (alias: medium): keeps parismony informative and constant sites\nkpic-gappy (alias: medium-gappy): a combination of kpic- and gappy-based trimming\nkpi (alias: heavy): keep only parsimony informative sites\nkpi-gappy (alias: heavy-gappy): a combination of kpi- and gappy-based trimming")), ToolInput(tag="in_positions_gappyness_greater", input_type=String(), position=1, doc=InputDocumentation(doc="Positions with gappyness greater than threshold will be trimmed. \nMust be between 0 and 1. (Default: 0.9). This argument is ignored\nwhen using the kpi mode of trimming.")), ToolInput(tag="in_creates_log_file", input_type=String(), position=0, doc=InputDocumentation(doc="Creates a log file that summarizes the characteristics of each position.\nThe log file has four columns.\n- Column 1 is the position in the alignment (starting at 1),\n- Column 2 reports if the site was trimmed or kept (trim and keep, respectively),\n- Column 3 reports if the site is a parsimony informative site or not (PI and nPI, respectively), or\na constant site or not (Const, nConst), or neither (nConst, nPI)\n- Column 4 reports the gappyness of the the position (number of gaps / entries in alignment)")), ToolInput(tag="in_creates_alignment_file", input_type=String(), position=1, doc=InputDocumentation(doc="Creates an alignment file of only the trimmed sequences"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output file name\n(default: input file named with '.clipkit' suffix)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Clipkit_V0_1_0().translate("wdl", allow_empty_container=True)

