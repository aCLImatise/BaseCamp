from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int

Bfconvert_V0_1_0 = CommandToolBuilder(tool="bfconvert", base_command=["bfconvert"], inputs=[ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc=": print the library version and exit")), ToolInput(tag="in_no_upgrade", input_type=Boolean(optional=True), prefix="-no-upgrade", doc=InputDocumentation(doc=": do not perform the upgrade check")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="-debug", doc=InputDocumentation(doc=": turn on debugging output")), ToolInput(tag="in_stitch", input_type=Boolean(optional=True), prefix="-stitch", doc=InputDocumentation(doc=": stitch input files with similar names")), ToolInput(tag="in_separate", input_type=Boolean(optional=True), prefix="-separate", doc=InputDocumentation(doc=": split RGB images into separate channels")), ToolInput(tag="in_merge", input_type=Boolean(optional=True), prefix="-merge", doc=InputDocumentation(doc=": combine separate channels into RGB image")), ToolInput(tag="in_expand", input_type=Boolean(optional=True), prefix="-expand", doc=InputDocumentation(doc=": expand indexed color to RGB")), ToolInput(tag="in_big_tiff", input_type=Boolean(optional=True), prefix="-bigtiff", doc=InputDocumentation(doc=": force BigTIFF files to be written")), ToolInput(tag="in_compression", input_type=Boolean(optional=True), prefix="-compression", doc=InputDocumentation(doc=": specify the codec to use when saving images\n-series: specify which image series to convert\n-map: specify file on disk to which name should be mapped\n-range: specify range of planes to convert (inclusive)")), ToolInput(tag="in_nogroup", input_type=Boolean(optional=True), prefix="-nogroup", doc=InputDocumentation(doc=": force multi-file datasets to be read as individual              files\n-nolookup: disable the conversion of lookup tables")), ToolInput(tag="in_autoscale", input_type=Boolean(optional=True), prefix="-autoscale", doc=InputDocumentation(doc=": automatically adjust brightness and contrast before\nconverting; this may mean that the original pixel\nvalues are not preserved")), ToolInput(tag="in_overwrite", input_type=File(optional=True), prefix="-overwrite", doc=InputDocumentation(doc=": always overwrite the output file, if it already exists")), ToolInput(tag="in_no_overwrite", input_type=File(optional=True), prefix="-nooverwrite", doc=InputDocumentation(doc=": never overwrite the output file, if it already exists\n-crop: crop images before converting; argument is 'x,y,w,h'")), ToolInput(tag="in_channel", input_type=Boolean(optional=True), prefix="-channel", doc=InputDocumentation(doc=": only convert the specified channel (indexed from 0)\n-z: only convert the specified Z section (indexed from 0)")), ToolInput(tag="in_time_point", input_type=Boolean(optional=True), prefix="-timepoint", doc=InputDocumentation(doc=": only convert the specified timepoint (indexed from 0)\n-padded: filename indexes for series, z, c and t will be zero padded\n-option: add the specified key/value pair to the options list")), ToolInput(tag="in_converted_z_zero_t_zero_dot_tiff", input_type=Int(), position=0, doc=InputDocumentation(doc="converted_Z0_T1.tiff")), ToolInput(tag="in_converted_z_zero_t_two_dot_tiff", input_type=Int(), position=1, doc=InputDocumentation(doc="converted_Z1_T0.tiff")), ToolInput(tag="in_converted_z_four_t_two_dot_tiff", input_type=Int(), position=0, doc=InputDocumentation(doc="Each file would have a single image plane."))], outputs=[ToolOutput(tag="out_overwrite", output_type=File(optional=True), selector=InputSelector(input_to_select="in_overwrite", type_hint=File()), doc=OutputDocumentation(doc=": always overwrite the output file, if it already exists")), ToolOutput(tag="out_no_overwrite", output_type=File(optional=True), selector=InputSelector(input_to_select="in_no_overwrite", type_hint=File()), doc=OutputDocumentation(doc=": never overwrite the output file, if it already exists\n-crop: crop images before converting; argument is 'x,y,w,h'"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bfconvert_V0_1_0().translate("wdl", allow_empty_container=True)

