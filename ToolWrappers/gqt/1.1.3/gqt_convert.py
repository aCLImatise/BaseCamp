from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Gqt_Convert_V0_1_0 = CommandToolBuilder(tool="gqt_convert", base_command=["gqt", "convert"], inputs=[ToolInput(tag="in_ped_file_name", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="PED file name (opt.)")), ToolInput(tag="in_sample_name_column", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Sample name column in PED (Default 2)")), ToolInput(tag="in_gqt_output_file", input_type=File(optional=True), prefix="-G", doc=InputDocumentation(doc="GQT output file name (opt.)")), ToolInput(tag="in_vid_output_file", input_type=File(optional=True), prefix="-V", doc=InputDocumentation(doc="VID output file name (opt.)")), ToolInput(tag="in_off_output_file", input_type=File(optional=True), prefix="-O", doc=InputDocumentation(doc="OFF output file name (opt.)")), ToolInput(tag="in_bim_output_file", input_type=File(optional=True), prefix="-B", doc=InputDocumentation(doc="BIM output file name (opt.)")), ToolInput(tag="in_ped_db_output", input_type=File(optional=True), prefix="-D", doc=InputDocumentation(doc="PED DB output file name (opt.)")), ToolInput(tag="in_number_variants_opt", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="Number of variants (opt. with index)")), ToolInput(tag="in_number_samples_opt", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Number of samples (opt. with index)")), ToolInput(tag="in_tmp_working_directory", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="Tmp working directory(./ by defualt)")), ToolInput(tag="in_i", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="")), ToolInput(tag="in_bcf", input_type=String(), position=0, doc=InputDocumentation(doc="create a GQT index")), ToolInput(tag="in_ped", input_type=String(), position=1, doc=InputDocumentation(doc="create sample phenotype database"))], outputs=[ToolOutput(tag="out_gqt_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_gqt_output_file", type_hint=File()), doc=OutputDocumentation(doc="GQT output file name (opt.)")), ToolOutput(tag="out_vid_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_vid_output_file", type_hint=File()), doc=OutputDocumentation(doc="VID output file name (opt.)")), ToolOutput(tag="out_off_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_off_output_file", type_hint=File()), doc=OutputDocumentation(doc="OFF output file name (opt.)")), ToolOutput(tag="out_bim_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_bim_output_file", type_hint=File()), doc=OutputDocumentation(doc="BIM output file name (opt.)")), ToolOutput(tag="out_ped_db_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_ped_db_output", type_hint=File()), doc=OutputDocumentation(doc="PED DB output file name (opt.)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gqt_Convert_V0_1_0().translate("wdl", allow_empty_container=True)

