!Command
command:
- gqt
- query
positional: []
named:
- !Flag
  description: print number of resulting variants \
  synonyms:
  - -c
  args: !SimpleFlagArg
    name: only
  optional: true
- !Flag
  description: genotypes (from the source bcf/vcf)\
  synonyms:
  - -v
  args: !SimpleFlagArg
    name: print
  optional: true
- !Flag
  description: direcory name for remote files (default ./)
  synonyms:
  - -t
  args: !SimpleFlagArg
    name: tmp
  optional: true
- !Flag
  description: (opt.)\
  synonyms:
  - -B
  args: !SimpleFlagArg
    name: bim file
  optional: true
- !Flag
  description: (opt.)\
  synonyms:
  - -O
  args: !SimpleFlagArg
    name: off file
  optional: true
- !Flag
  description: (opt.)\
  synonyms:
  - -V
  args: !SimpleFlagArg
    name: vid file
  optional: true
- !Flag
  description: (opt.)\
  synonyms:
  - -G
  args: !SimpleFlagArg
    name: gqt file
  optional: true
- !Flag
  description: ''
  synonyms:
  - -i
  args: !SimpleFlagArg
    name: bcf/vcf or gqt file
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "query: invalid option -- '-'\nUnknown option `--'.\ngqt v1.1.3\nusage:\
  \   gqt query -i <bcf/vcf or gqt file> \\\n                   -d <ped database file>\
  \ \\\n                   -c only print number of resulting variants \\\n       \
  \            -v print genotypes (from the source bcf/vcf)\\\n                  \
  \ -t tmp direcory name for remote files (default ./)\n                   -B <bim\
  \ file> (opt.)\\\n                   -O <off file> (opt.)\\\n                  \
  \ -V <vid file> (opt.)\\\n                   -G <gqt file> (opt.)\\\n          \
  \         -p <population query 1> \\\n                   -g <genotype query 1> \\\
  \n                   -p <population query 2> \\\n                   -g <genotype\
  \ query 2> \\\n\nA GQT query returns a set of variants that meet some number of\
  \ population \nand genotype conditions.  Conditions are specified by a population\
  \ query \nand genotype query pair, where the population query defines the set of\n\
  individuals to consider and the genotype query defines a filter on that\npopulation.\
  \  The result is the set of variants within that sub-population\nthat meet the given\
  \ conditions.  For example, to find the variants that are\nheterozygous in the GBR\
  \ population the query pair would be:\n\n\t-p \"Population = 'GBR'\" -g \"HET\"\n\
  \nAny number of query pairs can be included, to further refine that set of\nvariants.\
  \  For example, to find the variants that are heterozygous in at \nleast 10 individuals\
  \ from the GBR population, and are homozygous reference \nin the TSI population\
  \ the two query pairs would be:\n\n\t-p \"Population = 'GBR'\" -g \"count(HET) >=\
  \ 10\" \\\n\t-p \"Population = 'GBR'\" -g \"HOM_REF\"\n\nPopulation queries are\
  \ based on the PED file that is associated with the\ngenotypes, and any column in\
  \ that PED file can be part of the query.  For\nexample, a PED file that includes\
  \ the \"Paternal_ID\" and \"Gender\" fields\n(where male = 1 and female = 2) could\
  \ be queried by:\n\n\t-p \"Paternal_ID = 'NA12878' AND Gender = 2\"\n\nGenotype\
  \ queries can either be direct genotype filters or count-based \nfilters.  To get\
  \ the variants that are heterozygous in every member of the\npopulation the query\
  \ would be:\n\n\t-g \"HET\"\n\nOr to get the variants that are either heterozygous\
  \ or homozygous alternate\nin every member the query would be:\n\n\t-g \"HET HOM_ALT\"\
  \n\nCount based filters used the \"count()\" operator that takes a genotype \nlist\
  \ as a parameter followed by some condition.  For example, to find the\nvariants\
  \ that are either heterozygous or homozygous alternate in no more\nthan 10 individuals\
  \ the query would be\n\n\t-g \"count(HET HOM_ALT) < 10\"\n"
generated_using:
- --help
