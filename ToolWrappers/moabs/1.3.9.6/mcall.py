from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory, Int

Mcall_V0_1_0 = CommandToolBuilder(tool="mcall", base_command=["mcall"], inputs=[ToolInput(tag="in_arg_specify_names", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --mappedFiles ] arg           Specify the names of RRBS/WGBS alignment\nfiles for methylation calling. Multiple\nfiles can be provided to combine them(eg.\nlanes or replicates) into a single track;")), ToolInput(tag="in_sample_name", input_type=File(optional=True), prefix="--sampleName", doc=InputDocumentation(doc="If two or more mappedFiles are specifed,\nthis option generates a merged result;\nIgnored for one input file;")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--outputDir", doc=InputDocumentation(doc="The name of the output directory;")), ToolInput(tag="in_web_output_dir", input_type=Directory(optional=True), prefix="--webOutputDir", doc=InputDocumentation(doc="The name of the web-accessible output\ndirectory for UCSC Genome Browser tracks;")), ToolInput(tag="in_arg_ucsc_genome", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --genome ] arg                The UCSC Genome Browser identifier of\nsource genome assembly; mm9 for example;")), ToolInput(tag="in_arg_reference_dna", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg             Reference DNA fasta file; It's required if\nCHG methylation is wanted;")), ToolInput(tag="in_cytosine_min_score", input_type=Int(optional=True), prefix="--cytosineMinScore", doc=InputDocumentation(doc="(=20)       Threshold for cytosine quality score\n(default: 20). Discard the base if\nthreshold is not reached;")), ToolInput(tag="in_nextbase_min_score", input_type=Int(optional=True), prefix="--nextBaseMinScore", doc=InputDocumentation(doc="(=3)        Threshold for the next base quality\nscore(default: 3,ie, better than B or #);\nPossible values: -1 makes the program not\nto check if next base matches reference;\nany positive integer or zero makes the\nprogram to check if next base matches\nreference and reaches this score\nthreshold;")), ToolInput(tag="in_quality_score_base", input_type=Int(optional=True), prefix="--qualityScoreBase", doc=InputDocumentation(doc="(=0)        Specify quality score system: 0 means\nautodetection; Sanger=>33;Solexa=>59;Illum\nina=>64; See wiki FASTQ_format for\ndetails;")), ToolInput(tag="in_trim_wgb_send_repair_pe_two_seq", input_type=Int(optional=True), prefix="--trimWGBSEndRepairPE2Seq", doc=InputDocumentation(doc="(=3) How to trim end-repair sequence from begin\nof +-/-- reads from Pair End WGBS\nSequencing; 0: no trim; n(positive\ninteger): trim n bases from begin of +-/--\nreads; -2: model determined n; -1: trim\nfrom beginning to before 1st methylated C;\nSuggest 3; n>readLen is equivalent to use\nPE1 reads;")), ToolInput(tag="in_trim_wgb_send_repair_pe_one_seq", input_type=Int(optional=True), prefix="--trimWGBSEndRepairPE1Seq", doc=InputDocumentation(doc="(=3) How to trim end-repair sequence from end\nof ++/-+ reads from Pair End WGBS\nSequencing; 0: no trim; n(positive\ninteger): trim n + NM bases from end of\n++/-+ reads if fragSize <= maxReadLen; -2:\nmodel determined n; Suggest 3;")), ToolInput(tag="in_process_pe_overlap_seq", input_type=Int(optional=True), prefix="--processPEOverlapSeq", doc=InputDocumentation(doc="(=1)     1/0 makes the program count once/twice the\noverlap seq of two pairs;")), ToolInput(tag="in_trim_rrb_send_repair_seq", input_type=Int(optional=True), prefix="--trimRRBSEndRepairSeq", doc=InputDocumentation(doc="(=2)    How to trim end-repair sequence for RRBS\nreads; RRBS or WGBS protocol can be\nautomatically detected; 0: no trim; 2:\ntrim the last CG at exactly end of ++/-+\nreads and trim the first CG at exactly\nbegin of +-/-- reads like the WGBS\nsituation;")), ToolInput(tag="in_skip_random_chrom", input_type=Int(optional=True), prefix="--skipRandomChrom", doc=InputDocumentation(doc="(=1)         Specify whether to skip random and hadrop\nchrom;")), ToolInput(tag="in_arg_requiring_samtools", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --requiredFlag ] arg (=0)     Requiring samtools flag; 0x2(properly\nparied), 0x40(PE1), 0x80(PE2), 0x100(not\nunique), r=0x10(reverse); Examples: -f\n0x10 <=> +-/-+ (Right) reads; -f 0x40 <=>\n++/-+ (PE1) reads; -f 0x50 <=> -+ read; -f\n0x90 <=> +- read;")), ToolInput(tag="in_min_frag_size", input_type=Int(optional=True), prefix="--minFragSize", doc=InputDocumentation(doc="(=0)             Requiring min fragment size, the 9th field\nin sam file; Since non-properly-paired\nread has 0 at 9th field, setting this\noption is requiring properly paired and\nlarge enough fragment size;")), ToolInput(tag="in_min_mm_frag_size", input_type=Int(optional=True), prefix="--minMMFragSize", doc=InputDocumentation(doc="(=0)           Requiring min fragment size for multiply\nmatched read; Same as option above but\nonly this option is only applicable to\nreads with flag 0x100 set as 1;")), ToolInput(tag="in_report_cpx", input_type=File(optional=True), prefix="--reportCpX", doc=InputDocumentation(doc="(=G)               X=G generates a file for CpG methylation;\nA/C/T generates file for CpA/CpC/CpT meth;")), ToolInput(tag="in_report_chx", input_type=File(optional=True), prefix="--reportCHX", doc=InputDocumentation(doc="(=X)               X=G generates a file for CHG methylation;\nA/C/T generates file for CHA/CHC/CHT meth;\nThis file is large;")), ToolInput(tag="in_arg_specify_turn", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --fullMode ] arg (=0)         Specify whether to turn on full mode.\nOff(0): only *.G.bed, *.HG.bed and\n*_stat.txt are allowed to be generated.\nOn(1): file *.HG.bed, *.bed, *_skip.bed,\nand *_strand.bed are forced to be\ngenerated. Extremely large files will be\ngenerated at fullMode.")), ToolInput(tag="in_stats_only", input_type=Int(optional=True), prefix="--statsOnly", doc=InputDocumentation(doc="(=0)               Off(0): no effect. On(1): only *_stat.txt\nis generated.")), ToolInput(tag="in_stat_split", input_type=File(optional=True), prefix="--statSplit", doc=InputDocumentation(doc="To split statistics file by chromosome\ngroups. Chromosomes in a group are\nseparated by `,`, and groups are separated\nby `/`. For example, `--statSplit\nchr1,chr2,chr3/chrLambda`. This example\nwill generate two or three statistics\nfiles: one for chr1,2,3; one for\nchrLambda; one for the rest of chromosomes\nif existing.")), ToolInput(tag="in_keep_temp", input_type=Int(optional=True), prefix="--keepTemp", doc=InputDocumentation(doc="(=0)                Specify whether to keep temp files;")), ToolInput(tag="in_arg_number_threads", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --threads ] arg (=1)          Number of threads on all mapped file.\nSuggest 1~8 on EACH input file depending\nRAM size and disk speed.\n"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="The name of the output directory;")), ToolOutput(tag="out_web_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_web_output_dir", type_hint=File()), doc=OutputDocumentation(doc="The name of the web-accessible output\ndirectory for UCSC Genome Browser tracks;"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mcall_V0_1_0().translate("wdl", allow_empty_container=True)

