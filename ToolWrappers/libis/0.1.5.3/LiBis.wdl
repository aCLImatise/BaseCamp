version 1.0

task LiBis {
  input {
    File? file
    File? setting_file
    Boolean? required_fastq_file
    Int? clip
    Boolean? labels_for_samples
    Int? genome
    Int? window
    Int? step
    Int? process
    File? ref
    Boolean? quality_control
    Boolean? trim
    Int? binsize
    Int? filter
    File? bam
    Boolean? m_call
    Boolean? plot
    Boolean? no_check
    Boolean? moab_s_module
    Boolean? multiple_mapping
    Boolean? pair_end_filter
    Boolean? bam_u
    Boolean? gzip
    Boolean? full_mode
    String? name
  }
  command <<<
    LiBis \
      ~{name} \
      ~{if defined(file) then ("--file " +  '"' + file + '"') else ""} \
      ~{if defined(setting_file) then ("--settingfile " +  '"' + setting_file + '"') else ""} \
      ~{if (required_fastq_file) then "-n" else ""} \
      ~{if defined(clip) then ("--clip " +  '"' + clip + '"') else ""} \
      ~{if (labels_for_samples) then "-l" else ""} \
      ~{if defined(genome) then ("--genome " +  '"' + genome + '"') else ""} \
      ~{if defined(window) then ("--window " +  '"' + window + '"') else ""} \
      ~{if defined(step) then ("--step " +  '"' + step + '"') else ""} \
      ~{if defined(process) then ("--process " +  '"' + process + '"') else ""} \
      ~{if defined(ref) then ("--ref " +  '"' + ref + '"') else ""} \
      ~{if (quality_control) then "--QualityControl" else ""} \
      ~{if (trim) then "--trim" else ""} \
      ~{if defined(binsize) then ("--binsize " +  '"' + binsize + '"') else ""} \
      ~{if defined(filter) then ("--filter " +  '"' + filter + '"') else ""} \
      ~{if defined(bam) then ("--bam " +  '"' + bam + '"') else ""} \
      ~{if (m_call) then "--mcall" else ""} \
      ~{if (plot) then "--plot" else ""} \
      ~{if (no_check) then "--nocheck" else ""} \
      ~{if (moab_s_module) then "--MOABSmodule" else ""} \
      ~{if (multiple_mapping) then "--multiplemapping" else ""} \
      ~{if (pair_end_filter) then "--pairendfilter" else ""} \
      ~{if (bam_u) then "--bamu" else ""} \
      ~{if (gzip) then "--gzip" else ""} \
      ~{if (full_mode) then "--fullmode" else ""}
  >>>
  parameter_meta {
    file: "Enter a number, 0 means using parameter to set up, 1\\nmeans using text file to set up"
    setting_file: "Setting txt file name. Ignore if -f is 0."
    required_fastq_file: "[NAME [NAME ...]], --name [NAME [NAME ...]]\\nRequired. Fastq file name."
    clip: "Clip mode. 0 means close. 1 means open. default: 0"
    labels_for_samples: "[LABEL [LABEL ...]], --label [LABEL [LABEL ...]]\\nLabels for samples"
    genome: "Genome the reference belong to.(Use for plotting)\\nhg18/hg19/mm10/mm9 and so on. Plotting script will not\\navaliable if leave it blank. default=hg38."
    window: "Window length for clipping mode, default=30"
    step: "Step size for clipping mode."
    process: "Process using for one pipeline. Normally bsmap will\\ncost 8 cpu number. So total will be 8p."
    ref: "Required. Reference genome file name."
    quality_control: "Do quality control"
    trim: "Do trimming."
    binsize: "Plot setting. Set the bin size for averaging\\nmethylation ratio among samples, default=1000k"
    filter: "Minimal length for recombined reads"
    bam: "Processed bam file for the first step. If bam files\\nare offered here, the first step of bsmap will be\\nskipped. BAM files can only be generated by BSMAP.\\nDifferent files should be seperated by ','. If there's\\nno bam file for part of the samples, leave the space\\nblank. For example: a.bam,b.bam,,,,f.bam"
    m_call: "Run mcall for mapped bams or not"
    plot: "Generate the final report or not"
    no_check: "Skip the checking step for result folders. Using this\\nparameter may rewrite the previous results."
    moab_s_module: "Run LiBis as MOABS module. Please only apply this when\\nintegrating LiBis to MOABS."
    multiple_mapping: "Apply multiple mapping after first around bsmap"
    pair_end_filter: "Apply pairend filter for all LiBis rescued reads. Only\\nkeep reads have uniquely mapped pair by BSMAP or\\nLiBis."
    bam_u: "Given processed bam file contains unmapped reads. Only\\nuse with -bam is open."
    gzip: "Temporary files are in gz format."
    full_mode: "Keep all temp files."
    name: ""
  }
  output {
    File out_stdout = stdout()
  }
}