from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Tecount_V0_1_0 = CommandToolBuilder(tool="TEcount", base_command=["TEcount"], inputs=[ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--BAM", doc=InputDocumentation(doc="An RNAseq BAM file.")), ToolInput(tag="in_gtf", input_type=File(optional=True), prefix="--GTF", doc=InputDocumentation(doc="GTF file for gene annotations")), ToolInput(tag="in_te", input_type=File(optional=True), prefix="--TE", doc=InputDocumentation(doc="GTF file for transposable element annotations")), ToolInput(tag="in_format", input_type=File(optional=True), prefix="--format", doc=InputDocumentation(doc="file format\nInput file format: BAM or SAM. DEFAULT: BAM")), ToolInput(tag="in_stranded", input_type=String(optional=True), prefix="--stranded", doc=InputDocumentation(doc="Is this a stranded library? (no, forward, or reverse).\nFor 'first-strand' cDNA libraries (e.g. TruSeq\nstranded), choose reverse. For 'second-strand' cDNA\nlibraries (e.g. QIAseq stranded), choose forward.\nDEFAULT: no.")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="counting mode\nHow to count TE: uniq (unique mappers only), or multi\n(distribute among all alignments). DEFAULT: multi")), ToolInput(tag="in_project", input_type=String(optional=True), prefix="--project", doc=InputDocumentation(doc="Name of this project. DEFAULT: TEcount_out")), ToolInput(tag="in_sort_by_pos", input_type=Boolean(optional=True), prefix="--sortByPos", doc=InputDocumentation(doc="Alignment file is sorted by chromosome position.")), ToolInput(tag="in_iteration", input_type=Int(optional=True), prefix="--iteration", doc=InputDocumentation(doc="number of iteration to run the optimization. DEFAULT:\n100")), ToolInput(tag="in_max_l", input_type=Int(optional=True), prefix="--maxL", doc=InputDocumentation(doc="maximum fragment length. DEFAULT:500")), ToolInput(tag="in_min_l", input_type=Int(optional=True), prefix="--minL", doc=InputDocumentation(doc="minimum fragment length. DEFAULT:0")), ToolInput(tag="in_fragment_length", input_type=Int(optional=True), prefix="--fragmentLength", doc=InputDocumentation(doc="average fragment length for single end reads. For\npaired-end, estimated from the input alignment file.\nDEFAULT: for paired-end, estimate from the input\nalignment file; for single-end, ignored by default.")), ToolInput(tag="in_verbose", input_type=Int(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Set verbose level. 0: only show critical message, 1:\nshow additional warning message, 2: show process\ninformation, 3: show debug messages. DEFAULT:2"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tecount_V0_1_0().translate("wdl", allow_empty_container=True)

