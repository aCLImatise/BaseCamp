from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Pyatac_Signal_V0_1_0 = CommandToolBuilder(tool="pyatac_signal", base_command=["pyatac", "signal"], inputs=[ToolInput(tag="in_bed", input_type=File(optional=True), prefix="--bed", doc=InputDocumentation(doc="Positions around which to generate VPlot")), ToolInput(tag="in_bg", input_type=File(optional=True), prefix="--bg", doc=InputDocumentation(doc="Accepts bedgraph file that is tabix indexed")), ToolInput(tag="in_sizes", input_type=File(optional=True), prefix="--sizes", doc=InputDocumentation(doc="File with chromosome names in 1st col, sizes in 2nd")), ToolInput(tag="in_out", input_type=String(optional=True), prefix="--out", doc=InputDocumentation(doc="basename for output")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Number of cores to use")), ToolInput(tag="in_all", input_type=File(optional=True), prefix="--all", doc=InputDocumentation(doc="output csv file (gzipped) with signal track around all")), ToolInput(tag="in_up", input_type=Int(optional=True), prefix="--up", doc=InputDocumentation(doc="bases upstream of site to look")), ToolInput(tag="in_down", input_type=Int(optional=True), prefix="--down", doc=InputDocumentation(doc="bases dowstream site to look")), ToolInput(tag="in_weight", input_type=Int(optional=True), prefix="--weight", doc=InputDocumentation(doc="Column with weight information. Signal for interval\nwill be weighted by value in column")), ToolInput(tag="in_strand", input_type=Int(optional=True), prefix="--strand", doc=InputDocumentation(doc="Column in which strand information is included if\nstrand is to be used")), ToolInput(tag="in_exp", input_type=Boolean(optional=True), prefix="--exp", doc=InputDocumentation(doc="take exponent of value")), ToolInput(tag="in_positive", input_type=Boolean(optional=True), prefix="--positive", doc=InputDocumentation(doc="Only include positive signal")), ToolInput(tag="in_scale", input_type=Boolean(optional=True), prefix="--scale", doc=InputDocumentation(doc="scale each individual track by total signal value")), ToolInput(tag="in_norm", input_type=Boolean(optional=True), prefix="--norm", doc=InputDocumentation(doc="normalize aggregate track by number of intervals")), ToolInput(tag="in_sites", input_type=String(), position=0, doc=InputDocumentation(doc="--no_agg              Don't make a plot of aggregate or write up of")), ToolInput(tag="in_aggregate", input_type=String(), position=1, doc=InputDocumentation(doc="Bed options:"))], outputs=[ToolOutput(tag="out_all", output_type=File(optional=True), selector=InputSelector(input_to_select="in_all", type_hint=File()), doc=OutputDocumentation(doc="output csv file (gzipped) with signal track around all"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pyatac_Signal_V0_1_0().translate("wdl", allow_empty_container=True)

