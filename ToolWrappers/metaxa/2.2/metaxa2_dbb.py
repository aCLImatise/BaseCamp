from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Directory, Boolean

Metaxa2_Dbb_V0_1_0 = CommandToolBuilder(tool="metaxa2_dbb", base_command=["metaxa2_dbb"], inputs=[ToolInput(tag="in_dna_fasta_file_containing_reference_sequences_single", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc=": DNA FASTA file containing the reference sequences of a single gene to be used for classification (overrides specific input options below)")), ToolInput(tag="in_directory_name_output", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc=": Directory name for the output files")), ToolInput(tag="in_gene_name_database", input_type=String(optional=True), prefix="-g", doc=InputDocumentation(doc=": Gene name for the database")), ToolInput(tag="in_use_hmms_build", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc=": Use HMMs from the specified directory instead of computing new ones (i.e. only build a new classification database), not used by default")), ToolInput(tag="in_taxonomy_file_containing", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc=": Taxonomy file containing taxonomic information to be parsed in any of the following formats:\nMetaxa2, FASTA, ASN1, NCBI XML, INSD XML")), ToolInput(tag="in_id_first_sequence", input_type=String(optional=True), prefix="-r", doc=InputDocumentation(doc=": ID of the sequence that should be used as the representative sequence of the gene\nif blank, the first sequence in the input file is used")), ToolInput(tag="in_auto_rep", input_type=String(optional=True), prefix="--auto_rep", doc=InputDocumentation(doc=": Choose a reference sequence automatically (requires Usearch to be installed), on (T) by default")), ToolInput(tag="in_cpu", input_type=String(optional=True), prefix="--cpu", doc=InputDocumentation(doc=": Number of CPUs to use (will be passed on to other programs), default = 1")), ToolInput(tag="in_save_raw", input_type=String(optional=True), prefix="--save_raw", doc=InputDocumentation(doc=": Keep intermediate files after the program finishes, off (F) by default")), ToolInput(tag="in_plus", input_type=String(optional=True), prefix="--plus", doc=InputDocumentation(doc=": Use BLAST+ instead of legacy BLAST, off (F) by default")), ToolInput(tag="in_dna_fasta_file_containing_archaeal_sequences", input_type=String(optional=True), prefix="-a", doc=InputDocumentation(doc=": DNA FASTA file containing archaeal reference sequences to be used for classification (cannot be combined with the -i option)")), ToolInput(tag="in_dna_fasta_file_containing_bacterial_sequences", input_type=String(optional=True), prefix="-b", doc=InputDocumentation(doc=": DNA FASTA file containing bacterial reference sequences to be used for classification (cannot be combined with the -i option)")), ToolInput(tag="in_dna_fasta_file_containing_chloroplast_sequences", input_type=String(optional=True), prefix="-c", doc=InputDocumentation(doc=": DNA FASTA file containing chloroplast reference sequences to be used for classification (cannot be combined with the -i option)")), ToolInput(tag="in_dna_fasta_file_containing_eukaryote_reference_sequences", input_type=String(optional=True), prefix="-e", doc=InputDocumentation(doc=": DNA FASTA file containing eukaryote reference sequences to be used for classification (cannot be combined with the -i option)")), ToolInput(tag="in_dna_fasta_file_containing_mitochondrial_sequences", input_type=String(optional=True), prefix="-m", doc=InputDocumentation(doc=": DNA FASTA file containing mitochondrial reference sequences to be used for classification (cannot be combined with the -i option)")), ToolInput(tag="in_dna_fasta_file_containing_metazoan_sequences", input_type=String(optional=True), prefix="-n", doc=InputDocumentation(doc=": DNA FASTA file containing metazoan mitochondrial reference sequences to be used for classification (cannot be combined with the -i option)")), ToolInput(tag="in_other", input_type=String(optional=True), prefix="--other", doc=InputDocumentation(doc=": DNA FASTA file containing reference sequences of other origins to be used for classification (cannot be combined with the -i option)")), ToolInput(tag="in_full_length", input_type=String(optional=True), prefix="--full_length", doc=InputDocumentation(doc=": number of basepairs to use for full-length definition (set to zero to disable full-length extraction), default = 100")), ToolInput(tag="in_conservation_score_cutoff", input_type=String(optional=True), prefix="-C", doc=InputDocumentation(doc=": Conservation score cutoff, 4 by default, not used unless -A is set to false (F)")), ToolInput(tag="in_noise_cutoff_minimal", input_type=String(optional=True), prefix="-N", doc=InputDocumentation(doc=": Noise cutoff (minimal proportion of sequences required to be considered at each position). A number between 0 and 1, 0.1 by default")), ToolInput(tag="in_autodetect_score_cutoff", input_type=String(optional=True), prefix="-A", doc=InputDocumentation(doc=": Auto-detect conservation score cutoff, on (T) by default")), ToolInput(tag="in_minimal_conserved_proportion", input_type=String(optional=True), prefix="-P", doc=InputDocumentation(doc=": Minimal conserved proportion of the alignment (until a lower conservation cutoff is considered), 0.6 by default")), ToolInput(tag="in_lookahead_length_number", input_type=String(optional=True), prefix="-L", doc=InputDocumentation(doc=": Look-ahead length (the number of residues to consider when determining the start and end of conserved regions), 5 by default")), ToolInput(tag="in_minimal_conserved_region", input_type=String(optional=True), prefix="-M", doc=InputDocumentation(doc=": Minimal conserved region length, 20 by default")), ToolInput(tag="in_single_profile", input_type=String(optional=True), prefix="--single_profile", doc=InputDocumentation(doc=": Build only one single HMM for the entire alignment from the input sequences, off (F) by default")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc=": Selects the mode in which the profile database is built, default is divergent")), ToolInput(tag="in_de_replicate", input_type=String(optional=True), prefix="--dereplicate", doc=InputDocumentation(doc=": Will dereplicate the input data using Usearch before building the database, using the specified idenity threshold, off (F) by default")), ToolInput(tag="in_filter_uncultured", input_type=String(optional=True), prefix="--filter_uncultured", doc=InputDocumentation(doc=": Will try to filter out sequences that are derived from uncultured species, off (F) by default")), ToolInput(tag="in_filter_level", input_type=String(optional=True), prefix="--filter_level", doc=InputDocumentation(doc=": Will filter out sequences with taxonomic information lower than the specified level, 0 by default")), ToolInput(tag="in_correct_taxonomy", input_type=String(optional=True), prefix="--correct_taxonomy", doc=InputDocumentation(doc=": Will try to correct the taxonomic information at order, family, genus and species level, off (F) by default")), ToolInput(tag="in_cutoffs", input_type=String(optional=True), prefix="--cutoffs", doc=InputDocumentation(doc=": A string of number defining the cutoffs at different taxonomic levels. Will turn off automatic calculation of cutoffs. If blank, cutoffs are determined automatically, default is blank (off)")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="--sample", doc=InputDocumentation(doc=": The number of sequences to aim to investigate when determining taxonomic cutoffs, 1000 by default")), ToolInput(tag="in_evaluate", input_type=String(optional=True), prefix="--evaluate", doc=InputDocumentation(doc=": Statistically evaluate the performance of the database built. This increases the time requirement for the process dramatically, off (F) by default")), ToolInput(tag="in_iterations", input_type=String(optional=True), prefix="--iterations", doc=InputDocumentation(doc=": Number of iterations for the statistical evaluation, 10 by default")), ToolInput(tag="in_test_sets", input_type=String(optional=True), prefix="--test_sets", doc=InputDocumentation(doc=": Proportion of sequences to leave out for testing. Several values can be specified, separated by commas, 0.1 by default")), ToolInput(tag="in_db", input_type=String(optional=True), prefix="--db", doc=InputDocumentation(doc=": Skips building the database, and only runs the evaluation on the specified database, not used by default")), ToolInput(tag="in_help", input_type=Boolean(optional=True), prefix="--help", doc=InputDocumentation(doc=": displays this help message")), ToolInput(tag="in_bugs", input_type=Boolean(optional=True), prefix="--bugs", doc=InputDocumentation(doc=": displays the bug fixes and known bugs in this version of Metaxa")), ToolInput(tag="in_license", input_type=Boolean(optional=True), prefix="--license", doc=InputDocumentation(doc=": displays licensing information"))], outputs=[ToolOutput(tag="out_directory_name_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_directory_name_output", type_hint=File()), doc=OutputDocumentation(doc=": Directory name for the output files"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Metaxa2_Dbb_V0_1_0().translate("wdl", allow_empty_container=True)

