from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, Float, String

Ribotish_Quality_V0_1_0 = CommandToolBuilder(tool="ribotish_quality", base_command=["ribotish", "quality"], inputs=[ToolInput(tag="in_riboseq_bam_file", input_type=File(optional=True), prefix="-b", doc=InputDocumentation(doc="Riboseq bam file")), ToolInput(tag="in_gene_annotation_file", input_type=File(optional=True), prefix="-g", doc=InputDocumentation(doc="Gene annotation file")), ToolInput(tag="in_output_data_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Output data file (default: ribobampath[:-4]+\n'_qual.txt')")), ToolInput(tag="in_tis", input_type=Boolean(optional=True), prefix="--tis", doc=InputDocumentation(doc="The data is TIS enriched (for LTM & Harritonine)")), ToolInput(tag="in_input_previous_output", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="Input previous output file, do not read gene file and\nbam file again")), ToolInput(tag="in_gene_format", input_type=File(optional=True), prefix="--geneformat", doc=InputDocumentation(doc="Gene annotation file format (gtf, bed, gpd, gff,\ndefault: auto)")), ToolInput(tag="in_chr_map", input_type=File(optional=True), prefix="--chrmap", doc=InputDocumentation(doc="Input chromosome id mapping table file if annotation\nchr ids are not same as chr ids in bam/fasta files")), ToolInput(tag="in_output_pdf_figure", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="Output pdf figure file (default: ribobampath[:-4]+\n'_qual.pdf')")), ToolInput(tag="in_output_offset_defaultribobampath", input_type=File(optional=True), prefix="-r", doc=InputDocumentation(doc="Output offset parameter file (default:\nribobampath[:-4]+ '.para.py')")), ToolInput(tag="in_range_tag_length", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="Range of tag length (default: 25,35)")), ToolInput(tag="in_position_range_start", input_type=Int(optional=True), prefix="-d", doc=InputDocumentation(doc="Position range near start codon or stop codon\n(default: -40,20)")), ToolInput(tag="in_bins", input_type=Int(optional=True), prefix="--bins", doc=InputDocumentation(doc="Bins for cds profile (default: 20)")), ToolInput(tag="in_nom_zero", input_type=Boolean(optional=True), prefix="--nom0", doc=InputDocumentation(doc="Do not consider reads with mismatch at position 0 as a\nnew group")), ToolInput(tag="in_th", input_type=Float(optional=True), prefix="--th", doc=InputDocumentation(doc="Threshold for quality (default: 0.5)")), ToolInput(tag="in_max_nh", input_type=Int(optional=True), prefix="--maxNH", doc=InputDocumentation(doc="Max NH value allowed for bam alignments (default: 1)")), ToolInput(tag="in_min_mapq", input_type=Int(optional=True), prefix="--minMapQ", doc=InputDocumentation(doc="Min MapQ value required for bam alignments (default:\n1)")), ToolInput(tag="in_secondary", input_type=Boolean(optional=True), prefix="--secondary", doc=InputDocumentation(doc="Use bam secondary alignments")), ToolInput(tag="in_paired", input_type=Boolean(optional=True), prefix="--paired", doc=InputDocumentation(doc="Reads are paired end")), ToolInput(tag="in_colorblind", input_type=Boolean(optional=True), prefix="--colorblind", doc=InputDocumentation(doc="Use a color style readable for color blind people\n('#F00078,#00F000,#0078F0')")), ToolInput(tag="in_colors", input_type=String(optional=True), prefix="--colors", doc=InputDocumentation(doc="User specified Matplotlib accepted color codes for\nthree frames (default: 'r,g,b')")), ToolInput(tag="in_number_processes_default", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="Number of processes (default: 1)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase output verbosity"))], outputs=[ToolOutput(tag="out_output_data_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_data_file", type_hint=File()), doc=OutputDocumentation(doc="Output data file (default: ribobampath[:-4]+\n'_qual.txt')")), ToolOutput(tag="out_output_pdf_figure", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_pdf_figure", type_hint=File()), doc=OutputDocumentation(doc="Output pdf figure file (default: ribobampath[:-4]+\n'_qual.pdf')")), ToolOutput(tag="out_output_offset_defaultribobampath", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_offset_defaultribobampath", type_hint=File()), doc=OutputDocumentation(doc="Output offset parameter file (default:\nribobampath[:-4]+ '.para.py')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ribotish_Quality_V0_1_0().translate("wdl", allow_empty_container=True)

