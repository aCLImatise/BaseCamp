from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean, Directory

Xtea_Long_V0_1_0 = CommandToolBuilder(tool="xtea_long", base_command=["xtea_long"], inputs=[ToolInput(tag="in_id", input_type=File(optional=True), prefix="--id", doc=InputDocumentation(doc="sample id list file")), ToolInput(tag="in_par", input_type=File(optional=True), prefix="--par", doc=InputDocumentation(doc="parameter file")), ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="Input bam file")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="number of cores")), ToolInput(tag="in_memory", input_type=String(optional=True), prefix="--memory", doc=InputDocumentation(doc="Memory limit in GB")), ToolInput(tag="in_partition", input_type=String(optional=True), prefix="--partition", doc=InputDocumentation(doc="Which queue to run the job")), ToolInput(tag="in_time", input_type=String(optional=True), prefix="--time", doc=InputDocumentation(doc="Time limit")), ToolInput(tag="in_lsf", input_type=Boolean(optional=True), prefix="--lsf", doc=InputDocumentation(doc="Indiates submit to LSF system")), ToolInput(tag="in_slur_m", input_type=Boolean(optional=True), prefix="--slurm", doc=InputDocumentation(doc="Indiates submit to slurm system")), ToolInput(tag="in_cmd", input_type=Boolean(optional=True), prefix="--cmd", doc=InputDocumentation(doc="Generate asm command script (for cluster)")), ToolInput(tag="in_complex", input_type=Boolean(optional=True), prefix="--complex", doc=InputDocumentation(doc="Call complex events (TE promoted SV)")), ToolInput(tag="in_mei_no_asm", input_type=Boolean(optional=True), prefix="--mei_no_asm", doc=InputDocumentation(doc="Call MEI only without asm")), ToolInput(tag="in_clean", input_type=Boolean(optional=True), prefix="--clean", doc=InputDocumentation(doc="Clean the intermediate files")), ToolInput(tag="in_fast", input_type=Boolean(optional=True), prefix="--fast", doc=InputDocumentation(doc="This is the fast mode, which may sacrifice the")), ToolInput(tag="in_ref", input_type=String(optional=True), prefix="--ref", doc=InputDocumentation(doc="reference genome")), ToolInput(tag="in_gene", input_type=File(optional=True), prefix="--gene", doc=InputDocumentation(doc="Gene annotation file")), ToolInput(tag="in_win", input_type=Int(optional=True), prefix="--win", doc=InputDocumentation(doc="peak window size")), ToolInput(tag="in_x_tea", input_type=Directory(optional=True), prefix="--xtea", doc=InputDocumentation(doc="xTEA folder")), ToolInput(tag="in_rep", input_type=Directory(optional=True), prefix="--rep", doc=InputDocumentation(doc="Repeat library folder")), ToolInput(tag="in_rms_k", input_type=String(optional=True), prefix="--rmsk", doc=InputDocumentation(doc="RepeatMasker output on the reference")), ToolInput(tag="in_cns", input_type=File(optional=True), prefix="--cns", doc=InputDocumentation(doc="repeat consensus folder")), ToolInput(tag="in_ref_sva", input_type=File(optional=True), prefix="--ref_sva", doc=InputDocumentation(doc="reference SVA copies")), ToolInput(tag="in_min", input_type=Int(optional=True), prefix="--min", doc=InputDocumentation(doc="Minimum copy length for find polymorhpic copies")), ToolInput(tag="in_flag", input_type=Int(optional=True), prefix="--flag", doc=InputDocumentation(doc="Flag indicates which step to run (1-clip, 2-asm,\n4-ghost, 8-classification, 16-clean)")), ToolInput(tag="in_type", input_type=Int(optional=True), prefix="--type", doc=InputDocumentation(doc="Type of repeats working on (1-LINE1, 2-Alu, 4-SVA,\n8-HERV, 16-Mitochondria)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="The output file\n")), ToolInput(tag="in_sensitivity", input_type=String(), position=0, doc=InputDocumentation(doc="-p WFOLDER, --path=WFOLDER"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="The output file\n"))], container="quay.io/biocontainers/xtea:0.1.6--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Xtea_Long_V0_1_0().translate("wdl")

