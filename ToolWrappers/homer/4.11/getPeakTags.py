from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, Directory

Getpeaktags_V0_1_0 = CommandToolBuilder(tool="getPeakTags", base_command=["getPeakTags"], inputs=[ToolInput(tag="in_start", input_type=Boolean(optional=True), prefix="-start", doc=InputDocumentation(doc="<#> (position to start counting tags relative to peak center, default: -1000)")), ToolInput(tag="in_end", input_type=Boolean(optional=True), prefix="-end", doc=InputDocumentation(doc="<#> (position to stop counting tags relative to peak center, default: 1000)")), ToolInput(tag="in_offset", input_type=Boolean(optional=True), prefix="-offset", doc=InputDocumentation(doc="<#> (relative position of start to peak center, default: midpoint)")), ToolInput(tag="in_fixed", input_type=Boolean(optional=True), prefix="-fixed", doc=InputDocumentation(doc="(Count tags relative to actual peak start and stop - parameters -start and")), ToolInput(tag="in_count", input_type=Boolean(optional=True), prefix="-count", doc=InputDocumentation(doc="(DEFAULT, Will output total/ratio tag counts to stdout)")), ToolInput(tag="in_strand", input_type=Boolean(optional=True), prefix="-strand", doc=InputDocumentation(doc="<both|+|-> (Strand [relative to peak] to count tags from, default:both)")), ToolInput(tag="in_tag_adjust", input_type=Boolean(optional=True), prefix="-tagAdjust", doc=InputDocumentation(doc="<#> (bp to shift tag positions to estimate fragment centers, default: 0)\n'-tagAdjust auto' uses half of the estimated tag fragment length")), ToolInput(tag="in_tbp", input_type=Boolean(optional=True), prefix="-tbp", doc=InputDocumentation(doc="<#> (Maximum tags per bp to count, 0 = no limit, default: 0)")), ToolInput(tag="in_ratio", input_type=Boolean(optional=True), prefix="-ratio", doc=InputDocumentation(doc="(report tags per bp)")), ToolInput(tag="in_nfr", input_type=Boolean(optional=True), prefix="-nfr", doc=InputDocumentation(doc="(Return nucleosome free region score over the peak center)")), ToolInput(tag="in_nfr_size", input_type=Boolean(optional=True), prefix="-nfrSize", doc=InputDocumentation(doc="<#> (nucleosome free region size, default 100)")), ToolInput(tag="in_peak_tags", input_type=Boolean(optional=True), prefix="-peaktags", doc=InputDocumentation(doc="(output locations of tags relative to peak reference position to stdout)\nColumns: 1:peakname,2:tags separated by ','")), ToolInput(tag="in_tags", input_type=Boolean(optional=True), prefix="-tags", doc=InputDocumentation(doc="(output genomic locations of tags i.e. tags.tsv file to stdout)\nColumns: 1:none,2:chr,3:position,4:strand,5:value,6:length/-1")), ToolInput(tag="in_tag_autocorrelation", input_type=Boolean(optional=True), prefix="-tagAutocorrelation", doc=InputDocumentation(doc="<#> (output autocorrelation between read in locus, #=max distance)")), ToolInput(tag="in_center", input_type=Boolean(optional=True), prefix="-center", doc=InputDocumentation(doc="(Center peaks on summit of peak)")), ToolInput(tag="in_frag_length", input_type=Boolean(optional=True), prefix="-fragLength", doc=InputDocumentation(doc="<#> (sequencing fragment length estimate, default: auto)")), ToolInput(tag="in_or", input_type=Boolean(optional=True), prefix="-or-", doc=InputDocumentation(doc="getPeakTags <peak file> -bedGraph <bedGraph file> [options]")), ToolInput(tag="in_individuals", input_type=Int(optional=True), prefix="-individuals", doc=InputDocumentation(doc="[name 2] ... (only report genotypes for these column headers)")), ToolInput(tag="in_all", input_type=Boolean(optional=True), prefix="-all", doc=InputDocumentation(doc="(By default, only SNPs with non-reference alleles in at least on individual are\nreported, '-all' will report all SNPs regardless of genotype)")), ToolInput(tag="in_peak_snps", input_type=Boolean(optional=True), prefix="-peaksnps", doc=InputDocumentation(doc="(will individual SNPs and genotypes associated with each peak)")), ToolInput(tag="in_vcf", input_type=File(optional=True), prefix="-vcf", doc=InputDocumentation(doc="")), ToolInput(tag="in_wig", input_type=File(optional=True), prefix="-wig", doc=InputDocumentation(doc="")), ToolInput(tag="in_peak_file", input_type=File(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_tag_directory", input_type=Directory(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Getpeaktags_V0_1_0().translate("wdl", allow_empty_container=True)

