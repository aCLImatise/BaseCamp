from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, String, File

Getdifferentialpeaksreplicates_Pl_V0_1_0 = CommandToolBuilder(tool="getDifferentialPeaksReplicates.pl", base_command=["getDifferentialPeaksReplicates.pl"], inputs=[ToolInput(tag="in_b", input_type=Int(optional=True), prefix="-b", doc=InputDocumentation(doc="[background tagdir2] ...")), ToolInput(tag="in_i", input_type=Int(optional=True), prefix="-i", doc=InputDocumentation(doc="[Input tagdir2] ...")), ToolInput(tag="in_fold_enrichment_default", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="<#> (fold enrichment over bg, default: 2)")), ToolInput(tag="in_fdr_bg_default", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="<#> (FDR over bg, default: 0.05)")), ToolInput(tag="in_fdr", input_type=Boolean(optional=True), prefix="-fdr", doc=InputDocumentation(doc="<#>, -F <#>, -L <#> (parameters for findPeaks)")), ToolInput(tag="in_genome", input_type=String(optional=True), prefix="-genome", doc=InputDocumentation(doc="(genome version to use for annotation)")), ToolInput(tag="in_de_seq_two", input_type=Boolean(optional=True), prefix="-DESeq2", doc=InputDocumentation(doc="(differential stats algorithm, default: DESeq2)")), ToolInput(tag="in_balanced", input_type=Boolean(optional=True), prefix="-balanced", doc=InputDocumentation(doc="(normalize signal across peaks, default: normalize to read totals)")), ToolInput(tag="in_frag_length", input_type=Boolean(optional=True), prefix="-fragLength", doc=InputDocumentation(doc="<#> (standardize estimated fragment length across analysis)")), ToolInput(tag="in_all", input_type=Boolean(optional=True), prefix="-all", doc=InputDocumentation(doc="(report all peaks, not just differentially regulated)")), ToolInput(tag="in_style", input_type=String(optional=True), prefix="-style", doc=InputDocumentation(doc="(findPeaks style to use for finding peaks)")), ToolInput(tag="in_use", input_type=String(optional=True), prefix="-use", doc=InputDocumentation(doc="(use existing peaks in tag directories)")), ToolInput(tag="in_use_specific_file", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="(use specific peak file instead of tagDir/peaks.txt or finding new one)")), ToolInput(tag="in_t", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="")), ToolInput(tag="in_ip", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_tag_dir_two", input_type=Int(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Getdifferentialpeaksreplicates_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

