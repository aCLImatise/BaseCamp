from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Sima_Pl_V0_1_0 = CommandToolBuilder(tool="SIMA.pl", base_command=["SIMA.pl"], inputs=[ToolInput(tag="in_domains_perform_analysis", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="(Domains to perform analysis on)")), ToolInput(tag="in_features_check_enrichment", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="[peak file2] ... (features to check for enrichment)")), ToolInput(tag="in_res", input_type=Boolean(optional=True), prefix="-res", doc=InputDocumentation(doc="<#> (resolution, default=2500)")), ToolInput(tag="in_window", input_type=Boolean(optional=True), prefix="-window", doc=InputDocumentation(doc="<#> (super resolution/window size, default=10000)")), ToolInput(tag="in_mind_ist", input_type=Boolean(optional=True), prefix="-minDist", doc=InputDocumentation(doc="<#> (minimum interaction read distance, default: 2x superRes)")), ToolInput(tag="in_mind_size", input_type=Boolean(optional=True), prefix="-minDsize", doc=InputDocumentation(doc="<#> (minimum domain size, default: 500000)")), ToolInput(tag="in_min", input_type=Boolean(optional=True), prefix="-min", doc=InputDocumentation(doc="<#> (minimum distance between domains to test significance, default=-1)")), ToolInput(tag="in_max", input_type=Boolean(optional=True), prefix="-max", doc=InputDocumentation(doc="<#> (maximum distance, set to -1 to allow inter-chr, default=1e9)")), ToolInput(tag="in_chr", input_type=String(optional=True), prefix="-chr", doc=InputDocumentation(doc="(only analyze this chromosome, default: all)")), ToolInput(tag="in_p_two", input_type=Int(optional=True), prefix="-p2", doc=InputDocumentation(doc="[peak file2] ... (heterogenous peak enrichments)")), ToolInput(tag="in_avs_a", input_type=Boolean(optional=True), prefix="-AvsA", doc=InputDocumentation(doc="(All versus All, compare -p peaks against one another)")), ToolInput(tag="in_number_randomizations_domain", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="<#> (Number of randomizations per domain, default: 1000)")), ToolInput(tag="in_r_depth", input_type=Boolean(optional=True), prefix="-rdepth", doc=InputDocumentation(doc="(adjust randomization based on HiC read depth)")), ToolInput(tag="in_cpu", input_type=Boolean(optional=True), prefix="-cpu", doc=InputDocumentation(doc="<#> (number of CPUs to use for analysis, default: 1)")), ToolInput(tag="in_merge", input_type=Boolean(optional=True), prefix="-merge", doc=InputDocumentation(doc="(merge results for all domains)")), ToolInput(tag="in_stat", input_type=String(optional=True), prefix="-stat", doc=InputDocumentation(doc="(output stat for matrix mode, default: ratio)")), ToolInput(tag="in_p_value", input_type=Boolean(optional=True), prefix="-pvalue", doc=InputDocumentation(doc="<#> (p-value cutoff to report the ratio, default: 0.01)")), ToolInput(tag="in_min_peaks", input_type=Boolean(optional=True), prefix="-minPeaks", doc=InputDocumentation(doc="<#> (minimum number of peaks, default: none)")), ToolInput(tag="in_d_name", input_type=String(optional=True), prefix="-dname", doc=InputDocumentation(doc="(domain name to show)")), ToolInput(tag="in_d_name_two", input_type=Int(optional=True), prefix="-dname2", doc=InputDocumentation(doc="(domain name to show, if different)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sima_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

