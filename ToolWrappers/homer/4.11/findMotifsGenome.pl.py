from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int, Directory

Findmotifsgenome_Pl_V0_1_0 = CommandToolBuilder(tool="findMotifsGenome.pl", base_command=["findMotifsGenome.pl"], inputs=[ToolInput(tag="in_mask", input_type=Boolean(optional=True), prefix="-mask", doc=InputDocumentation(doc="(mask repeats/lower case sequence, can also add 'r' to genome, i.e. mm9r)")), ToolInput(tag="in_bg", input_type=File(optional=True), prefix="-bg", doc=InputDocumentation(doc="(genomic positions to be used as background, default=automatic)\nremoves background positions overlapping with target positions unless -keepOverlappingBg is used\n-chopify (chop up large background regions to the avg size of target regions)")), ToolInput(tag="in_len", input_type=Boolean(optional=True), prefix="-len", doc=InputDocumentation(doc="<#>[,<#>,<#>...] (motif length, default=8,10,12) [NOTE: values greater 12 may cause the program\nto run out of memory - in these cases decrease the number of sequences analyzed (-N),\nor try analyzing shorter sequence regions (i.e. -size 100)]")), ToolInput(tag="in_number_motifs_optimize", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="<#> (Number of motifs to optimize, default: 25)")), ToolInput(tag="in_mis", input_type=Boolean(optional=True), prefix="-mis", doc=InputDocumentation(doc="<#> (global optimization: searches for strings with # mismatches, default: 2)")), ToolInput(tag="in_norev_opp", input_type=Boolean(optional=True), prefix="-norevopp", doc=InputDocumentation(doc="(don't search reverse strand for motifs)")), ToolInput(tag="in_no_motif", input_type=Boolean(optional=True), prefix="-nomotif", doc=InputDocumentation(doc="(don't search for de novo motif enrichment)")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="-rna", doc=InputDocumentation(doc="(output RNA motif logos and compare to RNA motif database, automatically sets -norevopp)")), ToolInput(tag="in_find", input_type=File(optional=True), prefix="-find", doc=InputDocumentation(doc="(This will cause the program to only scan for motifs)")), ToolInput(tag="in_m_set", input_type=String(optional=True), prefix="-mset", doc=InputDocumentation(doc="(check against motif collects, default: auto)")), ToolInput(tag="in_basic", input_type=Boolean(optional=True), prefix="-basic", doc=InputDocumentation(doc="(just visualize de novo motifs, don't check similarity with known motifs)")), ToolInput(tag="in_bits", input_type=Boolean(optional=True), prefix="-bits", doc=InputDocumentation(doc="(scale sequence logos by information content, default: doesn't scale)")), ToolInput(tag="in_no_check", input_type=Boolean(optional=True), prefix="-nocheck", doc=InputDocumentation(doc="(don't search for de novo vs. known motif similarity)")), ToolInput(tag="in_m_check", input_type=File(optional=True), prefix="-mcheck", doc=InputDocumentation(doc="(known motifs to check against de novo motifs,")), ToolInput(tag="in_float", input_type=Boolean(optional=True), prefix="-float", doc=InputDocumentation(doc="(allow adjustment of the degeneracy threshold for known motifs to improve p-value[dangerous])")), ToolInput(tag="in_no_known", input_type=Boolean(optional=True), prefix="-noknown", doc=InputDocumentation(doc="(don't search for known motif enrichment, default: -known)")), ToolInput(tag="in_m_known", input_type=File(optional=True), prefix="-mknown", doc=InputDocumentation(doc="(known motifs to check for enrichment,")), ToolInput(tag="in_no_facts", input_type=Boolean(optional=True), prefix="-nofacts", doc=InputDocumentation(doc="(omit humor)")), ToolInput(tag="in_seq_logo", input_type=Boolean(optional=True), prefix="-seqlogo", doc=InputDocumentation(doc="(use weblogo/seqlogo/ghostscript to generate logos, default uses SVG now)")), ToolInput(tag="in_gc", input_type=Boolean(optional=True), prefix="-gc", doc=InputDocumentation(doc="(use GC% for sequence content normalization, now the default)")), ToolInput(tag="in_cpg", input_type=Boolean(optional=True), prefix="-cpg", doc=InputDocumentation(doc="(use CpG% instead of GC% for sequence content normalization)")), ToolInput(tag="in_no_weight", input_type=Boolean(optional=True), prefix="-noweight", doc=InputDocumentation(doc="(no CG correction)")), ToolInput(tag="in_number_sequences_use", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="<#> (Number of sequences to use for motif finding, default=max(50k, 2x input)")), ToolInput(tag="in_local", input_type=Boolean(optional=True), prefix="-local", doc=InputDocumentation(doc="<#> (use local background, # of equal size regions around peaks to use i.e. 2)")), ToolInput(tag="in_redundant", input_type=Boolean(optional=True), prefix="-redundant", doc=InputDocumentation(doc="<#> (Remove redundant sequences matching greater than # percent, i.e. -redundant 0.5)")), ToolInput(tag="in_max_n", input_type=Boolean(optional=True), prefix="-maxN", doc=InputDocumentation(doc="<#> (maximum percentage of N's in sequence to consider for motif finding, default: 0.7)")), ToolInput(tag="in_mask_motif", input_type=Int(optional=True), prefix="-maskMotif", doc=InputDocumentation(doc="[motif file 2]... (motifs to mask before motif finding)")), ToolInput(tag="in_opt", input_type=Int(optional=True), prefix="-opt", doc=InputDocumentation(doc="[motif file 2]... (motifs to optimize or change length of)")), ToolInput(tag="in_rand", input_type=Boolean(optional=True), prefix="-rand", doc=InputDocumentation(doc="(randomize target and background sequences labels)")), ToolInput(tag="in_ref", input_type=File(optional=True), prefix="-ref", doc=InputDocumentation(doc="(use file for target and background - first argument is list of peak ids for targets)")), ToolInput(tag="in_oligo", input_type=Boolean(optional=True), prefix="-oligo", doc=InputDocumentation(doc="(perform analysis of individual oligo enrichment)")), ToolInput(tag="in_dump_fast_a", input_type=Boolean(optional=True), prefix="-dumpFasta", doc=InputDocumentation(doc="(Dump fasta files for target and background sequences for use with other programs)")), ToolInput(tag="in_pre_parse", input_type=Boolean(optional=True), prefix="-preparse", doc=InputDocumentation(doc="(force new background files to be created)")), ToolInput(tag="in_pre_parsed_dir", input_type=Directory(optional=True), prefix="-preparsedDir", doc=InputDocumentation(doc="(location to search for preparsed file and/or place new files)")), ToolInput(tag="in_keep_files", input_type=Boolean(optional=True), prefix="-keepFiles", doc=InputDocumentation(doc="(keep temporary files)")), ToolInput(tag="in_fdr", input_type=Boolean(optional=True), prefix="-fdr", doc=InputDocumentation(doc="<#> (Calculate empirical FDR for de novo discovery #=number of randomizations)")), ToolInput(tag="in_homer_two", input_type=Boolean(optional=True), prefix="-homer2", doc=InputDocumentation(doc="(use homer2 instead of original homer, default)")), ToolInput(tag="in_nlen", input_type=Boolean(optional=True), prefix="-nlen", doc=InputDocumentation(doc="<#> (length of lower-order oligos to normalize in background, default: -nlen 3)")), ToolInput(tag="in_nmax", input_type=Boolean(optional=True), prefix="-nmax", doc=InputDocumentation(doc="<#> (Max normalization iterations, default: 160)")), ToolInput(tag="in_neutral", input_type=Boolean(optional=True), prefix="-neutral", doc=InputDocumentation(doc="(weight sequences to neutral frequencies, i.e. 25%, 6.25%, etc.)")), ToolInput(tag="in_olen", input_type=Boolean(optional=True), prefix="-olen", doc=InputDocumentation(doc="<#> (lower-order oligo normalization for oligo table, use if -nlen isn't working well)")), ToolInput(tag="in_number_processors_use", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="<#> (Number of processors to use, default: 1)")), ToolInput(tag="in_maximum_expected_instance", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="<#> (Maximum expected motif instance per bp in random sequence, default: 0.01)")), ToolInput(tag="in_cache", input_type=Boolean(optional=True), prefix="-cache", doc=InputDocumentation(doc="<#> (size in MB for statistics cache, default: 500)")), ToolInput(tag="in_quick_mask", input_type=Boolean(optional=True), prefix="-quickMask", doc=InputDocumentation(doc="(skip full masking after finding motifs, similar to original homer)")), ToolInput(tag="in_min_lp", input_type=Boolean(optional=True), prefix="-minlp", doc=InputDocumentation(doc="<#> (stop looking for motifs when seed logp score gets above #, default: -10)")), ToolInput(tag="in_homer_one", input_type=Boolean(optional=True), prefix="-homer1", doc=InputDocumentation(doc="(to force the use of the original homer)")), ToolInput(tag="in_depth", input_type=Boolean(optional=True), prefix="-depth", doc=InputDocumentation(doc="[low|med|high|allnight] (time spent on local optimization default: med)")), ToolInput(tag="in_pos_file", input_type=File(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_genome", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_output_directory", input_type=Directory(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_additional", input_type=String(optional=True), position=3, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_directory", output_type=Directory(), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc=""))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Findmotifsgenome_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

