from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, Directory, File, String

Maketagdirectory_V0_1_0 = CommandToolBuilder(tool="makeTagDirectory", base_command=["makeTagDirectory"], inputs=[ToolInput(tag="in_frag_length", input_type=Boolean(optional=True), prefix="-fragLength", doc=InputDocumentation(doc="<# | given | pe> (Set estimated fragment length or use PE length - given: use read lengths)\nBy default treats the sample as a single read ChIP-Seq experiment")), ToolInput(tag="in_format", input_type=Int(optional=True), prefix="-format", doc=InputDocumentation(doc="where X can be: (with column specifications underneath)\nbed - BED format files:\n(1:chr,2:start,3:end,4:+/- or read name,5:# tags,6:+/-)\n-force5th (5th column of BED file contains # of reads mapping to position)\nsam - SAM formatted files (use samTools to covert BAMs into SAM if you have BAM)\n-unique (keep if there is a single best alignment based on mapq)\n-mapq <#> (Minimum mapq for -unique, default: 10, set negative to use AS:i:/XS:i:)\n-keepOne (keep one of the best alignments even if others exist)\n-keepAll (include all alignments in SAM file)\n-mis (Maximum allowed mismatches, default: no limit, uses MD:Z: tag)\n-sspe (strand specific, paired-end reads[flips strand of 2nd read to match])\n-read1/-read2 (only analyze 1st or 2nd read for PE sequencing)\n-rmsoft (clip soft clipped regions from reads, default: assume read extends/mismatch)\n-omitSN (ignore alignments with splicing/soft clipping, i.e. use for csRNA-seq)\nbowtie - output from bowtie (run with --best -k 2 options)\n(1:read name,2:+/-,3:chr,4:position,5:seq,6:quality,7:NA,8:misInfo)\neland_result - output from basic eland\n(1:read name,2:seq,3:code,4:#zeroMM,5:#oneMM,6:#twoMM,7:chr,\n8:position,9:F/R,10-:mismatches\neland_export - output from illumina pipeline (22 columns total)\n(1-5:read name info,9:sequence,10:quality,11:chr,13:position,14:strand)\neland_extended - output from illumina pipeline (4 columns total)\n(1:read name,2:sequence,3:match stats,4:positions[,])\nmCpGbed - encode style mCpG reporting in extended BED format, no auto-detect\n(1:chr,2:start,3:end,4:name,5:,6:+/-,7:,8:,9:,10:#C,11:#mC)\nallC - Lister style output files detailing the read information about all cytosines\n(1:chr,2:pos,3:strand,4:context,#mC,#totalC,#unmC\nbismark - Bismark style output files detailing the read information about all cytosines\n(1:chr,2:pos,3:strand,4:#mC,5:#unmC,6:context,7:triseq\n-minCounts <#> (minimum number of reads to report mC/C ratios, default: 10)\n-mCcontext <CG|CHG|CHH|all> (only use C's in this context, default: CG)\nHiCsummary - minimal paired-end read mapping information\n(1:readname,2:chr1,3:5'pos1,4:strand1,5:chr2,6:5'pos2,7:strand2)")), ToolInput(tag="in_flip", input_type=Boolean(optional=True), prefix="-flip", doc=InputDocumentation(doc="(flip strand of each read, i.e. might want to use with some RNA-seq)")), ToolInput(tag="in_total_reads", input_type=Boolean(optional=True), prefix="-totalReads", doc=InputDocumentation(doc="<#|all|default> (set the effective total number of reads - all includes multimappers)")), ToolInput(tag="in_force_five_th", input_type=Boolean(optional=True), prefix="-force5th", doc=InputDocumentation(doc="(5th column of BED file contains # of reads mapping to position)")), ToolInput(tag="in_add_tag_directory", input_type=Directory(optional=True), prefix="-d", doc=InputDocumentation(doc="[tag directory 2] ... (add Tag directory to new tag directory)")), ToolInput(tag="in_add_tag_file", input_type=File(optional=True), prefix="-t", doc=InputDocumentation(doc="[tag file 2] ... (add tag file i.e. *.tags.tsv to new tag directory)")), ToolInput(tag="in_single", input_type=Boolean(optional=True), prefix="-single", doc=InputDocumentation(doc="(Create a single tags.tsv file for all 'chromosomes' - i.e. if >100 chromosomes)")), ToolInput(tag="in_update", input_type=Boolean(optional=True), prefix="-update", doc=InputDocumentation(doc="(Use current tag directory for QC/processing, do not parse new alignment files)")), ToolInput(tag="in_tbp", input_type=Boolean(optional=True), prefix="-tbp", doc=InputDocumentation(doc="<#> (Maximum tags per bp, default: no maximum)")), ToolInput(tag="in_precision", input_type=Int(optional=True), prefix="-precision", doc=InputDocumentation(doc="(number of decimal places to use for tag totals, default: 1)")), ToolInput(tag="in_min_len", input_type=Boolean(optional=True), prefix="-minlen", doc=InputDocumentation(doc="<#> and -maxlen <#> (Filter reads with lengths outside this range)")), ToolInput(tag="in_genome", input_type=String(optional=True), prefix="-genome", doc=InputDocumentation(doc="(To see available genomes, use '-genome list')")), ToolInput(tag="in_or", input_type=Boolean(optional=True), prefix="-or-", doc=InputDocumentation(doc="(for custom genomes):")), ToolInput(tag="in_check_gc", input_type=File(optional=True), prefix="-checkGC", doc=InputDocumentation(doc="(check Sequence bias, requires '-genome')")), ToolInput(tag="in_freq_start", input_type=Boolean(optional=True), prefix="-freqStart", doc=InputDocumentation(doc="<#> (offset to start calculating frequency, default: -50)")), ToolInput(tag="in_freq_end", input_type=Boolean(optional=True), prefix="-freqEnd", doc=InputDocumentation(doc="<#> (distance past fragment length to calculate frequency, default: +50)")), ToolInput(tag="in_oligo_start", input_type=Boolean(optional=True), prefix="-oligoStart", doc=InputDocumentation(doc="<#> (oligo bias start)")), ToolInput(tag="in_oligo_end", input_type=Boolean(optional=True), prefix="-oligoEnd", doc=InputDocumentation(doc="<#> (oligo bias end)")), ToolInput(tag="in_norm_gc", input_type=File(optional=True), prefix="-normGC", doc=InputDocumentation(doc="(i.e. tagGCcontent.txt file from control experiment)\nUse '-normGC default' to match the genomic GC distribution")), ToolInput(tag="in_norm_fixed_oligo", input_type=File(optional=True), prefix="-normFixedOligo", doc=InputDocumentation(doc="(normalize 5' end bias, '-normFixedOligo default' ok)")), ToolInput(tag="in_norm_length", input_type=Int(optional=True), prefix="-normLength", doc=InputDocumentation(doc="(i.e. tagLengthDistribution.txt file from control experiment)")), ToolInput(tag="in_min_norm_ratio", input_type=Boolean(optional=True), prefix="-minNormRatio", doc=InputDocumentation(doc="<#> (Minimum deflation ratio of tag counts, default: 0.25)")), ToolInput(tag="in_max_norm_ratio", input_type=Boolean(optional=True), prefix="-maxNormRatio", doc=InputDocumentation(doc="<#> (Maximum inflation ratio of tag counts, default: 2.0)")), ToolInput(tag="in_iter_norm", input_type=Boolean(optional=True), prefix="-iterNorm", doc=InputDocumentation(doc="<#> (Sets -max/minNormRatio to 1 and 0, iteratively normalizes such that the\nresulting distrubtion is no more than #% different than target, i.e. 0.1,default: off)")), ToolInput(tag="in_filter_reads", input_type=String(optional=True), prefix="-filterReads", doc=InputDocumentation(doc="<offset> <keep|remove> (filter reads based on oligo sequence in the genome)")), ToolInput(tag="in_remove_pe_bg", input_type=Boolean(optional=True), prefix="-removePEbg", doc=InputDocumentation(doc="(remove paired end tags within 1.5x fragment length on same chr)")), ToolInput(tag="in_pe_bg_length", input_type=Boolean(optional=True), prefix="-PEbgLength", doc=InputDocumentation(doc="<#> (remove PE  reads facing on another within this distance, default: 1.5x fragLen)")), ToolInput(tag="in_restriction_site", input_type=Int(optional=True), prefix="-restrictionSite", doc=InputDocumentation(doc="(i.e. AAGCTT for HindIII, assign data < 1.5x fragment length to sites)\nMust specify genome sequence directory too. (-rsmis <#> to specify mismatches, def: 0)\n-both, -one, -onlyOne, -none (Keeps reads near restriction sites, default: keep all)\n-removeSelfLigation (removes reads linking same restriction fragment)\n-removeRestrictionEnds (removes reads starting on a restriction fragment)\n-assignMidPoint (will place reads in the middle of HindIII fragments)\n-restrictionSiteLength <#> (maximum distance from restriction site, default: 1.5x fragLen)")), ToolInput(tag="in_remove_spikes", input_type=Int(optional=True), prefix="-removeSpikes", doc=InputDocumentation(doc="<#> (remove tags from regions with > than # times\nthe average tags per size bp, suggest '-removeSpikes 10000 8')")), ToolInput(tag="in_bowtie_pe", input_type=Boolean(optional=True), prefix="-bowtiePE", doc=InputDocumentation(doc="(PE alignments in bowtie alignment, assumes last character of read name is 0 or 1)\n(don't need this for sam/bam files)\n")), ToolInput(tag="in_directory", input_type=Directory(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_alignment_file_one", input_type=File(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_file", input_type=File(optional=True), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_two", input_type=Int(optional=True), position=3, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Maketagdirectory_V0_1_0().translate("wdl", allow_empty_container=True)

