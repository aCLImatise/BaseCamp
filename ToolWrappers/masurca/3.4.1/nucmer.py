from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int, File

Nucmer_V0_1_0 = CommandToolBuilder(tool="nucmer", base_command=["nucmer"], inputs=[ToolInput(tag="in_max_match", input_type=String(optional=True), prefix="--maxmatch", doc=InputDocumentation(doc="different bevahiors.")), ToolInput(tag="in_mum", input_type=Boolean(optional=True), prefix="--mum", doc=InputDocumentation(doc="Use anchor matches that are unique in both the reference and query (false)")), ToolInput(tag="in_break_len", input_type=Int(optional=True), prefix="--breaklen", doc=InputDocumentation(doc="Set the distance an alignment extension will attempt to extend poor scoring regions before giving up (200)")), ToolInput(tag="in_min_cluster", input_type=Int(optional=True), prefix="--mincluster", doc=InputDocumentation(doc="Sets the minimum length of a cluster of matches (65)")), ToolInput(tag="in_diag_diff", input_type=Int(optional=True), prefix="--diagdiff", doc=InputDocumentation(doc="Set the maximum diagonal difference between two adjacent anchors in a cluster (5)")), ToolInput(tag="in_diag_factor", input_type=Int(optional=True), prefix="--diagfactor", doc=InputDocumentation(doc="Set the maximum diagonal difference between two adjacent anchors in a cluster as a differential fraction of the gap length (0.12)")), ToolInput(tag="in_no_extend", input_type=Boolean(optional=True), prefix="--noextend", doc=InputDocumentation(doc="Do not perform cluster extension step (false)")), ToolInput(tag="in_forward", input_type=Boolean(optional=True), prefix="--forward", doc=InputDocumentation(doc="Use only the forward strand of the Query sequences (false)")), ToolInput(tag="in_max_gap", input_type=Int(optional=True), prefix="--maxgap", doc=InputDocumentation(doc="Set the maximum gap between two adjacent matches in a cluster (90)")), ToolInput(tag="in_min_match", input_type=Int(optional=True), prefix="--minmatch", doc=InputDocumentation(doc="Set the minimum length of a single exact match (20)")), ToolInput(tag="in_min_align", input_type=Int(optional=True), prefix="--minalign", doc=InputDocumentation(doc="Minimum length of an alignment, after clustering and extension (0)")), ToolInput(tag="in_no_optimize", input_type=Boolean(optional=True), prefix="--nooptimize", doc=InputDocumentation(doc="No alignment score optimization, i.e. if an alignment extension reaches the end of a sequence, it will not backtrack to optimize the alignment score and instead terminate the alignment at the end of the sequence (false)")), ToolInput(tag="in_reverse", input_type=Boolean(optional=True), prefix="--reverse", doc=InputDocumentation(doc="Use only the reverse complement of the Query sequences (false)")), ToolInput(tag="in_no_simplify", input_type=Boolean(optional=True), prefix="--nosimplify", doc=InputDocumentation(doc="Don't simplify alignments by removing shadowed clusters. Use this option when aligning a sequence to itself to look for repeats (false)")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Write output to PREFIX.delta (out)")), ToolInput(tag="in_delta", input_type=File(optional=True), prefix="--delta", doc=InputDocumentation(doc="Output delta file to PATH (instead of PREFIX.delta)")), ToolInput(tag="in_sam_short", input_type=File(optional=True), prefix="--sam-short", doc=InputDocumentation(doc="Output SAM file to PATH, short format")), ToolInput(tag="in_sam_long", input_type=File(optional=True), prefix="--sam-long", doc=InputDocumentation(doc="Output SAM file to PATH, long format")), ToolInput(tag="in_save", input_type=String(optional=True), prefix="--save", doc=InputDocumentation(doc="Save suffix array to files starting with PREFIX")), ToolInput(tag="in_load", input_type=File(optional=True), prefix="--load", doc=InputDocumentation(doc="Load suffix array from file starting with PREFIX")), ToolInput(tag="in_batch", input_type=String(optional=True), prefix="--batch", doc=InputDocumentation(doc="Proceed by batch of chunks of BASES from the reference")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Use NUM threads (# of cores)")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--full-help", doc=InputDocumentation(doc="Detailed help")), ToolInput(tag="in_ref", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_delta", output_type=File(optional=True), selector=InputSelector(input_to_select="in_delta", type_hint=File()), doc=OutputDocumentation(doc="Output delta file to PATH (instead of PREFIX.delta)")), ToolOutput(tag="out_sam_short", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sam_short", type_hint=File()), doc=OutputDocumentation(doc="Output SAM file to PATH, short format")), ToolOutput(tag="out_sam_long", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sam_long", type_hint=File()), doc=OutputDocumentation(doc="Output SAM file to PATH, long format"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nucmer_V0_1_0().translate("wdl", allow_empty_container=True)

