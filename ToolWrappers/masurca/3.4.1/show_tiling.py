from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, Float, File, String

Show_Tiling_V0_1_0 = CommandToolBuilder(tool="show_tiling", base_command=["show-tiling"], inputs=[ToolInput(tag="in_describe_path_tabdelimitedalignment", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="Describe the tiling path by printing the tab-delimited\nalignment region coordinates to stdout")), ToolInput(tag="in_assume_reference_sequences", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Assume the reference sequences are circular, and allow\ntiled contigs to span the origin")), ToolInput(tag="in_set_maximum_gap", input_type=Int(optional=True), prefix="-g", doc=InputDocumentation(doc="Set maximum gap between clustered alignments [-1, INT_MAX]\nA value of -1 will represent infinity\n(nucmer default = 1000)\n(promer default = -1)")), ToolInput(tag="in_set_minimum_percent", input_type=Float(optional=True), prefix="-i", doc=InputDocumentation(doc="Set minimum percent identity to tile [0.0, 100.0]\n(nucmer default = 90.0)\n(promer default = 55.0)")), ToolInput(tag="in_set_minimum_length", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="Set minimum length contig to report [-1, INT_MAX]\nA value of -1 will represent infinity\n(common default = 1)")), ToolInput(tag="in_output_pseudo_molecule", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="Output a pseudo molecule of the query contigs to 'file'")), ToolInput(tag="in_deal_repetitive_contigs", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="Deal with repetitive contigs by randomly placing them\nin one of their copy locations (implies -V 0)")), ToolInput(tag="in_output_style_list", input_type=File(optional=True), prefix="-t", doc=InputDocumentation(doc="Output a TIGR style contig list of each query sequence\nthat sufficiently matches the reference (non-circular)")), ToolInput(tag="in_output_tabdelimited_region", input_type=File(optional=True), prefix="-u", doc=InputDocumentation(doc="Output the tab-delimited alignment region coordinates\nof the unusable contigs to 'file'")), ToolInput(tag="in_set_minimum_contig_coverage_tile", input_type=Float(optional=True), prefix="-v", doc=InputDocumentation(doc="Set minimum contig coverage to tile [0.0, 100.0]\n(nucmer default = 95.0) sum of individual alignments\n(promer default = 50.0) extent of syntenic region")), ToolInput(tag="in_set_minimum_contig_coverage_difference", input_type=Float(optional=True), prefix="-V", doc=InputDocumentation(doc="Set minimum contig coverage difference [0.0, 100.0]\ni.e. the difference needed to determine one alignment\nis 'better' than another alignment\n(nucmer default = 10.0) sum of individual alignments\n(promer default = 30.0) extent of syntenic region")), ToolInput(tag="in_describe_path_xml", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="Describe the tiling path by printing the XML contig\nlinking information to stdout")), ToolInput(tag="in_delta_file", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_pseudo_molecule", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_pseudo_molecule", type_hint=File()), doc=OutputDocumentation(doc="Output a pseudo molecule of the query contigs to 'file'")), ToolOutput(tag="out_output_tabdelimited_region", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_tabdelimited_region", type_hint=File()), doc=OutputDocumentation(doc="Output the tab-delimited alignment region coordinates\nof the unusable contigs to 'file'"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Show_Tiling_V0_1_0().translate("wdl", allow_empty_container=True)

