from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean

Graphlan_Py_V0_1_0 = CommandToolBuilder(tool="graphlan.py", base_command=["graphlan.py"], inputs=[ToolInput(tag="in_format", input_type=File(optional=True), prefix="--format", doc=InputDocumentation(doc="['output_image_format']\nset the format of the output image (default none\nmeaning that the format is guessed from the output\nfile extension)")), ToolInput(tag="in_warnings", input_type=Int(optional=True), prefix="--warnings", doc=InputDocumentation(doc="set whether warning messages should be reported or not\n(default 1)")), ToolInput(tag="in_positions", input_type=String(optional=True), prefix="--positions", doc=InputDocumentation(doc="set whether the absolute position of the points should\nbe reported on the standard output. The two\ncohordinates are r and theta")), ToolInput(tag="in_dpi", input_type=String(optional=True), prefix="--dpi", doc=InputDocumentation(doc="the dpi of the output image for non vectorial formats")), ToolInput(tag="in_size", input_type=Int(optional=True), prefix="--size", doc=InputDocumentation(doc="the size of the output image (in inches, default 7.0)")), ToolInput(tag="in_pad", input_type=String(optional=True), prefix="--pad", doc=InputDocumentation(doc="the distance between the most external graphical\nelement and the border of the image")), ToolInput(tag="in_external_legends", input_type=Boolean(optional=True), prefix="--external_legends", doc=InputDocumentation(doc="specify whether the two external legends should be put\nin separate file or keep them along with the image\n(default behavior)")), ToolInput(tag="in_avoid_reordering", input_type=Boolean(optional=True), prefix="--avoid_reordering", doc=InputDocumentation(doc="specify whether the tree will be reorder or not\n(default the tree will be reordered)")), ToolInput(tag="in_input_tree", input_type=String(), position=0, doc=InputDocumentation(doc="the input tree in PhyloXML format")), ToolInput(tag="in_output_image", input_type=String(), position=1, doc=InputDocumentation(doc="the output image, the format is guessed from the\nextension unless --format is given. Available file\nformats are: png, pdf, ps, eps, svg"))], outputs=[ToolOutput(tag="out_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_format", type_hint=File()), doc=OutputDocumentation(doc="['output_image_format']\nset the format of the output image (default none\nmeaning that the format is guessed from the output\nfile extension)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Graphlan_Py_V0_1_0().translate("wdl", allow_empty_container=True)

