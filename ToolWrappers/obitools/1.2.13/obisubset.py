from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Obisubset_V0_1_0 = CommandToolBuilder(tool="obisubset", base_command=["obisubset"], inputs=[ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--DEBUG", doc=InputDocumentation(doc="Set logging in debug mode")), ToolInput(tag="in_without_progress_bar", input_type=Boolean(optional=True), prefix="--without-progress-bar", doc=InputDocumentation(doc="desactivate progress bar")), ToolInput(tag="in_skip", input_type=String(optional=True), prefix="--skip", doc=InputDocumentation(doc="skip the N first sequences")), ToolInput(tag="in_only", input_type=String(optional=True), prefix="--only", doc=InputDocumentation(doc="treat only N sequences")), ToolInput(tag="in_genbank", input_type=Boolean(optional=True), prefix="--genbank", doc=InputDocumentation(doc="Input file is in genbank format")), ToolInput(tag="in_embl", input_type=Boolean(optional=True), prefix="--embl", doc=InputDocumentation(doc="Input file is in embl format")), ToolInput(tag="in_skip_on_error", input_type=Boolean(optional=True), prefix="--skip-on-error", doc=InputDocumentation(doc="Skip sequence entries with parse error")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Input file is in fasta nucleic format (including\nobitools fasta extentions)")), ToolInput(tag="in_eco_pcr", input_type=Boolean(optional=True), prefix="--ecopcr", doc=InputDocumentation(doc="Input file is in ecopcr format")), ToolInput(tag="in_raw_fast_a", input_type=Boolean(optional=True), prefix="--raw-fasta", doc=InputDocumentation(doc="Input file is in fasta format (but more tolerant to\nformat variant)")), ToolInput(tag="in_sanger", input_type=Boolean(optional=True), prefix="--sanger", doc=InputDocumentation(doc="Input file is in sanger fastq nucleic format (standard\nfastq)")), ToolInput(tag="in_solexa", input_type=Boolean(optional=True), prefix="--solexa", doc=InputDocumentation(doc="Input file is in fastq nucleic format produced by\nsolexa sequencer")), ToolInput(tag="in_eco_pcr_db", input_type=Boolean(optional=True), prefix="--ecopcrdb", doc=InputDocumentation(doc="Input file is an ecopcr database")), ToolInput(tag="in_nuc", input_type=Boolean(optional=True), prefix="--nuc", doc=InputDocumentation(doc="Input file contains nucleic sequences")), ToolInput(tag="in_prot", input_type=Boolean(optional=True), prefix="--prot", doc=InputDocumentation(doc="Input file contains protein sequences")), ToolInput(tag="in_fast_a_output", input_type=Boolean(optional=True), prefix="--fasta-output", doc=InputDocumentation(doc="Output sequences in obitools fasta format")), ToolInput(tag="in_fast_q_output", input_type=Boolean(optional=True), prefix="--fastq-output", doc=InputDocumentation(doc="Output sequences in sanger fastq format")), ToolInput(tag="in_eco_pcr_db_output", input_type=String(optional=True), prefix="--ecopcrdb-output", doc=InputDocumentation(doc="Output sequences in ecopcr database format (sequence\nrecords are not printed on standard output)")), ToolInput(tag="in_uppercase", input_type=Boolean(optional=True), prefix="--uppercase", doc=InputDocumentation(doc="Print sequences in upper case (default is lower case)")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="--sample", doc=InputDocumentation(doc="Tag containing sample descriptions, the default value\nis set to *merged_sample*")), ToolInput(tag="in_other_tag", input_type=String(optional=True), prefix="--other-tag", doc=InputDocumentation(doc="Another tag to clean according to the sample subset")), ToolInput(tag="in_sample_list", input_type=File(optional=True), prefix="--sample-list", doc=InputDocumentation(doc="File containing the samples names (one sample id per\nline)")), ToolInput(tag="in_sample_pattern", input_type=String(optional=True), prefix="--sample-pattern", doc=InputDocumentation(doc="A regular expression pattern matching the sample ids\nto extract")), ToolInput(tag="in_sample_name", input_type=String(optional=True), prefix="--sample-name", doc=InputDocumentation(doc="A sample id to extract\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Obisubset_V0_1_0().translate("wdl", allow_empty_container=True)

