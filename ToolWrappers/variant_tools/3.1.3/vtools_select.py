from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Float, Array

Vtools_Select_V0_1_0 = CommandToolBuilder(tool="vtools_select", base_command=["vtools", "select"], inputs=[ToolInput(tag="in_limiting_variants_samples", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[COND [COND ...]], --samples [COND [COND ...]]\nLimiting variants from samples that match conditions\nthat use columns shown in command 'vtools show sample'\n(e.g. 'aff=1', 'filename like 'MG%'').")), ToolInput(tag="in_destination_variant_table", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[TABLE [DESC ...]], --to_table [TABLE [DESC ...]]\nDestination variant table.")), ToolInput(tag="in_count", input_type=Boolean(optional=True), prefix="--count", doc=InputDocumentation(doc="Output number of variant, which is a shortcut to '--\noutput count(1)'.")), ToolInput(tag="in_list_outputted_expressions", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="[FIELDS [FIELDS ...]], --output [FIELDS [FIELDS ...]]\nA list of fields that will be outputted. SQL-\ncompatible expressions or functions such as 'pos-1',\n'count(1)' or 'sum(num)' are also allowed.")), ToolInput(tag="in_verbosity", input_type=String(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Output error and warning (0), info (1), debug (2) and\ntrace (3) information to standard output (default to\n1).")), ToolInput(tag="in_header", input_type=Boolean(optional=True), prefix="--header", doc=InputDocumentation(doc="[HEADER [HEADER ...]]\nA complete header or a list of names that will be\njoined by a delimiter (parameter --delimiter). If a\nspecial name - is specified, the header will be read\nfrom the standard input, which is the preferred way to\nspecify large multi-line headers (e.g. cat myheader |\nvtools export --header -). If this parameter is given\nwithout parameter, a default header will be derived\nfrom field names.")), ToolInput(tag="in_delimiter", input_type=String(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="Delimiter use to separate columns of output. The\ndefault output uses tabs to delimit columns padded to\nthe same width by spaces. You can use '-d,' for csv\noutput, or -d'\t' for unpadded tab-delimited output.")), ToolInput(tag="in_precision", input_type=Float(optional=True), prefix="--precision", doc=InputDocumentation(doc="Precision used to output float numbers. The default\nvalue is None which uses system default (e.g. whatever\nstr(number) outputs). You can set it to a positive\nnumber (e.g. 4) to limit the number of digits to\noutput.")), ToolInput(tag="in_na", input_type=String(optional=True), prefix="--na", doc=InputDocumentation(doc="Output string for missing value")), ToolInput(tag="in_limit", input_type=String(optional=True), prefix="--limit", doc=InputDocumentation(doc="Limit output to the first N records.")), ToolInput(tag="in_build", input_type=String(optional=True), prefix="--build", doc=InputDocumentation(doc="Output reference genome. If set to alternative build,\nchr and pos in the fields will be replaced by alt_chr\nand alt_pos")), ToolInput(tag="in_group_output_fields", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[FIELD [FIELD ...]], --group_by [FIELD [FIELD ...]], --group-by [FIELD [FIELD ...]]\nGroup output by fields. This option is useful for\naggregation output where summary statistics are\ngrouped by one or more fields.")), ToolInput(tag="in_all", input_type=Boolean(optional=True), prefix="--all", doc=InputDocumentation(doc="Variant tools by default output only one of the\nrecords if a variant matches multiple records in an\nannotation database. This option tells variant tools\nto output all matching records.")), ToolInput(tag="in_order_by", input_type=Array(t=String(), optional=True), prefix="--order_by", doc=InputDocumentation(doc="Order output by specified fields in ascending order,\nor descending order if field name is followed by DESC\n(e.g. --order_by 'num DESC')\n")), ToolInput(tag="in_from_table", input_type=String(), position=0, doc=InputDocumentation(doc="Source variant table.")), ToolInput(tag="in_condition", input_type=String(), position=1, doc=InputDocumentation(doc="Conditions by which variants are selected. Multiple\narguments are automatically joined by 'AND' so 'OR'\nconditions should be provided by a single argument\nwith conditions joined by 'OR'. If unspecified, all\nvariants (except those excluded by parameter\n--samples) will be selected."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Vtools_Select_V0_1_0().translate("wdl", allow_empty_container=True)

