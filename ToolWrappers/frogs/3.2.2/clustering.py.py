from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File

Clustering_Py_V0_1_0 = CommandToolBuilder(tool="clustering.py", base_command=["clustering.py"], inputs=[ToolInput(tag="in_nb_cpus", input_type=Int(optional=True), prefix="--nb-cpus", doc=InputDocumentation(doc="The maximum number of CPUs used. [Default: 1]")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Keep temporary files to debug program.")), ToolInput(tag="in_distance", input_type=Int(optional=True), prefix="--distance", doc=InputDocumentation(doc="Maximum distance between sequences in each aggregation\nstep. RECOMMENDED : d=1 in combination with\n--fastidious option [Default: 1]")), ToolInput(tag="in_fastidious", input_type=Boolean(optional=True), prefix="--fastidious", doc=InputDocumentation(doc="use the fastidious option of swarm to refine OTU.\nRECOMMENDED in combination with a distance equal to 1\n(-d). it is only usable with d=1 and mutually\nexclusive with --denoising.")), ToolInput(tag="in_denoising", input_type=Boolean(optional=True), prefix="--denoising", doc=InputDocumentation(doc="denoise data by clustering read with distance=1 before\nperform real clustering. It is mutually exclusive with\n--fastidious.")), ToolInput(tag="in_input_fast_a", input_type=File(optional=True), prefix="--input-fasta", doc=InputDocumentation(doc="The sequences file (format: FASTA).")), ToolInput(tag="in_input_count", input_type=File(optional=True), prefix="--input-count", doc=InputDocumentation(doc="The count file for 'fasta-file' (format: TSV). It\ncontains the count by sample for each sequence.")), ToolInput(tag="in_output_biom", input_type=File(optional=True), prefix="--output-biom", doc=InputDocumentation(doc="This output file will contain the abondance by sample\nfor each cluster (format: BIOM). [Default:\nclustering_abundance.biom]")), ToolInput(tag="in_output_fast_a", input_type=File(optional=True), prefix="--output-fasta", doc=InputDocumentation(doc="This output file will contain the seed sequence for\neach cluster (format: FASTA). [Default:\nclustering_seeds.fasta]")), ToolInput(tag="in_output_compo", input_type=File(optional=True), prefix="--output-compo", doc=InputDocumentation(doc="This output file will contain the composition of each\ncluster (format: TSV). One Line is a cluster ; each\ncolumn is a sequence ID. [Default:\nclustering_swarms_composition.tsv]")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="This output file will contain several information on\nexecuted commands.\n")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_biom", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_biom", type_hint=File()), doc=OutputDocumentation(doc="This output file will contain the abondance by sample\nfor each cluster (format: BIOM). [Default:\nclustering_abundance.biom]")), ToolOutput(tag="out_output_fast_a", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_fast_a", type_hint=File()), doc=OutputDocumentation(doc="This output file will contain the seed sequence for\neach cluster (format: FASTA). [Default:\nclustering_seeds.fasta]")), ToolOutput(tag="out_output_compo", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_compo", type_hint=File()), doc=OutputDocumentation(doc="This output file will contain the composition of each\ncluster (format: TSV). One Line is a cluster ; each\ncolumn is a sequence ID. [Default:\nclustering_swarms_composition.tsv]")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="This output file will contain several information on\nexecuted commands.\n"))], container="quay.io/biocontainers/frogs:3.2.2--py37_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Clustering_Py_V0_1_0().translate("wdl")

