from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, Array, String, File

Preprocess_Py_454_V0_1_0 = CommandToolBuilder(tool="preprocess.py_454", base_command=["preprocess.py", "454"], inputs=[ToolInput(tag="in_min_amplicon_size", input_type=Int(optional=True), prefix="--min-amplicon-size", doc=InputDocumentation(doc="The minimum size for the amplicons (with primers).")), ToolInput(tag="in_max_amplicon_size", input_type=Int(optional=True), prefix="--max-amplicon-size", doc=InputDocumentation(doc="The maximum size for the amplicons (with primers).")), ToolInput(tag="in_five_prim_primer", input_type=Int(optional=True), prefix="--five-prim-primer", doc=InputDocumentation(doc="The 5' primer sequence (wildcards are accepted).")), ToolInput(tag="in_three_prim_primer", input_type=Int(optional=True), prefix="--three-prim-primer", doc=InputDocumentation(doc="The 3' primer sequence (wildcards are accepted).")), ToolInput(tag="in_nb_cpus", input_type=Int(optional=True), prefix="--nb-cpus", doc=InputDocumentation(doc="The maximum number of CPUs used. [Default: 1]")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Keep temporary files to debug program.")), ToolInput(tag="in_samples_names", input_type=Array(t=String(), optional=True), prefix="--samples-names", doc=InputDocumentation(doc="The sample name for each R1/R2-files.")), ToolInput(tag="in_input_archive", input_type=File(optional=True), prefix="--input-archive", doc=InputDocumentation(doc="The tar file containing R1 file and R2 file for each\nsample (format: tar).")), ToolInput(tag="in_input_r_one", input_type=Array(t=Int(), optional=True), prefix="--input-R1", doc=InputDocumentation(doc="The sequence file for each sample (format: fastq).")), ToolInput(tag="in_output_de_replicated", input_type=Int(optional=True), prefix="--output-dereplicated", doc=InputDocumentation(doc="Fasta file with unique sequences. Each sequence has an\nID ended with the number of initial sequences\nrepresented (example : '>a0101;size=10'). [Default:\ndereplication.fasta]")), ToolInput(tag="in_output_count", input_type=File(optional=True), prefix="--output-count", doc=InputDocumentation(doc="TSV file with count by sample for each unique sequence\n(example with 3 samples : 'a0101<TAB>5<TAB>8<TAB>0').\n[Default: count.tsv]")), ToolInput(tag="in_summary", input_type=File(optional=True), prefix="--summary", doc=InputDocumentation(doc="HTML file with summary of filters results. [Default:\nsummary.html]")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="This output file will contain several information on\nexecuted commands.\n"))], outputs=[ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="This output file will contain several information on\nexecuted commands.\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Preprocess_Py_454_V0_1_0().translate("wdl", allow_empty_container=True)

