from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Filters_Py_V0_1_0 = CommandToolBuilder(tool="filters.py", base_command=["filters.py"], inputs=[ToolInput(tag="in_nb_cpus", input_type=Int(optional=True), prefix="--nb-cpus", doc=InputDocumentation(doc="The maximum number of CPUs used. [Default: 1]")), ToolInput(tag="in_nb_biggest_otu", input_type=Int(optional=True), prefix="--nb-biggest-otu", doc=InputDocumentation(doc="Number of most abundant OTUs you want to keep.")), ToolInput(tag="in_min_sample_presence", input_type=Int(optional=True), prefix="--min-sample-presence", doc=InputDocumentation(doc="Keep OTU present in at least this number of samples.")), ToolInput(tag="in_min_abundance", input_type=Int(optional=True), prefix="--min-abundance", doc=InputDocumentation(doc="Minimum percentage/number of sequences, comparing to\nthe total number of sequences, of an OTU (between 0\nand 1 if percentage desired).")), ToolInput(tag="in_minbootstrap__minrdpbootstrap", input_type=Int(optional=True), prefix="-b", doc=InputDocumentation(doc=":MIN_BOOTSTRAP, --min-rdp-bootstrap TAXONOMIC_LEVEL:MIN_BOOTSTRAP\nThe minimal RDP bootstrap must be superior to this\nvalue (between 0 and 1).")), ToolInput(tag="in_ordered_ranks_levels", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[RDP_TAXONOMY_RANKS [RDP_TAXONOMY_RANKS ...]], --rdp-taxonomy-ranks [RDP_TAXONOMY_RANKS [RDP_TAXONOMY_RANKS ...]]\nThe ordered ranks levels present in the reference\ndatabank. [Default: ['Domain', 'Phylum', 'Class',\n'Order', 'Family', 'Genus', 'Species']]")), ToolInput(tag="in_min_blast_identity", input_type=Int(optional=True), prefix="--min-blast-identity", doc=InputDocumentation(doc="The number corresponding to the blast percentage\nidentity (between 0 and 1).")), ToolInput(tag="in_min_blast_coverage", input_type=Int(optional=True), prefix="--min-blast-coverage", doc=InputDocumentation(doc="The number corresponding to the blast percentage\ncoverage (between 0 and 1).")), ToolInput(tag="in_max_blast_evalue", input_type=Int(optional=True), prefix="--max-blast-evalue", doc=InputDocumentation(doc="The number corresponding to the blast e value (between\n0 and 1).")), ToolInput(tag="in_min_blast_length", input_type=Int(optional=True), prefix="--min-blast-length", doc=InputDocumentation(doc="The number corresponding to the blast length.")), ToolInput(tag="in_input_biom", input_type=File(optional=True), prefix="--input-biom", doc=InputDocumentation(doc="The input biom file.")), ToolInput(tag="in_input_fast_a", input_type=File(optional=True), prefix="--input-fasta", doc=InputDocumentation(doc="The input fasta file.")), ToolInput(tag="in_contaminant", input_type=String(optional=True), prefix="--contaminant", doc=InputDocumentation(doc="Use this databank to filter sequence before\naffiliation.")), ToolInput(tag="in_output_biom", input_type=File(optional=True), prefix="--output-biom", doc=InputDocumentation(doc="The Biom file output. [Default: filtered.biom]")), ToolInput(tag="in_output_fast_a", input_type=File(optional=True), prefix="--output-fasta", doc=InputDocumentation(doc="The fasta output file. [Default: filtered.fasta]")), ToolInput(tag="in_summary", input_type=File(optional=True), prefix="--summary", doc=InputDocumentation(doc="The HTML file containing the graphs. [Default:\nsummary.html]")), ToolInput(tag="in_excluded", input_type=File(optional=True), prefix="--excluded", doc=InputDocumentation(doc="The file that summarizes all the clusters discarded.\n[Default: excluded.tsv]")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="The list of commands executed.")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_biom", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_biom", type_hint=File()), doc=OutputDocumentation(doc="The Biom file output. [Default: filtered.biom]")), ToolOutput(tag="out_output_fast_a", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_fast_a", type_hint=File()), doc=OutputDocumentation(doc="The fasta output file. [Default: filtered.fasta]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Filters_Py_V0_1_0().translate("wdl", allow_empty_container=True)

