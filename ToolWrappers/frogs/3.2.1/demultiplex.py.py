from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean, File

Demultiplex_Py_V0_1_0 = CommandToolBuilder(tool="demultiplex.py", base_command=["demultiplex.py"], inputs=[ToolInput(tag="in_mismatches", input_type=Int(optional=True), prefix="--mismatches", doc=InputDocumentation(doc="Number of mismatches allowed in barcode. [Default: 0]")), ToolInput(tag="in_end", input_type=String(optional=True), prefix="--end", doc=InputDocumentation(doc="barcode is at the begining of the forward end (bol) or\nof the reverse (eol) or both (both). [Default: bol]")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Keep temporary files to debug program.")), ToolInput(tag="in_input_r_one", input_type=Int(optional=True), prefix="--input-R1", doc=InputDocumentation(doc="The R1 sequence file with all samples (format: fastq).")), ToolInput(tag="in_input_r_two", input_type=Int(optional=True), prefix="--input-R2", doc=InputDocumentation(doc="The R2 sequence file with all samples (format: fastq).")), ToolInput(tag="in_input_barcode", input_type=File(optional=True), prefix="--input-barcode", doc=InputDocumentation(doc="This file describes barcodes and samples (one line by\nsample). Line format : SAMPLE_NAME<TAB>BARCODE or\nSAMPLE_NAME<TAB>BARCODE_FW<TAB>BARCODE_RV.")), ToolInput(tag="in_output_de_multiplexed", input_type=File(optional=True), prefix="--output-demultiplexed", doc=InputDocumentation(doc="The tar file containing R1 files and R2 files for each\nsample (format: tar). [Default:\ndemultiplexed_read.tar.gz]")), ToolInput(tag="in_output_excluded", input_type=File(optional=True), prefix="--output-excluded", doc=InputDocumentation(doc="The tar file containing R1 files and R2 files not\ndemultiplexed (format: tar). [Default:\nundemultiplexed_read.tar.gz]")), ToolInput(tag="in_summary", input_type=File(optional=True), prefix="--summary", doc=InputDocumentation(doc="TSV file with summary of filters results (format:\nTSV). [Default: demultiplex_summary.tsv]")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="This output file will contain several informations on\nexecuted commands.\n")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="This output file will contain several informations on\nexecuted commands.\n"))], container="quay.io/biocontainers/frogs:3.2.1--py37_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Demultiplex_Py_V0_1_0().translate("wdl")

