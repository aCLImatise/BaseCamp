from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int, Float, Array, File

Preprocess_Py_Illumina_V0_1_0 = CommandToolBuilder(tool="preprocess.py_illumina", base_command=["preprocess.py", "illumina"], inputs=[ToolInput(tag="in_merge_software", input_type=String(optional=True), prefix="--merge-software", doc=InputDocumentation(doc="Software used to merge paired reads")), ToolInput(tag="in_keep_un_merged", input_type=Boolean(optional=True), prefix="--keep-unmerged", doc=InputDocumentation(doc="In case of uncontiged paired reads, keep unmerged, and\nartificially combined them with 100 Ns.")), ToolInput(tag="in_min_amplicon_size", input_type=Int(optional=True), prefix="--min-amplicon-size", doc=InputDocumentation(doc="The minimum size for the amplicons (with primers).")), ToolInput(tag="in_max_amplicon_size", input_type=Int(optional=True), prefix="--max-amplicon-size", doc=InputDocumentation(doc="The maximum size for the amplicons (with primers).")), ToolInput(tag="in_expected_amplicon_size", input_type=Int(optional=True), prefix="--expected-amplicon-size", doc=InputDocumentation(doc="The expected size for the majority of the amplicons\n(with primers), if using Flash as read pair merge\nsoftware.")), ToolInput(tag="in_five_prim_primer", input_type=Int(optional=True), prefix="--five-prim-primer", doc=InputDocumentation(doc="The 5' primer sequence (wildcards are accepted).")), ToolInput(tag="in_three_prim_primer", input_type=Int(optional=True), prefix="--three-prim-primer", doc=InputDocumentation(doc="The 3' primer sequence (wildcards are accepted).")), ToolInput(tag="in_without_primers", input_type=Boolean(optional=True), prefix="--without-primers", doc=InputDocumentation(doc="Use this option when you use custom sequencing primers\nand these primers are the PCR primers. In this case\nthe reads do not contain the PCR primers.")), ToolInput(tag="in_r_one_size", input_type=Int(optional=True), prefix="--R1-size", doc=InputDocumentation(doc="The read1 size.")), ToolInput(tag="in_r_two_size", input_type=Int(optional=True), prefix="--R2-size", doc=InputDocumentation(doc="The read2 size.")), ToolInput(tag="in_mismatch_rate", input_type=Float(optional=True), prefix="--mismatch-rate", doc=InputDocumentation(doc="Maxi mismatch rate in overlap region. [Default: 0.1]")), ToolInput(tag="in_quality_scale", input_type=String(optional=True), prefix="--quality-scale", doc=InputDocumentation(doc="The phred base quality scale, either 33 or 64 if using\nVsearch as read pair merge software [Default: 33]")), ToolInput(tag="in_already_contig_ed", input_type=Boolean(optional=True), prefix="--already-contiged", doc=InputDocumentation(doc="The archive contains 1 file by sample : Reads 1 and\nReads 2 are already contiged by pair.")), ToolInput(tag="in_nb_cpus", input_type=Int(optional=True), prefix="--nb-cpus", doc=InputDocumentation(doc="The maximum number of CPUs used. [Default: 1]")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Keep temporary files to debug program.")), ToolInput(tag="in_samples_names", input_type=Array(t=String(), optional=True), prefix="--samples-names", doc=InputDocumentation(doc="The sample name for each R1/R2-files.")), ToolInput(tag="in_input_archive", input_type=File(optional=True), prefix="--input-archive", doc=InputDocumentation(doc="The tar file containing R1 file and R2 file for each\nsample.")), ToolInput(tag="in_input_r_one", input_type=Array(t=Int(), optional=True), prefix="--input-R1", doc=InputDocumentation(doc="The R1 sequence file for each sample (format: fastq).")), ToolInput(tag="in_input_r_two", input_type=Array(t=Int(), optional=True), prefix="--input-R2", doc=InputDocumentation(doc="The R2 sequence file for each sample (format: fastq).")), ToolInput(tag="in_output_de_replicated", input_type=Int(optional=True), prefix="--output-dereplicated", doc=InputDocumentation(doc="FASTA file with unique sequences. Each sequence has an\nID ended with the number of initial sequences\nrepresented (example : '>a0101;size=10'). [Default:\npreprocess.fasta]")), ToolInput(tag="in_output_count", input_type=File(optional=True), prefix="--output-count", doc=InputDocumentation(doc="TSV file with count by sample for each unique sequence\n(example with 3 samples : 'a0101<TAB>5<TAB>8<TAB>0').\n[Default: preprocess_counts.tsv]")), ToolInput(tag="in_summary", input_type=File(optional=True), prefix="--summary", doc=InputDocumentation(doc="The HTML file containing the graphs. [Default:\npreprocess.html]")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="This output file will contain several information on\nexecuted commands.\n")), ToolInput(tag="in_for", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_samples", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_archive", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_files", input_type=String(), position=2, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="This output file will contain several information on\nexecuted commands.\n"))], container="quay.io/biocontainers/frogs:3.2.1--py37_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Preprocess_Py_Illumina_V0_1_0().translate("wdl")

