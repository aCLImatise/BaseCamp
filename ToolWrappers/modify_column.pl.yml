!Command
command:
- modify_column.pl
positional: []
named:
- !Flag
  description: 'The column to modify (default: 0; specify multiple columns using commas)
    (zero-based)'
  synonyms:
  - -c
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: 'The rows to modify (default: All except -skipped; specify multiple
    rows using commas) (zero-based)'
  synonyms:
  - -r
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: Apply transformation to ALL columns
  synonyms:
  - -A
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Apply transformation only if entry is above (or equal) num
  synonyms:
  - -min
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: Apply transformation only if entry is below (or equal) num
  synonyms:
  - -max
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: Apply transformation only if entry is strictly above num
  synonyms:
  - -mins
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: Apply transformation only if entry is strictly below num
  synonyms:
  - -maxs
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: <num1,num2> Apply transformation only if num1<=entry<=num2
  synonyms:
  - -rng
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: <num1,num2> Apply transformation only if num1<entry<num2
  synonyms:
  - -rngs
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ':    Apply transformation only if entry is above <num> or below -<num>'
  synonyms:
  - -abs
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: ':   Apply transformation only if entry is above -<num> and below <num>'
  synonyms:
  - -babs
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: ':    Apply transformation only if entry contains <str>'
  synonyms:
  - -str
  args: !SimpleFlagArg
    name: str
  optional: true
- !Flag
  description: ':   Apply transformation only if entry is equal to <str>'
  synonyms:
  - -estr
  args: !SimpleFlagArg
    name: str
  optional: true
- !Flag
  description: ':   Apply transformation only if entry is *not* equal to <str>'
  synonyms:
  - -nstr
  args: !SimpleFlagArg
    name: str
  optional: true
- !Flag
  description: ':           Apply transormation only if entry is not empty'
  synonyms:
  - -ne
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ':        Apply transormation only if entry is empty'
  synonyms:
  - -empty
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ": Apply transformation only if the entry is from a row and column\n\
    that appear in a line of <file> as <row name> <tab> <column name>"
  synonyms:
  - -pairs
  args: !SimpleFlagArg
    name: file
  optional: true
- !Flag
  description: ':   Skip num rows in the file (default: 0)'
  synonyms:
  - -skip
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: ':  Skip num columns (when applying to all columns, can skip the first
    few) (default: 0)'
  synonyms:
  - -skipc
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: 'Add <num> to the column (default: 0)'
  synonyms:
  - -a
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: 'Substract <num> to the column (default: 0)'
  synonyms:
  - -s
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: "Multiply column by <num> (default: 1) (write '\"-1\"' to pass negative\
    \ numbers)"
  synonyms:
  - -m
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: "Divide column by <num> (default: 1) (write '\"-1\"' to pass negative\
    \ numbers)"
  synonyms:
  - -d
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: Inverse of column
  synonyms:
  - -inv
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Absolute value of column
  synonyms:
  - -ab
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Convert negative numbers to positive
  synonyms:
  - -neg2pos
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Take log (natural base) of the column
  synonyms:
  - -log
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Take log (base 2) of the column
  synonyms:
  - -log2
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Take log (base 10) of the column
  synonyms:
  - -log10
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Take num ** (value of the column)
  synonyms:
  - -exp
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: Take e=2.1782... ** (value of column)
  synonyms:
  - -e
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Raise vaule to the power of num (value of the column)
  synonyms:
  - -pow
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: If the column has more than num chars, then substr the first num
  synonyms:
  - -substr
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: If the column has a value less than num, set it to num
  synonyms:
  - -set_min
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: If the column has a value greater than num, set it to num
  synonyms:
  - -set_max
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: ':   <Number/String> (default: Number)'
  synonyms:
  - -type
  args: !SimpleFlagArg
    name: str
  optional: true
- !Flag
  description: Replace value (treated as a string) by its length in characters
  synonyms:
  - -len
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Reverse the string (ABC becomes CBA)
  synonyms:
  - -reverse
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Divide the column by the number in column <col>
  synonyms:
  - -dc
  args: !SimpleFlagArg
    name: col
  optional: true
- !Flag
  description: Multiply the column by the number in column <col>
  synonyms:
  - -mc
  args: !SimpleFlagArg
    name: col
  optional: true
- !Flag
  description: Add the number in column <col> to the column
  synonyms:
  - -ac
  args: !SimpleFlagArg
    name: col
  optional: true
- !Flag
  description: Subtract the number in column <col> from the column
  synonyms:
  - -sc
  args: !SimpleFlagArg
    name: col
  optional: true
- !Flag
  description: Take the min of the column and <col>
  synonyms:
  - -minc
  args: !SimpleFlagArg
    name: col
  optional: true
- !Flag
  description: Take the max of the column and <col>
  synonyms:
  - -maxc
  args: !SimpleFlagArg
    name: col
  optional: true
- !Flag
  description: ':   discretize the column into <num> bins.'
  synonyms:
  - -bins
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: "given as 'bottom,top'. linearly rescales the data in the column so\
    \ that the smallest value will\nbe <bottom> and the largest will be <top>. If\
    \ the data is equal in all entries, all entries\nwill be set to <bottom>."
  synonyms:
  - -rescale
  args: !SimpleFlagArg
    name: str
  optional: true
- !Flag
  description: ": given as 'min,max'. when used with -rescale assumes that the maximal\
    \ value of the column is\nmax and the minimal value is min."
  synonyms:
  - -rescale_limits
  args: !SimpleFlagArg
    name: str
  optional: true
- !Flag
  description: "makes the column a probability distribution by changing negative values\
    \ to zero and\nthen dividing by the sum of the column."
  synonyms:
  - -pd
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Precision (take only <num> sig. digits. default: don't fix)"
  synonyms:
  - -p
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: Convert numbers to a <num> resolution (e.g., 0.05)
  synonyms:
  - -res
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: 'Add <str> to the end of the column (default: "")'
  synonyms:
  - -astr
  args: !SimpleFlagArg
    name: str
  optional: true
- !Flag
  description: 'Add <str> to the beginning of the column (default: "")'
  synonyms:
  - -bstr
  args: !SimpleFlagArg
    name: str
  optional: true
- !Flag
  description: Set the entry to <str> (put EMPTY for getting an empty entry)
  synonyms:
  - -set
  args: !SimpleFlagArg
    name: str
  optional: true
- !Flag
  description: Remove string that matches the regular expression <regexp> from column
  synonyms:
  - -rmre
  args: !SimpleFlagArg
    name: regexp
  optional: true
- !Flag
  description: "Set numerical values around a given pivot (see -pv_val, -pv_high,\
    \ -pv_low). Activated when <bool> = 1.\nNon numerical values are not modified."
  synonyms:
  - -pv
  args: !SimpleFlagArg
    name: bool
  optional: true
- !Flag
  description: '<num> The pivot value (default: 0.05)'
  synonyms:
  - -pv_val
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'The number to set values greater then the pivot value (default: 0)'
  synonyms:
  - -pv_high
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: '<num> The number to set values smaller equal then the pivot value
    (default: 1)'
  synonyms:
  - -pv_low
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'Split the column by the delimiter <del> (default: none).'
  synonyms:
  - -splt_d
  args: !SimpleFlagArg
    name: del
  optional: true
- !Flag
  description: Accumulate (row i = row 1 + .. + row i)
  synonyms:
  - -cumul
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'When dividing by zero, uses <num> instead of giving an error (default:
    999999)'
  synonyms:
  - -zero
  args: !SimpleFlagArg
    name: num
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\nEXE_BASE_DIR/lib/modify_column.pl <file>\n\n   Modifies a column according\
  \ to predefined operations\n\n   WHAT TO MODIFY:\n\n      -c <num>       The column\
  \ to modify (default: 0; specify multiple columns using commas) (zero-based)\n \
  \     -r <num>       The rows to modify (default: All except -skipped; specify multiple\
  \ rows using commas) (zero-based)\n      -A             Apply transformation to\
  \ ALL columns\n      -min <num>     Apply transformation only if entry is above\
  \ (or equal) num\n      -max <num>     Apply transformation only if entry is below\
  \ (or equal) num\n      -mins <num>    Apply transformation only if entry is strictly\
  \ above num\n      -maxs <num>    Apply transformation only if entry is strictly\
  \ below num\n      -rng <num1,num2> Apply transformation only if num1<=entry<=num2\n\
  \      -rngs <num1,num2> Apply transformation only if num1<entry<num2\n      -abs\
  \ <num>:    Apply transformation only if entry is above <num> or below -<num>\n\
  \      -babs <num>:   Apply transformation only if entry is above -<num> and below\
  \ <num>\n      -str <str>:    Apply transformation only if entry contains <str>\n\
  \      -estr <str>:   Apply transformation only if entry is equal to <str>\n   \
  \   -nstr <str>:   Apply transformation only if entry is *not* equal to <str>\n\
  \      -ne:           Apply transormation only if entry is not empty\n      -empty:\
  \        Apply transormation only if entry is empty\n      -pairs <file>: Apply\
  \ transformation only if the entry is from a row and column \n                 \
  \    that appear in a line of <file> as <row name> <tab> <column name> \n      -skip\
  \ <num>:   Skip num rows in the file (default: 0)\n      -skipc <num>:  Skip num\
  \ columns (when applying to all columns, can skip the first few) (default: 0)\n\n\
  \   HOW TO MODIFY:\n\n      -a <num>       Add <num> to the column (default: 0)\n\
  \      -s <num>       Substract <num> to the column (default: 0)\n      -m <num>\
  \       Multiply column by <num> (default: 1) (write '\"-1\"' to pass negative numbers)\n\
  \      -d <num>       Divide column by <num> (default: 1) (write '\"-1\"' to pass\
  \ negative numbers)\n      -inv           Inverse of column\n      -ab         \
  \   Absolute value of column\n      -neg2pos       Convert negative numbers to positive\n\
  \      -log           Take log (natural base) of the column\n      -log2       \
  \   Take log (base 2) of the column\n      -log10         Take log (base 10) of\
  \ the column\n      -exp <num>     Take num ** (value of the column)\n      -e \
  \            Take e=2.1782... ** (value of column)\n      -pow <num>     Raise vaule\
  \ to the power of num (value of the column)\n      -substr <num>  If the column\
  \ has more than num chars, then substr the first num\n      -set_min <num> If the\
  \ column has a value less than num, set it to num\n      -set_max <num> If the column\
  \ has a value greater than num, set it to num\n      -type <str>:   <Number/String>\
  \ (default: Number)\n      -len           Replace value (treated as a string) by\
  \ its length in characters\n      -reverse       Reverse the string (ABC becomes\
  \ CBA)\n\n      -dc <col>      Divide the column by the number in column <col>\n\
  \      -mc <col>      Multiply the column by the number in column <col>\n      -ac\
  \ <col>      Add the number in column <col> to the column\n      -sc <col>     \
  \ Subtract the number in column <col> from the column\n      -minc <col>    Take\
  \ the min of the column and <col>\n      -maxc <col>    Take the max of the column\
  \ and <col>\n\n      -bins <num>:   discretize the column into <num> bins.\n   \
  \   -rescale <str> given as 'bottom,top'. linearly rescales the data in the column\
  \ so that the smallest value will\n                     be <bottom> and the largest\
  \ will be <top>. If the data is equal in all entries, all entries\n            \
  \         will be set to <bottom>.\n      -rescale_limits <str>: given as 'min,max'.\
  \ when used with -rescale assumes that the maximal value of the column is\n    \
  \                 max and the minimal value is min.\n      -pd            makes\
  \ the column a probability distribution by changing negative values to zero and\n\
  \                     then dividing by the sum of the column.\n\n      -p <num>\
  \       Precision (take only <num> sig. digits. default: don't fix)\n      -res\
  \ <num>     Convert numbers to a <num> resolution (e.g., 0.05)\n      -astr <str>\
  \    Add <str> to the end of the column (default: \"\")\n      -bstr <str>    Add\
  \ <str> to the beginning of the column (default: \"\")\n      -set <str>     Set\
  \ the entry to <str> (put EMPTY for getting an empty entry)\n      -rmre <regexp>\
  \ Remove string that matches the regular expression <regexp> from column\n\n   \
  \   -pv <bool>     Set numerical values around a given pivot (see -pv_val, -pv_high,\
  \ -pv_low). Activated when <bool> = 1.\n                     Non numerical values\
  \ are not modified.\n      -pv_val  <num> The pivot value (default: 0.05)     \n\
  \      -pv_high <num> The number to set values greater then the pivot value (default:\
  \ 0)\n      -pv_low  <num> The number to set values smaller equal then the pivot\
  \ value (default: 1)\n\n      -splt_d <del>  Split the column by the delimiter <del>\
  \ (default: none).\n      -cumul         Accumulate (row i = row 1 + .. + row i)\n\
  \      -zero <num>    When dividing by zero, uses <num> instead of giving an error\
  \ (default: 999999)\n\n"
generated_using:
- --help
