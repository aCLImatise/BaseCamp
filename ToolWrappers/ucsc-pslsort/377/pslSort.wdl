version 1.0

task PslSort {
  input {
    Boolean? no_head
    Int? verbose
    String adding
    String this
    String alignments
    String and
    String dirs
    String enough
    Int g_two_g
    String in_dirs
    Int one
    Int? one_vertical_line_two
    String across
    String first
    String in
    String second
    String space
    String will
    String into
    String or
    String outfile
    String sort
    String var_22
    Int var_23
    String a
    String all
    String outfile_dot
    String stages
    String tempdir
    String var_29
    String genome_to_genome
    String in_dir
    String of
    String pass
    String to
    String alignment
    String device
    String respectively
    String var_38
    String on
    String must
    String limit
    String program
  }
  command <<<
    pslSort \
      ~{adding} \
      ~{this} \
      ~{alignments} \
      ~{and} \
      ~{dirs} \
      ~{enough} \
      ~{g_two_g} \
      ~{in_dirs} \
      ~{one} \
      ~{one_vertical_line_two} \
      ~{across} \
      ~{first} \
      ~{in} \
      ~{second} \
      ~{space} \
      ~{will} \
      ~{into} \
      ~{or} \
      ~{outfile} \
      ~{sort} \
      ~{var_22} \
      ~{var_23} \
      ~{a} \
      ~{all} \
      ~{outfile_dot} \
      ~{stages} \
      ~{tempdir} \
      ~{var_29} \
      ~{genome_to_genome} \
      ~{in_dir} \
      ~{of} \
      ~{pass} \
      ~{to} \
      ~{alignment} \
      ~{device} \
      ~{respectively} \
      ~{var_38} \
      ~{on} \
      ~{must} \
      ~{limit} \
      ~{program} \
      ~{if (no_head) then "-nohead" else ""} \
      ~{if defined(verbose) then ("-verbose " +  '"' + verbose + '"') else ""}
  >>>
  runtime {
    docker: "None"
  }
  parameter_meta {
    no_head: "Do not write psl header."
    verbose: "Set verbosity level, higher for more output. Default is 1."
    adding: ""
    this: ""
    alignments: ""
    and: ""
    dirs: ""
    enough: ""
    g_two_g: ""
    in_dirs: ""
    one: ""
    one_vertical_line_two: ""
    across: ""
    first: ""
    in: ""
    second: ""
    space: ""
    will: ""
    into: ""
    or: ""
    outfile: ""
    sort: ""
    var_22: ""
    var_23: ""
    a: ""
    all: ""
    outfile_dot: ""
    stages: ""
    tempdir: ""
    var_29: ""
    genome_to_genome: ""
    in_dir: ""
    of: ""
    pass: ""
    to: ""
    alignment: ""
    device: ""
    respectively: ""
    var_38: ""
    on: ""
    must: ""
    limit: ""
    program: ""
  }
  output {
    File out_stdout = stdout()
  }
}