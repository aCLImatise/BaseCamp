from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Ganon_Report_V0_1_0 = CommandToolBuilder(tool="ganon_report", base_command=["ganon", "report"], inputs=[ToolInput(tag="in_database_prefix_used", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ [ ...]], --db-prefix [ [ ...]]\nDatabase prefix[es] used for classification (in any\norder). Only '.tax' file is required. If not provided,\nnew taxonomy will be downloaded")), ToolInput(tag="in_output_format", input_type=File(optional=True), prefix="--output-format", doc=InputDocumentation(doc="Output format [text, tsv, csv]. text outputs a\ntabulated formatted text file for better\nvisualization. Default: tsv")), ToolInput(tag="in_report_type", input_type=Boolean(optional=True), prefix="--report-type", doc=InputDocumentation(doc="Type of report to generate [reads, matches]. Default:")), ToolInput(tag="in_sort", input_type=Boolean(optional=True), prefix="--sort", doc=InputDocumentation(doc="Sort report by [rank, lineage, count, unique].\nDefault: rank (with custom --ranks) or lineage (with\n--ranks all)")), ToolInput(tag="in_split_hierarchy", input_type=Boolean(optional=True), prefix="--split-hierarchy", doc=InputDocumentation(doc="Split output reports by hierarchy (from ganon classify\n--hierarchy-labels). If activated, the output files\nwill be named as '{output_prefix}.{hierarchy}.tre'")), ToolInput(tag="in_one_more_hierarchies_skip", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ [ ...]], --skip-hierarchy [ [ ...]]\nOne or more hierarchies to skip in the report (from\nganon classify --hierarchy-labels)")), ToolInput(tag="in_one_more_hierarchies_keep", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="[ [ ...]], --keep-hierarchy [ [ ...]]\nOne or more hierarchies to keep in the report (from\nganon classify --hierarchy-labels)")), ToolInput(tag="in_tax_dump_file", input_type=Boolean(optional=True), prefix="--taxdump-file", doc=InputDocumentation(doc="[ [ ...]]\nForce use of a specific version of the\n(taxdump.tar.gz) or (nodes.dmp names.dmp [merged.dmp])\nfile(s) from NCBI Taxonomy (otherwise it will be\nautomatically downloaded)")), ToolInput(tag="in_input_directory", input_type=Boolean(optional=True), prefix="--input-directory", doc=InputDocumentation(doc="Directory containing input files")), ToolInput(tag="in_input_extension", input_type=Boolean(optional=True), prefix="--input-extension", doc=InputDocumentation(doc="Extension of files to use with --input-directory\n(provide it without * expansion, e.g. '.rep')")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output mode")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Quiet output mode")), ToolInput(tag="in_min_count", input_type=Boolean(optional=True), prefix="--min-count", doc=InputDocumentation(doc="Minimum number of counts to keep the taxa")), ToolInput(tag="in_min_percentage", input_type=Boolean(optional=True), prefix="--min-percentage", doc=InputDocumentation(doc="Minimum percentage of counts to keep the taxa [0-1]")), ToolInput(tag="in_names", input_type=Boolean(optional=True), prefix="--names", doc=InputDocumentation(doc="[ [ ...]]     Show only entries matching exact names of the provided")), ToolInput(tag="in_tax_ids", input_type=Boolean(optional=True), prefix="--taxids", doc=InputDocumentation(doc="[ [ ...]]    One or more taxids to report (including children taxa)")), ToolInput(tag="in_one_more_files", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[REP_FILES [REP_FILES ...]], --rep-files [REP_FILES [REP_FILES ...]]\nOne or more *.rep files from ganon classify")), ToolInput(tag="in_output_prefix", input_type=File(optional=True), prefix="--output-prefix", doc=InputDocumentation(doc="Output prefix for report file '{output_prefix}.tre'.\nIn case of multiple files, the base input filename\nwill be appended at the end of the output file\n'{output_prefix + FILENAME}.tre'\n"))], outputs=[ToolOutput(tag="out_output_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_format", type_hint=File()), doc=OutputDocumentation(doc="Output format [text, tsv, csv]. text outputs a\ntabulated formatted text file for better\nvisualization. Default: tsv"))], container="quay.io/biocontainers/ganon:0.4.0--py38hb45e0f6_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ganon_Report_V0_1_0().translate("wdl")

