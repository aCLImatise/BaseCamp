from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Cramtools_Fastq_V0_1_0 = CommandToolBuilder(tool="cramtools_fastq", base_command=["cramtools", "fastq"], inputs=[ToolInput(tag="in_default_quality_score", input_type=Boolean(optional=True), prefix="--default-quality-score", doc=InputDocumentation(doc="Use this quality score (decimal representation of ASCII symbol) as a default value when the original quality score was lost due to compression. Minimum is 33. (default: 63)")), ToolInput(tag="in_enumerate", input_type=Boolean(optional=True), prefix="--enumerate", doc=InputDocumentation(doc="Append read names with read index (/1 for first in pair, /2 for second in pair). (default: false)")), ToolInput(tag="in_fast_q_base_name", input_type=File(optional=True), prefix="--fastq-base-name", doc=InputDocumentation(doc="'_number.fastq[.gz] will be appended to this string to obtain output fastq file name. If this parameter is omitted then all reads are printed with no garanteed order.")), ToolInput(tag="in_gzip", input_type=Boolean(optional=True), prefix="--gzip", doc=InputDocumentation(doc="Compress fastq files with gzip. (default: false)")), ToolInput(tag="in_ignore_md_five_mismatch", input_type=Boolean(optional=True), prefix="--ignore-md5-mismatch", doc=InputDocumentation(doc="Issue a warning on sequence MD5 mismatch and continue. This does not garantee the data will be read succesfully.  (default: false)")), ToolInput(tag="in_input_cram_file", input_type=Boolean(optional=True), prefix="--input-cram-file", doc=InputDocumentation(doc="The path to the CRAM file to uncompress. Omit if standard input (pipe).")), ToolInput(tag="in_max_records", input_type=Boolean(optional=True), prefix="--max-records", doc=InputDocumentation(doc="Stop after reading this many records. (default: -1)")), ToolInput(tag="in_read_name_prefix", input_type=Boolean(optional=True), prefix="--read-name-prefix", doc=InputDocumentation(doc="Replace read names with this prefix and a sequential integer.")), ToolInput(tag="in_reference_fast_a_file", input_type=Boolean(optional=True), prefix="--reference-fasta-file", doc=InputDocumentation(doc="Path to the reference fasta file, it must be uncompressed and indexed (use 'samtools faidx' for example).")), ToolInput(tag="in_reverse", input_type=Boolean(optional=True), prefix="--reverse", doc=InputDocumentation(doc="Re-reverse reads mapped to negative strand. (default: false)")), ToolInput(tag="in_skip_md_five_check", input_type=Boolean(optional=True), prefix="--skip-md5-check", doc=InputDocumentation(doc="Skip MD5 checks when reading the header. (default: false)")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="Change log level: DEBUG, INFO, WARNING, ERROR. (default: ERROR)")), ToolInput(tag="in_main_class", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_fast_q_base_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_fast_q_base_name", type_hint=File()), doc=OutputDocumentation(doc="'_number.fastq[.gz] will be appended to this string to obtain output fastq file name. If this parameter is omitted then all reads are printed with no garanteed order."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cramtools_Fastq_V0_1_0().translate("wdl", allow_empty_container=True)

