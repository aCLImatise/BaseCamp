from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean

Lofreq_Vcfset_V0_1_0 = CommandToolBuilder(tool="lofreq_vcfset", base_command=["lofreq", "vcfset"], inputs=[ToolInput(tag="in_vcf_one", input_type=File(optional=True), prefix="--vcf1", doc=InputDocumentation(doc="1st VCF input file (bgzip supported)")), ToolInput(tag="in_vcf_two", input_type=File(optional=True), prefix="--vcf2", doc=InputDocumentation(doc="2nd VCF input file (mandatory - except for concat - and needs to be tabix indexed)")), ToolInput(tag="in_vcf_out", input_type=File(optional=True), prefix="--vcfout", doc=InputDocumentation(doc="VCF output file (default: - for stdout; gzip supported).")), ToolInput(tag="in_action", input_type=File(optional=True), prefix="--action", doc=InputDocumentation(doc="Set operation to perform: intersect, complement or concat.\n- intersect = vcf1 AND vcf2.\n- complement = vcf1 \ vcf2.\n- concat = vcf1 + vcf2 ... vcfn (output as in file order, i.e. output not necessarily sorted!)")), ToolInput(tag="in_add_info", input_type=String(optional=True), prefix="--add-info", doc=InputDocumentation(doc="Add info field, e.g. 'SOMATIC'")), ToolInput(tag="in_count_only", input_type=Boolean(optional=True), prefix="--count-only", doc=InputDocumentation(doc="Don't print bases, just numbers")), ToolInput(tag="in_only_pos", input_type=Boolean(optional=True), prefix="--only-pos", doc=InputDocumentation(doc="Disable allele-awareness by using position only (ignoring bases) as key for storing and comparison")), ToolInput(tag="in_only_passed", input_type=Boolean(optional=True), prefix="--only-passed", doc=InputDocumentation(doc="Ignore variants marked as filtered")), ToolInput(tag="in_only_sn_vs", input_type=Boolean(optional=True), prefix="--only-snvs", doc=InputDocumentation(doc="Ignore anything but SNVs in both input files")), ToolInput(tag="in_only_indels", input_type=Boolean(optional=True), prefix="--only-indels", doc=InputDocumentation(doc="Ignore anything but indels in both input files")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Enable debugging"))], outputs=[ToolOutput(tag="out_vcf_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_vcf_out", type_hint=File()), doc=OutputDocumentation(doc="VCF output file (default: - for stdout; gzip supported).")), ToolOutput(tag="out_action", output_type=File(optional=True), selector=InputSelector(input_to_select="in_action", type_hint=File()), doc=OutputDocumentation(doc="Set operation to perform: intersect, complement or concat.\n- intersect = vcf1 AND vcf2.\n- complement = vcf1 \ vcf2.\n- concat = vcf1 + vcf2 ... vcfn (output as in file order, i.e. output not necessarily sorted!)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Lofreq_Vcfset_V0_1_0().translate("wdl", allow_empty_container=True)

