from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int, Float

Lofreq_Somatic_V0_1_0 = CommandToolBuilder(tool="lofreq_somatic", base_command=["lofreq", "somatic"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose")), ToolInput(tag="in_normal", input_type=File(optional=True), prefix="--normal", doc=InputDocumentation(doc="Normal BAM file")), ToolInput(tag="in_tumor", input_type=File(optional=True), prefix="--tumor", doc=InputDocumentation(doc="Tumor BAM file")), ToolInput(tag="in_out_prefix", input_type=String(optional=True), prefix="--outprefix", doc=InputDocumentation(doc="Prefix for output files")), ToolInput(tag="in_ref", input_type=File(optional=True), prefix="--ref", doc=InputDocumentation(doc="Reference fasta file")), ToolInput(tag="in_bed", input_type=File(optional=True), prefix="--bed", doc=InputDocumentation(doc="BED file listing regions to restrict analysis to")), ToolInput(tag="in_dbsnp", input_type=File(optional=True), prefix="--dbsnp", doc=InputDocumentation(doc="vcf-file (bgzipped and index with tabix) containing\nknown germline variants (e.g. dbsnp for human")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Use this many threads for each call")), ToolInput(tag="in_tumor_mtc", input_type=String(optional=True), prefix="--tumor-mtc", doc=InputDocumentation(doc="Type of multiple testing correction for tumor\n(default: bonf)")), ToolInput(tag="in_tumor_mtc_alpha", input_type=Float(optional=True), prefix="--tumor-mtc-alpha", doc=InputDocumentation(doc="Multiple testing correction alpha for tumor (default:\n1.000000)")), ToolInput(tag="in_in_del_tumor_mtc", input_type=String(optional=True), prefix="--indel-tumor-mtc", doc=InputDocumentation(doc="Type of multiple testing correction for tumor\n(default: bonf)")), ToolInput(tag="in_in_del_tumor_mtc_alpha", input_type=Float(optional=True), prefix="--indel-tumor-mtc-alpha", doc=InputDocumentation(doc="Multiple testing correction alpha for tumor (default:\n0.010000)")), ToolInput(tag="in_call_indels", input_type=Boolean(optional=True), prefix="--call-indels", doc=InputDocumentation(doc="Also call indels (see documentation on how to\npreprocess your BAM files)")), ToolInput(tag="in_min_cov", input_type=Int(optional=True), prefix="--min-cov", doc=InputDocumentation(doc="Minimum coverage for somatic calls (default: 7)")), ToolInput(tag="in_germline", input_type=Boolean(optional=True), prefix="--germline", doc=InputDocumentation(doc="Also list germline calls in separate file")), ToolInput(tag="in_ign_vcf", input_type=File(optional=True), prefix="--ign-vcf", doc=InputDocumentation(doc="Ignore variants in this vcf-file for source quality\ncomputation in tumor (collides with --no-src-qual).\nDefault is to use (stringently filtered) predictions\nin normal sample")), ToolInput(tag="in_use_orphan", input_type=Boolean(optional=True), prefix="--use-orphan", doc=InputDocumentation(doc="Use orphaned/anomalous reads from pairs in all samples")), ToolInput(tag="in_baq_off", input_type=Boolean(optional=True), prefix="--baq-off", doc=InputDocumentation(doc="Switch use of BAQ off in all samples")), ToolInput(tag="in_call_rlx_extra_args", input_type=String(optional=True), prefix="--call-rlx-extra-args", doc=InputDocumentation(doc="Extra arguments to call_rlx (replace dashes with @)")), ToolInput(tag="in_no_src_qual", input_type=Boolean(optional=True), prefix="--no-src-qual", doc=InputDocumentation(doc="Disable use of source quality in tumor (see also -V)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Enable debugging")), ToolInput(tag="in_continue", input_type=Boolean(optional=True), prefix="--continue", doc=InputDocumentation(doc="continue interrupted run. Will reuse existing files,\nassuming they are complete and created with identical\noptions!\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Lofreq_Somatic_V0_1_0().translate("wdl", allow_empty_container=True)

