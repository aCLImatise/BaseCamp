from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Panx_Py_V0_1_0 = CommandToolBuilder(tool="panX.py", base_command=["panX.py"], inputs=[ToolInput(tag="in_folder_name", input_type=Boolean(optional=True), prefix="--folder_name", doc=InputDocumentation(doc="the absolute path for project folder")), ToolInput(tag="in_species_name", input_type=Boolean(optional=True), prefix="--species_name", doc=InputDocumentation(doc="species name as prefix for some temporary folders\n(e.g.: P_aeruginosa)")), ToolInput(tag="in_gbk_present", input_type=Boolean(optional=True), prefix="--gbk_present", doc=InputDocumentation(doc="use nucleotide/amino acid sequence files (fna/faa)\nwhen no genBank files given (this option does not\nconsider annotations)")), ToolInput(tag="in_st", input_type=Boolean(optional=True), prefix="-st", doc=InputDocumentation(doc="[ ...], --steps  [ ...]\nrun specific steps or run all steps by default")), ToolInput(tag="in_meta_info_organism", input_type=Boolean(optional=True), prefix="--metainfo_organism", doc=InputDocumentation(doc="add organism information in metadata table.")), ToolInput(tag="in_meta_info_reconcile", input_type=Boolean(optional=True), prefix="--metainfo_reconcile", doc=InputDocumentation(doc="use reconciled metadata (redundancy removed) instead\nof original metadata.")), ToolInput(tag="in_ra_xml_max_time", input_type=Boolean(optional=True), prefix="--raxml_max_time", doc=InputDocumentation(doc="RAxML tree optimization: maximal runing time (minutes,\ndefault:30min)")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="number of threads")), ToolInput(tag="in_blast_file_path", input_type=File(optional=True), prefix="--blast_file_path", doc=InputDocumentation(doc="the absolute path for blast result (e.g.:\n/path/blast.out)")), ToolInput(tag="in_roar_y_file_path", input_type=File(optional=True), prefix="--roary_file_path", doc=InputDocumentation(doc="the absolute path for roary result (e.g.:\n/path/roary.out)")), ToolInput(tag="in_ortho_finder_file_path", input_type=File(optional=True), prefix="--orthofinder_file_path", doc=InputDocumentation(doc="the absolute path for orthofinder result (e.g.:\n/path/orthofinder.out)")), ToolInput(tag="in_other_tool_fpath", input_type=File(optional=True), prefix="--other_tool_fpath", doc=InputDocumentation(doc="the absolute path for result from other orthology\ninference tool (e.g.: /path/other_tool.out)")), ToolInput(tag="in_meta_info_fpath", input_type=File(optional=True), prefix="--metainfo_fpath", doc=InputDocumentation(doc="the absolute path for meta_information file (e.g.:\n/path/meta.out)")), ToolInput(tag="in_diamond_path", input_type=Boolean(optional=True), prefix="--diamond_path", doc=InputDocumentation(doc="alternative diamond path provided by user")), ToolInput(tag="in_diamond_evalue", input_type=Boolean(optional=True), prefix="--diamond_evalue", doc=InputDocumentation(doc="default: e-value threshold below 0.001")), ToolInput(tag="in_diamond_max_target_seqs", input_type=Boolean(optional=True), prefix="--diamond_max_target_seqs", doc=InputDocumentation(doc="Diamond: maximum number of target sequences per query\nEstimation: #strain * #max_duplication (50*10=500)")), ToolInput(tag="in_diamond_identity", input_type=Boolean(optional=True), prefix="--diamond_identity", doc=InputDocumentation(doc="Diamond: sequence identity threshold to report an\nalignment. Default: no restriction (0)")), ToolInput(tag="in_diamond_query_cover", input_type=Boolean(optional=True), prefix="--diamond_query_cover", doc=InputDocumentation(doc="Diamond: query sequence coverage threshold to report\nan alignment. Default: no restriction (0)")), ToolInput(tag="in_diamond_subject_cover", input_type=Boolean(optional=True), prefix="--diamond_subject_cover", doc=InputDocumentation(doc="Diamond: subject sequence coverage threshold to report\nan alignment. Default: no restriction (0)")), ToolInput(tag="in_diamond_divide_conquer", input_type=Boolean(optional=True), prefix="--diamond_divide_conquer", doc=InputDocumentation(doc="running diamond alignment in divide-and-conquer(DC)\nalgorithm for large dataset")), ToolInput(tag="in_subset_size", input_type=Boolean(optional=True), prefix="--subset_size", doc=InputDocumentation(doc="subset_size (number of strains in a subset) for\ndivide-and-conquer(DC) algorithm. Default:50")), ToolInput(tag="in_diamond_identity_subproblem", input_type=Boolean(optional=True), prefix="--diamond_identity_subproblem", doc=InputDocumentation(doc="Diamond divide-and-conquer subproblem: sequence\nidentity threshold to report an alignment.")), ToolInput(tag="in_diamond_query_cover_subproblem", input_type=Boolean(optional=True), prefix="--diamond_query_cover_subproblem", doc=InputDocumentation(doc="Diamond divide-and-conquer subproblem: query sequence\ncoverage threshold to report an alignment")), ToolInput(tag="in_diamond_subject_cover_subproblem", input_type=Boolean(optional=True), prefix="--diamond_subject_cover_subproblem", doc=InputDocumentation(doc="Diamond divide-and-conquer subproblem: subject\nsequence coverage threshold to report an alignment")), ToolInput(tag="in_mcl_inflation", input_type=Boolean(optional=True), prefix="--mcl_inflation", doc=InputDocumentation(doc="MCL: inflation parameter (this parameter affects\ngranularity)")), ToolInput(tag="in_blastn_rna_max_target_seqs", input_type=Boolean(optional=True), prefix="--blastn_RNA_max_target_seqs", doc=InputDocumentation(doc="Blastn on RNAs: the maximum number of target sequences\nper query Estimation: #strain * #max_duplication")), ToolInput(tag="in_disable_cluster_postprocessing", input_type=Boolean(optional=True), prefix="--disable_cluster_postprocessing", doc=InputDocumentation(doc="disable postprocessing (split overclustered genes and\nparalogs, and cluster unclustered genes)")), ToolInput(tag="in_disable_long_branch_splitting", input_type=Boolean(optional=True), prefix="--disable_long_branch_splitting", doc=InputDocumentation(doc="disable splitting long branch")), ToolInput(tag="in_enable_rna_clustering", input_type=Boolean(optional=True), prefix="--enable_RNA_clustering", doc=InputDocumentation(doc="cluster rRNAs")), ToolInput(tag="in_factor_core_diversity", input_type=Boolean(optional=True), prefix="--factor_core_diversity", doc=InputDocumentation(doc="default: factor used to refine raw core genome\ndiversity, apply\n(0.1+2.0*core_diversity)/(1+2.0*core_diversity) to\ndecide split_long_branch_cutoff")), ToolInput(tag="in_split_long_branch_cut_off", input_type=Boolean(optional=True), prefix="--split_long_branch_cutoff", doc=InputDocumentation(doc="split long branch cutoff provided by user (by default:\n0.0 as not given):")), ToolInput(tag="in_explore_paralog_plot", input_type=Boolean(optional=True), prefix="--explore_paralog_plot", doc=InputDocumentation(doc="default: not plot paralog statistics")), ToolInput(tag="in_paralog_frac_cut_off", input_type=Boolean(optional=True), prefix="--paralog_frac_cutoff", doc=InputDocumentation(doc="fraction of strains required for splitting paralogy.\nDefault: 0.33")), ToolInput(tag="in_paralog_branch_cut_off", input_type=Boolean(optional=True), prefix="--paralog_branch_cutoff", doc=InputDocumentation(doc="branch_length cutoff used in paralogy splitting")), ToolInput(tag="in_window_size_smoothed", input_type=Boolean(optional=True), prefix="--window_size_smoothed", doc=InputDocumentation(doc="postprocess_unclustered_genes: window size for\nsmoothed cluster length distribution")), ToolInput(tag="in_strain_proportion", input_type=Boolean(optional=True), prefix="--strain_proportion", doc=InputDocumentation(doc="postprocess_unclustered_genes: strain proportion")), ToolInput(tag="in_sigma_scale", input_type=Boolean(optional=True), prefix="--sigma_scale", doc=InputDocumentation(doc="postprocess_unclustered_genes: sigma scale")), ToolInput(tag="in_core_genome_threshold", input_type=Boolean(optional=True), prefix="--core_genome_threshold", doc=InputDocumentation(doc="percentage of strains used to decide whether a gene is\ncore. Default: 1.0 for strictly core gene; < 1.0 for\nsoft core genes")), ToolInput(tag="in_core_gene_strain_fpath", input_type=Boolean(optional=True), prefix="--core_gene_strain_fpath", doc=InputDocumentation(doc="file path for user-provided subset of strains (core\ngenes should be present in all strains in this list)")), ToolInput(tag="in_simple_tree", input_type=Boolean(optional=True), prefix="--simple_tree", doc=InputDocumentation(doc="simple tree: does not use treetime for ancestral")), ToolInput(tag="in_merged_gain_loss_output", input_type=Boolean(optional=True), prefix="--merged_gain_loss_output", doc=InputDocumentation(doc="not split gene presence/absence and gain/loss pattern\ninto separate files for each cluster")), ToolInput(tag="in_infer_branch_association", input_type=Boolean(optional=True), prefix="--infer_branch_association", doc=InputDocumentation(doc="infer branch association")), ToolInput(tag="in_min_strain_fraction_branch_association", input_type=Boolean(optional=True), prefix="--min_strain_fraction_branch_association", doc=InputDocumentation(doc="minimal fraction of the total number of strains for\nbranch association")), ToolInput(tag="in_min_strain_fraction_presence_association", input_type=Boolean(optional=True), prefix="--min_strain_fraction_presence_association", doc=InputDocumentation(doc="minimal fraction of the total number of strains for\npresence/absence association")), ToolInput(tag="in_max_strain_fraction_presence_association", input_type=Boolean(optional=True), prefix="--max_strain_fraction_presence_association", doc=InputDocumentation(doc="maximal fraction of the total number of strains for\npresence/absence association")), ToolInput(tag="in_store_locus_tag", input_type=Boolean(optional=True), prefix="--store_locus_tag", doc=InputDocumentation(doc="store locus_tags in a separate file instead of saving\nlocus_tags in gene cluster json for large dataset")), ToolInput(tag="in_raw_locus_tag", input_type=Boolean(optional=True), prefix="--raw_locus_tag", doc=InputDocumentation(doc="use raw locus_tag from GenBank instead of strain_ID +\nlocus_tag")), ToolInput(tag="in_optional_table_column", input_type=Boolean(optional=True), prefix="--optional_table_column", doc=InputDocumentation(doc="add customized column in gene cluster json file for\nvisualization.")), ToolInput(tag="in_meta_data_config", input_type=Boolean(optional=True), prefix="--meta_data_config", doc=InputDocumentation(doc="file path for pre-defined metadata structure\n(discrete/continuous data type, etc.)")), ToolInput(tag="in_ra_xml_path", input_type=Boolean(optional=True), prefix="--raxml_path", doc=InputDocumentation(doc="absolute path of raxml")), ToolInput(tag="in_clean_temporary_files", input_type=Boolean(optional=True), prefix="--clean_temporary_files", doc=InputDocumentation(doc="default: keep temporary files\n"))], outputs=[ToolOutput(tag="out_blast_file_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_blast_file_path", type_hint=File()), doc=OutputDocumentation(doc="the absolute path for blast result (e.g.:\n/path/blast.out)")), ToolOutput(tag="out_roar_y_file_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_roar_y_file_path", type_hint=File()), doc=OutputDocumentation(doc="the absolute path for roary result (e.g.:\n/path/roary.out)")), ToolOutput(tag="out_ortho_finder_file_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_ortho_finder_file_path", type_hint=File()), doc=OutputDocumentation(doc="the absolute path for orthofinder result (e.g.:\n/path/orthofinder.out)")), ToolOutput(tag="out_other_tool_fpath", output_type=File(optional=True), selector=InputSelector(input_to_select="in_other_tool_fpath", type_hint=File()), doc=OutputDocumentation(doc="the absolute path for result from other orthology\ninference tool (e.g.: /path/other_tool.out)")), ToolOutput(tag="out_meta_info_fpath", output_type=File(optional=True), selector=InputSelector(input_to_select="in_meta_info_fpath", type_hint=File()), doc=OutputDocumentation(doc="the absolute path for meta_information file (e.g.:\n/path/meta.out)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Panx_Py_V0_1_0().translate("wdl", allow_empty_container=True)

