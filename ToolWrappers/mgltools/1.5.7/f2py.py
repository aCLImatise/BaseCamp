from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

F2Py_V0_1_0 = CommandToolBuilder(tool="f2py", base_command=["f2py"], inputs=[ToolInput(tag="in_two_d_numpy", input_type=Boolean(optional=True), prefix="--2d-numpy", doc=InputDocumentation(doc="Use numpy.f2py tool with NumPy support. [DEFAULT]")), ToolInput(tag="in_two_d_numeric", input_type=Boolean(optional=True), prefix="--2d-numeric", doc=InputDocumentation(doc="Use f2py2e tool with Numeric support.")), ToolInput(tag="in_two_d_numarray", input_type=Boolean(optional=True), prefix="--2d-numarray", doc=InputDocumentation(doc="Use f2py2e tool with Numarray support.")), ToolInput(tag="in_g_three_numpy", input_type=Boolean(optional=True), prefix="--g3-numpy", doc=InputDocumentation(doc="Use 3rd generation f2py from the separate f2py package.\n[NOT AVAILABLE YET]")), ToolInput(tag="in_write_signatures_fortran", input_type=File(optional=True), prefix="-h", doc=InputDocumentation(doc="Write signatures of the fortran routines to file <filename>\nand exit. You can then edit <filename> and use it instead\nof <fortran files>. If <filename>==stdout then the\nsignatures are printed to stdout.")), ToolInput(tag="in_name_module_fpy", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="Name of the module; f2py generates a Python/C API\nfile <modulename>module.c or extension module <modulename>.\nDefault is 'untitled'.")), ToolInput(tag="in_lower", input_type=String(optional=True), prefix="--lower", doc=InputDocumentation(doc="assumed with -h key, and --no-lower without -h key.")), ToolInput(tag="in_build_dir", input_type=Int(optional=True), prefix="--build-dir", doc=InputDocumentation(doc="All f2py generated files are created in <dirname>.\nDefault is tempfile.mkdtemp().")), ToolInput(tag="in_overwrite_signature", input_type=Boolean(optional=True), prefix="--overwrite-signature", doc=InputDocumentation(doc="Overwrite existing signature file.")), ToolInput(tag="in_short_latex", input_type=Boolean(optional=True), prefix="--short-latex", doc=InputDocumentation(doc="Create 'incomplete' LaTeX document (without commands\n\documentclass, \tableofcontents, and \begin{document},\n\end{document}).")), ToolInput(tag="in_debug_capi", input_type=Boolean(optional=True), prefix="--debug-capi", doc=InputDocumentation(doc="Create C/API code that reports the state of the wrappers\nduring runtime. Useful for debugging.")), ToolInput(tag="in_include_paths", input_type=Int(optional=True), prefix="--include-paths", doc=InputDocumentation(doc=":<path2>:...   Search include files from the given")), ToolInput(tag="in_link", input_type=Boolean(optional=True), prefix="--link-", doc=InputDocumentation(doc="<resource> switch below. [..] is optional list")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Run quietly.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Run with extra verbosity.")), ToolInput(tag="in_print_fpy_version", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Print f2py version ID and exit.")), ToolInput(tag="in_f_compiler", input_type=Boolean(optional=True), prefix="--fcompiler", doc=InputDocumentation(doc="=         Specify Fortran compiler type by vendor")), ToolInput(tag="in_compiler", input_type=Boolean(optional=True), prefix="--compiler", doc=InputDocumentation(doc="=          Specify C compiler type (as defined by distutils)")), ToolInput(tag="in_help_f_compiler", input_type=Boolean(optional=True), prefix="--help-fcompiler", doc=InputDocumentation(doc="List available Fortran compilers and exit")), ToolInput(tag="in_f_seven_seven_exec", input_type=Boolean(optional=True), prefix="--f77exec", doc=InputDocumentation(doc="=           Specify the path to F77 compiler")), ToolInput(tag="in_f_nine_zero_exec", input_type=Boolean(optional=True), prefix="--f90exec", doc=InputDocumentation(doc="=           Specify the path to F90 compiler")), ToolInput(tag="in_f_seven_seven_flags", input_type=Boolean(optional=True), prefix="--f77flags", doc=InputDocumentation(doc="=          Specify F77 compiler flags")), ToolInput(tag="in_f_nine_zero_flags", input_type=Boolean(optional=True), prefix="--f90flags", doc=InputDocumentation(doc="=          Specify F90 compiler flags")), ToolInput(tag="in_opt", input_type=Boolean(optional=True), prefix="--opt", doc=InputDocumentation(doc="=               Specify optimization flags")), ToolInput(tag="in_arch", input_type=Boolean(optional=True), prefix="--arch", doc=InputDocumentation(doc="=              Specify architecture specific optimization flags")), ToolInput(tag="in_no_opt", input_type=Boolean(optional=True), prefix="--noopt", doc=InputDocumentation(doc="Compile without optimization")), ToolInput(tag="in_noarch", input_type=Boolean(optional=True), prefix="--noarch", doc=InputDocumentation(doc="Compile without arch-dependent optimization")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Compile with debugging information")), ToolInput(tag="in_pathtolib_llibname", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="/path/to/lib/ -l<libname>")), ToolInput(tag="in_define_uname", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="<define> -U<name>")), ToolInput(tag="in_pathtoinclude", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="/path/to/include/")), ToolInput(tag="in_directories_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--help-link [..] List system resources found by system_info.py. See also"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    F2Py_V0_1_0().translate("wdl", allow_empty_container=True)

