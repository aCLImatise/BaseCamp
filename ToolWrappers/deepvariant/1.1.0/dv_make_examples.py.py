from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, String

Dv_Make_Examples_Py_V0_1_0 = CommandToolBuilder(tool="dv_make_examples.py", base_command=["dv_make_examples.py"], inputs=[ToolInput(tag="in_alt_aligned_pile_up", input_type=Boolean(optional=True), prefix="--alt_aligned_pileup", doc=InputDocumentation(doc=": <none|base_channels|diff_channels|rows>: Include\nalignments of reads against each candidate alternate allele in the pileup\nimage. 'none' turns this feature off. The default is 'none'.Options: 'none',\n'base_channels','diff_channels', 'rows'\n(default: 'none')")), ToolInput(tag="in_candidates", input_type=Boolean(optional=True), prefix="--candidates", doc=InputDocumentation(doc=": Candidate DeepVariantCalls in tfrecord format. For DEBUGGING.\n(default: '')")), ToolInput(tag="in_confident_regions", input_type=Boolean(optional=True), prefix="--confident_regions", doc=InputDocumentation(doc=": Regions that we are confident are hom-ref or a variant in\nBED format. In BED or other equivalent format, sorted or unsorted. Contig\nnames must match those of the reference genome.\n(default: '')")), ToolInput(tag="in_customized_classes_labeler_classes_list", input_type=Boolean(optional=True), prefix="--customized_classes_labeler_classes_list", doc=InputDocumentation(doc=": A comma-separated list of strings\nthat defines customized class labels for variants. This is only set when\nlabeler_algorithm is customized_classes_labeler.\n(default: '')")), ToolInput(tag="in_customized_classes_labeler_info_field_name", input_type=Boolean(optional=True), prefix="--customized_classes_labeler_info_field_name", doc=InputDocumentation(doc=": The name from the INFO field of\nVCF where we should get the customized class labels from. This is only set\nwhen labeler_algorithm is customized_classes_labeler.\n(default: '')")), ToolInput(tag="in_down_sample_fraction", input_type=Boolean(optional=True), prefix="--downsample_fraction", doc=InputDocumentation(doc=": If not 0.0 must be a value between 0.0 and 1.0. Reads\nwill be kept (randomly) with a probability of downsample_fraction from the\ninput BAM. This argument makes it easy to create examples as though the\ninput BAM had less coverage.\n(default: '0.0')\n(a number)")), ToolInput(tag="in_examples", input_type=Directory(optional=True), prefix="--examples", doc=InputDocumentation(doc="Output directory for examples")), ToolInput(tag="in_exclude_regions", input_type=Boolean(optional=True), prefix="--exclude_regions", doc=InputDocumentation(doc=": Optional. Space-separated list of regions we want to\nexclude from processing. Elements can be region literals (e.g., chr20:10-20)\nor paths to BED/BEDPE files. Region exclusion happens after processing the\n--regions argument, so --region 20 --exclude_regions 20:100 does everything\non chromosome 20 excluding base 100\n(default: '')")), ToolInput(tag="in_gvc_f", input_type=Boolean(optional=True), prefix="--gvcf", doc=InputDocumentation(doc=": Optional. Path where we should write gVCF records in TFRecord of\nVariant proto format.\n(default: '')")), ToolInput(tag="in_gvc_f_gq_binsize", input_type=Boolean(optional=True), prefix="--gvcf_gq_binsize", doc=InputDocumentation(doc=": Bin size in which to quantize gVCF genotype qualities.\nLarger bin size reduces the number of gVCF records at a loss of quality\ngranularity.\n(default: '5')\n(an integer)")), ToolInput(tag="in_hts_block_size", input_type=Boolean(optional=True), prefix="--hts_block_size", doc=InputDocumentation(doc=": Sets the htslib block size. Zero or negative uses default\nhtslib setting; larger values (e.g. 1M) may be beneficial for using remote\nfiles. Currently only applies to SAM/BAM reading.\n(default: '134217728')\n(an integer)")), ToolInput(tag="in_hts_logging_level", input_type=Boolean(optional=True), prefix="--hts_logging_level", doc=InputDocumentation(doc=": Sets the htslib logging threshold.\n(default: 'HTS_LOG_WARNING')")), ToolInput(tag="in_labeler_algorithm", input_type=Boolean(optional=True), prefix="--labeler_algorithm", doc=InputDocumentation(doc=": Algorithm to use to label examples in training mode. Must\nbe one of the LabelerAlgorithm enum values in the DeepVariantOptions proto.\n(default: 'haplotype_labeler')")), ToolInput(tag="in_logging_every_n_candidates", input_type=Boolean(optional=True), prefix="--logging_every_n_candidates", doc=InputDocumentation(doc=": Print out the log every n candidates. The\nsmaller the number, the more frequent the logging information emits.\n(default: '100')\n(an integer)")), ToolInput(tag="in_max_reads_per_partition", input_type=Boolean(optional=True), prefix="--max_reads_per_partition", doc=InputDocumentation(doc=": The maximum number of reads per partition that we\nconsider before following processing such as sampling and realigner.\n(default: '1500')\n(an integer)")), ToolInput(tag="in_min_base_quality", input_type=Boolean(optional=True), prefix="--min_base_quality", doc=InputDocumentation(doc=": Minimum base quality. This field indicates that we are\nenforcing a minimum base quality score for alternate alleles. Alternate\nalleles will only be considered if all bases in the allele have a quality\ngreater than min_base_quality.\n(default: '10')\n(an integer)")), ToolInput(tag="in_min_mapping_quality", input_type=Boolean(optional=True), prefix="--min_mapping_quality", doc=InputDocumentation(doc=": By default, reads with any mapping quality are kept.\nSetting this field to a positive integer i will only keep reads that have a\nMAPQ >= i. Note this only applies to aligned reads.\n(default: '5')\n(an integer)")), ToolInput(tag="in_mode", input_type=Boolean(optional=True), prefix="--mode", doc=InputDocumentation(doc=": Mode to run. Must be one of calling or training")), ToolInput(tag="in_multi_allelic_mode", input_type=Boolean(optional=True), prefix="--multi_allelic_mode", doc=InputDocumentation(doc=": How to handle multi-allelic candidate variants. For")), ToolInput(tag="in_partition_size", input_type=Boolean(optional=True), prefix="--partition_size", doc=InputDocumentation(doc=": The maximum number of basepairs we will allow in a region\nbefore splittingit into multiple smaller subregions.\n(default: '1000')\n(an integer)")), ToolInput(tag="in_pile_up_image_height", input_type=Boolean(optional=True), prefix="--pileup_image_height", doc=InputDocumentation(doc=": Height for the pileup image. If 0, uses the default")), ToolInput(tag="in_pile_up_image_width", input_type=Boolean(optional=True), prefix="--pileup_image_width", doc=InputDocumentation(doc=": Width for the pileup image. If 0, uses the default width\n(default: '0')\n(an integer)")), ToolInput(tag="in_population_v_cfs", input_type=Boolean(optional=True), prefix="--population_vcfs", doc=InputDocumentation(doc=": Optional. Tabix-indexed VCF file (or list of VCFs broken by\nchromosome), separated by comma or space, containing population allele\nfrequencies.")), ToolInput(tag="in_proposed_variants", input_type=Boolean(optional=True), prefix="--proposed_variants", doc=InputDocumentation(doc=": (Only used when --variant_caller=vcf_candidate_importer.)\nTabix-indexed VCF file containing the proposed positions and alts for\n`vcf_candidate_importer`. The GTs will be ignored.\n(default: '')")), ToolInput(tag="in_reads", input_type=Boolean(optional=True), prefix="--reads", doc=InputDocumentation(doc=": Required. Aligned, sorted, indexed BAM file containing the reads we\nwant to call. Should be aligned to a reference genome compatible with --ref.\nCan provide multiple BAMs (comma-separated).")), ToolInput(tag="in_ref", input_type=Boolean(optional=True), prefix="--ref", doc=InputDocumentation(doc=": Required. Genome reference to use. Must have an associated FAI index as\nwell. Supports text or gzipped references. Should match the reference used\nto align the BAM file provided to --reads.")), ToolInput(tag="in_regions", input_type=Boolean(optional=True), prefix="--regions", doc=InputDocumentation(doc=": Optional. Space-separated list of regions we want to process.\nElements can be region literals (e.g., chr20:10-20) or paths to BED/BEDPE\nfiles.\n(default: '')")), ToolInput(tag="in_runtime_by_region", input_type=Boolean(optional=True), prefix="--runtime_by_region", doc=InputDocumentation(doc=": [optional] Output filename for a TSV file of runtimes and\nother stats by region. If examples are sharded, this should be sharded into\nthe same number of shards as the examples.")), ToolInput(tag="in_sample_name", input_type=Boolean(optional=True), prefix="--sample_name", doc=InputDocumentation(doc=": Sample name to use for our sample_name in the output\nVariant/DeepVariantCall protos. If not specified, will be inferred from the\nheader information from --reads.\n(default: '')")), ToolInput(tag="in_select_variant_types", input_type=Boolean(optional=True), prefix="--select_variant_types", doc=InputDocumentation(doc=": If provided, should be a whitespace-separated string\nof variant types to keep when generating examples. Permitted values are\n'snps', 'indels', 'multi-allelics', and 'all', which select bi-allelic snps,\nbi-allelic indels, multi-allelic variants of any type, and all variants,\nrespectively. Multiple selectors can be specified, so that\n--select_variant_types='snps indels' would keep all bi-allelic SNPs and\nindels")), ToolInput(tag="in_sequencing_type", input_type=Boolean(optional=True), prefix="--sequencing_type", doc=InputDocumentation(doc=": A string representing input bam file sequencing_type.\nPermitted values are 'WGS' and 'WES', which represent whole genome\nsequencing and whole exome sequencing, respectively. This flag is\nexperimental and is not currently being used.")), ToolInput(tag="in_sort_by_haplotypes_sample_hp_tag", input_type=Boolean(optional=True), prefix="--sort_by_haplotypes_sample_hp_tag", doc=InputDocumentation(doc=": If set to > 0, reads with this HP tag will\nbe sorted on top. sort_by_haplotypes has to be set to True for this to work.\n(default: '0')\n(an integer)")), ToolInput(tag="in_task", input_type=Boolean(optional=True), prefix="--task", doc=InputDocumentation(doc=": Task ID of this task\n(default: '0')\n(an integer)")), ToolInput(tag="in_training_random_emit_ref_sites", input_type=Boolean(optional=True), prefix="--training_random_emit_ref_sites", doc=InputDocumentation(doc=": If > 0, emit extra random reference examples\nwith this probability.\n(default: '0.0')\n(a number)")), ToolInput(tag="in_truth_variants", input_type=Boolean(optional=True), prefix="--truth_variants", doc=InputDocumentation(doc=": Tabix-indexed VCF file containing the truth variant calls\nfor this labels which we use to label our examples.\n(default: '')")), ToolInput(tag="in_types_to_alt_align", input_type=Boolean(optional=True), prefix="--types_to_alt_align", doc=InputDocumentation(doc=": <indels|all>: When --alt_aligned_pileup is not none,\nthis flag determines whether to align to the alt alleles only for indels or\nfor all variant types including SNPs. Ignored if --alt_aligned_pileup is\n'none'. This flag is experimental and is not compatible with the pre-trained\nrelease models.\n(default: 'indels')")), ToolInput(tag="in_variant_caller", input_type=Boolean(optional=True), prefix="--variant_caller", doc=InputDocumentation(doc=": The caller to use to make examples. Must be one of the\nVariantCaller enum values in the DeepVariantOptions proto.\n(default: 'very_sensitive_caller')")), ToolInput(tag="in_vsc_min_count_indels", input_type=Boolean(optional=True), prefix="--vsc_min_count_indels", doc=InputDocumentation(doc=": Indel alleles occurring at least this many times in\nour AlleleCount will be advanced as candidates.\n(default: '2')\n(an integer)")), ToolInput(tag="in_vsc_min_count_snps", input_type=Boolean(optional=True), prefix="--vsc_min_count_snps", doc=InputDocumentation(doc=": SNP alleles occurring at least this many times in our\nAlleleCount will be advanced as candidates.\n(default: '2')\n(an integer)")), ToolInput(tag="in_vsc_min_fraction_indels", input_type=Boolean(optional=True), prefix="--vsc_min_fraction_indels", doc=InputDocumentation(doc=": Indel alleles occurring at least this fraction of\nall counts in our AlleleCount will be advanced as candidates.\n(default: '0.06')\n(a number)")), ToolInput(tag="in_vsc_min_fraction_snps", input_type=Boolean(optional=True), prefix="--vsc_min_fraction_snps", doc=InputDocumentation(doc=": SNP alleles occurring at least this fraction of all\ncounts in our AlleleCount will be advanced as candidates.\n(default: '0.12')\n(a number)")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="--sample", doc=InputDocumentation(doc="Sample name")), ToolInput(tag="in_read_dot", input_type=String(), position=0, doc=InputDocumentation(doc="(default: 'false')")), ToolInput(tag="in_alignments_dot", input_type=String(), position=0, doc=InputDocumentation(doc="(default: 'false')"))], outputs=[ToolOutput(tag="out_examples", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_examples", type_hint=File()), doc=OutputDocumentation(doc="Output directory for examples"))], container="quay.io/biocontainers/deepvariant:1.1.0--py36hf3e76ba_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dv_Make_Examples_Py_V0_1_0().translate("wdl")

