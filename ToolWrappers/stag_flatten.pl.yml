!Command
command:
- stag-flatten.pl
positional: []
named:
- !Flag
  description: "|parser FORMAT\nFORMAT is one of xml, sxpr or itext\nxml assumed as\
    \ default"
  synonyms:
  - -p
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "|column COL1,COL2,COL3,..\nthe name of the columns/elements to write\
    \ out\nthis can be specified either with multiple -c arguments, or with a\ncomma-seperated\
    \ (no spaces) list of column (terminal node) names\nafter a single -c"
  synonyms:
  - -c
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "|nest\nif set, then the output will be a compress repeating values\
    \ into the\nsame row; each cell in the table will be enclosed by {}, and will\n\
    contain a comma-delimited set of values"
  synonyms:
  - -n
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    stag-flatten - turns stag data into a flat table\n\nSYNOPSIS\n\
  \      stag-flatten -c name -c person/name dept MyFile.xml\n\nDESCRIPTION\n    reads\
  \ in a file in a stag format, and 'flattens' it to a tab-delimited\n    table format.\
  \ given this data:\n\n      (company\n       (dept\n        (name \"special-operations\"\
  )\n        (person\n         (name \"james-bond\"))\n        (person\n         (name\
  \ \"fred\"))))\n\n    the above command will return a two column table\n\n     \
  \ special-operations      james-bond\n      special-operations      fred\n\n   \
  \ If there are multiple values for the columns within the node, then the\n    cartesian\
  \ product will be calculated\n\nUSAGE\n      stag-flatten [-p PARSER] [-c COLS]\
  \ [-c COLS] NODE <file>\n\nARGUMENTS\n    -p|parser FORMAT\n        FORMAT is one\
  \ of xml, sxpr or itext\n\n        xml assumed as default\n\n    -c|column COL1,COL2,COL3,..\n\
  \        the name of the columns/elements to write out\n\n        this can be specified\
  \ either with multiple -c arguments, or with a\n        comma-seperated (no spaces)\
  \ list of column (terminal node) names\n        after a single -c\n\n    -n|nest\n\
  \        if set, then the output will be a compress repeating values into the\n\
  \        same row; each cell in the table will be enclosed by {}, and will\n   \
  \     contain a comma-delimited set of values\n\nSEE ALSO\n    Data::Stag\n\n"
generated_using:
- --help
