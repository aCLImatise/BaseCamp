from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int, Float

Mclblastline_V0_1_0 = CommandToolBuilder(tool="mclblastline", base_command=["mclblastline"], inputs=[ToolInput(tag="in_what_if", input_type=Boolean(optional=True), prefix="--whatif", doc=InputDocumentation(doc="shows only what would be done.")), ToolInput(tag="in_start_assemble", input_type=Boolean(optional=True), prefix="--start-assemble", doc=InputDocumentation(doc="skip the parse step, assume needed files exist already.")), ToolInput(tag="in_start_mcl", input_type=Boolean(optional=True), prefix="--start-mcl", doc=InputDocumentation(doc="start running mcl immediately, as above.")), ToolInput(tag="in_start_format", input_type=Boolean(optional=True), prefix="--start-format", doc=InputDocumentation(doc="only (re)do the formatting stage, as above.")), ToolInput(tag="in_prepare_mcl", input_type=Boolean(optional=True), prefix="--prepare-mcl", doc=InputDocumentation(doc="create the input file for mcl, then quit.")), ToolInput(tag="in_xi", input_type=File(optional=True), prefix="--xi", doc=InputDocumentation(doc="strip <suf> from file-name for use as base stem.")), ToolInput(tag="in_xo_dat", input_type=String(optional=True), prefix="--xo-dat", doc=InputDocumentation(doc="attach <suf> to parse result.")), ToolInput(tag="in_xo_ass", input_type=String(optional=True), prefix="--xo-ass", doc=InputDocumentation(doc="attach <suf> to mcxassemble result.")), ToolInput(tag="in_xo_mcl", input_type=String(optional=True), prefix="--xo-mcl", doc=InputDocumentation(doc="use <suf> as mcl result attachment.")), ToolInput(tag="in_x_a_mcl", input_type=String(optional=True), prefix="--xa-mcl", doc=InputDocumentation(doc="append to mcl suffix.")), ToolInput(tag="in_xe_mcl", input_type=File(optional=True), prefix="--xe-mcl", doc=InputDocumentation(doc="append to mcl file name.")), ToolInput(tag="in_xo_fmt", input_type=String(optional=True), prefix="--xo-fmt", doc=InputDocumentation(doc="attach <suf> to clmformat result.\nmnemonics: eXtension In, Out, Append, Extra.")), ToolInput(tag="in_parser", input_type=String(optional=True), prefix="--parser", doc=InputDocumentation(doc="name of parse script")), ToolInput(tag="in_parser_tag", input_type=String(optional=True), prefix="--parser-tag", doc=InputDocumentation(doc="tag of options to pass to parse script.")), ToolInput(tag="in_ass_repeat", input_type=Int(optional=True), prefix="--ass-repeat", doc=InputDocumentation(doc="str in <add|max|mul|left|right>")), ToolInput(tag="in_ass_no_map", input_type=Boolean(optional=True), prefix="--ass-nomap", doc=InputDocumentation(doc="map file does not exist or should be ignored.")), ToolInput(tag="in_ass", input_type=Boolean(optional=True), prefix="--ass", doc=InputDocumentation(doc="<-opt[=val]> add '-opt [val]' to mcxassemble command line.")), ToolInput(tag="in_mcl_te", input_type=Int(optional=True), prefix="--mcl-te", doc=InputDocumentation(doc="number of expansion threads.")), ToolInput(tag="in_inflation_value_mcl", input_type=Float(optional=True), prefix="--mcl-I", doc=InputDocumentation(doc="inflation value, MAIN mcl handle.")), ToolInput(tag="in_initial_inflation_value", input_type=Float(optional=True), prefix="--mcl-i", doc=InputDocumentation(doc="initial inflation value.")), ToolInput(tag="in_mcl_l", input_type=Int(optional=True), prefix="--mcl-l", doc=InputDocumentation(doc="initial loop length.")), ToolInput(tag="in_mcl_pi", input_type=Float(optional=True), prefix="--mcl-pi", doc=InputDocumentation(doc="pre-inflation value.")), ToolInput(tag="in_mcl_c", input_type=Float(optional=True), prefix="--mcl-c", doc=InputDocumentation(doc="center value.")), ToolInput(tag="in_mcl_scheme", input_type=Float(optional=True), prefix="--mcl-scheme", doc=InputDocumentation(doc="i in 1..5, resource allocation level.")), ToolInput(tag="in_mcl_o", input_type=String(optional=True), prefix="--mcl-o", doc=InputDocumentation(doc="if you *need* to use this, I must be improved.")), ToolInput(tag="in_mcl", input_type=Boolean(optional=True), prefix="--mcl", doc=InputDocumentation(doc="<-opt[=val]> add '-opt [val]' to mcl command line, e.g.")), ToolInput(tag="in_mcl_v", input_type=String(optional=True), prefix="--mcl-v", doc=InputDocumentation(doc="adds '-v all' to the mcl command line.")), ToolInput(tag="in_fmt_lump_size", input_type=Int(optional=True), prefix="--fmt-lump-size", doc=InputDocumentation(doc="collect clusters of size lq <num> in a single file.")), ToolInput(tag="in_fmt_lump_count", input_type=Int(optional=True), prefix="--fmt-lump-count", doc=InputDocumentation(doc="make batches containing approximately <num> nodes.")), ToolInput(tag="in_fmt_not_ab", input_type=Boolean(optional=True), prefix="--fmt-notab", doc=InputDocumentation(doc="tab file does not exist or should be ignored.")), ToolInput(tag="in_fmt_tab", input_type=File(optional=True), prefix="--fmt-tab", doc=InputDocumentation(doc="use tab file fname.")), ToolInput(tag="in_fmt", input_type=Boolean(optional=True), prefix="--fmt", doc=InputDocumentation(doc="<-opt[=val]>       add '-opt [val]' to clmformat command line.")), ToolInput(tag="in_xi_dat", input_type=String(optional=True), prefix="--xi-dat", doc=InputDocumentation(doc="should not be used, as it encapsulated by the mclpipeline --xi")), ToolInput(tag="in_mcl_pipeline", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_file_name", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mclblastline_V0_1_0().translate("wdl", allow_empty_container=True)

