from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int, File

Mclcm_V0_1_0 = CommandToolBuilder(tool="mclcm", base_command=["mclcm"], inputs=[ToolInput(tag="in_shared_mcl_options", input_type=String(optional=True), prefix="-a", doc=InputDocumentation(doc="shared mcl options")), ToolInput(tag="in_tf", input_type=Boolean(optional=True), prefix="-tf", doc=InputDocumentation(doc="<func(arg)[, func(arg)]*> apply unary transformations to matrix values")), ToolInput(tag="in_show_default_options", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="show default shared options")), ToolInput(tag="in_bone", input_type=Int(optional=True), prefix="-b1", doc=InputDocumentation(doc="dedicated parameters to construct base transformed matrix")), ToolInput(tag="in_b_two", input_type=Int(optional=True), prefix="-b2", doc=InputDocumentation(doc="dedicated parameters to construct base expanded matrix")), ToolInput(tag="in_an_not", input_type=String(optional=True), prefix="-annot", doc=InputDocumentation(doc="describes the experiment, useful when command-line is propagated")), ToolInput(tag="in_use_start_clustering", input_type=String(optional=True), prefix="-c", doc=InputDocumentation(doc="use as start clustering")), ToolInput(tag="in_contract", input_type=Boolean(optional=True), prefix="--contract", doc=InputDocumentation(doc="use contraction approach (default)")), ToolInput(tag="in_sub_cluster", input_type=Boolean(optional=True), prefix="--subcluster", doc=InputDocumentation(doc="use subclustering approach")), ToolInput(tag="in_integrate", input_type=Boolean(optional=True), prefix="--integrate", doc=InputDocumentation(doc="construct hierarchy from cluster (file) arguments")), ToolInput(tag="in_dispatch", input_type=Boolean(optional=True), prefix="--dispatch", doc=InputDocumentation(doc="construct hierarchy from multiple mcl runs")), ToolInput(tag="in_iterate_root_clustering", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="iterate at most <num> times (default: until root clustering)")), ToolInput(tag="in_root", input_type=String(optional=True), prefix="-root", doc=InputDocumentation(doc="/n                     make sure universe clustering is at the top")), ToolInput(tag="in_cone", input_type=File(optional=True), prefix="-cone", doc=InputDocumentation(doc="file to write nested cluster stack to")), ToolInput(tag="in_stack", input_type=File(optional=True), prefix="-stack", doc=InputDocumentation(doc="file to write expanded cluster stack to")), ToolInput(tag="in_coarse", input_type=File(optional=True), prefix="-coarse", doc=InputDocumentation(doc="file to write coarsened graphs to")), ToolInput(tag="in_write_base", input_type=File(optional=True), prefix="-write-base", doc=InputDocumentation(doc="file to write base graph to")), ToolInput(tag="in_write", input_type=String(optional=True), prefix="-write", doc=InputDocumentation(doc="<tags> may contain 'stack', 'cone', 'coarse', 'steps'")), ToolInput(tag="in_stem", input_type=File(optional=True), prefix="-stem", doc=InputDocumentation(doc="file prefix for cone, stack, and coarse")), ToolInput(tag="in_mplex", input_type=String(optional=True), prefix="--mplex", doc=InputDocumentation(doc="/n                   additionally write clusterings to separate files")), ToolInput(tag="in_quiet_level_logging", input_type=String(optional=True), prefix="-q", doc=InputDocumentation(doc="quiet level of logging"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mclcm_V0_1_0().translate("wdl", allow_empty_container=True)

