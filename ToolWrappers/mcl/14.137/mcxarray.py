from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Mcxarray_V0_1_0 = CommandToolBuilder(tool="mcxarray", base_command=["mcxarray"], inputs=[ToolInput(tag="in_data", input_type=File(optional=True), prefix="-data", doc=InputDocumentation(doc="data file name")), ToolInput(tag="in_imx", input_type=File(optional=True), prefix="-imx", doc=InputDocumentation(doc="matrix file name")), ToolInput(tag="in_co", input_type=Int(optional=True), prefix="-co", doc=InputDocumentation(doc="only output values val with |val| >= <num>")), ToolInput(tag="in_write_file_fname", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="write to file fname")), ToolInput(tag="in_text_table", input_type=Boolean(optional=True), prefix="--text-table", doc=InputDocumentation(doc="write output in full text table format with tab-separated values (N-squared entries)")), ToolInput(tag="in_write_binary", input_type=Boolean(optional=True), prefix="--write-binary", doc=InputDocumentation(doc="write in binary format (use with low -co and subsequent mcx q --vary-threshold)")), ToolInput(tag="in_write_tab", input_type=File(optional=True), prefix="-write-tab", doc=InputDocumentation(doc="write labels to tab file")), ToolInput(tag="in_skip_r", input_type=Int(optional=True), prefix="-skipr", doc=InputDocumentation(doc="skip this many rows")), ToolInput(tag="in_skip_c", input_type=Int(optional=True), prefix="-skipc", doc=InputDocumentation(doc="skip this many columns")), ToolInput(tag="in_column_row_", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="column (or row, with --transpose) containing labels (default 1)")), ToolInput(tag="in_pearson", input_type=Boolean(optional=True), prefix="--pearson", doc=InputDocumentation(doc="compute edge weight as Pearson correlation score (default)")), ToolInput(tag="in_spearman", input_type=Boolean(optional=True), prefix="--spearman", doc=InputDocumentation(doc="compute edge weight as Spearman rank correlation score")), ToolInput(tag="in_cosine", input_type=Boolean(optional=True), prefix="--cosine", doc=InputDocumentation(doc="compute edge weight as cosine")), ToolInput(tag="in_sine", input_type=Boolean(optional=True), prefix="--sine", doc=InputDocumentation(doc="compute edge weight as sine")), ToolInput(tag="in_slow_cosine", input_type=Boolean(optional=True), prefix="--slow-cosine", doc=InputDocumentation(doc="compute edge weight as cosine")), ToolInput(tag="in_slow_sine", input_type=Boolean(optional=True), prefix="--slow-sine", doc=InputDocumentation(doc="compute edge weight as sine")), ToolInput(tag="in_angle", input_type=Boolean(optional=True), prefix="--angle", doc=InputDocumentation(doc="compute edge weight as arc length")), ToolInput(tag="in_acute_angle", input_type=Boolean(optional=True), prefix="--acute-angle", doc=InputDocumentation(doc="compute edge weight as acute arc length")), ToolInput(tag="in_angle_norm", input_type=Boolean(optional=True), prefix="--angle-norm", doc=InputDocumentation(doc="compute edge weight as arc length, normalised by pi")), ToolInput(tag="in_acute_angle_norm", input_type=Boolean(optional=True), prefix="--acute-angle-norm", doc=InputDocumentation(doc="compute edge weight as acute arc length, normalised by pi/2")), ToolInput(tag="in_euclid", input_type=Boolean(optional=True), prefix="--euclid", doc=InputDocumentation(doc="compute edge weight as Euclidean distance")), ToolInput(tag="in_taxi", input_type=Boolean(optional=True), prefix="--taxi", doc=InputDocumentation(doc="compute edge weight as taxi (city block) distance")), ToolInput(tag="in_max", input_type=Boolean(optional=True), prefix="--max", doc=InputDocumentation(doc="compute edge weight as max (aka L-oo or Chebyshev) distance")), ToolInput(tag="in_minkowski", input_type=String(optional=True), prefix="-minkowski", doc=InputDocumentation(doc="compute edge weight as minkowski distance with power p = <val>")), ToolInput(tag="in_dot", input_type=Boolean(optional=True), prefix="--dot", doc=InputDocumentation(doc="compute edge weight as dot product")), ToolInput(tag="in_fp", input_type=String(optional=True), prefix="-fp", doc=InputDocumentation(doc="|meet|tanimoto|cosine|cover a+b, c, c/(a+b+c), c/sqrt((a+c)*(b+c)), c/(a+c)")), ToolInput(tag="in_sparse", input_type=Boolean(optional=True), prefix="--sparse", doc=InputDocumentation(doc="do not embed zero elements; ignore zero elements")), ToolInput(tag="in_number_threads_use", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="number of threads to use")), ToolInput(tag="in_number_compute_overall", input_type=Int(optional=True), prefix="-J", doc=InputDocumentation(doc="number of compute jobs overall")), ToolInput(tag="in_index_compute_job", input_type=Int(optional=True), prefix="-j", doc=InputDocumentation(doc="index of this compute job")), ToolInput(tag="in_job_info", input_type=Boolean(optional=True), prefix="--job-info", doc=InputDocumentation(doc="print node ids and exit")), ToolInput(tag="in_start", input_type=Int(optional=True), prefix="-start", doc=InputDocumentation(doc="start index")), ToolInput(tag="in_end", input_type=Int(optional=True), prefix="-end", doc=InputDocumentation(doc="end index")), ToolInput(tag="in_transpose_data", input_type=Boolean(optional=True), prefix="--transpose-data", doc=InputDocumentation(doc="work with the transposed data matrix")), ToolInput(tag="in_tf", input_type=Boolean(optional=True), prefix="-tf", doc=InputDocumentation(doc="<func(arg)[, func(arg)]*>          apply unary transformations to result matrix values")), ToolInput(tag="in_table_tf", input_type=Boolean(optional=True), prefix="-table-tf", doc=InputDocumentation(doc="<func(arg)[, func(arg)]*>    apply unary transformations to table values")), ToolInput(tag="in_digits", input_type=Int(optional=True), prefix="-digits", doc=InputDocumentation(doc="precision to use in interchange format")), ToolInput(tag="in_zero_as_na", input_type=Boolean(optional=True), prefix="--zero-as-na", doc=InputDocumentation(doc="compute correlation only where both values are not zero")), ToolInput(tag="in_write_data", input_type=File(optional=True), prefix="-write-data", doc=InputDocumentation(doc="write table matrix to file")), ToolInput(tag="in_write_na", input_type=File(optional=True), prefix="-write-na", doc=InputDocumentation(doc="write na matrix to file")), ToolInput(tag="in_normalise_primary_secondary", input_type=String(optional=True), prefix="-n", doc=InputDocumentation(doc="x {z,m}                       normalise P(rimary) or S(econdary) on z-scores (z) or mean (m)")), ToolInput(tag="in_rank_transform", input_type=Boolean(optional=True), prefix="--rank-transform", doc=InputDocumentation(doc="rank transform the data")), ToolInput(tag="in_help", input_type=Boolean(optional=True), prefix="--help", doc=InputDocumentation(doc="print this help"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mcxarray_V0_1_0().translate("wdl", allow_empty_container=True)

