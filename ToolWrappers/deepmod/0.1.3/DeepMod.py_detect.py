from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean, Directory

Deepmod_Py_Detect_V0_1_0 = CommandToolBuilder(tool="DeepMod.py_detect", base_command=["DeepMod.py", "detect"], inputs=[ToolInput(tag="in_ref", input_type=String(optional=True), prefix="--Ref", doc=InputDocumentation(doc="The reference sequence")), ToolInput(tag="in_pred_det", input_type=String(optional=True), prefix="--predDet", doc=InputDocumentation(doc="pred first and then detect (1) or only detect (0). Default: 1")), ToolInput(tag="in_pred_path", input_type=File(optional=True), prefix="--predpath", doc=InputDocumentation(doc="The file path of predictions for each fast5 file. The file pattern is *_*.detail. Default: './mod_output/pred2/'")), ToolInput(tag="in_mod_file", input_type=File(optional=True), prefix="--modfile", doc=InputDocumentation(doc="The path to load training model. Default: 'mod_output/'")), ToolInput(tag="in_fnum", input_type=Int(optional=True), prefix="--fnum", doc=InputDocumentation(doc="The number of features. Default: 7")), ToolInput(tag="in_hidden", input_type=Int(optional=True), prefix="--hidden", doc=InputDocumentation(doc="The number of hidden node. Default: 100")), ToolInput(tag="in_base_call_one_d", input_type=Int(optional=True), prefix="--basecall_1d", doc=InputDocumentation(doc="Path for basecall_1d. Default: Basecall_1D_000")), ToolInput(tag="in_base_call_two_strand", input_type=Int(optional=True), prefix="--basecall_2strand", doc=InputDocumentation(doc="Path for basecall_2strand. Default: BaseCalled_template")), ToolInput(tag="in_region", input_type=Int(optional=True), prefix="--region", doc=InputDocumentation(doc="The region of interest: for example, chr:1:100000;chr2:10000")), ToolInput(tag="in_con_un_k", input_type=String(optional=True), prefix="--ConUnk", doc=InputDocumentation(doc="Whether contain unknown chromosome")), ToolInput(tag="in_output_layer", input_type=Boolean(optional=True), prefix="--outputlayer", doc=InputDocumentation(doc="{,sigmoid}\nhow to put activation function for output layer")), ToolInput(tag="in_base", input_type=String(optional=True), prefix="--Base", doc=InputDocumentation(doc="Interest of bases")), ToolInput(tag="in_mod_cluster", input_type=String(optional=True), prefix="--mod_cluster", doc=InputDocumentation(doc="1: CpG cluster effect; 0: not")), ToolInput(tag="in_out_level", input_type=String(optional=True), prefix="--outLevel", doc=InputDocumentation(doc="The level for output: 0 for DEBUG, 1 for INFO, 2 for WARNING, 3 for ERROR. Default: 2")), ToolInput(tag="in_wrk_base", input_type=Directory(optional=True), prefix="--wrkBase", doc=InputDocumentation(doc="The base folder for FAST5 files.")), ToolInput(tag="in_fileid", input_type=String(optional=True), prefix="--FileID", doc=InputDocumentation(doc="The unique string for intermediate files and final output files. Default: 'mod'")), ToolInput(tag="in_out_folder", input_type=Directory(optional=True), prefix="--outFolder", doc=InputDocumentation(doc="The default folder for outputing the results. Default: ./mod_output")), ToolInput(tag="in_recursive", input_type=String(optional=True), prefix="--recursive", doc=InputDocumentation(doc="Recurise to find fast5 files. Default:1")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="The number of threads used (not for train). Default:4")), ToolInput(tag="in_files_per_thread", input_type=Int(optional=True), prefix="--files_per_thread", doc=InputDocumentation(doc="The number of fast5 files for each thread (not for train). Default:500")), ToolInput(tag="in_window_size", input_type=Int(optional=True), prefix="--windowsize", doc=InputDocumentation(doc="The window size to extract features. Default: 21")), ToolInput(tag="in_align_str", input_type=String(optional=True), prefix="--alignStr", doc=InputDocumentation(doc="Alignment tools (bwa or minimap2 is supported). Default: minimap2")), ToolInput(tag="in_signal_group", input_type=String(optional=True), prefix="--SignalGroup", doc=InputDocumentation(doc="How to associate signals to each called bases. Default: simple")), ToolInput(tag="in_move", input_type=Boolean(optional=True), prefix="--move", doc=InputDocumentation(doc="Whether the basecalled data use move tables instead of event tables. Default: False"))], outputs=[ToolOutput(tag="out_out_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out_folder", type_hint=File()), doc=OutputDocumentation(doc="The default folder for outputing the results. Default: ./mod_output"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Deepmod_Py_Detect_V0_1_0().translate("wdl", allow_empty_container=True)

