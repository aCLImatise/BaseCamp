from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, Float, String

Cooler_Load_V0_1_0 = CommandToolBuilder(tool="cooler_load", base_command=["cooler", "load"], inputs=[ToolInput(tag="in_format", input_type=Boolean(optional=True), prefix="--format", doc=InputDocumentation(doc="[coo|bg2]          'coo' refers to a tab-delimited sparse\ntriplet file (bin1, bin2, count). 'bg2'\nrefers to a 2D bedGraph-like file (chrom1,\nstart1, end1, chrom2, start2, end2, count).\n[required]")), ToolInput(tag="in_metadata", input_type=File(optional=True), prefix="--metadata", doc=InputDocumentation(doc="Path to JSON file containing user metadata.")), ToolInput(tag="in_assembly", input_type=Int(optional=True), prefix="--assembly", doc=InputDocumentation(doc="Name of genome assembly (e.g. hg19, mm10)")), ToolInput(tag="in_field", input_type=Float(optional=True), prefix="--field", doc=InputDocumentation(doc="Add supplemental value fields or override\ndefault field numbers for the specified\nformat. Specify quantitative input fields to\naggregate into value columns using the\nsyntax ``--field <field-name>=<field-\nnumber>``. Optionally, append ``:`` followed\nby ``dtype=<dtype>`` to specify the data\ntype (e.g. float). Field numbers are\n1-based. Repeat the ``--field`` option for\neach additional field.")), ToolInput(tag="in_chunksize", input_type=Int(optional=True), prefix="--chunksize", doc=InputDocumentation(doc="Size (in number of lines/records) of data\nchunks to read and process from the input\nfile at a time. These chunks will be saved\nas temporary partial Coolers and merged at\nthe end. Also specifies the size of the\nbuffer during the merge step.")), ToolInput(tag="in_count_as_float", input_type=Boolean(optional=True), prefix="--count-as-float", doc=InputDocumentation(doc="Store the 'count' column as floating point\nvalues instead of as integers. Can also be\nspecified using the `--field` option.")), ToolInput(tag="in_one_based", input_type=Boolean(optional=True), prefix="--one-based", doc=InputDocumentation(doc="Pass this flag if the bin IDs listed in a\nCOO file are one-based instead of zero-\nbased.")), ToolInput(tag="in_comment_char", input_type=String(optional=True), prefix="--comment-char", doc=InputDocumentation(doc="Comment character that indicates lines to")), ToolInput(tag="in_no_symmetric_upper", input_type=Boolean(optional=True), prefix="--no-symmetric-upper", doc=InputDocumentation(doc="Create a complete square matrix without\nimplicit symmetry. This allows for distinct\nupper- and lower-triangle values")), ToolInput(tag="in_input_copy_status", input_type=Boolean(optional=True), prefix="--input-copy-status", doc=InputDocumentation(doc="[unique|duplex]\nCopy status of input data when using\nsymmetric-upper storage. | `unique`:\nIncoming data comes from a unique half of a\nsymmetric matrix, regardless of how element\ncoordinates are ordered. Execution will be\naborted if duplicates are detected.\n`duplex`: Incoming data contains upper- and\nlower-triangle duplicates. All lower-\ntriangle input elements will be discarded! |\nIf you wish to treat lower- and upper-\ntriangle input data as distinct, use the\n``--no-symmetric-upper`` option instead.\n[default: unique]")), ToolInput(tag="in_storage_options", input_type=Int(optional=True), prefix="--storage-options", doc=InputDocumentation(doc="Options to modify the data filter pipeline.\nProvide as a comma-separated list of key-\nvalue pairs of the form 'k1=v1,k2=v2,...'.\nSee http://docs.h5py.org/en/stable/high/data\nset.html#filter-pipeline for more details.")), ToolInput(tag="in_compressed_dot", input_type=String(), position=0, doc=InputDocumentation(doc="COO: COO-rdinate sparse matrix format (a.k.a. ijv triple). 3 columns:"))], outputs=[], container="quay.io/biocontainers/cooler:0.8.10--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cooler_Load_V0_1_0().translate("wdl")

