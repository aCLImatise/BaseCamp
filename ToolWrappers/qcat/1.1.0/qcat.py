from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File, Directory, Int

Qcat_V0_1_0 = CommandToolBuilder(tool="qcat", base_command=["qcat"], inputs=[ToolInput(tag="in_log", input_type=String(optional=True), prefix="--log", doc=InputDocumentation(doc="Print debug information")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Don't print summary")), ToolInput(tag="in_fast_q", input_type=File(optional=True), prefix="--fastq", doc=InputDocumentation(doc="Barcoded read file")), ToolInput(tag="in_barcode_dir", input_type=Directory(optional=True), prefix="--barcode_dir", doc=InputDocumentation(doc="If specified, qcat will demultiplex reads to this\nfolder")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file trimmed reads will be written to (default:\nstdout).")), ToolInput(tag="in_min_score", input_type=Int(optional=True), prefix="--min-score", doc=InputDocumentation(doc="Minimum barcode score. Barcode calls with a lower\nscore will be discarded. Must be between 0 and 100.\n(default: 60)")), ToolInput(tag="in_detect_middle", input_type=Boolean(optional=True), prefix="--detect-middle", doc=InputDocumentation(doc="Search for adapters in the whole read")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads. Only works with in guppy mode")), ToolInput(tag="in_min_read_length", input_type=Int(optional=True), prefix="--min-read-length", doc=InputDocumentation(doc="Reads short than <min-read-length> after trimming will\nbe discarded.")), ToolInput(tag="in_tsv", input_type=Boolean(optional=True), prefix="--tsv", doc=InputDocumentation(doc="Prints a tsv file containing barcode information each\nread to stdout.")), ToolInput(tag="in_trim", input_type=Boolean(optional=True), prefix="--trim", doc=InputDocumentation(doc="Remove adapter and barcode sequences from reads.")), ToolInput(tag="in_sequencing_kit_specifying", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="{Auto,RAB204/RAB214,PBC001,PBC096,DUAL,RPB004/RLB001,RAB204,NBD104/NBD114,NBD114,VMK001,RBK001,RAB214,PBK004/LWB001,NBD103/NBD104,RBK004}, --kit {Auto,RAB204/RAB214,PBC001,PBC096,DUAL,RPB004/RLB001,RAB204,NBD104/NBD114,NBD114,VMK001,RBK001,RAB214,PBK004/LWB001,NBD103/NBD104,RBK004}\nSequencing kit. Specifying the correct kit will\nimprove sensitivity and specificity and runtime\n(default: auto)")), ToolInput(tag="in_list_kits", input_type=Boolean(optional=True), prefix="--list-kits", doc=InputDocumentation(doc="List all supported kits")), ToolInput(tag="in_guppy", input_type=Boolean(optional=True), prefix="--guppy", doc=InputDocumentation(doc="Use Guppy's demultiplexing algorithm (default: false)")), ToolInput(tag="in_epi_two_me", input_type=Boolean(optional=True), prefix="--epi2me", doc=InputDocumentation(doc="Use EPI2ME's demultiplexing algorithm (default: true)")), ToolInput(tag="in_dual", input_type=Boolean(optional=True), prefix="--dual", doc=InputDocumentation(doc="Use dual barcoding algorithm")), ToolInput(tag="in_simple", input_type=Boolean(optional=True), prefix="--simple", doc=InputDocumentation(doc="Use simple demultiplexing algorithm. Only looks for\nbarcodes, not for adapter sequences. Use only for\ntesting purposes!")), ToolInput(tag="in_no_batch", input_type=Boolean(optional=True), prefix="--no-batch", doc=InputDocumentation(doc="Don't use information from multiple reads for kit\ndetection (default: false)")), ToolInput(tag="in_filter_barcodes", input_type=Boolean(optional=True), prefix="--filter-barcodes", doc=InputDocumentation(doc="Filter rare barcode calls when run in batch mode")), ToolInput(tag="in_simple_barcodes", input_type=Int(optional=True), prefix="--simple-barcodes", doc=InputDocumentation(doc="Use 12 (standard) or 96 (extended) barcodes for\ndemultiplexing\n")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file trimmed reads will be written to (default:\nstdout)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Qcat_V0_1_0().translate("wdl", allow_empty_container=True)

