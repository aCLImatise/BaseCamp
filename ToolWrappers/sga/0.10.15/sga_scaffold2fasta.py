from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int

Sga_Scaffold2Fasta_V0_1_0 = CommandToolBuilder(tool="sga_scaffold2fasta", base_command=["sga", "scaffold2fasta"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_contig_file", input_type=File(optional=True), prefix="--contig-file", doc=InputDocumentation(doc="read the contig sequences from FILE")), ToolInput(tag="in_as_qg_file", input_type=File(optional=True), prefix="--asqg-file", doc=InputDocumentation(doc="read the contig string graph from FILE. This supercedes --contig-file\nthis is usually the output from the sga-assemble step")), ToolInput(tag="in_no_singletons", input_type=Boolean(optional=True), prefix="--no-singletons", doc=InputDocumentation(doc="do not output scaffolds that consist of a single contig")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="write the scaffolds to FILE (default: scaffolds.fa)")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="only output scaffolds longer than N bases")), ToolInput(tag="in_write_unplaced", input_type=Boolean(optional=True), prefix="--write-unplaced", doc=InputDocumentation(doc="output unplaced contigs that are larger than minLength")), ToolInput(tag="in_write_names", input_type=Boolean(optional=True), prefix="--write-names", doc=InputDocumentation(doc="write the name of contigs contained in the scaffold in the FASTA header")), ToolInput(tag="in_min_gap_length", input_type=Int(optional=True), prefix="--min-gap-length", doc=InputDocumentation(doc="separate contigs by at least N bases. All predicted gaps less\nthan N will be extended to N (default: 25)")), ToolInput(tag="in_use_overlap", input_type=Boolean(optional=True), prefix="--use-overlap", doc=InputDocumentation(doc="attempt to merge contigs using predicted overlaps.\nThis can help close gaps in the scaffolds but comes\nwith a small risk of collapsing tandem repeats.")), ToolInput(tag="in_graph_resolve", input_type=Int(optional=True), prefix="--graph-resolve", doc=InputDocumentation(doc="if an ASQG file is present, attempt to resolve the links\nbetween contigs using walks through the graph. The MODE parameter\nis a string describing the algorithm to use.\nThe MODE parameter must be one of best-any|best-unique|unique|none.\nbest-any: The walk with length closest to the estimated\ndistance between the contigs will be chosen to resolve the gap.\nIf multiple best walks are found, the tie is broken arbitrarily.\nbest-unique: as above but if there is a tie no walk will be chosen.\nunique: only resolve the gap if there is a single walk between the contigs\nnone: do not resolve gaps using the graph\nThe most conservative most is unique, then best-unique with best-any being the most\naggressive. The default is unique")), ToolInput(tag="in_distance_factor", input_type=Int(optional=True), prefix="--distanceFactor", doc=InputDocumentation(doc="Accept a walk as correctly resolving a gap if the walk length is within T standard\ndeviations from the estimated distance (default: 3.0f)")), ToolInput(tag="in_scaffold_two_fast_a", input_type=Int(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_as_qg_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_as_qg_file", type_hint=File()), doc=OutputDocumentation(doc="read the contig string graph from FILE. This supercedes --contig-file\nthis is usually the output from the sga-assemble step"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sga_Scaffold2Fasta_V0_1_0().translate("wdl", allow_empty_container=True)

