from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, String, Boolean, Int, Float, Array

Nanonetcall_V0_1_0 = CommandToolBuilder(tool="nanonetcall", base_command=["nanonetcall"], inputs=[ToolInput(tag="in_watch", input_type=Directory(optional=True), prefix="--watch", doc=InputDocumentation(doc="Switch to watching folder, argument value used as\ntimeout period. (default: None)")), ToolInput(tag="in_section", input_type=String(optional=True), prefix="--section", doc=InputDocumentation(doc="Section of read for which to produce basecalls, will\noverride that stored in model file. (default: None)")), ToolInput(tag="in_no_event_detect", input_type=Boolean(optional=True), prefix="--no-event_detect", doc=InputDocumentation(doc="Perform event detection, else use existing event data\n(Default: --event_detect) (default: True)")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Output name, output will be in fasta format. (default:\nNone)")), ToolInput(tag="in_no_fast_q", input_type=Boolean(optional=True), prefix="--no-fastq", doc=InputDocumentation(doc="Output fastq rather than fasta. (Default: --no-fastq)\n(default: False)")), ToolInput(tag="in_no_write_events", input_type=Boolean(optional=True), prefix="--no-write_events", doc=InputDocumentation(doc="Write event datasets to .fast5. (Default: --no-\nwrite_events) (default: False)")), ToolInput(tag="in_strand_list", input_type=String(optional=True), prefix="--strand_list", doc=InputDocumentation(doc="List of reads to process. (default: None)")), ToolInput(tag="in_limit", input_type=Int(optional=True), prefix="--limit", doc=InputDocumentation(doc="Limit the number of input for processing. (default:\nNone)")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--min_len", doc=InputDocumentation(doc="Min. read length (events) to basecall. (default: 500)")), ToolInput(tag="in_max_len", input_type=Int(optional=True), prefix="--max_len", doc=InputDocumentation(doc="Max. read length (events) to basecall. (default:\n15000)")), ToolInput(tag="in_model", input_type=Float(optional=True), prefix="--model", doc=InputDocumentation(doc="Trained ANN. (default: /root/.cache/Python-\nEggs/nanonet-2.0.0-py2.7-linux-x86_64.egg-\ntmp/nanonet/data/default_template.npy)")), ToolInput(tag="in_jobs", input_type=Int(optional=True), prefix="--jobs", doc=InputDocumentation(doc="No of decoding jobs to run in parallel. (default: 1)")), ToolInput(tag="in_trans", input_type=String(optional=True), prefix="--trans", doc=InputDocumentation(doc="step skip\nBase transition probabilities (default: None)")), ToolInput(tag="in_no_fast_decode", input_type=Boolean(optional=True), prefix="--no-fast_decode", doc=InputDocumentation(doc="Use simple, fast decoder with no transition estimates.\n(Default: --no-fast_decode) (default: False)")), ToolInput(tag="in_no_exc_open_cl", input_type=Boolean(optional=True), prefix="--no-exc_opencl", doc=InputDocumentation(doc="Do not use CPU alongside OpenCL, overrides --jobs.\n(Default: --no-exc_opencl) (default: False)")), ToolInput(tag="in_no_list_platforms", input_type=Boolean(optional=True), prefix="--no-list_platforms", doc=InputDocumentation(doc="Output list of available OpenCL GPU platforms.\n(Default: --no-list_platforms) (default: False)")), ToolInput(tag="in_platforms", input_type=Array(t=String(), optional=True), prefix="--platforms", doc=InputDocumentation(doc="List of OpenCL GPU platforms and devices to be used in\na format VENDOR:DEVICE:N_Files space separated, i.e.\n--platforms nvidia:0:1 amd:0:2 amd:1:2. (default:\nNone)\n")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc="A path to fast5 files. (default: None)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nanonetcall_V0_1_0().translate("wdl", allow_empty_container=True)

