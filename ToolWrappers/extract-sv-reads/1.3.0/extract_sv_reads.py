from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String

Extract_Sv_Reads_V0_1_0 = CommandToolBuilder(tool="extract_sv_reads", base_command=["extract-sv-reads"], inputs=[ToolInput(tag="in_only_useful_is", input_type=File(optional=True), prefix="-T", doc=InputDocumentation(doc="only useful when the input file is a CRAM.")), ToolInput(tag="in__output_version", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --version ]               output the version")), ToolInput(tag="in_arg_input_bamcramsam", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --input ] arg (=-)        input BAM/CRAM/SAM. Use '-' for stdin if using\npositional arguments")), ToolInput(tag="in_arg_output_split", input_type=File(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --splitter ] arg          output split reads to this file in BAM format\n(Required)")), ToolInput(tag="in_arg_output_discordant", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --discordant ] arg        output discordant reads to this file in BAM\nformat (Required)")), ToolInput(tag="in_exclude_duplicate_reads", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --exclude-dups ]          exclude duplicate reads from output")), ToolInput(tag="in_remove_sequences_qualities", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reduce-output-bams ]    remove sequences and qualities from output")), ToolInput(tag="in_max_unmapped_bases", input_type=Int(optional=True), prefix="--max-unmapped-bases", doc=InputDocumentation(doc="(=50) maximum number of unaligned bases between two\nalignments to be included in the splitter file")), ToolInput(tag="in_min_in_del_size", input_type=Int(optional=True), prefix="--min-indel-size", doc=InputDocumentation(doc="(=50)     minimum structural variant feature size for\nsplit alignments to be included in the\nsplitter file")), ToolInput(tag="in_min_non_overlap", input_type=Int(optional=True), prefix="--min-non-overlap", doc=InputDocumentation(doc="(=20)    minimum number of non-overlapping base pairs\nbetween two alignments for a read to be\nincluded in the splitter file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="(=1)             number of threads to use")), ToolInput(tag="in_bams", input_type=String(), position=0, doc=InputDocumentation(doc="-n [ --with-nm ]               ensure NM tag is present in output if reading "))], outputs=[ToolOutput(tag="out_arg_output_split", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_split", type_hint=File()), doc=OutputDocumentation(doc="[ --splitter ] arg          output split reads to this file in BAM format\n(Required)")), ToolOutput(tag="out_arg_output_discordant", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_discordant", type_hint=File()), doc=OutputDocumentation(doc="[ --discordant ] arg        output discordant reads to this file in BAM\nformat (Required)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Extract_Sv_Reads_V0_1_0().translate("wdl", allow_empty_container=True)

