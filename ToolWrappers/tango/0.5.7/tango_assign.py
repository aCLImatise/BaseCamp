from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Directory, Array, Int, Float

Tango_Assign_V0_1_0 = CommandToolBuilder(tool="tango_assign", base_command=["tango", "assign"], inputs=[ToolInput(tag="in_format", input_type=File(optional=True), prefix="--format", doc=InputDocumentation(doc="Type of file format for diamond results. blast=blast\ntabular output, 'tango'=blast tabular output with\ntaxid in 12th column")), ToolInput(tag="in_taxid_map", input_type=String(optional=True), prefix="--taxidmap", doc=InputDocumentation(doc="Provide custom protein to taxid mapfile.")), ToolInput(tag="in_tax_dir", input_type=Directory(optional=True), prefix="--taxdir", doc=InputDocumentation(doc="Directory specified during 'tango download taxonomy'.\nDefaults to taxonomy/.")), ToolInput(tag="in_sqlite_db", input_type=File(optional=True), prefix="--sqlitedb", doc=InputDocumentation(doc="Name of ete3 sqlite file to be created within")), ToolInput(tag="in_tax_dir_dot", input_type=String(optional=True), prefix="--taxdir.", doc=InputDocumentation(doc="to 'taxonomy.sqlite'")), ToolInput(tag="in_blob_out", input_type=String(optional=True), prefix="--blobout", doc=InputDocumentation(doc="Output hits.tsv table compatible with blobtools")), ToolInput(tag="in_taxid_out", input_type=File(optional=True), prefix="--taxidout", doc=InputDocumentation(doc="Write output with taxonomy ids instead of taxonomy\nnames to file")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Mode to use for parsing taxonomy: 'rank_lca'\n(default), 'rank_vote' or 'score'")), ToolInput(tag="in_assign_ranks", input_type=Array(t=String(), optional=True), prefix="--assignranks", doc=InputDocumentation(doc="Ranks to use when assigning taxa. Defaults to phylum\ngenus species")), ToolInput(tag="in_report_ranks", input_type=Array(t=String(), optional=True), prefix="--reportranks", doc=InputDocumentation(doc="Ranks to report in output. Defaults to superkingom\nphylum class orderfamily genus species")), ToolInput(tag="in_rank_thresholds", input_type=Array(t=String(), optional=True), prefix="--rank_thresholds", doc=InputDocumentation(doc="Rank-specific thresholds corresponding to percent\nidentity of a hit.Defaults to 45 (phylum), 60 (genus)\nand 85 (species)")), ToolInput(tag="in_vote_threshold", input_type=String(optional=True), prefix="--vote_threshold", doc=InputDocumentation(doc="Minimum fraction required when voting on rank\nassignments.")), ToolInput(tag="in_top", input_type=Int(optional=True), prefix="--top", doc=InputDocumentation(doc="Top percent of best score to consider hits for\n(default=5)")), ToolInput(tag="in_evalue", input_type=Float(optional=True), prefix="--evalue", doc=InputDocumentation(doc="Maximum e-value to store hits. Default 0.001")), ToolInput(tag="in_cpus", input_type=Int(optional=True), prefix="--cpus", doc=InputDocumentation(doc="Number of cpus to use. Defaults to 1.")), ToolInput(tag="in_chunksize", input_type=Int(optional=True), prefix="--chunksize", doc=InputDocumentation(doc="Size of chunks sent to process pool. For large input\nfiles using a large chunksize can make the job\ncomplete much faster than using the default value of\n1.\n")), ToolInput(tag="in_diamond_results", input_type=String(), position=0, doc=InputDocumentation(doc="Diamond blastx results")), ToolInput(tag="in_outfile", input_type=String(), position=1, doc=InputDocumentation(doc="Output file"))], outputs=[ToolOutput(tag="out_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_format", type_hint=File()), doc=OutputDocumentation(doc="Type of file format for diamond results. blast=blast\ntabular output, 'tango'=blast tabular output with\ntaxid in 12th column")), ToolOutput(tag="out_taxid_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_taxid_out", type_hint=File()), doc=OutputDocumentation(doc="Write output with taxonomy ids instead of taxonomy\nnames to file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tango_Assign_V0_1_0().translate("wdl", allow_empty_container=True)

