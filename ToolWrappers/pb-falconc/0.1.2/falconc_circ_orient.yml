!Command
command:
- falconc
- circ-orient
positional:
- !Positional
  optional: false
  position: 0
  name: sequences
  description: -o=, --output-fn=  string  REQUIRED  fasta (or fastq) file output
named:
- !Flag
  optional: true
  synonyms:
  - --help-syntax
  description: 'advanced: prepend,plurals,..'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -i
  description: =, --input-fn=   string  REQUIRED  fasta (or fastq) file of circular
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -w
  description: "=, --wl-fn=      string  \"\"        white list of sequences to rotate,\
    \ one\nper line, no spaces, no trailing spaces"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --window
  description: =          int     500       window size to caculate gc-skew
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  description: =, --step=       int     200       window step
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  - --print
  description: "bool    false     print skew data to files\n('SEQ.gc_skew.txt'), one\
    \ per sequence\n"
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: print this cligen-erated help
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "circ-orient [required&optional-params] \nreorients circular sequences\
  \ based on gc-skew distribution and writes to output.\nOptions(opt-arg sep :|=|spc):\n\
  \  -h, --help                           print this cligen-erated help\n  --help-syntax\
  \                        advanced: prepend,plurals,..\n  -i=, --input-fn=   string\
  \  REQUIRED  fasta (or fastq) file of circular\n                               \
  \        sequences\n  -o=, --output-fn=  string  REQUIRED  fasta (or fastq) file\
  \ output\n  -w=, --wl-fn=      string  \"\"        white list of sequences to rotate,\
  \ one\n                                       per line, no spaces, no trailing spaces\n\
  \  --window=          int     500       window size to caculate gc-skew\n  -s=,\
  \ --step=       int     200       window step\n  -p, --print        bool    false\
  \     print skew data to files\n                                       ('SEQ.gc_skew.txt'),\
  \ one per sequence\n"
generated_using:
- --help
docker_image:
