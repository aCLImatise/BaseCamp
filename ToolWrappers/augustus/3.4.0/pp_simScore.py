from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Pp_Simscore_V0_1_0 = CommandToolBuilder(tool="pp_simScore", base_command=["pp_simScore"], inputs=[ToolInput(tag="in_gap_inter", input_type=Boolean(optional=True), prefix="--gap_inter", doc=InputDocumentation(doc=":                gap costs for an alignment column that is a gap in an inter-block section\ndefault setting: -5")), ToolInput(tag="in_gap_intra", input_type=Boolean(optional=True), prefix="--gap_intra", doc=InputDocumentation(doc=":                gap costs for an alignment column that is a gap in a block\ndefault setting: -50")), ToolInput(tag="in_gap_intron", input_type=Boolean(optional=True), prefix="--gap_intron", doc=InputDocumentation(doc=":               gap costs for a gap in intron positions\ndefault setting: -5")), ToolInput(tag="in_epsilon_intron", input_type=Boolean(optional=True), prefix="--epsilon_intron", doc=InputDocumentation(doc=":           pseudocount parameter epsilon1, the pseudocount is added to a relative intron frequency v/w with (v+epsilon1)/(w+epsilon1+epsilon2)\ndefault setting: 0.0000001")), ToolInput(tag="in_epsilon_no_intron", input_type=Boolean(optional=True), prefix="--epsilon_noIntron", doc=InputDocumentation(doc=":         pseudocount parameter epsilon2, the pseudocount is added to a relative intron frequency v/w with (v+epsilon1)/(w+epsilon1+epsilon2)\ndefault setting: 0.1")), ToolInput(tag="in_intron_weight_intra", input_type=Boolean(optional=True), prefix="--intron_weight_intra", doc=InputDocumentation(doc=":      value that is added to an intron score for a match of intron positions in a block\ndefault setting: 5")), ToolInput(tag="in_intron_weight_inter", input_type=Boolean(optional=True), prefix="--intron_weight_inter", doc=InputDocumentation(doc=":      value that is added to an intron score for a match of intron positions in an inter-block\ndefault setting: 5")), ToolInput(tag="in_alignment", input_type=Boolean(optional=True), prefix="--alignment", doc=InputDocumentation(doc=":                number of optimal alignments that are computed\ndefault setting: 1")), ToolInput(tag="in_out", input_type=Boolean(optional=True), prefix="--out", doc=InputDocumentation(doc=":                      denotes the output format, the following output options, between ' ', are implemented:\n'score' : output is the similarity score\n'matrix' : output are similarity matrix and similarity score\n'alignment' : output are the computed alignments to the console as\nAlignment representation of P as symbols of {AminoAcid, gap symbol or number of amino acids in inter-block}\nAlignment representation of argmax of B as symbols of {argmax AminoAcid for aligned block column, gap symbol or inter-block length}\nFrequency of amino acid of P in aligned block column of B, if alignment type is a match\n'matrix+alignment': output are similarity matrix,\nsimilarity score and the computed\nalignments in the format described above\n'db' : output are the computed alignment\nas list of alignment frames,\nan element of the list consists of:\n- starting position of the first amino acid of the protein sequence that is included in the alignment frame\n- block number in which the alignment frame is located\n- index of the first block column that is included in the alignment frame\n- length of the frame (number of alignment columns)\n- alignment type: 'm', 's'. 'p' or '-'\n'bp' : output is a list of translations from the index of a block\nto the number of the block in the .prfl file\n'consents' : output is the average of the argmax\nof the block columns for the complete profile\n'interblock' : output is a list of all inter-block distance intervals\ndefault setting: 'score'"))], outputs=[], container="quay.io/biocontainers/augustus:3.4.0--pl526h0faeac2_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pp_Simscore_V0_1_0().translate("wdl")

