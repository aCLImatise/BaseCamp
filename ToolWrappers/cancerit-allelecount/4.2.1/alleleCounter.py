from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Allelecounter_V0_1_0 = CommandToolBuilder(tool="alleleCounter", base_command=["alleleCounter"], inputs=[ToolInput(tag="in_loci_file", input_type=Boolean(optional=True), prefix="--loci-file", doc=InputDocumentation(doc="[file]           Path to loci file.")), ToolInput(tag="in_hts_file", input_type=Boolean(optional=True), prefix="--hts-file", doc=InputDocumentation(doc="[file]            Path to sample HTS file.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="[file]         Path write output file.")), ToolInput(tag="in_ref_file", input_type=Boolean(optional=True), prefix="--ref-file", doc=InputDocumentation(doc="[file]           Path to reference fasta index file.\nNB. If cram format is supplied via -b and the reference listed in the cram header\ncan't be found alleleCounter may fail to work correctly.")), ToolInput(tag="in_min_base_qual", input_type=Boolean(optional=True), prefix="--min-base-qual", doc=InputDocumentation(doc="[int]       Minimum base quality [Default: 20].")), ToolInput(tag="in_min_map_qual", input_type=Boolean(optional=True), prefix="--min-map-qual", doc=InputDocumentation(doc="[int]        Minimum mapping quality [Default: 35].")), ToolInput(tag="in_contig", input_type=Boolean(optional=True), prefix="--contig", doc=InputDocumentation(doc="[string]           Limit calling to named contig.")), ToolInput(tag="in_dense_snps", input_type=Boolean(optional=True), prefix="--dense-snps", doc=InputDocumentation(doc="Improves performance where many positions are close together")), ToolInput(tag="in_is_one_zero_x", input_type=Boolean(optional=True), prefix="--is-10x", doc=InputDocumentation(doc="Enables 10X processing mode.\nIn this mode the HTS input file must be a cellranger produced BAM file.  Allele\ncounts are then given on a per-cellular barcode basis, with each count representing\nthe consensus base for that UMI.\nby iterating through bam file rather than using a 'fetch' approach.")), ToolInput(tag="in_required_flag", input_type=Boolean(optional=True), prefix="--required-flag", doc=InputDocumentation(doc="[int]       Flag value of reads to retain in allele counting default: [3].\nN.B. if the proper-pair flag is are selected, alleleCounter will assume paired-end\nand filter out any proper-pair flagged reads not in F/R orientation. -F  --filtered-flag [int]       Flag value of reads to exclude in allele counting default: [3852]."))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="[file]         Path write output file."))], container="quay.io/biocontainers/cancerit-allelecount:4.2.1--h3ecb661_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Allelecounter_V0_1_0().translate("wdl")

