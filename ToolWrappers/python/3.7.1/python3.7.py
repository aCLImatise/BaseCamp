from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Python3_7_V0_1_0 = CommandToolBuilder(tool="python3.7", base_command=["python3.7"], inputs=[ToolInput(tag="in_issue_warnings_comparing", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc=": issue warnings about str(bytes_instance), str(bytearray_instance)\nand comparing bytes/bytearray with str. (-bb: issue errors)")), ToolInput(tag="in_write_files_also", input_type=Boolean(optional=True), prefix="-B", doc=InputDocumentation(doc=": don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x")), ToolInput(tag="in_program_passed_string", input_type=String(optional=True), prefix="-c", doc=InputDocumentation(doc=": program passed in as string (terminates option list)")), ToolInput(tag="in_debug_output_also", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc=": debug output from parser; also PYTHONDEBUG=x")), ToolInput(tag="in_ignore_python_variables", input_type=Boolean(optional=True), prefix="-E", doc=InputDocumentation(doc=": ignore PYTHON* environment variables (such as PYTHONPATH)")), ToolInput(tag="in_inspect_interactively_evenif", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc=": inspect interactively after running script; forces a prompt even\nif stdin does not appear to be a terminal; also PYTHONINSPECT=x")), ToolInput(tag="in_isolate_python_implies", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc=": isolate Python from the user's environment (implies -E and -s)")), ToolInput(tag="in_run_library_module", input_type=String(optional=True), prefix="-m", doc=InputDocumentation(doc=": run library module as a script (terminates option list)")), ToolInput(tag="in_remove_assert_debugdependent", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc=": remove assert and __debug__-dependent statements; add .opt-1 before\n.pyc extension; also PYTHONOPTIMIZE=x")), ToolInput(tag="in_oo", input_type=Boolean(optional=True), prefix="-OO", doc=InputDocumentation(doc=": do -O changes and also discard docstrings; add .opt-2 before\n.pyc extension")), ToolInput(tag="in_print_version_messages", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc=": don't print version and copyright messages on interactive startup")), ToolInput(tag="in_add_site_directory", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc=": don't add user site directory to sys.path; also PYTHONNOUSERSITE")), ToolInput(tag="in__don_initialization", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc=": don't imply 'import site' on initialization")), ToolInput(tag="in_force_stdout_stderr", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc=": force the stdout and stderr streams to be unbuffered;\nthis option has no effect on stdin; also PYTHONUNBUFFERED=x")), ToolInput(tag="in_verbose_trace_import", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=": verbose (trace import statements); also PYTHONVERBOSE=x\ncan be supplied multiple times to increase verbosity")), ToolInput(tag="in_print_python_number", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc=": print the Python version number and exit (also --version)\nwhen given twice, print more information about the build")), ToolInput(tag="in_warning_control_arg", input_type=String(optional=True), prefix="-W", doc=InputDocumentation(doc=": warning control; arg is action:message:category:module:lineno\nalso PYTHONWARNINGS=arg")), ToolInput(tag="in_skip_first_line", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc=": skip first line of source, allowing use of non-Unix forms of #!cmd")), ToolInput(tag="in_set_implementationspecific_option", input_type=String(optional=True), prefix="-X", doc=InputDocumentation(doc=": set implementation-specific option")), ToolInput(tag="in_check_hash_based_pyc_s", input_type=String(optional=True), prefix="--check-hash-based-pycs", doc=InputDocumentation(doc="|default|never:\ncontrol how Python invalidates hash-based .pyc files"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Python3_7_V0_1_0().translate("wdl", allow_empty_container=True)

