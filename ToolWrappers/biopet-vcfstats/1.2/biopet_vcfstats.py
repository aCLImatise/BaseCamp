from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Biopet_Vcfstats_V0_1_0 = CommandToolBuilder(tool="biopet_vcfstats", base_command=["biopet-vcfstats"], inputs=[ToolInput(tag="in_log_level", input_type=String(optional=True), prefix="--log_level", doc=InputDocumentation(doc="Level of log information printed. Possible levels: 'debug', 'info', 'warn', 'error'")), ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--inputFile", doc=InputDocumentation(doc="Input VCF file (required)")), ToolInput(tag="in_reference_file", input_type=File(optional=True), prefix="--referenceFile", doc=InputDocumentation(doc="Fasta reference which was used to call input VCF (required)")), ToolInput(tag="in_output_dir", input_type=File(optional=True), prefix="--outputDir", doc=InputDocumentation(doc="Path to directory for output (required)")), ToolInput(tag="in_intervals", input_type=File(optional=True), prefix="--intervals", doc=InputDocumentation(doc="Path to interval (BED) file (optional)")), ToolInput(tag="in_info_tag", input_type=String(optional=True), prefix="--infoTag", doc=InputDocumentation(doc="Summarize these info tags")), ToolInput(tag="in_genotype_tag", input_type=String(optional=True), prefix="--genotypeTag", doc=InputDocumentation(doc="Summarize these genotype tags")), ToolInput(tag="in_sample_to_sample_min_depth", input_type=String(optional=True), prefix="--sampleToSampleMinDepth", doc=InputDocumentation(doc="Minimal depth require to consider sample to sample comparison")), ToolInput(tag="in_binsize", input_type=String(optional=True), prefix="--binSize", doc=InputDocumentation(doc="Binsize in estimated base pairs")), ToolInput(tag="in_max_contigs_in_single_job", input_type=Int(optional=True), prefix="--maxContigsInSingleJob", doc=InputDocumentation(doc="Max number of bins to be combined, default is 250")), ToolInput(tag="in_write_bin_stats", input_type=Boolean(optional=True), prefix="--writeBinStats", doc=InputDocumentation(doc="Write bin statistics. Default False")), ToolInput(tag="in_local_threads", input_type=Int(optional=True), prefix="--localThreads", doc=InputDocumentation(doc="Number of local threads to use")), ToolInput(tag="in_not_write_contig_stats", input_type=Boolean(optional=True), prefix="--notWriteContigStats", doc=InputDocumentation(doc="Number of local threads to use")), ToolInput(tag="in_skip_general", input_type=Boolean(optional=True), prefix="--skipGeneral", doc=InputDocumentation(doc="Skipping general stats")), ToolInput(tag="in_skip_genotype", input_type=Boolean(optional=True), prefix="--skipGenotype", doc=InputDocumentation(doc="Skipping genotype stats")), ToolInput(tag="in_skip_sample_distributions", input_type=Boolean(optional=True), prefix="--skipSampleDistributions", doc=InputDocumentation(doc="Skipping sample distributions stats")), ToolInput(tag="in_skip_sample_compare", input_type=Boolean(optional=True), prefix="--skipSampleCompare", doc=InputDocumentation(doc="Skipping sample compare")), ToolInput(tag="in_repartition", input_type=Boolean(optional=True), prefix="--repartition", doc=InputDocumentation(doc="Repartition after reading records (only in spark mode)")), ToolInput(tag="in_execute_modules_as_jobs", input_type=Boolean(optional=True), prefix="--executeModulesAsJobs", doc=InputDocumentation(doc="Execute modules as jobs (only in spark mode)")), ToolInput(tag="in_spark_master", input_type=String(optional=True), prefix="--sparkMaster", doc=InputDocumentation(doc="Spark master to use")), ToolInput(tag="in_spark_executor_memory", input_type=String(optional=True), prefix="--sparkExecutorMemory", doc=InputDocumentation(doc="Spark executor memory to use")), ToolInput(tag="in_spark_config_value", input_type=Boolean(optional=True), prefix="--sparkConfigValue", doc=InputDocumentation(doc=":<key>=<value>\nAdd values to the spark config\n")), ToolInput(tag="in_vcf_stats", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_dir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Path to directory for output (required)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Biopet_Vcfstats_V0_1_0().translate("wdl", allow_empty_container=True)

