from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, Float, Array, String, Boolean, Int

Rgt_Motifanalysis_Enrichment_V0_1_0 = CommandToolBuilder(tool="rgt_motifanalysis_enrichment", base_command=["rgt-motifanalysis", "enrichment"], inputs=[ToolInput(tag="in_organism", input_type=Directory(optional=True), prefix="--organism", doc=InputDocumentation(doc="Organism considered on the analysis. Must have been\nsetup in the RGTDATA folder. Common choices are hg19\nor hg38.")), ToolInput(tag="in_matching_location", input_type=Directory(optional=True), prefix="--matching-location", doc=InputDocumentation(doc="Directory where the matching output containing the\nMPBS files resides. Defaults to 'match' in the current\ndirectory.")), ToolInput(tag="in_use_only_motifs", input_type=File(optional=True), prefix="--use-only-motifs", doc=InputDocumentation(doc="Only use the motifs contained within this file (one\nfor each line).")), ToolInput(tag="in_input_matrix", input_type=File(optional=True), prefix="--input-matrix", doc=InputDocumentation(doc="If an experimental matrix is provided, the input\narguments will be ignored.")), ToolInput(tag="in_multiple_test_alpha", input_type=Float(optional=True), prefix="--multiple-test-alpha", doc=InputDocumentation(doc="Alpha value for multiple test.")), ToolInput(tag="in_motif_dbs", input_type=Array(t=File(), optional=True), prefix="--motif-dbs", doc=InputDocumentation(doc="New 'motif DB' folders to use instead of the ones\nwithin the RGTDATA folder. Each folder must contain\nPWM files.")), ToolInput(tag="in_filter", input_type=String(optional=True), prefix="--filter", doc=InputDocumentation(doc="List of key-value patterns to select a subset of TFs\nusing the metadata (MTF files), e.g. for Mouse and\nHuman on Selex data use:\n'species:sapiens,mus;data_source:selex'. NB: the\nDATABASE values must be written in full - exact\nmatching is always performed.Valid key types are\n'name', 'gene_names', 'family', 'uniprot_ids',\n'data_source', 'tax_group', 'species', 'database',\n'name_file' and 'gene_names_file'")), ToolInput(tag="in_filter_type", input_type=String(optional=True), prefix="--filter-type", doc=InputDocumentation(doc="Only useful together with the --filter argument.Exact\nwill only match perfect matching of the value for each\nkey. Inexact will match in case the value pattern is\ncontained within the motif. Regex allows for a more\ncomplex pattern use.")), ToolInput(tag="in_logo_copy", input_type=Boolean(optional=True), prefix="--logo-copy", doc=InputDocumentation(doc="The logos are copied to a local directory. The HTML\nreport will contain relative paths to this directory.")), ToolInput(tag="in_logo_embed", input_type=Boolean(optional=True), prefix="--logo-embed", doc=InputDocumentation(doc="The logos are embedded directly into the HTML report.")), ToolInput(tag="in_promoter_length", input_type=Int(optional=True), prefix="--promoter-length", doc=InputDocumentation(doc="Length of the promoter region (in bp) to be extracted\nfrom each gene.")), ToolInput(tag="in_maximum_association_length", input_type=Int(optional=True), prefix="--maximum-association-length", doc=InputDocumentation(doc="Maximum distance between a coordinate and a gene (in\nbp) in order for the former to be considered\nassociated with the latter.")), ToolInput(tag="in_exclude_target_genes", input_type=Boolean(optional=True), prefix="--exclude-target-genes", doc=InputDocumentation(doc="If set the specified target genes areexcluded from\nbackground file")), ToolInput(tag="in_output_location", input_type=File(optional=True), prefix="--output-location", doc=InputDocumentation(doc="Path where the output MPBS files will be written.\nDefaults to 'enrichment' in the current directory.")), ToolInput(tag="in_print_thresh", input_type=Float(optional=True), prefix="--print-thresh", doc=InputDocumentation(doc="Only MPBSs whose factor's enrichment corrected p-value\nare less than equal this option are printed. Use 1.0\nto print all MPBSs.")), ToolInput(tag="in_big_bed", input_type=Boolean(optional=True), prefix="--bigbed", doc=InputDocumentation(doc="If this option is used, all bed files will be written\nas bigbed.\n")), ToolInput(tag="in_background_dot_bed", input_type=String(), position=0, doc=InputDocumentation(doc="BED file containing background regions.")), ToolInput(tag="in_input_dot_bed", input_type=String(), position=1, doc=InputDocumentation(doc="BED files to be enriched against the background."))], outputs=[ToolOutput(tag="out_matching_location", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_matching_location", type_hint=File()), doc=OutputDocumentation(doc="Directory where the matching output containing the\nMPBS files resides. Defaults to 'match' in the current\ndirectory.")), ToolOutput(tag="out_output_location", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_location", type_hint=File()), doc=OutputDocumentation(doc="Path where the output MPBS files will be written.\nDefaults to 'enrichment' in the current directory."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rgt_Motifanalysis_Enrichment_V0_1_0().translate("wdl", allow_empty_container=True)

