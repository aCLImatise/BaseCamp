from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int

Dsh_Bio_V0_1_0 = CommandToolBuilder(tool="dsh_bio", base_command=["dsh-bio"], inputs=[ToolInput(tag="in_about", input_type=Boolean(optional=True), prefix="--about", doc=InputDocumentation(doc="display about message [optional]")), ToolInput(tag="in_compress_bed", input_type=String(), position=0, doc=InputDocumentation(doc="compress features in BED format to splittable bgzf or bzip2 compression codecs")), ToolInput(tag="in_compress_fast_a", input_type=String(), position=1, doc=InputDocumentation(doc="compress sequences in FASTA format to splittable bgzf or bzip2 compression codecs")), ToolInput(tag="in_compress_fast_q", input_type=String(), position=2, doc=InputDocumentation(doc="compress sequences in FASTQ format to splittable bgzf or bzip2 compression codecs")), ToolInput(tag="in_compress_gaf", input_type=String(), position=3, doc=InputDocumentation(doc="compress alignments in GAF format to splittable bgzf or bzip2 compression codecs")), ToolInput(tag="in_compress_gfa_one", input_type=Int(), position=4, doc=InputDocumentation(doc="compress assembly in GFA 1.0 format to splittable bgzf or bzip2 compression codecs")), ToolInput(tag="in_compress_gfa_two", input_type=Int(), position=5, doc=InputDocumentation(doc="compress assembly in GFA 2.0 format to splittable bgzf or bzip2 compression codecs")), ToolInput(tag="in_compress_gff_three", input_type=Int(), position=6, doc=InputDocumentation(doc="compress features in GFF3 format to splittable bgzf or bzip2 compression codecs")), ToolInput(tag="in_compress_paf", input_type=String(), position=7, doc=InputDocumentation(doc="compress alignments in PAF format to splittable bgzf or bzip2 compression codecs")), ToolInput(tag="in_compress_sam", input_type=String(), position=8, doc=InputDocumentation(doc="compress alignments in SAM format to splittable bgzf or bzip2 compression codecs")), ToolInput(tag="in_compress_vcf", input_type=String(), position=9, doc=InputDocumentation(doc="compress variants and genotypes in VCF format to splittable bgzf or bzip2 compression codecs")), ToolInput(tag="in_create_sequence_dictionary", input_type=String(), position=10, doc=InputDocumentation(doc="create a SequenceDictionary from DNA sequences in FASTA format")), ToolInput(tag="in_disinter_leave_fast_q", input_type=String(), position=11, doc=InputDocumentation(doc="convert interleaved FASTQ format into first and second sequence files in FASTQ format")), ToolInput(tag="in_down_sample_fast_q", input_type=String(), position=12, doc=InputDocumentation(doc="downsample sequences from files in FASTQ format")), ToolInput(tag="in_down_sample_interleaved_fast_q", input_type=String(), position=13, doc=InputDocumentation(doc="downsample sequences from a file in interleaved FASTQ format")), ToolInput(tag="in_extract_fast_a", input_type=String(), position=14, doc=InputDocumentation(doc="extract matching sequences in FASTA format")), ToolInput(tag="in_extract_fast_q", input_type=String(), position=15, doc=InputDocumentation(doc="extract matching sequences in FASTQ format")), ToolInput(tag="in_extract_fast_q_by_length", input_type=Int(), position=16, doc=InputDocumentation(doc="extract sequences in FASTQ format with a range of lengths")), ToolInput(tag="in_fast_a_to_fast_q", input_type=String(), position=17, doc=InputDocumentation(doc="convert DNA sequences in FASTA format to FASTQ format")), ToolInput(tag="in_fast_q_description", input_type=String(), position=18, doc=InputDocumentation(doc="output description lines from sequences in FASTQ format")), ToolInput(tag="in_fast_q_sequence_length", input_type=Int(), position=19, doc=InputDocumentation(doc="output sequence lengths from sequences in FASTQ format")), ToolInput(tag="in_fast_q_to_fast_a", input_type=String(), position=20, doc=InputDocumentation(doc="convert sequences in FASTQ format to FASTA format")), ToolInput(tag="in_filter_bed", input_type=String(), position=21, doc=InputDocumentation(doc="filter features in BED format")), ToolInput(tag="in_filter_fast_a", input_type=String(), position=22, doc=InputDocumentation(doc="filter sequences in FASTA format")), ToolInput(tag="in_filter_fast_q", input_type=String(), position=23, doc=InputDocumentation(doc="filter sequences in FASTQ format")), ToolInput(tag="in_filter_gaf", input_type=String(), position=24, doc=InputDocumentation(doc="filter alignments in GAF format")), ToolInput(tag="in_filter_gfa_one", input_type=Int(), position=25, doc=InputDocumentation(doc="filter assembly in GFA 1.0 format")), ToolInput(tag="in_filter_gfa_two", input_type=Int(), position=26, doc=InputDocumentation(doc="filter assembly in GFA 2.0 format")), ToolInput(tag="in_filter_gff_three", input_type=Int(), position=27, doc=InputDocumentation(doc="filter features in GFF3 format")), ToolInput(tag="in_filter_paf", input_type=String(), position=28, doc=InputDocumentation(doc="filter alignments in PAF format")), ToolInput(tag="in_filter_sam", input_type=String(), position=29, doc=InputDocumentation(doc="filter alignments in SAM format")), ToolInput(tag="in_filter_vcf", input_type=String(), position=30, doc=InputDocumentation(doc="filter variants in VCF format")), ToolInput(tag="in_gfa_one_to_gfa_two", input_type=Int(), position=31, doc=InputDocumentation(doc="convert GFA 1.0 format to GFA 2.0 format")), ToolInput(tag="in_interleave_fast_q", input_type=String(), position=32, doc=InputDocumentation(doc="convert first and second sequence files in FASTQ format to interleaved FASTQ format")), ToolInput(tag="in_reassemble_paths", input_type=String(), position=33, doc=InputDocumentation(doc="reassemble paths in GFA 1.0 format from traversal records")), ToolInput(tag="in_remap_dbsnp", input_type=String(), position=34, doc=InputDocumentation(doc="remap Type=String DB flags in VCF format to DB Type=Flag and dbsnp Type=String fields")), ToolInput(tag="in_remap_phase_set", input_type=String(), position=35, doc=InputDocumentation(doc="remap Type=String PS phase set ids in VCF format to Type=Integer")), ToolInput(tag="in_rename_bed_references", input_type=String(), position=36, doc=InputDocumentation(doc="rename references in BED files")), ToolInput(tag="in_rename_gff_three_references", input_type=Int(), position=37, doc=InputDocumentation(doc="rename references in GFF3 files")), ToolInput(tag="in_rename_vcf_references", input_type=String(), position=38, doc=InputDocumentation(doc="rename references in VCF files")), ToolInput(tag="in_split_bed", input_type=String(), position=39, doc=InputDocumentation(doc="split files in BED format")), ToolInput(tag="in_split_fast_a", input_type=String(), position=40, doc=InputDocumentation(doc="split files in FASTA format")), ToolInput(tag="in_split_fast_q", input_type=String(), position=41, doc=InputDocumentation(doc="split files in FASTQ format")), ToolInput(tag="in_split_gaf", input_type=String(), position=42, doc=InputDocumentation(doc="split files in GAF format")), ToolInput(tag="in_split_gff_three", input_type=Int(), position=43, doc=InputDocumentation(doc="split files in GFF3 format")), ToolInput(tag="in_split_interleaved_fast_q", input_type=String(), position=44, doc=InputDocumentation(doc="split files in interleaved FASTQ format")), ToolInput(tag="in_split_paf", input_type=String(), position=45, doc=InputDocumentation(doc="split files in PAF format")), ToolInput(tag="in_split_sam", input_type=String(), position=46, doc=InputDocumentation(doc="split files in SAM format")), ToolInput(tag="in_split_vcf", input_type=String(), position=47, doc=InputDocumentation(doc="split files in VCF format")), ToolInput(tag="in_traverse_paths", input_type=String(), position=48, doc=InputDocumentation(doc="traverse paths in GFA 1.0 format")), ToolInput(tag="in_truncate_fast_a", input_type=String(), position=49, doc=InputDocumentation(doc="truncate sequences in FASTA format")), ToolInput(tag="in_truncate_paths", input_type=String(), position=50, doc=InputDocumentation(doc="truncate paths in GFA 1.0 format")), ToolInput(tag="in_variant_table_to_vcf", input_type=String(), position=51, doc=InputDocumentation(doc="convert Ensembl variant table to VCF format")), ToolInput(tag="in_vcf_pedigree", input_type=String(), position=52, doc=InputDocumentation(doc="extract a pedigree from VCF format")), ToolInput(tag="in_vcf_samples", input_type=String(), position=53, doc=InputDocumentation(doc="extract samples from VCF format"))], outputs=[], container="quay.io/biocontainers/dsh-bio:2.0.2--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dsh_Bio_V0_1_0().translate("wdl")

