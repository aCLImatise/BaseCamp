&id001 !Command
positional: []
named: []
command:
- secapr
parent:
subcommands:
- !Command
  positional: []
  named:
  - !Flag
    description: Call the folder that contains the trimmed reads, organized in a separate
      subfolder for each sample. The name of the subfolder has to start with the sample
      name, delimited with an underscore [_] (default output of clean_reads function).
    synonyms:
    - --reads
    args: !SimpleFlagArg
      name: READS
    optional: true
  - !Flag
    description: Please choose which type of reference you want to map the samples
      to. "alignment-consensus" will create a consensus sequence for each alignment
      file which will be used as a reference for all samples. This is recommendable
      when all samples are rather closely related to each other. "sample-specific"
      will extract the sample specific sequences from an alignment and use these as
      a separate reference for each individual sample. "user-ref-lib" enables to input
      one single fasta file created by the user which will be used as a reference
      library for all samples.
    synonyms:
    - --reference_type
    args: !ChoiceFlagArg
      choices: !!set
        user-ref-lib:
        sample-specific:
        alignment-consensus:
    optional: true
  - !Flag
    description: When choosing "alignment-consensus" or "sample- specific" as reference_type,
      this flag calls the folder containing the alignment files for your target loci
      (fasta-format). In case of "user-ref-lib" as reference_type, this flag calls
      one single fasta file that contains a user-prepared reference library which
      will be applied to all samples.
    synonyms:
    - --reference
    args: !SimpleFlagArg
      name: REFERENCE
    optional: true
  - !Flag
    description: The output directory where results will be safed.
    synonyms:
    - --output
    args: !SimpleFlagArg
      name: OUTPUT
    optional: true
  - !Flag
    description: Use this flag if you do not want to discard all duplicate reads with
      Picard.
    synonyms:
    - --keep_duplicates
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Set the minimum read coverage. Only positions that are covered by
      this number of reads will be called in the consensus sequence, otherwise the
      program will add an ambiguity at this position.
    synonyms:
    - --min_coverage
    args: !SimpleFlagArg
      name: MIN_COVERAGE
    optional: true
  - !Flag
    description: Number of computational cores for parallelization of computation.
    synonyms:
    - --cores
    args: !SimpleFlagArg
      name: CORES
    optional: true
  - !Flag
    description: If the part of the read that sufficiently matches the reference is
      shorter than this threshold, it will be discarded (minSeedLen).
    synonyms:
    - --k
    args: !SimpleFlagArg
      name: K
    optional: true
  - !Flag
    description: Avoid introducing gaps in reads that are longer than this threshold.
    synonyms:
    - --w
    args: !SimpleFlagArg
      name: W
    optional: true
  - !Flag
    description: Stop extension when the difference between the best and the current
      extension score is above |i-j|*A+INT, where i and j are the current positions
      of the query and reference, respectively, and A is the matching score.
    synonyms:
    - --d
    args: !SimpleFlagArg
      name: D
    optional: true
  - !Flag
    description: Trigger re-seeding for a MEM longer than minSeedLen*FLOAT.
    synonyms:
    - --r
    args: !SimpleFlagArg
      name: R
    optional: true
  - !Flag
    description: Discard a match if it has more than INT occurence in the genome
    synonyms:
    - --c
    args: !SimpleFlagArg
      name: C
    optional: true
  - !Flag
    description: Matching score. Acts as a factor enhancing any match (higher value
      makes it less conservative = allows reads that have fewer matches, since every
      match is scored higher).
    synonyms:
    - --a
    args: !SimpleFlagArg
      name: A
    optional: true
  - !Flag
    description: 'Mismatch penalty. The accepted mismatch rate per read on length
      k is approximately: {.75 * exp[-log(4) * B/A]}'
    synonyms:
    - --b
    args: !SimpleFlagArg
      name: B
    optional: true
  - !Flag
    description: Gap opening penalty
    synonyms:
    - --o
    args: !SimpleFlagArg
      name: O
    optional: true
  - !Flag
    description: Gap extension penalty
    synonyms:
    - --e
    args: !SimpleFlagArg
      name: E
    optional: true
  - !Flag
    description: Clipping penalty. During extension, the algorithm keeps track of
      the best score reaching the end of query. If this score is larger than the best
      extension score minus the clipping penalty, clipping will not be applied.
    synonyms:
    - --l
    args: !SimpleFlagArg
      name: L
    optional: true
  - !Flag
    description: Penalty for an unpaired read pair. The lower the value, the more
      unpaired reads will be allowed in the mapping.
    synonyms:
    - --u
    args: !SimpleFlagArg
      name: U
    optional: true
  command:
  - secapr
  - reference_assembly
  parent: *id001
  subcommands: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: secapr reference_assembly [-h] --reads READS\n              \
    \                   [--reference_type {alignment-consensus,sample-specific,user-ref-lib}]\n\
    \                                 --reference REFERENCE --output OUTPUT\n    \
    \                             [--keep_duplicates]\n                          \
    \       [--min_coverage MIN_COVERAGE] [--cores CORES]\n                      \
    \           [--k K] [--w W] [--d D] [--r R] [--c C]\n                        \
    \         [--a A] [--b B] [--o O] [--e E] [--l L]\n                          \
    \       [--u U]\n\nCreate new reference library and map raw reads against the\
    \ library (reference-\nbased assembly)\n\noptional arguments:\n  -h, --help  \
    \          show this help message and exit\n  --reads READS         Call the folder\
    \ that contains the trimmed reads,\n                        organized in a separate\
    \ subfolder for each sample. The\n                        name of the subfolder\
    \ has to start with the sample\n                        name, delimited with an\
    \ underscore [_] (default output\n                        of clean_reads function).\n\
    \  --reference_type {alignment-consensus,sample-specific,user-ref-lib}\n     \
    \                   Please choose which type of reference you want to map\n  \
    \                      the samples to. \"alignment-consensus\" will create a\n\
    \                        consensus sequence for each alignment file which will\n\
    \                        be used as a reference for all samples. This is\n   \
    \                     recommendable when all samples are rather closely\n    \
    \                    related to each other. \"sample-specific\" will extract\n\
    \                        the sample specific sequences from an alignment and\n\
    \                        use these as a separate reference for each individual\n\
    \                        sample. \"user-ref-lib\" enables to input one single\n\
    \                        fasta file created by the user which will be used as\
    \ a\n                        reference library for all samples.\n  --reference\
    \ REFERENCE\n                        When choosing \"alignment-consensus\" or\
    \ \"sample-\n                        specific\" as reference_type, this flag calls\
    \ the\n                        folder containing the alignment files for your\
    \ target\n                        loci (fasta-format). In case of \"user-ref-lib\"\
    \ as\n                        reference_type, this flag calls one single fasta\
    \ file\n                        that contains a user-prepared reference library\
    \ which\n                        will be applied to all samples.\n  --output OUTPUT\
    \       The output directory where results will be safed.\n  --keep_duplicates\
    \     Use this flag if you do not want to discard all\n                      \
    \  duplicate reads with Picard.\n  --min_coverage MIN_COVERAGE\n             \
    \           Set the minimum read coverage. Only positions that are\n         \
    \               covered by this number of reads will be called in the\n      \
    \                  consensus sequence, otherwise the program will add an\n   \
    \                     ambiguity at this position.\n  --cores CORES         Number\
    \ of computational cores for parallelization of\n                        computation.\n\
    \  --k K                 If the part of the read that sufficiently matches the\n\
    \                        reference is shorter than this threshold, it will be\n\
    \                        discarded (minSeedLen).\n  --w W                 Avoid\
    \ introducing gaps in reads that are longer than\n                        this\
    \ threshold.\n  --d D                 Stop extension when the difference between\
    \ the best\n                        and the current extension score is above |i-j|*A+INT,\n\
    \                        where i and j are the current positions of the query\n\
    \                        and reference, respectively, and A is the matching\n\
    \                        score.\n  --r R                 Trigger re-seeding for\
    \ a MEM longer than\n                        minSeedLen*FLOAT.\n  --c C      \
    \           Discard a match if it has more than INT occurence in\n           \
    \             the genome\n  --a A                 Matching score. Acts as a factor\
    \ enhancing any match\n                        (higher value makes it less conservative\
    \ = allows\n                        reads that have fewer matches, since every\
    \ match is\n                        scored higher).\n  --b B                 Mismatch\
    \ penalty. The accepted mismatch rate per read\n                        on length\
    \ k is approximately: {.75 * exp[-log(4) *\n                        B/A]}\n  --o\
    \ O                 Gap opening penalty\n  --e E                 Gap extension\
    \ penalty\n  --l L                 Clipping penalty. During extension, the algorithm\n\
    \                        keeps track of the best score reaching the end of\n \
    \                       query. If this score is larger than the best extension\n\
    \                        score minus the clipping penalty, clipping will not be\n\
    \                        applied.\n  --u U                 Penalty for an unpaired\
    \ read pair. The lower the\n                        value, the more unpaired reads\
    \ will be allowed in the\n                        mapping.\n"
  generated_using: &id002
  - --help
- !Command
  positional: []
  named:
  - !Flag
    description: Call the folder that contains the results of the reference based
      assembly (output of reference_assembly function, containing the bam-files).
    synonyms:
    - --input
    args: !SimpleFlagArg
      name: INPUT
    optional: true
  - !Flag
    description: The output directory where results will be safed.
    synonyms:
    - --output
    args: !SimpleFlagArg
      name: OUTPUT
    optional: true
  - !Flag
    description: Set the minimum read coverage. Only positions that are covered by
      this number of reads will be called in the consensus sequence, otherwise the
      program will add an ambiguity at this position.
    synonyms:
    - --min_coverage
    args: !SimpleFlagArg
      name: MIN_COVERAGE
    optional: true
  - !Flag
    description: Provide the reference that was used for read-mapping. If you used
      the alignment-consensus method, provide the joined_fasta_library.fasta which
      is found in the reference_seqs folder within the reference-assembly output.
    synonyms:
    - --reference
    args: !SimpleFlagArg
      name: REFERENCE
    optional: true
  command:
  - secapr
  - phase_alleles
  parent: *id001
  subcommands: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: secapr phase_alleles [-h] --input INPUT --output OUTPUT\n   \
    \                         [--min_coverage MIN_COVERAGE] --reference\n        \
    \                    REFERENCE\n\nPhase remapped reads form reference-based assembly\
    \ into two separate alleles.\nThen produce consensus sequence for each allele.\n\
    \noptional arguments:\n  -h, --help            show this help message and exit\n\
    \  --input INPUT         Call the folder that contains the results of the\n  \
    \                      reference based assembly (output of reference_assembly\n\
    \                        function, containing the bam-files).\n  --output OUTPUT\
    \       The output directory where results will be safed.\n  --min_coverage MIN_COVERAGE\n\
    \                        Set the minimum read coverage. Only positions that are\n\
    \                        covered by this number of reads will be called in the\n\
    \                        consensus sequence, otherwise the program will add an\n\
    \                        ambiguity at this position.\n  --reference REFERENCE\n\
    \                        Provide the reference that was used for read-mapping.\n\
    \                        If you used the alignment-consensus method, provide\n\
    \                        the joined_fasta_library.fasta which is found in the\n\
    \                        reference_seqs folder within the reference-assembly\n\
    \                        output.\n"
  generated_using: *id002
- !Command
  positional: []
  named:
  - !Flag
    description: The directory containing fasta alignments
    synonyms:
    - --input
    args: !SimpleFlagArg
      name: INPUT
    optional: true
  - !Flag
    description: The output directory where results will be safed
    synonyms:
    - --output
    args: !SimpleFlagArg
      name: OUTPUT
    optional: true
  command:
  - secapr
  - add_missing_sequences
  parent: *id001
  subcommands: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: secapr add_missing_sequences [-h] --input INPUT --output OUTPUT\n\
    \nThis script will add dummy sequences '?' for missing taxons in each\nalignments,\
    \ making sure that all alignments in the input folder contain the\nsame taxa (as\
    \ required for e.g. *BEAST).\",\n\noptional arguments:\n  -h, --help       show\
    \ this help message and exit\n  --input INPUT    The directory containing fasta\
    \ alignments\n  --output OUTPUT  The output directory where results will be safed\n"
  generated_using: *id002
- !Command
  positional: []
  named:
  - !Flag
    description: The folder with the results of the reference based assembly.
    synonyms:
    - --input
    args: !SimpleFlagArg
      name: INPUT
    optional: true
  - !Flag
    description: The output directory where results will be safed.
    synonyms:
    - --output
    args: !SimpleFlagArg
      name: OUTPUT
    optional: true
  - !Flag
    description: The n loci that are best represented accross all samples will be
      extracted.
    synonyms:
    - --n
    args: !SimpleFlagArg
      name: N
    optional: true
  - !Flag
    description: The threshold for what average read coverage the selected target
      loci should at least have.
    synonyms:
    - --read_cov
    args: !SimpleFlagArg
      name: READ_COV
    optional: true
  - !Flag
    description: Path to reference library fasta file (secapr will find it by itself
      if the reference assembly was executed with secapr).
    synonyms:
    - --reference
    args: !SimpleFlagArg
      name: REFERENCE
    optional: true
  command:
  - secapr
  - locus_selection
  parent: *id001
  subcommands: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: secapr locus_selection [-h] --input INPUT --output OUTPUT [--n\
    \ N]\n                              [--read_cov READ_COV] [--reference REFERENCE]\n\
    \nExtract the n loci with the best read-coverage from you reference-based\nassembly\
    \ (bam-files)\n\noptional arguments:\n  -h, --help            show this help message\
    \ and exit\n  --input INPUT         The folder with the results of the reference\
    \ based\n                        assembly.\n  --output OUTPUT       The output\
    \ directory where results will be safed.\n  --n N                 The n loci that\
    \ are best represented accross all\n                        samples will be extracted.\n\
    \  --read_cov READ_COV   The threshold for what average read coverage the\n  \
    \                      selected target loci should at least have.\n  --reference\
    \ REFERENCE\n                        Path to reference library fasta file (secapr\
    \ will find\n                        it by itself if the reference assembly was\
    \ executed\n                        with secapr).\n"
  generated_using: *id002
- !Command
  positional: []
  named:
  - !Flag
    description: The directory containing cleaned fastq files
    synonyms:
    - --input
    args: !SimpleFlagArg
      name: INPUT
    optional: true
  - !Flag
    description: The output directory where all intermediate and final data files
      will be stored
    synonyms:
    - --output
    args: !SimpleFlagArg
      name: OUTPUT
    optional: true
  - !Flag
    description: Provide a reference library (FASTA) containing sequences for the
      genes of interest (required to find contigs matching targeted regions).
    synonyms:
    - --reference
    args: !SimpleFlagArg
      name: REFERENCE
    optional: true
  - !Flag
    description: The setting you want to run SECAPR on. "relaxed" uses very non-restrictive
      default values (use when samples are expected to differ considerably from provided
      reference or are covering wide evolutionary range, e.g. different families or
      orders). "conservative" is very restrictive and can be used when samples are
      closely related and match provided reference very well.
    synonyms:
    - --setting
    args: !ChoiceFlagArg
      choices: !!set
        medium:
        conservative:
        relaxed:
    optional: true
  - !Flag
    description: The assembler to use for de-novo assembly (default=abyss).
    synonyms:
    - --assembler
    args: !ChoiceFlagArg
      choices: !!set
        trinity:
        abyss:
    optional: true
  - !Flag
    description: Number of computational cores for parallelization of computation.
    synonyms:
    - --cores
    args: !SimpleFlagArg
      name: CORES
    optional: true
  command:
  - secapr
  - automate_all
  parent: *id001
  subcommands: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: secapr automate_all [-h] --input INPUT --output OUTPUT --reference\n\
    \                           REFERENCE [--setting {relaxed,medium,conservative}]\n\
    \                           [--assembler {abyss,trinity}] [--cores CORES]\n\n\
    This script automates the complete secapr pipeline, producing MSAs (allele,\n\
    contig and BAM-consensus) from FASTQ files\n\noptional arguments:\n  -h, --help\
    \            show this help message and exit\n  --input INPUT         The directory\
    \ containing cleaned fastq files\n  --output OUTPUT       The output directory\
    \ where all intermediate and final\n                        data files will be\
    \ stored\n  --reference REFERENCE\n                        Provide a reference\
    \ library (FASTA) containing\n                        sequences for the genes\
    \ of interest (required to find\n                        contigs matching targeted\
    \ regions).\n  --setting {relaxed,medium,conservative}\n                     \
    \   The setting you want to run SECAPR on. \"relaxed\" uses\n                \
    \        very non-restrictive default values (use when samples\n             \
    \           are expected to differ considerably from provided\n              \
    \          reference or are covering wide evolutionary range,\n              \
    \          e.g. different families or orders). \"conservative\" is\n         \
    \               very restrictive and can be used when samples are\n          \
    \              closely related and match provided reference very\n           \
    \             well.\n  --assembler {abyss,trinity}\n                        The\
    \ assembler to use for de-novo assembly\n                        (default=abyss).\n\
    \  --cores CORES         Number of computational cores for parallelization of\n\
    \                        computation.\n"
  generated_using: *id002
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: show program's version number and exit
  synonyms:
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "usage: secapr [-h] [--version]\n              {quality_check,clean_reads,assemble_reads,find_target_contigs,align_sequences,join_exons,reference_assembly,phase_alleles,add_missing_sequences,locus_selection,automate_all}\n\
  \              ...\n\npositional arguments:\n  {quality_check,clean_reads,assemble_reads,find_target_contigs,align_sequences,join_exons,reference_assembly,phase_alleles,add_missing_sequences,locus_selection,automate_all}\n\
  \    quality_check       This script runs a fastqc test on all fastq samples in\n\
  \                        a user-provided folder and creates an overview plot,\n\
  \    clean_reads         Clean and trim raw Illumina read files\n    assemble_reads\
  \      Assemble trimmed Illumina read files (fastq)\n    find_target_contigs\n \
  \                       Extract the contigs that match the reference database\n\
  \    align_sequences     Align sequences and produce separate alignment file\n \
  \                       for each locus, containing the seqeunces of all taxa.\n\
  \    join_exons\n    reference_assembly  Create new reference library and map raw\
  \ reads against\n                        the library (reference-based assembly)\n\
  \    phase_alleles       Phase remapped reads form reference-based assembly\n  \
  \                      into two separate alleles. Then produce consensus\n     \
  \                   sequence for each allele.\n    add_missing_sequences\n     \
  \                   This script will add dummy sequences '?' for missing\n     \
  \                   taxons in each alignments, making sure that all\n          \
  \              alignments in the input folder contain the same taxa\n          \
  \              (as required for e.g. *BEAST).\",\n    locus_selection     Extract\
  \ the n loci with the best read-coverage from\n                        you reference-based\
  \ assembly (bam-files)\n    automate_all        This script automates the complete\
  \ secapr pipeline,\n                        producing MSAs (allele, contig and BAM-consensus)\
  \ from\n                        FASTQ files\n\noptional arguments:\n  -h, --help\
  \            show this help message and exit\n  --version             show program's\
  \ version number and exit\n"
generated_using:
- -h
