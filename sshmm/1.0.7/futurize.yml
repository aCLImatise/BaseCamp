!Command
positional: []
named:
- !Flag
  description: Add all __future__ and future imports to each module
  synonyms:
  - -a
  - --all-imports
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Modernize Python 2 code only; no compatibility with Python 3 (or dependency
    on ``future``)
  synonyms:
  - '-1'
  - --stage1
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Take modernized (stage1) code and add a dependency on ``future`` to
    provide Py3 compatibility.
  synonyms:
  - '-2'
  - --stage2
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Apply both stages 1 and 2
  synonyms:
  - '-0'
  - --both-stages
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Add ``from __future__ import unicode_literals`` to implicitly convert
    all unadorned string literals '' into unicode strings
  synonyms:
  - -u
  - --unicode-literals
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Each FIX specifies a transformation; default: all. Either use '-f\
    \ division -f metaclass' etc. or use the fully-qualified module name: '-f lib2to3.fixes.fix_types\
    \ -f libfuturize.fixes.fix_unicode_keep_u'"
  synonyms:
  - -f
  - --fix
  args: !SimpleFlagArg
    name: FIX
  optional: true
- !Flag
  description: Run 2to3 concurrently
  synonyms:
  - -j
  - --processes
  args: !SimpleFlagArg
    name: PROCESSES
  optional: true
- !Flag
  description: Prevent a fixer from being run.
  synonyms:
  - -x
  - --nofix
  args: !SimpleFlagArg
    name: NOFIX
  optional: true
- !Flag
  description: List available transformations
  synonyms:
  - -l
  - --list-fixes
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Modify the grammar so that print() is a function
  synonyms:
  - -p
  - --print-function
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: More verbose logging
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Don't show diffs of the refactoring
  synonyms:
  - --no-diffs
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Write back modified files
  synonyms:
  - -w
  - --write
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Don't write backups for modified files.
  synonyms:
  - -n
  - --nobackups
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Put output files in this directory instead of overwriting the input
    files.  Requires -n. For Python >= 2.7 only.
  synonyms:
  - -o
  - --output-dir
  args: !SimpleFlagArg
    name: OUTPUT_DIR
  optional: true
- !Flag
  description: Also write files even if no changes were required (useful with --output-dir);
    implies -w.
  synonyms:
  - -W
  - --write-unchanged-files
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Append this string to all output filenames. Requires -n if non-empty.\
    \ For Python >= 2.7 only.ex: --add- suffix='3' will generate .py3 files."
  synonyms:
  - --add-suffix
  args: !SimpleFlagArg
    name: ADD_SUFFIX
  optional: true
command:
- futurize
parent:
subcommands: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: Report the version number of futurize
  synonyms:
  - -V
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "Usage: futurize [options] file|dir ...\n\nOptions:\n  -h, --help     \
  \       show this help message and exit\n  -V, --version         Report the version\
  \ number of futurize\n  -a, --all-imports     Add all __future__ and future imports\
  \ to each module\n  -1, --stage1          Modernize Python 2 code only; no compatibility\
  \ with\n                        Python 3 (or dependency on ``future``)\n  -2, --stage2\
  \          Take modernized (stage1) code and add a dependency on\n             \
  \           ``future`` to provide Py3 compatibility.\n  -0, --both-stages     Apply\
  \ both stages 1 and 2\n  -u, --unicode-literals\n                        Add ``from\
  \ __future__ import unicode_literals`` to\n                        implicitly convert\
  \ all unadorned string literals ''\n                        into unicode strings\n\
  \  -f FIX, --fix=FIX     Each FIX specifies a transformation; default: all.\n  \
  \                      Either use '-f division -f metaclass' etc. or use the\n \
  \                       fully-qualified module name: '-f\n                     \
  \   lib2to3.fixes.fix_types -f\n                        libfuturize.fixes.fix_unicode_keep_u'\n\
  \  -j PROCESSES, --processes=PROCESSES\n                        Run 2to3 concurrently\n\
  \  -x NOFIX, --nofix=NOFIX\n                        Prevent a fixer from being run.\n\
  \  -l, --list-fixes      List available transformations\n  -p, --print-function\
  \  Modify the grammar so that print() is a function\n  -v, --verbose         More\
  \ verbose logging\n  --no-diffs            Don't show diffs of the refactoring\n\
  \  -w, --write           Write back modified files\n  -n, --nobackups       Don't\
  \ write backups for modified files.\n  -o OUTPUT_DIR, --output-dir=OUTPUT_DIR\n\
  \                        Put output files in this directory instead of\n       \
  \                 overwriting the input files.  Requires -n. For Python\n      \
  \                  >= 2.7 only.\n  -W, --write-unchanged-files\n               \
  \         Also write files even if no changes were required\n                  \
  \      (useful with --output-dir); implies -w.\n  --add-suffix=ADD_SUFFIX\n    \
  \                    Append this string to all output filenames. Requires\n    \
  \                    -n if non-empty. For Python >= 2.7 only.ex: --add-\n      \
  \                  suffix='3' will generate .py3 files.\n"
generated_using:
- --help
