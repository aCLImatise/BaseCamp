from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String, Float

Desman_V0_1_0 = CommandToolBuilder(tool="desman", base_command=["desman"], inputs=[ToolInput(tag="in_genomes", input_type=Int(optional=True), prefix="--genomes", doc=InputDocumentation(doc="specify the haplotype number")), ToolInput(tag="in_filters_variants_negative", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[FILTER_VARIANTS], --filter_variants [FILTER_VARIANTS]\nfilters variants by negative binomial loge likelihood\ndefaults to 3.84")), ToolInput(tag="in_selects_subset_variants", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[RANDOM_SELECT], --random_select [RANDOM_SELECT]\nselects subset of variants passing filter to build\nmodel and assigns others")), ToolInput(tag="in_eta_file", input_type=File(optional=True), prefix="--eta_file", doc=InputDocumentation(doc="reads initial eta matrix from file")), ToolInput(tag="in_assign_file", input_type=File(optional=True), prefix="--assign_file", doc=InputDocumentation(doc="calculates haplotype profiles for these SNPs using\nfitted gamma, eta values")), ToolInput(tag="in_output_dir", input_type=File(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="string specifying output directory and file stubs")), ToolInput(tag="in_optimise_p", input_type=String(optional=True), prefix="--optimiseP", doc=InputDocumentation(doc="optimise proportions in likelihood ratio test")), ToolInput(tag="in_number_iterations_gibbs", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[NO_ITER], --no_iter [NO_ITER]\nNumber of iterations of Gibbs sampler")), ToolInput(tag="in_min_coverage", input_type=Int(optional=True), prefix="--min_coverage", doc=InputDocumentation(doc="minimum coverage for sample to be included")), ToolInput(tag="in_max_q_value", input_type=Float(optional=True), prefix="--max_qvalue", doc=InputDocumentation(doc="specifies q value cut-off for variant detection\ndefaults 1.0e-3")), ToolInput(tag="in_random_seed", input_type=Int(optional=True), prefix="--random_seed", doc=InputDocumentation(doc="specifies seed for numpy random number generator\ndefaults to 23724839 applied after random filtering")), ToolInput(tag="in_specifies_minimum_defaults", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[MIN_VARIANT_FREQ], --min_variant_freq [MIN_VARIANT_FREQ]\nspecifies minimum variant frequency defaults 0.01\n")), ToolInput(tag="in_filter_variants", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_random_select", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_dir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="string specifying output directory and file stubs"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Desman_V0_1_0().translate("wdl", allow_empty_container=True)

