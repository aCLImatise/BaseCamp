from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Biopet_Vcffilter_V0_1_0 = CommandToolBuilder(tool="biopet_vcffilter", base_command=["biopet-vcffilter"], inputs=[ToolInput(tag="in_log_level", input_type=String(optional=True), prefix="--log_level", doc=InputDocumentation(doc="Level of log information printed. Possible levels: 'debug', 'info', 'warn', 'error'")), ToolInput(tag="in_input_vcf", input_type=File(optional=True), prefix="--inputVcf", doc=InputDocumentation(doc="Input vcf file")), ToolInput(tag="in_output_vcf", input_type=File(optional=True), prefix="--outputVcf", doc=InputDocumentation(doc="Output vcf file")), ToolInput(tag="in_inverted_output_vcf", input_type=File(optional=True), prefix="--invertedOutputVcf", doc=InputDocumentation(doc="inverted output vcf file")), ToolInput(tag="in_min_sample_depth", input_type=Int(optional=True), prefix="--minSampleDepth", doc=InputDocumentation(doc="Min value for DP in genotype fields")), ToolInput(tag="in_min_total_depth", input_type=Int(optional=True), prefix="--minTotalDepth", doc=InputDocumentation(doc="Min value of DP field in INFO fields")), ToolInput(tag="in_min_alternate_depth", input_type=Int(optional=True), prefix="--minAlternateDepth", doc=InputDocumentation(doc="Min value of AD field in genotype fields")), ToolInput(tag="in_min_samples_pass", input_type=Int(optional=True), prefix="--minSamplesPass", doc=InputDocumentation(doc="Min number off samples to pass --minAlternateDepth, --minBamAlternateDepth and --minSampleDepth")), ToolInput(tag="in_rest_odom", input_type=Boolean(optional=True), prefix="--resToDom", doc=InputDocumentation(doc="<child:father:mother>\nOnly shows variants where child is homozygous and both parants hetrozygous")), ToolInput(tag="in_trio_compound", input_type=Boolean(optional=True), prefix="--trioCompound", doc=InputDocumentation(doc="<child:father:mother>\nOnly shows variants where child is a compound variant combined from both parants")), ToolInput(tag="in_de_novo_in_sample", input_type=String(optional=True), prefix="--deNovoInSample", doc=InputDocumentation(doc="Only show variants that contain unique alleles in complete set for given sample")), ToolInput(tag="in_de_novo_trio", input_type=Boolean(optional=True), prefix="--deNovoTrio", doc=InputDocumentation(doc="<child:father:mother>\nOnly show variants that are denovo in the trio")), ToolInput(tag="in_trio_loss_of_het", input_type=Boolean(optional=True), prefix="--trioLossOfHet", doc=InputDocumentation(doc="<child:father:mother>\nOnly show variants where a loss of hetrozygosity is detected")), ToolInput(tag="in_must_have_variant", input_type=Int(optional=True), prefix="--mustHaveVariant", doc=InputDocumentation(doc="Given sample must have 1 alternative allele")), ToolInput(tag="in_must_not_have_variant", input_type=String(optional=True), prefix="--mustNotHaveVariant", doc=InputDocumentation(doc="Given sample may not have alternative alleles")), ToolInput(tag="in_called_in", input_type=String(optional=True), prefix="--calledIn", doc=InputDocumentation(doc="Must be called in this sample")), ToolInput(tag="in_must_have_genotype", input_type=Boolean(optional=True), prefix="--mustHaveGenotype", doc=InputDocumentation(doc="<sample:genotype>\nMust have genotoype <genotype> for this sample. Genotype can be NO_CALL, HOM_REF, HET, HOM_VAR, UNAVAILABLE, MIXED")), ToolInput(tag="in_diff_genotype", input_type=Boolean(optional=True), prefix="--diffGenotype", doc=InputDocumentation(doc="<sample:sample>\nGiven samples must have a different genotype")), ToolInput(tag="in_filter_het_var_to_hom_var", input_type=Boolean(optional=True), prefix="--filterHetVarToHomVar", doc=InputDocumentation(doc="<sample:sample>\nIf variants in sample 1 are heterogeneous and alternative alleles are homogeneous in sample 2 variants are filtered")), ToolInput(tag="in_filter_ref_calls", input_type=Boolean(optional=True), prefix="--filterRefCalls", doc=InputDocumentation(doc="Filter when there are only ref calls")), ToolInput(tag="in_filter_no_calls", input_type=Boolean(optional=True), prefix="--filterNoCalls", doc=InputDocumentation(doc="Filter when there are only no calls")), ToolInput(tag="in_unique_only", input_type=Boolean(optional=True), prefix="--uniqueOnly", doc=InputDocumentation(doc="Filter when there more then 1 sample have this variant")), ToolInput(tag="in_shared_only", input_type=Boolean(optional=True), prefix="--sharedOnly", doc=InputDocumentation(doc="Filter when not all samples have this variant")), ToolInput(tag="in_min_called", input_type=Int(optional=True), prefix="--minCalled", doc=InputDocumentation(doc="Number of sample where a call must be made")), ToolInput(tag="in_min_qual_score", input_type=Int(optional=True), prefix="--minQualScore", doc=InputDocumentation(doc="Min qual score")), ToolInput(tag="in_id", input_type=String(optional=True), prefix="--id", doc=InputDocumentation(doc="Id that may pass the filter")), ToolInput(tag="in_id_file", input_type=File(optional=True), prefix="--idFile", doc=InputDocumentation(doc="File that contain list of IDs to get from vcf file")), ToolInput(tag="in_min_genome_quality", input_type=String(optional=True), prefix="--minGenomeQuality", doc=InputDocumentation(doc="The minimum value in the Genome Quality field.")), ToolInput(tag="in_advanced_groups", input_type=String(optional=True), prefix="--advancedGroups", doc=InputDocumentation(doc="All members of groups sprated with a ','")), ToolInput(tag="in_min_avg_variant_gq", input_type=String(optional=True), prefix="--minAvgVariantGQ", doc=InputDocumentation(doc="Filter on the average GQ of variants")), ToolInput(tag="in_info_array_must_contain", input_type=Boolean(optional=True), prefix="--infoArrayMustContain", doc=InputDocumentation(doc=":<key>=<value>\nInfo field must be a array and should match the given regex\n")), ToolInput(tag="in_vcf_filter", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_vcf", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_vcf", type_hint=File()), doc=OutputDocumentation(doc="Output vcf file")), ToolOutput(tag="out_inverted_output_vcf", output_type=File(optional=True), selector=InputSelector(input_to_select="in_inverted_output_vcf", type_hint=File()), doc=OutputDocumentation(doc="inverted output vcf file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Biopet_Vcffilter_V0_1_0().translate("wdl", allow_empty_container=True)

