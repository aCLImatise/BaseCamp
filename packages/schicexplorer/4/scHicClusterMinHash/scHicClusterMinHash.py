from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, File, Boolean, Float, Array

Schicclusterminhash_V0_1_0 = CommandToolBuilder(tool="scHicClusterMinHash", base_command=["scHicClusterMinHash"], inputs=[ToolInput(tag="in_schic_matrix_m", input_type=String(optional=True), prefix="--matrix", doc=InputDocumentation(doc="scHi-C matrix, -m scool scHi-C matrix\nThe single cell Hi-C interaction matrices to cluster.\nNeeds to be in scool format (default: None)")), ToolInput(tag="in_number_of_clusters", input_type=Int(optional=True), prefix="--numberOfClusters", doc=InputDocumentation(doc="Number of to be computed clusters (default: 12)")), ToolInput(tag="in_cluster_method", input_type=String(optional=True), prefix="--clusterMethod", doc=InputDocumentation(doc="Algorithm to cluster the Hi-C matrices (default:\nspectral)")), ToolInput(tag="in_out_filename", input_type=File(optional=True), prefix="--outFileName", doc=InputDocumentation(doc="File name to save the resulting clusters (default:\nclusters.txt)")), ToolInput(tag="in_exact_modem_in_hash", input_type=Boolean(optional=True), prefix="--exactModeMinHash", doc=InputDocumentation(doc="This option increases the runtime significantly, from\na few minutes to half an hour or longer. If set, the\nnumber of hash collisions is only used for candidate\nset creation and the euclidean distance is considered\ntoo. (default: True)")), ToolInput(tag="in_save_intermediate_raw_matrix", input_type=String(optional=True), prefix="--saveIntermediateRawMatrix", doc=InputDocumentation(doc="This option activates the save of the intermediate raw\nscHi-C matrix. (default: None)")), ToolInput(tag="in_number_of_hash_functions", input_type=Int(optional=True), prefix="--numberOfHashFunctions", doc=InputDocumentation(doc="Number of to be used hash functions for minHash\n(default: 800)")), ToolInput(tag="in_number_of_nearest_neighbors", input_type=Int(optional=True), prefix="--numberOfNearestNeighbors", doc=InputDocumentation(doc="Number of to be used computed nearest neighbors for\nthe knn graph. (default: 100)")), ToolInput(tag="in_share_of_matrix_to_be_transferred", input_type=Float(optional=True), prefix="--shareOfMatrixToBeTransferred", doc=InputDocumentation(doc="Which share of rows shall be transferred from Python\nto C++ at once. Values between 0 and 1, the more are\ntransferred at once, the larger the memory usage is.\nThe less rows are transferred, the slower the\ncomputation is. (default: 0.25)")), ToolInput(tag="in_chromosomes", input_type=Array(t=String(), optional=True), prefix="--chromosomes", doc=InputDocumentation(doc="List of to be plotted chromosomes (default: None)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads. Using the python multiprocessing\nmodule. (default: 4)")), ToolInput(tag="in_sch_i_c", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_12", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_out_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_filename", type_hint=File()), doc=OutputDocumentation(doc="File name to save the resulting clusters (default:\nclusters.txt)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Schicclusterminhash_V0_1_0().translate("wdl", allow_empty_container=True)

