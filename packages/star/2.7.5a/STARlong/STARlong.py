from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Float, Int

Starlong_V0_1_0 = CommandToolBuilder(tool="STARlong", base_command=["STARlong"], inputs=[ToolInput(tag="in__map_all_reads", input_type=Boolean(optional=True), prefix="-1", doc=InputDocumentation(doc=": map all reads")), ToolInput(tag="in_out_sam_attr_rg_line", input_type=String(optional=True), prefix="--outSAMattrRGline", doc=InputDocumentation(doc=":xxx , ID:zzz 'DS:z z' , ID:yyy DS:yyyy")), ToolInput(tag="in_solo_cb_position", input_type=Boolean(optional=True), prefix="--soloCBposition", doc=InputDocumentation(doc="0_0_2_-1  3_1_3_8")), ToolInput(tag="in_align_reads", input_type=String(), position=0, doc=InputDocumentation(doc="... map reads")), ToolInput(tag="in_genome_generate", input_type=String(), position=1, doc=InputDocumentation(doc="... generate genome files")), ToolInput(tag="in_lift_over", input_type=String(), position=0, doc=InputDocumentation(doc="... lift-over of GTF files (--sjdbGTFfile) between genome assemblies using chain file(s) from --genomeChainFiles.")), ToolInput(tag="in_all_rwx", input_type=String(), position=0, doc=InputDocumentation(doc="... all-read/write/execute (same as chmod 777)")), ToolInput(tag="in_load_and_keep", input_type=String(), position=0, doc=InputDocumentation(doc="... load genome into shared and keep it in memory after run")), ToolInput(tag="in_load_and_remove", input_type=String(), position=1, doc=InputDocumentation(doc="... load genome into shared but remove it after run")), ToolInput(tag="in_load_and_exit", input_type=String(), position=2, doc=InputDocumentation(doc="... load genome into shared memory and exit, keeping the genome in memory for future runs")), ToolInput(tag="in_remove", input_type=String(), position=3, doc=InputDocumentation(doc="... do not map anything, just remove loaded genome from memory")), ToolInput(tag="in_no_shared_memory", input_type=String(), position=4, doc=InputDocumentation(doc="... do not use shared memory, each job will have its own private copy of the genome")), ToolInput(tag="in_full", input_type=String(), position=0, doc=InputDocumentation(doc="... full (normal) genome")), ToolInput(tag="in_transcriptome", input_type=String(), position=1, doc=InputDocumentation(doc="... genome consists of transcript sequences")), ToolInput(tag="in_super_trans_rip_to_me", input_type=String(), position=2, doc=InputDocumentation(doc="... genome consists of superTranscript sequences")), ToolInput(tag="in__no_transformation", input_type=String(), position=0, doc=InputDocumentation(doc="... no transformation")), ToolInput(tag="in_haploid", input_type=String(), position=1, doc=InputDocumentation(doc="... replace reference alleles with alternative alleles from VCF file (e.g. consensus allele)")), ToolInput(tag="in_diploid", input_type=String(), position=2, doc=InputDocumentation(doc="... create two haplotypes for each chromosome listed in VCF file, for genotypes 1|2, assumes perfect phasing (e.g. personal genome)")), ToolInput(tag="in_files_including_sa", input_type=String(), position=0, doc=InputDocumentation(doc="... all files including big Genome, SA and SAindex - this will create a complete genome directory")), ToolInput(tag="in__fasta_fastq", input_type=String(), position=0, doc=InputDocumentation(doc="... FASTA or FASTQ")), ToolInput(tag="in_log", input_type=String(), position=0, doc=InputDocumentation(doc="... log messages")), ToolInput(tag="in_alignments_normally_are", input_type=String(), position=1, doc=InputDocumentation(doc="... alignments in SAM format (which normally are output to Aligned.out.sam file), normal standard output will go into Log.std.out")), ToolInput(tag="in_bam_unsorted", input_type=String(), position=2, doc=InputDocumentation(doc="... alignments in BAM format, unsorted. Requires --outSAMtype BAM Unsorted")), ToolInput(tag="in_bam_quant", input_type=String(), position=0, doc=InputDocumentation(doc="... alignments to transcriptome in BAM format, unsorted. Requires --quantMode TranscriptomeSAM")), ToolInput(tag="in_var_24", input_type=String(), position=0, doc=InputDocumentation(doc="... no output")), ToolInput(tag="in_output_separate_fastafastq", input_type=String(), position=1, doc=InputDocumentation(doc="... output in separate fasta/fastq files, Unmapped.out.mate1/2")), ToolInput(tag="in_old_two_dot_four", input_type=Float(), position=0, doc=InputDocumentation(doc="... quasi-random order used before 2.5.0")), ToolInput(tag="in_random", input_type=String(), position=1, doc=InputDocumentation(doc="... random order of alignments for each multi-mapper. Read mates (pairs) are always adjacent, all alignment for each read stay together. This option will become default in the future releases.")), ToolInput(tag="in_bam", input_type=String(), position=0, doc=InputDocumentation(doc="... output BAM without sorting")), ToolInput(tag="in_output_sam_sorting", input_type=String(), position=1, doc=InputDocumentation(doc="... output SAM without sorting")), ToolInput(tag="in_unsorted", input_type=String(), position=0, doc=InputDocumentation(doc="... standard unsorted")), ToolInput(tag="in_standard", input_type=String(), position=1, doc=InputDocumentation(doc="... NH HI AS nM")), ToolInput(tag="in_nh_hi_as_nm_ch", input_type=String(), position=2, doc=InputDocumentation(doc="... NH HI AS nM NM MD jM jI MC ch")), ToolInput(tag="in_va", input_type=String(), position=0, doc=InputDocumentation(doc="... variant allele")), ToolInput(tag="in_ha", input_type=String(), position=1, doc=InputDocumentation(doc="... haplotype (1/2) when mapping to the diploid genome. Requires genome generated with --genomeTransformType Diploid")), ToolInput(tag="in_vg", input_type=String(), position=2, doc=InputDocumentation(doc="... genomic coordinate of the variant overlapped by the read")), ToolInput(tag="in_vw", input_type=String(), position=3, doc=InputDocumentation(doc="... 1 - alignment passes WASP filtering; 2,3,4,5,6,7 - alignment does not pass WASP filtering. Requires --waspOutputMode SAMtag.")), ToolInput(tag="in_sm", input_type=String(), position=0, doc=InputDocumentation(doc="... assessment of CB and UMI")), ToolInput(tag="in_ss", input_type=String(), position=1, doc=InputDocumentation(doc="... sequence of the entire barcode (CB,UMI,adapter...)")), ToolInput(tag="in_sq", input_type=String(), position=2, doc=InputDocumentation(doc="... quality of the entire barcode")), ToolInput(tag="in_rb", input_type=String(), position=0, doc=InputDocumentation(doc="... alignment block read/genomic coordinates")), ToolInput(tag="in_vr", input_type=String(), position=1, doc=InputDocumentation(doc="... read coordinate of the variant")), ToolInput(tag="in_var_42", input_type=String(), position=0, doc=InputDocumentation(doc="... no output")), ToolInput(tag="in_number", input_type=Int(), position=0, doc=InputDocumentation(doc="... read number (index) in the FASTx file")), ToolInput(tag="in_unique_identical", input_type=String(), position=0, doc=InputDocumentation(doc="... mark all multimappers, and duplicate unique mappers. The coordinates, FLAG, CIGAR must be identical")), ToolInput(tag="in_unique_identical_not_multi", input_type=String(), position=1, doc=InputDocumentation(doc="... mark duplicate unique mappers but not multimappers.")), ToolInput(tag="in__signal_output", input_type=String(), position=0, doc=InputDocumentation(doc="... no signal output")), ToolInput(tag="in_bed_graph", input_type=String(), position=1, doc=InputDocumentation(doc="... bedGraph format")), ToolInput(tag="in_wiggle", input_type=String(), position=2, doc=InputDocumentation(doc="... wiggle format")), ToolInput(tag="in_read_one_five_p", input_type=Int(), position=0, doc=InputDocumentation(doc="... signal from only 5' of the 1st read, useful for CAGE/RAMPAGE etc")), ToolInput(tag="in_read_two", input_type=Int(), position=1, doc=InputDocumentation(doc="... signal from only 2nd read")), ToolInput(tag="in_stranded", input_type=String(), position=0, doc=InputDocumentation(doc="...  separate strands, str1 and str2")), ToolInput(tag="in_rpm", input_type=String(), position=0, doc=InputDocumentation(doc="... reads per million of mapped reads")), ToolInput(tag="in__normalization_counts", input_type=String(), position=1, doc=InputDocumentation(doc="... no normalization, 'raw' counts")), ToolInput(tag="in_normal", input_type=String(), position=0, doc=InputDocumentation(doc="... standard filtering using only current alignment")), ToolInput(tag="in_var_55", input_type=String(), position=0, doc=InputDocumentation(doc="... no filtering")), ToolInput(tag="in_remove_noncanonical", input_type=String(), position=1, doc=InputDocumentation(doc="... filter out alignments that contain non-canonical junctions")), ToolInput(tag="in_remove_noncanonical_unannotated", input_type=String(), position=2, doc=InputDocumentation(doc="... filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database. The annotated non-canonical junctions will be kept.")), ToolInput(tag="in_remove_inconsistent_strands", input_type=String(), position=0, doc=InputDocumentation(doc="... remove alignments that have junctions with inconsistent strands")), ToolInput(tag="in_var_59", input_type=String(), position=1, doc=InputDocumentation(doc="... no filtering")), ToolInput(tag="in_local", input_type=String(), position=0, doc=InputDocumentation(doc="... standard local alignment with soft-clipping allowed")), ToolInput(tag="in_end_to_end", input_type=String(), position=1, doc=InputDocumentation(doc="... force end-to-end read alignment, do not soft-clip")), ToolInput(tag="in_extend_five_po_fread_one", input_type=Int(), position=2, doc=InputDocumentation(doc="... fully extend only the 5p of the read1, all other ends: local alignment")), ToolInput(tag="in_no", input_type=String(), position=0, doc=InputDocumentation(doc="... prohibit, useful for compatibility with Cufflinks")), ToolInput(tag="in__insertions_flushed", input_type=String(), position=0, doc=InputDocumentation(doc="... insertions are not flushed")), ToolInput(tag="in_right", input_type=String(), position=1, doc=InputDocumentation(doc="... insertions are flushed to the right")), ToolInput(tag="in_junctions", input_type=String(), position=0, doc=InputDocumentation(doc="... Chimeric.out.junction")), ToolInput(tag="in_separates_a_mold", input_type=String(), position=1, doc=InputDocumentation(doc="... output old SAM into separate Chimeric.out.sam file")), ToolInput(tag="in_within_bam", input_type=String(), position=2, doc=InputDocumentation(doc="... output into main aligned BAM files (Aligned.*.bam)")), ToolInput(tag="in_gene_counts", input_type=String(), position=0, doc=InputDocumentation(doc="... count reads per gene")), ToolInput(tag="in_in_del_soft_clip_single_end", input_type=String(), position=0, doc=InputDocumentation(doc="... prohibit indels, soft clipping and single-end alignments - compatible with RSEM")), ToolInput(tag="in_single_end", input_type=String(), position=1, doc=InputDocumentation(doc="... prohibit single-end alignments")), ToolInput(tag="in__pass_mapping", input_type=String(), position=0, doc=InputDocumentation(doc="... 1-pass mapping")), ToolInput(tag="in_basic", input_type=String(), position=1, doc=InputDocumentation(doc="... basic 2-pass mapping, with all 1st pass junctions inserted into the genome indices on the fly")), ToolInput(tag="in_sam_tag", input_type=String(), position=0, doc=InputDocumentation(doc="... add WASP tags to the alignments that pass WASP filtering")), ToolInput(tag="in_cb_umi_simple", input_type=String(), position=0, doc=InputDocumentation(doc="... (a.k.a. Droplet) one UMI and one Cell Barcode of fixed length in read2, e.g. Drop-seq and 10X Chromium.")), ToolInput(tag="in_cb_umi_complex", input_type=String(), position=1, doc=InputDocumentation(doc="... one UMI of fixed length, but multiple Cell Barcodes of varying length, as well as adapters sequences are allowed in read2 only, e.g. inDrop.")), ToolInput(tag="in_cb_sam_tagout", input_type=String(), position=2, doc=InputDocumentation(doc="... output Cell Barcode as CR and/or CB SAm tag. No UMI counting. --readFilesIn cDNA_read1 [cDNA_read2 if paired-end] CellBarcode_read . Requires --outSAMtype BAM Unsorted [and/or SortedByCoordinate]")), ToolInput(tag="in_smart_seq", input_type=String(), position=3, doc=InputDocumentation(doc="... Smart-seq: each cell in a separate FASTQ (paired- or single-end), barcodes are corresponding read-groups, no UMI sequences, alignments deduplicated according to alignment start and end (after extending soft-clipped bases)")), ToolInput(tag="in_whitelist_cell_barcodes", input_type=String(), position=0, doc=InputDocumentation(doc="... no whitelist: all cell barcodes are allowed")), ToolInput(tag="in_string", input_type=String(), position=0, doc=InputDocumentation(doc="position of the UMI on the barcode read, same as soloCBposition\nExample: inDrop (Zilionis et al, Nat. Protocols, 2017):\n--soloCBposition  3_9_3_14")), ToolInput(tag="in_only_exact_matches", input_type=String(), position=0, doc=InputDocumentation(doc="... only exact matches allowed")), ToolInput(tag="in_one_mm", input_type=Int(), position=1, doc=InputDocumentation(doc="... only one match in whitelist with 1 mismatched base allowed. Allowed CBs have to have at least one read with exact match.")), ToolInput(tag="in_one_mm_multi", input_type=Int(), position=2, doc=InputDocumentation(doc="... multiple matches in whitelist with 1 mismatched base allowed, posterior probability calculation is used choose one of the matches.\nAllowed CBs have to have at least one read with exact match. Similar to CellRanger 2.2.0")), ToolInput(tag="in_one_mm_multi_pseudo_counts", input_type=Int(), position=3, doc=InputDocumentation(doc="... same as 1MM_Multi, but pseudocounts of 1 are added to all whitelist barcodes.\nSimilar to CellRanger 3.x.x")), ToolInput(tag="in_un_stranded", input_type=String(), position=0, doc=InputDocumentation(doc="... no strand information")), ToolInput(tag="in_forward", input_type=String(), position=1, doc=InputDocumentation(doc="... read strand same as the original RNA molecule")), ToolInput(tag="in_reverse", input_type=String(), position=2, doc=InputDocumentation(doc="... read strand opposite to the original RNA molecule")), ToolInput(tag="in_gene", input_type=String(), position=0, doc=InputDocumentation(doc="... genes: reads match the gene transcript")), ToolInput(tag="in_sj", input_type=String(), position=1, doc=InputDocumentation(doc="... splice junctions: reported in SJ.out.tab")), ToolInput(tag="in_gene_full", input_type=String(), position=2, doc=InputDocumentation(doc="... full genes: count all reads overlapping genes' exons and introns")), ToolInput(tag="in_transcript_three_p", input_type=Int(), position=0, doc=InputDocumentation(doc="... quantification of transcript for 3' protocols")), ToolInput(tag="in_one_mm_all", input_type=Int(), position=0, doc=InputDocumentation(doc="... all UMIs with 1 mismatch distance to each other are collapsed (i.e. counted once)")), ToolInput(tag="in_one_mm_directional", input_type=Int(), position=1, doc=InputDocumentation(doc="... follows the 'directional' method from the UMI-tools by Smith, Heger and Sudbery (Genome Research 2017).")), ToolInput(tag="in_only_exactly_matching", input_type=String(), position=2, doc=InputDocumentation(doc="... only exactly matching UMIs are collapsed")), ToolInput(tag="in_node_dup", input_type=String(), position=3, doc=InputDocumentation(doc="... no deduplication of UMIs, count all reads. Allowed for --soloType SmartSeq")), ToolInput(tag="in_multigene_umi", input_type=String(), position=0, doc=InputDocumentation(doc="... remove lower-count UMIs that map to more than one gene (introduced in CellRanger 3.x.x)")), ToolInput(tag="in_file_name_prefix", input_type=String(), position=0, doc=InputDocumentation(doc="gene_names   barcode_sequences   cell_feature_count_matrix")), ToolInput(tag="in_cell_ranger_two_dot_two", input_type=Float(), position=0, doc=InputDocumentation(doc="... simple filtering of CellRanger 2.2, followed by three numbers: number of expected cells, robust maximum percentile for UMI count, maximum to minimum ratio for UMI count")), ToolInput(tag="in_top_cells", input_type=String(), position=1, doc=InputDocumentation(doc="... only report top cells by UMI count, followed by the exact number of cells")), ToolInput(tag="in_output_filtered_cells", input_type=String(), position=2, doc=InputDocumentation(doc="... do not output filtered cells"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Starlong_V0_1_0().translate("wdl", allow_empty_container=True)

