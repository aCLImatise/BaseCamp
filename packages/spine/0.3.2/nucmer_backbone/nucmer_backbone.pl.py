from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Nucmer_Backbone_Pl_V0_1_0 = CommandToolBuilder(tool="nucmer_backbone.pl", base_command=["nucmer_backbone.pl"], inputs=[ToolInput(tag="in_alignment_oordinates_file", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc="alignment [C]oordinates file. Produced by numcer alignment of\nall genomes vs. all genomes:\n$ nucmer -p out --maxmatch genomes.fasta genomes.fasta\nfollowed by running show-coords and sorting by reference:\n$ show-coords -rTH out.delta > out.coords.txt")), ToolInput(tag="in_number_genomes_be", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="number of genomes from which a section can be [A]bsent and still\nbe included as core genome (default 0)")), ToolInput(tag="in_genome_used_eference", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="genome used as [R]eference for generating backbone fragment list\nwith 1 being the first genome entered, 2 being the second, etc.\n(default is first genome entered, but you may try several\nruns altering this number as number and length of backbone\nsegments output may be slightly different)")), ToolInput(tag="in_list_enomes_createdseparated", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="list of [G]enomes from which backbone should be created,\nseparated by commas with no spaces between. Order of the list\nwill determine priority in producing core genome. Genome given\nby -r will be given first priorty, with all other genomes moving\ndown one step. Number of genomes entered must be at least (a+1),\nso if the value given by -a is 2, at least three genomes must be\nentered.\nExample: to create a backbone from the first, second, and fourth\ngenomes given and ignore the third, enter '1,2,4'.\nThe first genome will be given highest priority,\nsecond given next-highest, fourth given third-highest\n(default is to use genomes in the order their sequences were\nprovided)")), ToolInput(tag="in_file_listing_ids", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="file listing all cds locus ids in the format:\ngenome order number<tab>locus id<tab>contig_id<tab>start coord<tab>end coord<tab>strand<tab>product (optional)\n(one entry per line)\nexample:\n1       gen1_00001      contig1 456     2176    +   exoU\n1       gen1_00002      contig2 3187    4599    +   spcU\n2       gen2_00001      contigA 679     3100    -   hypothetical protein\netc.\nIf an input is given for both -x and -l, only -x will be used as\ninput. If the file given by -x does not exist, it will be\ncreated using the files from -l to create a locus id file.")), ToolInput(tag="in_aximum_distance_less", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[M]aximum distance between backbone fragments.\nDistances less than this parameter between adjacent fragments\nwill result in combination of fragments with interspersed N's\n(default 10)")), ToolInput(tag="in_minimum_ackbone_size", input_type=Boolean(optional=True), prefix="-B", doc=InputDocumentation(doc="minimum [B]ackbone size to be output (default 10)")), ToolInput(tag="in_minimum_sland_size", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="minimum [I]sland size to be output (default 10)")), ToolInput(tag="in_prefix_output_files", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="prefix of output files (default 'output')")), ToolInput(tag="in_given_output_coordinates", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="if given, will output coordinates of core and accessory genome\nsegments for each genome. Takes longer (default: only output\nbackbone files)")), ToolInput(tag="in_output_file_used", input_type=File(optional=True), prefix="-e", doc=InputDocumentation(doc="Output file of position values that can be used to calculate\npangenome and core genome characteristics of the data set\nusing core_and_pangenome.pl. If selected, will automatically\ntrigger -o option.")), ToolInput(tag="in_output_pangenome_sequence", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="Output a pangenome sequence from all input genomes. This sequence\nwill be generated from sequences in the order given or from the\norder given to -g and -r above.")), ToolInput(tag="in_number_threads_default", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="Number of threads (default 15)")), ToolInput(tag="in_verbose_output", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="verbose output")), ToolInput(tag="in_uppercase_version_number", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="(uppercase)    Output version number and quit.")), ToolInput(tag="in_more_options", input_type=Boolean(optional=True), prefix="-MORE_OPTIONS", doc=InputDocumentation(doc="")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-OPTIONS", doc=InputDocumentation(doc="")), ToolInput(tag="in_genome", input_type=String(), position=0, doc=InputDocumentation(doc="version = 0.4")), ToolInput(tag="in_or", input_type=String(), position=0, doc=InputDocumentation(doc="one multi-fasta file of sequences aligned by nucmer")), ToolInput(tag="in_i_dote_dot", input_type=String(), position=0, doc=InputDocumentation(doc="If the genome 'strainA'is contained in two contigs:")), ToolInput(tag="in_contig", input_type=String(), position=0, doc=InputDocumentation(doc=">contig2")), ToolInput(tag="in_rename_headers_so", input_type=String(), position=1, doc=InputDocumentation(doc="Rename the headers like so:")), ToolInput(tag="in_strainacontig", input_type=String(), position=0, doc=InputDocumentation(doc=">#strainA#contig2")), ToolInput(tag="in_optional_", input_type=String(), position=1, doc=InputDocumentation(doc="Optional:  ")), ToolInput(tag="in_etc_dot", input_type=String(), position=0, doc=InputDocumentation(doc="if this file is given, a list of locus IDs of genes present in")), ToolInput(tag="in_sequences_dot", input_type=String(), position=0, doc=InputDocumentation(doc="*** This option currently only works for non-draft sequences"))], outputs=[ToolOutput(tag="out_alignment_oordinates_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_alignment_oordinates_file", type_hint=File()), doc=OutputDocumentation(doc="alignment [C]oordinates file. Produced by numcer alignment of\nall genomes vs. all genomes:\n$ nucmer -p out --maxmatch genomes.fasta genomes.fasta\nfollowed by running show-coords and sorting by reference:\n$ show-coords -rTH out.delta > out.coords.txt")), ToolOutput(tag="out_output_file_used", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_used", type_hint=File()), doc=OutputDocumentation(doc="Output file of position values that can be used to calculate\npangenome and core genome characteristics of the data set\nusing core_and_pangenome.pl. If selected, will automatically\ntrigger -o option."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nucmer_Backbone_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

