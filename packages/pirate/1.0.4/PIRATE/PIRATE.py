from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, String

Pirate_V0_1_0 = CommandToolBuilder(tool="PIRATE", base_command=["PIRATE"], inputs=[ToolInput(tag="in_input_directory_containing", input_type=Boolean(optional=True), prefix="--input", doc=InputDocumentation(doc="input directory containing gffs [mandatory]")), ToolInput(tag="in_output_directory_create", input_type=Boolean(optional=True), prefix="--output", doc=InputDocumentation(doc="output directory in which to create PIRATE folder\n[default: input_dir/PIRATE]")), ToolInput(tag="in_steps", input_type=Boolean(optional=True), prefix="--steps", doc=InputDocumentation(doc="% identity thresholds to use for pangenome construction\n[default: 50,60,70,80,90,95,98]")), ToolInput(tag="in_features", input_type=Boolean(optional=True), prefix="--features", doc=InputDocumentation(doc="choose features to use for pangenome construction.\nMultiple may be entered, seperated by a comma [default: CDS]")), ToolInput(tag="in_nucl", input_type=Boolean(optional=True), prefix="--nucl", doc=InputDocumentation(doc="CDS are not translated to AA sequence [default: off]")), ToolInput(tag="in_pan_opt", input_type=Boolean(optional=True), prefix="--pan-opt", doc=InputDocumentation(doc="additional arguments to pass to pangenome_contruction")), ToolInput(tag="in_pan_off", input_type=Directory(optional=True), prefix="--pan-off", doc=InputDocumentation(doc="don't run pangenome tool [assumes PIRATE has been previously\nrun and resulting files are present in output folder]")), ToolInput(tag="in_para_off", input_type=Boolean(optional=True), prefix="--para-off", doc=InputDocumentation(doc="switch off paralog identification [default: on]")), ToolInput(tag="in_para_args", input_type=Boolean(optional=True), prefix="--para-args", doc=InputDocumentation(doc="options to pass to paralog splitting algorithm\n[default: none]")), ToolInput(tag="in_classify_off", input_type=String(optional=True), prefix="--classify-off", doc=InputDocumentation(doc="not classify paralogs, assumes this has been\nrun previously [default: on]")), ToolInput(tag="in_align", input_type=Boolean(optional=True), prefix="--align", doc=InputDocumentation(doc="align all genes and produce core/pangenome alignments\n[default: off]")), ToolInput(tag="in_r_plots", input_type=Boolean(optional=True), prefix="--rplots", doc=InputDocumentation(doc="plot summaries using R [requires dependencies]")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="number of threads/cores used by PIRATE [default: 2]")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="switch off verbose")), ToolInput(tag="in_retain_intermediate_files", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="retain intermediate files [0 = none, 1 = retain pangenome\nfiles (default - re-run using --pan-off), 2 = all]")), ToolInput(tag="in_check", input_type=Boolean(optional=True), prefix="--check", doc=InputDocumentation(doc="check installation and run on example files")), ToolInput(tag="in_global", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_17", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_18", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_usage", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_additional", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_don", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_22", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_not", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_retain", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_run", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_switch", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_and", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_arguments", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_classification", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_classify", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_intermediate", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_off", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_previously", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_34", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_paralogs", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_resulting", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_to", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_files", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_identification", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_pass", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_are", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_splitting", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_algorithm", input_type=String(), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_present", input_type=String(), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_in", input_type=String(), position=6, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_46", input_type=String(), position=7, doc=InputDocumentation(doc="")), ToolInput(tag="in_folder", input_type=Directory(), position=8, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_pan_off", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_pan_off", type_hint=File()), doc=OutputDocumentation(doc="don't run pangenome tool [assumes PIRATE has been previously\nrun and resulting files are present in output folder]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pirate_V0_1_0().translate("wdl", allow_empty_container=True)

