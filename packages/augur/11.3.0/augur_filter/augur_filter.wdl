version 1.0

task AugurFilter {
  input {
    File? metadata
    String? sequences
    String? sequence_index
    String? query
    Int? min_date
    Int? max_date
    String? exclude_ambiguous_dates_by
    Array[String] exclude
    Array[String] exclude_where
    Boolean? exclude_all
    Array[String] include
    Array[String] include_where
    Int? min_length
    Boolean? non_nucleotide
    Array[String] group_by
    Int? sequences_per_group
    Int? subsample_max_sequences
    Boolean? probabilistic_sampling
    Int? no_probabilistic_sampling
    Int? subsample_seed
    String? output_sequences
    String? output_metadata
    String? output_strains
  }
  command <<<
    augur filter \
      ~{if defined(metadata) then ("--metadata " +  '"' + metadata + '"') else ""} \
      ~{if defined(sequences) then ("--sequences " +  '"' + sequences + '"') else ""} \
      ~{if defined(sequence_index) then ("--sequence-index " +  '"' + sequence_index + '"') else ""} \
      ~{if defined(query) then ("--query " +  '"' + query + '"') else ""} \
      ~{if defined(min_date) then ("--min-date " +  '"' + min_date + '"') else ""} \
      ~{if defined(max_date) then ("--max-date " +  '"' + max_date + '"') else ""} \
      ~{if defined(exclude_ambiguous_dates_by) then ("--exclude-ambiguous-dates-by " +  '"' + exclude_ambiguous_dates_by + '"') else ""} \
      ~{if defined(exclude) then ("--exclude " +  '"' + exclude + '"') else ""} \
      ~{if defined(exclude_where) then ("--exclude-where " +  '"' + exclude_where + '"') else ""} \
      ~{if (exclude_all) then "--exclude-all" else ""} \
      ~{if defined(include) then ("--include " +  '"' + include + '"') else ""} \
      ~{if defined(include_where) then ("--include-where " +  '"' + include_where + '"') else ""} \
      ~{if defined(min_length) then ("--min-length " +  '"' + min_length + '"') else ""} \
      ~{if (non_nucleotide) then "--non-nucleotide" else ""} \
      ~{if defined(group_by) then ("--group-by " +  '"' + group_by + '"') else ""} \
      ~{if defined(sequences_per_group) then ("--sequences-per-group " +  '"' + sequences_per_group + '"') else ""} \
      ~{if defined(subsample_max_sequences) then ("--subsample-max-sequences " +  '"' + subsample_max_sequences + '"') else ""} \
      ~{if (probabilistic_sampling) then "--probabilistic-sampling" else ""} \
      ~{if defined(no_probabilistic_sampling) then ("--no-probabilistic-sampling " +  '"' + no_probabilistic_sampling + '"') else ""} \
      ~{if defined(subsample_seed) then ("--subsample-seed " +  '"' + subsample_seed + '"') else ""} \
      ~{if defined(output_sequences) then ("--output-sequences " +  '"' + output_sequences + '"') else ""} \
      ~{if defined(output_metadata) then ("--output-metadata " +  '"' + output_metadata + '"') else ""} \
      ~{if defined(output_strains) then ("--output-strains " +  '"' + output_strains + '"') else ""}
  >>>
  runtime {
    docker: "quay.io/biocontainers/augur:11.3.0--py_0"
  }
  parameter_meta {
    metadata: "sequence metadata, as CSV or TSV (default: None)"
    sequences: "sequences in FASTA or VCF format (default: None)"
    sequence_index: "sequence composition report generated by augur index.\\nIf not provided, an index will be created on the fly.\\n(default: None)"
    query: "Filter samples by attribute. Uses Pandas Dataframe\\nquerying, see https://pandas.pydata.org/pandas-\\ndocs/stable/user_guide/indexing.html#indexing-query\\nfor syntax. (e.g., --query \\\"country == 'Colombia'\\\" or\\n--query \\\"(country == 'USA' & (division ==\\n'Washington'))\\\") (default: None)"
    min_date: "minimal cutoff for date; may be specified as an Augur-\\nstyle numeric date (with the year as the integer part)\\nor YYYY-MM-DD (default: None)"
    max_date: "maximal cutoff for date; may be specified as an Augur-\\nstyle numeric date (with the year as the integer part)\\nor YYYY-MM-DD (default: None)"
    exclude_ambiguous_dates_by: "Exclude ambiguous dates by day (e.g., 2020-09-XX),\\nmonth (e.g., 2020-XX-XX), year (e.g., 200X-10-01), or\\nany date fields. An ambiguous year makes the\\ncorresponding month and day ambiguous, too, even if\\nthose fields have unambiguous values (e.g.,\\n\\\"201X-10-01\\\"). Similarly, an ambiguous month makes the\\ncorresponding day ambiguous (e.g., \\\"2010-XX-01\\\").\\n(default: None)"
    exclude: "file(s) with list of strains to exclude (default:\\nNone)"
    exclude_where: "Exclude samples matching these conditions. Ex:\\n\\\"host=rat\\\" or \\\"host!=rat\\\". Multiple values are\\nprocessed as OR (matching any of those specified will\\nbe excluded), not AND (default: None)"
    exclude_all: "exclude all strains by default. Use this with the\\ninclude arguments to select a specific subset of\\nstrains. (default: False)"
    include: "file(s) with list of strains to include regardless of\\npriorities or subsampling (default: None)"
    include_where: "Include samples with these values. ex: host=rat.\\nMultiple values are processed as OR (having any of\\nthose specified will be included), not AND. This rule\\nis applied last and ensures any sequences matching\\nthese rules will be included. (default: None)"
    min_length: "minimal length of the sequences (default: None)"
    non_nucleotide: "exclude sequences that contain illegal characters\\n(default: False)"
    group_by: "categories with respect to subsample; two virtual\\nfields, \\\"month\\\" and \\\"year\\\", are supported if they\\ndon't already exist as real fields but a \\\"date\\\" field\\ndoes exist (default: None)"
    sequences_per_group: "subsample to no more than this number of sequences per\\ncategory (default: None)"
    subsample_max_sequences: "subsample to no more than this number of sequences\\n(default: None)"
    probabilistic_sampling: "Enable probabilistic sampling during subsampling. This\\nis useful when there are more groups than requested\\nsequences. This option only applies when `--subsample-\\nmax-sequences` is provided. (default: True)"
    no_probabilistic_sampling: "tab-delimited file with list of priority scores for\\nstrains (e.g., \\\"<strain>\\t<priority>\\\") and no header.\\nWhen scores are provided, Augur converts scores to\\nfloating point values, sorts strains within each\\nsubsampling group from highest to lowest priority, and\\nselects the top N strains per group where N is the\\ncalculated or requested number of strains per group.\\nHigher numbers indicate higher priority. Since\\npriorities represent relative values between strains,\\nthese values can be arbitrary. (default: None)"
    subsample_seed: "random number generator seed to allow reproducible\\nsub-sampling (with same input data). Can be number or\\nstring. (default: None)"
    output_sequences: "filtered sequences in FASTA format (default: None)"
    output_metadata: "metadata for strains that passed filters (default:\\nNone)"
    output_strains: "list of strains that passed filters (no header)\\n(default: None)\\n"
  }
  output {
    File out_stdout = stdout()
  }
}