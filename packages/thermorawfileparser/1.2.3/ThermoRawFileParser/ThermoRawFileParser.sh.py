from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Thermorawfileparser_Sh_V0_1_0 = CommandToolBuilder(tool="ThermoRawFileParser.sh", base_command=["ThermoRawFileParser.sh"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="The raw file input (Required). Specify this or an\ninput directory -d.")), ToolInput(tag="in_input_directory", input_type=File(optional=True), prefix="--input_directory", doc=InputDocumentation(doc="The directory containing the raw files (Required).\nSpecify this or an input raw file -i.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="The output directory. Specify this or an output\nfile -b. Specifying neither writes to the input\ndirectory.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output_file", doc=InputDocumentation(doc="The output file. Specify this or an output\ndirectory -o. Specifying neither writes to the\ninput directory.")), ToolInput(tag="in_format", input_type=Int(optional=True), prefix="--format", doc=InputDocumentation(doc="The spectra output format: 0 for MGF, 1 for mzML,\n2 for indexed mzML, 3 for Parquet. Defaults to\nmzML if no format is specified.")), ToolInput(tag="in_metadata", input_type=Int(optional=True), prefix="--metadata", doc=InputDocumentation(doc="The metadata output format: 0 for JSON, 1 for TXT.")), ToolInput(tag="in_metadata_output_file", input_type=File(optional=True), prefix="--metadata_output_file", doc=InputDocumentation(doc="The metadata output file. By default the metadata\nfile is written to the output directory.")), ToolInput(tag="in_gzip", input_type=File(optional=True), prefix="--gzip", doc=InputDocumentation(doc="GZip the output file.")), ToolInput(tag="in_no_peak_picking", input_type=Boolean(optional=True), prefix="--noPeakPicking", doc=InputDocumentation(doc="Don't use the peak picking provided by the native\nThermo library. By default peak picking is\nenabled.")), ToolInput(tag="in_no_zlib_compression", input_type=Boolean(optional=True), prefix="--noZlibCompression", doc=InputDocumentation(doc="Don't use zlib compression for the m/z ratios and\nintensities. By default zlib compression is\nenabled.")), ToolInput(tag="in_logging", input_type=Int(optional=True), prefix="--logging", doc=InputDocumentation(doc="Optional logging level: 0 for silent, 1 for")), ToolInput(tag="in_s_three_url", input_type=Boolean(optional=True), prefix="--s3_url", doc=InputDocumentation(doc="[=VALUE]       Optional property to write directly the data into\nS3 Storage.")), ToolInput(tag="in_s_three_access_key_id", input_type=File(optional=True), prefix="--s3_accesskeyid", doc=InputDocumentation(doc="[=VALUE]\nOptional key for the S3 bucket to write the file\noutput.")), ToolInput(tag="in_s_three_secret_accesskey", input_type=File(optional=True), prefix="--s3_secretaccesskey", doc=InputDocumentation(doc="[=VALUE]\nOptional key for the S3 bucket to write the file\noutput.")), ToolInput(tag="in_s_three_bucket_name", input_type=Boolean(optional=True), prefix="--s3_bucketName", doc=InputDocumentation(doc="[=VALUE]\nS3 bucket name\n")), ToolInput(tag="in_verbose_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-e, --ignoreInstrumentErrors"))], outputs=[ToolOutput(tag="out_metadata_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_metadata_output_file", type_hint=File()), doc=OutputDocumentation(doc="The metadata output file. By default the metadata\nfile is written to the output directory.")), ToolOutput(tag="out_gzip", output_type=File(optional=True), selector=InputSelector(input_to_select="in_gzip", type_hint=File()), doc=OutputDocumentation(doc="GZip the output file.")), ToolOutput(tag="out_s_three_access_key_id", output_type=File(optional=True), selector=InputSelector(input_to_select="in_s_three_access_key_id", type_hint=File()), doc=OutputDocumentation(doc="[=VALUE]\nOptional key for the S3 bucket to write the file\noutput.")), ToolOutput(tag="out_s_three_secret_accesskey", output_type=File(optional=True), selector=InputSelector(input_to_select="in_s_three_secret_accesskey", type_hint=File()), doc=OutputDocumentation(doc="[=VALUE]\nOptional key for the S3 bucket to write the file\noutput."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Thermorawfileparser_Sh_V0_1_0().translate("wdl", allow_empty_container=True)

