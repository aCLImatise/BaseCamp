from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Int

Subjunc_V0_1_0 = CommandToolBuilder(tool="subjunc", base_command=["subjunc"], inputs=[ToolInput(tag="in_base_name_index", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc="Base name of the index.")), ToolInput(tag="in_name_pairedend_file", input_type=File(optional=True), prefix="-r", doc=InputDocumentation(doc="Name of an input read file. If paired-end, this should be\nthe first read file (typically containing 'R1'in the file\nname) and the second should be provided via '-R'.\nAcceptable formats include gzipped FASTQ, FASTQ, gzipped\nFASTA and FASTA.\nThese formats are identified automatically.")), ToolInput(tag="in_name_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Name of an output file. By default, the output is in BAM\nformat. Omitting this option makes the output be written to\nSTDOUT.")), ToolInput(tag="in_name_file_name", input_type=File(optional=True), prefix="-R", doc=InputDocumentation(doc="Name of the second read file in paired-end data (typically\ncontaining 'R2' the file name).")), ToolInput(tag="in_sam_input", input_type=Boolean(optional=True), prefix="--SAMinput", doc=InputDocumentation(doc="Input reads are in SAM format.")), ToolInput(tag="in_bam_input", input_type=Boolean(optional=True), prefix="--BAMinput", doc=InputDocumentation(doc="Input reads are in BAM format.")), ToolInput(tag="in_sam_output", input_type=Boolean(optional=True), prefix="--SAMoutput", doc=InputDocumentation(doc="Save mapping results in SAM format.")), ToolInput(tag="in_offset_value_added", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc="<3:6>          Offset value added to the Phred quality score of each read\nbase. '3' for phred+33 and '6' for phred+64. '3' by default.")), ToolInput(tag="in_number_selected_subreads", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="Number of selected subreads, 14 by default.")), ToolInput(tag="in_consensus_threshold_reporting", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Consensus threshold for reporting a hit (minimal number of\nsubreads that map in consensus) . If paired-end, this gives\nthe consensus threshold for the anchor read (anchor read\nreceives more votes than the other read in the same pair).\n1 by default.")), ToolInput(tag="in_consensus_threshold_non", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="Consensus threshold for the non- anchor read in a pair. 1 by")), ToolInput(tag="in_multi_mapping", input_type=Boolean(optional=True), prefix="--multiMapping", doc=InputDocumentation(doc="Report multi-mapping reads in addition to uniquely mapped\nreads. Use '-B' to set the maximum number of equally-best\nalignments to be reported.")), ToolInput(tag="in_maximum_number_equallybest", input_type=Int(optional=True), prefix="-B", doc=InputDocumentation(doc="Maximum number of equally-best alignments to be reported for\na multi-mapping read. Equally-best alignments have the same\nnumber of mis-matched bases. 1 by default.")), ToolInput(tag="in_maximum_length_bp", input_type=Int(optional=True), prefix="-I", doc=InputDocumentation(doc="Maximum length (in bp) of indels that can be detected. 5 by\ndefault. Indels of up to 200bp long can be detected.")), ToolInput(tag="in_complex_indels", input_type=Boolean(optional=True), prefix="--complexIndels", doc=InputDocumentation(doc="Detect multiple short indels that are in close proximity\n(they can be as close as 1bp apart from each other).")), ToolInput(tag="in_trim_five", input_type=Int(optional=True), prefix="--trim5", doc=InputDocumentation(doc="Trim off <int> number of bases from 5' end of each read. 0\nby default.")), ToolInput(tag="in_trim_three", input_type=Int(optional=True), prefix="--trim3", doc=InputDocumentation(doc="Trim off <int> number of bases from 3' end of each read. 0\nby default.")), ToolInput(tag="in_minimum_fragmentinsert_length", input_type=Int(optional=True), prefix="-d", doc=InputDocumentation(doc="Minimum fragment/insert length, 50bp by default.")), ToolInput(tag="in_maximum_fragmentinsert_length", input_type=Int(optional=True), prefix="-D", doc=InputDocumentation(doc="Maximum fragment/insert length, 600bp by default.")), ToolInput(tag="in_fffrrf_orientation_forwardreverse", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="<ff:fr:rf>     Orientation of first and second reads, 'fr' by default (\nforward/reverse).")), ToolInput(tag="in_number_cpu_threads", input_type=Int(optional=True), prefix="-T", doc=InputDocumentation(doc="Number of CPU threads used, 1 by default.")), ToolInput(tag="in_rg_id", input_type=String(optional=True), prefix="--rg-id", doc=InputDocumentation(doc="Add read group ID to the output.")), ToolInput(tag="in_rg", input_type=String(optional=True), prefix="--rg", doc=InputDocumentation(doc="Add <tag:value> to the read group (RG) header in the output.")), ToolInput(tag="in_keep_read_order", input_type=Boolean(optional=True), prefix="--keepReadOrder", doc=InputDocumentation(doc="Keep order of reads in BAM output the same as that in the\ninput file. Reads from the same pair are always placed next\nto each other no matter this option is specified or not.")), ToolInput(tag="in_sort_reads_by_coordinates", input_type=File(optional=True), prefix="--sortReadsByCoordinates", doc=InputDocumentation(doc="location-sorted reads. This option is\napplicable for BAM output only. A BAI index file is also\ngenerated for each BAM file so the BAM files can be directly\nloaded into a genome browser.")), ToolInput(tag="in_convert_colorspace_read", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="Convert color-space read bases to base-space read bases in\nthe mapping output. Note that read mapping is performed at\ncolor-space.")), ToolInput(tag="in_dp_gap_open", input_type=Int(optional=True), prefix="--DPGapOpen", doc=InputDocumentation(doc="Penalty for gap opening in short indel detection. -1 by")), ToolInput(tag="in_all_junctions", input_type=Boolean(optional=True), prefix="--allJunctions", doc=InputDocumentation(doc="Detect exon-exon junctions (both canonical and non-canonical\njunctions) and structural variants in RNA-seq data. Refer to\nUsers Guide for reporting of junctions and fusions.")), ToolInput(tag="in_name_annotation_file", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="Name of an annotation file (gzipped file is accepted).\nGTF/GFF format by default. See -F option for more format\ninformation.")), ToolInput(tag="in_specify_format_provided", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="Specify format of the provided annotation file. Acceptable\nformats include 'GTF' (or compatible GFF format) and\n'SAF'. 'GTF' by default. For SAF format, please refer to\nUsers Guide.")), ToolInput(tag="in_provide_alias_file", input_type=Boolean(optional=True), prefix="-A", doc=InputDocumentation(doc="Provide a chromosome name alias file to match chr names in\nannotation with those in the reads. This should be a two-\ncolumn comma-delimited text file. Its first column should\ninclude chr names in the annotation and its second column\nshould include chr names in the index. Chr names are case\nsensitive. No column header should be included in the\nfile.")), ToolInput(tag="in_gtf_feature", input_type=String(optional=True), prefix="--gtfFeature", doc=InputDocumentation(doc="Specify feature type in GTF annotation. 'exon'\nby default. Features used for read counting will be\nextracted from annotation using the provided value.")), ToolInput(tag="in_gt_fattr", input_type=String(optional=True), prefix="--gtfAttr", doc=InputDocumentation(doc="Specify attribute type in GTF annotation. 'gene_id'\nby default. Meta-features used for read counting will be\nextracted from annotation using the provided value.")), ToolInput(tag="in_output_version_program", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Output version of the program."))], outputs=[ToolOutput(tag="out_name_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_name_output_file", type_hint=File()), doc=OutputDocumentation(doc="Name of an output file. By default, the output is in BAM\nformat. Omitting this option makes the output be written to\nSTDOUT.")), ToolOutput(tag="out_sort_reads_by_coordinates", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sort_reads_by_coordinates", type_hint=File()), doc=OutputDocumentation(doc="location-sorted reads. This option is\napplicable for BAM output only. A BAI index file is also\ngenerated for each BAM file so the BAM files can be directly\nloaded into a genome browser."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Subjunc_V0_1_0().translate("wdl", allow_empty_container=True)

