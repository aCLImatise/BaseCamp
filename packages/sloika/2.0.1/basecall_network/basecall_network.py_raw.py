from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Float, Boolean

Basecall_Network_Py_Raw_V0_1_0 = CommandToolBuilder(tool="basecall_network.py_raw", base_command=["basecall_network.py", "raw"], inputs=[ToolInput(tag="in_alphabet", input_type=String(optional=True), prefix="--alphabet", doc=InputDocumentation(doc="Alphabet of the sequences (default: b'ACGT')")), ToolInput(tag="in_compile", input_type=File(optional=True), prefix="--compile", doc=InputDocumentation(doc="File output compiled model (default: None)")), ToolInput(tag="in_input_strand_list", input_type=File(optional=True), prefix="--input_strand_list", doc=InputDocumentation(doc="Strand summary file containing subset (default: None)")), ToolInput(tag="in_jobs", input_type=Int(optional=True), prefix="--jobs", doc=InputDocumentation(doc="Number of threads to use when processing data\n(default: 1)")), ToolInput(tag="in_km_er_len", input_type=Int(optional=True), prefix="--kmer_len", doc=InputDocumentation(doc="Length of kmer (default: 5)")), ToolInput(tag="in_limit", input_type=Int(optional=True), prefix="--limit", doc=InputDocumentation(doc="Limit number of reads to process (default: None)")), ToolInput(tag="in_min_prob", input_type=Float(optional=True), prefix="--min_prob", doc=InputDocumentation(doc="Minimum allowed probabiility for basecalls (default:\n1e-05)")), ToolInput(tag="in_skip", input_type=Float(optional=True), prefix="--skip", doc=InputDocumentation(doc="Skip penalty (default: 0.0)")), ToolInput(tag="in_trans", input_type=String(optional=True), prefix="--trans", doc=InputDocumentation(doc="step skip\nBase transition probabilities (default: None)")), ToolInput(tag="in_no_transducer", input_type=Boolean(optional=True), prefix="--no-transducer", doc=InputDocumentation(doc="Model is transducer (Default: --transducer) (default:\nTrue)")), ToolInput(tag="in_no_bad", input_type=Boolean(optional=True), prefix="--no-bad", doc=InputDocumentation(doc="Model emits bad signal blocks as a separate state\n(Default: --bad) (default: True)")), ToolInput(tag="in_open_pore_fraction", input_type=Int(optional=True), prefix="--open_pore_fraction", doc=InputDocumentation(doc="Max fraction of signal to trim due to open pore\n(default: 0)")), ToolInput(tag="in_trim", input_type=Int(optional=True), prefix="--trim", doc=InputDocumentation(doc="end  Number of samples to trim off start and end (default:\n(200, 10))\n")), ToolInput(tag="in_model", input_type=String(), position=0, doc=InputDocumentation(doc="Pickled model file")), ToolInput(tag="in_input_folder", input_type=String(), position=1, doc=InputDocumentation(doc="Directory containing single-read fast5 files"))], outputs=[ToolOutput(tag="out_compile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_compile", type_hint=File()), doc=OutputDocumentation(doc="File output compiled model (default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Basecall_Network_Py_Raw_V0_1_0().translate("wdl", allow_empty_container=True)

