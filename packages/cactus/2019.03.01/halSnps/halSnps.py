from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, String, File

Halsnps_V0_1_0 = CommandToolBuilder(tool="halSnps", base_command=["halSnps"], inputs=[ToolInput(tag="in_cache_bytes", input_type=Int(optional=True), prefix="--cacheBytes", doc=InputDocumentation(doc=":         maximum size in bytes of regular hdf5 cache [default =\n15728640]")), ToolInput(tag="in_cache_mdc", input_type=Int(optional=True), prefix="--cacheMDC", doc=InputDocumentation(doc=":           number of metadata slots in hdf5 cache [default = 113]")), ToolInput(tag="in_cacher_dc", input_type=Int(optional=True), prefix="--cacheRDC", doc=InputDocumentation(doc=":           number of regular slots in hdf5 cache.  should be a\nprime number ~= 10 * DefaultCacheRDCBytes / chunk\n[default = 599999]")), ToolInput(tag="in_cache_w_zero", input_type=Int(optional=True), prefix="--cacheW0", doc=InputDocumentation(doc=":            w0 parameter fro hdf5 cache [default = 0.75]")), ToolInput(tag="in_in_memory", input_type=Boolean(optional=True), prefix="--inMemory", doc=InputDocumentation(doc=":                   load all data in memory (and disable hdf5 cache)\n[default = 0]")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc=":             length of the reference genome (or sequence if\nspecified) to convert.  If set to 0, the entire thing\nis converted [default = 0]")), ToolInput(tag="in_min_species_for_snp", input_type=Int(optional=True), prefix="--minSpeciesForSnp", doc=InputDocumentation(doc=":   minimum number of species that must have a different\nbase than the reference for a SNP to be reported in the\nTSV [default = 1]")), ToolInput(tag="in_no_dupes", input_type=Boolean(optional=True), prefix="--noDupes", doc=InputDocumentation(doc=":                    do not consider paralogies while mapping [default = 0]")), ToolInput(tag="in_ref_sequence", input_type=String(optional=True), prefix="--refSequence", doc=InputDocumentation(doc=":        name of reference sequence within reference genome (all\nsequences if empty) [default = '']")), ToolInput(tag="in_start", input_type=Int(optional=True), prefix="--start", doc=InputDocumentation(doc=":              coordinate within reference genome (or sequence if\nspecified) to start at [default = 0]")), ToolInput(tag="in_tsv", input_type=File(optional=True), prefix="--tsv", doc=InputDocumentation(doc=":                path of tsv file to write snps to in reference genome\ncoordinates, and containing the base assignments for\neach genome [default = '']")), ToolInput(tag="in_unique", input_type=Boolean(optional=True), prefix="--unique", doc=InputDocumentation(doc=":                     Whether to ignore columns that are not canonical on the\nreference genome [default = 0]\n")), ToolInput(tag="in_hal_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_ref_genome", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_target_genomes", input_type=String(), position=2, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Halsnps_V0_1_0().translate("wdl", allow_empty_container=True)

