from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Float, File, Boolean, String

Hallodinterpolate_Py_V0_1_0 = CommandToolBuilder(tool="halLodInterpolate.py", base_command=["halLodInterpolate.py"], inputs=[ToolInput(tag="in_max_block", input_type=Int(optional=True), prefix="--maxBlock", doc=InputDocumentation(doc="maximum desired number of blocks to ever display at\nonce. (default: 223)")), ToolInput(tag="in_scale", input_type=Float(optional=True), prefix="--scale", doc=InputDocumentation(doc="scaling factor between two successive levels of detail\n(default: 2.5)")), ToolInput(tag="in_out_haldir", input_type=File(optional=True), prefix="--outHalDir", doc=InputDocumentation(doc="path of directory where interpolated hal files are\nstored. By default they will be stored in the same\ndirectory as the input file (default: None)")), ToolInput(tag="in_resume", input_type=Boolean(optional=True), prefix="--resume", doc=InputDocumentation(doc="do not overwrite existing hal lod files if they exist.\n(default: False)")), ToolInput(tag="in_max_dna", input_type=Int(optional=True), prefix="--maxDNA", doc=InputDocumentation(doc="maximum DNA sequence query. Generated levels of detail\nwith associated minimum query ranges > maxDNA will not\ncontain sequence information. -1 can be used to\nspecify that all levels will get sequence (default: 0)")), ToolInput(tag="in_abs_path", input_type=Boolean(optional=True), prefix="--absPath", doc=InputDocumentation(doc="write absolute path of created HAL files in the\noutLodFile. By default, the paths are relative to the\npath of the outLodFile. (default: False)")), ToolInput(tag="in_trans", input_type=Boolean(optional=True), prefix="--trans", doc=InputDocumentation(doc="Generate level of detail X from X-1. By default, all\nlevels of detail are generated from the original HAL\n(X=0) (default: False)")), ToolInput(tag="in_in_memory", input_type=Boolean(optional=True), prefix="--inMemory", doc=InputDocumentation(doc="Load entire hdf5 arrays into memory, overriding cache.\n(default: False)")), ToolInput(tag="in_probe_frac", input_type=String(optional=True), prefix="--probeFrac", doc=InputDocumentation(doc="Fraction of bases in step-interval to sample while\nlooking for most aligned column. Use default from\nhalLodExtract if not set. To see default value, use\nhalLodExtract --help (default: None)")), ToolInput(tag="in_min_seq_frac", input_type=Int(optional=True), prefix="--minSeqFrac", doc=InputDocumentation(doc="Minumum sequence length to sample as fraction of step\nsize: ie sequences with length <= floor(minSeqFrac *\nstep) are ignored.Use default from halLodExtract if\nnot set. To see default value, use halLodExtract\n--help (default: 0.5)")), ToolInput(tag="in_min_cov_frac", input_type=Int(optional=True), prefix="--minCovFrac", doc=InputDocumentation(doc="Minimum fraction of a genome that must be covered by\nsequences that exceed --minSeqFrac * step. LODs that\nwould violate this threshold will not be generated (or\ndisplayed in the browser). This is seen a better than\nthe alternative, which is to produce unreasonably\nsparse LODs because half the sequences were not\nsampled (default: 0.9)")), ToolInput(tag="in_scale_cor_fac", input_type=Int(optional=True), prefix="--scaleCorFac", doc=InputDocumentation(doc="Correction factor for scaling. Assume that scaling by\n(X * scaleCorFactor) is required to reduce the number\nof blocks by X. (default: 1.0)")), ToolInput(tag="in_num_proc", input_type=Int(optional=True), prefix="--numProc", doc=InputDocumentation(doc="Number of concurrent processes (default: 1)")), ToolInput(tag="in_chunk", input_type=Int(optional=True), prefix="--chunk", doc=InputDocumentation(doc="Chunk size of output hal files. (default: None)")), ToolInput(tag="in_min_lod_zero", input_type=Int(optional=True), prefix="--minLod0", doc=InputDocumentation(doc="Override other parameters to ensure that Lod0\n(original hal) gets range from 0 to at least the\nspecified value (default: 0)")), ToolInput(tag="in_cut_off", input_type=Int(optional=True), prefix="--cutOff", doc=InputDocumentation(doc="Cut-off fraction for determining highest level of\ndetail. Normally, --maxBlocks is used to determine the\nstep-size for each LOD, but the exponential scaling\ncan cause this to create final (highest) LODs that are\ntoo sparse. The lowerthis parameter is (must stay >\n0), the sooner the LOD generation process will be cut\noff, and the more fine-grained the highest LOD will be\n(default: 0.75)\n")), ToolInput(tag="in_hal", input_type=String(), position=0, doc=InputDocumentation(doc="input hal")), ToolInput(tag="in_out_lod_file", input_type=String(), position=1, doc=InputDocumentation(doc="output text file with links to interpolated hal files.\nwith each file is associated a value stating its\nminimum suggested query range (in bases)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hallodinterpolate_Py_V0_1_0().translate("wdl", allow_empty_container=True)

