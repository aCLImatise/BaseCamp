from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean, File

Hal2Mafmp_Py_V0_1_0 = CommandToolBuilder(tool="hal2mafMP.py", base_command=["hal2mafMP.py"], inputs=[ToolInput(tag="in_num_proc", input_type=Int(optional=True), prefix="--numProc", doc=InputDocumentation(doc="Maximum number of processes to create. If neither")), ToolInput(tag="in_split_by_sequence", input_type=String(optional=True), prefix="--splitBySequence", doc=InputDocumentation(doc="specified, then")), ToolInput(tag="in_small_size", input_type=Int(optional=True), prefix="--smallSize", doc=InputDocumentation(doc="If --splitBySequence is used, then all sequences with\nlength less than smallSize will be lumped into a\nsingle output MAF called 'mafFile_small.maf' (default:\n0)")), ToolInput(tag="in_cache_mdc", input_type=Int(optional=True), prefix="--cacheMDC", doc=InputDocumentation(doc="number of metadata slots in hdf5 cache (default: None)")), ToolInput(tag="in_cacher_dc", input_type=Int(optional=True), prefix="--cacheRDC", doc=InputDocumentation(doc="number of regular slots in hdf5 cache. should be a\nprime number ~= 10 * DefaultCacheRDCBytes / chunk\n(default: None)")), ToolInput(tag="in_cache_bytes", input_type=Int(optional=True), prefix="--cacheBytes", doc=InputDocumentation(doc="maximum size in bytes of regular hdf5 cache (default:\nNone)")), ToolInput(tag="in_cache_w_zero", input_type=Int(optional=True), prefix="--cacheW0", doc=InputDocumentation(doc="w0 parameter fro hdf5 cache (default: None)")), ToolInput(tag="in_in_memory", input_type=Boolean(optional=True), prefix="--inMemory", doc=InputDocumentation(doc="load all data in memory (& disable hdf5 cache)\n(default: False)")), ToolInput(tag="in_ref_genome", input_type=String(optional=True), prefix="--refGenome", doc=InputDocumentation(doc="name of reference genome (root if empty) (default:\nNone)")), ToolInput(tag="in_ref_sequence", input_type=String(optional=True), prefix="--refSequence", doc=InputDocumentation(doc="name of reference sequence within reference genome\n(all sequences if empty) (default: None)")), ToolInput(tag="in_ref_targets", input_type=File(optional=True), prefix="--refTargets", doc=InputDocumentation(doc="bed file coordinates of intervals in the reference\ngenome to export (default: None)")), ToolInput(tag="in_start", input_type=String(optional=True), prefix="--start", doc=InputDocumentation(doc="coordinate within reference genome (or sequence if\nspecified) to start at (default: None)")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc="length of the reference genome (or sequence if\nspecified) to convert. If set to 0, the entire thing\nis converted (default: None)")), ToolInput(tag="in_root_genome", input_type=String(optional=True), prefix="--rootGenome", doc=InputDocumentation(doc="name of root genome (none if empty) (default: None)")), ToolInput(tag="in_target_genomes", input_type=String(optional=True), prefix="--targetGenomes", doc=InputDocumentation(doc="comma-separated (no spaces) list of target genomes\n(others are excluded) (vist all if empty) (default:\nNone)")), ToolInput(tag="in_max_ref_gap", input_type=Int(optional=True), prefix="--maxRefGap", doc=InputDocumentation(doc="maximum gap length in reference (default: None)")), ToolInput(tag="in_no_dupes", input_type=Boolean(optional=True), prefix="--noDupes", doc=InputDocumentation(doc="ignore paralogy edges (default: False)")), ToolInput(tag="in_no_ancestors", input_type=Boolean(optional=True), prefix="--noAncestors", doc=InputDocumentation(doc="don't write ancestral sequences. IMPORTANT: Must be\nused in conjunction with --refGenome to set a non-\nancestral genome as the reference because the default\nreference is the root. (default: False)")), ToolInput(tag="in_only_sequence_names", input_type=Boolean(optional=True), prefix="--onlySequenceNames", doc=InputDocumentation(doc="use sequence names for output names. By default, the\nUCSC convention of Genome.Sequence is used (default:\nFalse)\n")), ToolInput(tag="in_hal_file", input_type=String(), position=0, doc=InputDocumentation(doc="Input HAL file")), ToolInput(tag="in_maf_file", input_type=String(), position=1, doc=InputDocumentation(doc="Output MAF file"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hal2Mafmp_Py_V0_1_0().translate("wdl", allow_empty_container=True)

