!Command
command:
- cactus_bar
positional: []
named:
- !Flag
  description: ': Set the log level'
  synonyms:
  - -a
  - --logLevel
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': The location of the flower disk directory'
  synonyms:
  - -b
  - --cactusDisk
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '(int >= 0) : The number of spanning trees construct in forming the
    set of pairwise alignments to include. If the number of pairwise alignments is
    less than the product of the total number of sequences and the number of spanning
    trees then all pairwise alignments will be included.'
  synonyms:
  - -i
  - --spanningTrees
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '(int  >= 0 ) : The maximum length of a sequence to align, only the
    prefix and suffix maximum length bases are aligned'
  synonyms:
  - -j
  - --maximumLength
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': Use banding to speed up the alignments'
  synonyms:
  - -k
  - --useBanding
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': (float >= 0) The gap gamma (as in the AMAP function)'
  synonyms:
  - -l
  - --gapGamma
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': (float [0, 1]) The match gamma (the avg. weight or greater to be
    allowed in the alignment)'
  synonyms:
  - -L
  - --matchGamma
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': (int >= 0)  No dp matrix bigger than this number squared will be
    computed.'
  synonyms:
  - -o
  - --splitMatrixBiggerThanThis
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': (int >= 0)  Any matrix bigger than this number squared will be broken
    apart with banding.'
  synonyms:
  - -p
  - --anchorMatrixBiggerThanThis
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': (int >= 0) Any matrix bigger than this after initial banding will
    be broken apart without repeat masking of the sequences'
  synonyms:
  - -q
  - --repeatMaskMatrixBiggerThanThis
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': (int >= 0 and even) Number of x-y diagonals to expand around anchors'
  synonyms:
  - -r
  - --digaonalExpansion
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': (int >= 0) Amount to trim from ends of each anchor'
  synonyms:
  - -t
  - --constraintDiagonalTrim
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': (int >= 0) Minimum number of sequences in a block to be included
    in the output graph'
  synonyms:
  - -u
  - --minimumDegree
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': Align ambiguity characters (anything not ACTGactg) as a wildcard'
  synonyms:
  - -w
  - --alignAmbiguityCharacters
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': Prune out alignments of sequences that terminates in free stubs
    stubs'
  synonyms:
  - -y
  - --pruneOutStubAlignments
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': Number of ingroup sequences required in a block.'
  synonyms:
  - -A
  - --minimumIngroupDegree
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': Number of outgroup sequences required in a block.'
  synonyms:
  - -B
  - --minimumOutgroupDegree
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': Precomputed end alignments.'
  synonyms:
  - -D
  - --precomputedAlignments
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[fileName] : If this output file is provided then bar will read stdin
    first to parse the flower, then to parse the names of the end alignments to precompute.
    The results will be placed in this file.'
  synonyms:
  - -E
  - --endAlignmentsToPrecomputeOutputFile
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': Use progressive merging instead of poset merging for constructing
    multiple sequence alignments.'
  synonyms:
  - -F
  - --useProgressiveMerging
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': Decide which end alignments to compute separately.'
  synonyms:
  - -G
  - --calculateWhichEndsToComputeSeparately
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': The size of sequences in an end at which point to compute it separately.'
  synonyms:
  - -I
  - --largeEndSize
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ": Binary coverage file containing ingroup regions that are covered\
    \ by outgroups. These regions will be 'rescued' into single-degree blocks if they\
    \ haven't been aligned to anything after the bar phase finished."
  synonyms:
  - -J
  - --ingroupCoverageFile
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': Unaligned but covered segments must be at least this size to be
    rescued.'
  synonyms:
  - -K
  - --minimumSizeToRescue
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': Unaligned segments must have at least this proportion of their bases
    covered by an outgroup to be rescued.'
  synonyms:
  - -M
  - --minimumCoverageToRescue
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: ': Print this help screen'
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "cactus_baseAligner [flower-names, ordered by order they should be processed],\
  \ version 0.2\n-a --logLevel : Set the log level\n-b --cactusDisk : The location\
  \ of the flower disk directory\n-i --spanningTrees (int >= 0) : The number of spanning\
  \ trees construct in forming the set of pairwise alignments to include. If the number\
  \ of pairwise alignments is less than the product of the total number of sequences\
  \ and the number of spanning trees then all pairwise alignments will be included.\n\
  -j --maximumLength (int  >= 0 ) : The maximum length of a sequence to align, only\
  \ the prefix and suffix maximum length bases are aligned\n-k --useBanding : Use\
  \ banding to speed up the alignments\n-l --gapGamma : (float >= 0) The gap gamma\
  \ (as in the AMAP function)\n-L --matchGamma : (float [0, 1]) The match gamma (the\
  \ avg. weight or greater to be allowed in the alignment)\n-o --splitMatrixBiggerThanThis\
  \ : (int >= 0)  No dp matrix bigger than this number squared will be computed.\n\
  -p --anchorMatrixBiggerThanThis : (int >= 0)  Any matrix bigger than this number\
  \ squared will be broken apart with banding.\n-q --repeatMaskMatrixBiggerThanThis\
  \ : (int >= 0) Any matrix bigger than this after initial banding will be broken\
  \ apart without repeat masking of the sequences\n-r --digaonalExpansion : (int >=\
  \ 0 and even) Number of x-y diagonals to expand around anchors\n-t --constraintDiagonalTrim\
  \ : (int >= 0) Amount to trim from ends of each anchor\n-u --minimumDegree : (int\
  \ >= 0) Minimum number of sequences in a block to be included in the output graph\n\
  -w --alignAmbiguityCharacters : Align ambiguity characters (anything not ACTGactg)\
  \ as a wildcard\n-y --pruneOutStubAlignments : Prune out alignments of sequences\
  \ that terminates in free stubs stubs\n-A --minimumIngroupDegree : Number of ingroup\
  \ sequences required in a block.\n-B --minimumOutgroupDegree : Number of outgroup\
  \ sequences required in a block.\n-D --precomputedAlignments : Precomputed end alignments.\n\
  -E --endAlignmentsToPrecomputeOutputFile [fileName] : If this output file is provided\
  \ then bar will read stdin first to parse the flower, then to parse the names of\
  \ the end alignments to precompute. The results will be placed in this file.\n-F\
  \ --useProgressiveMerging : Use progressive merging instead of poset merging for\
  \ constructing multiple sequence alignments.\n-G --calculateWhichEndsToComputeSeparately\
  \ : Decide which end alignments to compute separately.\n-I --largeEndSize : The\
  \ size of sequences in an end at which point to compute it separately.\n-J --ingroupCoverageFile\
  \ : Binary coverage file containing ingroup regions that are covered by outgroups.\
  \ These regions will be 'rescued' into single-degree blocks if they haven't been\
  \ aligned to anything after the bar phase finished.\n-K --minimumSizeToRescue :\
  \ Unaligned but covered segments must be at least this size to be rescued.\n-M --minimumCoverageToRescue\
  \ : Unaligned segments must have at least this proportion of their bases covered\
  \ by an outgroup to be rescued.\n-h --help : Print this help screen\n"
generated_using:
- --help
