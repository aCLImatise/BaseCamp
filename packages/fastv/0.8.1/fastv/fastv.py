from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Fastv_V0_1_0 = CommandToolBuilder(tool="fastv", base_command=["fastv"], inputs=[ToolInput(tag="in_in_one", input_type=Boolean(optional=True), prefix="--in1", doc=InputDocumentation(doc="read1 input file name (string [=])")), ToolInput(tag="in_in_two", input_type=Boolean(optional=True), prefix="--in2", doc=InputDocumentation(doc="read2 input file name (string [=])")), ToolInput(tag="in_out_one", input_type=Boolean(optional=True), prefix="--out1", doc=InputDocumentation(doc="file name to store read1 with on-target sequences (string [=])")), ToolInput(tag="in_out_two", input_type=Boolean(optional=True), prefix="--out2", doc=InputDocumentation(doc="file name to store read2 with on-target sequences (string [=])")), ToolInput(tag="in_km_er_collection", input_type=Boolean(optional=True), prefix="--kmer_collection", doc=InputDocumentation(doc="the unique k-mer collection file in fasta format, see an example: http://opengene.org/kmer_collection.fasta (string [=])")), ToolInput(tag="in_km_er", input_type=Boolean(optional=True), prefix="--kmer", doc=InputDocumentation(doc="the unique k-mer file of the detection target in fasta format. data/SARS-CoV-2.kmer.fa will be used if none of k-mer/Genomes/k-mer_Collection file is specified (string [=])")), ToolInput(tag="in_genomes", input_type=Boolean(optional=True), prefix="--genomes", doc=InputDocumentation(doc="the genomes file of the detection target in fasta format. data/SARS-CoV-2.genomes.fa will be used if none of k-mer/Genomes/k-mer_Collection file is specified (string [=])")), ToolInput(tag="in_positive_threshold", input_type=Boolean(optional=True), prefix="--positive_threshold", doc=InputDocumentation(doc="the data is considered as POSITIVE, when its mean coverage of unique kmer >= positive_threshold (0.001 ~ 100). 0.1 by default. (float [=0.1])")), ToolInput(tag="in_depth_threshold", input_type=Boolean(optional=True), prefix="--depth_threshold", doc=InputDocumentation(doc="For coverage calculation. A region is considered covered when its mean depth >= depth_threshold (0.001 ~ 1000). 1.0 by default. (float [=1])")), ToolInput(tag="in_ed_threshold", input_type=Boolean(optional=True), prefix="--ed_threshold", doc=InputDocumentation(doc="If the edit distance of a sequence and a genome region is <=ed_threshold, then consider it a match (0 ~ 50). 8 by default. (int [=8])")), ToolInput(tag="in_long_read_threshold", input_type=Boolean(optional=True), prefix="--long_read_threshold", doc=InputDocumentation(doc="A read will be considered as long read if its length >= long_read_threshold (100 ~ 10000). 200 by default. (int [=200])")), ToolInput(tag="in_read_segment_len", input_type=Boolean(optional=True), prefix="--read_segment_len", doc=InputDocumentation(doc="A long read will be splitted to read segments, with each <= read_segment_len (50 ~ 5000, should be < long_read_threshold). 100 by default. (int [=100])")), ToolInput(tag="in_bin_size", input_type=Boolean(optional=True), prefix="--bin_size", doc=InputDocumentation(doc="For coverage calculation. The genome is splitted to many bins, with each bin has a length of bin_size (1 ~ 100000), default 0 means adaptive. (int [=0])")), ToolInput(tag="in_json", input_type=Boolean(optional=True), prefix="--json", doc=InputDocumentation(doc="the json format report file name (string [=fastv.json])")), ToolInput(tag="in_report_title", input_type=Boolean(optional=True), prefix="--report_title", doc=InputDocumentation(doc="should be quoted with ' or ', default is 'fastv report' (string [=fastv report])")), ToolInput(tag="in_thread", input_type=Boolean(optional=True), prefix="--thread", doc=InputDocumentation(doc="worker thread number, default is 4 (int [=4])")), ToolInput(tag="in_phred_six_four", input_type=Boolean(optional=True), prefix="--phred64", doc=InputDocumentation(doc="indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)")), ToolInput(tag="in_compression", input_type=Boolean(optional=True), prefix="--compression", doc=InputDocumentation(doc="compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])")), ToolInput(tag="in_stdin", input_type=Boolean(optional=True), prefix="--stdin", doc=InputDocumentation(doc="input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.")), ToolInput(tag="in_stdout", input_type=Boolean(optional=True), prefix="--stdout", doc=InputDocumentation(doc="stream passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end output. Disabled by default.")), ToolInput(tag="in_interleaved_in", input_type=Boolean(optional=True), prefix="--interleaved_in", doc=InputDocumentation(doc="indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.")), ToolInput(tag="in_reads_to_process", input_type=Boolean(optional=True), prefix="--reads_to_process", doc=InputDocumentation(doc="specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])")), ToolInput(tag="in_dont_overwrite", input_type=Boolean(optional=True), prefix="--dont_overwrite", doc=InputDocumentation(doc="don't overwrite existing files. Overwritting is allowed by default.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="output verbose log information (i.e. when every 1M reads are processed).")), ToolInput(tag="in_disable_adapter_trimming", input_type=Boolean(optional=True), prefix="--disable_adapter_trimming", doc=InputDocumentation(doc="adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled")), ToolInput(tag="in_adapter_sequence", input_type=Boolean(optional=True), prefix="--adapter_sequence", doc=InputDocumentation(doc="the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])")), ToolInput(tag="in_adapter_sequence_r_two", input_type=Boolean(optional=True), prefix="--adapter_sequence_r2", doc=InputDocumentation(doc="the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=auto])")), ToolInput(tag="in_adapter_fast_a", input_type=Boolean(optional=True), prefix="--adapter_fasta", doc=InputDocumentation(doc="specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])")), ToolInput(tag="in_detect_adapter_for_pe", input_type=Boolean(optional=True), prefix="--detect_adapter_for_pe", doc=InputDocumentation(doc="by default, the auto-detection for adapter is for SE data input only, turn on this option to enable it for PE data.")), ToolInput(tag="in_trim_front_one", input_type=Boolean(optional=True), prefix="--trim_front1", doc=InputDocumentation(doc="trimming how many bases in front for read1, default is 0 (int [=0])")), ToolInput(tag="in_trim_tail_one", input_type=Boolean(optional=True), prefix="--trim_tail1", doc=InputDocumentation(doc="trimming how many bases in tail for read1, default is 0 (int [=0])")), ToolInput(tag="in_max_len_one", input_type=Boolean(optional=True), prefix="--max_len1", doc=InputDocumentation(doc="if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])")), ToolInput(tag="in_trim_front_two", input_type=Boolean(optional=True), prefix="--trim_front2", doc=InputDocumentation(doc="trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])")), ToolInput(tag="in_trim_tail_two", input_type=Boolean(optional=True), prefix="--trim_tail2", doc=InputDocumentation(doc="trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])")), ToolInput(tag="in_max_len_two", input_type=Boolean(optional=True), prefix="--max_len2", doc=InputDocumentation(doc="if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])")), ToolInput(tag="in_poly_g_min_len", input_type=Boolean(optional=True), prefix="--poly_g_min_len", doc=InputDocumentation(doc="the minimum length to detect polyG in the read tail. 10 by default. (int [=10])")), ToolInput(tag="in_disable_trim_poly_g", input_type=Boolean(optional=True), prefix="--disable_trim_poly_g", doc=InputDocumentation(doc="disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data")), ToolInput(tag="in_trim_poly_x", input_type=Boolean(optional=True), prefix="--trim_poly_x", doc=InputDocumentation(doc="enable polyX trimming in 3' ends.")), ToolInput(tag="in_poly_x_min_len", input_type=Boolean(optional=True), prefix="--poly_x_min_len", doc=InputDocumentation(doc="the minimum length to detect polyX in the read tail. 10 by default. (int [=10])")), ToolInput(tag="in_cut_front", input_type=Boolean(optional=True), prefix="--cut_front", doc=InputDocumentation(doc="move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.")), ToolInput(tag="in_cut_tail", input_type=Boolean(optional=True), prefix="--cut_tail", doc=InputDocumentation(doc="move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.")), ToolInput(tag="in_cut_right", input_type=Boolean(optional=True), prefix="--cut_right", doc=InputDocumentation(doc="move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.")), ToolInput(tag="in_cut_window_size", input_type=Boolean(optional=True), prefix="--cut_window_size", doc=InputDocumentation(doc="the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])")), ToolInput(tag="in_cut_mean_quality", input_type=Boolean(optional=True), prefix="--cut_mean_quality", doc=InputDocumentation(doc="the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])")), ToolInput(tag="in_cut_front_window_size", input_type=Boolean(optional=True), prefix="--cut_front_window_size", doc=InputDocumentation(doc="the window size option of cut_front, default to cut_window_size if not specified (int [=4])")), ToolInput(tag="in_cut_front_mean_quality", input_type=Boolean(optional=True), prefix="--cut_front_mean_quality", doc=InputDocumentation(doc="the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])")), ToolInput(tag="in_cut_tail_window_size", input_type=Boolean(optional=True), prefix="--cut_tail_window_size", doc=InputDocumentation(doc="the window size option of cut_tail, default to cut_window_size if not specified (int [=4])")), ToolInput(tag="in_cut_tail_mean_quality", input_type=Boolean(optional=True), prefix="--cut_tail_mean_quality", doc=InputDocumentation(doc="the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])")), ToolInput(tag="in_cut_right_window_size", input_type=Boolean(optional=True), prefix="--cut_right_window_size", doc=InputDocumentation(doc="the window size option of cut_right, default to cut_window_size if not specified (int [=4])")), ToolInput(tag="in_cut_right_mean_quality", input_type=Boolean(optional=True), prefix="--cut_right_mean_quality", doc=InputDocumentation(doc="the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])")), ToolInput(tag="in_disable_quality_filtering", input_type=Boolean(optional=True), prefix="--disable_quality_filtering", doc=InputDocumentation(doc="quality filtering is enabled by default. If this option is specified, quality filtering is disabled")), ToolInput(tag="in_qualified_quality_phred", input_type=Boolean(optional=True), prefix="--qualified_quality_phred", doc=InputDocumentation(doc="the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])")), ToolInput(tag="in_unqualified_percent_limit", input_type=Boolean(optional=True), prefix="--unqualified_percent_limit", doc=InputDocumentation(doc="how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])")), ToolInput(tag="in_n_base_limit", input_type=Boolean(optional=True), prefix="--n_base_limit", doc=InputDocumentation(doc="if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])")), ToolInput(tag="in_average_qual", input_type=Boolean(optional=True), prefix="--average_qual", doc=InputDocumentation(doc="if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])")), ToolInput(tag="in_disable_length_filtering", input_type=Boolean(optional=True), prefix="--disable_length_filtering", doc=InputDocumentation(doc="length filtering is enabled by default. If this option is specified, length filtering is disabled")), ToolInput(tag="in_length_required", input_type=Boolean(optional=True), prefix="--length_required", doc=InputDocumentation(doc="reads shorter than length_required will be discarded, default is 15. (int [=15])")), ToolInput(tag="in_length_limit", input_type=Boolean(optional=True), prefix="--length_limit", doc=InputDocumentation(doc="reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])")), ToolInput(tag="in_low_complexity_filter", input_type=Boolean(optional=True), prefix="--low_complexity_filter", doc=InputDocumentation(doc="enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).")), ToolInput(tag="in_complexity_threshold", input_type=Boolean(optional=True), prefix="--complexity_threshold", doc=InputDocumentation(doc="the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])")), ToolInput(tag="in_filter_by_index_one", input_type=File(optional=True), prefix="--filter_by_index1", doc=InputDocumentation(doc="specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])")), ToolInput(tag="in_filter_by_index_two", input_type=File(optional=True), prefix="--filter_by_index2", doc=InputDocumentation(doc="specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])")), ToolInput(tag="in_filter_by_index_threshold", input_type=Boolean(optional=True), prefix="--filter_by_index_threshold", doc=InputDocumentation(doc="the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])")), ToolInput(tag="in_correction", input_type=Boolean(optional=True), prefix="--correction", doc=InputDocumentation(doc="enable base correction in overlapped regions (only for PE data), default is disabled")), ToolInput(tag="in_overlap_len_require", input_type=Boolean(optional=True), prefix="--overlap_len_require", doc=InputDocumentation(doc="the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])")), ToolInput(tag="in_overlap_diff_limit", input_type=Boolean(optional=True), prefix="--overlap_diff_limit", doc=InputDocumentation(doc="the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])")), ToolInput(tag="in_overlap_diff_percent_limit", input_type=Boolean(optional=True), prefix="--overlap_diff_percent_limit", doc=InputDocumentation(doc="the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])")), ToolInput(tag="in_umi", input_type=Boolean(optional=True), prefix="--umi", doc=InputDocumentation(doc="enable unique molecular identifier (UMI) preprocessing")), ToolInput(tag="in_umi_loc", input_type=Boolean(optional=True), prefix="--umi_loc", doc=InputDocumentation(doc="specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])")), ToolInput(tag="in_umi_len", input_type=Boolean(optional=True), prefix="--umi_len", doc=InputDocumentation(doc="if the UMI is in read1/read2, its length should be provided (int [=0])")), ToolInput(tag="in_umi_prefix", input_type=Boolean(optional=True), prefix="--umi_prefix", doc=InputDocumentation(doc="if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])")), ToolInput(tag="in_umi_skip", input_type=Boolean(optional=True), prefix="--umi_skip", doc=InputDocumentation(doc="if the UMI is in read1/read2, fastv can skip several bases following UMI, default is 0 (int [=0])"))], outputs=[ToolOutput(tag="out_filter_by_index_one", output_type=File(optional=True), selector=InputSelector(input_to_select="in_filter_by_index_one", type_hint=File()), doc=OutputDocumentation(doc="specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])")), ToolOutput(tag="out_filter_by_index_two", output_type=File(optional=True), selector=InputSelector(input_to_select="in_filter_by_index_two", type_hint=File()), doc=OutputDocumentation(doc="specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])"))], container="quay.io/biocontainers/fastv:0.8.1--he513fc3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fastv_V0_1_0().translate("wdl")

