from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean

Micro_Razers_V0_1_0 = CommandToolBuilder(tool="micro_razers", base_command=["micro_razers"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Change output filename. (use - to dump to stdout in razers format)\nDefault: <READS FILE>.razers. Valid filetypes are: .razers and .sam.")), ToolInput(tag="in_recognition_rate", input_type=Int(optional=True), prefix="--recognition-rate", doc=InputDocumentation(doc="set the percent recognition rate In range [80..100]. Default: 100.")), ToolInput(tag="in_seed_length", input_type=Int(optional=True), prefix="--seed-length", doc=InputDocumentation(doc="seed length In range [10..inf]. Default: 16.")), ToolInput(tag="in_seed_error", input_type=Boolean(optional=True), prefix="--seed-error", doc=InputDocumentation(doc="allow for one error in the seed")), ToolInput(tag="in_forward", input_type=Boolean(optional=True), prefix="--forward", doc=InputDocumentation(doc="map reads only to forward strands.")), ToolInput(tag="in_reverse", input_type=Boolean(optional=True), prefix="--reverse", doc=InputDocumentation(doc="map reads only to reverse strands.")), ToolInput(tag="in_match_n", input_type=Boolean(optional=True), prefix="--match-N", doc=InputDocumentation(doc="'N' matches with all other characters")), ToolInput(tag="in_max_hits", input_type=Int(optional=True), prefix="--max-hits", doc=InputDocumentation(doc="output only NUM of the best hits In range [1..inf]. Default: 100.")), ToolInput(tag="in_purge_ambiguous", input_type=Boolean(optional=True), prefix="--purge-ambiguous", doc=InputDocumentation(doc="purge reads with more than max-hits best matches")), ToolInput(tag="in_low_memory", input_type=Boolean(optional=True), prefix="--low-memory", doc=InputDocumentation(doc="decrease memory usage at the expense of runtime")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose mode")), ToolInput(tag="in_v_verbose", input_type=Boolean(optional=True), prefix="--vverbose", doc=InputDocumentation(doc="very verbose mode")), ToolInput(tag="in_alignment", input_type=Boolean(optional=True), prefix="--alignment", doc=InputDocumentation(doc="dump the alignment for each match")), ToolInput(tag="in_genome_naming", input_type=Int(optional=True), prefix="--genome-naming", doc=InputDocumentation(doc="Select how genomes are named. 0 = use Fasta id, 1 = enumerate\nbeginning with 1. In range [0..1]. Default: 0.")), ToolInput(tag="in_read_naming", input_type=Int(optional=True), prefix="--read-naming", doc=InputDocumentation(doc="Select how reads are named. 0 = use Fasta id, 1 = enumerate\nbeginning with 1. In range [0..1]. Default: 0.")), ToolInput(tag="in_sort_order", input_type=Int(optional=True), prefix="--sort-order", doc=InputDocumentation(doc="Select how matches are sorted. 0 = read number, 1 = genome position.\nIn range [0..1]. Default: 0.")), ToolInput(tag="in_position_format", input_type=Int(optional=True), prefix="--position-format", doc=InputDocumentation(doc="Select begin/end position numbering (see Coordinate section below).\n0 = gap space, 1 = position space. In range [0..1]. Default: 0."))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Change output filename. (use - to dump to stdout in razers format)\nDefault: <READS FILE>.razers. Valid filetypes are: .razers and .sam."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Micro_Razers_V0_1_0().translate("wdl", allow_empty_container=True)

