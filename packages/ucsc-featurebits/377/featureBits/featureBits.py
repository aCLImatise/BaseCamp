from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Int

Featurebits_V0_1_0 = CommandToolBuilder(tool="featureBits", base_command=["featureBits"], inputs=[ToolInput(tag="in_bed", input_type=String(optional=True), prefix="-bed", doc=InputDocumentation(doc="Put intersection into bed format. Can use stdout.")), ToolInput(tag="in_fa", input_type=File(optional=True), prefix="-fa", doc=InputDocumentation(doc="Put sequence in intersection into .fa file")), ToolInput(tag="in_fa_merge", input_type=Boolean(optional=True), prefix="-faMerge", doc=InputDocumentation(doc="For fa output merge overlapping features.")), ToolInput(tag="in_minsize", input_type=Int(optional=True), prefix="-minSize", doc=InputDocumentation(doc="Minimum size to output (default 1)")), ToolInput(tag="in_chrom", input_type=String(optional=True), prefix="-chrom", doc=InputDocumentation(doc="Restrict to one chromosome")), ToolInput(tag="in_chrom_size", input_type=Int(optional=True), prefix="-chromSize", doc=InputDocumentation(doc="Read chrom sizes from file instead of database.\n(chromInfo three column format)")), ToolInput(tag="in_or", input_type=Boolean(optional=True), prefix="-or", doc=InputDocumentation(doc="Or tables together instead of anding them")), ToolInput(tag="in_not", input_type=Boolean(optional=True), prefix="-not", doc=InputDocumentation(doc="Output negation of resulting bit set.")), ToolInput(tag="in_count_gaps", input_type=Boolean(optional=True), prefix="-countGaps", doc=InputDocumentation(doc="Count gaps in denominator")), ToolInput(tag="in_no_random", input_type=Boolean(optional=True), prefix="-noRandom", doc=InputDocumentation(doc="Don't include _random (or Un) chromosomes")), ToolInput(tag="in_no_hap", input_type=Boolean(optional=True), prefix="-noHap", doc=InputDocumentation(doc="Don't include _hap|_alt chromosomes")), ToolInput(tag="in_dots", input_type=String(optional=True), prefix="-dots", doc=InputDocumentation(doc="Output dot every N chroms (scaffolds) processed")), ToolInput(tag="in_min_feature_size", input_type=String(optional=True), prefix="-minFeatureSize", doc=InputDocumentation(doc="Don't include bits of the track that are smaller than\nminFeatureSize, useful for differentiating between\nalignment gaps and introns.")), ToolInput(tag="in_bin", input_type=File(optional=True), prefix="-bin", doc=InputDocumentation(doc="Put bin counts in output file")), ToolInput(tag="in_binsize", input_type=Int(optional=True), prefix="-binSize", doc=InputDocumentation(doc="Bin size for generating counts in bin file (default 500000)")), ToolInput(tag="in_bin_overlap", input_type=File(optional=True), prefix="-binOverlap", doc=InputDocumentation(doc="Bin overlap for generating counts in bin file (default 250000)")), ToolInput(tag="in_bed_region_in", input_type=File(optional=True), prefix="-bedRegionIn", doc=InputDocumentation(doc="Read in a bed file for bin counts in specific regions\nand write to bedRegionsOut")), ToolInput(tag="in_bed_region_out", input_type=File(optional=True), prefix="-bedRegionOut", doc=InputDocumentation(doc="Write a bed file of bin counts in specific regions\nfrom bedRegionIn")), ToolInput(tag="in_enrichment", input_type=Boolean(optional=True), prefix="-enrichment", doc=InputDocumentation(doc="Calculates coverage and enrichment assuming first table\nis reference gene track and second track something else\nEnrichment is the amount of table1 that covers table2 vs. the\namount of table1 that covers the genome. It's how much denser\ntable1 is in table2 than it is genome-wide.")), ToolInput(tag="in_database", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_table", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_bin", output_type=File(optional=True), selector=InputSelector(input_to_select="in_bin", type_hint=File()), doc=OutputDocumentation(doc="Put bin counts in output file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Featurebits_V0_1_0().translate("wdl", allow_empty_container=True)

