from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory, Float, Int, String

Amrfinder_V0_1_0 = CommandToolBuilder(tool="amrfinder", base_command=["amrfinder"], inputs=[ToolInput(tag="in_update", input_type=Boolean(optional=True), prefix="--update", doc=InputDocumentation(doc="Update the AMRFinder database")), ToolInput(tag="in_force_update", input_type=Boolean(optional=True), prefix="--force_update", doc=InputDocumentation(doc="Force updating the AMRFinder database")), ToolInput(tag="in_protein", input_type=File(optional=True), prefix="--protein", doc=InputDocumentation(doc="Input protein FASTA file")), ToolInput(tag="in_nucleotide", input_type=File(optional=True), prefix="--nucleotide", doc=InputDocumentation(doc="Input nucleotide FASTA file")), ToolInput(tag="in_gff", input_type=File(optional=True), prefix="--gff", doc=InputDocumentation(doc="GFF file for protein locations. Protein id should be in the attribute 'Name=<id>' (9th field) of the rows with type 'CDS' or 'gene' (3rd field).")), ToolInput(tag="in_p_gap", input_type=Boolean(optional=True), prefix="--pgap", doc=InputDocumentation(doc="Input files PROT_FASTA, NUC_FASTA and GFF_FILE are created by the NCBI PGAP")), ToolInput(tag="in_database", input_type=Directory(optional=True), prefix="--database", doc=InputDocumentation(doc="Alternative directory with AMRFinder database. Default: $AMRFINDER_DB")), ToolInput(tag="in_ident_min", input_type=Float(optional=True), prefix="--ident_min", doc=InputDocumentation(doc="Minimum proportion of identical amino acids in alignment for hit (0..1). -1 means use a curated threshold if it exists and 0.9 otherwise\nDefault: -1")), ToolInput(tag="in_coverage_min", input_type=Int(optional=True), prefix="--coverage_min", doc=InputDocumentation(doc="Minimum coverage of the reference protein (0..1)\nDefault: 0.5")), ToolInput(tag="in_organism", input_type=String(optional=True), prefix="--organism", doc=InputDocumentation(doc="Taxonomy group. To see all possible taxonomy groups use the --list_organisms flag")), ToolInput(tag="in_list_organisms", input_type=Boolean(optional=True), prefix="--list_organisms", doc=InputDocumentation(doc="Print the list of all possible taxonomy groups for mutations identification and exit")), ToolInput(tag="in_translation_table", input_type=Int(optional=True), prefix="--translation_table", doc=InputDocumentation(doc="NCBI genetic code for translated BLAST\nDefault: 11")), ToolInput(tag="in_plus", input_type=Boolean(optional=True), prefix="--plus", doc=InputDocumentation(doc="Add the plus genes to the report")), ToolInput(tag="in_report_common", input_type=Boolean(optional=True), prefix="--report_common", doc=InputDocumentation(doc="Report proteins common to a taxonomy group")), ToolInput(tag="in_mutation_all", input_type=File(optional=True), prefix="--mutation_all", doc=InputDocumentation(doc="File to report all mutations")), ToolInput(tag="in_blast_bin", input_type=Directory(optional=True), prefix="--blast_bin", doc=InputDocumentation(doc="Directory for BLAST. Deafult: $BLAST_BIN")), ToolInput(tag="in_report_all_equal", input_type=Boolean(optional=True), prefix="--report_all_equal", doc=InputDocumentation(doc="Report all equally-scoring BLAST and HMM matches")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="--name", doc=InputDocumentation(doc="Text to be added as the first column 'name' to all rows of the report, for example it can be an assembly name")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Write output to OUTPUT_FILE instead of STDOUT")), ToolInput(tag="in_protein_output", input_type=File(optional=True), prefix="--protein_output", doc=InputDocumentation(doc="Output protein FASTA file of reported proteins")), ToolInput(tag="in_nucleotide_output", input_type=File(optional=True), prefix="--nucleotide_output", doc=InputDocumentation(doc="Output nucleotide FASTA file of reported nucleotide sequences")), ToolInput(tag="in_nucleotide_flank_five_output", input_type=File(optional=True), prefix="--nucleotide_flank5_output", doc=InputDocumentation(doc="Output nucleotide FASTA file of reported nucleotide sequences with 5' flanking sequences")), ToolInput(tag="in_nucleotide_flank_five_size", input_type=Int(optional=True), prefix="--nucleotide_flank5_size", doc=InputDocumentation(doc="5' flanking sequence size for NUC_FLANK5_FASTA_OUT\nDefault: 0")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppress messages to STDERR")), ToolInput(tag="in_g_pipe_org", input_type=Boolean(optional=True), prefix="--gpipe_org", doc=InputDocumentation(doc="NCBI internal GPipe organism names")), ToolInput(tag="in_parm", input_type=String(optional=True), prefix="--parm", doc=InputDocumentation(doc="amr_report parameters for testing: -nosame -noblast -skip_hmm_check -bed")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Max. number of threads\nDefault: 4")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Integrity checks")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="Error log file, appended, opened on application start"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Write output to OUTPUT_FILE instead of STDOUT")), ToolOutput(tag="out_protein_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_protein_output", type_hint=File()), doc=OutputDocumentation(doc="Output protein FASTA file of reported proteins")), ToolOutput(tag="out_nucleotide_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_nucleotide_output", type_hint=File()), doc=OutputDocumentation(doc="Output nucleotide FASTA file of reported nucleotide sequences")), ToolOutput(tag="out_nucleotide_flank_five_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_nucleotide_flank_five_output", type_hint=File()), doc=OutputDocumentation(doc="Output nucleotide FASTA file of reported nucleotide sequences with 5' flanking sequences"))], container="quay.io/biocontainers/ncbi-amrfinderplus:3.10.5--h17dc2d4_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Amrfinder_V0_1_0().translate("wdl")

