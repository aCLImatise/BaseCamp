from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, File

Visualize_Rna_Py_V0_1_0 = CommandToolBuilder(tool="visualize_rna.py", base_command=["visualize_rna.py"], inputs=[ToolInput(tag="in_keep_length_one_stems", input_type=Boolean(optional=True), prefix="--keep-length-one-stems", doc=InputDocumentation(doc="For all input formats except forgi bg/cg files, this\ncontrolls whether stems of length one are dissolved to\nunpaired regions (default) or kept (if this option is\npresent). In the case of input in forgi-format, the\nRNA from the file is not modified.")), ToolInput(tag="in_thin_cylinders", input_type=String(optional=True), prefix="--thin-cylinders", doc=InputDocumentation(doc="Make coarse_grain RNA thinner")), ToolInput(tag="in_virtual_atoms", input_type=Boolean(optional=True), prefix="--virtual-atoms", doc=InputDocumentation(doc="Color virtual atoms (if displayed) depending on the")), ToolInput(tag="in_virtual_residues", input_type=Boolean(optional=True), prefix="--virtual-residues", doc=InputDocumentation(doc="Display the virtual residues as spheres")), ToolInput(tag="in_only_elements", input_type=String(optional=True), prefix="--only-elements", doc=InputDocumentation(doc="Display only these elements, separated by commas")), ToolInput(tag="in_no_loops", input_type=Boolean(optional=True), prefix="--no-loops", doc=InputDocumentation(doc="Don't display the coarse-grain hairpin loops")), ToolInput(tag="in_long_range", input_type=Boolean(optional=True), prefix="--longrange", doc=InputDocumentation(doc="Display long-range interactions")), ToolInput(tag="in_stem_color", input_type=String(optional=True), prefix="--stem-color", doc=InputDocumentation(doc="The default stem color in coarse-grain drawings")), ToolInput(tag="in_multi_loop_color", input_type=String(optional=True), prefix="--multiloop-color", doc=InputDocumentation(doc="The default multiloop color in coarse-grain drawings")), ToolInput(tag="in_text", input_type=Boolean(optional=True), prefix="--text", doc=InputDocumentation(doc="Add labels indicating the element names to the figure.")), ToolInput(tag="in_labels", input_type=String(optional=True), prefix="--labels", doc=InputDocumentation(doc="Add labels to elements. Expects a comma seperated\nstring of element:label, like 'm0:LookHere' to display\n'LookHere' at the center of 'm0'.")), ToolInput(tag="in_side_chain_atoms", input_type=Boolean(optional=True), prefix="--sidechain-atoms", doc=InputDocumentation(doc="Include the sidechain atoms. Automatically enables")), ToolInput(tag="in_element_colors", input_type=Int(optional=True), prefix="--element-colors", doc=InputDocumentation(doc="Specify a color for certain elements (comma-separated\nelement names or element_name:color)Example: 'm1,m2'\n(makes m1, m2 purple) or\n'm0:red,m1:green,s0:AA11GG,default:black', where\n'AA11GG' is a hex value and 'default' addresses all\nother elements. Warning: colors not understood by\nPYMOL will be interpreted as black.")), ToolInput(tag="in_align", input_type=Boolean(optional=True), prefix="--align", doc=InputDocumentation(doc="Align the RNAs (if multiple are provided)")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Create a picture of the scene and exit")), ToolInput(tag="in_batch", input_type=Boolean(optional=True), prefix="--batch", doc=InputDocumentation(doc="Start pymol in batch mode")), ToolInput(tag="in_pseudo_knots", input_type=Boolean(optional=True), prefix="--pseudoknots", doc=InputDocumentation(doc="Allow pseudoknots when extracting the structure from\nPDB files.")), ToolInput(tag="in_chains", input_type=String(optional=True), prefix="--chains", doc=InputDocumentation(doc="When reading pdb-files: Only extract the given\nchain(s). Comma-seperated")), ToolInput(tag="in_pdb_secondary_structure", input_type=String(optional=True), prefix="--pdb-secondary-structure", doc=InputDocumentation(doc="When reading a single chain from a pdb-files: Enforce\nthe secondary structure given as dotbracket string.\n(This only works, if --chain is given!)")), ToolInput(tag="in_pdb_annotation_tool", input_type=File(optional=True), prefix="--pdb-annotation-tool", doc=InputDocumentation(doc="What program to use for detecting basepairs in PDB/\nMMCIF structures. This commandline option overrides\nthe value in the config file (if present).If this is\nnot present and no config-file is given, we try to\ndetect the installed programs.")), ToolInput(tag="in_pdb_allow_www_query", input_type=Boolean(optional=True), prefix="--pdb-allow-www-query", doc=InputDocumentation(doc="Usually, if modified residues/ ligand with an unknown\n3-letter code are encountered in PDB files, they are\nremoved from the chain and a log message of severity\nINFO is issued. With this option, we first try to\nquery the PDBeChem database for the 3-letter code, to\nsee whether or not it is a modified residue that can\nbe converted to its standard parent and should be part\nof the chain.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Show verbose output (Output logged at level\nlogging.INFO)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="[DEBUG]       A comma-seperated list of logger names for which debug\noutput will be activated.WARNING: If you misspell the\nlogger name, this argument will be ignored")), ToolInput(tag="in_commaseperated_list_logger", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="[QUIET], --quiet [QUIET]\nA comma-seperated list of logger names for which only\nmessages logged at the level 'CRITICAL' will be\nshown.Use this without arguments if everything should\nbe quiet.\n")), ToolInput(tag="in_rna", input_type=String(), position=0, doc=InputDocumentation(doc="One or more files containing one or more RNAs each.\nSupported Filetypes are: pdb files, forgi cg files"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Visualize_Rna_Py_V0_1_0().translate("wdl", allow_empty_container=True)

