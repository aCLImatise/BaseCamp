from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Directory, Int, Boolean

Fusioninspector_V0_1_0 = CommandToolBuilder(tool="FusionInspector", base_command=["FusionInspector"], inputs=[ToolInput(tag="in_fusions", input_type=String(optional=True), prefix="--fusions", doc=InputDocumentation(doc="fusions summary files (list, comma-delimited and no spaces)")), ToolInput(tag="in_left_fq", input_type=File(optional=True), prefix="--left_fq", doc=InputDocumentation(doc="left (or single) fastq file")), ToolInput(tag="in_right_fq", input_type=File(optional=True), prefix="--right_fq", doc=InputDocumentation(doc="right fastq file (optional)")), ToolInput(tag="in_genome_lib_dir", input_type=Directory(optional=True), prefix="--genome_lib_dir", doc=InputDocumentation(doc="genome lib directory - see http://FusionFilter.github.io for details.  Uses env var CTAT_GENOME_LIB as default")), ToolInput(tag="in_samples_file", input_type=File(optional=True), prefix="--samples_file", doc=InputDocumentation(doc="samples file (format: sample(tab)/path/left.fq(tab)/path/right.fq")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="output directory")), ToolInput(tag="in_out_prefix", input_type=File(optional=True), prefix="--out_prefix", doc=InputDocumentation(doc="output filename prefix")), ToolInput(tag="in_min_junction_reads", input_type=Int(optional=True), prefix="--min_junction_reads", doc=InputDocumentation(doc="minimum number of junction-spanning reads required")), ToolInput(tag="in_min_sum_frags", input_type=Int(optional=True), prefix="--min_sum_frags", doc=InputDocumentation(doc="minimum fusion support = ( # junction_reads + # spanning_frags )")), ToolInput(tag="in_min_novel_junction_support", input_type=Int(optional=True), prefix="--min_novel_junction_support", doc=InputDocumentation(doc="minimum number of junction reads required if breakpoint lacks involvement of only reference junctions")), ToolInput(tag="in_min_spanning_frags_only", input_type=Int(optional=True), prefix="--min_spanning_frags_only", doc=InputDocumentation(doc="minimum number of spanning frags if no junction reads are found")), ToolInput(tag="in_require_ldas", input_type=String(optional=True), prefix="--require_LDAS", doc=InputDocumentation(doc="require long double anchor support for split reads when no spanning frags are found")), ToolInput(tag="in_max_promiscuity", input_type=Int(optional=True), prefix="--max_promiscuity", doc=InputDocumentation(doc="maximum number of partners allowed for a given fusion")), ToolInput(tag="in_min_pct_dom_promiscuity", input_type=Int(optional=True), prefix="--min_pct_dom_promiscuity", doc=InputDocumentation(doc="for promiscuous fusions, those with less than this support of the dominant scoring pair are filtered prior to applying the max_promiscuity filter.")), ToolInput(tag="in_min_per_id", input_type=Int(optional=True), prefix="--min_per_id", doc=InputDocumentation(doc="minimum percent identity for a fusion-supporting read alignment")), ToolInput(tag="in_only_fusion_reads", input_type=Boolean(optional=True), prefix="--only_fusion_reads", doc=InputDocumentation(doc="include only read alignments in output that support fusion")), ToolInput(tag="in_capture_genome_alignments", input_type=Boolean(optional=True), prefix="--capture_genome_alignments", doc=InputDocumentation(doc="reports ref genome alignments too (for debugging only)")), ToolInput(tag="in_include_trinity", input_type=Boolean(optional=True), prefix="--include_Trinity", doc=InputDocumentation(doc="include fusion-guided Trinity assembly")), ToolInput(tag="in_vis", input_type=Boolean(optional=True), prefix="--vis", doc=InputDocumentation(doc="generate bam, bed, etc., and generate igv-reports html visualization")), ToolInput(tag="in_write_intermediate_results", input_type=Boolean(optional=True), prefix="--write_intermediate_results", doc=InputDocumentation(doc="generate bam, bed, etc., for intermediate aligner outputs")), ToolInput(tag="in_cleanup", input_type=Boolean(optional=True), prefix="--cleanup", doc=InputDocumentation(doc="cleanup the fusion inspector workspace, remove intermediate output files")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--CPU", doc=InputDocumentation(doc="number of threads for multithreaded processes")), ToolInput(tag="in_annotate", input_type=Boolean(optional=True), prefix="--annotate", doc=InputDocumentation(doc="annotate fusions based on known cancer fusions and those found in normal tissues")), ToolInput(tag="in_examine_coding_effect", input_type=Boolean(optional=True), prefix="--examine_coding_effect", doc=InputDocumentation(doc="explore impact of fusions on coding sequences")), ToolInput(tag="in_aligner_path", input_type=File(optional=True), prefix="--aligner_path", doc=InputDocumentation(doc="path to the aligner tool (default: uses PATH setting)")), ToolInput(tag="in_fusion_contigs_only", input_type=Boolean(optional=True), prefix="--fusion_contigs_only", doc=InputDocumentation(doc="align reads only to the fusion contigs")), ToolInput(tag="in_extract_fusion_reads_file", input_type=File(optional=True), prefix="--extract_fusion_reads_file", doc=InputDocumentation(doc="file prefix to write fusion evidence reads in fastq format")), ToolInput(tag="in_no_remove_dups", input_type=Boolean(optional=True), prefix="--no_remove_dups", doc=InputDocumentation(doc="do not exclude duplicate reads")), ToolInput(tag="in_far_pseudo_count", input_type=String(optional=True), prefix="--FAR_pseudocount", doc=InputDocumentation(doc="pseudocount to be used in fusion allelic ratio (FAR) computation")), ToolInput(tag="in_star_max_mate_dist", input_type=Int(optional=True), prefix="--STAR_max_mate_dist", doc=InputDocumentation(doc="max mate distance and max intron length for STAR")), ToolInput(tag="in_no_ff_pm", input_type=Boolean(optional=True), prefix="--no_FFPM", doc=InputDocumentation(doc="do not compute FFPM value - ie. using inspect instead of validate mode, in which case FFPM would not be meaningful given the full sample of reads is not evaluated"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="output directory")), ToolOutput(tag="out_out_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_prefix", type_hint=File()), doc=OutputDocumentation(doc="output filename prefix"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fusioninspector_V0_1_0().translate("wdl", allow_empty_container=True)

