version 1.0

task Ggcaller {
  input {
    File? graph
    File? colours
    Boolean? not_ref
    File? refs
    File? reads
    File? codons
    Int? km_er
    File? path
    Int? orf
    Int? max_overlap
    Int? min_path_score
    Int? min_orf_score
    Boolean? no_filter
    Boolean? no_write_idx
    Boolean? no_write_graph
    Boolean? repeat
    Int? threads
    File? out
  }
  command <<<
    ggcaller \
      ~{if defined(graph) then ("--graph " +  '"' + graph + '"') else ""} \
      ~{if defined(colours) then ("--colours " +  '"' + colours + '"') else ""} \
      ~{if (not_ref) then "--not-ref" else ""} \
      ~{if defined(refs) then ("--refs " +  '"' + refs + '"') else ""} \
      ~{if defined(reads) then ("--reads " +  '"' + reads + '"') else ""} \
      ~{if defined(codons) then ("--codons " +  '"' + codons + '"') else ""} \
      ~{if defined(km_er) then ("--kmer " +  '"' + km_er + '"') else ""} \
      ~{if defined(path) then ("--path " +  '"' + path + '"') else ""} \
      ~{if defined(orf) then ("--orf " +  '"' + orf + '"') else ""} \
      ~{if defined(max_overlap) then ("--maxoverlap " +  '"' + max_overlap + '"') else ""} \
      ~{if defined(min_path_score) then ("--min-path-score " +  '"' + min_path_score + '"') else ""} \
      ~{if defined(min_orf_score) then ("--min-orf-score " +  '"' + min_orf_score + '"') else ""} \
      ~{if (no_filter) then "--no-filter" else ""} \
      ~{if (no_write_idx) then "--no-write-idx" else ""} \
      ~{if (no_write_graph) then "--no-write-graph" else ""} \
      ~{if (repeat) then "--repeat" else ""} \
      ~{if defined(threads) then ("--threads " +  '"' + threads + '"') else ""} \
      ~{if defined(out) then ("--out " +  '"' + out + '"') else ""}
  >>>
  runtime {
    docker: "quay.io/biocontainers/ggcaller:1.2.2--py39h2d02072_0"
  }
  parameter_meta {
    graph: "Bifrost GFA file generated by Bifrost build."
    colours: "Bifrost colours file generated by Bifrost build."
    not_ref: "If using existing graph, was not graph built\\nexclusively with assembled genomes. [Default = False]"
    refs: "List of reference genomes (one file path per line)."
    reads: "List of reference genomes (one file path per line)."
    codons: "JSON file containing start and stop codon sequences."
    km_er: "K-mer size used in Bifrost build (bp). [Default = 31]"
    path: "Maximum path length during traversal (bp). [Default =\\n10000]"
    orf: "Minimum ORF length to return (bp). [Default = 90]"
    max_overlap: "Maximum overlap allowed between overlapping ORFs.\\n[Default = 60]"
    min_path_score: "Minimum total score for a path of ORFs to be returned.\\n[Default = 100]"
    min_orf_score: "Minimum individual score for an ORF to be returned.\\n[Default = 100]"
    no_filter: "Do not filter ORF calls using Balrog. Will return all\\nORF calls. [Default = False]"
    no_write_idx: "Do not write FMIndexes to file. [Default = False]"
    no_write_graph: "Do not write Bifrost GFA and colours to file. [Default\\n= False]"
    repeat: "Enable traversal of nodes mulitple times. [Default =\\nFalse]"
    threads: "Number of threads for FMIndexing [Default = 1]"
    out: "Output FASTA file containing ORF sequences."
  }
  output {
    File out_stdout = stdout()
    File out_out = "${in_out}"
  }
}