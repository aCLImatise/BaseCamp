from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Mmseqs_Kmermatcher_V0_1_0 = CommandToolBuilder(tool="mmseqs_kmermatcher", base_command=["mmseqs", "kmermatcher"], inputs=[ToolInput(tag="in_alph_size", input_type=Boolean(optional=True), prefix="--alph-size", doc=InputDocumentation(doc="13              alphabet size [2,21]")), ToolInput(tag="in_mask", input_type=Boolean(optional=True), prefix="--mask", doc=InputDocumentation(doc="0               0: w/o low complexity masking, 1: with low complexity masking")), ToolInput(tag="in_kmer_size_range", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="0               k-mer size in the range [6,7] (0: set automatically to optimum)")), ToolInput(tag="in_split_memory_limit", input_type=Boolean(optional=True), prefix="--split-memory-limit", doc=InputDocumentation(doc="0               Maximum system memory in megabyte that one split may use. Defaults (0) to all available system memory.")), ToolInput(tag="in_min_seq_id", input_type=Boolean(optional=True), prefix="--min-seq-id", doc=InputDocumentation(doc="0.000           list matches above this sequence identity (for clustering) [0.0,1.0]")), ToolInput(tag="in_cov_mode", input_type=Boolean(optional=True), prefix="--cov-mode", doc=InputDocumentation(doc="0               0: coverage of query and target, 1: coverage of target, 2: coverage of query 3: target seq. length needs be at least x% of query length")), ToolInput(tag="in_list_matches_fraction", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="0.800           list matches above this fraction of aligned (covered) residues (see --cov-mode)")), ToolInput(tag="in_km_er_per_seq", input_type=Boolean(optional=True), prefix="--kmer-per-seq", doc=InputDocumentation(doc="0               kmer per sequence")), ToolInput(tag="in_hash_shift", input_type=Boolean(optional=True), prefix="--hash-shift", doc=InputDocumentation(doc="5               Shift k-mer hash")), ToolInput(tag="in_include_only_extendable", input_type=Boolean(optional=True), prefix="--include-only-extendable", doc=InputDocumentation(doc="false           Include only extendable")), ToolInput(tag="in_skip_n_repeat_km_er", input_type=Boolean(optional=True), prefix="--skip-n-repeat-kmer", doc=InputDocumentation(doc="0               Skip sequence with >= n exact repeating k-mers")), ToolInput(tag="in_sub_mat", input_type=File(optional=True), prefix="--sub-mat", doc=InputDocumentation(doc="blosum62.out    amino acid substitution matrix file")), ToolInput(tag="in_max_seq_len", input_type=Boolean(optional=True), prefix="--max-seq-len", doc=InputDocumentation(doc="65535           Maximum sequence length [1,32768]")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="8               number of cores used for the computation (uses all cores by default)")), ToolInput(tag="in_verbosity_level_nothing", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="3               verbosity level: 0=nothing, 1: +errors, 2: +warnings, 3: +info"))], outputs=[ToolOutput(tag="out_sub_mat", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sub_mat", type_hint=File()), doc=OutputDocumentation(doc="blosum62.out    amino acid substitution matrix file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mmseqs_Kmermatcher_V0_1_0().translate("wdl", allow_empty_container=True)

