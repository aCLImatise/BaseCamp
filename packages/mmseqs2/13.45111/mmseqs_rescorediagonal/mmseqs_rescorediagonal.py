from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Float, Int, File

Mmseqs_Rescorediagonal_V0_1_0 = CommandToolBuilder(tool="mmseqs_rescorediagonal", base_command=["mmseqs", "rescorediagonal"], inputs=[ToolInput(tag="in_add_self_matches", input_type=Boolean(optional=True), prefix="--add-self-matches", doc=InputDocumentation(doc="Artificially add entries of queries with themselves (for clustering) [0]")), ToolInput(tag="in_wrapped_scoring", input_type=Boolean(optional=True), prefix="--wrapped-scoring", doc=InputDocumentation(doc="Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]")), ToolInput(tag="in_list_matches_evalue", input_type=Float(optional=True), prefix="-e", doc=InputDocumentation(doc="List matches below this E-value (range 0.0-inf) [1.000E-03]")), ToolInput(tag="in_list_matches_fraction", input_type=Float(optional=True), prefix="-c", doc=InputDocumentation(doc="List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]")), ToolInput(tag="in_add_string_convert", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="Add backtrace string (convert to alignments with mmseqs convertalis module) [0]")), ToolInput(tag="in_cov_mode", input_type=Int(optional=True), prefix="--cov-mode", doc=InputDocumentation(doc="0: coverage of query and target\n1: coverage of target\n2: coverage of query\n3: target seq. length has to be at least x% of query length\n4: query seq. length has to be at least x% of target length\n5: short seq. needs to be at least x% of the other seq. length [0]")), ToolInput(tag="in_min_seq_id", input_type=Float(optional=True), prefix="--min-seq-id", doc=InputDocumentation(doc="List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]")), ToolInput(tag="in_min_aln_len", input_type=Int(optional=True), prefix="--min-aln-len", doc=InputDocumentation(doc="Minimum alignment length (range 0-INT_MAX) [0]")), ToolInput(tag="in_seq_id_mode", input_type=Int(optional=True), prefix="--seq-id-mode", doc=InputDocumentation(doc="0: alignment length 1: shorter, 2: longer sequence [0]")), ToolInput(tag="in_re_score_mode", input_type=Int(optional=True), prefix="--rescore-mode", doc=InputDocumentation(doc="Rescore diagonals with:\n0: Hamming distance\n1: local alignment (score only)\n2: local alignment\n3: global alignment\n4: longest alignment fulfilling window quality criterion [0]")), ToolInput(tag="in_sub_mat", input_type=File(optional=True), prefix="--sub-mat", doc=InputDocumentation(doc="Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]")), ToolInput(tag="in_db_load_mode", input_type=Int(optional=True), prefix="--db-load-mode", doc=InputDocumentation(doc="Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of CPU-cores used (all by default) [2]")), ToolInput(tag="in_compressed", input_type=Int(optional=True), prefix="--compressed", doc=InputDocumentation(doc="Write compressed output [0]")), ToolInput(tag="in_verbosity_level_errors", input_type=Int(optional=True), prefix="-v", doc=InputDocumentation(doc="Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]")), ToolInput(tag="in_filter_hits", input_type=Boolean(optional=True), prefix="--filter-hits", doc=InputDocumentation(doc="Filter hits by seq.id. and coverage [0]")), ToolInput(tag="in_sort_results", input_type=Int(optional=True), prefix="--sort-results", doc=InputDocumentation(doc="Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"))], outputs=[ToolOutput(tag="out_sub_mat", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sub_mat", type_hint=File()), doc=OutputDocumentation(doc="Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"))], container="quay.io/biocontainers/mmseqs2:13.45111--h2d02072_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mmseqs_Rescorediagonal_V0_1_0().translate("wdl")

