from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean

Mmseqs_Extractorfs_V0_1_0 = CommandToolBuilder(tool="mmseqs_extractorfs", base_command=["mmseqs", "extractorfs"], inputs=[ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="Minimum codon number in open reading frames [30]")), ToolInput(tag="in_max_length", input_type=Int(optional=True), prefix="--max-length", doc=InputDocumentation(doc="Maximum codon number in open reading frames [32734]")), ToolInput(tag="in_max_gaps", input_type=Int(optional=True), prefix="--max-gaps", doc=InputDocumentation(doc="Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]")), ToolInput(tag="in_contig_start_mode", input_type=Int(optional=True), prefix="--contig-start-mode", doc=InputDocumentation(doc="Contig start can be 0: incomplete, 1: complete, 2: both [2]")), ToolInput(tag="in_contig_end_mode", input_type=Int(optional=True), prefix="--contig-end-mode", doc=InputDocumentation(doc="Contig end can be 0: incomplete, 1: complete, 2: both [2]")), ToolInput(tag="in_orf_start_mode", input_type=Int(optional=True), prefix="--orf-start-mode", doc=InputDocumentation(doc="Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]")), ToolInput(tag="in_forward_frames", input_type=Int(optional=True), prefix="--forward-frames", doc=InputDocumentation(doc="Comma-separated list of frames on the forward strand to be extracted [1,2,3]")), ToolInput(tag="in_reverse_frames", input_type=Int(optional=True), prefix="--reverse-frames", doc=InputDocumentation(doc="Comma-separated list of frames on the reverse strand to be extracted [1,2,3]")), ToolInput(tag="in_translation_table", input_type=Int(optional=True), prefix="--translation-table", doc=InputDocumentation(doc="1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE\n9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL\n15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL\n23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA\n29) MESODINIUM, 30) PERTRICH, 31) BLASTOCRITHIDIA [1]")), ToolInput(tag="in_translate", input_type=Int(optional=True), prefix="--translate", doc=InputDocumentation(doc="Translate ORF to amino acid [0]")), ToolInput(tag="in_use_all_table_starts", input_type=Boolean(optional=True), prefix="--use-all-table-starts", doc=InputDocumentation(doc="Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]")), ToolInput(tag="in_id_offset", input_type=Int(optional=True), prefix="--id-offset", doc=InputDocumentation(doc="Numeric ids in index file are offset by this value [0]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of CPU-cores used (all by default) [2]")), ToolInput(tag="in_compressed", input_type=Int(optional=True), prefix="--compressed", doc=InputDocumentation(doc="Write compressed output [0]")), ToolInput(tag="in_verbosity_level_errors", input_type=Int(optional=True), prefix="-v", doc=InputDocumentation(doc="Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]")), ToolInput(tag="in_create_lookup", input_type=Int(optional=True), prefix="--create-lookup", doc=InputDocumentation(doc="Create database lookup file (can be very large) [0]"))], outputs=[], container="quay.io/biocontainers/mmseqs2:13.45111--h2d02072_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mmseqs_Extractorfs_V0_1_0().translate("wdl")

