from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Array, String, Boolean

Mimodd_Vcf_Filter_V0_1_0 = CommandToolBuilder(tool="mimodd_vcf_filter", base_command=["mimodd", "vcf-filter"], inputs=[ToolInput(tag="in_ofile", input_type=File(optional=True), prefix="--ofile", doc=InputDocumentation(doc="redirect the output to the specified file (default:\nstdout)")), ToolInput(tag="in_samples", input_type=Array(t=String(), optional=True), prefix="--samples", doc=InputDocumentation(doc="one or more sample names that the sample-specific\nfilters --gt, --dp, and --gq should work on.")), ToolInput(tag="in_gt", input_type=Array(t=String(), optional=True), prefix="--gt", doc=InputDocumentation(doc="genotype patterns (one per sample, use ANY to skip the\nrequirement for a given sample) to be included in the\noutput; format: x/x where x = 0 and x = 1 stand for\nthe reference and the variant allele, respectively;\nmultiple allowed genotypes for a sample can be\nspecified as a comma-separated list")), ToolInput(tag="in_dp", input_type=Array(t=String(), optional=True), prefix="--dp", doc=InputDocumentation(doc="minimal coverage (one per sample, use 0 to skip the\nrequirement for a given sample) required to include a\nsite in the output")), ToolInput(tag="in_gq", input_type=Array(t=String(), optional=True), prefix="--gq", doc=InputDocumentation(doc="minimal genotype quality (one per sample, use 0 to\nskip the requirement for a given sample) required to\ninclude a site in the output")), ToolInput(tag="in_af", input_type=String(optional=True), prefix="--af", doc=InputDocumentation(doc="#:MIN_FRACTION:MAX_FRACTION [ALLELE#:MIN_FRACTION:MAX_FRACTION ...]\nthe fraction of reads supporting a specific ALLELE#\nmust be between MIN_FRACTION and MAX_FRACTION to\ninclude the site in the output")), ToolInput(tag="in_keep_only_variants", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[REGION_FILTER [REGION_FILTER ...]], --region [REGION_FILTER [REGION_FILTER ...]]\nkeep only variants that fall in one of the given\nchromsomal regions (specified in the format\nCHROM:START-STOP or CHROM: for a whole chromosome)")), ToolInput(tag="in_no_indels", input_type=Boolean(optional=True), prefix="--no-indels", doc=InputDocumentation(doc="skip indels in the output")), ToolInput(tag="in_indels_only", input_type=Boolean(optional=True), prefix="--indels-only", doc=InputDocumentation(doc="keep only indels in the output")), ToolInput(tag="in_v_filter", input_type=Array(t=String(), optional=True), prefix="--vfilter", doc=InputDocumentation(doc="vertical sample names filter; if given, only sample\ncolumns specified by name will be retained in the\noutput")), ToolInput(tag="in_input_file", input_type=String(), position=0, doc=InputDocumentation(doc="a vcf input file (default: stdin)"))], outputs=[ToolOutput(tag="out_ofile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_ofile", type_hint=File()), doc=OutputDocumentation(doc="redirect the output to the specified file (default:\nstdout)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mimodd_Vcf_Filter_V0_1_0().translate("wdl", allow_empty_container=True)

