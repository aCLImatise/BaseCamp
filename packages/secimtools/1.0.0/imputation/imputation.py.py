from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Float, Int

Imputation_Py_V0_1_0 = CommandToolBuilder(tool="imputation.py", base_command=["imputation.py"], inputs=[ToolInput(tag="in_input", input_type=String(optional=True), prefix="--input", doc=InputDocumentation(doc="Input dataset in wide format.")), ToolInput(tag="in_design", input_type=File(optional=True), prefix="--design", doc=InputDocumentation(doc="Design file.")), ToolInput(tag="in_id", input_type=String(optional=True), prefix="--ID", doc=InputDocumentation(doc="Name of the column with unique identifiers.")), ToolInput(tag="in_group", input_type=String(optional=True), prefix="--group", doc=InputDocumentation(doc="Name of the column with groups.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Path of output file.")), ToolInput(tag="in_strategy", input_type=String(optional=True), prefix="--strategy", doc=InputDocumentation(doc="Imputation strategy: KNN, mean, median, or most\nfrequent")), ToolInput(tag="in_no_zero", input_type=Boolean(optional=True), prefix="--no_zero", doc=InputDocumentation(doc="Treat 0 as missing?")), ToolInput(tag="in_no_negative", input_type=Boolean(optional=True), prefix="--no_negative", doc=InputDocumentation(doc="Treat negative as missing?")), ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="Additional values to treat as missingdata, seperated\nby commas")), ToolInput(tag="in_row_cut_off", input_type=Float(optional=True), prefix="--row_cutoff", doc=InputDocumentation(doc="Percent cutoff for imputation of rows.If this is\nexceeded, imputation willbe done by mean instead of\nknn. Default: .5")), ToolInput(tag="in_distribution", input_type=String(optional=True), prefix="--distribution", doc=InputDocumentation(doc="use mean or median to generate mu value for bayesian\nimputation")), ToolInput(tag="in_knn", input_type=Int(optional=True), prefix="--knn", doc=InputDocumentation(doc="Number of nearest neighbors to search Default: 5.")), ToolInput(tag="in_col_cut_off", input_type=Float(optional=True), prefix="--col_cutoff", doc=InputDocumentation(doc="Percent cutoff forimputation of columns. If this is\nexceeded, imputationwill be done by mean instead of\nknn. Default: .8\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Path of output file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Imputation_Py_V0_1_0().translate("wdl", allow_empty_container=True)

