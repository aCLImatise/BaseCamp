from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int

Svm_Classifier_Py_V0_1_0 = CommandToolBuilder(tool="svm_classifier.py", base_command=["svm_classifier.py"], inputs=[ToolInput(tag="in_train_wide", input_type=String(optional=True), prefix="--train_wide", doc=InputDocumentation(doc="wide part of the train dataset.")), ToolInput(tag="in_train_design", input_type=String(optional=True), prefix="--train_design", doc=InputDocumentation(doc="design part of the train dataset.")), ToolInput(tag="in_test_wide", input_type=String(optional=True), prefix="--test_wide", doc=InputDocumentation(doc="wide part of the test dataset.")), ToolInput(tag="in_test_design", input_type=String(optional=True), prefix="--test_design", doc=InputDocumentation(doc="design part of the test dataset.")), ToolInput(tag="in_group", input_type=File(optional=True), prefix="--group", doc=InputDocumentation(doc="Name of column in design file with Group/treatment\ninformation.")), ToolInput(tag="in_id", input_type=String(optional=True), prefix="--ID", doc=InputDocumentation(doc="Name of the column with unique identifiers.")), ToolInput(tag="in_kernel", input_type=String(optional=True), prefix="--kernel", doc=InputDocumentation(doc="choice of kernel function: rbf, linear, poly, sigmoid.")), ToolInput(tag="in_degree", input_type=Int(optional=True), prefix="--degree", doc=InputDocumentation(doc="(integer) degree for the polynomial kernel, default 3.")), ToolInput(tag="in_positive_regularization_parameter_parameter", input_type=String(optional=True), prefix="--C", doc=InputDocumentation(doc="positive regularization parameter. This parameter is\nignored when -cv is single or double")), ToolInput(tag="in_cross_validation", input_type=String(optional=True), prefix="--cross_validation", doc=InputDocumentation(doc="Choice of cross-validation procedure for the\nregularization parameter -c determinantion: none,\nsingle, double.")), ToolInput(tag="in_c_lower_bound", input_type=String(optional=True), prefix="--C_lower_bound", doc=InputDocumentation(doc="positive regularization parameter lower bound. Ignored\nif -cv is none and -c is specified.")), ToolInput(tag="in_c_upper_bound", input_type=String(optional=True), prefix="--C_upper_bound", doc=InputDocumentation(doc="positive regularization parameter upper bound. Ignored\nif -cv is none and -c is specified.")), ToolInput(tag="in_positive_coefficient_kernel", input_type=String(optional=True), prefix="--a", doc=InputDocumentation(doc="positive coefficient in kernel function.")), ToolInput(tag="in_independent_term_coefficient", input_type=String(optional=True), prefix="--b", doc=InputDocumentation(doc="independent term coefficient in kernel function.")), ToolInput(tag="in_out_classification", input_type=File(optional=True), prefix="--outClassification", doc=InputDocumentation(doc="Name of the output file to store classification\nperformed on the traing data set. TSV format.")), ToolInput(tag="in_out_classification_accuracy", input_type=String(optional=True), prefix="--outClassificationAccuracy", doc=InputDocumentation(doc="Output classification accuracy value on the training\ndata set.")), ToolInput(tag="in_out_prediction", input_type=File(optional=True), prefix="--outPrediction", doc=InputDocumentation(doc="Name of the output file to store prediction performed\non the target data set. TSV format.")), ToolInput(tag="in_out_prediction_accuracy", input_type=String(optional=True), prefix="--outPredictionAccuracy", doc=InputDocumentation(doc="Output prediction accuracy value on the target data\nset.\n"))], outputs=[ToolOutput(tag="out_out_classification", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_classification", type_hint=File()), doc=OutputDocumentation(doc="Name of the output file to store classification\nperformed on the traing data set. TSV format.")), ToolOutput(tag="out_out_prediction", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_prediction", type_hint=File()), doc=OutputDocumentation(doc="Name of the output file to store prediction performed\non the target data set. TSV format."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Svm_Classifier_Py_V0_1_0().translate("wdl", allow_empty_container=True)

