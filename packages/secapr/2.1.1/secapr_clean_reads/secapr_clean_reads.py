from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, String, Int

Secapr_Clean_Reads_V0_1_0 = CommandToolBuilder(tool="secapr_clean_reads", base_command=["secapr", "clean_reads"], inputs=[ToolInput(tag="in_input", input_type=Directory(optional=True), prefix="--input", doc=InputDocumentation(doc="The directory containing the unzipped .fastq or .fq\nfiles (raw read files)")), ToolInput(tag="in_config", input_type=File(optional=True), prefix="--config", doc=InputDocumentation(doc="A configuration file containing the adapter\ninformation and the sample names")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="The output directory where results will be saved")), ToolInput(tag="in_read_min", input_type=File(optional=True), prefix="--read_min", doc=InputDocumentation(doc="Set the minimum read count threshold. Any read file\ncontaining fewer reads than this minimum threshold\nwill not be processed further. Default: 200000")), ToolInput(tag="in_index", input_type=String(optional=True), prefix="--index", doc=InputDocumentation(doc="Specify if single- or double-indexed adapters were\nused for the library preparation (essential\ninformation in order to interpret the control-file\ncorrectly).")), ToolInput(tag="in_seed_mismatches", input_type=Int(optional=True), prefix="--seedMismatches", doc=InputDocumentation(doc="Specifies the maximum mismatch count which will still\nallow a full match to be performed. For more\ninformation see trimmoatic tutorial. Default: 2")), ToolInput(tag="in_palindrome_clip_threshold", input_type=Int(optional=True), prefix="--palindromeClipThreshold", doc=InputDocumentation(doc="Specifies how accurate the match between the two\n'adapter ligated' reads must be for PE palindrome read\nalignment. Default: 30")), ToolInput(tag="in_simple_clip_threshold", input_type=Int(optional=True), prefix="--simpleClipThreshold", doc=InputDocumentation(doc="Specifies how accurate the match between any adapter\netc. sequence must be against a read. For more\ninformation see trimmoatic tutorial. Default: 10")), ToolInput(tag="in_window_size", input_type=Int(optional=True), prefix="--windowSize", doc=InputDocumentation(doc="Specifies the number of bases to average across. For\nmore information see trimmoatic tutorial. Default: 4")), ToolInput(tag="in_required_quality", input_type=Int(optional=True), prefix="--requiredQuality", doc=InputDocumentation(doc="Specifies the average quality required. For more\ninformation see trimmoatic tutorial. Default: 15")), ToolInput(tag="in_leading_quality", input_type=Int(optional=True), prefix="--leadingQuality", doc=InputDocumentation(doc="Specifies the minimum quality required to keep a base\nat the beginning of the read. For more information see\ntrimmoatic tutorial. Default: 20")), ToolInput(tag="in_trailing_quality", input_type=Int(optional=True), prefix="--trailingQuality", doc=InputDocumentation(doc="Specifies the minimum quality required to keep a base\nat the end of a read. For more information see\ntrimmoatic tutorial. Default: 20")), ToolInput(tag="in_crop_to_length", input_type=Int(optional=True), prefix="--cropToLength", doc=InputDocumentation(doc="The number of bases to keep, from the start of the\nread. Everything exceeding this length will be removed\nfrom the end of the read. For more information see\ntrimmoatic tutorial. Default: 250")), ToolInput(tag="in_head_crop", input_type=Int(optional=True), prefix="--headCrop", doc=InputDocumentation(doc="The number of bases to remove from the start of the\nread. For more information see trimmoatic tutorial.\nDefault: 0")), ToolInput(tag="in_minlength", input_type=Int(optional=True), prefix="--minLength", doc=InputDocumentation(doc="Specifies the minimum length of reads to be kept. For\nmore information see trimmoatic tutorial. Default: 40\n"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="The output directory where results will be saved"))], container="quay.io/biocontainers/secapr:2.1.1--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Secapr_Clean_Reads_V0_1_0().translate("wdl")

