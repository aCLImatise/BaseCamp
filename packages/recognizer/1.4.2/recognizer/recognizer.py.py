from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Directory, Boolean, String, File

Recognizer_Py_V0_1_0 = CommandToolBuilder(tool="recognizer.py", base_command=["recognizer.py"], inputs=[ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads for reCOGnizer to use. Default is\nnumber of CPUs available minus 2.")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory")), ToolInput(tag="in_download_resources", input_type=Boolean(optional=True), prefix="--download-resources", doc=InputDocumentation(doc="If resources for reCOGnizer are not available at\n'resources_directory'")), ToolInput(tag="in_resources_directory", input_type=Directory(optional=True), prefix="--resources-directory", doc=InputDocumentation(doc="Output directory for storing databases and other\nresources")), ToolInput(tag="in_dbs", input_type=String(optional=True), prefix="-dbs", doc=InputDocumentation(doc="[{CDD,Pfam,NCBIfam,Protein_Clusters,Smart,TIGRFAM,COG,KOG} ...], --databases {CDD,Pfam,NCBIfam,Protein_Clusters,Smart,TIGRFAM,COG,KOG} [{CDD,Pfam,NCBIfam,Protein_Clusters,Smart,TIGRFAM,COG,KOG} ...]\nDatabases to include in functional annotation")), ToolInput(tag="in_database", input_type=Int(optional=True), prefix="--database", doc=InputDocumentation(doc="Basename of database for annotation. If multiple\ndatabases, use comma separated list (db1,db2,db3)")), ToolInput(tag="in_custom_database", input_type=Boolean(optional=True), prefix="--custom-database", doc=InputDocumentation(doc="If database was NOT produced by reCOGnizer")), ToolInput(tag="in_max_target_seqs", input_type=Int(optional=True), prefix="--max-target-seqs", doc=InputDocumentation(doc="Number of maximum identifications for each protein.\nDefault is 1.")), ToolInput(tag="in_tsv", input_type=Boolean(optional=True), prefix="--tsv", doc=InputDocumentation(doc="Tables will be produced in TSV format (and not EXCEL).")), ToolInput(tag="in_remove_spaces", input_type=Boolean(optional=True), prefix="--remove-spaces", doc=InputDocumentation(doc="BLAST ignores sequences IDs after the first space.\nThis option changes all spaces to underscores to keep\nthe full IDs.")), ToolInput(tag="in_no_output_sequences", input_type=Boolean(optional=True), prefix="--no-output-sequences", doc=InputDocumentation(doc="Protein sequences from the FASTA input will be stored\nin their own column.")), ToolInput(tag="in_no_blast_info", input_type=Boolean(optional=True), prefix="--no-blast-info", doc=InputDocumentation(doc="Information from the alignment will be stored in their\nown columns.")), ToolInput(tag="in_file", input_type=File(optional=True), prefix="--file", doc=InputDocumentation(doc="Fasta file with protein sequences for annotation"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory")), ToolOutput(tag="out_resources_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_resources_directory", type_hint=File()), doc=OutputDocumentation(doc="Output directory for storing databases and other\nresources"))], container="quay.io/biocontainers/recognizer:1.4.2--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Recognizer_Py_V0_1_0().translate("wdl")

