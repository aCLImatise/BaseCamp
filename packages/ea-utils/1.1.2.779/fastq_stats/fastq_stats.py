from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String

Fastq_Stats_V0_1_0 = CommandToolBuilder(tool="fastq_stats", base_command=["fastq-stats"], inputs=[ToolInput(tag="in_cyclemax_max_cycles", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="cyclemax: max cycles for which following quality stats are produced [35]")), ToolInput(tag="in_window_max_window", input_type=Int(optional=True), prefix="-w", doc=InputDocumentation(doc="window: max window size for generating duplicate read statistics [2000000]")), ToolInput(tag="in_debug_prints_statements", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="debug: prints out debug statements")), ToolInput(tag="in_do_duplicate_read", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="don't do duplicate read statistics")), ToolInput(tag="in_number_top_duplicate", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc="number of top duplicate reads to display")), ToolInput(tag="in_output_fastx_requires", input_type=File(optional=True), prefix="-x", doc=InputDocumentation(doc="output fastx statistics (requires an output filename)")), ToolInput(tag="in_output_base_breakdown", input_type=Int(optional=True), prefix="-b", doc=InputDocumentation(doc="output base breakdown by per phred quality at every cycle.\nIt sets cylemax to longest read length")), ToolInput(tag="in_output_length_counts", input_type=Int(optional=True), prefix="-L", doc=InputDocumentation(doc="Output length counts")), ToolInput(tag="in_reads", input_type=String(), position=0, doc=InputDocumentation(doc=": #reads in the fastq file")), ToolInput(tag="in_len", input_type=String(), position=1, doc=InputDocumentation(doc=": read length. mean and stdev are provided for variable read lengths")), ToolInput(tag="in_phred", input_type=String(), position=2, doc=InputDocumentation(doc=": phred scale used")), ToolInput(tag="in_window_size", input_type=Int(), position=3, doc=InputDocumentation(doc=": Number of reads used to generate duplicate read statistics")), ToolInput(tag="in_cycle_max", input_type=Int(), position=4, doc=InputDocumentation(doc=": Number of bases to assess for duplicity")), ToolInput(tag="in_dups", input_type=String(), position=5, doc=InputDocumentation(doc=": Number of reads that are duplicates")), ToolInput(tag="in_qual", input_type=String(), position=0, doc=InputDocumentation(doc=": Base Quality min, max and mean"))], outputs=[ToolOutput(tag="out_output_fastx_requires", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_fastx_requires", type_hint=File()), doc=OutputDocumentation(doc="output fastx statistics (requires an output filename)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fastq_Stats_V0_1_0().translate("wdl", allow_empty_container=True)

