from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean

Fastq_Multx_V0_1_0 = CommandToolBuilder(tool="fastq_multx", base_command=["fastq-multx"], inputs=[ToolInput(tag="in_output_files_one", input_type=Int(optional=True), prefix="-o", doc=InputDocumentation(doc="Output files (one per input, required)")), ToolInput(tag="in_determine_barcodes_seqfil", input_type=String(optional=True), prefix="-g", doc=InputDocumentation(doc="Determine barcodes from the indexed read SEQFIL")), ToolInput(tag="in_determine_barcodes_read", input_type=String(optional=True), prefix="-l", doc=InputDocumentation(doc="Determine barcodes from any read, using BCFIL as a master list")), ToolInput(tag="in_determine_barcodes_readfq", input_type=Int(optional=True), prefix="-L", doc=InputDocumentation(doc="Determine barcodes from <read1.fq>, using BCFIL as a master list")), ToolInput(tag="in_use_barcodes_bcfil", input_type=Int(optional=True), prefix="-B", doc=InputDocumentation(doc="Use barcodes from BCFIL, no determination step, codes in <read1.fq>")), ToolInput(tag="in_use_barcodes_read", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="Use barcodes from illumina's header, instead of a read")), ToolInput(tag="in_force_beginning_line", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="Force beginning of line (5') for barcode matching")), ToolInput(tag="in_force_end_matching", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="Force end of line (3') for batcode matching")), ToolInput(tag="in_divide_threshold_sensitive", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="Divide threshold for auto-determine by factor NUM (1), > 1 = more sensitive")), ToolInput(tag="in_use_groups_matching", input_type=String(optional=True), prefix="-G", doc=InputDocumentation(doc="Use group(s) matching NAME only")), ToolInput(tag="in_trim_barcodes_writing", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="Don't trim barcodes off before writing out destination")), ToolInput(tag="in_execute_print_list", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="Don't execute, just print likely barcode list")), ToolInput(tag="in_verify_mated_d", input_type=String(optional=True), prefix="-v", doc=InputDocumentation(doc="Verify that mated id's match up to character C (Use ' ' for illumina)")), ToolInput(tag="in_allow_as_long", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Allow up to N mismatches, as long as they are unique (1)")), ToolInput(tag="in_require_minimum_distance", input_type=Int(optional=True), prefix="-d", doc=InputDocumentation(doc="Require a minimum distance of N between the best and next best (2)")), ToolInput(tag="in_require_minimum_quality", input_type=Int(optional=True), prefix="-q", doc=InputDocumentation(doc="Require a minimum phred quality of N to accept a barcode base (0)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fastq_Multx_V0_1_0().translate("wdl", allow_empty_container=True)

