from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Np_Likeness_V0_1_0 = CommandToolBuilder(tool="np_likeness", base_command=["np-likeness"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="Input structure file to score or to")), ToolInput(tag="in_in_type", input_type=File(optional=True), prefix="-intype", doc=InputDocumentation(doc="Input file type: Enter sdf/smi")), ToolInput(tag="in_np_trainer", input_type=File(optional=True), prefix="-npTrainer", doc=InputDocumentation(doc="Serialized NP atomSignatures file generated\nby this program")), ToolInput(tag="in_out", input_type=String(optional=True), prefix="-out", doc=InputDocumentation(doc="Output structure from scoring")), ToolInput(tag="in_out_fragments", input_type=File(optional=True), prefix="-outFragments", doc=InputDocumentation(doc="Output .txt file for reconstructed\nfragments. Specify this option only if 'reconstructFragments' is true.\nAlternatively, this option can also be specified along with\n'generateSignatures' as a output file")), ToolInput(tag="in_out_type", input_type=File(optional=True), prefix="-outtype", doc=InputDocumentation(doc="Output file type: Enter sdf/smi")), ToolInput(tag="in_reconstruct_fragments", input_type=Boolean(optional=True), prefix="-reconstructFragments", doc=InputDocumentation(doc="Optional boolean argument {true/false} to\nreconstruct fragments. If true individual fragments with scores are\nwritten out in SMILES format")), ToolInput(tag="in_serialize_signatures", input_type=Boolean(optional=True), prefix="-serializeSignatures", doc=InputDocumentation(doc="Use this function to serialize .txt\nsignatures file generated by this program using 'generateSignatures'\noption.The input for this function is taken via option 'inSignaturesFile'.\nAlternatively, this function can be used alongside 'generateSignatures'\nfunction to directly serialize and store the generated signatures.")), ToolInput(tag="in_signature_height", input_type=Int(optional=True), prefix="-signatureHeight", doc=InputDocumentation(doc="Signature height to be generated; Use this\nalong 'generateSignatures'; Default size: 2")), ToolInput(tag="in_sm_trainer", input_type=File(optional=True), prefix="-smTrainer", doc=InputDocumentation(doc="Serialized SM atomSignatures file generated\nby this program")), ToolInput(tag="in_application_infofor_input", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Application info\nFor input and output file please specify the type using -intype and -outtype repectively.\nCurrently the types can be either sdf/smi.\nIf my mistake you input a sdf file but give it a different format type,\nthe program will not complain but will finish without any output. If output file options (out/outFragments) are unspecified,\nauto generated output files (based on Input format) will be written to the directory of the input file.\n")), ToolInput(tag="in_in_signatures_file", input_type=String(optional=True), prefix="-inSignaturesFile", doc=InputDocumentation(doc="")), ToolInput(tag="in_var_12", input_type=Boolean(optional=True), prefix="-generateSignatures", doc=InputDocumentation(doc="")), ToolInput(tag="in_below_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-generateSignatures           Given input sdf/smi file use this function\nto generate atomSignatures for training molecules.")), ToolInput(tag="in_insignaturesfile_arg_specify", input_type=String(), position=1, doc=InputDocumentation(doc="-inSignaturesFile <arg>       To specify atomSignatures .txt file"))], outputs=[ToolOutput(tag="out_out_fragments", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_fragments", type_hint=File()), doc=OutputDocumentation(doc="Output .txt file for reconstructed\nfragments. Specify this option only if 'reconstructFragments' is true.\nAlternatively, this option can also be specified along with\n'generateSignatures' as a output file")), ToolOutput(tag="out_out_type", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_type", type_hint=File()), doc=OutputDocumentation(doc="Output file type: Enter sdf/smi"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Np_Likeness_V0_1_0().translate("wdl", allow_empty_container=True)

