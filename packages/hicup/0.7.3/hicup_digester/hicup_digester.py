from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory

Hicup_Digester_V0_1_0 = CommandToolBuilder(tool="hicup_digester", base_command=["hicup_digester"], inputs=[ToolInput(tag="in_arima", input_type=Boolean(optional=True), prefix="--arima", doc=InputDocumentation(doc="Set the --re1 option to that used by the Arima protocol:\n^GATC,DpnII:G^ANTC,Arima")), ToolInput(tag="in_re_one", input_type=Boolean(optional=True), prefix="--re1", doc=InputDocumentation(doc="Restriction enzyme used to digest the genome (the enzyme\nthat forms the ligation junction) e.g. A^GATCT,BglII.\nSome Hi-C protocols may use several enzymes.\nTo specify several enzymes, use the ':' to separate them\ne.g. A^GATCT,BglII:A^AGCTT,HindIII:^GATC,DpnII.\nHiCUP accomodates N in restriction enzyme: e.g. :A^ANCTT")), ToolInput(tag="in_re_two", input_type=Boolean(optional=True), prefix="--re2", doc=InputDocumentation(doc="To specify a restriction enzyme instead of sonication to shorten\ndi-tags. This restriction site does NOT form a Hi-C ligation\njunction. 2 e.g. AG^CT,AluI. Typically the sonication\nprotocol is followed.")), ToolInput(tag="in_config", input_type=Boolean(optional=True), prefix="--config", doc=InputDocumentation(doc="Specify the name of the optional configuration file")), ToolInput(tag="in_genome", input_type=File(optional=True), prefix="--genome", doc=InputDocumentation(doc="Name of the genome to be digested (not the path to the genome file\nor files, but the genome name to include in the output file)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Specify the directory to which the output files should be\nwritten")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppress all progress reports")), ToolInput(tag="in_zip", input_type=Boolean(optional=True), prefix="--zip", doc=InputDocumentation(doc="Print the results to a gzip file"))], outputs=[ToolOutput(tag="out_genome", output_type=File(optional=True), selector=InputSelector(input_to_select="in_genome", type_hint=File()), doc=OutputDocumentation(doc="Name of the genome to be digested (not the path to the genome file\nor files, but the genome name to include in the output file)")), ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Specify the directory to which the output files should be\nwritten"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hicup_Digester_V0_1_0().translate("wdl", allow_empty_container=True)

