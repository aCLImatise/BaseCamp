from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Int, String, Boolean

Markrepeatunique_V0_1_0 = CommandToolBuilder(tool="markRepeatUnique", base_command=["markRepeatUnique"], inputs=[ToolInput(tag="in_mandatory_path_g", input_type=File(optional=True), prefix="-g", doc=InputDocumentation(doc="Mandatory, path G to a gkpStore directory.")), ToolInput(tag="in_mandatory_path_t", input_type=File(optional=True), prefix="-t", doc=InputDocumentation(doc="<v>   Mandatory, path T to a tigStore, and version V.")), ToolInput(tag="in_microhet_probability_default", input_type=Float(optional=True), prefix="-e", doc=InputDocumentation(doc="Microhet probability (default 1e-5)")), ToolInput(tag="in_microhet_cutoff_default", input_type=Int(optional=True), prefix="-i", doc=InputDocumentation(doc="Microhet cutoff (default -1)")), ToolInput(tag="in_unitig_unique_astat", input_type=String(optional=True), prefix="-j", doc=InputDocumentation(doc="Unitig is not unique if astat is below J (cgbUniqueCutoff)")), ToolInput(tag="in_span", input_type=Float(optional=True), prefix="-span", doc=InputDocumentation(doc="Unitig is not unique if a single read spans more than fraction F (default 1.0) of unitig")), ToolInput(tag="in_low_cov", input_type=Float(optional=True), prefix="-lowcov", doc=InputDocumentation(doc="F  Unitig is not unique if fraction F (default 1.0) of unitig is below read depth D (default 2)")), ToolInput(tag="in_reads", input_type=Float(optional=True), prefix="-reads", doc=InputDocumentation(doc="Unitig is not unique if unitig has fewer than R (default 2) reads\nIf R is fractional, the least populous unitigs containing fraction R of reads are marked as repeat\nExample: unitigs with 9 or fewer reads contain 10% of the reads.  -reads 0.10 would mark these are repeat.")), ToolInput(tag="in_long", input_type=String(optional=True), prefix="-long", doc=InputDocumentation(doc="Unitig is unique if unitig is at least L (default unlimited) bases long")), ToolInput(tag="in_short", input_type=Int(optional=True), prefix="-short", doc=InputDocumentation(doc="Unitig is not unique if unitig is shorter than S (default 1000) bases long")), ToolInput(tag="in_prefix_output_files", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="Prefix for output files.")), ToolInput(tag="in_do_update_tigstore", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="Do not update the tigStore.")), ToolInput(tag="in_version", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Markrepeatunique_V0_1_0().translate("wdl", allow_empty_container=True)

