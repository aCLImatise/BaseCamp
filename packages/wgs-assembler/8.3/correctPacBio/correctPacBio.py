from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String

Correctpacbio_V0_1_0 = CommandToolBuilder(tool="correctPacBio", base_command=["correctPacBio"], inputs=[ToolInput(tag="in_mandatory_path_gkpstore", input_type=Boolean(optional=True), prefix="-G", doc=InputDocumentation(doc="Mandatory path to a gkpStore.")), ToolInput(tag="in_no_more_fraction", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="no more than 0.015 fraction (1.5%) error")), ToolInput(tag="in_no_more_errors", input_type=Int(optional=True), prefix="-E", doc=InputDocumentation(doc="no more than 0 errors")), ToolInput(tag="in_ignore_overlaps_rate", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="ignore overlaps over this rate before correction")), ToolInput(tag="in_use_threads_process", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="use 2 threads to process correction in parallel")), ToolInput(tag="in_output_results_files", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="output 100 results files, corresponds to #of parallel consensus jobs desired")), ToolInput(tag="in_output_prefix_asm", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="output prefix of asm")), ToolInput(tag="in_specify_coverage_integer", input_type=Int(optional=True), prefix="-C", doc=InputDocumentation(doc="Specify the pacBio coverage (integer) instead of automatically estimating.")), ToolInput(tag="in_maximum_uncorrected_pacbio", input_type=Int(optional=True), prefix="-M", doc=InputDocumentation(doc="The maximum uncorrected PacBio gap that will be allowed. When there is no short-read coverage for a region, by default the pipeline will split a PacBio sequence. This option allows a number of PacBio sequences without short-read coverage to remain. For example, specifying 50, will mean 50bp can have no short-read coverage without splitting the PacBio sequence. Warning: this will allow more sequences that went through the SMRTportal to not be fixed.")), ToolInput(tag="in_percentage_use_recruit", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="The percentage of short reads to use to recruit other PacBio sequences to fill coverage gaps. Must be a decimal value between 0 and 1. Higher values lead to a longer runtime but more gaps being recovered. The default is 0.010000")), ToolInput(tag="in_percentage_mates_used", input_type=Int(optional=True), prefix="-S", doc=InputDocumentation(doc="The percentage of mates used to estimate the library insert size. Must be a decimal value between 0 and 1. For example, specifying 0.10 will use 10 percent of the mates to estimate the insert size. The default is 0.050000")), ToolInput(tag="in_level_verbosity_higher", input_type=Int(optional=True), prefix="-v", doc=InputDocumentation(doc="level of verbosity. Higher values generate more debugging output")), ToolInput(tag="in_consider_pileup_times", input_type=Int(optional=True), prefix="-R", doc=InputDocumentation(doc="consider a pileup of 2.000000 times the mean for a single corrected read to be a repeat and distribute reads to their best locations (this is only useful for metagenomic or non-even coverage datasets. Otherwise the global repeat estimate is used instead)")), ToolInput(tag="in_var_13", input_type=String(optional=True), prefix="-O", doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Correctpacbio_V0_1_0().translate("wdl", allow_empty_container=True)

