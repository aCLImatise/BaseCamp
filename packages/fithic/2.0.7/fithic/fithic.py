from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean, Float

Fithic_V0_1_0 = CommandToolBuilder(tool="fithic", base_command=["fithic"], inputs=[ToolInput(tag="in_interactions", input_type=File(optional=True), prefix="--interactions", doc=InputDocumentation(doc="REQUIRED: interactions between fragment pairs are read\nfrom INTERSFILE")), ToolInput(tag="in_fragments", input_type=File(optional=True), prefix="--fragments", doc=InputDocumentation(doc="REQUIRED: midpoints (or start indices) of the\nfragments are read from FRAGSFILE")), ToolInput(tag="in_outdir", input_type=String(optional=True), prefix="--outdir", doc=InputDocumentation(doc="REQUIRED: where the output files will be written")), ToolInput(tag="in_resolution", input_type=Int(optional=True), prefix="--resolution", doc=InputDocumentation(doc="REQUIRED: If the files are fixed size, please supply\nthe resolution of the dataset here; otherwise, please\nuse a value of 0 if the data is not fixed size.")), ToolInput(tag="in_biases", input_type=File(optional=True), prefix="--biases", doc=InputDocumentation(doc="RECOMMENDED: biases calculated by ICE or KR norm for\neach locus are read from BIASFILE")), ToolInput(tag="in_passes", input_type=Int(optional=True), prefix="--passes", doc=InputDocumentation(doc="OPTIONAL: number of spline passes to run Default is 1")), ToolInput(tag="in_no_of_bins", input_type=Int(optional=True), prefix="--noOfBins", doc=InputDocumentation(doc="OPTIONAL: number of equal-occupancy (count) bins.\nDefault is 100")), ToolInput(tag="in_mapp_ability_th_res", input_type=Int(optional=True), prefix="--mappabilityThres", doc=InputDocumentation(doc="OPTIONAL: minimum number of hits per locus that has to\nexist to call it mappable. DEFAULT is 1.")), ToolInput(tag="in_lib", input_type=File(optional=True), prefix="--lib", doc=InputDocumentation(doc="OPTIONAL: Name of the library that is analyzed to be\nused for name of file prefixes . DEFAULT is fithic")), ToolInput(tag="in_upper_bound", input_type=Int(optional=True), prefix="--upperbound", doc=InputDocumentation(doc="OPTIONAL: upper bound on the intra-chromosomal\ndistance range (unit: base pairs). DEFAULT no limit.\nSTRONGLY suggested to have a limit for large genomes,\nsuch as human/mouse. ex. '1000000, 5000000, etc.'")), ToolInput(tag="in_lower_bound", input_type=Int(optional=True), prefix="--lowerbound", doc=InputDocumentation(doc="OPTIONAL: lower bound on the intra-chromosomal\ndistance range (unit: base pairs). DEFAULT no limit.\nSuggested limit is 2x the resolution of the input\nfiles")), ToolInput(tag="in_visual", input_type=Boolean(optional=True), prefix="--visual", doc=InputDocumentation(doc="OPTIONAL: use this flag for generating plots. DEFAULT\nis False.")), ToolInput(tag="in_contact_type", input_type=String(optional=True), prefix="--contactType", doc=InputDocumentation(doc="OPTIONAL: use this flag to determine which chromosomal\nregions to study (intraOnly, interOnly, All) DEFAULT\nis intraOnly")), ToolInput(tag="in_bias_lower_bound", input_type=Float(optional=True), prefix="--biasLowerBound", doc=InputDocumentation(doc="OPTIONAL: this flag is used to determine the lower\nbound of bias values to discard. DEFAULT is 0.5")), ToolInput(tag="in_bias_upper_bound", input_type=Int(optional=True), prefix="--biasUpperBound", doc=InputDocumentation(doc="OPTIONAL: this flag is used to determine the upper\nbound of bias values to discard. DEFAULT is 2"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fithic_V0_1_0().translate("wdl", allow_empty_container=True)

