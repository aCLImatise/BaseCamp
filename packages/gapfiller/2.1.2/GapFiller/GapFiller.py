from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean, File

Gapfiller_V0_1_0 = CommandToolBuilder(tool="GapFiller", base_command=["GapFiller"], inputs=[ToolInput(tag="in_length_word_used", input_type=Int(optional=True), prefix="--k", doc=InputDocumentation(doc="length of the word used to hash (default: 12)")), ToolInput(tag="in_block_length", input_type=Int(optional=True), prefix="--block-length", doc=InputDocumentation(doc="length of perfect match (default: 15)")), ToolInput(tag="in_output_prefix", input_type=String(optional=True), prefix="--output-prefix", doc=InputDocumentation(doc="output files prefix (default: 'GapFiller_output')")), ToolInput(tag="in_gz", input_type=Boolean(optional=True), prefix="--gz", doc=InputDocumentation(doc="compress output with gzip")), ToolInput(tag="in_bz_two", input_type=Boolean(optional=True), prefix="--bz2", doc=InputDocumentation(doc="compress output with bzip2")), ToolInput(tag="in_see_done", input_type=Int(optional=True), prefix="--seed1", doc=InputDocumentation(doc="seed1 fasta file (can be compressed with gzip or bzip2,\nor a pipe)")), ToolInput(tag="in_seed_two", input_type=Int(optional=True), prefix="--seed2", doc=InputDocumentation(doc="seed2 fasta file (can be compressed with gzip or bzip2,\nor a pipe)")), ToolInput(tag="in_seed_sam", input_type=File(optional=True), prefix="--seed-sam", doc=InputDocumentation(doc="seed sam file sorted by ID, with header (sam or bam\nformat; can be repeated multiple times)")), ToolInput(tag="in_query", input_type=File(optional=True), prefix="--query", doc=InputDocumentation(doc="query fasta file: use different reads for extension\ninstead of seeds (can be compressed with gzip or bzip2,\nor a pipe)")), ToolInput(tag="in_query_sam", input_type=File(optional=True), prefix="--query-sam", doc=InputDocumentation(doc="query sam file: use different reads for extension\ninstead of sam seeds (sam or bam format; can be\nrepeated multiple times)")), ToolInput(tag="in_seed_ins", input_type=Int(optional=True), prefix="--seed-ins", doc=InputDocumentation(doc="seed reads insert size")), ToolInput(tag="in_seed_var", input_type=String(optional=True), prefix="--seed-var", doc=InputDocumentation(doc="seed reads insert variation")), ToolInput(tag="in_store_layout", input_type=Boolean(optional=True), prefix="--store-layout", doc=InputDocumentation(doc="store contigs layout (default: false)")), ToolInput(tag="in_overlap", input_type=Int(optional=True), prefix="--overlap", doc=InputDocumentation(doc="minimum suffix-prefix overlap (default: 30)")), ToolInput(tag="in_mismatch_rate", input_type=Int(optional=True), prefix="--mismatch-rate", doc=InputDocumentation(doc="maximum number of mismatches every 100 bp (default: 5)")), ToolInput(tag="in_ext_threshold", input_type=Int(optional=True), prefix="--extThreshold", doc=InputDocumentation(doc="number of reads needed to extend a contig (default: 2)")), ToolInput(tag="in_limit", input_type=Int(optional=True), prefix="--limit", doc=InputDocumentation(doc="limits the number of extended reads (useful for tests)")), ToolInput(tag="in_no_read_cycle", input_type=Boolean(optional=True), prefix="--no-read-cycle", doc=InputDocumentation(doc="allow reads to be used multiple times within the same\ncontig (default: false)")), ToolInput(tag="in_mate_pairs", input_type=Boolean(optional=True), prefix="--mate-pairs", doc=InputDocumentation(doc="default: paired-ends")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="print a lot of information! Use with --limit option"))], outputs=[], container="quay.io/biocontainers/gapfiller:2.1.2--h176a8bc_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gapfiller_V0_1_0().translate("wdl")

