from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Cdbfasta_V0_1_0 = CommandToolBuilder(tool="cdbfasta", base_command=["cdbfasta"], inputs=[ToolInput(tag="in_index_file_named", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="index file will be named <index_file>; if not given,\nthe index filename is database name plus the suffix '.cidx'")), ToolInput(tag="in_string_characters_beginning", input_type=String(optional=True), prefix="-r", doc=InputDocumentation(doc="a string of characters at the beginning of line\nmarking the start of a record (default: '>')")), ToolInput(tag="in_input_fastq_format", input_type=Int(optional=True), prefix="-Q", doc=InputDocumentation(doc="input as fastq format, i.e. with '@' as record delimiter\nand with records expected to have at least 4 lines")), ToolInput(tag="in_compressed_file_be", input_type=File(optional=True), prefix="-z", doc=InputDocumentation(doc="is compressed into the file <compressed_db>\nbefore indexing (<fastafile> can be '-' or 'stdin'\nin order to get the input records from stdin)")), ToolInput(tag="in_extraneous_characters_space", input_type=String(optional=True), prefix="-s", doc=InputDocumentation(doc="extraneous characters from *around* the space delimited\ntokens, for the multikey options below (-m,-n,-f);\nDefault <stripendchars> set is: '',`.(){}/[]!:;~|><+-")), ToolInput(tag="in_option_create_entries", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="('multi-key' option) create hash entries pointing to\nthe same record for all tokens found in\nthe defline")), ToolInput(tag="in_same_m_takes", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="same as -m, but only takes the first <numkeys>\ntokens from the defline")), ToolInput(tag="in_space_delimited_fields", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="*space* delimited tokens (fields) in the defline as given\nby LIST of fields or fields ranges (the same syntax as UNIX 'cut')")), ToolInput(tag="in_exclude_indexing_m", input_type=File(optional=True), prefix="-w", doc=InputDocumentation(doc="exclude from indexing all the words found\nin the file <stopwordslist> (for options -m, -n and -k)")), ToolInput(tag="in_case_insensitive_indexing", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc="case insensitive indexing (i.e. create additional keys for\nall-lowercase tokens used for indexing from the defline")), ToolInput(tag="in_deflines_format_dbaccessiondbaccession", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="deflines in the format: db1|accession1|db2|accession2|...,\nonly the first db-accession pair ('db1|accession1') is taken as key")), ToolInput(tag="in_also_subsequent_dbaccession", input_type=Int(optional=True), prefix="-C", doc=InputDocumentation(doc=", but also subsequent db|accession constructs are indexed,\nalong with the full (default) token; additionally,\nall nrdb concatenated accessions found in the defline\nare parsed and stored (assuming 0x01 or '^|^' as separators)")), ToolInput(tag="in_mode_indexes_part", input_type=String(optional=True), prefix="-a", doc=InputDocumentation(doc="mode: like -C option, but indexes the 'accession'\npart for all 'db|accession' constructs found")), ToolInput(tag="in_accessions_constructs_used", input_type=String(optional=True), prefix="-A", doc=InputDocumentation(doc="(both accessions and 'db|accession'\nconstructs are used as keys")), ToolInput(tag="in_program_version_exit", input_type=String(optional=True), prefix="-v", doc=InputDocumentation(doc="program version and exit")), ToolInput(tag="in_invalid", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_fast_a_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_argument", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cdbfasta_V0_1_0().translate("wdl", allow_empty_container=True)

