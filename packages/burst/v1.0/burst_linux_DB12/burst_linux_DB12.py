from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Burst_Linux_Db12_V0_1_0 = CommandToolBuilder(tool="burst_linux_DB12", base_command=["burst_linux_DB12"], inputs=[ToolInput(tag="in_references", input_type=Boolean(optional=True), prefix="--references", doc=InputDocumentation(doc="(-r) <name>: FASTA/edx DB of reference sequences [required]")), ToolInput(tag="in_accelerator", input_type=Boolean(optional=True), prefix="--accelerator", doc=InputDocumentation(doc="(-a) <name>: Creates/uses a helper DB (acc/acx) [optional]")), ToolInput(tag="in_queries", input_type=Boolean(optional=True), prefix="--queries", doc=InputDocumentation(doc="(-q) <name>: FASTA file of queries to search [required if aligning]")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="(-o) <name>: Blast6/edb file for output alignments/database [required]")), ToolInput(tag="in_forward_reverse", input_type=Boolean(optional=True), prefix="--forwardreverse", doc=InputDocumentation(doc="(-fr): also search the reverse complement of queries")), ToolInput(tag="in_whitespace", input_type=Boolean(optional=True), prefix="--whitespace", doc=InputDocumentation(doc="(-w): write full query names in output (include whitespace)")), ToolInput(tag="in_x_alphabet", input_type=Boolean(optional=True), prefix="--xalphabet", doc=InputDocumentation(doc="(-x): Allow any alphabet and disable ambiguity matching")), ToolInput(tag="in_n_wildcard", input_type=Boolean(optional=True), prefix="--nwildcard", doc=InputDocumentation(doc="(-y): Allow N,X to match anything (in query and reference)")), ToolInput(tag="in_taxonomy", input_type=Boolean(optional=True), prefix="--taxonomy", doc=InputDocumentation(doc="(-b) <name>: taxonomy map (to interpolate, use -m CAPITALIST)")), ToolInput(tag="in_mode", input_type=Boolean(optional=True), prefix="--mode", doc=InputDocumentation(doc="(-m) <name>: Pick an alignment reporting mode by name. Available modes:\nBEST (report first best match by hybrid BLAST id)\nALLPATHS (report all ties with same error profile)\nCAPITALIST (minimize set of references AND interpolate taxonomy) [default]\nFORAGE (report all matches above specified threshold)\nANY (report any valid hit above specified threshold)")), ToolInput(tag="in_make_db", input_type=Boolean(optional=True), prefix="--makedb", doc=InputDocumentation(doc="(-d) [name qLen]: Create a database from input references\n[name]: Optional. Can be DNA, RNA, or QUICK [QUICK]\n[qLen]: Optional. Max query length to search in DB [500]")), ToolInput(tag="in_db_partition", input_type=Boolean(optional=True), prefix="--dbpartition", doc=InputDocumentation(doc="(-dp) <int>: Split DB making into <int> chunks (lossy) [1]")), ToolInput(tag="in_tax_a_cut", input_type=Boolean(optional=True), prefix="--taxacut", doc=InputDocumentation(doc="(-bc) <num>: allow 1/<int> rank discord OR % conf; 1/[10]")), ToolInput(tag="in_tax_a_ncbi", input_type=Boolean(optional=True), prefix="--taxa_ncbi", doc=InputDocumentation(doc="(-bn): Assume NCBI header format '>xxx|accsn...' for taxonomy")), ToolInput(tag="in_skip_am_big", input_type=Boolean(optional=True), prefix="--skipambig", doc=InputDocumentation(doc="(-sa): Do not consider highly ambiguous queries (5+ ambigs)")), ToolInput(tag="in_tax_a_suppress", input_type=Boolean(optional=True), prefix="--taxasuppress", doc=InputDocumentation(doc="(-bs) [STRICT]: Suppress taxonomic specificity by %ID")), ToolInput(tag="in_id", input_type=Boolean(optional=True), prefix="--id", doc=InputDocumentation(doc="(-i) <decimal>: target minimum similarity (range 0-1) [0.97]")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="(-t) <int>: How many logical processors to use [8]")), ToolInput(tag="in_shear", input_type=Boolean(optional=True), prefix="--shear", doc=InputDocumentation(doc="(-s) [len]: Shear references longer than [len] bases [500]")), ToolInput(tag="in_fingerprint", input_type=Boolean(optional=True), prefix="--fingerprint", doc=InputDocumentation(doc="(-f): Use sketch fingerprints to precheck matches (or cluster db)")), ToolInput(tag="in_pre_pass", input_type=Boolean(optional=True), prefix="--prepass", doc=InputDocumentation(doc="(-p) [speed]: use ultra-heuristic pre-matching\n[speed]: Optional. Integer, maximum search effort [16]")), ToolInput(tag="in_heuristic", input_type=Boolean(optional=True), prefix="--heuristic", doc=InputDocumentation(doc="(-hr): allow relaxed comparison of low-id matches")), ToolInput(tag="in_no_progress", input_type=Boolean(optional=True), prefix="--noprogress", doc=InputDocumentation(doc=": suppress progress indicator"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="(-o) <name>: Blast6/edb file for output alignments/database [required]"))], container="quay.io/biocontainers/burst:v1.0--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Burst_Linux_Db12_V0_1_0().translate("wdl")

