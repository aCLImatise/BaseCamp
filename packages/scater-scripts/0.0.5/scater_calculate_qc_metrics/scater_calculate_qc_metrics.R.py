from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int

Scater_Calculate_Qc_Metrics_R_V0_1_0 = CommandToolBuilder(tool="scater_calculate_qc_metrics.R", base_command=["scater-calculate-qc-metrics.R"], inputs=[ToolInput(tag="in_input_object_file", input_type=File(optional=True), prefix="--input-object-file", doc=InputDocumentation(doc="singleCellExperiment object containing expression values and experimental information. Must have been appropriately prepared.")), ToolInput(tag="in_exprs_values", input_type=String(optional=True), prefix="--exprs-values", doc=InputDocumentation(doc="A string indicating which ‘assays’ in the ‘object’ should be used to define expression.")), ToolInput(tag="in_feature_controls", input_type=File(optional=True), prefix="--feature-controls", doc=InputDocumentation(doc="file containing a list of the control files with one file per line. Each control file should have one feature (e.g. gene) per line. A named list is created (names derived from control file names) containing one or more vectors to identify feature controls (for example, ERCC spike-in genes, mitochondrial genes, etc)")), ToolInput(tag="in_cell_controls", input_type=File(optional=True), prefix="--cell-controls", doc=InputDocumentation(doc="file (one cell per line) to be used to derive a vector of cell (sample) names used to identify cell controls (for example, blank wells or bulk controls).")), ToolInput(tag="in_percent_top", input_type=Int(optional=True), prefix="--percent-top", doc=InputDocumentation(doc="Comma-separated list of integers. Each element is treated as a number of top genes to compute the percentage of library size occupied by the most highly expressed genes in each cell.")), ToolInput(tag="in_detection_limit", input_type=String(optional=True), prefix="--detection-limit", doc=InputDocumentation(doc="A numeric scalar to be passed to 'nexprs', specifying the lower detection limit for expression.")), ToolInput(tag="in_use_spikes", input_type=String(optional=True), prefix="--use-spikes", doc=InputDocumentation(doc="A logical scalar indicating whether existing spike-in sets in ‘object’ should be automatically added to 'feature_controls', see '?isSpike'.")), ToolInput(tag="in_output_object_file", input_type=File(optional=True), prefix="--output-object-file", doc=InputDocumentation(doc="file name in which to store serialized R object of type 'SingleCellExperiment'."))], outputs=[ToolOutput(tag="out_output_object_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_object_file", type_hint=File()), doc=OutputDocumentation(doc="file name in which to store serialized R object of type 'SingleCellExperiment'."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Scater_Calculate_Qc_Metrics_R_V0_1_0().translate("wdl", allow_empty_container=True)

