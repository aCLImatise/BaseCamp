from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Hisatgenotype_Hla_Cyp_Py_V0_1_0 = CommandToolBuilder(tool="hisatgenotype_hla_cyp.py", base_command=["hisatgenotype_hla_cyp.py"], inputs=[ToolInput(tag="in_base", input_type=File(optional=True), prefix="--base", doc=InputDocumentation(doc="base filename for backbone HLA sequence, HLA variants,\nand HLA linking info")), ToolInput(tag="in_default_list", input_type=String(optional=True), prefix="--default-list", doc=InputDocumentation(doc="A comma-separated list of HLA alleles to be tested.\nAlleles are retrieved from default backbone data (all\nalleles included in backbone).")), ToolInput(tag="in_reference_type", input_type=String(optional=True), prefix="--reference-type", doc=InputDocumentation(doc="Reference type: gene, chromosome, and genome (default:\ngene)")), ToolInput(tag="in_hla_list", input_type=Int(optional=True), prefix="--hla-list", doc=InputDocumentation(doc="A comma-separated list of HLA genes (default:\nA,B,C,DQA1,DQB1,DRB1)")), ToolInput(tag="in_partial", input_type=Boolean(optional=True), prefix="--partial", doc=InputDocumentation(doc="Include partial alleles (e.g. A_nuc.fasta)")), ToolInput(tag="in_aligner_list", input_type=Int(optional=True), prefix="--aligner-list", doc=InputDocumentation(doc="A comma-separated list of aligners (default:\nhisat2.graph,hisat2.linear,bowtie2.linear)")), ToolInput(tag="in_reads", input_type=File(optional=True), prefix="--reads", doc=InputDocumentation(doc="Fastq read file name")), ToolInput(tag="in_alignment", input_type=File(optional=True), prefix="--alignment", doc=InputDocumentation(doc="BAM file name")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads")), ToolInput(tag="in_simulate_interval", input_type=Int(optional=True), prefix="--simulate-interval", doc=InputDocumentation(doc="Reads simulated at every these base pairs (default: 1)")), ToolInput(tag="in_coverage", input_type=Boolean(optional=True), prefix="--coverage", doc=InputDocumentation(doc="Experimental purpose (assign reads based on coverage)")), ToolInput(tag="in_exclude_allele_list", input_type=Int(optional=True), prefix="--exclude-allele-list", doc=InputDocumentation(doc="A comma-separated list of alleles to be excluded.\nEnter a number N to randomly select N alleles for\nexclusion and N non-excluded alleles for testing (2N\ntested in total).")), ToolInput(tag="in_num_mismatch", input_type=Int(optional=True), prefix="--num-mismatch", doc=InputDocumentation(doc="Maximum number of mismatches per read alignment to be\nconsidered (default: 0)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="also print some statistics to stderr")), ToolInput(tag="in_debug", input_type=Int(optional=True), prefix="--debug", doc=InputDocumentation(doc="e.g., test_id:10,read_id:10000,basic_test")), ToolInput(tag="in_novel_allele_detection", input_type=Boolean(optional=True), prefix="--novel_allele_detection", doc=InputDocumentation(doc="Change test to detection of new alleles. Report\nsensitivity and specificity rate at the end.\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hisatgenotype_Hla_Cyp_Py_V0_1_0().translate("wdl", allow_empty_container=True)

