from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean, Directory

Psytrans_Py_V0_1_0 = CommandToolBuilder(tool="psytrans.py", base_command=["psytrans.py"], inputs=[ToolInput(tag="in_species_one", input_type=Int(optional=True), prefix="--species1", doc=InputDocumentation(doc="Reference sequences for the first species")), ToolInput(tag="in_species_two", input_type=Int(optional=True), prefix="--species2", doc=InputDocumentation(doc="Reference sequences for the second species")), ToolInput(tag="in_blast_results", input_type=String(optional=True), prefix="--blastResults", doc=InputDocumentation(doc="Blast results obtained")), ToolInput(tag="in_blast_type", input_type=String(optional=True), prefix="--blastType", doc=InputDocumentation(doc="Type of blast search to be performed")), ToolInput(tag="in_nb_threads", input_type=Int(optional=True), prefix="--nbThreads", doc=InputDocumentation(doc="Number of threads to run the BLAST search and SVM")), ToolInput(tag="in_max_beste_value", input_type=Int(optional=True), prefix="--maxBestEvalue", doc=InputDocumentation(doc="Maximum e-value")), ToolInput(tag="in_number_of_seq", input_type=Int(optional=True), prefix="--numberOfSeq", doc=InputDocumentation(doc="Maximum number of sequences for training and testing")), ToolInput(tag="in_min_seq_size", input_type=Int(optional=True), prefix="--minSeqSize", doc=InputDocumentation(doc="Minimum sequence size for training and testing")), ToolInput(tag="in_min_word_size", input_type=Int(optional=True), prefix="--minWordSize", doc=InputDocumentation(doc="Minimum value of DNA word length")), ToolInput(tag="in_max_word_size", input_type=Int(optional=True), prefix="--maxWordSize", doc=InputDocumentation(doc="Maxmimum value of DNA word length")), ToolInput(tag="in_both_strands", input_type=Boolean(optional=True), prefix="--bothStrands", doc=InputDocumentation(doc="Compute kmers for the forward and reverse strands")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Turn Verbose mode on?")), ToolInput(tag="in_tempdir", input_type=Directory(optional=True), prefix="--tempDir", doc=InputDocumentation(doc="Location (prefix) of the temporary directory")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outDir", doc=InputDocumentation(doc="Name of optional output directory")), ToolInput(tag="in_clear_temp", input_type=Boolean(optional=True), prefix="--clearTemp", doc=InputDocumentation(doc="Clear all temporary data upon completion")), ToolInput(tag="in_stop_after", input_type=String(optional=True), prefix="--stopAfter", doc=InputDocumentation(doc="Optional exit upon completion of stage.")), ToolInput(tag="in_restart", input_type=Boolean(optional=True), prefix="--restart", doc=InputDocumentation(doc="Continue process from last exit stage"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Name of optional output directory"))], container="quay.io/biocontainers/psytrans:2.0.0--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Psytrans_Py_V0_1_0().translate("wdl")

