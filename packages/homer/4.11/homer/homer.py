from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String, Float

Homer_V0_1_0 = CommandToolBuilder(tool="homer", base_command=["homer"], inputs=[ToolInput(tag="in_prot", input_type=Boolean(optional=True), prefix="-prot", doc=InputDocumentation(doc=": Sequence type (-dna)")), ToolInput(tag="in__sequence_file", input_type=File(optional=True), prefix="-s", doc=InputDocumentation(doc=": Sequence File")), ToolInput(tag="in__groupstat_file", input_type=File(optional=True), prefix="-g", doc=InputDocumentation(doc=": Group/Stat File")), ToolInput(tag="in_mer", input_type=File(optional=True), prefix="-mer", doc=InputDocumentation(doc=": Mer File")), ToolInput(tag="in_pssm_motif_file", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc=": PSSM Motif File")), ToolInput(tag="in_output_file_prefix", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc=": output file prefix")), ToolInput(tag="in_seed", input_type=File(optional=True), prefix="-seed", doc=InputDocumentation(doc=": seed file")), ToolInput(tag="in_offset", input_type=Boolean(optional=True), prefix="-offset", doc=InputDocumentation(doc="<#> : offset of sequence from TSS (-2000)")), ToolInput(tag="in_exact", input_type=Boolean(optional=True), prefix="-exact", doc=InputDocumentation(doc=": remember mapping between mers and genes (default: approx)")), ToolInput(tag="in_weight_sequences_according", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc=": Weight sequences (according to addition columns in group file: 1st-gene 2nd-sequence)")), ToolInput(tag="in_test_sequences_sequences", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc=": Test all sequences as candidate motifs (default: only test target sequences)")), ToolInput(tag="in_no_autoscale", input_type=Boolean(optional=True), prefix="-noautoscale", doc=InputDocumentation(doc=": Do not autoscale sequences to be equal in foreground and background")), ToolInput(tag="in_freq_adjust", input_type=Boolean(optional=True), prefix="-freqAdjust", doc=InputDocumentation(doc=": Compute log-odds using frequency, default (0.25)")), ToolInput(tag="in_dual", input_type=Boolean(optional=True), prefix="-dual", doc=InputDocumentation(doc=": find dual motifs in the form A<gap>B where A and B can be rev-opposites")), ToolInput(tag="in_flip", input_type=Boolean(optional=True), prefix="-flip", doc=InputDocumentation(doc=": find dual motifs in the form A<gap>B or B<gap>A")), ToolInput(tag="in_z_oops_approx", input_type=Boolean(optional=True), prefix="-zoopsapprox", doc=InputDocumentation(doc="<OFF,#(max to count)> : (counts multiple motifs per sequence | default: 2)")), ToolInput(tag="in_norev_opp", input_type=Boolean(optional=True), prefix="-norevopp", doc=InputDocumentation(doc=": don't search opposite strand (default->DNA:yes, Protein:no)")), ToolInput(tag="in_min", input_type=Boolean(optional=True), prefix="-min", doc=InputDocumentation(doc="<#> : min mer size (6)")), ToolInput(tag="in_max", input_type=Boolean(optional=True), prefix="-max", doc=InputDocumentation(doc="<#> : max mer size [also standard mer size] (10)")), ToolInput(tag="in_len", input_type=Boolean(optional=True), prefix="-len", doc=InputDocumentation(doc="<#> : Find motifs of length # (default=10)")), ToolInput(tag="in_gap", input_type=Boolean(optional=True), prefix="-gap", doc=InputDocumentation(doc="<#,#,#-#> : Find motifs with gaps(0)(i.e. -gap 3 -gap 2,4,5 -gap 1-10\nGaps will only be in the center of motif and will only use even lengthed motifs")), ToolInput(tag="in_mis", input_type=Boolean(optional=True), prefix="-mis", doc=InputDocumentation(doc="<#> : # of mismatches to check for degeneracy (1)")), ToolInput(tag="in_iupac", input_type=Boolean(optional=True), prefix="-IUPAC", doc=InputDocumentation(doc="<#> : # of IUPAC codes per mer that can be used during global optimization (0)")), ToolInput(tag="in_iupac_type", input_type=Boolean(optional=True), prefix="-iupactype", doc=InputDocumentation(doc="<1,2,or3> : Type of IUPAC symbols used\n1: (default) Only N is used\n2: Only N and 2 bp symbols are used (i.e. R = A or G\n3: Full IUPAC code is used (includes 3-way symbols)")), ToolInput(tag="in_number_seeds_check", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="<#> : number of seeds to check during profile optimization(50)")), ToolInput(tag="in_branch", input_type=Boolean(optional=True), prefix="-branch", doc=InputDocumentation(doc="<#> : sets depth of optimization (closer to zero the more sensitive (0.5))")), ToolInput(tag="in_maximum_number_iterations", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="<#> : maximum number of iterations during optimization (5)")), ToolInput(tag="in_rm_align", input_type=Boolean(optional=True), prefix="-rmalign", doc=InputDocumentation(doc=": DO NOT remove aligned seeds")), ToolInput(tag="in_max_neg", input_type=Int(optional=True), prefix="-maxneg", doc=InputDocumentation(doc="maximum percentage of negative genes that can contain the motif")), ToolInput(tag="in_speed", input_type=String(optional=True), prefix="-speed", doc=InputDocumentation(doc=": Program will heuristically avoid performing exhaustive\ncalculations (default: FAST)")), ToolInput(tag="in_alg", input_type=Int(optional=True), prefix="-alg", doc=InputDocumentation(doc=": scoring algorithm (default: hypergeo)\nhypergeo - hypergeometric scoring (ZOOPS)\nbinomial - binomical scoring [for variable length seq] (ZOOPS) (requires exact)\napproxbinomial - binomical scoring [for variable length seq] (ZOOPS) (requires exact)\nsitehypergeo - hypergeometric scoring across seq positions (very slow)\nsitebinomial - binomial scoring across seq positions\nfisher <#> - fisher exact test (slow, # scales exponentially)\n<# = largest repetition to consider [default=2]>\nrank - group file must have sortable numeric value\nfreqdiff - used by most bayesian/nnet programs\nlogit - used by most bayesian/nnet programs")), ToolInput(tag="in_markov_generate_hmm", input_type=String(optional=True), prefix="-b", doc=InputDocumentation(doc="[method options...]\nmarkov <#> - generate hmm from target sequences using a hmm of order #\nbmarkov <#> - generate hmm from background sequences using a hmm of order #\nmosaic - generate mosaic hmm from background sequences **coming soon**")), ToolInput(tag="in_filtering_cutoff_ratio", input_type=Float(optional=True), prefix="-N", doc=InputDocumentation(doc=": filtering cutoff for ratio of N's in sequence (0.9)")), ToolInput(tag="in_seq_less", input_type=Boolean(optional=True), prefix="-seqless", doc=InputDocumentation(doc="<#> : filter sequences shorter than #")), ToolInput(tag="in_seq_more", input_type=Boolean(optional=True), prefix="-seqmore", doc=InputDocumentation(doc="<#> : filter sequences longer than #"))], outputs=[ToolOutput(tag="out_output_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_prefix", type_hint=File()), doc=OutputDocumentation(doc=": output file prefix"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Homer_V0_1_0().translate("wdl", allow_empty_container=True)

