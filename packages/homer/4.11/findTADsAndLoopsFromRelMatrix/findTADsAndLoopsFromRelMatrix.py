from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Findtadsandloopsfromrelmatrix_V0_1_0 = CommandToolBuilder(tool="findTADsAndLoopsFromRelMatrix", base_command=["findTADsAndLoopsFromRelMatrix"], inputs=[ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="-prefix", doc=InputDocumentation(doc="(Filename prefix for output files, default: out)")), ToolInput(tag="in_mind_ist", input_type=Boolean(optional=True), prefix="-minDist", doc=InputDocumentation(doc="<#> (minimum interaction distance to score (to avoid diagonal) default: 3 x res)")), ToolInput(tag="in_did_ist", input_type=Boolean(optional=True), prefix="-diDist", doc=InputDocumentation(doc="<#> (Distance used to calculate directionality index, default 1000000)")), ToolInput(tag="in_ins_dist", input_type=Boolean(optional=True), prefix="-insDist", doc=InputDocumentation(doc="<#> (maximum length of interactions used to insulation ratio, default 200000)")), ToolInput(tag="in_mint_ad_score", input_type=Boolean(optional=True), prefix="-minTADscore", doc=InputDocumentation(doc="<#> (minimum inclusion ratio i.e. intra-TAD interactions vs. inter-TAD interaction, def: 1.75)")), ToolInput(tag="in_mint_ad_size", input_type=Boolean(optional=True), prefix="-minTADsize", doc=InputDocumentation(doc="<#> (minimum TAD size, default: 100000)")), ToolInput(tag="in_size_tad_optima", input_type=Boolean(optional=True), prefix="-sizeTADoptima", doc=InputDocumentation(doc="<#> (window size to look for local optima, default: 5xresolution)")), ToolInput(tag="in_no_overlap", input_type=Boolean(optional=True), prefix="-noOverlap", doc=InputDocumentation(doc="(remove overlapping TADs if they overlap more than 0.20 - keep best one)")), ToolInput(tag="in_no_overlap_strict", input_type=Boolean(optional=True), prefix="-noOverlapStrict", doc=InputDocumentation(doc="(remove overlapping TADs if they overlap at all - keep best one)")), ToolInput(tag="in_skip_tads", input_type=Boolean(optional=True), prefix="-skipTADs", doc=InputDocumentation(doc="(don't find TADs)")), ToolInput(tag="in_min_loop_dist", input_type=Boolean(optional=True), prefix="-minLoopDist", doc=InputDocumentation(doc="<#> (minimum interaction length for loops)")), ToolInput(tag="in_anchor_size", input_type=Boolean(optional=True), prefix="-anchorSize", doc=InputDocumentation(doc="<#> (size of loop anchor region to count interactions, default 5x res)")), ToolInput(tag="in_anchor_local_bg_size", input_type=Boolean(optional=True), prefix="-anchorLocalBgSize", doc=InputDocumentation(doc="<#> (size of region near loop anchors to calculate background, default 15x res)")), ToolInput(tag="in_fold_local_bg", input_type=Boolean(optional=True), prefix="-foldLocalBg", doc=InputDocumentation(doc="<#> (local fold threshold for interaction for loops, def: 1.5)")), ToolInput(tag="in_fold_global_bg", input_type=Boolean(optional=True), prefix="-foldGlobalBg", doc=InputDocumentation(doc="<#> (global fold threshold [vs. avg interactions per distance] for loops, def: 2.0)")), ToolInput(tag="in_poisson_local_bg", input_type=Boolean(optional=True), prefix="-poissonLocalBg", doc=InputDocumentation(doc="<#> (maximum poisson p-value for loop interactions vs. local background, def: 1e-5)")), ToolInput(tag="in_poisson_global_bg", input_type=Boolean(optional=True), prefix="-poissonGlobalBg", doc=InputDocumentation(doc="<#> (maximum poisson p-value for loop interactions vs. similar distance background, def: 1e-5)")), ToolInput(tag="in_min_loop_reads", input_type=Boolean(optional=True), prefix="-minLoopReads", doc=InputDocumentation(doc="<#> (minimum number of interaction reads for loops, default: automatic)")), ToolInput(tag="in_skip_loops", input_type=Boolean(optional=True), prefix="-skipLoops", doc=InputDocumentation(doc="(don't find loops/anchors)")), ToolInput(tag="in_matrix", input_type=File(optional=True), prefix="-matrix", doc=InputDocumentation(doc="[relative file2] ... (relative matricies to use for scoring)")), ToolInput(tag="in_tad", input_type=File(optional=True), prefix="-tad", doc=InputDocumentation(doc="(score TAD on inclusion ratio)")), ToolInput(tag="in_loop", input_type=File(optional=True), prefix="-loop", doc=InputDocumentation(doc="(score interactions found at loops)")), ToolInput(tag="in_cmd", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prefix", type_hint=File()), doc=OutputDocumentation(doc="(Filename prefix for output files, default: out)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Findtadsandloopsfromrelmatrix_V0_1_0().translate("wdl", allow_empty_container=True)

