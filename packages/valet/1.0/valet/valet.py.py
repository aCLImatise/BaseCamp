from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Directory, Boolean

Valet_Py_V0_1_0 = CommandToolBuilder(tool="valet.py", base_command=["valet.py"], inputs=[ToolInput(tag="in_assembly_fast_a", input_type=File(optional=True), prefix="--assembly-fasta", doc=InputDocumentation(doc="Candidate assembly files")), ToolInput(tag="in_assembly_names", input_type=String(optional=True), prefix="--assembly-names", doc=InputDocumentation(doc="Names for the different assemblies.")), ToolInput(tag="in_reads", input_type=File(optional=True), prefix="--reads", doc=InputDocumentation(doc="First Read File")), ToolInput(tag="in_fastq_filenames_thefirst", input_type=Int(optional=True), prefix="--1", doc=InputDocumentation(doc="Fastq filenames separated by commas that contain the\nfirst mates.")), ToolInput(tag="in_fastq_filenames_thesecond", input_type=Int(optional=True), prefix="--2", doc=InputDocumentation(doc="Fastq filenames separated by commas that contain the\nsecond mates.")), ToolInput(tag="in_coverage_file", input_type=File(optional=True), prefix="--coverage-file", doc=InputDocumentation(doc="Assembly created per-contig coverage file")), ToolInput(tag="in_config_file", input_type=File(optional=True), prefix="--config-file", doc=InputDocumentation(doc="Config file with preset parameters.")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Output directory")), ToolInput(tag="in_window_size", input_type=Int(optional=True), prefix="--window-size", doc=InputDocumentation(doc="Sliding window size when determining misassemblies.")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="if set, input reads are fasta format (by default,\nreads are FASTQ).")), ToolInput(tag="in_fast_q", input_type=Boolean(optional=True), prefix="--fastq", doc=InputDocumentation(doc="if set, input reads are fastq format.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads")), ToolInput(tag="in_mini_ns", input_type=Int(optional=True), prefix="--minins", doc=InputDocumentation(doc="Min insert sizes for mate pairs separated by commas.")), ToolInput(tag="in_max_ins", input_type=Int(optional=True), prefix="--maxins", doc=InputDocumentation(doc="Max insert sizes for mate pairs separated by commas.")), ToolInput(tag="in_orientation", input_type=String(optional=True), prefix="--orientation", doc=InputDocumentation(doc="Orientation of the mates.")), ToolInput(tag="in_mu", input_type=String(optional=True), prefix="--mu", doc=InputDocumentation(doc="average mate pair insert sizes.")), ToolInput(tag="in_sigma", input_type=String(optional=True), prefix="--sigma", doc=InputDocumentation(doc="standard deviation of mate pair insert sizes.")), ToolInput(tag="in_max_alignments", input_type=Int(optional=True), prefix="--max-alignments", doc=InputDocumentation(doc="bowtie2 parameter to set the max number of alignments.")), ToolInput(tag="in_email", input_type=String(optional=True), prefix="--email", doc=InputDocumentation(doc="Email to notify when job completes")), ToolInput(tag="in_min_coverage", input_type=Int(optional=True), prefix="--min-coverage", doc=InputDocumentation(doc="Minimum average coverage to run misassembly detection.")), ToolInput(tag="in_coverage_multiplier", input_type=String(optional=True), prefix="--coverage-multiplier", doc=InputDocumentation(doc="When binning by coverage, the new high = high + high *\nmultiplier")), ToolInput(tag="in_min_suspicious", input_type=Int(optional=True), prefix="--min-suspicious", doc=InputDocumentation(doc="Minimum number of overlapping flagged miassemblies to\nmark region as suspicious.")), ToolInput(tag="in_suspicious_flank_size", input_type=Int(optional=True), prefix="--suspicious-flank-size", doc=InputDocumentation(doc="Mark region as suspicious if multiple signatures occur\nwithin this window size.")), ToolInput(tag="in_min_contig_length", input_type=Int(optional=True), prefix="--min-contig-length", doc=InputDocumentation(doc="Ignore contigs smaller than this length.")), ToolInput(tag="in_ignore_ends", input_type=String(optional=True), prefix="--ignore-ends", doc=InputDocumentation(doc="Ignore flagged regions within b bps from the ends of\nthe contigs.")), ToolInput(tag="in_breakpoint_bin", input_type=String(optional=True), prefix="--breakpoint-bin", doc=InputDocumentation(doc="Bin sized used to find breakpoints.")), ToolInput(tag="in_orf_file", input_type=File(optional=True), prefix="--orf-file", doc=InputDocumentation(doc="gff formatted file containing orfs")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="kmer length used for abundance estimation"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Valet_Py_V0_1_0().translate("wdl", allow_empty_container=True)

