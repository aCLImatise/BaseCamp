from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, Int, Float

Bayestyper_Genotype_V0_1_0 = CommandToolBuilder(tool="bayesTyper_genotype", base_command=["bayesTyper", "genotype"], inputs=[ToolInput(tag="in_arg_variantclustersbin_file", input_type=File(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --variant-clusters-file ] arg    variant_clusters.bin file (BayesTyper cluster output).")), ToolInput(tag="in_parameterkmersfagz_bayestyper_cluster", input_type=Directory(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --cluster-data-dir ] arg         cluster data directory containing intercluster_regions.txt.gz, multigroup_kmers.bloom[Meta|Data] &\nparameter_kmers.fa.gz (BayesTyper cluster output).")), ToolInput(tag="in_arg_samples_file", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --samples-file ] arg             samples file (see github documentation for format specifications).")), ToolInput(tag="in_arg_reference_genome", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --genome-file ] arg              reference genome file (fasta format).")), ToolInput(tag="in_arg_decoy_sequences", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --decoy-file ] arg               decoy sequences file (fasta format).")), ToolInput(tag="in_arg_bayestyperoutput_prefix", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output-prefix ] arg (=bayestyper)\noutput prefix.")), ToolInput(tag="in_compress_outputprefixvcf_using", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="[ --gzip-output ] [=arg(=1)] (=0)  compress <output-prefix>.vcf using gzip.")), ToolInput(tag="in_arg_unix_time", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --random-seed ] arg (=unix time) seed for pseudo-random number generator.")), ToolInput(tag="in_arg_number_used", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --threads ] arg (=1)             number of threads used (+= 2 I/O threads).")), ToolInput(tag="in_arg_chromosome_gender", input_type=Boolean(optional=True), prefix="-y", doc=InputDocumentation(doc="[ --chromosome-ploidy-file ] arg   chromosome gender ploidy file (see github documentation for format specifications). Human ploidy levels will be assumed\nif no file is given.")), ToolInput(tag="in_gibbs_burn_in", input_type=Int(optional=True), prefix="--gibbs-burn-in", doc=InputDocumentation(doc="(=100)            number of burn-in iterations.")), ToolInput(tag="in_gibbs_samples", input_type=Int(optional=True), prefix="--gibbs-samples", doc=InputDocumentation(doc="(=250)            number of Gibbs iterations.")), ToolInput(tag="in_number_of_gibbs_chains", input_type=Int(optional=True), prefix="--number-of-gibbs-chains", doc=InputDocumentation(doc="(=20)    number of independent Gibbs sampling chains.")), ToolInput(tag="in_km_er_subsampling_rate", input_type=Float(optional=True), prefix="--kmer-subsampling-rate", doc=InputDocumentation(doc="(=0.1)    subsampling rate for subsetting kmers used for genotype inference.")), ToolInput(tag="in_max_haplotype_variant_km_ers", input_type=Int(optional=True), prefix="--max-haplotype-variant-kmers", doc=InputDocumentation(doc="(=500)\nmaximum number of kmers used for genotype inference after subsampling across a haplotype candidate for each variant.")), ToolInput(tag="in_noise_genotyping", input_type=Boolean(optional=True), prefix="--noise-genotyping", doc=InputDocumentation(doc="[=arg(=1)] (=0)    estimate noise model parameters and genotypes jointly (generally slower and uses more memory).")), ToolInput(tag="in_noise_rate_prior", input_type=Float(optional=True), prefix="--noise-rate-prior", doc=InputDocumentation(doc="(=1,0.01)      parameters for Poisson noise rate gamma prior (<shape>,<scale>). All samples will use the same parameters.")), ToolInput(tag="in_min_genotype_posterior", input_type=Int(optional=True), prefix="--min-genotype-posterior", doc=InputDocumentation(doc="(=0.99)  filter genotypes with a posterior probability (GPP) below <value>.")), ToolInput(tag="in_min_number_of_km_ers", input_type=Int(optional=True), prefix="--min-number-of-kmers", doc=InputDocumentation(doc="(=1)        filter sampled alleles with less than <value> kmers (NAK).")), ToolInput(tag="in_disable_observed_km_ers", input_type=Boolean(optional=True), prefix="--disable-observed-kmers", doc=InputDocumentation(doc="[=arg(=1)] (=0)\ndisable filtering of sampled alleles with a low fraction of observed kmers (FAK).\n"))], outputs=[ToolOutput(tag="out_arg_variantclustersbin_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_variantclustersbin_file", type_hint=File()), doc=OutputDocumentation(doc="[ --variant-clusters-file ] arg    variant_clusters.bin file (BayesTyper cluster output).")), ToolOutput(tag="out_parameterkmersfagz_bayestyper_cluster", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_parameterkmersfagz_bayestyper_cluster", type_hint=File()), doc=OutputDocumentation(doc="[ --cluster-data-dir ] arg         cluster data directory containing intercluster_regions.txt.gz, multigroup_kmers.bloom[Meta|Data] &\nparameter_kmers.fa.gz (BayesTyper cluster output)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bayestyper_Genotype_V0_1_0().translate("wdl", allow_empty_container=True)

