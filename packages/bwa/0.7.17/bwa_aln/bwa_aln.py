from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, String

Bwa_Aln_V0_1_0 = CommandToolBuilder(tool="bwa_aln", base_command=["bwa", "aln"], inputs=[ToolInput(tag="in_max_diff_int", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="max #diff (int) or missing prob under 0.02 err rate (float) [0.04]")), ToolInput(tag="in_maximum_number_fraction", input_type=Int(optional=True), prefix="-o", doc=InputDocumentation(doc="maximum number or fraction of gap opens [1]")), ToolInput(tag="in_maximum_number_gap", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="maximum number of gap extensions, -1 for disabling long gaps [-1]")), ToolInput(tag="in_put_indel_int", input_type=Int(optional=True), prefix="-i", doc=InputDocumentation(doc="do not put an indel within INT bp towards the ends [5]")), ToolInput(tag="in_maximum_occurrences_extending", input_type=Int(optional=True), prefix="-d", doc=InputDocumentation(doc="maximum occurrences for extending a long deletion [10]")), ToolInput(tag="in_seed_length", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="seed length [32]")), ToolInput(tag="in_maximum_differences_seed", input_type=Int(optional=True), prefix="-k", doc=InputDocumentation(doc="maximum differences in the seed [2]")), ToolInput(tag="in_maximum_entries_queue", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="maximum entries in the queue [2000000]")), ToolInput(tag="in_number_of_threads", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="number of threads [1]")), ToolInput(tag="in_mismatch_penalty", input_type=Int(optional=True), prefix="-M", doc=InputDocumentation(doc="mismatch penalty [3]")), ToolInput(tag="in_gap_open_penalty", input_type=Int(optional=True), prefix="-O", doc=InputDocumentation(doc="gap open penalty [11]")), ToolInput(tag="in_gap_extension_penalty", input_type=Int(optional=True), prefix="-E", doc=InputDocumentation(doc="gap extension penalty [4]")), ToolInput(tag="in_stop_searching_are", input_type=Int(optional=True), prefix="-R", doc=InputDocumentation(doc="stop searching when there are >INT equally best hits [30]")), ToolInput(tag="in_quality_threshold_read", input_type=Int(optional=True), prefix="-q", doc=InputDocumentation(doc="quality threshold for read trimming down to 35bp [0]")), ToolInput(tag="in_file_write_output", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="file to write output to instead of stdout")), ToolInput(tag="in_length_of_barcode", input_type=Int(optional=True), prefix="-B", doc=InputDocumentation(doc="length of barcode")), ToolInput(tag="in_logscaled_gap_penalty", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="log-scaled gap penalty for long deletions")), ToolInput(tag="in_noniterative_mode_search", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="non-iterative mode: search for all n-difference hits (slooow)")), ToolInput(tag="in_input_illumina_format", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="the input is in the Illumina 1.3+ FASTQ-like format")), ToolInput(tag="in_input_read_file", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="the input read file is in the BAM format")), ToolInput(tag="in_use_reads_effective", input_type=Boolean(optional=True), prefix="-0", doc=InputDocumentation(doc="use single-end reads only (effective with -b)")), ToolInput(tag="in_use_st_read", input_type=Boolean(optional=True), prefix="-1", doc=InputDocumentation(doc="use the 1st read in a pair (effective with -b)")), ToolInput(tag="in_use_nd_read", input_type=Boolean(optional=True), prefix="-2", doc=InputDocumentation(doc="use the 2nd read in a pair (effective with -b)")), ToolInput(tag="in_filter_casavafiltered_sequences", input_type=Boolean(optional=True), prefix="-Y", doc=InputDocumentation(doc="filter Casava-filtered sequences")), ToolInput(tag="in_prefix", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_in_dot_fq", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_file_write_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_write_output", type_hint=File()), doc=OutputDocumentation(doc="file to write output to instead of stdout"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bwa_Aln_V0_1_0().translate("wdl", allow_empty_container=True)

