from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Ruby_V0_1_0 = CommandToolBuilder(tool="ruby", base_command=["ruby"], inputs=[ToolInput(tag="in_specify_record_separator", input_type=Boolean(optional=True), prefix="-0", doc=InputDocumentation(doc="[octal]       specify record separator (\0, if no argument)")), ToolInput(tag="in_autosplit_mode_p", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="autosplit mode with -n or -p (splits $_ into $F)")), ToolInput(tag="in_check_syntax_only", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="check syntax only")), ToolInput(tag="in_c_directory", input_type=Boolean(optional=True), prefix="-Cdirectory", doc=InputDocumentation(doc="cd to directory before executing your script")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="set debugging flags (set $DEBUG to true)")), ToolInput(tag="in_s_allowed_omit", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="'command'    one line of script. Several -e's allowed. Omit [programfile]")), ToolInput(tag="in_eex", input_type=Boolean(optional=True), prefix="-Eex", doc=InputDocumentation(doc="[:in], --encoding=ex[:in]\nspecify the default external and internal character encodings")), ToolInput(tag="in_f_pattern", input_type=Boolean(optional=True), prefix="-Fpattern", doc=InputDocumentation(doc="split() pattern for autosplit (-a)")), ToolInput(tag="in_edit_argv_files", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[extension]   edit ARGV files in place (make backup if extension supplied)")), ToolInput(tag="in_i_directory", input_type=Boolean(optional=True), prefix="-Idirectory", doc=InputDocumentation(doc="specify $LOAD_PATH directory (may be used more than once)")), ToolInput(tag="in_enable_line_ending", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="enable line ending processing")), ToolInput(tag="in_assume_loop_your", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="assume 'while gets(); ... end' loop around your script")), ToolInput(tag="in_assume_loop_line", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="assume loop like -n but print line also like sed")), ToolInput(tag="in_r_library", input_type=Boolean(optional=True), prefix="-rlibrary", doc=InputDocumentation(doc="require the library before executing your script")), ToolInput(tag="in_enable_switch_parsing", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="enable some switch parsing for switches after script name")), ToolInput(tag="in_look_script_using", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="look for the script using PATH environment variable")), ToolInput(tag="in_turn_tainting_checks", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[level=1]     turn on tainting checks")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="print version number, then turn on verbose mode")), ToolInput(tag="in_turn_warnings_your", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="turn warnings on for your script")), ToolInput(tag="in_set_medium_verbose", input_type=Boolean(optional=True), prefix="-W", doc=InputDocumentation(doc="[level=2]     set warning level; 0=silence, 1=medium, 2=verbose")), ToolInput(tag="in_strip_text_cd", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="[directory]   strip off text before #!ruby line and perhaps cd to directory")), ToolInput(tag="in_copyright", input_type=Boolean(optional=True), prefix="--copyright", doc=InputDocumentation(doc="print the copyright")), ToolInput(tag="in_enable", input_type=String(optional=True), prefix="--enable", doc=InputDocumentation(doc="[,...], --disable=feature[,...]\nenable or disable features")), ToolInput(tag="in_external_encoding", input_type=String(optional=True), prefix="--external-encoding", doc=InputDocumentation(doc="specify the default external or internal character encoding")), ToolInput(tag="in_gems", input_type=String(), position=0, doc=InputDocumentation(doc="rubygems (default: enabled)")), ToolInput(tag="in_ruby_opt", input_type=String(), position=1, doc=InputDocumentation(doc="RUBYOPT environment variable (default: enabled)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ruby_V0_1_0().translate("wdl", allow_empty_container=True)

