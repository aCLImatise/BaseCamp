!Command
command:
- planemo
- dependency_script
positional:
- !Positional
  description: These are intended to be used via ``bash dep_install.sh`` (once), and
    as
  position: 0
  name: variables.
  optional: false
named:
- !Flag
  description: "Recursively perform command for nested\nrepository directories."
  synonyms:
  - -r
  - --recursive
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "If multiple repositories are specified and an\nerror occurs stop immediately\
    \ instead of\nprocessing remaining repositories."
  synonyms:
  - --fail_fast
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Directory to cache downloaded files, default is\n$DOWNLOAD_CACHE"
  synonyms:
  - --download_cache
  args: !SimpleFlagArg
    name: DIRECTORY
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: Show this message and exit.
  synonyms:
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "Usage: planemo dependency_script [OPTIONS] PROJECT\n\n  Compile tool_dependencies.xml\
  \ to bash script.\n\n  An experimental approach parsing tool_dependencies.xml files\
  \ into bash\n  shell scripts, intended initially for use within Continuous Integration\n\
  \  testing setups like TravisCI.\n\n  Parses the ``tool_dependencies.xml`` files\
  \ from the specified projects,\n  and converts them into an installation bash script\
  \ (``dep_install.sh``),\n  and a shell script (``env.sh``) defining any new/edited\
  \ environment\n  variables.\n\n  These are intended to be used via ``bash dep_install.sh``\
  \ (once), and as\n  ``source env.sh`` prior to running any of the dependencies to\
  \ set the\n  environment variable within the current shell session.\n\n  Both ``dep_install.sh``\
  \ and ``env.sh`` require ``$INSTALL_DIR`` be defined\n  before running them, set\
  \ to an existing directory with write permissions.\n  Beware than if run on multiple\
  \ tools, they can over-write each other (for\n  example if you have packages for\
  \ different versions of the same tool). In\n  this case make separate calls to ``planemo\
  \ dependency_script`` and call\n  the scripts with different installation directories.\n\
  \n  This command will download (and cache) any URLs specified via Galaxy\n  download\
  \ actions. This is in order to decompress them and determine the\n  relevant sub-folder\
  \ to change into as per the Tool Shed install mechanism,\n  so that this can be\
  \ recorded as a ``cd`` comand in the bash script.\n\n  The download cache used by\
  \ ``planemo dependency_script`` and the resulting\n  output script ``dep_install.sh``\
  \ defaults to ``./download_cache`` (under\n  the current working directory), and\
  \ can be set with ``$DOWNLOAD_CACHE``.\n\n  If the ``tool_dependencies.xml`` file\
  \ includes SHA256 checksums for\n  downloads, these will be verified after downloading\
  \ to the cache (by\n  either ``planemo dependency_script`` or ``bash dep_install.sh``).\n\
  \n  This is experimental, and is initially intended for use within continuous\n\
  \  integration testing setups like TravisCI to both verify the dependency\n  installation\
  \ receipe works, and to use this to run functional tests.\n\nOptions:\n  -r, --recursive\
  \             Recursively perform command for nested\n                         \
  \     repository directories.\n  --fail_fast                 If multiple repositories\
  \ are specified and an\n                              error occurs stop immediately\
  \ instead of\n                              processing remaining repositories.\n\
  \  --download_cache DIRECTORY  Directory to cache downloaded files, default is\n\
  \                              $DOWNLOAD_CACHE\n  --help                      Show\
  \ this message and exit.\n"
generated_using:
- --help
