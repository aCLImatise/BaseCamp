from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Directory, Int, File

Planemo_Shed_Test_V0_1_0 = CommandToolBuilder(tool="planemo_shed_test", base_command=["planemo", "shed_test"], inputs=[ToolInput(tag="in_recursive", input_type=Boolean(optional=True), prefix="--recursive", doc=InputDocumentation(doc="Recursively perform command for nested\nrepository directories.")), ToolInput(tag="in_fail_fast", input_type=Boolean(optional=True), prefix="--fail_fast", doc=InputDocumentation(doc="If multiple repositories are specified and\nan error occurs stop immediately instead of\nprocessing remaining repositories.")), ToolInput(tag="in_owner", input_type=String(optional=True), prefix="--owner", doc=InputDocumentation(doc="Tool Shed repository owner (username).")), ToolInput(tag="in_name", input_type=Directory(optional=True), prefix="--name", doc=InputDocumentation(doc="Tool Shed repository name (defaults to the\ninferred tool directory name).")), ToolInput(tag="in_shed_email", input_type=String(optional=True), prefix="--shed_email", doc=InputDocumentation(doc="E-mail for Tool Shed auth (required unless\nshed_key is specified).")), ToolInput(tag="in_shed_key", input_type=String(optional=True), prefix="--shed_key", doc=InputDocumentation(doc="API key for Tool Shed access. An API key is\nrequired unless e-mail and password is\nspecified. This key can be specified with\neither --shed_key or --shed_key_from_env.")), ToolInput(tag="in_shed_key_from_env", input_type=String(optional=True), prefix="--shed_key_from_env", doc=InputDocumentation(doc="Environment variable to read API key for\nTool Shed access from.")), ToolInput(tag="in_shed_password", input_type=String(optional=True), prefix="--shed_password", doc=InputDocumentation(doc="Password for Tool Shed auth (required unless\nshed_key is specified).")), ToolInput(tag="in_shed_target", input_type=Int(optional=True), prefix="--shed_target", doc=InputDocumentation(doc="Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local' (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined ~/.planemo.yml.")), ToolInput(tag="in_galaxy_root", input_type=Directory(optional=True), prefix="--galaxy_root", doc=InputDocumentation(doc="Root of development galaxy directory to\nexecute command with.")), ToolInput(tag="in_galaxy_python_version", input_type=Boolean(optional=True), prefix="--galaxy_python_version", doc=InputDocumentation(doc="[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under")), ToolInput(tag="in_extra_tools", input_type=File(optional=True), prefix="--extra_tools", doc=InputDocumentation(doc="Extra tool sources to include in Galaxy's\ntool panel (file or directory). These will\nnot be linted/tested/etc... but they will be\navailable to workflows and for interactive\nuse.")), ToolInput(tag="in_install_galaxy", input_type=Boolean(optional=True), prefix="--install_galaxy", doc=InputDocumentation(doc="Download and configure a disposable copy of\nGalaxy from github.")), ToolInput(tag="in_galaxy_branch", input_type=String(optional=True), prefix="--galaxy_branch", doc=InputDocumentation(doc="Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root isn't specified.")), ToolInput(tag="in_galaxy_source", input_type=String(optional=True), prefix="--galaxy_source", doc=InputDocumentation(doc="Git source of Galaxy to target (defaults to\nthe official galaxyproject github source if\na Galaxy root isn't specified.")), ToolInput(tag="in_skip_v_env", input_type=Boolean(optional=True), prefix="--skip_venv", doc=InputDocumentation(doc="Do not create or source a virtualenv\nenvironment for Galaxy, this should be used\nor instance to preserve an externally\nconfigured virtual environment or conda\nenvironment.")), ToolInput(tag="in_no_cache_galaxy", input_type=Boolean(optional=True), prefix="--no_cache_galaxy", doc=InputDocumentation(doc="Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\nNot caching this results in faster downloads\n(no git) - so is better on throw away\ninstances such with TravisCI.")), ToolInput(tag="in_no_cleanup", input_type=Boolean(optional=True), prefix="--no_cleanup", doc=InputDocumentation(doc="Do not cleanup temp files created for and by")), ToolInput(tag="in_no_docker", input_type=Boolean(optional=True), prefix="--no_docker", doc=InputDocumentation(doc="Run Galaxy tools in Docker if enabled.")), ToolInput(tag="in_docker_cmd", input_type=String(optional=True), prefix="--docker_cmd", doc=InputDocumentation(doc="Command used to launch docker (defaults to\ndocker).")), ToolInput(tag="in_no_docker_sudo", input_type=Boolean(optional=True), prefix="--no_docker_sudo", doc=InputDocumentation(doc="Flag to use sudo when running docker.")), ToolInput(tag="in_docker_host", input_type=String(optional=True), prefix="--docker_host", doc=InputDocumentation(doc="Docker host to target when executing docker\ncommands (defaults to localhost).")), ToolInput(tag="in_docker_sudo_cmd", input_type=String(optional=True), prefix="--docker_sudo_cmd", doc=InputDocumentation(doc="sudo command to use when --docker_sudo is\nenabled (defaults to sudo).")), ToolInput(tag="in_mulled_containers", input_type=Boolean(optional=True), prefix="--mulled_containers", doc=InputDocumentation(doc="Test tools against mulled containers (forces\n--docker).")), ToolInput(tag="in_job_config_file", input_type=File(optional=True), prefix="--job_config_file", doc=InputDocumentation(doc="Job configuration file for Galaxy to target.")), ToolInput(tag="in_tool_dependency_dir", input_type=Directory(optional=True), prefix="--tool_dependency_dir", doc=InputDocumentation(doc="Tool dependency dir for Galaxy to target.")), ToolInput(tag="in_update_test_data", input_type=Boolean(optional=True), prefix="--update_test_data", doc=InputDocumentation(doc="Update test-data directory with job outputs\n(normally written to directory\n--job_output_files if specified.)")), ToolInput(tag="in_no_paste_test_data_paths", input_type=Boolean(optional=True), prefix="--no_paste_test_data_paths", doc=InputDocumentation(doc="By default Planemo will use or not use\nGalaxy's path paste option to load test data\ninto a history based on the engine type it\nis targeting. This can override the logic to\nexplicitly enable or disable path pasting.")), ToolInput(tag="in_test_output", input_type=File(optional=True), prefix="--test_output", doc=InputDocumentation(doc="Output test report (HTML - for humans)\ndefaults to tool_test_output.html.")), ToolInput(tag="in_test_output_text", input_type=File(optional=True), prefix="--test_output_text", doc=InputDocumentation(doc="Output test report (Basic text - for display\nin CI)")), ToolInput(tag="in_test_output_markdown", input_type=File(optional=True), prefix="--test_output_markdown", doc=InputDocumentation(doc="Output test report (Markdown style - for\nhumans & computers)")), ToolInput(tag="in_test_output_x_unit", input_type=File(optional=True), prefix="--test_output_xunit", doc=InputDocumentation(doc="Output test report (xunit style - for CI")), ToolInput(tag="in_job_output_files", input_type=Directory(optional=True), prefix="--job_output_files", doc=InputDocumentation(doc="Write job outputs to specified directory.")), ToolInput(tag="in_summary", input_type=Boolean(optional=True), prefix="--summary", doc=InputDocumentation(doc="[none|minimal|compact]\nSummary style printed to planemo's standard\noutput (see output reports for more complete\nsummary). Set to 'none' to disable\ncompletely.")), ToolInput(tag="in_skip_dependencies", input_type=Boolean(optional=True), prefix="--skip_dependencies", doc=InputDocumentation(doc="Do not install shed dependencies as part of\nrepository installation.")), ToolInput(tag="in_galaxy_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--galaxy_email TEXT             E-mail address to use when launching single-"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Planemo_Shed_Test_V0_1_0().translate("wdl", allow_empty_container=True)

