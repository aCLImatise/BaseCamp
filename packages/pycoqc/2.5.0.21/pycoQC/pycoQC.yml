!Command
command:
- pycoQC
positional: []
named:
- !Flag
  description: Increase verbosity
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Reduce verbosity
  synonyms:
  - -q
  - --quiet
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[SUMMARY_FILE [SUMMARY_FILE ...]], -f [SUMMARY_FILE [SUMMARY_FILE\
    \ ...]]\nPath to a sequencing_summary generated by Albacore\n1.0.0 + (read_fast5_basecaller.py)\
    \ / Guppy 2.1.3+\n(guppy_basecaller). One can also pass multiple space\nseparated\
    \ file paths or a UNIX style regex matching\nmultiple files (Required)"
  synonyms:
  - --summary_file
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[BARCODE_FILE [BARCODE_FILE ...]], -b [BARCODE_FILE [BARCODE_FILE\
    \ ...]]\nPath to the barcode_file generated by Guppy 2.1.3+\n(guppy_barcoder)\
    \ or Deepbinner 0.2.0+. This is not a\nrequired file. One can also pass multiple\
    \ space\nseparated file paths or a UNIX style regex matching\nmultiple files (optional)"
  synonyms:
  - --barcode_file
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[BAM_FILE [BAM_FILE ...]], -a [BAM_FILE [BAM_FILE ...]]\nPath to a\
    \ Bam file corresponding to reads in the\nsummary_file. Preferably aligned with\
    \ Minimap2 One can\nalso pass multiple space separated file paths or a\nUNIX style\
    \ regex matching multiple files (optional)"
  synonyms:
  - --bam_file
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Path to an output html file report (required if\njson_outfile not\
    \ given)"
  synonyms:
  - --html_outfile
  - -o
  args: !SimpleFlagArg
    name: HTML_OUTFILE
  optional: true
- !Flag
  description: "Path to an output json file report (required if\nhtml_outfile not\
    \ given)"
  synonyms:
  - --json_outfile
  - -j
  args: !SimpleFlagArg
    name: JSON_OUTFILE
  optional: true
- !Flag
  description: "Minimum quality to consider a read as 'pass' (default:\n7)"
  synonyms:
  - --min_pass_qual
  args: !SimpleFlagArg
    name: MIN_PASS_QUAL
  optional: true
- !Flag
  description: "Minimum read length to consider a read as 'pass'\n(default: 0)"
  synonyms:
  - --min_pass_len
  args: !SimpleFlagArg
    name: MIN_PASS_LEN
  optional: true
- !Flag
  description: "If given, reads flagged as calibration strand by the\nbasecaller are\
    \ removed (default: False)"
  synonyms:
  - --filter_calibration
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "If given, duplicated read_ids are removed but the\nfirst occurence\
    \ is kept (Guppy sometimes outputs the\nsame read multiple times) (default: False)"
  synonyms:
  - --filter_duplicated
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Minimal percent of total reads to retain barcode\nlabel. If below,\
    \ the barcode value is set as\n`unclassified` (default: 0.1)"
  synonyms:
  - --min_barcode_percent
  args: !SimpleFlagArg
    name: MIN_BARCODE_PERCENT
  optional: true
- !Flag
  description: "Title to use in the html report (default: PycoQC\nreport)"
  synonyms:
  - --report_title
  args: !SimpleFlagArg
    name: REPORT_TITLE
  optional: true
- !Flag
  description: 'Jinja2 html template for the html report (default: )'
  synonyms:
  - --template_file
  args: !SimpleFlagArg
    name: TEMPLATE_FILE
  optional: true
- !Flag
  description: "Path to a JSON configuration file for the html report.\nIf not provided,\
    \ looks for it in ~/.pycoQC and\n~/.config/pycoQC/config. If it's still not found,\n\
    falls back to default parameters. The first level keys\nare the names of the plots\
    \ to be included. The second\nlevel keys are the parameters to pass to each plotting\n\
    function (default: )\")"
  synonyms:
  - --config_file
  args: !SimpleFlagArg
    name: CONFIG_FILE
  optional: true
- !Flag
  description: "If not None a n number of reads will be randomly\nselected instead\
    \ of the entire dataset for ploting\nfunction (deterministic sampling) (default:\
    \ 100000)"
  synonyms:
  - --sample
  args: !SimpleFlagArg
    name: SAMPLE
  optional: true
- !Flag
  description: "Print default configuration file. Can be used to\ngenerate a template\
    \ JSON file (default: False)\n"
  synonyms:
  - --default_config
  - -d
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: show program's version number and exit
  synonyms:
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "usage: pycoQC [-h] [--version]\n              [--summary_file [SUMMARY_FILE\
  \ [SUMMARY_FILE ...]]]\n              [--barcode_file [BARCODE_FILE [BARCODE_FILE\
  \ ...]]]\n              [--bam_file [BAM_FILE [BAM_FILE ...]]]\n              [--html_outfile\
  \ HTML_OUTFILE] [--json_outfile JSON_OUTFILE]\n              [--min_pass_qual MIN_PASS_QUAL]\
  \ [--min_pass_len MIN_PASS_LEN]\n              [--filter_calibration] [--filter_duplicated]\n\
  \              [--min_barcode_percent MIN_BARCODE_PERCENT]\n              [--report_title\
  \ REPORT_TITLE] [--template_file TEMPLATE_FILE]\n              [--config_file CONFIG_FILE]\
  \ [--sample SAMPLE] [--default_config]\n              [-v | -q]\n\npycoQC computes\
  \ metrics and generates interactive QC plots from the sequencing summary\nreport\
  \ generated by Oxford Nanopore technologies basecallers\n\n* Minimal usage\n   \
  \ pycoQC -f sequencing_summary.txt -o pycoQC_output.html\n* Including Guppy barcoding\
  \ file + html output + json output\n    pycoQC -f sequencing_summary.txt -b barcoding_sequencing.txt\
  \ -o pycoQC_output.html -j pycoQC_output.json\n* Including Bam file + html output\n\
  \    pycoQC -f sequencing_summary.txt -a alignment.bam -o pycoQC_output.html\n\n\
  optional arguments:\n  -h, --help            show this help message and exit\n \
  \ --version             show program's version number and exit\n  -v, --verbose\
  \         Increase verbosity\n  -q, --quiet           Reduce verbosity\n\nInput/output\
  \ options:\n  --summary_file [SUMMARY_FILE [SUMMARY_FILE ...]], -f [SUMMARY_FILE\
  \ [SUMMARY_FILE ...]]\n                        Path to a sequencing_summary generated\
  \ by Albacore\n                        1.0.0 + (read_fast5_basecaller.py) / Guppy\
  \ 2.1.3+\n                        (guppy_basecaller). One can also pass multiple\
  \ space\n                        separated file paths or a UNIX style regex matching\n\
  \                        multiple files (Required)\n  --barcode_file [BARCODE_FILE\
  \ [BARCODE_FILE ...]], -b [BARCODE_FILE [BARCODE_FILE ...]]\n                  \
  \      Path to the barcode_file generated by Guppy 2.1.3+\n                    \
  \    (guppy_barcoder) or Deepbinner 0.2.0+. This is not a\n                    \
  \    required file. One can also pass multiple space\n                        separated\
  \ file paths or a UNIX style regex matching\n                        multiple files\
  \ (optional)\n  --bam_file [BAM_FILE [BAM_FILE ...]], -a [BAM_FILE [BAM_FILE ...]]\n\
  \                        Path to a Bam file corresponding to reads in the\n    \
  \                    summary_file. Preferably aligned with Minimap2 One can\n  \
  \                      also pass multiple space separated file paths or a\n    \
  \                    UNIX style regex matching multiple files (optional)\n  --html_outfile\
  \ HTML_OUTFILE, -o HTML_OUTFILE\n                        Path to an output html\
  \ file report (required if\n                        json_outfile not given)\n  --json_outfile\
  \ JSON_OUTFILE, -j JSON_OUTFILE\n                        Path to an output json\
  \ file report (required if\n                        html_outfile not given)\n\n\
  Filtering options:\n  --min_pass_qual MIN_PASS_QUAL\n                        Minimum\
  \ quality to consider a read as 'pass' (default:\n                        7)\n \
  \ --min_pass_len MIN_PASS_LEN\n                        Minimum read length to consider\
  \ a read as 'pass'\n                        (default: 0)\n  --filter_calibration\
  \  If given, reads flagged as calibration strand by the\n                      \
  \  basecaller are removed (default: False)\n  --filter_duplicated   If given, duplicated\
  \ read_ids are removed but the\n                        first occurence is kept\
  \ (Guppy sometimes outputs the\n                        same read multiple times)\
  \ (default: False)\n  --min_barcode_percent MIN_BARCODE_PERCENT\n              \
  \          Minimal percent of total reads to retain barcode\n                  \
  \      label. If below, the barcode value is set as\n                        `unclassified`\
  \ (default: 0.1)\n\nHTML report options:\n  --report_title REPORT_TITLE\n      \
  \                  Title to use in the html report (default: PycoQC\n          \
  \              report)\n  --template_file TEMPLATE_FILE\n                      \
  \  Jinja2 html template for the html report (default: )\n  --config_file CONFIG_FILE\n\
  \                        Path to a JSON configuration file for the html report.\n\
  \                        If not provided, looks for it in ~/.pycoQC and\n      \
  \                  ~/.config/pycoQC/config. If it's still not found,\n         \
  \               falls back to default parameters. The first level keys\n       \
  \                 are the names of the plots to be included. The second\n      \
  \                  level keys are the parameters to pass to each plotting\n    \
  \                    function (default: )\")\n\nOther options:\n  --sample SAMPLE\
  \       If not None a n number of reads will be randomly\n                     \
  \   selected instead of the entire dataset for ploting\n                       \
  \ function (deterministic sampling) (default: 100000)\n  --default_config, -d  Print\
  \ default configuration file. Can be used to\n                        generate a\
  \ template JSON file (default: False)\n"
generated_using:
- --help
