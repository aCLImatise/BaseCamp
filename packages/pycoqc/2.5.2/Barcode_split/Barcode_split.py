from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, Int

Barcode_Split_V0_1_0 = CommandToolBuilder(tool="Barcode_split", base_command=["Barcode_split"], inputs=[ToolInput(tag="in_summary_file", input_type=Boolean(optional=True), prefix="--summary_file", doc=InputDocumentation(doc="[SUMMARY_FILE [SUMMARY_FILE ...]], -f [SUMMARY_FILE [SUMMARY_FILE ...]]\nPath to a sequencing_summary generated by Albacore\n1.0.0 + (read_fast5_basecaller.py) / Guppy 2.1.3+\n(guppy_basecaller). One can also pass multiple space\nseparated file paths or a UNIX style regex matching\nmultiple files")), ToolInput(tag="in_barcode_file", input_type=Boolean(optional=True), prefix="--barcode_file", doc=InputDocumentation(doc="[BARCODE_FILE [BARCODE_FILE ...]], -b [BARCODE_FILE [BARCODE_FILE ...]]\nPath to the barcode_file generated by Guppy 2.1.3+\n(guppy_barcoder) or Deepbinner 0.2.0+. One can also\npass multiple space separated file paths or a UNIX\nstyle regex matching multiple files")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="Folder where to output split barcode data (default:\ncurrent dir")), ToolInput(tag="in_output_unclassified", input_type=Boolean(optional=True), prefix="--output_unclassified", doc=InputDocumentation(doc="If given, unclassified barcodes are also written in a\nfile. By default they are skiped")), ToolInput(tag="in_min_barcode_percent", input_type=Int(optional=True), prefix="--min_barcode_percent", doc=InputDocumentation(doc="Minimal percent of total reads to retain barcode\nlabel. If below, the barcode value is set as\n`unclassified` (default: 0.1)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase verbosity")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Reduce verbosity"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Folder where to output split barcode data (default:\ncurrent dir"))], container="quay.io/biocontainers/pycoqc:2.5.2--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Barcode_Split_V0_1_0().translate("wdl")

