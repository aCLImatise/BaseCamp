from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, Boolean, Int

Metagene_Chart_V0_1_0 = CommandToolBuilder(tool="metagene_chart", base_command=["metagene", "chart"], inputs=[ToolInput(tag="in_labels", input_type=Array(t=String(), optional=True), prefix="--labels", doc=InputDocumentation(doc="Sample names for each metagene profile (optional).")), ToolInput(tag="in_landmark", input_type=String(optional=True), prefix="--landmark", doc=InputDocumentation(doc="Name of landmark at zero point (e.g. 'CDS start' or\n'CDS stop'; optional)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppress all warning messages. Cannot use with '-v'.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase verbosity. With '-v', show every warning.\nWith '-vv', turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each type of warning once)")), ToolInput(tag="in_fig_format", input_type=String(optional=True), prefix="--figformat", doc=InputDocumentation(doc="File format for figure(s); Default: png)")), ToolInput(tag="in_fig_size", input_type=String(optional=True), prefix="--figsize", doc=InputDocumentation(doc="N         Figure width and height, in inches. (Default: use\nmatplotlibrc params)")), ToolInput(tag="in_title", input_type=String(optional=True), prefix="--title", doc=InputDocumentation(doc="Base title for plot(s).")), ToolInput(tag="in_cmap", input_type=Int(optional=True), prefix="--cmap", doc=InputDocumentation(doc="Matplotlib color map from which palette will be made\n(e.g. 'Blues','autumn','Set1'; default: use colors\nfrom ``--stylesheet`` if given, or color cycle in\nmatplotlibrc)")), ToolInput(tag="in_dpi", input_type=Int(optional=True), prefix="--dpi", doc=InputDocumentation(doc="Figure resolution (Default: 150)")), ToolInput(tag="in_stylesheet", input_type=Boolean(optional=True), prefix="--stylesheet", doc=InputDocumentation(doc="{Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\nUse this matplotlib stylesheet instead of matplotlibrc\nparams\n")), ToolInput(tag="in_out_base", input_type=String(), position=0, doc=InputDocumentation(doc="Basename for output file.")), ToolInput(tag="in_in_files", input_type=String(), position=1, doc=InputDocumentation(doc="One or more metagene profiles, generated by the\n``count`` subprogram, which will be plotted together."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Metagene_Chart_V0_1_0().translate("wdl", allow_empty_container=True)

