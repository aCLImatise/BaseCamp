from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String, Array

Phase_By_Size_V0_1_0 = CommandToolBuilder(tool="phase_by_size", base_command=["phase_by_size"], inputs=[ToolInput(tag="in_codon_buffer", input_type=Int(optional=True), prefix="--codon_buffer", doc=InputDocumentation(doc="Codons before and after start codon to ignore\n(Default: 5)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppress all warning messages. Cannot use with '-v'.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase verbosity. With '-v', show every warning.\nWith '-vv', turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each type of warning once)")), ToolInput(tag="in_annotation_files", input_type=File(optional=True), prefix="--annotation_files", doc=InputDocumentation(doc="[BED | BigBed | GTF2 | GFF3] [infile.[BED | BigBed | GTF2 | GFF3] ...]\nZero or more annotation files (max 1 file if BigBed)")), ToolInput(tag="in_annotation_format", input_type=String(optional=True), prefix="--annotation_format", doc=InputDocumentation(doc="Format of annotation_files (Default: GTF2). Note: GFF3\nassembly assumes SO v.2.5.2 feature ontologies, which\nmay or may not match your specific file.")), ToolInput(tag="in_add_three", input_type=Boolean(optional=True), prefix="--add_three", doc=InputDocumentation(doc="If supplied, coding regions will be extended by 3\nnucleotides at their 3' ends (except for GTF2 files\nthat explicitly include `stop_codon` features). Use if\nyour annotation file excludes stop codons from CDS.")), ToolInput(tag="in_tab_ix", input_type=Boolean(optional=True), prefix="--tabix", doc=InputDocumentation(doc="annotation_files are tabix-compressed and indexed\n(Default: False). Ignored for BigBed files.")), ToolInput(tag="in_sorted", input_type=Boolean(optional=True), prefix="--sorted", doc=InputDocumentation(doc="annotation_files are sorted by chromosomal position\n(Default: False)")), ToolInput(tag="in_bed_extra_columns", input_type=Array(t=String(), optional=True), prefix="--bed_extra_columns", doc=InputDocumentation(doc="Number of extra columns in BED file (e.g. in custom\nENCODE formats) or list of names for those columns.\n(Default: 0).")), ToolInput(tag="in_maxmem", input_type=Int(optional=True), prefix="--maxmem", doc=InputDocumentation(doc="Maximum desired memory footprint in MB to devote to\nBigBed/BigWig files. May be exceeded by large queries.\n(Default: 0, No maximum)")), ToolInput(tag="in_gff_transcript_types", input_type=Array(t=String(), optional=True), prefix="--gff_transcript_types", doc=InputDocumentation(doc="GFF3 feature types to include as transcripts, even if\nno exons are present (for GFF3 only; default: use SO\nv2.5.3 specification)")), ToolInput(tag="in_gff_exon_types", input_type=Array(t=String(), optional=True), prefix="--gff_exon_types", doc=InputDocumentation(doc="GFF3 feature types to include as exons (for GFF3 only;\ndefault: use SO v2.5.3 specification)")), ToolInput(tag="in_gff_cds_types", input_type=Array(t=String(), optional=True), prefix="--gff_cds_types", doc=InputDocumentation(doc="GFF3 feature types to include as CDS (for GFF3 only;\ndefault: use SO v2.5.3 specification)")), ToolInput(tag="in_count_files", input_type=Array(t=String(), optional=True), prefix="--count_files", doc=InputDocumentation(doc="One or more count or alignment file(s) from a single\nsample or set of samples to be pooled.")), ToolInput(tag="in_count_file_format", input_type=String(optional=True), prefix="--countfile_format", doc=InputDocumentation(doc="Format of file containing alignments or counts\n(Default: BAM)")), ToolInput(tag="in_sum", input_type=String(optional=True), prefix="--sum", doc=InputDocumentation(doc="Sum used in normalization of counts and RPKM/RPNT\ncalculations (Default: total mapped reads/counts in\ndataset)")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min_length", doc=InputDocumentation(doc="Minimum read length required to be included (BAM &\nbowtie files only. Default: 25)")), ToolInput(tag="in_max_length", input_type=Int(optional=True), prefix="--max_length", doc=InputDocumentation(doc="Maximum read length permitted to be included (BAM &\nbowtie files only. Default: 100)")), ToolInput(tag="in_five_prime_variable", input_type=Boolean(optional=True), prefix="--fiveprime_variable", doc=InputDocumentation(doc="Map read alignment to a variable offset from 5'\nposition of read, with offset determined by read\nlength. Requires `--offset` below")), ToolInput(tag="in_five_prime", input_type=Boolean(optional=True), prefix="--fiveprime", doc=InputDocumentation(doc="Map read alignment to 5' position.")), ToolInput(tag="in_three_prime", input_type=Boolean(optional=True), prefix="--threeprime", doc=InputDocumentation(doc="Map read alignment to 3' position")), ToolInput(tag="in_center", input_type=Boolean(optional=True), prefix="--center", doc=InputDocumentation(doc="Subtract N positions from each end of read, and add\n1/(length-N), to each remaining position, where N is\nspecified by `--nibble`")), ToolInput(tag="in_offset", input_type=Int(optional=True), prefix="--offset", doc=InputDocumentation(doc="For `--fiveprime` or `--threeprime`, provide an\ninteger representing the offset into the read,\nstarting from either the 5' or 3' end, at which data\nshould be plotted. For `--fiveprime_variable`, provide\nthe filename of a two-column tab-delimited text file,\nin which first column represents read length or the\nspecial keyword `'default'`, and the second column\nrepresents the offset from the five prime end of that\nread length at which the read should be mapped.\n(Default: 0)")), ToolInput(tag="in_nibble", input_type=Int(optional=True), prefix="--nibble", doc=InputDocumentation(doc="For use with `--center` only. nt to remove from each\nend of read before mapping (Default: 0)")), ToolInput(tag="in_fig_format", input_type=String(optional=True), prefix="--figformat", doc=InputDocumentation(doc="File format for figure(s); Default: png)")), ToolInput(tag="in_fig_size", input_type=String(optional=True), prefix="--figsize", doc=InputDocumentation(doc="N         Figure width and height, in inches. (Default: use\nmatplotlibrc params)")), ToolInput(tag="in_title", input_type=String(optional=True), prefix="--title", doc=InputDocumentation(doc="Base title for plot(s).")), ToolInput(tag="in_cmap", input_type=Int(optional=True), prefix="--cmap", doc=InputDocumentation(doc="Matplotlib color map from which palette will be made\n(e.g. 'Blues','autumn','Set1'; default: use colors\nfrom ``--stylesheet`` if given, or color cycle in\nmatplotlibrc)")), ToolInput(tag="in_dpi", input_type=Int(optional=True), prefix="--dpi", doc=InputDocumentation(doc="Figure resolution (Default: 150)")), ToolInput(tag="in_stylesheet", input_type=Boolean(optional=True), prefix="--stylesheet", doc=InputDocumentation(doc="{Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\nUse this matplotlib stylesheet instead of matplotlibrc\nparams\n")), ToolInput(tag="in_out_base_phasing_dot_txt", input_type=String(), position=0, doc=InputDocumentation(doc="Read phasing for each read length")), ToolInput(tag="in_out_base_phasing_dot_svg", input_type=String(), position=1, doc=InputDocumentation(doc="Plot of phasing by read length")), ToolInput(tag="in_roi_file", input_type=String(), position=0, doc=InputDocumentation(doc="Optional. ROI file of maximal spanning windows\nsurrounding start codons, from ``metagene generate``\nsubprogram. Using this instead of `--annotation_files`\nprevents double-counting of codons when multiple\ntranscript isoforms exist for a gene. See the\ndocumentation for `metagene` for more info about ROI\nfiles.If an ROI file is not given, supply an\nannotation with ``--annotation_files``")), ToolInput(tag="in_out_base", input_type=String(), position=1, doc=InputDocumentation(doc="Required. Basename for output files"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phase_By_Size_V0_1_0().translate("wdl", allow_empty_container=True)

