from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean

Vcflatten_V0_1_0 = CommandToolBuilder(tool="vcflatten", base_command=["vcflatten"], inputs=[ToolInput(tag="in_info", input_type=File(optional=True), prefix="--info", doc=InputDocumentation(doc="Specify a semicolon-separated list of INFO IDs to output for each variant from the VCF file.")), ToolInput(tag="in_genotype", input_type=File(optional=True), prefix="--genotype", doc=InputDocumentation(doc="Specify a colon-separated list of FORMAT IDs to output for each sample from the VCF file.")), ToolInput(tag="in_one_file", input_type=Boolean(optional=True), prefix="--one-file", doc=InputDocumentation(doc="If this flag is set, then only 1 TSV file will be generated for all samples. In addition, this file will have a SAMPLE column which indicates which sample the data belongs to.")), ToolInput(tag="in_no_header", input_type=Boolean(optional=True), prefix="--no-header", doc=InputDocumentation(doc="If this flag is set, the TSV header won't be written to any of the output files.")), ToolInput(tag="in_ignore_errors", input_type=Boolean(optional=True), prefix="--ignore-errors", doc=InputDocumentation(doc="If this flag is set, then any errors in the VCF file will be ignored, and the invalid rows will be skipped.")), ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="--prefix", doc=InputDocumentation(doc="A filename prefix that can be used in the output pattern. If this is not set, then the prefix is the same as <filename>.")), ToolInput(tag="in_pattern", input_type=File(optional=True), prefix="--pattern", doc=InputDocumentation(doc="The pattern to use when generating output files. The default is '%p-%s-%d'. Valid special patterns are:\n%p    Include the 'prefix' here (either <filename> or given in --prefix <prefix>\n%s    The name of the sample, taken from the header of the VCF file.\n%i    The index of the sample (1-based).\n%%    A single, literal '%'.\nIf neither %s nor %d is provided, then the VCF file must have only 1 sample.\n")), ToolInput(tag="in_filename", input_type=File(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_info", output_type=File(optional=True), selector=InputSelector(input_to_select="in_info", type_hint=File()), doc=OutputDocumentation(doc="Specify a semicolon-separated list of INFO IDs to output for each variant from the VCF file.")), ToolOutput(tag="out_genotype", output_type=File(optional=True), selector=InputSelector(input_to_select="in_genotype", type_hint=File()), doc=OutputDocumentation(doc="Specify a colon-separated list of FORMAT IDs to output for each sample from the VCF file.")), ToolOutput(tag="out_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prefix", type_hint=File()), doc=OutputDocumentation(doc="A filename prefix that can be used in the output pattern. If this is not set, then the prefix is the same as <filename>.")), ToolOutput(tag="out_pattern", output_type=File(optional=True), selector=InputSelector(input_to_select="in_pattern", type_hint=File()), doc=OutputDocumentation(doc="The pattern to use when generating output files. The default is '%p-%s-%d'. Valid special patterns are:\n%p    Include the 'prefix' here (either <filename> or given in --prefix <prefix>\n%s    The name of the sample, taken from the header of the VCF file.\n%i    The index of the sample (1-based).\n%%    A single, literal '%'.\nIf neither %s nor %d is provided, then the VCF file must have only 1 sample.\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Vcflatten_V0_1_0().translate("wdl", allow_empty_container=True)

