from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, File, Array, String, Directory, Int, Boolean

Strainphlan_V0_1_0 = CommandToolBuilder(tool="strainphlan", base_command=["strainphlan"], inputs=[ToolInput(tag="in_database", input_type=Float(optional=True), prefix="--database", doc=InputDocumentation(doc="The input MetaPhlAn 3.0 database (default:\n/usr/local/lib/python3.8/site-packages/metaphlan/metap\nhlan_databases/mpa_v30_CHOCOPhlAn_201901.pkl)")), ToolInput(tag="in_clade_markers", input_type=File(optional=True), prefix="--clade_markers", doc=InputDocumentation(doc="The clade markers as FASTA file (default: None)")), ToolInput(tag="in_samples", input_type=Array(t=String(), optional=True), prefix="--samples", doc=InputDocumentation(doc="The reconstructed markers for each sample (default:\n[])")), ToolInput(tag="in_references", input_type=Array(t=String(), optional=True), prefix="--references", doc=InputDocumentation(doc="The reference genomes (default: [])")), ToolInput(tag="in_clade", input_type=String(optional=True), prefix="--clade", doc=InputDocumentation(doc="The clade to investigate (default: None)")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="The output directory (default: None)")), ToolInput(tag="in_nprocs", input_type=Int(optional=True), prefix="--nprocs", doc=InputDocumentation(doc="The number of threads to use (default: 1)")), ToolInput(tag="in_secondary_samples", input_type=Array(t=String(), optional=True), prefix="--secondary_samples", doc=InputDocumentation(doc="The reconstructed markers for each secondary sample\n(default: [])")), ToolInput(tag="in_secondary_references", input_type=Array(t=String(), optional=True), prefix="--secondary_references", doc=InputDocumentation(doc="The secondary reference genomes (default: [])")), ToolInput(tag="in_trim_sequences", input_type=Int(optional=True), prefix="--trim_sequences", doc=InputDocumentation(doc="The number of bases to remove from both ends when\ntrimming markers (default: 50)")), ToolInput(tag="in_marker_in_n_samples", input_type=Int(optional=True), prefix="--marker_in_n_samples", doc=InputDocumentation(doc="Theshold defining the minimum percentage of samples to\nkeep a marker (default: 80)")), ToolInput(tag="in_sample_with_n_markers", input_type=Int(optional=True), prefix="--sample_with_n_markers", doc=InputDocumentation(doc="Threshold defining the minimun number of markers to\nkeep a sample (default: 20)")), ToolInput(tag="in_secondary_sample_with_n_markers", input_type=Int(optional=True), prefix="--secondary_sample_with_n_markers", doc=InputDocumentation(doc="Threshold defining the minimun number of markers to\nkeep a secondary sample (default: 20)")), ToolInput(tag="in_phylo_phl_an_mode", input_type=String(optional=True), prefix="--phylophlan_mode", doc=InputDocumentation(doc="The presets for fast or accurate phylogenetic analysis\n(default: accurate)")), ToolInput(tag="in_phylo_phl_an_configuration", input_type=File(optional=True), prefix="--phylophlan_configuration", doc=InputDocumentation(doc="The PhyloPhlAn configuration file (default: None)")), ToolInput(tag="in_mutation_rates", input_type=Boolean(optional=True), prefix="--mutation_rates", doc=InputDocumentation(doc="If specified will produced a mutation rates table for\neach of the aligned markers and a summary table for\nthe concatenated MSA. This operation can take long\ntime to finish (default: False)")), ToolInput(tag="in_print_clades_only", input_type=Boolean(optional=True), prefix="--print_clades_only", doc=InputDocumentation(doc="If specified only print the potential clades and stop\nwithout building any tree (default: False)\n"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="The output directory (default: None)"))], container="quay.io/biocontainers/metaphlan:3.0.7--pyh7b7c402_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Strainphlan_V0_1_0().translate("wdl")

