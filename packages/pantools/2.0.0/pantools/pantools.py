from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String, Float

Pantools_V0_1_0 = CommandToolBuilder(tool="pantools", base_command=["pantools"], inputs=[ToolInput(tag="in_server", input_type=Boolean(optional=True), prefix="-server", doc=InputDocumentation(doc=": To optimize JIT compilations for higher performance")), ToolInput(tag="in_x_mn", input_type=Boolean(optional=True), prefix="-Xmn", doc=InputDocumentation(doc="(a number followed by m/g) : Minimum heap size in mega/giga bytes")), ToolInput(tag="in_x_mx", input_type=Boolean(optional=True), prefix="-Xmx", doc=InputDocumentation(doc="(a number followed by m/g) : Maximum heap size in mega/giga bytes")), ToolInput(tag="in_database_path", input_type=File(optional=True), prefix="--database_path", doc=InputDocumentation(doc=": Path to the pangenome database.")), ToolInput(tag="in_genomes_file", input_type=File(optional=True), prefix="--genomes-file", doc=InputDocumentation(doc=": A text file containing paths to FASTA files of genomes;       each in a seperated line.")), ToolInput(tag="in_km_er_size", input_type=Int(optional=True), prefix="--kmer-size", doc=InputDocumentation(doc=": The size of k-mers. If it is not given or is out of valid range (6 <= K_SIZE <= 255), then an optimal value would be calculated automatically.")), ToolInput(tag="in_proteomes_file", input_type=File(optional=True), prefix="--proteomes_file", doc=InputDocumentation(doc=": A text file containing paths to FASTA files of proteomes; each in a seperated line.")), ToolInput(tag="in_output_path", input_type=File(optional=True), prefix="--output-path", doc=InputDocumentation(doc="(default value: Database path determined by -dp) : Path to the output files.")), ToolInput(tag="in_annotations_file", input_type=File(optional=True), prefix="--annotations-file", doc=InputDocumentation(doc=": A text file each line of which contains genome number and path to the corresponding GFF file seperated by one space. Genomes are numbered in the same order they have been added to the pangenome. The protein sequence of the annotated genes will be also stored in the folder '/proteins' in the output path.")), ToolInput(tag="in_connect_annotations", input_type=String(optional=True), prefix="--connect_annotations", doc=InputDocumentation(doc=": Connects the annotated genomic features to the nodes of gDBG.")), ToolInput(tag="in_genome_numbers", input_type=File(optional=True), prefix="--genome-numbers", doc=InputDocumentation(doc=": A text file containing genome_numbers for which the features will be retrieved.")), ToolInput(tag="in_feature_type", input_type=String(optional=True), prefix="--feature-type", doc=InputDocumentation(doc="(default value: gene) : The feature name; for example gene, mRNA, exon, tRNA, etc.")), ToolInput(tag="in_regions_file", input_type=File(optional=True), prefix="--regions-file", doc=InputDocumentation(doc=": A text file containing records with genome_number, sequence_number, begin and end positions seperated by one space for each region.")), ToolInput(tag="in_intersection_rate", input_type=Float(optional=True), prefix="--intersection-rate", doc=InputDocumentation(doc="(default valuue: 0.09, valid range: [0.001..0.1]) : The fraction of k-mers needs to be shared by two intersecting proteins.")), ToolInput(tag="in_min_normalized_similarity", input_type=Int(optional=True), prefix="--min-normalized-similarity", doc=InputDocumentation(doc="(default value: 95, valid range: [1..99]) : The minimum normalized similarity score of two proteins.")), ToolInput(tag="in_mcl_inflation", input_type=Float(optional=True), prefix="--mcl-inflation", doc=InputDocumentation(doc="(default value: 9.6, valid range: (1..19)): The MCL inflation.")), ToolInput(tag="in_contrast", input_type=Float(optional=True), prefix="--contrast", doc=InputDocumentation(doc="(default value: 8, valid range: (0..10)) : The contrast factor.")), ToolInput(tag="in_relaxation", input_type=Float(optional=True), prefix="--relaxation", doc=InputDocumentation(doc="rn (default value: 1, valid range: [1..8]) : The relaxation in homology calls.")), ToolInput(tag="in_threads_number", input_type=Int(optional=True), prefix="--threads-number", doc=InputDocumentation(doc="(default value: 1) : The number of parallel working threads.")), ToolInput(tag="in_first_shortread_archive", input_type=Boolean(optional=True), prefix="-1", doc=InputDocumentation(doc=": The first short-read archive in FASTQ format, which can be gz/bz2 compressed. This file can be precessed interleaved by -il option.")), ToolInput(tag="in_optionally_second_shortread", input_type=Boolean(optional=True), prefix="-2", doc=InputDocumentation(doc=": Optionally, the second short-read archive in FASTQ format, which can be gz/bz2 compressed.")), ToolInput(tag="in_min_mapping_identity", input_type=Int(optional=True), prefix="--min-mapping-identity", doc=InputDocumentation(doc="(default value: 0.5, valid range: [0..1)) : The minimum acceptable identity of the alignment.")), ToolInput(tag="in_num_km_er_samples", input_type=Int(optional=True), prefix="--num-kmer-samples", doc=InputDocumentation(doc="*-nks (default value: 15, valid range: [1..r-k+1]) : The number of kmers sampled from read.")), ToolInput(tag="in_min_hit_length", input_type=Int(optional=True), prefix="--min-hit-length", doc=InputDocumentation(doc="(default value: 13, valid range: [10..100]) : The minimum acceptable length of alignment after soft-clipping.")), ToolInput(tag="in_max_alignment_length", input_type=Int(optional=True), prefix="--max-alignment-length", doc=InputDocumentation(doc="(default value: 1000, valid range: [50..5000]) : The maximum acceptable length of alignment.")), ToolInput(tag="in_max_fragment_length", input_type=Int(optional=True), prefix="--max-fragment-length", doc=InputDocumentation(doc="(default value: 2000, valid range: [50..5000]) : The maximum acceptable length of fragment.")), ToolInput(tag="in_max_num_locations", input_type=Int(optional=True), prefix="--max-num-locations", doc=InputDocumentation(doc="(default value: 15, valid range: [1..100]) : The maximum number of location of candidate hits to examine.")), ToolInput(tag="in_alignment_band", input_type=Int(optional=True), prefix="--alignment-band", doc=InputDocumentation(doc="(default value: 5, valid range: [1..100]) : The length of bound of banded alignment.")), ToolInput(tag="in_clipping_stringency", input_type=Int(optional=True), prefix="--clipping-stringency", doc=InputDocumentation(doc="(default value: 1) : The stringency of soft-clipping.")), ToolInput(tag="in_out_format", input_type=String(optional=True), prefix="--out-format", doc=InputDocumentation(doc=": Writes the alignment files in BAM|SAM|NONE format.")), ToolInput(tag="in_alignment_mode", input_type=Int(optional=True), prefix="--alignment-mode", doc=InputDocumentation(doc="(default value: 2) : The alignment mode.")), ToolInput(tag="in__competitive_allbests", input_type=Boolean(optional=True), prefix="-3", doc=InputDocumentation(doc=": Competitive, all-bests")), ToolInput(tag="in_interleaved", input_type=File(optional=True), prefix="--interleaved", doc=InputDocumentation(doc=": Process the fastq file as an interleaved paired-end archive."))], outputs=[ToolOutput(tag="out_output_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_path", type_hint=File()), doc=OutputDocumentation(doc="(default value: Database path determined by -dp) : Path to the output files."))], container="quay.io/biocontainers/pantools:2.0.0--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pantools_V0_1_0().translate("wdl")

