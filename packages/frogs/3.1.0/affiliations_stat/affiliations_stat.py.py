from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Affiliations_Stat_Py_V0_1_0 = CommandToolBuilder(tool="affiliations_stat.py", base_command=["affiliations_stat.py"], inputs=[ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Keep temporary files to debug program.")), ToolInput(tag="in_taxonomic_ranks", input_type=Boolean(optional=True), prefix="--taxonomic-ranks", doc=InputDocumentation(doc="[TAXONOMIC_RANKS [TAXONOMIC_RANKS ...]]\nThe ordered ranks levels used in the metadata\ntaxonomy. [Default: ['Domain', 'Phylum', 'Class',\n'Order', 'Family', 'Genus', 'Species']]")), ToolInput(tag="in_rarefaction_ranks", input_type=Boolean(optional=True), prefix="--rarefaction-ranks", doc=InputDocumentation(doc="[RAREFACTION_RANKS [RAREFACTION_RANKS ...]]\nThe ranks that will be evaluated in rarefaction.\n[Default: ['Genus']]")), ToolInput(tag="in_multiple_tag", input_type=File(optional=True), prefix="--multiple-tag", doc=InputDocumentation(doc="The metadata tag used in BIOM file to store the list\nof possible taxonomies. Use this parameter if the\ntaxonomic affiliation has been processed by a software\nthat adds several affiliation in the BIOM file\n(example: same score ambiguity).")), ToolInput(tag="in_tax_consensus_tag", input_type=File(optional=True), prefix="--tax-consensus-tag", doc=InputDocumentation(doc="The metadata tag used in BIOM file to store the\nconsensus taxonomy. This parameter is used instead\n'--taxonomy-tag' when you have several affiliations\nfor each OTU.")), ToolInput(tag="in_taxonomy_tag", input_type=File(optional=True), prefix="--taxonomy-tag", doc=InputDocumentation(doc="The metadata tag used in BIOM file to store the\ntaxonomy. Use this parameter if the taxonomic\naffiliation has been processed by a software that adds\nonly one affiliation or if you does not have a\nmetadata with the consensus taxonomy (see '--tax-\nconsensus-tag').")), ToolInput(tag="in_bootstrap_tag", input_type=File(optional=True), prefix="--bootstrap-tag", doc=InputDocumentation(doc="The metadata tag used in BIOM file to store the\ntaxonomy bootstraps.")), ToolInput(tag="in_identity_tag", input_type=File(optional=True), prefix="--identity-tag", doc=InputDocumentation(doc="The metadata tag used in BIOM file to store the\nalignment identity.")), ToolInput(tag="in_coverage_tag", input_type=File(optional=True), prefix="--coverage-tag", doc=InputDocumentation(doc="The metadata tag used in BIOM file to store the\nalignment observation coverage.")), ToolInput(tag="in_input_biom", input_type=File(optional=True), prefix="--input-biom", doc=InputDocumentation(doc="The input abundance file (format: BIOM).")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="The output report (format: HTML). [Default:\naffiliations_metrics.html]")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="The list of commands executed.\n")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="The output report (format: HTML). [Default:\naffiliations_metrics.html]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Affiliations_Stat_Py_V0_1_0().translate("wdl", allow_empty_container=True)

