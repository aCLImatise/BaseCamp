from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Float, String

Unicycler_Check_V0_1_0 = CommandToolBuilder(tool="unicycler_check", base_command=["unicycler_check"], inputs=[ToolInput(tag="in_sam", input_type=File(optional=True), prefix="--sam", doc=InputDocumentation(doc="Input SAM file of alignments (if this file doesn't\nexist, the alignment will be performed with results\nsaved to this file - you can use the aligner\narguments with this script)")), ToolInput(tag="in_ref", input_type=File(optional=True), prefix="--ref", doc=InputDocumentation(doc="FASTA file containing one or more reference")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--min_len", doc=InputDocumentation(doc="Minimum alignment length (bp) - exclude alignments\nshorter than this length (default: 100)")), ToolInput(tag="in_error_window_size", input_type=Int(optional=True), prefix="--error_window_size", doc=InputDocumentation(doc="Window size for error summaries (default: 100)")), ToolInput(tag="in_depth_window_size", input_type=Int(optional=True), prefix="--depth_window_size", doc=InputDocumentation(doc="Window size for depth summaries (default: 100)")), ToolInput(tag="in_error_rate_threshold", input_type=Float(optional=True), prefix="--error_rate_threshold", doc=InputDocumentation(doc="Threshold for high error rates, expressed as the\nfraction between the mean error rate and the random\nalignment error rate (default: 0.3)")), ToolInput(tag="in_depth_p_val", input_type=Float(optional=True), prefix="--depth_p_val", doc=InputDocumentation(doc="P-value for low/high depth thresholds (default:\n0.001)")), ToolInput(tag="in_window_tables", input_type=File(optional=True), prefix="--window_tables", doc=InputDocumentation(doc="Path and/or prefix for table files summarising\nreference errors for reference windows (default: do\nnot save window tables)")), ToolInput(tag="in_base_tables", input_type=File(optional=True), prefix="--base_tables", doc=InputDocumentation(doc="Path and/or prefix for table files summarising\nreference errors at each base (default: do not save\nbase tables)")), ToolInput(tag="in_html", input_type=File(optional=True), prefix="--html", doc=InputDocumentation(doc="Path for HTML report (default: do not save HTML\nreport)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of CPU threads used to align (default: the\nnumber of available CPUs)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of stdout information (0 to 2) (default: 1)")), ToolInput(tag="in_reads", input_type=String(optional=True), prefix="--reads", doc=InputDocumentation(doc="")), ToolInput(tag="in_sequences", input_type=String(), position=0, doc=InputDocumentation(doc="--reads READS           FASTQ file of long reads"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Unicycler_Check_V0_1_0().translate("wdl", allow_empty_container=True)

