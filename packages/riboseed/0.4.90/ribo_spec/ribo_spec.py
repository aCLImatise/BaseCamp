from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Boolean, File, Int, String

Ribo_Spec_V0_1_0 = CommandToolBuilder(tool="ribo_spec", base_command=["ribo", "spec"], inputs=[ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="output directory; default: None")), ToolInput(tag="in_assembly_graph", input_type=Directory(optional=True), prefix="--assembly_graph", doc=InputDocumentation(doc="fastg assembly graph from SPAdes or a SPAdes output\ndirectory. If the latter, riboSpec will be run on both\nthe final assembly graph, and all the intermediate\ngraphs for each k-mer.")), ToolInput(tag="in_plot_graphs", input_type=Boolean(optional=True), prefix="--plot_graphs", doc=InputDocumentation(doc="draw the network graphs")), ToolInput(tag="in_verbosity", input_type=File(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Logger writes debug to file in output dir; this sets\nverbosity level sent to stderr. 1 = debug(), 2 =\ninfo(), 3 = warning(), 4 = error() and 5 = critical();\ndefault: 2")), ToolInput(tag="in_min_contig_len", input_type=Int(optional=True), prefix="--min_contig_len", doc=InputDocumentation(doc="Contigs under this length will be collapsed; default:\n75")), ToolInput(tag="in_min_anchor_length", input_type=Int(optional=True), prefix="--min_anchor_length", doc=InputDocumentation(doc="Paths must contain at least one node this long as an\nanchor; default: 500")), ToolInput(tag="in_medium_length_threshold", input_type=Int(optional=True), prefix="--medium_length_threshold", doc=InputDocumentation(doc="Paths are simplified when contigs are greater than the\n--min_contig_length, but still short. These medium-\nlength contigs may be assembly artificts or otherwise\nirrelevent. IF you dont want this filtering applied,\nset to the same value as --min_contig_len; default:\n400")), ToolInput(tag="in_threshold", input_type=Int(optional=True), prefix="--threshold", doc=InputDocumentation(doc="paths must be at least this long (bp) to be\nconsidered; default: 1500")), ToolInput(tag="in_barr_nap_length_threshold", input_type=Int(optional=True), prefix="--barrnap_length_threshold", doc=InputDocumentation(doc="This gets passed to barrnap's --lencutoff argument,\nfor determining what we should treat as a legitimate\nhmm hit; default: 0.75")), ToolInput(tag="in_barr_nap_exe", input_type=File(optional=True), prefix="--barrnap_exe", doc=InputDocumentation(doc="Path to barrnap executable; default: barrnap")), ToolInput(tag="in_cores", input_type=String(optional=True), prefix="--cores", doc=InputDocumentation(doc="cores to be used; default: None")), ToolInput(tag="in_make_adjacency_matrix", input_type=Boolean(optional=True), prefix="--MAKE_ADJACENCY_MATRIX", doc=InputDocumentation(doc="generate and plot an adjacency matrix; default: False"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output directory; default: None")), ToolOutput(tag="out_assembly_graph", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_assembly_graph", type_hint=File()), doc=OutputDocumentation(doc="fastg assembly graph from SPAdes or a SPAdes output\ndirectory. If the latter, riboSpec will be run on both\nthe final assembly graph, and all the intermediate\ngraphs for each k-mer.")), ToolOutput(tag="out_verbosity", output_type=File(optional=True), selector=InputSelector(input_to_select="in_verbosity", type_hint=File()), doc=OutputDocumentation(doc="Logger writes debug to file in output dir; this sets\nverbosity level sent to stderr. 1 = debug(), 2 =\ninfo(), 3 = warning(), 4 = error() and 5 = critical();\ndefault: 2"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ribo_Spec_V0_1_0().translate("wdl", allow_empty_container=True)

