from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Samtools_Fasta_V0_1_0 = CommandToolBuilder(tool="samtools_fasta", base_command=["samtools", "fasta"], inputs=[ToolInput(tag="in_write_reads_designated_readother", input_type=File(optional=True), prefix="-0", doc=InputDocumentation(doc="write reads designated READ_OTHER to FILE")), ToolInput(tag="in_one", input_type=File(optional=True), prefix="-1", doc=InputDocumentation(doc="write reads designated READ1 to FILE")), ToolInput(tag="in_two", input_type=File(optional=True), prefix="-2", doc=InputDocumentation(doc="write reads designated READ2 to FILE")), ToolInput(tag="in_write_reads_designated_read_read", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="write reads designated READ1 or READ2 to FILE\nnote: if a singleton file is specified with -s, only\npaired reads will be written to the -1 and -2 files.")), ToolInput(tag="in_only_include_reads_flags_present", input_type=Int(optional=True), prefix="-f", doc=InputDocumentation(doc="only include reads with all  of the FLAGs in INT present [0]")), ToolInput(tag="in_only_include_reads_none_present", input_type=Int(optional=True), prefix="-F", doc=InputDocumentation(doc="only include reads with none of the FLAGS in INT present [0x900]")), ToolInput(tag="in_only_exclude_reads", input_type=Int(optional=True), prefix="-G", doc=InputDocumentation(doc="only EXCLUDE reads with all  of the FLAGs in INT present [0]")), ToolInput(tag="in_append_read_name", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="don't append /1 and /2 to the read name")), ToolInput(tag="in_always_append_read", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="always append /1 and /2 to the read name")), ToolInput(tag="in_write_singleton_reads", input_type=File(optional=True), prefix="-s", doc=InputDocumentation(doc="write singleton reads designated READ1 or READ2 to FILE")), ToolInput(tag="in_copy_bc_tags", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="copy RG, BC and QT tags to the FASTA header line")), ToolInput(tag="in_copy_arbitrary_tags", input_type=String(optional=True), prefix="-T", doc=InputDocumentation(doc="copy arbitrary tags to the FASTA header line")), ToolInput(tag="in_input_fmt_option", input_type=File(optional=True), prefix="--input-fmt-option", doc=InputDocumentation(doc="[=VAL]\nSpecify a single input file format option in the form\nof OPTION or OPTION=VALUE")), ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="Reference sequence FASTA FILE [null]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of additional threads to use [0]")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Set level of verbosity")), ToolInput(tag="in_i_one_four_i_eight", input_type=Int(), position=0, doc=InputDocumentation(doc="the first 14 characters are index 1, the next 8 characters are index 2")), ToolInput(tag="in_n_eight_i_one_four", input_type=Int(), position=1, doc=InputDocumentation(doc="ignore the first 8 characters, and use the next 14 characters for index 1"))], outputs=[], container="quay.io/biocontainers/samtools:1.11--h6270b1f_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Samtools_Fasta_V0_1_0().translate("wdl")

