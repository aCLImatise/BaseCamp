from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Lima_V0_1_0 = CommandToolBuilder(tool="lima", base_command=["lima"], inputs=[ToolInput(tag="in_same", input_type=Boolean(optional=True), prefix="--same", doc=InputDocumentation(doc="Only keep same barcodes in a pair in\nBAM output.")), ToolInput(tag="in_different", input_type=Boolean(optional=True), prefix="--different", doc=InputDocumentation(doc="Only keep different barcodes in a pair\nin BAM output. Enforces --min-passes\n≥ 1.")), ToolInput(tag="in_neighbors", input_type=File(optional=True), prefix="--neighbors", doc=InputDocumentation(doc="Only output barcode pairs that are\nneighbors in barcode file.")), ToolInput(tag="in_per_read", input_type=Boolean(optional=True), prefix="--per-read", doc=InputDocumentation(doc="Do not tag per ZMW, but per read.")), ToolInput(tag="in_score_full_pass", input_type=Boolean(optional=True), prefix="--score-full-pass", doc=InputDocumentation(doc="Only use subreads flanked by adapters\nfor barcode identification.")), ToolInput(tag="in_max_scored_barcode_pairs", input_type=Boolean(optional=True), prefix="--max-scored-barcode-pairs", doc=InputDocumentation(doc="INT    Only use up to N barcode pair regions\nto find the barcode, 0 means use all.\n[0]")), ToolInput(tag="in_max_scored_barcodes", input_type=Boolean(optional=True), prefix="--max-scored-barcodes", doc=InputDocumentation(doc="INT    Analyze at maximum the provided number\nof barcodes per ZMW; 0 means\ndeactivated. [0]")), ToolInput(tag="in_max_scored_adapters", input_type=Boolean(optional=True), prefix="--max-scored-adapters", doc=InputDocumentation(doc="INT    Analyze at maximum the provided number\nof adapters per ZMW; 0 means\ndeactivated. [0]")), ToolInput(tag="in_min_passes", input_type=Boolean(optional=True), prefix="--min-passes", doc=InputDocumentation(doc="INT    Minimal number of full passes. [0]")), ToolInput(tag="in_min_length", input_type=Boolean(optional=True), prefix="--min-length", doc=InputDocumentation(doc="INT    Minimum sequence length after clipping.\n[50]")), ToolInput(tag="in_max_input_length", input_type=Boolean(optional=True), prefix="--max-input-length", doc=InputDocumentation(doc="INT    Maximum input sequence length, 0 means\ndeactivated. [0]")), ToolInput(tag="in_bad_adapter_ratio", input_type=Boolean(optional=True), prefix="--bad-adapter-ratio", doc=InputDocumentation(doc="FLOAT  Maximum ratio of bad adapter. [0]")), ToolInput(tag="in_shared_prefix", input_type=Boolean(optional=True), prefix="--shared-prefix", doc=InputDocumentation(doc="Barcodes may be substrings of others.")), ToolInput(tag="in_window_size_multi", input_type=Boolean(optional=True), prefix="--window-size-multi", doc=InputDocumentation(doc="FLOAT  The candidate region size multiplier:\nbarcode_length * multiplier. [3]")), ToolInput(tag="in_window_size", input_type=Boolean(optional=True), prefix="--window-size", doc=InputDocumentation(doc="INT    The candidate region size in bp. If\nset, --window-size-mult will be\nignored. [0]")), ToolInput(tag="in_min_ref_span", input_type=Boolean(optional=True), prefix="--min-ref-span", doc=InputDocumentation(doc="FLOAT  Minimum reference span relative to the\nbarcode length. [0.5]")), ToolInput(tag="in_min_scoring_regions", input_type=Boolean(optional=True), prefix="--min-scoring-regions", doc=InputDocumentation(doc="INT    Minimum number of barcode regions with\nsufficient relative span to the barcode\nlength. [1]")), ToolInput(tag="in_min_score", input_type=Boolean(optional=True), prefix="--min-score", doc=InputDocumentation(doc="INT    Reads below the minimum barcode score\nare removed from downstream analysis.\n[0]")), ToolInput(tag="in_min_end_score", input_type=Boolean(optional=True), prefix="--min-end-score", doc=InputDocumentation(doc="INT    Minimum end barcode score threshold is\napplied to the individual leading and\ntrailing ends. [0]")), ToolInput(tag="in_min_signal_increase", input_type=Boolean(optional=True), prefix="--min-signal-increase", doc=InputDocumentation(doc="INT    The minimal score difference, between\nfirst and combined, required to call a\nbarcode pair different. [10]")), ToolInput(tag="in_min_score_lead", input_type=Boolean(optional=True), prefix="--min-score-lead", doc=InputDocumentation(doc="INT    The minimal score lead required to call\na barcode pair significant. [10]")), ToolInput(tag="in_keep_tag_idx_order", input_type=Boolean(optional=True), prefix="--keep-tag-idx-order", doc=InputDocumentation(doc="Keep identified order of barcode pair\nindices in BC tag; CCS only.")), ToolInput(tag="in_keep_split_idx_order", input_type=Boolean(optional=True), prefix="--keep-split-idx-order", doc=InputDocumentation(doc="Keep identified order of barcode pair\nindices in split BAM names; CCS only.")), ToolInput(tag="in_ccs", input_type=Boolean(optional=True), prefix="--ccs", doc=InputDocumentation(doc="CCS mode, use optimal alignment options")), ToolInput(tag="in_match_score", input_type=Int(optional=True), prefix="--match-score", doc=InputDocumentation(doc="INT    Score for a sequence match. [4]")), ToolInput(tag="in_mismatch_penalty", input_type=Boolean(optional=True), prefix="--mismatch-penalty", doc=InputDocumentation(doc="INT    Penalty for a mismatch. [13]")), ToolInput(tag="in_deletion_penalty", input_type=Boolean(optional=True), prefix="--deletion-penalty", doc=InputDocumentation(doc="INT    Deletions penalty. [7]")), ToolInput(tag="in_insertion_penalty", input_type=Boolean(optional=True), prefix="--insertion-penalty", doc=InputDocumentation(doc="INT    Insertion penalty. [7]")), ToolInput(tag="in_branch_penalty", input_type=Boolean(optional=True), prefix="--branch-penalty", doc=InputDocumentation(doc="INT    Branch penalty. [4]")), ToolInput(tag="in_split_bam", input_type=Boolean(optional=True), prefix="--split-bam", doc=InputDocumentation(doc="Split BAM output by barcode pair.")), ToolInput(tag="in_split_bam_named", input_type=Boolean(optional=True), prefix="--split-bam-named", doc=InputDocumentation(doc="Split BAM output by resolved barcode\npair name.")), ToolInput(tag="in_files_per_directory", input_type=Boolean(optional=True), prefix="--files-per-directory", doc=InputDocumentation(doc="INT    Group maximum numbers of split barcode\noutput files per directory; 0 means\ndeactivated. [0]")), ToolInput(tag="in_reuse_uuids", input_type=Boolean(optional=True), prefix="--reuse-uuids", doc=InputDocumentation(doc="Use UUIDs from dataset XML input, must\nbe used with output BAM splitting.")), ToolInput(tag="in_bam_handles", input_type=Boolean(optional=True), prefix="--bam-handles", doc=InputDocumentation(doc="INT    Maximum number of open BAM files. [500]")), ToolInput(tag="in_dump_clips", input_type=File(optional=True), prefix="--dump-clips", doc=InputDocumentation(doc="Dump clipped regions in a separate\noutput file <prefix>.lima.clips")), ToolInput(tag="in_dump_removed", input_type=Boolean(optional=True), prefix="--dump-removed", doc=InputDocumentation(doc="Dump removed records to\n<prefix>.lima.removed.bam.")), ToolInput(tag="in_no_bam", input_type=Boolean(optional=True), prefix="--no-bam", doc=InputDocumentation(doc="Do not generate BAM output.")), ToolInput(tag="in_no_reports", input_type=Boolean(optional=True), prefix="--no-reports", doc=InputDocumentation(doc="Do not generate reports.")), ToolInput(tag="in_single_side", input_type=Boolean(optional=True), prefix="--single-side", doc=InputDocumentation(doc="Assign single side barcodes by score")), ToolInput(tag="in_iso_seq", input_type=Boolean(optional=True), prefix="--isoseq", doc=InputDocumentation(doc="Activate specialized IsoSeq mode.")), ToolInput(tag="in_peek", input_type=Boolean(optional=True), prefix="--peek", doc=InputDocumentation(doc="INT    Demux the first N ZMWs and return the\nmean score; 0 means peeking\ndeactivated. [0]")), ToolInput(tag="in_guess", input_type=Boolean(optional=True), prefix="--guess", doc=InputDocumentation(doc="INT    Try to guess the used barcodes, using\nthe provided mean score threshold; 0\nmeans guessing deactivated. [0]")), ToolInput(tag="in_guess_min_count", input_type=Boolean(optional=True), prefix="--guess-min-count", doc=InputDocumentation(doc="INT    Minimum number of ZMWs observed to\nwhitelist barcodes. [0]")), ToolInput(tag="in_peek_guess", input_type=Boolean(optional=True), prefix="--peek-guess", doc=InputDocumentation(doc="Try to infer the used barcodes subset,\nby peeking at the first 50,000 ZMWs,\nwhitelisting barcode pairs with more\nthan 10 counts and mean score ≥ 45.")), ToolInput(tag="in_ignore_bio_samples", input_type=Boolean(optional=True), prefix="--ignore-biosamples", doc=InputDocumentation(doc="Ignore <BioSamples> from XML input.")), ToolInput(tag="in_num_threads", input_type=Boolean(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="INT    Number of threads to use, 0 means\nautodetection. [0]")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="STR    Set log level. Valid choices: (TRACE,\nDEBUG, INFO, WARN, FATAL). [WARN]")), ToolInput(tag="in_log_file", input_type=Boolean(optional=True), prefix="--log-file", doc=InputDocumentation(doc="FILE   Log to a file, instead of stderr.")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc="STR    Source BAM or DATASET")), ToolInput(tag="in_barcodes", input_type=String(), position=1, doc=InputDocumentation(doc="STR    FASTA or BARCODESET file")), ToolInput(tag="in_output", input_type=String(), position=2, doc=InputDocumentation(doc="STR    Output BAM or DATASET file")), ToolInput(tag="in_clustering_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--scored-adapter-ratio         FLOAT  Minimum ratio of scored vs sequenced"))], outputs=[ToolOutput(tag="out_neighbors", output_type=File(optional=True), selector=InputSelector(input_to_select="in_neighbors", type_hint=File()), doc=OutputDocumentation(doc="Only output barcode pairs that are\nneighbors in barcode file.")), ToolOutput(tag="out_dump_clips", output_type=File(optional=True), selector=InputSelector(input_to_select="in_dump_clips", type_hint=File()), doc=OutputDocumentation(doc="Dump clipped regions in a separate\noutput file <prefix>.lima.clips"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Lima_V0_1_0().translate("wdl", allow_empty_container=True)

