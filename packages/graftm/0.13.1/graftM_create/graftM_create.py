from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Directory

Graftm_Create_V0_1_0 = CommandToolBuilder(tool="graftM_create", base_command=["graftM", "create"], inputs=[ToolInput(tag="in_taxonomy", input_type=File(optional=True), prefix="--taxonomy", doc=InputDocumentation(doc="File containing two tab separated columns, the first with the ID of the sequences, the second with the taxonomy string (required unless --rerooted_annotated_tree or --taxtastic_taxonomy and --taxtastic_seqinfo are specified)")), ToolInput(tag="in_sequences", input_type=String(optional=True), prefix="--sequences", doc=InputDocumentation(doc="Unaligned sequences (required)")), ToolInput(tag="in_re_rooted_tree", input_type=String(optional=True), prefix="--rerooted_tree", doc=InputDocumentation(doc="A tree with which to build the reference package, appropriately rooted. (default: generate tree with FastTree and attempt reroot with taxtastic)")), ToolInput(tag="in_alignment", input_type=String(optional=True), prefix="--alignment", doc=InputDocumentation(doc="An alignment with which to build a custom HMM and tree in aligned FASTA format")), ToolInput(tag="in_re_rooted_annotated_tree", input_type=File(optional=True), prefix="--rerooted_annotated_tree", doc=InputDocumentation(doc="Define taxonomy through this annotated newick file.")), ToolInput(tag="in_tree", input_type=String(optional=True), prefix="--tree", doc=InputDocumentation(doc="Specify an unrooted tree, GraftM will attempt to reroot it.")), ToolInput(tag="in_hmm", input_type=Boolean(optional=True), prefix="--hmm", doc=InputDocumentation(doc=".hmm file       Use this HMM for alignment, and search unless --search_hmm_files is specified.")), ToolInput(tag="in_de_replication_level", input_type=Int(optional=True), prefix="--dereplication_level", doc=InputDocumentation(doc="taxonomic rank at which to dereplicate the sequences to create the HMM. Provide an integer that corresponds to the rank (from left to right) will be dereplicated. For example --dereplication_level 3 will omit all sequences that are redundant at the 3rd rank (from left to right in the taxonomy file) from the search HMM.  (0 == No dereplication)")), ToolInput(tag="in_search_hmm_files", input_type=Boolean(optional=True), prefix="--search_hmm_files", doc=InputDocumentation(doc=".hmm files [.hmm files ...]\nUse these HMM(s) for search.")), ToolInput(tag="in_min_aligned_percent", input_type=Int(optional=True), prefix="--min_aligned_percent", doc=InputDocumentation(doc="Remove sequences from the alignment which do not cover at least this percentage of the HMM (default: 30)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Name of output GraftM package.")), ToolInput(tag="in_tree_log", input_type=File(optional=True), prefix="--tree_log", doc=InputDocumentation(doc="A log file for the tree.")), ToolInput(tag="in_tax_tastic_taxonomy", input_type=File(optional=True), prefix="--taxtastic_taxonomy", doc=InputDocumentation(doc="A taxtastic format taxonomy file. (default: use taxonomy from --taxonomy)")), ToolInput(tag="in_tax_tastic_seq_info", input_type=File(optional=True), prefix="--taxtastic_seqinfo", doc=InputDocumentation(doc="A taxtastic format seqinfo file. (default: use taxonomy from --taxonomy)")), ToolInput(tag="in_force", input_type=Directory(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite output gpkg directory if it exists.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use (default: 5)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="1 - 5, 1 being silent, 5 being noisy indeed (default: 4)")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="output logging information to file")), ToolInput(tag="in_sequence_one", input_type=Int(), position=0, doc=InputDocumentation(doc="k__kingdom1; p__phylum2"))], outputs=[ToolOutput(tag="out_force", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Overwrite output gpkg directory if it exists.")), ToolOutput(tag="out_log", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log", type_hint=File()), doc=OutputDocumentation(doc="output logging information to file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Graftm_Create_V0_1_0().translate("wdl", allow_empty_container=True)

