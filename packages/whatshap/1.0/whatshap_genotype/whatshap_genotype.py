from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String, Float

Whatshap_Genotype_V0_1_0 = CommandToolBuilder(tool="whatshap_genotype", base_command=["whatshap", "genotype"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output VCF file. Add .gz to the file name to get\ncompressed output. If omitted, use standard output.")), ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="Reference file. Provide this to detect alleles through\nre-alignment. If no index (.fai) exists, it will be\ncreated")), ToolInput(tag="in_max_coverage", input_type=Int(optional=True), prefix="--max-coverage", doc=InputDocumentation(doc="Reduce coverage to at most MAXCOV (default: 15).")), ToolInput(tag="in_mapping_quality", input_type=Int(optional=True), prefix="--mapping-quality", doc=InputDocumentation(doc="Minimum mapping quality (default: 20)")), ToolInput(tag="in_indels", input_type=Boolean(optional=True), prefix="--indels", doc=InputDocumentation(doc="Also genotype indels (default: genotype only SNPs)")), ToolInput(tag="in_ignore_read_groups", input_type=Boolean(optional=True), prefix="--ignore-read-groups", doc=InputDocumentation(doc="Ignore read groups in BAM header and assume all reads\ncome from the same sample.")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="--sample", doc=InputDocumentation(doc="Name of a sample to genotype. If not given, all\nsamples in the input VCF are genotyped. Can be used\nmultiple times.")), ToolInput(tag="in_chromosome", input_type=String(optional=True), prefix="--chromosome", doc=InputDocumentation(doc="Name of chromosome to genotyped. If not given, all\nchromosomes in the input VCF are genotyped. Can be\nused multiple times.")), ToolInput(tag="in_gt_qual_threshold", input_type=Int(optional=True), prefix="--gt-qual-threshold", doc=InputDocumentation(doc="Phred scaled error probability threshold used for\ngenotyping (default: 0). Must be at least 0. If error\nprobability of genotype is higher, genotype ./. is\noutput.")), ToolInput(tag="in_no_priors", input_type=Boolean(optional=True), prefix="--no-priors", doc=InputDocumentation(doc="Skip initial prior genotyping and use uniform priors\n(default: False).")), ToolInput(tag="in_prior_output", input_type=File(optional=True), prefix="--prioroutput", doc=InputDocumentation(doc="output prior genotype likelihoods to the given file.")), ToolInput(tag="in_overhang", input_type=Int(optional=True), prefix="--overhang", doc=InputDocumentation(doc="When --reference is used, extend alignment by this\nmany bases to left and right when realigning (default:\n10).")), ToolInput(tag="in_constant", input_type=Int(optional=True), prefix="--constant", doc=InputDocumentation(doc="This constant is used to regularize the priors\n(default: 0).")), ToolInput(tag="in_affine_gap", input_type=Boolean(optional=True), prefix="--affine-gap", doc=InputDocumentation(doc="When detecting alleles through re-alignment, use\naffine gap costs (EXPERIMENTAL).")), ToolInput(tag="in_gap_start", input_type=Int(optional=True), prefix="--gap-start", doc=InputDocumentation(doc="gap starting penalty in case affine gap costs are used\n(default: 10).")), ToolInput(tag="in_gap_extend", input_type=Int(optional=True), prefix="--gap-extend", doc=InputDocumentation(doc="gap extend penalty in case affine gap costs are used\n(default: 7).")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="--mismatch", doc=InputDocumentation(doc="mismatch cost in case affine gap costs are used\n(default: 15)")), ToolInput(tag="in_ped", input_type=File(optional=True), prefix="--ped", doc=InputDocumentation(doc="/FAM         Use pedigree information in PED file to improve\ngenotyping (switches to PedMEC algorithm). Columns 2,\n3, 4 must refer to child, mother, and father sample\nnames as used in the VCF and BAM. Other columns are\nignored (EXPERIMENTAL).")), ToolInput(tag="in_recomb_rate", input_type=Float(optional=True), prefix="--recombrate", doc=InputDocumentation(doc="Recombination rate in cM/Mb (used with --ped). If\ngiven, a constant recombination rate is assumed\n(default: 1.26cM/Mb).")), ToolInput(tag="in_gen_map", input_type=File(optional=True), prefix="--genmap", doc=InputDocumentation(doc="File with genetic map (used with --ped) to be used\ninstead of constant recombination rate, i.e. overrides\noption --recombrate.")), ToolInput(tag="in_use_ped_samples", input_type=Boolean(optional=True), prefix="--use-ped-samples", doc=InputDocumentation(doc="Only work on samples mentioned in the provided PED\nfile.\n")), ToolInput(tag="in_vcf", input_type=String(), position=0, doc=InputDocumentation(doc="VCF file with variants to be genotyped (can be gzip-\ncompressed)")), ToolInput(tag="in_phase_input", input_type=String(), position=1, doc=InputDocumentation(doc="BAM or VCF file(s) with phase information, either\nthrough sequencing reads (BAM) or through phased\nblocks (VCF)"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output VCF file. Add .gz to the file name to get\ncompressed output. If omitted, use standard output.")), ToolOutput(tag="out_prior_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prior_output", type_hint=File()), doc=OutputDocumentation(doc="output prior genotype likelihoods to the given file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Whatshap_Genotype_V0_1_0().translate("wdl", allow_empty_container=True)

