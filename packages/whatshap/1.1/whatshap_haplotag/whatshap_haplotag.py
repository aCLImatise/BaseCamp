from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean

Whatshap_Haplotag_V0_1_0 = CommandToolBuilder(tool="whatshap_haplotag", base_command=["whatshap", "haplotag"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file. If omitted, use standard output.")), ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="Reference file. Provide this to detect alleles through\nre-alignment. If no index (.fai) exists, it will be\ncreated")), ToolInput(tag="in_regions", input_type=String(optional=True), prefix="--regions", doc=InputDocumentation(doc="Specify region(s) of interest to limit the tagging to\nreads/variants overlapping those regions. You can\nspecify a space-separated list of regions in the form\nof chrom:start-end, chrom (consider entire\nchromosome), or chrom:start (consider region from this\nstart to end of chromosome).")), ToolInput(tag="in_ignore_linked_read", input_type=Boolean(optional=True), prefix="--ignore-linked-read", doc=InputDocumentation(doc="Ignore linkage information stored in BX tags of the")), ToolInput(tag="in_ignore_read_groups", input_type=Boolean(optional=True), prefix="--ignore-read-groups", doc=InputDocumentation(doc="Ignore read groups in BAM/CRAM header and assume all\nreads come from the same sample.")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="--sample", doc=InputDocumentation(doc="Name of a sample to phase. If not given, all samples\nin the input VCF are phased. Can be used multiple\ntimes.")), ToolInput(tag="in_output_haplo_tag_list", input_type=File(optional=True), prefix="--output-haplotag-list", doc=InputDocumentation(doc="Write assignments of read names to haplotypes (tab\nseparated) to given output file. If filename ends in\n.gz, then output is gzipped.")), ToolInput(tag="in_tag_supplementary", input_type=Boolean(optional=True), prefix="--tag-supplementary", doc=InputDocumentation(doc="Also tag supplementary alignments. Supplementary\nalignments are assigned to the same haplotype the\nprimary alignment has been assigned to (default: only\ntag primary alignments).\n")), ToolInput(tag="in_vcf", input_type=String(), position=0, doc=InputDocumentation(doc="VCF file with phased variants (must be gzip-compressed\nand indexed)")), ToolInput(tag="in_alignments", input_type=String(), position=1, doc=InputDocumentation(doc="File (BAM/CRAM) with read alignments to be tagged by")), ToolInput(tag="in_haplotype", input_type=String(), position=2, doc=InputDocumentation(doc="optional arguments:")), ToolInput(tag="in_reads_dot", input_type=String(), position=3, doc=InputDocumentation(doc="--linked-read-distance-cutoff LINKEDREADDISTANCE, -d LINKEDREADDISTANCE"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file. If omitted, use standard output.")), ToolOutput(tag="out_output_haplo_tag_list", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_haplo_tag_list", type_hint=File()), doc=OutputDocumentation(doc="Write assignments of read names to haplotypes (tab\nseparated) to given output file. If filename ends in\n.gz, then output is gzipped."))], container="quay.io/biocontainers/whatshap:1.1--py39h7cff6ad_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Whatshap_Haplotag_V0_1_0().translate("wdl")

