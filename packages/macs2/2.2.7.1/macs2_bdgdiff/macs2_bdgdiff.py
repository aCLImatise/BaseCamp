from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Directory, File

Macs2_Bdgdiff_V0_1_0 = CommandToolBuilder(tool="macs2_bdgdiff", base_command=["macs2", "bdgdiff"], inputs=[ToolInput(tag="in_tone", input_type=Int(optional=True), prefix="--t1", doc=InputDocumentation(doc="MACS pileup bedGraph for condition 1. Incompatible\nwith callpeak --SPMR output. REQUIRED")), ToolInput(tag="in_t_two", input_type=Int(optional=True), prefix="--t2", doc=InputDocumentation(doc="MACS pileup bedGraph for condition 2. Incompatible\nwith callpeak --SPMR output. REQUIRED")), ToolInput(tag="in_cone", input_type=Int(optional=True), prefix="--c1", doc=InputDocumentation(doc="MACS control lambda bedGraph for condition 1.\nIncompatible with callpeak --SPMR output. REQUIRED")), ToolInput(tag="in_c_two", input_type=Int(optional=True), prefix="--c2", doc=InputDocumentation(doc="MACS control lambda bedGraph for condition 2.\nIncompatible with callpeak --SPMR output. REQUIRED")), ToolInput(tag="in_cut_off", input_type=Int(optional=True), prefix="--cutoff", doc=InputDocumentation(doc="logLR cutoff. DEFAULT: 3 (likelihood ratio=1000)")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--min-len", doc=InputDocumentation(doc="Minimum length of differential region. Try bigger\nvalue to remove small regions. DEFAULT: 200")), ToolInput(tag="in_max_gap", input_type=Int(optional=True), prefix="--max-gap", doc=InputDocumentation(doc="Maximum gap to merge nearby differential regions.\nConsider a wider gap for broad marks. Maximum gap\nshould be smaller than minimum length (-g). DEFAULT:\n100")), ToolInput(tag="in_depth_one", input_type=Int(optional=True), prefix="--depth1", doc=InputDocumentation(doc="Sequencing depth (# of non-redundant reads in million)\nfor condition 1. It will be used together with --d2.\nSee description for --d2 below for how to assign them.\nDefault: 1")), ToolInput(tag="in_depth_two", input_type=Int(optional=True), prefix="--depth2", doc=InputDocumentation(doc="Sequencing depth (# of non-redundant reads in million)\nfor condition 2. It will be used together with --d1.\nDEPTH1 and DEPTH2 will be used to calculate scaling\nfactor for each sample, to down-scale larger sample to\nthe level of smaller one. For example, while comparing\n10 million condition 1 and 20 million condition 2, use\n--d1 10 --d2 20, then pileup value in bedGraph for\ncondition 2 will be divided by 2. Default: 1")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="If specified all output files will be written to that\ndirectory. Default: the current working directory")), ToolInput(tag="in_o_prefix", input_type=File(optional=True), prefix="--o-prefix", doc=InputDocumentation(doc="Output file prefix. Actual files will be named as\nPREFIX_cond1.bed, PREFIX_cond2.bed and\nPREFIX_common.bed. Mutually exclusive with -o/--ofile.")), ToolInput(tag="in_ofile_ofile_", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="OFILE OFILE, --ofile OFILE OFILE OFILE\nOutput filenames. Must give three arguments in order:\n1. file for unique regions in condition 1; 2. file for\nunique regions in condition 2; 3. file for common\nregions in both conditions. Note: mutually exclusive\nwith --o-prefix.\n"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="If specified all output files will be written to that\ndirectory. Default: the current working directory")), ToolOutput(tag="out_o_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_o_prefix", type_hint=File()), doc=OutputDocumentation(doc="Output file prefix. Actual files will be named as\nPREFIX_cond1.bed, PREFIX_cond2.bed and\nPREFIX_common.bed. Mutually exclusive with -o/--ofile.")), ToolOutput(tag="out_ofile_ofile_", output_type=File(optional=True), selector=InputSelector(input_to_select="in_ofile_ofile_", type_hint=File()), doc=OutputDocumentation(doc="OFILE OFILE, --ofile OFILE OFILE OFILE\nOutput filenames. Must give three arguments in order:\n1. file for unique regions in condition 1; 2. file for\nunique regions in condition 2; 3. file for common\nregions in both conditions. Note: mutually exclusive\nwith --o-prefix.\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Macs2_Bdgdiff_V0_1_0().translate("wdl", allow_empty_container=True)

