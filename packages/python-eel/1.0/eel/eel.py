from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File

Eel_V0_1_0 = CommandToolBuilder(tool="eel", base_command=["eel"], inputs=[ToolInput(tag="in_var_0", input_type=String(), position=0, doc=InputDocumentation(doc="specifies how many alignments you want. (Default 3)")), ToolInput(tag="in_var_1", input_type=String(), position=1, doc=InputDocumentation(doc="Bonus factor for hit (Default 2)")), ToolInput(tag="in_var_2", input_type=String(), position=2, doc=InputDocumentation(doc="Penalty factor for rotation (Default 1.0)")), ToolInput(tag="in_var_3", input_type=String(), position=3, doc=InputDocumentation(doc="Penalty factor for average distance between sites (Default 0.5)")), ToolInput(tag="in_var_4", input_type=String(), position=4, doc=InputDocumentation(doc="Penalty factor for distance difference between sites (Default 1.0)")), ToolInput(tag="in_var_5", input_type=String(), position=5, doc=InputDocumentation(doc="specifies how many nucletides there are per rotation. (Default 10.4)")), ToolInput(tag="in_filename", input_type=File(), position=0, doc=InputDocumentation(doc="specifies a file in gff format is you want to be aligned")), ToolInput(tag="in_gap_limit", input_type=String(), position=0, doc=InputDocumentation(doc="specifies how many sequences can have gaps at the same point (Default 0)")), ToolInput(tag="in_var_8", input_type=String(), position=1, doc=InputDocumentation(doc="specifies how many alignments you want. (Default 1)")), ToolInput(tag="in_buffer", input_type=String(), position=2, doc=InputDocumentation(doc="Specifies the size of buffer to be added to the found areas before multiple aligning in nukleotides (Default 1000)")), ToolInput(tag="in_var_10", input_type=String(), position=3, doc=InputDocumentation(doc="Bonus factor for hit (Default 2)")), ToolInput(tag="in_var_11", input_type=String(), position=4, doc=InputDocumentation(doc="Penalty factor for rotation (Default 1.0)")), ToolInput(tag="in_var_12", input_type=String(), position=5, doc=InputDocumentation(doc="Penalty factor for average distance between sites (Default 0.5)")), ToolInput(tag="in_var_13", input_type=String(), position=6, doc=InputDocumentation(doc="Penalty factor for distance difference between sites (Default 1.0)")), ToolInput(tag="in_var_14", input_type=String(), position=7, doc=InputDocumentation(doc="Specifies how many nucletides there are per rotation. (Default 10.4)")), ToolInput(tag="in_var_15", input_type=String(), position=0, doc=InputDocumentation(doc="specifies how many alignments you want. (Default 3)")), ToolInput(tag="in_var_16", input_type=String(), position=1, doc=InputDocumentation(doc="Bonus factor for hit (Default 2)")), ToolInput(tag="in_var_17", input_type=String(), position=2, doc=InputDocumentation(doc="Penalty factor for rotation (Default 1.0)")), ToolInput(tag="in_var_18", input_type=String(), position=3, doc=InputDocumentation(doc="Penalty factor for average distance between sites (Default 0.5)")), ToolInput(tag="in_var_19", input_type=String(), position=4, doc=InputDocumentation(doc="Penalty factor for distance difference between sites (Default 1.0)")), ToolInput(tag="in_var_20", input_type=String(), position=5, doc=InputDocumentation(doc="specifies how many nucletides there are per rotation. (Default 10.4)")), ToolInput(tag="in_var_21", input_type=String(), position=0, doc=InputDocumentation(doc="specifies how many alignments you want. (Default 3)")), ToolInput(tag="in_var_22", input_type=String(), position=1, doc=InputDocumentation(doc="Bonus factor for hit (Default 2)")), ToolInput(tag="in_var_23", input_type=String(), position=2, doc=InputDocumentation(doc="Penalty factor for rotation (Default 1.0)")), ToolInput(tag="in_var_24", input_type=String(), position=3, doc=InputDocumentation(doc="Penalty factor for average distance between sites (Default 0.5)")), ToolInput(tag="in_var_25", input_type=String(), position=4, doc=InputDocumentation(doc="Penalty factor for distance difference between sites (Default 1.0)")), ToolInput(tag="in_var_26", input_type=String(), position=5, doc=InputDocumentation(doc="Specifies how many nucletides there are per rotation. (Default 10.4)")), ToolInput(tag="in_var_27", input_type=String(), position=0, doc=InputDocumentation(doc="specifies how many alignments you want. (Default 3)")), ToolInput(tag="in_var_28", input_type=String(), position=1, doc=InputDocumentation(doc="Bonus factor for hit (Default 2)")), ToolInput(tag="in_var_29", input_type=String(), position=2, doc=InputDocumentation(doc="Penalty factor for rotation (Default 1.0)")), ToolInput(tag="in_var_30", input_type=String(), position=3, doc=InputDocumentation(doc="Penalty factor for average distance between sites (Default 0.5)")), ToolInput(tag="in_var_31", input_type=String(), position=4, doc=InputDocumentation(doc="Penalty factor for distance difference between sites (Default 1.0)")), ToolInput(tag="in_var_32", input_type=String(), position=5, doc=InputDocumentation(doc="Specifies how many nucletides there are per rotation. (Default 10.4)")), ToolInput(tag="in_pw_files", input_type=String(), position=6, doc=InputDocumentation(doc="If the needed pairwise alignments are calculated beforehand, the path to the directory they are in."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Eel_V0_1_0().translate("wdl", allow_empty_container=True)

