from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, String

Hicstuff_Rebin_V0_1_0 = CommandToolBuilder(tool="hicstuff_rebin", base_command=["hicstuff", "rebin"], inputs=[ToolInput(tag="in_binning", input_type=Int(optional=True), prefix="--binning", doc=InputDocumentation(doc="[bp|kb|Mb|Gb]   Subsampling factor or fix value in\nbasepairs to use for binning\n[default: 1].")), ToolInput(tag="in_frags", input_type=File(optional=True), prefix="--frags", doc=InputDocumentation(doc="Tab-separated file with headers,\ncontaining fragments start position in\nthe 3rd column. This is the file\n'fragments_list.txt' generated by\nhicstuff pipeline. Required for graal\nmatrices and recommended for bg2.")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="--force", doc=InputDocumentation(doc="Write even if the output file already exists.")), ToolInput(tag="in_chrom_s", input_type=File(optional=True), prefix="--chroms", doc=InputDocumentation(doc="Tab-separated with headers, containing\nchromosome names, size, number of\nrestriction fragments. This is the file\n'info_contigs.txt' generated by hicstuff\npipeline.\n")), ToolInput(tag="in_contact_map", input_type=String(), position=0, doc=InputDocumentation(doc="Sparse contact matrix in graal, cool or bg2 format.")), ToolInput(tag="in_out_prefix", input_type=String(), position=1, doc=InputDocumentation(doc="Prefix path (without extension) for the output files."))], outputs=[ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Write even if the output file already exists."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hicstuff_Rebin_V0_1_0().translate("wdl", allow_empty_container=True)

