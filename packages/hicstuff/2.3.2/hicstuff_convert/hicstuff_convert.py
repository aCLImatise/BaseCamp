from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String

Hicstuff_Convert_V0_1_0 = CommandToolBuilder(tool="hicstuff_convert", base_command=["hicstuff", "convert"], inputs=[ToolInput(tag="in_frags", input_type=File(optional=True), prefix="--frags", doc=InputDocumentation(doc="Tab-separated file with headers,\ncontaining columns id, chrom, start_pos,\nend_pos size. This is the file\n'fragments_list.txt' generated by\nhicstuff pipeline. Required for graal\nmatrices and recommended for bg2.")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="--force", doc=InputDocumentation(doc="Write even if the output file already exists.")), ToolInput(tag="in_chrom_s", input_type=File(optional=True), prefix="--chroms", doc=InputDocumentation(doc="Tab-separated with headers, containing\ncolumns contig, length, n_frags, cumul_length.\nThis is the file 'info_contigs.txt' generated\nby hicstuff pipeline.")), ToolInput(tag="in_to", input_type=String(optional=True), prefix="--to", doc=InputDocumentation(doc="The format to which files should be\nconverted. [default: cool]\n")), ToolInput(tag="in_contact_map", input_type=String(), position=0, doc=InputDocumentation(doc="The file containing the contact frequencies.")), ToolInput(tag="in_prefix", input_type=String(), position=1, doc=InputDocumentation(doc="The prefix path for output files. An extension\nwill be added to the files depending on the\noutput format."))], outputs=[ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Write even if the output file already exists."))], container="quay.io/biocontainers/hicstuff:2.3.2--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hicstuff_Convert_V0_1_0().translate("wdl")

