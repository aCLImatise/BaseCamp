from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory

Simka_V0_1_0 = CommandToolBuilder(tool="simka", base_command=["simka"], inputs=[ToolInput(tag="in_in", input_type=Boolean(optional=True), prefix="-in", doc=InputDocumentation(doc="(1 arg) :    input file of samples. One sample per line: id1: filename1...")), ToolInput(tag="in_out", input_type=Directory(optional=True), prefix="-out", doc=InputDocumentation(doc="(1 arg) :    output directory for result files (distance matrices)  [default './simka_results']")), ToolInput(tag="in_out_tmp", input_type=Directory(optional=True), prefix="-out-tmp", doc=InputDocumentation(doc="(1 arg) :    output directory for temporary files")), ToolInput(tag="in_keep_tmp", input_type=Boolean(optional=True), prefix="-keep-tmp", doc=InputDocumentation(doc="(0 arg) :    keep temporary files")), ToolInput(tag="in_data_info", input_type=Boolean(optional=True), prefix="-data-info", doc=InputDocumentation(doc="(0 arg) :    compute (and display) information before running Simka, such as the number of reads per dataset")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="(1 arg) :    verbosity level  [default '1']")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="(0 arg) :    version")), ToolInput(tag="in_simple_dist", input_type=Boolean(optional=True), prefix="-simple-dist", doc=InputDocumentation(doc="(0 arg) :    compute all simple distances (Chord, Hellinger...)")), ToolInput(tag="in_complex_dist", input_type=Boolean(optional=True), prefix="-complex-dist", doc=InputDocumentation(doc="(0 arg) :    compute all complex distances (Jensen-Shannon...)")), ToolInput(tag="in_km_er_size", input_type=Boolean(optional=True), prefix="-kmer-size", doc=InputDocumentation(doc="(1 arg) :    size of a kmer  [default '21']")), ToolInput(tag="in_abundance_min", input_type=Boolean(optional=True), prefix="-abundance-min", doc=InputDocumentation(doc="(1 arg) :    min abundance a kmer need to be considered  [default '2']")), ToolInput(tag="in_abundance_max", input_type=Boolean(optional=True), prefix="-abundance-max", doc=InputDocumentation(doc="(1 arg) :    max abundance a kmer can have to be considered  [default '999999999']")), ToolInput(tag="in_km_er_shannon_index", input_type=Boolean(optional=True), prefix="-kmer-shannon-index", doc=InputDocumentation(doc="(1 arg) :    minimal Shannon index a kmer should have to be kept. Float in [0,2]  [default '0']")), ToolInput(tag="in_max_reads", input_type=Boolean(optional=True), prefix="-max-reads", doc=InputDocumentation(doc="(1 arg) :    maximum number of reads per sample to process. Can be -1: use all reads. Can be 0: estimate it  [default '-1']")), ToolInput(tag="in_min_read_size", input_type=Boolean(optional=True), prefix="-min-read-size", doc=InputDocumentation(doc="(1 arg) :    minimal size a read should have to be kept  [default '0']")), ToolInput(tag="in_min_shannon_index", input_type=Boolean(optional=True), prefix="-min-shannon-index", doc=InputDocumentation(doc="(1 arg) :    minimal Shannon index a read should have to be kept. Float in [0,2]  [default '0']")), ToolInput(tag="in_nb_cores", input_type=Boolean(optional=True), prefix="-nb-cores", doc=InputDocumentation(doc="(1 arg) :    number of cores  [default '0']")), ToolInput(tag="in_max_memory", input_type=Boolean(optional=True), prefix="-max-memory", doc=InputDocumentation(doc="(1 arg) :    max memory (MB)  [default '5000']")), ToolInput(tag="in_max_count", input_type=Boolean(optional=True), prefix="-max-count", doc=InputDocumentation(doc="(1 arg) :    maximum number of simultaneous counting jobs (a higher value improve execution time but increase temporary disk usage)  [default '']")), ToolInput(tag="in_max_merge", input_type=Boolean(optional=True), prefix="-max-merge", doc=InputDocumentation(doc="(1 arg) :    maximum number of simultaneous merging jobs (1 job = 1 core)  [default '']")), ToolInput(tag="in_count_cmd", input_type=Boolean(optional=True), prefix="-count-cmd", doc=InputDocumentation(doc="(1 arg) :    command to submit counting job  [default '']")), ToolInput(tag="in_merge_cmd", input_type=Boolean(optional=True), prefix="-merge-cmd", doc=InputDocumentation(doc="(1 arg) :    command to submit merging job  [default '']")), ToolInput(tag="in_count_file", input_type=Boolean(optional=True), prefix="-count-file", doc=InputDocumentation(doc="(1 arg) :    filename to the couting job template  [default '']")), ToolInput(tag="in_merge_file", input_type=Boolean(optional=True), prefix="-merge-file", doc=InputDocumentation(doc="(1 arg) :    filename to the merging job template  [default '']"))], outputs=[ToolOutput(tag="out_out", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="(1 arg) :    output directory for result files (distance matrices)  [default './simka_results']")), ToolOutput(tag="out_out_tmp", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out_tmp", type_hint=File()), doc=OutputDocumentation(doc="(1 arg) :    output directory for temporary files"))], container="quay.io/biocontainers/simka:1.5.3--he513fc3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Simka_V0_1_0().translate("wdl")

