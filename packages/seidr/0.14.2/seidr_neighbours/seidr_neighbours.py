from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Seidr_Neighbours_V0_1_0 = CommandToolBuilder(tool="seidr_neighbours", base_command=["seidr", "neighbours"], inputs=[ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--in-file", doc=InputDocumentation(doc="Input SeidrFile")), ToolInput(tag="in_arg_last_score", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --index ] arg (=last score)")), ToolInput(tag="in_arg_number_top", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --neighbours ] arg (=10)     Number of top first-degree neighbours to")), ToolInput(tag="in_use_rank_instead", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --rank ]                     Use rank instead of score")), ToolInput(tag="in_print_only_edges", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="[ --unique ]                   Print only unique edges")), ToolInput(tag="in_arg_number_openmp", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --threads ] arg (=1)         Number of OpenMP threads for parallel")), ToolInput(tag="in_force_overwrite_output", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --force ]                    Force overwrite output file if it exists")), ToolInput(tag="in_fail_issues_warning", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --strict ]                   Fail on all issues instead of warning")), ToolInput(tag="in_search_case_insensitive", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="[ --case-insensitive ]         Search case insensitive nodes")), ToolInput(tag="in_var_9", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg (=-)         Output file name ['-' for stdout]")), ToolInput(tag="in_return", input_type=String(), position=0, doc=InputDocumentation(doc="-g [ --genes ] arg                Gene names to search")), ToolInput(tag="in_sorting", input_type=String(), position=0, doc=InputDocumentation(doc="Common Options:"))], outputs=[ToolOutput(tag="out_force_overwrite_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force_overwrite_output", type_hint=File()), doc=OutputDocumentation(doc="[ --force ]                    Force overwrite output file if it exists")), ToolOutput(tag="out_var_9", output_type=File(optional=True), selector=InputSelector(input_to_select="in_var_9", type_hint=File()), doc=OutputDocumentation(doc="[ --outfile ] arg (=-)         Output file name ['-' for stdout]"))], container="quay.io/biocontainers/seidr:0.14.2--mpi_mpich_h6f92565", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seidr_Neighbours_V0_1_0().translate("wdl")

