from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Mi_V0_1_0 = CommandToolBuilder(tool="mi", base_command=["mi"], inputs=[ToolInput(tag="in_arg_expression_table", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --infile ] arg                   The expression table (without headers)")), ToolInput(tag="in__arg_file_containing_gene_names", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --genes ] arg                    File containing gene names")), ToolInput(tag="in_arg_spline_order", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --spline ] arg (=3)              Spline order")), ToolInput(tag="in_arg_auto_number", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --bins ] arg (=auto)             Number of bins")), ToolInput(tag="in_arg_saveload_raw", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="[ --mi-file ] arg                  Save/load raw MI to/from this file")), ToolInput(tag="in_var_5", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --mode ] arg (=RAW)              Post processing [RAW, CLR, ARACNE]")), ToolInput(tag="in_arg_number_genes", input_type=Boolean(optional=True), prefix="-B", doc=InputDocumentation(doc="[ --batch-size ] arg (=0)          Number of genes in MPI batch")), ToolInput(tag="in_arg_directory_path", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --tempdir ] arg                  Temporary directory path")), ToolInput(tag="in_arg_number_openmp", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --threads ] arg (=2)             Number of OpenMP threads per MPI task")), ToolInput(tag="in_force_overwrite_output", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --force ]                        Force overwrite if output already")), ToolInput(tag="in_arg_miscorestsv_output", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg (=mi_scores.tsv) Output file path")), ToolInput(tag="in_save_resume", input_type=File(optional=True), prefix="--save-resume", doc=InputDocumentation(doc="Path to a file that stores job resume")), ToolInput(tag="in_arg_verbosity_level", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --verbosity ] arg (=3)           Verbosity level (lower is less verbose)")), ToolInput(tag="in_print_program_version", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="[ --version ]                      Print the program version")), ToolInput(tag="in_exists", input_type=String(), position=0, doc=InputDocumentation(doc="-t [ --targets ] arg                  File containing gene names of genes of ")), ToolInput(tag="in_info_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--resume-from arg                     Try to resume job from this file."))], outputs=[ToolOutput(tag="out_arg_miscorestsv_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_miscorestsv_output", type_hint=File()), doc=OutputDocumentation(doc="[ --outfile ] arg (=mi_scores.tsv) Output file path"))], container="quay.io/biocontainers/seidr:0.14.2--mpi_mpich_h6f92565", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mi_V0_1_0().translate("wdl")

