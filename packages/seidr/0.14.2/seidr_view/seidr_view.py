from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean

Seidr_View_V0_1_0 = CommandToolBuilder(tool="seidr_view", base_command=["seidr", "view"], inputs=[ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--in-file", doc=InputDocumentation(doc="Input SeidrFile")), ToolInput(tag="in_arg_inf_edges", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --threshold ] arg (=-inf)    Only print edges with a weight >= t")), ToolInput(tag="in_threshold_edges_instead", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --threshold-rank ]           Threshold edges with a rank of <= t instead")), ToolInput(tag="in_arg_last_score", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --index ] arg (=last score)  Score column to use as edge weights")), ToolInput(tag="in_arg_supply_function", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="[ --filter ] arg               Supply a filter function to select edges")), ToolInput(tag="in_arg_include_nodes", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --nodelist ] arg             Include only these nodes")), ToolInput(tag="in_arg_view_only", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --lines ] arg                View only first l results")), ToolInput(tag="in_print_node_index", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="[ --no-names ]                 Print node index instead of name")), ToolInput(tag="in_print_column_headers", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --column-headers ]           Print column headers")), ToolInput(tag="in_print_supplementary_information", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --tags ]                     Print supplementary information tags")), ToolInput(tag="in_print_much_information", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="[ --dense ]                    Print as much information as possible for\neach edge")), ToolInput(tag="in_arg_delimiter_supplementary", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --sc-delim ] arg (=;)        Delimiter for supplementary tags")), ToolInput(tag="in_arg_delimiter_scoresranks", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --delim ] arg (=;)           Delimiter for scores/ranks")), ToolInput(tag="in_print_file_header", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="[ --header ]                   Print file header as text")), ToolInput(tag="in_print_node_centrality", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="[ --centrality ]               Print node centrality scores if present")), ToolInput(tag="in_o", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg (=-)         Output file name ['-' for stdout]")), ToolInput(tag="in_output_binary_seidrfile", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --binary ]                   Output binary SeidrFile")), ToolInput(tag="in_force_overwrite_output", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --force ]                    Force overwrite output file if it exists")), ToolInput(tag="in_search_case_insensitive", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="[ --case-insensitive ]         Search case insensitive nodes")), ToolInput(tag="in_arg_auto_directory", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --tempdir ] arg (=auto)      Directory to store temporary data"))], outputs=[ToolOutput(tag="out_o", output_type=File(optional=True), selector=InputSelector(input_to_select="in_o", type_hint=File()), doc=OutputDocumentation(doc="[ --outfile ] arg (=-)         Output file name ['-' for stdout]")), ToolOutput(tag="out_force_overwrite_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force_overwrite_output", type_hint=File()), doc=OutputDocumentation(doc="[ --force ]                    Force overwrite output file if it exists"))], container="quay.io/biocontainers/seidr:0.14.2--mpi_mpich_h6f92565", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seidr_View_V0_1_0().translate("wdl")

