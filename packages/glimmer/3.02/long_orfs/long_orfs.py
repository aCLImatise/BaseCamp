from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Int

Long_Orfs_V0_1_0 = CommandToolBuilder(tool="long_orfs", base_command=["long-orfs"], inputs=[ToolInput(tag="in_start_codons", input_type=String(optional=True), prefix="--start_codons", doc=InputDocumentation(doc="Use comma-separated list of codons as start codons\nSample format:  -A atg,gtg")), ToolInput(tag="in_entropy", input_type=File(optional=True), prefix="--entropy", doc=InputDocumentation(doc="Read entropy profiles from <filename>.  Format is one header\nline, then 20 lines of 3 columns each.  Columns are amino acid,\npositive entropy, negative entropy.  Rows must be in order\nby amino acid code letter")), ToolInput(tag="in_fixed", input_type=Boolean(optional=True), prefix="--fixed", doc=InputDocumentation(doc="Do *NOT* automatically determine the minimum gene length so as\nto maximize the total length of output regions")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--min_len", doc=InputDocumentation(doc="Only genes with length >= <n> will be considered")), ToolInput(tag="in_ignore", input_type=File(optional=True), prefix="--ignore", doc=InputDocumentation(doc="<filename> specifies regions of bases that are off\nlimits, so that no bases within that area will be examined")), ToolInput(tag="in_linear", input_type=Boolean(optional=True), prefix="--linear", doc=InputDocumentation(doc="Assume linear rather than circular genome, i.e., no wraparound")), ToolInput(tag="in_length_opt", input_type=Boolean(optional=True), prefix="--length_opt", doc=InputDocumentation(doc="Find and use the minimum gene length that maximizes the total\nlength of non-overlapping genes, instead of maximizing the\nnumber of such genes")), ToolInput(tag="in_no_header", input_type=Boolean(optional=True), prefix="--no_header", doc=InputDocumentation(doc="Do not include heading information in the output; only output\nthe orf-coordinate lines")), ToolInput(tag="in_max_olap", input_type=Int(optional=True), prefix="--max_olap", doc=InputDocumentation(doc="Set maximum overlap length to <n>.  Overlaps this short or shorter\nare ignored.")), ToolInput(tag="in_cut_off", input_type=String(optional=True), prefix="--cutoff", doc=InputDocumentation(doc="Only genes with entropy distance score less than <x> will be considered")), ToolInput(tag="in_without_stops", input_type=Boolean(optional=True), prefix="--without_stops", doc=InputDocumentation(doc="Do *NOT* include the stop codon in the output coordinates.\nBy default, it is included.")), ToolInput(tag="in_trans_table", input_type=Int(optional=True), prefix="--trans_table", doc=InputDocumentation(doc="Use Genbank translation table number <n> for stop codons")), ToolInput(tag="in_stop_codons", input_type=String(optional=True), prefix="--stop_codons", doc=InputDocumentation(doc="Use comma-separated list of codons as stop codons\nSample format:  -Z tag,tga,taa\n")), ToolInput(tag="in_sequence_file", input_type=File(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_output_file", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_file", output_type=File(), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc=""))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Long_Orfs_V0_1_0().translate("wdl", allow_empty_container=True)

