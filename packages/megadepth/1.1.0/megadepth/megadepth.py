from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int

Megadepth_V0_1_0 = CommandToolBuilder(tool="megadepth", base_command=["megadepth"], inputs=[ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="# of threads to do: BAM decompression OR compute sums over multiple BigWigs in parallel\nif the 2nd is intended then a TXT file listing the paths to the BigWigs to process in parallel\nshould be passed in as the main input file instead of a single BigWig file (EXPERIMENTAL).")), ToolInput(tag="in_prefix", input_type=Boolean(optional=True), prefix="--prefix", doc=InputDocumentation(doc="String to use to prefix all output files.")), ToolInput(tag="in_no_auc_stdout", input_type=Boolean(optional=True), prefix="--no-auc-stdout", doc=InputDocumentation(doc="Force all AUC(s) to be written to <prefix>.auc.tsv rather than STDOUT")), ToolInput(tag="in_no_annotation_stdout", input_type=Boolean(optional=True), prefix="--no-annotation-stdout", doc=InputDocumentation(doc="Force summarized annotation regions to be written to <prefix>.annotation.tsv rather than STDOUT")), ToolInput(tag="in_no_coverage_stdout", input_type=Boolean(optional=True), prefix="--no-coverage-stdout", doc=InputDocumentation(doc="Force covered regions to be written to <prefix>.coverage.tsv rather than STDOUT")), ToolInput(tag="in_keep_order", input_type=Boolean(optional=True), prefix="--keep-order", doc=InputDocumentation(doc="Output annotation coverage in the order chromosomes appear in the BAM/BigWig file\nThe default is to output annotation coverage in the order chromosomes appear in the annotation BED file.\nThis is only applicable if --annotation is used for either BAM or BigWig input.")), ToolInput(tag="in_annotation", input_type=String(optional=True), prefix="--annotation", doc=InputDocumentation(doc="Only output the regions in this BED applying the argument to --op to them.")), ToolInput(tag="in_op", input_type=Boolean(optional=True), prefix="--op", doc=InputDocumentation(doc="<sum[default], mean, min, max>     Statistic to run on the intervals provided by --annotation")), ToolInput(tag="in_sums_only", input_type=Boolean(optional=True), prefix="--sums-only", doc=InputDocumentation(doc="Discard coordinates from output of summarized regions")), ToolInput(tag="in_bw_buffer", input_type=Boolean(optional=True), prefix="--bwbuffer", doc=InputDocumentation(doc="<1GB[default]>               Size of buffer for reading BigWig files, critical to use a large value (~1GB) for remote BigWigs.\nDefault setting should be fine for most uses, but raise if very slow on a remote BigWig.")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Path to the reference FASTA file if a CRAM file is passed as the input file (ignored otherwise)\nIf not passed, references will be downloaded using the CRAM header.")), ToolInput(tag="in_junctions", input_type=Boolean(optional=True), prefix="--junctions", doc=InputDocumentation(doc="Extract co-occurring jx coordinates, strand, and anchor length, per read\nwrites to a TSV file <prefix>.jxs.tsv")), ToolInput(tag="in_all_junctions", input_type=Boolean(optional=True), prefix="--all-junctions", doc=InputDocumentation(doc="Extract all jx coordinates, strand, and anchor length, per read for any jx\nwrites to a TSV file <prefix>.all_jxs.tsv")), ToolInput(tag="in_long_reads", input_type=Boolean(optional=True), prefix="--longreads", doc=InputDocumentation(doc="Modifies certain buffer sizes to accommodate longer reads such as PB/Oxford.")), ToolInput(tag="in_filter_in", input_type=Boolean(optional=True), prefix="--filter-in", doc=InputDocumentation(doc="Integer bitmask, any bits of which alignments need to have to be kept (similar to samtools view -f).")), ToolInput(tag="in_filter_out", input_type=Boolean(optional=True), prefix="--filter-out", doc=InputDocumentation(doc="Integer bitmask, any bits of which alignments need to have to be skipped (similar to samtools view -F).")), ToolInput(tag="in_alts", input_type=Boolean(optional=True), prefix="--alts", doc=InputDocumentation(doc="Print differing from ref per-base coverages\nWrites to a CSV file <prefix>.alts.tsv")), ToolInput(tag="in_include_soft_clip", input_type=Boolean(optional=True), prefix="--include-softclip", doc=InputDocumentation(doc="Print a record to the alts CSV for soft-clipped bases\nWrites total counts to a separate TSV file <prefix>.softclip.tsv")), ToolInput(tag="in_only_polya", input_type=Boolean(optional=True), prefix="--only-polya", doc=InputDocumentation(doc="If --include-softclip, only print softclips which are mostly A's or T's")), ToolInput(tag="in_include_n", input_type=Boolean(optional=True), prefix="--include-n", doc=InputDocumentation(doc="Print mismatch records when mismatched read base is N")), ToolInput(tag="in_print_qual", input_type=Boolean(optional=True), prefix="--print-qual", doc=InputDocumentation(doc="Print quality values for mismatched bases")), ToolInput(tag="in_delta", input_type=Boolean(optional=True), prefix="--delta", doc=InputDocumentation(doc="Print POS field as +/- delta from previous")), ToolInput(tag="in_require_mdz", input_type=Boolean(optional=True), prefix="--require-mdz", doc=InputDocumentation(doc="Quit with error unless MD:Z field exists everywhere it's")), ToolInput(tag="in_print_perbase_coverage", input_type=Boolean(optional=True), prefix="--coverage", doc=InputDocumentation(doc="Print per-base coverage (slow but totally worth it)")), ToolInput(tag="in_auc", input_type=Boolean(optional=True), prefix="--auc", doc=InputDocumentation(doc="Print per-base area-under-coverage, will generate it for the genome\nand for the annotation if --annotation is also passed in\nDefaults to STDOUT, unless other params are passed in as well, then\nif writes to a TSV file <prefix>.auc.tsv")), ToolInput(tag="in_bigwig", input_type=Boolean(optional=True), prefix="--bigwig", doc=InputDocumentation(doc="Output coverage as BigWig file(s).  Writes to <prefix>.bw\n(also <prefix>.unique.bw when --min-unique-qual is specified).\nRequires libBigWig.")), ToolInput(tag="in_no_index", input_type=Boolean(optional=True), prefix="--no-index", doc=InputDocumentation(doc="If using --annotation, skip the use of the BAM index (BAI) for pulling out regions.\nSetting this can be faster if doing windows across the whole genome.\nThis will be turned on automatically if a window size is passed to --annotation.")), ToolInput(tag="in_min_unique_qual", input_type=Int(optional=True), prefix="--min-unique-qual", doc=InputDocumentation(doc="Output second bigWig consisting built only from alignments\nwith at least this mapping quality.  --bigwig must be specified.\nAlso produces second set of annotation sums based on this coverage\nif --annotation is enabled")), ToolInput(tag="in_double_count", input_type=Boolean(optional=True), prefix="--double-count", doc=InputDocumentation(doc="Allow overlapping ends of PE read to count twice toward")), ToolInput(tag="in_gzip", input_type=Boolean(optional=True), prefix="--gzip", doc=InputDocumentation(doc="Turns on gzipping of coverage output (no effect if --bigwig is passsed),\nthis will also enable --no-coverage-stdout.")), ToolInput(tag="in_read_ends", input_type=Boolean(optional=True), prefix="--read-ends", doc=InputDocumentation(doc="Print counts of read starts/ends, if --min-unique-qual is set\nthen only the alignments that pass that filter will be counted here\nWrites to 2 TSV files: <prefix>.starts.tsv, <prefix>.ends.tsv")), ToolInput(tag="in_frag_dist", input_type=Boolean(optional=True), prefix="--frag-dist", doc=InputDocumentation(doc="Print fragment length distribution across the genome\nWrites to a TSV file <prefix>.frags.tsv")), ToolInput(tag="in_echo_sam", input_type=Boolean(optional=True), prefix="--echo-sam", doc=InputDocumentation(doc="Print a SAM record for each aligned read")), ToolInput(tag="in_ends", input_type=Boolean(optional=True), prefix="--ends", doc=InputDocumentation(doc="Report end coordinate for each read (useful for debugging)")), ToolInput(tag="in_test_polya", input_type=Boolean(optional=True), prefix="--test-polya", doc=InputDocumentation(doc="Lower Poly-A filter minimums for testing (only useful for debugging/testing)")), ToolInput(tag="in_expected", input_type=String(), position=0, doc=InputDocumentation(doc="--head                       Print sequence names and lengths in SAM/BAM header")), ToolInput(tag="in_numbases_report_total", input_type=String(), position=0, doc=InputDocumentation(doc="--num-bases          Report total sum of bases in alignments processed (that pass filters)"))], outputs=[], container="quay.io/biocontainers/megadepth:1.1.0--h5675ecd_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Megadepth_V0_1_0().translate("wdl")

