from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, Float, String

Winnowmap_V0_1_0 = CommandToolBuilder(tool="winnowmap", base_command=["winnowmap"], inputs=[ToolInput(tag="in_use_homopolymercompressed_kmer", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="use homopolymer-compressed k-mer")), ToolInput(tag="in_kmer_size_larger", input_type=Int(optional=True), prefix="-k", doc=InputDocumentation(doc="k-mer size (no larger than 28) [15]")), ToolInput(tag="in_minimizer_window_size", input_type=Int(optional=True), prefix="-w", doc=InputDocumentation(doc="minimizer window size [50]")), ToolInput(tag="in_input_file_containing", input_type=File(optional=True), prefix="-W", doc=InputDocumentation(doc="input file containing list of high freq. k-mers []")), ToolInput(tag="in_split_index_num", input_type=Int(optional=True), prefix="-I", doc=InputDocumentation(doc="split index for every ~NUM input bases [4G]")), ToolInput(tag="in_dump_index_file", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="dump index to FILE []")), ToolInput(tag="in_filter_top_fraction", input_type=Float(optional=True), prefix="-f", doc=InputDocumentation(doc="filter out top FLOAT (<1) fraction of repetitive minimizers [0.0]")), ToolInput(tag="in_stop_chain_enlongation", input_type=Int(optional=True), prefix="-g", doc=InputDocumentation(doc="stop chain enlongation if there are no minimizers in INT-bp [5000]")), ToolInput(tag="in_max_intron_length", input_type=Int(optional=True), prefix="-G", doc=InputDocumentation(doc="max intron length (effective with -xsplice; changing -r) [200k]")), ToolInput(tag="in_max_fragment_length", input_type=Int(optional=True), prefix="-F", doc=InputDocumentation(doc="max fragment length (effective with -xsr or in the fragment mode) [800]")), ToolInput(tag="in_bandwidth_used_dpbased", input_type=Int(optional=True), prefix="-r", doc=InputDocumentation(doc="bandwidth used in chaining and DP-based alignment [500]")), ToolInput(tag="in_minimal_number_minimizers", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="minimal number of minimizers on a chain [3]")), ToolInput(tag="in_minimal_chaining_score", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="minimal chaining score (matching bases minus log gap penalty) [40]")), ToolInput(tag="in_skip_self_mappings", input_type=Boolean(optional=True), prefix="-X", doc=InputDocumentation(doc="skip self and dual mappings (for the all-vs-all mode)")), ToolInput(tag="in_min_secondarytoprimary_score", input_type=Float(optional=True), prefix="-p", doc=InputDocumentation(doc="min secondary-to-primary score ratio [0.8]")), ToolInput(tag="in_sv_off", input_type=Boolean(optional=True), prefix="--sv-off", doc=InputDocumentation(doc="turn off SV-aware mode")), ToolInput(tag="in_matching_score", input_type=Int(optional=True), prefix="-A", doc=InputDocumentation(doc="matching score [2]")), ToolInput(tag="in_mismatch_penalty", input_type=Int(optional=True), prefix="-B", doc=InputDocumentation(doc="mismatch penalty [4]")), ToolInput(tag="in_gap_open_penalty", input_type=Int(), prefix="-O", doc=InputDocumentation(doc="gap open penalty [4,24]")), ToolInput(tag="in_gap_extension_penalty", input_type=Int(), prefix="-E", doc=InputDocumentation(doc="gap extension penalty; a k-long gap costs min{O1+k*E1,O2+k*E2} [2,1]")), ToolInput(tag="in_zdrop_score_inversion", input_type=Int(), prefix="-z", doc=InputDocumentation(doc="Z-drop score and inversion Z-drop score [400,200]")), ToolInput(tag="in_minimal_peak_dp", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc="minimal peak DP alignment score [80]")), ToolInput(tag="in_how_find_strands", input_type=String(optional=True), prefix="-u", doc=InputDocumentation(doc="how to find GT-AG. f:transcript strand, b:both strands, n:don't match GT-AG [n]")), ToolInput(tag="in_output_sam_format", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="output in the SAM format (PAF by default)")), ToolInput(tag="in_output_alignments_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="output alignments to FILE [stdout]")), ToolInput(tag="in_write_cigar_ops", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="write CIGAR with >65535 ops at the CG tag")), ToolInput(tag="in_sam_read_line", input_type=String(optional=True), prefix="-R", doc=InputDocumentation(doc="SAM read group line in a format like '@RG\tID:foo\tSM:bar' []")), ToolInput(tag="in_output_cigar_paf", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="output CIGAR in PAF")), ToolInput(tag="in_cs", input_type=Boolean(optional=True), prefix="--cs", doc=InputDocumentation(doc="[=STR]   output the cs tag; STR is 'short' (if absent) or 'long' [none]")), ToolInput(tag="in_md", input_type=Boolean(optional=True), prefix="--MD", doc=InputDocumentation(doc="output the MD tag")), ToolInput(tag="in_eq_x", input_type=Boolean(optional=True), prefix="--eqx", doc=InputDocumentation(doc="write =/X CIGAR operators")), ToolInput(tag="in_use_soft_clipping", input_type=Boolean(optional=True), prefix="-Y", doc=InputDocumentation(doc="use soft clipping for supplementary alignments")), ToolInput(tag="in_manually_set_pthread", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="manually set pthread count rather than automatically")), ToolInput(tag="in_minibatch_size_mapping", input_type=Int(optional=True), prefix="-K", doc=InputDocumentation(doc="minibatch size for mapping [1000M]")), ToolInput(tag="in_preset_always_applied", input_type=Int(optional=True), prefix="-x", doc=InputDocumentation(doc="preset (always applied before other options) []\n- map-ont (ont-to-ref, uses default param)\n- map-pb (hifi-to-ref, all defaults but does finer read fragmentation in SV-aware mapping)\n- map-pb-clr (clr-to-ref, sets --sv-off)\n- splice/splice:hq - long-read/Pacbio-CCS spliced alignment, sets --sv-off\n- asm5/asm10/asm20 - asm-to-ref mapping\n")), ToolInput(tag="in_target_dot_fa", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_alignments_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_alignments_file", type_hint=File()), doc=OutputDocumentation(doc="output alignments to FILE [stdout]"))], container="quay.io/biocontainers/winnowmap:2.0--h8b12597_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Winnowmap_V0_1_0().translate("wdl")

