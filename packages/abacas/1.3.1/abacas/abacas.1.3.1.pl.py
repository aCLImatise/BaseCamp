from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Abacas_1_3_1_Pl_V0_1_0 = CommandToolBuilder(tool="abacas.1.3.1.pl", base_command=["abacas.1.3.1.pl"], inputs=[ToolInput(tag="in_reference_sequence_single", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="reference sequence in a single fasta file")), ToolInput(tag="in_contigs_multifasta_format", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="contigs in multi-fasta format")), ToolInput(tag="in_mummer_program_use", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="MUMmer program to use: 'nucmer' or 'promer'")), ToolInput(tag="in_use_nucmerpromer_parameters", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="use default nucmer/promer parameters")), ToolInput(tag="in_int_minimum_length", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="int     minimum length of exact matching word (nucmer default = 12, promer default = 4)")), ToolInput(tag="in_print_ordered_contigs", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="print ordered contigs to file in multifasta format")), ToolInput(tag="in_print_contigs_file", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="print contigs in bin to file")), ToolInput(tag="in_print_pseudomolecule_s", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="print a pseudomolecule without 'N's")), ToolInput(tag="in_int_mimimum_percent", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="int     mimimum percent identity [default 40]")), ToolInput(tag="in_int_mimimum_contig", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="int     mimimum contig coverage [default 40]")), ToolInput(tag="in_int_minimum_contig_coverage", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="int     minimum contig coverage difference [default 1]")), ToolInput(tag="in_int_minimum_contig_length", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="int     minimum contig length [default 1]")), ToolInput(tag="in_run_tblastx_contigs", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="run tblastx on contigs that are not mapped")), ToolInput(tag="in_string_file_name", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="string (file name)      print uncovered regions (gaps) on reference to file name")), ToolInput(tag="in_append_contigs_bin", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="append contigs in bin to the pseudomolecule")), ToolInput(tag="in_prefix_files_have", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="prefix  output files will have this prefix")), ToolInput(tag="in_pick_primer_sets", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc="pick primer sets to close gaps")), ToolInput(tag="in_int_number_flanking", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="int     number of flanking bases on either side of a gap for primer design (default 350)")), ToolInput(tag="in_int_run_mummer", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="int     Run mummer [default 1, use -R 0 to avoid running mummer]")), ToolInput(tag="in_escape_contig_ordering", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="Escape contig ordering i.e. go to primer design")), ToolInput(tag="in_reference_sequence_circular", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Reference sequence is circular"))], outputs=[], container="quay.io/biocontainers/abacas:1.3.1--pl526_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Abacas_1_3_1_Pl_V0_1_0().translate("wdl")

