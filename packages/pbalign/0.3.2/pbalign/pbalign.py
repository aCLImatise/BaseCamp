from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Directory

Pbalign_V0_1_0 = CommandToolBuilder(tool="pbalign", base_command=["pbalign"], inputs=[ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Write the log to file. Default(None) will write to\nstdout. (default: None)")), ToolInput(tag="in_log_level", input_type=String(optional=True), prefix="--log-level", doc=InputDocumentation(doc="Set log level (default: INFO)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Alias for setting log level to DEBUG (default: False)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Alias for setting log level to CRITICAL to suppress\noutput. (default: False)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Set the verbosity level. (default: None)")), ToolInput(tag="in_pdb", input_type=Boolean(optional=True), prefix="--pdb", doc=InputDocumentation(doc="Enable Python debugger (default: False)")), ToolInput(tag="in_profile", input_type=Boolean(optional=True), prefix="--profile", doc=InputDocumentation(doc="Print runtime profile at exit (default: False)")), ToolInput(tag="in_region_table", input_type=String(optional=True), prefix="--regionTable", doc=InputDocumentation(doc="Specify a region table for filtering reads. (default:\nNone)")), ToolInput(tag="in_config_file", input_type=File(optional=True), prefix="--configFile", doc=InputDocumentation(doc="Specify a set of user-defined argument values.\n(default: None)")), ToolInput(tag="in_pulse_file", input_type=File(optional=True), prefix="--pulseFile", doc=InputDocumentation(doc="When input reads are in fasta format and output is a\ncmp.h5 this option can specify pls.h5 or bas.h5 or\nFOFN files from which pulse metrics can be loaded for\nQuiver. (default: None)")), ToolInput(tag="in_algorithm", input_type=String(optional=True), prefix="--algorithm", doc=InputDocumentation(doc="Select an aligorithm from ('blasr', 'bowtie', 'gmap').\n(default: blasr)")), ToolInput(tag="in_max_hits", input_type=Int(optional=True), prefix="--maxHits", doc=InputDocumentation(doc="The maximum number of matches of each read to the\nreference sequence that will be evaluated. (default:\nNone)")), ToolInput(tag="in_min_anchor_size", input_type=Int(optional=True), prefix="--minAnchorSize", doc=InputDocumentation(doc="The minimum anchor size defines the length of the read\nthat must match against the reference sequence.\n(default: None)")), ToolInput(tag="in_max_match", input_type=Int(optional=True), prefix="--maxMatch", doc=InputDocumentation(doc="BLASR maxMatch option. (Will be overriden if is also\nset in algorithmOptions) (default: 30)")), ToolInput(tag="in_use_ccs", input_type=String(optional=True), prefix="--useccs", doc=InputDocumentation(doc="Map the ccsSequence to the genome first, then align\nsubreads to the interval that the CCS reads mapped to.\nuseccs: only maps subreads that span the length of the\ntemplate. useccsall: maps all subreads. useccsdenovo:\nmaps ccs only. (default: None)")), ToolInput(tag="in_no_split_sub_reads", input_type=Boolean(optional=True), prefix="--noSplitSubreads", doc=InputDocumentation(doc="Do not split reads into subreads even if subread\nregions are available. (default: False)")), ToolInput(tag="in_concordant", input_type=Boolean(optional=True), prefix="--concordant", doc=InputDocumentation(doc="Map subreads of a ZMW to the same genomic location.\n(default: False)")), ToolInput(tag="in_nproc", input_type=Int(optional=True), prefix="--nproc", doc=InputDocumentation(doc="Number of threads. (default: 8)")), ToolInput(tag="in_algorithm_options", input_type=String(optional=True), prefix="--algorithmOptions", doc=InputDocumentation(doc="Pass alignment options through. (default: None)")), ToolInput(tag="in_max_divergence", input_type=Int(optional=True), prefix="--maxDivergence", doc=InputDocumentation(doc="The maximum allowed percentage divergence of a read\nfrom the reference sequence. (default: 30.0)")), ToolInput(tag="in_min_accuracy", input_type=Int(optional=True), prefix="--minAccuracy", doc=InputDocumentation(doc="The minimum concordance of alignments that will be\nevaluated. (default: 70.0)")), ToolInput(tag="in_minlength", input_type=Int(optional=True), prefix="--minLength", doc=InputDocumentation(doc="The minimum aligned read length of alignments that\nwill be evaluated. (default: 50)")), ToolInput(tag="in_score_cut_off", input_type=String(optional=True), prefix="--scoreCutoff", doc=InputDocumentation(doc="The worst score to output an alignment. (default:\nNone)")), ToolInput(tag="in_hit_policy", input_type=String(optional=True), prefix="--hitPolicy", doc=InputDocumentation(doc="Specify a policy for how to treat multiple hit random\n: selects a random hit. all : selects all hits.\nallbest : selects all the best score hits. randombest:\nselects a random hit from all best score hits.\nleftmost : selects a hit which has the best score and\nthe smallest mapping coordinate in any reference.\n(default: randombest)")), ToolInput(tag="in_filter_adapter_only", input_type=Boolean(optional=True), prefix="--filterAdapterOnly", doc=InputDocumentation(doc="If specified, do not report adapter-only hits using\nannotations with the reference entry. (default: False)")), ToolInput(tag="in_unaligned", input_type=File(optional=True), prefix="--unaligned", doc=InputDocumentation(doc="Output names of unaligned reads to specified file.\n(default: None)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Initialize the random number generator with a none-\nzero integer. Zero means that current system time is\nused. (default: 1)")), ToolInput(tag="in_tmpdir", input_type=Directory(optional=True), prefix="--tmpDir", doc=InputDocumentation(doc="Specify a directory for saving temporary files.\n(default: /tmp)\n")), ToolInput(tag="in_input_file_name", input_type=String(), position=0, doc=InputDocumentation(doc="SubreadSet or unaligned .bam")), ToolInput(tag="in_reference_path", input_type=String(), position=1, doc=InputDocumentation(doc="Reference DataSet or FASTA file")), ToolInput(tag="in_output_file_name", input_type=String(), position=2, doc=InputDocumentation(doc="Alignment results dataset"))], outputs=[ToolOutput(tag="out_unaligned", output_type=File(optional=True), selector=InputSelector(input_to_select="in_unaligned", type_hint=File()), doc=OutputDocumentation(doc="Output names of unaligned reads to specified file.\n(default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pbalign_V0_1_0().translate("wdl", allow_empty_container=True)

