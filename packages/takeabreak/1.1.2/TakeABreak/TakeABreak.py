from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Takeabreak_V0_1_0 = CommandToolBuilder(tool="TakeABreak", base_command=["TakeABreak"], inputs=[ToolInput(tag="in_in", input_type=Boolean(optional=True), prefix="-in", doc=InputDocumentation(doc="(1 arg) :    input read file(s)  [default '']")), ToolInput(tag="in_graph", input_type=Boolean(optional=True), prefix="-graph", doc=InputDocumentation(doc="(1 arg) :    input graph file (likely a hdf5 file)  [default '']")), ToolInput(tag="in_out", input_type=Boolean(optional=True), prefix="-out", doc=InputDocumentation(doc="(1 arg) :    prefix for output files  [default '']")), ToolInput(tag="in_km_er_size", input_type=Boolean(optional=True), prefix="-kmer-size", doc=InputDocumentation(doc="(1 arg) :    size of a kmer  [default '31']")), ToolInput(tag="in_abundance_min", input_type=Boolean(optional=True), prefix="-abundance-min", doc=InputDocumentation(doc="(1 arg) :    minimal abundance threshold for solid kmers  [default 'auto']")), ToolInput(tag="in_abundance_max", input_type=Boolean(optional=True), prefix="-abundance-max", doc=InputDocumentation(doc="(1 arg) :    maximal abundance threshold for solid kmers  [default '2147483647']")), ToolInput(tag="in_solidity_kind", input_type=Boolean(optional=True), prefix="-solidity-kind", doc=InputDocumentation(doc="(1 arg) :    way to consider a solid kmer with several datasets (sum, one, or all)  [default 'one']")), ToolInput(tag="in_max_disk", input_type=Boolean(optional=True), prefix="-max-disk", doc=InputDocumentation(doc="(1 arg) :    max disk   (in MBytes)  [default '0']")), ToolInput(tag="in_max_memory", input_type=Boolean(optional=True), prefix="-max-memory", doc=InputDocumentation(doc="(1 arg) :    max memory (in MBytes)  [default '2000']")), ToolInput(tag="in_max_sim", input_type=Boolean(optional=True), prefix="-max-sim", doc=InputDocumentation(doc="(1 arg) :    max similarity percentage between a and b' and between u and v'  [default '80']")), ToolInput(tag="in_repeat", input_type=Boolean(optional=True), prefix="-repeat", doc=InputDocumentation(doc="(1 arg) :    maximal repeat size at the breakpoint (longest common suffix between a and b')  [default '8']")), ToolInput(tag="in_lct", input_type=Boolean(optional=True), prefix="-lct", doc=InputDocumentation(doc="(1 arg) :    local complexity threshold (LCT)  [default '100']")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="(0 arg) :    version")), ToolInput(tag="in_nb_cores", input_type=Boolean(optional=True), prefix="-nb-cores", doc=InputDocumentation(doc="(1 arg) :    number of cores  [default '0']")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="(1 arg) :    verbosity level  [default '1']"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Takeabreak_V0_1_0().translate("wdl", allow_empty_container=True)

