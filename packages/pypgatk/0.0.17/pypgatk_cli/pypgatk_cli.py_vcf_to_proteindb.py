from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean, Float

Pypgatk_Cli_Py_Vcf_To_Proteindb_V0_1_0 = CommandToolBuilder(tool="pypgatk_cli.py_vcf_to_proteindb", base_command=["pypgatk_cli.py", "vcf-to-proteindb"], inputs=[ToolInput(tag="in_config_file", input_type=String(optional=True), prefix="--config_file", doc=InputDocumentation(doc="Configuration to perform conversion between\nENSEMBL Files")), ToolInput(tag="in_input_fast_a", input_type=File(optional=True), prefix="--input_fasta", doc=InputDocumentation(doc="Path to the transcript sequence")), ToolInput(tag="in_vcf", input_type=File(optional=True), prefix="--vcf", doc=InputDocumentation(doc="Path to the VCF file")), ToolInput(tag="in_gene_annotations_gtf", input_type=File(optional=True), prefix="--gene_annotations_gtf", doc=InputDocumentation(doc="Path to the gene annotations file")), ToolInput(tag="in_translation_table", input_type=Int(optional=True), prefix="--translation_table", doc=InputDocumentation(doc="Translation table (Default 1)")), ToolInput(tag="in_var_prefix", input_type=String(optional=True), prefix="--var_prefix", doc=InputDocumentation(doc="String to add before the variant peptides")), ToolInput(tag="in_report_ref_seq", input_type=Boolean(optional=True), prefix="--report_ref_seq", doc=InputDocumentation(doc="In addition to var peps, also report all ref")), ToolInput(tag="in_annotation_field_name", input_type=File(optional=True), prefix="--annotation_field_name", doc=InputDocumentation(doc="Annotation field name found in the INFO\ncolumn, e.g CSQ or vep; if empty it will\nidentify overlapping transcripts from the\ngiven GTF file and no aa consequence will be\nconsidered")), ToolInput(tag="in_af_field", input_type=String(optional=True), prefix="--af_field", doc=InputDocumentation(doc="field name in the VCF INFO column to use for\nfiltering on AF, (Default None)")), ToolInput(tag="in_af_threshold", input_type=Float(optional=True), prefix="--af_threshold", doc=InputDocumentation(doc="Minium AF threshold for considering common")), ToolInput(tag="in_consequence_index", input_type=Int(optional=True), prefix="--consequence_index", doc=InputDocumentation(doc="Index of consequence in the annotated\ncolumns (separated by |)")), ToolInput(tag="in_exclude_consequences", input_type=String(optional=True), prefix="--exclude_consequences", doc=InputDocumentation(doc="Excluded Consequences  [default:\ndownstream_gene_variant,\nupstream_gene_variant, intergenic_variant,\nintron_variant, synonymous_variant]")), ToolInput(tag="in_skip_including_all_cds", input_type=Boolean(optional=True), prefix="--skip_including_all_cds", doc=InputDocumentation(doc="by default any transcript that has a defined\nCDS will be used, this option disables this\nfeatures instead")), ToolInput(tag="in_include_consequences", input_type=String(optional=True), prefix="--include_consequences", doc=InputDocumentation(doc="included_consequences, default all")), ToolInput(tag="in_ignore_filters", input_type=Boolean(optional=True), prefix="--ignore_filters", doc=InputDocumentation(doc="enabling this option causes or variants to\nbe parsed. By default only variants that\nhave not failed any filters will be\nprocessed (FILTER column is PASS, None, .)\nor if the filters are subset of the accepted\nfilters. (default is False)")), ToolInput(tag="in_accepted_filters", input_type=String(optional=True), prefix="--accepted_filters", doc=InputDocumentation(doc="Accepted filters for variant parsing")), ToolInput(tag="in_peps", input_type=String(), position=0, doc=InputDocumentation(doc="-o, --output_proteindb TEXT     Output file name, exits if already exists")), ToolInput(tag="in_variants", input_type=String(), position=1, doc=InputDocumentation(doc="--transcript_index INTEGER      Index of transcript ID in the annotated"))], outputs=[], container="quay.io/biocontainers/pypgatk:0.0.17--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pypgatk_Cli_Py_Vcf_To_Proteindb_V0_1_0().translate("wdl")

