from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, File, Boolean, Int, Float

Flanker_V0_1_0 = CommandToolBuilder(tool="flanker", base_command=["flanker"], inputs=[ToolInput(tag="in_gene", input_type=Array(t=String(), optional=True), prefix="--gene", doc=InputDocumentation(doc="Gene(s) of interest (escape any special characters).\nUse space seperation for multipe genes (default: None)")), ToolInput(tag="in_list_of_genes", input_type=File(optional=True), prefix="--list_of_genes", doc=InputDocumentation(doc="Line separated file containing genes of interest\n(default: False)")), ToolInput(tag="in_closest_match", input_type=Boolean(optional=True), prefix="--closest_match", doc=InputDocumentation(doc="Find closest match to query (default: False)")), ToolInput(tag="in_flank", input_type=String(optional=True), prefix="--flank", doc=InputDocumentation(doc="Choose which side(s) of the gene to extract\n(upstream/downstream/both) (default: both)")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="One of 'default' - normal mode, 'mm' - multi-allelic\ncluster, or 'sm' - salami-mode (default: default)")), ToolInput(tag="in_circ", input_type=Boolean(optional=True), prefix="--circ", doc=InputDocumentation(doc="Is sequence circularised (default: False)")), ToolInput(tag="in_include_gene", input_type=Boolean(optional=True), prefix="--include_gene", doc=InputDocumentation(doc="Include the gene of interest (default: False)")), ToolInput(tag="in_database", input_type=String(optional=True), prefix="--database", doc=InputDocumentation(doc="Choose Abricate database e.g. NCBI, resfinder\n(default: ncbi)")), ToolInput(tag="in_increase_verbosity_warnings", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[VERBOSE], --verbose [VERBOSE]\nIncrease verbosity: 0 = only warnings, 1 = info, 2 =\ndebug. No number means info. Default is no verbosity.\n(default: 0)")), ToolInput(tag="in_fast_a_file", input_type=File(optional=True), prefix="--fasta_file", doc=InputDocumentation(doc="Input fasta file (default: None)")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc="Length of flanking sequence/first window length\n(default: 1000)")), ToolInput(tag="in_window_stop", input_type=Int(optional=True), prefix="--window_stop", doc=InputDocumentation(doc="Final window length (default: None)")), ToolInput(tag="in_window_step", input_type=String(optional=True), prefix="--window_step", doc=InputDocumentation(doc="Step in window sequence (default: None)")), ToolInput(tag="in_cluster", input_type=Boolean(optional=True), prefix="--cluster", doc=InputDocumentation(doc="Turn on clustering mode? (default: False)")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="Prefix for the clustering file (default: out)")), ToolInput(tag="in_threshold", input_type=Float(optional=True), prefix="--threshold", doc=InputDocumentation(doc="mash distance threshold for clustering (default:\n0.001)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="threads for mash to use (default: 1)")), ToolInput(tag="in_km_er_length", input_type=Int(optional=True), prefix="--kmer_length", doc=InputDocumentation(doc="kmer length for Mash (default: 21)")), ToolInput(tag="in_sketch_size", input_type=Int(optional=True), prefix="--sketch_size", doc=InputDocumentation(doc="sketch size for mash (default: 1000)\n"))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc="Prefix for the clustering file (default: out)"))], container="quay.io/biocontainers/flanker:0.1.5--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Flanker_V0_1_0().translate("wdl")

