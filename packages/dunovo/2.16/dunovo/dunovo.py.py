from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, String, Int, Float, Boolean

Dunovo_Py_V0_1_0 = CommandToolBuilder(tool="dunovo.py", base_command=["dunovo.py"], inputs=[ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="The directory to create the output (and intermediate)\nfiles in. Must exist already and not already contain\nany of the output/intermediate files.")), ToolInput(tag="in_suffix", input_type=File(optional=True), prefix="--suffix", doc=InputDocumentation(doc="A string to use in naming the output files. If given,\nwill be put just before the file extension (like\n'families.suffix.tsv').")), ToolInput(tag="in_du_novo_dir", input_type=Directory(optional=True), prefix="--dunovo-dir", doc=InputDocumentation(doc="The directory containing the version of Du Novo you\nwant to run. Default: The directory containing this\nscript (/usr/local/lib).")), ToolInput(tag="in_pos", input_type=String(optional=True), prefix="--pos", doc=InputDocumentation(doc="correct.py --pos. Default: the correct.py default.")), ToolInput(tag="in_aligner", input_type=String(optional=True), prefix="--aligner", doc=InputDocumentation(doc="align-families.py --aligner. Default: kalign")), ToolInput(tag="in_min_reads", input_type=Int(optional=True), prefix="--min-reads", doc=InputDocumentation(doc="make-consensi.py --min-reads. Default: the make-\nconsensi.py default.")), ToolInput(tag="in_qual", input_type=Int(optional=True), prefix="--qual", doc=InputDocumentation(doc="make-consensi.py --qual. Default: 25")), ToolInput(tag="in_cons_th_res", input_type=Float(optional=True), prefix="--cons-thres", doc=InputDocumentation(doc="make-consensi.py --cons-thres. Default: 0.7.")), ToolInput(tag="in_min_cons_reads", input_type=Int(optional=True), prefix="--min-cons-reads", doc=InputDocumentation(doc="make-consensi.py --min-cons-reads. Default: the make-\nconsensi.py default.")), ToolInput(tag="in_fake_phred", input_type=String(optional=True), prefix="--fake-phred", doc=InputDocumentation(doc="The PHRED score to assign to all output consensus\nbases.")), ToolInput(tag="in_no_check_ids", input_type=Boolean(optional=True), prefix="--no-check-ids", doc=InputDocumentation(doc="Pass --no-check-ids to correct.py and align-")), ToolInput(tag="in_threads", input_type=String(optional=True), prefix="--threads", doc=InputDocumentation(doc="baralign.sh -t. Default: the baralign.sh default.")), ToolInput(tag="in_filt_bases", input_type=String(optional=True), prefix="--filt-bases", doc=InputDocumentation(doc="trimmer.py --filt-bases. Default: N")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="trimmer.py --min-length. Default: 75")), ToolInput(tag="in_log_dir", input_type=Directory(optional=True), prefix="--log-dir", doc=InputDocumentation(doc="Write log output to files in this directory instead of\nto stderr.")), ToolInput(tag="in_no_validate", input_type=Boolean(optional=True), prefix="--no-validate", doc=InputDocumentation(doc="Skip validation checks on the outputs of individual")), ToolInput(tag="in_t", input_type=String(optional=True), prefix="-T", doc=InputDocumentation(doc="")), ToolInput(tag="in_reads_one_dot_fq", input_type=Int(), position=0, doc=InputDocumentation(doc="Input reads (mate 1). Can be gzipped.")), ToolInput(tag="in_reads_two_dot_fq", input_type=Int(), position=1, doc=InputDocumentation(doc="Input reads (mate 2). Can be gzipped.")), ToolInput(tag="in_families_do_tpy_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-p PROCESSES, --processes PROCESSES")), ToolInput(tag="in_scripts_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--version             Print the version number and exit."))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="The directory to create the output (and intermediate)\nfiles in. Must exist already and not already contain\nany of the output/intermediate files.")), ToolOutput(tag="out_suffix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_suffix", type_hint=File()), doc=OutputDocumentation(doc="A string to use in naming the output files. If given,\nwill be put just before the file extension (like\n'families.suffix.tsv').")), ToolOutput(tag="out_log_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_log_dir", type_hint=File()), doc=OutputDocumentation(doc="Write log output to files in this directory instead of\nto stderr."))], container="quay.io/biocontainers/dunovo:2.16--py39h38f01e4_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dunovo_Py_V0_1_0().translate("wdl")

