from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Float, Int, String

Stoatydive_Py_V0_1_0 = CommandToolBuilder(tool="StoatyDive.py", base_command=["StoatyDive.py"], inputs=[ToolInput(tag="in__inputbed_bedpath", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="*.bed, --input_bed *.bed\nPath to the peak file in bed6 format.")), ToolInput(tag="in__read_file", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="*.bam/*.bed, --input_bam *.bam/*.bed\nPath to the read file used for the peak calling in bed\nor bam format.")), ToolInput(tag="in__chrfile_txtpath", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="*.txt, --chr_file *.txt\nPath to the chromosome length file.")), ToolInput(tag="in__outputfolder_pathwrite", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="/, --output_folder path/\nWrite results to this path. [Default: Operating Path]")), ToolInput(tag="in_thresh", input_type=Float(optional=True), prefix="--thresh", doc=InputDocumentation(doc="Set a normalized CV threshold to divide the peak\nprofiles into more specific (0) and more unspecific\n(1). [Default: 1.0]")), ToolInput(tag="in_peak_correction", input_type=Boolean(optional=True), prefix="--peak_correction", doc=InputDocumentation(doc="Activate peak correction. The peaks are recentered\n(shifted) for the correct sumit.")), ToolInput(tag="in_max_translocate", input_type=Boolean(optional=True), prefix="--max_translocate", doc=InputDocumentation(doc="Set this flag if you want to shift the peak profiles\nbased on the maximum value inside the profile instead\nof a Gaussian blur translocation.")), ToolInput(tag="in_peak_length", input_type=Int(optional=True), prefix="--peak_length", doc=InputDocumentation(doc="Set maximum peak length for the constant peak length.")), ToolInput(tag="in_max_norm_value", input_type=Float(optional=True), prefix="--max_norm_value", doc=InputDocumentation(doc="Provide a maximum value for CV to make the normalized\nCV plot more comparable.")), ToolInput(tag="in_border_penalty", input_type=Boolean(optional=True), prefix="--border_penalty", doc=InputDocumentation(doc="Adds a penalty for non-centered peaks.")), ToolInput(tag="in_scale_max", input_type=Float(optional=True), prefix="--scale_max", doc=InputDocumentation(doc="Provide a maximum value for the CV plot.")), ToolInput(tag="in_max_cl", input_type=Int(optional=True), prefix="--maxcl", doc=InputDocumentation(doc="Maximal number of clusters of the kmeans clustering of\nthe peak profiles. The algorithm will be optimized,\ni.e., the parameter is just a constraint and not\nabsolute. [Default: 15]")), ToolInput(tag="in_num_cl", input_type=Int(optional=True), prefix="--numcl", doc=InputDocumentation(doc="You can forcefully set the number of cluster of peak")), ToolInput(tag="in_turn_off_classification", input_type=Boolean(optional=True), prefix="--turn_off_classification", doc=InputDocumentation(doc="Turn off the peak profile classification.\n")), ToolInput(tag="in_profiles_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--sm                  Turn on the peak profile smoothing for the peak")), ToolInput(tag="in_on_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--lam float           Parameter for the peak profile classification. Set"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Stoatydive_Py_V0_1_0().translate("wdl", allow_empty_container=True)

