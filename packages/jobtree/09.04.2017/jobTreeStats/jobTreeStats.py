from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, String, Int

Jobtreestats_V0_1_0 = CommandToolBuilder(tool="jobTreeStats", base_command=["jobTreeStats"], inputs=[ToolInput(tag="in_tempdir_root", input_type=File(optional=True), prefix="--tempDirRoot", doc=InputDocumentation(doc="Path to where temporary directory containing all temp\nfiles are created, by default uses the current working\ndirectory as the base.")), ToolInput(tag="in_job_tree", input_type=Directory(optional=True), prefix="--jobTree", doc=InputDocumentation(doc="Directory containing the job tree. Can also be\nspecified as the single argument to the script.\nDefault=./jobTree")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--outputFile", doc=InputDocumentation(doc="File in which to write results")), ToolInput(tag="in_raw", input_type=Boolean(optional=True), prefix="--raw", doc=InputDocumentation(doc="output the raw xml data.")), ToolInput(tag="in_pretty", input_type=Boolean(optional=True), prefix="--pretty", doc=InputDocumentation(doc="if not raw, prettify the numbers to be human readable.")), ToolInput(tag="in_categories", input_type=String(optional=True), prefix="--categories", doc=InputDocumentation(doc="comma separated list from [time, clock, wait, memory]")), ToolInput(tag="in_sort_category", input_type=String(optional=True), prefix="--sortCategory", doc=InputDocumentation(doc="how to sort Target list. may be from [alpha, time,\nclock, wait, memory, count]. default=%(default)s")), ToolInput(tag="in_sortfield", input_type=Int(optional=True), prefix="--sortField", doc=InputDocumentation(doc="how to sort Target list. may be from [min, med, ave,\nmax, total]. default=%(default)s")), ToolInput(tag="in_sort_reverse", input_type=Boolean(optional=True), prefix="--sortReverse", doc=InputDocumentation(doc="reverse sort order.")), ToolInput(tag="in_cache", input_type=Boolean(optional=True), prefix="--cache", doc=InputDocumentation(doc="stores a cache to speed up data display.")), ToolInput(tag="in_logoff", input_type=Boolean(optional=True), prefix="--logOff", doc=InputDocumentation(doc="Turn off logging. (default is CRITICAL)")), ToolInput(tag="in_loginfo", input_type=Boolean(optional=True), prefix="--logInfo", doc=InputDocumentation(doc="Turn on logging at INFO level. (default is CRITICAL)")), ToolInput(tag="in_log_debug", input_type=Boolean(optional=True), prefix="--logDebug", doc=InputDocumentation(doc="Turn on logging at DEBUG level. (default is CRITICAL)")), ToolInput(tag="in_loglevel", input_type=String(optional=True), prefix="--logLevel", doc=InputDocumentation(doc="Log at level (may be either OFF/INFO/DEBUG/CRITICAL).\n(default is CRITICAL)")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logFile", doc=InputDocumentation(doc="File to log in")), ToolInput(tag="in_rotating_logging", input_type=Boolean(optional=True), prefix="--rotatingLogging", doc=InputDocumentation(doc="Turn on rotating logging, which prevents log files\ngetting too big.\n")), ToolInput(tag="in_job_tree_dir", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File in which to write results"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Jobtreestats_V0_1_0().translate("wdl", allow_empty_container=True)

