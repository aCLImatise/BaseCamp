from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, Float, File, String

Tidehunter_V0_1_0 = CommandToolBuilder(tool="TideHunter", base_command=["TideHunter"], inputs=[ToolInput(tag="in_km_er_length", input_type=Int(optional=True), prefix="--kmer-length", doc=InputDocumentation(doc="k-mer length (no larger than 16) [8]")), ToolInput(tag="in_window_size", input_type=Int(optional=True), prefix="--window-size", doc=InputDocumentation(doc="window size [1]")), ToolInput(tag="in_step_size", input_type=Boolean(optional=True), prefix="--step-size", doc=InputDocumentation(doc="INT    step size [1]")), ToolInput(tag="in_hpc_km_er", input_type=Boolean(optional=True), prefix="--HPC-kmer", doc=InputDocumentation(doc="use homopolymer-compressed k-mer [False]")), ToolInput(tag="in_min_copy", input_type=Boolean(optional=True), prefix="--min-copy", doc=InputDocumentation(doc="INT    minimum copy number of tandem repeat [2]")), ToolInput(tag="in_max_diver_g", input_type=Boolean(optional=True), prefix="--max-diverg", doc=InputDocumentation(doc="INT    maximum allowed divergence rate between two consecutive repeats [0.25]")), ToolInput(tag="in_min_period", input_type=Boolean(optional=True), prefix="--min-period", doc=InputDocumentation(doc="INT    minimum period size of tandem repeat (>=2) [30]")), ToolInput(tag="in_max_period", input_type=Boolean(optional=True), prefix="--max-period", doc=InputDocumentation(doc="INT    maximum period size of tandem repeat (<=4294967295) [10K]")), ToolInput(tag="in_match", input_type=Boolean(optional=True), prefix="--match", doc=InputDocumentation(doc="INT       match score [2]")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="--mismatch", doc=InputDocumentation(doc="mismatch penalty [4]")), ToolInput(tag="in_gap_open", input_type=Int(optional=True), prefix="--gap-open", doc=InputDocumentation(doc="(,INT) gap opening penalty (O1,O2) [4,24]")), ToolInput(tag="in_gap_ext", input_type=Boolean(optional=True), prefix="--gap-ext", doc=InputDocumentation(doc="INT(,INT) gap extension penalty (E1,E2) [2,1]\nTideHunter provides three gap penalty modes, cost of a g-long gap:\n- convex (default): min{O1+g*E1, O2+g*E2}\n- affine (set O2 as 0): O1+g*E1\n- linear (set O1 as 0): g*E1")), ToolInput(tag="in_five_prime", input_type=Boolean(optional=True), prefix="--five-prime", doc=InputDocumentation(doc="STR    5' adapter sequence (sense strand) [NULL]")), ToolInput(tag="in_three_prime", input_type=Int(optional=True), prefix="--three-prime", doc=InputDocumentation(doc="3' adapter sequence (anti-sense strand) [NULL]")), ToolInput(tag="in_ada_mat_rat", input_type=Float(optional=True), prefix="--ada-mat-rat", doc=InputDocumentation(doc="minimum match ratio of adapter sequence [0.80]")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="STR    output file [stdout]")), ToolInput(tag="in_unit_seq", input_type=Boolean(optional=True), prefix="--unit-seq", doc=InputDocumentation(doc="only output the unit sequences of each tandem repeat, no consensus sequence [False]")), ToolInput(tag="in_longest", input_type=Boolean(optional=True), prefix="--longest", doc=InputDocumentation(doc="only output the consensus sequence of the tandem repeat that covers the longest read sequence [False]")), ToolInput(tag="in_full_len", input_type=Boolean(optional=True), prefix="--full-len", doc=InputDocumentation(doc="only output full-length consensus sequence [False]")), ToolInput(tag="in_out_fmt", input_type=Boolean(optional=True), prefix="--out-fmt", doc=InputDocumentation(doc="INT    output format [1]\n- 1: FASTA\n- 2: Tabular")), ToolInput(tag="in_thread", input_type=Boolean(optional=True), prefix="--thread", doc=InputDocumentation(doc="INT    number of threads to use [4]")), ToolInput(tag="in_in_dot_fa", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="STR    output file [stdout]"))], container="quay.io/biocontainers/tidehunter:1.4.3--h8b12597_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tidehunter_V0_1_0().translate("wdl")

