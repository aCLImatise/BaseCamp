from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, String

Carna_V0_1_0 = CommandToolBuilder(tool="carna", base_command=["carna"], inputs=[ToolInput(tag="in_match", input_type=Int(optional=True), prefix="--match", doc=InputDocumentation(doc="(50)\nMatch score")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="--mismatch", doc=InputDocumentation(doc="(0)\nMismatch score")), ToolInput(tag="in_ribo_sum_file", input_type=File(optional=True), prefix="--ribosum-file", doc=InputDocumentation(doc="(RIBOSUM85_60)\nRibosum file")), ToolInput(tag="in_use_ribo_sum", input_type=Boolean(optional=True), prefix="--use-ribosum", doc=InputDocumentation(doc="(true)\nUse ribosum scores")), ToolInput(tag="in_in_del", input_type=Int(optional=True), prefix="--indel", doc=InputDocumentation(doc="(-350)\nIndel score")), ToolInput(tag="in_in_del_opening", input_type=Int(optional=True), prefix="--indel-opening", doc=InputDocumentation(doc="(-500)\nIndel opening score")), ToolInput(tag="in_struct_weight", input_type=Int(optional=True), prefix="--struct-weight", doc=InputDocumentation(doc="(200)\nMaximal weight of 1/2 arc match")), ToolInput(tag="in_exp_prob", input_type=String(optional=True), prefix="--exp-prob", doc=InputDocumentation(doc="Expected probability")), ToolInput(tag="in_tau", input_type=Int(optional=True), prefix="--tau", doc=InputDocumentation(doc="(0)\nTau factor in percent")), ToolInput(tag="in_gist", input_type=Boolean(optional=True), prefix="--gist", doc=InputDocumentation(doc="Use gist for graphical search (feature disabled, recompile to activate).")), ToolInput(tag="in_width", input_type=Int(optional=True), prefix="--width", doc=InputDocumentation(doc="(120)\nOutput width")), ToolInput(tag="in_clustal", input_type=File(optional=True), prefix="--clustal", doc=InputDocumentation(doc="Clustal output")), ToolInput(tag="in_pp", input_type=File(optional=True), prefix="--pp", doc=InputDocumentation(doc="PP output")), ToolInput(tag="in_write_structure", input_type=Boolean(optional=True), prefix="--write-structure", doc=InputDocumentation(doc="Write guidance structure in output")), ToolInput(tag="in_min_prob", input_type=Int(optional=True), prefix="--min-prob", doc=InputDocumentation(doc="(0.01)\nMinimal probability")), ToolInput(tag="in_max_bps_length_ratio", input_type=Int(optional=True), prefix="--max-bps-length-ratio", doc=InputDocumentation(doc="(0.0)\nMaximal ratio of #base pairs divided by sequence length (default: no\neffect)")), ToolInput(tag="in_max_diff_am", input_type=Int(optional=True), prefix="--max-diff-am", doc=InputDocumentation(doc="(-1)\nMaximal difference for sizes of matched arcs")), ToolInput(tag="in_max_diff", input_type=Int(optional=True), prefix="--max-diff", doc=InputDocumentation(doc="(-1)\nMaximal difference for alignment cuts")), ToolInput(tag="in_max_diff_at_am", input_type=Int(optional=True), prefix="--max-diff-at-am", doc=InputDocumentation(doc="(-1)\nMaximal difference for alignment traces, only at arc match positions")), ToolInput(tag="in_no_lp", input_type=Boolean(optional=True), prefix="--noLP", doc=InputDocumentation(doc="No lonely pairs (only used when predicing ensemble porobabilities and for\ncompatibility with locarna; otherwise no effect)")), ToolInput(tag="in_max_bp_span", input_type=Int(optional=True), prefix="--maxBPspan", doc=InputDocumentation(doc="(-1)\nLimit maximum base pair span (default=off)")), ToolInput(tag="in_relaxed_anchors", input_type=Boolean(optional=True), prefix="--relaxed-anchors", doc=InputDocumentation(doc="Relax anchor constraints (default=off)")), ToolInput(tag="in_ignore_constraints", input_type=Boolean(optional=True), prefix="--ignore-constraints", doc=InputDocumentation(doc="Ignore constraints in pp-file")), ToolInput(tag="in_lb", input_type=String(optional=True), prefix="--lb", doc=InputDocumentation(doc="Lower score bound")), ToolInput(tag="in_ub", input_type=String(optional=True), prefix="--ub", doc=InputDocumentation(doc="Upper score bound")), ToolInput(tag="in_c_d", input_type=Int(optional=True), prefix="--c_d", doc=InputDocumentation(doc="(1)\nRecomputation distance")), ToolInput(tag="in_time_limit", input_type=Int(optional=True), prefix="--time-limit", doc=InputDocumentation(doc="(300000)\nTime limit in ms (always search first solution; turn off by 0).")), ToolInput(tag="in_verbose", input_type=String(), position=0, doc=InputDocumentation(doc="RNA sequences and pair probabilities:"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Carna_V0_1_0().translate("wdl", allow_empty_container=True)

