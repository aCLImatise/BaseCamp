from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int

Trimfilterpe_V0_1_0 = CommandToolBuilder(tool="trimFilterPE", base_command=["trimFilterPE"], inputs=[ToolInput(tag="in_if_q", input_type=Boolean(optional=True), prefix="--ifq", doc=InputDocumentation(doc="2 fastq input files [*fq|*fq.gz|*fq.bz2] separated by\ncolons, mandatory option.")), ToolInput(tag="in_length", input_type=Boolean(optional=True), prefix="--length", doc=InputDocumentation(doc="read length: length of the reads, mandatory option.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output prefix (with path), optional (default ./out).")), ToolInput(tag="in_gzip", input_type=Boolean(optional=True), prefix="--gzip", doc=InputDocumentation(doc="gzip output files: yes or no (default yes)")), ToolInput(tag="in_adapter", input_type=File(optional=True), prefix="--adapter", doc=InputDocumentation(doc="input. Four fields separated by colons:\n<AD1.fa>: fasta file containing adapters,\n<AD2.fa>: fasta file containing adapters,\n<mismatches>: maximum mismatch count allowed,\n<score>: score threshold  for the aligner.")), ToolInput(tag="in_idx", input_type=Boolean(optional=True), prefix="--idx", doc=InputDocumentation(doc="index input file. To be included with any methods to remove.\ncontaminations (TREE, BLOOM). 3 fields separated by colons:\n<INDEX_FILE>: output of makeTree, makeBloom,\n<score>: score threshold to accept a match [0,1],\n[lmer_len]: the length of the lmers to be\nlooked for in the reads [1,READ_LENGTH].")), ToolInput(tag="in_if_a", input_type=Boolean(optional=True), prefix="--ifa", doc=InputDocumentation(doc="fasta input file of potential contaminations.\nTo be included only with method TREE\n(it excludes the option --idx). Otherwise, an\nindex file has to be precomputed and given as parameter\n(see option --idx). 3 fields separated by colons:\n<INPUT.fa>: fasta input file [*fa|*fa.gz|*fa.bz2],\n<score>: score threshold to accept a match [0,1],\n<lmer_len>: depth of the tree: [1,READ_LENGTH].\nCorresponds to the length of the lmers to be\nlooked for in the reads.")), ToolInput(tag="in_method", input_type=Boolean(optional=True), prefix="--method", doc=InputDocumentation(doc="method used to look for contaminations:\nTREE:  uses a 4-ary tree. Index file optional,\nBLOOM: uses a bloom filter. Index file mandatory.")), ToolInput(tag="in_trim_q", input_type=Boolean(optional=True), prefix="--trimQ", doc=InputDocumentation(doc="NO:       does nothing to low quality reads (default),\nALL:      removes all reads containing at least one low\nquality nucleotide.\nENDS:     trims the ends of the read if their quality is\nbelow the threshold -q,\nFRAC:     discards a read if the fraction of bases with\nlow quality scores (below -q) is over 5 percent\nor a user defined percentage (-p).\nENDSFRAC: trims the ends and then discards the read if\nthere are more low quality nucleotides than\nallowed by the option -p.\nGLOBAL:   removes n1 cycles on the left and n2 on the\nright, specified in -g.\nAll reads are discarded if they are shorter than MINL\n(specified with -m or --minL).")), ToolInput(tag="in_min_l", input_type=Boolean(optional=True), prefix="--minL", doc=InputDocumentation(doc="minimum length allowed for a read before it is discarded\n(default 25).")), ToolInput(tag="in_min_q", input_type=Boolean(optional=True), prefix="--minQ", doc=InputDocumentation(doc="minimum quality allowed (int), optional (default 27).")), ToolInput(tag="in_zero_q", input_type=Boolean(optional=True), prefix="--zeroQ", doc=InputDocumentation(doc="value of ASCII character representing zero quality (int), optional (default 33)")), ToolInput(tag="in_percent", input_type=Int(optional=True), prefix="--percent", doc=InputDocumentation(doc="of low quality bases tolerated before\ndiscarding a read (default 5),")), ToolInput(tag="in_global", input_type=Boolean(optional=True), prefix="--global", doc=InputDocumentation(doc="required option if --trimQ GLOBAL is passed. Two int,\nn1:n2, have to be passed specifying the number of bases\nto be globally cut from the left and right, respectively.")), ToolInput(tag="in_trim_n", input_type=Boolean(optional=True), prefix="--trimN", doc=InputDocumentation(doc="NO:     does nothing to reads containing N's,\nALL:    removes all reads containing N's,\nENDS:   trims ends of reads with N's,\nSTRIPS: looks for the largest substring with no N's.\nAll reads are discarded if they are shorter than the\nsequence length specified by -m/--minL.\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output prefix (with path), optional (default ./out)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Trimfilterpe_V0_1_0().translate("wdl", allow_empty_container=True)

