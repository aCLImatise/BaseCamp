from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Sccaller_V0_1_0 = CommandToolBuilder(tool="sccaller", base_command=["sccaller"], inputs=[ToolInput(tag="in_bam", input_type=Boolean(optional=True), prefix="--bam", doc=InputDocumentation(doc=":      bamfile of a single cell")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc=":    fasta file of reference genome")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc=":   output file name")), ToolInput(tag="in_snp_in", input_type=Boolean(optional=True), prefix="--snp_in", doc=InputDocumentation(doc=":   Candidate snp input file, either from dbsnp data or heterozygous snp (hsnp) data of the bulk, for known heterogous call. file type: bed (1-based) or vcf.")), ToolInput(tag="in_snp_type", input_type=Boolean(optional=True), prefix="--snp_type", doc=InputDocumentation(doc=": SNP type for --snp_in. It could be either 'dbsnp' or 'hsnp'. When choosing dbsnp, --bulk bulk_bamfile is required.")), ToolInput(tag="in_rd", input_type=Boolean(optional=True), prefix="--RD", doc=InputDocumentation(doc=":           min. read depth of known heterogous SNP called from bulk when choosing -t dbsnp. Default: 20. Recommand: 10,15,20, depending on average read depth")), ToolInput(tag="in_bias", input_type=Boolean(optional=True), prefix="--bias", doc=InputDocumentation(doc=":         default theta (bias) for SNVs whose theta cannot be estimated. Default=0.75")), ToolInput(tag="in_bulk", input_type=Boolean(optional=True), prefix="--bulk", doc=InputDocumentation(doc=":         bamfile of bulk DNA sequencing")), ToolInput(tag="in_bulk_min_depth", input_type=Boolean(optional=True), prefix="--bulk_min_depth", doc=InputDocumentation(doc=":min. reads for bulk. Default: 20")), ToolInput(tag="in_bulk_min_mapq", input_type=Boolean(optional=True), prefix="--bulk_min_mapq", doc=InputDocumentation(doc=":min. mapQ for bulk. Default: 20")), ToolInput(tag="in_bulk_min_var", input_type=Boolean(optional=True), prefix="--bulk_min_var", doc=InputDocumentation(doc=": min. num. variant supporting reads for bulk. Default: 1")), ToolInput(tag="in_format", input_type=File(optional=True), prefix="--format", doc=InputDocumentation(doc=":       output file format. bed or vcf. Default: vcf")), ToolInput(tag="in_head", input_type=Boolean(optional=True), prefix="--head", doc=InputDocumentation(doc=":         first chromosome as sorted as in fasta file to analyze (1-based). Default: the first chr. in the fasta")), ToolInput(tag="in_mapq", input_type=Boolean(optional=True), prefix="--mapq", doc=InputDocumentation(doc=":         min. mapQ. Default: 40")), ToolInput(tag="in_min_depth", input_type=Boolean(optional=True), prefix="--min_depth", doc=InputDocumentation(doc=":    min. reads. Default: 10")), ToolInput(tag="in_min_var", input_type=Boolean(optional=True), prefix="--minvar", doc=InputDocumentation(doc=":       min. num. variant supporting reads. Default: 4")), ToolInput(tag="in_null", input_type=Boolean(optional=True), prefix="--null", doc=InputDocumentation(doc=":         min. allelic fraction considered. Default=0.03")), ToolInput(tag="in_tail", input_type=Boolean(optional=True), prefix="--tail", doc=InputDocumentation(doc=":         last chromosome as sorted as in fasta file to analyze (1-based). Default: the last chr. in the fasta")), ToolInput(tag="in_wk_dir", input_type=Boolean(optional=True), prefix="--wkdir", doc=InputDocumentation(doc=":    work dir. Default: ./")), ToolInput(tag="in_engine", input_type=Boolean(optional=True), prefix="--engine", doc=InputDocumentation(doc=":   pileup engine. samtools or pysam. Default: pysam")), ToolInput(tag="in_lamb", input_type=Boolean(optional=True), prefix="--lamb", doc=InputDocumentation(doc=":     lambda for bias estimation. Default=10000")), ToolInput(tag="in_cpu_num", input_type=Boolean(optional=True), prefix="--cpu_num", doc=InputDocumentation(doc=":  num. processes. Default: 1")), ToolInput(tag="in_work_num", input_type=Boolean(optional=True), prefix="--work_num", doc=InputDocumentation(doc=": num. splits per chromosome for multi-process computing. Default: 100"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc=":   output file name")), ToolOutput(tag="out_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_format", type_hint=File()), doc=OutputDocumentation(doc=":       output file format. bed or vcf. Default: vcf"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sccaller_V0_1_0().translate("wdl", allow_empty_container=True)

