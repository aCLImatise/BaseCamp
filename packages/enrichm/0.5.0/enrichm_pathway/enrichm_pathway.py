from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Directory, Boolean, Array

Enrichm_Pathway_V0_1_0 = CommandToolBuilder(tool="enrichm_pathway", base_command=["enrichm", "pathway"], inputs=[ToolInput(tag="in_matrix", input_type=String(optional=True), prefix="--matrix", doc=InputDocumentation(doc="KO matrix. REQUIRED.")), ToolInput(tag="in_genome_metadata", input_type=File(optional=True), prefix="--genome_metadata", doc=InputDocumentation(doc="Metadata file with two columns, the first with the genome name, the second with the groupings to compare.")), ToolInput(tag="in_abundance", input_type=String(optional=True), prefix="--abundance", doc=InputDocumentation(doc="Abundance matrix.")), ToolInput(tag="in_abundance_metadata", input_type=File(optional=True), prefix="--abundance_metadata", doc=InputDocumentation(doc="Metadata file with two columns, the first with the genome name, the second with the groupings to compare.")), ToolInput(tag="in_tpm_values", input_type=String(optional=True), prefix="--tpm_values", doc=InputDocumentation(doc="TPM values produced by DetectM.")), ToolInput(tag="in_tpm_metadata", input_type=File(optional=True), prefix="--tpm_metadata", doc=InputDocumentation(doc="Metadata file with two columns, the first with the genome name, the second with the groupings to compare.")), ToolInput(tag="in_metabo_lome", input_type=String(optional=True), prefix="--metabolome", doc=InputDocumentation(doc="Metabolome CID matrix.")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="Output logging information to this file.")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of verbosity (1 - 5 - default = 4) 5 = Very verbose, 1 = Silent")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite previous run")), ToolInput(tag="in_limit", input_type=Array(t=String(), optional=True), prefix="--limit", doc=InputDocumentation(doc="USE ONLY these reactions, or reactions within this pathway or module (space separated list).")), ToolInput(tag="in_filter", input_type=Array(t=String(), optional=True), prefix="--filter", doc=InputDocumentation(doc="Do not use these reactions, or reactions within this pathway or module (space separated list).")), ToolInput(tag="in_enrichment_output", input_type=String(optional=True), prefix="--enrichment_output", doc=InputDocumentation(doc="Supply an enrichment output to integrate the results into the output network.\n"))], outputs=[ToolOutput(tag="out_log", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log", type_hint=File()), doc=OutputDocumentation(doc="Output logging information to this file.")), ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Enrichm_Pathway_V0_1_0().translate("wdl", allow_empty_container=True)

