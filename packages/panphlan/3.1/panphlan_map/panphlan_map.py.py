from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, File, Boolean

Panphlan_Map_Py_V0_1_0 = CommandToolBuilder(tool="panphlan_map.py", base_command=["panphlan_map.py"], inputs=[ToolInput(tag="in_tmp", input_type=String(optional=True), prefix="--tmp", doc=InputDocumentation(doc="Location used for tmp files")), ToolInput(tag="in_bt_two", input_type=Int(optional=True), prefix="--bt2", doc=InputDocumentation(doc="Additional bowtie2 mapping options, separated by\nslash: /-D/20/-R/3/, default: -bt2 /--very-sensitive/")), ToolInput(tag="in_out_bam", input_type=File(optional=True), prefix="--out_bam", doc=InputDocumentation(doc="Get BAM output file")), ToolInput(tag="in_nproc", input_type=Int(optional=True), prefix="--nproc", doc=InputDocumentation(doc="Maximum number of processors to use. Default is 12 or\na lower number of available processors.")), ToolInput(tag="in_min_read_length", input_type=Int(optional=True), prefix="--min_read_length", doc=InputDocumentation(doc="Minimum read length, default 70")), ToolInput(tag="in_th_mismatches", input_type=Int(optional=True), prefix="--th_mismatches", doc=InputDocumentation(doc="Number of mismatches to filter (bam)")), ToolInput(tag="in_sam_memory", input_type=Int(optional=True), prefix="--sam_memory", doc=InputDocumentation(doc="Maximum amount of memory for Samtools (in Gb). Default\n4")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Read are fasta format. By default considered as fastq")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Show progress information")), ToolInput(tag="in_input", input_type=String(optional=True), prefix="--input", doc=InputDocumentation(doc="Metagenomic sample to map")), ToolInput(tag="in_indexes", input_type=File(optional=True), prefix="--indexes", doc=InputDocumentation(doc="Bowtie2 indexes path and file prefix")), ToolInput(tag="in_pan_genome", input_type=File(optional=True), prefix="--pangenome", doc=InputDocumentation(doc="Path to pangenome tsv file exported from ChocoPhlAn")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Path to output file\n"))], outputs=[ToolOutput(tag="out_out_bam", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_bam", type_hint=File()), doc=OutputDocumentation(doc="Get BAM output file")), ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Path to output file\n"))], container="quay.io/biocontainers/panphlan:3.1--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Panphlan_Map_Py_V0_1_0().translate("wdl")

