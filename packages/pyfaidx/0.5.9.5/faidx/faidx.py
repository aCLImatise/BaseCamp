from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Faidx_V0_1_0 = CommandToolBuilder(tool="faidx", base_command=["faidx"], inputs=[ToolInput(tag="in_no_rebuild", input_type=Boolean(optional=True), prefix="--no-rebuild", doc=InputDocumentation(doc="do not rebuild the .fai index even if it is out of\ndate. default: False")), ToolInput(tag="in_bed", input_type=File(optional=True), prefix="--bed", doc=InputDocumentation(doc="bed file of regions")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="output file name (default: stdout)")), ToolInput(tag="in_transform", input_type=String(optional=True), prefix="--transform", doc=InputDocumentation(doc="transform the requested regions into another format.\ndefault: None")), ToolInput(tag="in_complement", input_type=Boolean(optional=True), prefix="--complement", doc=InputDocumentation(doc="complement the sequence. default: False")), ToolInput(tag="in_reverse", input_type=Boolean(optional=True), prefix="--reverse", doc=InputDocumentation(doc="reverse the sequence. default: False")), ToolInput(tag="in_auto_strand", input_type=Boolean(optional=True), prefix="--auto-strand", doc=InputDocumentation(doc="reverse complement the sequence when start > end\ncoordinate. default: False")), ToolInput(tag="in_size_range", input_type=Int(optional=True), prefix="--size-range", doc=InputDocumentation(doc="selected sequences are in the size range [low, high].\nexample: 1,1000 default: None")), ToolInput(tag="in_split_files", input_type=Boolean(optional=True), prefix="--split-files", doc=InputDocumentation(doc="write each region to a separate file (names are\nderived from regions)")), ToolInput(tag="in_lazy", input_type=Boolean(optional=True), prefix="--lazy", doc=InputDocumentation(doc="fill in --default-seq for missing ranges. default:")), ToolInput(tag="in_mask_with_default_seq", input_type=Boolean(optional=True), prefix="--mask-with-default-seq", doc=InputDocumentation(doc="mask the FASTA file using --default-seq default: False")), ToolInput(tag="in_mask_by_case", input_type=Boolean(optional=True), prefix="--mask-by-case", doc=InputDocumentation(doc="mask the FASTA file by changing to lowercase. default:")), ToolInput(tag="in_no_names", input_type=Boolean(optional=True), prefix="--no-names", doc=InputDocumentation(doc="omit sequence names from output. default: False")), ToolInput(tag="in_long_names", input_type=Boolean(optional=True), prefix="--long-names", doc=InputDocumentation(doc="output full (long) names from the input fasta headers.\ndefault: headers are truncated after the first\nwhitespace")), ToolInput(tag="in_no_coords", input_type=Boolean(optional=True), prefix="--no-coords", doc=InputDocumentation(doc="omit coordinates (e.g. chr:start-end) from output\nheaders. default: False")), ToolInput(tag="in_delimiter", input_type=String(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="delimiter for splitting names to multiple values\n(duplicate names will be discarded). default: None")), ToolInput(tag="in_header_function", input_type=Int(optional=True), prefix="--header-function", doc=InputDocumentation(doc="python function to modify header lines e.g: 'lambda x:\nx.split('|')[0]'. default: lambda x: x.split()[0]")), ToolInput(tag="in_duplicates_action", input_type=String(optional=True), prefix="--duplicates-action", doc=InputDocumentation(doc="entry to take when duplicate sequence names are\nencountered. default: stop")), ToolInput(tag="in_regex", input_type=String(optional=True), prefix="--regex", doc=InputDocumentation(doc="selected sequences are those matching regular\nexpression. default: .*")), ToolInput(tag="in_invert_match", input_type=Boolean(optional=True), prefix="--invert-match", doc=InputDocumentation(doc="selected sequences are those not matching 'regions'\nargument. default: False")), ToolInput(tag="in_fast_a", input_type=String(), position=0, doc=InputDocumentation(doc="FASTA file")), ToolInput(tag="in_regions", input_type=String(), position=1, doc=InputDocumentation(doc="space separated regions of sequence to fetch e.g.\nchr1:1-1000"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="output file name (default: stdout)"))], container="quay.io/biocontainers/pyfaidx:0.5.9.5--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Faidx_V0_1_0().translate("wdl")

