!Command
command:
- _showseq
positional:
- !Positional
  description: -[no]ambiguity      boolean    [Y] This allows those enzymes which
    have one
  position: 0
  name: considered.
  optional: false
- !Positional
  description: -orfminsize         integer    [0] This sets the minimum size of Open
  position: 0
  name: them.
  optional: false
named:
- !Flag
  description: "menu       [2] Display format (Values: 0 (Enter your\nown list of\
    \ things to display); 1 (Sequence\nonly); 2 (Default sequence with features);\
    \ 3\n(Pretty sequence); 4 (One frame\ntranslation); 5 (Three frame translations);\n\
    6 (Six frame translations); 7 (Restriction\nenzyme map); 8 (Baroque))"
  synonyms:
  - -format
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (CompFrame3 translation); T (Ticks line);
  synonyms:
  - '-3'
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "range      [If this is left blank the complete sequence\nis translated.]\
    \ Regions to translate (if\ntranslating).\nIf this is left blank the complete\
    \ sequence\nis translated.\nA set of regions is specified by a set of\npairs of\
    \ positions.\nThe positions are integers.\nThey are separated by any non-digit,\n\
    non-alpha character.\nExamples of region specifications are:\n24-45, 56-78\n1:45,\
    \ 67=99;765..888"
  synonyms:
  - -translate
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "range      [If this is left blank the complete reverse\nsequence is\
    \ translated.] Regions to\ntranslate (if translating).\nIf this is left blank\
    \ the complete sequence\nis translated.\nA set of regions is specified by a set\
    \ of\npairs of positions.\nThe positions are integers.\nThey are separated by\
    \ any non-digit,\nnon-alpha character.\nExamples of region specifications are:\n\
    78-56, 45-24,\n888..765, 99=67; 45:1"
  synonyms:
  - -revtranslate
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "range      [If this is left blank, then the sequence\ncase is left\
    \ alone.] Regions to put in\nuppercase.\nIf this is left blank, then the sequence\n\
    case is left alone.\nA set of regions is specified by a set of\npairs of positions.\n\
    The positions are integers.\nThey are separated by any non-digit,\nnon-alpha character.\n\
    Examples of region specifications are:\n24-45, 56-78\n1:45, 67=99;765..888\n1,5,8,10,23,45,57,99"
  synonyms:
  - -uppercase
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "range      [(full sequence)] Regions to colour if\nformatting for\
    \ HTML.\nIf this is left blank, then the sequence is\nleft alone.\nA set of regions\
    \ is specified by a set of\npairs of positions.\nThe positions are integers.\n\
    They are followed by any valid HTML font\ncolour.\nExamples of region specifications\
    \ are:\n24-45 blue 56-78 orange\n1-100 green 120-156 red\nA file of ranges to\
    \ colour (one range per\nline) can be specified as '@filename'."
  synonyms:
  - -highlight
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "range      [If this is left blank, then no annotation\nis added.]\
    \ Regions to annotate by marking.\nIf this is left blank, then no annotation is\n\
    added.\nA set of regions is specified by a set of\npairs of positions followed\
    \ by optional\ntext.\nThe positions are integers.\nThey are followed by any text\
    \ (but not\ndigits when on the command-line).\nExamples of region specifications\
    \ are:\n24-45 new domain 56-78 match to Mouse\n1-100 First part 120-156 oligo\n\
    A file of ranges to annotate (one range per\nline) can be specified as '@filename'."
  synonyms:
  - -annotation
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "string     [all] The name 'all' reads in all enzyme\nnames from the\
    \ REBASE database. You can\nspecify enzymes by giving their names with\ncommas\
    \ between then, such as:\n'HincII,hinfI,ppiI,hindiii'.\nThe case of the names\
    \ is not important. You\ncan specify a file of enzyme names to read\nin by giving\
    \ the name of the file holding\nthe enzyme names with a '@' character in\nfront\
    \ of it, for example, '@enz.list'.\nBlank lines and lines starting with a hash\n\
    character or '!' are ignored and all other\nlines are concatenated together with\
    \ a comma\ncharacter ',' and then treated as the list\nof enzymes to search for.\n\
    An example of a file of enzyme names is:\n! my enzymes\nHincII, ppiII\n! other\
    \ enzymes\nhindiii\nHinfI\nPpiI (Any string)"
  synonyms:
  - -enzymes
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "menu       [0] Genetic code to use (Values: 0\n(Standard); 1 (Standard\
    \ (with alternative\ninitiation codons)); 2 (Vertebrate\nMitochondrial); 3 (Yeast\
    \ Mitochondrial); 4\n(Mold, Protozoan, Coelenterate Mitochondrial\nand Mycoplasma/Spiroplasma);\
    \ 5\n(Invertebrate Mitochondrial); 6 (Ciliate\nMacronuclear and Dasycladacean);\
    \ 9\n(Echinoderm Mitochondrial); 10 (Euplotid\nNuclear); 11 (Bacterial); 12 (Alternative\n\
    Yeast Nuclear); 13 (Ascidian Mitochondrial);\n14 (Flatworm Mitochondrial); 15\n\
    (Blepharisma Macronuclear); 16\n(Chlorophycean Mitochondrial); 21 (Trematode\n\
    Mitochondrial); 22 (Scenedesmus obliquus);\n23 (Thraustochytrium Mitochondrial))"
  synonyms:
  - -table
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "string     [*] By default any feature source in the\nfeature table\
    \ is shown. You can set this to\nmatch any feature source you wish to show.\n\
    The source name is usually either the name\nof the program that detected the feature\
    \ or\nit is the feature table (eg: EMBL) that the\nfeature came from.\nThe source\
    \ may be wildcarded by using '*'.\nIf you wish to show more than one source,\n\
    separate their names with the character '|',\neg:\ngene* | embl (Any string)"
  synonyms:
  - -sourcematch
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "string     [*] By default any feature type in the\nfeature table is\
    \ shown. You can set this to\nmatch any feature type you wish to show.\nSee http://www.ebi.ac.uk/embl/WebFeat/\
    \ for a\nlist of the EMBL feature types and see\nAppendix A of the Swissprot user\
    \ manual in\nhttp://www.expasy.org/sprot/userman.html for\na list of the Swissprot\
    \ feature types.\nThe type may be wildcarded by using '*'.\nIf you wish to show\
    \ more than one type,\nseparate their names with the character '|',\neg:\n*UTR\
    \ | intron (Any string)"
  synonyms:
  - -typematch
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "integer    [0 - any sense, 1 - forward sense, -1 -\nreverse sense]\
    \ By default any feature type\nin the feature table is shown. You can set\nthis\
    \ to match any feature sense you wish to\nshow. 0 - any sense, 1 - forward sense,\
    \ -1 -\nreverse sense (Integer from -1 to 1)"
  synonyms:
  - -sensematch
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "float      [0.0] Minimum score of feature to display\n(see also maxscore)\
    \ (Any numeric value)"
  synonyms:
  - -minscore
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "float      [0.0] Maximum score of feature to display.\nIf both minscore\
    \ and maxscore are zero (the\ndefault), then any score is ignored (Any\nnumeric\
    \ value)"
  synonyms:
  - -maxscore
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "string     [*] Tags are the types of extra values that\na feature\
    \ may have. For example in the EMBL\nfeature table, a 'CDS' type of feature may\n\
    have the tags '/codon', '/codon_start',\n'/db_xref', '/EC_number', '/evidence',\n\
    '/exception', '/function', '/gene',\n'/label', '/map', '/note', '/number',\n'/partial',\
    \ '/product', '/protein_id',\n'/pseudo', '/standard_name', '/translation',\n'/transl_except',\
    \ '/transl_table', or\n'/usedin'. Some of these tags also have\nvalues, for example\
    \ '/gene' can have the\nvalue of the gene name.\nBy default any feature tag in\
    \ the feature\ntable is shown. You can set this to match\nany feature tag you\
    \ wish to show.\nThe tag may be wildcarded by using '*'.\nIf you wish to show\
    \ more than one tag,\nseparate their names with the character '|',\neg:\ngene\
    \ | label (Any string)"
  synonyms:
  - -tagmatch
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "string     [*] Tag values are the values associated\nwith a feature\
    \ tag. Tags are the types of\nextra values that a feature may have. For\nexample\
    \ in the EMBL feature table, a 'CDS'\ntype of feature may have the tags '/codon',\n\
    '/codon_start', '/db_xref', '/EC_number',\n'/evidence', '/exception', '/function',\n\
    '/gene', '/label', '/map', '/note',\n'/number', '/partial', '/product',\n'/protein_id',\
    \ '/pseudo', '/standard_name',\n'/translation', '/transl_except',\n'/transl_table',\
    \ or '/usedin'. Only some of\nthese tags can have values, for example\n'/gene'\
    \ can have the value of the gene name.\nBy default any feature tag value in the\n\
    feature table is shown. You can set this to\nmatch any feature tag value you wish\
    \ to\nshow.\nThe tag value may be wildcarded by using\n'*'.\nIf you wish to show\
    \ more than one tag value,\nseparate their names with the character\n'|', eg:\n\
    pax* | 10 (Any string)"
  synonyms:
  - -valuematch
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "boolean    [N] By default if any tag/value pair in a\nfeature matches\
    \ the specified tag and value,\nthen all the tags/value pairs of that\nfeature\
    \ will be displayed. If this is set to\nbe true, then only those tag/value pairs\
    \ in\na feature that match the specified tag and\nvalue will be displayed."
  synonyms:
  - -stricttags
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "datafile   [Emethylsites.dat] Restriction enzyme\nmethylation data\
    \ file"
  synonyms:
  - -mfile
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "boolean    [N] This changes the output format to one\nwhere the recognition\
    \ site is indicated by a\nrow of '===' characters and the cut site is\npointed\
    \ to by a '>' character in the\nforward sense, or a '<' in the reverse sense\n\
    strand."
  synonyms:
  - -flatreformat
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "integer    [1] This sets the minimum number of cuts for\nany restriction\
    \ enzyme that will be\nconsidered. Any enzymes that cut fewer times\nthan this\
    \ will be ignored. (Integer from 1\nto 1000)"
  synonyms:
  - -mincuts
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "integer    [2000000000] This sets the maximum number of\ncuts for\
    \ any restriction enzyme that will\nbe considered. Any enzymes that cut more\n\
    times than this will be ignored. (Any\ninteger value)"
  synonyms:
  - -maxcuts
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "integer    [4] This sets the minimum length of the\nrestriction enzyme\
    \ recognition site. Any\nenzymes with sites shorter than this will be\nignored.\
    \ (Integer from 2 to 20)"
  synonyms:
  - -sitelen
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "boolean    [N] If this is set then this forces the\nvalues of the\
    \ mincuts and maxcuts qualifiers\nto both be 1. Any other value you may have\n\
    set them to will be ignored."
  synonyms:
  - -single
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "boolean    [N] If this is set then this allows searches\nfor restriction\
    \ enzyme recognition site and\ncut positions that span the end of the\nsequence\
    \ to be considered."
  synonyms:
  - -plasmid
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "boolean    [N] If this is set then RE recognition sites\nwill not\
    \ match methylated bases."
  synonyms:
  - -methylation
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "boolean    [N] Display protein sequences in\nthree-letter code"
  synonyms:
  - -threeletter
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: boolean    [N] Number the sequences
  synonyms:
  - -number
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "integer    [60] Width of sequence to display (Integer 1\nor more)"
  synonyms:
  - -width
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "integer    [0] Line length of page (0 for indefinite)\n(Integer 0\
    \ or more)"
  synonyms:
  - -length
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "integer    [10] Margin around sequence for numbering\n(Integer 0 or\
    \ more)"
  synonyms:
  - -margin
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "integer    [1] Offset to start numbering the sequence\nfrom (Any integer\
    \ value)"
  synonyms:
  - -offset
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: boolean    [N] Use HTML formatting
  synonyms:
  - -html
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: "boolean    Report command line options and exit. More\ninformation\
    \ on associated and general\nqualifiers can be found with -help -verbose\n"
  synonyms:
  - -help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "Display sequences with features in pretty format\nVersion: EMBOSS:6.6.0.0\n\
  \n   Standard (Mandatory) qualifiers (* if not always prompted):\n  [-sequence]\
  \          seqall     (Gapped) nucleotide sequence(s) filename and\n           \
  \                       optional format, or reference (input USA)\n   -format  \
  \           menu       [2] Display format (Values: 0 (Enter your\n             \
  \                     own list of things to display); 1 (Sequence\n            \
  \                      only); 2 (Default sequence with features); 3\n          \
  \                        (Pretty sequence); 4 (One frame\n                     \
  \             translation); 5 (Three frame translations);\n                    \
  \              6 (Six frame translations); 7 (Restriction\n                    \
  \              enzyme map); 8 (Baroque))\n*  -things             menu       [B,N,T,S,A,F]\
  \ Specify a list of one or more\n                                  code characters\
  \ in the order in which you\n                                  wish things to be\
  \ displayed one above the\n                                  other down the page.\
  \ For example if you wish\n                                  to see things displayed\
  \ in the order:\n                                  sequence, complement sequence,\
  \ ticks line,\n                                  frame 1 translation, blank line;\
  \ then you\n                                  should enter 'S,C,T,1,B'. (Values:\
  \ S\n                                  (Sequence); B (Blank line); 1 (Frame1\n \
  \                                 translation); 2 (Frame2 translation); 3\n    \
  \                              (Frame3 translation); -1 (CompFrame1\n          \
  \                        translation); -2 (CompFrame2 translation);\n          \
  \                        -3 (CompFrame3 translation); T (Ticks line);\n        \
  \                          N (Number ticks line); C (Complement\n              \
  \                    sequence); F (Features); R (Restriction\n                 \
  \                 enzyme cut sites in forward sense); -R\n                     \
  \             (Restriction enzyme cut sites in reverse\n                       \
  \           sense); A (Annotation))\n  [-outfile]           outfile    [*.showseq]\
  \ Output file name\n\n   Additional (Optional) qualifiers:\n   -translate      \
  \    range      [If this is left blank the complete sequence\n                 \
  \                 is translated.] Regions to translate (if\n                   \
  \               translating).\n                                  If this is left\
  \ blank the complete sequence\n                                  is translated.\n\
  \                                  A set of regions is specified by a set of\n \
  \                                 pairs of positions.\n                        \
  \          The positions are integers.\n                                  They are\
  \ separated by any non-digit,\n                                  non-alpha character.\n\
  \                                  Examples of region specifications are:\n    \
  \                              24-45, 56-78\n                                  1:45,\
  \ 67=99;765..888\n   -revtranslate       range      [If this is left blank the complete\
  \ reverse\n                                  sequence is translated.] Regions to\n\
  \                                  translate (if translating).\n               \
  \                   If this is left blank the complete sequence\n              \
  \                    is translated.\n                                  A set of\
  \ regions is specified by a set of\n                                  pairs of positions.\n\
  \                                  The positions are integers.\n               \
  \                   They are separated by any non-digit,\n                     \
  \             non-alpha character.\n                                  Examples of\
  \ region specifications are:\n                                  78-56, 45-24,\n\
  \                                  888..765, 99=67; 45:1\n   -uppercase        \
  \  range      [If this is left blank, then the sequence\n                      \
  \            case is left alone.] Regions to put in\n                          \
  \        uppercase.\n                                  If this is left blank, then\
  \ the sequence\n                                  case is left alone.\n        \
  \                          A set of regions is specified by a set of\n         \
  \                         pairs of positions.\n                                \
  \  The positions are integers.\n                                  They are separated\
  \ by any non-digit,\n                                  non-alpha character.\n  \
  \                                Examples of region specifications are:\n      \
  \                            24-45, 56-78\n                                  1:45,\
  \ 67=99;765..888\n                                  1,5,8,10,23,45,57,99\n   -highlight\
  \          range      [(full sequence)] Regions to colour if\n                 \
  \                 formatting for HTML.\n                                  If this\
  \ is left blank, then the sequence is\n                                  left alone.\n\
  \                                  A set of regions is specified by a set of\n \
  \                                 pairs of positions.\n                        \
  \          The positions are integers.\n                                  They are\
  \ followed by any valid HTML font\n                                  colour.\n \
  \                                 Examples of region specifications are:\n     \
  \                             24-45 blue 56-78 orange\n                        \
  \          1-100 green 120-156 red\n                                  A file of\
  \ ranges to colour (one range per\n                                  line) can be\
  \ specified as '@filename'.\n   -annotation         range      [If this is left\
  \ blank, then no annotation\n                                  is added.] Regions\
  \ to annotate by marking.\n                                  If this is left blank,\
  \ then no annotation is\n                                  added.\n            \
  \                      A set of regions is specified by a set of\n             \
  \                     pairs of positions followed by optional\n                \
  \                  text.\n                                  The positions are integers.\n\
  \                                  They are followed by any text (but not\n    \
  \                              digits when on the command-line).\n             \
  \                     Examples of region specifications are:\n                 \
  \                 24-45 new domain 56-78 match to Mouse\n                      \
  \            1-100 First part 120-156 oligo\n                                  A\
  \ file of ranges to annotate (one range per\n                                  line)\
  \ can be specified as '@filename'.\n   -enzymes            string     [all] The\
  \ name 'all' reads in all enzyme\n                                  names from the\
  \ REBASE database. You can\n                                  specify enzymes by\
  \ giving their names with\n                                  commas between then,\
  \ such as:\n                                  'HincII,hinfI,ppiI,hindiii'.\n   \
  \                               The case of the names is not important. You\n  \
  \                                can specify a file of enzyme names to read\n  \
  \                                in by giving the name of the file holding\n   \
  \                               the enzyme names with a '@' character in\n     \
  \                             front of it, for example, '@enz.list'.\n         \
  \                         Blank lines and lines starting with a hash\n         \
  \                         character or '!' are ignored and all other\n         \
  \                         lines are concatenated together with a comma\n       \
  \                           character ',' and then treated as the list\n       \
  \                           of enzymes to search for.\n                        \
  \          An example of a file of enzyme names is:\n                          \
  \        ! my enzymes\n                                  HincII, ppiII\n       \
  \                           ! other enzymes\n                                  hindiii\n\
  \                                  HinfI\n                                  PpiI\
  \ (Any string)\n   -table              menu       [0] Genetic code to use (Values:\
  \ 0\n                                  (Standard); 1 (Standard (with alternative\n\
  \                                  initiation codons)); 2 (Vertebrate\n        \
  \                          Mitochondrial); 3 (Yeast Mitochondrial); 4\n        \
  \                          (Mold, Protozoan, Coelenterate Mitochondrial\n      \
  \                            and Mycoplasma/Spiroplasma); 5\n                  \
  \                (Invertebrate Mitochondrial); 6 (Ciliate\n                    \
  \              Macronuclear and Dasycladacean); 9\n                            \
  \      (Echinoderm Mitochondrial); 10 (Euplotid\n                              \
  \    Nuclear); 11 (Bacterial); 12 (Alternative\n                               \
  \   Yeast Nuclear); 13 (Ascidian Mitochondrial);\n                             \
  \     14 (Flatworm Mitochondrial); 15\n                                  (Blepharisma\
  \ Macronuclear); 16\n                                  (Chlorophycean Mitochondrial);\
  \ 21 (Trematode\n                                  Mitochondrial); 22 (Scenedesmus\
  \ obliquus);\n                                  23 (Thraustochytrium Mitochondrial))\n\
  \   -sourcematch        string     [*] By default any feature source in the\n  \
  \                                feature table is shown. You can set this to\n \
  \                                 match any feature source you wish to show.\n \
  \                                 The source name is usually either the name\n \
  \                                 of the program that detected the feature or\n\
  \                                  it is the feature table (eg: EMBL) that the\n\
  \                                  feature came from.\n                        \
  \          The source may be wildcarded by using '*'.\n                        \
  \          If you wish to show more than one source,\n                         \
  \         separate their names with the character '|',\n                       \
  \           eg:\n                                  gene* | embl (Any string)\n \
  \  -typematch          string     [*] By default any feature type in the\n     \
  \                             feature table is shown. You can set this to\n    \
  \                              match any feature type you wish to show.\n      \
  \                            See http://www.ebi.ac.uk/embl/WebFeat/ for a\n    \
  \                              list of the EMBL feature types and see\n        \
  \                          Appendix A of the Swissprot user manual in\n        \
  \                          http://www.expasy.org/sprot/userman.html for\n      \
  \                            a list of the Swissprot feature types.\n          \
  \                        The type may be wildcarded by using '*'.\n            \
  \                      If you wish to show more than one type,\n               \
  \                   separate their names with the character '|',\n             \
  \                     eg:\n                                  *UTR | intron (Any\
  \ string)\n   -sensematch         integer    [0 - any sense, 1 - forward sense,\
  \ -1 -\n                                  reverse sense] By default any feature\
  \ type\n                                  in the feature table is shown. You can\
  \ set\n                                  this to match any feature sense you wish\
  \ to\n                                  show. 0 - any sense, 1 - forward sense,\
  \ -1 -\n                                  reverse sense (Integer from -1 to 1)\n\
  \   -minscore           float      [0.0] Minimum score of feature to display\n \
  \                                 (see also maxscore) (Any numeric value)\n   -maxscore\
  \           float      [0.0] Maximum score of feature to display.\n            \
  \                      If both minscore and maxscore are zero (the\n           \
  \                       default), then any score is ignored (Any\n             \
  \                     numeric value)\n   -tagmatch           string     [*] Tags\
  \ are the types of extra values that\n                                  a feature\
  \ may have. For example in the EMBL\n                                  feature table,\
  \ a 'CDS' type of feature may\n                                  have the tags '/codon',\
  \ '/codon_start',\n                                  '/db_xref', '/EC_number', '/evidence',\n\
  \                                  '/exception', '/function', '/gene',\n       \
  \                           '/label', '/map', '/note', '/number',\n            \
  \                      '/partial', '/product', '/protein_id',\n                \
  \                  '/pseudo', '/standard_name', '/translation',\n              \
  \                    '/transl_except', '/transl_table', or\n                   \
  \               '/usedin'. Some of these tags also have\n                      \
  \            values, for example '/gene' can have the\n                        \
  \          value of the gene name.\n                                  By default\
  \ any feature tag in the feature\n                                  table is shown.\
  \ You can set this to match\n                                  any feature tag you\
  \ wish to show.\n                                  The tag may be wildcarded by\
  \ using '*'.\n                                  If you wish to show more than one\
  \ tag,\n                                  separate their names with the character\
  \ '|',\n                                  eg:\n                                \
  \  gene | label (Any string)\n   -valuematch         string     [*] Tag values are\
  \ the values associated\n                                  with a feature tag. Tags\
  \ are the types of\n                                  extra values that a feature\
  \ may have. For\n                                  example in the EMBL feature table,\
  \ a 'CDS'\n                                  type of feature may have the tags '/codon',\n\
  \                                  '/codon_start', '/db_xref', '/EC_number',\n \
  \                                 '/evidence', '/exception', '/function',\n    \
  \                              '/gene', '/label', '/map', '/note',\n           \
  \                       '/number', '/partial', '/product',\n                   \
  \               '/protein_id', '/pseudo', '/standard_name',\n                  \
  \                '/translation', '/transl_except',\n                           \
  \       '/transl_table', or '/usedin'. Only some of\n                          \
  \        these tags can have values, for example\n                             \
  \     '/gene' can have the value of the gene name.\n                           \
  \       By default any feature tag value in the\n                              \
  \    feature table is shown. You can set this to\n                             \
  \     match any feature tag value you wish to\n                                \
  \  show.\n                                  The tag value may be wildcarded by using\n\
  \                                  '*'.\n                                  If you\
  \ wish to show more than one tag value,\n                                  separate\
  \ their names with the character\n                                  '|', eg:\n \
  \                                 pax* | 10 (Any string)\n   -stricttags       \
  \  boolean    [N] By default if any tag/value pair in a\n                      \
  \            feature matches the specified tag and value,\n                    \
  \              then all the tags/value pairs of that\n                         \
  \         feature will be displayed. If this is set to\n                       \
  \           be true, then only those tag/value pairs in\n                      \
  \            a feature that match the specified tag and\n                      \
  \            value will be displayed.\n\n   Advanced (Unprompted) qualifiers:\n\
  \   -mfile              datafile   [Emethylsites.dat] Restriction enzyme\n     \
  \                             methylation data file\n   -flatreformat       boolean\
  \    [N] This changes the output format to one\n                               \
  \   where the recognition site is indicated by a\n                             \
  \     row of '===' characters and the cut site is\n                            \
  \      pointed to by a '>' character in the\n                                  forward\
  \ sense, or a '<' in the reverse sense\n                                  strand.\n\
  \   -mincuts            integer    [1] This sets the minimum number of cuts for\n\
  \                                  any restriction enzyme that will be\n       \
  \                           considered. Any enzymes that cut fewer times\n     \
  \                             than this will be ignored. (Integer from 1\n     \
  \                             to 1000)\n   -maxcuts            integer    [2000000000]\
  \ This sets the maximum number of\n                                  cuts for any\
  \ restriction enzyme that will\n                                  be considered.\
  \ Any enzymes that cut more\n                                  times than this will\
  \ be ignored. (Any\n                                  integer value)\n   -sitelen\
  \            integer    [4] This sets the minimum length of the\n              \
  \                    restriction enzyme recognition site. Any\n                \
  \                  enzymes with sites shorter than this will be\n              \
  \                    ignored. (Integer from 2 to 20)\n   -single             boolean\
  \    [N] If this is set then this forces the\n                                 \
  \ values of the mincuts and maxcuts qualifiers\n                               \
  \   to both be 1. Any other value you may have\n                               \
  \   set them to will be ignored.\n   -[no]blunt          boolean    [Y] This allows\
  \ those enzymes which cut at\n                                  the same position\
  \ on the forward and reverse\n                                  strands to be considered.\n\
  \   -[no]sticky         boolean    [Y] This allows those enzymes which cut at\n\
  \                                  different positions on the forward and\n    \
  \                              reverse strands, leaving an overhang, to be\n   \
  \                               considered.\n   -[no]ambiguity      boolean    [Y]\
  \ This allows those enzymes which have one\n                                  or\
  \ more 'N' ambiguity codes in their\n                                  pattern to\
  \ be considered\n   -plasmid            boolean    [N] If this is set then this\
  \ allows searches\n                                  for restriction enzyme recognition\
  \ site and\n                                  cut positions that span the end of\
  \ the\n                                  sequence to be considered.\n   -methylation\
  \        boolean    [N] If this is set then RE recognition sites\n             \
  \                     will not match methylated bases.\n   -[no]commercial     boolean\
  \    [Y] If this is set, then only those enzymes\n                             \
  \     with a commercial supplier will be searched\n                            \
  \      for. This qualifier is ignored if you have\n                            \
  \      specified an explicit list of enzymes to\n                              \
  \    search for, rather than searching through\n                               \
  \   'all' the enzymes in the REBASE database. It\n                             \
  \     is assumed that, if you are asking for an\n                              \
  \    explicit enzyme, then you probably know\n                                 \
  \ where to get it from and so all enzymes\n                                  names\
  \ that you have asked to be searched\n                                  for, and\
  \ which cut, will be reported whether\n                                  or not\
  \ they have a commercial supplier.\n   -[no]limit          boolean    [Y] This limits\
  \ the reporting of enzymes to\n                                  just one enzyme\
  \ from each group of\n                                  isoschizomers. The enzyme\
  \ chosen to\n                                  represent an isoschizomer group is\
  \ the\n                                  prototype indicated in the data file\n\
  \                                  'embossre.equ', which is created by the\n   \
  \                               program 'rebaseextract'. If you prefer\n       \
  \                           different prototypes to be used, make a copy\n     \
  \                             of embossre.equ in your home directory and\n     \
  \                             edit it. If this value is set to be false\n      \
  \                            then all of the input enzymes will be\n           \
  \                       reported. You might like to set this to\n              \
  \                    false if you are supplying an explicit set\n              \
  \                    of enzymes rather than searching 'all' of\n               \
  \                   them.\n   -orfminsize         integer    [0] This sets the minimum\
  \ size of Open\n                                  Reading Frames (ORFs) to display\
  \ in the\n                                  translations. All other translation\
  \ regions\n                                  are masked by changing the amino acids\
  \ to\n                                  '-' characters. (Integer 0 or more)\n  \
  \ -threeletter        boolean    [N] Display protein sequences in\n            \
  \                      three-letter code\n   -number             boolean    [N]\
  \ Number the sequences\n   -width              integer    [60] Width of sequence\
  \ to display (Integer 1\n                                  or more)\n   -length\
  \             integer    [0] Line length of page (0 for indefinite)\n          \
  \                        (Integer 0 or more)\n   -margin             integer   \
  \ [10] Margin around sequence for numbering\n                                  (Integer\
  \ 0 or more)\n   -[no]name           boolean    [Y] Set this to be false if you\
  \ do not wish\n                                  to display the ID name of the sequence\n\
  \   -[no]description    boolean    [Y] Set this to be false if you do not wish\n\
  \                                  to display the description of the sequence\n\
  \   -offset             integer    [1] Offset to start numbering the sequence\n\
  \                                  from (Any integer value)\n   -html          \
  \     boolean    [N] Use HTML formatting\n\n   General qualifiers:\n   -help   \
  \            boolean    Report command line options and exit. More\n           \
  \                       information on associated and general\n                \
  \                  qualifiers can be found with -help -verbose\n\n"
generated_using:
- --help
