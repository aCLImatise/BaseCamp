from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Regtools_Cis_Splice_Effects_Associate_V0_1_0 = CommandToolBuilder(tool="regtools_cis_splice_effects_associate", base_command=["regtools", "cis-splice-effects", "associate"], inputs=[ToolInput(tag="in_output_file_containing_aberrant_splice_junctions", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Output file containing the aberrant splice junctions with annotations. [STDOUT]")), ToolInput(tag="in_output_file_containing_variants", input_type=File(optional=True), prefix="-v", doc=InputDocumentation(doc="Output file containing variants annotated as splice relevant (VCF format).")), ToolInput(tag="in_output_file_containing_aberrant_junctions_bed", input_type=File(optional=True), prefix="-j", doc=InputDocumentation(doc="Output file containing the aberrant junctions in BED12 format.")), ToolInput(tag="in_minimum_anchor_length", input_type=Int(optional=True), prefix="-a", doc=InputDocumentation(doc="Minimum anchor length. Junctions which satisfy a minimum\nanchor length on both sides are reported. [8]")), ToolInput(tag="in_minimum_intron_length", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Minimum intron length. [70]")), ToolInput(tag="in_maximum_intron_length", input_type=Int(optional=True), prefix="-M", doc=InputDocumentation(doc="Maximum intron length. [500000]")), ToolInput(tag="in_window_size_identify", input_type=Int(optional=True), prefix="-w", doc=InputDocumentation(doc="Window size in b.p to identify splicing events in.\nThe tool identifies events in variant.start +/- w basepairs.\nDefault behaviour is to look at the window between previous and next exons.")), ToolInput(tag="in_maximum_distance_exonic", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="Maximum distance from the start/end of an exon\nto annotate a variant as relevant to splicing, the variant\nis in exonic space, i.e a coding variant. [3]")), ToolInput(tag="in_maximum_distance_intronic", input_type=Int(optional=True), prefix="-i", doc=InputDocumentation(doc="Maximum distance from the start/end of an exon\nto annotate a variant as relevant to splicing, the variant\nis in intronic space. [2]")), ToolInput(tag="in_annotate_variants_intronic", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="Annotate variants in intronic space within a transcript(not to be used with -i).")), ToolInput(tag="in_annotate_variants_exonic", input_type=Boolean(optional=True), prefix="-E", doc=InputDocumentation(doc="Annotate variants in exonic space within a transcript(not to be used with -e).")), ToolInput(tag="in_skip_exon_transcripts", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="Don't skip single exon transcripts.")), ToolInput(tag="in_variants_dot_vcf", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_junctions_dot_bed", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_ref_dot_fa", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_annotations_dot_gtf", input_type=String(), position=3, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_file_containing_aberrant_splice_junctions", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_containing_aberrant_splice_junctions", type_hint=File()), doc=OutputDocumentation(doc="Output file containing the aberrant splice junctions with annotations. [STDOUT]")), ToolOutput(tag="out_output_file_containing_variants", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_containing_variants", type_hint=File()), doc=OutputDocumentation(doc="Output file containing variants annotated as splice relevant (VCF format).")), ToolOutput(tag="out_output_file_containing_aberrant_junctions_bed", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_containing_aberrant_junctions_bed", type_hint=File()), doc=OutputDocumentation(doc="Output file containing the aberrant junctions in BED12 format."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Regtools_Cis_Splice_Effects_Associate_V0_1_0().translate("wdl", allow_empty_container=True)

