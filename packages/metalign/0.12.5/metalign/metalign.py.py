from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, Directory, Boolean, String, File, Int

Metalign_Py_V0_1_0 = CommandToolBuilder(tool="metalign.py", base_command=["metalign.py"], inputs=[ToolInput(tag="in_cut_off", input_type=Float(optional=True), prefix="--cutoff", doc=InputDocumentation(doc="CMash cutoff value. Default is 0.01.")), ToolInput(tag="in_db_dir", input_type=Directory(optional=True), prefix="--db_dir", doc=InputDocumentation(doc="Directory with all organism files in the full")), ToolInput(tag="in_keep_temp_files", input_type=Boolean(optional=True), prefix="--keep_temp_files", doc=InputDocumentation(doc="Retain KMC files after this script finishes.")), ToolInput(tag="in_input_type", input_type=String(optional=True), prefix="--input_type", doc=InputDocumentation(doc="Type of input file (fastq/fasta). Default: try to\nauto-determine")), ToolInput(tag="in_length_normalize", input_type=Boolean(optional=True), prefix="--length_normalize", doc=InputDocumentation(doc="Normalize abundances by genome length.")), ToolInput(tag="in_low_mem", input_type=Boolean(optional=True), prefix="--low_mem", doc=InputDocumentation(doc="Run in low memory mode, with inexact multimapped")), ToolInput(tag="in_no_quantify_unmapped", input_type=Boolean(optional=True), prefix="--no_quantify_unmapped", doc=InputDocumentation(doc="Do not factor in unmapped reads in abundance\nestimation.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output abundances file. Default: abundances.tsv")), ToolInput(tag="in_pct_id", input_type=String(optional=True), prefix="--pct_id", doc=InputDocumentation(doc="Minimum percent identity from reference to count a")), ToolInput(tag="in_min_abundance", input_type=Float(optional=True), prefix="--min_abundance", doc=InputDocumentation(doc="100 and 0.1.")), ToolInput(tag="in_rank_renormalize", input_type=Boolean(optional=True), prefix="--rank_renormalize", doc=InputDocumentation(doc="Renormalize abundances to 100 pct. at each rank, e.g\nif an organism has a species but not genus label.")), ToolInput(tag="in_read_cut_off", input_type=Int(optional=True), prefix="--read_cutoff", doc=InputDocumentation(doc="Number of reads to count an organism as present.")), ToolInput(tag="in_sample_id", input_type=File(optional=True), prefix="--sampleID", doc=InputDocumentation(doc="Sample ID for output. Defaults to input file name(s).")), ToolInput(tag="in_sensitive", input_type=Boolean(optional=True), prefix="--sensitive", doc=InputDocumentation(doc="Run in sensitive mode. Sets --cutoff value to 0.0.")), ToolInput(tag="in_strain_level", input_type=Boolean(optional=True), prefix="--strain_level", doc=InputDocumentation(doc="Profile strains (off by default).")), ToolInput(tag="in_temp_dir", input_type=Directory(optional=True), prefix="--temp_dir", doc=InputDocumentation(doc="Directory to write temporary files to.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of compute threads for Minimap2/KMC. Default: 4")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print verbose output.")), ToolInput(tag="in_reads", input_type=String(), position=0, doc=InputDocumentation(doc="Path to reads file.")), ToolInput(tag="in_data", input_type=String(), position=1, doc=InputDocumentation(doc="Path to data/ directory with the files from")), ToolInput(tag="in_setup_data_dots_h", input_type=String(), position=2, doc=InputDocumentation(doc="optional arguments:")), ToolInput(tag="in_database_dot", input_type=String(), position=3, doc=InputDocumentation(doc="--dbinfo_in DBINFO_IN")), ToolInput(tag="in_processing_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--min_abundance MIN_ABUNDANCE")), ToolInput(tag="in_hit_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--precise             Run in precise mode. Overwrites --read_cutoff and"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output abundances file. Default: abundances.tsv"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Metalign_Py_V0_1_0().translate("wdl", allow_empty_container=True)

