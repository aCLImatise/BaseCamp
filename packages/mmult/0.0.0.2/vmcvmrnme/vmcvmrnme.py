from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int

Vmcvmrnme_V0_1_0 = CommandToolBuilder(tool="vmcvmrnme", base_command=["vmcvmrnme"], inputs=[ToolInput(tag="in_arg_methylation_bed", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --methfile ] arg           Methylation BED files. The BED file is\ngenerated by `MCALL` in MOABS. Replicates are\nconcatenated by comma `,`. For example, `-m\nr1.bed,r2.bed,r3.bed`.")), ToolInput(tag="in_arg_one_specificchromosome", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --chrom ] arg              One specific-chromosome for analysis. Can be\nspecified multiple times for multiple\nchromosomes. Default: all chromosomes appear\nin methylation BED files.")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg            Output file.")), ToolInput(tag="in_arg_number_discretization", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="[ --state ] arg (=2)         Number of discretization states. Default: 2.")), ToolInput(tag="in_arg_window_size", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[ --window ] arg (=150)      Window size for genome scan. Default: 150.")), ToolInput(tag="in_arg_minimum_cpgs", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --mincpg ] arg (=3)        Minimum CpGs in a window. Default: 3.")), ToolInput(tag="in_arg_minimum_depth", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --mindepth ] arg (=3)      Minimum depth for a CpG coverage. Default: 3.")), ToolInput(tag="in_arg_number_threads", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --numthreads ] arg (=8)    Number of threads. Default: 8.")), ToolInput(tag="in_arg_vmr_detection", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --vmrmethod ] arg (=0)     VMR detection method. 0: identify VMCs first\nand detect VMRs from consecutive VMCs; 1:\nGenome scan method by fixed-size windows.\nDefault: 0.")), ToolInput(tag="in_arg_sd_vmc", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --sd ] arg (=0.2)          sd for VMC. Default: 0.2.")), ToolInput(tag="in_arg_nme_vmc", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --nme ] arg (=0.25)        NME for VMC. Default: 0.25.")), ToolInput(tag="in_arg_maximum_distance", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="[ --maxdistvmcs ] arg (=300) Maximum distance between consecutive VMCs for\nVMR. Default: 300.")), ToolInput(tag="in_min_sample", input_type=Int(optional=True), prefix="--minsample", doc=InputDocumentation(doc="(=5)            Minimum samples for a CpG. Default: 5.")), ToolInput(tag="in_vmc_file", input_type=File(optional=True), prefix="--vmcfile", doc=InputDocumentation(doc="VMC file.")), ToolInput(tag="in_window_file", input_type=File(optional=True), prefix="--windowfile", doc=InputDocumentation(doc="VMR file by genome scan."))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --outfile ] arg            Output file."))], container="quay.io/biocontainers/mmult:0.0.0.2--r40h8b68381_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Vmcvmrnme_V0_1_0().translate("wdl")

