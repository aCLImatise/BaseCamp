version 1.0

task Vmcvmrnme {
  input {
    Boolean? arg_methylation_bed
    Boolean? arg_one_specificchromosome
    File? arg_output_file
    Boolean? arg_number_discretization
    Boolean? arg_window_size
    Boolean? arg_minimum_cpgs
    Boolean? arg_minimum_depth
    Boolean? arg_number_threads
    Boolean? arg_vmr_detection
    Boolean? arg_sd_vmc
    Boolean? arg_nme_vmc
    Boolean? arg_maximum_distance
    Int? min_sample
    File? vmc_file
    File? window_file
  }
  command <<<
    vmcvmrnme \
      ~{if (arg_methylation_bed) then "-m" else ""} \
      ~{if (arg_one_specificchromosome) then "-c" else ""} \
      ~{if (arg_output_file) then "-o" else ""} \
      ~{if (arg_number_discretization) then "-k" else ""} \
      ~{if (arg_window_size) then "-w" else ""} \
      ~{if (arg_minimum_cpgs) then "-b" else ""} \
      ~{if (arg_minimum_depth) then "-d" else ""} \
      ~{if (arg_number_threads) then "-t" else ""} \
      ~{if (arg_vmr_detection) then "-v" else ""} \
      ~{if (arg_sd_vmc) then "-s" else ""} \
      ~{if (arg_nme_vmc) then "-n" else ""} \
      ~{if (arg_maximum_distance) then "-x" else ""} \
      ~{if defined(min_sample) then ("--minsample " +  '"' + min_sample + '"') else ""} \
      ~{if defined(vmc_file) then ("--vmcfile " +  '"' + vmc_file + '"') else ""} \
      ~{if defined(window_file) then ("--windowfile " +  '"' + window_file + '"') else ""}
  >>>
  runtime {
    docker: "quay.io/biocontainers/mmult:0.0.0.2--r40h8b68381_0"
  }
  parameter_meta {
    arg_methylation_bed: "[ --methfile ] arg           Methylation BED files. The BED file is\\ngenerated by `MCALL` in MOABS. Replicates are\\nconcatenated by comma `,`. For example, `-m\\nr1.bed,r2.bed,r3.bed`."
    arg_one_specificchromosome: "[ --chrom ] arg              One specific-chromosome for analysis. Can be\\nspecified multiple times for multiple\\nchromosomes. Default: all chromosomes appear\\nin methylation BED files."
    arg_output_file: "[ --outfile ] arg            Output file."
    arg_number_discretization: "[ --state ] arg (=2)         Number of discretization states. Default: 2."
    arg_window_size: "[ --window ] arg (=150)      Window size for genome scan. Default: 150."
    arg_minimum_cpgs: "[ --mincpg ] arg (=3)        Minimum CpGs in a window. Default: 3."
    arg_minimum_depth: "[ --mindepth ] arg (=3)      Minimum depth for a CpG coverage. Default: 3."
    arg_number_threads: "[ --numthreads ] arg (=8)    Number of threads. Default: 8."
    arg_vmr_detection: "[ --vmrmethod ] arg (=0)     VMR detection method. 0: identify VMCs first\\nand detect VMRs from consecutive VMCs; 1:\\nGenome scan method by fixed-size windows.\\nDefault: 0."
    arg_sd_vmc: "[ --sd ] arg (=0.2)          sd for VMC. Default: 0.2."
    arg_nme_vmc: "[ --nme ] arg (=0.25)        NME for VMC. Default: 0.25."
    arg_maximum_distance: "[ --maxdistvmcs ] arg (=300) Maximum distance between consecutive VMCs for\\nVMR. Default: 300."
    min_sample: "(=5)            Minimum samples for a CpG. Default: 5."
    vmc_file: "VMC file."
    window_file: "VMR file by genome scan."
  }
  output {
    File out_stdout = stdout()
    File out_arg_output_file = "${in_arg_output_file}"
  }
}