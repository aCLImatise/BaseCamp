from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Agat_Sp_Manage_Functional_Annotation_Pl_V0_1_0 = CommandToolBuilder(tool="agat_sp_manage_functional_annotation.pl", base_command=["agat_sp_manage_functional_annotation.pl"], inputs=[ToolInput(tag="in_ref_file", input_type=File(optional=True), prefix="--reffile", doc=InputDocumentation(doc="String - Input GTF/GFF file.")), ToolInput(tag="in_blast", input_type=File(optional=True), prefix="--blast", doc=InputDocumentation(doc="String - Input blast ( outfmt 6 = tabular ) file that will be\nused to complement the features read from the first file\n(specified with --ref).")), ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="String - The fasta file that has been used as DB for the blast.\nGene names and products/descriptions will be fished from this\nfile.")), ToolInput(tag="in_blast_evalue", input_type=Int(optional=True), prefix="--blast_evalue", doc=InputDocumentation(doc="Integer - Maximum e-value to keep the annotation from the blast\nfile. By default 1e-6.")), ToolInput(tag="in_pe", input_type=Boolean(optional=True), prefix="--pe", doc=InputDocumentation(doc="Integer - The PE (protein existence) in the uniprot header\nindicates the type of evidence that supports the existence of\nthe protein. You can decide until which protein existence level\nyou want to consider to lift the finctional information. Default\n5.\n1. Experimental evidence at protein level 2. Experimental\nevidence at transcript level 3. Protein inferred from homology\n4. Protein predicted 5. Protein uncertain")), ToolInput(tag="in_interpro", input_type=File(optional=True), prefix="--interpro", doc=InputDocumentation(doc="String - Input interpro file (.tsv) that will be used to\ncomplement the features read from the first file (specified with\n--ref).")), ToolInput(tag="in_id", input_type=Boolean(optional=True), prefix="-id", doc=InputDocumentation(doc="String - This option will changed the id name. It will create\nfrom id prefix (usually 6 letters) given as input, uniq IDs like\nprefixE00000000001. Where E mean exon. Instead E we can have C\nfor CDS, G for gene, T for mRNA, U for Utr. In the case of\ndiscontinuous features (i.e. a single feature that exists over\nmultiple genomic locations) the same ID may appear on multiple\nlines. All lines that share an ID collectively represent a\nsignle feature.")), ToolInput(tag="in_i_dau", input_type=Boolean(optional=True), prefix="-idau", doc=InputDocumentation(doc="Boolean - This option (id all uniq) is similar to -id option but\nId of features that share an ID collectively will be change by\ndifferent and uniq ID.")), ToolInput(tag="in_nb", input_type=Boolean(optional=True), prefix="-nb", doc=InputDocumentation(doc="Integer - Usefull only if -id is used. This option is used to\ndefine the number that will be used to begin the numbering. By\ndefault begin by 1.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="String - Output GFF file. If no output file is specified, the\noutput will be written to STDOUT.")), ToolInput(tag="in_boolean_verbose_debug", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Boolean - Verbose, for debug purpose.")), ToolInput(tag="in_agat_sp_manage_functional_annotation_do_tpl", input_type=String(), position=0, doc=InputDocumentation(doc="Description:")), ToolInput(tag="in_one_dot", input_type=Int(), position=0, doc=InputDocumentation(doc="qseqid  query (e.g., gene) sequence id")), ToolInput(tag="in_two_dot", input_type=Int(), position=1, doc=InputDocumentation(doc="sseqid  subject (e.g., reference genome) sequence id")), ToolInput(tag="in_three_dot", input_type=Int(), position=2, doc=InputDocumentation(doc="pident  percentage of identical matches")), ToolInput(tag="in_four_dot", input_type=Int(), position=3, doc=InputDocumentation(doc="length  alignment length")), ToolInput(tag="in_five_dot", input_type=Int(), position=4, doc=InputDocumentation(doc="mismatch  number of mismatches")), ToolInput(tag="in_six_dot", input_type=Int(), position=5, doc=InputDocumentation(doc="gapopen   number of gap openings")), ToolInput(tag="in_seven_dot", input_type=Int(), position=6, doc=InputDocumentation(doc="qstart  start of alignment in query")), ToolInput(tag="in_eight_dot", input_type=Int(), position=7, doc=InputDocumentation(doc="qend  end of alignment in query")), ToolInput(tag="in_nine_dot", input_type=Int(), position=8, doc=InputDocumentation(doc="sstart  start of alignment in subject")), ToolInput(tag="in_one_zero_dot", input_type=Int(), position=9, doc=InputDocumentation(doc="send  end of alignment in subject")), ToolInput(tag="in_one_one_dot", input_type=Int(), position=10, doc=InputDocumentation(doc="evalue  expect value")), ToolInput(tag="in_one_two_dot", input_type=Int(), position=11, doc=InputDocumentation(doc="bitscore  bit score"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="String - Output GFF file. If no output file is specified, the\noutput will be written to STDOUT."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Agat_Sp_Manage_Functional_Annotation_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

