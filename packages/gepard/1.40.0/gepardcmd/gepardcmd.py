from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Gepardcmd_V0_1_0 = CommandToolBuilder(tool="gepardcmd", base_command=["gepardcmd"], inputs=[ToolInput(tag="in_seq_one", input_type=Boolean(optional=True), prefix="-seq1", doc=InputDocumentation(doc=":        first sequence file")), ToolInput(tag="in_seq_two", input_type=Boolean(optional=True), prefix="-seq2", doc=InputDocumentation(doc=":        second sequence file")), ToolInput(tag="in_matrix", input_type=Boolean(optional=True), prefix="-matrix", doc=InputDocumentation(doc=":      substitution matrix file")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="-outfile", doc=InputDocumentation(doc=":     output file name")), ToolInput(tag="in_maxwidth", input_type=Boolean(optional=True), prefix="-maxwidth", doc=InputDocumentation(doc=":    maximum width of the generated image (default: 750)")), ToolInput(tag="in_max_height", input_type=Boolean(optional=True), prefix="-maxheight", doc=InputDocumentation(doc=":   maximum height of the generated image (default: 750)")), ToolInput(tag="in_zoom", input_type=Boolean(optional=True), prefix="-zoom", doc=InputDocumentation(doc=":        specify a zoom factor for the dotplot")), ToolInput(tag="in_format", input_type=Boolean(optional=True), prefix="-format", doc=InputDocumentation(doc=":      output format, one of:  'png', 'jpg', 'bmp' (default:PNG)")), ToolInput(tag="in_second_comp", input_type=Boolean(optional=True), prefix="-secondcomp", doc=InputDocumentation(doc="use complementary of second sequence")), ToolInput(tag="in_word", input_type=Boolean(optional=True), prefix="-word", doc=InputDocumentation(doc=":        word length for suffix array mode (default: 10)")), ToolInput(tag="in_window", input_type=Boolean(optional=True), prefix="-window", doc=InputDocumentation(doc=":      window size for ordinary dotplot mode (default: 0)")), ToolInput(tag="in_sa_file", input_type=Boolean(optional=True), prefix="-safile", doc=InputDocumentation(doc="load suffix array from file instead of calculating it")), ToolInput(tag="in_sa_second_seq", input_type=Boolean(optional=True), prefix="-sasecondseq", doc=InputDocumentation(doc="the suffix array is for the second sequence")), ToolInput(tag="in_from_one", input_type=Boolean(optional=True), prefix="-from1", doc=InputDocumentation(doc="coordinates of first sequence")), ToolInput(tag="in_from_two", input_type=Boolean(optional=True), prefix="-from2", doc=InputDocumentation(doc="coordinates of second sequence")), ToolInput(tag="in_lower", input_type=Boolean(optional=True), prefix="-lower", doc=InputDocumentation(doc="lower limit for dot intensity (in %)")), ToolInput(tag="in_upper", input_type=Boolean(optional=True), prefix="-upper", doc=InputDocumentation(doc="upper limit for dot intensity (in %)")), ToolInput(tag="in_greyscale", input_type=Boolean(optional=True), prefix="-greyscale", doc=InputDocumentation(doc="greyscale start value (in %)")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="-silent", doc=InputDocumentation(doc="generate no output (except error messages)"))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc=":     output file name"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gepardcmd_V0_1_0().translate("wdl", allow_empty_container=True)

