from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Directory, Boolean, String

After_Py_V0_1_0 = CommandToolBuilder(tool="after.py", base_command=["after.py"], inputs=[ToolInput(tag="in_read_one_file", input_type=File(optional=True), prefix="--read1_file", doc=InputDocumentation(doc="file name of read1, required. If input_dir is\nspecified, then this arg is ignored.")), ToolInput(tag="in_read_two_file", input_type=File(optional=True), prefix="--read2_file", doc=InputDocumentation(doc="file name of read2, if paired. If input_dir is\nspecified, then this arg is ignored.")), ToolInput(tag="in_index_one_file", input_type=File(optional=True), prefix="--index1_file", doc=InputDocumentation(doc="file name of 7' index. If input_dir is specified, then\nthis arg is ignored.")), ToolInput(tag="in_index_two_file", input_type=File(optional=True), prefix="--index2_file", doc=InputDocumentation(doc="file name of 5' index. If input_dir is specified, then\nthis arg is ignored.")), ToolInput(tag="in_input_dir", input_type=Int(optional=True), prefix="--input_dir", doc=InputDocumentation(doc="the input dir to process automatically. If read1_file\nare input_dir are not specified, then current dir (.)\nis specified to input_dir")), ToolInput(tag="in_good_output_folder", input_type=Directory(optional=True), prefix="--good_output_folder", doc=InputDocumentation(doc="the folder to store good reads, by default it is named\n'good', in the current directory")), ToolInput(tag="in_bad_output_folder", input_type=Directory(optional=True), prefix="--bad_output_folder", doc=InputDocumentation(doc="the folder to store bad reads, by default it is named\n'bad', in the same folder as good_output_folder")), ToolInput(tag="in_report_output_folder", input_type=Directory(optional=True), prefix="--report_output_folder", doc=InputDocumentation(doc="the folder to store QC reports, by default it is named\n'QC', in the same folder as good_output_folder")), ToolInput(tag="in_read_one_flag", input_type=Int(optional=True), prefix="--read1_flag", doc=InputDocumentation(doc="specify the name flag of read1, default is R1, which\nmeans a file with name *R1* is read1 file")), ToolInput(tag="in_read_two_flag", input_type=Int(optional=True), prefix="--read2_flag", doc=InputDocumentation(doc="specify the name flag of read2, default is R2, which\nmeans a file with name *R2* is read2 file")), ToolInput(tag="in_index_one_flag", input_type=Int(optional=True), prefix="--index1_flag", doc=InputDocumentation(doc="specify the name flag of index1, default is I1, which\nmeans a file with name *I1* is index2 file")), ToolInput(tag="in_index_two_flag", input_type=Int(optional=True), prefix="--index2_flag", doc=InputDocumentation(doc="specify the name flag of index2, default is I2, which\nmeans a file with name *I2* is index2 file")), ToolInput(tag="in_trim_front", input_type=Int(optional=True), prefix="--trim_front", doc=InputDocumentation(doc="number of bases to be trimmed in the head of read. -1\nmeans auto detect")), ToolInput(tag="in_trim_tail", input_type=Int(optional=True), prefix="--trim_tail", doc=InputDocumentation(doc="number of bases to be trimmed in the tail of read. -1\nmeans auto detect")), ToolInput(tag="in_trim_pair_same", input_type=Int(optional=True), prefix="--trim_pair_same", doc=InputDocumentation(doc="use same trimming configuration for read1 and read2 to\nkeep their sequence length identical, default is true")), ToolInput(tag="in_qualified_quality_phred", input_type=Int(optional=True), prefix="--qualified_quality_phred", doc=InputDocumentation(doc="the quality value that a base is qualifyed. Default 15\nmeans phred base quality >=Q15 is qualified.")), ToolInput(tag="in_unqualified_base_limit", input_type=Int(optional=True), prefix="--unqualified_base_limit", doc=InputDocumentation(doc="if exists more than unqualified_base_limit bases that\nquality is lower than qualified quality, then this\nread/pair is bad. Default is 60")), ToolInput(tag="in_poly_size_limit", input_type=Int(optional=True), prefix="--poly_size_limit", doc=InputDocumentation(doc="if exists one polyX(polyG means GGGGGGGGG...), and its\nlength is >= poly_size_limit, then this read/pair is\nbad. Default is 35")), ToolInput(tag="in_allow_mismatch_in_poly", input_type=Int(optional=True), prefix="--allow_mismatch_in_poly", doc=InputDocumentation(doc="the count of allowed mismatches when detection polyX.\nDefault 2 means allow 2 mismatches for polyX detection")), ToolInput(tag="in_n_base_limit", input_type=Int(optional=True), prefix="--n_base_limit", doc=InputDocumentation(doc="if exists more than maxn bases have N, then this\nread/pair is bad. Default is 5")), ToolInput(tag="in_seq_len_req", input_type=Int(optional=True), prefix="--seq_len_req", doc=InputDocumentation(doc="if the trimmed read is shorter than seq_len_req, then\nthis read/pair is bad. Default is 35")), ToolInput(tag="in_de_bubble", input_type=Boolean(optional=True), prefix="--debubble", doc=InputDocumentation(doc="specify whether apply debubble algorithm to remove the\nreads in the bubbles. Default is False")), ToolInput(tag="in_de_bubble_dir", input_type=Directory(optional=True), prefix="--debubble_dir", doc=InputDocumentation(doc="specify the folder to store output of debubble\nalgorithm, default is debubble")), ToolInput(tag="in_draw", input_type=String(optional=True), prefix="--draw", doc=InputDocumentation(doc="specify whether draw the pictures or not, when use\ndebubble or QC. Default is on")), ToolInput(tag="in_barcode", input_type=File(optional=True), prefix="--barcode", doc=InputDocumentation(doc="specify whether deal with barcode sequencing files,\ndefault is on, which means all files with barcode_flag\nin filename will be treated as barcode sequencing\nfiles")), ToolInput(tag="in_barcode_length", input_type=Int(optional=True), prefix="--barcode_length", doc=InputDocumentation(doc="specify the designed length of barcode")), ToolInput(tag="in_barcode_flag", input_type=File(optional=True), prefix="--barcode_flag", doc=InputDocumentation(doc="specify the name flag of a barcoded file, default is\nbarcode, which means a file with name *barcode* is a\nbarcoded file")), ToolInput(tag="in_barcode_verify", input_type=String(optional=True), prefix="--barcode_verify", doc=InputDocumentation(doc="specify the verify sequence of a barcode which is\nadjunct to the barcode")), ToolInput(tag="in_store_overlap", input_type=String(optional=True), prefix="--store_overlap", doc=InputDocumentation(doc="specify whether store only overlapped bases of the\ngood reads")), ToolInput(tag="in_overlap_output_folder", input_type=Directory(optional=True), prefix="--overlap_output_folder", doc=InputDocumentation(doc="the folder to store only overlapped bases of the good\nreads")), ToolInput(tag="in_qc_only", input_type=Boolean(optional=True), prefix="--qc_only", doc=InputDocumentation(doc="if qconly is true, only QC result will be output, this\ncan be much fast")), ToolInput(tag="in_qc_sample", input_type=Int(optional=True), prefix="--qc_sample", doc=InputDocumentation(doc="sample up to qc_sample reads when do QC, 0 means\nsample all reads. Default is 200,000")), ToolInput(tag="in_qc_km_er", input_type=Int(optional=True), prefix="--qc_kmer", doc=InputDocumentation(doc="specify the kmer length for KMER statistics for QC,\ndefault is 8")), ToolInput(tag="in_no_correction", input_type=Boolean(optional=True), prefix="--no_correction", doc=InputDocumentation(doc="disable base correction for mismatched base pairs in\noverlapped areas")), ToolInput(tag="in_mask_mismatch", input_type=Boolean(optional=True), prefix="--mask_mismatch", doc=InputDocumentation(doc="set the qual num to 0 for mismatched base pairs in\noverlapped areas to mask them out")), ToolInput(tag="in_no_overlap", input_type=Boolean(optional=True), prefix="--no_overlap", doc=InputDocumentation(doc="disable overlap analysis (usually much faster with\nthis option)")), ToolInput(tag="in_gzip", input_type=Boolean(optional=True), prefix="--gzip", doc=InputDocumentation(doc="force gzip compression for output, even the input is\nnot gzip compressed")), ToolInput(tag="in_compression", input_type=Int(optional=True), prefix="--compression", doc=InputDocumentation(doc="set compression level (0~9) for gzip output, default\nis 2 (0 = best speed, 9 = best compression).\n")), ToolInput(tag="in_automatic", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_filtering", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_good_output_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_good_output_folder", type_hint=File()), doc=OutputDocumentation(doc="the folder to store good reads, by default it is named\n'good', in the current directory")), ToolOutput(tag="out_bad_output_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_bad_output_folder", type_hint=File()), doc=OutputDocumentation(doc="the folder to store bad reads, by default it is named\n'bad', in the same folder as good_output_folder")), ToolOutput(tag="out_report_output_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_report_output_folder", type_hint=File()), doc=OutputDocumentation(doc="the folder to store QC reports, by default it is named\n'QC', in the same folder as good_output_folder")), ToolOutput(tag="out_de_bubble_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_de_bubble_dir", type_hint=File()), doc=OutputDocumentation(doc="specify the folder to store output of debubble\nalgorithm, default is debubble")), ToolOutput(tag="out_overlap_output_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_overlap_output_folder", type_hint=File()), doc=OutputDocumentation(doc="the folder to store only overlapped bases of the good\nreads"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    After_Py_V0_1_0().translate("wdl", allow_empty_container=True)

