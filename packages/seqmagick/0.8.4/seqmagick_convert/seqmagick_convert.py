from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean, File

Seqmagick_Convert_V0_1_0 = CommandToolBuilder(tool="seqmagick_convert", base_command=["seqmagick", "convert"], inputs=[ToolInput(tag="in_alphabet", input_type=String(optional=True), prefix="--alphabet", doc=InputDocumentation(doc="Input alphabet. Required for writing NEXUS.")), ToolInput(tag="in_line_wrap", input_type=Int(optional=True), prefix="--line-wrap", doc=InputDocumentation(doc="Adjust line wrap for sequence strings. When N is 0,\nall line breaks are removed. Only fasta files are\nsupported for the output format.")), ToolInput(tag="in_sort", input_type=String(optional=True), prefix="--sort", doc=InputDocumentation(doc="Perform sorting by length or name, ascending or\ndescending. ASCII sorting is performed for names")), ToolInput(tag="in_apply_function", input_type=Boolean(optional=True), prefix="--apply-function", doc=InputDocumentation(doc="/path/to/module.py:function_name[:parameter]\nSpecify a custom function to apply to the input\nsequences, specified as\n/path/to/file.py:function_name. Function should accept\nan iterable of Bio.SeqRecord objects, and yield\nSeqRecords. If the parameter is specified, it will be\npassed as a string as the second argument to the\nfunction. Specify more than one to chain.")), ToolInput(tag="in_cut", input_type=Int(optional=True), prefix="--cut", doc=InputDocumentation(doc=":end[,start2:end2]\nKeep only the residues within the 1-indexed start and\nend positions specified, : separated. Includes last\nitem. Start or end can be left unspecified to indicate\nstart/end of sequence. A negative start may be\nprovided to indicate an offset from the end of the\nsequence. Note that to prevent negative numbers being\ninterpreted as flags, this should be written with an\nequals sign between `--cut` and the argument, e.g.:\n`--cut=-10:`")), ToolInput(tag="in_relative_to", input_type=String(optional=True), prefix="--relative-to", doc=InputDocumentation(doc="Apply --cut relative to the indexes of non-gap\nresidues in sequence identified by ID")), ToolInput(tag="in_drop", input_type=Int(optional=True), prefix="--drop", doc=InputDocumentation(doc=":end[,start2:end2]\nRemove the residues at the specified indices. Same\nformat as `--cut`.")), ToolInput(tag="in_dash_gap", input_type=Boolean(optional=True), prefix="--dash-gap", doc=InputDocumentation(doc="Replace any of the characters '?.:~' with a '-' for\nall sequences")), ToolInput(tag="in_lower", input_type=Boolean(optional=True), prefix="--lower", doc=InputDocumentation(doc="Translate the sequences to lower case")), ToolInput(tag="in_mask", input_type=Int(optional=True), prefix="--mask", doc=InputDocumentation(doc=":end1[,start2:end2]\nReplace residues in 1-indexed slice with gap-\ncharacters. If --relative-to is also specified,\ncoordinates are relative to the sequence ID provided.")), ToolInput(tag="in_reverse", input_type=Boolean(optional=True), prefix="--reverse", doc=InputDocumentation(doc="Reverse the order of sites in sequences")), ToolInput(tag="in_reverse_complement", input_type=Boolean(optional=True), prefix="--reverse-complement", doc=InputDocumentation(doc="Convert sequences into reverse complements")), ToolInput(tag="in_squeeze", input_type=Boolean(optional=True), prefix="--squeeze", doc=InputDocumentation(doc="Remove any gaps that are present in the same position\nacross all sequences in an alignment (equivalent to\n--squeeze-threshold=1.0)")), ToolInput(tag="in_squeeze_threshold", input_type=String(optional=True), prefix="--squeeze-threshold", doc=InputDocumentation(doc="Trim columns from an alignment which have gaps in\nleast the specified proportion of sequences.")), ToolInput(tag="in_transcribe", input_type=String(optional=True), prefix="--transcribe", doc=InputDocumentation(doc="Transcription and back transcription for generic DNA\nand RNA. Source sequences must be the correct alphabet\nor this action will likely produce incorrect results.")), ToolInput(tag="in_translate", input_type=String(optional=True), prefix="--translate", doc=InputDocumentation(doc="Translate from generic DNA/RNA to proteins. Options\nwith 'stop' suffix will NOT translate through stop\ncodons . Source sequences must be the correct alphabet\nor this action will likely produce incorrect results.")), ToolInput(tag="in_un_gap", input_type=Boolean(optional=True), prefix="--ungap", doc=InputDocumentation(doc="Remove gaps in the sequence alignment")), ToolInput(tag="in_upper", input_type=Boolean(optional=True), prefix="--upper", doc=InputDocumentation(doc="Translate the sequences to upper case")), ToolInput(tag="in_de_duplicate_sequences", input_type=Boolean(optional=True), prefix="--deduplicate-sequences", doc=InputDocumentation(doc="Remove any duplicate sequences by sequence content,\nkeep the first instance seen")), ToolInput(tag="in_de_duplicated_sequences_file", input_type=File(optional=True), prefix="--deduplicated-sequences-file", doc=InputDocumentation(doc="Write all of the deduplicated sequences to a file")), ToolInput(tag="in_de_duplicate_tax_a", input_type=Boolean(optional=True), prefix="--deduplicate-taxa", doc=InputDocumentation(doc="Remove any duplicate sequences by ID, keep the first\ninstance seen")), ToolInput(tag="in_exclude_from_file", input_type=File(optional=True), prefix="--exclude-from-file", doc=InputDocumentation(doc="Filter sequences, removing those sequence IDs in the\nspecified file")), ToolInput(tag="in_include_from_file", input_type=File(optional=True), prefix="--include-from-file", doc=InputDocumentation(doc="Filter sequences, keeping only those sequence IDs in\nthe specified file")), ToolInput(tag="in_head", input_type=String(optional=True), prefix="--head", doc=InputDocumentation(doc="Trim down to top N sequences. With the leading `-',\nprint all but the last N sequences.")), ToolInput(tag="in_max_length", input_type=Int(optional=True), prefix="--max-length", doc=InputDocumentation(doc="Discard any sequences beyond the specified maximum\nlength. This operation occurs *before* all length-\nchanging options such as cut and squeeze.")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="Discard any sequences less than the specified minimum\nlength. This operation occurs *before* cut and\nsqueeze.")), ToolInput(tag="in_min_un_gapped_length", input_type=Int(optional=True), prefix="--min-ungapped-length", doc=InputDocumentation(doc="Discard any sequences less than the specified minimum\nlength, excluding gaps. This operation occurs *before*\ncut and squeeze.")), ToolInput(tag="in_pattern_include", input_type=String(optional=True), prefix="--pattern-include", doc=InputDocumentation(doc="Filter the sequences by regular expression in ID or\ndescription")), ToolInput(tag="in_pattern_exclude", input_type=String(optional=True), prefix="--pattern-exclude", doc=InputDocumentation(doc="Filter the sequences by regular expression in ID or\ndescription")), ToolInput(tag="in_prune_empty", input_type=Boolean(optional=True), prefix="--prune-empty", doc=InputDocumentation(doc="Prune sequences containing only gaps ('-')")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="--sample", doc=InputDocumentation(doc="Select a random sampling of sequences")), ToolInput(tag="in_sample_seed", input_type=String(optional=True), prefix="--sample-seed", doc=InputDocumentation(doc="Set random seed for sampling of sequences")), ToolInput(tag="in_seq_pattern_include", input_type=String(optional=True), prefix="--seq-pattern-include", doc=InputDocumentation(doc="Filter the sequences by regular expression in sequence")), ToolInput(tag="in_seq_pattern_exclude", input_type=String(optional=True), prefix="--seq-pattern-exclude", doc=InputDocumentation(doc="Filter the sequences by regular expression in sequence")), ToolInput(tag="in_tail", input_type=String(optional=True), prefix="--tail", doc=InputDocumentation(doc="Trim down to bottom N sequences. Use +N to output\nsequences starting with the Nth.")), ToolInput(tag="in_first_name", input_type=Boolean(optional=True), prefix="--first-name", doc=InputDocumentation(doc="Take only the first whitespace-delimited word as the\nname of the sequence")), ToolInput(tag="in_name_suffix", input_type=String(optional=True), prefix="--name-suffix", doc=InputDocumentation(doc="Append a suffix to all IDs.")), ToolInput(tag="in_name_prefix", input_type=String(optional=True), prefix="--name-prefix", doc=InputDocumentation(doc="Insert a prefix for all IDs.")), ToolInput(tag="in_pattern_replace", input_type=String(optional=True), prefix="--pattern-replace", doc=InputDocumentation(doc="replace_pattern\nReplace regex pattern 'search_pattern' with\n'replace_pattern' in sequence ID and description")), ToolInput(tag="in_strip_range", input_type=Boolean(optional=True), prefix="--strip-range", doc=InputDocumentation(doc="Strip ranges from sequences IDs, matching </x-y>")), ToolInput(tag="in_input_format", input_type=File(optional=True), prefix="--input-format", doc=InputDocumentation(doc="Input file format (default: determine from extension)")), ToolInput(tag="in_output_format", input_type=File(optional=True), prefix="--output-format", doc=InputDocumentation(doc="Output file format (default: determine from extension)")), ToolInput(tag="in_source_file", input_type=String(), position=0, doc=InputDocumentation(doc="Input sequence file")), ToolInput(tag="in_dest_file", input_type=String(), position=1, doc=InputDocumentation(doc="Output file"))], outputs=[ToolOutput(tag="out_output_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_format", type_hint=File()), doc=OutputDocumentation(doc="Output file format (default: determine from extension)"))], container="quay.io/biocontainers/seqmagick:0.8.4--py_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seqmagick_Convert_V0_1_0().translate("wdl")

