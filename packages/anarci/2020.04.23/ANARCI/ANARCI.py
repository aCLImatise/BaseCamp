from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Anarci_V0_1_0 = CommandToolBuilder(tool="ANARCI", base_command=["ANARCI"], inputs=[ToolInput(tag="in_sequence", input_type=File(optional=True), prefix="--sequence", doc=InputDocumentation(doc="A sequence or an input fasta file")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="The output file to use. Default is stdout")), ToolInput(tag="in_scheme", input_type=String(optional=True), prefix="--scheme", doc=InputDocumentation(doc="Which numbering scheme should be used. i, k, c, m, w\nand a are shorthand for IMGT, Kabat, Chothia, Martin\n(Extended Chothia), Wolfguy and Aho respectively.\nDefault IMGT")), ToolInput(tag="in_restrict", input_type=String(optional=True), prefix="--restrict", doc=InputDocumentation(doc="[{ig,tr,heavy,light,H,K,L,A,B} ...], -r {ig,tr,heavy,light,H,K,L,A,B} [{ig,tr,heavy,light,H,K,L,A,B} ...]\nRestrict ANARCI to only recognise certain types of\nreceptor chains.")), ToolInput(tag="in_csv", input_type=File(optional=True), prefix="--csv", doc=InputDocumentation(doc="Write the output in csv format. Outfile must be\nspecified. A csv file is written for each chain type\n<outfile>_<chain_type>.csv. Kappa and lambda are\nconsidered together.")), ToolInput(tag="in_outfile_hits", input_type=File(optional=True), prefix="--outfile_hits", doc=InputDocumentation(doc="Output file for domain hit tables for each sequence.\nOtherwise not output.")), ToolInput(tag="in_hmmer_path", input_type=File(optional=True), prefix="--hmmerpath", doc=InputDocumentation(doc="The path to the directory containing hmmer programs.\n(including hmmscan)")), ToolInput(tag="in_n_cpu", input_type=Int(optional=True), prefix="--ncpu", doc=InputDocumentation(doc="Number of parallel processes to use. Default is 1.")), ToolInput(tag="in_assign_germline", input_type=Boolean(optional=True), prefix="--assign_germline", doc=InputDocumentation(doc="Assign the v and j germlines to the sequence. The most\nsequence identical germline is assigned.")), ToolInput(tag="in_use_species", input_type=String(optional=True), prefix="--use_species", doc=InputDocumentation(doc="Use a specific species in the germline assignment.")), ToolInput(tag="in_bit_score_threshold", input_type=String(optional=True), prefix="--bit_score_threshold", doc=InputDocumentation(doc="Change the bit score threshold used to confirm an\nalignment should be used."))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc="The output file to use. Default is stdout")), ToolOutput(tag="out_csv", output_type=File(optional=True), selector=InputSelector(input_to_select="in_csv", type_hint=File()), doc=OutputDocumentation(doc="Write the output in csv format. Outfile must be\nspecified. A csv file is written for each chain type\n<outfile>_<chain_type>.csv. Kappa and lambda are\nconsidered together.")), ToolOutput(tag="out_outfile_hits", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile_hits", type_hint=File()), doc=OutputDocumentation(doc="Output file for domain hit tables for each sequence.\nOtherwise not output."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anarci_V0_1_0().translate("wdl", allow_empty_container=True)

