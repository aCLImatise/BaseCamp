from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String, Float, Directory

Oases_V0_1_0 = CommandToolBuilder(tool="oases", base_command=["oases"], inputs=[ToolInput(tag="in_citation", input_type=Boolean(optional=True), prefix="--citation", doc=InputDocumentation(doc=": print citation to Oases manuscript and exit")), ToolInput(tag="in_ins_length_two", input_type=Int(optional=True), prefix="-ins_length2", doc=InputDocumentation(doc=": expected distance between two paired-end reads in the second short-read dataset (default: no read pairing)")), ToolInput(tag="in_ins_length_long", input_type=Int(optional=True), prefix="-ins_length_long", doc=InputDocumentation(doc=": expected distance between two long paired-end reads (default: no read pairing)")), ToolInput(tag="in_ins_length", input_type=Boolean(optional=True), prefix="-ins_length", doc=InputDocumentation(doc="*_sd <integer>       : est. standard deviation of respective dataset (default: 10% of corresponding length)\n[replace '*' by nothing, '2' or '_long' as necessary]")), ToolInput(tag="in_unused_reads", input_type=File(optional=True), prefix="-unused_reads", doc=InputDocumentation(doc=": export unused reads in UnusedReads.fa file (default: no)")), ToolInput(tag="in_amos_file", input_type=File(optional=True), prefix="-amos_file", doc=InputDocumentation(doc=": export assembly to AMOS file (default: no export)")), ToolInput(tag="in_alignments", input_type=String(optional=True), prefix="-alignments", doc=InputDocumentation(doc=": export a summary of contig alignment to the reference sequences (default: no)")), ToolInput(tag="in_cov_cut_off", input_type=Int(optional=True), prefix="-cov_cutoff", doc=InputDocumentation(doc=": removal of low coverage nodes AFTER tour bus or allow the system to infer it (default: 3)")), ToolInput(tag="in_min_pair_count", input_type=Int(optional=True), prefix="-min_pair_count", doc=InputDocumentation(doc=": minimum number of paired end connections to justify the scaffolding of two long contigs (default: 4)")), ToolInput(tag="in_min_trans_lgth", input_type=Int(optional=True), prefix="-min_trans_lgth", doc=InputDocumentation(doc=": Minimum length of output transcripts (default: hash-length)")), ToolInput(tag="in_paired_cut_off", input_type=Float(optional=True), prefix="-paired_cutoff", doc=InputDocumentation(doc=": minimum ratio allowed between the numbers of observed and estimated connecting read pairs\nMust be part of the open interval ]0,1[ (default: 0.1)")), ToolInput(tag="in_merge", input_type=String(optional=True), prefix="-merge", doc=InputDocumentation(doc=":Preserve contigs mapping onto long sequences to be preserved from coverage cutoff (default: no)")), ToolInput(tag="in_edge_fraction_cut_off", input_type=Float(optional=True), prefix="-edgeFractionCutoff", doc=InputDocumentation(doc=": Remove edges which represent less than that fraction of a nodes outgoing flow\nMust be part of the open interval ]0,1[ (default: 0.01)")), ToolInput(tag="in_scaffolding", input_type=String(optional=True), prefix="-scaffolding", doc=InputDocumentation(doc=": Allow gaps in transcripts (default: no)")), ToolInput(tag="in_degree_cut_off", input_type=Int(optional=True), prefix="-degree_cutoff", doc=InputDocumentation(doc=": Maximum allowed degree on either end of a contigg to consider it 'unique' (default: 3)")), ToolInput(tag="in_directory", input_type=Directory(), position=0, doc=InputDocumentation(doc=": working directory name"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Oases_V0_1_0().translate("wdl", allow_empty_container=True)

