from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File, Int

Miraconvert_V0_1_0 = CommandToolBuilder(tool="miraconvert", base_command=["miraconvert"], inputs=[ToolInput(tag="in_load_type_where", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="load this type of project files, where fromtype is:")), ToolInput(tag="in_write_sequencesassembly_type", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="write the sequences/assembly to this type (multiple\nmentions of -t are allowed):")), ToolInput(tag="in_append_target_files", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="Append to target files instead of rewriting")), ToolInput(tag="in_adjust_sequence_casewhen", input_type=Boolean(optional=True), prefix="-A", doc=InputDocumentation(doc="Do not Adjust sequence case\nWhen reading formats which define clipping points,\nand saving to formats which do not have clipping\ninformation, miraconvert normally adjusts the case of\nread sequences: lower case for clipped parts, upper\ncase for unclipped parts of reads.\nUse -A if you do not want this. See also -C.\nApplies only to files/formats which do not contain\ncontigs.")), ToolInput(tag="in_blind_datareplaces_bases", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="Blind data\nReplaces all bases in reads/contigs with a 'c'")), ToolInput(tag="in_perform_hard_clip", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="Perform hard clip to reads\nWhen reading formats which define clipping points, will\nsave only the unclipped part into the result file.\nApplies only to files/formats which do not contain\ncontigs.")), ToolInput(tag="in_delete_gap_only", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="Delete gap only columns\nWhen output is contigs: delete columns that are\nentirely gaps (like after having deleted reads during\nediting in gap4 or similar)\nWhen output is reads: delete gaps in reads")), ToolInput(tag="in_filter_read_groups", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="Filter read groups to different files\nWorks only for input files with readgroups (CAF/MAF)\n3 (or 4) files generated: one or two for paired, one\nfor unpaired and one for debris reads.\nReads in paired file are interlaced by default, use -F\ntwice to create separate files.")), ToolInput(tag="in_make_contigs_only", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="Make contigs (only for -t = caf or maf)\nEncase single reads as contig singlets into the CAF/MAF\nfile.")), ToolInput(tag="in_when_given_selects", input_type=File(optional=True), prefix="-n", doc=InputDocumentation(doc="when given, selects only reads or contigs given by\nname in that file.")), ToolInput(tag="in_n_sorts_output", input_type=File(optional=True), prefix="-N", doc=InputDocumentation(doc="like -n, but sorts output according to order given\nin file.")), ToolInput(tag="in_when_used_inverts", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="when -n is used, inverts the selection")), ToolInput(tag="in_t_quality_offset", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="t   FASTQ quality Offset (only for -f = 'fastq')\nOffset of quality values in FASTQ file. Default of 33\nloads Sanger/Phred style files, using 0 tries to\nautomatically recognise.")), ToolInput(tag="in_string_be_parseduseful", input_type=String(optional=True), prefix="-P", doc=InputDocumentation(doc="String with MIRA parameters to be parsed\nUseful when setting parameters affecting consensus\ncalling like -CO:mrpg etc.\nE.g.: -P '454_SETTINGS -CO:mrpg=3'")), ToolInput(tag="in_set_default_quality", input_type=File(optional=True), prefix="-q", doc=InputDocumentation(doc="Set default quality for bases in file types without\nquality values. Furthermore, do not stop if expected\nquality files are missing (e.g. '.fasta')")), ToolInput(tag="in_rename_contigssingletsreads_is", input_type=String(optional=True), prefix="-R", doc=InputDocumentation(doc="Rename contigs/singlets/reads with given name string\nto which a counter is appended.\nKnown bug: will create duplicate names if input\ncontains contigs/singlets as well as free reads, i.e.\nreads not in contigs nor singlets.")), ToolInput(tag="in_namescheme_renaming_reads", input_type=String(optional=True), prefix="-S", doc=InputDocumentation(doc="(name)Scheme for renaming reads, important for\npaired-ends. Only 'solexa' is currently supported.")), ToolInput(tag="in_when_converting_reads", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="When converting single reads, trim/clip away stretches\nof N and X and ends of reads. Note: remember to use -C to\nalso perform a hard clip (e.g. with FASTA as output).")), ToolInput(tag="in_print_version_number", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Print version number and exit")), ToolInput(tag="in_yield_max_clippedpadded", input_type=Int(optional=True), prefix="-Y", doc=InputDocumentation(doc="Yield. Max (clipped/padded) bases to convert.\nWhen used on reads: output will contain first reads of\nfile where length of clipped bases totals at least -Y.\nWhen used on contigs: output will contain first contigs\nof file where length of padded contigs totals at least\n-Y.")), ToolInput(tag="in_extract_contigs_consensus", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="Do not extract contigs (or their consensus), but the\nsequence of the reads they are composed of.")), ToolInput(tag="in_recalculate_consensus_valuesand", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[cCqf]       Recalculate consensus and / or consensus quality values\nand / or SNP feature tags.\n'c' recalc cons & cons qualities (with IUPAC)\n'C' recalc cons & cons qualities (forcing non-IUPAC)\n'q' recalc consensus qualities only\n'f' recalc SNP features\nNote: only the last of cCq is relevant, f works as a\nswitch and can be combined with cQq (e.g. '-r C -r f')\nNote: if the CAF/MAF contains multiple strains,\nrecalculation of cons & cons qualities is forced, you\ncan just influence whether IUPACs are used or not.")), ToolInput(tag="in_split_output_multiple", input_type=File(optional=True), prefix="-s", doc=InputDocumentation(doc="split output into multiple files instead of creating a\nsingle file")), ToolInput(tag="in_fill_holes_effect", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="'fillUp strain genomes'\nFill holes in the genome of one strain (N or @)\nwith sequence from a consensus of other strains\nTakes effect only with -r and -t gbf or fasta/q\nin FASTA/Q: bases filled up are in lower case\nin GBF: bases filled up are in upper case")), ToolInput(tag="in_defines_minimum_quality", input_type=Int(optional=True), prefix="-Q", doc=InputDocumentation(doc="Defines minimum quality a consensus base of a strain\nmust have, consensus bases below this will be 'N'\nDefault: 0\nOnly used with -r, and -f is caf/maf and -t is (fasta\nor gbf)")), ToolInput(tag="in_defines_minimum_coverage", input_type=Int(optional=True), prefix="-V", doc=InputDocumentation(doc="Defines minimum coverage a consensus base of a strain\nmust have, bases with coverage below this will be 'N'\nDefault: 0\nOnly used with -r, and -t is (fasta\nor gbf)")), ToolInput(tag="in_minimum_contig_read", input_type=Int(optional=True), prefix="-x", doc=InputDocumentation(doc="Minimum contig or unclipped read length\nWhen loading, discard all contigs / reads with a\nlength less than this value. Default: 0 (=switched off)\nNote: not applied to reads in contigs!")), ToolInput(tag="in_similar_applies_reads", input_type=Int(optional=True), prefix="-X", doc=InputDocumentation(doc="Similar to -x but applies only to reads and\nthen to the clipped length.")), ToolInput(tag="in_minimum_average_contig", input_type=Int(optional=True), prefix="-y", doc=InputDocumentation(doc="Minimum average contig coverage\nWhen loading, discard all contigs with an\naverage coverage less than this value.\nDefault: 1")), ToolInput(tag="in_minimum_number_reads", input_type=Int(optional=True), prefix="-z", doc=InputDocumentation(doc="Minimum number of reads in contig\nWhen loading, discard all contigs with a\nnumber of reads less than this value.\nDefault: 0 (=switched off)")), ToolInput(tag="in_when_html_number", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="when output as text or HTML: number of bases shown in\none alignment line. Default: 60.")), ToolInput(tag="in_when_html_character", input_type=String(optional=True), prefix="-c", doc=InputDocumentation(doc="when output as text or HTML: character used to pad\nendgaps. Default: ' ' (blank)")), ToolInput(tag="in_var_32", input_type=String(), position=0, doc=InputDocumentation(doc="a complete assembly or single sequences from CAF")), ToolInput(tag="in_var_33", input_type=String(), position=1, doc=InputDocumentation(doc="a complete assembly or single sequences from CAF")), ToolInput(tag="in_sequences_fasta_file", input_type=String(), position=2, doc=InputDocumentation(doc="sequences from a FASTA file")), ToolInput(tag="in_sequences_fastq_file", input_type=String(), position=3, doc=InputDocumentation(doc="sequences from a FASTQ file")), ToolInput(tag="in_phd", input_type=String(), position=0, doc=InputDocumentation(doc="sequences from a PHD file")), ToolInput(tag="in_fof_n_exp", input_type=String(), position=1, doc=InputDocumentation(doc="sequences in EXP files from file of filenames")), ToolInput(tag="in_ace", input_type=String(), position=2, doc=InputDocumentation(doc="sequences or complete assembly to ACE")), ToolInput(tag="in_sequences_complete_assembly_caf", input_type=String(), position=3, doc=InputDocumentation(doc="sequences or complete assembly to CAF")), ToolInput(tag="in_sequences_complete_assembly_maf", input_type=String(), position=4, doc=InputDocumentation(doc="sequences or complete assembly to MAF")), ToolInput(tag="in_sam", input_type=String(), position=5, doc=InputDocumentation(doc="complete assembly to SAM")), ToolInput(tag="in_sam_nbb", input_type=String(), position=6, doc=InputDocumentation(doc="like above, but leaving out reference (backbones) in\nmapping assemblies")), ToolInput(tag="in_gff_three", input_type=Int(), position=0, doc=InputDocumentation(doc="consensus to GFF3")), ToolInput(tag="in_wig", input_type=String(), position=1, doc=InputDocumentation(doc="assembly coverage info to wiggle file")), ToolInput(tag="in_gc_wig", input_type=String(), position=2, doc=InputDocumentation(doc="assembly gc content info to wiggle file")), ToolInput(tag="in_sequences_consensus_toqual", input_type=String(), position=3, doc=InputDocumentation(doc="sequences or consensus to FASTA file (qualities to\n.qual)")), ToolInput(tag="in_sequences_consensus_fastq", input_type=String(), position=4, doc=InputDocumentation(doc="sequences or consensus to FASTQ file")), ToolInput(tag="in_exp", input_type=String(), position=5, doc=InputDocumentation(doc="sequences or complete assembly to EXP files in\ndirectories. Complete assemblies are suited for gap4\nimport as directed assembly.\nNote: using caf2gap to import into gap4 is recommended\nthough")), ToolInput(tag="in_text", input_type=String(), position=6, doc=InputDocumentation(doc="complete assembly to text alignment (only when -f is\ncaf, maf or gbf)")), ToolInput(tag="in_html", input_type=String(), position=7, doc=InputDocumentation(doc="complete assembly to HTML (only when -f is caf, maf or\ngbf)")), ToolInput(tag="in_tcs", input_type=String(), position=8, doc=InputDocumentation(doc="complete assembly to tcs")), ToolInput(tag="in_hsn_p", input_type=String(), position=9, doc=InputDocumentation(doc="surrounding of SNP tags (SROc, SAOc, SIOc) to HTML\n(only when -f is caf, maf or gbf)")), ToolInput(tag="in_as_np", input_type=String(), position=10, doc=InputDocumentation(doc="analysis of SNP tags\n(only when -f is caf, maf or gbf)")), ToolInput(tag="in_c_stats", input_type=String(), position=11, doc=InputDocumentation(doc="contig statistics file like from MIRA\n(only when source contains contigs)")), ToolInput(tag="in_cr_list", input_type=String(), position=12, doc=InputDocumentation(doc="contig read list file like from MIRA\n(only when source contains contigs)")), ToolInput(tag="in_masked_fast_a", input_type=String(), position=13, doc=InputDocumentation(doc="reads where sequencing vector is masked out\n(with X) to FASTA file (qualities to .qual)")), ToolInput(tag="in_s_caf", input_type=String(), position=14, doc=InputDocumentation(doc="sequences or complete assembly to single sequences CAF"))], outputs=[ToolOutput(tag="out_n_sorts_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_n_sorts_output", type_hint=File()), doc=OutputDocumentation(doc="like -n, but sorts output according to order given\nin file.")), ToolOutput(tag="out_split_output_multiple", output_type=File(optional=True), selector=InputSelector(input_to_select="in_split_output_multiple", type_hint=File()), doc=OutputDocumentation(doc="split output into multiple files instead of creating a\nsingle file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Miraconvert_V0_1_0().translate("wdl", allow_empty_container=True)

