from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Int, Boolean, String

Fast5_Subset_V0_1_0 = CommandToolBuilder(tool="fast5_subset", base_command=["fast5_subset"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Path to Fast5 file or directory of Fast5 files")), ToolInput(tag="in_save_path", input_type=Directory(optional=True), prefix="--save_path", doc=InputDocumentation(doc="Folder to output MultiRead subset to")), ToolInput(tag="in_read_id_list", input_type=File(optional=True), prefix="--read_id_list", doc=InputDocumentation(doc="File containing list of read ids to extract (or\nsequencing_summary.txt file)")), ToolInput(tag="in_filename_base", input_type=File(optional=True), prefix="--filename_base", doc=InputDocumentation(doc="Root of output filename, default='batch' ->\n'batch_0.fast5'")), ToolInput(tag="in_batch_size", input_type=Int(optional=True), prefix="--batch_size", doc=InputDocumentation(doc="Number of reads per multi-read file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Maximum number of threads to use")), ToolInput(tag="in_recursive", input_type=Boolean(optional=True), prefix="--recursive", doc=InputDocumentation(doc="Search recursively through folders for MultiRead fast5")), ToolInput(tag="in_file_list", input_type=File(optional=True), prefix="--file_list", doc=InputDocumentation(doc="File containing names of files to search in\n")), ToolInput(tag="in_tool", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_for", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_extracting", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_reads", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_from", input_type=String(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_a", input_type=String(), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_multi_read_fast_five_file", input_type=Int(), position=6, doc=InputDocumentation(doc="")), ToolInput(tag="in_by", input_type=String(), position=7, doc=InputDocumentation(doc="")), ToolInput(tag="in_read_id", input_type=String(), position=8, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_save_path", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_save_path", type_hint=File()), doc=OutputDocumentation(doc="Folder to output MultiRead subset to")), ToolOutput(tag="out_filename_base", output_type=File(optional=True), selector=InputSelector(input_to_select="in_filename_base", type_hint=File()), doc=OutputDocumentation(doc="Root of output filename, default='batch' ->\n'batch_0.fast5'"))], container="quay.io/biocontainers/ont-fast5-api:3.3.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fast5_Subset_V0_1_0().translate("wdl")

