from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int

Correct_V0_1_0 = CommandToolBuilder(tool="correct", base_command=["correct"], inputs=[ToolInput(tag="in_fastq_file_reads", input_type=File(optional=True), prefix="-r", doc=InputDocumentation(doc="Fastq file of reads")), ToolInput(tag="in_file_containing_names", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="File containing fastq file names, one per line or\ntwo per line for paired end reads.")), ToolInput(tag="in_write_output_files", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="Write output files as gzipped.")), ToolInput(tag="in_kmer_size_correct", input_type=Int(optional=True), prefix="-k", doc=InputDocumentation(doc="K-mer size to correct.")), ToolInput(tag="in_file_containing_counts", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="File containing kmer counts in format `seq  count`.\nCan be gzipped.")), ToolInput(tag="in_file_containing_bithash", input_type=File(optional=True), prefix="-b", doc=InputDocumentation(doc="File containing saved bithash.")), ToolInput(tag="in_separate_trusteduntrusted_kmers_num", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="Separate trusted/untrusted kmers at cutoff <num>")), ToolInput(tag="in_separate_trusteduntrusted_kmers_function", input_type=File(optional=True), prefix="-a", doc=InputDocumentation(doc="Separate trusted/untrusted kmers as a function of AT\ncontent, with cutoffs found in <file>, one per line")), ToolInput(tag="in_use_num_openmp", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="Use <num> openMP threads")), ToolInput(tag="in_return_only_reads", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="=30\nReturn only reads corrected and/or trimmed to >= <num>\nbp")), ToolInput(tag="in_quality_value_ascii", input_type=Int(optional=True), prefix="-q", doc=InputDocumentation(doc="Quality value ascii scale, generally 64 or 33. If not\nspecified, it will guess.")), ToolInput(tag="in_use_bwa_trim", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="=3\nUse BWA trim parameter <num>")), ToolInput(tag="in_output_errors_reads", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="Output errors reads even if they can't be corrected,\nmaintaining paired end reads.")), ToolInput(tag="in_headers", input_type=Boolean(optional=True), prefix="--headers", doc=InputDocumentation(doc="Output only the original read headers without\ncorrection messages")), ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="--log", doc=InputDocumentation(doc="Output a log of all corrections into *.log as\n'quality position new_nt old_nt'\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Correct_V0_1_0().translate("wdl", allow_empty_container=True)

