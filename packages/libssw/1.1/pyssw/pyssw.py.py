from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Pyssw_Py_V0_1_0 = CommandToolBuilder(tool="pyssw.py", base_command=["pyssw.py"], inputs=[ToolInput(tag="in_s_libpath", input_type=File(optional=True), prefix="--sLibPath", doc=InputDocumentation(doc="path of libssw.so")), ToolInput(tag="in_n_match", input_type=Int(optional=True), prefix="--nMatch", doc=InputDocumentation(doc="a positive integer as the score for a match in genome\nsequence alignment. [default: 2]")), ToolInput(tag="in_n_mismatch", input_type=Int(optional=True), prefix="--nMismatch", doc=InputDocumentation(doc="a positive integer as the score for a mismatch in\ngenome sequence alignment. [default: 2]")), ToolInput(tag="in_n_open", input_type=Int(optional=True), prefix="--nOpen", doc=InputDocumentation(doc="a positive integer as the penalty for the gap opening\nin genome sequence alignment. [default: 3]")), ToolInput(tag="in_next", input_type=Int(optional=True), prefix="--nExt", doc=InputDocumentation(doc="a positive integer as the penalty for the gap\nextension in genome sequence alignment. [default: 1]")), ToolInput(tag="in_b_protien", input_type=Boolean(optional=True), prefix="--bProtien", doc=InputDocumentation(doc="Do protein sequence alignment. Without this option,\nthe ssw_test will do genome sequence alignment.\n[default: False]")), ToolInput(tag="in_s_matrix", input_type=File(optional=True), prefix="--sMatrix", doc=InputDocumentation(doc="a file for either Blosum or Pam weight matrix.\n[default: Blosum50]")), ToolInput(tag="in_b_path", input_type=Boolean(optional=True), prefix="--bPath", doc=InputDocumentation(doc="Return the alignment path. [default: False]")), ToolInput(tag="in_n_thr", input_type=Int(optional=True), prefix="--nThr", doc=InputDocumentation(doc="a positive integer. Only output the alignments with\nthe Smith-Waterman score >= N.")), ToolInput(tag="in_b_best", input_type=Boolean(optional=True), prefix="--bBest", doc=InputDocumentation(doc="The best alignment will be picked between the original\nread alignment and the reverse complement read\nalignment. [default: False]")), ToolInput(tag="in_b_sam", input_type=Boolean(optional=True), prefix="--bSam", doc=InputDocumentation(doc="Output in SAM format. [default: no header]")), ToolInput(tag="in_b_header", input_type=Boolean(optional=True), prefix="--bHeader", doc=InputDocumentation(doc="If -s is used, include header in SAM output.")), ToolInput(tag="in_target", input_type=String(), position=0, doc=InputDocumentation(doc="targe file")), ToolInput(tag="in_query", input_type=String(), position=1, doc=InputDocumentation(doc="query file"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pyssw_Py_V0_1_0().translate("wdl", allow_empty_container=True)

