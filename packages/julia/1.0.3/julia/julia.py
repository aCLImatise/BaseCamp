from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Julia_V0_1_0 = CommandToolBuilder(tool="julia", base_command=["julia"], inputs=[ToolInput(tag="in_project", input_type=Boolean(optional=True), prefix="--project", doc=InputDocumentation(doc="[={<dir>|@.}]    Set <dir> as the home project/environment")), ToolInput(tag="in_sys_image", input_type=File(optional=True), prefix="--sysimage", doc=InputDocumentation(doc="Start up with the given system image file")), ToolInput(tag="in_home", input_type=String(optional=True), prefix="--home", doc=InputDocumentation(doc="Set location of `julia` executable")), ToolInput(tag="in_startup_file", input_type=Boolean(optional=True), prefix="--startup-file", doc=InputDocumentation(doc="={yes|no}   Load `~/.julia/config/startup.jl`")), ToolInput(tag="in_handle_signals", input_type=Boolean(optional=True), prefix="--handle-signals", doc=InputDocumentation(doc="={yes|no} Enable or disable Julia's default signal handlers")), ToolInput(tag="in_sys_image_native_code", input_type=Boolean(optional=True), prefix="--sysimage-native-code", doc=InputDocumentation(doc="={yes|no}\nUse native code from system image if available")), ToolInput(tag="in_compiled_modules", input_type=Boolean(optional=True), prefix="--compiled-modules", doc=InputDocumentation(doc="={yes|no}\nEnable or disable incremental precompilation of modules")), ToolInput(tag="in_eval", input_type=String(optional=True), prefix="--eval", doc=InputDocumentation(doc="Evaluate <expr>")), ToolInput(tag="in_print", input_type=String(optional=True), prefix="--print", doc=InputDocumentation(doc="Evaluate <expr> and display the result")), ToolInput(tag="in_load", input_type=File(optional=True), prefix="--load", doc=InputDocumentation(doc="Load <file> immediately on all processors")), ToolInput(tag="in_procs", input_type=Boolean(optional=True), prefix="--procs", doc=InputDocumentation(doc="{N|auto}      Integer value N launches N additional local worker processes\n'auto' launches as many workers as the number of local CPU threads (logical cores)")), ToolInput(tag="in_machine_file", input_type=File(optional=True), prefix="--machine-file", doc=InputDocumentation(doc="Run processes on hosts listed in <file>")), ToolInput(tag="in_interactive_mode_repl", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="Interactive mode; REPL runs and isinteractive() is true")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Quiet startup: no banner, suppress REPL warnings")), ToolInput(tag="in_banner", input_type=Boolean(optional=True), prefix="--banner", doc=InputDocumentation(doc="={yes|no|auto}    Enable or disable startup banner")), ToolInput(tag="in_color", input_type=Boolean(optional=True), prefix="--color", doc=InputDocumentation(doc="={yes|no|auto}     Enable or disable color text")), ToolInput(tag="in_history_file", input_type=Boolean(optional=True), prefix="--history-file", doc=InputDocumentation(doc="={yes|no}   Load or save history")), ToolInput(tag="in_dep_warn", input_type=Boolean(optional=True), prefix="--depwarn", doc=InputDocumentation(doc="={yes|no|error}  Enable or disable syntax and method deprecation warnings ('error' turns warnings into errors)")), ToolInput(tag="in_warn_overwrite", input_type=Boolean(optional=True), prefix="--warn-overwrite", doc=InputDocumentation(doc="={yes|no} Enable or disable method overwrite warnings")), ToolInput(tag="in_cpu_target", input_type=String(optional=True), prefix="--cpu-target", doc=InputDocumentation(doc="Limit usage of CPU features up to <target>; set to 'help' to see the available options")), ToolInput(tag="in_optimize", input_type=String(optional=True), prefix="--optimize", doc=InputDocumentation(doc="Set the optimization level (default level is 2 if unspecified or 3 if used without a level)")), ToolInput(tag="in_enable_set_level", input_type=Int(optional=True), prefix="-g", doc=InputDocumentation(doc="Enable / Set the level of debug info generation (default level is 1 if unspecified or 2 if used without a level)")), ToolInput(tag="in_inline", input_type=Boolean(optional=True), prefix="--inline", doc=InputDocumentation(doc="={yes|no}         Control whether inlining is permitted, including overriding @inline declarations")), ToolInput(tag="in_check_bounds", input_type=Boolean(optional=True), prefix="--check-bounds", doc=InputDocumentation(doc="={yes|no}   Emit bounds checks always or never (ignoring declarations)")), ToolInput(tag="in_math_mode", input_type=String(optional=True), prefix="--math-mode", doc=InputDocumentation(doc="Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)")), ToolInput(tag="in_code_coverage", input_type=Boolean(optional=True), prefix="--code-coverage", doc=InputDocumentation(doc="={none|user|all}, --code-coverage\nCount executions of source lines (omitting setting is equivalent to 'user')")), ToolInput(tag="in_track_allocation", input_type=Boolean(optional=True), prefix="--track-allocation", doc=InputDocumentation(doc="={none|user|all}, --track-allocation\nCount bytes allocated by each source line\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Julia_V0_1_0().translate("wdl", allow_empty_container=True)

