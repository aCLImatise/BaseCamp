from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, Float, String

Dicey_Search_V0_1_0 = CommandToolBuilder(tool="dicey_search", base_command=["dicey", "search"], inputs=[ToolInput(tag="in_arg_genome_file", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --genome ] arg                   genome file")), ToolInput(tag="in_arg_primer_config", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --config ] arg (='./src/primer3_config/')\nprimer3 config directory")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg                  output file")), ToolInput(tag="in_arg_kmer_size", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="[ --kmer ] arg (=15)               k-mer size")), ToolInput(tag="in_arg_max_number", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --maxmatches ] arg (=10000)      max. number of matches per k-mer")), ToolInput(tag="in_arg_max_neighborhood", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="[ --maxNeighborhood ] arg (=10000) max. neighborhood size")), ToolInput(tag="in_arg_neighborhood_distance", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --distance ] arg (=1)            neighborhood distance")), ToolInput(tag="in_arg_prune_primer", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="[ --pruneprimer ] arg              prune primer threshold")), ToolInput(tag="in_use_hamming_neighborhood", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --hamming ]                      use hamming neighborhood instead of\nedit distance")), ToolInput(tag="in_arg_min_primer", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --cutTemp ] arg (=45)            min. primer melting temperature")), ToolInput(tag="in_arg_max_pcr", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --maxProdSize ] arg (=15000)     max. PCR Product size")), ToolInput(tag="in_cut_off_penalty", input_type=Int(optional=True), prefix="--cutoffPenalty", doc=InputDocumentation(doc="(=-1)             max. penalty for products (-1 = keep\nall)")), ToolInput(tag="in_penalty_tm_diff", input_type=Float(optional=True), prefix="--penaltyTmDiff", doc=InputDocumentation(doc="(=0.59999999999999998)\nmultiplication factor for deviation of\nprimer Tm penalty")), ToolInput(tag="in_penalty_tm_mismatch", input_type=Float(optional=True), prefix="--penaltyTmMismatch", doc=InputDocumentation(doc="(=0.40000000000000002)\nmultiplication factor for Tm pair\ndifference penalty")), ToolInput(tag="in_penalty_length", input_type=Int(optional=True), prefix="--penaltyLength", doc=InputDocumentation(doc="(=0.001)          multiplication factor for amplicon\nlength penalty")), ToolInput(tag="in_ent_temp", input_type=Int(optional=True), prefix="--enttemp", doc=InputDocumentation(doc="(=37)                   temperature for entropie and entalpie\ncalculation in Celsius")), ToolInput(tag="in_monovalent", input_type=Int(optional=True), prefix="--monovalent", doc=InputDocumentation(doc="(=50)                concentration of monovalent ions in")), ToolInput(tag="in_dna", input_type=Int(optional=True), prefix="--dna", doc=InputDocumentation(doc="(=50)                       concentration of annealing(!) Oligos in")), ToolInput(tag="in_mmol", input_type=String(), position=0, doc=InputDocumentation(doc="--divalent arg (=1.5)                 concentration of divalent ions in mMol")), ToolInput(tag="in_nmol", input_type=String(), position=1, doc=InputDocumentation(doc="--dntp arg (=0.59999999999999998)     the sum  of all dNTPs in mMol"))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --outfile ] arg                  output file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dicey_Search_V0_1_0().translate("wdl", allow_empty_container=True)

