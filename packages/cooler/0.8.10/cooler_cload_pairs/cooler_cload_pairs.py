from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String, Float, Directory

Cooler_Cload_Pairs_V0_1_0 = CommandToolBuilder(tool="cooler_cload_pairs", base_command=["cooler", "cload", "pairs"], inputs=[ToolInput(tag="in_metadata", input_type=File(optional=True), prefix="--metadata", doc=InputDocumentation(doc="Path to JSON file containing user metadata.")), ToolInput(tag="in_assembly", input_type=Int(optional=True), prefix="--assembly", doc=InputDocumentation(doc="Name of genome assembly (e.g. hg19, mm10)")), ToolInput(tag="in_chrom_one", input_type=Int(optional=True), prefix="--chrom1", doc=InputDocumentation(doc="chrom1 field number (one-based)  [required]")), ToolInput(tag="in_pos_one", input_type=Int(optional=True), prefix="--pos1", doc=InputDocumentation(doc="pos1 field number (one-based)  [required]")), ToolInput(tag="in_chrom_two", input_type=Int(optional=True), prefix="--chrom2", doc=InputDocumentation(doc="chrom2 field number (one-based)  [required]")), ToolInput(tag="in_pos_two", input_type=Int(optional=True), prefix="--pos2", doc=InputDocumentation(doc="pos2 field number (one-based)  [required]")), ToolInput(tag="in_chunksize", input_type=Int(optional=True), prefix="--chunksize", doc=InputDocumentation(doc="Number of input lines to load at a time")), ToolInput(tag="in_zero_based", input_type=Boolean(optional=True), prefix="--zero-based", doc=InputDocumentation(doc="Positions are zero-based  [default: False]")), ToolInput(tag="in_comment_char", input_type=String(optional=True), prefix="--comment-char", doc=InputDocumentation(doc="Comment character that indicates lines to")), ToolInput(tag="in_no_symmetric_upper", input_type=Boolean(optional=True), prefix="--no-symmetric-upper", doc=InputDocumentation(doc="Create a complete square matrix without\nimplicit symmetry. This allows for distinct\nupper- and lower-triangle values")), ToolInput(tag="in_input_copy_status", input_type=Boolean(optional=True), prefix="--input-copy-status", doc=InputDocumentation(doc="[unique|duplex]\nCopy status of input data when using\nsymmetric-upper storage. | `unique`:\nIncoming data comes from a unique half of a\nsymmetric map, regardless of how the\ncoordinates of a pair are ordered. `duplex`:\nIncoming data contains upper- and lower-\ntriangle duplicates. All input records that\nmap to the lower triangle will be discarded!\n| If you wish to treat lower- and upper-\ntriangle input data as distinct, use the\n``--no-symmetric-upper`` option.   [default:\nunique]")), ToolInput(tag="in_field", input_type=Float(optional=True), prefix="--field", doc=InputDocumentation(doc="Specify quantitative input fields to\naggregate into value columns using the\nsyntax ``--field <field-name>=<field-\nnumber>``. Optionally, append ``:`` followed\nby ``dtype=<dtype>`` to specify the data\ntype (e.g. float), and/or ``agg=<agg>`` to\nspecify an aggregation function different\nfrom sum (e.g. mean). Field numbers are\n1-based. Passing 'count' as the target name\nwill override the default behavior of\nstoring pair counts. Repeat the ``--field``\noption for each additional field.")), ToolInput(tag="in_temp_dir", input_type=Directory(optional=True), prefix="--temp-dir", doc=InputDocumentation(doc="Create temporary files in a specified\ndirectory. Pass ``-`` to use the platform\ndefault temp dir.")), ToolInput(tag="in_no_delete_temp", input_type=Boolean(optional=True), prefix="--no-delete-temp", doc=InputDocumentation(doc="Do not delete temporary files when finished.")), ToolInput(tag="in_max_merge", input_type=Int(optional=True), prefix="--max-merge", doc=InputDocumentation(doc="Maximum number of chunks to merge before\ninvoking recursive merging  [default: 200]")), ToolInput(tag="in_storage_options", input_type=Int(optional=True), prefix="--storage-options", doc=InputDocumentation(doc="Options to modify the data filter pipeline.\nProvide as a comma-separated list of key-\nvalue pairs of the form 'k1=v1,k2=v2,...'.\nSee http://docs.h5py.org/en/stable/high/data\nset.html#filter-pipeline for more details.")), ToolInput(tag="in_bins", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_pairs_path", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_cool_path", input_type=String(), position=2, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/cooler:0.8.10--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cooler_Cload_Pairs_V0_1_0().translate("wdl")

