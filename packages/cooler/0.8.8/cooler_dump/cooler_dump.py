from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Float, Int, File

Cooler_Dump_V0_1_0 = CommandToolBuilder(tool="cooler_dump", base_command=["cooler", "dump"], inputs=[ToolInput(tag="in_table", input_type=Boolean(optional=True), prefix="--table", doc=InputDocumentation(doc="[chroms|bins|pixels]\nWhich table to dump. Choosing 'chroms' or\n'bins' will cause all pixel-related options\nto be ignored. Note that for coolers stored\nin symmetric-upper mode, 'pixels' only holds\nthe upper triangle values of the matrix.\n[default: pixels]")), ToolInput(tag="in_columns", input_type=String(optional=True), prefix="--columns", doc=InputDocumentation(doc="[,]      Restrict output to a subset of columns,\nprovided as a comma-separated list.")), ToolInput(tag="in_header", input_type=Boolean(optional=True), prefix="--header", doc=InputDocumentation(doc="Print the header of column names as the\nfirst row.  [default: False]")), ToolInput(tag="in_na_rep", input_type=String(optional=True), prefix="--na-rep", doc=InputDocumentation(doc="Missing data representation. Default is\nempty ''.")), ToolInput(tag="in_float_format", input_type=Float(optional=True), prefix="--float-format", doc=InputDocumentation(doc="Format string for floating point numbers\n(e.g. '.12g', '03.2f').  [default: g]")), ToolInput(tag="in_range", input_type=Int(optional=True), prefix="--range", doc=InputDocumentation(doc="The coordinates of a genomic region shown\nalong the row dimension, in UCSC-style\nnotation. (Example:\nchr1:10,000,000-11,000,000). If omitted, the\nentire contact matrix is printed.")), ToolInput(tag="in_range_two", input_type=Int(optional=True), prefix="--range2", doc=InputDocumentation(doc="The coordinates of a genomic region shown\nalong the column dimension. If omitted, the\ncolumn range is the same as the row range.")), ToolInput(tag="in_matrix", input_type=Boolean(optional=True), prefix="--matrix", doc=InputDocumentation(doc="For coolers stored in symmetric-upper mode,\nensure any empty areas of the genomic query\nwindow are populated by generating the\nlower-triangular pixels.  [default: False]")), ToolInput(tag="in_no_balance", input_type=Boolean(optional=True), prefix="--no-balance", doc=InputDocumentation(doc="Apply balancing weights to data. This will\nprint an extra column called `balanced`\n[default: False]")), ToolInput(tag="in_join", input_type=Boolean(optional=True), prefix="--join", doc=InputDocumentation(doc="Print the full chromosome bin coordinates\ninstead of bin IDs. This will replace the\n`bin1_id` column with `chrom1`, `start1`,\nand `end1`, and the `bin2_id` column with\n`chrom2`, `start2` and `end2`.  [default:\nFalse]")), ToolInput(tag="in_annotate", input_type=Int(optional=True), prefix="--annotate", doc=InputDocumentation(doc="[,]         Join additional columns from the bin table\nagainst the pixels. Provide a comma\nseparated list of column names (no spaces).\nThe merged columns will be suffixed by '1'\nand '2' accordingly.")), ToolInput(tag="in_one_based_ids", input_type=Boolean(optional=True), prefix="--one-based-ids", doc=InputDocumentation(doc="Print bin IDs as one-based rather than zero-")), ToolInput(tag="in_chunksize", input_type=Int(optional=True), prefix="--chunksize", doc=InputDocumentation(doc="Sets the amount of pixel data loaded from\ndisk at one time. Can affect the performance\nof joins on high resolution datasets.\nDefault is to load as many rows as there are\nbins.")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Output text file If .gz extension is\ndetected, file is written using zlib.\nDefault behavior is to stream to stdout.")), ToolInput(tag="in_based_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--one-based-starts              Print start coordinates as one-based rather"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output text file If .gz extension is\ndetected, file is written using zlib.\nDefault behavior is to stream to stdout."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cooler_Dump_V0_1_0().translate("wdl", allow_empty_container=True)

