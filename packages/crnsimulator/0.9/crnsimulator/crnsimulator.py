from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Crnsimulator_V0_1_0 = CommandToolBuilder(tool="crnsimulator", base_command=["crnsimulator"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print logging output. (-vv increases verbosity.)\n(default: 0)")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logfile", doc=InputDocumentation(doc="Redirect logging information to a file. (default: )")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite existing files (default: False)")), ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dryrun", doc=InputDocumentation(doc="Do not run the simulation, only write the files.\n(default: False)")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Name of ODE library files. (default: odesystem)")), ToolInput(tag="in_jacobian", input_type=Boolean(optional=True), prefix="--jacobian", doc=InputDocumentation(doc="Symbolic calculation of Jacobi-Matrix. This may\ngenerate a very large simulation file. (default:\nFalse)")), ToolInput(tag="in_t_zero", input_type=Int(optional=True), prefix="--t0", doc=InputDocumentation(doc="First time point of the time-course. (default: 0)")), ToolInput(tag="in_t_eight", input_type=Int(optional=True), prefix="--t8", doc=InputDocumentation(doc="End point of simulation time. (default: 100)")), ToolInput(tag="in_pzero", input_type=Int(optional=True), prefix="--p0", doc=InputDocumentation(doc="=<flt> [<int/str>=<flt> ...]\nVector of initial species concentrations. E.g. '--p0\n1=0.5 3=0.7' stands for 1st species at a concentration\nof 0.5 and 3rd species at a concentration of 0.7. You\nmay chose to address species directly by name, e.g.:\n--p0 C=0.5. (default: None)")), ToolInput(tag="in_atol", input_type=String(optional=True), prefix="--atol", doc=InputDocumentation(doc="Specify absolute tolerance for the solver. (default:\nNone)")), ToolInput(tag="in_rtol", input_type=String(optional=True), prefix="--rtol", doc=InputDocumentation(doc="Specify relative tolerance for the solver. (default:\nNone)")), ToolInput(tag="in_mx_step", input_type=Int(optional=True), prefix="--mxstep", doc=InputDocumentation(doc="Maximum number of steps allowed for each integration\npoint in t. (default: 0)")), ToolInput(tag="in_t_lin", input_type=Int(optional=True), prefix="--t-lin", doc=InputDocumentation(doc="Returns --t-lin evenly spaced numbers on a linear\nscale from --t0 to --t8. (default: 500)")), ToolInput(tag="in_t_log", input_type=Int(optional=True), prefix="--t-log", doc=InputDocumentation(doc="Returns --t-log evenly spaced numbers on a logarithmic\nscale from --t0 to --t8. (default: None)")), ToolInput(tag="in_list_labels", input_type=Boolean(optional=True), prefix="--list-labels", doc=InputDocumentation(doc="Print all species and exit. (default: False)")), ToolInput(tag="in_labels", input_type=String(optional=True), prefix="--labels", doc=InputDocumentation(doc="+ [<str>+ ...]\nSpecify the (order of) species which should appear in\nthe pyplot legend, as well as the order of species for\nnxy output format. (default: [])")), ToolInput(tag="in_labels_strict", input_type=Boolean(optional=True), prefix="--labels-strict", doc=InputDocumentation(doc="When using pyplot, only plot tracjectories\ncorresponding to labels, when using nxy, only print\nthe trajectories corresponding to labels. (default:\nFalse)")), ToolInput(tag="in_n_xy", input_type=Boolean(optional=True), prefix="--nxy", doc=InputDocumentation(doc="Print time course to STDOUT in nxy format. (default:\nFalse)")), ToolInput(tag="in_header", input_type=Boolean(optional=True), prefix="--header", doc=InputDocumentation(doc="Print header for trajectories. (default: False)")), ToolInput(tag="in_py_plot", input_type=File(optional=True), prefix="--pyplot", doc=InputDocumentation(doc="Specify a filename to plot the ODE simulation.\n(default: )")), ToolInput(tag="in_py_plot_xlim", input_type=String(optional=True), prefix="--pyplot-xlim", doc=InputDocumentation(doc="<flt>\nSpecify the limits of the x-axis. (default: None)")), ToolInput(tag="in_py_plot_ylim", input_type=String(optional=True), prefix="--pyplot-ylim", doc=InputDocumentation(doc="<flt>\nSpecify the limits of the y-axis. (default: None)\n"))], outputs=[], container="quay.io/biocontainers/crnsimulator:0.9--pyh5bfb8f1_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Crnsimulator_V0_1_0().translate("wdl")

