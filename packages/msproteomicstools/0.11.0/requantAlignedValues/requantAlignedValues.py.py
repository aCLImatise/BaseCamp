from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, File, Int, Boolean

Requantalignedvalues_Py_V0_1_0 = CommandToolBuilder(tool="requantAlignedValues.py", base_command=["requantAlignedValues.py"], inputs=[ToolInput(tag="in_in", input_type=Array(t=String(), optional=True), prefix="--in", doc=InputDocumentation(doc="A list of transformation files in the same folder as\nthe .chrom.mzML files")), ToolInput(tag="in_peak_groups_in_file", input_type=File(optional=True), prefix="--peakgroups_infile", doc=InputDocumentation(doc="Infile containing peakgroups (outfile from\nfeature_alignment.py)")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Output file with imputed values")), ToolInput(tag="in_file_format", input_type=File(optional=True), prefix="--file_format", doc=InputDocumentation(doc="Which input file format is used (openswath, mprophet\nor peakview)")), ToolInput(tag="in_out_matrix", input_type=String(optional=True), prefix="--out_matrix", doc=InputDocumentation(doc="Matrix containing one peak group per row (supports\n.csv, .tsv or .xls)")), ToolInput(tag="in_matrix_output_method", input_type=String(optional=True), prefix="--matrix_output_method", doc=InputDocumentation(doc="Which columns are written besides Intensity (none, RT,\nscore, source or full)")), ToolInput(tag="in_border_option", input_type=Int(optional=True), prefix="--border_option", doc=InputDocumentation(doc="How to determine integration border (possible values:\nmax_width, mean, median). Max width will use the\nmaximal possible width (most conservative since it\nwill overestimate the background signal).")), ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry_run", doc=InputDocumentation(doc="Perform a dry run only")), ToolInput(tag="in_test", input_type=Boolean(optional=True), prefix="--test", doc=InputDocumentation(doc="For running the tests (does not add a random id to the\nresults)")), ToolInput(tag="in_cache_in_memory", input_type=Boolean(optional=True), prefix="--cache_in_memory", doc=InputDocumentation(doc="Cache data from a single run in memory")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="Which method to use (singleShortestPath,\nsingleClosestRun, reference)")), ToolInput(tag="in_realign_runs", input_type=File(optional=True), prefix="--realign_runs", doc=InputDocumentation(doc="How to re-align runs in retention time ('diRT': use\nonly deltaiRT from the input file, 'linear': perform a\nlinear regression using best peakgroups, 'splineR':\nperform a spline fit using R, 'splineR_external':\nperform a spline fit using R (start an R process using\nthe command line), 'splinePy' use Python native spline\nfrom scikits.datasmooth (slow!), 'lowess': use Robust\nlocally weighted regression (lowess smoother),\n'nonCVSpline, CVSpline': splines with and without\ncross-validation, 'Earth' : use Multivariate Adaptive\nRegression Splines using py-earth")), ToolInput(tag="in_alignment_score", input_type=Int(optional=True), prefix="--alignment_score", doc=InputDocumentation(doc="Minimal score needed for a feature to be considered\nfor alignment between runs")), ToolInput(tag="in_disable_isotopic_grouping", input_type=Boolean(optional=True), prefix="--disable_isotopic_grouping", doc=InputDocumentation(doc="Disable grouping of isotopic variants by\npeptide_group_label, thus disabling matching of\nisotopic variants of the same peptide across channels.\nIf turned off, each isotopic channel will be matched\nindependently of the other. If enabled, the more\ncertain identification will be used to infer the\nlocation of the peak in the other channel.")), ToolInput(tag="in_disable_isotopic_transfer", input_type=Boolean(optional=True), prefix="--disable_isotopic_transfer", doc=InputDocumentation(doc="Disable the transfer of isotopic boundaries in all\ncases. If enabled (default), the best (best score)\nisotopic channel dictates the peak boundaries and all\nother channels use those boundaries. This ensures\nconsistency in peak picking in all cases.\n")), ToolInput(tag="in_verbosity", input_type=String(), position=0, doc=InputDocumentation(doc="--do_single_run       Only do a single run"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output file with imputed values"))], container="quay.io/biocontainers/msproteomicstools:0.11.0--py27ha968a36_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Requantalignedvalues_Py_V0_1_0().translate("wdl")

