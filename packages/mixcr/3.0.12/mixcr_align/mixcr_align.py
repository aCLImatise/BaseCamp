from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Mixcr_Align_V0_1_0 = CommandToolBuilder(tool="mixcr_align", base_command=["mixcr", "align"], inputs=[ToolInput(tag="in_no_warnings", input_type=Boolean(optional=True), prefix="--no-warnings", doc=InputDocumentation(doc="Suppress all warning messages.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose warning messages.")), ToolInput(tag="in_force_overwrite", input_type=File(optional=True), prefix="--force-overwrite", doc=InputDocumentation(doc="Force overwrite of output file(s).")), ToolInput(tag="in_overwrite_if_required", input_type=Boolean(optional=True), prefix="--overwrite-if-required", doc=InputDocumentation(doc="Overwrite output file if it is corrupted or if it was generated from\ndifferent input file or with different parameters. -f / --force-overwrite\noverrides this option.")), ToolInput(tag="in_species", input_type=File(optional=True), prefix="--species", doc=InputDocumentation(doc="Species (organism), as specified in library file or taxon id.\nPossible values: hs, HomoSapiens, musmusculus, mmu, hsa, 9606, 10090 etc.")), ToolInput(tag="in_report", input_type=File(optional=True), prefix="--report", doc=InputDocumentation(doc="Report file (human readable version, see -j / --json-report for machine\nreadable report)")), ToolInput(tag="in_json_report", input_type=File(optional=True), prefix="--json-report", doc=InputDocumentation(doc="JSON formatted report file")), ToolInput(tag="in_vdjc_gene_library", input_type=String(optional=True), prefix="--library", doc=InputDocumentation(doc="V/D/J/C gene library")), ToolInput(tag="in_read_preprocessing_trimming_threshold", input_type=String(optional=True), prefix="--trimming-quality-threshold", doc=InputDocumentation(doc="Read pre-processing: trimming quality threshold")), ToolInput(tag="in_trimming_window_size", input_type=Int(optional=True), prefix="--trimming-window-size", doc=InputDocumentation(doc="Read pre-processing: trimming window size")), ToolInput(tag="in_parameters", input_type=String(optional=True), prefix="--parameters", doc=InputDocumentation(doc="Parameters preset.")), ToolInput(tag="in_stringstring_overrides_default", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="<String=String>       Overrides default aligner parameter values")), ToolInput(tag="in_write_all", input_type=Boolean(optional=True), prefix="--write-all", doc=InputDocumentation(doc="Write alignment results for all input reads (even if alignment failed).")), ToolInput(tag="in_not_aligned_r_one", input_type=Int(optional=True), prefix="--not-aligned-R1", doc=InputDocumentation(doc="Pipe not aligned R1 reads into separate file.")), ToolInput(tag="in_not_aligned_r_two", input_type=Int(optional=True), prefix="--not-aligned-R2", doc=InputDocumentation(doc="Pipe not aligned R2 reads into separate file.")), ToolInput(tag="in_limit", input_type=Int(optional=True), prefix="--limit", doc=InputDocumentation(doc="Maximal number of reads to process")), ToolInput(tag="in_threads", input_type=String(optional=True), prefix="--threads", doc=InputDocumentation(doc="Processing threads")), ToolInput(tag="in_scr", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_align", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_failed_read_sr_one", input_type=Int(optional=True), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_20", input_type=String(optional=True), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_21", input_type=String(optional=True), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_report_file", input_type=String(optional=True), position=5, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_force_overwrite", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force_overwrite", type_hint=File()), doc=OutputDocumentation(doc="Force overwrite of output file(s)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mixcr_Align_V0_1_0().translate("wdl", allow_empty_container=True)

