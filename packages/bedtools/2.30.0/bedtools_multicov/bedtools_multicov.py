from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Bedtools_Multicov_V0_1_0 = CommandToolBuilder(tool="bedtools_multicov", base_command=["bedtools", "multicov"], inputs=[ToolInput(tag="in_bams", input_type=Boolean(optional=True), prefix="-bams", doc=InputDocumentation(doc="The bam files.")), ToolInput(tag="in_bed", input_type=Boolean(optional=True), prefix="-bed", doc=InputDocumentation(doc="The bed file.")), ToolInput(tag="in_split", input_type=Boolean(optional=True), prefix="-split", doc=InputDocumentation(doc="Treat 'split' BAM or BED12 entries as distinct BED intervals.")), ToolInput(tag="in_require_same_strandedness", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Require same strandedness.  That is, only report hits in B\nthat overlap A on the _same_ strand.\n- By default, overlaps are reported without respect to strand.")), ToolInput(tag="in_require_different_strandedness", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="Require different strandedness.  That is, only report hits in B\nthat overlap A on the _opposite_ strand.\n- By default, overlaps are reported without respect to strand.")), ToolInput(tag="in_minimum_overlap_required", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Minimum overlap required as a fraction of each -bed record.\n- Default is 1E-9 (i.e., 1bp).\n- FLOAT (e.g. 0.50)")), ToolInput(tag="in_require_overlap_be", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="Require that the fraction overlap be reciprocal for each -bed and B.\n- In other words, if -f is 0.90 and -r is used, this requires\nthat B overlap 90% of each -bed and the -bed record _also_ overlaps 90% of B.")), ToolInput(tag="in_minimum_mapping_quality", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="Minimum mapping quality allowed. Default is 0.")), ToolInput(tag="in_include_duplicate_reads", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="Include duplicate reads.  Default counts non-duplicates only")), ToolInput(tag="in_include_failedqc_reads", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="Include failed-QC reads.  Default counts pass-QC reads only")), ToolInput(tag="in_only_count_pairs", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="Only count proper pairs.  Default counts all alignments with\nMAPQ > -q argument, regardless of the BAM FLAG field.\n"))], outputs=[], container="quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bedtools_Multicov_V0_1_0().translate("wdl")

