from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Bedtools_Pairtobed_V0_1_0 = CommandToolBuilder(tool="bedtools_pairtobed", base_command=["bedtools", "pairtobed"], inputs=[ToolInput(tag="in_a_bam", input_type=Boolean(optional=True), prefix="-abam", doc=InputDocumentation(doc="The A input file is in BAM format.  Output will be BAM as well. Replaces -a.\n- Requires BAM to be grouped or sorted by query.")), ToolInput(tag="in_ub_am", input_type=Boolean(optional=True), prefix="-ubam", doc=InputDocumentation(doc="Write uncompressed BAM output. Default writes compressed BAM.\nis to write output in BAM when using -abam.")), ToolInput(tag="in_bed_pe", input_type=Boolean(optional=True), prefix="-bedpe", doc=InputDocumentation(doc="When using BAM input (-abam), write output as BEDPE. The default\nis to write output in BAM when using -abam.")), ToolInput(tag="in_ed", input_type=Boolean(optional=True), prefix="-ed", doc=InputDocumentation(doc="Use BAM total edit distance (NM tag) for BEDPE score.\n- Default for BEDPE is to use the minimum of\nof the two mapping qualities for the pair.\n- When -ed is used the total edit distance\nfrom the two mates is reported as the score.")), ToolInput(tag="in_minimum_overlap_required", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Minimum overlap required as fraction of A (e.g. 0.05).\nDefault is 1E-9 (effectively 1bp).")), ToolInput(tag="in_require_same_strandedness", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Require same strandedness when finding overlaps.\nDefault is to ignore stand.\nNot applicable with -type inspan or -type outspan.")), ToolInput(tag="in_require_different_strandedness", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="Require different strandedness when finding overlaps.\nDefault is to ignore stand.\nNot applicable with -type inspan or -type outspan.")), ToolInput(tag="in_type", input_type=Boolean(optional=True), prefix="-type", doc=InputDocumentation(doc="Approach to reporting overlaps between BEDPE and BED.")), ToolInput(tag="in_b", input_type=String(optional=True), prefix="-b", doc=InputDocumentation(doc="")), ToolInput(tag="in_a", input_type=String(optional=True), prefix="-a", doc=InputDocumentation(doc="")), ToolInput(tag="in_either", input_type=String(), position=0, doc=InputDocumentation(doc="Report overlaps if either end of A overlaps B.\n- Default.")), ToolInput(tag="in_both", input_type=String(), position=0, doc=InputDocumentation(doc="Report overlaps if both ends of A overlap  B.")), ToolInput(tag="in_xor", input_type=String(), position=1, doc=InputDocumentation(doc="Report overlaps if one and only one end of A overlaps B.")), ToolInput(tag="in_is_pan", input_type=String(), position=0, doc=InputDocumentation(doc="Report overlaps between [end1, start2] of A and B.\n- Note: If chrom1 <> chrom2, entry is ignored.")), ToolInput(tag="in_o_span", input_type=String(), position=1, doc=InputDocumentation(doc="Report overlaps between [start1, end2] of A and B.\n- Note: If chrom1 <> chrom2, entry is ignored.")), ToolInput(tag="in_not_i_span", input_type=String(), position=2, doc=InputDocumentation(doc="Report A if ispan of A doesn't overlap B.\n- Note: If chrom1 <> chrom2, entry is ignored.")), ToolInput(tag="in_no_to_span", input_type=String(), position=3, doc=InputDocumentation(doc="Report A if ospan of A doesn't overlap B.\n- Note: If chrom1 <> chrom2, entry is ignored."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bedtools_Pairtobed_V0_1_0().translate("wdl", allow_empty_container=True)

