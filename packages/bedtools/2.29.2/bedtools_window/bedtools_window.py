from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Bedtools_Window_V0_1_0 = CommandToolBuilder(tool="bedtools_window", base_command=["bedtools", "window"], inputs=[ToolInput(tag="in_a_bam", input_type=Boolean(optional=True), prefix="-abam", doc=InputDocumentation(doc="The A input file is in BAM format.  Output will be BAM as well. Replaces -a.")), ToolInput(tag="in_ub_am", input_type=Boolean(optional=True), prefix="-ubam", doc=InputDocumentation(doc="Write uncompressed BAM output. Default writes compressed BAM.")), ToolInput(tag="in_bed", input_type=Boolean(optional=True), prefix="-bed", doc=InputDocumentation(doc="When using BAM input (-abam), write output as BED. The default\nis to write output in BAM when using -abam.")), ToolInput(tag="in_base_pairs_added_upstream", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="Base pairs added upstream and downstream of each entry\nin A when searching for overlaps in B.\n- Creates symmetrical 'windows' around A.\n- Default is 1000 bp.\n- (INTEGER)")), ToolInput(tag="in_base_pairs_left", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="Base pairs added upstream (left of) of each entry\nin A when searching for overlaps in B.\n- Allows one to define asymmetrical 'windows'.\n- Default is 1000 bp.\n- (INTEGER)")), ToolInput(tag="in_base_pairs_added_downstream", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="Base pairs added downstream (right of) of each entry\nin A when searching for overlaps in B.\n- Allows one to define asymmetrical 'windows'.\n- Default is 1000 bp.\n- (INTEGER)")), ToolInput(tag="in_sw", input_type=Boolean(optional=True), prefix="-sw", doc=InputDocumentation(doc="Define -l and -r based on strand.  For example if used, -l 500\nfor a negative-stranded feature will add 500 bp downstream.\n- Default = disabled.")), ToolInput(tag="in_only_report_same", input_type=Boolean(optional=True), prefix="-sm", doc=InputDocumentation(doc="Only report hits in B that overlap A on the _same_ strand.\n- By default, overlaps are reported without respect to strand.")), ToolInput(tag="in_only_report_opposite", input_type=Boolean(optional=True), prefix="-Sm", doc=InputDocumentation(doc="Only report hits in B that overlap A on the _opposite_ strand.\n- By default, overlaps are reported without respect to strand.")), ToolInput(tag="in_write_original_entry", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="Write the original A entry _once_ if _any_ overlaps found in B.\n- In other words, just report the fact >=1 hit was found.")), ToolInput(tag="in_entry_report_number", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="For each entry in A, report the number of overlaps with B.\n- Reports 0 for A entries that have no overlap with B.\n- Overlaps restricted by -w, -l, and -r.")), ToolInput(tag="in_only_report_entries", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Only report those entries in A that have _no overlaps_ with B.\n- Similar to 'grep -v.'")), ToolInput(tag="in_header", input_type=File(optional=True), prefix="-header", doc=InputDocumentation(doc="the header from the A file prior to results.")), ToolInput(tag="in_b", input_type=String(optional=True), prefix="-b", doc=InputDocumentation(doc="")), ToolInput(tag="in_a", input_type=String(optional=True), prefix="-a", doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bedtools_Window_V0_1_0().translate("wdl", allow_empty_container=True)

