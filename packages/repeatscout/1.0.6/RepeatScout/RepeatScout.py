from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Repeatscout_V0_1_0 = CommandToolBuilder(tool="RepeatScout", base_command=["RepeatScout"], inputs=[ToolInput(tag="in_size_region_extend", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="# size of region to extend left or right (10000)")), ToolInput(tag="in_match", input_type=Boolean(optional=True), prefix="-match", doc=InputDocumentation(doc="# reward for a match (+1)")), ToolInput(tag="in_mismatch", input_type=Boolean(optional=True), prefix="-mismatch", doc=InputDocumentation(doc="# penalty for a mismatch (-1)")), ToolInput(tag="in_gap", input_type=Boolean(optional=True), prefix="-gap", doc=InputDocumentation(doc="# penalty for a gap (-5)")), ToolInput(tag="in_max_gap", input_type=Boolean(optional=True), prefix="-maxgap", doc=InputDocumentation(doc="# maximum number of gaps allowed (5)")), ToolInput(tag="in_max_occurrences", input_type=Boolean(optional=True), prefix="-maxoccurrences", doc=InputDocumentation(doc="# cap on the number of sequences to align (10,000)")), ToolInput(tag="in_max_repeats", input_type=Boolean(optional=True), prefix="-maxrepeats", doc=InputDocumentation(doc="# stop work after reporting this number of repeats (10000)")), ToolInput(tag="in_cap_penalty", input_type=Boolean(optional=True), prefix="-cappenalty", doc=InputDocumentation(doc="# cap on penalty for exiting alignment of a sequence (-20)")), ToolInput(tag="in_tandem_dist", input_type=Boolean(optional=True), prefix="-tandemdist", doc=InputDocumentation(doc="# of bases that must intervene between two l-mers for both to be counted (500)")), ToolInput(tag="in_min_thresh", input_type=Boolean(optional=True), prefix="-minthresh", doc=InputDocumentation(doc="# stop if fewer than this number of l-mers are found in the seeding phase (3)")), ToolInput(tag="in_min_improvement", input_type=Boolean(optional=True), prefix="-minimprovement", doc=InputDocumentation(doc="# amount that a the alignment needs to improve each step to be considered progress (3)")), ToolInput(tag="in_stop_after", input_type=Boolean(optional=True), prefix="-stopafter", doc=InputDocumentation(doc="# stop the alignment after this number of no-progress columns (100)")), ToolInput(tag="in_good_length", input_type=Boolean(optional=True), prefix="-goodlength", doc=InputDocumentation(doc="# minimum required length for a sequence to be reported (50)")), ToolInput(tag="in_max_entropy", input_type=Boolean(optional=True), prefix="-maxentropy", doc=InputDocumentation(doc="# entropy (complexity) threshold for an l-mer to be considered (-.7)")), ToolInput(tag="in_how_verbose_you", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[v[v[v]]] How verbose do you want it to be?  -vvvv is super-verbose.")), ToolInput(tag="in_var_15", input_type=String(optional=True), prefix="-l", doc=InputDocumentation(doc="")), ToolInput(tag="in_freq", input_type=String(optional=True), prefix="-freq", doc=InputDocumentation(doc="")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="-output", doc=InputDocumentation(doc="")), ToolInput(tag="in_sequence", input_type=String(optional=True), prefix="-sequence", doc=InputDocumentation(doc="")), ToolInput(tag="in_opts", input_type=String(optional=True), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Repeatscout_V0_1_0().translate("wdl", allow_empty_container=True)

