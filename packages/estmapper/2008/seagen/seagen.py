from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int, File

Seagen_V0_1_0 = CommandToolBuilder(tool="seagen", base_command=["seagen"], inputs=[ToolInput(tag="in_mer_size", input_type=String(optional=True), prefix="-mersize", doc=InputDocumentation(doc="Use k-mers")), ToolInput(tag="in_mer_skip", input_type=String(optional=True), prefix="-merskip", doc=InputDocumentation(doc="Skip j mers between each mer inserted into table")), ToolInput(tag="in_forward", input_type=Boolean(optional=True), prefix="-forward", doc=InputDocumentation(doc="Search only the normal query sequences")), ToolInput(tag="in_reverse", input_type=Boolean(optional=True), prefix="-reverse", doc=InputDocumentation(doc="Search only the reverse-complemented query sequences")), ToolInput(tag="in_num_threads", input_type=String(optional=True), prefix="-numthreads", doc=InputDocumentation(doc="Use n search threads")), ToolInput(tag="in_loader_queue", input_type=Int(optional=True), prefix="-loaderqueue", doc=InputDocumentation(doc="Size of the loader queue")), ToolInput(tag="in_loader_sleep", input_type=String(optional=True), prefix="-loadersleep", doc=InputDocumentation(doc="Time the loader will sleep when its output queue is full")), ToolInput(tag="in_loader_warnings", input_type=Boolean(optional=True), prefix="-loaderwarnings", doc=InputDocumentation(doc="Enable warning messages for the loader")), ToolInput(tag="in_search_sleep", input_type=String(optional=True), prefix="-searchsleep", doc=InputDocumentation(doc="Time the searcher will sleep when it has no input")), ToolInput(tag="in_writer_queue", input_type=Int(optional=True), prefix="-writerqueue", doc=InputDocumentation(doc="Size of the output queue")), ToolInput(tag="in_writer_sleep", input_type=String(optional=True), prefix="-writersleep", doc=InputDocumentation(doc="Time the writer will sleep when it has nothing to write")), ToolInput(tag="in_writer_warnings", input_type=Boolean(optional=True), prefix="-writerwarnings", doc=InputDocumentation(doc="Enable warning messages for the writer")), ToolInput(tag="in_build_tables", input_type=File(optional=True), prefix="-buildtables", doc=InputDocumentation(doc="If 'datfile' doesn't exist, build the tables, write\nthem to 'datfile' and exit.")), ToolInput(tag="in_use_tables", input_type=File(optional=True), prefix="-usetables", doc=InputDocumentation(doc="Load the tables from 'datfile' file and do the compute.\nIf 'datfile' doesn't exist, an implicit -buildtables is\nperformed.")), ToolInput(tag="in_mask", input_type=File(optional=True), prefix="-mask", doc=InputDocumentation(doc="Ignore all mers listed in file f")), ToolInput(tag="in_only", input_type=File(optional=True), prefix="-only", doc=InputDocumentation(doc="Use only the mers listed in file f")), ToolInput(tag="in_cdna", input_type=String(optional=True), prefix="-cdna", doc=InputDocumentation(doc="Query sequences (the cDNA, the stream)")), ToolInput(tag="in_stream", input_type=Boolean(optional=True), prefix="-stream", doc=InputDocumentation(doc="An alias for -cdna")), ToolInput(tag="in_genomic", input_type=String(optional=True), prefix="-genomic", doc=InputDocumentation(doc="Database sequences (the genome, the table)")), ToolInput(tag="in_table", input_type=Boolean(optional=True), prefix="-table", doc=InputDocumentation(doc="An alias for -genomic)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="Entertain the user")), ToolInput(tag="in_binary", input_type=Boolean(optional=True), prefix="-binary", doc=InputDocumentation(doc="Write the hits in a binary format")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="-output", doc=InputDocumentation(doc="Write output to file f")), ToolInput(tag="in_count", input_type=File(optional=True), prefix="-count", doc=InputDocumentation(doc="Write counts of hits to file f"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Write output to file f"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seagen_V0_1_0().translate("wdl", allow_empty_container=True)

