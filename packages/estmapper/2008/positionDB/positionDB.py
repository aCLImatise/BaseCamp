from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, File, Boolean

Positiondb_V0_1_0 = CommandToolBuilder(tool="positionDB", base_command=["positionDB"], inputs=[ToolInput(tag="in_mer_size", input_type=Int(optional=True), prefix="-mersize", doc=InputDocumentation(doc="The size of the mers, default=20.")), ToolInput(tag="in_mer_skip", input_type=Int(optional=True), prefix="-merskip", doc=InputDocumentation(doc="The skip between mers, default=0")), ToolInput(tag="in_use", input_type=String(optional=True), prefix="-use", doc=InputDocumentation(doc=",c         Specify which sequences to use, default=all")), ToolInput(tag="in_mer_begin", input_type=String(optional=True), prefix="-merbegin", doc=InputDocumentation(doc="Build on a subset of the mers, starting at mer #b, default=all mers")), ToolInput(tag="in_mer_end", input_type=String(optional=True), prefix="-merend", doc=InputDocumentation(doc="Build on a subset of the mers, ending at mer #e, default=all mers")), ToolInput(tag="in_sequence", input_type=String(optional=True), prefix="-sequence", doc=InputDocumentation(doc="Input sequences.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="-output", doc=InputDocumentation(doc="Output filename.")), ToolInput(tag="in_build_only", input_type=Boolean(optional=True), prefix="-buildonly", doc=InputDocumentation(doc="[build opts] sequence.fasta\n--  just builds a table and exits")), ToolInput(tag="in_existence", input_type=Boolean(optional=True), prefix="-existence", doc=InputDocumentation(doc="[build opts] sequence.fasta\n--  builds (or reads) a table reports if any mers\nin sequence.fasta cannot be found")), ToolInput(tag="in_extra", input_type=Boolean(optional=True), prefix="-extra", doc=InputDocumentation(doc="[build opts] sequence.fasta\n--  builds (or reads) a table reports if any mers\nNOT in sequence.fasta are be found")), ToolInput(tag="in_test_one", input_type=Int(optional=True), prefix="-test1", doc=InputDocumentation(doc="--  Tests if each and every mer is found in the\npositionDB.  Reports if it doesn't find a mer\nat the correct position.  Doesn't report if table\nhas too much stuff.")), ToolInput(tag="in_test_two", input_type=Int(optional=True), prefix="-test2", doc=InputDocumentation(doc="sequence.fasta\n--  Builds a positionDB from db.fasta, then searches\nthe table for each mer in sequence.fasta.  Reports\nall mers it finds.\n-- This is a silly test and you shouldn't do it.\n")), ToolInput(tag="in_args", input_type=String(optional=True), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output filename."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Positiondb_V0_1_0().translate("wdl", allow_empty_container=True)

