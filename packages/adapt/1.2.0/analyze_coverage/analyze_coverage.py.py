from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Analyze_Coverage_Py_V0_1_0 = CommandToolBuilder(tool="analyze_coverage.py", base_command=["analyze_coverage.py"], inputs=[ToolInput(tag="in_write_frac_bound", input_type=Int(optional=True), prefix="--write-frac-bound", doc=InputDocumentation(doc="If set, write a table in which each row represents an\ninput design and gives the fraction of all sequences\nthat are covered by the design. The 'design_id' column\ngives the row number of the design in the designs\ninput (1 for the first design). The provided argument\nis a path to a TSV file at which to the write the\ntable.")), ToolInput(tag="in_write_mean_activity_of_guides", input_type=Int(optional=True), prefix="--write-mean-activity-of-guides", doc=InputDocumentation(doc="If set, write a table in which each row represents an\ninput design and gives the mean activity across the\ntarget sequences of the guide set. The 'design_id'\ncolumn gives the row number of the design in the\ndesigns input (1 for the first design). The provided\nargument is a path to a TSV file at which to write the\ntable. If set, a predictive model must be set without\n--predict-activity-require-highly-active")), ToolInput(tag="in_primer_mismatches", input_type=Int(optional=True), prefix="--primer-mismatches", doc=InputDocumentation(doc="Allow for this number of mismatches when determining\nwhether a primer covers a sequence (ignore this if the\ntargets only consist of guides)")), ToolInput(tag="in_guide_mismatches", input_type=Int(optional=True), prefix="--guide-mismatches", doc=InputDocumentation(doc="Allow for this number of mismatches when determining\nwhether a guide covers a sequence; either this or\n--predict-activity-model-path should be set")), ToolInput(tag="in_do_not_allow_gu_pairing", input_type=Boolean(optional=True), prefix="--do-not-allow-gu-pairing", doc=InputDocumentation(doc="When determining whether a guide binds to a region of\ntarget sequence, do not count G-U (wobble) base pairs\nas matching. Default is to tolerate G-U pairing:\nnamely, A in an output guide sequence matches G in the\ntarget and C in an output guide sequence matches T in\nthe target (since the synthesized guide is the reverse\ncomplement of the output guide sequence)")), ToolInput(tag="in_predict_activity_model_path", input_type=File(optional=True), prefix="--predict-activity-model-path", doc=InputDocumentation(doc="PREDICT_ACTIVITY_MODEL_PATH\nPaths to directories containing serialized models in\nTensorFlow's SavedModel format for predicting guide-\ntarget activity. There are two arguments: (1)\nclassification model to determine which guides are\nactive; (2) regression model, which is used to\ndetermine which guides (among active ones) are highly\nactive. The models/ directory contains example models.\nEither this or --guide-mismatches should be set.")), ToolInput(tag="in_predict_activity_th_res", input_type=Int(optional=True), prefix="--predict-activity-thres", doc=InputDocumentation(doc="PREDICT_ACTIVITY_THRES\nThresholds to use for decisions on output of\npredictive models. There are two arguments: (1)\nclassification threshold for deciding which guide-\ntarget pairs are active (in [0,1], where higher values\nhave higher precision but less recall); (2) regression\nthreshold for deciding which guide-target pairs are\nhighly active (>= 0, where higher values limit the\nnumber determined to be highly active). If not set but\n--predict-activity-model-path is set, then this uses\ndefault thresholds stored with the models. To 'bind\nto' or 'cover' a target, the guide-target pair must be\nactive or, if --predict-activity-require-highly-active\nis set, highly active.")), ToolInput(tag="in_predict_activity_require_highly_active", input_type=Boolean(optional=True), prefix="--predict-activity-require-highly-active", doc=InputDocumentation(doc="When determining whether a guide-target pair binds\nusing an activity model, require that the pair be\npredicted to be highly active (not just active)")), ToolInput(tag="in_use_accessions", input_type=Boolean(optional=True), prefix="--use-accessions", doc=InputDocumentation(doc="When set, the input file of sequences gives accessions\nrather than being a FASTA of sequences -- each line in\nthe file gives an accession. This fetches the\nsequences of those accessions uses them as input.")), ToolInput(tag="in_fully_sensitive", input_type=Boolean(optional=True), prefix="--fully-sensitive", doc=InputDocumentation(doc="When set, use a naive, slow sliding approach to find\nbinding for primers and guides; otherwise, this uses\nan index to more quickly identify binding sites")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Debug output")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output")), ToolInput(tag="in_designs_fn", input_type=String(), position=0, doc=InputDocumentation(doc="Path to output of running design.py; a TSV file where\neach row contains a design (target)")), ToolInput(tag="in_seqs_fn", input_type=String(), position=1, doc=InputDocumentation(doc="Path to FASTA file giving sequences against which to\ncompute coverage. (See --use-accessions to pass\naccessions as input rather than a FASTA file.)"))], outputs=[], container="quay.io/biocontainers/adapt:1.2.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Analyze_Coverage_Py_V0_1_0().translate("wdl")

