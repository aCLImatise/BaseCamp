from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean, File

Design_Naively_Py_V0_1_0 = CommandToolBuilder(tool="design_naively.py", base_command=["design_naively.py"], inputs=[ToolInput(tag="in_window_size", input_type=Int(optional=True), prefix="--window-size", doc=InputDocumentation(doc="Output guide(s) within each window (sliding along the\nalignment) of this length")), ToolInput(tag="in_guide_length", input_type=Int(optional=True), prefix="--guide-length", doc=InputDocumentation(doc="Length of guide to construct")), ToolInput(tag="in_guide_mismatches", input_type=Int(optional=True), prefix="--guide-mismatches", doc=InputDocumentation(doc="Allow for this number of mismatches when determining\nwhether a guide covers a sequence")), ToolInput(tag="in_best_n", input_type=String(optional=True), prefix="--best-n", doc=InputDocumentation(doc="Find the best BEST_N guides in each window")), ToolInput(tag="in_do_not_allow_gu_pairing", input_type=Boolean(optional=True), prefix="--do-not-allow-gu-pairing", doc=InputDocumentation(doc="When determining whether a guide binds to a region of\ntarget sequence, do not count G-U (wobble) base pairs\nas matching. Default is to tolerate G-U pairing:\nnamely, A in an output guide sequence matches G in the\ntarget and C in an output guide sequence matches T in\nthe target (since the synthesized guide is the reverse\ncomplement of the output guide sequence)")), ToolInput(tag="in_skip_gaps", input_type=String(optional=True), prefix="--skip-gaps", doc=InputDocumentation(doc="If this fraction or more of sequences at a position\ncontain a gap character, do not design a guide there")), ToolInput(tag="in_ref_seq", input_type=File(optional=True), prefix="--ref-seq", doc=InputDocumentation(doc="The label used in the FASTA file of the reference\nsequence to design guides based on sequence diversity;\nrequired for diversity method")), ToolInput(tag="in_no_consensus", input_type=Boolean(optional=True), prefix="--no-consensus", doc=InputDocumentation(doc="If set, do not use the consensus method to determine\nguides; otherwise, will use the consensus method")), ToolInput(tag="in_no_mode", input_type=Boolean(optional=True), prefix="--no-mode", doc=InputDocumentation(doc="If set, do not use the mode method to determine\nguides; otherwise, will use the mode method")), ToolInput(tag="in_diversity", input_type=String(optional=True), prefix="--diversity", doc=InputDocumentation(doc="A string of which diversity method to use to determine\nguides ('entropy'); None (default) to not use a\ndiversity method. 'entropy' will calculate the average\nper position entropy of each potential guide, then\nreturn the guides at the positions with the lowest\nentropy; nucleotides are determined by the reference\nsequence")), ToolInput(tag="in_require_flanking_five", input_type=Int(optional=True), prefix="--require-flanking5", doc=InputDocumentation(doc="Require the given sequence on the 5' protospacer\nflanking site (PFS) of each designed guide; this\ntolerates ambiguity in the sequence (e.g., 'H'\nrequires 'A', 'C', or 'T', or, equivalently, avoids\nguides flanked by 'G'). Note that this is the 5' end\nin the target sequence (not the spacer sequence).")), ToolInput(tag="in_require_flanking_three", input_type=Int(optional=True), prefix="--require-flanking3", doc=InputDocumentation(doc="Require the given sequence on the 3' protospacer\nflanking site (PFS) of each designed guide; this\ntolerates ambiguity in the sequence (e.g., 'H'\nrequires 'A', 'C', or 'T', or, equivalently, avoids\nguides flanked by 'G'). Note that this is the 3' end\nin the target sequence (not the spacer sequence).")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Debug output")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output")), ToolInput(tag="in_in_fast_a", input_type=String(), position=0, doc=InputDocumentation(doc="Path to input FASTA (aligned)")), ToolInput(tag="in_out_tsv", input_type=String(), position=1, doc=InputDocumentation(doc="Path to TSV file to which to write the output"))], outputs=[], container="quay.io/biocontainers/adapt:1.2.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Design_Naively_Py_V0_1_0().translate("wdl")

