from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Kget_V0_1_0 = CommandToolBuilder(tool="kget", base_command=["kget"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase the verbosity of the program\nstatus messages. Use multiple times for more\nverbosity. Negates quiet.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Turn off all status messages for the\nprogram. Negated by verbose.")), ToolInput(tag="in_option_file", input_type=File(optional=True), prefix="--option-file", doc=InputDocumentation(doc="Read more options and parameters from the")), ToolInput(tag="in_block_size", input_type=Boolean(optional=True), prefix="--block-size", doc=InputDocumentation(doc="how many bytes per block")), ToolInput(tag="in_show_size", input_type=Boolean(optional=True), prefix="--show-size", doc=InputDocumentation(doc="query size of remote file first")), ToolInput(tag="in_cache", input_type=Boolean(optional=True), prefix="--cache", doc=InputDocumentation(doc="wrap the remote-file into KCacheTeeFile")), ToolInput(tag="in_cache_block", input_type=Boolean(optional=True), prefix="--cache-block", doc=InputDocumentation(doc="blocksize inside KCacheTeeFile")), ToolInput(tag="in_proxy", input_type=Boolean(optional=True), prefix="--proxy", doc=InputDocumentation(doc="use proxy to download remote file")), ToolInput(tag="in_random", input_type=Boolean(optional=True), prefix="--random", doc=InputDocumentation(doc="request blocks in random order")), ToolInput(tag="in_repeat", input_type=Boolean(optional=True), prefix="--repeat", doc=InputDocumentation(doc="request blocks with repeats if in random")), ToolInput(tag="in_buffer", input_type=Boolean(optional=True), prefix="--buffer", doc=InputDocumentation(doc="wrap remote file into KBufFile with this")), ToolInput(tag="in_cache_complete", input_type=Boolean(optional=True), prefix="--cache-complete", doc=InputDocumentation(doc="check completeness on open cacheteefile")), ToolInput(tag="in_truncate", input_type=Boolean(optional=True), prefix="--truncate", doc=InputDocumentation(doc="truncate the file 1st parameter\nremove trailing cache-bitmap")), ToolInput(tag="in_start", input_type=Boolean(optional=True), prefix="--start", doc=InputDocumentation(doc="offset where to read from")), ToolInput(tag="in_count", input_type=Boolean(optional=True), prefix="--count", doc=InputDocumentation(doc="number of bytes to read")), ToolInput(tag="in_progress", input_type=Boolean(optional=True), prefix="--progress", doc=InputDocumentation(doc="show progress")), ToolInput(tag="in_reliable", input_type=Boolean(optional=True), prefix="--reliable", doc=InputDocumentation(doc="use reliable version of http-file")), ToolInput(tag="in_full", input_type=Boolean(optional=True), prefix="--full", doc=InputDocumentation(doc="download via one http-request, not partial\nrequests in loop\n")), ToolInput(tag="in_quit_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-L|--log-level <level>           Logging level as number or enum string. One ")), ToolInput(tag="in_file_dot", input_type=File(), position=0, doc=InputDocumentation(doc="-b|--verb                        execute verbose ")), ToolInput(tag="in_order", input_type=String(), position=1, doc=InputDocumentation(doc="-p|--report                      report cache usage ")), ToolInput(tag="in_buffer_size", input_type=Int(), position=2, doc=InputDocumentation(doc="-i|--sleep                       sleep inbetween requests by this amount of ")), ToolInput(tag="in_ms", input_type=String(), position=3, doc=InputDocumentation(doc="-m|--timeout                     use timed read with tis amount of ms as ")), ToolInput(tag="in_timeout", input_type=String(), position=4, doc=InputDocumentation(doc="--complete                       check if 1st parameter is complete "))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Kget_V0_1_0().translate("wdl", allow_empty_container=True)

