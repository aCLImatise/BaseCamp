from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, String, Int

Sff_Dump_2_V0_1_0 = CommandToolBuilder(tool="sff_dump.2", base_command=["sff-dump.2"], inputs=[ToolInput(tag="in_accession", input_type=File(optional=True), prefix="--accession", doc=InputDocumentation(doc="Replaces accession derived from <path> in\nfilename(s) and deflines (only for single\ntable dump)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory, default is working\ndirectory '.' )")), ToolInput(tag="in_stdout", input_type=Boolean(optional=True), prefix="--stdout", doc=InputDocumentation(doc="Output to stdout, all split data become\njoined into single stream")), ToolInput(tag="in_path_ngc_file", input_type=File(optional=True), prefix="--ngc", doc=InputDocumentation(doc="<path> to ngc file")), ToolInput(tag="in_min_spot_id", input_type=String(optional=True), prefix="--minSpotId", doc=InputDocumentation(doc="Minimum spot id")), ToolInput(tag="in_max_spot_id", input_type=String(optional=True), prefix="--maxSpotId", doc=InputDocumentation(doc="Maximum spot id")), ToolInput(tag="in_spot_group", input_type=Boolean(optional=True), prefix="--spot-group", doc=InputDocumentation(doc="Split into files by SPOT_GROUP (member name)")), ToolInput(tag="in_spot_groups", input_type=Boolean(optional=True), prefix="--spot-groups", doc=InputDocumentation(doc="<[list]>           Filter by SPOT_GROUP (member): name[,...]")), ToolInput(tag="in_read_filter", input_type=Boolean(optional=True), prefix="--read-filter", doc=InputDocumentation(doc="<[filter]>      Split into files by READ_FILTER value\noptionally filter by value:\npass|reject|criteria|redacted")), ToolInput(tag="in_group_in_dirs", input_type=Boolean(optional=True), prefix="--group-in-dirs", doc=InputDocumentation(doc="Split into subdirectories instead of files")), ToolInput(tag="in_keep_empty_files", input_type=Boolean(optional=True), prefix="--keep-empty-files", doc=InputDocumentation(doc="Do not delete empty files")), ToolInput(tag="in_table_name_csra", input_type=String(optional=True), prefix="--table", doc=InputDocumentation(doc="Table name within cSRA object, default is\n'SEQUENCE'")), ToolInput(tag="in_disable_multithreading", input_type=Boolean(optional=True), prefix="--disable-multithreading", doc=InputDocumentation(doc="disable multithreading")), ToolInput(tag="in_log_level", input_type=Int(optional=True), prefix="--log-level", doc=InputDocumentation(doc="Logging level as number or enum string One\nof (fatal|sys|int|err|warn|info) or (0-5)\nCurrent/default is warn")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase the verbosity level of the program\nUse multiple times for more verbosity")), ToolInput(tag="in_ncbi_error_report", input_type=Boolean(optional=True), prefix="--ncbi_error_report", doc=InputDocumentation(doc="Control program execution environment\nreport generation (if implemented). One of\n(never|error|always). Default is error")), ToolInput(tag="in_legacy_report", input_type=Boolean(optional=True), prefix="--legacy-report", doc=InputDocumentation(doc="use legacy style 'Written spots' for tool")), ToolInput(tag="in_var_17", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_path", input_type=File(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_name", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_to", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_21", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_within", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_csra", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_object", input_type=String(), position=4, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory, default is working\ndirectory '.' )"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sff_Dump_2_V0_1_0().translate("wdl", allow_empty_container=True)

