from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Variant_V0_1_0 = CommandToolBuilder(tool="variant", base_command=["variant"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output")), ToolInput(tag="in_no_output", input_type=Boolean(optional=True), prefix="--no-output", doc=InputDocumentation(doc="Don't output reads (used for profiling with -q)")), ToolInput(tag="in_rules", input_type=Boolean(optional=True), prefix="--rules", doc=InputDocumentation(doc="JSON ecript for the rules.")), ToolInput(tag="in_proc_regions_file", input_type=Boolean(optional=True), prefix="--proc-regions-file", doc=InputDocumentation(doc="Samtools-style region string (e.g. 1:1,000-2,000) or BED/VCF of regions to process. -k UN iterates over unmapped-unmapped reads")), ToolInput(tag="in_mark_as_qc_fail", input_type=Boolean(optional=True), prefix="--mark-as-qc-fail", doc=InputDocumentation(doc="Flag reads that don't pass VariantBam with the failed QC flag, rather than deleting the read.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file to write to (BAM/SAM/CRAM) file instead of stdout")), ToolInput(tag="in_cram", input_type=File(optional=True), prefix="--cram", doc=InputDocumentation(doc="Output file should be in CRAM format")), ToolInput(tag="in_bam", input_type=Boolean(optional=True), prefix="--bam", doc=InputDocumentation(doc="Output should be in binary BAM format")), ToolInput(tag="in_reference", input_type=Boolean(optional=True), prefix="--reference", doc=InputDocumentation(doc="Path to reference. Required for reading/writing CRAM")), ToolInput(tag="in_strip_tags", input_type=Boolean(optional=True), prefix="--strip-tags", doc=InputDocumentation(doc="Remove the specified tags, separated by commas. eg. -s RG,MD")), ToolInput(tag="in_strip_all_tags", input_type=Boolean(optional=True), prefix="--strip-all-tags", doc=InputDocumentation(doc="Remove all alignment tags")), ToolInput(tag="in_write_trimmed", input_type=Boolean(optional=True), prefix="--write-trimmed", doc=InputDocumentation(doc="Output the base-quality trimmed sequence rather than the original sequence. Also removes quality scores")), ToolInput(tag="in_qc_file", input_type=File(optional=True), prefix="--qc-file", doc=InputDocumentation(doc="Output a qc file that contains information about BAM")), ToolInput(tag="in_max_coverage", input_type=File(optional=True), prefix="--max-coverage", doc=InputDocumentation(doc="Maximum coverage of output file. BAM must be sorted. Negative values enforce a minimum coverage")), ToolInput(tag="in_min_phred", input_type=Boolean(optional=True), prefix="--min-phred", doc=InputDocumentation(doc="Set the minimum base quality score considered to be high-quality")), ToolInput(tag="in_region", input_type=Boolean(optional=True), prefix="--region", doc=InputDocumentation(doc="Regions (e.g. myvcf.vcf or WG for whole genome) or newline seperated subsequence file.")), ToolInput(tag="in_exclude_region", input_type=Boolean(optional=True), prefix="--exclude-region", doc=InputDocumentation(doc="Same as -g, but for region where satisfying a rule EXCLUDES this read.")), ToolInput(tag="in_linked_region", input_type=Boolean(optional=True), prefix="--linked-region", doc=InputDocumentation(doc="Same as -g, but turns on mate-linking")), ToolInput(tag="in_linked_exclude_region", input_type=Boolean(optional=True), prefix="--linked-exclude-region", doc=InputDocumentation(doc="Same as -l, but for mate-linked region where satisfying this rule EXCLUDES this read.")), ToolInput(tag="in_region_pad", input_type=Boolean(optional=True), prefix="--region-pad", doc=InputDocumentation(doc="Apply a padding to each region supplied with the region flags (specify after region flag)")), ToolInput(tag="in_min_clip", input_type=Boolean(optional=True), prefix="--min-clip", doc=InputDocumentation(doc="Minimum number of quality clipped bases")), ToolInput(tag="in_max_n_bases", input_type=Boolean(optional=True), prefix="--max-nbases", doc=InputDocumentation(doc="Maximum number of N bases")), ToolInput(tag="in_min_mapq", input_type=Boolean(optional=True), prefix="--min-mapq", doc=InputDocumentation(doc="Minimum mapping quality")), ToolInput(tag="in_min_del", input_type=Boolean(optional=True), prefix="--min-del", doc=InputDocumentation(doc="Minimum number of deleted bases")), ToolInput(tag="in_min_ins", input_type=Boolean(optional=True), prefix="--min-ins", doc=InputDocumentation(doc="Minimum number of inserted bases")), ToolInput(tag="in_min_length", input_type=Boolean(optional=True), prefix="--min-length", doc=InputDocumentation(doc="Minimum read length (after base-quality trimming)")), ToolInput(tag="in_motif", input_type=Boolean(optional=True), prefix="--motif", doc=InputDocumentation(doc="Motif file")), ToolInput(tag="in_read_group", input_type=Boolean(optional=True), prefix="--read-group", doc=InputDocumentation(doc="Limit to just a single read group")), ToolInput(tag="in_include_aln_flag", input_type=Boolean(optional=True), prefix="--include-aln-flag", doc=InputDocumentation(doc="Flags to include (like samtools -f)")), ToolInput(tag="in_exclude_aln_flag", input_type=Boolean(optional=True), prefix="--exclude-aln-flag", doc=InputDocumentation(doc="Flags to exclude (like samtools -F)")), ToolInput(tag="in_input_dot_bam", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file to write to (BAM/SAM/CRAM) file instead of stdout")), ToolOutput(tag="out_cram", output_type=File(optional=True), selector=InputSelector(input_to_select="in_cram", type_hint=File()), doc=OutputDocumentation(doc="Output file should be in CRAM format")), ToolOutput(tag="out_qc_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_qc_file", type_hint=File()), doc=OutputDocumentation(doc="Output a qc file that contains information about BAM")), ToolOutput(tag="out_max_coverage", output_type=File(optional=True), selector=InputSelector(input_to_select="in_max_coverage", type_hint=File()), doc=OutputDocumentation(doc="Maximum coverage of output file. BAM must be sorted. Negative values enforce a minimum coverage"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Variant_V0_1_0().translate("wdl", allow_empty_container=True)

