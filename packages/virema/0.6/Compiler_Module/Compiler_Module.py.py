from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, Directory

Compiler_Module_Py_V0_1_0 = CommandToolBuilder(tool="Compiler_Module.py", base_command=["Compiler_Module.py"], inputs=[ToolInput(tag="in_output_tag", input_type=File(optional=True), prefix="--Output_Tag", doc=InputDocumentation(doc="Enter a tag name that will be appended to end of each\noutput file.")), ToolInput(tag="in_ded_up", input_type=Boolean(optional=True), prefix="-DeDup", doc=InputDocumentation(doc="Remove potential PCR duplicates. Default is off.")), ToolInput(tag="in_read_names_entry", input_type=Boolean(optional=True), prefix="-ReadNamesEntry", doc=InputDocumentation(doc="Append Read Names contributing to each compiled\nresult. Default is off.")), ToolInput(tag="in_de_fuzz", input_type=Int(optional=True), prefix="--Defuzz", doc=InputDocumentation(doc="Choose how to defuzz data: '5' to report at 5' end of\nfuzzy region, '3' to report at 3' end, or '0' to\nreport in centre of fuzzy region. Default is no fuzz\nhandling (similar to choosing Right - see Routh et\nal).")), ToolInput(tag="in_max_fuzz", input_type=Int(optional=True), prefix="--MaxFuzz", doc=InputDocumentation(doc="Select maximum allowed length of fuzzy region.\nRecombination events with longer fuzzy regions will\nnot be reported. Default is Seed Length.")), ToolInput(tag="in_micro_in_del_length", input_type=Int(optional=True), prefix="--MicroInDel_Length", doc=InputDocumentation(doc="Size of MicroInDels - these are common artifacts of\ncDNA preparation. See Routh et al JMB 2012. Default\nsize is 0)")), ToolInput(tag="in_compound_handling", input_type=Int(optional=True), prefix="--Compound_Handling", doc=InputDocumentation(doc="Select this option for compound recombination event\nmapping (see manual for details). Enter number of\nnucleotides to map (must be less than Seed, and\ngreater than number of nts in MicroInDel). Default is\noff.")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--Output_Dir", doc=InputDocumentation(doc="Enter a directory name that all compiled output files\nwill be saved in.")), ToolInput(tag="in_bed", input_type=Boolean(optional=True), prefix="-BED", doc=InputDocumentation(doc="Output recombination data into BED files."))], outputs=[ToolOutput(tag="out_output_tag", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_tag", type_hint=File()), doc=OutputDocumentation(doc="Enter a tag name that will be appended to end of each\noutput file.")), ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Enter a directory name that all compiled output files\nwill be saved in."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Compiler_Module_Py_V0_1_0().translate("wdl", allow_empty_container=True)

