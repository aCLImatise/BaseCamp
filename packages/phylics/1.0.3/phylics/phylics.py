from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int, Array, Directory

Phylics_V0_1_0 = CommandToolBuilder(tool="phylics", base_command=["phylics"], inputs=[ToolInput(tag="in_output_path", input_type=File(optional=True), prefix="--output_path", doc=InputDocumentation(doc="[--output_prefix out_prefix] [--tasks N]")), ToolInput(tag="in_run", input_type=Boolean(optional=True), prefix="--run", doc=InputDocumentation(doc="Run the pipeline. USAGE: phylics --run [--run_cnvs |")), ToolInput(tag="in_run_multiple", input_type=Boolean(optional=True), prefix="--run_multiple", doc=InputDocumentation(doc="] --input_dirs")), ToolInput(tag="in_run_one_zero_x_preproc", input_type=Boolean(optional=True), prefix="--run_10x_preproc", doc=InputDocumentation(doc="Run 10x data pre-processing module. USAGE: phylics")), ToolInput(tag="in_run_cell_filtering", input_type=Boolean(optional=True), prefix="--run_cell_filtering", doc=InputDocumentation(doc="Run the cell filtering module. USAGE: phylics")), ToolInput(tag="in_values", input_type=Boolean(optional=True), prefix="--values", doc=InputDocumentation(doc="[v [v ...]] --output_path out_path")), ToolInput(tag="in_run_cn_vs", input_type=Boolean(optional=True), prefix="--run_cnvs", doc=InputDocumentation(doc="Run only the CNV calling stage. USAGE: phylics --run")), ToolInput(tag="in_input_dirs", input_type=File(optional=True), prefix="--input_dirs", doc=InputDocumentation(doc=":input_dir [sample_name:input_dir ...]\nPairs made of sample name and directory path,\nseparated by ':', for each input sample. Sample name\nand input directory path cannot contain ':'")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="Clustering method (default = complete)")), ToolInput(tag="in_metric", input_type=String(optional=True), prefix="--metric", doc=InputDocumentation(doc="Distance metric")), ToolInput(tag="in_output_prefix", input_type=String(optional=True), prefix="--output_prefix", doc=InputDocumentation(doc="A string to be pre-pended to the names automatically\ngenerated for the output directories")), ToolInput(tag="in_tasks", input_type=Int(optional=True), prefix="--tasks", doc=InputDocumentation(doc="Maximum number of tasks to be run in parallel. It\nallows to execute single-sample analyses in parallel\nand to parallelize the permutation test execution for\nthe heterogeneity score computation.")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="Seed to initialize the pseudo-random generator used to\nperform the permutation test.")), ToolInput(tag="in_n_permutations", input_type=Int(optional=True), prefix="--n_permutations", doc=InputDocumentation(doc="Number of permutations to execute the permutation test\nfor the heterogeneity score computation.")), ToolInput(tag="in_rec_lust", input_type=Int(optional=True), prefix="--reclust", doc=InputDocumentation(doc="If this option is specified, only the clustering part\nis executed with the specified number of clusters (see\n--n_clusters option), unless --reinit option is\nspecified (see below).")), ToolInput(tag="in_reinit", input_type=Boolean(optional=True), prefix="--reinit", doc=InputDocumentation(doc="This option has effect only if combined with the")), ToolInput(tag="in_intervals", input_type=Array(t=Int(), optional=True), prefix="--intervals", doc=InputDocumentation(doc="List of of mean ploidy intervals: cells which mean\nploidies are in the specified ranges are filtered out")), ToolInput(tag="in_genome", input_type=Directory(optional=True), prefix="--genome", doc=InputDocumentation(doc="Directory name for ROOT_DIR/genomes/${chosen_genome}")), ToolInput(tag="in_binning", input_type=Int(optional=True), prefix="--binning", doc=InputDocumentation(doc="A complex value made of the concatenation of - type:\nvariable or fixed (bins. Variable refers to amount of\nmappable genome, recommended); - size: bin size; -\nread-length: mapped reads length; - aligner: bowtie or\nbwa. The read-length and aligner refer to the\nsimulations of re-mapping reads of that length with\nthat aligner on the whole genome. This is used to\ncalculate bins of 'mappable' (i.e. variable)\ngenome.The resulting value is the name of a file under\nginkgo/genomes/$choosen_genome/original/ with the bin\ncoordinates.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose execution."))], outputs=[ToolOutput(tag="out_output_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_path", type_hint=File()), doc=OutputDocumentation(doc="[--output_prefix out_prefix] [--tasks N]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phylics_V0_1_0().translate("wdl", allow_empty_container=True)

