from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, Float, File, String

Canopy_V0_1_0 = CommandToolBuilder(tool="canopy", base_command=["canopy"], inputs=[ToolInput(tag="in_arg_path_input", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --input_file_path ] arg          Path to the input file")), ToolInput(tag="in_argpath_file_clusters", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output_clusters_file_path ] arg\nPath to file to which clusters will be\nwritten")), ToolInput(tag="in_argpath_file_cluster", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --output_cluster_profiles_file ] arg\nPath to file to which cluster profiles\nwill be written")), ToolInput(tag="in_arg_cagprefix_prepended", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --cluster_name_prefix ] arg (=CAG)\nPrefix prepended to output cluster\nnames")), ToolInput(tag="in_arg_important_number", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --num_threads ] arg (=4)         IMPORTANT! Number of cpu threads to")), ToolInput(tag="in_max_canopy_dist", input_type=Int(optional=True), prefix="--max_canopy_dist", doc=InputDocumentation(doc="(=0.1)          Max pearson correlation difference\nbetween a canopy center and a point\nincluded to the canopy")), ToolInput(tag="in_max_close_dist", input_type=Int(optional=True), prefix="--max_close_dist", doc=InputDocumentation(doc="(=0.4)           Max pearson correlation difference\nbetween a canopy center and a point in\nwhich the point will be considered\nclose to the canopy. As a heuristc,\nonly points within this distance will\nbe considered as potential neighbours\nduring the canopy walk.")), ToolInput(tag="in_max_merge_dist", input_type=Int(optional=True), prefix="--max_merge_dist", doc=InputDocumentation(doc="(=0.05)          Max pearson correlation difference\nbetween two canopy centers in which the\ncanopies should be merged. Please note,\nthat the final canopy profiles are\ncalculated after the merge step and\nconsequently some final canopies might\nhave profiles that are closer then\nmax_merge_dist specifies.")), ToolInput(tag="in_min_step_dist", input_type=Int(optional=True), prefix="--min_step_dist", doc=InputDocumentation(doc="(=0.01)           Min pearson correlation difference\nbetween canopy center and canopy\ncentroid in which the centroid will be\nused as an origin for a new canpy\n(canopy walk). This is a stop criterion\nfor canopy walk.")), ToolInput(tag="in_max_num_canopy_walks", input_type=Int(optional=True), prefix="--max_num_canopy_walks", doc=InputDocumentation(doc="(=3)       Max number of times the canopy will\nwalk. This is a stop criterion for\ncanopy walk.")), ToolInput(tag="in_filter_min_obs", input_type=Int(optional=True), prefix="--filter_min_obs", doc=InputDocumentation(doc="(=3)             Discard those points which have fewer\nthan N non-zero data points\n(observations). Setting it to 0 will\ndisable the filter.")), ToolInput(tag="in_filter_max_dominant_obs", input_type=Float(optional=True), prefix="--filter_max_dominant_obs", doc=InputDocumentation(doc="(=0.9)  Discard those points for which top 3\ndata points constitute more than X\nfraction of the total signal. Setting\nit to 1 will disable the filter")), ToolInput(tag="in_filtered_out_points_min_obs_file", input_type=File(optional=True), prefix="--filtered_out_points_min_obs_file", doc=InputDocumentation(doc="File to which write out those files\nthat didn't match the filter_min_obs\nfilter")), ToolInput(tag="in_filtered_out_points_max_dominant_obs_file", input_type=File(optional=True), prefix="--filtered_out_points_max_dominant_obs_file", doc=InputDocumentation(doc="File to which write out those files\nthat didn't match the\nfilter_max_dominant_obs filter.")), ToolInput(tag="in_filter_zero_medians", input_type=Int(optional=True), prefix="--filter_zero_medians", doc=InputDocumentation(doc="(=3)        Return only those canopies that have at\nleast N non-zero cluster profile\nobservations. Setting it to 0 will\ndisable the filter.")), ToolInput(tag="in_filter_single_point", input_type=Float(optional=True), prefix="--filter_single_point", doc=InputDocumentation(doc="(=0.9)      Don't return canopies containing a\nsingle profile observation which\nconstitutes to more than X fraction of\nthe total profile. Setting it to 1\ndisables the filter.")), ToolInput(tag="in_stop_fraction", input_type=Float(optional=True), prefix="--stop_fraction", doc=InputDocumentation(doc="(=1.0)            Stop clustering after X fraction of all\npoints have been clustered. Setting it\nto 1 will disable this stop criterion.")), ToolInput(tag="in_die_on_kill", input_type=Boolean(optional=True), prefix="--die_on_kill", doc=InputDocumentation(doc="If set, after receiving a KILL signal,\nthe program will die and no results\nwill be produced. By default clustering\nwill stop but clusters will be merged\nand partial results will be printed as\nusual.")), ToolInput(tag="in_not_processed_points_file", input_type=File(optional=True), prefix="--not_processed_points_file", doc=InputDocumentation(doc="Path to file to which unprocessed\norigins will be dumped at KILL signal")), ToolInput(tag="in_print_wall_clock", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --print_time_statistics ]        Print wall clock time profiles of\nvarious analysis parts. This is not\naggressive and won't increase\ncompuatation time.")), ToolInput(tag="in_show_progress_bar", input_type=File(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --show_progress_bar ]            Show progress bar, nice if output is\nprinted to console, don't use if you\nare redirecting to a file. Verbosity\nmust be set to at least PROGRESS for it\nto have an effect.")), ToolInput(tag="in_canopy_size_stats_file", input_type=File(optional=True), prefix="--canopy_size_stats_file", doc=InputDocumentation(doc="If set, to this file current progress\nafter each processed origin will be\ndumped in format <index>\n<num_left_origins> <this_canopy_size>\n<total_num_thread_collisions>")), ToolInput(tag="in_use_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-v [ --verbosity ] arg (=info)        Control how much information should be "))], outputs=[ToolOutput(tag="out_filtered_out_points_min_obs_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_filtered_out_points_min_obs_file", type_hint=File()), doc=OutputDocumentation(doc="File to which write out those files\nthat didn't match the filter_min_obs\nfilter")), ToolOutput(tag="out_filtered_out_points_max_dominant_obs_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_filtered_out_points_max_dominant_obs_file", type_hint=File()), doc=OutputDocumentation(doc="File to which write out those files\nthat didn't match the\nfilter_max_dominant_obs filter.")), ToolOutput(tag="out_show_progress_bar", output_type=File(optional=True), selector=InputSelector(input_to_select="in_show_progress_bar", type_hint=File()), doc=OutputDocumentation(doc="[ --show_progress_bar ]            Show progress bar, nice if output is\nprinted to console, don't use if you\nare redirecting to a file. Verbosity\nmust be set to at least PROGRESS for it\nto have an effect."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Canopy_V0_1_0().translate("wdl", allow_empty_container=True)

