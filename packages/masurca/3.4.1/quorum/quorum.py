from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Quorum_V0_1_0 = CommandToolBuilder(tool="quorum", base_command=["quorum"], inputs=[ToolInput(tag="in_size", input_type=Boolean(optional=True), prefix="--size", doc=InputDocumentation(doc="Mer database size (default 200M)")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads (default number of cpus)")), ToolInput(tag="in_prefix", input_type=Boolean(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Output prefix (default quorum_corrected)")), ToolInput(tag="in_km_er_len", input_type=Boolean(optional=True), prefix="--kmer-len", doc=InputDocumentation(doc="Kmer length (default 24)")), ToolInput(tag="in_min_q_char", input_type=Boolean(optional=True), prefix="--min-q-char", doc=InputDocumentation(doc="Minimum quality char. Usually 33 or 64 (autodetect)")), ToolInput(tag="in_min_quality", input_type=Boolean(optional=True), prefix="--min-quality", doc=InputDocumentation(doc="Minimum above -q for high quality base (5)")), ToolInput(tag="in_window", input_type=Boolean(optional=True), prefix="--window", doc=InputDocumentation(doc="Window size for trimming")), ToolInput(tag="in_error", input_type=Boolean(optional=True), prefix="--error", doc=InputDocumentation(doc="Maximum number of errors in a window")), ToolInput(tag="in_min_count", input_type=Boolean(optional=True), prefix="--min-count", doc=InputDocumentation(doc="Minimum count for a k-mer to be good")), ToolInput(tag="in_skip", input_type=Boolean(optional=True), prefix="--skip", doc=InputDocumentation(doc="Number of bases to skip to find anchor kmer")), ToolInput(tag="in_anchor", input_type=Boolean(optional=True), prefix="--anchor", doc=InputDocumentation(doc="Numer of good kmer in a row for anchor")), ToolInput(tag="in_anchor_count", input_type=Boolean(optional=True), prefix="--anchor-count", doc=InputDocumentation(doc="Minimum count for an anchor kmer")), ToolInput(tag="in_contaminant", input_type=Boolean(optional=True), prefix="--contaminant", doc=InputDocumentation(doc="Contaminant sequences")), ToolInput(tag="in_trim_contaminant", input_type=Boolean(optional=True), prefix="--trim-contaminant", doc=InputDocumentation(doc="Trim sequences with contaminant mers")), ToolInput(tag="in_no_discard", input_type=Boolean(optional=True), prefix="--no-discard", doc=InputDocumentation(doc="Do not discard reads, output a single N (false)")), ToolInput(tag="in_paired_files", input_type=Boolean(optional=True), prefix="--paired-files", doc=InputDocumentation(doc="Preserve mate pairs in two files")), ToolInput(tag="in_homo_trim", input_type=Boolean(optional=True), prefix="--homo-trim", doc=InputDocumentation(doc="Trim homo-polymer on 3' end")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Display debugging information"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Quorum_V0_1_0().translate("wdl", allow_empty_container=True)

