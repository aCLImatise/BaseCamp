from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Float, Boolean, File, String

Jf_Aligner_V0_1_0 = CommandToolBuilder(tool="jf_aligner", base_command=["jf_aligner"], inputs=[ToolInput(tag="in_size", input_type=Int(optional=True), prefix="--size", doc=InputDocumentation(doc="*Number of k-mers in SuperReads")), ToolInput(tag="in_mer", input_type=Int(optional=True), prefix="--mer", doc=InputDocumentation(doc="*Mer size")), ToolInput(tag="in_fine_mer", input_type=Int(optional=True), prefix="--fine-mer", doc=InputDocumentation(doc="Mer size for fine alignment")), ToolInput(tag="in_psa_min", input_type=Int(optional=True), prefix="--psa-min", doc=InputDocumentation(doc="Min suffix length in SA. Increase for speed up at the cost of memory (13)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads (1)")), ToolInput(tag="in_stretch_constant", input_type=Int(optional=True), prefix="--stretch-constant", doc=InputDocumentation(doc="Constant tolerated stretch between matching k-mer in LIS (10)")), ToolInput(tag="in_stretch_factor", input_type=Float(optional=True), prefix="--stretch-factor", doc=InputDocumentation(doc="Factor tolerated stretch between matching k-mer in LIS (1.3)")), ToolInput(tag="in_stretch_cap", input_type=Float(optional=True), prefix="--stretch-cap", doc=InputDocumentation(doc="Maximum distance between two consecutive k-mers in LIS (10000.0)")), ToolInput(tag="in_window_size", input_type=Int(optional=True), prefix="--window-size", doc=InputDocumentation(doc="Check stretch on every window of k-mer this size (1)")), ToolInput(tag="in_forward", input_type=Boolean(optional=True), prefix="--forward", doc=InputDocumentation(doc="Show all matches forward (reverse super read name if needed) (false)")), ToolInput(tag="in_bases_matching", input_type=Float(optional=True), prefix="--bases-matching", doc=InputDocumentation(doc="Filter base on percent of bases matching (17.0)")), ToolInput(tag="in_mers_matching", input_type=Float(optional=True), prefix="--mers-matching", doc=InputDocumentation(doc="Filter base on percent of k-mer matching (0.0)")), ToolInput(tag="in_details", input_type=File(optional=True), prefix="--details", doc=InputDocumentation(doc="Output files with detail k-mer information")), ToolInput(tag="in_coords", input_type=File(optional=True), prefix="--coords", doc=InputDocumentation(doc="Output files with math coordinate information (stdout)")), ToolInput(tag="in_max_match", input_type=Boolean(optional=True), prefix="--max-match", doc=InputDocumentation(doc="Output secondary matches (false)")), ToolInput(tag="in_no_header", input_type=Boolean(optional=True), prefix="--no-header", doc=InputDocumentation(doc="Do not output header (false)")), ToolInput(tag="in_zero_match", input_type=Boolean(optional=True), prefix="--zero-match", doc=InputDocumentation(doc="Output header even if query has no match (false)")), ToolInput(tag="in_max_count", input_type=Int(optional=True), prefix="--max-count", doc=InputDocumentation(doc="Maximum mer count in super read to be used for alignment (5000)")), ToolInput(tag="in_unit_igs_lengths", input_type=File(optional=True), prefix="--unitigs-lengths", doc=InputDocumentation(doc="Length of k-unitigs")), ToolInput(tag="in_unit_igs_sequences", input_type=File(optional=True), prefix="--unitigs-sequences", doc=InputDocumentation(doc="Fasta file containing the sequence of the k-unitigs")), ToolInput(tag="in_compact", input_type=Boolean(optional=True), prefix="--compact", doc=InputDocumentation(doc="Compact output format (true)")), ToolInput(tag="in_k_mer", input_type=Int(optional=True), prefix="--k-mer", doc=InputDocumentation(doc="Length of k-mer used to create k-unitigs")), ToolInput(tag="in_super_reads", input_type=File(optional=True), prefix="--superreads", doc=InputDocumentation(doc="SuperReads sequence file")), ToolInput(tag="in_pac_bio", input_type=File(optional=True), prefix="--pacbio", doc=InputDocumentation(doc="PacBio read sequence file")), ToolInput(tag="in_jf_aligner_cmdline", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Jf_Aligner_V0_1_0().translate("wdl", allow_empty_container=True)

