from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, String

Createsuperreadsfordirectory_Perl_V0_1_0 = CommandToolBuilder(tool="createSuperReadsForDirectory.perl", base_command=["createSuperReadsForDirectory.perl"], inputs=[ToolInput(tag="in_length_kmer_use", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc=": the length of the k-mer to use for the calculations (31)")), ToolInput(tag="in_size_table_when", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc=": the size of the table when running jellyfish (2,000,000,000)")), ToolInput(tag="in_number_run_jellyfish", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc=": the number of processors to run jellyfish and create_k_unitigs (16)")), ToolInput(tag="in_k_unit_igs_file", input_type=File(optional=True), prefix="-kunitigsfile", doc=InputDocumentation(doc=": a user-given k-unitigs file; otherwise we calculate")), ToolInput(tag="in_mean_and_stdev_by_prefix_file", input_type=File(optional=True), prefix="-mean-and-stdev-by-prefix-file", doc=InputDocumentation(doc=": a file giving mate info about each\nlibrary. Each line is the 2-letter prefix for the reads\nin the library followed by its mean and stdev. This\nfile is mandatory unless -jumplibraryreads is specified")), ToolInput(tag="in_num_stdev_s_allowed", input_type=Int(optional=True), prefix="-num-stdevs-allowed", doc=InputDocumentation(doc=": max stdevs allowed for joinKUnitigs (5)")), ToolInput(tag="in_m_ku_disr", input_type=Int(optional=True), prefix="-mkudisr", doc=InputDocumentation(doc=": max base diffs between overlapping k-unitigs in super-reads (0)")), ToolInput(tag="in_min_reads_in_super_read", input_type=Int(optional=True), prefix="-minreadsinsuperread", doc=InputDocumentation(doc=": super-reads containing fewer than numReads\nreads will be eliminated (2)")), ToolInput(tag="in_merged_unit_ig_data_prefix", input_type=File(optional=True), prefix="-merged-unitig-data-prefix", doc=InputDocumentation(doc=": the prefix for the filenames relating to\nmerged unitig data. We assume that the k-unitig sequence\nis in  'prefix'.fasta, and the map file from orig to\nmerged k-unitigs is in 'prefix'.map.")), ToolInput(tag="in_output_join_result_for_each_join", input_type=Boolean(optional=True), prefix="-output-join-result-for-each-join", doc=InputDocumentation(doc=": Now does nothing; kept so other programs\nwon't break")), ToolInput(tag="in_stop_after", input_type=String(optional=True), prefix="--stopAfter", doc=InputDocumentation(doc=": Stop the run after one of the following 'target' names:\ncreateLengthStatisticsFiles\ncreateKUnitigHashTable\naddMissingMates\nfindReadKUnitigMatches\ncreateLengthStatisticsForMergedKUnitigsFiles\ncreateKUnitigMaxOverlaps\njoinKUnitigs\ngetSuperReadInsertCounts\ncreateFastaSuperReadSequences\nreduceSuperReads\ncreateFinalReadPlacementFile\ncreateFinalSuperReadFastaSequences")), ToolInput(tag="in_no_clean", input_type=Boolean(optional=True), prefix="-noclean", doc=InputDocumentation(doc=": don't clean up the files afterwards")), ToolInput(tag="in_mike_debug", input_type=Boolean(optional=True), prefix="-mikedebug", doc=InputDocumentation(doc=": don't kill off intermediate results")), ToolInput(tag="in_jump_library_reads", input_type=Boolean(optional=True), prefix="-jumplibraryreads", doc=InputDocumentation(doc=": we are generating for jump-library reads; a k-unitigs\nfile must be specified")), ToolInput(tag="in_keep_k_unit_igs_in_super_read_names", input_type=Boolean(optional=True), prefix="-keep-kunitigs-in-superread-names", doc=InputDocumentation(doc=": Use the super-read names which have the\nk-unitig numbers in them; otherwise use numeric names\n(lower numbers correspond to shorter super-reads)")), ToolInput(tag="in_extend_super_reads", input_type=Boolean(optional=True), prefix="-extend-super-reads", doc=InputDocumentation(doc=": extend the super-reads if the ending unitigs have\nunique continuations")), ToolInput(tag="in_close_gaps", input_type=Boolean(optional=True), prefix="-closegaps", doc=InputDocumentation(doc=": this is from a closeGaps.perl run, so some filesizes may be 0")), ToolInput(tag="in_time", input_type=Boolean(optional=True), prefix="-time", doc=InputDocumentation(doc=": time the commands"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Createsuperreadsfordirectory_Perl_V0_1_0().translate("wdl", allow_empty_container=True)

