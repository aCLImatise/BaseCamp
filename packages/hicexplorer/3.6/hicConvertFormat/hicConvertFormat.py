from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, File, Boolean

Hicconvertformat_V0_1_0 = CommandToolBuilder(tool="hicConvertFormat", base_command=["hicConvertFormat"], inputs=[ToolInput(tag="in_matrices", input_type=Array(t=String(), optional=True), prefix="--matrices", doc=InputDocumentation(doc="input file(s). Could be one or many files. (default:\nNone)")), ToolInput(tag="in_out_filename", input_type=Array(t=File(), optional=True), prefix="--outFileName", doc=InputDocumentation(doc="File name to save the exported matrix. (default: None)")), ToolInput(tag="in_input_format", input_type=String(optional=True), prefix="--inputFormat", doc=InputDocumentation(doc="File format of the input matrix file. The following\noptions are available: `h5` (native HiCExplorer format\nbased on hdf5 storage format), `cool`, `hic`, `homer`,\n`hicpro`. (default: None)")), ToolInput(tag="in_output_format", input_type=String(optional=True), prefix="--outputFormat", doc=InputDocumentation(doc="Output format. The following options are available:\n`h5` (native HiCExplorer format based on hdf5 storage\nformat). `cool`, `ginteractions`, `homer` and `mcool`\n(Default: cool).")), ToolInput(tag="in_correction_name", input_type=String(optional=True), prefix="--correction_name", doc=InputDocumentation(doc="Name of the column which stores the correction\nfactors. The information about the column names can be\nfigured out with the tool hicInfo. Option only for\ncool input files (Default: weight).")), ToolInput(tag="in_correction_division", input_type=Boolean(optional=True), prefix="--correction_division", doc=InputDocumentation(doc="If set, division is applied for correction. Default is\na multiplication. Option only for cool input files.\n(default: False)")), ToolInput(tag="in_store_applied_correction", input_type=Boolean(optional=True), prefix="--store_applied_correction", doc=InputDocumentation(doc="Store the applied correction and do not set correction\nfactors. Option only for cool input files. (default:\nFalse)")), ToolInput(tag="in_chromosome", input_type=String(optional=True), prefix="--chromosome", doc=InputDocumentation(doc="Load only one chromosome. Option only for cool input\nfiles. (default: None)")), ToolInput(tag="in_enforce_integer", input_type=Boolean(optional=True), prefix="--enforce_integer", doc=InputDocumentation(doc="Enforce datatype of counts to integer. Option only for\ncool input files. (default: False)")), ToolInput(tag="in_load_raw_values", input_type=Boolean(optional=True), prefix="--load_raw_values", doc=InputDocumentation(doc="Load only 'count' data and do not apply a correction.\nOption only for cool input files. (default: False)")), ToolInput(tag="in_resolutions", input_type=Array(t=String(), optional=True), prefix="--resolutions", doc=InputDocumentation(doc="List of resolutions that should be added. (default:\nNone)")), ToolInput(tag="in_bed_file_hic_pro", input_type=Array(t=File(), optional=True), prefix="--bedFileHicpro", doc=InputDocumentation(doc="Bed file(s) of hicpro file format. (default: None)\n"))], outputs=[], container="quay.io/biocontainers/hicexplorer:3.6--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hicconvertformat_V0_1_0().translate("wdl")

