from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File

Bcftools_Query_V0_1_0 = CommandToolBuilder(tool="bcftools_query", base_command=["bcftools", "query"], inputs=[ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="exclude sites for which the expression is true (see man page for details)")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="see man page for details")), ToolInput(tag="in_print_header", input_type=Boolean(optional=True), prefix="--print-header", doc=InputDocumentation(doc="print header")), ToolInput(tag="in_include", input_type=String(optional=True), prefix="--include", doc=InputDocumentation(doc="select sites for which the expression is true (see man page for details)")), ToolInput(tag="in_list_samples", input_type=Boolean(optional=True), prefix="--list-samples", doc=InputDocumentation(doc="print the list of samples and exit")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output file name [stdout]")), ToolInput(tag="in_regions", input_type=String(optional=True), prefix="--regions", doc=InputDocumentation(doc="restrict to comma-separated list of regions")), ToolInput(tag="in_regions_file", input_type=File(optional=True), prefix="--regions-file", doc=InputDocumentation(doc="restrict to regions listed in a file")), ToolInput(tag="in_samples", input_type=String(optional=True), prefix="--samples", doc=InputDocumentation(doc="list of samples to include")), ToolInput(tag="in_samples_file", input_type=File(optional=True), prefix="--samples-file", doc=InputDocumentation(doc="file of samples to include")), ToolInput(tag="in_targets", input_type=String(optional=True), prefix="--targets", doc=InputDocumentation(doc="similar to -r but streams rather than index-jumps")), ToolInput(tag="in_targets_file", input_type=File(optional=True), prefix="--targets-file", doc=InputDocumentation(doc="similar to -R but streams rather than index-jumps")), ToolInput(tag="in_allow_undef_tags", input_type=Boolean(optional=True), prefix="--allow-undef-tags", doc=InputDocumentation(doc="print '.' for undefined tags")), ToolInput(tag="in_vcf_list", input_type=File(optional=True), prefix="--vcf-list", doc=InputDocumentation(doc="process multiple VCFs listed in the file")), ToolInput(tag="in_a_dot_vcf_do_tgz", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output file name [stdout]"))], container="quay.io/biocontainers/bcftools:1.11--h7c999a4_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bcftools_Query_V0_1_0().translate("wdl")

