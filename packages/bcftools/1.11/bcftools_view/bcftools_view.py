from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Bcftools_View_V0_1_0 = CommandToolBuilder(tool="bcftools_view", base_command=["bcftools", "view"], inputs=[ToolInput(tag="in_drop_genotypes", input_type=Boolean(optional=True), prefix="--drop-genotypes", doc=InputDocumentation(doc="drop individual genotype information (after subsetting if -s option set)")), ToolInput(tag="in_compression_level", input_type=Boolean(optional=True), prefix="--compression-level", doc=InputDocumentation(doc="[0-9]     compression level: 0 uncompressed, 1 best speed, 9 best compression [-1]")), ToolInput(tag="in_no_version", input_type=Boolean(optional=True), prefix="--no-version", doc=InputDocumentation(doc="do not append version and command line to the header")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output file name [stdout]")), ToolInput(tag="in_output_type", input_type=String(optional=True), prefix="--output-type", doc=InputDocumentation(doc="b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF [v]")), ToolInput(tag="in_regions", input_type=String(optional=True), prefix="--regions", doc=InputDocumentation(doc="restrict to comma-separated list of regions")), ToolInput(tag="in_regions_file", input_type=File(optional=True), prefix="--regions-file", doc=InputDocumentation(doc="restrict to regions listed in a file")), ToolInput(tag="in_targets", input_type=Boolean(optional=True), prefix="--targets", doc=InputDocumentation(doc="[^]<region>           similar to -r but streams rather than index-jumps. Exclude regions with '^' prefix")), ToolInput(tag="in_targets_file", input_type=Boolean(optional=True), prefix="--targets-file", doc=InputDocumentation(doc="[^]<file>        similar to -R but streams rather than index-jumps. Exclude regions with '^' prefix")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="use multithreading with <int> worker threads [0]")), ToolInput(tag="in_trim_alt_alleles", input_type=Boolean(optional=True), prefix="--trim-alt-alleles", doc=InputDocumentation(doc="trim ALT alleles not seen in the genotype fields (or their subset with -s/-S)")), ToolInput(tag="in_no_update", input_type=Boolean(optional=True), prefix="--no-update", doc=InputDocumentation(doc="do not (re)calculate INFO fields for the subset (currently INFO/AC and INFO/AN)")), ToolInput(tag="in_samples", input_type=Boolean(optional=True), prefix="--samples", doc=InputDocumentation(doc="[^]<list>       comma separated list of samples to include (or exclude with '^' prefix)")), ToolInput(tag="in_samples_file", input_type=Boolean(optional=True), prefix="--samples-file", doc=InputDocumentation(doc="[^]<file>  file of samples to include (or exclude with '^' prefix)")), ToolInput(tag="in_force_samples", input_type=Boolean(optional=True), prefix="--force-samples", doc=InputDocumentation(doc="only warn about unknown subset samples")), ToolInput(tag="in_c__minacmaxac", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="/C, --min-ac/--max-ac <int>[:<type>]      minimum/maximum count for non-reference (nref), 1st alternate (alt1), least frequent\n(minor), most frequent (major) or sum of all but most frequent (nonmajor) alleles [nref]")), ToolInput(tag="in_apply_filters", input_type=String(optional=True), prefix="--apply-filters", doc=InputDocumentation(doc="require at least one of the listed FILTER strings (e.g. 'PASS,.')")), ToolInput(tag="in_genotype", input_type=Boolean(optional=True), prefix="--genotype", doc=InputDocumentation(doc="[^]<hom|het|miss>          require one or more hom/het/missing genotype or, if prefixed with '^', exclude sites with hom/het/missing genotypes")), ToolInput(tag="in_e_includeexclude_expr", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="/e, --include/--exclude <expr>            select/exclude sites for which the expression is true (see man page for details)")), ToolInput(tag="in__knownnovel_select", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="/n, --known/--novel                       select known/novel sites only (ID is not/is '.')")), ToolInput(tag="in__minallelesmaxalleles_int", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="/M, --min-alleles/--max-alleles <int>     minimum/maximum number of alleles listed in REF and ALT (e.g. -m2 -M2 for biallelic sites)")), ToolInput(tag="in_p__phasedexcludephased", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="/P, --phased/--exclude-phased             select/exclude sites where all samples are phased")), ToolInput(tag="in_q__minafmaxaf", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="/Q, --min-af/--max-af <float>[:<type>]    minimum/maximum frequency for non-reference (nref), 1st alternate (alt1), least frequent\n(minor), most frequent (major) or sum of all but most frequent (nonmajor) alleles [nref]")), ToolInput(tag="in_u__uncalledexcludeuncalled", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="/U, --uncalled/--exclude-uncalled         select/exclude sites without a called genotype")), ToolInput(tag="in_v__typesexcludetypes", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="/V, --types/--exclude-types <list>        select/exclude comma-separated list of variant types: snps,indels,mnps,ref,bnd,other [null]")), ToolInput(tag="in_x__privateexcludeprivate", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="/X, --private/--exclude-private           select/exclude sites where the non-reference alleles are exclusive (private) to the subset samples")), ToolInput(tag="in_in_dot_vcf_do_tgz", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output file name [stdout]"))], container="quay.io/biocontainers/bcftools:1.11--h7c999a4_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bcftools_View_V0_1_0().translate("wdl")

