from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Bcftools_Csq_V0_1_0 = CommandToolBuilder(tool="bcftools_csq", base_command=["bcftools", "csq"], inputs=[ToolInput(tag="in_fast_a_ref", input_type=File(optional=True), prefix="--fasta-ref", doc=InputDocumentation(doc="reference file in fasta format")), ToolInput(tag="in_gff_an_not", input_type=File(optional=True), prefix="--gff-annot", doc=InputDocumentation(doc="gff3 annotation file")), ToolInput(tag="in_brief_predictions", input_type=Boolean(optional=True), prefix="--brief-predictions", doc=InputDocumentation(doc="annotate with abbreviated protein-changing predictions")), ToolInput(tag="in_custom_tag", input_type=String(optional=True), prefix="--custom-tag", doc=InputDocumentation(doc="use this tag instead of the default BCSQ")), ToolInput(tag="in_local_csq", input_type=Boolean(optional=True), prefix="--local-csq", doc=InputDocumentation(doc="localized predictions, consider only one VCF record at a time")), ToolInput(tag="in_nc_sq", input_type=Int(optional=True), prefix="--ncsq", doc=InputDocumentation(doc="maximum number of per-haplotype consequences to consider for each site [15]")), ToolInput(tag="in_phase", input_type=Int(optional=True), prefix="--phase", doc=InputDocumentation(doc="|m|r|R|s           how to handle unphased heterozygous genotypes: [r]\na: take GTs as is, create haplotypes regardless of phase (0/1 -> 0|1)\nm: merge *all* GTs into a single haplotype (0/1 -> 1, 1/2 -> 1)\nr: require phased GTs, throw an error on unphased het GTs\nR: create non-reference haplotypes if possible (0/1 -> 1|1, 1/2 -> 1|2)\ns: skip unphased hets")), ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="exclude sites for which the expression is true")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="run even if some sanity checks fail")), ToolInput(tag="in_include", input_type=String(optional=True), prefix="--include", doc=InputDocumentation(doc="select sites for which the expression is true")), ToolInput(tag="in_no_version", input_type=Boolean(optional=True), prefix="--no-version", doc=InputDocumentation(doc="do not append version and command line to the header")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="write output to a file [standard output]")), ToolInput(tag="in_output_type", input_type=String(optional=True), prefix="--output-type", doc=InputDocumentation(doc="|u|z|v|t     b: compressed BCF, u: uncompressed BCF, z: compressed VCF\nv: uncompressed VCF, t: plain tab-delimited text output [v]")), ToolInput(tag="in_regions", input_type=String(optional=True), prefix="--regions", doc=InputDocumentation(doc="restrict to comma-separated list of regions")), ToolInput(tag="in_regions_file", input_type=File(optional=True), prefix="--regions-file", doc=InputDocumentation(doc="restrict to regions listed in a file")), ToolInput(tag="in_samples", input_type=Boolean(optional=True), prefix="--samples", doc=InputDocumentation(doc="-|LIST            samples to include or '-' to apply all variants and ignore samples")), ToolInput(tag="in_samples_file", input_type=File(optional=True), prefix="--samples-file", doc=InputDocumentation(doc="samples to include")), ToolInput(tag="in_targets", input_type=String(optional=True), prefix="--targets", doc=InputDocumentation(doc="similar to -r but streams rather than index-jumps")), ToolInput(tag="in_targets_file", input_type=File(optional=True), prefix="--targets-file", doc=InputDocumentation(doc="similar to -R but streams rather than index-jumps")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="use multithreading with <int> worker threads [0]")), ToolInput(tag="in_verbose", input_type=Int(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbosity level 0-2 [1]")), ToolInput(tag="in_in_dot_vcf", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="write output to a file [standard output]"))], container="quay.io/biocontainers/bcftools:1.12--h3f113a9_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bcftools_Csq_V0_1_0().translate("wdl")

