!Command
command:
- gapc
positional:
- !Positional
  optional: false
  position: 0
  name: product
  description: --kbacktrace                 backtracing for k-scoring lhs
named:
- !Flag
  optional: true
  synonyms:
  - -n
  description: '[ --inline ]              try to inline NTs'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -i
  description: '[ --instance ] arg        use instance (else first)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  description: '[ --product ] arg         use product of algebras'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  description: '[ --output ] arg          output filename (out.cc)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --class-name
  description: 'default: basename(output)'
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -E
  description: '[ --stdout ]              print code to stdout'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --tab
  description: overwrite table conf with this list
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -t
  description: "[ --table-design ]        automatically compute optimal table\nconfiguration\
    \ (ignore conf from source file)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --tab-all
  description: tabulate everything
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --cyk
  description: "bottom up evalulation codgen (default: top down\nunger style)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --backtrace
  description: use backtracing for the pretty print RHS of the
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --subopt-classify
  description: classified dp
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --subopt
  description: "generate suboptimal backtracing code (needs foo\n* pretty)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --sample
  description: generate stochastic backtracing code
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --no-coopt
  description: with kbacktrace, don't output cooptimal
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --kbest
  description: classify the k-best classes only
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --ambiguity
  description: "converts the selected instance into a context\nfree string grammar"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --specialize_grammar
  description: "uses the selected instance and creates a GAP\nprogram which creates\
    \ specialized GAP programs\nthat recognize a subset of candidates of the\noriginal\
    \ grammar."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --verbose
  description: show suppressed warnings and messages
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -l
  description: "[ --log-level ] arg       the log level, valid values are 0 (VERBOSE),\
    \ 1\n(INFO),  2 (NORMAL), 3 (WARNING), 4 (ERROR).\nDefault is 2 (NORMAL)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -I
  description: '[ --include ] arg         include path'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -v
  description: '[ --version ]             version string'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -P
  description: "[ --pareto-version ] arg  Implementation of Pareto Product to use\
    \ 0\n(NoSort), 1 (Sort), 2 (ISort), 3\n(MultiDimOptimized), 4 (NoSort, domination\n\
    ordered)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --multi-dim-pareto
  description: Use multi-dimensional Pareto. Works with -P 0,
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -c
  description: '[ --cut-off ] arg         The cut-off value for -P 3 option (65 default).'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -f
  description: "[ --float-accuracy ] arg  The number of decimal places regarded for\
    \ pareto\nand sorting procedures. If this is not set the\nfull floating point\
    \ is compared."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -S
  description: "[ --specialized-adp ] arg Set to generate specialized implementations\
    \ of\nthe ADP framework: 0 (Standard), 1 (Sorted ADP),\n2 (Pareto Eager ADP)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --step-mode
  description: "Mode of specialization: 0 force block mode, 1\nforce stepwise mode.\
    \ This is automatically set\nto best option if not specified.\n"
  args: !SimpleFlagArg
    name: arg
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  description: '[ --help ]                produce help message'
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "gapc version 2020.12.08\n  Copyright 2008-2011 Georg Sauthoff, GPL v3+\n\
  \nUsage: gapc (OPTION)* FILE\n\nOptions:\n  -h [ --help ]                produce\
  \ help message\n  -n [ --inline ]              try to inline NTs\n  -i [ --instance\
  \ ] arg        use instance (else first)\n  -p [ --product ] arg         use product\
  \ of algebras\n  -o [ --output ] arg          output filename (out.cc)\n  --class-name\
  \ arg             default: basename(output)\n  -E [ --stdout ]              print\
  \ code to stdout\n  --tab arg                    overwrite table conf with this\
  \ list\n  -t [ --table-design ]        automatically compute optimal table \n  \
  \                             configuration (ignore conf from source file)\n  --tab-all\
  \                    tabulate everything\n  --cyk                        bottom\
  \ up evalulation codgen (default: top down \n                               unger\
  \ style)\n  --backtrace                  use backtracing for the pretty print RHS\
  \ of the \n                               product\n  --kbacktrace              \
  \   backtracing for k-scoring lhs\n  --subopt-classify            classified dp\n\
  \  --subopt                     generate suboptimal backtracing code (needs foo\
  \ \n                               * pretty)\n  --sample                     generate\
  \ stochastic backtracing code\n  --no-coopt                   with kbacktrace, don't\
  \ output cooptimal \n                               candidates\n  --no-coopt-class\
  \             with kbacktrace, don't output cooptimal \n                       \
  \        candidates\n  -w [ --window-mode ]         window mode\n  --kbest     \
  \                 classify the k-best classes only\n  --ambiguity              \
  \    converts the selected instance into a context \n                          \
  \     free string grammar\n  --specialize_grammar         uses the selected instance\
  \ and creates a GAP \n                               program which creates specialized\
  \ GAP programs \n                               that recognize a subset of candidates\
  \ of the \n                               original grammar.\n  --verbose       \
  \             show suppressed warnings and messages\n  -l [ --log-level ] arg  \
  \     the log level, valid values are 0 (VERBOSE), 1 \n                        \
  \       (INFO),  2 (NORMAL), 3 (WARNING), 4 (ERROR). \n                        \
  \       Default is 2 (NORMAL).\n  -I [ --include ] arg         include path\n  -v\
  \ [ --version ]             version string\n  -P [ --pareto-version ] arg  Implementation\
  \ of Pareto Product to use 0 \n                               (NoSort), 1 (Sort),\
  \ 2 (ISort), 3 \n                               (MultiDimOptimized), 4 (NoSort,\
  \ domination \n                               ordered) \n  --multi-dim-pareto  \
  \         Use multi-dimensional Pareto. Works with -P 0, \n                    \
  \           -P 1 and -P 3.\n  -c [ --cut-off ] arg         The cut-off value for\
  \ -P 3 option (65 default).\n  -f [ --float-accuracy ] arg  The number of decimal\
  \ places regarded for pareto\n                               and sorting procedures.\
  \ If this is not set the \n                               full floating point is\
  \ compared.\n  -S [ --specialized-adp ] arg Set to generate specialized implementations\
  \ of \n                               the ADP framework: 0 (Standard), 1 (Sorted\
  \ ADP),\n                               2 (Pareto Eager ADP)\n  --step-mode arg\
  \              Mode of specialization: 0 force block mode, 1 \n                \
  \               force stepwise mode. This is automatically set \n              \
  \                 to best option if not specified.\n\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/bellmans-gapc:2020.12.08--h18542e6_0
