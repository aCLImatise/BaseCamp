from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, String

Pathoverlap_V0_1_0 = CommandToolBuilder(tool="PathOverlap", base_command=["PathOverlap"], inputs=[ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="k-mer size")), ToolInput(tag="in_graph", input_type=File(optional=True), prefix="--graph", doc=InputDocumentation(doc="write the contig adjacency graph to FILE")), ToolInput(tag="in_repeats", input_type=File(optional=True), prefix="--repeats", doc=InputDocumentation(doc="write repeat contigs to FILE")), ToolInput(tag="in_overlap", input_type=Boolean(optional=True), prefix="--overlap", doc=InputDocumentation(doc="find overlapping paths [default]")), ToolInput(tag="in_assemble", input_type=Boolean(optional=True), prefix="--assemble", doc=InputDocumentation(doc="assemble overlapping paths")), ToolInput(tag="in_trim", input_type=Boolean(optional=True), prefix="--trim", doc=InputDocumentation(doc="trim overlapping paths")), ToolInput(tag="in_output_graph_adj", input_type=Boolean(optional=True), prefix="--adj", doc=InputDocumentation(doc="output the graph in ADJ format [default]")), ToolInput(tag="in_as_qg", input_type=Boolean(optional=True), prefix="--asqg", doc=InputDocumentation(doc="output the graph in ASQG format")), ToolInput(tag="in_dot", input_type=Boolean(optional=True), prefix="--dot", doc=InputDocumentation(doc="output the graph in GraphViz format")), ToolInput(tag="in_gfa", input_type=Boolean(optional=True), prefix="--gfa", doc=InputDocumentation(doc="output the graph in GFA1 format")), ToolInput(tag="in_gfa_one", input_type=Boolean(optional=True), prefix="--gfa1", doc=InputDocumentation(doc="output the graph in GFA1 format")), ToolInput(tag="in_gfa_two", input_type=Boolean(optional=True), prefix="--gfa2", doc=InputDocumentation(doc="output the graph in GFA2 format")), ToolInput(tag="in_gv", input_type=Boolean(optional=True), prefix="--gv", doc=InputDocumentation(doc="output the graph in GraphViz format")), ToolInput(tag="in_sam", input_type=Boolean(optional=True), prefix="--sam", doc=InputDocumentation(doc="output the graph in SAM format")), ToolInput(tag="in_ss", input_type=Boolean(optional=True), prefix="--SS", doc=InputDocumentation(doc="expect contigs to be oriented correctly")), ToolInput(tag="in_no_ss", input_type=Boolean(optional=True), prefix="--no-SS", doc=InputDocumentation(doc="no assumption about contig orientation [default]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="specify path of database repository in FILE")), ToolInput(tag="in_library", input_type=String(optional=True), prefix="--library", doc=InputDocumentation(doc="specify library NAME for sqlite")), ToolInput(tag="in_strain", input_type=String(optional=True), prefix="--strain", doc=InputDocumentation(doc="specify strain NAME for sqlite")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="specify species NAME for sqlite")), ToolInput(tag="in_contig_adjacency_graph", input_type=String(), position=0, doc=InputDocumentation(doc="contig adjacency graph")), ToolInput(tag="in_path", input_type=File(), position=1, doc=InputDocumentation(doc="sequences of contig IDs"))], outputs=[], container="quay.io/biocontainers/abyss:2.3.1--hd403d74_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pathoverlap_V0_1_0().translate("wdl")

