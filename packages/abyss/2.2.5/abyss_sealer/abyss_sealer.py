from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Abyss_Sealer_V0_1_0 = CommandToolBuilder(tool="abyss_sealer", base_command=["abyss-sealer"], inputs=[ToolInput(tag="in_print_flanks", input_type=Boolean(optional=True), prefix="--print-flanks", doc=InputDocumentation(doc="outputs flank files")), ToolInput(tag="in_input_scaffold", input_type=File(optional=True), prefix="--input-scaffold", doc=InputDocumentation(doc="load scaffold from FILE")), ToolInput(tag="in_flank_length", input_type=Int(optional=True), prefix="--flank-length", doc=InputDocumentation(doc="length of flanks to be used as pseudoreads [100]")), ToolInput(tag="in_max_gap_length", input_type=Int(optional=True), prefix="--max-gap-length", doc=InputDocumentation(doc="max gap size to fill in bp [800]; runtime increases\nexponentially with respect to this parameter")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="use N parallel threads [1]")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="the size of a k-mer")), ToolInput(tag="in_bloom_size", input_type=Int(optional=True), prefix="--bloom-size", doc=InputDocumentation(doc="size of Bloom filter (e.g. '40G'). Required\nwhen not using pre-built Bloom filter(s)\n(-i option)")), ToolInput(tag="in_dot_file", input_type=File(optional=True), prefix="--dot-file", doc=InputDocumentation(doc="write graph traversals to a DOT file")), ToolInput(tag="in_fix_errors", input_type=Boolean(optional=True), prefix="--fix-errors", doc=InputDocumentation(doc="find and fix single-base errors when reads\nhave no kmers in bloom filter [disabled]")), ToolInput(tag="in_max_cost", input_type=Int(optional=True), prefix="--max-cost", doc=InputDocumentation(doc="max edges to traverse during each graph search [100000]")), ToolInput(tag="in_input_bloom", input_type=File(optional=True), prefix="--input-bloom", doc=InputDocumentation(doc="load bloom filter from FILE")), ToolInput(tag="in_mask", input_type=Boolean(optional=True), prefix="--mask", doc=InputDocumentation(doc="mask new and changed bases as lower case")), ToolInput(tag="in_no_mask", input_type=Boolean(optional=True), prefix="--no-mask", doc=InputDocumentation(doc="do not mask bases [default]")), ToolInput(tag="in_chastity", input_type=Boolean(optional=True), prefix="--chastity", doc=InputDocumentation(doc="discard unchaste reads [default]")), ToolInput(tag="in_no_chastity", input_type=Boolean(optional=True), prefix="--no-chastity", doc=InputDocumentation(doc="do not discard unchaste reads")), ToolInput(tag="in_trim_masked", input_type=Boolean(optional=True), prefix="--trim-masked", doc=InputDocumentation(doc="trim masked bases from the ends of reads")), ToolInput(tag="in_no_trim_masked", input_type=Boolean(optional=True), prefix="--no-trim-masked", doc=InputDocumentation(doc="do not trim masked bases from the ends\nof reads [default]")), ToolInput(tag="in_flank_mismatches", input_type=Int(optional=True), prefix="--flank-mismatches", doc=InputDocumentation(doc="max mismatches between paths and flanks; use\n'nolimit' for no limit [nolimit]")), ToolInput(tag="in_max_mismatches", input_type=Int(optional=True), prefix="--max-mismatches", doc=InputDocumentation(doc="max mismatches between all alternate paths;\nuse 'nolimit' for no limit [nolimit]")), ToolInput(tag="in_no_limits", input_type=Boolean(optional=True), prefix="--no-limits", doc=InputDocumentation(doc="disable all limits; equivalent to\n'-B nolimit -m nolimit -M nolimit -P nolimit'")), ToolInput(tag="in_output_prefix", input_type=File(optional=True), prefix="--output-prefix", doc=InputDocumentation(doc="prefix of output FASTA files [required]")), ToolInput(tag="in_max_paths", input_type=Int(optional=True), prefix="--max-paths", doc=InputDocumentation(doc="merge at most N alternate paths; use 'nolimit'\nfor no limit [2]")), ToolInput(tag="in_trim_quality", input_type=String(optional=True), prefix="--trim-quality", doc=InputDocumentation(doc="trim bases from the ends of reads whose\nquality is less than the threshold")), ToolInput(tag="in_standard_quality", input_type=Boolean(optional=True), prefix="--standard-quality", doc=InputDocumentation(doc="zero quality is `!' (33)\ndefault for FASTQ and SAM files")), ToolInput(tag="in_illumina_quality", input_type=Boolean(optional=True), prefix="--illumina-quality", doc=InputDocumentation(doc="zero quality is `@' (64)\ndefault for qseq and export files")), ToolInput(tag="in_read_name", input_type=String(optional=True), prefix="--read-name", doc=InputDocumentation(doc="only process reads with names that contain STR")), ToolInput(tag="in_search_mem", input_type=Int(optional=True), prefix="--search-mem", doc=InputDocumentation(doc="mem limit for graph searches; multiply by the\nnumber of threads (-j) to get the total mem used\nfor graph traversal [500M]")), ToolInput(tag="in_gap_file", input_type=File(optional=True), prefix="--gap-file", doc=InputDocumentation(doc="write sealed gaps to FILE")), ToolInput(tag="in_trace_file", input_type=File(optional=True), prefix="--trace-file", doc=InputDocumentation(doc="write graph search stats to FILE")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_max_branches", input_type=Int(optional=True), prefix="--max-branches", doc=InputDocumentation(doc="max branches in de Bruijn graph traversal;\nuse 'nolimit' for no limit [nolimit]")), ToolInput(tag="in_min_frag", input_type=Int(optional=True), prefix="--min-frag", doc=InputDocumentation(doc="min fragment size in base pairs")), ToolInput(tag="in_max_frag", input_type=Int(optional=True), prefix="--max-frag", doc=InputDocumentation(doc="max fragment size in base pairs")), ToolInput(tag="in_abyss_sealer_b", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_bloom_filter_size", input_type=Int(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/abyss:2.2.5--ha4ec83a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Abyss_Sealer_V0_1_0().translate("wdl")

