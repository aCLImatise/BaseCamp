from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Laagc_V0_1_0 = CommandToolBuilder(tool="laagc", base_command=["laagc"], inputs=[ToolInput(tag="in_rng_seed", input_type=Boolean(optional=True), prefix="--rngSeed", doc=InputDocumentation(doc="RNG seed, modulates reservoir filtering of reads. [42]")), ToolInput(tag="in_generate_bam_index", input_type=Boolean(optional=True), prefix="--generateBamIndex", doc=InputDocumentation(doc="Generate PacBio indicies (*.pbi) for BAM files that don't have them.")), ToolInput(tag="in_ignore_bam_index", input_type=Boolean(optional=True), prefix="--ignoreBamIndex", doc=InputDocumentation(doc="Ignore PacBio indicies (*.pbi) for BAM files if they exist.")), ToolInput(tag="in_num_threads", input_type=Boolean(optional=True), prefix="--numThreads", doc=InputDocumentation(doc="Number of threads to use, <= 0 means autodetection. [-1]")), ToolInput(tag="in_model_path", input_type=Boolean(optional=True), prefix="--modelPath", doc=InputDocumentation(doc="Path to a model file or directory containing model files.")), ToolInput(tag="in_model_spec", input_type=Boolean(optional=True), prefix="--modelSpec", doc=InputDocumentation(doc="Name of chemistry or model to use, overriding default selection.")), ToolInput(tag="in_barcodes", input_type=Boolean(optional=True), prefix="--barcodes", doc=InputDocumentation(doc="Fasta file of the barcode sequences used, overwriting any names in the DataSet. NOTE: Only used to find barcode names")), ToolInput(tag="in_min_barcode_score", input_type=Boolean(optional=True), prefix="--minBarcodeScore", doc=InputDocumentation(doc="Minimum average barcode score to require of subreads. [26]")), ToolInput(tag="in_full_length", input_type=Boolean(optional=True), prefix="--fullLength", doc=InputDocumentation(doc="Filter input reads by presence of both flanking barcodes.")), ToolInput(tag="in_do_bc", input_type=Boolean(optional=True), prefix="--doBc", doc=InputDocumentation(doc="Comma-separated list of barcode pairs to analyze, either by name, such as 'lbc1--lbc1', or by index, such as '0--0'.")), ToolInput(tag="in_ignore_bc", input_type=Boolean(optional=True), prefix="--ignoreBc", doc=InputDocumentation(doc="Disable barcode filtering and treat all data as one sample.")), ToolInput(tag="in_minlength", input_type=Boolean(optional=True), prefix="--minLength", doc=InputDocumentation(doc="Minimum length of input reads. [3000]")), ToolInput(tag="in_maxlength", input_type=Boolean(optional=True), prefix="--maxLength", doc=InputDocumentation(doc="Maximum length of input reads, set 0 to disable. [0]")), ToolInput(tag="in_min_read_score", input_type=Boolean(optional=True), prefix="--minReadScore", doc=InputDocumentation(doc="Minimum read score of input reads. [0.75]")), ToolInput(tag="in_mins_nr", input_type=Boolean(optional=True), prefix="--minSnr", doc=InputDocumentation(doc="Minimum SNR of input reads. [3.75]")), ToolInput(tag="in_min_guide_score", input_type=Boolean(optional=True), prefix="--minGuideScore", doc=InputDocumentation(doc="Minimum score of a query alignment to the cluster guide [50]")), ToolInput(tag="in_min_guide_span", input_type=Boolean(optional=True), prefix="--minGuideSpan", doc=InputDocumentation(doc="Minimum span of a query alignment to the cluster guide [500]")), ToolInput(tag="in_whitelist", input_type=Boolean(optional=True), prefix="--whitelist", doc=InputDocumentation(doc="A file of ReadIds, as either Text or Fasta, to allow from the input file. ['None']")), ToolInput(tag="in_max_reads", input_type=Boolean(optional=True), prefix="--maxReads", doc=InputDocumentation(doc="Maximum number of input reads to cluster per barcode. [1000]")), ToolInput(tag="in_max_clustering_reads", input_type=Boolean(optional=True), prefix="--maxClusteringReads", doc=InputDocumentation(doc="Maximum number of input reads to cluster per barcode. [400]")), ToolInput(tag="in_full_length_preference", input_type=Boolean(optional=True), prefix="--fullLengthPreference", doc=InputDocumentation(doc="Prefer full-length subreads when clustering")), ToolInput(tag="in_full_length_clustering", input_type=Boolean(optional=True), prefix="--fullLengthClustering", doc=InputDocumentation(doc="Only use full-length subreads when clustering")), ToolInput(tag="in_cluster_inflation", input_type=Boolean(optional=True), prefix="--clusterInflation", doc=InputDocumentation(doc="Markov Clustering inflation parameter. [2]")), ToolInput(tag="in_cluster_loop_weight", input_type=Boolean(optional=True), prefix="--clusterLoopWeight", doc=InputDocumentation(doc="Markov Clustering loop weight parameter. [0.001]")), ToolInput(tag="in_skip_rate", input_type=Boolean(optional=True), prefix="--skipRate", doc=InputDocumentation(doc="Skip some high-scoring alignments to disperse the cluster more. [0]")), ToolInput(tag="in_min_cluster_size", input_type=Boolean(optional=True), prefix="--minClusterSize", doc=InputDocumentation(doc="Minimum number reads supporting a cluster before it is reported. [20]")), ToolInput(tag="in_do_cluster", input_type=Boolean(optional=True), prefix="--doCluster", doc=InputDocumentation(doc="Only analyze one specified [-1]")), ToolInput(tag="in_clustering", input_type=Boolean(optional=True), prefix="--Clustering", doc=InputDocumentation(doc="Enable the coarse clustering")), ToolInput(tag="in_no_clustering", input_type=Boolean(optional=True), prefix="--noClustering", doc=InputDocumentation(doc="Disable the coarse clustering")), ToolInput(tag="in_ignore_ends", input_type=Boolean(optional=True), prefix="--ignoreEnds", doc=InputDocumentation(doc="When splitting, ignore N bases at the ends. Use to prevent excessive splitting caused by degenerate primers. [0]")), ToolInput(tag="in_max_phasing_reads", input_type=Boolean(optional=True), prefix="--maxPhasingReads", doc=InputDocumentation(doc="Maximum number of reads to use for phasing/consensus. [500]")), ToolInput(tag="in_min_q_score", input_type=Boolean(optional=True), prefix="--minQScore", doc=InputDocumentation(doc="Minimum score to require of mutations  used for phasing. [20]")), ToolInput(tag="in_min_prevalence", input_type=Boolean(optional=True), prefix="--minPrevalence", doc=InputDocumentation(doc="Minimum prevalence to require of mutations used for phasing. [0.09]")), ToolInput(tag="in_min_split_reads", input_type=Boolean(optional=True), prefix="--minSplitReads", doc=InputDocumentation(doc="Minimum number reads favoring the minor phase required to split a haplotype. [20]")), ToolInput(tag="in_min_split_fraction", input_type=Boolean(optional=True), prefix="--minSplitFraction", doc=InputDocumentation(doc="Minimum fraction of reads favoring the minor phase required to split a haplotype. [0.1]")), ToolInput(tag="in_min_split_score", input_type=Boolean(optional=True), prefix="--minSplitScore", doc=InputDocumentation(doc="Global likelihood improvement required to split a haplotype. [500]")), ToolInput(tag="in_min_zscore", input_type=Boolean(optional=True), prefix="--minZScore", doc=InputDocumentation(doc="Minimum ZScore to allow before adding a read to a haplotype. [-10]")), ToolInput(tag="in_phasing", input_type=Boolean(optional=True), prefix="--Phasing", doc=InputDocumentation(doc="Enable the fine phasing step.")), ToolInput(tag="in_no_phasing", input_type=Boolean(optional=True), prefix="--noPhasing", doc=InputDocumentation(doc="Disable the fine phasing step.")), ToolInput(tag="in_taken", input_type=Boolean(optional=True), prefix="--takeN", doc=InputDocumentation(doc="Report only the top N consensus sequences for each barcode, set <1 to disable. [0]")), ToolInput(tag="in_trim_ends", input_type=Boolean(optional=True), prefix="--trimEnds", doc=InputDocumentation(doc="Trim N bases from each end of each consensus. [0]")), ToolInput(tag="in_min_predicted_accuracy", input_type=Boolean(optional=True), prefix="--minPredictedAccuracy", doc=InputDocumentation(doc="Minimum predicted consensus accuracy below which a consensus is called 'noise'. [0.95]")), ToolInput(tag="in_chimera_score_threshold", input_type=Boolean(optional=True), prefix="--chimeraScoreThreshold", doc=InputDocumentation(doc="Minimum score to consider a sequence chimeric. [1]")), ToolInput(tag="in_chimera_filter", input_type=Boolean(optional=True), prefix="--ChimeraFilter", doc=InputDocumentation(doc="Activate the chimera filter and separate chimeric consensus outputs")), ToolInput(tag="in_no_chimera_filter", input_type=Boolean(optional=True), prefix="--noChimeraFilter", doc=InputDocumentation(doc="Deactivate the chimera filter and output all consensus")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logFile", doc=InputDocumentation(doc="Output file to write logging information to")), ToolInput(tag="in_result_file", input_type=File(optional=True), prefix="--resultFile", doc=InputDocumentation(doc="Output file for high-quality results. ['amplicon_analysis.fastq']")), ToolInput(tag="in_junk_file", input_type=File(optional=True), prefix="--junkFile", doc=InputDocumentation(doc="Output file for low-quality or chimeric results. ['amplicon_analysis_chimeras_noise.fastq']")), ToolInput(tag="in_report_file", input_type=File(optional=True), prefix="--reportFile", doc=InputDocumentation(doc="Output file for summary report. ['amplicon_analysis_summary.csv']")), ToolInput(tag="in_input_report_file", input_type=Boolean(optional=True), prefix="--inputReportFile", doc=InputDocumentation(doc="Output estimates of input PCR quality based on subread mappings ['amplicon_analysis_input.csv']")), ToolInput(tag="in_locus_report_file", input_type=Boolean(optional=True), prefix="--locusReportFile", doc=InputDocumentation(doc="Output estimates of sample mixture based on ZMW/subread mappings ['amplicon_analysis_per_locus.csv']")), ToolInput(tag="in_whitelist_report_file", input_type=Boolean(optional=True), prefix="--whitelistReportFile", doc=InputDocumentation(doc="Output barcode/locus mappings for each subread seen ['amplicon_analysis_whitelist.csv']")), ToolInput(tag="in_sub_reads_report_prefix", input_type=Boolean(optional=True), prefix="--subreadsReportPrefix", doc=InputDocumentation(doc="Output prefix for subreads report. ['amplicon_analysis_subreads']")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Use verbose output.")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="Set log level. ['INFO']")), ToolInput(tag="in_emit_tool_contract", input_type=Boolean(optional=True), prefix="--emit-tool-contract", doc=InputDocumentation(doc="Emit tool contract.")), ToolInput(tag="in_resolved_tool_contract", input_type=Boolean(optional=True), prefix="--resolved-tool-contract", doc=InputDocumentation(doc="Use args from resolved tool contract.")), ToolInput(tag="in_three_bsd", input_type=Int(), position=0, doc=InputDocumentation(doc="General Options:")), ToolInput(tag="in_guide", input_type=String(), position=0, doc=InputDocumentation(doc="Guide file.")), ToolInput(tag="in_input", input_type=String(), position=1, doc=InputDocumentation(doc="Input file."))], outputs=[ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Output file to write logging information to")), ToolOutput(tag="out_result_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_result_file", type_hint=File()), doc=OutputDocumentation(doc="Output file for high-quality results. ['amplicon_analysis.fastq']")), ToolOutput(tag="out_junk_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_junk_file", type_hint=File()), doc=OutputDocumentation(doc="Output file for low-quality or chimeric results. ['amplicon_analysis_chimeras_noise.fastq']")), ToolOutput(tag="out_report_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_report_file", type_hint=File()), doc=OutputDocumentation(doc="Output file for summary report. ['amplicon_analysis_summary.csv']"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Laagc_V0_1_0().translate("wdl", allow_empty_container=True)

