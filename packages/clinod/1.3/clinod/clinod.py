from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Directory, Boolean, String

Clinod_V0_1_0 = CommandToolBuilder(tool="clinod", base_command=["clinod"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="- required, absolute path to the input file.\nThe input file expected to contain the list of\nFASTA formatted sequences.")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="- optional, by default the system prints the\noutput to the console. If the file exists it\nwill be overridden.\nThe order of the predictions in the output is\nguaranteed to be the same as the order of the\nsequences in the input. This means that the\nprediction for the tenth sequence from the input\nwill be the tenth prediction in the output,\nunless -nonols parameter was used to suppress\nreporting predictions with no NOLS detected")), ToolInput(tag="in_optional_defaults_medium", input_type=Int(optional=True), prefix="-f", doc=InputDocumentation(doc="- optional, defaults to MEDIUM. Possible values\nCOMPLETE, FULL, MEDIUM, SHORT and MINIMAL (case\nsensitive)\nWhere MINIMAL - contains the sequence name and\nthe number of NOLS detected.\nWhere MINIMAL_TAB - same as MINIMAL but the\nfields in the output are tab delimited and only\nthe first word of the sequence name is output.\nSHORT - same as MINIMAL plus coordinates of\nthe NOLS\nMEDIUM - same as SHORT plus NOLS reported\nseparately\nMEDIUM_TAB - same as MEDIUM but the fields in\nthe output are tab delimited and only the first\nword of the sequence name is output.\nFULL - same as MEDIUM plus scores for each\nposition of the sequence. The scores are\nreported for every window of size 20 in the full\nsequence, one score per line. The scores are\nassociate with the first residue of the window.\nWindows with a score above 0.8 are predicted as\nNoLSs.\nCOMPLETE - same as FULL plus the original\nsequence")), ToolInput(tag="in_optional_defaults_environmentalvariable", input_type=Directory(optional=True), prefix="-d", doc=InputDocumentation(doc="- optional, defaults to the system temp directory\n(defined by the 'java.io.tmpdir' environmental\nvariable) If the directory does not exist, it\nwill be created. However the parent directory\nmust exist. For example if working directory is\nset to /home/tmp and home directory does not\nexist then the execution will be terminated.\nIf the home directory exist but tmp directory\ndoes not, the tmp directory will be created.\nIf the /home/tmp directory exist then it will\nbe used. If the /home/tmp directory is not\nempty, then any files with the same name as\ngenerated by the program will be overridden.")), ToolInput(tag="in_optional_defaults_number", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="- optional, defaults to the number of cores\navailable on the computer. Maximum number of\nthreads cannot be greater than twice the number\nof available cores. However, we have not\nobserved any significant gains from increasing\nthe number of threads beyond the number of CPU\ncores actually available on the computer.")), ToolInput(tag="in_bm", input_type=File(optional=True), prefix="-bm", doc=InputDocumentation(doc="- optional, an absolute path to the Batchman\nexecutable. By default this path is searched in\nthe environmental variable called BATCHMAN_PATH.\nIf it is not found there, then clinod attempts\nto locate the batchman executable in the same\ndirectory as the clinod jar file. In order to be\nfound there the batchman executable must be\ncalled the 'batchman.exe' on Windows systems and\nthe 'batchman' on all other operating systems.\nIf neither of those paths are valid then the\nexecution fails.\nIf several paths are valid then clinod uses them\nin the following order:\n1) Path from the command line parameter\n2) Path from the environmental variable\n3) Local directory path")), ToolInput(tag="in_non_ols", input_type=Boolean(optional=True), prefix="-nonols", doc=InputDocumentation(doc="- optional, suppresses reporting of the proteins\nwith no NOLS detected if specified.")), ToolInput(tag="in_clean_sequence", input_type=Boolean(optional=True), prefix="-clean_sequence", doc=InputDocumentation(doc="- optional, if specified causes the predictor to\nautomatically remove all non-protein characters\nfrom the sequences that contains them.\nThe predictor only works with unambiguous\nprotein sequences. Only the following characters\nconsidered to be valid: ARNDCQEGHILKMFPSTWYV.\nIf any other character is detected in the\nsequence the predictor stops the execution and\nraises the exception unless this flag is\nspecified. In this case, the predictor removes\ninvalid characters from the sequence and writes\nthe information about it into the log file.")), ToolInput(tag="in_jar", input_type=Int(optional=True), prefix="-jar", doc=InputDocumentation(doc="")), ToolInput(tag="in_console_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Performance: "))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="- optional, by default the system prints the\noutput to the console. If the file exists it\nwill be overridden.\nThe order of the predictions in the output is\nguaranteed to be the same as the order of the\nsequences in the input. This means that the\nprediction for the tenth sequence from the input\nwill be the tenth prediction in the output,\nunless -nonols parameter was used to suppress\nreporting predictions with no NOLS detected"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Clinod_V0_1_0().translate("wdl", allow_empty_container=True)

