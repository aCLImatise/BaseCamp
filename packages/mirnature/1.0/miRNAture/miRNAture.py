from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Mirnature_V0_1_0 = CommandToolBuilder(tool="miRNAture", base_command=["miRNAture"], inputs=[ToolInput(tag="in_man", input_type=Boolean(optional=True), prefix="-man", doc=InputDocumentation(doc="Prints an extended help page and exits.")), ToolInput(tag="in_blast_queries_folder", input_type=File(optional=True), prefix="-blastQueriesFolder", doc=InputDocumentation(doc="Path of blast query sequences in FASTA format to be searched\non the subject sequence.")), ToolInput(tag="in_datadir", input_type=File(optional=True), prefix="-datadir", doc=InputDocumentation(doc="Path to pre-calculated data directory containing RFAM and\nmiRBase covariance, hidden markov models, and necessary\nfiles to run MIRfix.")), ToolInput(tag="in_mir_fix_path", input_type=File(optional=True), prefix="-mirfix_path", doc=InputDocumentation(doc="Alternative path of the MIRfix.py program.")), ToolInput(tag="in_mode", input_type=Boolean(optional=True), prefix="-mode", doc=InputDocumentation(doc="<Blast, HMM, Other_CM, Infernal, Final>\nHomology search modes: Blast, HMM, Other_CM, Infernal and/or\nFinal. It is possible to perform individual analysis, but it\nis always recommended to include the Final option.")), ToolInput(tag="in_parallel_slur_m", input_type=Int(optional=True), prefix="-parallel_slurm", doc=InputDocumentation(doc="Activate SLURM resource manager to submit parallel jobs (1)\nor not (0).")), ToolInput(tag="in_repetition_cut_off", input_type=Boolean(optional=True), prefix="-repetition_cutoff", doc=InputDocumentation(doc="<relax,Number_Loci,Candidates_to_evaluate>\nSetup number of maximum loci number that will be evaluated\nby the mature's annotation stage. By default, miRNAture will\ndetect miRNA families that report high number of loci (> 200\nloci). Then, it will select the top 100 candidates in terms\nof alignment scores, as candidates for the validation stage\n(default,200,100). The designed values could be modified by\nthe following flag:\n'relax,Number_Loci,Candidates_to_evaluate'. This option\nallows to the user to select the threshold values to detect\nrepetitive families. The first parameter is <relax>, which\ntells miRNAture to change the default configuration. The\nnext one, <Number_Loci> is the threshold of loci number to\nclassify a family as repetitive. The last one,\n<Candidates_to_evaluate>, is the number of candidates prone\nto be evaluated in the next evaluation section. The rest\ncandidates are included as homology 'potential' candidates.")), ToolInput(tag="in_strategy", input_type=Boolean(optional=True), prefix="-strategy", doc=InputDocumentation(doc="<1,2,3,4,5,6,7,8,9,10>\nThis flag is blast mode specific. It corresponds to blast\nstrategies that would be used to search miRNAs. It must be\nindicated along with -m Blast flag.")), ToolInput(tag="in_specie_genome", input_type=File(optional=True), prefix="-specie_genome", doc=InputDocumentation(doc="Path of target sequences to be analyzed in FASTA format.")), ToolInput(tag="in_specie_name", input_type=String(optional=True), prefix="-specie_name", doc=InputDocumentation(doc="Specie or sequence source's scientific name. The format must\nbe: Genera_specie, separated by '_'.")), ToolInput(tag="in_specie_tag", input_type=String(optional=True), prefix="-specie_tag", doc=InputDocumentation(doc="Experiment tag. Will help to identify the generated files\nalong miRNA output files.")), ToolInput(tag="in_subset_models", input_type=File(optional=True), prefix="-subset_models", doc=InputDocumentation(doc="Target list of CMs to be searched on subject\ngenome/sequences. If not indicated, miRNAture will run all\nRFAM v14.4 metazoan miRNA models.")), ToolInput(tag="in_user_models", input_type=File(optional=True), prefix="-user_models", doc=InputDocumentation(doc="Directory with additional hidden Markov (HMMs) or covariance\nmodels (CMs) provided by the user. This must be contain a\ncorresponding HMMs/ and CMs/ folders, which the user models\nwill be identified.")), ToolInput(tag="in_workdir", input_type=File(optional=True), prefix="-workdir", doc=InputDocumentation(doc="Working directory path to write all miRNAture results.\n"))], outputs=[ToolOutput(tag="out_workdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_workdir", type_hint=File()), doc=OutputDocumentation(doc="Working directory path to write all miRNAture results.\n"))], container="quay.io/biocontainers/mirnature:1.0--pl5262r35hdfd78af_2", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mirnature_V0_1_0().translate("wdl")

