from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean

Homgenemapping_V0_1_0 = CommandToolBuilder(tool="homGeneMapping", base_command=["homGeneMapping"], inputs=[ToolInput(tag="in_hal_file", input_type=File(optional=True), prefix="--halfile", doc=InputDocumentation(doc="input hal file")), ToolInput(tag="in_gt_fs", input_type=File(optional=True), prefix="--gtfs", doc=InputDocumentation(doc="a text file containing the locations of the input gene files\nand optionally the hints files (both in GTF format).\nThe file is formatted as follows:\nname_of_genome_1  path/to/genefile/of/genome_1  path/to/hintsfile/of/genome_1\nname_of_genome_2  path/to/genefile/of/genome_2  path/to/hintsfile/of/genome_2\n...\nname_of_genome_N  path/to/genefile/of/genome_N  path/to/hintsfile/of/genome_N")), ToolInput(tag="in_cpus", input_type=Int(optional=True), prefix="--cpus", doc=InputDocumentation(doc="N is the number of CPUs to use (default: 1)")), ToolInput(tag="in_no_dupes", input_type=Boolean(optional=True), prefix="--noDupes", doc=InputDocumentation(doc="do not map between duplications in hal graph. (default: off)")), ToolInput(tag="in_details", input_type=Boolean(optional=True), prefix="--details", doc=InputDocumentation(doc="print detailed output (default: off)")), ToolInput(tag="in_hal_lift_over_exec_dir", input_type=File(optional=True), prefix="--halLiftover_exec_dir", doc=InputDocumentation(doc="Directory that contains the executable halLiftover\nIf not specified it must be in $PATH environment variable.")), ToolInput(tag="in_unmapped", input_type=Boolean(optional=True), prefix="--unmapped", doc=InputDocumentation(doc="print a GTF attribute with a list of all genomes, that are not aligned to the\ncorresponding gene feature, e.g. hgm_unmapped '1,4,5'; (default; off)")), ToolInput(tag="in_tmpdir", input_type=File(optional=True), prefix="--tmpdir", doc=InputDocumentation(doc="a temporary file directory that stores lifted over files. (default 'tmp/' in current directory)")), ToolInput(tag="in_outdir", input_type=File(optional=True), prefix="--outdir", doc=InputDocumentation(doc="file directory that stores output gene files. (default: current directory)")), ToolInput(tag="in_print_homologs", input_type=File(optional=True), prefix="--printHomologs", doc=InputDocumentation(doc="prints disjunct sets of homologous transcripts to FILE, e.g.\n# 0     dana\n# 1     dere\n# 2     dgri\n# 3     dmel\n# 4     dmoj\n# 5     dper\n(0,jg4139.t1) (0,jg4140.t1) (1,jg7797.t1) (2,jg3247.t1) (4,jg6720.t1) (5,jg313.t1)\n(1,jg14269.t1) (3,jg89.t1) (5,jg290.t1)\n...\nTwo transcripts are in the same set, if all their exons/introns are homologs and their are\nno additional exons/introns.\nThis option requires the Boost C++ Library")), ToolInput(tag="in_dbaccess", input_type=Int(optional=True), prefix="--dbaccess", doc=InputDocumentation(doc="retrieve hints from an SQLite database. In order to set up a database and populate it with hints\na separate tool 'load2sqlitedb' is provided. For more information, see the documentation in\nREADME-cgp.txt (section 8a+b) in the Augustus package. If both a database and hint files in 'gtffilenames.tbl'\nare specified, hints are retrieved from both sources.\nThis option requires the SQLite3 library"))], outputs=[ToolOutput(tag="out_outdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="file directory that stores output gene files. (default: current directory)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Homgenemapping_V0_1_0().translate("wdl", allow_empty_container=True)

