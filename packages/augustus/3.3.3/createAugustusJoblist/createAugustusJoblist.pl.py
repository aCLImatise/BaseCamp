from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Directory, File, Boolean, String

Createaugustusjoblist_Pl_V0_1_0 = CommandToolBuilder(tool="createAugustusJoblist.pl", base_command=["createAugustusJoblist.pl"], inputs=[ToolInput(tag="in_sequences", input_type=Int(optional=True), prefix="--sequences", doc=InputDocumentation(doc="input sequences, format: each line contains one sequence including the full path and its size, e.g.\n/cluster/data/panTro2/1/chr1.fa    1       229974691\n/cluster/data/panTro2/1/chr1_random        1       9420409\n/cluster/data/panTro2/2/chr2a      1       114460064\nor\n/cluster/data/panTro2/1/chr1_random        /hints/chr1_random      1       9420409\n/cluster/data/panTro2/2/chr2a      /hints/chr2a    1       114460064")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--outputdir", doc=InputDocumentation(doc="directory, in which later the AUGUSTUS output will be written.")), ToolInput(tag="in_command", input_type=Int(optional=True), prefix="--command", doc=InputDocumentation(doc="AUGUSTUS command, e.g. 'augustus --species=human --maxDNAPieceSize=600000'.")), ToolInput(tag="in_job_list", input_type=File(optional=True), prefix="--joblist", doc=InputDocumentation(doc="filename with list of jobs as given to parasol.")), ToolInput(tag="in_chunksize", input_type=Int(optional=True), prefix="--chunksize", doc=InputDocumentation(doc="chunk size. Each sequence is (imaginarily) cut into chunks of this size")), ToolInput(tag="in_overlap", input_type=Int(optional=True), prefix="--overlap", doc=InputDocumentation(doc="overlap. Neighboring chunks overlap by this number of bases.")), ToolInput(tag="in_padding", input_type=Int(optional=True), prefix="--padding", doc=InputDocumentation(doc="padding on both sides (default 0).")), ToolInput(tag="in_error_dir", input_type=Directory(optional=True), prefix="--errordir", doc=InputDocumentation(doc="directory, in which later the AUGUSTUS error messages will be written.")), ToolInput(tag="in_check", input_type=Boolean(optional=True), prefix="--check", doc=InputDocumentation(doc="insert parasol input/output checks.")), ToolInput(tag="in_wrap", input_type=File(optional=True), prefix="--wrap", doc=InputDocumentation(doc="have each job in a separate file, preceded by command s.")), ToolInput(tag="in_job_prefix", input_type=String(optional=True), prefix="--jobprefix", doc=InputDocumentation(doc="prefix of job name (default: 'job.')")), ToolInput(tag="in_partition_hints", input_type=File(optional=True), prefix="--partitionHints", doc=InputDocumentation(doc="partition hints files according to genomic locus of single augustus runs,\nadd a command to the augustus job that will create and delete this hints file\nin the output directory of the augustus job. This option also will automatically\ndelete empty error files of augustus.\n"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="directory, in which later the AUGUSTUS output will be written.")), ToolOutput(tag="out_partition_hints", output_type=File(optional=True), selector=InputSelector(input_to_select="in_partition_hints", type_hint=File()), doc=OutputDocumentation(doc="partition hints files according to genomic locus of single augustus runs,\nadd a command to the augustus job that will create and delete this hints file\nin the output directory of the augustus job. This option also will automatically\ndelete empty error files of augustus.\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Createaugustusjoblist_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

