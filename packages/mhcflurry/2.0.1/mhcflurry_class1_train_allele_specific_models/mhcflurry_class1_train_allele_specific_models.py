from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Array, String, Int, Boolean, Directory

Mhcflurry_Class1_Train_Allele_Specific_Models_V0_1_0 = CommandToolBuilder(tool="mhcflurry_class1_train_allele_specific_models", base_command=["mhcflurry-class1-train-allele-specific-models"], inputs=[ToolInput(tag="in_data", input_type=File(optional=True), prefix="--data", doc=InputDocumentation(doc="Training data CSV. Expected columns: allele, peptide,")), ToolInput(tag="in_hyperparameters", input_type=File(optional=True), prefix="--hyperparameters", doc=InputDocumentation(doc="JSON or YAML of hyperparameters")), ToolInput(tag="in_allele", input_type=Array(t=String(), optional=True), prefix="--allele", doc=InputDocumentation(doc="Alleles to train models for. If not specified, all\nalleles with enough measurements will be used.")), ToolInput(tag="in_min_measurements_per_allele", input_type=Int(optional=True), prefix="--min-measurements-per-allele", doc=InputDocumentation(doc="Train models for alleles with >=N measurements.")), ToolInput(tag="in_held_out_fraction_reciprocal", input_type=Int(optional=True), prefix="--held-out-fraction-reciprocal", doc=InputDocumentation(doc="Hold out 1/N fraction of data (for e.g. subsequent\nmodel selection. For example, specify 5 to hold out 20\npercent of the data.")), ToolInput(tag="in_held_out_fraction_seed", input_type=Int(optional=True), prefix="--held-out-fraction-seed", doc=InputDocumentation(doc="Seed for randomizing which measurements are held out.\nOnly matters when --held-out-fraction is specified.\nDefault: 0.")), ToolInput(tag="in_ignore_inequalities", input_type=Boolean(optional=True), prefix="--ignore-inequalities", doc=InputDocumentation(doc="Do not use affinity value inequalities even when\npresent in data")), ToolInput(tag="in_n_models", input_type=Int(optional=True), prefix="--n-models", doc=InputDocumentation(doc="Ensemble size, i.e. how many models to train for each\narchitecture. If specified here it overrides any\n'n_models' specified in the hyperparameters.")), ToolInput(tag="in_max_epochs", input_type=Int(optional=True), prefix="--max-epochs", doc=InputDocumentation(doc="Max training epochs. If specified here it overrides\nany 'max_epochs' specified in the hyperparameters.")), ToolInput(tag="in_allele_sequences", input_type=File(optional=True), prefix="--allele-sequences", doc=InputDocumentation(doc="Allele sequences file. Used for computing allele\nsimilarity matrix.")), ToolInput(tag="in_save_interval", input_type=String(optional=True), prefix="--save-interval", doc=InputDocumentation(doc="Write models to disk every N seconds. Only affects\nparallel runs; serial runs write each model to disk as\nit is trained.")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Keras verbosity. Default: 0")), ToolInput(tag="in_num_jobs", input_type=Int(optional=True), prefix="--num-jobs", doc=InputDocumentation(doc="Number of local processes to parallelize training\nover. Set to 0 for serial run. Default: 0.")), ToolInput(tag="in_backend", input_type=String(optional=True), prefix="--backend", doc=InputDocumentation(doc="Keras backend. If not specified will use system\ndefault.")), ToolInput(tag="in_gpus", input_type=Int(optional=True), prefix="--gpus", doc=InputDocumentation(doc="Number of GPUs to attempt to parallelize across.\nRequires running in parallel.")), ToolInput(tag="in_max_workers_per_gpu", input_type=Int(optional=True), prefix="--max-workers-per-gpu", doc=InputDocumentation(doc="Maximum number of workers to assign to a GPU.\nAdditional tasks will run on CPU.")), ToolInput(tag="in_max_tasks_per_worker", input_type=Int(optional=True), prefix="--max-tasks-per-worker", doc=InputDocumentation(doc="Restart workers after N tasks. Workaround for\ntensorflow memory leaks. Requires Python >=3.2.")), ToolInput(tag="in_worker_log_dir", input_type=Directory(optional=True), prefix="--worker-log-dir", doc=InputDocumentation(doc="Write worker stdout and stderr logs to given\ndirectory.\n")), ToolInput(tag="in_measurement_value", input_type=String(), position=0, doc=InputDocumentation(doc="--out-models-dir DIR  Directory to write models and manifest"))], outputs=[], container="quay.io/biocontainers/mhcflurry:2.0.1--pyh864c0ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mhcflurry_Class1_Train_Allele_Specific_Models_V0_1_0().translate("wdl")

