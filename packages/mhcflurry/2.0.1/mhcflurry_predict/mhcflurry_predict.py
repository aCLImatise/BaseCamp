from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Array, String, Directory

Mhcflurry_Predict_V0_1_0 = CommandToolBuilder(tool="mhcflurry_predict", base_command=["mhcflurry-predict"], inputs=[ToolInput(tag="in_list_supported_alleles", input_type=Boolean(optional=True), prefix="--list-supported-alleles", doc=InputDocumentation(doc="Prints the list of supported alleles and exits")), ToolInput(tag="in_list_supported_peptide_lengths", input_type=Boolean(optional=True), prefix="--list-supported-peptide-lengths", doc=InputDocumentation(doc="Prints the list of supported peptide lengths and exits")), ToolInput(tag="in_alleles", input_type=Array(t=String(), optional=True), prefix="--alleles", doc=InputDocumentation(doc="Alleles to predict (exclusive with passing an input\nCSV)")), ToolInput(tag="in_peptides", input_type=Array(t=String(), optional=True), prefix="--peptides", doc=InputDocumentation(doc="Peptides to predict (exclusive with passing an input\nCSV)")), ToolInput(tag="in_allele_column", input_type=String(optional=True), prefix="--allele-column", doc=InputDocumentation(doc="Input column name for alleles. Default: 'allele'")), ToolInput(tag="in_peptide_column", input_type=String(optional=True), prefix="--peptide-column", doc=InputDocumentation(doc="Input column name for peptides. Default: 'peptide'")), ToolInput(tag="in_n_flank_column", input_type=String(optional=True), prefix="--n-flank-column", doc=InputDocumentation(doc="Column giving N-terminal flanking sequence. Default:\n'n_flank'")), ToolInput(tag="in_c_flank_column", input_type=String(optional=True), prefix="--c-flank-column", doc=InputDocumentation(doc="Column giving C-terminal flanking sequence. Default:\n'c_flank'")), ToolInput(tag="in_no_throw", input_type=Boolean(optional=True), prefix="--no-throw", doc=InputDocumentation(doc="Return NaNs for unsupported alleles or peptides\ninstead of raising")), ToolInput(tag="in_out", input_type=String(optional=True), prefix="--out", doc=InputDocumentation(doc="Output CSV")), ToolInput(tag="in_prediction_column_prefix", input_type=String(optional=True), prefix="--prediction-column-prefix", doc=InputDocumentation(doc="Prefix for output column names. Default: 'mhcflurry_'")), ToolInput(tag="in_output_delimiter", input_type=String(optional=True), prefix="--output-delimiter", doc=InputDocumentation(doc="Delimiter character for results. Default: ','")), ToolInput(tag="in_no_affinity_percentile", input_type=Boolean(optional=True), prefix="--no-affinity-percentile", doc=InputDocumentation(doc="Do not include affinity percentile rank")), ToolInput(tag="in_always_include_best_allele", input_type=Boolean(optional=True), prefix="--always-include-best-allele", doc=InputDocumentation(doc="Always include the best_allele column even when it is\nidentical to the allele column (i.e. all queries are\nmonoallelic).")), ToolInput(tag="in_models", input_type=Directory(optional=True), prefix="--models", doc=InputDocumentation(doc="Directory containing models. Either a binding affinity\npredictor or a presentation predictor can be used.\nDefault: /root/.local/share/mhcflurry/4/2.0.0/models_c\nlass1_presentation/models")), ToolInput(tag="in_affinity_only", input_type=Boolean(optional=True), prefix="--affinity-only", doc=InputDocumentation(doc="Affinity prediction only (no antigen processing or\npresentation)")), ToolInput(tag="in_no_flanking", input_type=Boolean(optional=True), prefix="--no-flanking", doc=InputDocumentation(doc="Do not use flanking sequence information even when\navailable\n")), ToolInput(tag="in_input_dot_csv", input_type=String(), position=0, doc=InputDocumentation(doc="Input CSV"))], outputs=[], container="quay.io/biocontainers/mhcflurry:2.0.1--pyh864c0ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mhcflurry_Predict_V0_1_0().translate("wdl")

