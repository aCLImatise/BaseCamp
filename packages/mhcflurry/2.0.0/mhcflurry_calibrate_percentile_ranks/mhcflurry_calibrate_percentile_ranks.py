from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Directory, Array, File, Int, Boolean

Mhcflurry_Calibrate_Percentile_Ranks_V0_1_0 = CommandToolBuilder(tool="mhcflurry_calibrate_percentile_ranks", base_command=["mhcflurry-calibrate-percentile-ranks"], inputs=[ToolInput(tag="in_predictor_kind", input_type=String(optional=True), prefix="--predictor-kind", doc=InputDocumentation(doc="Type of predictor to calibrate")), ToolInput(tag="in_models_dir", input_type=Directory(optional=True), prefix="--models-dir", doc=InputDocumentation(doc="Directory to read and write models")), ToolInput(tag="in_alleles_calibrate_ranks", input_type=Array(t=String(), optional=True), prefix="--allele", doc=InputDocumentation(doc="Alleles to calibrate percentile ranks for. If not\nspecified all alleles are used")), ToolInput(tag="in_match_amino_acid_distribution_data", input_type=File(optional=True), prefix="--match-amino-acid-distribution-data", doc=InputDocumentation(doc="Sample random peptides from the amino acid\ndistribution of the peptides listed in the supplied\nCSV file, which must have a 'peptide' column. If not\nspecified a uniform distribution is used.")), ToolInput(tag="in_alleles_file", input_type=File(optional=True), prefix="--alleles-file", doc=InputDocumentation(doc="Use alleles in supplied CSV file, which must have an\n'allele' column.")), ToolInput(tag="in_num_peptides_per_length", input_type=Int(optional=True), prefix="--num-peptides-per-length", doc=InputDocumentation(doc="Number of peptides per length to use to calibrate\npercent ranks. Default: 100000.")), ToolInput(tag="in_num_genotypes", input_type=Int(optional=True), prefix="--num-genotypes", doc=InputDocumentation(doc="Used when calibrrating a presentation predictor.\nNumber of genotypesto sample")), ToolInput(tag="in_alleles_per_genotype", input_type=Int(optional=True), prefix="--alleles-per-genotype", doc=InputDocumentation(doc="Used when calibrating a presentation predictor. Number\nof alleles per genotype. Use 1 to calibrate for single\nalleles. Default: 6")), ToolInput(tag="in_motif_summary", input_type=Boolean(optional=True), prefix="--motif-summary", doc=InputDocumentation(doc="Calculate motifs and length preferences for each")), ToolInput(tag="in_length_range", input_type=Int(optional=True), prefix="--length-range", doc=InputDocumentation(doc="LENGTH_RANGE\nMin and max peptide length to calibrate, inclusive.\nDefault: (8, 15)")), ToolInput(tag="in_prediction_batch_size", input_type=Int(optional=True), prefix="--prediction-batch-size", doc=InputDocumentation(doc="Keras batch size for predictions")), ToolInput(tag="in_alleles_per_work_chunk", input_type=Int(optional=True), prefix="--alleles-per-work-chunk", doc=InputDocumentation(doc="Number of alleles per work chunk. Default: 1.")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Keras verbosity. Default: 0")), ToolInput(tag="in_num_jobs", input_type=Int(optional=True), prefix="--num-jobs", doc=InputDocumentation(doc="Number of local processes to parallelize training\nover. Set to 0 for serial run. Default: 0.")), ToolInput(tag="in_backend", input_type=String(optional=True), prefix="--backend", doc=InputDocumentation(doc="Keras backend. If not specified will use system\ndefault.")), ToolInput(tag="in_gpus", input_type=Int(optional=True), prefix="--gpus", doc=InputDocumentation(doc="Number of GPUs to attempt to parallelize across.\nRequires running in parallel.")), ToolInput(tag="in_max_workers_per_gpu", input_type=Int(optional=True), prefix="--max-workers-per-gpu", doc=InputDocumentation(doc="Maximum number of workers to assign to a GPU.\nAdditional tasks will run on CPU.")), ToolInput(tag="in_max_tasks_per_worker", input_type=Int(optional=True), prefix="--max-tasks-per-worker", doc=InputDocumentation(doc="Restart workers after N tasks. Workaround for\ntensorflow memory leaks. Requires Python >=3.2.")), ToolInput(tag="in_worker_log_dir", input_type=Directory(optional=True), prefix="--worker-log-dir", doc=InputDocumentation(doc="Write worker stdout and stderr logs to given\ndirectory.")), ToolInput(tag="in_cluster_submit_command", input_type=String(optional=True), prefix="--cluster-submit-command", doc=InputDocumentation(doc="Default: sh")), ToolInput(tag="in_cluster_results_workdir", input_type=String(optional=True), prefix="--cluster-results-workdir", doc=InputDocumentation(doc="Default: ./cluster-workdir")), ToolInput(tag="in_additional_complete_file", input_type=File(optional=True), prefix="--additional-complete-file", doc=InputDocumentation(doc="Additional file to monitor for job completion.\nDefault: STDERR")), ToolInput(tag="in_cluster_script_prefix_path", input_type=File(optional=True), prefix="--cluster-script-prefix-path", doc=InputDocumentation(doc="How many times to rerun failing jobs. Default: 3\n")), ToolInput(tag="in__summarytoppeptidefraction_x", input_type=String(), position=0, doc=InputDocumentation(doc="--summary-top-peptide-fraction X [X ...]"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mhcflurry_Calibrate_Percentile_Ranks_V0_1_0().translate("wdl", allow_empty_container=True)

