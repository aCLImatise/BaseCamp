from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Directory, Boolean

Run_Spp_R_V0_1_0 = CommandToolBuilder(tool="run_spp.R", base_command=["run_spp.R"], inputs=[ToolInput(tag="in_c", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc=", full path and name (or URL) of tagAlign/BAM file (can be gzipped) (FILE EXTENSION MUST BE tagAlign.gz, tagAlign, bam or bam.gz)")), ToolInput(tag="in_i", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc=", full path and name (or URL) of tagAlign/BAM file (can be gzipped) (FILE EXTENSION MUST BE tagAlign.gz, tagAlign, bam or bam.gz)")), ToolInput(tag="in_stepmax_strand_shifts", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc=":<step>:<max> , strand shifts at which cross-correlation is evaluated, default=-500:5:1500")), ToolInput(tag="in_speak", input_type=String(optional=True), prefix="-speak", doc=InputDocumentation(doc=", user-defined cross-correlation peak strandshift")), ToolInput(tag="in_max_strand_shifts", input_type=Int(optional=True), prefix="-x", doc=InputDocumentation(doc=":<max>, strand shifts to exclude (This is mainly to avoid region around phantom peak) default=10:(readlen+10)")), ToolInput(tag="in_number_parallel_processing", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc=", number of parallel processing nodes, default=0")), ToolInput(tag="in_fdr", input_type=String(optional=True), prefix="-fdr", doc=InputDocumentation(doc=", false discovery rate threshold for peak calling")), ToolInput(tag="in_n_peak", input_type=Int(optional=True), prefix="-npeak", doc=InputDocumentation(doc=", threshold on number of peaks to call")), ToolInput(tag="in_tmpdir", input_type=Directory(optional=True), prefix="-tmpdir", doc=InputDocumentation(doc=", Temporary directory (if not specified R function tempdir() is used)")), ToolInput(tag="in_filt_chr", input_type=String(optional=True), prefix="-filtchr", doc=InputDocumentation(doc=", Pattern to use to remove tags that map to specific chromosomes e.g. _ will remove all tags that map to chromosomes with _ in their name")), ToolInput(tag="in_o_dir", input_type=Directory(optional=True), prefix="-odir", doc=InputDocumentation(doc="name of output directory (If not set same as ChIP file directory is used)")), ToolInput(tag="in_s_avn", input_type=File(optional=True), prefix="-savn", doc=InputDocumentation(doc="OR -savn NarrowPeak file name (fixed width peaks)")), ToolInput(tag="in_s_avr", input_type=File(optional=True), prefix="-savr", doc=InputDocumentation(doc="OR -savr RegionPeak file name (variable width peaks with regions of enrichment)")), ToolInput(tag="in_sav_d", input_type=File(optional=True), prefix="-savd", doc=InputDocumentation(doc="OR -savd, save Rdata file")), ToolInput(tag="in_s_avp", input_type=File(optional=True), prefix="-savp", doc=InputDocumentation(doc="OR -savp, save cross-correlation plot")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc=", append peakshift/phantomPeak results to a file\nformat:Filename<tab>numReads<tab>estFragLen<tab>corr_estFragLen<tab>PhantomPeak<tab>corr_phantomPeak<tab>argmin_corr<tab>min_corr<tab>Normalized SCC (NSC)<tab>Relative SCC (RSC)<tab>QualityTag)")), ToolInput(tag="in_rf", input_type=Boolean(optional=True), prefix="-rf", doc=InputDocumentation(doc=", if plot or rdata or narrowPeak file exists replace it. If not used then the run is aborted if the plot or Rdata or narrowPeak file exists")), ToolInput(tag="in_clean", input_type=Boolean(optional=True), prefix="-clean", doc=InputDocumentation(doc=", if present will remove the original chip and control files after reading them in. CAUTION: Use only if the script calling run_spp.R is creating temporary files")), ToolInput(tag="in_options", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_o_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_o_dir", type_hint=File()), doc=OutputDocumentation(doc="name of output directory (If not set same as ChIP file directory is used)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Run_Spp_R_V0_1_0().translate("wdl", allow_empty_container=True)

