from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, Array

Medpy_Intensity_Range_Standardization_Py_V0_1_0 = CommandToolBuilder(tool="medpy_intensity_range_standardization.py", base_command=["medpy_intensity_range_standardization.py"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Display debug information.")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite existing files (both model and images)")), ToolInput(tag="in_load_model", input_type=String(optional=True), prefix="--load-model", doc=InputDocumentation(doc="Location of the pickled intensity range model to load.\nActivated application mode.")), ToolInput(tag="in_save_model", input_type=String(optional=True), prefix="--save-model", doc=InputDocumentation(doc="Save the trained model under this name as a pickled\nobject (should end in .pkl). Activates training mode.")), ToolInput(tag="in_cut_off_p", input_type=String(optional=True), prefix="--cutoffp", doc=InputDocumentation(doc="Colon-separated lower and upper cut-off percentile\nvalues to exclude intensity outliers during the model\ntraining.")), ToolInput(tag="in_landmark_p", input_type=Int(optional=True), prefix="--landmarkp", doc=InputDocumentation(doc="The landmark percentiles, based on which to train the\nmodel. Can be L2, L3, L4 or a colon-separated, ordered\nlist of percentiles.")), ToolInput(tag="in_std_space", input_type=String(optional=True), prefix="--stdspace", doc=InputDocumentation(doc="Two colon-separated intensity values to roughly define\nthe average intensity space to learn. In most cases\nshould be left set to 'auto'")), ToolInput(tag="in_save_images", input_type=String(optional=True), prefix="--save-images", doc=InputDocumentation(doc="Save the transformed images under this location.\nRequired for the application mode, optional for the\nlearning mode.")), ToolInput(tag="in_threshold", input_type=String(optional=True), prefix="--threshold", doc=InputDocumentation(doc="All voxel with an intensity > threshold are considered\nas foreground. Supply either this or a mask for each\nimage.")), ToolInput(tag="in_masks", input_type=Array(t=String(), optional=True), prefix="--masks", doc=InputDocumentation(doc="A number of binary foreground mask, one for each\nimage. Alternative to supplying a threshold. Overrides\nthe threshold parameter if supplied.")), ToolInput(tag="in_ignore", input_type=Boolean(optional=True), prefix="--ignore", doc=InputDocumentation(doc="Ignore possible loss of information during the\nintensity transformation. Should only be used when you\nknow what you are doing.\n")), ToolInput(tag="in_images", input_type=String(), position=0, doc=InputDocumentation(doc="The images used for training (in the learning case) or\nto transform (in the transformation case)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Medpy_Intensity_Range_Standardization_Py_V0_1_0().translate("wdl", allow_empty_container=True)

