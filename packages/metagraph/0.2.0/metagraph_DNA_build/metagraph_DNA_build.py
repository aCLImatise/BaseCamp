from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int

Metagraph_Dna_Build_V0_1_0 = CommandToolBuilder(tool="metagraph_DNA_build", base_command=["metagraph_DNA", "build"], inputs=[ToolInput(tag="in_min_count", input_type=Boolean(optional=True), prefix="--min-count", doc=InputDocumentation(doc="[INT]    min k-mer abundance, including [1]")), ToolInput(tag="in_max_count", input_type=Boolean(optional=True), prefix="--max-count", doc=InputDocumentation(doc="[INT]    max k-mer abundance, excluding [inf]")), ToolInput(tag="in_min_count_q", input_type=Boolean(optional=True), prefix="--min-count-q", doc=InputDocumentation(doc="[INT]  min k-mer abundance quantile (min-count is used by default) [0.0]")), ToolInput(tag="in_max_count_q", input_type=Boolean(optional=True), prefix="--max-count-q", doc=InputDocumentation(doc="[INT]  max k-mer abundance quantile (max-count is used by default) [1.0]")), ToolInput(tag="in_reference", input_type=Boolean(optional=True), prefix="--reference", doc=InputDocumentation(doc="[STR]    basename of reference sequence (for parsing VCF files) []")), ToolInput(tag="in_graph", input_type=Boolean(optional=True), prefix="--graph", doc=InputDocumentation(doc="[STR]        graph representation: succinct / bitmap / hash / hashstr / hashfast [succinct]")), ToolInput(tag="in_count_km_ers", input_type=Boolean(optional=True), prefix="--count-kmers", doc=InputDocumentation(doc="count k-mers and build weighted graph [off]")), ToolInput(tag="in_count_width", input_type=Boolean(optional=True), prefix="--count-width", doc=InputDocumentation(doc="number of bits used to represent k-mer abundance [8]")), ToolInput(tag="in_index_ranges", input_type=Boolean(optional=True), prefix="--index-ranges", doc=InputDocumentation(doc="[INT] index all node ranges in BOSS for suffixes of given length [10]")), ToolInput(tag="in_km_er_length", input_type=Boolean(optional=True), prefix="--kmer-length", doc=InputDocumentation(doc="[INT]  length of the k-mer to use [3]")), ToolInput(tag="in_mode", input_type=Boolean(optional=True), prefix="--mode", doc=InputDocumentation(doc="k-mer indexing mode: basic / canonical / primary [basic]")), ToolInput(tag="in_complete", input_type=Boolean(optional=True), prefix="--complete", doc=InputDocumentation(doc="construct a complete graph (only for Bitmap graph) [off]")), ToolInput(tag="in_mem_cap_gb", input_type=Boolean(optional=True), prefix="--mem-cap-gb", doc=InputDocumentation(doc="[INT]   preallocated buffer size in GB [1]")), ToolInput(tag="in_dynamic", input_type=Boolean(optional=True), prefix="--dynamic", doc=InputDocumentation(doc="use dynamic build method [off]")), ToolInput(tag="in_len_suffix", input_type=Boolean(optional=True), prefix="--len-suffix", doc=InputDocumentation(doc="[INT]   k-mer suffix length for building graph from chunks [0]")), ToolInput(tag="in_suffix", input_type=Boolean(optional=True), prefix="--suffix", doc=InputDocumentation(doc="build graph chunk only for k-mers with the suffix given [off]")), ToolInput(tag="in_outfile_base", input_type=File(optional=True), prefix="--outfile-base", doc=InputDocumentation(doc="[STR] basename of output file []")), ToolInput(tag="in_mask_dummy", input_type=Boolean(optional=True), prefix="--mask-dummy", doc=InputDocumentation(doc="build mask for dummy k-mers (only for Succinct graph) [off]")), ToolInput(tag="in_parallel", input_type=Boolean(optional=True), prefix="--parallel", doc=InputDocumentation(doc="[INT]     use multiple threads for computation [1]")), ToolInput(tag="in_disk_swap", input_type=Boolean(optional=True), prefix="--disk-swap", doc=InputDocumentation(doc="[STR]    directory to use for temporary files [off]")), ToolInput(tag="in_disk_cap_gb", input_type=Boolean(optional=True), prefix="--disk-cap-gb", doc=InputDocumentation(doc="[INT]  max temp disk space to use before forcing a merge, in GB [inf]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="switch on verbose output [off]")), ToolInput(tag="in_file_one", input_type=Int(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outfile_base", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile_base", type_hint=File()), doc=OutputDocumentation(doc="[STR] basename of output file []"))], container="quay.io/biocontainers/metagraph:0.2.0--h74b8f77_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Metagraph_Dna_Build_V0_1_0().translate("wdl")

