from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Metagraph_Dna_Transform_V0_1_0 = CommandToolBuilder(tool="metagraph_DNA_transform", base_command=["metagraph_DNA", "transform"], inputs=[ToolInput(tag="in_index_ranges", input_type=Boolean(optional=True), prefix="--index-ranges", doc=InputDocumentation(doc="[INT] index all node ranges in BOSS for suffixes of given length [10]")), ToolInput(tag="in_clear_dummy", input_type=Boolean(optional=True), prefix="--clear-dummy", doc=InputDocumentation(doc="erase all redundant dummy edges and build an edgemask for non-redundant [off]")), ToolInput(tag="in_prune_tips", input_type=Boolean(optional=True), prefix="--prune-tips", doc=InputDocumentation(doc="[INT]   prune all dead ends of this length and shorter [0]")), ToolInput(tag="in_state", input_type=Boolean(optional=True), prefix="--state", doc=InputDocumentation(doc="[STR]        change state of succinct graph: small / dynamic / fast [stat]")), ToolInput(tag="in_to_adj_list", input_type=Boolean(optional=True), prefix="--to-adj-list", doc=InputDocumentation(doc="write adjacency list to file [off]")), ToolInput(tag="in_to_fast_a", input_type=Boolean(optional=True), prefix="--to-fasta", doc=InputDocumentation(doc="extract sequences from graph and dump to compressed FASTA file [off]")), ToolInput(tag="in_enumerate", input_type=Boolean(optional=True), prefix="--enumerate", doc=InputDocumentation(doc="enumerate sequences in FASTA [off]")), ToolInput(tag="in_initialize_bloom", input_type=Boolean(optional=True), prefix="--initialize-bloom", doc=InputDocumentation(doc="construct a Bloom filter for faster detection of non-existing k-mers [off]")), ToolInput(tag="in_unit_igs", input_type=Boolean(optional=True), prefix="--unitigs", doc=InputDocumentation(doc="extract all unitigs from graph and dump to compressed FASTA file [off]")), ToolInput(tag="in_primary_km_ers", input_type=Boolean(optional=True), prefix="--primary-kmers", doc=InputDocumentation(doc="output each k-mer only in one if its forms (canonical/non-canonical) [off]")), ToolInput(tag="in_to_gfa", input_type=Boolean(optional=True), prefix="--to-gfa", doc=InputDocumentation(doc="dump graph layout to GFA [off]")), ToolInput(tag="in_compacted", input_type=Boolean(optional=True), prefix="--compacted", doc=InputDocumentation(doc="dump compacted de Bruijn graph to GFA [off]")), ToolInput(tag="in_header", input_type=Boolean(optional=True), prefix="--header", doc=InputDocumentation(doc="[STR]       header for sequences in FASTA output []")), ToolInput(tag="in_parallel", input_type=Boolean(optional=True), prefix="--parallel", doc=InputDocumentation(doc="[INT]     use multiple threads for computation [1]")), ToolInput(tag="in_bloom_fpp", input_type=Boolean(optional=True), prefix="--bloom-fpp", doc=InputDocumentation(doc="[FLOAT]                          expected false positive rate [1.0]")), ToolInput(tag="in_bloom_bpk", input_type=Boolean(optional=True), prefix="--bloom-bpk", doc=InputDocumentation(doc="[FLOAT]                          number of bits per kmer [4.0]")), ToolInput(tag="in_bloom_max_num_hash_functions", input_type=Boolean(optional=True), prefix="--bloom-max-num-hash-functions", doc=InputDocumentation(doc="[INT]         maximum number of hash functions [10]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="switch on verbose output [off]")), ToolInput(tag="in_o", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="")), ToolInput(tag="in_graph", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/metagraph:0.2.0--h74b8f77_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Metagraph_Dna_Transform_V0_1_0().translate("wdl")

