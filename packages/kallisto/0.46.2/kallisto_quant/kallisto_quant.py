from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, Int, String

Kallisto_Quant_V0_1_0 = CommandToolBuilder(tool="kallisto_quant", base_command=["kallisto", "quant"], inputs=[ToolInput(tag="in_index", input_type=File(optional=True), prefix="--index", doc=InputDocumentation(doc="Filename for the kallisto index to be used for\nquantification")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Directory to write output to")), ToolInput(tag="in_bias", input_type=Boolean(optional=True), prefix="--bias", doc=InputDocumentation(doc="Perform sequence based bias correction")), ToolInput(tag="in_bootstrap_samples", input_type=Int(optional=True), prefix="--bootstrap-samples", doc=InputDocumentation(doc="Number of bootstrap samples (default: 0)\n--seed=INT                Seed for the bootstrap sampling (default: 42)\n--plaintext               Output plaintext instead of HDF5\n--fusion                  Search for fusions for Pizzly\n--single                  Quantify single-end reads\n--single-overhang         Include reads where unobserved rest of fragment is\npredicted to lie outside a transcript\n--fr-stranded             Strand specific reads, first read forward\n--rf-stranded             Strand specific reads, first read reverse")), ToolInput(tag="in_fragment_length", input_type=Int(optional=True), prefix="--fragment-length", doc=InputDocumentation(doc="Estimated average fragment length")), ToolInput(tag="in_sd", input_type=Int(optional=True), prefix="--sd", doc=InputDocumentation(doc="Estimated standard deviation of fragment length\n(default: -l, -s values are estimated from paired\nend data, but are required when using --single)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use (default: 1)\n--pseudobam               Save pseudoalignments to transcriptome to BAM file\n--genomebam               Project pseudoalignments to genome sorted BAM file")), ToolInput(tag="in_gtf", input_type=Boolean(optional=True), prefix="--gtf", doc=InputDocumentation(doc="GTF file for transcriptome information\n(required for --genomebam)")), ToolInput(tag="in_chromosomes", input_type=Boolean(optional=True), prefix="--chromosomes", doc=InputDocumentation(doc="Tab separated file with chromosome names and lengths\n(optional for --genomebam, but recommended)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print out progress information every 1M proccessed reads")), ToolInput(tag="in_arguments", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_fast_q_files", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Directory to write output to"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Kallisto_Quant_V0_1_0().translate("wdl", allow_empty_container=True)

