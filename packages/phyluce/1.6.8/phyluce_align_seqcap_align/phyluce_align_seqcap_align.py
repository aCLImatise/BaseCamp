from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Int, String, Boolean, Float

Phyluce_Align_Seqcap_Align_V0_1_0 = CommandToolBuilder(tool="phyluce_align_seqcap_align", base_command=["phyluce_align_seqcap_align"], inputs=[ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="The file containing FASTA reads associated with\ntargted loci from get_fastas_from_match_counts.py\n(default: None)")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="The directory in which to store the resulting\nalignments. (default: None)")), ToolInput(tag="in_tax_a", input_type=Int(optional=True), prefix="--taxa", doc=InputDocumentation(doc="Number of taxa expected in each alignment. (default:\nNone)")), ToolInput(tag="in_aligner", input_type=String(optional=True), prefix="--aligner", doc=InputDocumentation(doc="The alignment engine to use. (default: mafft)")), ToolInput(tag="in_output_format", input_type=String(optional=True), prefix="--output-format", doc=InputDocumentation(doc="The output alignment format. (default: nexus)")), ToolInput(tag="in_verbosity", input_type=String(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="The logging level to use. (default: INFO)")), ToolInput(tag="in_log_path", input_type=File(optional=True), prefix="--log-path", doc=InputDocumentation(doc="The path to a directory to hold logs. (default: None)")), ToolInput(tag="in_incomplete_matrix", input_type=Boolean(optional=True), prefix="--incomplete-matrix", doc=InputDocumentation(doc="Allow alignments that do not contain all --taxa.\n(default: False)")), ToolInput(tag="in_no_trim", input_type=Boolean(optional=True), prefix="--no-trim", doc=InputDocumentation(doc="Align, but DO NOT trim alignments. (default: False)")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc="Sliding window size for trimming. (default: 20)")), ToolInput(tag="in_proportion", input_type=Float(optional=True), prefix="--proportion", doc=InputDocumentation(doc="The proportion of taxa required to have sequence at\nalignment ends. (default: 0.65)")), ToolInput(tag="in_threshold", input_type=Float(optional=True), prefix="--threshold", doc=InputDocumentation(doc="The proportion of residues required across the window\nin proportion of taxa. (default: 0.65)")), ToolInput(tag="in_max_divergence", input_type=Int(optional=True), prefix="--max-divergence", doc=InputDocumentation(doc="The max proportion of sequence divergence allowed\nbetween any row of the alignment and the alignment\nconsensus. (default: 0.2)")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="The minimum length of alignments to keep. (default:\n100)")), ToolInput(tag="in_ambiguous", input_type=Boolean(optional=True), prefix="--ambiguous", doc=InputDocumentation(doc="Allow reads in alignments containing N-bases.\n(default: False)")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Process alignments in parallel using --cores for\nalignment. This is the number of PHYSICAL CPUs.\n(default: 1)\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phyluce_Align_Seqcap_Align_V0_1_0().translate("wdl", allow_empty_container=True)

