from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Caper_Submit_V0_1_0 = CommandToolBuilder(tool="caper_submit", base_command=["caper", "submit"], inputs=[ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry-run", doc=InputDocumentation(doc="Caper does not take any action.")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Prints all logs >= DEBUG level")), ToolInput(tag="in_port", input_type=String(optional=True), prefix="--port", doc=InputDocumentation(doc="Port for Caper server")), ToolInput(tag="in_ip", input_type=String(optional=True), prefix="--ip", doc=InputDocumentation(doc="IP address for Caper server")), ToolInput(tag="in_no_server_heartbeat", input_type=Boolean(optional=True), prefix="--no-server-heartbeat", doc=InputDocumentation(doc="Disable server heartbeat file.")), ToolInput(tag="in_server_heartbeat_file", input_type=File(optional=True), prefix="--server-heartbeat-file", doc=InputDocumentation(doc="Heartbeat file for Caper clients to get IP and port of\na server")), ToolInput(tag="in_server_heartbeat_timeout", input_type=File(optional=True), prefix="--server-heartbeat-timeout", doc=InputDocumentation(doc="Timeout for a heartbeat file in Milliseconds. A\nheartbeat file older than this interval will be\nignored.")), ToolInput(tag="in_inputs", input_type=File(optional=True), prefix="--inputs", doc=InputDocumentation(doc="Workflow inputs JSON file")), ToolInput(tag="in_options", input_type=File(optional=True), prefix="--options", doc=InputDocumentation(doc="Workflow options JSON file")), ToolInput(tag="in_labels", input_type=File(optional=True), prefix="--labels", doc=InputDocumentation(doc="Workflow labels JSON file")), ToolInput(tag="in_imports", input_type=File(optional=True), prefix="--imports", doc=InputDocumentation(doc="Zip file of imported subworkflows")), ToolInput(tag="in_str_label", input_type=File(optional=True), prefix="--str-label", doc=InputDocumentation(doc="Caper's special label for a workflow This label will\nbe added to a workflow labels JSON file as a value for\na key 'caper-label'. DO NOT USE IRREGULAR CHARACTERS.\nUSE LETTERS, NUMBERS, DASHES AND UNDERSCORES ONLY\n(^[A-Za-z0-9\-\_]+$) since this label is used to\ncompose a path for workflow's temporary directory\n(tmp_dir/label/timestamp/)")), ToolInput(tag="in_hold", input_type=Boolean(optional=True), prefix="--hold", doc=InputDocumentation(doc="Put a hold on a workflow when submitted to a Cromwell")), ToolInput(tag="in_use_gs_util_for_s_three", input_type=Boolean(optional=True), prefix="--use-gsutil-for-s3", doc=InputDocumentation(doc="Use gsutil CLI for direct trasnfer between S3 and GCS\nbuckets. Otherwise, such file transfer will stream\nthrough local machine. Make sure that gsutil is\ninstalled on your system and it has access to\ncredentials for AWS (e.g. ~/.boto or\n~/.aws/credentials).")), ToolInput(tag="in_no_deepcopy", input_type=Boolean(optional=True), prefix="--no-deepcopy", doc=InputDocumentation(doc="(IMPORTANT) --deepcopy has been deprecated.\nDeepcopying is now activated by default. This flag\ndisables deepcopy for JSON (.json), TSV (.tsv) and CSV\n(.csv) files specified in an input JSON file\n(--inputs). Find all path/URI string values in an\ninput JSON file and make copies of files on a\nlocal/remote storage for a target backend. Make sure\nthat you have installed gsutil for GCS and aws for S3.")), ToolInput(tag="in_ignore_wom_tool", input_type=Boolean(optional=True), prefix="--ignore-womtool", doc=InputDocumentation(doc="Ignore warnings from womtool.jar.")), ToolInput(tag="in_wom_tool", input_type=File(optional=True), prefix="--womtool", doc=InputDocumentation(doc="Path or URL for Cromwell's womtool JAR file")), ToolInput(tag="in_backend", input_type=String(optional=True), prefix="--backend", doc=InputDocumentation(doc="Backend to run a workflow")), ToolInput(tag="in_docker", input_type=Boolean(optional=True), prefix="--docker", doc=InputDocumentation(doc="[DOCKER [DOCKER ...]]\nURI for Docker image (e.g. ubuntu:latest). This can\nalso be used as a flag to use Docker image address\ndefined in your WDL file as a comment ('#CAPER\ndocker').")), ToolInput(tag="in_singularity", input_type=Boolean(optional=True), prefix="--singularity", doc=InputDocumentation(doc="[SINGULARITY [SINGULARITY ...]]\nURI or path for Singularity image (e.g.\n~/.singularity/ubuntu-latest.simg,\ndocker://ubuntu:latest, shub://vsoch/hello-world).\nThis can also be used as a flag to use Docker image\naddress defined in your WDL file as a comment ('#CAPER\nsingularity').")), ToolInput(tag="in_no_build_singularity", input_type=Boolean(optional=True), prefix="--no-build-singularity", doc=InputDocumentation(doc="Do not build singularity image before running a\nworkflow.")), ToolInput(tag="in_slur_m_partition", input_type=String(optional=True), prefix="--slurm-partition", doc=InputDocumentation(doc="SLURM partition")), ToolInput(tag="in_slur_m_account", input_type=String(optional=True), prefix="--slurm-account", doc=InputDocumentation(doc="SLURM account")), ToolInput(tag="in_slur_m_extra_param", input_type=String(optional=True), prefix="--slurm-extra-param", doc=InputDocumentation(doc="SLURM extra parameters. Must be double-quoted")), ToolInput(tag="in_sge_pe", input_type=String(optional=True), prefix="--sge-pe", doc=InputDocumentation(doc="SGE parallel environment. Check with 'qconf -spl'")), ToolInput(tag="in_sge_queue", input_type=String(optional=True), prefix="--sge-queue", doc=InputDocumentation(doc="SGE queue. Check with 'qconf -sql'")), ToolInput(tag="in_sge_extra_param", input_type=String(optional=True), prefix="--sge-extra-param", doc=InputDocumentation(doc="SGE extra parameters. Must be double-quoted")), ToolInput(tag="in_pbs_queue", input_type=String(optional=True), prefix="--pbs-queue", doc=InputDocumentation(doc="PBS queue")), ToolInput(tag="in_pbs_extra_param", input_type=String(optional=True), prefix="--pbs-extra-param", doc=InputDocumentation(doc="PBS extra parameters. Must be double-quoted\n")), ToolInput(tag="in_server_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--singularity-cachedir SINGULARITY_CACHEDIR"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Caper_Submit_V0_1_0().translate("wdl", allow_empty_container=True)

