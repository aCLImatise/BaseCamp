from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Imagej_V0_1_0 = CommandToolBuilder(tool="ImageJ", base_command=["ImageJ"], inputs=[ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry-run", doc=InputDocumentation(doc="show the command line, but do not run anything")), ToolInput(tag="in_info", input_type=Boolean(optional=True), prefix="--info", doc=InputDocumentation(doc="informational output")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="verbose output")), ToolInput(tag="in_system", input_type=Boolean(optional=True), prefix="--system", doc=InputDocumentation(doc="do not try to run bundled Java")), ToolInput(tag="in_java_home", input_type=File(optional=True), prefix="--java-home", doc=InputDocumentation(doc="specify JAVA_HOME explicitly")), ToolInput(tag="in_print_java_home", input_type=Boolean(optional=True), prefix="--print-java-home", doc=InputDocumentation(doc="print ImageJ's idea of JAVA_HOME")), ToolInput(tag="in_print_ij_dir", input_type=Boolean(optional=True), prefix="--print-ij-dir", doc=InputDocumentation(doc="print where ImageJ thinks it is located")), ToolInput(tag="in_headless", input_type=Boolean(optional=True), prefix="--headless", doc=InputDocumentation(doc="run in text mode")), ToolInput(tag="in_ij_dir", input_type=File(optional=True), prefix="--ij-dir", doc=InputDocumentation(doc="set the ImageJ directory to <path> (used to find\njars/, plugins/ and macros/)")), ToolInput(tag="in_memory", input_type=Int(optional=True), prefix="--memory", doc=InputDocumentation(doc="set Java's heap size to <amount> (e.g. 512M)")), ToolInput(tag="in_class_path", input_type=File(optional=True), prefix="--class-path", doc=InputDocumentation(doc="append <path> to the class path")), ToolInput(tag="in_jar_path", input_type=File(optional=True), prefix="--jar-path", doc=InputDocumentation(doc="append .jar files in <path> to the class path")), ToolInput(tag="in_pass_classpath", input_type=Boolean(optional=True), prefix="--pass-classpath", doc=InputDocumentation(doc="pass -classpath <classpath> to the main() method")), ToolInput(tag="in_full_classpath", input_type=Boolean(optional=True), prefix="--full-classpath", doc=InputDocumentation(doc="call the main class with the full ImageJ class path")), ToolInput(tag="in_dont_patch_ij_one", input_type=Boolean(optional=True), prefix="--dont-patch-ij1", doc=InputDocumentation(doc="do not try to runtime-patch ImageJ1")), ToolInput(tag="in_ext", input_type=File(optional=True), prefix="--ext", doc=InputDocumentation(doc="set Java's extension directory to <path>")), ToolInput(tag="in_default_gc", input_type=Boolean(optional=True), prefix="--default-gc", doc=InputDocumentation(doc="do not use advanced garbage collector settings by default\n(-Xincgc -XX:PermSize=128m)")), ToolInput(tag="in_gc_gone", input_type=Boolean(optional=True), prefix="--gc-g1", doc=InputDocumentation(doc="use the G1 garbage collector")), ToolInput(tag="in_debug_gc", input_type=Boolean(optional=True), prefix="--debug-gc", doc=InputDocumentation(doc="show debug info about the garbage collector on stderr")), ToolInput(tag="in_debugger", input_type=String(optional=True), prefix="--debugger", doc=InputDocumentation(doc="[,suspend]\nstart the JVM in a mode so Eclipse's debugger can attach to it")), ToolInput(tag="in_no_splash", input_type=Boolean(optional=True), prefix="--no-splash", doc=InputDocumentation(doc="suppress showing a splash screen upon startup")), ToolInput(tag="in_ij_two", input_type=Boolean(optional=True), prefix="--ij2", doc=InputDocumentation(doc="start ImageJ2 instead of ImageJ1")), ToolInput(tag="in_ij_one", input_type=Boolean(optional=True), prefix="--ij1", doc=InputDocumentation(doc="start ImageJ1")), ToolInput(tag="in_allow_multiple", input_type=Boolean(optional=True), prefix="--allow-multiple", doc=InputDocumentation(doc="do not reuse existing ImageJ instance")), ToolInput(tag="in_plugins", input_type=String(optional=True), prefix="--plugins", doc=InputDocumentation(doc="use <dir> to discover plugins")), ToolInput(tag="in_run", input_type=String(optional=True), prefix="--run", doc=InputDocumentation(doc="[<arg>]\nrun <plugin> in ImageJ, optionally with arguments")), ToolInput(tag="in_compile_and_run", input_type=File(optional=True), prefix="--compile-and-run", doc=InputDocumentation(doc="compile and run <plugin> in ImageJ")), ToolInput(tag="in_edit", input_type=Boolean(optional=True), prefix="--edit", doc=InputDocumentation(doc="[<file>...]\nedit the given file in the script editor")), ToolInput(tag="in_update", input_type=Boolean(optional=True), prefix="--update", doc=InputDocumentation(doc="start the command-line version of the ImageJ updater")), ToolInput(tag="in_clo_jure", input_type=Boolean(optional=True), prefix="--clojure", doc=InputDocumentation(doc="start Clojure instead of ImageJ (this is the\ndefault when called with a file ending in .clj)")), ToolInput(tag="in_beanshell", input_type=Boolean(optional=True), prefix="--beanshell", doc=InputDocumentation(doc="start BeanShell instead of ImageJ (this is the\ndefault when called with a file ending in .bs or .bsh")), ToolInput(tag="in_javascript", input_type=Boolean(optional=True), prefix="--javascript", doc=InputDocumentation(doc="start Javascript (the Rhino engine) instead of\nImageJ (this is the default when called with a\nfile ending in .js)")), ToolInput(tag="in_main_class", input_type=File(optional=True), prefix="--main-class", doc=InputDocumentation(doc="(this is the\ndefault when called with a file ending in .class)\nstart the given class instead of ImageJ")), ToolInput(tag="in_retro_translator", input_type=Boolean(optional=True), prefix="--retrotranslator", doc=InputDocumentation(doc="use Retrotranslator to support Java < 1.6\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Imagej_V0_1_0().translate("wdl", allow_empty_container=True)

