from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Poa_V0_1_0 = CommandToolBuilder(tool="poa", base_command=["poa"], inputs=[ToolInput(tag="in_read_fast_a", input_type=File(optional=True), prefix="-read_fasta", doc=InputDocumentation(doc="Read in FASTA sequence file.")), ToolInput(tag="in_read_msa", input_type=File(optional=True), prefix="-read_msa", doc=InputDocumentation(doc="Read in MSA alignment file.")), ToolInput(tag="in_read_msa_two", input_type=File(optional=True), prefix="-read_msa2", doc=InputDocumentation(doc="Read in second MSA file.")), ToolInput(tag="in_subset", input_type=File(optional=True), prefix="-subset", doc=InputDocumentation(doc="Filter MSA to include list of seqs in file.")), ToolInput(tag="in_subset_two", input_type=File(optional=True), prefix="-subset2", doc=InputDocumentation(doc="Filter second MSA to include list of seqs in file.")), ToolInput(tag="in_remove", input_type=File(optional=True), prefix="-remove", doc=InputDocumentation(doc="Filter MSA to exclude list of seqs in file.")), ToolInput(tag="in_remove_two", input_type=File(optional=True), prefix="-remove2", doc=InputDocumentation(doc="Filter second MSA to exclude list of seqs in file.")), ToolInput(tag="in_read_msa_list", input_type=File(optional=True), prefix="-read_msa_list", doc=InputDocumentation(doc="Read an MSA from each filename listed in file.")), ToolInput(tag="in_to_lower", input_type=Boolean(optional=True), prefix="-tolower", doc=InputDocumentation(doc="Force FASTA/MSA sequences to lowercase\n(nucleotides in our matrix files)")), ToolInput(tag="in_to_upper", input_type=Boolean(optional=True), prefix="-toupper", doc=InputDocumentation(doc="Force FASTA/MSA sequences to UPPERCASE\n(amino acids in our matrix files)")), ToolInput(tag="in_do_global", input_type=Boolean(optional=True), prefix="-do_global", doc=InputDocumentation(doc="Do global alignment.")), ToolInput(tag="in_do_progressive", input_type=Boolean(optional=True), prefix="-do_progressive", doc=InputDocumentation(doc="Perform progressive alignment using a guide tree\nbuilt by neighbor joining from a set of\nsequence-sequence similarity scores.")), ToolInput(tag="in_read_pair_scores", input_type=File(optional=True), prefix="-read_pairscores", doc=InputDocumentation(doc="Read tab-delimited file of similarity scores.\n(If not provided, scores are constructed\nusing pairwise sequence alignment.)")), ToolInput(tag="in_fuse_all", input_type=Boolean(optional=True), prefix="-fuse_all", doc=InputDocumentation(doc="Fuse identical letters on align rings.")), ToolInput(tag="in_hb", input_type=Boolean(optional=True), prefix="-hb", doc=InputDocumentation(doc="Perform heaviest bundling to generate consensi.")), ToolInput(tag="in_hbm_in", input_type=String(optional=True), prefix="-hbmin", doc=InputDocumentation(doc="Include in heaviest bundle sequences with\npercent ID (as a fraction) >= value.")), ToolInput(tag="in_pir", input_type=File(optional=True), prefix="-pir", doc=InputDocumentation(doc="Write out MSA in PIR format.")), ToolInput(tag="in_clustal", input_type=File(optional=True), prefix="-clustal", doc=InputDocumentation(doc="Write out MSA in CLUSTAL format.")), ToolInput(tag="in_po", input_type=File(optional=True), prefix="-po", doc=InputDocumentation(doc="Write out MSA in PO format.")), ToolInput(tag="in_preserve_seq_order", input_type=Boolean(optional=True), prefix="-preserve_seqorder", doc=InputDocumentation(doc="Write out MSA with sequences in their input order.")), ToolInput(tag="in_print_matrix", input_type=String(optional=True), prefix="-printmatrix", doc=InputDocumentation(doc="Print score matrix to stdout.")), ToolInput(tag="in_best", input_type=Boolean(optional=True), prefix="-best", doc=InputDocumentation(doc="Restrict MSA output to heaviest bundles (PIR only).")), ToolInput(tag="in_run_eg_penalties", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Run in verbose mode (e.g. output gap penalties).")), ToolInput(tag="in_matrix_file", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Poa_V0_1_0().translate("wdl", allow_empty_container=True)

