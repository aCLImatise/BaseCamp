from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, String, Boolean, Directory

Synapse_Add_V0_1_0 = CommandToolBuilder(tool="synapse_add", base_command=["synapse", "add"], inputs=[ToolInput(tag="in_parentid", input_type=Int(optional=True), prefix="--parentid", doc=InputDocumentation(doc="Synapse ID of project or folder where to upload data\n(must be specified if --id is not used.")), ToolInput(tag="in_id", input_type=Int(optional=True), prefix="--id", doc=InputDocumentation(doc="Optional Id of entity in Synapse to be updated.")), ToolInput(tag="in_type", input_type=File(optional=True), prefix="--type", doc=InputDocumentation(doc="Type of object, such as 'File', 'Folder', or\n'Project', to create in Synapse. Defaults to 'File'")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="--name", doc=InputDocumentation(doc="Name of data object in Synapse")), ToolInput(tag="in_description", input_type=String(optional=True), prefix="--description", doc=InputDocumentation(doc="Description of data object in Synapse.")), ToolInput(tag="in_description_file", input_type=File(optional=True), prefix="--descriptionFile", doc=InputDocumentation(doc="Path to a markdown file containing description of\nproject/folder")), ToolInput(tag="in_used", input_type=Boolean(optional=True), prefix="--used", doc=InputDocumentation(doc="[target ...], -used [target ...]\nSynapse ID, a url, or a local file path (of a file\npreviouslyuploaded to Synapse) from which the\nspecified entity is derived")), ToolInput(tag="in_executed", input_type=Boolean(optional=True), prefix="--executed", doc=InputDocumentation(doc="[target ...], -executed [target ...]\nSynapse ID, a url, or a local file path (of a file\npreviouslyuploaded to Synapse) that was executed to\ngenerate the specified entity")), ToolInput(tag="in_limit_search", input_type=Directory(optional=True), prefix="--limitSearch", doc=InputDocumentation(doc="Synapse ID of a container such as project or folder to\nlimit search for provenance files.")), ToolInput(tag="in_no_force_version", input_type=Boolean(optional=True), prefix="--noForceVersion", doc=InputDocumentation(doc="Do not force a new version to be created if the\ncontents of the file have not changed. The default is\na new version is created.")), ToolInput(tag="in_annotations", input_type=String(optional=True), prefix="--annotations", doc=InputDocumentation(doc="Annotations to add as a JSON formatted string, should\nevaluate to a dictionary (key/value pairs). Example:\n'{'foo': 1, 'bar':'quux'}'")), ToolInput(tag="in_replace", input_type=Boolean(optional=True), prefix="--replace", doc=InputDocumentation(doc="Replace all existing annotations with the given\nannotations\n")), ToolInput(tag="in_file", input_type=File(), position=0, doc=InputDocumentation(doc="file to be added to synapse."))], outputs=[], container="quay.io/biocontainers/synapseclient:2.3.0--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Synapse_Add_V0_1_0().translate("wdl")

