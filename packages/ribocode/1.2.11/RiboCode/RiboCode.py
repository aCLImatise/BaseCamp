from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, String, Float, Int

Ribocode_V0_1_0 = CommandToolBuilder(tool="RiboCode", base_command=["RiboCode"], inputs=[ToolInput(tag="in_an_not_dir", input_type=Directory(optional=True), prefix="--annot_dir", doc=InputDocumentation(doc="transcripts annotation directory, generated by\nprepare_transcripts.")), ToolInput(tag="in_config_file", input_type=File(optional=True), prefix="--config_file", doc=InputDocumentation(doc="list bam file and P-sites information in this file,\nplease refer to the example file in data folder.")), ToolInput(tag="in_longest_orf", input_type=String(optional=True), prefix="--longest-orf", doc=InputDocumentation(doc="Default: yes, the region from most distal AUG to stop\nwas defined as an ORF. If set to no , the position of\nstart codon will be automatically determined by\nprogram.")), ToolInput(tag="in_pval_cut_off", input_type=Float(optional=True), prefix="--pval-cutoff", doc=InputDocumentation(doc="P-value cutoff for ORF filtering, default 0.05")), ToolInput(tag="in_start_codon", input_type=String(optional=True), prefix="--start_codon", doc=InputDocumentation(doc="The canonical start codon. default: ATG")), ToolInput(tag="in_alt_start_codons", input_type=String(optional=True), prefix="--alt_start_codons", doc=InputDocumentation(doc="The alternative start codon, such as CTG,GTG, default:\nNone. Multiple codons should be separated by comma.")), ToolInput(tag="in_stop_codon", input_type=String(optional=True), prefix="--stop_codon", doc=InputDocumentation(doc="Stop codon, default: TAA,TAG,TGA")), ToolInput(tag="in_transl_table", input_type=Int(optional=True), prefix="--transl_table", doc=InputDocumentation(doc="ORF translation table(Default: 1). Assign the correct\ngenetic code based on your organism, [please refer: ht\ntps://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi\n]")), ToolInput(tag="in_min_aa_length", input_type=Int(optional=True), prefix="--min-AA-length", doc=InputDocumentation(doc="The minimal length of predicted peptides,default 20")), ToolInput(tag="in_output_gtf", input_type=File(optional=True), prefix="--output-gtf", doc=InputDocumentation(doc="output the gtf file of predicted ORFs")), ToolInput(tag="in_output_bed", input_type=File(optional=True), prefix="--output-bed", doc=InputDocumentation(doc="output the bed file of predicted ORFs")), ToolInput(tag="in_output_name", input_type=File(optional=True), prefix="--output-name", doc=InputDocumentation(doc="output file name, default: final_result"))], outputs=[ToolOutput(tag="out_output_gtf", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_gtf", type_hint=File()), doc=OutputDocumentation(doc="output the gtf file of predicted ORFs")), ToolOutput(tag="out_output_bed", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_bed", type_hint=File()), doc=OutputDocumentation(doc="output the bed file of predicted ORFs")), ToolOutput(tag="out_output_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_name", type_hint=File()), doc=OutputDocumentation(doc="output file name, default: final_result"))], container="quay.io/biocontainers/ribocode:1.2.11--pyh145b6a8_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ribocode_V0_1_0().translate("wdl")

