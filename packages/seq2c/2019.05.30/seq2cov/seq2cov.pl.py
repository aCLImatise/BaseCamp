from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, File, Boolean

Seq2Cov_Pl_V0_1_0 = CommandToolBuilder(tool="seq2cov.pl", base_command=["seq2cov.pl"], inputs=[ToolInput(tag="in_this_help", input_type=String(optional=True), prefix="-h", doc=InputDocumentation(doc="this help")), ToolInput(tag="in_floatindicate_amplicon_based", input_type=Int(optional=True), prefix="-a", doc=InputDocumentation(doc=":float\nIndicate that it's PCR amplicon based calling.  Each line in region_info represents a PCR amplicon (including primers).\nTwo numbers in option are parameter to decide whether a particular read or pairs belongs to the amplicon. First is the\nnumber of base pairs.  The second is the fraction of overlapped portion to the length of read or pairs.  If the edges of\nreads (paired for Illumina) are within defined base pairs to the edges of amplicons and overlapped portion greater then\nthe fraction, it's considered belonging to the amplicon.  Suggested values are: 10:0.95.  When given a 6 column amplicon\nformat BED files, it'll be set to 10:0.95 automatically, but can still be overwritten by -a option.")), ToolInput(tag="in_regular_expression_extract", input_type=File(optional=True), prefix="-n", doc=InputDocumentation(doc="The regular expression to extract sample name from bam filename")), ToolInput(tag="in_mutual_exclusive_set", input_type=String(optional=True), prefix="-N", doc=InputDocumentation(doc="Mutual exclusive to -n.  Set the sample name to name")), ToolInput(tag="in_indexed_bam_file", input_type=File(optional=True), prefix="-b", doc=InputDocumentation(doc="The indexed BAM file")), ToolInput(tag="in_the_column_chr", input_type=String(optional=True), prefix="-c", doc=InputDocumentation(doc="The column for chr")), ToolInput(tag="in_column_region_start", input_type=String(optional=True), prefix="-S", doc=InputDocumentation(doc="The column for region start, e.g. gene start")), ToolInput(tag="in_column_region_end", input_type=String(optional=True), prefix="-E", doc=InputDocumentation(doc="The column for region end, e.g. gene end")), ToolInput(tag="in_column_segment_starts", input_type=String(optional=True), prefix="-s", doc=InputDocumentation(doc="The column for segment starts in the region, e.g. exon starts")), ToolInput(tag="in_column_segment_ends", input_type=String(optional=True), prefix="-e", doc=InputDocumentation(doc="The column for segment ends in the region, e.g. exon ends")), ToolInput(tag="in_column_gene_name", input_type=String(optional=True), prefix="-g", doc=InputDocumentation(doc="The column for gene name")), ToolInput(tag="in_number_nucleotide_extend", input_type=Int(optional=True), prefix="-x", doc=InputDocumentation(doc="The number of nucleotide to extend for each segment, default: 0")), ToolInput(tag="in_indicate_its_based", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="Indicate whether it's zero based numbering, default is 1-based"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seq2Cov_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

