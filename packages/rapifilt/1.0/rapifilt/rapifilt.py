from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Rapifilt_V0_1_0 = CommandToolBuilder(tool="rapifilt", base_command=["rapifilt"], inputs=[ToolInput(tag="in_program_version_information", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Program and version information")), ToolInput(tag="in_enable_fasta_output", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Enable fasta output (default fastq)")), ToolInput(tag="in_int_set_lefcut", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="<int>                 Set lef-cut value for quality scores (int default 0)")), ToolInput(tag="in_int_rightcut_value", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="<int>                 Set right-cut value for quality scores (int default 0)")), ToolInput(tag="in_int_windows_size", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="<int>                 Set windows size to check on the quality scores (int default 1)")), ToolInput(tag="in_int_filter_sequence", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="<int>                 Filter sequence shorter than min_len (int default 1)")), ToolInput(tag="in_mx", input_type=Boolean(optional=True), prefix="-mx", doc=InputDocumentation(doc="<int>                Filter sequence larger than max_len (int default 5000)")), ToolInput(tag="in_fast_q", input_type=Boolean(optional=True), prefix="-fastq", doc=InputDocumentation(doc="<fastq file>      single fastq input (file.fastq) the file can be gz compressed")), ToolInput(tag="in_sff", input_type=Boolean(optional=True), prefix="-sff", doc=InputDocumentation(doc="<454 files>         454 input (file.sff)")), ToolInput(tag="in_illumina_files_illumina", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="<illumina files>      Illumina inputs(file1.fastq file2.fastq) the files can be gz compressed")), ToolInput(tag="in_fastqfile_desired_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="<fastq_file>          Desired fastq output file. If not specified to stdout")), ToolInput(tag="in_tb", input_type=Boolean(optional=True), prefix="-tb", doc=InputDocumentation(doc="<int>                Remove n bases from the begins of sequencing fragments (int default 0)")), ToolInput(tag="in_te", input_type=Boolean(optional=True), prefix="-te", doc=InputDocumentation(doc="<int>                Remove n bases from the ends of sequencing fragments (int default 0)")), ToolInput(tag="in_bin", input_type=Boolean(optional=True), prefix="-bin", doc=InputDocumentation(doc="<int>               Bin size used to compute statistic per base (int default 1)"))], outputs=[ToolOutput(tag="out_fastqfile_desired_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_fastqfile_desired_file", type_hint=File()), doc=OutputDocumentation(doc="<fastq_file>          Desired fastq output file. If not specified to stdout"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rapifilt_V0_1_0().translate("wdl", allow_empty_container=True)

