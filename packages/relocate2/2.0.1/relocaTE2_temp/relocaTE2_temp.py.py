from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Directory, Int, Boolean

Relocate2_Temp_Py_V0_1_0 = CommandToolBuilder(tool="relocaTE2_temp.py", base_command=["relocaTE2_temp.py"], inputs=[ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="Name of BAM file of read mapped reference genome")), ToolInput(tag="in_te_fast_a", input_type=String(optional=True), prefix="--te_fasta", doc=InputDocumentation(doc="Name of fasta sequence of repeat element")), ToolInput(tag="in_fq_dir", input_type=Directory(optional=True), prefix="--fq_dir", doc=InputDocumentation(doc="Name of directory of input fastq sequence data")), ToolInput(tag="in_genome_fast_a", input_type=File(optional=True), prefix="--genome_fasta", doc=InputDocumentation(doc="Name of fasta file of reference genome sequence")), ToolInput(tag="in_reference_ins", input_type=String(optional=True), prefix="--reference_ins", doc=InputDocumentation(doc="Name of RepeatMasker TE annotation of reference genome")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Name of output directory where to put temperary and\nfinal results")), ToolInput(tag="in_size", input_type=Int(optional=True), prefix="--size", doc=InputDocumentation(doc="Insert size of sequence library, default = 500")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Number of CPUs to use for multiplex, default = 1")), ToolInput(tag="in_mate_one_id", input_type=Int(optional=True), prefix="--mate_1_id", doc=InputDocumentation(doc="string define paired-end read1, default = '_1'")), ToolInput(tag="in_mate_two_id", input_type=Int(optional=True), prefix="--mate_2_id", doc=InputDocumentation(doc="string define paired-end read2, default = '_2'")), ToolInput(tag="in_unpaired_id", input_type=String(optional=True), prefix="--unpaired_id", doc=InputDocumentation(doc="string define single-end reads, default = '.unPaired'")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="--sample", doc=InputDocumentation(doc="string define sample name which will present in output\nGFF, default = 'not_given'")), ToolInput(tag="in_aligner", input_type=String(optional=True), prefix="--aligner", doc=InputDocumentation(doc="aligner used to map reads to repeat elements,\ndefault=blat")), ToolInput(tag="in_len_cut_match", input_type=Int(optional=True), prefix="--len_cut_match", doc=InputDocumentation(doc="length cutoff threshold for match between reads and\nrepeat elements. Large value will lead to less\nsensitive but more accuracy, default = 10")), ToolInput(tag="in_len_cut_trim", input_type=Int(optional=True), prefix="--len_cut_trim", doc=InputDocumentation(doc="length cutoff threshold for trimed reads after\ntrimming repeat sequence from reads. Large value will\nlead to less sensitive but more accuracy, default = 10")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="--mismatch", doc=InputDocumentation(doc="Number of mismatches allowed for matches between reads\nand repeat elements, default = 2")), ToolInput(tag="in_mismatch_junction", input_type=Int(optional=True), prefix="--mismatch_junction", doc=InputDocumentation(doc="Number of mismatches allowed for matches between\njunction reads and repeat elements, default = 2")), ToolInput(tag="in_step", input_type=Int(optional=True), prefix="--step", doc=InputDocumentation(doc="Number to control steps of pipeline, default =\n'1234567'")), ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry_run", doc=InputDocumentation(doc="write shell scripts only while this script excute")), ToolInput(tag="in_run", input_type=Boolean(optional=True), prefix="--run", doc=InputDocumentation(doc="run while this script excute")), ToolInput(tag="in_split", input_type=Boolean(optional=True), prefix="--split", doc=InputDocumentation(doc="split fastq into 1 M chunks to run blat/bwa jobs")), ToolInput(tag="in_verbose", input_type=Int(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose grade to print out information in all scripts:\nrange from 0 to 4, default = 2\n"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Name of output directory where to put temperary and\nfinal results"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Relocate2_Temp_Py_V0_1_0().translate("wdl", allow_empty_container=True)

