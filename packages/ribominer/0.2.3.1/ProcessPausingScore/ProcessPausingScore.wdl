version 1.0

task ProcessPausingScore {
  input {
    Int? input_files_pausing
    String? prefix_output_files
    Int? group
    Int? replicate
    Int? pausing_score_filter
    Int? ratio_filter
    File? mode
  }
  command <<<
    ProcessPausingScore \
      ~{if defined(input_files_pausing) then ("--input " +  '"' + input_files_pausing + '"') else ""} \
      ~{if defined(prefix_output_files) then ("--output " +  '"' + prefix_output_files + '"') else ""} \
      ~{if defined(group) then ("--group " +  '"' + group + '"') else ""} \
      ~{if defined(replicate) then ("--replicate " +  '"' + replicate + '"') else ""} \
      ~{if defined(pausing_score_filter) then ("--pausing_score_filter " +  '"' + pausing_score_filter + '"') else ""} \
      ~{if defined(ratio_filter) then ("--ratio_filter " +  '"' + ratio_filter + '"') else ""} \
      ~{if defined(mode) then ("--mode " +  '"' + mode + '"') else ""}
  >>>
  runtime {
    docker: "quay.io/biocontainers/ribominer:0.2.3.1--pyh3252c3a_0"
  }
  parameter_meta {
    input_files_pausing: "The input files are pausing scores generated by\\nPausingScore.py. All files are separated by comma.  Or\\na data_mean_score with three columns: col0--control\\npausing score;col1--treated pausing score;col2--ratio.\\nand its index must be motifs"
    prefix_output_files: "Prefix of output files.[required]"
    group: "Group name of each group separated by comma. e.g. 'si-\\ncontrol,si-eIF3e'"
    replicate: "Replicate name of each group separated by comma. e.g.\\n'si_3e_1_80S,si_3e_2_80S__si_cttl_1_80S,si_ctrl_2_80S'"
    pausing_score_filter: "The filter criteria for pausing score on treat\\nsamples.default=10"
    ratio_filter: "The filter criteria for ratio values. default=2"
    mode: "The input is the raw density generated by\\nPausingScore.py or a file processed by\\nProcessPusingScore.py with three columns---[ctrl0\\ntreat1 ratio2]. You can chose raw or ratio.\\ndefault=raw\\n"
  }
  output {
    File out_stdout = stdout()
  }
}