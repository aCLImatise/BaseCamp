from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int

Getproteincodingsequence_V0_1_0 = CommandToolBuilder(tool="GetProteinCodingSequence", base_command=["GetProteinCodingSequence"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Input file(s) in fasta format. generated by RiboCode")), ToolInput(tag="in_coordinate_file", input_type=File(optional=True), prefix="--coordinateFile", doc=InputDocumentation(doc="The file should contain the coordinate of start and\nstop codon. Generated by\nOutputTranscriptInfo.py.[required]")), ToolInput(tag="in_select_trans_list", input_type=String(optional=True), prefix="--select_trans_list", doc=InputDocumentation(doc="Selected transcript list used for metagene\nanalysis.This files requires the first column must be\nthe transcript ID  with a column name.")), ToolInput(tag="in_left_co_or", input_type=String(optional=True), prefix="--left_coor", doc=InputDocumentation(doc="The left position (codon level) of the sequence you\nwanna to extract.[required]")), ToolInput(tag="in_right_co_or", input_type=String(optional=True), prefix="--right_coor", doc=InputDocumentation(doc="The right position (codon level) of the sequence you\nwanna to extract[required]")), ToolInput(tag="in_ot_put_prefix", input_type=String(optional=True), prefix="--otput_prefix", doc=InputDocumentation(doc="Prefix of output files.[required]")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Mode for sequence extraction.[whole or local]")), ToolInput(tag="in_table", input_type=Int(optional=True), prefix="--table", doc=InputDocumentation(doc="Which genetic code to use. default is the standard\ncode.table = 1, is the standard table, ref: https://ww\nw.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi")), ToolInput(tag="in_id_type", input_type=String(optional=True), prefix="--id-type", doc=InputDocumentation(doc="define the id type users input. the default is\ntranscript id, if not, will be transformed into\ntranscript id. default=transcript_id\n"))], outputs=[], container="quay.io/biocontainers/ribominer:0.2.3.1--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Getproteincodingsequence_V0_1_0().translate("wdl")

