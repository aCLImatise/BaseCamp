from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String, File

Biotransformer_V0_1_0 = CommandToolBuilder(tool="biotransformer", base_command=["biotransformer"], inputs=[ToolInput(tag="in_annotate", input_type=Boolean(optional=True), prefix="--annotate", doc=InputDocumentation(doc="Search PuChem for each\nproduct, and store with\nCID and synonyms, when\navailable.")), ToolInput(tag="in_bt_type", input_type=Int(optional=True), prefix="--btType", doc=InputDocumentation(doc="The type of\ndescription: Type of\nbiotransformer -\nEC-based  (ecbased),\nCYP450 (cyp450), Phase\nII (phaseII), Human gut\nmicrobial (hgut), human\nsuper transformer*\n(superbio, or\nallHuman),\nEnvironmental microbial\n(envimicro)**.\nIf option -m is\nenabled, the only valid\nbiotransformer types\nare allHuman, superbio\nand env.")), ToolInput(tag="in_formulas", input_type=String(optional=True), prefix="--formulas", doc=InputDocumentation(doc="Semicolon-separated\nlist of formulas of\ncompounds to identify")), ToolInput(tag="in_mol_input", input_type=File(optional=True), prefix="--molinput", doc=InputDocumentation(doc="The input, which can be\na Mol file")), ToolInput(tag="in_sdf_input", input_type=File(optional=True), prefix="--sdfinput", doc=InputDocumentation(doc="The input, which can be\nan SDF file.")), ToolInput(tag="in_is_miles", input_type=String(optional=True), prefix="--ismiles", doc=InputDocumentation(doc="The input, which can be\na SMILES string")), ToolInput(tag="in_task", input_type=String(optional=True), prefix="--task", doc=InputDocumentation(doc="The task to be permed:\npred for prediction, or\ncid for compound\nidentification")), ToolInput(tag="in_masses", input_type=String(optional=True), prefix="--masses", doc=InputDocumentation(doc="Semicolon-separated\nlist of masses of\ncompounds to identify")), ToolInput(tag="in_csv_output", input_type=File(optional=True), prefix="--csvoutput", doc=InputDocumentation(doc="Select this option to\nreturn CSV output(s).\nYou must enter an\noutput filename")), ToolInput(tag="in_sdf_output", input_type=File(optional=True), prefix="--sdfoutput", doc=InputDocumentation(doc="Select this option to\nreturn SDF output(s).\nYou must enter an\noutput filename")), ToolInput(tag="in_b_sequence", input_type=String(optional=True), prefix="--bsequence", doc=InputDocumentation(doc="Define an ordered\nsequence of\nbiotransformer/nr_of_st\neps to apply. Choose\nonly from the following\nBioTranformer Types:\nallHuman, cyp450,\necbased, env, hgut, and\nphaseII. For instance,\nthe following string\nrepresentation\ndescribes a sequence of\n2 steps of CYP450\nmetabolism, followed by\n1 step of Human Gut\nmetabolism, 1 step of\nPhase II, and 1 step of\nEnvironmental Microbial\nDegradation:\n'cyp450:2; hgut:1;\nphaseII:1; env:1'")), ToolInput(tag="in_n_steps", input_type=Int(optional=True), prefix="--nsteps", doc=InputDocumentation(doc="The number of steps for\nthe prediction. This\noption can be set by\nthe user for the\nEC-based, CYP450, Phase\nII, and Environmental\nmicrobial\nbiotransformers. The\ndefault value is 1.")), ToolInput(tag="in_m_tolerance", input_type=String(optional=True), prefix="--mTolerance", doc=InputDocumentation(doc="Mass tolerance for")), ToolInput(tag="in_jar", input_type=Int(optional=True), prefix="-jar", doc=InputDocumentation(doc="")), ToolInput(tag="in_metabolite", input_type=String(), position=0, doc=InputDocumentation(doc="identification (default"))], outputs=[ToolOutput(tag="out_csv_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_csv_output", type_hint=File()), doc=OutputDocumentation(doc="Select this option to\nreturn CSV output(s).\nYou must enter an\noutput filename")), ToolOutput(tag="out_sdf_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sdf_output", type_hint=File()), doc=OutputDocumentation(doc="Select this option to\nreturn SDF output(s).\nYou must enter an\noutput filename"))], container="quay.io/biocontainers/biotransformer:1.1.5--1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Biotransformer_V0_1_0().translate("wdl")

