from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Repaq_V0_1_0 = CommandToolBuilder(tool="repaq", base_command=["repaq"], inputs=[ToolInput(tag="in_in_one", input_type=Boolean(optional=True), prefix="--in1", doc=InputDocumentation(doc="input file name (string [=])")), ToolInput(tag="in_out_one", input_type=File(optional=True), prefix="--out1", doc=InputDocumentation(doc="output file name (string [=])")), ToolInput(tag="in_in_two", input_type=Boolean(optional=True), prefix="--in2", doc=InputDocumentation(doc="read2 input file name when encoding paired-end FASTQ files (string [=])")), ToolInput(tag="in_out_two", input_type=File(optional=True), prefix="--out2", doc=InputDocumentation(doc="read2 output file name when decoding to paired-end FASTQ files (string [=])")), ToolInput(tag="in_compress", input_type=Boolean(optional=True), prefix="--compress", doc=InputDocumentation(doc="compress input to output")), ToolInput(tag="in_decompress", input_type=Boolean(optional=True), prefix="--decompress", doc=InputDocumentation(doc="decompress input to output")), ToolInput(tag="in_chunk", input_type=Boolean(optional=True), prefix="--chunk", doc=InputDocumentation(doc="the chunk size (kilo bases) for encoding, default 1000=1000kb. (int [=1000])")), ToolInput(tag="in_stdin", input_type=Boolean(optional=True), prefix="--stdin", doc=InputDocumentation(doc="input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.")), ToolInput(tag="in_stdout", input_type=Boolean(optional=True), prefix="--stdout", doc=InputDocumentation(doc="write to STDOUT. When decompressing PE data, this option will result in interleaved FASTQ output for paired-end input. Disabled by defaut.")), ToolInput(tag="in_interleaved_in", input_type=Boolean(optional=True), prefix="--interleaved_in", doc=InputDocumentation(doc="indicate that <in1> is an interleaved paired-end FASTQ which contains both read1 and read2. Disabled by defaut.")), ToolInput(tag="in_compare", input_type=Boolean(optional=True), prefix="--compare", doc=InputDocumentation(doc="compare the files read by read to check the compression consistency. <rfq_to_compare> should be specified in this mode.")), ToolInput(tag="in_rfq_to_compare", input_type=Boolean(optional=True), prefix="--rfq_to_compare", doc=InputDocumentation(doc="the RFQ file to be compared with the input. This option is only used in compare mode. (string [=])")), ToolInput(tag="in_json_compare_result", input_type=Boolean(optional=True), prefix="--json_compare_result", doc=InputDocumentation(doc="the file to store the comparison result. This is optional since the result is also printed on STDOUT. (string [=])")), ToolInput(tag="in_thread", input_type=Boolean(optional=True), prefix="--thread", doc=InputDocumentation(doc="thread number for xz compression. Higher thread num means higher speed and lower compression ratio (1~16), default 1. (int [=1])")), ToolInput(tag="in_compression", input_type=Boolean(optional=True), prefix="--compression", doc=InputDocumentation(doc="compression level. Higher level means higher compression ratio, and more RAM usage (1~9), default 4. (int [=4])"))], outputs=[ToolOutput(tag="out_out_one", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_one", type_hint=File()), doc=OutputDocumentation(doc="output file name (string [=])")), ToolOutput(tag="out_out_two", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_two", type_hint=File()), doc=OutputDocumentation(doc="read2 output file name when decoding to paired-end FASTQ files (string [=])"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Repaq_V0_1_0().translate("wdl", allow_empty_container=True)

