from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean

Batch_Seqstructhmm_V0_1_0 = CommandToolBuilder(tool="batch_seqstructhmm", base_command=["batch_seqstructhmm"], inputs=[ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="number of cores to use (if not given, all cores are\nused)")), ToolInput(tag="in_structure_type", input_type=String(optional=True), prefix="--structure_type", doc=InputDocumentation(doc="structure type to use; must match location of\nstructure files (see data_directory argument above)\n(default: shapes)")), ToolInput(tag="in_motif_length", input_type=Int(optional=True), prefix="--motif_length", doc=InputDocumentation(doc="length of the motifs that shall be found (default: 6)")), ToolInput(tag="in_baum_welch", input_type=Boolean(optional=True), prefix="--baum_welch", doc=InputDocumentation(doc="should the models be initialized with a Baum-Welch\noptimized sequence motif (default: yes)")), ToolInput(tag="in_flexibility", input_type=Int(optional=True), prefix="--flexibility", doc=InputDocumentation(doc="greedyness of Gibbs sampler: model parameters are\nsampled from among the top f configurations (default:\nf=10), set f to 0 in order to include all possible\nconfigurations")), ToolInput(tag="in_block_size", input_type=Int(optional=True), prefix="--block_size", doc=InputDocumentation(doc="number of sequences to be held-out in each iteration\n(default: 1)")), ToolInput(tag="in_threshold", input_type=Int(optional=True), prefix="--threshold", doc=InputDocumentation(doc="the iterative algorithm is terminated if this\nreduction in sequence structure loglikelihood is not\nreached for any of the 3 last measurements (default:\n10)")), ToolInput(tag="in_termination_interval", input_type=Int(optional=True), prefix="--termination_interval", doc=InputDocumentation(doc="produce output every <i> iterations (default: i=100)\n")), ToolInput(tag="in_data_directory", input_type=String(), position=0, doc=InputDocumentation(doc="data directory; must contain the sequence files under\nfasta/<protein>/positive.fasta and structure files\nunder <structure_type>/<protein>/positive.txt")), ToolInput(tag="in_proteins", input_type=String(), position=1, doc=InputDocumentation(doc="list of RNA-binding proteins to analyze (surrounded by\nquotation marks, separated by whitespace)")), ToolInput(tag="in_batch_directory", input_type=String(), position=2, doc=InputDocumentation(doc="directory for batch output"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Batch_Seqstructhmm_V0_1_0().translate("wdl", allow_empty_container=True)

