from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int

Visualize_Cg_Py_V0_1_0 = CommandToolBuilder(tool="visualize_cg.py", base_command=["visualize_cg.py"], inputs=[ToolInput(tag="in_highlight", input_type=String(optional=True), prefix="--highlight", doc=InputDocumentation(doc="Highlight some elements")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Create a picture of the scene and exit")), ToolInput(tag="in_long_range", input_type=Boolean(optional=True), prefix="--longrange", doc=InputDocumentation(doc="Display long-range interactions")), ToolInput(tag="in_loops", input_type=Boolean(optional=True), prefix="--loops", doc=InputDocumentation(doc="Don't display the coarse-grain hairpin loops")), ToolInput(tag="in_cones", input_type=Boolean(optional=True), prefix="--cones", doc=InputDocumentation(doc="Display cones that portrude from the stems")), ToolInput(tag="in_text", input_type=Boolean(optional=True), prefix="--text", doc=InputDocumentation(doc="Add labels to the figure.")), ToolInput(tag="in_align", input_type=Boolean(optional=True), prefix="--align", doc=InputDocumentation(doc="Align all of the structures with the first")), ToolInput(tag="in_encompassing_stems", input_type=Boolean(optional=True), prefix="--encompassing-stems", doc=InputDocumentation(doc="Show the big stems that encompass the colinear ones.")), ToolInput(tag="in_virtual_atoms", input_type=Boolean(optional=True), prefix="--virtual-atoms", doc=InputDocumentation(doc="Color each of the nucleotide positions (i.e. average")), ToolInput(tag="in_distance", input_type=String(optional=True), prefix="--distance", doc=InputDocumentation(doc="Draw the lines between specified virtual residues")), ToolInput(tag="in_residue_distance", input_type=String(optional=True), prefix="--residue-distance", doc=InputDocumentation(doc="Draw a line between residue distances")), ToolInput(tag="in_basis", input_type=Boolean(optional=True), prefix="--basis", doc=InputDocumentation(doc="Display the coordinate basis of each element")), ToolInput(tag="in_stem_color", input_type=String(optional=True), prefix="--stem-color", doc=InputDocumentation(doc="The default color in coarse-grain drawings")), ToolInput(tag="in_multi_loop_color", input_type=String(optional=True), prefix="--multiloop-color", doc=InputDocumentation(doc="The default color in coarse-grain drawings")), ToolInput(tag="in_batch", input_type=Boolean(optional=True), prefix="--batch", doc=InputDocumentation(doc="Start pymol in batch mode")), ToolInput(tag="in_side_chain_atoms", input_type=Boolean(optional=True), prefix="--sidechain-atoms", doc=InputDocumentation(doc="Include the sidechain atoms. Automatically enables")), ToolInput(tag="in_only_elements", input_type=String(optional=True), prefix="--only-elements", doc=InputDocumentation(doc="Display only these elements element names should be\nseparated by commas")), ToolInput(tag="in_color_gradual", input_type=Int(optional=True), prefix="--color-gradual", doc=InputDocumentation(doc="Color the specified elementsgradually from one to the\nother, example (i1,i4,m1)\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Visualize_Cg_Py_V0_1_0().translate("wdl", allow_empty_container=True)

