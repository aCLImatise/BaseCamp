from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, String, Directory

Train_Seqstructhmm_V0_1_0 = CommandToolBuilder(tool="train_seqstructhmm", base_command=["train_seqstructhmm"], inputs=[ToolInput(tag="in_motif_length", input_type=Int(optional=True), prefix="--motif_length", doc=InputDocumentation(doc="length of the motif that shall be found (default: 6)")), ToolInput(tag="in_random", input_type=Boolean(optional=True), prefix="--random", doc=InputDocumentation(doc="Initialize the model randomly (default: initialize\nwith Baum-Welch optimized sequence motif)")), ToolInput(tag="in_flexibility", input_type=Int(optional=True), prefix="--flexibility", doc=InputDocumentation(doc="greedyness of Gibbs sampler: model parameters are\nsampled from among the top f configurations (default:\nf=10), set f to 0 in order to include all possible\nconfigurations")), ToolInput(tag="in_block_size", input_type=Int(optional=True), prefix="--block_size", doc=InputDocumentation(doc="number of sequences to be held-out in each iteration\n(default: 1)")), ToolInput(tag="in_threshold", input_type=Int(optional=True), prefix="--threshold", doc=InputDocumentation(doc="the iterative algorithm is terminated if this\nreduction in sequence structure loglikelihood is not\nreached for any of the 3 last measurements (default:\n10)")), ToolInput(tag="in_job_name", input_type=String(optional=True), prefix="--job_name", doc=InputDocumentation(doc="name of the job (default: 'job')")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="--output_directory", doc=InputDocumentation(doc="directory to write output files to (default: current\ndirectory)")), ToolInput(tag="in_termination_interval", input_type=Int(optional=True), prefix="--termination_interval", doc=InputDocumentation(doc="produce output every <i> iterations (default: i=100)")), ToolInput(tag="in_no_model_state", input_type=Boolean(optional=True), prefix="--no_model_state", doc=InputDocumentation(doc="do not write model state every i iterations")), ToolInput(tag="in_only_best_shape", input_type=Boolean(optional=True), prefix="--only_best_shape", doc=InputDocumentation(doc="train only using best structure for each sequence\n(default: use all structures)\n")), ToolInput(tag="in_training_sequences", input_type=String(), position=0, doc=InputDocumentation(doc="FASTA file with sequences for training")), ToolInput(tag="in_training_structures", input_type=String(), position=1, doc=InputDocumentation(doc="FASTA file with RNA structures for training"))], outputs=[ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="directory to write output files to (default: current\ndirectory)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Train_Seqstructhmm_V0_1_0().translate("wdl", allow_empty_container=True)

