from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Sortmerna_V0_1_0 = CommandToolBuilder(tool="sortmerna", base_command=["sortmerna"], inputs=[ToolInput(tag="in_ref", input_type=Boolean(optional=True), prefix="--ref", doc=InputDocumentation(doc="PATH        Required  Reference file (FASTA) absolute or relative path.\nUse mutliple times, once per a reference file")), ToolInput(tag="in_reads", input_type=Boolean(optional=True), prefix="--reads", doc=InputDocumentation(doc="PATH        Required  Raw reads file (FASTA/FASTQ/FASTA.GZ/FASTQ.GZ).\nUse twice for files with paired reads")), ToolInput(tag="in_workdir", input_type=File(optional=True), prefix="--workdir", doc=InputDocumentation(doc="PATH        Optional  Directory for storing Reference index,      USRDIR/sortmerna/run/\nKey-value database, and the output.\nDefault structure:\nWORKDIR/\nidx/\nkvdb/\nout/")), ToolInput(tag="in_kv_db", input_type=Boolean(optional=True), prefix="--kvdb", doc=InputDocumentation(doc="PATH        Optional  Directory for storing Key-value database    WORKDIR/kvdb\nKVDB is used for storing alignement results.")), ToolInput(tag="in_idx", input_type=Boolean(optional=True), prefix="--idx", doc=InputDocumentation(doc="PATH        Optional  Directory for storing Reference index.      WORKDIR/idx")), ToolInput(tag="in_fast_x", input_type=Boolean(optional=True), prefix="--fastx", doc=InputDocumentation(doc="BOOL        Optional  Output aligned reads into FASTA/FASTQ file")), ToolInput(tag="in_sam", input_type=Boolean(optional=True), prefix="--sam", doc=InputDocumentation(doc="BOOL        Optional  Output SAM alignment for aligned reads.")), ToolInput(tag="in_sq", input_type=Boolean(optional=True), prefix="--SQ", doc=InputDocumentation(doc="BOOL        Optional  Add SQ tags to the SAM file")), ToolInput(tag="in_blast", input_type=Boolean(optional=True), prefix="--blast", doc=InputDocumentation(doc="STRING      Optional  output alignments in various Blast-like formats\n'0'                    - pairwise\n'1'                    - tabular(Blast - m 8 format)\n'1 cigar'              - tabular + column for CIGAR\n'1 cigar qcov'         - tabular + columns for CIGAR\nand query coverage\n'1 cigar qcov qstrand' - tabular + columns for CIGAR,\nquery coverage and strand")), ToolInput(tag="in_aligned", input_type=Boolean(optional=True), prefix="--aligned", doc=InputDocumentation(doc="STRING/BOOL Optional  Aligned reads file prefix [dir/][pfx]       WORKDIR/out/aligned\nDirectory and file prefix for aligned output i.e.\neach output file will go into the specified directory with the given prefix.\nThe appropriate extension (fasta|fastq|blast|sam|etc) will be automatically added.\nBoth 'dir' and 'pfx' are optional.\nThe 'dir' can be a relative or an absolute path.\nIf 'dir' is not specified, the output will be created in the WORKDIR/out/\nIf 'pfx' is not specified, the prefix 'aligned' will be used\nExamples:\n-aligned $MYDIR/dir_1/dir_2/1 -> $MYDIR/dir_1/dir_2/1.fasta\n-aligned dir_1/apfx           -> $PWD/dir_1/apfx.fasta\n-aligned dir_1/               -> $PWD/aligned.fasta\n-aligned apfx                 -> $PWD/apfx.fasta\n-aligned  (no argument)       -> WORKDIR/out/aligned.fasta")), ToolInput(tag="in_other", input_type=Boolean(optional=True), prefix="--other", doc=InputDocumentation(doc="STRING/BOOL Optional  Non-aligned reads file prefix [dir/][pfx]   WORKDIR/out/other\nMust be used with 'fastx'.\nDirectory and file prefix for non-aligned output i.e.\neach output file will go into the specified directory with the given prefix.\nThe appropriate extension (fasta|fastq|blast|sam|etc) will be automatically added.\nBoth 'dir' and 'pfx' are optional.\nThe 'dir' can be a relative or an absolute path.\nIf 'dir' is not specified, the output will be created in the WORKDIR/out/\nIf 'pfx' is not specified, the prefix 'other' will be used\nExamples:\n-other $MYDIR/dir_1/dir_2/1 -> $MYDIR/dir_1/dir_2/1.fasta\n-other dir_1/apfx           -> $PWD/dir_1/apfx.fasta\n-other dir_1/               -> $PWD/dir_1/other.fasta\n-other apfx                 -> $PWD/apfx.fasta\n-other  (no argument)       -> aligned_out/other.fasta\ni.e. the same output directory as used\nfor aligned output")), ToolInput(tag="in_num_alignments", input_type=Boolean(optional=True), prefix="--num_alignments", doc=InputDocumentation(doc="INT         Optional  Positive integer (INT >=0).\nReport first INT alignments per read reaching E-value\nIf INT = 0, all alignments will be output")), ToolInput(tag="in_best", input_type=Boolean(optional=True), prefix="--best", doc=InputDocumentation(doc="INT         Optional  Report INT best alignments per read reaching E-value    1\nby searching --min_lis INT candidate alignments\nIf INT == 0: search All candidate alignments\nIf INT > 0: search INT best alignments.\nThe larger is the INT, the longer is the search time.\nExplanation:\nA read can potentially be aligned (reaching E-value threshold)\nto multiple reference sequences.\nThe 'best' alignment is an alignment that is better\nthan the previously found alignments.\nThe very first found alignment is automatically the best alignment\nuntil a better one is found.")), ToolInput(tag="in_min_lis", input_type=Boolean(optional=True), prefix="--min_lis", doc=InputDocumentation(doc="INT         Optional  Search all alignments having the first INT longest LIS\nLIS stands for Longest Increasing Subsequence,\nit is computed using seeds' positions to expand hits into\nlonger matches prior to Smith - Waterman alignment.\nRequires option 'best'.\nMutually exclusive with option 'num_alignments'")), ToolInput(tag="in_print_all_reads", input_type=Boolean(optional=True), prefix="--print_all_reads", doc=InputDocumentation(doc="Optional  Output null alignment strings for non-aligned reads     False\nto SAM and/or BLAST tabular files")), ToolInput(tag="in_paired", input_type=Boolean(optional=True), prefix="--paired", doc=InputDocumentation(doc="BOOL        Optional  Indicates a Single reads file with paired reads         False\nIf a single reads file with paired reads is used,\nand neither 'paired_in' nor 'paired_out' are specified,\nuse this option together with 'out2' to output\nFWD and REV reads into separate files")), ToolInput(tag="in_paired_in", input_type=Boolean(optional=True), prefix="--paired_in", doc=InputDocumentation(doc="BOOL        Optional  If one of the paired-end reads is Aligned,              False\nput both reads into Aligned FASTA/Q file\nMust be used with 'fastx'.\nMutually exclusive with 'paired_out'.")), ToolInput(tag="in_paired_out", input_type=Boolean(optional=True), prefix="--paired_out", doc=InputDocumentation(doc="BOOL        Optional  If one of the paired-end reads is Non-aligned,          False\nput both reads into Non-Aligned FASTA/Q file\nMust be used with 'fastx'.\nMutually exclusive with 'paired_in'.")), ToolInput(tag="in_out_two", input_type=Boolean(optional=True), prefix="--out2", doc=InputDocumentation(doc="BOOL        Optional  Output paired reads into separate files.                False\nMust be used with 'fastx'.\nIgnored without either of 'paired_in' |\n'paired_out' | 'paired' | two 'reads'")), ToolInput(tag="in_match", input_type=Boolean(optional=True), prefix="--match", doc=InputDocumentation(doc="INT         Optional  SW score (positive integer) for a match.                2")), ToolInput(tag="in_mismatch", input_type=Boolean(optional=True), prefix="--mismatch", doc=InputDocumentation(doc="INT         Optional  SW penalty (negative integer) for a mismatch.          -3")), ToolInput(tag="in_gap_open", input_type=Boolean(optional=True), prefix="--gap_open", doc=InputDocumentation(doc="INT         Optional  SW penalty (positive integer) for introducing a gap.    5")), ToolInput(tag="in_gap_ext", input_type=Boolean(optional=True), prefix="--gap_ext", doc=InputDocumentation(doc="INT         Optional  SW penalty (positive integer) for extending a gap.      2")), ToolInput(tag="in_double_optional_evalue", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="DOUBLE      Optional  E-value threshold.                                      1\nDefines the 'statistical significance' of a local alignment.\nExponentially correllates with the Minimal Alignment Score.\nHigher E-values (100, 1000, ...) cause More reads\nto Pass the alignment threshold")), ToolInput(tag="in_bool_optional_forward", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="BOOL        Optional  Search only the forward strand.                         False")), ToolInput(tag="in_bool_optional_sw", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="BOOL        Optional  SW penalty for ambiguous letters (N's) scored\nas --mismatch")), ToolInput(tag="in_bool_optional_reversecomplementary", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="BOOL        Optional  Search only the reverse-complementary strand.           False")), ToolInput(tag="in_id", input_type=Boolean(optional=True), prefix="--id", doc=InputDocumentation(doc="INT         Optional  %%id similarity threshold (the alignment                0.97\nmust still pass the E-value threshold).")), ToolInput(tag="in_coverage", input_type=Boolean(optional=True), prefix="--coverage", doc=InputDocumentation(doc="INT         Optional  %%query coverage threshold (the alignment must          0.97\nstill pass the E-value threshold)")), ToolInput(tag="in_de_novo_otu", input_type=Boolean(optional=True), prefix="--de_novo_otu", doc=InputDocumentation(doc="BOOL        Optional  FASTA/FASTQ file for reads matching database < %%id     False\n(set using --id) and < %%cov (set using --coverage)\n(alignment must still pass the E-value threshold).")), ToolInput(tag="in_otu_map", input_type=Boolean(optional=True), prefix="--otu_map", doc=InputDocumentation(doc="BOOL        Optional  Output OTU map (input to QIIME's make_otu_table.py).    False")), ToolInput(tag="in_passes", input_type=Boolean(optional=True), prefix="--passes", doc=InputDocumentation(doc="INT,INT,INT Optional  Three intervals at which to place the seed on the read  L,L/2,3\n(L is the seed length)")), ToolInput(tag="in_edges", input_type=Boolean(optional=True), prefix="--edges", doc=InputDocumentation(doc="INT         Optional  Number (or percent if INT followed by %% sign) of       4\nnucleotides to add to each edge of the read\nprior to SW local alignment")), ToolInput(tag="in_num_seeds", input_type=Boolean(optional=True), prefix="--num_seeds", doc=InputDocumentation(doc="BOOL        Optional  Number of seeds matched before searching                2\nfor candidate LIS")), ToolInput(tag="in_full_search", input_type=Boolean(optional=True), prefix="--full_search", doc=InputDocumentation(doc="INT         Optional  Search for all 0-error and 1-error seed                 False\nmatches in the index rather than stopping\nafter finding a 0-error match (<1%% gain in\nsensitivity with up four-fold decrease in speed)")), ToolInput(tag="in_pid", input_type=Boolean(optional=True), prefix="--pid", doc=InputDocumentation(doc="BOOL        Optional  Add pid to output file names.                           False")), ToolInput(tag="in_int_optional_deprecated", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="INT         Optional  DEPRECATED in favour of '-threads'. Number of           numCores\nprocessing threads to use.\nAutomatically redirects to '-threads'")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="INT         Optional  Number of Processing threads to use                     numCores")), ToolInput(tag="in_double_optional_indexing_seed", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="DOUBLE      Optional  Indexing: seed length.                                  18")), ToolInput(tag="in_double_optional_indexing_amount", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="DOUBLE      Optional  Indexing: the amount of memory (in Mbytes) for building 3072\nthe index.")), ToolInput(tag="in_bool_optional_produce", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="BOOL        Optional  Produce verbose output when building the index          True")), ToolInput(tag="in_interval", input_type=Boolean(optional=True), prefix="--interval", doc=InputDocumentation(doc="INT         Optional  Indexing: Positive integer: index every Nth L-mer in    1\nthe reference database e.g. '-interval 2'.")), ToolInput(tag="in_max_pos", input_type=Boolean(optional=True), prefix="--max_pos", doc=InputDocumentation(doc="INT         Optional  Indexing: maximum (integer) number of positions to store  1000\nfor each unique L-mer. If 0 all positions are stored.")), ToolInput(tag="in_dbg_put_db", input_type=Boolean(optional=True), prefix="--dbg_put_db", doc=InputDocumentation(doc="BOOL        Optional")), ToolInput(tag="in_cmd", input_type=Boolean(optional=True), prefix="--cmd", doc=InputDocumentation(doc="BOOL        Optional  Launch an interactive session (command prompt)          False")), ToolInput(tag="in_task", input_type=Boolean(optional=True), prefix="--task", doc=InputDocumentation(doc="INT         Optional  Processing Task:                                        4\n0 - align. Only perform alignment\n1 - post-processing (log writing)\n2 - generate reports\n3 - align and post-process\n4 - all\n"))], outputs=[ToolOutput(tag="out_workdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_workdir", type_hint=File()), doc=OutputDocumentation(doc="PATH        Optional  Directory for storing Reference index,      USRDIR/sortmerna/run/\nKey-value database, and the output.\nDefault structure:\nWORKDIR/\nidx/\nkvdb/\nout/"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sortmerna_V0_1_0().translate("wdl", allow_empty_container=True)

