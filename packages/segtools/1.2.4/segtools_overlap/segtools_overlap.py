from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Segtools_Overlap_V0_1_0 = CommandToolBuilder(tool="segtools_overlap", base_command=["segtools-overlap"], inputs=[ToolInput(tag="in_clobber", input_type=Boolean(optional=True), prefix="--clobber", doc=InputDocumentation(doc="Overwrite any existing output files.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Do not print diagnostic messages.")), ToolInput(tag="in_quick", input_type=Boolean(optional=True), prefix="--quick", doc=InputDocumentation(doc="Compute values only for one chromosome.")), ToolInput(tag="in_replot", input_type=Boolean(optional=True), prefix="--replot", doc=InputDocumentation(doc="Load data from output tab files and regenerate plots\ninstead of recomputing data.")), ToolInput(tag="in_no_plot", input_type=Boolean(optional=True), prefix="--noplot", doc=InputDocumentation(doc="Do not generate any plots.")), ToolInput(tag="in_cluster", input_type=Boolean(optional=True), prefix="--cluster", doc=InputDocumentation(doc="Cluster rows and columns in heat map plot")), ToolInput(tag="in_print_segments", input_type=File(optional=True), prefix="--print-segments", doc=InputDocumentation(doc="For each group in the SEGMENTATION, a separate output\nfile will be created that contains a list of all the\nsegments that the group was found to overlap with.\nOutput files are named overlap.segments.X.txt, where X\nis the name of the SEGMENTATION group.")), ToolInput(tag="in_max_contrast", input_type=Boolean(optional=True), prefix="--max-contrast", doc=InputDocumentation(doc="Saturate color range instead of having it go from 0 to\n1")), ToolInput(tag="in_by", input_type=Int(optional=True), prefix="--by", doc=InputDocumentation(doc="One of: ['segments', 'bases'], which determines the\ndefinition of overlap. @segments: The value associated\nwith two features overlapping will be 1 if they\noverlap, and 0 otherwise. @bases: The value associated\nwith two features overlapping will be number of base\npairs which they overlap. [default: bases]")), ToolInput(tag="in_min_overlap", input_type=Int(optional=True), prefix="--min-overlap", doc=InputDocumentation(doc="The minimum number of base pairs that two features\nmust overlap for them to be classified as overlapping.\nThis integer can be either positive (features overlap\nonly if they share at least this many bases) or\nnegative (features overlap if there are no more than\nthis many bases between them). Both a negative min-\noverlap and --by=bases cannot be specified together.\n[default: 1]")), ToolInput(tag="in_mnemonic_file", input_type=File(optional=True), prefix="--mnemonic-file", doc=InputDocumentation(doc="If specified, labels will be shown using mnemonics\nfound in FILE")), ToolInput(tag="in_feature_mnemonic_file", input_type=File(optional=True), prefix="--feature-mnemonic-file", doc=InputDocumentation(doc="If specified, ANNOTATION groups will be shown using\nmnemonics found in FILE.")), ToolInput(tag="in_outdir", input_type=File(optional=True), prefix="--outdir", doc=InputDocumentation(doc="File output directory (will be created if it does not\nexist) [default: overlap]")), ToolInput(tag="in_val_pass_val", input_type=String(optional=True), prefix="-R", doc=InputDocumentation(doc="=VAL        Pass VAL for PARAM when calling R functions. May be\nspecified multiple times.\n")), ToolInput(tag="in_segmentation", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_annotation", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_print_segments", output_type=File(optional=True), selector=InputSelector(input_to_select="in_print_segments", type_hint=File()), doc=OutputDocumentation(doc="For each group in the SEGMENTATION, a separate output\nfile will be created that contains a list of all the\nsegments that the group was found to overlap with.\nOutput files are named overlap.segments.X.txt, where X\nis the name of the SEGMENTATION group.")), ToolOutput(tag="out_outdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="File output directory (will be created if it does not\nexist) [default: overlap]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Segtools_Overlap_V0_1_0().translate("wdl", allow_empty_container=True)

