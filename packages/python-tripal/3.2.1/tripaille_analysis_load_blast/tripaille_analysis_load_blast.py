from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, String, Boolean, Int

Tripaille_Analysis_Load_Blast_V0_1_0 = CommandToolBuilder(tool="tripaille_analysis_load_blast", base_command=["tripaille", "analysis", "load_blast"], inputs=[ToolInput(tag="in_blast_ext", input_type=Directory(optional=True), prefix="--blast_ext", doc=InputDocumentation(doc="If looking for files in a directory, extension of\nthe blast result files")), ToolInput(tag="in_blast_db", input_type=String(optional=True), prefix="--blastdb", doc=InputDocumentation(doc="Name of the database blasted against (must be in\nthe Chado db table)")), ToolInput(tag="in_blast_db_id", input_type=String(optional=True), prefix="--blastdb_id", doc=InputDocumentation(doc="ID of the database blasted against (must be in the\nChado db table)")), ToolInput(tag="in_blast_parameters", input_type=String(optional=True), prefix="--blast_parameters", doc=InputDocumentation(doc="Blast parameters used to produce these results")), ToolInput(tag="in_query_re", input_type=String(optional=True), prefix="--query_re", doc=InputDocumentation(doc="The regular expression that can uniquely identify\nthe query name. This parameters is required if the\nfeature name is not the first word in the blast\nquery name.")), ToolInput(tag="in_query_type", input_type=String(optional=True), prefix="--query_type", doc=InputDocumentation(doc="The feature type (e.g. 'gene', 'mRNA', 'contig') of\nthe query. It must be a valid Sequence Ontology\nterm.")), ToolInput(tag="in_query_unique_name", input_type=Boolean(optional=True), prefix="--query_uniquename", doc=InputDocumentation(doc="Use this if the --query-re regular expression\nmatches unique names instead of names in the\ndatabase.")), ToolInput(tag="in_is_concat", input_type=Boolean(optional=True), prefix="--is_concat", doc=InputDocumentation(doc="If the blast result file is simply a list of\nconcatenated blast results.")), ToolInput(tag="in_search_keywords", input_type=Boolean(optional=True), prefix="--search_keywords", doc=InputDocumentation(doc="Extract keywords for Tripal search")), ToolInput(tag="in_no_parsed", input_type=Int(optional=True), prefix="--no_parsed", doc=InputDocumentation(doc="Maximum number of hits to parse per feature.\nDefault=all  [default: all]")), ToolInput(tag="in_no_wait", input_type=Boolean(optional=True), prefix="--no_wait", doc=InputDocumentation(doc="Do not wait for job to complete")), ToolInput(tag="in_algorithm", input_type=String(optional=True), prefix="--algorithm", doc=InputDocumentation(doc="analysis algorithm")), ToolInput(tag="in_source_version", input_type=String(optional=True), prefix="--sourceversion", doc=InputDocumentation(doc="analysis sourceversion")), ToolInput(tag="in_source_uri", input_type=String(optional=True), prefix="--sourceuri", doc=InputDocumentation(doc="analysis sourceuri")), ToolInput(tag="in_description", input_type=String(optional=True), prefix="--description", doc=InputDocumentation(doc="analysis description")), ToolInput(tag="in_date_executed", input_type=String(optional=True), prefix="--date_executed", doc=InputDocumentation(doc="analysis date_executed (yyyy-mm-dd)")), ToolInput(tag="in_name", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_program", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_program_version", input_type=String(), position=2, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tripaille_Analysis_Load_Blast_V0_1_0().translate("wdl", allow_empty_container=True)

