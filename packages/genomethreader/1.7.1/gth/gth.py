from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File

Gth_V0_1_0 = CommandToolBuilder(tool="gth", base_command=["gth"], inputs=[ToolInput(tag="in_genomic", input_type=Boolean(optional=True), prefix="-genomic", doc=InputDocumentation(doc="specify input files containing genomic sequences\nmandatory option")), ToolInput(tag="in_cdna", input_type=Boolean(optional=True), prefix="-cdna", doc=InputDocumentation(doc="specify input files containing cDNA/EST sequences")), ToolInput(tag="in_protein", input_type=Boolean(optional=True), prefix="-protein", doc=InputDocumentation(doc="specify input files containing protein sequences")), ToolInput(tag="in_species", input_type=Boolean(optional=True), prefix="-species", doc=InputDocumentation(doc="specify species to select splice site model which is most\nappropriate; possible species:\n'human'\n'mouse'\n'rat'\n'chicken'\n'drosophila'\n'nematode'\n'fission_yeast'\n'aspergillus'\n'arabidopsis'\n'maize'\n'rice'\n'medicago'\ndefault: undefined")), ToolInput(tag="in_b_ssm", input_type=Boolean(optional=True), prefix="-bssm", doc=InputDocumentation(doc="read bssm parameter from file in the path given by the\nenvironment variable BSSMDIR\ndefault: undefined")), ToolInput(tag="in_score_matrix", input_type=Boolean(optional=True), prefix="-scorematrix", doc=InputDocumentation(doc="read amino acid substitution scoring matrix from file in the\npath given by the environment variable GTHDATADIR\ndefault: BLOSUM62")), ToolInput(tag="in_translation_table", input_type=Int(optional=True), prefix="-translationtable", doc=InputDocumentation(doc="the codon translation table used for codon translation in\nmatching, DP, and output\ndefault: 1")), ToolInput(tag="in_analyze_only_forward", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="analyze only forward strand of genomic sequences\ndefault: no")), ToolInput(tag="in_analyze_reverse_strand", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="analyze only reverse strand of genomic sequences\ndefault: no")), ToolInput(tag="in_cdna_forward", input_type=Boolean(optional=True), prefix="-cdnaforward", doc=InputDocumentation(doc="align only forward strand of cDNAs\ndefault: no")), ToolInput(tag="in_from_pos", input_type=Boolean(optional=True), prefix="-frompos", doc=InputDocumentation(doc="analyze genomic sequence from this position\nrequires -topos or -width; counting from 1 on\ndefault: 0")), ToolInput(tag="in_topos", input_type=Boolean(optional=True), prefix="-topos", doc=InputDocumentation(doc="analyze genomic sequence to this position\nrequires -frompos; counting from 1 on\ndefault: 0")), ToolInput(tag="in_width", input_type=Boolean(optional=True), prefix="-width", doc=InputDocumentation(doc="analyze only this width of genomic sequence\nrequires -frompos\ndefault: 0")), ToolInput(tag="in_be_verbosedefault_no", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="be verbose\ndefault: no")), ToolInput(tag="in_xml_out", input_type=Boolean(optional=True), prefix="-xmlout", doc=InputDocumentation(doc="show output in XML format\ndefault: no")), ToolInput(tag="in_gff_three_out", input_type=Boolean(optional=True), prefix="-gff3out", doc=InputDocumentation(doc="show output in GFF3 format\ndefault: no")), ToolInput(tag="in_md_five_ids", input_type=Boolean(optional=True), prefix="-md5ids", doc=InputDocumentation(doc="show MD5 fingerprints as sequence IDs\ndefault: no")), ToolInput(tag="in_redirect_output_specified", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="redirect output to specified file\ndefault: undefined")), ToolInput(tag="in_gzip", input_type=File(optional=True), prefix="-gzip", doc=InputDocumentation(doc="write gzip compressed output file\ndefault: no")), ToolInput(tag="in_bzip_two", input_type=File(optional=True), prefix="-bzip2", doc=InputDocumentation(doc="write bzip2 compressed output file\ndefault: no")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="-force", doc=InputDocumentation(doc="force writing to output file\ndefault: no")), ToolInput(tag="in_gs_two_out", input_type=Boolean(optional=True), prefix="-gs2out", doc=InputDocumentation(doc="output in old GeneSeqer2 format\ndefault: no")), ToolInput(tag="in_min_match_len", input_type=Boolean(optional=True), prefix="-minmatchlen", doc=InputDocumentation(doc="specify minimum match length (cDNA matching)\ndefault: 20")), ToolInput(tag="in_seed_length", input_type=Boolean(optional=True), prefix="-seedlength", doc=InputDocumentation(doc="specify the seed length (cDNA matching)\ndefault: 18")), ToolInput(tag="in_ex_drop", input_type=Boolean(optional=True), prefix="-exdrop", doc=InputDocumentation(doc="specify the Xdrop value for edit distance extension (cDNA\nmatching)\ndefault: 2")), ToolInput(tag="in_prm_in_match_len", input_type=Boolean(optional=True), prefix="-prminmatchlen", doc=InputDocumentation(doc="specify minimum match length (protein matches)\ndefault: 24")), ToolInput(tag="in_pr_seed_length", input_type=Boolean(optional=True), prefix="-prseedlength", doc=InputDocumentation(doc="specify seed length (protein matching)\ndefault: 10")), ToolInput(tag="in_prh_dist", input_type=Boolean(optional=True), prefix="-prhdist", doc=InputDocumentation(doc="specify Hamming distance (protein matching)\ndefault: 4")), ToolInput(tag="in_gc_max_gap_width", input_type=Boolean(optional=True), prefix="-gcmaxgapwidth", doc=InputDocumentation(doc="set the maximum gap width for global chains\ndefines approximately the maximum intron length\nset to 0 to allow for unlimited length\nin order to avoid false-positive exons (lonely exons) at the\nsequence ends, it is very important to set this parameter\nappropriately!\ndefault: 1000000")), ToolInput(tag="in_gcm_in_coverage", input_type=Boolean(optional=True), prefix="-gcmincoverage", doc=InputDocumentation(doc="set the minimum coverage of global chains regarding to the\nreference sequence\ndefault: 50")), ToolInput(tag="in_paralogs", input_type=Boolean(optional=True), prefix="-paralogs", doc=InputDocumentation(doc="compute paralogous genes (different chaining procedure)\ndefault: no")), ToolInput(tag="in_intron_cut_out", input_type=Boolean(optional=True), prefix="-introncutout", doc=InputDocumentation(doc="enable the intron cutout technique\ndefault: no")), ToolInput(tag="in_fast_dp", input_type=Boolean(optional=True), prefix="-fastdp", doc=InputDocumentation(doc="use jump table to increase speed of DP calculation\ndefault: no")), ToolInput(tag="in_auto_intron_cut_out", input_type=Int(optional=True), prefix="-autointroncutout", doc=InputDocumentation(doc="the automatic intron cutout matrix size in megabytes and\nenable the automatic intron cutout technique\ndefault: 0")), ToolInput(tag="in_intermediate", input_type=Boolean(optional=True), prefix="-intermediate", doc=InputDocumentation(doc="stop after calculation of spliced alignments and output\nresults in reusable XML format. Do not process this output\nyourself, use the ``normal'' XML output instead!\ndefault: no")), ToolInput(tag="in_first", input_type=Boolean(optional=True), prefix="-first", doc=InputDocumentation(doc="set the maximum number of spliced alignments per genomic DNA\ninput. Set to 0 for unlimited number.\ndefault: 0")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="display version information and exit"))], outputs=[ToolOutput(tag="out_redirect_output_specified", output_type=File(optional=True), selector=InputSelector(input_to_select="in_redirect_output_specified", type_hint=File()), doc=OutputDocumentation(doc="redirect output to specified file\ndefault: undefined")), ToolOutput(tag="out_gzip", output_type=File(optional=True), selector=InputSelector(input_to_select="in_gzip", type_hint=File()), doc=OutputDocumentation(doc="write gzip compressed output file\ndefault: no")), ToolOutput(tag="out_bzip_two", output_type=File(optional=True), selector=InputSelector(input_to_select="in_bzip_two", type_hint=File()), doc=OutputDocumentation(doc="write bzip2 compressed output file\ndefault: no")), ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="force writing to output file\ndefault: no"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gth_V0_1_0().translate("wdl", allow_empty_container=True)

