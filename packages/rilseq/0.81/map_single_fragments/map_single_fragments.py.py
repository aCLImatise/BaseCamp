from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, Int, Boolean, File, Directory, String

Map_Single_Fragments_Py_V0_1_0 = CommandToolBuilder(tool="map_single_fragments.py", base_command=["map_single_fragments.py"], inputs=[ToolInput(tag="in_fast_q_one", input_type=Array(t=Int(), optional=True), prefix="--fastq_1", doc=InputDocumentation(doc="A list of the first read of the sequencing. (default:\nNone)")), ToolInput(tag="in_list_second_optionaldefault", input_type=Boolean(optional=True), prefix="-2", doc=InputDocumentation(doc="[FASTQ_2 [FASTQ_2 ...]], --fastq_2 [FASTQ_2 [FASTQ_2 ...]]\nA list of the second read of the sequencing. The order\nof these files should be as same as -1. Optional.\n(default: None)")), ToolInput(tag="in_genes_gff", input_type=File(optional=True), prefix="--genes_gff", doc=InputDocumentation(doc="Name of gff file to count the reads per gene. If not\ngiven or not readable, skip this stage. (default:\nNone)")), ToolInput(tag="in_reverse_complement", input_type=Boolean(optional=True), prefix="--reverse_complement", doc=InputDocumentation(doc="Treat the reads as reverse complement only when\ncounting number of reads per gene and generating wig\nfile. The resulting BAM files will be the original\nones. Use this when treating libraries built using\nLivny's protocol. (default: False)")), ToolInput(tag="in_feature", input_type=File(optional=True), prefix="--feature", doc=InputDocumentation(doc="Name of features to count on the GTF file (column 2).\n(default: exon)")), ToolInput(tag="in_identifier", input_type=File(optional=True), prefix="--identifier", doc=InputDocumentation(doc="Name of identifier to print (in column 8 of the GTF\nfile). (default: gene_id)")), ToolInput(tag="in_overlap", input_type=Int(optional=True), prefix="--overlap", doc=InputDocumentation(doc="Minimal required overlap between the fragment and the\nfeature. (default: 5)")), ToolInput(tag="in_allowed_mismatches", input_type=Int(optional=True), prefix="--allowed_mismatches", doc=InputDocumentation(doc="Allowed mismatches for BWA mapping. (default: 2)")), ToolInput(tag="in_out_head", input_type=File(optional=True), prefix="--outhead", doc=InputDocumentation(doc="Output file names of counts table (suffixed\n_counts.txt) and wiggle file (suffixed _coverage.wig)\n(default: bwa_mapped_single_reads)")), ToolInput(tag="in_dir_out", input_type=Directory(optional=True), prefix="--dirout", doc=InputDocumentation(doc="Output directory, default is this directory. (default:\n.)")), ToolInput(tag="in_bwa_exec", input_type=String(optional=True), prefix="--bwa_exec", doc=InputDocumentation(doc="bwa command (default: bwa)")), ToolInput(tag="in_sam_tools_cmd", input_type=String(optional=True), prefix="--samtools_cmd", doc=InputDocumentation(doc="Samtools executable. (default: samtools)")), ToolInput(tag="in_params_aln", input_type=Int(optional=True), prefix="--params_aln", doc=InputDocumentation(doc="Additional parameters for aln function of bwa.\n(default: -t 8 -R 200)")), ToolInput(tag="in_sampe_params", input_type=Int(optional=True), prefix="--sampe_params", doc=InputDocumentation(doc="Additional parameters for sampe function of bwa.\n(default: -a 1500 -P)")), ToolInput(tag="in_sam_se_params", input_type=String(optional=True), prefix="--samse_params", doc=InputDocumentation(doc="Additional parameters for samse function of bwa.\n(default: )")), ToolInput(tag="in_create_wig", input_type=Boolean(optional=True), prefix="--create_wig", doc=InputDocumentation(doc="Create a coverage wiggle file. (default: False)"))], outputs=[ToolOutput(tag="out_out_head", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_head", type_hint=File()), doc=OutputDocumentation(doc="Output file names of counts table (suffixed\n_counts.txt) and wiggle file (suffixed _coverage.wig)\n(default: bwa_mapped_single_reads)")), ToolOutput(tag="out_dir_out", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_dir_out", type_hint=File()), doc=OutputDocumentation(doc="Output directory, default is this directory. (default:\n.)"))], container="quay.io/biocontainers/rilseq:0.81--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Map_Single_Fragments_Py_V0_1_0().translate("wdl")

