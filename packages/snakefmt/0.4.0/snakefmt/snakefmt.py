from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Snakefmt_V0_1_0 = CommandToolBuilder(tool="snakefmt", base_command=["snakefmt"], inputs=[ToolInput(tag="in_line_length", input_type=Int(optional=True), prefix="--line-length", doc=InputDocumentation(doc="Lines longer than INT will be wrapped. [default: 88]")), ToolInput(tag="in_check", input_type=Boolean(optional=True), prefix="--check", doc=InputDocumentation(doc="Don't write the files back, just return the status.\nReturn code 0 means nothing would change. Return code\n1 means some files would be reformatted. Return code\n123 means there was an error.")), ToolInput(tag="in_diff", input_type=File(optional=True), prefix="--diff", doc=InputDocumentation(doc="Don't write the files back, just output a diff for\neach file to stdout.")), ToolInput(tag="in_compact_diff", input_type=Boolean(optional=True), prefix="--compact-diff", doc=InputDocumentation(doc="Same as --diff but only shows lines that would change\nplus a few lines of context.")), ToolInput(tag="in_include", input_type=String(optional=True), prefix="--include", doc=InputDocumentation(doc="A regular expression that matches files and\ndirectories that should be included on recursive\nsearches.  An empty value means all files are\nincluded regardless of the name.  Use forward slashes\nfor directories on all platforms (Windows, too).\nExclusions are calculated first, inclusions later.\n[default: (\.smk$|^Snakefile)]")), ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="A regular expression that matches files and\ndirectories that should be excluded on recursive\nsearches.  An empty value means no paths are\nexcluded. Use forward slashes for directories on all\nplatforms (Windows, too). Exclusions are calculated\nfirst, inclusions later.  [default: (\.snakemake|\.eg\ngs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|\.svn|_\nbuild|buck-out|build|dist)]")), ToolInput(tag="in_config", input_type=File(optional=True), prefix="--config", doc=InputDocumentation(doc="Read configuration from PATH. By default, will try to\nread from `./pyproject.toml`")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Turns on debug-level logger.")), ToolInput(tag="in_provided_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Files are modified in-place by default; use diff, check, or  `snakefmt - <"))], outputs=[ToolOutput(tag="out_diff", output_type=File(optional=True), selector=InputSelector(input_to_select="in_diff", type_hint=File()), doc=OutputDocumentation(doc="Don't write the files back, just output a diff for\neach file to stdout."))], container="quay.io/biocontainers/snakefmt:0.4.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Snakefmt_V0_1_0().translate("wdl")

