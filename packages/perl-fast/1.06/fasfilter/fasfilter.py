from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Fasfilter_V0_1_0 = CommandToolBuilder(tool="fasfilter", base_command=["fasfilter"], inputs=[ToolInput(tag="in_description", input_type=Boolean(optional=True), prefix="--description", doc=InputDocumentation(doc="Filter sequence records by their descriptions. If used in\ncombination with the -x, --regex option, filters records by\nvalues of a regex capture applied to their descriptions.")), ToolInput(tag="in_filter_sequece_records", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[int], --field=[int]\nFilter sequece records by a specific field in their\ndescriptions. With this option, the description is split into\nfields using strings of white space as field delimiters (the\ndefault Perl behavior for splitting lines of data into fields).\nThis option takes a mandatory integer option argument giving the\nindex for which field to filter on. One-based indexing is used,\nso the first field after the identifier has index 1. As standard\nin Perl, negative indices count backwards from the last field in\nthe description; field '-1' is the last field, '-2' is the\nsecond-to-last etc.\nIn fasta files, the identifier occurs between the record\nseparator ('>') and the first whitespace on the identifier line,\nand the description is everything after the first string of\nwhite space on the identifier line. Therefore the identifier is\ncounted as the 0th field, which is what fasfilter tests by\ndefault.")), ToolInput(tag="in_use_regex_regex", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="[regex], --split-on-regex=[regex]\nUse regex <regex> to split the description for the -f option\ninstead of the perl default (which splits on one or more\nwhitespace characters). Special characters must be quoted to\nprotect them from the shell. The regex is often helpfully\nenclosed by single-quote (') or double-quote (') brackets but\nnever by forward slashes (/).")), ToolInput(tag="in_filter_sequence_named", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[string], --tag=[string]\nFilter sequence records by values of a named tag in the\ndescription. Name-value pairs in the description are expected to\nhave the format 'name:value' as generated by FAST tools (such as\nfaslen) or 'name=value' as common in General Feature Format. The\n'name' must contain only characters from the set [a-zA-Z0-9_-].\nThe 'value' is any string of non-whitespace characters. Sequence\nrecords for which the specified tag does not exist will not be\nwritten to output. Currently only the first (left-most)\nocccurence of a tag is compared.")), ToolInput(tag="in_filter_sequence_regex", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="[regex], --regex=[regex]\nFilter sequence records by values of a regex capture applied to\nidentifers (by default) or descriptions (in combination with the\n-d option). The format of the regex is a perl regular expression\nthat must contain exactly one 'capture buffer' specified by a\npair or parentheses. The value captured in this buffer is\ntested. Sequence records that do not match the regex will will\nnot be written to output. Currently only the first (left-most)\nmatch is tested. Special characters must be quoted to protect\nthem from the shell. The regex is often helpfully enclosed by\nsingle-quote (') or double-quote (') brackets but never by\nforward slashes (/).")), ToolInput(tag="in_negate", input_type=Boolean(optional=True), prefix="--negate", doc=InputDocumentation(doc="Output sequences that do not meet the specified numerical\ncriteria.")), ToolInput(tag="in_man", input_type=Boolean(optional=True), prefix="--man", doc=InputDocumentation(doc="Print the manual page and exit.")), ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="--log", doc=InputDocumentation(doc="Creates, or appends to, a generic FAST logfile in the current\nworking directory. The logfile records date/time of execution,\nfull command with options and arguments, and an optional\ncomment.")), ToolInput(tag="in_use_name_default", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="[string], --logname=[string]\nUse [string] as the name of the logfile. Default is\n'FAST.log.txt'.")), ToolInput(tag="in_include_comment_logfile", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="[string], --comment=[string]\nInclude comment [string] in logfile. No comment is saved by\ndefault.")), ToolInput(tag="in_format", input_type=Boolean(optional=True), prefix="--format", doc=InputDocumentation(doc="=[format]\nUse alternative format for input. See man page for 'fasconvert'\nfor allowed formats. This is for convenience; the FAST tools are\ndesigned to exchange data in Fasta format, and 'fasta' is the\ndefault format for this tool.")), ToolInput(tag="in_specify_type_sequence", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[dna|rna|protein], --moltype=[dna|rna|protein]\nSpecify the type of sequence on input (should not be needed in\nmost cases, but sometimes Bioperl cannot guess and complains\nwhen processing data).")), ToolInput(tag="in_fast_q", input_type=String(optional=True), prefix="--fastq", doc=InputDocumentation(doc="fastq format as input and output."))], outputs=[], container="quay.io/biocontainers/perl-fast:1.06--pl526_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fasfilter_V0_1_0().translate("wdl")

