from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String

Reseq_Illuminape_V0_1_0 = CommandToolBuilder(tool="reseq_illuminaPE", base_command=["reseq", "illuminaPE"], inputs=[ToolInput(tag="in_arg_number_used", input_type=Boolean(optional=True), prefix="-j", doc=InputDocumentation(doc="[ --threads ] arg (=0)             Number of threads used (0=auto)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="(=4)                  Sets the level of verbosity\n(4=everything, 0=nothing)")), ToolInput(tag="in_adapter_file", input_type=File(optional=True), prefix="--adapterFile", doc=InputDocumentation(doc="Fasta file with adapter sequences\n[(AutoDetect)]")), ToolInput(tag="in_adapter_matrix", input_type=Int(optional=True), prefix="--adapterMatrix", doc=InputDocumentation(doc="0/1 matrix with valid adapter pairing\n(first read in rows, second read in\ncolumns) [(AutoDetect)]")), ToolInput(tag="in_arg_position_sorted", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --bamIn ] arg                    Position sorted bam/sam file with reads\nmapped to refIn")), ToolInput(tag="in_binsize_bias_fit", input_type=Int(optional=True), prefix="--binSizeBiasFit", doc=InputDocumentation(doc="(=100000000)     Reference sequences large then this are\nsplit for bias fitting to limit memory\nconsumption")), ToolInput(tag="in_max_fra_glen", input_type=Int(optional=True), prefix="--maxFragLen", doc=InputDocumentation(doc="(=2000)              Maximum fragment length to include\npairs into statistics")), ToolInput(tag="in_min_mapq", input_type=Int(optional=True), prefix="--minMapQ", doc=InputDocumentation(doc="(=2)                    Minimum mapping quality to include\npairs into statistics")), ToolInput(tag="in_no_bias", input_type=Boolean(optional=True), prefix="--noBias", doc=InputDocumentation(doc="Do not perform bias fit. Results in\nuniform coverage if simulated from")), ToolInput(tag="in_no_tiles", input_type=Boolean(optional=True), prefix="--noTiles", doc=InputDocumentation(doc="Ignore tiles for the statistics\n[default]")), ToolInput(tag="in_arg_reference_sequences_bz", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --refIn ] arg                    Reference sequences in fasta format (gz\nand bz2 supported)")), ToolInput(tag="in_stats_only", input_type=Boolean(optional=True), prefix="--statsOnly", doc=InputDocumentation(doc="Only generate the statistics")), ToolInput(tag="in_arg_skips_statistics", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --statsIn ] arg                  Skips statistics generation and reads\ndirectly from stats file")), ToolInput(tag="in_arg_stores_real", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="[ --statsOut ] arg                 Stores the real data statistics for\nreuse in given file [<bamIn>.reseq]")), ToolInput(tag="in_tiles", input_type=Boolean(optional=True), prefix="--tiles", doc=InputDocumentation(doc="Use tiles for the statistics")), ToolInput(tag="in_arg_ignore_positions", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --vcfIn ] arg                    Ignore all positions with a listed\nvariant for stats generation")), ToolInput(tag="in_ipf_iterations", input_type=Int(optional=True), prefix="--ipfIterations", doc=InputDocumentation(doc="(=200)            Maximum number of iterations for\niterative proportional fitting")), ToolInput(tag="in_ipf_precision", input_type=Int(optional=True), prefix="--ipfPrecision", doc=InputDocumentation(doc="(=5)               Iterative proportional fitting\nprocedure stops after reaching this\nprecision (%)")), ToolInput(tag="in_arg_loads_last", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --probabilitiesIn ] arg          Loads last estimated probabilities and\ncontinues from there if precision is\nnot met [<statsIn>.ipf]")), ToolInput(tag="in_arg_stores_probabilities", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc="[ --probabilitiesOut ] arg         Stores the probabilities estimated by\niterative proportional fitting\n[<probabilitiesIn>]")), ToolInput(tag="in_stop_after_estimation", input_type=Boolean(optional=True), prefix="--stopAfterEstimation", doc=InputDocumentation(doc="Stop after estimating the probabilities")), ToolInput(tag="in_arg_writes_simulated_first_reads", input_type=Boolean(optional=True), prefix="-1", doc=InputDocumentation(doc="[ --firstReadsOut ] arg            Writes the simulated first reads into\nthis file [reseq-R1.fq]")), ToolInput(tag="in_arg_writes_simulated_second_reads", input_type=Boolean(optional=True), prefix="-2", doc=InputDocumentation(doc="[ --secondReadsOut ] arg           Writes the simulated second reads into\nthis file [reseq-R2.fq]")), ToolInput(tag="in_arg_approximate_average", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --coverage ] arg (=0)            Approximate average read depth\nsimulated (0 = Corrected original\ncoverage)")), ToolInput(tag="in_error_mutli_plier", input_type=Int(optional=True), prefix="--errorMutliplier", doc=InputDocumentation(doc="(=1)            Divides the original probability of\ncorrect base calls(no substitution\nerror) by this value and renormalizes")), ToolInput(tag="in_methylation", input_type=File(optional=True), prefix="--methylation", doc=InputDocumentation(doc="Extended bed graph file specifying\nmethylation for regions. Multiple score\ncolumns for individual alleles are\npossible, but must match with vcfSim.\nC->T conversions for 1-specified value\nin region.")), ToolInput(tag="in_no_indel_errors", input_type=Boolean(optional=True), prefix="--noInDelErrors", doc=InputDocumentation(doc="Simulate reads without InDel errors")), ToolInput(tag="in_no_substitution_errors", input_type=Boolean(optional=True), prefix="--noSubstitutionErrors", doc=InputDocumentation(doc="Simulate reads without substitution")), ToolInput(tag="in_read_sys_error", input_type=File(optional=True), prefix="--readSysError", doc=InputDocumentation(doc="Read systematic errors from file in\nfastq format (seq=dominant error,\nqual=error percentage)")), ToolInput(tag="in_record_base_identifier", input_type=String(optional=True), prefix="--recordBaseIdentifier", doc=InputDocumentation(doc="(=ReseqRead)\nBase Identifier for the simulated fastq\nrecords, followed by a count and other\ninformation about the read")), ToolInput(tag="in_ref_bias", input_type=File(optional=True), prefix="--refBias", doc=InputDocumentation(doc="Way to select the reference biases for\nsimulation (keep [from refIn]/no\n[biases]/draw [with replacement from\noriginal biases]/file) [keep/no]")), ToolInput(tag="in_ref_bias_file", input_type=File(optional=True), prefix="--refBiasFile", doc=InputDocumentation(doc="File to read reference biases from: One\nsequence per file (identifier bias)")), ToolInput(tag="in_arg_reference_sequences_fasta", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --refSim ] arg                   Reference sequences in fasta format to\nsimulate from [<refIn>]")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="Seed used for simulation, if none is\ngiven random seed will be used")), ToolInput(tag="in_arg_defines_genotypes", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="[ --vcfSim ] arg                   Defines genotypes to simulate alleles\nor populations")), ToolInput(tag="in_write_sys_error", input_type=File(optional=True), prefix="--writeSysError", doc=InputDocumentation(doc="Write the randomly drawn systematic\nerrors to file in fastq format\n(seq=dominant error, qual=error\npercentage)\n")), ToolInput(tag="in_errors", input_type=String(), position=0, doc=InputDocumentation(doc="--numReads arg (=0)                   Approximate number of read pairs "))], outputs=[], container="quay.io/biocontainers/reseq:1.1--py38h56fca86_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Reseq_Illuminape_V0_1_0().translate("wdl")

