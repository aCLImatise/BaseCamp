from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Peptideindexer_V0_1_0 = CommandToolBuilder(tool="PeptideIndexer", base_command=["PeptideIndexer"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*                      Input idXML file containing the identifications. (valid formats: 'idXML')")), ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="-fasta", doc=InputDocumentation(doc="Input sequence database in FASTA format. Leave empty for using the same DB as used for the input idXML (this might fail). Non-existing relative filenames are looked up via 'OpenMS.ini:id_db_dir' (valid formats: 'fasta')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*                     Output idXML file. (valid formats: 'idXML')")), ToolInput(tag="in_decoy_string", input_type=String(optional=True), prefix="-decoy_string", doc=InputDocumentation(doc="String that was appended (or prefixed - see 'decoy_string_position' flag below) to the accessions in the protein database to indicate decoy proteins. If empty (default), it's determined automatically (checking for common terms, both as prefix and suffix).")), ToolInput(tag="in_decoy_string_position", input_type=String(optional=True), prefix="-decoy_string_position", doc=InputDocumentation(doc="Is the 'decoy_string' prepended (prefix) or appended (suffix) to the protein accession? (ignored if decoy_string is empty) (default: 'prefix' valid: 'prefix', 'suffix')")), ToolInput(tag="in_missing_decoy_action", input_type=String(optional=True), prefix="-missing_decoy_action", doc=InputDocumentation(doc="Action to take if NO peptide was assigned to a decoy protein (which indicates wrong database or decoy string): 'error' (exit with error, no output), 'warn' (exit with success, warning message), 'silent' (no action is taken, not even a warning) (default: 'error' valid: 'error', 'warn', 'silent')")), ToolInput(tag="in_write_protein_sequence", input_type=Boolean(optional=True), prefix="-write_protein_sequence", doc=InputDocumentation(doc="If set, the protein sequences are stored as well.")), ToolInput(tag="in_write_protein_description", input_type=Boolean(optional=True), prefix="-write_protein_description", doc=InputDocumentation(doc="If set, the protein description is stored as well.")), ToolInput(tag="in_keep_unreferenced_proteins", input_type=Boolean(optional=True), prefix="-keep_unreferenced_proteins", doc=InputDocumentation(doc="If set, protein hits which are not referenced by any peptide are kept.")), ToolInput(tag="in_unmatched_action", input_type=Int(optional=True), prefix="-unmatched_action", doc=InputDocumentation(doc="If peptide sequences cannot be matched to any protein: 1) raise an error; 2) warn (unmatched PepHits will miss target/decoy annotation with downstream problems); 3) remove the hit. (default: 'error' valid: 'error', 'warn', 'remove')")), ToolInput(tag="in_aaa_max", input_type=Int(optional=True), prefix="-aaa_max", doc=InputDocumentation(doc="Maximal number of ambiguous amino acids (AAAs) allowed when matching to a protein database with AAAs. AAAs are B, J, Z and X! (default: '3' min: '0' max: '10')")), ToolInput(tag="in_mismatches_max", input_type=Int(optional=True), prefix="-mismatches_max", doc=InputDocumentation(doc="Maximal number of mismatched (mm) amino acids allowed when matching to a protein database. The required runtime is exponential in the number of mm's; apply with care. MM's are allowed in addition to AAA's. (default: '0' min: '0' max: '10')")), ToolInput(tag="in_il_equivalent", input_type=Boolean(optional=True), prefix="-IL_equivalent", doc=InputDocumentation(doc="Treat the isobaric amino acids isoleucine ('I') and leucine ('L') as equivalent (indistinguishable). Also occurences of 'J' will be treated as 'I' thus avoiding ambiguous matching.")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*                     Output idXML file. (valid formats: 'idXML')"))], container="quay.io/biocontainers/openms:2.6.0--h4afb90d_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Peptideindexer_V0_1_0().translate("wdl")

