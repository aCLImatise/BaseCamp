from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Spectrastsearchadapter_V0_1_0 = CommandToolBuilder(tool="SpectraSTSearchAdapter", base_command=["SpectraSTSearchAdapter"], inputs=[ToolInput(tag="in_executable", input_type=File(optional=True), prefix="-executable", doc=InputDocumentation(doc="*                                                            Path to the SpectraST executable to use; may be empty if the executable is globally available.")), ToolInput(tag="in_spectra_files", input_type=File(optional=True), prefix="-spectra_files", doc=InputDocumentation(doc="[ <SearchFileName2> ... <SearchFileNameN> ]*  File names(s) of spectra to be searched. (valid formats: 'mzML', 'mzXML', 'mzData', 'mgf', 'dta', 'msp')")), ToolInput(tag="in_output_files", input_type=File(optional=True), prefix="-output_files", doc=InputDocumentation(doc="[ <OutputFileName2> ... <OutputFileNameN> ]*       Output files. Make sure to specify one output file for each input file (valid formats: 'txt', 'tsv', 'xml', 'pepXML', 'html')")), ToolInput(tag="in_library_file", input_type=File(optional=True), prefix="-library_file", doc=InputDocumentation(doc=".splib*                                                Specify library file. (valid formats: 'splib')")), ToolInput(tag="in_sequence_database_file", input_type=String(optional=True), prefix="-sequence_database_file", doc=InputDocumentation(doc=".fasta                                The sequence database. (valid formats: 'fasta')")), ToolInput(tag="in_sequence_database_type", input_type=String(optional=True), prefix="-sequence_database_type", doc=InputDocumentation(doc="Specify type of sequence database (default: 'AA' valid: 'DNA', 'AA')")), ToolInput(tag="in_search_file", input_type=File(optional=True), prefix="-search_file", doc=InputDocumentation(doc="Only search a subset of the query spectra in the search file (valid formats: 'txt', ' dat')")), ToolInput(tag="in_params_file", input_type=File(optional=True), prefix="-params_file", doc=InputDocumentation(doc="Read search options from file. All options set in the file will be overridden by command-line options, if specified. (valid formats: 'params')")), ToolInput(tag="in_precursor_mz_tolerance", input_type=Int(optional=True), prefix="-precursor_mz_tolerance", doc=InputDocumentation(doc="M/z (in Th) tolerance within which candidate entries are compared to the query. Monoisotopic mass is assumed. (default: '3.0' min: '0.0')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_output_files", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_files", type_hint=File()), doc=OutputDocumentation(doc="[ <OutputFileName2> ... <OutputFileNameN> ]*       Output files. Make sure to specify one output file for each input file (valid formats: 'txt', 'tsv', 'xml', 'pepXML', 'html')"))], container="quay.io/biocontainers/openms:2.6.0--h4afb90d_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Spectrastsearchadapter_V0_1_0().translate("wdl")

