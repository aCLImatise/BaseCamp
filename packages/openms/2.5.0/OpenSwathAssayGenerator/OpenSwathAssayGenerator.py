from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean, Float

Openswathassaygenerator_V0_1_0 = CommandToolBuilder(tool="OpenSwathAssayGenerator", base_command=["OpenSwathAssayGenerator"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*                           Input file (valid formats: 'tsv', 'mrm', 'pqp', 'TraML')")), ToolInput(tag="in_in_type", input_type=File(optional=True), prefix="-in_type", doc=InputDocumentation(doc="Input file type -- default: determined from file extension or content\n(valid: 'tsv', 'mrm', 'pqp', 'TraML')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*                          Output file (valid formats: 'tsv', 'pqp', 'TraML')")), ToolInput(tag="in_out_type", input_type=File(optional=True), prefix="-out_type", doc=InputDocumentation(doc="Output file type -- default: determined from file extension or content\n(valid: 'tsv', 'pqp', 'TraML')")), ToolInput(tag="in_min_transitions", input_type=Int(optional=True), prefix="-min_transitions", doc=InputDocumentation(doc="Minimal number of transitions (default: '6')")), ToolInput(tag="in_max_transitions", input_type=Int(optional=True), prefix="-max_transitions", doc=InputDocumentation(doc="Maximal number of transitions (default: '6')")), ToolInput(tag="in_allowed_fragment_types", input_type=String(optional=True), prefix="-allowed_fragment_types", doc=InputDocumentation(doc="Allowed fragment types (default: 'b,y')")), ToolInput(tag="in_allowed_fragment_charges", input_type=Int(optional=True), prefix="-allowed_fragment_charges", doc=InputDocumentation(doc="Allowed fragment charge states (default: '1,2,3,4')")), ToolInput(tag="in_enable_detection_specific_losses", input_type=Boolean(optional=True), prefix="-enable_detection_specific_losses", doc=InputDocumentation(doc="Set this flag if specific neutral losses for detection fragment ions should be allowed")), ToolInput(tag="in_enable_detection_unspecific_losses", input_type=Boolean(optional=True), prefix="-enable_detection_unspecific_losses", doc=InputDocumentation(doc="Set this flag if unspecific neutral losses (H2O1, H3N1, C1H2N2, C1H2N1O1) for detection fragment ions should be allowed")), ToolInput(tag="in_precursor_mz_threshold", input_type=Float(optional=True), prefix="-precursor_mz_threshold", doc=InputDocumentation(doc="MZ threshold in Thomson for precursor ion selection (default: '0.025')")), ToolInput(tag="in_precursor_lower_mz_limit", input_type=Float(optional=True), prefix="-precursor_lower_mz_limit", doc=InputDocumentation(doc="Lower MZ limit for precursor ions (default: '400.0')")), ToolInput(tag="in_precursor_upper_mz_limit", input_type=Float(optional=True), prefix="-precursor_upper_mz_limit", doc=InputDocumentation(doc="Upper MZ limit for precursor ions (default: '1200.0')")), ToolInput(tag="in_product_mz_threshold", input_type=Float(optional=True), prefix="-product_mz_threshold", doc=InputDocumentation(doc="MZ threshold in Thomson for fragment ion annotation (default: '0.025')")), ToolInput(tag="in_product_lower_mz_limit", input_type=Float(optional=True), prefix="-product_lower_mz_limit", doc=InputDocumentation(doc="Lower MZ limit for fragment ions (default: '350.0')")), ToolInput(tag="in_product_upper_mz_limit", input_type=Float(optional=True), prefix="-product_upper_mz_limit", doc=InputDocumentation(doc="Upper MZ limit for fragment ions (default: '2000.0')")), ToolInput(tag="in_swath_windows_file", input_type=File(optional=True), prefix="-swath_windows_file", doc=InputDocumentation(doc="Tab separated file containing the SWATH windows for exclusion of fragment ions falling into the precursor isolation window: lower_offset upper_offset \newline 400 425 \newline ... Note that the first line is a header and will be skipped. (valid formats: 'txt')")), ToolInput(tag="in_uni_mod_file", input_type=File(optional=True), prefix="-unimod_file", doc=InputDocumentation(doc="(Modified) Unimod XML file (http://www.unimod.org/xml/unimod.xml) describing residue modifiability (valid formats: 'xml')")), ToolInput(tag="in_enable_ipf", input_type=Boolean(optional=True), prefix="-enable_ipf", doc=InputDocumentation(doc="IPF: set this flag if identification transitions should be generated for IPF. Note: Requires setting 'unimod_file'.")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*                          Output file (valid formats: 'tsv', 'pqp', 'TraML')")), ToolOutput(tag="out_out_type", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_type", type_hint=File()), doc=OutputDocumentation(doc="Output file type -- default: determined from file extension or content\n(valid: 'tsv', 'pqp', 'TraML')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Openswathassaygenerator_V0_1_0().translate("wdl", allow_empty_container=True)

