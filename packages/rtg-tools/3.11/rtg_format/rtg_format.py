from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Float, Int

Rtg_Format_V0_1_0 = CommandToolBuilder(tool="rtg_format", base_command=["rtg", "format"], inputs=[ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="format of input. Allowed values are [fasta,\nfastq, fastq-interleaved, sam-se, sam-pe]\n(Default is fasta)")), ToolInput(tag="in_input_list_file", input_type=File(optional=True), prefix="--input-list-file", doc=InputDocumentation(doc="file containing a list of input read files (1\nper line)")), ToolInput(tag="in_left", input_type=File(optional=True), prefix="--left", doc=InputDocumentation(doc="left input file for FASTA/FASTQ paired end")), ToolInput(tag="in_protein", input_type=Boolean(optional=True), prefix="--protein", doc=InputDocumentation(doc="input is protein. If this option is not\nspecified, then the input is assumed to\nconsist of nucleotides")), ToolInput(tag="in_quality_format", input_type=Float(optional=True), prefix="--quality-format", doc=InputDocumentation(doc="quality data encoding method used in FASTQ\ninput files (Illumina 1.8+ uses sanger).\nAllowed values are [sanger, solexa, illumina]\n(Default is sanger)")), ToolInput(tag="in_right", input_type=File(optional=True), prefix="--right", doc=InputDocumentation(doc="right input file for FASTA/FASTQ paired end")), ToolInput(tag="in_duster", input_type=Boolean(optional=True), prefix="--duster", doc=InputDocumentation(doc="treat lower case residues as unknowns")), ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="exclude input sequences based on their name.\nIf the input sequence contains the specified\nstring then that sequence is excluded from the\nSDF. May be specified 0 or more times")), ToolInput(tag="in_select_read_group", input_type=String(optional=True), prefix="--select-read-group", doc=InputDocumentation(doc="when formatting from SAM/BAM input, only\ninclude reads with this read group ID")), ToolInput(tag="in_trim_threshold", input_type=Int(optional=True), prefix="--trim-threshold", doc=InputDocumentation(doc="trim read ends to maximise base quality above\nthe given threshold")), ToolInput(tag="in_allow_duplicate_names", input_type=Boolean(optional=True), prefix="--allow-duplicate-names", doc=InputDocumentation(doc="disable checking for duplicate sequence names")), ToolInput(tag="in_no_names", input_type=Boolean(optional=True), prefix="--no-names", doc=InputDocumentation(doc="do not include name data in the SDF output")), ToolInput(tag="in_no_quality", input_type=Boolean(optional=True), prefix="--no-quality", doc=InputDocumentation(doc="do not include quality data in the SDF output")), ToolInput(tag="in_sam_rg", input_type=File(optional=True), prefix="--sam-rg", doc=InputDocumentation(doc="|FILE       file containing a single valid read group SAM\nheader line or a string in the form\n'@RG\tID:READGROUP1\tSM:BACT_SAMPLE\tPL:ILLUMINA'\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rtg_Format_V0_1_0().translate("wdl", allow_empty_container=True)

