from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Rtg_Vcfmerge_V0_1_0 = CommandToolBuilder(tool="rtg_vcfmerge", base_command=["rtg", "vcfmerge"], inputs=[ToolInput(tag="in_bed_regions", input_type=File(optional=True), prefix="--bed-regions", doc=InputDocumentation(doc="if set, only read VCF records that overlap the\nranges contained in the specified BED file")), ToolInput(tag="in_input_list_file", input_type=File(optional=True), prefix="--input-list-file", doc=InputDocumentation(doc="file containing a list of VCF format files (1\nper line) to be merged")), ToolInput(tag="in_output_vcf_file", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output VCF file. Use '-' to write to standard")), ToolInput(tag="in_add_header", input_type=File(optional=True), prefix="--add-header", doc=InputDocumentation(doc="|FILE file containing VCF header lines to add, or a\nliteral header line. May be specified 0 or more\ntimes")), ToolInput(tag="in_force_merge", input_type=Int(optional=True), prefix="--force-merge", doc=InputDocumentation(doc="allow merging of specified header ID even when\ndescriptions do not match. May be specified 0 or\nmore times, or as a comma separated list")), ToolInput(tag="in_force_merge_all", input_type=Boolean(optional=True), prefix="--force-merge-all", doc=InputDocumentation(doc="attempt merging of all non-matching header")), ToolInput(tag="in_no_gzip", input_type=Boolean(optional=True), prefix="--no-gzip", doc=InputDocumentation(doc="do not gzip the output")), ToolInput(tag="in_no_header", input_type=Boolean(optional=True), prefix="--no-header", doc=InputDocumentation(doc="prevent VCF header from being written")), ToolInput(tag="in_no_merge_alts", input_type=Boolean(optional=True), prefix="--no-merge-alts", doc=InputDocumentation(doc="do not merge multiple records if the ALTs are")), ToolInput(tag="in_preserve_formats", input_type=Boolean(optional=True), prefix="--preserve-formats", doc=InputDocumentation(doc="do not merge multiple records containing\nunmergeable FORMAT fields (Default is to remove\nthose FORMAT fields so the variants can be\ncombined)")), ToolInput(tag="in_stats", input_type=File(optional=True), prefix="--stats", doc=InputDocumentation(doc="output statistics for the merged VCF file")), ToolInput(tag="in__regionregion_set", input_type=String(), position=0, doc=InputDocumentation(doc="--region=REGION          if set, only read VCF records within the")), ToolInput(tag="in_declarations", input_type=String(), position=0, doc=InputDocumentation(doc="-h, --help                   print help on command-line flag usage")), ToolInput(tag="in_different", input_type=String(), position=1, doc=InputDocumentation(doc="--no-merge-records       do not merge multiple records at the same"))], outputs=[ToolOutput(tag="out_output_vcf_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_vcf_file", type_hint=File()), doc=OutputDocumentation(doc="output VCF file. Use '-' to write to standard")), ToolOutput(tag="out_stats", output_type=File(optional=True), selector=InputSelector(input_to_select="in_stats", type_hint=File()), doc=OutputDocumentation(doc="output statistics for the merged VCF file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rtg_Vcfmerge_V0_1_0().translate("wdl", allow_empty_container=True)

