from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Float, Directory, Boolean, Int

Rtg_Childsim_V0_1_0 = CommandToolBuilder(tool="rtg_childsim", base_command=["rtg", "childsim"], inputs=[ToolInput(tag="in_father", input_type=String(optional=True), prefix="--father", doc=InputDocumentation(doc="name of the existing sample to use as the father")), ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="input VCF containing parent variants")), ToolInput(tag="in_mother", input_type=String(optional=True), prefix="--mother", doc=InputDocumentation(doc="name of the existing sample to use as the mother")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output VCF file name")), ToolInput(tag="in_output_sdf", input_type=String(optional=True), prefix="--output-sdf", doc=InputDocumentation(doc="if set, output an SDF containing the sample")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="--sample", doc=InputDocumentation(doc="name for new child sample")), ToolInput(tag="in_extra_crossovers", input_type=Float(optional=True), prefix="--extra-crossovers", doc=InputDocumentation(doc="probability of extra crossovers per chromosome\n(Default is 0.01)")), ToolInput(tag="in_genetic_map_dir", input_type=Directory(optional=True), prefix="--genetic-map-dir", doc=InputDocumentation(doc="if set, load genetic maps from this directory\nfor recombination point selection")), ToolInput(tag="in_no_gzip", input_type=Boolean(optional=True), prefix="--no-gzip", doc=InputDocumentation(doc="do not gzip the output")), ToolInput(tag="in_ploidy", input_type=String(optional=True), prefix="--ploidy", doc=InputDocumentation(doc="ploidy to use. Allowed values are [auto,\ndiploid, haploid] (Default is auto)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="seed for the random number generator")), ToolInput(tag="in_sex", input_type=String(optional=True), prefix="--sex", doc=InputDocumentation(doc="sex of individual. Allowed values are [male,\nfemale, either] (Default is either)")), ToolInput(tag="in_show_crossovers", input_type=Boolean(optional=True), prefix="--show-crossovers", doc=InputDocumentation(doc="if set, display information regarding haplotype\nselection and crossover points\n")), ToolInput(tag="in_genome", input_type=String(), position=0, doc=InputDocumentation(doc="-t, --reference=SDF          SDF containing the reference genome"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output VCF file name"))], container="quay.io/biocontainers/rtg-tools:3.12--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rtg_Childsim_V0_1_0().translate("wdl")

