from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String, Directory

Scaladoc_V0_1_0 = CommandToolBuilder(tool="scaladoc", base_command=["scaladoc"], inputs=[ToolInput(tag="in_author", input_type=Boolean(optional=True), prefix="-author", doc=InputDocumentation(doc="Include authors.")), ToolInput(tag="in_diagrams", input_type=Boolean(optional=True), prefix="-diagrams", doc=InputDocumentation(doc="Create inheritance diagrams for classes, traits and packages.")), ToolInput(tag="in_diagrams_dot_path", input_type=File(optional=True), prefix="-diagrams-dot-path", doc=InputDocumentation(doc="The path to the dot executable used to generate the inheritance diagrams. Eg: /usr/bin/dot")), ToolInput(tag="in_diagrams_dot_restart", input_type=Int(optional=True), prefix="-diagrams-dot-restart", doc=InputDocumentation(doc="The number of times to restart a malfunctioning dot process before disabling diagrams (default: 5)")), ToolInput(tag="in_diagrams_dot_timeout", input_type=Int(optional=True), prefix="-diagrams-dot-timeout", doc=InputDocumentation(doc="The timeout before the graphviz dot util is forcefully closed, in seconds (default: 10)")), ToolInput(tag="in_diagrams_max_classes", input_type=Int(optional=True), prefix="-diagrams-max-classes", doc=InputDocumentation(doc="The maximum number of superclasses or subclasses to show in a diagram")), ToolInput(tag="in_diagrams_max_implicit_s", input_type=Int(optional=True), prefix="-diagrams-max-implicits", doc=InputDocumentation(doc="The maximum number of implicitly converted classes to show in a diagram")), ToolInput(tag="in_doc_external_doc", input_type=Boolean(optional=True), prefix="-doc-external-doc", doc=InputDocumentation(doc=":<external-doc>            comma-separated list of classpath_entry_path#doc_URL pairs describing external dependencies.")), ToolInput(tag="in_doc_footer", input_type=String(optional=True), prefix="-doc-footer", doc=InputDocumentation(doc="A footer on every Scaladoc page, by default the EPFL/Lightbend copyright notice. Can be overridden with a custom footer.")), ToolInput(tag="in_doc_format", input_type=Boolean(optional=True), prefix="-doc-format", doc=InputDocumentation(doc=":<format>                        Selects in which format documentation is rendered (html) default:html")), ToolInput(tag="in_doc_generator", input_type=String(optional=True), prefix="-doc-generator", doc=InputDocumentation(doc="The fully qualified name of a doclet class, which will be used to generate the documentation")), ToolInput(tag="in_doc_no_compile", input_type=File(optional=True), prefix="-doc-no-compile", doc=InputDocumentation(doc="A directory containing sources which should be parsed, no more (e.g. AnyRef.scala)")), ToolInput(tag="in_doc_root_content", input_type=File(optional=True), prefix="-doc-root-content", doc=InputDocumentation(doc="The file from which the root package documentation should be imported.")), ToolInput(tag="in_doc_source_url", input_type=File(optional=True), prefix="-doc-source-url", doc=InputDocumentation(doc="A URL pattern used to link to the source file; the following variables are available: ?{TPL_NAME}, ?{TPL_OWNER} and respectively ?{FILE_PATH}. For example, for `scala.collection.Seq`, the variables will be expanded to `Seq`, `scala.collection` and respectively `scala/collection/Seq` (without the backquotes). To obtain a relative path for ?{FILE_PATH} instead of an absolute one, use the -sourcepath setting.")), ToolInput(tag="in_doc_title", input_type=String(optional=True), prefix="-doc-title", doc=InputDocumentation(doc="The overall name of the Scaladoc site")), ToolInput(tag="in_doc_version", input_type=Int(optional=True), prefix="-doc-version", doc=InputDocumentation(doc="An optional version number, to be appended to the title")), ToolInput(tag="in_expand_all_types", input_type=Boolean(optional=True), prefix="-expand-all-types", doc=InputDocumentation(doc="Expand all type aliases and abstract types into full template pages. (locally this can be done with the @template annotation)")), ToolInput(tag="in_groups", input_type=Boolean(optional=True), prefix="-groups", doc=InputDocumentation(doc="Group similar functions together (based on the @group annotation)")), ToolInput(tag="in_implicit_s", input_type=Boolean(optional=True), prefix="-implicits", doc=InputDocumentation(doc="Document members inherited by implicit conversions.")), ToolInput(tag="in_implicit_s_hide", input_type=Boolean(optional=True), prefix="-implicits-hide", doc=InputDocumentation(doc=":<implicit(s)>               Hide the members inherited by the given comma separated, fully qualified implicit conversions. Add dot (.) to include default conversions.")), ToolInput(tag="in_implicit_s_show_all", input_type=Boolean(optional=True), prefix="-implicits-show-all", doc=InputDocumentation(doc="Show members inherited by implicit conversions that are impossible in the default scope. (for example conversions that require Numeric[String] to be in scope)")), ToolInput(tag="in_implicit_s_sound_shadowing", input_type=Boolean(optional=True), prefix="-implicits-sound-shadowing", doc=InputDocumentation(doc="Use a sound implicit shadowing calculation. Note: this interacts badly with usecases, so only use it if you haven't defined usecase for implicitly inherited members.")), ToolInput(tag="in_no_link_warnings", input_type=Boolean(optional=True), prefix="-no-link-warnings", doc=InputDocumentation(doc="Avoid warnings for ambiguous and incorrect links.")), ToolInput(tag="in_no_prefixes", input_type=Boolean(optional=True), prefix="-no-prefixes", doc=InputDocumentation(doc="Prevents generating prefixes in types, possibly creating ambiguous references, but significantly speeding up scaladoc.")), ToolInput(tag="in_raw_output", input_type=Boolean(optional=True), prefix="-raw-output", doc=InputDocumentation(doc="For each html file, create another .html.raw file containing only the text. (can be used for quickly diffing two scaladoc outputs)")), ToolInput(tag="in_skip_packages", input_type=Boolean(optional=True), prefix="-skip-packages", doc=InputDocumentation(doc="<<package1>:...:<packageN>>  A colon-delimited list of fully qualified package names that will be skipped from scaladoc.")), ToolInput(tag="in_diagrams_debug", input_type=Boolean(optional=True), prefix="-diagrams-debug", doc=InputDocumentation(doc="Show debugging information for the diagram creation process.")), ToolInput(tag="in_implicit_s_debug", input_type=Boolean(optional=True), prefix="-implicits-debug", doc=InputDocumentation(doc="Show debugging information for members inherited by implicit conversions.")), ToolInput(tag="in_d_property", input_type=String(optional=True), prefix="-Dproperty", doc=InputDocumentation(doc="Pass -Dproperty=value directly to the runtime system.")), ToolInput(tag="in_flag_pass_flag", input_type=Boolean(optional=True), prefix="-J", doc=InputDocumentation(doc="<flag>                        Pass <flag> directly to the runtime system.")), ToolInput(tag="in_pluginopt_pass_option", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc=":<plugin>:<opt>               Pass an option to a plugin")), ToolInput(tag="in_print_synopsis_advanced", input_type=Boolean(optional=True), prefix="-X", doc=InputDocumentation(doc="Print a synopsis of advanced options.")), ToolInput(tag="in_boot_classpath", input_type=File(optional=True), prefix="-bootclasspath", doc=InputDocumentation(doc="Override location of bootstrap class files.")), ToolInput(tag="in_classpath", input_type=File(optional=True), prefix="-classpath", doc=InputDocumentation(doc="Specify where to find user class files.")), ToolInput(tag="in_destination_generated_classfiles", input_type=Directory(optional=True), prefix="-d", doc=InputDocumentation(doc="destination for generated classfiles.")), ToolInput(tag="in_dependency_file", input_type=File(optional=True), prefix="-dependencyfile", doc=InputDocumentation(doc="Set dependency tracking file.")), ToolInput(tag="in_deprecation", input_type=Boolean(optional=True), prefix="-deprecation", doc=InputDocumentation(doc="Emit warning and location for usages of deprecated APIs.")), ToolInput(tag="in_encoding", input_type=String(optional=True), prefix="-encoding", doc=InputDocumentation(doc="Specify character encoding used by source files.")), ToolInput(tag="in_explain_types", input_type=Boolean(optional=True), prefix="-explaintypes", doc=InputDocumentation(doc="Explain type errors in more detail.")), ToolInput(tag="in_ext_dirs", input_type=File(optional=True), prefix="-extdirs", doc=InputDocumentation(doc="Override location of installed extensions.")), ToolInput(tag="in_feature", input_type=Boolean(optional=True), prefix="-feature", doc=InputDocumentation(doc="Emit warning and location for usages of features that should be imported explicitly.")), ToolInput(tag="in_level_set_level", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc=":<level>                      Set level of generated debugging info. (none,source,line,vars,notailcalls) default:vars")), ToolInput(tag="in_java_boot_classpath", input_type=File(optional=True), prefix="-javabootclasspath", doc=InputDocumentation(doc="Override java boot classpath.")), ToolInput(tag="in_java_ext_dirs", input_type=File(optional=True), prefix="-javaextdirs", doc=InputDocumentation(doc="Override java extdirs classpath.")), ToolInput(tag="in_language", input_type=Boolean(optional=True), prefix="-language", doc=InputDocumentation(doc=":<_,feature,-feature>  Enable or disable language features: `_' for all, `-language:help' to list")), ToolInput(tag="in_no_specialization", input_type=Boolean(optional=True), prefix="-no-specialization", doc=InputDocumentation(doc="Ignore @specialize annotations.")), ToolInput(tag="in_no_boot_cp", input_type=Boolean(optional=True), prefix="-nobootcp", doc=InputDocumentation(doc="Do not use the boot classpath for the scala jars.")), ToolInput(tag="in_nowarn", input_type=Boolean(optional=True), prefix="-nowarn", doc=InputDocumentation(doc="Generate no warnings.")), ToolInput(tag="in_optimise", input_type=Boolean(optional=True), prefix="-optimise", doc=InputDocumentation(doc="Generates faster bytecode by applying optimisations to the program")), ToolInput(tag="in_print", input_type=Boolean(optional=True), prefix="-print", doc=InputDocumentation(doc="Print program with Scala-specific features removed.")), ToolInput(tag="in_sourcepath", input_type=File(optional=True), prefix="-sourcepath", doc=InputDocumentation(doc="Specify location(s) of source files.")), ToolInput(tag="in_target", input_type=Boolean(optional=True), prefix="-target", doc=InputDocumentation(doc=":<target>                Target platform for object files. All JVM 1.5 targets are deprecated. (jvm-1.5,jvm-1.6,jvm-1.7,jvm-1.8) default:jvm-1.6")), ToolInput(tag="in_tool_cp", input_type=File(optional=True), prefix="-toolcp", doc=InputDocumentation(doc="Add to the runner classpath.")), ToolInput(tag="in_unchecked", input_type=Boolean(optional=True), prefix="-unchecked", doc=InputDocumentation(doc="Enable additional warnings where generated code depends on assumptions.")), ToolInput(tag="in_uniqid", input_type=Boolean(optional=True), prefix="-uniqid", doc=InputDocumentation(doc="Uniquely tag all identifiers in debugging output.")), ToolInput(tag="in_use_java_cp", input_type=Boolean(optional=True), prefix="-usejavacp", doc=InputDocumentation(doc="Utilize the java.class.path in classpath resolution.")), ToolInput(tag="in_use_manifest_cp", input_type=Boolean(optional=True), prefix="-usemanifestcp", doc=InputDocumentation(doc="Utilize the manifest in classpath resolution.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="Output messages about what the compiler is doing.")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="Print product version and exit.")), ToolInput(tag="in_options", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_source_files", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Scaladoc_V0_1_0().translate("wdl", allow_empty_container=True)

