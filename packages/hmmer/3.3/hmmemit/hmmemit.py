from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, Float

Hmmemit_V0_1_0 = CommandToolBuilder(tool="hmmemit", base_command=["hmmemit"], inputs=[ToolInput(tag="in_send_sequence_output", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc=": send sequence output to file <f>, not stdout")), ToolInput(tag="in_number_seqs_sample", input_type=Int(optional=True), prefix="-N", doc=InputDocumentation(doc=": number of seqs to sample  [1]  (n>0)")), ToolInput(tag="in__emit_alignment", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc=": emit alignment")), ToolInput(tag="in_emit_simple_sequence", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc=": emit simple majority-rule consensus sequence")), ToolInput(tag="in_emit_sequence_reqs", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc=": emit fancier consensus sequence (req's --minl, --minu)")), ToolInput(tag="in_sample_sequences_model", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc=": sample sequences from profile, not core model")), ToolInput(tag="in_set_expected_length", input_type=Int(optional=True), prefix="-L", doc=InputDocumentation(doc=": set expected length from profile to <n>  [400]")), ToolInput(tag="in_local", input_type=Boolean(optional=True), prefix="--local", doc=InputDocumentation(doc=": configure profile in multihit local mode  [default]")), ToolInput(tag="in_uni_local", input_type=Boolean(optional=True), prefix="--unilocal", doc=InputDocumentation(doc=": configure profile in unilocal mode")), ToolInput(tag="in_g_local", input_type=Boolean(optional=True), prefix="--glocal", doc=InputDocumentation(doc=": configure profile in multihit glocal mode")), ToolInput(tag="in_unig_local", input_type=Boolean(optional=True), prefix="--uniglocal", doc=InputDocumentation(doc=": configure profile in unihit glocal mode")), ToolInput(tag="in_min_l", input_type=Float(optional=True), prefix="--minl", doc=InputDocumentation(doc=": show consensus as 'any' (X/N) unless >= this fraction  [0.0]")), ToolInput(tag="in_minu", input_type=Float(optional=True), prefix="--minu", doc=InputDocumentation(doc=": show consensus as upper case if >= this fraction  [0.0]")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc=": set RNG seed to <n>  [0]  (n>=0)")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_send_sequence_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_send_sequence_output", type_hint=File()), doc=OutputDocumentation(doc=": send sequence output to file <f>, not stdout"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hmmemit_V0_1_0().translate("wdl", allow_empty_container=True)

