from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory

Rgt_Viz_Intersect_V0_1_0 = CommandToolBuilder(tool="rgt_viz_intersect", base_command=["rgt-viz", "intersect"], inputs=[ToolInput(tag="in_file_name_multiplereferences", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="The file name of the reference Experimental Matrix. Multiple\nreferences are acceptable. (default: None)")), ToolInput(tag="in_file_name_query", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="The file name of the query Experimental Matrix. Multiple\nqueries are acceptable. (default: None)")), ToolInput(tag="in_directory_name_output", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc="The directory name for the output files. For example, project\nname. (default: None)")), ToolInput(tag="in_title_shown_intersectiontest", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="The title shown on the top of the plot and also the folder\nname. (default: intersection_test)")), ToolInput(tag="in_group_data_matrix", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="Group the data by any optional column (for example, 'cell') of\nexperimental matrix, or None. (default: None)")), ToolInput(tag="in_color_data_matrix", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Color the data by any optional column (for example, 'cell') of\nexperimental matrix, or None. (default: regions)")), ToolInput(tag="in_organism", input_type=Boolean(optional=True), prefix="-organism", doc=InputDocumentation(doc="Define the organism. (default: hg19)")), ToolInput(tag="in_bg", input_type=Boolean(optional=True), prefix="-bg", doc=InputDocumentation(doc="Define a BED file as background. If not defined, the\nbackground is whole genome according to the given organism.\n(default: None)")), ToolInput(tag="in_define_mode_number", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="Define the mode of calculating intersection. 'count' outputs\nthe number of overlapped regions.'bp' outputs the\ncoverage(basepair) of intersection. (default: count)")), ToolInput(tag="in_tc", input_type=Boolean(optional=True), prefix="-tc", doc=InputDocumentation(doc="Define the threshold(in percentage) of reference length for\nintersection counting. For example, '20' means that the query\nwhich overlaps more than 20% of reference is counted as\nintersection. (default: False)")), ToolInput(tag="in_ex", input_type=Boolean(optional=True), prefix="-ex", doc=InputDocumentation(doc="Define the extension(in bp) of reference length for\nintersection counting. For example, '20' means that each\nregion of reference is extended by 20 bp in order to include\nproximal queries. (default: 0)")), ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="-log", doc=InputDocumentation(doc="Set y axis of the plot in log scale.")), ToolInput(tag="in_color", input_type=Boolean(optional=True), prefix="-color", doc=InputDocumentation(doc="Define the specific colors with the given column 'color' in\nexperimental matrix. The color should be in the format of\nmatplotlib.colors. For example, 'r' for red, 'b' for blue, or\n'(100, 35, 138)' for RGB. (default: False)")), ToolInput(tag="in_show", input_type=Boolean(optional=True), prefix="-show", doc=InputDocumentation(doc="Show the figure in the screen. (default: False)")), ToolInput(tag="in_s_test", input_type=Boolean(optional=True), prefix="-stest", doc=InputDocumentation(doc="Define the repetition time of random subregion test between\nreference and query. (default: 0)")), ToolInput(tag="in_mp", input_type=Boolean(optional=True), prefix="-mp", doc=InputDocumentation(doc="Define the number of cores for parallel computation. (default:\n4)")), ToolInput(tag="in_pw", input_type=Boolean(optional=True), prefix="-pw", doc=InputDocumentation(doc="Define the width of single panel. (default: 3)")), ToolInput(tag="in_ph", input_type=Boolean(optional=True), prefix="-ph", doc=InputDocumentation(doc="Define the height of single panel. (default: 3)"))], outputs=[ToolOutput(tag="out_directory_name_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_directory_name_output", type_hint=File()), doc=OutputDocumentation(doc="The directory name for the output files. For example, project\nname. (default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rgt_Viz_Intersect_V0_1_0().translate("wdl", allow_empty_container=True)

