from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Pvbatch_V0_1_0 = CommandToolBuilder(tool="pvbatch", base_command=["pvbatch"], inputs=[ToolInput(tag="in_cs_log", input_type=File(optional=True), prefix="--cslog", doc=InputDocumentation(doc="ClientServerStream log file.")), ToolInput(tag="in_disable_registry", input_type=Boolean(optional=True), prefix="--disable-registry", doc=InputDocumentation(doc="Do not use registry when running ParaView (for testing).")), ToolInput(tag="in_disable_x_display_test", input_type=Boolean(optional=True), prefix="--disable-xdisplay-test", doc=InputDocumentation(doc="When specified, all X-display tests and OpenGL version checks are skipped. Use this option if you are getting remote-rendering disabled errors and you are positive that the X environment is setup properly and your OpenGL support is adequate (experimental).")), ToolInput(tag="in_enable_bt", input_type=Boolean(optional=True), prefix="--enable-bt", doc=InputDocumentation(doc="Enable stack trace signal handler.")), ToolInput(tag="in_enable_streaming", input_type=Boolean(optional=True), prefix="--enable-streaming", doc=InputDocumentation(doc="EXPERIMENTAL: When specified, view-based streaming is enabled for certain views and representation types.")), ToolInput(tag="in_hostname", input_type=String(optional=True), prefix="--hostname", doc=InputDocumentation(doc="Override the hostname to be used to connect to this process. By default, the hostname is determined using appropriate system calls.")), ToolInput(tag="in_print_monitors", input_type=Boolean(optional=True), prefix="--print-monitors", doc=InputDocumentation(doc="Print detected monitors and exit (Windows only).")), ToolInput(tag="in_symmetric", input_type=Boolean(optional=True), prefix="--symmetric", doc=InputDocumentation(doc="When specified, the python script is processed symmetrically on all processes.")), ToolInput(tag="in_test_plugin", input_type=String(optional=True), prefix="--test-plugin", doc=InputDocumentation(doc="Specify the name of the plugin to load for testing")), ToolInput(tag="in_test_plugin_path", input_type=File(optional=True), prefix="--test-plugin-path", doc=InputDocumentation(doc="Specify the path where more plugins can be found.This is typically used when testing plugins.")), ToolInput(tag="in_use_offscreen_rendering", input_type=Boolean(optional=True), prefix="--use-offscreen-rendering", doc=InputDocumentation(doc="Render offscreen on the satellite processes. This option only works with software rendering or mangled mesa on Unix."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pvbatch_V0_1_0().translate("wdl", allow_empty_container=True)

