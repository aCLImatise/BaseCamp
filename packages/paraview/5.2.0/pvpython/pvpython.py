from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, String

Pvpython_V0_1_0 = CommandToolBuilder(tool="pvpython", base_command=["pvpython"], inputs=[ToolInput(tag="in_connect_id", input_type=Int(optional=True), prefix="--connect-id", doc=InputDocumentation(doc="Set the ID of the server and client to make sure they match. 0 is reserved to imply none specified.")), ToolInput(tag="in_cs_log", input_type=File(optional=True), prefix="--cslog", doc=InputDocumentation(doc="ClientServerStream log file.")), ToolInput(tag="in_data", input_type=File(optional=True), prefix="--data", doc=InputDocumentation(doc="Load the specified data. To specify file series replace the numeral with a '.' eg. my0.vtk, my1.vtk...myN.vtk becomes my..vtk")), ToolInput(tag="in_disable_registry", input_type=Boolean(optional=True), prefix="--disable-registry", doc=InputDocumentation(doc="Do not use registry when running ParaView (for testing).")), ToolInput(tag="in_enable_bt", input_type=Boolean(optional=True), prefix="--enable-bt", doc=InputDocumentation(doc="Enable stack trace signal handler.")), ToolInput(tag="in_enable_streaming", input_type=Boolean(optional=True), prefix="--enable-streaming", doc=InputDocumentation(doc="EXPERIMENTAL: When specified, view-based streaming is enabled for certain views and representation types.")), ToolInput(tag="in_hostname", input_type=String(optional=True), prefix="--hostname", doc=InputDocumentation(doc="Override the hostname to be used to connect to this process. By default, the hostname is determined using appropriate system calls.")), ToolInput(tag="in_multi_servers", input_type=Boolean(optional=True), prefix="--multi-servers", doc=InputDocumentation(doc="Allow client to connect to several pvserver")), ToolInput(tag="in_print_monitors", input_type=Boolean(optional=True), prefix="--print-monitors", doc=InputDocumentation(doc="Print detected monitors and exit (Windows only).")), ToolInput(tag="in_server_url", input_type=String(optional=True), prefix="--server-url", doc=InputDocumentation(doc="Set the server-url to connect with when the client starts. --server (-s) option supersedes this option, hence one should only use one of the two options.")), ToolInput(tag="in_state", input_type=String(optional=True), prefix="--state", doc=InputDocumentation(doc="Load the specified statefile (.pvsm).")), ToolInput(tag="in_stereo", input_type=Boolean(optional=True), prefix="--stereo", doc=InputDocumentation(doc="Tell the application to enable stereo rendering")), ToolInput(tag="in_stereo_type", input_type=String(optional=True), prefix="--stereo-type", doc=InputDocumentation(doc="Specify the stereo type. This valid only when --stereo is specified. Possible values are 'Crystal Eyes', 'Red-Blue', 'Interlaced', 'Dresden', 'Anaglyph', 'Checkerboard','SplitViewportHorizontal'")), ToolInput(tag="in_test_plugin", input_type=String(optional=True), prefix="--test-plugin", doc=InputDocumentation(doc="Specify the name of the plugin to load for testing")), ToolInput(tag="in_test_plugin_path", input_type=File(optional=True), prefix="--test-plugin-path", doc=InputDocumentation(doc="Specify the path where more plugins can be found.This is typically used when testing plugins.")), ToolInput(tag="in_use_cuda_interop", input_type=Boolean(optional=True), prefix="--use-cuda-interop", doc=InputDocumentation(doc="When specified, piston classes will use cuda interop for direct rendering"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pvpython_V0_1_0().translate("wdl", allow_empty_container=True)

