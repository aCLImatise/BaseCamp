from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Directory, File, Int

Evaluate_Sample_V0_1_0 = CommandToolBuilder(tool="evaluate_sample", base_command=["evaluate_sample"], inputs=[ToolInput(tag="in_no_cuda", input_type=Boolean(optional=True), prefix="--no-cuda", doc=InputDocumentation(doc="Disables CUDA for use off GPU, if this is not\nspecified the utility will check availability of\ntorch.cuda")), ToolInput(tag="in_model", input_type=String(optional=True), prefix="--model", doc=InputDocumentation(doc="name of the saved model weights to load")), ToolInput(tag="in_vector_location", input_type=Directory(optional=True), prefix="--vector-location", doc=InputDocumentation(doc="directory containing the generated vectors to evaluate")), ToolInput(tag="in_save", input_type=Boolean(optional=True), prefix="--save", doc=InputDocumentation(doc="save the results of the evaluation to a numpy array or\na tsv text file")), ToolInput(tag="in_save_format", input_type=String(optional=True), prefix="--save-format", doc=InputDocumentation(doc="save the results of the evaluation to a numpy array or\nas summary in a tsv text file or both")), ToolInput(tag="in_save_location", input_type=String(optional=True), prefix="--save-location", doc=InputDocumentation(doc="The location on the filesystem to save the final\nresults (default:\nCurrent_working_directory/mimsi_results/).")), ToolInput(tag="in_name", input_type=File(optional=True), prefix="--name", doc=InputDocumentation(doc="name of the run, this will be the filename for any\nsaved results in tsv format with more than one\nsamples.")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Random Seed (default: 2)")), ToolInput(tag="in_coverage", input_type=String(optional=True), prefix="--coverage", doc=InputDocumentation(doc="Required coverage for both the tumor and the normal.\nAny coverage in excess of this limit will be randomly\ndownsampled")), ToolInput(tag="in_confidence_interval", input_type=File(optional=True), prefix="--confidence-interval", doc=InputDocumentation(doc="Confidence interval for the estimated MSI Score\nreported in the tsv output file (default: 0.95)")), ToolInput(tag="in_use_attention", input_type=Boolean(optional=True), prefix="--use-attention", doc=InputDocumentation(doc="Use attention pooling rather than average pooling to\naggregate sample embeddings (default: False)\n"))], outputs=[ToolOutput(tag="out_confidence_interval", output_type=File(optional=True), selector=InputSelector(input_to_select="in_confidence_interval", type_hint=File()), doc=OutputDocumentation(doc="Confidence interval for the estimated MSI Score\nreported in the tsv output file (default: 0.95)"))], container="quay.io/biocontainers/mimsi:0.4.3--pyhdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Evaluate_Sample_V0_1_0().translate("wdl")

