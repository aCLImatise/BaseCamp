from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Sccaf_V0_1_0 = CommandToolBuilder(tool="sccaf", base_command=["sccaf"], inputs=[ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--input-file", doc=InputDocumentation(doc="Path to input in AnnData or Loom")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="Path for output file")), ToolInput(tag="in_external_clustering_tsv", input_type=File(optional=True), prefix="--external-clustering-tsv", doc=InputDocumentation(doc="Path to external clustering in TSV")), ToolInput(tag="in_optimise", input_type=Boolean(optional=True), prefix="--optimise", doc=InputDocumentation(doc="Not only run assessment, but also optimise the")), ToolInput(tag="in_slot_for_existing_clustering", input_type=String(optional=True), prefix="--slot-for-existing-clustering", doc=InputDocumentation(doc="Use clustering pre-computed in the input object,\navailable in this slot of the object.")), ToolInput(tag="in_resolution", input_type=String(optional=True), prefix="--resolution", doc=InputDocumentation(doc="Resolution for running clustering when no internal or\nexternal clustering is given.")), ToolInput(tag="in_min_accuracy", input_type=Int(optional=True), prefix="--min-accuracy", doc=InputDocumentation(doc="Accuracy threshold for convergence of the optimisation\nprocedure.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix for clustering labels")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Number of processors to use")), ToolInput(tag="in_under_cluster_boundary", input_type=String(optional=True), prefix="--undercluster-boundary", doc=InputDocumentation(doc="Label for the underclustering boundary to use in the\noptimisation. It should be present in the annData\nobject")), ToolInput(tag="in_produce_rounds_summary", input_type=Boolean(optional=True), prefix="--produce-rounds-summary", doc=InputDocumentation(doc="Set to produce summary files for each round of\noptimisation")), ToolInput(tag="in_optimisation_plots_output", input_type=File(optional=True), prefix="--optimisation-plots-output", doc=InputDocumentation(doc="PDF file output path for all optimisation plots.")), ToolInput(tag="in_conf_sampling_iterations", input_type=Int(optional=True), prefix="--conf-sampling-iterations", doc=InputDocumentation(doc="How many samples are taken of cells per clusters prior\nto the confusion matrix calculation.Higher numbers\nwill produce more stable results in terms of rounds,\nbut will take longer. Default: 3.\n")), ToolInput(tag="in_clustering", input_type=String(), position=0, doc=InputDocumentation(doc="--skip-assessment     If --optimise given, then this allows to optionally"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="Path for output file")), ToolOutput(tag="out_optimisation_plots_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_optimisation_plots_output", type_hint=File()), doc=OutputDocumentation(doc="PDF file output path for all optimisation plots."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sccaf_V0_1_0().translate("wdl", allow_empty_container=True)

