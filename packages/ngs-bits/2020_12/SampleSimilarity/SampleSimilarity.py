from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Samplesimilarity_V0_1_0 = CommandToolBuilder(tool="SampleSimilarity", base_command=["SampleSimilarity"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="Input variant lists in VCF format (two or more). If only one file is given, each line in this file is interpreted as an input file path.")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="Output file. If unset, writes to STDOUT.\nDefault value: ''")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="-mode", doc=InputDocumentation(doc="Mode (input format).\nDefault value: 'vcf'\nValid: 'vcf,gsvar,bam'")), ToolInput(tag="in_roi", input_type=File(optional=True), prefix="-roi", doc=InputDocumentation(doc="Restrict similarity calculation to variants in target region.\nDefault value: ''")), ToolInput(tag="in_include_go_no_some_s", input_type=Boolean(optional=True), prefix="-include_gonosomes", doc=InputDocumentation(doc="Includes gonosomes into calculation (by default only variants on autosomes are considered).\nDefault value: 'false'")), ToolInput(tag="in_skip_multi", input_type=Boolean(optional=True), prefix="-skip_multi", doc=InputDocumentation(doc="Skip multi-allelic variants instead of throwing an error (VCF mode).\nDefault value: 'false'")), ToolInput(tag="in_min_cov", input_type=Int(optional=True), prefix="-min_cov", doc=InputDocumentation(doc="Minimum coverage to consider a SNP for the analysis (BAM mode).\nDefault value: '30'")), ToolInput(tag="in_max_snps", input_type=Int(optional=True), prefix="-max_snps", doc=InputDocumentation(doc="The maximum number of high-coverage SNPs to extract from BAM/CRAM. 0 means unlimited (BAM mode).\nDefault value: '2000'")), ToolInput(tag="in_build", input_type=Int(optional=True), prefix="-build", doc=InputDocumentation(doc="Genome build used to generate the input (BAM mode).\nDefault value: 'hg19'\nValid: 'hg19,hg38'")), ToolInput(tag="in_ref", input_type=String(optional=True), prefix="-ref", doc=InputDocumentation(doc="Reference genome for CRAM support (mandatory if CRAM is used).\nDefault value: ''")), ToolInput(tag="in_changelog", input_type=Boolean(optional=True), prefix="--changelog", doc=InputDocumentation(doc="Prints changeloge and exits.")), ToolInput(tag="in_tdx", input_type=Boolean(optional=True), prefix="--tdx", doc=InputDocumentation(doc="Writes a Tool Definition Xml file. The file name is the application name with the suffix '.tdx'."))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output file. If unset, writes to STDOUT.\nDefault value: ''"))], container="quay.io/biocontainers/ngs-bits:2020_12--py39h5902420_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Samplesimilarity_V0_1_0().translate("wdl")

