from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Float, Boolean

Vcffilter_V0_1_0 = CommandToolBuilder(tool="VcfFilter", base_command=["VcfFilter"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="Input VCF file. If unset, reads from STDIN.\nDefault value: ''")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="Output VCF list. If unset, writes to STDOUT.\nDefault value: ''")), ToolInput(tag="in_reg", input_type=Int(optional=True), prefix="-reg", doc=InputDocumentation(doc="Region of interest in BED format, or comma-separated list of region, e.g. 'chr1:454540-454678,chr2:473457-4734990'.\nDefault value: ''")), ToolInput(tag="in_variant_type", input_type=String(optional=True), prefix="-variant_type", doc=InputDocumentation(doc="Filters by variant type. Possible types are: 'snp','indel','multi-allelic','other'.\nDefault value: ''")), ToolInput(tag="in_id", input_type=String(optional=True), prefix="-id", doc=InputDocumentation(doc="Filter by ID column (regular expression).\nDefault value: ''")), ToolInput(tag="in_qual", input_type=Float(optional=True), prefix="-qual", doc=InputDocumentation(doc="Filter by QUAL column (minimum).\nDefault value: '0'")), ToolInput(tag="in_filter", input_type=String(optional=True), prefix="-filter", doc=InputDocumentation(doc="Filter by FILTER column (regular expression).\nDefault value: ''")), ToolInput(tag="in_filter_empty", input_type=Boolean(optional=True), prefix="-filter_empty", doc=InputDocumentation(doc="Removes entries with non-empty FILTER column.\nDefault value: 'false'")), ToolInput(tag="in_info", input_type=Int(optional=True), prefix="-info", doc=InputDocumentation(doc="Filter by INFO column entries - use ';' as separator for several filters, e.g. 'DP > 5;AO > 2' (spaces are important).")), ToolInput(tag="in_sample", input_type=Int(optional=True), prefix="-sample", doc=InputDocumentation(doc="Filter by sample-specific entries - use ';' as separator for several filters, e.g. 'GT is 1/1' (spaces are important).")), ToolInput(tag="in_sample_one_match", input_type=Boolean(optional=True), prefix="-sample_one_match", doc=InputDocumentation(doc="If set, a line will pass if one sample passes all filters (default behaviour is that all samples have to pass all filters).\nDefault value: 'false'")), ToolInput(tag="in_changelog", input_type=Boolean(optional=True), prefix="--changelog", doc=InputDocumentation(doc="Prints changeloge and exits.")), ToolInput(tag="in_tdx", input_type=Boolean(optional=True), prefix="--tdx", doc=InputDocumentation(doc="Writes a Tool Definition Xml file. The file name is the application name with the suffix '.tdx'."))], outputs=[], container="quay.io/biocontainers/ngs-bits:2020_12--py39h5902420_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Vcffilter_V0_1_0().translate("wdl")

