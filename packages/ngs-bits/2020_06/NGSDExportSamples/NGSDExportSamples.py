from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean

Ngsdexportsamples_V0_1_0 = CommandToolBuilder(tool="NGSDExportSamples", base_command=["NGSDExportSamples"], inputs=[ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="Output TSV file. If unset, writes to STDOUT.\nDefault value: ''")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="-sample", doc=InputDocumentation(doc="Sample name filter (substring match).\nDefault value: ''")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="-species", doc=InputDocumentation(doc="Species filter.\nDefault value: ''")), ToolInput(tag="in_no_bad_samples", input_type=Boolean(optional=True), prefix="-no_bad_samples", doc=InputDocumentation(doc="If set, processed samples with 'bad' quality are excluded.\nDefault value: 'false'")), ToolInput(tag="in_no_tumor", input_type=Boolean(optional=True), prefix="-no_tumor", doc=InputDocumentation(doc="If set, tumor samples are excluded.\nDefault value: 'false'")), ToolInput(tag="in_no_ff_pe", input_type=Boolean(optional=True), prefix="-no_ffpe", doc=InputDocumentation(doc="If set, FFPE samples are excluded.\nDefault value: 'false'")), ToolInput(tag="in_with_merged", input_type=Boolean(optional=True), prefix="-with_merged", doc=InputDocumentation(doc="If set, processed samples that were merged into another sample are included.\nDefault value: 'false'")), ToolInput(tag="in_project", input_type=String(optional=True), prefix="-project", doc=InputDocumentation(doc="Project name filter.\nDefault value: ''")), ToolInput(tag="in_system", input_type=String(optional=True), prefix="-system", doc=InputDocumentation(doc="Processing system name filter (short name).\nDefault value: ''")), ToolInput(tag="in_run", input_type=String(optional=True), prefix="-run", doc=InputDocumentation(doc="Sequencing run name filter.\nDefault value: ''")), ToolInput(tag="in_run_finished", input_type=Boolean(optional=True), prefix="-run_finished", doc=InputDocumentation(doc="Only show samples where the analysis of the run is finished.\nDefault value: 'false'")), ToolInput(tag="in_run_device", input_type=String(optional=True), prefix="-run_device", doc=InputDocumentation(doc="Sequencing run device name filter.\nDefault value: ''")), ToolInput(tag="in_no_bad_runs", input_type=Boolean(optional=True), prefix="-no_bad_runs", doc=InputDocumentation(doc="If set, sequencing runs with 'bad' quality are excluded.\nDefault value: 'false'")), ToolInput(tag="in_add_qc", input_type=Boolean(optional=True), prefix="-add_qc", doc=InputDocumentation(doc="If set, QC columns are added to output.\nDefault value: 'false'")), ToolInput(tag="in_add_outcome", input_type=Boolean(optional=True), prefix="-add_outcome", doc=InputDocumentation(doc="If set, diagnostic outcome columns are added to output.\nDefault value: 'false'")), ToolInput(tag="in_add_disease_details", input_type=Boolean(optional=True), prefix="-add_disease_details", doc=InputDocumentation(doc="If set, disease details columns are added to output.\nDefault value: 'false'")), ToolInput(tag="in_add_path", input_type=Boolean(optional=True), prefix="-add_path", doc=InputDocumentation(doc="Checks if the sample folder is present at the defaults location in the 'projects_folder' (as defined in the 'settings.ini' file).\nDefault value: 'false'")), ToolInput(tag="in_add_report_config", input_type=Boolean(optional=True), prefix="-add_report_config", doc=InputDocumentation(doc="Adds a column with report configuration information (exists/has_small_variants/has_cnvs).\nDefault value: 'false'")), ToolInput(tag="in_test", input_type=Boolean(optional=True), prefix="-test", doc=InputDocumentation(doc="Uses the test database instead of on the production database.\nDefault value: 'false'")), ToolInput(tag="in_changelog", input_type=Boolean(optional=True), prefix="--changelog", doc=InputDocumentation(doc="Prints changeloge and exits.")), ToolInput(tag="in_tdx", input_type=Boolean(optional=True), prefix="--tdx", doc=InputDocumentation(doc="Writes a Tool Definition Xml file. The file name is the application name with the suffix '.tdx'."))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output TSV file. If unset, writes to STDOUT.\nDefault value: ''"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ngsdexportsamples_V0_1_0().translate("wdl", allow_empty_container=True)

