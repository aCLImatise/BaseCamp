from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int

Mappingqc_V0_1_0 = CommandToolBuilder(tool="MappingQC", base_command=["MappingQC"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="Input BAM file.")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="Output qcML file. If unset, writes to STDOUT.\nDefault value: ''")), ToolInput(tag="in_roi", input_type=File(optional=True), prefix="-roi", doc=InputDocumentation(doc="Input target region BED file (for panel, WES, etc.).\nDefault value: ''")), ToolInput(tag="in_wgs", input_type=Boolean(optional=True), prefix="-wgs", doc=InputDocumentation(doc="WGS mode without target region. Genome information is taken from the BAM file.\nDefault value: 'false'")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="-rna", doc=InputDocumentation(doc="RNA mode without target region. Genome information is taken from the BAM file.\nDefault value: 'false'")), ToolInput(tag="in_txt", input_type=Boolean(optional=True), prefix="-txt", doc=InputDocumentation(doc="Writes TXT format instead of qcML.\nDefault value: 'false'")), ToolInput(tag="in_min_mapq", input_type=Int(optional=True), prefix="-min_mapq", doc=InputDocumentation(doc="Minmum mapping quality to consider a read mapped.\nDefault value: '1'")), ToolInput(tag="in_no_cont", input_type=Boolean(optional=True), prefix="-no_cont", doc=InputDocumentation(doc="Disables sample contamination calculation, e.g. for tumor or non-human samples.\nDefault value: 'false'")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="-debug", doc=InputDocumentation(doc="Enables verbose debug outout.\nDefault value: 'false'")), ToolInput(tag="in_build", input_type=Int(optional=True), prefix="-build", doc=InputDocumentation(doc="Genome build used to generate the input (needed for contamination only).\nDefault value: 'hg19'\nValid: 'hg19,hg38'")), ToolInput(tag="in_changelog", input_type=Boolean(optional=True), prefix="--changelog", doc=InputDocumentation(doc="Prints changeloge and exits.")), ToolInput(tag="in_tdx", input_type=Boolean(optional=True), prefix="--tdx", doc=InputDocumentation(doc="Writes a Tool Definition Xml file. The file name is the application name with the suffix '.tdx'."))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output qcML file. If unset, writes to STDOUT.\nDefault value: ''"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mappingqc_V0_1_0().translate("wdl", allow_empty_container=True)

