from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, File, Directory

Fba_Map_V0_1_0 = CommandToolBuilder(tool="fba_map", base_command=["fba", "map"], inputs=[ToolInput(tag="in_read_one", input_type=Int(optional=True), prefix="--read1", doc=InputDocumentation(doc="specify fastq file for read 1")), ToolInput(tag="in_read_two", input_type=Int(optional=True), prefix="--read2", doc=InputDocumentation(doc="specify fastq file for read 2")), ToolInput(tag="in_whitelist", input_type=String(optional=True), prefix="--whitelist", doc=InputDocumentation(doc="specify a whitelist of accepted cell barcodes")), ToolInput(tag="in_feature_ref", input_type=String(optional=True), prefix="--feature_ref", doc=InputDocumentation(doc="specify a reference of feature barcodes")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="specify an output file")), ToolInput(tag="in_read_one_coords", input_type=Int(optional=True), prefix="--read1_coords", doc=InputDocumentation(doc="specify coordinates 'start,end' of read 1 to search.\nFor example, '0,16': starts at 0, stops at 15.\nNucleotide bases outside the range will be masked as\nlower case in output. Default (0,16)")), ToolInput(tag="in_cb_mismatches", input_type=Int(optional=True), prefix="--cb_mismatches", doc=InputDocumentation(doc="specify cell barcode mismatching threshold. Default\n(1)")), ToolInput(tag="in_cb_num_n_threshold", input_type=Int(optional=True), prefix="--cb_num_n_threshold", doc=InputDocumentation(doc="specify maximum number of ambiguous nucleotides\nallowed for read 1. Default (3)")), ToolInput(tag="in_aligner", input_type=String(optional=True), prefix="--aligner", doc=InputDocumentation(doc="specify aligner for read 2. Default (bwa)")), ToolInput(tag="in_mapping_quality", input_type=Int(optional=True), prefix="--mapping_quality", doc=InputDocumentation(doc="specify minimal mapping quality required for feature\nmapping. Default (10)")), ToolInput(tag="in_umi_start", input_type=Int(optional=True), prefix="--umi_start", doc=InputDocumentation(doc="specify expected UMI starting postion on read 1.\nDefault (16)")), ToolInput(tag="in_umi_length", input_type=Int(optional=True), prefix="--umi_length", doc=InputDocumentation(doc="specify the length of UMIs on read 1. Reads with UMI\nlength less than this value will be discarded. Default\n(12)")), ToolInput(tag="in_umi_mismatches", input_type=Int(optional=True), prefix="--umi_mismatches", doc=InputDocumentation(doc="specify the maximun edit distance allowed for UMIs on\nread 1 for deduplication. Default (1)")), ToolInput(tag="in_umi_de_duplication_method", input_type=String(optional=True), prefix="--umi_deduplication_method", doc=InputDocumentation(doc="specify UMI deduplication method (powered by UMI-\ntools. Smith, T., et al. 2017). Default (directional)")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="--output_directory", doc=InputDocumentation(doc="specify a temp directory. Default (./barcode_mapping)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="specify number of threads to launch. The default is to\nuse all available")), ToolInput(tag="in_num_n_ref", input_type=Int(optional=True), prefix="--num_n_ref", doc=InputDocumentation(doc="specify the number of Ns to separate sequences\nbelonging to the same feature. Default (0)\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="specify an output file")), ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="specify a temp directory. Default (./barcode_mapping)"))], container="quay.io/biocontainers/fba:0.0.10.post1--pyhdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fba_Map_V0_1_0().translate("wdl")

