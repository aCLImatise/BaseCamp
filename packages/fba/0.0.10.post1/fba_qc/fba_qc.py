from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Directory

Fba_Qc_V0_1_0 = CommandToolBuilder(tool="fba_qc", base_command=["fba", "qc"], inputs=[ToolInput(tag="in_read_one", input_type=Int(optional=True), prefix="--read1", doc=InputDocumentation(doc="specify fastq file for read 1")), ToolInput(tag="in_read_two", input_type=Int(optional=True), prefix="--read2", doc=InputDocumentation(doc="specify fastq file for read 2. If only read 2 file is\nprovided, bulk mode is enabled (skipping arguments\n'-1', ' -w', '-cb_m', '-r1_coords', must provide\n'-r2_coords' and '-fb_m'). In bulk mode, reads 2 will\nbe searched against reference feature barcodes and\nread count for each feature barcode will be summarized")), ToolInput(tag="in_whitelist", input_type=String(optional=True), prefix="--whitelist", doc=InputDocumentation(doc="specify a whitelist of accepted cell barcodes")), ToolInput(tag="in_feature_ref", input_type=String(optional=True), prefix="--feature_ref", doc=InputDocumentation(doc="specify a reference of feature barcodes")), ToolInput(tag="in_read_one_coords", input_type=Int(optional=True), prefix="--read1_coords", doc=InputDocumentation(doc="specify coordinates 'start,end' of read 1 to search\n(doesn't need to be the exact expected barcode range).\nThe default is to use all the nucleotide bases.\nNucleotide bases outside the range will be masked as\nlower case in output")), ToolInput(tag="in_read_two_coords", input_type=Int(optional=True), prefix="--read2_coords", doc=InputDocumentation(doc="see '-r1_coords'")), ToolInput(tag="in_cb_mismatches", input_type=Int(optional=True), prefix="--cb_mismatches", doc=InputDocumentation(doc="specify cell barcode mismatching threshold. Default\n(3)")), ToolInput(tag="in_fb_mismatches", input_type=Int(optional=True), prefix="--fb_mismatches", doc=InputDocumentation(doc="specify feature barcode mismatching threshold. Default\n(3)")), ToolInput(tag="in_cb_num_n_threshold", input_type=Int(optional=True), prefix="--cb_num_n_threshold", doc=InputDocumentation(doc="specify maximum number of ambiguous nucleotides\nallowed for read 1. The default is no limit")), ToolInput(tag="in_fb_num_n_threshold", input_type=Int(optional=True), prefix="--fb_num_n_threshold", doc=InputDocumentation(doc="specify maximum number of ambiguous nucleotides\nallowed for read 2. The default is no limit")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="specify number of threads for barcode extraction.\nDefault is to use all available")), ToolInput(tag="in_num_reads", input_type=Int(optional=True), prefix="--num_reads", doc=InputDocumentation(doc="specify number of reads for analysis. Set to (None)\nwill analyze all the reads. Default (100,000)")), ToolInput(tag="in_chunk_size", input_type=Int(optional=True), prefix="--chunk_size", doc=InputDocumentation(doc="specify the chunk size for multiprocessing. Default\n(50,000)")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="--output_directory", doc=InputDocumentation(doc="specify a output directory. Default (./qc)\n"))], outputs=[ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="specify a output directory. Default (./qc)\n"))], container="quay.io/biocontainers/fba:0.0.10.post1--pyhdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fba_Qc_V0_1_0().translate("wdl")

