from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, File, Boolean, Directory, Int

Fargene_V0_1_0 = CommandToolBuilder(tool="fargene", base_command=["fargene"], inputs=[ToolInput(tag="in_in_files", input_type=Array(t=String(), optional=True), prefix="--infiles", doc=InputDocumentation(doc="Input file(s) to be searched. Could either be in FASTA\nor FASTQ format.")), ToolInput(tag="in_hmm_model", input_type=File(optional=True), prefix="--hmm-model", doc=InputDocumentation(doc="The Hidden Markov Model that should be used to analyse\nthe data. Could either be one of the pre-defined\nmodels or the path to a custom HMM.")), ToolInput(tag="in_score", input_type=String(optional=True), prefix="--score", doc=InputDocumentation(doc="The threshold score for a sequence to be classified as\na (almost) complete gene (default: None).")), ToolInput(tag="in_meta", input_type=Boolean(optional=True), prefix="--meta", doc=InputDocumentation(doc="If the input data is paired end metagenomic data\n(default: False).")), ToolInput(tag="in_meta_score", input_type=String(optional=True), prefix="--meta-score", doc=InputDocumentation(doc="The threshold score for a fragment to be classified as\na positive. Expressed as score per amino acid\n(default: None).")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="The output directory for the whole run (default:\n./fargene_output).")), ToolInput(tag="in_force", input_type=Directory(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite output directory if it exists (default:\nFalse).")), ToolInput(tag="in_tmp_dir", input_type=Directory(optional=True), prefix="--tmp-dir", doc=InputDocumentation(doc="Directory for (sometimes large) intermediate files.\n(default: OUT_DIR/tmpdir)")), ToolInput(tag="in_protein", input_type=Boolean(optional=True), prefix="--protein", doc=InputDocumentation(doc="If the input sequence(s) is amino acids (default:\nFalse).")), ToolInput(tag="in_processes", input_type=Int(optional=True), prefix="--processes", doc=InputDocumentation(doc="Number of processes to be used when processing\nmetagenomic data (default: 1).")), ToolInput(tag="in_min_orf_length", input_type=Int(optional=True), prefix="--min-orf-length", doc=InputDocumentation(doc="The minimal length for a retrieved predicted ORF (nt).\n(default: 90% of the length of the chosen hmm.)")), ToolInput(tag="in_retrieve_whole", input_type=Boolean(optional=True), prefix="--retrieve-whole", doc=InputDocumentation(doc="Use this flag if the whole sequence where a hit is\ndetected should be retrieved (default: False).")), ToolInput(tag="in_no_orf_predict", input_type=Boolean(optional=True), prefix="--no-orf-predict", doc=InputDocumentation(doc="Do not perform ORF prediction.")), ToolInput(tag="in_no_quality_filtering", input_type=Boolean(optional=True), prefix="--no-quality-filtering", doc=InputDocumentation(doc="Use if no quality control should be performed on the\nmetagenomic data (default: False).")), ToolInput(tag="in_no_assembly", input_type=Boolean(optional=True), prefix="--no-assembly", doc=InputDocumentation(doc="Use if you want to skip the assembly and retrieval of\ncontigs for metagenomic data (default: False).")), ToolInput(tag="in_orf_finder", input_type=Boolean(optional=True), prefix="--orf-finder", doc=InputDocumentation(doc="Use NCBI ORFfinder instead of prodigal for ORF\nprediction of genomes/contigs (default: False).")), ToolInput(tag="in_store_peptides", input_type=Boolean(optional=True), prefix="--store-peptides", doc=InputDocumentation(doc="Store the translated sequences. Useful if you plan to\nredo the analysis using a different model and want to\nskip the preprocessing steps (default: False).")), ToolInput(tag="in_rerun", input_type=Boolean(optional=True), prefix="--rerun", doc=InputDocumentation(doc="Use of you want to redo the analysis or do the\nanalysis using a different model and have kept either\nthe nucletide or amino acid sequences. Please note\nthat this only works if the input data is the same for\nboth runs (default: False).")), ToolInput(tag="in_amino_dir", input_type=String(optional=True), prefix="--amino-dir", doc=InputDocumentation(doc="Where the amino acid sequences generated by the method\nare located. Only to be used in combination with\n--rerun")), ToolInput(tag="in_fast_a_dir", input_type=String(optional=True), prefix="--fasta-dir", doc=InputDocumentation(doc="Where the nucleotide sequences in FASTA generated by\nprevious runs of the method are located. Only to be\nused in combination with --rerun")), ToolInput(tag="in_translation_format", input_type=String(optional=True), prefix="--translation-format", doc=InputDocumentation(doc="The translation format that transeq should use.\n(default: pearson)")), ToolInput(tag="in_loglevel", input_type=String(optional=True), prefix="--loglevel", doc=InputDocumentation(doc="Set logging level (default: INFO).")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logfile", doc=InputDocumentation(doc="Logfile (default: fargene_analysis.log)."))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="The output directory for the whole run (default:\n./fargene_output).")), ToolOutput(tag="out_force", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Overwrite output directory if it exists (default:\nFalse)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fargene_V0_1_0().translate("wdl", allow_empty_container=True)

