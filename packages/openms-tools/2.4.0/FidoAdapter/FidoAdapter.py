from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int

Fidoadapter_V0_1_0 = CommandToolBuilder(tool="FidoAdapter", base_command=["FidoAdapter"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*                 Input: identification results (valid formats: 'idXML')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*                Output: identification results with scored/grouped proteins (valid formats: 'idXML')")), ToolInput(tag="in_fido_executable", input_type=File(optional=True), prefix="-fido_executable", doc=InputDocumentation(doc="*    Path to the Fido executable to use; may be empty if the executable is globally available.")), ToolInput(tag="in_fido_cp_executable", input_type=File(optional=True), prefix="-fidocp_executable", doc=InputDocumentation(doc="*  Path to the FidoChooseParameters executable to use; may be empty if the executable is globally available.")), ToolInput(tag="in_separate_runs", input_type=Boolean(optional=True), prefix="-separate_runs", doc=InputDocumentation(doc="Process multiple protein identification runs in the input separately, don't merge them. Merging results in loss of descriptive information of the single protein identification runs.")), ToolInput(tag="in_greedy_group_resolution", input_type=Boolean(optional=True), prefix="-greedy_group_resolution", doc=InputDocumentation(doc="Post-process Fido output with greedy resolution of shared peptides based on the protein probabilities. Also adds the resolved ambiguity groups to output.")), ToolInput(tag="in_no_cleanup", input_type=Boolean(optional=True), prefix="-no_cleanup", doc=InputDocumentation(doc="Omit clean-up of peptide sequences (removal of non-letter characters, replacement of I with L)")), ToolInput(tag="in_all_psms", input_type=Boolean(optional=True), prefix="-all_PSMs", doc=InputDocumentation(doc="Consider all PSMs of each peptide, instead of only the best one")), ToolInput(tag="in_group_level", input_type=Boolean(optional=True), prefix="-group_level", doc=InputDocumentation(doc="Perform inference on protein group level (instead of individual protein level). This will lead to higher probabilities for (bigger) protein groups.")), ToolInput(tag="in_log_two_states", input_type=Int(optional=True), prefix="-log2_states", doc=InputDocumentation(doc="Binary logarithm of the max. number of connected states in a subgraph. For a value N, subgraphs that are bigger than 2^N will be split up, sacrificing accuracy for runtime. '0' uses the default (18). (default: '0' min: '0')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fidoadapter_V0_1_0().translate("wdl", allow_empty_container=True)

