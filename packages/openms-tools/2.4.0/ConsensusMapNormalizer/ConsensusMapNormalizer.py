from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Consensusmapnormalizer_V0_1_0 = CommandToolBuilder(tool="ConsensusMapNormalizer", base_command=["ConsensusMapNormalizer"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*               Input file (valid formats: 'consensusXML')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*              Output file (valid formats: 'consensusXML')")), ToolInput(tag="in_algorithm_type", input_type=String(optional=True), prefix="-algorithm_type", doc=InputDocumentation(doc="The normalization algorithm that is applied. 'robust_regression' scales each map by a fator computed from the ratios of non-differential background features (as determined by the ratio_threshold parameter), 'quantile' performs quantile normalization, 'median' scales all maps to the same median intensity, 'median_shift' shifts the median instead of scaling (WARNING: if you have regular, log-normal MS data, 'median_shift' is probably the wrong choice. Use only if you know what you're doing!) (default: 'robust_regression' valid: 'robust_regression', 'median', 'median_shift', 'quantile')")), ToolInput(tag="in_ratio_threshold", input_type=Int(optional=True), prefix="-ratio_threshold", doc=InputDocumentation(doc="Only for 'robust_regression': the parameter is used to distinguish between non-outliers (ratio_threshold < intensity ratio < 1/ratio_threshold) and outliers. (default: '0.67' min: '0.001' max: '1')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*              Output file (valid formats: 'consensusXML')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Consensusmapnormalizer_V0_1_0().translate("wdl", allow_empty_container=True)

