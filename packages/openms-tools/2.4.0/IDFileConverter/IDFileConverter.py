from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Idfileconverter_V0_1_0 = CommandToolBuilder(tool="IDFileConverter", base_command=["IDFileConverter"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*           Input file or directory containing the data to convert. This may be:\n- a single file in a multi-purpose XML format (.pepXML, .protXML, .idXML, .mzid),\n- a single file in a search engine-specific format (Mascot: .mascotXML, OMSSA: .omssaXML, X! Tandem: .xml, Percolator: .psms, xQuest: .xquest.xml),\n- a single text file (tab separated) with one line for all peptide sequences matching a spectrum (top N hits),\n- for Sequest results, a directory containing .out files.\n(valid formats: 'pepXML', 'protXML', 'mascotXML', 'omssaXML', 'xml', 'psms', 'tsv', 'idXML', 'mzid', 'xquest.xml')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*               Output file (valid formats: 'idXML', 'mzid', 'pepXML', 'FASTA', 'xquest.xml')")), ToolInput(tag="in_out_type", input_type=File(optional=True), prefix="-out_type", doc=InputDocumentation(doc="Output file type (default: determined from file extension) (valid: 'idXML', 'mzid', 'pepXML', 'FASTA', 'xquest.xml')")), ToolInput(tag="in_mz_file", input_type=File(optional=True), prefix="-mz_file", doc=InputDocumentation(doc="[pepXML, Sequest, Mascot, X! Tandem, mzid, Percolator only] Retention times and native spectrum ids (spectrum_references) will be looked up in this file (valid formats: 'mzML', 'mzXML', 'mzData')")), ToolInput(tag="in_mz_name", input_type=File(optional=True), prefix="-mz_name", doc=InputDocumentation(doc="[pepXML only] Experiment filename/path (extension will be removed) to match in the pepXML file ('base_name' attribute). Only necessary if different from 'mz_file'.")), ToolInput(tag="in_peptide_prophet_analyzed", input_type=Boolean(optional=True), prefix="-peptideprophet_analyzed", doc=InputDocumentation(doc="[pepXML output only] Write output in the format of a PeptideProphet analysis result. By default a 'raw' pepXML is produced that contains only search engine results.")), ToolInput(tag="in_score_type", input_type=String(optional=True), prefix="-score_type", doc=InputDocumentation(doc="[Percolator only] Which of the Percolator scores to report as 'the' score for a peptide hit (default: 'qvalue' valid: 'qvalue', 'PEP', 'score')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*               Output file (valid formats: 'idXML', 'mzid', 'pepXML', 'FASTA', 'xquest.xml')")), ToolOutput(tag="out_out_type", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_type", type_hint=File()), doc=OutputDocumentation(doc="Output file type (default: determined from file extension) (valid: 'idXML', 'mzid', 'pepXML', 'FASTA', 'xquest.xml')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Idfileconverter_V0_1_0().translate("wdl", allow_empty_container=True)

