from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Openswathworkflow_V0_1_0 = CommandToolBuilder(tool="OpenSwathWorkflow", base_command=["OpenSwathWorkflow"], inputs=[ToolInput(tag="in_in", input_type=String(optional=True), prefix="-in", doc=InputDocumentation(doc="*                    Input files separated by blank (valid formats: 'mzML', 'mzXML', 'sqMass')")), ToolInput(tag="in_tr", input_type=File(optional=True), prefix="-tr", doc=InputDocumentation(doc="*                     Transition file ('TraML','tsv','pqp') (valid formats: 'traML', 'tsv', 'pqp')")), ToolInput(tag="in_tr_type", input_type=File(optional=True), prefix="-tr_type", doc=InputDocumentation(doc="Input file type -- default: determined from file extension or content\n(valid: 'traML', 'tsv', 'pqp')")), ToolInput(tag="in_tr_irt", input_type=File(optional=True), prefix="-tr_irt", doc=InputDocumentation(doc="Transition file ('TraML') (valid formats: 'traML')")), ToolInput(tag="in_out_features", input_type=File(optional=True), prefix="-out_features", doc=InputDocumentation(doc="Output file (valid formats: 'featureXML')")), ToolInput(tag="in_out_tsv", input_type=File(optional=True), prefix="-out_tsv", doc=InputDocumentation(doc="TSV output file (mProphet compatible TSV file) (valid formats: 'tsv')")), ToolInput(tag="in_out_osw", input_type=File(optional=True), prefix="-out_osw", doc=InputDocumentation(doc="OSW output file (PyProphet compatible SQLite file) (valid formats: 'osw')")), ToolInput(tag="in_rt_extraction_window", input_type=Int(optional=True), prefix="-rt_extraction_window", doc=InputDocumentation(doc="Only extract RT around this value (-1 means extract over the whole range, a value of 600 means to extract around +/- 300 s of the expected elution). (default: '600')")), ToolInput(tag="in_ion_mobility_window", input_type=Int(optional=True), prefix="-ion_mobility_window", doc=InputDocumentation(doc="Extraction window in ion mobility dimension (in milliseconds). This is the full window size, e.g. a value of 10 milliseconds would extract 5 milliseconds on either side. (default: '-1')")), ToolInput(tag="in_mz_extraction_window", input_type=Int(optional=True), prefix="-mz_extraction_window", doc=InputDocumentation(doc="Extraction window used (in Thomson, to use ppm see -ppm flag) (default: '0.05' min: '0')")), ToolInput(tag="in_ppm", input_type=Boolean(optional=True), prefix="-ppm", doc=InputDocumentation(doc="M/z extraction_window is in ppm")), ToolInput(tag="in_sonar", input_type=Boolean(optional=True), prefix="-sonar", doc=InputDocumentation(doc="Data is scanning SWATH data")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out_features", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_features", type_hint=File()), doc=OutputDocumentation(doc="Output file (valid formats: 'featureXML')")), ToolOutput(tag="out_out_tsv", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_tsv", type_hint=File()), doc=OutputDocumentation(doc="TSV output file (mProphet compatible TSV file) (valid formats: 'tsv')")), ToolOutput(tag="out_out_osw", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_osw", type_hint=File()), doc=OutputDocumentation(doc="OSW output file (PyProphet compatible SQLite file) (valid formats: 'osw')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Openswathworkflow_V0_1_0().translate("wdl", allow_empty_container=True)

