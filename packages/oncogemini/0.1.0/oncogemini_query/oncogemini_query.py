from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int

Oncogemini_Query_V0_1_0 = CommandToolBuilder(tool="oncogemini_query", base_command=["oncogemini", "query"], inputs=[ToolInput(tag="in_query_issued_database", input_type=String(optional=True), prefix="-q", doc=InputDocumentation(doc="The query to be issued to the database")), ToolInput(tag="in_gt_filter", input_type=String(optional=True), prefix="--gt-filter", doc=InputDocumentation(doc="Restrictions to apply to genotype values")), ToolInput(tag="in_show_samples", input_type=Boolean(optional=True), prefix="--show-samples", doc=InputDocumentation(doc="Add a column of all sample names with a variant to\neach variant.")), ToolInput(tag="in_show_families", input_type=Boolean(optional=True), prefix="--show-families", doc=InputDocumentation(doc="Add a column listing all of the families with a\nvariant to each variant.")), ToolInput(tag="in_family_wise", input_type=Boolean(optional=True), prefix="--family-wise", doc=InputDocumentation(doc="Perform the sample-filter on a family-wise basis.")), ToolInput(tag="in_min_kindreds", input_type=Int(optional=True), prefix="--min-kindreds", doc=InputDocumentation(doc="Minimum number of families for a variant passing a\nfamily-wise filter to be in.")), ToolInput(tag="in_sample_delim", input_type=String(optional=True), prefix="--sample-delim", doc=InputDocumentation(doc="The delimiter to be used with the --show-samples\noption.")), ToolInput(tag="in_header", input_type=Boolean(optional=True), prefix="--header", doc=InputDocumentation(doc="Add a header of column names to the output.")), ToolInput(tag="in_sample_filter", input_type=String(optional=True), prefix="--sample-filter", doc=InputDocumentation(doc="SQL filter to use to filter the sample table")), ToolInput(tag="in_in", input_type=Boolean(optional=True), prefix="--in", doc=InputDocumentation(doc="[{all,none,any,only,not} [{all,none,any,only,not} ...]]\nA variant must be in either all, none or any samples\npassing the --sample-query filter.")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="Format of output (JSON, TPED or default)")), ToolInput(tag="in_region", input_type=Int(optional=True), prefix="--region", doc=InputDocumentation(doc="Restrict query to this region, e.g. chr1:10-20.")), ToolInput(tag="in_carrier_summary_by_phenotype", input_type=String(optional=True), prefix="--carrier-summary-by-phenotype", doc=InputDocumentation(doc="Output columns of counts of carriers and non-carriers\nstratified by the given sample phenotype column\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Oncogemini_Query_V0_1_0().translate("wdl", allow_empty_container=True)

