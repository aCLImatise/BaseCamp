from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Directory

Blockclust_Py_V0_1_0 = CommandToolBuilder(tool="blockclust.py", base_command=["blockclust.py"], inputs=[ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Mode of operationPRE = Preprocessing mode. convert\nfrom reads BAM to tags BED.ANALYSIS = Clustering\nand/or Classification mode.POST = Post processing such\nas plotting and annotation with known Rfam families\netc. (default: ANALYSIS)")), ToolInput(tag="in_accept", input_type=String(optional=True), prefix="--accept", doc=InputDocumentation(doc="Annotations of known ncRNAs in BED format (default:\nNone)")), ToolInput(tag="in_reject", input_type=String(optional=True), prefix="--reject", doc=InputDocumentation(doc="Annotations of other known transcripts (eg. protein\ncoding) in BED format (default: None)")), ToolInput(tag="in_test_input", input_type=String(optional=True), prefix="--test_input", doc=InputDocumentation(doc="Output of preprocessing mode as input. (default: None)")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Output directory path for the whole analysis (default:\nNone)")), ToolInput(tag="in_config", input_type=File(optional=True), prefix="--config", doc=InputDocumentation(doc="blockClust configuration file. (default:\n/usr/local/share/blockclust_data/blockclust.config)")), ToolInput(tag="in_classify", input_type=Boolean(optional=True), prefix="--classify", doc=InputDocumentation(doc="Classify the input blockgroups (default: False)")), ToolInput(tag="in_cl_mode", input_type=String(optional=True), prefix="--clmode", doc=InputDocumentation(doc="Type of classificationMODEL = Model based\nclassificationNEAREST= Nearest neighbour\nclassification (default: MODEL)")), ToolInput(tag="in_model_dir", input_type=Directory(optional=True), prefix="--model_dir", doc=InputDocumentation(doc="Directory containing trained models for classification\n(default: /usr/local/share/blockclust_data/models)")), ToolInput(tag="in_cm_search_out", input_type=String(optional=True), prefix="--cmsearch_out", doc=InputDocumentation(doc="Output of cmsearch tool (default: None)")), ToolInput(tag="in_clust_bed", input_type=File(optional=True), prefix="--clust_bed", doc=InputDocumentation(doc="BED file containing clusters from ANALYSIS mode\n(default: None)")), ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="Input bam file (default: None)")), ToolInput(tag="in_tags_bed", input_type=File(optional=True), prefix="--tags_bed", doc=InputDocumentation(doc="BED file of tags (default: None)")), ToolInput(tag="in_sim_tab", input_type=File(optional=True), prefix="--sim_tab", doc=InputDocumentation(doc="Tabular file of pairwise blockgroup similarities\n(default: None)")), ToolInput(tag="in_rf_am_map", input_type=String(optional=True), prefix="--rfam_map", doc=InputDocumentation(doc="Mapping of Rfam families (default:\n/usr/local/share/blockclust_data/rfam_map.txt)")), ToolInput(tag="in_no_chr", input_type=Boolean(optional=True), prefix="--no_chr", doc=InputDocumentation(doc="Input blockgroups do not contain 'chr' in the begining\nof chromosome ids (for eg. Ensembl database do not use\n'chr'). (default: False)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output directory path for the whole analysis (default:\nNone)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Blockclust_Py_V0_1_0().translate("wdl", allow_empty_container=True)

