from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, Float

Mason_Materializer_V0_1_0 = CommandToolBuilder(tool="mason_materializer", base_command=["mason_materializer"], inputs=[ToolInput(tag="in_version_check", input_type=Boolean(optional=True), prefix="--version-check", doc=InputDocumentation(doc="Turn this option off to disable version update notifications of the\napplication. One of 1, ON, TRUE, T, YES, 0, OFF, FALSE, F, and NO.\nDefault: 1.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Low verbosity.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Higher verbosity.")), ToolInput(tag="in_very_verbose", input_type=Boolean(optional=True), prefix="--very-verbose", doc=InputDocumentation(doc="Highest verbosity.")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Seed for random number generation. Default: 0.")), ToolInput(tag="in_meth_seed", input_type=Int(optional=True), prefix="--meth-seed", doc=InputDocumentation(doc="Seed for methylation simulation random number generation. Default:\n0.")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Output of materialized contigs. Valid filetypes are: .sam[.*],\n.raw[.*], .frn[.*], .fq[.*], .fna[.*], .ffn[.*], .fastq[.*],\n.fasta[.*], .faa[.*], .fa[.*], and .bam, where * is any of the\nfollowing extensions: gz and bgzf for transparent (de)compression.")), ToolInput(tag="in_out_breakpoints", input_type=File(optional=True), prefix="--out-breakpoints", doc=InputDocumentation(doc="TSV file to write breakpoints in variants to. Valid filetypes are:\n.txt and .tsv.")), ToolInput(tag="in_haplotype_name_sep", input_type=Int(optional=True), prefix="--haplotype-name-sep", doc=InputDocumentation(doc="String separating contig name from haplotype number. Default: /.")), ToolInput(tag="in_meth_fast_a_in", input_type=File(optional=True), prefix="--meth-fasta-in", doc=InputDocumentation(doc="FASTA file with methylation levels of the input file. Valid\nfiletypes are: .sam[.*], .raw[.*], .gbk[.*], .frn[.*], .fq[.*],\n.fna[.*], .ffn[.*], .fastq[.*], .fasta[.*], .faa[.*], .fa[.*],\n.embl[.*], and .bam, where * is any of the following extensions: gz\nand bgzf for transparent (de)compression.")), ToolInput(tag="in_meth_fast_a_out", input_type=File(optional=True), prefix="--meth-fasta-out", doc=InputDocumentation(doc="FASTA file with methylation levels of the output file. Valid\nfiletypes are: .sam[.*], .raw[.*], .frn[.*], .fq[.*], .fna[.*],\n.ffn[.*], .fastq[.*], .fasta[.*], .faa[.*], .fa[.*], and .bam, where\n* is any of the following extensions: gz and bgzf for transparent\n(de)compression.")), ToolInput(tag="in_input_reference", input_type=File(optional=True), prefix="--input-reference", doc=InputDocumentation(doc="Path to FASTA file to read the reference from. Valid filetypes are:\n.sam[.*], .raw[.*], .gbk[.*], .frn[.*], .fq[.*], .fna[.*], .ffn[.*],\n.fastq[.*], .fasta[.*], .faa[.*], .fa[.*], .embl[.*], and .bam,\nwhere * is any of the following extensions: gz and bgzf for\ntransparent (de)compression.")), ToolInput(tag="in_input_vcf", input_type=File(optional=True), prefix="--input-vcf", doc=InputDocumentation(doc="Path to the VCF file with variants to apply. Valid filetype is:\n.vcf[.*], where * is any of the following extensions: gz and bgzf\nfor transparent (de)compression.")), ToolInput(tag="in_methylation_levels", input_type=Boolean(optional=True), prefix="--methylation-levels", doc=InputDocumentation(doc="Enable methylation level simulation.")), ToolInput(tag="in_meth_cg_mu", input_type=Float(optional=True), prefix="--meth-cg-mu", doc=InputDocumentation(doc="Median of beta distribution for methylation level of CpG loci. In\nrange [0..1]. Default: 0.6.")), ToolInput(tag="in_meth_cg_sigma", input_type=Float(optional=True), prefix="--meth-cg-sigma", doc=InputDocumentation(doc="Standard deviation of beta distribution for methylation level of CpG\nloci. In range [0..1]. Default: 0.03.")), ToolInput(tag="in_meth_chg_mu", input_type=Float(optional=True), prefix="--meth-chg-mu", doc=InputDocumentation(doc="Median of beta distribution for methylation level of CHG loci. In\nrange [0..1]. Default: 0.08.")), ToolInput(tag="in_meth_chg_sigma", input_type=Float(optional=True), prefix="--meth-chg-sigma", doc=InputDocumentation(doc="Standard deviation of beta distribution for methylation level of CHG\nloci. In range [0..1]. Default: 0.008.")), ToolInput(tag="in_meth_chh_mu", input_type=Float(optional=True), prefix="--meth-chh-mu", doc=InputDocumentation(doc="Median of beta distribution for methylation level of CHH loci. In\nrange [0..1]. Default: 0.05.")), ToolInput(tag="in_meth_chh_sigma", input_type=Float(optional=True), prefix="--meth-chh-sigma", doc=InputDocumentation(doc="Standard deviation of beta distribution for methylation level of CHH\nloci. In range [0..1]. Default: 0.005."))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output of materialized contigs. Valid filetypes are: .sam[.*],\n.raw[.*], .frn[.*], .fq[.*], .fna[.*], .ffn[.*], .fastq[.*],\n.fasta[.*], .faa[.*], .fa[.*], and .bam, where * is any of the\nfollowing extensions: gz and bgzf for transparent (de)compression.")), ToolOutput(tag="out_out_breakpoints", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_breakpoints", type_hint=File()), doc=OutputDocumentation(doc="TSV file to write breakpoints in variants to. Valid filetypes are:\n.txt and .tsv.")), ToolOutput(tag="out_meth_fast_a_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_meth_fast_a_out", type_hint=File()), doc=OutputDocumentation(doc="FASTA file with methylation levels of the output file. Valid\nfiletypes are: .sam[.*], .raw[.*], .frn[.*], .fq[.*], .fna[.*],\n.ffn[.*], .fastq[.*], .fasta[.*], .faa[.*], .fa[.*], and .bam, where\n* is any of the following extensions: gz and bgzf for transparent\n(de)compression."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mason_Materializer_V0_1_0().translate("wdl", allow_empty_container=True)

