from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Float, Boolean

Mosaikaligner_V0_1_0 = CommandToolBuilder(tool="MosaikAligner", base_command=["MosaikAligner"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="the input read file")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="the output alignment file")), ToolInput(tag="in_ibs", input_type=File(optional=True), prefix="-ibs", doc=InputDocumentation(doc="enables colorspace to basespace conversion\nusing the supplied BASESPACE reference\narchive")), ToolInput(tag="in_hs", input_type=Int(optional=True), prefix="-hs", doc=InputDocumentation(doc="hash size [4 - 32]. def: 15")), ToolInput(tag="in_ls", input_type=String(optional=True), prefix="-ls", doc=InputDocumentation(doc="enable local alignment search for PE reads")), ToolInput(tag="in_mhp", input_type=String(optional=True), prefix="-mhp", doc=InputDocumentation(doc="the maximum # of positions stored per seed")), ToolInput(tag="in_mhr", input_type=String(optional=True), prefix="-mhr", doc=InputDocumentation(doc="the maximum # of regions for aligning")), ToolInput(tag="in_min", input_type=Int(optional=True), prefix="-min", doc=InputDocumentation(doc="the minimum # of aligned nucleotides")), ToolInput(tag="in_min_p", input_type=Float(optional=True), prefix="-minp", doc=InputDocumentation(doc="the minimum alignment percentage [0.0 -\n1.0]")), ToolInput(tag="in_mm", input_type=String(optional=True), prefix="-mm", doc=InputDocumentation(doc="the # of mismatches allowed")), ToolInput(tag="in_mmp", input_type=Float(optional=True), prefix="-mmp", doc=InputDocumentation(doc="the percentage of mismatches allowed [0.0\n- 1.0]")), ToolInput(tag="in_ncg", input_type=Boolean(optional=True), prefix="-ncg", doc=InputDocumentation(doc="not count gaps as mismatches")), ToolInput(tag="in_bw", input_type=Int(optional=True), prefix="-bw", doc=InputDocumentation(doc="specifies the Smith-Waterman bandwidth.\ndef: 9")), ToolInput(tag="in_lm", input_type=Boolean(optional=True), prefix="-lm", doc=InputDocumentation(doc="enable low-memory functions")), ToolInput(tag="in_kd", input_type=Boolean(optional=True), prefix="-kd", doc=InputDocumentation(doc="keeps the keys file on disk")), ToolInput(tag="in_pd", input_type=Boolean(optional=True), prefix="-pd", doc=InputDocumentation(doc="keeps the positions file on disk")), ToolInput(tag="in_sref", input_type=String(optional=True), prefix="-sref", doc=InputDocumentation(doc="specifies the prefixes of special")), ToolInput(tag="in_omi", input_type=Boolean(optional=True), prefix="-omi", doc=InputDocumentation(doc="output chromosome ids and positions of\nmultiply mapped alignments in the\nmultiple.bam")), ToolInput(tag="in_om", input_type=Boolean(optional=True), prefix="-om", doc=InputDocumentation(doc="output complete multiply mapped alignments\nin the multiple.bam")), ToolInput(tag="in_zn", input_type=Boolean(optional=True), prefix="-zn", doc=InputDocumentation(doc="output zn tags")), ToolInput(tag="in_gop", input_type=Float(optional=True), prefix="-gop", doc=InputDocumentation(doc="the gap open penalty. def: 15.00")), ToolInput(tag="in_gep", input_type=Float(optional=True), prefix="-gep", doc=InputDocumentation(doc="the gap extend penalty. def: 1.00")), ToolInput(tag="in_h_gop", input_type=Float(optional=True), prefix="-hgop", doc=InputDocumentation(doc="enables the homopolymer gop. def: 4.00")), ToolInput(tag="in_all", input_type=String(), position=0, doc=InputDocumentation(doc="-m <mode>                         alignment mode: [unique, all]. def: all")), ToolInput(tag="in_references", input_type=String(), position=0, doc=InputDocumentation(doc="-srefn <hashes>                   the maximum special hashes")), ToolInput(tag="in_one_zero_dot_zero_zero", input_type=Float(), position=0, doc=InputDocumentation(doc="-mms <mismatch score>             the mismatch score. def: -9.00"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="the output alignment file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mosaikaligner_V0_1_0().translate("wdl", allow_empty_container=True)

