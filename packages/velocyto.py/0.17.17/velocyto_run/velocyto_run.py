from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, String, Int

Velocyto_Run_V0_1_0 = CommandToolBuilder(tool="velocyto_run", base_command=["velocyto", "run"], inputs=[ToolInput(tag="in_bc_file", input_type=File(optional=True), prefix="--bcfile", doc=InputDocumentation(doc="Valid barcodes file, to filter the bam. If --bcfile is not specified all the cell barcodes will be included.\nCell barcodes should be specified in the bcfile as the `CB` tag for each read")), ToolInput(tag="in_output_folder", input_type=Directory(optional=True), prefix="--outputfolder", doc=InputDocumentation(doc="Output folder, if it does not exist it will be created.")), ToolInput(tag="in_sample_id", input_type=File(optional=True), prefix="--sampleid", doc=InputDocumentation(doc="The sample name that will be used to retrieve informations from metadatatable")), ToolInput(tag="in_metadata_table", input_type=File(optional=True), prefix="--metadatatable", doc=InputDocumentation(doc="Table containing metadata of the various samples (csv formatted, rows are samples and cols are entries)")), ToolInput(tag="in_mask", input_type=File(optional=True), prefix="--mask", doc=InputDocumentation(doc=".gtf file containing intervals to mask")), ToolInput(tag="in_one_file_per_cell", input_type=Boolean(optional=True), prefix="--onefilepercell", doc=InputDocumentation(doc="If this flag is used every bamfile passed is interpreted as an independent cell, otherwise multiple files are interpreted as batch of different cells to be analyzed together.\nImportant: cells reads should not be distributed over multiple bamfiles is not supported!!\n(default: off)")), ToolInput(tag="in_logic", input_type=String(optional=True), prefix="--logic", doc=InputDocumentation(doc="The logic to use for the filtering (default: Default)")), ToolInput(tag="in_without_umi", input_type=Boolean(optional=True), prefix="--without-umi", doc=InputDocumentation(doc="If this flag is used the data is assumed UMI-less and reads are counted instead of molecules (default: off)")), ToolInput(tag="in_umi_extension", input_type=Int(optional=True), prefix="--umi-extension", doc=InputDocumentation(doc="In case UMI is too short to guarantee uniqueness (without information from the ampping) set this parameter to `chr`, `Gene` ro `[N]bp`\nIf set to `chr` the mapping position (binned to 10Gb intervals) will be appended to `UB` (ideal for InDrops+dropEst). If set to\n`Gene` then the `GX` tag will be appended to the `UB` tag.\nIf set to `[N]bp` the first N bases of the sequence will be used to extend `UB` (ideal for STRT). (Default: `no`)")), ToolInput(tag="in_multimap", input_type=Boolean(optional=True), prefix="--multimap", doc=InputDocumentation(doc="Consider not unique mappings (not reccomended)")), ToolInput(tag="in_sam_tools_threads", input_type=Int(optional=True), prefix="--samtools-threads", doc=InputDocumentation(doc="The number of threads to use to sort the bam by cellID file using samtools")), ToolInput(tag="in_sam_tools_memory", input_type=Int(optional=True), prefix="--samtools-memory", doc=InputDocumentation(doc="The number of MB used for every thread by samtools to sort the bam file")), ToolInput(tag="in_d_type", input_type=File(optional=True), prefix="--dtype", doc=InputDocumentation(doc="The dtype of the loom file layers - if more than 6000 molecules/reads per gene per cell are expected set uint32 to avoid truncation (default run: uint32)")), ToolInput(tag="in_dump", input_type=Int(optional=True), prefix="--dump", doc=InputDocumentation(doc="For debugging purposes only: it will dump a molecular mapping report to hdf5. --dump N, saves a cell every N cells. If p is prepended a more complete (but huge) pickle report is printed (default: 0)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Set the vebosity level: -v (only warnings) -vv (warnings and info) -vvv (warnings, info and debug)")), ToolInput(tag="in_bam_file_dot_dot_dot", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_gtf_file", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_folder", type_hint=File()), doc=OutputDocumentation(doc="Output folder, if it does not exist it will be created."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Velocyto_Run_V0_1_0().translate("wdl", allow_empty_container=True)

