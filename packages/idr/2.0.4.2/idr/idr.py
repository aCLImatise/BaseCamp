from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Float, Boolean, Int

Idr_V0_1_0 = CommandToolBuilder(tool="idr", base_command=["idr"], inputs=[ToolInput(tag="in_samples_samples_samplesfiles", input_type=String(optional=True), prefix="--samples", doc=InputDocumentation(doc="SAMPLES, -s SAMPLES SAMPLES\nFiles containing peaks and scores.")), ToolInput(tag="in_peak_list", input_type=File(optional=True), prefix="--peak-list", doc=InputDocumentation(doc="If provided, all peaks will be taken from this file.")), ToolInput(tag="in_input_file_type", input_type=String(optional=True), prefix="--input-file-type", doc=InputDocumentation(doc="File type of --samples and --peak-list.")), ToolInput(tag="in_rank", input_type=String(optional=True), prefix="--rank", doc=InputDocumentation(doc="Which column to use to rank peaks.\nOptions: signal.value p.value q.value columnIndex\nDefaults:\nnarrowPeak/broadPeak: signal.value\nbed: score")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File to write output to.\nDefault: idrValues.txt")), ToolInput(tag="in_output_file_type", input_type=File(optional=True), prefix="--output-file-type", doc=InputDocumentation(doc="Output file type. Defaults to input file type when available, otherwise bed.")), ToolInput(tag="in_log_output_file", input_type=File(optional=True), prefix="--log-output-file", doc=InputDocumentation(doc="File to write output to. Default: stderr")), ToolInput(tag="in_idr_threshold", input_type=String(optional=True), prefix="--idr-threshold", doc=InputDocumentation(doc="Only return peaks with a global idr threshold below this value.\nDefault: report all peaks")), ToolInput(tag="in_soft_idr_threshold", input_type=Float(optional=True), prefix="--soft-idr-threshold", doc=InputDocumentation(doc="Report statistics for peaks with a global idr below this value but return all peaks with an idr below --idr.\nDefault: 0.05")), ToolInput(tag="in_use_old_output_format", input_type=Boolean(optional=True), prefix="--use-old-output-format", doc=InputDocumentation(doc="Use old output format.")), ToolInput(tag="in_plot", input_type=Boolean(optional=True), prefix="--plot", doc=InputDocumentation(doc="Plot the results to [OFNAME].png")), ToolInput(tag="in_use_nonoverlapping_peaks", input_type=Boolean(optional=True), prefix="--use-nonoverlapping-peaks", doc=InputDocumentation(doc="Use peaks without an overlapping match and set the value to 0.")), ToolInput(tag="in_peak_merge_method", input_type=String(optional=True), prefix="--peak-merge-method", doc=InputDocumentation(doc="Which method to use for merging peaks.\nDefault: 'sum' for signal/score/column indexes, 'min' for p/q-value.")), ToolInput(tag="in_initial_mu", input_type=Float(optional=True), prefix="--initial-mu", doc=InputDocumentation(doc="Initial value of mu. Default: 0.10")), ToolInput(tag="in_initial_sigma", input_type=Float(optional=True), prefix="--initial-sigma", doc=InputDocumentation(doc="Initial value of sigma. Default: 1.00")), ToolInput(tag="in_initial_rho", input_type=Float(optional=True), prefix="--initial-rho", doc=InputDocumentation(doc="Initial value of rho. Default: 0.20")), ToolInput(tag="in_initial_mix_param", input_type=Float(optional=True), prefix="--initial-mix-param", doc=InputDocumentation(doc="Initial value of the mixture params. Default: 0.50")), ToolInput(tag="in_fix_mu", input_type=Boolean(optional=True), prefix="--fix-mu", doc=InputDocumentation(doc="Fix mu to the starting point and do not let it vary.")), ToolInput(tag="in_fix_sigma", input_type=Boolean(optional=True), prefix="--fix-sigma", doc=InputDocumentation(doc="Fix sigma to the starting point and do not let it vary.")), ToolInput(tag="in_dont_filter_peaks_below_noise_mean", input_type=Boolean(optional=True), prefix="--dont-filter-peaks-below-noise-mean", doc=InputDocumentation(doc="Allow signal points that are below the noise mean (should only be used if you know what you are doing).")), ToolInput(tag="in_use_best_multi_summit_idr", input_type=Boolean(optional=True), prefix="--use-best-multisummit-IDR", doc=InputDocumentation(doc="Set the IDR value for a group of multi summit peaks (a group of peaks with the same chr/start/stop but different summits) to the best value across all of these peaks. This is a work around for peak callers that don't do a good job splitting scores across multi summit peaks (e.g. MACS). If set in conjunction with --plot two plots will be created - one with alternate summits and one without.  Use this option with care.")), ToolInput(tag="in_allow_negative_scores", input_type=Boolean(optional=True), prefix="--allow-negative-scores", doc=InputDocumentation(doc="Allow negative values for scores. (should only be used if you know what you are doing)")), ToolInput(tag="in_random_seed", input_type=Int(optional=True), prefix="--random-seed", doc=InputDocumentation(doc="The random seed value (sor braking ties). Default: 0")), ToolInput(tag="in_max_iter", input_type=Int(optional=True), prefix="--max-iter", doc=InputDocumentation(doc="The maximum number of optimization iterations. Default: 3000")), ToolInput(tag="in_convergence_eps", input_type=Float(optional=True), prefix="--convergence-eps", doc=InputDocumentation(doc="The maximum change in parameter value changes for convergence. Default: 1.00e-06")), ToolInput(tag="in_only_merge_peaks", input_type=Boolean(optional=True), prefix="--only-merge-peaks", doc=InputDocumentation(doc="Only return the merged peak list.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print out additional debug information")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Don't print any status messages")), ToolInput(tag="in_var_28", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File to write output to.\nDefault: idrValues.txt")), ToolOutput(tag="out_output_file_type", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_type", type_hint=File()), doc=OutputDocumentation(doc="Output file type. Defaults to input file type when available, otherwise bed.")), ToolOutput(tag="out_log_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_output_file", type_hint=File()), doc=OutputDocumentation(doc="File to write output to. Default: stderr"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Idr_V0_1_0().translate("wdl", allow_empty_container=True)

