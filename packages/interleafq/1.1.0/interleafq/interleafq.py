from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean

Interleafq_V0_1_0 = CommandToolBuilder(tool="interleafq", base_command=["interleafq"], inputs=[ToolInput(tag="in_output_prefix", input_type=File(optional=True), prefix="--output-prefix", doc=InputDocumentation(doc="Basename for the output file when deinterleaving. Will produce by\ndefault '{prefix}_R1.fastq' and '{prefix}_R2.fastq'.")), ToolInput(tag="in_first_pair", input_type=File(optional=True), prefix="--first-pair", doc=InputDocumentation(doc="Filename for the first pair produced when deinterleaving.\nAlternative to '-o', if the specified output filename ends with\n'.gz' will print a compressed file.")), ToolInput(tag="in_second_pair", input_type=File(optional=True), prefix="--second-pair", doc=InputDocumentation(doc="Filename for the second pair produced when deinterleaving.\nAlternative to '-o', if the specified output filename ends with\n'.gz' will print a compressed file.")), ToolInput(tag="in_strip_comments", input_type=Boolean(optional=True), prefix="--strip-comments", doc=InputDocumentation(doc="Will remove comments from the sequence headers (*i. e.* any string\nafter the first space character in the read name line).")), ToolInput(tag="in_relaxed", input_type=Boolean(optional=True), prefix="--relaxed", doc=InputDocumentation(doc="Will not check for inconsistencies in read names and\nsequence/quality length. The read names should be equal until the\nfirst '/'.")), ToolInput(tag="in_force_interleave", input_type=Boolean(optional=True), prefix="--force-interleave", doc=InputDocumentation(doc="When supplying only the first pair-end file it will set interleave\nmode, looking for a second pair-end file (replacing _R1 with _R2)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Display additional information (total printed sequences at the end,\nuseful for truncated files)."))], outputs=[ToolOutput(tag="out_output_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_prefix", type_hint=File()), doc=OutputDocumentation(doc="Basename for the output file when deinterleaving. Will produce by\ndefault '{prefix}_R1.fastq' and '{prefix}_R2.fastq'.")), ToolOutput(tag="out_first_pair", output_type=File(optional=True), selector=InputSelector(input_to_select="in_first_pair", type_hint=File()), doc=OutputDocumentation(doc="Filename for the first pair produced when deinterleaving.\nAlternative to '-o', if the specified output filename ends with\n'.gz' will print a compressed file.")), ToolOutput(tag="out_second_pair", output_type=File(optional=True), selector=InputSelector(input_to_select="in_second_pair", type_hint=File()), doc=OutputDocumentation(doc="Filename for the second pair produced when deinterleaving.\nAlternative to '-o', if the specified output filename ends with\n'.gz' will print a compressed file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Interleafq_V0_1_0().translate("wdl", allow_empty_container=True)

