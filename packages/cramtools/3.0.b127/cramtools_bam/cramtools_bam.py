from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Cramtools_Bam_V0_1_0 = CommandToolBuilder(tool="cramtools_bam", base_command=["cramtools", "bam"], inputs=[ToolInput(tag="in_calculate_md_tag", input_type=Boolean(optional=True), prefix="--calculate-md-tag", doc=InputDocumentation(doc="Calculate MD tag. (default: false)")), ToolInput(tag="in_calculate_nm_tag", input_type=Boolean(optional=True), prefix="--calculate-nm-tag", doc=InputDocumentation(doc="Calculate NM tag. (default: false)")), ToolInput(tag="in_count_only", input_type=Boolean(optional=True), prefix="--count-only", doc=InputDocumentation(doc="Count number of records. (default: false)")), ToolInput(tag="in_decrypt", input_type=Boolean(optional=True), prefix="--decrypt", doc=InputDocumentation(doc="Decrypt the file. (default: false)")), ToolInput(tag="in_default_quality_score", input_type=Boolean(optional=True), prefix="--default-quality-score", doc=InputDocumentation(doc="Use this quality score (decimal representation of ASCII symbol) as a default value when the original quality score was lost due to compression. Minimum is 33. (default: 63)")), ToolInput(tag="in_filter_flags", input_type=Boolean(optional=True), prefix="--filter-flags", doc=InputDocumentation(doc="Filtering flags.  (default: 0)")), ToolInput(tag="in_ignore_md_five_mismatch", input_type=Boolean(optional=True), prefix="--ignore-md5-mismatch", doc=InputDocumentation(doc="Issue a warning on sequence MD5 mismatch and continue. This does not garantee the data will be read succesfully.  (default: false)")), ToolInput(tag="in_inject_sq_uri", input_type=Boolean(optional=True), prefix="--inject-sq-uri", doc=InputDocumentation(doc="Inject or change the @SQ:UR header fields to point to ENA reference service.  (default: false)")), ToolInput(tag="in_input_cram_file", input_type=Boolean(optional=True), prefix="--input-cram-file", doc=InputDocumentation(doc="The path or FTP URL to the CRAM file to uncompress. Omit if standard input (pipe).")), ToolInput(tag="in_output_bam_file", input_type=File(optional=True), prefix="--output-bam-file", doc=InputDocumentation(doc="The path to the output BAM file.")), ToolInput(tag="in_password", input_type=Boolean(optional=True), prefix="--password", doc=InputDocumentation(doc="Password to decrypt the file.")), ToolInput(tag="in_print_sam_header", input_type=Boolean(optional=True), prefix="--print-sam-header", doc=InputDocumentation(doc="Print SAM header when writing SAM format. (default: false)")), ToolInput(tag="in_reference_fast_a_file", input_type=Boolean(optional=True), prefix="--reference-fasta-file", doc=InputDocumentation(doc="Path to the reference fasta file, it must be uncompressed and indexed (use 'samtools faidx' for example).")), ToolInput(tag="in_required_flags", input_type=Boolean(optional=True), prefix="--required-flags", doc=InputDocumentation(doc="Required flags.  (default: 0)")), ToolInput(tag="in_skip_md_five_check", input_type=Boolean(optional=True), prefix="--skip-md5-check", doc=InputDocumentation(doc="Skip MD5 checks when reading the header. (default: false)")), ToolInput(tag="in_sync_bam_output", input_type=Boolean(optional=True), prefix="--sync-bam-output", doc=InputDocumentation(doc="Write BAM output in the same thread. (default: false)")), ToolInput(tag="in_output_bam_format", input_type=Boolean(optional=True), prefix="--output-bam-format", doc=InputDocumentation(doc="Output in BAM format. (default: false)")), ToolInput(tag="in_print_sam_header_quit", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="Print SAM header and quit. (default: false)")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="Change log level: DEBUG, INFO, WARNING, ERROR. (default: ERROR)")), ToolInput(tag="in_main_class", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_bam_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_bam_file", type_hint=File()), doc=OutputDocumentation(doc="The path to the output BAM file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cramtools_Bam_V0_1_0().translate("wdl", allow_empty_container=True)

