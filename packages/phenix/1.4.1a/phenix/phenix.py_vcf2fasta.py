from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Array, String, File, Float, Boolean, Int

Phenix_Py_Vcf2Fasta_V0_1_0 = CommandToolBuilder(tool="phenix.py_vcf2fasta", base_command=["phenix.py", "vcf2fasta"], inputs=[ToolInput(tag="in_directory", input_type=Directory(optional=True), prefix="--directory", doc=InputDocumentation(doc="Path to the directory with .vcf files.")), ToolInput(tag="in_input", input_type=Array(t=String(), optional=True), prefix="--input", doc=InputDocumentation(doc="List of VCF files to process.")), ToolInput(tag="in_regexp", input_type=Directory(optional=True), prefix="--regexp", doc=InputDocumentation(doc="Regular expression for finding VCFs in a directory.")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Path to the output FASTA file.")), ToolInput(tag="in_with_mixtures", input_type=String(optional=True), prefix="--with-mixtures", doc=InputDocumentation(doc="Specify this option with a threshold to output\nmixtures above this threshold.")), ToolInput(tag="in_column_ns", input_type=String(optional=True), prefix="--column-Ns", doc=InputDocumentation(doc="Keeps columns with fraction of Ns below specified\nthreshold.")), ToolInput(tag="in_column_gaps", input_type=String(optional=True), prefix="--column-gaps", doc=InputDocumentation(doc="Keeps columns with fraction of Ns below specified\nthreshold.")), ToolInput(tag="in_sample_ns", input_type=String(optional=True), prefix="--sample-Ns", doc=InputDocumentation(doc="Keeps samples with fraction of Ns below specified\nthreshold or put 'auto'.Fraction expressed as fraction\nof genome. Requires --reflength or --reference.")), ToolInput(tag="in_sample_gaps", input_type=String(optional=True), prefix="--sample-gaps", doc=InputDocumentation(doc="Keeps samples with fraction of gaps below specified\nthreshold or put 'auto'.Fraction expressed as fraction\nof genome. Requires --reflength or --reference.")), ToolInput(tag="in_sample_ns_gaps_auto_factor", input_type=Float(optional=True), prefix="--sample-Ns-gaps-auto-factor", doc=InputDocumentation(doc="When using 'auto' option for --sample-gaps or\n--sample-Ns, remove sample that havegaps or Ns this\nmany times above the stddev of all samples. [Default:\n2.0]")), ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="If path to reference specified (FASTA), then whole\ngenome will be written to alignment.")), ToolInput(tag="in_remove_invariant_npos", input_type=Boolean(optional=True), prefix="--remove-invariant-npos", doc=InputDocumentation(doc="Remove all positions that invariant apart from N\npositions.")), ToolInput(tag="in_ref_length", input_type=Int(optional=True), prefix="--reflength", doc=InputDocumentation(doc="Length of reference. Either as int or can be worked\nout from fasta file. Ignored if --reference is used.")), ToolInput(tag="in_include", input_type=File(optional=True), prefix="--include", doc=InputDocumentation(doc="Only include positions in BED file in the FASTA")), ToolInput(tag="in_exclude", input_type=File(optional=True), prefix="--exclude", doc=InputDocumentation(doc="Exclude any positions specified in the BED file.")), ToolInput(tag="in_with_stats", input_type=File(optional=True), prefix="--with-stats", doc=InputDocumentation(doc="If a path is specified, then position of the outputed\nSNPs is stored in this file.\n"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Path to the output FASTA file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phenix_Py_Vcf2Fasta_V0_1_0().translate("wdl", allow_empty_container=True)

