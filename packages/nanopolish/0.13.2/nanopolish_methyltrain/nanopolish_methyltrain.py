from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Nanopolish_Methyltrain_V0_1_0 = CommandToolBuilder(tool="nanopolish_methyltrain", base_command=["nanopolish", "methyltrain"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_models_fof_n", input_type=File(optional=True), prefix="--models-fofn", doc=InputDocumentation(doc="read the models to be trained from the FOFN")), ToolInput(tag="in_train_km_ers", input_type=String(optional=True), prefix="--train-kmers", doc=InputDocumentation(doc="train methylated, unmethylated or all kmers")), ToolInput(tag="in_calibrate", input_type=Boolean(optional=True), prefix="--calibrate", doc=InputDocumentation(doc="recalibrate aligned reads to model before training")), ToolInput(tag="in_no_update_models", input_type=Boolean(optional=True), prefix="--no-update-models", doc=InputDocumentation(doc="do not write out trained models")), ToolInput(tag="in_output_scores", input_type=Boolean(optional=True), prefix="--output-scores", doc=InputDocumentation(doc="optionally output read scores during training")), ToolInput(tag="in_reads", input_type=File(optional=True), prefix="--reads", doc=InputDocumentation(doc="the ONT reads are in fasta FILE")), ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="the reads aligned to the genome assembly are in bam FILE")), ToolInput(tag="in_genome", input_type=File(optional=True), prefix="--genome", doc=InputDocumentation(doc="the reference genome is in FILE")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="use NUM threads (default: 1)")), ToolInput(tag="in_filter_policy", input_type=Int(optional=True), prefix="--filter-policy", doc=InputDocumentation(doc="filter reads for [R7] or [R9] project")), ToolInput(tag="in_out_suffix", input_type=String(optional=True), prefix="--out-suffix", doc=InputDocumentation(doc="name output files like <strand>.out_suffix")), ToolInput(tag="in_out_fof_n", input_type=File(optional=True), prefix="--out-fofn", doc=InputDocumentation(doc="write the names of the output models into FILE")), ToolInput(tag="in_rounds", input_type=Int(optional=True), prefix="--rounds", doc=InputDocumentation(doc="number of training rounds to perform")), ToolInput(tag="in_max_reads", input_type=Int(optional=True), prefix="--max-reads", doc=InputDocumentation(doc="stop after processing NUM reads in each round")), ToolInput(tag="in_progress", input_type=Boolean(optional=True), prefix="--progress", doc=InputDocumentation(doc="print out a progress message")), ToolInput(tag="in_std_v", input_type=Boolean(optional=True), prefix="--stdv", doc=InputDocumentation(doc="enable stdv modelling")), ToolInput(tag="in_max_events", input_type=Int(optional=True), prefix="--max-events", doc=InputDocumentation(doc="use NUM events for training (default: 1000)"))], outputs=[ToolOutput(tag="out_out_fof_n", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_fof_n", type_hint=File()), doc=OutputDocumentation(doc="write the names of the output models into FILE"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nanopolish_Methyltrain_V0_1_0().translate("wdl", allow_empty_container=True)

