from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File, Int

Nanopolish_Variants_V0_1_0 = CommandToolBuilder(tool="nanopolish_variants", base_command=["nanopolish", "variants"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_snps", input_type=Boolean(optional=True), prefix="--snps", doc=InputDocumentation(doc="only call SNPs")), ToolInput(tag="in_consensus", input_type=Boolean(optional=True), prefix="--consensus", doc=InputDocumentation(doc="run in consensus calling mode")), ToolInput(tag="in_fix_homopolymers", input_type=Boolean(optional=True), prefix="--fix-homopolymers", doc=InputDocumentation(doc="run the experimental homopolymer caller")), ToolInput(tag="in_faster", input_type=Boolean(optional=True), prefix="--faster", doc=InputDocumentation(doc="minimize compute time while slightly reducing consensus accuracy")), ToolInput(tag="in_window", input_type=String(optional=True), prefix="--window", doc=InputDocumentation(doc="find variants in window STR (format: <chromsome_name>:<start>-<end>)")), ToolInput(tag="in_reads", input_type=File(optional=True), prefix="--reads", doc=InputDocumentation(doc="the ONT reads are in fasta FILE")), ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="the reads aligned to the reference genome are in bam FILE")), ToolInput(tag="in_event_bam", input_type=File(optional=True), prefix="--event-bam", doc=InputDocumentation(doc="the events aligned to the reference genome are in bam FILE")), ToolInput(tag="in_genome", input_type=File(optional=True), prefix="--genome", doc=InputDocumentation(doc="the reference genome is in FILE")), ToolInput(tag="in_ploidy", input_type=Int(optional=True), prefix="--ploidy", doc=InputDocumentation(doc="the ploidy level of the sequenced genome")), ToolInput(tag="in_methylation_aware", input_type=String(optional=True), prefix="--methylation-aware", doc=InputDocumentation(doc="turn on methylation aware polishing and test motifs given in STR (example: -q dcm,dam)")), ToolInput(tag="in_genotype", input_type=File(optional=True), prefix="--genotype", doc=InputDocumentation(doc="call genotypes for the variants in the vcf FILE")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="write result to FILE [default: stdout]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="use NUM threads (default: 1)")), ToolInput(tag="in_min_candidate_frequency", input_type=Int(optional=True), prefix="--min-candidate-frequency", doc=InputDocumentation(doc="extract candidate variants from the aligned reads when the variant frequency is at least F (default 0.2)")), ToolInput(tag="in_in_del_bias", input_type=Int(optional=True), prefix="--indel-bias", doc=InputDocumentation(doc="bias HMM transition parameters to favor insertions (F<1) or deletions (F>1).\nthis value is automatically set depending on --consensus, but can be manually set if spurious indels are called")), ToolInput(tag="in_min_candidate_depth", input_type=Int(optional=True), prefix="--min-candidate-depth", doc=InputDocumentation(doc="extract candidate variants from the aligned reads when the depth is at least D (default: 20)")), ToolInput(tag="in_max_haplotypes", input_type=Int(optional=True), prefix="--max-haplotypes", doc=InputDocumentation(doc="consider at most N haplotype combinations (default: 1000)")), ToolInput(tag="in_min_flanking_sequence", input_type=Int(optional=True), prefix="--min-flanking-sequence", doc=InputDocumentation(doc="distance from alignment end to calculate variants (default: 30)")), ToolInput(tag="in_max_rounds", input_type=Int(optional=True), prefix="--max-rounds", doc=InputDocumentation(doc="perform N rounds of consensus sequence improvement (default: 50)")), ToolInput(tag="in_candidates", input_type=String(optional=True), prefix="--candidates", doc=InputDocumentation(doc="read variant candidates from VCF, rather than discovering them from aligned reads")), ToolInput(tag="in_read_group", input_type=String(optional=True), prefix="--read-group", doc=InputDocumentation(doc="only use alignments with read group tag RG")), ToolInput(tag="in_alternative_base_calls_bam", input_type=File(optional=True), prefix="--alternative-basecalls-bam", doc=InputDocumentation(doc="if an alternative basecaller was used that does not output event annotations\nthen use basecalled sequences from FILE. The signal-level events will still be taken from the -b bam.")), ToolInput(tag="in_calculate_all_support", input_type=Boolean(optional=True), prefix="--calculate-all-support", doc=InputDocumentation(doc="when making a call, also calculate the support of the 3 other possible bases")), ToolInput(tag="in_models_fof_n", input_type=File(optional=True), prefix="--models-fofn", doc=InputDocumentation(doc="read alternative k-mer models from FILE"))], outputs=[ToolOutput(tag="out_alternative_base_calls_bam", output_type=File(optional=True), selector=InputSelector(input_to_select="in_alternative_base_calls_bam", type_hint=File()), doc=OutputDocumentation(doc="if an alternative basecaller was used that does not output event annotations\nthen use basecalled sequences from FILE. The signal-level events will still be taken from the -b bam."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nanopolish_Variants_V0_1_0().translate("wdl", allow_empty_container=True)

