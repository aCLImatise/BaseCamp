from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Boolean, Int, String

Meme_Chip_V0_1_0 = CommandToolBuilder(tool="meme_chip", base_command=["meme-chip"], inputs=[ToolInput(tag="in_dir_output_failing", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc="<dir>   : output to the specified directory, failing if the directory exists")), ToolInput(tag="in_oc", input_type=Directory(optional=True), prefix="-oc", doc=InputDocumentation(doc="<dir>   : output to the specified directory, overwriting if the directory exists")), ToolInput(tag="in_db", input_type=Boolean(optional=True), prefix="-db", doc=InputDocumentation(doc="<path>  : target database for use by Tomtom and CentriMo; if not present,\nTomtom and CentriMo are not run")), ToolInput(tag="in_neg", input_type=Boolean(optional=True), prefix="-neg", doc=InputDocumentation(doc="<path>  : negative (control) sequence file name;\nthe control sequences will be input to MEME, CentriMo and DREME,\nand MEME will use the Differential Enrichment objective function;\nsequences are assumed to originate from the same alphabet as the\nprimary sequence file and should be the same length as those;\ndefault: no negative sequences are used for MEME\nor CentriMo, and for DREME, the primary sequences\nare shuffled to create the negative set")), ToolInput(tag="in_psp_gen", input_type=Boolean(optional=True), prefix="-psp-gen", doc=InputDocumentation(doc="use the psp-gen program to create a position-specific\nprior for use by MEME with its Classic objective function;\nrequires -neg;  default: input control sequences directly\nto MEME and use its Differential Enrichment objective function")), ToolInput(tag="in_set_alphabet_dna", input_type=Boolean(optional=True), prefix="-dna", doc=InputDocumentation(doc="set the alphabet to DNA; this is the default")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="-rna", doc=InputDocumentation(doc="set the alphabet to RNA")), ToolInput(tag="in_order", input_type=Boolean(optional=True), prefix="-order", doc=InputDocumentation(doc="<ord>   : set the order of the Markov background model\nthat is generated from the sequences when a\nbackground file is not given; default: 1")), ToolInput(tag="in_seed", input_type=Boolean(optional=True), prefix="-seed", doc=InputDocumentation(doc="<seed>  : seed for the randomized selection of sequences\nfor MEME and the shuffling of sequences for DREME;\ndefault: seed randomly")), ToolInput(tag="in_c_cut", input_type=Boolean(optional=True), prefix="-ccut", doc=InputDocumentation(doc="<num>   : maximum size of a sequence before it is cut down\nto a centered section; a value of 0 indicates the\nsequences should not be cut down; default: 100")), ToolInput(tag="in_group_thresh", input_type=Boolean(optional=True), prefix="-group-thresh", doc=InputDocumentation(doc="<gthr>  : primary threshold for clustering motifs; default: 0.05")), ToolInput(tag="in_group_weak", input_type=Boolean(optional=True), prefix="-group-weak", doc=InputDocumentation(doc="<gwk>   : secondary threshold for clustering motifs; default: 2*gthr")), ToolInput(tag="in_filter_thresh", input_type=Boolean(optional=True), prefix="-filter-thresh", doc=InputDocumentation(doc="<fthr>  : E-value threshold for including motifs; default: 0.05")), ToolInput(tag="in_time", input_type=Boolean(optional=True), prefix="-time", doc=InputDocumentation(doc="<minutes>  : maximum time that this program has to run and\ncreate output in; default: no limit")), ToolInput(tag="in_desc", input_type=Boolean(optional=True), prefix="-desc", doc=InputDocumentation(doc="<text>  : description of the job")), ToolInput(tag="in_f_desc", input_type=Boolean(optional=True), prefix="-fdesc", doc=InputDocumentation(doc="<file>  : file containing plain text description of the job")), ToolInput(tag="in_norc", input_type=Boolean(optional=True), prefix="-norc", doc=InputDocumentation(doc=": search given strand only")), ToolInput(tag="in_old_clustering", input_type=Boolean(optional=True), prefix="-old-clustering", doc=InputDocumentation(doc=": pick cluster seed motifs based only on significance;\ndefault: preferentially select discovered motifs as\nclustering seeds even if there is a library motif\nthat appears more enriched")), ToolInput(tag="in_noecho", input_type=Boolean(optional=True), prefix="-noecho", doc=InputDocumentation(doc=": don't echo the commands run")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc=": print the version and exit")), ToolInput(tag="in_meme_brief", input_type=Boolean(optional=True), prefix="-meme-brief", doc=InputDocumentation(doc="<num>   : reduce size of MEME output files if more than <num>\n: primary sequences")), ToolInput(tag="in_meme_mod", input_type=Boolean(optional=True), prefix="-meme-mod", doc=InputDocumentation(doc="[oops|zoops|anr]: sites used in a single sequence")), ToolInput(tag="in_meme_min_w", input_type=Boolean(optional=True), prefix="-meme-minw", doc=InputDocumentation(doc="<num>   : minimum motif width")), ToolInput(tag="in_meme_max_w", input_type=Boolean(optional=True), prefix="-meme-maxw", doc=InputDocumentation(doc="<num>   : maximum motif width")), ToolInput(tag="in_meme_n_motifs", input_type=Boolean(optional=True), prefix="-meme-nmotifs", doc=InputDocumentation(doc="<num>   : maximum number of motifs to find")), ToolInput(tag="in_meme_min_sites", input_type=Boolean(optional=True), prefix="-meme-minsites", doc=InputDocumentation(doc="<num>   : minimum number of sites per motif")), ToolInput(tag="in_meme_max_sites", input_type=Boolean(optional=True), prefix="-meme-maxsites", doc=InputDocumentation(doc="<num>   : maximum number of sites per motif")), ToolInput(tag="in_meme_p", input_type=Boolean(optional=True), prefix="-meme-p", doc=InputDocumentation(doc="<np>    : use parallel version with <np> processors")), ToolInput(tag="in_meme_pal", input_type=Boolean(optional=True), prefix="-meme-pal", doc=InputDocumentation(doc=": look for palindromes only")), ToolInput(tag="in_meme_search_size", input_type=Boolean(optional=True), prefix="-meme-searchsize", doc=InputDocumentation(doc="<num>   : the maximum portion of the primary sequences (in characters)\n: used for motif search; MEME's running time increases as\n: roughly the square of <num>")), ToolInput(tag="in_meme_nr_and", input_type=Boolean(optional=True), prefix="-meme-nrand", doc=InputDocumentation(doc=": MEME should not randomize sequence order")), ToolInput(tag="in_dre_me_e", input_type=Boolean(optional=True), prefix="-dreme-e", doc=InputDocumentation(doc="<num>   : stop searching after reaching this E-value threshold")), ToolInput(tag="in_dre_me_m", input_type=Boolean(optional=True), prefix="-dreme-m", doc=InputDocumentation(doc="<num>   : stop searching after finding this many motifs")), ToolInput(tag="in_centri_mo_local", input_type=Boolean(optional=True), prefix="-centrimo-local", doc=InputDocumentation(doc=": compute enrichment of all regions (not only central)")), ToolInput(tag="in_centri_mo_score", input_type=Boolean(optional=True), prefix="-centrimo-score", doc=InputDocumentation(doc="<num>   : set the minimum allowed match score")), ToolInput(tag="in_centri_mo_max_reg", input_type=Boolean(optional=True), prefix="-centrimo-maxreg", doc=InputDocumentation(doc="<num>   : set the maximum region size to be considered")), ToolInput(tag="in_centri_mo_e_thresh", input_type=Int(optional=True), prefix="-centrimo-ethresh", doc=InputDocumentation(doc=": set the E-value threshold for reporting")), ToolInput(tag="in_centri_mo_no_seq", input_type=Boolean(optional=True), prefix="-centrimo-noseq", doc=InputDocumentation(doc=": don't store sequence IDs in the output")), ToolInput(tag="in_centri_mo_flip", input_type=Boolean(optional=True), prefix="-centrimo-flip", doc=InputDocumentation(doc=": reflect matches on reverse strand around center")), ToolInput(tag="in_spam_o_skip", input_type=Boolean(optional=True), prefix="-spamo-skip", doc=InputDocumentation(doc=": don't run SpaMo")), ToolInput(tag="in_fimo_skip", input_type=Boolean(optional=True), prefix="-fimo-skip", doc=InputDocumentation(doc=": don't run FIMO")), ToolInput(tag="in_bfile_path_background", input_type=String(), position=0, doc=InputDocumentation(doc="-bfile            <path>  : background file"))], outputs=[ToolOutput(tag="out_dir_output_failing", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_dir_output_failing", type_hint=File()), doc=OutputDocumentation(doc="<dir>   : output to the specified directory, failing if the directory exists")), ToolOutput(tag="out_oc", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_oc", type_hint=File()), doc=OutputDocumentation(doc="<dir>   : output to the specified directory, overwriting if the directory exists"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Meme_Chip_V0_1_0().translate("wdl", allow_empty_container=True)

