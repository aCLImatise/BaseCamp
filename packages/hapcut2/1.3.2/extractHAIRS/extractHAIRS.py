from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean

Extracthairs_V0_1_0 = CommandToolBuilder(tool="extractHAIRS", base_command=["extractHAIRS"], inputs=[ToolInput(tag="in_qv_offset", input_type=Int(optional=True), prefix="--qvoffset", doc=InputDocumentation(doc=": quality value offset, 33/64 depending on how quality values were encoded, default is 33")), ToolInput(tag="in_mbq", input_type=Int(optional=True), prefix="--mbq", doc=InputDocumentation(doc=": minimum base quality to consider a base for haplotype fragment, default 13")), ToolInput(tag="in_mmq", input_type=Int(optional=True), prefix="--mmq", doc=InputDocumentation(doc=": minimum read mapping quality to consider a read for phasing, default 20")), ToolInput(tag="in_realign_variants", input_type=Int(optional=True), prefix="--realign_variants", doc=InputDocumentation(doc=": Perform sensitive realignment and scoring of variants.")), ToolInput(tag="in_hic", input_type=Int(optional=True), prefix="--hic", doc=InputDocumentation(doc=": sets default maxIS to 40MB, prints matrix in new HiC format")), ToolInput(tag="in_one_zero_x", input_type=Int(optional=True), prefix="--10X", doc=InputDocumentation(doc=": 10X reads. NOTE: Output fragments MUST be processed with LinkReads.py script after extractHAIRS to work with HapCUT2.")), ToolInput(tag="in_pac_bio", input_type=Int(optional=True), prefix="--pacbio", doc=InputDocumentation(doc=": Pacific Biosciences reads. Similar to --realign_variants, but with alignment parameters tuned for PacBio reads.")), ToolInput(tag="in_ont", input_type=Int(optional=True), prefix="--ONT", doc=InputDocumentation(doc=": Oxford nanopore technology reads. Similar to --realign_variants, but with alignment parameters tuned for Oxford Nanopore Reads.")), ToolInput(tag="in_new_format", input_type=Int(optional=True), prefix="--new_format", doc=InputDocumentation(doc=": prints matrix in new format. Requires --new_format option when running HapCUT2.")), ToolInput(tag="in_vcf", input_type=File(optional=True), prefix="--VCF", doc=InputDocumentation(doc=": variant file with genotypes for a single individual in VCF format (unzipped)")), ToolInput(tag="in_maxis", input_type=Int(optional=True), prefix="--maxIS", doc=InputDocumentation(doc=": maximum insert size for a paired-end read to be considered as a single fragment for phasing, default 1000")), ToolInput(tag="in_minis", input_type=Int(optional=True), prefix="--minIS", doc=InputDocumentation(doc=": minimum insert size for a paired-end read to be considered as single fragment for phasing, default 0")), ToolInput(tag="in_pe_only", input_type=Int(optional=True), prefix="--PEonly", doc=InputDocumentation(doc=": do not use single end reads, default is 0 (use all reads)")), ToolInput(tag="in_indels", input_type=Int(optional=True), prefix="--indels", doc=InputDocumentation(doc=": extract reads spanning INDELS, default is 0, variants need to specified in VCF format to use this option")), ToolInput(tag="in_no_quality", input_type=Int(optional=True), prefix="--noquality", doc=InputDocumentation(doc=": if the bam file does not have quality string, this value will be used as the uniform quality value, default 0")), ToolInput(tag="in_tri_allelic", input_type=Int(optional=True), prefix="--triallelic", doc=InputDocumentation(doc=": include variants with genotype 1/2 for parsing, default 0")), ToolInput(tag="in_ref", input_type=File(optional=True), prefix="--ref", doc=InputDocumentation(doc=": reference sequence file (in fasta format, gzipped is okay), optional but required for indels, should be indexed")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc=": output filename for haplotype fragments, if not provided, fragments will be output to stdout")), ToolInput(tag="in_region", input_type=Boolean(optional=True), prefix="--region", doc=InputDocumentation(doc="<chr:start-end> : chromosome and region in BAM file, useful to process individual chromosomes or genomic regions")), ToolInput(tag="in_ep", input_type=Int(optional=True), prefix="--ep", doc=InputDocumentation(doc=": set to 1 to estimate HMM parameters from aligned reads (only with long reads), default = 0")), ToolInput(tag="in_hom", input_type=Int(optional=True), prefix="--hom", doc=InputDocumentation(doc=": set to 1 to include homozygous variants for processing, default = 0 (only heterozygous)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc=": output filename for haplotype fragments, if not provided, fragments will be output to stdout"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Extracthairs_V0_1_0().translate("wdl", allow_empty_container=True)

