from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Directory, File, Boolean

Gappa_Random_Random_Alignment_V0_1_0 = CommandToolBuilder(tool="gappa_random_random_alignment", base_command=["gappa", "random", "random-alignment"], inputs=[ToolInput(tag="in_sequence_count", input_type=Int(optional=True), prefix="--sequence-count", doc=InputDocumentation(doc="=0 REQUIRED\nNumber of sequences to create.")), ToolInput(tag="in_sequence_length", input_type=Int(optional=True), prefix="--sequence-length", doc=InputDocumentation(doc="=0 REQUIRED\nLength of the sequences to create.")), ToolInput(tag="in_characters", input_type=String(optional=True), prefix="--characters", doc=InputDocumentation(doc="=-ACGT     Set of characters to use for the sequences.")), ToolInput(tag="in_out_dir", input_type=Directory(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="=.            Directory to write files to")), ToolInput(tag="in_file_prefix", input_type=File(optional=True), prefix="--file-prefix", doc=InputDocumentation(doc="File prefix for output files")), ToolInput(tag="in_file_suffix", input_type=File(optional=True), prefix="--file-suffix", doc=InputDocumentation(doc="File suffix for output files")), ToolInput(tag="in_write_fast_a", input_type=Boolean(optional=True), prefix="--write-fasta", doc=InputDocumentation(doc="Write sequences to a fasta file.")), ToolInput(tag="in_write_strict_phylip", input_type=File(optional=True), prefix="--write-strict-phylip", doc=InputDocumentation(doc=": --write-relaxed-phylip\nWrite sequences to a strict phylip file.")), ToolInput(tag="in_write_relaxed_phylip", input_type=File(optional=True), prefix="--write-relaxed-phylip", doc=InputDocumentation(doc=": --write-strict-phylip\nWrite sequences to a relaxed phylip file.")), ToolInput(tag="in_allow_file_overwriting", input_type=Boolean(optional=True), prefix="--allow-file-overwriting", doc=InputDocumentation(doc="Allow to overwrite existing output files instead of aborting the command.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Produce more verbose output.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="=1            Number of threads to use for calculations.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], outputs=[ToolOutput(tag="out_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_prefix", type_hint=File()), doc=OutputDocumentation(doc="File prefix for output files")), ToolOutput(tag="out_file_suffix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_suffix", type_hint=File()), doc=OutputDocumentation(doc="File suffix for output files")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], container="quay.io/biocontainers/gappa:0.7.1--he513fc3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gappa_Random_Random_Alignment_V0_1_0().translate("wdl")

