from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean, Float, Directory

Gappa_Prepare_Phat_V0_1_0 = CommandToolBuilder(tool="gappa_prepare_phat", base_command=["gappa", "prepare", "phat"], inputs=[ToolInput(tag="in_taxonomy_file", input_type=File(optional=True), prefix="--taxonomy-file", doc=InputDocumentation(doc=":FILE REQUIRED\nFile that lists the taxa of the database.")), ToolInput(tag="in_sequence_file", input_type=File(optional=True), prefix="--sequence-file", doc=InputDocumentation(doc=":FILE REQUIRED\nFasta file containing the sequences of the database.")), ToolInput(tag="in_target_size", input_type=Int(optional=True), prefix="--target-size", doc=InputDocumentation(doc="=0 REQUIRED\nTarget size of how many taxa to select for building consensus sequences.")), ToolInput(tag="in_sub_taxonomy", input_type=String(optional=True), prefix="--sub-taxonomy", doc=InputDocumentation(doc="If a taxopath from the taxonomy is provided, only the respective sub-taxonomy is used.")), ToolInput(tag="in_min_sub_clade_size", input_type=Int(optional=True), prefix="--min-subclade-size", doc=InputDocumentation(doc="=0  Minimal size of sub-clades. Everything below is expanded.")), ToolInput(tag="in_max_sub_clade_size", input_type=Int(optional=True), prefix="--max-subclade-size", doc=InputDocumentation(doc="=0  Maximal size of a non-expanded sub-clades. Everything bigger is first expanded.")), ToolInput(tag="in_min_tax_level", input_type=Int(optional=True), prefix="--min-tax-level", doc=InputDocumentation(doc="=0      Minimal taxonomic level. Taxa below this level are always expanded.")), ToolInput(tag="in_allow_approximation", input_type=Boolean(optional=True), prefix="--allow-approximation", doc=InputDocumentation(doc="Allow to expand taxa that help getting closer to the --target-size, even if they are not the ones with the highest entropy.")), ToolInput(tag="in_no_tax_a_selection", input_type=Boolean(optional=True), prefix="--no-taxa-selection", doc=InputDocumentation(doc="If set, no taxa selection using entropy is performed. Instead, all taxa on all levels/ranks are used and consensus sequences for all of them are calculated. This is useful for testing and to try out new ideas.")), ToolInput(tag="in_consensus_method", input_type=String(optional=True), prefix="--consensus-method", doc=InputDocumentation(doc=":{majorities,cavener,threshold}=majorities\nConsensus method to use for combining sequences.")), ToolInput(tag="in_consensus_threshold", input_type=Float(optional=True), prefix="--consensus-threshold", doc=InputDocumentation(doc=":FLOAT in [0 - 1]=0.5 Needs: --consensus-method\nThreshold value to use with --consensus-method threshold. Has to be in [ 0.0, 1.0 ].")), ToolInput(tag="in_out_dir", input_type=Directory(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="=.            Directory to write files to")), ToolInput(tag="in_file_prefix", input_type=File(optional=True), prefix="--file-prefix", doc=InputDocumentation(doc="File prefix for output files")), ToolInput(tag="in_file_suffix", input_type=File(optional=True), prefix="--file-suffix", doc=InputDocumentation(doc="File suffix for output files")), ToolInput(tag="in_write_info_files", input_type=Boolean(optional=True), prefix="--write-info-files", doc=InputDocumentation(doc="If set, two additional info files are written, containing the new pruned taxonomy, as well as the entropy of all clades of the original taxonomy.")), ToolInput(tag="in_allow_file_overwriting", input_type=Boolean(optional=True), prefix="--allow-file-overwriting", doc=InputDocumentation(doc="Allow to overwrite existing output files instead of aborting the command.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Produce more verbose output.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="=1            Number of threads to use for calculations.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], outputs=[ToolOutput(tag="out_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_prefix", type_hint=File()), doc=OutputDocumentation(doc="File prefix for output files")), ToolOutput(tag="out_file_suffix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_suffix", type_hint=File()), doc=OutputDocumentation(doc="File suffix for output files")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], container="quay.io/biocontainers/gappa:0.7.1--he513fc3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gappa_Prepare_Phat_V0_1_0().translate("wdl")

