from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, String, Float, File

Shapeit4_V0_1_0 = CommandToolBuilder(tool="shapeit4", base_command=["shapeit4"], inputs=[ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="(=15052011)                Seed of the random number generator")), ToolInput(tag="in_arg_number_thread", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --thread ] arg (=1)              Number of thread used")), ToolInput(tag="in_arg_genotypes_phased", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="[ --input ] arg                    Genotypes to be phased in VCF/BCF")), ToolInput(tag="in_arg_scaffold_haplotypes", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="[ --scaffold ] arg                 Scaffold of haplotypes in VCF/BCF")), ToolInput(tag="in_arg_target_region", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --region ] arg                   Target region")), ToolInput(tag="in_use_ps", input_type=String(optional=True), prefix="--use-PS", doc=InputDocumentation(doc="Informs phasing using PS field from\nread based phasing")), ToolInput(tag="in_sequencing", input_type=Boolean(optional=True), prefix="--sequencing", doc=InputDocumentation(doc="Default parameter setting for\nsequencing data (e.g. high variant\ndensity)")), ToolInput(tag="in_mcmc_iterations", input_type=Int(optional=True), prefix="--mcmc-iterations", doc=InputDocumentation(doc="(=5b,1p,1b,1p,1b,1p,5m)\nIteration scheme of the MCMC")), ToolInput(tag="in_mcmc_prune", input_type=Float(optional=True), prefix="--mcmc-prune", doc=InputDocumentation(doc="(=0.999)             Pruning threshold in genotype graphs")), ToolInput(tag="in_pb_wt_modulo", input_type=Float(optional=True), prefix="--pbwt-modulo", doc=InputDocumentation(doc="(=0.02)             Storage frequency of PBWT indexes in cM\n(i.e. storage every 0.02 cM by default)")), ToolInput(tag="in_pb_wt_depth", input_type=Int(optional=True), prefix="--pbwt-depth", doc=InputDocumentation(doc="(=4)                 Depth of PBWT indexes to condition on")), ToolInput(tag="in_pb_wt_mac", input_type=Int(optional=True), prefix="--pbwt-mac", doc=InputDocumentation(doc="(=2)                   Minimal Minor Allele Count at which\nPBWT is evaluated")), ToolInput(tag="in_pb_wt_mdr", input_type=Float(optional=True), prefix="--pbwt-mdr", doc=InputDocumentation(doc="(=0.5)                 Maximal Missing Data Rate at which PBWT\nis evaluated")), ToolInput(tag="in_ibd_two_length", input_type=Int(optional=True), prefix="--ibd2-length", doc=InputDocumentation(doc="(=3)                Minimal size of IBD2 tracks for\nbuilding copying constraints")), ToolInput(tag="in_ibd_two_maf", input_type=Int(optional=True), prefix="--ibd2-maf", doc=InputDocumentation(doc="(=0.01)                Minimal Minor Allele Frequency for\nvariants to be considered in the IBD2\nmapping")), ToolInput(tag="in_ibd_two_mdr", input_type=Int(optional=True), prefix="--ibd2-mdr", doc=InputDocumentation(doc="(=0.5)                 Maximal Missing data rate for variants\nto be considered in the IBD2 mapping")), ToolInput(tag="in_ibd_two_count", input_type=Int(optional=True), prefix="--ibd2-count", doc=InputDocumentation(doc="(=150)               Minimal number of filtered variants in\nIBD2 tracks")), ToolInput(tag="in_ibd_two_output", input_type=File(optional=True), prefix="--ibd2-output", doc=InputDocumentation(doc="Output all IBD2 constraints in the\nspecified file (useful for debugging!)")), ToolInput(tag="in_arg_minimal_size", input_type=Boolean(optional=True), prefix="-W", doc=InputDocumentation(doc="[ --window ] arg (=2.5)            Minimal size of the phasing window in")), ToolInput(tag="in_arg_phased_haplotypes", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --output ] arg                   Phased haplotypes in VCF/BCF format")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="Log file")), ToolInput(tag="in_cm", input_type=String(), position=0, doc=InputDocumentation(doc="--effective-size arg (=15000)         Effective size of the population"))], outputs=[ToolOutput(tag="out_ibd_two_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_ibd_two_output", type_hint=File()), doc=OutputDocumentation(doc="Output all IBD2 constraints in the\nspecified file (useful for debugging!)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Shapeit4_V0_1_0().translate("wdl", allow_empty_container=True)

