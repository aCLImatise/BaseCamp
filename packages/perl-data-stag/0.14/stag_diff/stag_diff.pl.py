from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Stag_Diff_Pl_V0_1_0 = CommandToolBuilder(tool="stag_diff.pl", base_command=["stag-diff.pl"], inputs=[ToolInput(tag="in_ignore", input_type=Boolean(optional=True), prefix="-ignore", doc=InputDocumentation(doc="|i ELEMENT\nthese nodes are ignored for the purposes of comparison. Note that\nattributes are treated as elements, prefixed by the containing\nelement id. For example, if you have\n<foo ID='wibble'>\nAnd you wish to ignore the ID attribute, then you would use the\nswitch\n-ignore foo-ID\nYou can specify multiple elements to ignore like this\n-i foo -i bar -i baz\nYou can also specify paths\n-i foo/bar/bar-id")), ToolInput(tag="in_parser", input_type=Boolean(optional=True), prefix="-parser", doc=InputDocumentation(doc="|p FORMAT\nwhich parser to use. The default is XML. This can also be\nautodetected by the file suffix. Other alternatives are sxpr and\nitext. See Data::Stag for details.")), ToolInput(tag="in_report", input_type=Boolean(optional=True), prefix="-report", doc=InputDocumentation(doc="|r ELEMENT\nreport mismatches as they occur on each element of type ELEMENT\nmultiple elements can be specified")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="|v\nused in conjunction with the -report switch\nshows the tree of the mismatching element")), ToolInput(tag="in_output", input_type=String(), position=0, doc=InputDocumentation(doc="If a mismatch is reported, a report is generated displaying the subpart\nof the tree that could not be matched. This will look like this:\nREASON: no_matching_node: annotation no_matching_node: feature_set\nno_matching_node: feature_span no_matching_node: evidence\nno_matching_node: evidence-id data_mismatch(:15077290 ne :15077291):\nevidence-id AND evidence-id\nDue to the nature of tree matching, it can be difficult to specify\nexactly how trees do not match. To investigate this, you may need to use\nthe -r and -v options. For the above output, I would recommend using\nstag-diff -r feature_span -v")), ToolInput(tag="in_algorithm", input_type=String(), position=1, doc=InputDocumentation(doc="Both trees are recursively traversed... see the actual code for how this")), ToolInput(tag="in_works", input_type=String(), position=2, doc=InputDocumentation(doc="The order of elements is not important; eg\n<foo>\n<bar>\n<baz>1</baz>\n</bar>\n<bar>\n<baz>2</baz>\n</bar>\n</foo>")), ToolInput(tag="in_matches", input_type=String(), position=3, doc=InputDocumentation(doc="<foo>\n<bar>\n<baz>2</baz>\n</bar>\n<bar>\n<baz>1</baz>\n</bar>\n</foo>")), ToolInput(tag="in_author", input_type=String(), position=0, doc=InputDocumentation(doc="Chris Mungall cjm at fruitfly dot org"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Stag_Diff_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

