from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Float, String, Int

Finddgref_Py_V0_1_0 = CommandToolBuilder(tool="finddgref.py", base_command=["finddgref.py"], inputs=[ToolInput(tag="in_author", input_type=Boolean(optional=True), prefix="--author", doc=InputDocumentation(doc="show the program's author information and exit")), ToolInput(tag="in_md_exec", input_type=File(optional=True), prefix="-mdexec", doc=InputDocumentation(doc="Path to the AMBER executable file. Example:\n$AMBERHOME/bin/pmemd")), ToolInput(tag="in_target", input_type=Float(optional=True), prefix="-target", doc=InputDocumentation(doc="Value of pH or Redox Potential (in Volts) that we\nexpect to obtain a converged fraction of protonated or\nreduced species close to 50%. This is the target value\nof the pKa or Standard Redox Potential (Eo) of the\nsystem at the end of the execution. Default: None")), ToolInput(tag="in_do_parallel", input_type=String(optional=True), prefix="-do_parallel", doc=InputDocumentation(doc="Command preciding mdexec for parallel execution. Used\nonly with Replica Exchange. Default: mpirun -np [-ng]")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="-log", doc=InputDocumentation(doc="When set, prints the log of the program execution to\nan external file (-log FILENAME). If not set, print it\nat the screen. Default: None")), ToolInput(tag="in_res_num", input_type=Int(optional=True), prefix="-resnum", doc=InputDocumentation(doc="Number of the residue in which the fraction of\nprotonated or reduced species will be monitored.\n(REQUIRED if the number of pH or Redox titratable\nresidues is larger than 1)")), ToolInput(tag="in_dg_re_fest", input_type=Float(optional=True), prefix="-dgrefest", doc=InputDocumentation(doc="Estimated value of Delta G reference. When this flag\nis given, the program starts in the last phase of\nexecution, that is, on the phase of making more\naccurate estimatives of Delta G reference. Note: if\nthe value of -dgrefest is not close enough to the true\nvalue of Delta G reference, the execution will fail.\nDefault: None")), ToolInput(tag="in_dg_ref_range", input_type=Float(optional=True), prefix="-dgrefrange", doc=InputDocumentation(doc="FLOAT\nRange of values for Delta G reference. The desired\nDelta G reference value has to be inside this range.\nIf -dgrefest and -dgrefrange are not given, the\nprogram will try to find a range automatically.\nSuggestion: choose one value in which the fraction of\nprotonated or reduced species is ~ 0 and the other\nvalue in which it is ~ 1. Default: None")), ToolInput(tag="in_dg_interval", input_type=Float(optional=True), prefix="-dginterval", doc=InputDocumentation(doc="When the values of the argument -dgrefrange are to be\nfound automatically, dginterval is the interval of\ntrial values. Default: 100.0 kcal/mol")), ToolInput(tag="in_max_steps", input_type=Int(optional=True), prefix="-maxsteps", doc=InputDocumentation(doc="Maximum number of AMBER executions. Default: 100")), ToolInput(tag="in_frac_threshold", input_type=Float(optional=True), prefix="-fracthreshold", doc=InputDocumentation(doc="Fraction threshold. The fraction convergence criterium\nis: 0.5-fracthreshold/2 >= frac >=\n0.5+fracthreshold/2. Default: 0.03")), ToolInput(tag="in_no_equi", input_type=Boolean(optional=True), prefix="-noequi", doc=InputDocumentation(doc="If stated, the equilibration simulation for a new\nDELTAGREF value will not be performed. Equilibration\nruns for 10% the number of steps of the production\nsimulation. Default: False")), ToolInput(tag="in_rm_outs", input_type=Boolean(optional=True), prefix="-rmouts", doc=InputDocumentation(doc="If stated, at the end of the execution of the program,\nerases all output files generated by AMBER (all files\nnot stated as REQUIRED at 'AMBER Arguments' below).\nDefault: False")), ToolInput(tag="in_bin_path", input_type=File(optional=True), prefix="-bin-path", doc=InputDocumentation(doc="Path to the AMBER bin directory. Used to locate\ncphstats, cestats or fitpkaeo.py (Example:\n$AMBERHOME/bin ; Default: not set).")), ToolInput(tag="in_amber_mdin_file", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="AMBER mdin file (REQUIRED)")), ToolInput(tag="in_amber_parmtop_file", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="AMBER parmtop file (REQUIRED)")), ToolInput(tag="in_amber_inpcrd_input", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc="AMBER inpcrd (input coordinates) file (REQUIRED)")), ToolInput(tag="in_amber_mdcrd_output", input_type=File(optional=True), prefix="-x", doc=InputDocumentation(doc="AMBER mdcrd (output coordinates) file")), ToolInput(tag="in_inf", input_type=File(optional=True), prefix="-inf", doc=InputDocumentation(doc="AMBER mdinfo file")), ToolInput(tag="in_amber_mdout_log", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="AMBER mdout (log) file")), ToolInput(tag="in_amber_mdout_file", input_type=File(optional=True), prefix="-r", doc=InputDocumentation(doc="AMBER mdout file")), ToolInput(tag="in_cp_in", input_type=File(optional=True), prefix="-cpin", doc=InputDocumentation(doc="AMBER cpin file (REQUIRED if cein file is not given)")), ToolInput(tag="in_cp_out", input_type=File(optional=True), prefix="-cpout", doc=InputDocumentation(doc="AMBER cpout file")), ToolInput(tag="in_cpre_strt", input_type=File(optional=True), prefix="-cprestrt", doc=InputDocumentation(doc="AMBER cprestrt file")), ToolInput(tag="in_ce_in", input_type=File(optional=True), prefix="-cein", doc=InputDocumentation(doc="AMBER cein file (REQUIRED if cpin file is not given)")), ToolInput(tag="in_ce_out", input_type=File(optional=True), prefix="-ceout", doc=InputDocumentation(doc="AMBER ceout file")), ToolInput(tag="in_ceres_trt", input_type=File(optional=True), prefix="-cerestrt", doc=InputDocumentation(doc="AMBER cerestrt file")), ToolInput(tag="in_ref", input_type=File(optional=True), prefix="-ref", doc=InputDocumentation(doc="AMBER ref file")), ToolInput(tag="in_group_file", input_type=File(optional=True), prefix="-groupfile", doc=InputDocumentation(doc="AMBER groupfile file (REQUIRED)")), ToolInput(tag="in_md_exec_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-ng INT               Number of groups/replicas (REQUIRED)"))], outputs=[ToolOutput(tag="out_amber_mdcrd_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_amber_mdcrd_output", type_hint=File()), doc=OutputDocumentation(doc="AMBER mdcrd (output coordinates) file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Finddgref_Py_V0_1_0().translate("wdl", allow_empty_container=True)

