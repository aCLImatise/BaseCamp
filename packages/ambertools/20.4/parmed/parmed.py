from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean

Parmed_V0_1_0 = CommandToolBuilder(tool="parmed", base_command=["parmed"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Script with ParmEd commands to execute. Default reads\nfrom stdin. Can be specified multiple times to process\nmultiple input files.")), ToolInput(tag="in_parm", input_type=String(optional=True), prefix="--parm", doc=InputDocumentation(doc="List of topology files to load into ParmEd. Can be\nspecified multiple times to process multiple\ntopologies.")), ToolInput(tag="in_in_pc_rd", input_type=String(optional=True), prefix="--inpcrd", doc=InputDocumentation(doc="List of inpcrd files to load into ParmEd. They are\npaired with the topology files in the same order that\neach set of files is specified on the command-line.")), ToolInput(tag="in_overwrite", input_type=Boolean(optional=True), prefix="--overwrite", doc=InputDocumentation(doc="Allow ParmEd to overwrite existing files.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logfile", doc=InputDocumentation(doc="Log file with every command executed during an\ninteractive ParmEd session. Default is parmed.log")), ToolInput(tag="in_prompt", input_type=String(optional=True), prefix="--prompt", doc=InputDocumentation(doc="String to use as a command prompt.")), ToolInput(tag="in_no_splash", input_type=Boolean(optional=True), prefix="--no-splash", doc=InputDocumentation(doc="Prevent printing the greeting logo.")), ToolInput(tag="in_enable_interpreter", input_type=Boolean(optional=True), prefix="--enable-interpreter", doc=InputDocumentation(doc="Allow arbitrary single Python commands or blocks of\nPython code to be run. By default Python commands will\nnot be run as a safeguard for your system. Make sure\nyou trust the source of the ParmEd command before\nturning this option on.")), ToolInput(tag="in_strict", input_type=Boolean(optional=True), prefix="--strict", doc=InputDocumentation(doc="Prevent scripts from running past unrecognized input\nand actions that end with an error. In interactive\nmode, actions with unrecognized inputs and failed\nactions prevent any changes from being made to the\ntopology, but does not quit the interpreter. This is\nthe default behavior.")), ToolInput(tag="in_relaxed", input_type=Boolean(optional=True), prefix="--relaxed", doc=InputDocumentation(doc="Scripts ignore unrecognized input and simply skip over\nfailed actions, executing the rest of the script.\nUnrecognized input in the interactive interpreter\nemits a non-fatal warning.\n")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Parmed_V0_1_0().translate("wdl", allow_empty_container=True)

