from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean

Umi_Reformat_Sra_Fastq_V0_1_0 = CommandToolBuilder(tool="umi_reformat_sra_fastq", base_command=["umi_reformat_sra_fastq"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="the input fastq file. (default: None)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="the output fastq file containing reads that are not\nduplicates (default: None)")), ToolInput(tag="in_pcr_duplicate", input_type=File(optional=True), prefix="--pcr-duplicate", doc=InputDocumentation(doc="The output fastq file containing PCR duplicates\n(default: None)")), ToolInput(tag="in_reads_with_improper_umi", input_type=File(optional=True), prefix="--reads-with-improper-umi", doc=InputDocumentation(doc="The output fastq file containing reads with improper\nUMIs. The default is to throw away these reads. This\nis for debugging purposes (default: )")), ToolInput(tag="in_errors_allowed", input_type=Int(optional=True), prefix="--errors-allowed", doc=InputDocumentation(doc="Setting it to >=1 allows errors in UMIs. Otherwise, no\nerrors are allowed in UMIs. (default: 0)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Also include detailed run info (default: False)")), ToolInput(tag="in_umi_pattern_five", input_type=Int(optional=True), prefix="--umi-pattern-5", doc=InputDocumentation(doc="Set the UMI pattern at the 5' end. Use ACGT for fixed\nnt and N for variable nt in UMI. If there are multiple\npatterns, separate them using comma (default:\nNNNCGANNNTACNNN,NNNATCNNNAGTNNN)")), ToolInput(tag="in_umi_pattern_three", input_type=Int(optional=True), prefix="--umi-pattern-3", doc=InputDocumentation(doc="Set the UMI pattern at the 3' end. Use ACGT for fixed\nnt and N for variable nt in UMI. If there are multiple\npatterns, separate them using comma (default:\nNNNGTCNNNTAGNNN)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="More output for debugging (default: False)"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="the output fastq file containing reads that are not\nduplicates (default: None)")), ToolOutput(tag="out_pcr_duplicate", output_type=File(optional=True), selector=InputSelector(input_to_select="in_pcr_duplicate", type_hint=File()), doc=OutputDocumentation(doc="The output fastq file containing PCR duplicates\n(default: None)")), ToolOutput(tag="out_reads_with_improper_umi", output_type=File(optional=True), selector=InputSelector(input_to_select="in_reads_with_improper_umi", type_hint=File()), doc=OutputDocumentation(doc="The output fastq file containing reads with improper\nUMIs. The default is to throw away these reads. This\nis for debugging purposes (default: )"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Umi_Reformat_Sra_Fastq_V0_1_0().translate("wdl", allow_empty_container=True)

