from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Protk_Setup_Rb_V0_1_0 = CommandToolBuilder(tool="protk_setup.rb", base_command=["protk_setup.rb"], inputs=[ToolInput(tag="in_backtrace", input_type=Boolean(optional=True), prefix="--backtrace", doc=InputDocumentation(doc="=[OUT]            Enable full backtrace.  OUT can be stderr (default) or stdout.")), ToolInput(tag="in_comments", input_type=Boolean(optional=True), prefix="--comments", doc=InputDocumentation(doc="Show commented tasks only")), ToolInput(tag="in_job_stats", input_type=Boolean(optional=True), prefix="--job-stats", doc=InputDocumentation(doc="[LEVEL]          Display job statistics. LEVEL=history displays a complete job list")), ToolInput(tag="in_rules", input_type=Boolean(optional=True), prefix="--rules", doc=InputDocumentation(doc="Trace the rules resolution.")), ToolInput(tag="in_suppress_backtrace", input_type=String(optional=True), prefix="--suppress-backtrace", doc=InputDocumentation(doc="Suppress backtrace lines matching regexp PATTERN. Ignored if --trace is on.")), ToolInput(tag="in_all", input_type=Boolean(optional=True), prefix="--all", doc=InputDocumentation(doc="Show all tasks, even uncommented ones (in combination with -T or -D)")), ToolInput(tag="in_build_all", input_type=Boolean(optional=True), prefix="--build-all", doc=InputDocumentation(doc="Build all prerequisites, including those which are up-to-date.")), ToolInput(tag="in_describe", input_type=Boolean(optional=True), prefix="--describe", doc=InputDocumentation(doc="[PATTERN]         Describe the tasks (matching optional PATTERN), then exit.")), ToolInput(tag="in_execute", input_type=String(optional=True), prefix="--execute", doc=InputDocumentation(doc="Execute some Ruby code and exit.")), ToolInput(tag="in_execute_continue", input_type=String(optional=True), prefix="--execute-continue", doc=InputDocumentation(doc="Execute some Ruby code, then continue with normal task processing.")), ToolInput(tag="in_rake_file", input_type=Boolean(optional=True), prefix="--rakefile", doc=InputDocumentation(doc="[FILENAME]        Use FILENAME as the rakefile to search for.")), ToolInput(tag="in_no_system", input_type=Boolean(optional=True), prefix="--no-system", doc=InputDocumentation(doc="Use standard project Rakefile search paths, ignore system wide rakefiles.")), ToolInput(tag="in_system", input_type=Boolean(optional=True), prefix="--system", doc=InputDocumentation(doc="Using system wide (global) rakefiles (usually '~/.rake/*.rake').")), ToolInput(tag="in_libdir", input_type=File(optional=True), prefix="--libdir", doc=InputDocumentation(doc="Include LIBDIR in the search path for required modules.")), ToolInput(tag="in_jobs", input_type=Boolean(optional=True), prefix="--jobs", doc=InputDocumentation(doc="[NUMBER]              Specifies the maximum number of tasks to execute in parallel. (default is number of CPU cores + 4)")), ToolInput(tag="in_multitask", input_type=Boolean(optional=True), prefix="--multitask", doc=InputDocumentation(doc="Treat all tasks as multitasks.")), ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry-run", doc=InputDocumentation(doc="Do a dry run without executing actions.")), ToolInput(tag="in_no_search", input_type=Boolean(optional=True), prefix="--no-search", doc=InputDocumentation(doc="Do not search parent directories for the Rakefile.")), ToolInput(tag="in_prereqs", input_type=Boolean(optional=True), prefix="--prereqs", doc=InputDocumentation(doc="Display the tasks and dependencies, then exit.")), ToolInput(tag="in_execute_print", input_type=String(optional=True), prefix="--execute-print", doc=InputDocumentation(doc="Execute some Ruby code, print the result, then exit.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Do not log messages to standard output.")), ToolInput(tag="in_require", input_type=String(optional=True), prefix="--require", doc=InputDocumentation(doc="Require MODULE before executing rakefile.")), ToolInput(tag="in_rake_libdir", input_type=String(optional=True), prefix="--rakelibdir", doc=InputDocumentation(doc=",     Auto-import any .rake files in RAKELIBDIR. (default is 'rakelib')")), ToolInput(tag="in_rake_lib", input_type=Boolean(optional=True), prefix="--rakelib", doc=InputDocumentation(doc="Like --quiet, but also suppresses the 'in directory' announcement.")), ToolInput(tag="in_trace", input_type=Boolean(optional=True), prefix="--trace", doc=InputDocumentation(doc="=[OUT]                Turn on invoke/execute tracing, enable full backtrace. OUT can be stderr (default) or stdout.")), ToolInput(tag="in_tasks", input_type=Boolean(optional=True), prefix="--tasks", doc=InputDocumentation(doc="[PATTERN]            Display the tasks (matching optional PATTERN) with descriptions, then exit. -AT combination displays all of tasks contained no description.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Log message to standard output.")), ToolInput(tag="in_where", input_type=Boolean(optional=True), prefix="--where", doc=InputDocumentation(doc="[PATTERN]            Describe the tasks (matching optional PATTERN), then exit.")), ToolInput(tag="in_no_deprecation_warnings", input_type=Boolean(optional=True), prefix="--no-deprecation-warnings", doc=InputDocumentation(doc="Disable the deprecation warnings."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Protk_Setup_Rb_V0_1_0().translate("wdl", allow_empty_container=True)

