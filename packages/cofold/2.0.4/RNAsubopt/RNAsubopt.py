from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, File

Rnasubopt_V0_1_0 = CommandToolBuilder(tool="RNAsubopt", base_command=["RNAsubopt"], inputs=[ToolInput(tag="in_detailed_help", input_type=Boolean(optional=True), prefix="--detailed-help", doc=InputDocumentation(doc="Print help, including all details and hidden\noptions, and exit")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--full-help", doc=InputDocumentation(doc="Print help, including hidden options, and exit")), ToolInput(tag="in_noconv", input_type=Boolean(optional=True), prefix="--noconv", doc=InputDocumentation(doc="Do not automatically substitude nucleotide\n'T' with 'U'\n(default=off)")), ToolInput(tag="in_delta_energy", input_type=String(optional=True), prefix="--deltaEnergy", doc=InputDocumentation(doc="Compute suboptimal structures with energy in a\ncertain range of the optimum (kcal/mol).\nDefault is calculation of mfe structure only.")), ToolInput(tag="in_delta_energy_post", input_type=String(optional=True), prefix="--deltaEnergyPost", doc=InputDocumentation(doc="Only print structures with energy within range\nof the mfe after post reevaluation of\nenergies.")), ToolInput(tag="in_sorted", input_type=Boolean(optional=True), prefix="--sorted", doc=InputDocumentation(doc="Sort the suboptimal structures by energy.\n(default=off)")), ToolInput(tag="in_stoch_bt", input_type=Int(optional=True), prefix="--stochBT", doc=InputDocumentation(doc="Instead of producing all suboptimals in an\nenergy range, produce a random sample of\nsuboptimal structures, drawn with\nprobabilities equal to their Boltzmann\nweights via stochastic backtracking in the\npartition function. The -e and -p options are\nmutually exclusive.")), ToolInput(tag="in_circ", input_type=Boolean(optional=True), prefix="--circ", doc=InputDocumentation(doc="Assume a circular (instead of linear) RNA")), ToolInput(tag="in_dos", input_type=Boolean(optional=True), prefix="--dos", doc=InputDocumentation(doc="Compute density of states instead of secondary")), ToolInput(tag="in_zuker", input_type=Boolean(optional=True), prefix="--zuker", doc=InputDocumentation(doc="Compute Zuker suboptimals instead of all\nsuboptimal structures within an engery band\narround the MFE.\n(default=off)")), ToolInput(tag="in_temp", input_type=Int(optional=True), prefix="--temp", doc=InputDocumentation(doc="Rescale energy parameters to a temperature of\ntemp C. Default is 37C.")), ToolInput(tag="in_no_tetra", input_type=Boolean(optional=True), prefix="--noTetra", doc=InputDocumentation(doc="Do not include special tabulated stabilizing\nenergies for tri-, tetra- and hexaloop\nhairpins. Mostly for testing.\n(default=off)")), ToolInput(tag="in_dangles", input_type=Int(optional=True), prefix="--dangles", doc=InputDocumentation(doc="How to treat 'dangling end' energies for\nbases adjacent to helices in free ends and\nmulti-loops\n(default=`2')")), ToolInput(tag="in_no_lp", input_type=Boolean(optional=True), prefix="--noLP", doc=InputDocumentation(doc="Produce structures without lonely pairs\n(helices of length 1).\n(default=off)")), ToolInput(tag="in_no_gu", input_type=Boolean(optional=True), prefix="--noGU", doc=InputDocumentation(doc="Do not allow GU pairs\n(default=off)")), ToolInput(tag="in_no_closing_gu", input_type=Boolean(optional=True), prefix="--noClosingGU", doc=InputDocumentation(doc="Do not allow GU pairs at the end of helices\n(default=off)")), ToolInput(tag="in_log_ml", input_type=Boolean(optional=True), prefix="--logML", doc=InputDocumentation(doc="Recalculate energies of structures using a\nlogarithmic energy function for multi-loops\nbefore output.  (default=off)")), ToolInput(tag="in_param_file", input_type=File(optional=True), prefix="--paramFile", doc=InputDocumentation(doc="Read energy parameters from paramfile, instead\nof using the default parameter set.")), ToolInput(tag="in_program", input_type=String(), position=0, doc=InputDocumentation(doc="-C, --constraint              Calculate structures subject to constraints.\n(default=off)")), ToolInput(tag="in_molecule_dot", input_type=String(), position=0, doc=InputDocumentation(doc="(default=off)")), ToolInput(tag="in_structures", input_type=String(), position=1, doc=InputDocumentation(doc="(default=off)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rnasubopt_V0_1_0().translate("wdl", allow_empty_container=True)

