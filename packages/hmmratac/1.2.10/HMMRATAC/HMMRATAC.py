from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String

Hmmratac_V0_1_0 = CommandToolBuilder(tool="HMMRATAC", base_command=["HMMRATAC"], inputs=[ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="Sorted BAM file containing the ATAC-seq reads")), ToolInput(tag="in_index", input_type=File(optional=True), prefix="--index", doc=InputDocumentation(doc="Index file for the sorted BAM File")), ToolInput(tag="in_genome", input_type=File(optional=True), prefix="--genome", doc=InputDocumentation(doc="Two column, tab delimited file containing genome size stats")), ToolInput(tag="in_means", input_type=Int(optional=True), prefix="--means", doc=InputDocumentation(doc="Comma separated list of initial mean values for the fragment distribution. Default = 50,200,400,600")), ToolInput(tag="in_stddev", input_type=Int(optional=True), prefix="--stddev", doc=InputDocumentation(doc="Comma separated list of initial standard deviation values for fragment distribution. Default = 20,20,20,20")), ToolInput(tag="in_frage_m", input_type=String(optional=True), prefix="--fragem", doc=InputDocumentation(doc="Whether to perform EM training on the fragment distribution. Default = True")), ToolInput(tag="in_min_mapq", input_type=Int(optional=True), prefix="--minmapq", doc=InputDocumentation(doc="Minimum mapping quality of reads to keep. Default = 30")), ToolInput(tag="in_upper", input_type=Int(optional=True), prefix="--upper", doc=InputDocumentation(doc="Upper limit on fold change range for choosing training sites. Default = 20")), ToolInput(tag="in_lower", input_type=Int(optional=True), prefix="--lower", doc=InputDocumentation(doc="Lower limit on fold change range for choosing training sites. Default = 10")), ToolInput(tag="in_zscore", input_type=Int(optional=True), prefix="--zscore", doc=InputDocumentation(doc="Zscored read depth to mask during Viterbi decoding. Default = 100")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Name for output files. Default = NA")), ToolInput(tag="in_blacklist", input_type=File(optional=True), prefix="--blacklist", doc=InputDocumentation(doc="bed file of blacklisted regions to exclude")), ToolInput(tag="in_peaks", input_type=String(optional=True), prefix="--peaks", doc=InputDocumentation(doc="Whether to report peaks in bed format. Default = true")), ToolInput(tag="in_k_means", input_type=Int(optional=True), prefix="--kmeans", doc=InputDocumentation(doc="Number of States in the model. Default = 3. If not k=3, recommend NOT calling peaks, use bedgraph")), ToolInput(tag="in_training", input_type=File(optional=True), prefix="--training", doc=InputDocumentation(doc="BED file of training regions to use for training model, instead of foldchange settings")), ToolInput(tag="in_bed_graph", input_type=String(optional=True), prefix="--bedgraph", doc=InputDocumentation(doc="Whether to report whole genome bedgraph of all state anntations. Default = false")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--minlen", doc=InputDocumentation(doc="Minimum length of open region to call peak. Note: -p , --peaks must be set. Default = 200")), ToolInput(tag="in_score", input_type=Int(optional=True), prefix="--score", doc=InputDocumentation(doc="What type of score system to use for peaks. Can be used for ranking peaks. Default = max")), ToolInput(tag="in_bg_score", input_type=String(optional=True), prefix="--bgscore", doc=InputDocumentation(doc="Whether to add the HMMR score to each state annotation in bedgraph. Note: this adds considerable time. Default = False")), ToolInput(tag="in_trim", input_type=Int(optional=True), prefix="--trim", doc=InputDocumentation(doc="How many signals from the end to trim off (ie starting with tri signal then di etc). This may be useful if your data doesn't contain many large fragments. Default = 0")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc="Size of the bins to split the genome into for Viterbi decoding.\nTo save memory, the genome is split into <int> long bins and viterbi decoding occurs across each bin.\nDefault = 25000000. Note: For machines with limited memory, it is recomended to reduce the size of the bins.")), ToolInput(tag="in_model", input_type=File(optional=True), prefix="--model", doc=InputDocumentation(doc="Binary model file (generated from previous HMMR run) to use instead of creating new one")), ToolInput(tag="in_model_only", input_type=String(optional=True), prefix="--modelonly", doc=InputDocumentation(doc="Whether or not to stop the program after generating model. Default = false")), ToolInput(tag="in_max_train", input_type=Int(optional=True), prefix="--maxTrain", doc=InputDocumentation(doc="Maximum number of training regions to use. Default == 1000")), ToolInput(tag="in_remove_duplicates", input_type=String(optional=True), prefix="--removeDuplicates", doc=InputDocumentation(doc="Whether or not to remove duplicate reads from analysis. Default = true")), ToolInput(tag="in_print_exclude", input_type=String(optional=True), prefix="--printExclude", doc=InputDocumentation(doc="Whether to output excluded regions into Output_exclude.bed. Default = false")), ToolInput(tag="in_print_train", input_type=String(optional=True), prefix="--printTrain", doc=InputDocumentation(doc="Whether to output training regions into Output_training.bed. Default = true")), ToolInput(tag="in_random_seed", input_type=Int(optional=True), prefix="--randomSeed", doc=InputDocumentation(doc="Seed to set for random sampling of training regions. Default is 10151")), ToolInput(tag="in_threshold", input_type=String(optional=True), prefix="--threshold", doc=InputDocumentation(doc="threshold for reporting peaks. Only peaks who's score is >= this value will be reported.")), ToolInput(tag="in_jar", input_type=String(optional=True), prefix="-jar", doc=InputDocumentation(doc="")), ToolInput(tag="in_java", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hmmratac_V0_1_0().translate("wdl", allow_empty_container=True)

