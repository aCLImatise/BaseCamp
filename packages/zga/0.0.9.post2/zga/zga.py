from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Directory, Int, Boolean, Array

Zga_V0_1_0 = CommandToolBuilder(tool="zga", base_command=["zga"], inputs=[ToolInput(tag="in_first_step", input_type=String(optional=True), prefix="--first-step", doc=InputDocumentation(doc="First step of the pipeline. Default: readqc")), ToolInput(tag="in_last_step", input_type=String(optional=True), prefix="--last-step", doc=InputDocumentation(doc="Last step of the pipeline. Default: annotation")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Output directory")), ToolInput(tag="in_force", input_type=Directory(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite output directory if exists")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of CPU threads to use (where possible)")), ToolInput(tag="in_memory_limit", input_type=Int(optional=True), prefix="--memory-limit", doc=InputDocumentation(doc="Memory limit in GB (default 8)")), ToolInput(tag="in_genus", input_type=String(optional=True), prefix="--genus", doc=InputDocumentation(doc="Provide genus if known")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="Provide species if known")), ToolInput(tag="in_strain", input_type=String(optional=True), prefix="--strain", doc=InputDocumentation(doc="Provide strain if known")), ToolInput(tag="in_transparent", input_type=Boolean(optional=True), prefix="--transparent", doc=InputDocumentation(doc="Show output from tools inside the pipeline")), ToolInput(tag="in_domain", input_type=String(optional=True), prefix="--domain", doc=InputDocumentation(doc="Provide prokaryotic domain: bacteria or archaea")), ToolInput(tag="in_pe_one", input_type=Array(t=Int(), optional=True), prefix="--pe-1", doc=InputDocumentation(doc="FASTQ file(s) with first (left) paired-end reads.\nSpace-separated if multiple.")), ToolInput(tag="in_pe_two", input_type=Array(t=Int(), optional=True), prefix="--pe-2", doc=InputDocumentation(doc="FASTQ file(s) with second (right) paired-end reads.\nSpace-separated if multiple.")), ToolInput(tag="in_pe_merged", input_type=Array(t=String(), optional=True), prefix="--pe-merged", doc=InputDocumentation(doc="FASTQ file(s) with merged overlapped paired-end reads")), ToolInput(tag="in_single_end", input_type=Array(t=String(), optional=True), prefix="--single-end", doc=InputDocumentation(doc="FASTQ file(s) with unpaired or single-end reads")), ToolInput(tag="in_mp_one", input_type=Array(t=Int(), optional=True), prefix="--mp-1", doc=InputDocumentation(doc="Mate pair forward reads. SPAdes only")), ToolInput(tag="in_mp_two", input_type=Array(t=Int(), optional=True), prefix="--mp-2", doc=InputDocumentation(doc="Mate pair forward reads. SPAdes only")), ToolInput(tag="in_pac_bio", input_type=Array(t=String(), optional=True), prefix="--pacbio", doc=InputDocumentation(doc="PacBio reads. Space-separated if multiple.")), ToolInput(tag="in_nano_pore", input_type=Array(t=String(), optional=True), prefix="--nanopore", doc=InputDocumentation(doc="Nanopore reads. Space-separated if multiple.")), ToolInput(tag="in_quality_cut_off", input_type=Int(optional=True), prefix="--quality-cutoff", doc=InputDocumentation(doc="Base quality cutoff for short reads, default: 18")), ToolInput(tag="in_adapters", input_type=String(optional=True), prefix="--adapters", doc=InputDocumentation(doc="Adapter sequences for short reads trimming (FASTA). By\ndefault Illumina and BGI adapter sequences are used.")), ToolInput(tag="in_filter_by_tile", input_type=Boolean(optional=True), prefix="--filter-by-tile", doc=InputDocumentation(doc="Filter short reads based on positional quality over a")), ToolInput(tag="in_tadpole_correct", input_type=Boolean(optional=True), prefix="--tadpole-correct", doc=InputDocumentation(doc="Perform error correction of short reads with\ntadpole.sh from BBtools.SPAdes correction may be\ndisabled with '--no-spades-correction'.")), ToolInput(tag="in_bb_merge_extend", input_type=Int(optional=True), prefix="--bbmerge-extend", doc=InputDocumentation(doc="Perform k-mer read extension by specified length if\ninitial merging wasn't succesfull.")), ToolInput(tag="in_bb_merge_extend_km_er", input_type=Int(optional=True), prefix="--bbmerge-extend-kmer", doc=InputDocumentation(doc="K-mer length for read extension, default 40.")), ToolInput(tag="in_bb_merge_trim", input_type=String(optional=True), prefix="--bbmerge-trim", doc=InputDocumentation(doc="Before merging trim bases with phred score less than a\nspecified value.")), ToolInput(tag="in_calculate_genome_size", input_type=Boolean(optional=True), prefix="--calculate-genome-size", doc=InputDocumentation(doc="Estimate genome size with mash.")), ToolInput(tag="in_genome_size_estimation", input_type=Int(optional=True), prefix="--genome-size-estimation", doc=InputDocumentation(doc="Genome size in bp (no K/M suffix supported) for Flye\nassembler, if known.")), ToolInput(tag="in_mash_km_er_copies", input_type=Int(optional=True), prefix="--mash-kmer-copies", doc=InputDocumentation(doc="Minimum copies of each k-mer to include in size\nestimation")), ToolInput(tag="in_use_unknown_mp", input_type=Boolean(optional=True), prefix="--use-unknown-mp", doc=InputDocumentation(doc="NxTrim: Include reads that are probably mate pairs\n(default: only known MP used)")), ToolInput(tag="in_no_nx_trim", input_type=Boolean(optional=True), prefix="--no-nxtrim", doc=InputDocumentation(doc="Don't process mate-pair reads with NxTrim. Usefull for\npreprocessed reads")), ToolInput(tag="in_assembler", input_type=String(optional=True), prefix="--assembler", doc=InputDocumentation(doc="Assembler: unicycler (default; better quality), spades\n(faster, may use mate-pair reads) or Flye (long reads\nonly).")), ToolInput(tag="in_no_spades_correction", input_type=Boolean(optional=True), prefix="--no-spades-correction", doc=InputDocumentation(doc="Disable short read correction by SPAdes (works for\nSPAdes and unicycler).")), ToolInput(tag="in_use_scaffolds", input_type=Boolean(optional=True), prefix="--use-scaffolds", doc=InputDocumentation(doc="SPAdes: Use assembled scaffolds. Contigs are used by")), ToolInput(tag="in_unicycle_r_mode", input_type=String(optional=True), prefix="--unicycler-mode", doc=InputDocumentation(doc="Unicycler: assember mode: conservative, normal\n(default) or bold.")), ToolInput(tag="in_linear_seqs", input_type=Int(optional=True), prefix="--linear-seqs", doc=InputDocumentation(doc="Expected number of linear sequences")), ToolInput(tag="in_extract_replicons", input_type=Boolean(optional=True), prefix="--extract-replicons", doc=InputDocumentation(doc="Unicycler: extract complete replicons (e.g. plasmids)\nfrom the short-read based assembly to separate files")), ToolInput(tag="in_flye_short_polish", input_type=Boolean(optional=True), prefix="--flye-short-polish", doc=InputDocumentation(doc="Perform polishing of Flye assembly with short reads\nusing racon.")), ToolInput(tag="in_flye_skip_long_polish", input_type=Boolean(optional=True), prefix="--flye-skip-long-polish", doc=InputDocumentation(doc="Skip stage of genome polishing with long reads.")), ToolInput(tag="in_perform_polishing", input_type=Boolean(optional=True), prefix="--perform-polishing", doc=InputDocumentation(doc="Perform polishing. Useful only for flye assembly of\nlong reads and short reads available.")), ToolInput(tag="in_polishing_iterations", input_type=Int(optional=True), prefix="--polishing-iterations", doc=InputDocumentation(doc="Number of polishing iterations.")), ToolInput(tag="in_check_phi_x", input_type=Boolean(optional=True), prefix="--check-phix", doc=InputDocumentation(doc="Check genome for presence of PhiX control sequence.")), ToolInput(tag="in_check_m_mode", input_type=String(optional=True), prefix="--checkm-mode", doc=InputDocumentation(doc="Select CheckM working mode. Default is checking for\ndomain-specific marker-set.")), ToolInput(tag="in_check_m_rank", input_type=String(optional=True), prefix="--checkm-rank", doc=InputDocumentation(doc="Rank of taxon for CheckM. Run 'checkm taxon_list' for\ndetails.")), ToolInput(tag="in_check_m_tax_on", input_type=String(optional=True), prefix="--checkm-taxon", doc=InputDocumentation(doc="Taxon for CheckM. Run 'checkm taxon_list' for details.")), ToolInput(tag="in_check_m_full_tree", input_type=Boolean(optional=True), prefix="--checkm-full-tree", doc=InputDocumentation(doc="Use full tree for inference of marker set, requires\nLOTS of memory.")), ToolInput(tag="in_genome", input_type=String(optional=True), prefix="--genome", doc=InputDocumentation(doc="Genome assembly (when starting from annotation).")), ToolInput(tag="in_g_code", input_type=String(optional=True), prefix="--gcode", doc=InputDocumentation(doc="Genetic code.")), ToolInput(tag="in_locus_tag", input_type=Int(optional=True), prefix="--locus-tag", doc=InputDocumentation(doc="Locus tag prefix. If not provided prefix will be\ngenerated from MD5 checksum.")), ToolInput(tag="in_locus_tag_inc", input_type=Int(optional=True), prefix="--locus-tag-inc", doc=InputDocumentation(doc="Locus tag increment, default = 10")), ToolInput(tag="in_center_name", input_type=String(optional=True), prefix="--center-name", doc=InputDocumentation(doc="Genome center name.")), ToolInput(tag="in_minimum_contig_length", input_type=Int(optional=True), prefix="--minimum-contig-length", doc=InputDocumentation(doc="Minimum sequence length in genome assembly.\n")), ToolInput(tag="in_flow_cell_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--min-short-read-length MIN_SHORT_READ_LENGTH")), ToolInput(tag="in_trimming_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--entropy-cutoff ENTROPY_CUTOFF")), ToolInput(tag="in_default_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--spades-k-list SPADES_K_LIST"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory")), ToolOutput(tag="out_force", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Overwrite output directory if exists"))], container="quay.io/biocontainers/zga:0.0.9.post2--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Zga_V0_1_0().translate("wdl")

