from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Dcmqrti_V0_1_0 = CommandToolBuilder(tool="dcmqrti", base_command=["dcmqrti"], inputs=[ToolInput(tag="in_arguments", input_type=Boolean(optional=True), prefix="--arguments", doc=InputDocumentation(doc="print expanded command line arguments")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="quiet mode, print no warnings and errors")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose mode, print processing details")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="debug mode, print debug information")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="[l]evel: string constant\n(fatal, error, warn, info, debug, trace)\nuse level l for the logger")), ToolInput(tag="in_log_config", input_type=Boolean(optional=True), prefix="--log-config", doc=InputDocumentation(doc="[f]ilename: string\nuse config file f for the logger")), ToolInput(tag="in_config", input_type=Boolean(optional=True), prefix="--config", doc=InputDocumentation(doc="[f]ilename: string\nuse specific configuration file\n(default: /usr/local/etc/dcmtk/dcmqrscp.cfg)")), ToolInput(tag="in_timeout", input_type=Boolean(optional=True), prefix="--timeout", doc=InputDocumentation(doc="[s]econds: integer (default: unlimited)\ntimeout for connection requests")), ToolInput(tag="in_acse_timeout", input_type=Boolean(optional=True), prefix="--acse-timeout", doc=InputDocumentation(doc="[s]econds: integer (default: 30)\ntimeout for ACSE messages")), ToolInput(tag="in_dim_se_timeout", input_type=Boolean(optional=True), prefix="--dimse-timeout", doc=InputDocumentation(doc="[s]econds: integer (default: unlimited)\ntimeout for DIMSE messages")), ToolInput(tag="in_propose_implicit", input_type=Boolean(optional=True), prefix="--propose-implicit", doc=InputDocumentation(doc="propose implicit VR little endian TS only")), ToolInput(tag="in_ae_title", input_type=Boolean(optional=True), prefix="--aetitle", doc=InputDocumentation(doc="[a]etitle: string\nset my AE title (default: TELNET_INITIATOR)")), ToolInput(tag="in_max_pdu", input_type=Boolean(optional=True), prefix="--max-pdu", doc=InputDocumentation(doc="[n]umber of bytes: integer (4096..131072)\nset max receive pdu to n bytes\n(default: use value from configuration file)")), ToolInput(tag="in_disable_new_vr", input_type=Boolean(optional=True), prefix="--disable-new-vr", doc=InputDocumentation(doc="disable support for new VRs, convert to OB")), ToolInput(tag="in_remote", input_type=Boolean(optional=True), prefix="--remote", doc=InputDocumentation(doc="[t]itle: string\nconnect to remote database defined in cfg file\n")), ToolInput(tag="in_peer", input_type=String(), position=0, doc=InputDocumentation(doc="peer host name or symbolic name from cfg file"))], outputs=[], container="quay.io/biocontainers/dcmtk:3.6.5--h5fca97b_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dcmqrti_V0_1_0().translate("wdl")

