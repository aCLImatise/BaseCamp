from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Dcmsign_V0_1_0 = CommandToolBuilder(tool="dcmsign", base_command=["dcmsign"], inputs=[ToolInput(tag="in_arguments", input_type=Boolean(optional=True), prefix="--arguments", doc=InputDocumentation(doc="print expanded command line arguments")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="quiet mode, print no warnings and errors")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose mode, print processing details")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="debug mode, print debug information")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="[l]evel: string constant\n(fatal, error, warn, info, debug, trace)\nuse level l for the logger")), ToolInput(tag="in_log_config", input_type=Boolean(optional=True), prefix="--log-config", doc=InputDocumentation(doc="[f]ilename: string\nuse config file f for the logger")), ToolInput(tag="in_read_dataset", input_type=Boolean(optional=True), prefix="--read-dataset", doc=InputDocumentation(doc="read data set without file meta information")), ToolInput(tag="in__readxferauto_use", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="=   --read-xfer-auto       use TS recognition (default)")), ToolInput(tag="in_read_xfer_detect", input_type=Boolean(optional=True), prefix="--read-xfer-detect", doc=InputDocumentation(doc="ignore TS specified in the file meta header")), ToolInput(tag="in_read_xfer_little", input_type=Boolean(optional=True), prefix="--read-xfer-little", doc=InputDocumentation(doc="read with explicit VR little endian TS")), ToolInput(tag="in_read_xfer_big", input_type=Boolean(optional=True), prefix="--read-xfer-big", doc=InputDocumentation(doc="read with explicit VR big endian TS")), ToolInput(tag="in_read_xfer_implicit", input_type=Boolean(optional=True), prefix="--read-xfer-implicit", doc=InputDocumentation(doc="read with implicit VR little endian TS")), ToolInput(tag="in_verify", input_type=Boolean(optional=True), prefix="--verify", doc=InputDocumentation(doc="verify all signatures (default)")), ToolInput(tag="in_null_passwd", input_type=Boolean(optional=True), prefix="--null-passwd", doc=InputDocumentation(doc="use empty string as password")), ToolInput(tag="in_pem_keys", input_type=Boolean(optional=True), prefix="--pem-keys", doc=InputDocumentation(doc="read keys/certificates as PEM file (default)")), ToolInput(tag="in_der_keys", input_type=Boolean(optional=True), prefix="--der-keys", doc=InputDocumentation(doc="read keys/certificates as DER file")), ToolInput(tag="in_profile_none", input_type=Boolean(optional=True), prefix="--profile-none", doc=InputDocumentation(doc="don't enforce any signature profile (default)")), ToolInput(tag="in_tag", input_type=Boolean(optional=True), prefix="--tag", doc=InputDocumentation(doc="[t]ag: 'gggg,eeee' or dictionary name\nsign only specified tag\n(this option can be specified multiple times)")), ToolInput(tag="in_tag_file", input_type=Boolean(optional=True), prefix="--tag-file", doc=InputDocumentation(doc="[f]ilename: string\nread list of tags from text file")), ToolInput(tag="in_format_new", input_type=Boolean(optional=True), prefix="--format-new", doc=InputDocumentation(doc="use correct DICOM signature format (default)")), ToolInput(tag="in_format_old", input_type=Boolean(optional=True), prefix="--format-old", doc=InputDocumentation(doc="use old (pre-3.5.4) DCMTK signature format,\nnon-conformant if signature includes\ncompressed pixel data")), ToolInput(tag="in_length_undefined", input_type=Boolean(optional=True), prefix="--length-undefined", doc=InputDocumentation(doc="write with undefined lengths")), ToolInput(tag="in_dcm_file_in", input_type=String(), position=0, doc=InputDocumentation(doc="DICOM input filename to be processed")), ToolInput(tag="in_dcm_file_out", input_type=String(), position=1, doc=InputDocumentation(doc="DICOM output filename")), ToolInput(tag="in_string", input_type=String(), position=0, doc=InputDocumentation(doc="use specified password"))], outputs=[], container="quay.io/biocontainers/dcmtk:3.6.5--h5fca97b_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dcmsign_V0_1_0().translate("wdl")

