from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File, Float, Directory, Int

Tobias_Bindetect_V0_1_0 = CommandToolBuilder(tool="TOBIAS_BINDetect", base_command=["TOBIAS", "BINDetect"], inputs=[ToolInput(tag="in_signals", input_type=Boolean(optional=True), prefix="--signals", doc=InputDocumentation(doc="[<bigwig> [<bigwig> ...]]\nSignal per condition (.bigwig format)")), ToolInput(tag="in_peaks", input_type=String(optional=True), prefix="--peaks", doc=InputDocumentation(doc="Peaks.bed containing open chromatin regions across all")), ToolInput(tag="in_genome", input_type=File(optional=True), prefix="--genome", doc=InputDocumentation(doc="Genome .fasta file")), ToolInput(tag="in_cond_names", input_type=Boolean(optional=True), prefix="--cond-names", doc=InputDocumentation(doc="[<name> [<name> ...]]\nNames of conditions fitting to --signals (default:\nprefix of --signals)")), ToolInput(tag="in_peak_header", input_type=File(optional=True), prefix="--peak-header", doc=InputDocumentation(doc="File containing the header of --peaks separated by\nwhitespace or newlines (default: peak columns are named\n'_additional_<count>')")), ToolInput(tag="in_naming", input_type=String(optional=True), prefix="--naming", doc=InputDocumentation(doc="Naming convention for TF output files ('id', 'name',\n'name_id', 'id_name') (default: 'name_id')")), ToolInput(tag="in_motif_p_value", input_type=Float(optional=True), prefix="--motif-pvalue", doc=InputDocumentation(doc="Set p-value threshold for motif scanning (default:\n1e-4)")), ToolInput(tag="in_bound_p_value", input_type=Float(optional=True), prefix="--bound-pvalue", doc=InputDocumentation(doc="Set p-value threshold for bound/unbound split (default:\n0.001)")), ToolInput(tag="in_pseudo", input_type=Float(optional=True), prefix="--pseudo", doc=InputDocumentation(doc="Pseudocount for calculating log2fcs (default: estimated\nfrom data)")), ToolInput(tag="in_time_series", input_type=Boolean(optional=True), prefix="--time-series", doc=InputDocumentation(doc="Will only compare signals1<->signals2<->signals3 (...)\nin order of input, and skip all-against-all comparison.")), ToolInput(tag="in_skip_excel", input_type=Boolean(optional=True), prefix="--skip-excel", doc=InputDocumentation(doc="Skip creation of excel files - for large datasets, this\nwill speed up BINDetect considerably")), ToolInput(tag="in_prefix", input_type=Directory(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix for overview files in --outdir folder (default:\nbindetect)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory to place TFBS/plots in (default:\nbindetect_output)")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Number of cores to use for computation (default: 1)")), ToolInput(tag="in_split", input_type=Int(optional=True), prefix="--split", doc=InputDocumentation(doc="Split of multiprocessing jobs (default: 100)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of output logging (0: silent, 1: errors/warnings,\n2: info, 3: stats, 4: debug, 5: spam) (default: 3)\n"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory to place TFBS/plots in (default:\nbindetect_output)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tobias_Bindetect_V0_1_0().translate("wdl", allow_empty_container=True)

