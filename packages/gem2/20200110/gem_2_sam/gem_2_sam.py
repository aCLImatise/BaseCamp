from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String

Gem_2_Sam_V0_1_0 = CommandToolBuilder(tool="gem_2_sam", base_command=["gem-2-sam"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="(default=stdin)")), ToolInput(tag="in_expect_single_end_reads", input_type=Boolean(optional=True), prefix="--expect-single-end-reads", doc=InputDocumentation(doc="(override automatic SE/PE detection)")), ToolInput(tag="in_expect_paired_end_reads", input_type=Boolean(optional=True), prefix="--expect-paired-end-reads", doc=InputDocumentation(doc="(override automatic SE/PE detection)")), ToolInput(tag="in_quality_format", input_type=Boolean(optional=True), prefix="--quality-format", doc=InputDocumentation(doc="'offset-33'|'offset-64'\n(mandatory when qualities are present)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="(default=stdout)")), ToolInput(tag="in_sequence_lengths", input_type=Boolean(optional=True), prefix="--sequence-lengths", doc=InputDocumentation(doc="(add sequence lengths to SAM header.\nRequires option -I)")), ToolInput(tag="in_read_group", input_type=Int(optional=True), prefix="--read-group", doc=InputDocumentation(doc=", ...      (specify the RG of the reads)")), ToolInput(tag="in_comment", input_type=String(optional=True), prefix="--comment", doc=InputDocumentation(doc="(add a comment to SAM header)")), ToolInput(tag="in_compact", input_type=Boolean(optional=True), prefix="--compact", doc=InputDocumentation(doc="(lump all alignments on the same line,\ndefault=false)")), ToolInput(tag="in_emit_correct_flags", input_type=Boolean(optional=True), prefix="--emit-correct-flags", doc=InputDocumentation(doc="(emit correct flags for unpaired reads\nwhen any fragment has no primary alignment;\nbreaks compliance with PICARD tests)")), ToolInput(tag="in_stranded_ness_from_consensus", input_type=Int(optional=True), prefix="--strandedness-from-consensus", doc=InputDocumentation(doc=", ... ,<couple_s>\nwith <couple> := <donor_consensus>+<acceptor_consensus>\n(list of couples of donor/acceptor\nsplice site consensus sequences,\ndefault=GT+AG.\nRequires option -I)")), ToolInput(tag="in_max_memory", input_type=Int(optional=True), prefix="--max-memory", doc=InputDocumentation(doc="(default=1000000000)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="(default=1)")), ToolInput(tag="in_show_license", input_type=Boolean(optional=True), prefix="--show-license", doc=InputDocumentation(doc="(show license and exit)")), ToolInput(tag="in_gem_two_sam", input_type=Int(), position=0, doc=InputDocumentation(doc="-I|--index <file>                (mandatory with options -l or -s)")), ToolInput(tag="in_with", input_type=String(), position=1, doc=InputDocumentation(doc="<field> := <name> '=' <value>\n<name>  := 'ID' | 'CN' | 'DS' | 'DT' | 'FO' | 'KS'\n'LB' | 'PG' | 'PI' | 'PL' | 'PU' | 'SM'\n(ID and SM must not be empty,\ndefault: ID='0',        PG='GEM',\nPL='ILLUMINA', SM='0')\n<value> := <string>     (see SAM specification; no check performed!)"))], outputs=[], container="quay.io/biocontainers/gem2:20200110--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gem_2_Sam_V0_1_0().translate("wdl")

