from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String

Gem_2_Gem_V0_1_0 = CommandToolBuilder(tool="gem_2_gem", base_command=["gem-2-gem"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="(default=stdin)")), ToolInput(tag="in_sorted_merge", input_type=File(optional=True), prefix="--sorted-merge", doc=InputDocumentation(doc=", ...  (merge canonically labeled & sorted files)")), ToolInput(tag="in_gapped_merging", input_type=Boolean(optional=True), prefix="--gapped-merging", doc=InputDocumentation(doc="(allow missing reads when sorted merging)")), ToolInput(tag="in_synchronous_merge", input_type=File(optional=True), prefix="--synchronous-merge", doc=InputDocumentation(doc=", ...\n(merge files line by line)")), ToolInput(tag="in_lines_per_block", input_type=Int(optional=True), prefix="--lines-per-block", doc=InputDocumentation(doc="(default=50000)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="(default=1)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="(default=stdout)")), ToolInput(tag="in_index", input_type=File(optional=True), prefix="--index", doc=InputDocumentation(doc="(GEM index, mandatory with -v,-r,-O)")), ToolInput(tag="in_verify", input_type=Boolean(optional=True), prefix="--verify", doc=InputDocumentation(doc="(check alignment correctness)")), ToolInput(tag="in_realign", input_type=Boolean(optional=True), prefix="--realign", doc=InputDocumentation(doc="(annotate alignments with substitutions)")), ToolInput(tag="in_splice_orientation_from_consensus", input_type=Int(optional=True), prefix="--splice-orientation-from-consensus", doc=InputDocumentation(doc=", ... ,<couple_s>\nwith <couple> := <donor_consensus>+<acceptor_consensus>\n(annotate splices with their orientation\nusing a splice site consensus,\ndefault=GT+AG)")), ToolInput(tag="in_score_uniqueness_strata", input_type=Int(optional=True), prefix="--score-uniqueness-strata", doc=InputDocumentation(doc="(strata considered to determine uniqueness,\ndefault=2)")), ToolInput(tag="in_score_quality_format", input_type=Boolean(optional=True), prefix="--score-quality-format", doc=InputDocumentation(doc="'offset-33'|'offset-64'\n(mandatory before option -s if score)")), ToolInput(tag="in_score_quality_levels", input_type=Int(optional=True), prefix="--score-quality-levels", doc=InputDocumentation(doc=",<medium_quality>,<hi_quality>\n(turning points to compute quality scores,\ndeafault=10,20,30)")), ToolInput(tag="in_label", input_type=Boolean(optional=True), prefix="--label", doc=InputDocumentation(doc="(canonically label reads, save state)")), ToolInput(tag="in_trim", input_type=String(optional=True), prefix="--trim", doc=InputDocumentation(doc=",<right_len> (trim reads&qualities, save state)")), ToolInput(tag="in_accumulate", input_type=Boolean(optional=True), prefix="--accumulate", doc=InputDocumentation(doc="(accumulate alignments, save state)")), ToolInput(tag="in_score", input_type=String(optional=True), prefix="--score", doc=InputDocumentation(doc="(give alignments the specified score,\n'-s help' shows syntax)")), ToolInput(tag="in_filter", input_type=String(optional=True), prefix="--filter", doc=InputDocumentation(doc=",<max_strata_distance>,<max_alignments>\n(prune alignments based on their score)")), ToolInput(tag="in_full_filter", input_type=String(optional=True), prefix="--full-filter", doc=InputDocumentation(doc="(prune alignments based on the filter,\n'-F help' shows syntax)")), ToolInput(tag="in_strip", input_type=Boolean(optional=True), prefix="--strip", doc=InputDocumentation(doc="(erase last annotation from alignments)")), ToolInput(tag="in_barrier", input_type=Boolean(optional=True), prefix="--barrier", doc=InputDocumentation(doc="(put a barrier to collect operations)")), ToolInput(tag="in_collect", input_type=Boolean(optional=True), prefix="--collect", doc=InputDocumentation(doc="(collect saved states, merging changes)")), ToolInput(tag="in_show_license", input_type=Boolean(optional=True), prefix="--show-license", doc=InputDocumentation(doc="(show license and exit)")), ToolInput(tag="in_gem_two_gem", input_type=Int(), position=0, doc=InputDocumentation(doc="Options relevant to input (only one of -i, -m and -M can be specified):"))], outputs=[], container="quay.io/biocontainers/gem2:20200110--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gem_2_Gem_V0_1_0().translate("wdl")

