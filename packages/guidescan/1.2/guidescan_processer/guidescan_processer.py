from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Int, String

Guidescan_Processer_V0_1_0 = CommandToolBuilder(tool="guidescan_processer", base_command=["guidescan_processer"], inputs=[ToolInput(tag="in_path_fasta_file", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="path to fasta file or folder with fasta files (will\nuse all .fa, .fasta, .fa.gz, .fasta.gz files found in\nthe folder) (default: None)")), ToolInput(tag="in_project_name_use", input_type=Directory(optional=True), prefix="-n", doc=InputDocumentation(doc="project name, use in all output (will produce a folder\nwith this name containing intermediate and final files\nin it) (default: myguides)")), ToolInput(tag="in_min_chr", input_type=Int(optional=True), prefix="--minchr", doc=InputDocumentation(doc="minimum chromosome length to consider, chromosomes in\ninput FASTA that are shorter than this will be\nexcluded from analysis; simple way to exclude\nscaffolds unassigned to known chromosomes etc.\n(default: 10000)")), ToolInput(tag="in_list_names_chromosomes", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc="list names of chromosomes (comma separated) that will\nbe used in analysis, or name of file where this list\nis stored (default: )")), ToolInput(tag="in_desired_length_including", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc="desired length of guideRNAs (not including PAM)\n(default: 20)")), ToolInput(tag="in_pam_sequence_default", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="PAM sequence (default: NGG)")), ToolInput(tag="in_alternative_pam_sequences", input_type=Int(optional=True), prefix="-a", doc=InputDocumentation(doc="alternative PAM sequences (separate multiple ones by\ncommas), will not be used in primary guideRNAs, but\nwill be considered in off-targets; all PAM sequences\nshould be mutually exclusive and of the same length\n(default: NAG)")), ToolInput(tag="in_pam_pos", input_type=String(optional=True), prefix="--pampos", doc=InputDocumentation(doc="position of PAM with respect to guideRNA (default:\nend)")), ToolInput(tag="in_minimum_mismatch_similarity", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc="minimum mismatch similarity between guideRNAs; a\ncandidate guideRNA (with primary PAM) should not have\nalternative occurences in the genome (with any PAM)\nwith less than this many mismatches (not including\nPAM) (default: 2)")), ToolInput(tag="in_maximum_distance_consider", input_type=Int(optional=True), prefix="-d", doc=InputDocumentation(doc="maximum distance to consider from guideRNA to its off-\ntarget; off-target is an alternative occurrence (with\nany PAM) of this guideRNA in the genome at edit\ndistance at most this number (including PAM);\ncurrently values larger than 4 are infeasible for\nlarge (e.g., mammalian) genomes, and value 3 will take\nlong time to compute; use -1 if do not want any off-\ntarget info in resulting database (can add it later\nusing bamdata) (default: 3)")), ToolInput(tag="in_max_off_pos", input_type=Int(optional=True), prefix="--maxoffpos", doc=InputDocumentation(doc="maximum number of positions of k-mers to remember; for\nk-mer occurring multiple times in the genome (such\nk-mers cannot be guideRNAs, but their positions can be\noff-targets of guideRNAs) store at most this many\narbitrary their occurrences in the genome (default:\n10)")), ToolInput(tag="in_max_off_count", input_type=Int(optional=True), prefix="--maxoffcount", doc=InputDocumentation(doc="maximum number of off-targets to store for a guideRNA\nin a resulting BAM library (default: 1000)")), ToolInput(tag="in_gnu_path", input_type=File(optional=True), prefix="--gnupath", doc=InputDocumentation(doc="path to gnu utilities, e.g. '/usr/local/bin'; if\nempty, use system defaults; requires: cut, sort, uniq,\nshuf (default: )")), ToolInput(tag="in_how_many_threads", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="how many threads to use; do not specify more than you\nhave on your system; currently not implemented\n(default: 1)\n"))], outputs=[ToolOutput(tag="out_project_name_use", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_project_name_use", type_hint=File()), doc=OutputDocumentation(doc="project name, use in all output (will produce a folder\nwith this name containing intermediate and final files\nin it) (default: myguides)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Guidescan_Processer_V0_1_0().translate("wdl", allow_empty_container=True)

