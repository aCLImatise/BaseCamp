from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean, Directory

Guidescan_Guidequery_V0_1_0 = CommandToolBuilder(tool="guidescan_guidequery", base_command=["guidescan_guidequery"], inputs=[ToolInput(tag="in_target", input_type=String(optional=True), prefix="--target", doc=InputDocumentation(doc="[--flankdistance FLANKDISTANCE]")), ToolInput(tag="in_path_bam_required", input_type=File(optional=True), prefix="-b", doc=InputDocumentation(doc="path to BAM file with precomputed guideRNAs. REQUIRED")), ToolInput(tag="in_coordinates_form_example", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="coordinates in the form '<chr>:<start>-<end>'\n;example: chrX:3364088-3372035, mutually exclusive\nwith --batch")), ToolInput(tag="in_batch", input_type=File(optional=True), prefix="--batch", doc=InputDocumentation(doc="absolute filepath to a BED file, GTF file where the\nfirst field (column) contains chromosome information\n(chr#:), or a txt file composed of a single field\n(column) of genomic coordinates of the following\nformat: chr#:start-end, mutually exclusive with -c")), ToolInput(tag="in_sequence", input_type=File(optional=True), prefix="--sequence", doc=InputDocumentation(doc="sequence file is fasta file format. sequences will be\nprocessed through locally installed blat binary and\nsequences with perfect matches to a specified genome\nwill be processed. If a perfect match does not exist,\nthe individual query will not be processed")), ToolInput(tag="in_flank_distance", input_type=Int(optional=True), prefix="--flankdistance", doc=InputDocumentation(doc="the distance flanking both the upstream and downstream\nregions of a target coordinate.Default is 1000.")), ToolInput(tag="in_input_coordinates_based", input_type=Boolean(optional=True), prefix="--one", doc=InputDocumentation(doc="whether input coordinates are 1-based (default is\n0-based); output is always in BED format and 0-based")), ToolInput(tag="in_name_output_required", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc="name of output directory. REQUIRED")), ToolInput(tag="in_output_format", input_type=File(optional=True), prefix="--output_format", doc=InputDocumentation(doc="file format for output can either be bed (bed) or csv\n(csv) format. Default is csv.")), ToolInput(tag="in_header", input_type=Boolean(optional=True), prefix="--header", doc=InputDocumentation(doc="whether header should be included in output")), ToolInput(tag="in_off", input_type=Boolean(optional=True), prefix="--off", doc=InputDocumentation(doc="whether detailed info about off-targets of each\nguideRNA should be included in output (each off-target\nin a separate line); default is to include only\nsummary about all off-targets of a guideRNA. Must be\nutilized with csv output format (which is default)")), ToolInput(tag="in_sort", input_type=Int(optional=True), prefix="--sort", doc=InputDocumentation(doc="sort sgRNAs by fewest off-targets (offtargets),\nhighest Rule 2 Set cutting efficiencyscore (score),\nhighest CFD cutting specificity (specificity), or\nsgRNAs closest to the target region (coordinates).\nDefault is coordinates. Mutually exclusive with\nselect.")), ToolInput(tag="in_select", input_type=Int(optional=True), prefix="--select", doc=InputDocumentation(doc="guidequery chooses n optimal sgRNAs based on\nemphasizing fewest off-targets then sorts by Rule 2\nSet cutting efficiency (offtargets) or it chooses n\noptimal sgRNAsbased on emphasizing highest Rule 2 Set\ncutting efficiency score then sorts by fewest off-\ntargets (score). Also can choose n sgRNAs closes to\ntarget and sorts by offtargets (coordinates). Also can\nchoose n sgRNAs with highest CFD score and sorts by\nofftargets. Mutually exclusive with sort.")), ToolInput(tag="in_amount_optimal_sgrnas", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="amount of optimal sgRNAs desired from the --select\nparameter. Ignored if --select not used. Default is 3.")), ToolInput(tag="in_an_not", input_type=File(optional=True), prefix="--annot", doc=InputDocumentation(doc="path to BED file with coordinates of genomic features\nthat should be used for annotation (format\n(tabulated): chrom, start, end, name); for example,\nuse Table Browser https://genome.ucsc.edu/cgi-\nbin/hgTables to create such BED files of various\nkinds; alternatively, use here short names for\npreinstalled exon annotations: 'hg38' for human, 'dm6'\nfor fly, 'mm10' for mouse, 'sacSer3' for yeast, ce11\nfor c. elegans")), ToolInput(tag="in_feature_bed_file", input_type=File(optional=True), prefix="--feature_bed_file", doc=InputDocumentation(doc="path to BED file with genomic features of interest\nsuch that user can upload a BED file with feature\nnames (in 4th field) and GuideScan will map the\ngenomic coordinates to the feature")), ToolInput(tag="in_fast_a_file", input_type=File(optional=True), prefix="--fasta_file", doc=InputDocumentation(doc="fasta file with index located in same directory so\nthat --sequence queries can be processed")), ToolInput(tag="in_blat", input_type=File(optional=True), prefix="--blat", doc=InputDocumentation(doc="absolute filepath to blat tool. Binary packages for\nlocally running blat are found within GuideScan\nsoftware at ./blat_binaries"))], outputs=[ToolOutput(tag="out_name_output_required", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_name_output_required", type_hint=File()), doc=OutputDocumentation(doc="name of output directory. REQUIRED")), ToolOutput(tag="out_output_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_format", type_hint=File()), doc=OutputDocumentation(doc="file format for output can either be bed (bed) or csv\n(csv) format. Default is csv."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Guidescan_Guidequery_V0_1_0().translate("wdl", allow_empty_container=True)

