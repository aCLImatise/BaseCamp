from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int

Numfmt_V0_1_0 = CommandToolBuilder(tool="numfmt", base_command=["numfmt"], inputs=[ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="print warnings about invalid input")), ToolInput(tag="in_delimiter", input_type=String(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="use X instead of whitespace for field delimiter")), ToolInput(tag="in_field", input_type=Int(optional=True), prefix="--field", doc=InputDocumentation(doc="replace the numbers in these input fields (default=1)\nsee FIELDS below")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="use printf style floating-point FORMAT;\nsee FORMAT below for details")), ToolInput(tag="in_from", input_type=String(optional=True), prefix="--from", doc=InputDocumentation(doc="auto-scale input numbers to UNITs; default is 'none';\nsee UNIT below")), ToolInput(tag="in_from_unit", input_type=Int(optional=True), prefix="--from-unit", doc=InputDocumentation(doc="specify the input unit size (instead of the default 1)")), ToolInput(tag="in_grouping", input_type=Boolean(optional=True), prefix="--grouping", doc=InputDocumentation(doc="use locale-defined grouping of digits, e.g. 1,000,000\n(which means it has no effect in the C/POSIX locale)")), ToolInput(tag="in_header", input_type=Boolean(optional=True), prefix="--header", doc=InputDocumentation(doc="[=N]     print (without converting) the first N header lines;\nN defaults to 1 if not specified")), ToolInput(tag="in_invalid", input_type=String(optional=True), prefix="--invalid", doc=InputDocumentation(doc="failure mode for invalid numbers: MODE can be:\nabort (default), fail, warn, ignore")), ToolInput(tag="in_padding", input_type=String(optional=True), prefix="--padding", doc=InputDocumentation(doc="pad the output to N characters; positive N will\nright-align; negative N will left-align;\npadding is ignored if the output is wider than N;\nthe default is to automatically pad if a whitespace\nis found")), ToolInput(tag="in_round", input_type=String(optional=True), prefix="--round", doc=InputDocumentation(doc="use METHOD for rounding when scaling; METHOD can be:\nup, down, from-zero (default), towards-zero, nearest")), ToolInput(tag="in_suffix", input_type=String(optional=True), prefix="--suffix", doc=InputDocumentation(doc="add SUFFIX to output numbers, and accept optional\nSUFFIX in input numbers")), ToolInput(tag="in_to", input_type=String(optional=True), prefix="--to", doc=InputDocumentation(doc="auto-scale output numbers to UNITs; see UNIT below")), ToolInput(tag="in_to_unit", input_type=Int(optional=True), prefix="--to-unit", doc=InputDocumentation(doc="the output unit size (instead of the default 1)")), ToolInput(tag="in_zero_terminated", input_type=Boolean(optional=True), prefix="--zero-terminated", doc=InputDocumentation(doc="line delimiter is NUL, not newline")), ToolInput(tag="in_first_mth_field", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="from first to M'th field (inclusive)")), ToolInput(tag="in_none", input_type=String(), position=0, doc=InputDocumentation(doc="no auto-scaling is done; suffixes will trigger an error")), ToolInput(tag="in_auto", input_type=String(), position=1, doc=InputDocumentation(doc="accept optional single/two letter suffix:\n1K = 1000,\n1Ki = 1024,\n1M = 1000000,\n1Mi = 1048576,")), ToolInput(tag="in_si", input_type=String(), position=2, doc=InputDocumentation(doc="accept optional single letter suffix:\n1K = 1000,\n1M = 1000000,\n...")), ToolInput(tag="in_iec", input_type=String(), position=3, doc=InputDocumentation(doc="accept optional single letter suffix:\n1K = 1024,\n1M = 1048576,\n...")), ToolInput(tag="in_iec_i", input_type=String(), position=4, doc=InputDocumentation(doc="accept optional two-letter suffix:\n1Ki = 1024,\n1Mi = 1048576,\n...")), ToolInput(tag="in_nth_field_end", input_type=String(), position=0, doc=InputDocumentation(doc="from N'th field, to end of line")), ToolInput(tag="in_n_m", input_type=String(), position=1, doc=InputDocumentation(doc="from N'th to M'th field (inclusive)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Numfmt_V0_1_0().translate("wdl", allow_empty_container=True)

