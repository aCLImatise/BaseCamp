from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Directory

Ln_V0_1_0 = CommandToolBuilder(tool="ln", base_command=["ln"], inputs=[ToolInput(tag="in_backup", input_type=Boolean(optional=True), prefix="--backup", doc=InputDocumentation(doc="[=CONTROL]      make a backup of each existing destination file")), ToolInput(tag="in__backup_accept", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="like --backup but does not accept an argument")), ToolInput(tag="in_directory", input_type=Boolean(optional=True), prefix="--directory", doc=InputDocumentation(doc="allow the superuser to attempt to hard link\ndirectories (note: will probably fail due to\nsystem restrictions, even for the superuser)")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="remove existing destination files")), ToolInput(tag="in_interactive", input_type=Boolean(optional=True), prefix="--interactive", doc=InputDocumentation(doc="prompt whether to remove destinations")), ToolInput(tag="in_logical", input_type=Boolean(optional=True), prefix="--logical", doc=InputDocumentation(doc="dereference TARGETs that are symbolic links")), ToolInput(tag="in_no_dereference", input_type=Boolean(optional=True), prefix="--no-dereference", doc=InputDocumentation(doc="treat LINK_NAME as a normal file if\nit is a symbolic link to a directory")), ToolInput(tag="in_physical", input_type=Boolean(optional=True), prefix="--physical", doc=InputDocumentation(doc="make hard links directly to symbolic links")), ToolInput(tag="in_relative", input_type=Boolean(optional=True), prefix="--relative", doc=InputDocumentation(doc="create symbolic links relative to link location")), ToolInput(tag="in_symbolic", input_type=Boolean(optional=True), prefix="--symbolic", doc=InputDocumentation(doc="make symbolic links instead of hard links")), ToolInput(tag="in_suffix", input_type=String(optional=True), prefix="--suffix", doc=InputDocumentation(doc="override the usual backup suffix")), ToolInput(tag="in_target_directory", input_type=Directory(optional=True), prefix="--target-directory", doc=InputDocumentation(doc="specify the DIRECTORY in which to create\nthe links")), ToolInput(tag="in_no_target_directory", input_type=Boolean(optional=True), prefix="--no-target-directory", doc=InputDocumentation(doc="treat LINK_NAME as a normal file always")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="print name of each linked file"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ln_V0_1_0().translate("wdl", allow_empty_container=True)

