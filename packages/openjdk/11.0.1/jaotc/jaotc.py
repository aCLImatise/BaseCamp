from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Directory, Boolean, Int

Jaotc_V0_1_0 = CommandToolBuilder(tool="jaotc", base_command=["jaotc"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file name")), ToolInput(tag="in_class_name", input_type=String(optional=True), prefix="--class-name", doc=InputDocumentation(doc="List of classes to compile")), ToolInput(tag="in_jar", input_type=String(optional=True), prefix="--jar", doc=InputDocumentation(doc="List of jar files to compile")), ToolInput(tag="in_module", input_type=String(optional=True), prefix="--module", doc=InputDocumentation(doc="List of modules to compile")), ToolInput(tag="in_directory", input_type=Directory(optional=True), prefix="--directory", doc=InputDocumentation(doc="List of directories where to search for files to compile")), ToolInput(tag="in_search_path", input_type=File(optional=True), prefix="--search-path", doc=InputDocumentation(doc="List of directories where to search for specified files")), ToolInput(tag="in_compile_commands", input_type=File(optional=True), prefix="--compile-commands", doc=InputDocumentation(doc="Name of file with compile commands")), ToolInput(tag="in_compile_for_tiered", input_type=Boolean(optional=True), prefix="--compile-for-tiered", doc=InputDocumentation(doc="Generate profiling code for tiered compilation")), ToolInput(tag="in_compile_with_assertions", input_type=Boolean(optional=True), prefix="--compile-with-assertions", doc=InputDocumentation(doc="Compile with java assertions")), ToolInput(tag="in_compile_threads", input_type=Int(optional=True), prefix="--compile-threads", doc=InputDocumentation(doc="Number of compilation threads to be used")), ToolInput(tag="in_ignore_errors", input_type=Boolean(optional=True), prefix="--ignore-errors", doc=InputDocumentation(doc="Ignores all exceptions thrown during class loading")), ToolInput(tag="in_exit_on_error", input_type=Boolean(optional=True), prefix="--exit-on-error", doc=InputDocumentation(doc="Exit on compilation errors")), ToolInput(tag="in_info", input_type=Boolean(optional=True), prefix="--info", doc=InputDocumentation(doc="Print information during compilation")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print verbose information")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Print debug information")), ToolInput(tag="in_linker_path", input_type=Boolean(optional=True), prefix="--linker-path", doc=InputDocumentation(doc="Full path to linker executable")), ToolInput(tag="in_flag_pass_flag", input_type=Boolean(optional=True), prefix="-J", doc=InputDocumentation(doc="<flag>                   Pass <flag> directly to the runtime system")), ToolInput(tag="in_list", input_type=String(), position=0, doc=InputDocumentation(doc="A : separated list of class names, modules, jar files\nor directories which contain class files."))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file name"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Jaotc_V0_1_0().translate("wdl", allow_empty_container=True)

