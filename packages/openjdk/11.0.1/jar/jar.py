from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory, String

Jar_V0_1_0 = CommandToolBuilder(tool="jar", base_command=["jar"], inputs=[ToolInput(tag="in_create", input_type=Boolean(optional=True), prefix="--create", doc=InputDocumentation(doc="Create the archive")), ToolInput(tag="in_generate_index", input_type=File(optional=True), prefix="--generate-index", doc=InputDocumentation(doc="Generate index information for the specified jar")), ToolInput(tag="in_update", input_type=Boolean(optional=True), prefix="--update", doc=InputDocumentation(doc="Update an existing jar archive")), ToolInput(tag="in_extract", input_type=Boolean(optional=True), prefix="--extract", doc=InputDocumentation(doc="Extract named (or all) files from the archive")), ToolInput(tag="in_describe_module", input_type=Boolean(optional=True), prefix="--describe-module", doc=InputDocumentation(doc="Print the module descriptor, or automatic module name")), ToolInput(tag="in_change_include_file", input_type=File(optional=True), prefix="-C", doc=InputDocumentation(doc="Change to the specified directory and include the\nfollowing file")), ToolInput(tag="in_file", input_type=File(optional=True), prefix="--file", doc=InputDocumentation(doc="The archive file name. When omitted, either stdin or\nstdout is used based on the operation")), ToolInput(tag="in_release", input_type=Directory(optional=True), prefix="--release", doc=InputDocumentation(doc="Places all following files in a versioned directory\nof the jar (i.e. META-INF/versions/VERSION/)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Generate verbose output on standard output")), ToolInput(tag="in_main_class", input_type=String(optional=True), prefix="--main-class", doc=InputDocumentation(doc="The application entry point for stand-alone\napplications bundled into a modular, or executable,\njar archive")), ToolInput(tag="in_manifest", input_type=File(optional=True), prefix="--manifest", doc=InputDocumentation(doc="Include the manifest information from the given\nmanifest file")), ToolInput(tag="in_no_manifest", input_type=Boolean(optional=True), prefix="--no-manifest", doc=InputDocumentation(doc="Do not create a manifest file for the entries")), ToolInput(tag="in_module_version", input_type=String(optional=True), prefix="--module-version", doc=InputDocumentation(doc="The module version, when creating a modular\njar, or updating a non-modular jar")), ToolInput(tag="in_hash_modules", input_type=String(optional=True), prefix="--hash-modules", doc=InputDocumentation(doc="Compute and record the hashes of modules\nmatched by the given pattern and that depend upon\ndirectly or indirectly on a modular jar being\ncreated or a non-modular jar being updated")), ToolInput(tag="in_module_path", input_type=Boolean(optional=True), prefix="--module-path", doc=InputDocumentation(doc="Location of module dependence for generating\nthe hash")), ToolInput(tag="in_no_compress", input_type=Boolean(optional=True), prefix="--no-compress", doc=InputDocumentation(doc="Store only; use no ZIP compression")), ToolInput(tag="in_help_extra", input_type=Boolean(optional=True), prefix="--help-extra", doc=InputDocumentation(doc="Give help on extra options")), ToolInput(tag="in_archives", input_type=String(), position=0, doc=InputDocumentation(doc="-t, --list                 List the table of contents for the archive"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Jar_V0_1_0().translate("wdl", allow_empty_container=True)

