from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, String

Reaper_V0_1_0 = CommandToolBuilder(tool="reaper", base_command=["reaper"], inputs=[ToolInput(tag="in_geom", input_type=Int(optional=True), prefix="-geom", doc=InputDocumentation(doc="mode in {no-bc, 3p-bc, 5p-bc}")), ToolInput(tag="in_meta", input_type=File(optional=True), prefix="-meta", doc=InputDocumentation(doc="file with geometry-dependent format. Required columns:\nGeometry    Columns:\nno-bc          3p-ad     -       -      -    tabu\n3p-bc          3p-ad  barcode  3p-si    -    tabu\n5p-bc          3p-ad  barcode    -    5p-si  tabu")), ToolInput(tag="in_input_stream_gzipped", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="input stream (gzipped file allowed) (default STDIN)")), ToolInput(tag="in_clean_length", input_type=Int(optional=True), prefix="-clean-length", doc=InputDocumentation(doc="minimum allowed clean length (default 0)")), ToolInput(tag="in_guard", input_type=Int(optional=True), prefix="-guard", doc=InputDocumentation(doc="protect first <int> bases in read from adapter and tabu matching")), ToolInput(tag="in_restrict", input_type=Int(optional=True), prefix="-restrict", doc=InputDocumentation(doc="only use the first <int> bases of adapter or tabu sequence (default 18)\nThis is to avoid false positive matches")), ToolInput(tag="in_tri", input_type=Int(optional=True), prefix="-tri", doc=InputDocumentation(doc="filter out reads with tri-nt score > threshold\na reasonable <threshold> is 35")), ToolInput(tag="in_dust_suffix", input_type=Int(optional=True), prefix="-dust-suffix", doc=InputDocumentation(doc="dust theshold for read suffix (default 0, suggested 20)")), ToolInput(tag="in_nnn_check", input_type=Int(optional=True), prefix="-nnn-check", doc=InputDocumentation(doc="/<outof> (default 0/0)\ndisregard read onwards from seeing <count> N's in <outof> bases")), ToolInput(tag="in_three_p_global", input_type=Boolean(optional=True), prefix="-3p-global", doc=InputDocumentation(doc="l/e[/g[/o]]  (default 14/2/1/0)")), ToolInput(tag="in_three_p_prefix", input_type=Boolean(optional=True), prefix="-3p-prefix", doc=InputDocumentation(doc="l/e[/g[/o]]  (default 8/2/0/2)")), ToolInput(tag="in_three_p_barcode", input_type=Int(optional=True), prefix="-3p-barcode", doc=InputDocumentation(doc="/e[/g[/o]]  (default 0/6/1/0)")), ToolInput(tag="in_five_p_barcode", input_type=Int(optional=True), prefix="-5p-barcode", doc=InputDocumentation(doc="/e[/g[/o]]  (default 0/0/0/2)")), ToolInput(tag="in_mr_tabu", input_type=Boolean(optional=True), prefix="-mr-tabu", doc=InputDocumentation(doc="l/e[/g[/o]]  (default 16/2/1/0)")), ToolInput(tag="in_three_p_head_to_tail", input_type=Int(optional=True), prefix="-3p-head-to-tail", doc=InputDocumentation(doc="minimal trailing perfect match length (default 0)\nsyntax used in the above:\nl  <int> minimum length required to count sub-alignment as match\ne  <int> maximum allowed edit distance\ng  <int> [optional, not active when set to 0] maximum allowed number of gaps\no  <int> [optional, not active when set to 0] offset:\no= 5  requires alignment to start in the first five bases of adaptor\no=-5  requires alignment to end in the last five bases of adaptor")), ToolInput(tag="in_swp", input_type=Int(optional=True), prefix="-swp", doc=InputDocumentation(doc="/S/G match/substitution/gap gain/cost/cost (default 4/1/3)")), ToolInput(tag="in_fast_a_in", input_type=Boolean(optional=True), prefix="--fasta-in", doc=InputDocumentation(doc="read FASTA input")), ToolInput(tag="in_record_format", input_type=String(optional=True), prefix="-record-format", doc=InputDocumentation(doc="(record description, default @%I%A%n%R%n+%#%Q%n)\n[ -record-format syntax is output when supplying --record-format ]")), ToolInput(tag="in_record_format_two", input_type=Int(optional=True), prefix="-record-format2", doc=InputDocumentation(doc="(simple line formats, one field per line):\nR  read\nI  read identifier\nQ  quality scores\nD  discard field")), ToolInput(tag="in_basename", input_type=String(optional=True), prefix="-basename", doc=InputDocumentation(doc="pfx.lint.gz, pfx.clean.gz pfx.report etc will be constructed")), ToolInput(tag="in_format_clean", input_type=String(optional=True), prefix="-format-clean", doc=InputDocumentation(doc="(output for clean reads)")), ToolInput(tag="in_format_lint", input_type=Int(optional=True), prefix="-format-lint", doc=InputDocumentation(doc="(output for filtered reads)\n-format-clean/lint specification syntax:\n%R  read\n%C  clean read\n%Z  clean read padded with Ns if necessary\n%V  reverse complement of clean read\n%I  read identifier\n%Q  clean or input read quality (for clean / lint file respectively)\n%X  read count (only applicable if -record-format is used)\n%Y  input read quality\n%q<c>  clean input read quality padded with character <c>\n%A  annotation field\n%L  clean read length\n%M  message describing cause for filtering (lint file)\n%T  trinucleotide complexity score (clean/lint file)\n%U  dUst sUffix complexity information\n%3  best read/3p-adaptor alignment\n%=  alignment characteristics\nmt=matchtype\nsc=suffix-complexity\nht=head-tail-match\nnn=N-match-offset\nbb=B-match-offset\naa=Polya-offset\nqq=Quality-trim-offset\n%n  newline\n%J  record offset, unique for each read. Use to match paired-end reads\n%f  fastq line number based on standard fastq format\n%t  tab\n%%  percent sign\nAnything else is copied verbatim")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="-debug", doc=InputDocumentation(doc="[acl]+     a=alignments c=clean l=lint")), ToolInput(tag="in_sample", input_type=String(optional=True), prefix="-sample", doc=InputDocumentation(doc="/l       if debug, sample every c/l clean/lint read")), ToolInput(tag="in_no_zip", input_type=Boolean(optional=True), prefix="--nozip", doc=InputDocumentation(doc="do not output gzipped files")), ToolInput(tag="in_no_qc", input_type=Boolean(optional=True), prefix="--noqc", doc=InputDocumentation(doc="do not output quality report files")), ToolInput(tag="in_bcq_early", input_type=Boolean(optional=True), prefix="--bcq-early", doc=InputDocumentation(doc="perform early 'B' quality filtering (when reading sequences)")), ToolInput(tag="in_bcq_late", input_type=Boolean(optional=True), prefix="--bcq-late", doc=InputDocumentation(doc="perform late 'B' quality filtering (before outputting sequences)")), ToolInput(tag="in_full_length", input_type=Boolean(optional=True), prefix="--full-length", doc=InputDocumentation(doc="only allow reads not shortened in any filter step")), ToolInput(tag="in_keep_all", input_type=Boolean(optional=True), prefix="--keep-all", doc=InputDocumentation(doc="delete rather than discard reads (e.g. tabu match, missing 5p-sinsert)")), ToolInput(tag="in_trim_length", input_type=Int(optional=True), prefix="-trim-length", doc=InputDocumentation(doc="cut reads back to length <int>")), ToolInput(tag="in_polya", input_type=Int(optional=True), prefix="-polya", doc=InputDocumentation(doc="remove trailing A's if length exceeds <int>")), ToolInput(tag="in_sc_max", input_type=Int(optional=True), prefix="-sc-max", doc=InputDocumentation(doc="threshold for complexity of suffix following prefix match (default 0.25)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Reaper_V0_1_0().translate("wdl", allow_empty_container=True)

