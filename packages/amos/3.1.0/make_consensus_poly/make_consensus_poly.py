from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Float, String

Make_Consensus_Poly_V0_1_0 = CommandToolBuilder(tool="make_consensus_poly", base_command=["make-consensus_poly"], inputs=[ToolInput(tag="in_output_alignments_instead", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="Output alignments instead of consensus messages")), ToolInput(tag="in_output_amos_file", input_type=File(optional=True), prefix="-A", doc=InputDocumentation(doc="Output an AMOS message file")), ToolInput(tag="in_input_amos_bank", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="Input from AMOS bank")), ToolInput(tag="in_output_amos_bank", input_type=Boolean(optional=True), prefix="-B", doc=InputDocumentation(doc="Output to an AMOS bank")), ToolInput(tag="in_process_contig_messages", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Process contig messages")), ToolInput(tag="in_input_celera_msg", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="Input is Celera msg format, i.e., a .cgb or .cgw file")), ToolInput(tag="in_set_alignment_error", input_type=Float(optional=True), prefix="-e", doc=InputDocumentation(doc="Set alignment error rate to <x>, e.g.,  -e 0.05  for 5% error")), ToolInput(tag="in_get_extra_sequences", input_type=File(optional=True), prefix="-E", doc=InputDocumentation(doc="Get extra sequences to align from fasta file <fn>")), ToolInput(tag="in_output_consensus_only", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Output consensus only in FASTA format")), ToolInput(tag="in_file_containing_list_iids", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="File containing list of IIDs to be processed")), ToolInput(tag="in_file_containing_list_eids", input_type=File(optional=True), prefix="-n", doc=InputDocumentation(doc="File containing list of EIDs (names) to be processed")), ToolInput(tag="in_set_minimum_overlap", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="Set minimum overlap bases to <n>")), ToolInput(tag="in_umd_formatusing_reads", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc="Input is simple contig format, i.e., UMD format\nusing partial reads")), ToolInput(tag="in_output_eid_seqnames", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Output EID seqnames for reads instead of IID ints")), ToolInput(tag="in_input_umd_format", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="Input is simple contig format, i.e., UMD format")), ToolInput(tag="in_output_tigr_assembler", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="Output in TIGR Assembler contig format")), ToolInput(tag="in_process_unitig_messages", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="Process unitig messages")), ToolInput(tag="in_set_verbose_level", input_type=String(optional=True), prefix="-v", doc=InputDocumentation(doc="Set verbose level to <n>.  Higher produces more output.")), ToolInput(tag="in_make_consensus_poly", input_type=String(), position=0, doc=InputDocumentation(doc="<tig-file> <bank-name>"))], outputs=[ToolOutput(tag="out_output_amos_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_amos_file", type_hint=File()), doc=OutputDocumentation(doc="Output an AMOS message file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Make_Consensus_Poly_V0_1_0().translate("wdl", allow_empty_container=True)

