from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Directory, File, String, Boolean

Amber_V0_1_0 = CommandToolBuilder(tool="AMBER", base_command=["AMBER"], inputs=[ToolInput(tag="in_max_depth_percent", input_type=Int(optional=True), prefix="-max_depth_percent", doc=InputDocumentation(doc="Min percentage of median depth [1.5]")), ToolInput(tag="in_max_het_af_percent", input_type=Int(optional=True), prefix="-max_het_af_percent", doc=InputDocumentation(doc="Max heterozygous AF% [0.65]")), ToolInput(tag="in_min_base_quality", input_type=Int(optional=True), prefix="-min_base_quality", doc=InputDocumentation(doc="Minimum quality for a base to be\nconsidered [13]")), ToolInput(tag="in_min_depth_percent", input_type=Int(optional=True), prefix="-min_depth_percent", doc=InputDocumentation(doc="Max percentage of median depth [0.5]")), ToolInput(tag="in_min_het_af_percent", input_type=Int(optional=True), prefix="-min_het_af_percent", doc=InputDocumentation(doc="Min heterozygous AF% [0.4]")), ToolInput(tag="in_min_mapping_quality", input_type=Int(optional=True), prefix="-min_mapping_quality", doc=InputDocumentation(doc="Minimum mapping quality for an alignment\nto be used [1]")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="-output_dir", doc=InputDocumentation(doc="Output directory")), ToolInput(tag="in_ref_genome", input_type=File(optional=True), prefix="-ref_genome", doc=InputDocumentation(doc="Path to the ref genome fasta file")), ToolInput(tag="in_reference", input_type=String(optional=True), prefix="-reference", doc=InputDocumentation(doc="Name of reference sample")), ToolInput(tag="in_reference_bam", input_type=File(optional=True), prefix="-reference_bam", doc=InputDocumentation(doc="Path to reference bam file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Number of threads [1]")), ToolInput(tag="in_tumor", input_type=String(optional=True), prefix="-tumor", doc=InputDocumentation(doc="Name of tumor sample")), ToolInput(tag="in_tumor_bam", input_type=File(optional=True), prefix="-tumor_bam", doc=InputDocumentation(doc="Path to tumor bam file")), ToolInput(tag="in_tumor_only", input_type=Boolean(optional=True), prefix="-tumor_only", doc=InputDocumentation(doc="Tumor only mode")), ToolInput(tag="in_tumor_only_min_support", input_type=Int(optional=True), prefix="-tumor_only_min_support", doc=InputDocumentation(doc="Min VAF in ref and alt in tumor only mode\n[2]")), ToolInput(tag="in_tumor_only_min_vaf", input_type=Int(optional=True), prefix="-tumor_only_min_vaf", doc=InputDocumentation(doc="Min support in ref and alt in tumor only\nmode [0.05]")), ToolInput(tag="in_validation_stringency", input_type=String(optional=True), prefix="-validation_stringency", doc=InputDocumentation(doc="SAM validation strategy: STRICT, SILENT,\nLENIENT [STRICT]\n")), ToolInput(tag="in_amber_application", input_type=String(), position=0, doc=InputDocumentation(doc="-loci <arg>                     Path to BAF loci vcf file"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory"))], container="quay.io/biocontainers/hmftools-amber:3.5--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Amber_V0_1_0().translate("wdl")

