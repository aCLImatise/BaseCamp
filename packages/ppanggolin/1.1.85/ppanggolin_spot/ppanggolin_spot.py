from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Boolean, Int, String, File

Ppanggolin_Spot_V0_1_0 = CommandToolBuilder(tool="ppanggolin_spot", base_command=["ppanggolin", "spot"], inputs=[ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory (default:\nppanggolin_output_DATE2020-09-09_HOUR23.41.14_PID1862)")), ToolInput(tag="in_spot_graph", input_type=Boolean(optional=True), prefix="--spot_graph", doc=InputDocumentation(doc="Writes a graph in a .gexf format of pairs of blocks of\nsingle copy markers flanking RGPs, supposedly\nbelonging to the same hotspot (default: False)")), ToolInput(tag="in_draw_hotspots", input_type=Boolean(optional=True), prefix="--draw_hotspots", doc=InputDocumentation(doc="Draws a figure representing all of the hotspots\nsyntenies (default: False)")), ToolInput(tag="in_overlapping_match", input_type=Int(optional=True), prefix="--overlapping_match", doc=InputDocumentation(doc="The number of 'missing' persistent genes allowed when\ncomparing flanking genes during hotspot computations\n(default: 2)")), ToolInput(tag="in_set_size", input_type=Int(optional=True), prefix="--set_size", doc=InputDocumentation(doc="Number of single copy markers to use as flanking genes\nfor a RGP during hotspot computation (default: 3)")), ToolInput(tag="in_exact_match_size", input_type=Int(optional=True), prefix="--exact_match_size", doc=InputDocumentation(doc="Number of perfecty matching flanking single copy\nmarkers required to associate RGPs during hotspot\ncomputation (Ex: If set to 1, two RGPs are in the same\nhotspot if both their 1st flanking genes are the same)\n(default: 1)")), ToolInput(tag="in_interest", input_type=String(optional=True), prefix="--interest", doc=InputDocumentation(doc="Comma separated list of elements to flag when drawing\nhotspots (default: )")), ToolInput(tag="in_pan_genome", input_type=File(optional=True), prefix="--pangenome", doc=InputDocumentation(doc="The pangenome .h5 file (default: None)")), ToolInput(tag="in_tmpdir", input_type=Directory(optional=True), prefix="--tmpdir", doc=InputDocumentation(doc="directory for storing temporary files (default: /tmp)")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Indicate verbose level (0 for warning and errors only,\n1 for info, 2 for debug) (default: 1)")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="log output file (default: stdout)")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Number of available cpus (default: 1)")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="--force", doc=InputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory (default:\nppanggolin_output_DATE2020-09-09_HOUR23.41.14_PID1862)")), ToolOutput(tag="out_log", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log", type_hint=File()), doc=OutputDocumentation(doc="log output file (default: stdout)")), ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ppanggolin_Spot_V0_1_0().translate("wdl", allow_empty_container=True)

