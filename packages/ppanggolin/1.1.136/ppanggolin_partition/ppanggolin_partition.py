from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Int, Directory, Boolean, String

Ppanggolin_Partition_V0_1_0 = CommandToolBuilder(tool="ppanggolin_partition", base_command=["ppanggolin", "partition"], inputs=[ToolInput(tag="in_pan_genome", input_type=File(optional=True), prefix="--pangenome", doc=InputDocumentation(doc="The pangenome .h5 file (default: None)")), ToolInput(tag="in_beta", input_type=Float(optional=True), prefix="--beta", doc=InputDocumentation(doc="beta is the strength of the smoothing using the graph\ntopology during partitionning. 0 will deactivate\nspatial smoothing. (default: 2.5)")), ToolInput(tag="in_max_degree_smoothing", input_type=Int(optional=True), prefix="--max_degree_smoothing", doc=InputDocumentation(doc="max. degree of the nodes to be included in the\nsmoothing process. (default: 10)")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory (default:\nppanggolin_output_DATE2021-03-08_HOUR12.47.21_PID1439)")), ToolInput(tag="in_free_dispersion", input_type=Boolean(optional=True), prefix="--free_dispersion", doc=InputDocumentation(doc="use if the dispersion around the centroid vector of\neach partition during must be free. It will be the\nsame for all organisms by default. (default: False)")), ToolInput(tag="in_chunk_size", input_type=Int(optional=True), prefix="--chunk_size", doc=InputDocumentation(doc="Size of the chunks when performing partitionning using\nchunks of organisms. Chunk partitionning will be used\nautomatically if the number of genomes is above this\nnumber. (default: 500)")), ToolInput(tag="in_nb_of_partitions", input_type=Int(optional=True), prefix="--nb_of_partitions", doc=InputDocumentation(doc="Number of partitions to use. Must be at least 3. If\nunder 3, it will be detected automatically. (default:\n-1)")), ToolInput(tag="in_kmm", input_type=Int(optional=True), prefix="-Kmm", doc=InputDocumentation(doc="KRANGE, --krange KRANGE KRANGE\nRange of K values to test when detecting K\nautomatically. Default between 3 and 20. (default: [3,\n20])")), ToolInput(tag="in_icl_margin", input_type=Float(optional=True), prefix="--ICL_margin", doc=InputDocumentation(doc="K is detected automatically by maximizing ICL. However\nat some point the ICL reaches a plateau. Therefore we\nare looking for the minimal value of K without\nsignificative gain from the larger values of K\nmeasured by ICL. For that we take the lowest K that is\nfound within a given 'margin' of the maximal ICL\nvalue. Basically, change this option only if you truly\nunderstand it, otherwise just leave it be. (default:\n0.05)")), ToolInput(tag="in_draw_icl", input_type=Boolean(optional=True), prefix="--draw_ICL", doc=InputDocumentation(doc="Use if you can to draw the ICL curve for all of the\ntested K values. Will not be done if K is given.\n(default: False)")), ToolInput(tag="in_keep_tmp_files", input_type=Boolean(optional=True), prefix="--keep_tmp_files", doc=InputDocumentation(doc="Use if you want to keep the temporary NEM files\n(default: False)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="seed used to generate random numbers (default: 42)")), ToolInput(tag="in_tmpdir", input_type=Directory(optional=True), prefix="--tmpdir", doc=InputDocumentation(doc="directory for storing temporary files (default: /tmp)")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Indicate verbose level (0 for warning and errors only,\n1 for info, 2 for debug) (default: 1)")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="log output file (default: stdout)")), ToolInput(tag="in_disable_prog_bar", input_type=Boolean(optional=True), prefix="--disable_prog_bar", doc=InputDocumentation(doc="disables the progress bars (default: False)")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Number of available cpus (default: 1)")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="--force", doc=InputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory (default:\nppanggolin_output_DATE2021-03-08_HOUR12.47.21_PID1439)")), ToolOutput(tag="out_log", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log", type_hint=File()), doc=OutputDocumentation(doc="log output file (default: stdout)")), ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], container="quay.io/biocontainers/ppanggolin:1.1.136--py37hf01694f_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ppanggolin_Partition_V0_1_0().translate("wdl")

