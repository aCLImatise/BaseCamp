from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Boolean, Directory, String, Int

Ppanggolin_Write_V0_1_0 = CommandToolBuilder(tool="ppanggolin_write", base_command=["ppanggolin", "write"], inputs=[ToolInput(tag="in_pan_genome", input_type=File(optional=True), prefix="--pangenome", doc=InputDocumentation(doc="The pangenome .h5 file (default: None)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory where the file(s) will be written\n(default: None)")), ToolInput(tag="in_soft_core", input_type=Float(optional=True), prefix="--soft_core", doc=InputDocumentation(doc="Soft core threshold to use (default: 0.95)")), ToolInput(tag="in_dup_margin", input_type=Float(optional=True), prefix="--dup_margin", doc=InputDocumentation(doc="minimum ratio of organisms in which the family must\nhave multiple genes for it to be considered\n'duplicated' (default: 0.05)")), ToolInput(tag="in_gex_f", input_type=Boolean(optional=True), prefix="--gexf", doc=InputDocumentation(doc="write a gexf file with all the annotations and all the\ngenes of each gene family (default: False)")), ToolInput(tag="in_light_gex_f", input_type=Boolean(optional=True), prefix="--light_gexf", doc=InputDocumentation(doc="write a gexf file with the gene families and basic\ninformations about them (default: False)")), ToolInput(tag="in_csv", input_type=Boolean(optional=True), prefix="--csv", doc=InputDocumentation(doc="csv file format as used by Roary, among others. The\nalternative gene ID will be the partition, if there is\none (default: False)")), ToolInput(tag="in_r_tab", input_type=Boolean(optional=True), prefix="--Rtab", doc=InputDocumentation(doc="tabular file for the gene binary presence absence\nmatrix (default: False)")), ToolInput(tag="in_projection", input_type=Boolean(optional=True), prefix="--projection", doc=InputDocumentation(doc="a csv file for each organism providing informations on\nthe projection of the graph on the organism (default:\nFalse)")), ToolInput(tag="in_stats", input_type=Boolean(optional=True), prefix="--stats", doc=InputDocumentation(doc="tsv files with some statistics for each organism and\nfor each gene family (default: False)")), ToolInput(tag="in_partitions", input_type=Boolean(optional=True), prefix="--partitions", doc=InputDocumentation(doc="list of families belonging to each partition, with one\nfile per partitions and one family per line (default:\nFalse)")), ToolInput(tag="in_compress", input_type=Boolean(optional=True), prefix="--compress", doc=InputDocumentation(doc="Compress the files in .gz (default: False)")), ToolInput(tag="in_json", input_type=Boolean(optional=True), prefix="--json", doc=InputDocumentation(doc="Writes the graph in a json file format (default:\nFalse)")), ToolInput(tag="in_regions", input_type=Boolean(optional=True), prefix="--regions", doc=InputDocumentation(doc="Write the RGP in a tab format, one file per genome\n(default: False)")), ToolInput(tag="in_spots", input_type=Boolean(optional=True), prefix="--spots", doc=InputDocumentation(doc="Write spot summary and a list of all rgp in each spot\n(default: False)")), ToolInput(tag="in_borders", input_type=Boolean(optional=True), prefix="--borders", doc=InputDocumentation(doc="List all borders of each spot (default: False)")), ToolInput(tag="in_families_tsv", input_type=Boolean(optional=True), prefix="--families_tsv", doc=InputDocumentation(doc="Write a tsv file providing the association between\ngenes and gene families (default: False)")), ToolInput(tag="in_tmpdir", input_type=Directory(optional=True), prefix="--tmpdir", doc=InputDocumentation(doc="directory for storing temporary files (default: /tmp)")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Indicate verbose level (0 for warning and errors only,\n1 for info, 2 for debug) (default: 1)")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="log output file (default: stdout)")), ToolInput(tag="in_disable_prog_bar", input_type=Boolean(optional=True), prefix="--disable_prog_bar", doc=InputDocumentation(doc="disables the progress bars (default: False)")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Number of available cpus (default: 1)")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="--force", doc=InputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory where the file(s) will be written\n(default: None)")), ToolOutput(tag="out_log", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log", type_hint=File()), doc=OutputDocumentation(doc="log output file (default: stdout)")), ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], container="quay.io/biocontainers/ppanggolin:1.1.136--py37hf01694f_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ppanggolin_Write_V0_1_0().translate("wdl")

