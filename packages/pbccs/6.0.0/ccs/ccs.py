from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Ccs_V0_1_0 = CommandToolBuilder(tool="ccs", base_command=["ccs"], inputs=[ToolInput(tag="in_min_passes", input_type=Boolean(optional=True), prefix="--min-passes", doc=InputDocumentation(doc="INT    Minimum number of full-length subreads required to generate CCS for a ZMW. [3]")), ToolInput(tag="in_min_snr", input_type=Boolean(optional=True), prefix="--min-snr", doc=InputDocumentation(doc="FLOAT  Minimum SNR of subreads to use for generating CCS [2.5]")), ToolInput(tag="in_top_passes", input_type=Boolean(optional=True), prefix="--top-passes", doc=InputDocumentation(doc="INT    Pick at maximum the top N passes for each ZMW. [60]")), ToolInput(tag="in_min_length", input_type=Boolean(optional=True), prefix="--min-length", doc=InputDocumentation(doc="INT    Minimum draft length before polishing. [10]")), ToolInput(tag="in_max_length", input_type=Boolean(optional=True), prefix="--max-length", doc=InputDocumentation(doc="INT    Maximum draft length before polishing. [50000]")), ToolInput(tag="in_chunk", input_type=Boolean(optional=True), prefix="--chunk", doc=InputDocumentation(doc="STR    Operate on a single chunk. Format i/N, where i in [1,N]. Examples: 3/24 or 9/9")), ToolInput(tag="in_max_chunks", input_type=Boolean(optional=True), prefix="--max-chunks", doc=InputDocumentation(doc="Determine maximum number of chunks.")), ToolInput(tag="in_model_path", input_type=Boolean(optional=True), prefix="--model-path", doc=InputDocumentation(doc="STR    Path to a chemistry model file or directory containing model files.")), ToolInput(tag="in_model_spec", input_type=Boolean(optional=True), prefix="--model-spec", doc=InputDocumentation(doc="STR    Name of chemistry or model to use, overriding default selection.")), ToolInput(tag="in_by_strand", input_type=Boolean(optional=True), prefix="--by-strand", doc=InputDocumentation(doc="Generate a consensus for each strand.")), ToolInput(tag="in_skip_polish", input_type=Boolean(optional=True), prefix="--skip-polish", doc=InputDocumentation(doc="Only output the initial draft template (faster, less accurate).")), ToolInput(tag="in_all", input_type=Boolean(optional=True), prefix="--all", doc=InputDocumentation(doc="Emit all ZMWs.")), ToolInput(tag="in_sub_read_fall_back", input_type=Boolean(optional=True), prefix="--subread-fallback", doc=InputDocumentation(doc="Emit a representative subread, instead of the draft consensus, if polishing failed.")), ToolInput(tag="in_all_kinetics", input_type=Boolean(optional=True), prefix="--all-kinetics", doc=InputDocumentation(doc="Calculate mean pulse widths (PW) and interpulse durations (IPD) for every ZMW.")), ToolInput(tag="in_hifi_kinetics", input_type=Boolean(optional=True), prefix="--hifi-kinetics", doc=InputDocumentation(doc="Calculate mean pulse widths (PW) and interpulse durations (IPD) for every HiFi read.")), ToolInput(tag="in_min_rq", input_type=Boolean(optional=True), prefix="--min-rq", doc=InputDocumentation(doc="FLOAT  Minimum predicted accuracy in [0, 1]. [0.99]")), ToolInput(tag="in_report_file", input_type=Boolean(optional=True), prefix="--report-file", doc=InputDocumentation(doc="FILE   Where to write the results report.")), ToolInput(tag="in_report_json", input_type=Boolean(optional=True), prefix="--report-json", doc=InputDocumentation(doc="FILE   Where to write the results report as json.")), ToolInput(tag="in_metrics_json", input_type=Boolean(optional=True), prefix="--metrics-json", doc=InputDocumentation(doc="FILE   Where to write the zmw metrics as json.")), ToolInput(tag="in_suppress_reports", input_type=Boolean(optional=True), prefix="--suppress-reports", doc=InputDocumentation(doc="Do not generate report or metric files per default, only those requested.")), ToolInput(tag="in_num_threads", input_type=Boolean(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="INT    Number of threads to use, 0 means autodetection. [0]")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="STR    Set log level. Valid choices: (TRACE, DEBUG, INFO, WARN, FATAL). [WARN]")), ToolInput(tag="in_log_file", input_type=Boolean(optional=True), prefix="--log-file", doc=InputDocumentation(doc="FILE   Log to a file, instead of stderr.")), ToolInput(tag="in_in_dot_sub_reads_dot_bam_vertical_line_xml", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_out_dot_ccs_dot_bam_vertical_line_fast_q_do_tgz_vertical_line_xml", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_file", input_type=File(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_consensus", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_sub_reads", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_reads", input_type=String(), position=3, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/pbccs:6.0.0--1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ccs_V0_1_0().translate("wdl")

