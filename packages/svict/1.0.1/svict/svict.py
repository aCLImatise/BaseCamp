from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Svict_V0_1_0 = CommandToolBuilder(tool="svict", base_command=["svict"], inputs=[ToolInput(tag="in_input", input_type=Boolean(optional=True), prefix="--input", doc=InputDocumentation(doc="[FILE]\nInput alignment file. This file should be a sorted SAM or BAM file.")), ToolInput(tag="in_reference", input_type=Boolean(optional=True), prefix="--reference", doc=InputDocumentation(doc="[FILE]\nReference geneome that the reads are algined to.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="[STRING]\nPrefix of output file (default out)")), ToolInput(tag="in_annotation", input_type=Boolean(optional=True), prefix="--annotation", doc=InputDocumentation(doc="[FILE]\nGTF file. Enables annotation of SV calls and fusion identification.")), ToolInput(tag="in_min_support", input_type=Boolean(optional=True), prefix="--min_support", doc=InputDocumentation(doc="[INT]\nThe minimum number of supporting reads required to be considered a SV (default 2).")), ToolInput(tag="in_max_support", input_type=Boolean(optional=True), prefix="--max_support", doc=InputDocumentation(doc="[INT]\nThe maximum number of supporting reads required to be considered a SV, could be used to filter out germline calls (default unlimited).")), ToolInput(tag="in_min_length", input_type=Boolean(optional=True), prefix="--min_length", doc=InputDocumentation(doc="[INT]\nMin SV length (default 30).")), ToolInput(tag="in_max_length", input_type=Boolean(optional=True), prefix="--max_length", doc=InputDocumentation(doc="[INT]\nMax SV length (default 20000).")), ToolInput(tag="in_print_reads", input_type=Boolean(optional=True), prefix="--print_reads", doc=InputDocumentation(doc="Print all contigs and associated reads as additional output out.vcf.reads, out is the prefix specified in -o|--output, when activated.")), ToolInput(tag="in_print_stats", input_type=Boolean(optional=True), prefix="--print_stats", doc=InputDocumentation(doc=":\nPrint statistics of detected SV calls and fusions to stderr.")), ToolInput(tag="in_window_size", input_type=Boolean(optional=True), prefix="--window_size", doc=InputDocumentation(doc="[INT]\nThe size of the sliding window collecting all reads with soft-clip/split positions in it to form the breakpoint specific cluster for contig assembly.\nLarger window size could assign a read to more clusters for potentially higher sensitivity with the cost of increased running time (default 3).")), ToolInput(tag="in_min_sc", input_type=Boolean(optional=True), prefix="--min_sc", doc=InputDocumentation(doc="[INT]\nMinimum soft clip length for a read to be considered as unmapped or incorrectly mapped to be extracted for contig assembly (default 10).")), ToolInput(tag="in_no_in_del", input_type=Boolean(optional=True), prefix="--no_indel", doc=InputDocumentation(doc="Ignore indels in the input BAM/SAM (I and D in cigar) when extracting potential breakpoints.")), ToolInput(tag="in_assembler_overlap", input_type=Boolean(optional=True), prefix="--assembler_overlap", doc=InputDocumentation(doc="[INT]\nThe minimum lenth of overlaps between 2 reads in overlap-layout-consensus contig assembly (default 50).")), ToolInput(tag="in_anchor", input_type=Boolean(optional=True), prefix="--anchor", doc=InputDocumentation(doc="[INT]\nAnchor length. Intervals shorter than this value would be discarded in interval chaining procedure for locating contigs (default 30).")), ToolInput(tag="in_km_er", input_type=Boolean(optional=True), prefix="--kmer", doc=InputDocumentation(doc="[INT]\nk-mer length to index and remap assembled contigs to reference genome (default 14).")), ToolInput(tag="in_uncertainty", input_type=Boolean(optional=True), prefix="--uncertainty", doc=InputDocumentation(doc="[INT]\nUncertainty around the breakpoint position.\nSee 'Interval Chaining for Optimal Mapping' in publication (default 8).")), ToolInput(tag="in_sub_optimal", input_type=Boolean(optional=True), prefix="--sub_optimal", doc=InputDocumentation(doc="[INT]\nFor a contig, SViCT will report all paths which are not worse than the optimal by c on the DAGs to achieve potentially better sensitivity.\nSee 'Interval Chaining for Optimal Mapping' in publication (default 0 - co-optimals only, negative value disables).")), ToolInput(tag="in_heuristic", input_type=Boolean(optional=True), prefix="--heuristic", doc=InputDocumentation(doc="Use clustering heuristic (good for data with PCR duplicates).")), ToolInput(tag="in_dump_contigs", input_type=Boolean(optional=True), prefix="--dump_contigs", doc=InputDocumentation(doc="Dump contigs in fastq format for mapping.")), ToolInput(tag="in_resume", input_type=Boolean(optional=True), prefix="--resume", doc=InputDocumentation(doc=":\nResume at the interval chaining stage with mapped contigs.")), ToolInput(tag="in_svc_it", input_type=String(), position=0, doc=InputDocumentation(doc="-- Structural Variant in ctDNA Sequencing Data"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="[STRING]\nPrefix of output file (default out)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Svict_V0_1_0().translate("wdl", allow_empty_container=True)

