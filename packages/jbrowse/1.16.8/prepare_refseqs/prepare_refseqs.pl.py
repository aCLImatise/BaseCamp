from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory, String, Int

Prepare_Refseqs_Pl_V0_1_0 = CommandToolBuilder(tool="prepare_refseqs.pl", base_command=["prepare-refseqs.pl"], inputs=[ToolInput(tag="in_no_sort", input_type=Boolean(optional=True), prefix="--noSort", doc=InputDocumentation(doc="If using GFF or FASTA input, preserve the order of the reference\nsequences (sorts alphabetically by default).")), ToolInput(tag="in_conf", input_type=File(optional=True), prefix="--conf", doc=InputDocumentation(doc="biodb-to-json.pl configuration file that defines a database from\nwhich to get reference sequence information.")), ToolInput(tag="in_out", input_type=Directory(optional=True), prefix="--out", doc=InputDocumentation(doc="Optional directory to write to. Defaults to data/.")), ToolInput(tag="in_no_seq", input_type=Boolean(optional=True), prefix="--noseq", doc=InputDocumentation(doc="Do not store the actual sequence bases, just the sequence metadata\n(name, length, and so forth).")), ToolInput(tag="in_refs", input_type=String(optional=True), prefix="--refs", doc=InputDocumentation(doc="Output only the sequences with the given names.")), ToolInput(tag="in_compress", input_type=Boolean(optional=True), prefix="--compress", doc=InputDocumentation(doc="If passed, compress the reference sequences with gzip, making the\nchunks be .txt.gz. NOTE: this requires a bit of additional web\nserver configuration to be served correctly.")), ToolInput(tag="in_chunksize", input_type=Int(optional=True), prefix="--chunksize", doc=InputDocumentation(doc="Size of sequence chunks to make, in base pairs. Default 20kb. This\nis multiplied by 4 if --compress is passed, so that the compressed\nsequence files are still approximately this size.")), ToolInput(tag="in_no_hash", input_type=Boolean(optional=True), prefix="--nohash", doc=InputDocumentation(doc="Store sequences in a flat seq/$seqname/$chunk.txt structure, instead\nof the new (more scalable) /seq/hash/hash/hash/$seqname-$chunk.txt\nstructure.")), ToolInput(tag="in_track_label", input_type=String(optional=True), prefix="--trackLabel", doc=InputDocumentation(doc="The unique name of the sequence track, default 'DNA'.")), ToolInput(tag="in_key", input_type=String(optional=True), prefix="--key", doc=InputDocumentation(doc="The displayed name of the sequence track, defaults to 'Reference\nsequence'.")), ToolInput(tag="in_seqtype", input_type=String(optional=True), prefix="--seqType", doc=InputDocumentation(doc="The Name of the alphabet used for these reference sequences, usually\neither 'dna', 'rna', or 'protein'.")), ToolInput(tag="in_track_config", input_type=Boolean(optional=True), prefix="--trackConfig", doc=InputDocumentation(doc="'{ JSON-format extra configuration for this track }'\nAdditional top-level configuration for the client, in JSON syntax.\nExample:\n--trackConfig '{ 'glyph': 'ProcessedTranscript' }'")), ToolInput(tag="in_used_dot", input_type=String(), position=0, doc=InputDocumentation(doc="OPTIONS"))], outputs=[ToolOutput(tag="out_out", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Optional directory to write to. Defaults to data/."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Prepare_Refseqs_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

