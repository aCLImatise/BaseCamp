from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File

Add_Bw_Track_Pl_V0_1_0 = CommandToolBuilder(tool="add_bw_track.pl", base_command=["add-bw-track.pl"], inputs=[ToolInput(tag="in_bicolor_pivot", input_type=String(optional=True), prefix="--bicolor_pivot", doc=InputDocumentation(doc="point where to set pivot for color changes - can be 'mean', 'zero',\nor a numeric value [default: zero]")), ToolInput(tag="in_plot", input_type=Boolean(optional=True), prefix="--plot", doc=InputDocumentation(doc="display as XY plot instead of density heatmap")), ToolInput(tag="in_pos_color", input_type=String(optional=True), prefix="--pos_color", doc=InputDocumentation(doc="CSS color for positive side of pivot [default: blue]")), ToolInput(tag="in_neg_color", input_type=String(optional=True), prefix="--neg_color", doc=InputDocumentation(doc="CSS color for negative side of pivot [default: red]")), ToolInput(tag="in_in", input_type=File(optional=True), prefix="--in", doc=InputDocumentation(doc="input trackList.json file. Default: data/trackList.json.")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Output trackList.json file. Default: data/trackList.json.")), ToolInput(tag="in_bw_url", input_type=File(optional=True), prefix="--bw_url", doc=InputDocumentation(doc="URL to BigWig file (can be relative to the trackList.json)")), ToolInput(tag="in_label", input_type=String(optional=True), prefix="--label", doc=InputDocumentation(doc="unique track label for the new track.")), ToolInput(tag="in_key", input_type=String(optional=True), prefix="--key", doc=InputDocumentation(doc="key (display name) for track [default: label value]")), ToolInput(tag="in_category", input_type=Boolean(optional=True), prefix="--category", doc=InputDocumentation(doc="'Category Name / Subcategory Name'\ntrack category. Used by the default Hierarchical track selector.")), ToolInput(tag="in_classname", input_type=String(optional=True), prefix="--classname", doc=InputDocumentation(doc="CSS class for display [default: bam]")), ToolInput(tag="in_mismatches", input_type=Boolean(optional=True), prefix="--mismatches", doc=InputDocumentation(doc="display mismatches in alignment (generates no subfeatures)")), ToolInput(tag="in_coverage", input_type=Boolean(optional=True), prefix="--coverage", doc=InputDocumentation(doc="display coverage data instead of alignments")), ToolInput(tag="in_min_score", input_type=String(optional=True), prefix="--min_score", doc=InputDocumentation(doc="optional minimum score to be graphed")), ToolInput(tag="in_max_score", input_type=String(optional=True), prefix="--max_score", doc=InputDocumentation(doc="optional maximum score to be graphed")), ToolInput(tag="in_clip_marker_color", input_type=String(optional=True), prefix="--clip_marker_color", doc=InputDocumentation(doc="optional clip marker color")), ToolInput(tag="in_bg_color", input_type=String(optional=True), prefix="--bg_color", doc=InputDocumentation(doc="optional background color")), ToolInput(tag="in_height", input_type=String(optional=True), prefix="--height", doc=InputDocumentation(doc="optional height")), ToolInput(tag="in_config", input_type=Boolean(optional=True), prefix="--config", doc=InputDocumentation(doc="'{ 'my_key': 'my_value', ... }'\noptional additional data to include in the track configuration. Any\nvalues provided here will override the values generated by the rest\nof the script.\n")), ToolInput(tag="in_add_bw_track_do_tpl", input_type=String(), position=0, doc=InputDocumentation(doc="[ --in <input_trackList.json> ]                    \\n[ --out <output_trackList.json> ]                  \\n--label <track_label>                              \\n--bw_url <url_to_big_wig_file>                     \\n[ --key <track_key> ]                              \\n[ --category 'Category in JBrowse' ]               \\n[ --plot ]                                         \\n[ --bicolor_pivot <pivot_for_changing_colors> ]    \\n[ --pos_color <color_for_positive_side_of_pivot> ] \\n[ --neg_color <color_for_negative_side_of_pivot> ] \\n[ --min_score <min_score> ]                        \\n[ --max_score <max_score> ]                        \\n[ --clip_marker_color <color> ]                    \\n[ --bg_color <color> ]                             \\n[ --height <value> ]                               \\n[ -h|--help ]"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output trackList.json file. Default: data/trackList.json."))], container="quay.io/biocontainers/jbrowse:1.16.11--pl526hc9558a2_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Add_Bw_Track_Pl_V0_1_0().translate("wdl")

