from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, Float, String, File

Cooltools_Compute_Saddle_V0_1_0 = CommandToolBuilder(tool="cooltools_compute_saddle", base_command=["cooltools", "compute-saddle"], inputs=[ToolInput(tag="in_contact_type", input_type=Boolean(optional=True), prefix="--contact-type", doc=InputDocumentation(doc="[cis|trans]  Type of the contacts to aggregate  [default:\ncis]")), ToolInput(tag="in_min_dist", input_type=Int(optional=True), prefix="--min-dist", doc=InputDocumentation(doc="Minimal distance between bins to consider,\nbp. If negative, removesthe first two\ndiagonals of the data. Ignored with\n--contact-type trans.  [default: -1]")), ToolInput(tag="in_max_dist", input_type=Int(optional=True), prefix="--max-dist", doc=InputDocumentation(doc="Maximal distance between bins to consider,\nbp. Ignored, if negative. Ignored with\n--contact-type trans.  [default: -1]")), ToolInput(tag="in_n_bins", input_type=Int(optional=True), prefix="--n-bins", doc=InputDocumentation(doc="Number of bins for digitizing track values.\n[default: 50]")), ToolInput(tag="in_quantiles", input_type=Boolean(optional=True), prefix="--quantiles", doc=InputDocumentation(doc="Bin the signal track into quantiles rather\nthan by value.")), ToolInput(tag="in_range", input_type=Float(optional=True), prefix="--range", doc=InputDocumentation(doc="Low and high values used for binning genome-\nwide track values, e.g. if `range`=(-0.05,\n0.05), `n-bins` equidistant bins would be\ngenerated. Use to prevent the extreme track\nvalues from exploding the bin range and to\nensure consistent bins across several runs\nof `compute_saddle` command using different\ntrack files.")), ToolInput(tag="in_q_range", input_type=Float(optional=True), prefix="--qrange", doc=InputDocumentation(doc="...       The fraction of the genome-wide range of the\ntrack values used to generate bins. E.g., if\n`qrange`=(0.02, 0.98) the lower bin would\nstart at the 2nd percentile and the upper\nbin would end at the 98th percentile of the\ngenome-wide signal. Use to prevent the\nextreme track values from exploding the bin\nrange.  [default: 0.0, 1.0]")), ToolInput(tag="in_weight_name", input_type=String(optional=True), prefix="--weight-name", doc=InputDocumentation(doc="Use balancing weight with this name.\n[default: weight]")), ToolInput(tag="in_no_strength", input_type=Boolean(optional=True), prefix="--no-strength", doc=InputDocumentation(doc="Compute and save compartment 'saddle\nstrength' profile")), ToolInput(tag="in_regions", input_type=File(optional=True), prefix="--regions", doc=InputDocumentation(doc="Path to a BED file containing genomic\nregions for which saddleplot will be\ncalculated. Region names can be provided in\na 4th column and should match regions and\ntheir names in expected.")), ToolInput(tag="in_out_prefix", input_type=String(optional=True), prefix="--out-prefix", doc=InputDocumentation(doc="Dump 'saddledata', 'binedges' and 'hist'\narrays in a numpy-specific .npz container.\nUse numpy.load to load these arrays into a\ndict-like object. The digitized signal\nvalues are saved to a bedGraph-style TSV.\n[required]")), ToolInput(tag="in_fig", input_type=File(optional=True), prefix="--fig", doc=InputDocumentation(doc="[png|jpg|svg|pdf|ps|eps]  Generate a figure and save to a file of the\nspecified format. If not specified - no\nimage is generated. Repeat for multiple\noutput formats.")), ToolInput(tag="in_scale", input_type=Boolean(optional=True), prefix="--scale", doc=InputDocumentation(doc="[linear|log]            Value scale for the heatmap  [default: log]")), ToolInput(tag="in_cmap", input_type=String(optional=True), prefix="--cmap", doc=InputDocumentation(doc="Name of matplotlib colormap  [default:\ncoolwarm]")), ToolInput(tag="in_vmin", input_type=Float(optional=True), prefix="--vmin", doc=InputDocumentation(doc="Low value of the saddleplot colorbar. Note:\nvalue in original units irrespective of used\nscale, and therefore should be positive for\nboth vmin and vmax.")), ToolInput(tag="in_vmax", input_type=Float(optional=True), prefix="--vmax", doc=InputDocumentation(doc="High value of the saddleplot colorbar")), ToolInput(tag="in_hist_color", input_type=String(optional=True), prefix="--hist-color", doc=InputDocumentation(doc="Face color of histogram bar chart")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Enable verbose output")), ToolInput(tag="in_cool_path", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_track_path", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_expected_path", input_type=String(), position=2, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_fig", output_type=File(optional=True), selector=InputSelector(input_to_select="in_fig", type_hint=File()), doc=OutputDocumentation(doc="[png|jpg|svg|pdf|ps|eps]  Generate a figure and save to a file of the\nspecified format. If not specified - no\nimage is generated. Repeat for multiple\noutput formats."))], container="quay.io/biocontainers/cooltools:0.4.0--py39hcbe4a3b_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cooltools_Compute_Saddle_V0_1_0().translate("wdl")

