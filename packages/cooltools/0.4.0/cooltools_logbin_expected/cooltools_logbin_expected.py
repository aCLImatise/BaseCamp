from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, Int, String

Cooltools_Logbin_Expected_V0_1_0 = CommandToolBuilder(tool="cooltools_logbin_expected", base_command=["cooltools", "logbin-expected"], inputs=[ToolInput(tag="in_bins_per_order_magnitude", input_type=Float(optional=True), prefix="--bins-per-order-magnitude", doc=InputDocumentation(doc="How many bins per order of magnitude.\nDefault of 10 has a ratio of neighboring\nbins of about 1.25  [default: 10]")), ToolInput(tag="in_bin_layout", input_type=Int(optional=True), prefix="--bin-layout", doc=InputDocumentation(doc="'fixed' means that bins are exactly the same\nfor different datasets, and only depend on\nbins_per_order_magnitude 'longest_regio'\nmeans that the last bin will end at size of\nthe longest region.  GOOD: the last bin will\nhave as much data as possible.  BAD: bin\nedges will end up different for different\ndatasets, you can't divide them by each\nother  [default: fixed]")), ToolInput(tag="in_min_n_valid", input_type=Int(optional=True), prefix="--min-nvalid", doc=InputDocumentation(doc="For each region, throw out bins (log-spaced)\nthat have less than min_nvalid valid pixels.\nThis will ensure that each entree in Pc by\nregion has at least n_valid valid pixels.\nDon't set it to zero, or it will introduce\nbugs. Setting it to 1 is OK, but not\nrecommended.  [default: 200]")), ToolInput(tag="in_min_count", input_type=Int(optional=True), prefix="--min-count", doc=InputDocumentation(doc="If counts are found in the data, then for\neach region, throw out bins (log-spaced)\nthat have more than min_counts of counts.sum\n(raw Hi-C counts). This will ensure that\neach entree in P(s) by region has at least\nmin_count raw Hi-C reads  [default: 50]")), ToolInput(tag="in_spread_funcs", input_type=String(optional=True), prefix="--spread-funcs", doc=InputDocumentation(doc="A way to estimate the spread of the P(s)\ncurves between regions. * 'minmax' - the\nminimum/maximum of by-region P(s) * 'std' -\nweighted standard deviation of P(s) curves\n(may produce negative results)  * 'logstd'\n(recommended) weighted standard deviation in\nlogspace  [default: logstd]")), ToolInput(tag="in_spread_funcs_slope", input_type=String(optional=True), prefix="--spread-funcs-slope", doc=InputDocumentation(doc="Same as spread-funcs, but for slope\n(derivative) ratehr than P(s)  [default:\nstd]")), ToolInput(tag="in_resolution", input_type=String(optional=True), prefix="--resolution", doc=InputDocumentation(doc="Data resolution in bp. If provided,\nadditonal column of separation in bp (s_bp)\nwill be added to the outputs")), ToolInput(tag="in_name_dot", input_type=String(), position=0, doc=InputDocumentation(doc="OUTPUT_PREFIX: Output file name prefix to store the logbinned expected"))], outputs=[], container="quay.io/biocontainers/cooltools:0.4.0--py39hcbe4a3b_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cooltools_Logbin_Expected_V0_1_0().translate("wdl")

