from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Int, Boolean, Float

Csb_Hhfrag_V0_1_0 = CommandToolBuilder(tool="csb_hhfrag", base_command=["csb-hhfrag"], inputs=[ToolInput(tag="in_hh_search", input_type=File(optional=True), prefix="--hhsearch", doc=InputDocumentation(doc="path to the HHsearch executable (default=hhsearch)")), ToolInput(tag="in_database", input_type=Directory(optional=True), prefix="--database", doc=InputDocumentation(doc="database directory (containing PDBS25.hhm)")), ToolInput(tag="in_min", input_type=Int(optional=True), prefix="--min", doc=InputDocumentation(doc="minimum query segment length (default=6)")), ToolInput(tag="in_max", input_type=Int(optional=True), prefix="--max", doc=InputDocumentation(doc="maximum query segment length (default=21)")), ToolInput(tag="in_step", input_type=Int(optional=True), prefix="--step", doc=InputDocumentation(doc="query segmentation step (default=3)")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="maximum degree of parallelism (default=8)")), ToolInput(tag="in_gap_filling", input_type=File(optional=True), prefix="--gap-filling", doc=InputDocumentation(doc="path to a fragment file (e.g. CSfrag or Rosetta\nNNmake), which will be used to complement low-\nconfidence regions (when specified, a hybrid fragment\nlibrary be produced)")), ToolInput(tag="in_filtered_filling", input_type=File(optional=True), prefix="--filtered-filling", doc=InputDocumentation(doc="path to a filtered fragment file (e.g. filtered\nCSfrag-ments), which will be mixed with the HHfrag-set\nand then filtered, resulting in a double-filtered\nlibrary")), ToolInput(tag="in_filtered_map", input_type=Boolean(optional=True), prefix="--filtered-map", doc=InputDocumentation(doc="make an additional filtered fragment map of centroids\nand predict torsion angles (default=False)")), ToolInput(tag="in_c_alpha", input_type=Boolean(optional=True), prefix="--c-alpha", doc=InputDocumentation(doc="include also C-alpha vectors in the output\n(default=False)")), ToolInput(tag="in_confidence_threshold", input_type=Float(optional=True), prefix="--confidence-threshold", doc=InputDocumentation(doc="confidence threshold for gap filling (default=0.7)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="verbosity level (default=2)")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="output directory (default=.)\n"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output directory (default=.)\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Csb_Hhfrag_V0_1_0().translate("wdl", allow_empty_container=True)

