from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, Directory, String, Float

Coconet_Cluster_V0_1_0 = CommandToolBuilder(tool="coconet_cluster", base_command=["coconet", "cluster"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Path to output directory (default: output)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads (default: 5)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Print debugging statements (default: 20)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Less verbose (default: None)")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="--silent", doc=InputDocumentation(doc="Only error messages (default: None)")), ToolInput(tag="in_continue", input_type=Directory(optional=True), prefix="--continue", doc=InputDocumentation(doc="Start from last checkpoint. The output directory needs\nto be the same. (default: False)")), ToolInput(tag="in_fragment_length", input_type=Int(optional=True), prefix="--fragment-length", doc=InputDocumentation(doc="Length of contig fragments in bp. Default is half the\nminimum contig length. (default: -1)")), ToolInput(tag="in_features", input_type=String(optional=True), prefix="--features", doc=InputDocumentation(doc="[{coverage,composition} ...]\nFeatures for binning (composition, coverage, or both)\n(default: ['coverage', 'composition'])")), ToolInput(tag="in_max_neighbors", input_type=Int(optional=True), prefix="--max-neighbors", doc=InputDocumentation(doc="Maximum number of neighbors to consider to compute the\nadjacency matrix. (default: 250)")), ToolInput(tag="in_vote_threshold", input_type=String(optional=True), prefix="--vote-threshold", doc=InputDocumentation(doc="When this parameter is not set, contig-contig edges\nare computed by summing the probability between all\npairwise fragments between them.Otherwise, adopt a\nvoting strategy and sets a hard-threshold on the\nprobabilityfrom each pairwise comparison. (default:\nNone)")), ToolInput(tag="in_algorithm", input_type=String(optional=True), prefix="--algorithm", doc=InputDocumentation(doc="Algorithm for clustering the contig-contig graph.\nNote: the number of cluster is required if 'spectral'\nis chosen. (default: leiden)")), ToolInput(tag="in_theta", input_type=Float(optional=True), prefix="--theta", doc=InputDocumentation(doc="(leiden) Minimum percent of edges between two contigs\nto form an edge between them (default: 0.8)")), ToolInput(tag="in_gamma_one", input_type=Int(optional=True), prefix="--gamma1", doc=InputDocumentation(doc="(leiden) CPM optimization value for the first run of\nthe Leiden clustering (default: 0.3)")), ToolInput(tag="in_gamma_two", input_type=Int(optional=True), prefix="--gamma2", doc=InputDocumentation(doc="(leiden) CPM optimization value for the second run of\nthe Leiden clustering (default: 0.4)")), ToolInput(tag="in_n_clusters", input_type=Int(optional=True), prefix="--n-clusters", doc=InputDocumentation(doc="(spectral clustering) Maximum number of clusters\n(default: None)")), ToolInput(tag="in_recruit_small_contigs", input_type=Boolean(optional=True), prefix="--recruit-small-contigs", doc=InputDocumentation(doc="Salvage short contigs (<2048) (default: False)\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Path to output directory (default: output)")), ToolOutput(tag="out_continue", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_continue", type_hint=File()), doc=OutputDocumentation(doc="Start from last checkpoint. The output directory needs\nto be the same. (default: False)"))], container="quay.io/biocontainers/coconet-binning:1.1.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Coconet_Cluster_V0_1_0().translate("wdl")

