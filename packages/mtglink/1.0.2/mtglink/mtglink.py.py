from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Directory, Boolean

Mtglink_Py_V0_1_0 = CommandToolBuilder(tool="mtglink.py", base_command=["mtglink.py"], inputs=[ToolInput(tag="in_gfa", input_type=File(optional=True), prefix="-gfa", doc=InputDocumentation(doc="Input GFA file (format: xxx.gfa)")), ToolInput(tag="in_chunk_size_bp", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="Chunk size (bp)")), ToolInput(tag="in_bam", input_type=File(optional=True), prefix="-bam", doc=InputDocumentation(doc="BAM file: linked reads mapped on current genome\nassembly (format: xxx.bam)")), ToolInput(tag="in_fast_q", input_type=File(optional=True), prefix="-fastq", doc=InputDocumentation(doc="File of indexed reads (format: xxx.fastq | xxx.fq)")), ToolInput(tag="in_index", input_type=File(optional=True), prefix="-index", doc=InputDocumentation(doc="Prefix of barcodes index file (format: xxx.shelve)")), ToolInput(tag="in_minimal_frequence_barcodes", input_type=Int(optional=True), prefix="-f", doc=InputDocumentation(doc="Minimal frequence of barcodes extracted in the chunk\nof size '-c' [default: 2]")), ToolInput(tag="in_out", input_type=Directory(optional=True), prefix="-out", doc=InputDocumentation(doc="Output directory [default './mtglink_results']")), ToolInput(tag="in_ref_dir", input_type=Directory(optional=True), prefix="-refDir", doc=InputDocumentation(doc="Directory containing the reference sequences if any")), ToolInput(tag="in_line", input_type=File(optional=True), prefix="-line", doc=InputDocumentation(doc="Line of GFA file input from which to start analysis\n(if not provided, start analysis from first line of\nGFA file input) [optional]")), ToolInput(tag="in_rb_xu", input_type=File(optional=True), prefix="-rbxu", doc=InputDocumentation(doc="File containing the reads of the union (if already\nextracted) [optional]")), ToolInput(tag="in_kmer_sizes_used", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="[KMER [KMER ...]]  k-mer size(s) used for gap-filling [default: [51, 41,\n31, 21]]")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="To force search on all '-k' values provided")), ToolInput(tag="in_minimal_abundance_threshold", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ABUNDANCE_THRESHOLD [ABUNDANCE_THRESHOLD ...]]\nMinimal abundance threshold for solid k-mers [default:\n[3, 2]]")), ToolInput(tag="in_ext", input_type=Int(optional=True), prefix="-ext", doc=InputDocumentation(doc="Extension size of the gap on both sides (bp);\ndetermine start/end of gapfilling [default: '500']")), ToolInput(tag="in_max_nodes", input_type=Int(optional=True), prefix="-max-nodes", doc=InputDocumentation(doc="Maximum number of nodes in contig graph [default:\n1000]")), ToolInput(tag="in_max_length", input_type=Int(optional=True), prefix="-max-length", doc=InputDocumentation(doc="Maximum length of gapfilling (bp) [default: 10000]")), ToolInput(tag="in_nb_cores", input_type=Int(optional=True), prefix="-nb-cores", doc=InputDocumentation(doc="Number of cores [default: 1]")), ToolInput(tag="in_max_memory", input_type=Int(optional=True), prefix="-max-memory", doc=InputDocumentation(doc="Max memory for graph building (in MBytes) [default: 0]")), ToolInput(tag="in_verbose", input_type=Int(optional=True), prefix="-verbose", doc=InputDocumentation(doc="Verbosity level [default: 0]"))], outputs=[ToolOutput(tag="out_out", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output directory [default './mtglink_results']"))], container="quay.io/biocontainers/mtglink:1.0.2--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mtglink_Py_V0_1_0().translate("wdl")

