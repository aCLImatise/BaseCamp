from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int

Meryl_V0_1_0 = CommandToolBuilder(tool="meryl", base_command=["meryl"], inputs=[ToolInput(tag="in_print", input_type=String(), position=0, doc=InputDocumentation(doc="display kmers on the screen as 'kmer<tab>count'.  accepts exactly one input.")), ToolInput(tag="in_count", input_type=String(), position=1, doc=InputDocumentation(doc="Count the occurrences of canonical kmers in the input.  must have 'output' specified.")), ToolInput(tag="in_count_forward", input_type=String(), position=2, doc=InputDocumentation(doc="Count the occurrences of forward kmers in the input.  must have 'output' specified.")), ToolInput(tag="in_count_reverse", input_type=String(), position=3, doc=InputDocumentation(doc="Count the occurrences of reverse kmers in the input.  must have 'output' specified.\nk=<K>              create mers of size K bases (mandatory).\nn=<N>              expect N mers in the input (optional; for precise memory sizing).\nmemory=M           use no more than (about) M GB memory.\nthreads=T          use no more than T threads.")), ToolInput(tag="in_union", input_type=String(), position=0, doc=InputDocumentation(doc="return kmers that occur in any input, set the count to the number of inputs with this kmer.")), ToolInput(tag="in_union_min", input_type=Int(), position=1, doc=InputDocumentation(doc="return kmers that occur in any input, set the count to the minimum count")), ToolInput(tag="in_union_max", input_type=Int(), position=2, doc=InputDocumentation(doc="return kmers that occur in any input, set the count to the maximum count")), ToolInput(tag="in_union_sum", input_type=String(), position=3, doc=InputDocumentation(doc="return kmers that occur in any input, set the count to the sum of the counts")), ToolInput(tag="in_intersect", input_type=String(), position=4, doc=InputDocumentation(doc="return kmers that occur in all inputs, set the count to the count in the first input.")), ToolInput(tag="in_intersect_min", input_type=Int(), position=5, doc=InputDocumentation(doc="return kmers that occur in all inputs, set the count to the minimum count.")), ToolInput(tag="in_intersect_max", input_type=Int(), position=6, doc=InputDocumentation(doc="return kmers that occur in all inputs, set the count to the maximum count.")), ToolInput(tag="in_intersect_sum", input_type=String(), position=7, doc=InputDocumentation(doc="return kmers that occur in all inputs, set the count to the sum of the counts.")), ToolInput(tag="in_subtract", input_type=String(), position=8, doc=InputDocumentation(doc="return kmers that occur in the first input, subtracting counts from the other inputs")), ToolInput(tag="in_difference", input_type=String(), position=9, doc=InputDocumentation(doc="return kmers that occur in the first input, but none of the other inputs"))], outputs=[], container="quay.io/biocontainers/meryl:1.2--he1b5a44_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Meryl_V0_1_0().translate("wdl")

