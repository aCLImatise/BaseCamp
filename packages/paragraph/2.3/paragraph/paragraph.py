from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, Int, Boolean, File, String

Paragraph_V0_1_0 = CommandToolBuilder(tool="paragraph", base_command=["paragraph"], inputs=[ToolInput(tag="in_bad_align_frac", input_type=Float(optional=True), prefix="--bad-align-frac", doc=InputDocumentation(doc="(=0.800000012)          Fraction of read that needs to\nbe mapped in order for it to be\nused.")), ToolInput(tag="in_bad_align_non_uniq", input_type=Int(optional=True), prefix="--bad-align-nonuniq", doc=InputDocumentation(doc="(=1)                 Remove reads that are not mapped")), ToolInput(tag="in_arg_input_bam", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --bam ] arg                             Input BAM file(s) for read\nextraction. We align all reads\nto all graphs.")), ToolInput(tag="in_graph_sequence_matching", input_type=Int(optional=True), prefix="--graph-sequence-matching", doc=InputDocumentation(doc="(=1)           Enables smith waterman graph")), ToolInput(tag="in_gzipcompress_output_files", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="[ --gzip-output ] [=arg(=1)] (=0)         gzip-compress output files. If")), ToolInput(tag="in_used_output_file", input_type=File(optional=True), prefix="-O", doc=InputDocumentation(doc="used, output file names")), ToolInput(tag="in_help_defaults", input_type=Boolean(optional=True), prefix="--help-defaults", doc=InputDocumentation(doc="produce tab-delimited list of\ncommand line options and their\ndefault values")), ToolInput(tag="in_help_md", input_type=Boolean(optional=True), prefix="--help-md", doc=InputDocumentation(doc="produce help message\npre-formatted as a markdown file\nsection and exit")), ToolInput(tag="in_k_lib_sequence_matching", input_type=Int(optional=True), prefix="--klib-sequence-matching", doc=InputDocumentation(doc="(=0)            Use klib smith-waterman aligner.")), ToolInput(tag="in_km_er_sequence_matching", input_type=Int(optional=True), prefix="--kmer-sequence-matching", doc=InputDocumentation(doc="(=0)            Use kmer aligner.")), ToolInput(tag="in_log_async", input_type=Int(optional=True), prefix="--log-async", doc=InputDocumentation(doc="(=0)                         Enable / disable async logging.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Log to a file instead of stderr.")), ToolInput(tag="in_log_level", input_type=String(optional=True), prefix="--log-level", doc=InputDocumentation(doc="(=info)                      Set log level (error, warning,\ninfo).")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="[ --max-reads-per-event ] arg (=10000)    Maximum number of reads to\nprocess for a single event.")), ToolInput(tag="in_arg_output_alignments_readlarge", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --output-alignments ] arg (=0)          Output alignments for every read\n(large).")), ToolInput(tag="in_output_detailed_read_counts", input_type=Int(optional=True), prefix="--output-detailed-read-counts", doc=InputDocumentation(doc="(=0)       Output detailed read counts not\njust for paths but also for each\nnode/edge on the paths.")), ToolInput(tag="in_arg_write_information", input_type=Boolean(optional=True), prefix="-E", doc=InputDocumentation(doc="[ --output-everything ] arg (=0)          Write all information we have\ninto JSON. (=enable all\n--output-* above)")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output-file ] arg                     Output file name. Will output to\nstdout if '-' or neither of\noutput-file or output-folder\nprovided.")), ToolInput(tag="in_arg_output_alignments_was", input_type=Boolean(optional=True), prefix="-A", doc=InputDocumentation(doc="[ --output-filtered-alignments ] arg (=0) Output alignments for every read\neven when it was filtered\n(larger).")), ToolInput(tag="in_output_node_coverage", input_type=Int(optional=True), prefix="--output-node-coverage", doc=InputDocumentation(doc="(=0)              Output coverage for nodes")), ToolInput(tag="in_output_path_coverage", input_type=File(optional=True), prefix="--output-path-coverage", doc=InputDocumentation(doc="(=0)              Output coverage for paths")), ToolInput(tag="in_output_read_haplotypes", input_type=Int(optional=True), prefix="--output-read-haplotypes", doc=InputDocumentation(doc="(=0)            Output graph haplotypes\nsupported by reads.")), ToolInput(tag="in_arg_output_variants", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --output-variants ] arg (=0)            Output variants not present in\nthe graph.")), ToolInput(tag="in_path_sequence_matching", input_type=File(optional=True), prefix="--path-sequence-matching", doc=InputDocumentation(doc="(=1)            Enable path seeding aligner")), ToolInput(tag="in_arg_reference_genome", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg                       Reference genome fasta file.")), ToolInput(tag="in_response_file", input_type=File(optional=True), prefix="--response-file", doc=InputDocumentation(doc="file with more command line")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="(=8)                           Number of threads to use for\nparallel alignment.")), ToolInput(tag="in_validate_alignments", input_type=Boolean(optional=True), prefix="--validate-alignments", doc=InputDocumentation(doc="[=arg(=1)] (=0)        Use information in the input bam\nread names to collect statistics\nabout the accuracy of\nalignments. Requires bam file\nproduced with simulate-reads.sh")), ToolInput(tag="in_variant_min_frac", input_type=Int(optional=True), prefix="--variant-min-frac", doc=InputDocumentation(doc="(=0.00999999978)      Minimum fraction of reads\nrequired to report a variant.")), ToolInput(tag="in_variant_min_reads", input_type=Int(optional=True), prefix="--variant-min-reads", doc=InputDocumentation(doc="(=3)                 Minimum number of reads required\nto report a variant.")), ToolInput(tag="in_uniquely_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--bad-align-uniq-kmer-len arg (=0)           Kmer length for uniqueness check")), ToolInput(tag="in_alignment", input_type=String(), position=0, doc=InputDocumentation(doc="-g [ --graph-spec ] arg                      JSON file(s) describing the ")), ToolInput(tag="in_arguments", input_type=String(), position=0, doc=InputDocumentation(doc="-T [ --target-regions ] arg                  Comma-separated list of target ")), ToolInput(tag="in_information", input_type=String(), position=0, doc=InputDocumentation(doc="Failed to parse the options: ERROR: BAM file is missing."))], outputs=[ToolOutput(tag="out_used_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_used_output_file", type_hint=File()), doc=OutputDocumentation(doc="used, output file names")), ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output-file ] arg                     Output file name. Will output to\nstdout if '-' or neither of\noutput-file or output-folder\nprovided.")), ToolOutput(tag="out_output_path_coverage", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_path_coverage", type_hint=File()), doc=OutputDocumentation(doc="(=0)              Output coverage for paths"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Paragraph_V0_1_0().translate("wdl", allow_empty_container=True)

