from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int

Vcf2Paragraph_Py_V0_1_0 = CommandToolBuilder(tool="vcf2paragraph.py", base_command=["vcf2paragraph.py"], inputs=[ToolInput(tag="in_reference_sequence", input_type=String(optional=True), prefix="--reference-sequence", doc=InputDocumentation(doc="Reference FASTA for checking REF and resolving <DEL>")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="More logging; May be given twice for even more")), ToolInput(tag="in_graph_type", input_type=String(optional=True), prefix="--graph-type", doc=InputDocumentation(doc="Select the type of graph to generate.")), ToolInput(tag="in_retrieve_reference_sequence", input_type=Boolean(optional=True), prefix="--retrieve-reference-sequence", doc=InputDocumentation(doc="Retrieve reference sequence for REF nodes")), ToolInput(tag="in_max_ref_node_length", input_type=Int(optional=True), prefix="--max-ref-node-length", doc=InputDocumentation(doc="Maximum length of reference nodes before they get\npadded and truncated.")), ToolInput(tag="in_read_length", input_type=Int(optional=True), prefix="--read-length", doc=InputDocumentation(doc="Read length -- this can be used to add reference\npadding for disambiguation.")), ToolInput(tag="in_target_region", input_type=String(optional=True), prefix="--target-region", doc=InputDocumentation(doc="Target regions for read retrieval")), ToolInput(tag="in_ins_info_key", input_type=String(optional=True), prefix="--ins-info-key", doc=InputDocumentation(doc="Key for symbolic <INS> in INFO field")), ToolInput(tag="in_alt_paths", input_type=Boolean(optional=True), prefix="--alt-paths", doc=InputDocumentation(doc="Create all possible ALT paths in addition to reference")), ToolInput(tag="in_recursion_limit", input_type=Int(optional=True), prefix="--recursion-limit", doc=InputDocumentation(doc="Set the recursion limit ( O(expected number of nodes\nof the graph) for large graphs -- this is required for\nsorting )\n")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc="Input VCF / BCF file")), ToolInput(tag="in_output", input_type=String(), position=1, doc=InputDocumentation(doc="Output JSON file")), ToolInput(tag="in_logging_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Common VCF graph options:")), ToolInput(tag="in_paths_dot", input_type=String(), position=1, doc=InputDocumentation(doc="--alt-splitting       Also split long alternate alleles (e.g. long"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Vcf2Paragraph_Py_V0_1_0().translate("wdl", allow_empty_container=True)

