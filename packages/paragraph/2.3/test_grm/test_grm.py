from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, File

Test_Grm_V0_1_0 = CommandToolBuilder(tool="test_grm", base_command=["test_grm"], inputs=[ToolInput(tag="in_g_test_list_tests", input_type=Boolean(optional=True), prefix="--gtest_list_tests", doc=InputDocumentation(doc="List the names of all tests instead of running them. The name of\nTEST(Foo, Bar) is 'Foo.Bar'.")), ToolInput(tag="in_g_test_filter", input_type=String(optional=True), prefix="--gtest_filter", doc=InputDocumentation(doc="[-NEGATIVE_PATTERNS]\nRun only the tests whose name matches one of the positive patterns but\nnone of the negative patterns. '?' matches any single character; '*'\nmatches any substring; ':' separates two patterns.")), ToolInput(tag="in_g_test_also_run_disabled_tests", input_type=Boolean(optional=True), prefix="--gtest_also_run_disabled_tests", doc=InputDocumentation(doc="Run all disabled tests too.")), ToolInput(tag="in_g_test_repeat", input_type=Boolean(optional=True), prefix="--gtest_repeat", doc=InputDocumentation(doc="=[COUNT]\nRun the tests repeatedly; use a negative count to repeat forever.")), ToolInput(tag="in_g_test_shuffle", input_type=Boolean(optional=True), prefix="--gtest_shuffle", doc=InputDocumentation(doc="Randomize tests' orders on every iteration.")), ToolInput(tag="in_g_test_random_seed", input_type=Boolean(optional=True), prefix="--gtest_random_seed", doc=InputDocumentation(doc="=[NUMBER]\nRandom number seed to use for shuffling test orders (between 1 and\n99999, or 0 to use a seed based on the current time).")), ToolInput(tag="in_g_test_color", input_type=Boolean(optional=True), prefix="--gtest_color", doc=InputDocumentation(doc="=(yes|no|auto)\nEnable/disable colored output. The default is auto.")), ToolInput(tag="in_g_test_print_time", input_type=Int(optional=True), prefix="--gtest_print_time", doc=InputDocumentation(doc="Don't print the elapsed time of each test.")), ToolInput(tag="in_g_test_output", input_type=File(optional=True), prefix="--gtest_output", doc=InputDocumentation(doc="[:DIRECTORY_PATH/|:FILE_PATH]\nGenerate an XML report in the given directory or with the given file\nname. FILE_PATH defaults to test_details.xml.")), ToolInput(tag="in_g_test_stream_result_to", input_type=String(optional=True), prefix="--gtest_stream_result_to", doc=InputDocumentation(doc=":PORT\nStream test results to the given server.")), ToolInput(tag="in_g_test_death_test_style", input_type=Boolean(optional=True), prefix="--gtest_death_test_style", doc=InputDocumentation(doc="=(fast|threadsafe)\nSet the default death test style.")), ToolInput(tag="in_g_test_break_on_failure", input_type=Boolean(optional=True), prefix="--gtest_break_on_failure", doc=InputDocumentation(doc="Turn assertion failures into debugger break-points.")), ToolInput(tag="in_g_test_throw_on_failure", input_type=Boolean(optional=True), prefix="--gtest_throw_on_failure", doc=InputDocumentation(doc="Turn assertion failures into C++ exceptions.")), ToolInput(tag="in_g_test_catch_exceptions", input_type=Int(optional=True), prefix="--gtest_catch_exceptions", doc=InputDocumentation(doc="Do not report exceptions as test failures. Instead, allow them\nto crash the program or throw a pop-up (on Windows)."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Test_Grm_V0_1_0().translate("wdl", allow_empty_container=True)

