from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Pam_V0_1_0 = CommandToolBuilder(tool="pam", base_command=["pam"], inputs=[ToolInput(tag="in_arg_input_bam", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --bam ] arg                      Input BAM file for read extraction")), ToolInput(tag="in_arg_json_file", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --depth-spec ] arg               JSON file describing the regions for\ndepth extraction")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output ] arg                   Output file name. Will output to stdout\nif omitted.")), ToolInput(tag="in_arg_commaseparated_list", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --target-regions ] arg           Comma-separated list of target regions,\ne.g. chr1:1-20,chr2:2-40. This\noverrides the target regions in the\ndepth spec.")), ToolInput(tag="in_output_node_coverage", input_type=Int(optional=True), prefix="--output-node-coverage", doc=InputDocumentation(doc="(=0)       Output coverage for nodes")), ToolInput(tag="in_arg_output_alignments_readlarge", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --output-alignments ] arg (=0)   Output alignments for every read\n(large).")), ToolInput(tag="in_arg_output_alignments_evenwhen", input_type=Boolean(optional=True), prefix="-A", doc=InputDocumentation(doc="[ --output-filtered-alignments ] arg (=0)\nOutput alignments for every read even\nwhen it was filtered (larger).")), ToolInput(tag="in_arg_write_information", input_type=Boolean(optional=True), prefix="-E", doc=InputDocumentation(doc="[ --output-everything ] arg (=0)   Write all information we have into\nJSON. (=enable all --output-* above)")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="[ --max-reads-per-event ] arg (=10000)\nMaximum number of reads to process for\na single event.")), ToolInput(tag="in_arg_fasta_reference", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg                FASTA with reference genome")), ToolInput(tag="in_log_level", input_type=String(optional=True), prefix="--log-level", doc=InputDocumentation(doc="(=info)               Set log level (error, warning, info).")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Log to a file instead of stderr.")), ToolInput(tag="in_log_async", input_type=Int(optional=True), prefix="--log-async", doc=InputDocumentation(doc="(=1)                  Enable / disable async logging."))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output ] arg                   Output file name. Will output to stdout\nif omitted."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pam_V0_1_0().translate("wdl", allow_empty_container=True)

