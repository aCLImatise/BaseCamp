from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Directory

Mikado_Pick_V0_1_0 = CommandToolBuilder(tool="mikado_pick", base_command=["mikado", "pick"], inputs=[ToolInput(tag="in_genome", input_type=File(optional=True), prefix="--genome", doc=InputDocumentation(doc="Genome FASTA file. Required for transcript padding.")), ToolInput(tag="in_start_method", input_type=String(optional=True), prefix="--start-method", doc=InputDocumentation(doc="Multiprocessing start method.")), ToolInput(tag="in_shm", input_type=Boolean(optional=True), prefix="--shm", doc=InputDocumentation(doc="Flag. If switched, Mikado pick will copy the database\nto RAM (ie SHM) for faster access during the run.")), ToolInput(tag="in_no_shm", input_type=Boolean(optional=True), prefix="--no-shm", doc=InputDocumentation(doc="Flag. If switched, Mikado will force using the\ndatabase on location instead of copying it to /dev/shm\nfor faster access.")), ToolInput(tag="in_procs", input_type=Int(optional=True), prefix="--procs", doc=InputDocumentation(doc="Number of processors to use. Default: look in the\nconfiguration file (1 if undefined)")), ToolInput(tag="in_configuration", input_type=File(optional=True), prefix="--configuration", doc=InputDocumentation(doc="Configuration file for Mikado.")), ToolInput(tag="in_scoring_file", input_type=File(optional=True), prefix="--scoring-file", doc=InputDocumentation(doc="Optional scoring file for the run. It will override\nthe value set in the configuration.")), ToolInput(tag="in__intronrange_intronrange", input_type=Int(optional=True), prefix="-i", doc=InputDocumentation(doc="INTRON_RANGE, --intron-range INTRON_RANGE INTRON_RANGE\nRange into which intron lengths should fall, as a\ncouple of integers. Transcripts with intron lengths\noutside of this range will be penalised. Default: (60,\n900)")), ToolInput(tag="in_no_pad", input_type=Boolean(optional=True), prefix="--no-pad", doc=InputDocumentation(doc="Disable transcript padding.")), ToolInput(tag="in_pad", input_type=Boolean(optional=True), prefix="--pad", doc=InputDocumentation(doc="Whether to pad transcripts in loci.")), ToolInput(tag="in_codon_table", input_type=Int(optional=True), prefix="--codon-table", doc=InputDocumentation(doc="Codon table to use. Default: 0 (ie Standard, NCBI #1,\nbut only ATG is considered a valid start codon.")), ToolInput(tag="in_pad_max_splices", input_type=Int(optional=True), prefix="--pad-max-splices", doc=InputDocumentation(doc="Maximum splice sites that can be crossed during\ntranscript padding.")), ToolInput(tag="in_pad_max_distance", input_type=Int(optional=True), prefix="--pad-max-distance", doc=InputDocumentation(doc="Maximum amount of bps that transcripts can be padded\nwith (per side).")), ToolInput(tag="in_regions", input_type=File(optional=True), prefix="--regions", doc=InputDocumentation(doc="Either a single region on the CLI or a file listing a\nseries of target regions. Mikado pick will only\nconsider regions included in this string/file. Regions\nshould be provided in a WebApollo-like format:\n<chrom>:<start>..<end>")), ToolInput(tag="in_no_cds", input_type=Boolean(optional=True), prefix="--no_cds", doc=InputDocumentation(doc="Flag. If set, not CDS information will be printed out\nin the GFF output files.")), ToolInput(tag="in_flank", input_type=File(optional=True), prefix="--flank", doc=InputDocumentation(doc="Flanking distance (in bps) to group non-overlapping\ntranscripts into a single superlocus. Default:\ndetermined by the configuration file.")), ToolInput(tag="in_max_intron_length", input_type=Int(optional=True), prefix="--max-intron-length", doc=InputDocumentation(doc="Maximum intron length for a transcript. Default:\ninferred from the configuration file (default value\nthere is 1,000,000 bps).")), ToolInput(tag="in_no_purge", input_type=Boolean(optional=True), prefix="--no-purge", doc=InputDocumentation(doc="Flag. If set, the pipeline will NOT suppress any loci\nwhose transcripts do not pass the requirements set in\nthe JSON file.")), ToolInput(tag="in_cds_only", input_type=Boolean(optional=True), prefix="--cds-only", doc=InputDocumentation(doc="'Flag. If set, Mikado will only look for overlap in\nthe coding features when clustering transcripts\n(unless one transcript is non-coding, in which case\nthe whole transcript will be considered). Please note\nthat Mikado will only consider the **best** ORF for\nthis. Default: False, Mikado will consider transcripts\nin their entirety.")), ToolInput(tag="in_as_cds_only", input_type=Boolean(optional=True), prefix="--as-cds-only", doc=InputDocumentation(doc="Flag. If set, Mikado will only consider the CDS to\ndetermine whether a transcript is a valid alternative\nsplicing event in a locus.")), ToolInput(tag="in_reference_update", input_type=Boolean(optional=True), prefix="--reference-update", doc=InputDocumentation(doc="Flag. If switched on, Mikado will prioritise\ntranscripts marked as reference and will consider any\nother transcipt within loci only in reference to these\nreference transcripts. Novel loci will still be\nreported.")), ToolInput(tag="in_report_all_orfs", input_type=Boolean(optional=True), prefix="--report-all-orfs", doc=InputDocumentation(doc="Boolean switch. If set to true, all ORFs will be\nreported, not just the primary.")), ToolInput(tag="in_only_reference_update", input_type=Boolean(optional=True), prefix="--only-reference-update", doc=InputDocumentation(doc="Flag. If switched on, Mikado will only keep loci where\nat least one of the transcripts is marked as\n'reference'. CAUTION: if no transcript has been marked\nas reference, the output will be completely empty!")), ToolInput(tag="in_exclude_retained_introns", input_type=Boolean(optional=True), prefix="--exclude-retained-introns", doc=InputDocumentation(doc="Exclude all retained intron alternative splicing\nevents from the final output. Default: False. Retained\nintron events that do not dirsupt the CDS are kept by\nMikado in the final output.")), ToolInput(tag="in_keep_disrupted_cds", input_type=Boolean(optional=True), prefix="--keep-disrupted-cds", doc=InputDocumentation(doc="Keep in the final output transcripts whose CDS is most\nprobably disrupted by a retained intron event.\nDefault: False. Mikado will try to detect these\ninstances and exclude them from the final output.")), ToolInput(tag="in_min_clustering_cdna_overlap", input_type=Int(optional=True), prefix="--min-clustering-cdna-overlap", doc=InputDocumentation(doc="Minimum cDNA overlap between two transcripts for them\nto be considered part of the same locus during the\nlate picking stages. NOTE: if --min-cds-overlap is not\nspecified, it will be set to this value! Default: 20%.")), ToolInput(tag="in_min_clustering_cds_overlap", input_type=Int(optional=True), prefix="--min-clustering-cds-overlap", doc=InputDocumentation(doc="Minimum CDS overlap between two transcripts for them\nto be considered part of the same locus during the\nlate picking stages. NOTE: if not specified, and\n--min-cdna-overlap is specified on the command line,\nmin-cds-overlap will be set to this value! Default:\n20%.")), ToolInput(tag="in_check_references", input_type=Boolean(optional=True), prefix="--check-references", doc=InputDocumentation(doc="Flag. If switched on, Mikado will also check reference\nmodels against the general transcript requirements,\nand will also consider them as potential fragments.\nThis is useful in the context of e.g. updating an *ab-\ninitio* results with data from RNASeq, protein\nalignments, etc.")), ToolInput(tag="in_sqlite_db", input_type=File(optional=True), prefix="--sqlite-db", doc=InputDocumentation(doc="Location of an SQLite database to overwrite what is\nspecified in the configuration file.")), ToolInput(tag="in_single", input_type=Boolean(optional=True), prefix="--single", doc=InputDocumentation(doc="Flag. If set, Creator will be launched with a single\nprocess, without involving the multithreading\napparatus. Useful for debugging purposes only.")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Mode in which Mikado will treat transcripts with\nmultiple ORFs. - nosplit: keep the transcripts whole.\n- stringent: split multi-orf transcripts if two\nconsecutive ORFs have both BLAST hits and none of\nthose hits is against the same target. - lenient:\nsplit multi-orf transcripts as in stringent, and\nadditionally, also when either of the ORFs lacks a\nBLAST hit (but not both). - permissive: like lenient,\nbut also split when both ORFs lack BLAST hits - split:\nsplit multi-orf transcripts regardless of what BLAST\ndata is available.")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Random seed number. Default: 0.")), ToolInput(tag="in_random_seed", input_type=Boolean(optional=True), prefix="--random-seed", doc=InputDocumentation(doc="Generate a new random seed number (instead of the\ndefault of 0)")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Output directory. Default: current working directory")), ToolInput(tag="in_mono_loci_out", input_type=File(optional=True), prefix="--monoloci-out", doc=InputDocumentation(doc="This output file is mandatory. If it is not specified\nin the configuration file, it must be provided here.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix for the genes. Default: Mikado")), ToolInput(tag="in_source", input_type=String(optional=True), prefix="--source", doc=InputDocumentation(doc="Source field to use for the output files.")), ToolInput(tag="in_report_all_external_metrics", input_type=Boolean(optional=True), prefix="--report-all-external-metrics", doc=InputDocumentation(doc="Boolean switch. If activated, Mikado will report all\navailable external metrics, not just those requested\nfor in the scoring configuration. This might affect\nspeed in Minos analyses.")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="File to write the log to. Default: decided by the\nconfiguration file.")), ToolInput(tag="in_log_level", input_type=String(optional=True), prefix="--log-level", doc=InputDocumentation(doc="Logging level. Default: retrieved by the configuration\nfile.\n")), ToolInput(tag="in_gff", input_type=String(), position=0, doc=InputDocumentation(doc="optional arguments:"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory. Default: current working directory")), ToolOutput(tag="out_mono_loci_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_mono_loci_out", type_hint=File()), doc=OutputDocumentation(doc="This output file is mandatory. If it is not specified\nin the configuration file, it must be provided here."))], container="quay.io/biocontainers/mikado:2.2.2--py37hfa133b6_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mikado_Pick_V0_1_0().translate("wdl")

