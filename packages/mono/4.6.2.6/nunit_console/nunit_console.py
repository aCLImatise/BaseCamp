from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean

Nunit_Console_V0_1_0 = CommandToolBuilder(tool="nunit_console", base_command=["nunit-console"], inputs=[ToolInput(tag="in_fixture", input_type=String(optional=True), prefix="-fixture", doc=InputDocumentation(doc="Test fixture to be loaded (Short format: -load=STR)")), ToolInput(tag="in_run", input_type=String(optional=True), prefix="-run", doc=InputDocumentation(doc="Name of the test to run")), ToolInput(tag="in_config", input_type=String(optional=True), prefix="-config", doc=InputDocumentation(doc="Project configuration to load")), ToolInput(tag="in_xml", input_type=File(optional=True), prefix="-xml", doc=InputDocumentation(doc="Name of XML output file")), ToolInput(tag="in_transform", input_type=File(optional=True), prefix="-transform", doc=InputDocumentation(doc="Name of transform file")), ToolInput(tag="in_xml_console", input_type=Boolean(optional=True), prefix="-xmlConsole", doc=InputDocumentation(doc="Display XML to the console")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="-output", doc=InputDocumentation(doc="File to receive test output (Short format: -out=STR)")), ToolInput(tag="in_err", input_type=File(optional=True), prefix="-err", doc=InputDocumentation(doc="File to receive test error output")), ToolInput(tag="in_labels", input_type=Boolean(optional=True), prefix="-labels", doc=InputDocumentation(doc="Label each test in stdOut")), ToolInput(tag="in_include", input_type=String(optional=True), prefix="-include", doc=InputDocumentation(doc="List of categories to include")), ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="-exclude", doc=InputDocumentation(doc="List of categories to exclude")), ToolInput(tag="in_domain", input_type=String(optional=True), prefix="-domain", doc=InputDocumentation(doc="AppDomain Usage for Tests")), ToolInput(tag="in_no_shadow", input_type=Boolean(optional=True), prefix="-noshadow", doc=InputDocumentation(doc="Disable shadow copy when running in separate domain")), ToolInput(tag="in_no_thread", input_type=Boolean(optional=True), prefix="-nothread", doc=InputDocumentation(doc="Disable use of a separate thread for tests")), ToolInput(tag="in_wait", input_type=Boolean(optional=True), prefix="-wait", doc=InputDocumentation(doc="Wait for input before closing console window")), ToolInput(tag="in_nologo", input_type=Boolean(optional=True), prefix="-nologo", doc=InputDocumentation(doc="Do not display the logo")), ToolInput(tag="in_no_dots", input_type=Boolean(optional=True), prefix="-nodots", doc=InputDocumentation(doc="Do not display progress"))], outputs=[ToolOutput(tag="out_xml", output_type=File(optional=True), selector=InputSelector(input_to_select="in_xml", type_hint=File()), doc=OutputDocumentation(doc="Name of XML output file")), ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="File to receive test output (Short format: -out=STR)")), ToolOutput(tag="out_err", output_type=File(optional=True), selector=InputSelector(input_to_select="in_err", type_hint=File()), doc=OutputDocumentation(doc="File to receive test error output"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nunit_Console_V0_1_0().translate("wdl", allow_empty_container=True)

