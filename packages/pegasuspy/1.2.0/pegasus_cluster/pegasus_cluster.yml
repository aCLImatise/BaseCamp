!Command
command:
- pegasus
- cluster
positional:
- !Positional
  optional: false
  position: 0
  name: input_file
  description: Input file in either 'zarr', 'h5ad', 'loom', '10x', 'mtx', 'csv', 'tsv'
    or 'fcs' format. If first-pass analysis has been performed, but you want to run
    some additional analysis, you could also pass a zarr-formatted file.
- !Positional
  optional: false
  position: 1
  name: output_name
  description: Output file name. All outputs will use it as the prefix.
- !Positional
  optional: false
  position: 0
  name: output_name.zarr.zip
  description: Output file in Zarr format. To load this file in python, use ``import
    pegasus; data = pegasus.read_input('output_name.zarr.zip')``. The log-normalized
    expression matrix is stored in ``data.X`` as a CSR-format sparse matrix. The ``obs``
    field contains cell related attributes, including clustering results. For example,
    ``data.obs_names`` records cell barcodes; ``data.obs['Channel']`` records the
    channel each cell comes from; ``data.obs['n_genes']``, ``data.obs['n_counts']``,
    and ``data.obs['percent_mito']`` record the number of expressed genes, total UMI
    count, and mitochondrial rate for each cell respectively; ``data.obs['louvain_labels']``
    and ``data.obs['approx_louvain_labels']`` record each cell's cluster labels using
    different clustring algorithms; ``data.obs['pseudo_time']`` records the inferred
    pseudotime for each cell. The ``var`` field contains gene related attributes.
    For example, ``data.var_names`` records gene symbols, ``data.var['gene_ids']``
    records Ensembl gene IDs, and ``data.var['selected']`` records selected variable
    genes. The ``obsm`` field records embedding coordiates. For example, ``data.obsm['X_pca']``
    records PCA coordinates, ``data.obsm['X_tsne']`` records tSNE coordinates, ``data.obsm['X_umap']``
    records UMAP coordinates, ``data.obsm['X_diffmap']`` records diffusion map coordinates,
    ``data.obsm['X_diffmap_pca']`` records the first 3 PCs by projecting the diffusion
    components using PCA, and ``data.obsm['X_fle']`` records the force-directed layout
    coordinates from the diffusion components. The ``uns`` field stores other related
    information, such as reference genome (``data.uns['genome']``). This file can
    be loaded into R and converted into a Seurat object.
named:
- !Flag
  optional: true
  synonyms:
  - -p
  - --threads
  description: 'Number of threads. [default: 1]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --processed
  description: Input file is processed. Assume quality control, data normalization
    and log transformation, highly variable gene selection, batch correction/PCA and
    kNN graph building is done.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --channel
  description: Use <channel_attr> to create a 'Channel' column metadata field. All
    cells within a channel are assumed to come from a same batch.
  args: !SimpleFlagArg
    name: channel_attr
- !Flag
  optional: true
  synonyms:
  - --black-list
  description: Cell barcode attributes in black list will be popped out. Format is
    "attr1,attr2,...,attrn".
  args: !SimpleFlagArg
    name: black_list
- !Flag
  optional: true
  synonyms:
  - --select-singlets
  description: Only select DemuxEM-predicted singlets for analysis.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --remap-singlets
  description: "Remap singlet names using <remap_string>, where <remap_string> takes\
    \ the format \"new_name_i:old_name_1,old_name_2;new_name_ii:old_name_3;...\".\
    \ For example, if we hashed 5 libraries from 3 samples sample1_lib1, sample1_lib2,\
    \ sample2_lib1, sample2_lib2 and sample3, we can remap them to 3 samples using\
    \ this string: \"sample1:sample1_lib1,sample1_lib2;sample2:sample2_lib1,sample2_lib2\"\
    . In this way, the new singlet names will be in metadata field with key 'assignment',\
    \ while the old names will be kept in metadata field with key 'assignment.orig'."
  args: !SimpleFlagArg
    name: remap_string
- !Flag
  optional: true
  synonyms:
  - --subset-singlets
  description: If select singlets, only select singlets in the <subset_string>, which
    takes the format "name1,name2,...". Note that if --remap-singlets is specified,
    subsetting happens after remapping. For example, we can only select singlets from
    sampe 1 and 3 using "sample1,sample3".
  args: !SimpleFlagArg
    name: subset_string
- !Flag
  optional: true
  synonyms:
  - --genome
  description: If sample count matrix is in either DGE, mtx, csv, tsv or loom format,
    use <genome_name> as the genome reference name.
  args: !SimpleFlagArg
    name: genome_name
- !Flag
  optional: true
  synonyms:
  - --focus
  description: Focus analysis on Unimodal data with <keys>. <keys> is a comma-separated
    list of keys. If None, the self._selected will be the focused one.
  args: !SimpleFlagArg
    name: keys
- !Flag
  optional: true
  synonyms:
  - --append
  description: Append Unimodal data <key> to any <keys> in --focus.
  args: !SimpleFlagArg
    name: key
- !Flag
  optional: true
  synonyms:
  - --output-loom
  description: Output loom-formatted file.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --output-h5ad
  description: Output h5ad-formatted file.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --min-genes
  description: 'Only keep cells with at least <number> of genes. [default: 500]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --max-genes
  description: 'Only keep cells with less than <number> of genes. [default: 6000]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --min-umis
  description: Only keep cells with at least <number> of UMIs.
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --max-umis
  description: Only keep cells with less than <number> of UMIs.
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --mito-prefix
  description: 'Prefix for mitochondrial genes. Can provide multiple prefixes for
    multiple organisms (e.g. "MT-" means to use "MT-", "GRCh38:MT-,mm10:mt-,MT-" means
    to use "MT-" for GRCh38, "mt-" for mm10 and "MT-" for all other organisms). [default:
    GRCh38:MT-,mm10:mt-,MT-]'
  args: !SimpleFlagArg
    name: prefix
- !Flag
  optional: true
  synonyms:
  - --percent-mito
  description: 'Only keep cells with mitochondrial percent less than <percent>%. [default:
    20.0]'
  args: !SimpleFlagArg
    name: percent
- !Flag
  optional: true
  synonyms:
  - --gene-percent-cells
  description: 'Only use genes that are expressed in at least <percent>% of cells
    to select variable genes. [default: 0.05]'
  args: !SimpleFlagArg
    name: percent
- !Flag
  optional: true
  synonyms:
  - --output-filtration-results
  description: Output filtration results as a spreadsheet.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --plot-filtration-results
  description: Plot filtration results as PDF files.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --plot-filtration-figsize
  description: Figure size for filtration plots. <figsize> is a comma-separated list
    of two numbers, the width and height of the figure (e.g. 6,4).
  args: !SimpleFlagArg
    name: figsize
- !Flag
  optional: true
  synonyms:
  - --min-genes-before-filtration
  description: 'If raw data matrix is input, empty barcodes will dominate pre-filtration
    statistics. To avoid this, for raw data matrix, only consider barcodes with at
    lease <number> genes for pre-filtration condition. [default: 100]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --counts-per-cell-after
  description: 'Total counts per cell after normalization. [default: 1e5]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --select-hvf-flavor
  description: "Highly variable feature selection method. <flavor> can be 'pegasus'\
    \ or 'Seurat'. [default: pegasus]"
  args: !SimpleFlagArg
    name: flavor
- !Flag
  optional: true
  synonyms:
  - --select-hvf-ngenes
  description: "Select top <nfeatures> highly variable features. If <flavor> is 'Seurat'\
    \ and <nfeatures> is 'None', select HVGs with z-score cutoff at 0.5. [default:\
    \ 2000]"
  args: !SimpleFlagArg
    name: nfeatures
- !Flag
  optional: true
  synonyms:
  - --no-select-hvf
  description: Do not select highly variable features.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --plot-hvf
  description: Plot highly variable feature selection.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --correct-batch-effect
  description: Correct for batch effects.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --correction-method
  description: "Batch correction method, can be either 'L/S' for location/scale adjustment\
    \ algorithm (Li and Wong. The analysis of Gene Expression Data 2003) or 'harmony'\
    \ for Harmony (Korsunsky et al. Nature Methods 2019) or 'scanorama' for Scanorama\
    \ (Hie et al. Nature Biotechnology 2019). [default: harmony]"
  args: !SimpleFlagArg
    name: method
- !Flag
  optional: true
  synonyms:
  - --batch-group-by
  description: Only valid if correction method is L/S. Batch correction assumes the
    differences in gene expression between channels are due to batch effects. However,
    in many cases, we know that channels can be partitioned into several groups and
    each group is biologically different from others. In this case, we will only perform
    batch correction for channels within each group. This option defines the groups.
    If <expression> is None, we assume all channels are from one group. Otherwise,
    groups are defined according to <expression>. <expression> takes the form of either
    'attr', or 'attr1+attr2+...+attrn', or 'attr=value11,...,value1n_1;value21,...,value2n_2;...;valuem1,...,valuemn_m'.
    In the first form, 'attr' should be an existing sample attribute, and groups are
    defined by 'attr'. In the second form, 'attr1',...,'attrn' are n existing sample
    attributes and groups are defined by the Cartesian product of these n attributes.
    In the last form, there will be m + 1 groups. A cell belongs to group i (i > 0)
    if and only if its sample attribute 'attr' has a value among valuei1,...,valuein_i.
    A cell belongs to group 0 if it does not belong to any other groups.
  args: !SimpleFlagArg
    name: expression
- !Flag
  optional: true
  synonyms:
  - --harmony-nclusters
  description: Number of clusters used for Harmony batch correction.
  args: !SimpleFlagArg
    name: nclusters
- !Flag
  optional: true
  synonyms:
  - --random-state
  description: 'Random number generator seed. [default: 0]'
  args: !SimpleFlagArg
    name: seed
- !Flag
  optional: true
  synonyms:
  - --temp-folder
  description: Joblib temporary folder for memmapping numpy arrays.
  args: !SimpleFlagArg
    name: temp_folder
- !Flag
  optional: true
  synonyms:
  - --calc-signature-scores
  description: Calculate signature scores for gene sets in <sig_list>. <sig_list>
    is a comma-separated list of strings. Each string should either be a <GMT_file>
    or one of 'cell_cycle_human', 'cell_cycle_mouse', 'gender_human', 'gender_mouse',
    'mitochondrial_genes_human', 'mitochondrial_genes_mouse', 'ribosomal_genes_human'
    and 'ribosomal_genes_mouse'.
  args: !SimpleFlagArg
    name: sig_list
- !Flag
  optional: true
  synonyms:
  - --pca-n
  description: 'Number of principal components. [default: 50]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --pca-robust
  description: Use 'arpack' instead of 'randomized' as svd_solver for large sparse
    matrices. It will take longer time to compute PCs, but the results are more numerically
    stable.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --knn-K
  description: 'Number of nearest neighbors for building kNN graph. [default: 100]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --knn-full-speed
  description: For the sake of reproducibility, we only run one thread for building
    kNN indices. Turn on this option will allow multiple threads to be used for index
    building. However, it will also reduce reproducibility due to the racing between
    multiple threads.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --kBET
  description: Calculate kBET.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --kBET-batch
  description: 'kBET batch keyword. [default: Channel]'
  args: !SimpleFlagArg
    name: batch
- !Flag
  optional: true
  synonyms:
  - --kBET-alpha
  description: 'kBET rejection alpha. [default: 0.05]'
  args: !SimpleFlagArg
    name: alpha
- !Flag
  optional: true
  synonyms:
  - --kBET-K
  description: 'kBET K. [default: 25]'
  args: !SimpleFlagArg
    name: K
- !Flag
  optional: true
  synonyms:
  - --diffmap
  description: Calculate diffusion maps.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --diffmap-ndc
  description: 'Number of diffusion components. [default: 100]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --diffmap-solver
  description: "Solver for eigen decomposition, either 'eigsh' or 'randomized'. [default:\
    \ eigsh]"
  args: !SimpleFlagArg
    name: solver
- !Flag
  optional: true
  synonyms:
  - --diffmap-maxt
  description: 'Maximum time stamp to search for the knee point. [default: 5000]'
  args: !SimpleFlagArg
    name: max_t
- !Flag
  optional: true
  synonyms:
  - --diffmap-to-3d
  description: If map diffusion map into 3D space using PCA.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --calculate-pseudotime
  description: Calculate diffusion-based pseudotimes based on <roots>. <roots> should
    be a comma-separated list of cell barcodes.
  args: !SimpleFlagArg
    name: roots
- !Flag
  optional: true
  synonyms:
  - --louvain
  description: Run louvain clustering algorithm.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --louvain-resolution
  description: 'Resolution parameter for the louvain clustering algorithm. [default:
    1.3]'
  args: !SimpleFlagArg
    name: resolution
- !Flag
  optional: true
  synonyms:
  - --louvain-class-label
  description: 'Louvain cluster label name in result. [default: louvain_labels]'
  args: !SimpleFlagArg
    name: label
- !Flag
  optional: true
  synonyms:
  - --leiden
  description: Run leiden clustering algorithm.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --leiden-resolution
  description: 'Resolution parameter for the leiden clustering algorithm. [default:
    1.3]'
  args: !SimpleFlagArg
    name: resolution
- !Flag
  optional: true
  synonyms:
  - --leiden-niter
  description: 'Number of iterations of running the Leiden algorithm. If <niter> is
    negative, run Leiden iteratively until no improvement. [default: -1]'
  args: !SimpleFlagArg
    name: niter
- !Flag
  optional: true
  synonyms:
  - --leiden-class-label
  description: 'Leiden cluster label name in result. [default: leiden_labels]'
  args: !SimpleFlagArg
    name: label
- !Flag
  optional: true
  synonyms:
  - --spectral-louvain
  description: Run spectral-louvain clustering algorithm.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --spectral-louvain-basis
  description: "Basis used for KMeans clustering. Can be 'pca' or 'diffmap'. If 'diffmap'\
    \ is not calculated, use 'pca' instead. [default: diffmap]"
  args: !SimpleFlagArg
    name: basis
- !Flag
  optional: true
  synonyms:
  - --spectral-louvain-nclusters
  description: 'Number of first level clusters for Kmeans. [default: 30]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --spectral-louvain-nclusters2
  description: 'Number of second level clusters for Kmeans. [default: 50]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --spectral-louvain-ninit
  description: 'Number of Kmeans tries for first level clustering. Default is the
    same as scikit-learn Kmeans function. [default: 10]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --spectral-louvain-resolution
  description: 'Resolution parameter for louvain. [default: 1.3]'
  args: !SimpleFlagArg
    name: resolution
- !Flag
  optional: true
  synonyms:
  - --spectral-louvain-class-label
  description: 'Spectral-louvain label name in result. [default: spectral_louvain_labels]'
  args: !SimpleFlagArg
    name: label
- !Flag
  optional: true
  synonyms:
  - --spectral-leiden
  description: Run spectral-leiden clustering algorithm.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --spectral-leiden-basis
  description: "Basis used for KMeans clustering. Can be 'pca' or 'diffmap'. If 'diffmap'\
    \ is not calculated, use 'pca' instead. [default: diffmap]"
  args: !SimpleFlagArg
    name: basis
- !Flag
  optional: true
  synonyms:
  - --spectral-leiden-nclusters
  description: 'Number of first level clusters for Kmeans. [default: 30]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --spectral-leiden-nclusters2
  description: 'Number of second level clusters for Kmeans. [default: 50]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --spectral-leiden-ninit
  description: 'Number of Kmeans tries for first level clustering. Default is the
    same as scikit-learn Kmeans function. [default: 10]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --spectral-leiden-resolution
  description: 'Resolution parameter for leiden. [default: 1.3]'
  args: !SimpleFlagArg
    name: resolution
- !Flag
  optional: true
  synonyms:
  - --spectral-leiden-class-label
  description: 'Spectral-leiden label name in result. [default: spectral_leiden_labels]'
  args: !SimpleFlagArg
    name: label
- !Flag
  optional: true
  synonyms:
  - --tsne
  description: Run FIt-SNE package to compute t-SNE embeddings for visualization.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --tsne-perplexity
  description: 't-SNE perplexity parameter. [default: 30]'
  args: !SimpleFlagArg
    name: perplexity
- !Flag
  optional: true
  synonyms:
  - --tsne-initialization
  description: "<choice> can be either 'random' or 'pca'. 'random' refers to random\
    \ initialization. 'pca' refers to PCA initialization as described in (CITE Kobak\
    \ et al. 2019) [default: pca]"
  args: !SimpleFlagArg
    name: choice
- !Flag
  optional: true
  synonyms:
  - --umap
  description: Run umap for visualization.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --umap-K
  description: 'K neighbors for umap. [default: 15]'
  args: !SimpleFlagArg
    name: K
- !Flag
  optional: true
  synonyms:
  - --umap-min-dist
  description: 'Umap parameter. [default: 0.5]'
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --umap-spread
  description: 'Umap parameter. [default: 1.0]'
  args: !SimpleFlagArg
    name: spread
- !Flag
  optional: true
  synonyms:
  - --fle
  description: Run force-directed layout embedding.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --fle-K
  description: 'K neighbors for building graph for FLE. [default: 50]'
  args: !SimpleFlagArg
    name: K
- !Flag
  optional: true
  synonyms:
  - --fle-target-change-per-node
  description: 'Target change per node to stop forceAtlas2. [default: 2.0]'
  args: !SimpleFlagArg
    name: change
- !Flag
  optional: true
  synonyms:
  - --fle-target-steps
  description: 'Maximum number of iterations before stopping the forceAtlas2 algoritm.
    [default: 5000]'
  args: !SimpleFlagArg
    name: steps
- !Flag
  optional: true
  synonyms:
  - --fle-memory
  description: 'Memory size in GB for the Java FA2 component. [default: 8]'
  args: !SimpleFlagArg
    name: memory
- !Flag
  optional: true
  synonyms:
  - --net-down-sample-fraction
  description: 'Down sampling fraction for net-related visualization. [default: 0.1]'
  args: !SimpleFlagArg
    name: frac
- !Flag
  optional: true
  synonyms:
  - --net-down-sample-K
  description: 'Use <K> neighbors to estimate local density for each data point for
    down sampling. [default: 25]'
  args: !SimpleFlagArg
    name: K
- !Flag
  optional: true
  synonyms:
  - --net-down-sample-alpha
  description: 'Weighted down sample, proportional to radius^alpha. [default: 1.0]'
  args: !SimpleFlagArg
    name: alpha
- !Flag
  optional: true
  synonyms:
  - --net-regressor-L2-penalty
  description: 'L2 penalty parameter for the deep net regressor. [default: 0.1]'
  args: !SimpleFlagArg
    name: value
- !Flag
  optional: true
  synonyms:
  - --net-umap
  description: Run net umap for visualization.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --net-umap-polish-learning-rate
  description: 'After running the deep regressor to predict new coordinate, what is
    the learning rate to use to polish the coordinates for UMAP. [default: 1.0]'
  args: !SimpleFlagArg
    name: rate
- !Flag
  optional: true
  synonyms:
  - --net-umap-polish-nepochs
  description: 'Number of iterations for polishing UMAP run. [default: 40]'
  args: !SimpleFlagArg
    name: nepochs
- !Flag
  optional: true
  synonyms:
  - --net-umap-out-basis
  description: 'Output basis for net-UMAP. [default: net_umap]'
  args: !SimpleFlagArg
    name: basis
- !Flag
  optional: true
  synonyms:
  - --net-fle
  description: Run net FLE.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --net-fle-polish-target-steps
  description: 'After running the deep regressor to predict new coordinate, what is
    the number of force atlas 2 iterations. [default: 1500]'
  args: !SimpleFlagArg
    name: steps
- !Flag
  optional: true
  synonyms:
  - --net-fle-out-basis
  description: 'Output basis for net-FLE. [default: net_fle]'
  args: !SimpleFlagArg
    name: basis
- !Flag
  optional: true
  synonyms:
  - --infer-doublets
  description: Infer doublets using the method described in https://github.com/klarman-cell-observatory/pegasus/raw/master/doublet_detection.pdf.
    Obs attribute 'doublet_score' stores Scrublet-like doublet scores and attribute
    'demux_type' stores 'doublet/singlet' assignments.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --expected-doublet-rate
  description: The expected doublet rate per sample. By default, calculate the expected
    rate based on number of cells from the 10x multiplet rate table.
  args: !SimpleFlagArg
    name: rate
- !Flag
  optional: true
  synonyms:
  - --dbl-cluster-attr
  description: "<attr> refers to a cluster attribute containing cluster labels (e.g.\
    \ 'louvain_labels'). Doublet clusters will be marked based on <attr> with the\
    \ following criteria: passing the Fisher's exact test and having >= 50% of cells\
    \ identified as doublets. By default, the first computed cluster attribute in\
    \ the list of leiden, louvain, spectral_ledein and spectral_louvain is used."
  args: !SimpleFlagArg
    name: attr
- !Flag
  optional: true
  synonyms:
  - --citeseq
  description: Input data contain both RNA and CITE-Seq modalities. This will set
    --focus to be the RNA modality and --append to be the CITE-Seq modality. In addition,
    'ADT-' will be added in front of each antibody name to avoid name conflict with
    genes in the RNA modality.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --citeseq-umap
  description: For high quality cells kept in the RNA modality, generate a UMAP based
    on their antibody expression.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --citeseq-umap-exclude
  description: <list> is a comma-separated list of antibodies to be excluded from
    the UMAP calculation (e.g. Mouse-IgG1,Mouse-IgG2a).
  args: !SimpleFlagArg
    name: list
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: Print out help information.
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "Run pegasus.pipeline to obtain top-level clusters.\n\nUsage:\n  pegasus\
  \ cluster [options] <input_file> <output_name>\n  pegasus cluster -h\n\nArguments:\n\
  \  input_file       Input file in either 'zarr', 'h5ad', 'loom', '10x', 'mtx', 'csv',\
  \ 'tsv' or 'fcs' format. If first-pass analysis has been performed, but you want\
  \ to run some additional analysis, you could also pass a zarr-formatted file.\n\
  \  output_name      Output file name. All outputs will use it as the prefix.\n\n\
  Options:\n  -p <number>, --threads <number>                  Number of threads.\
  \ [default: 1]\n  --processed                                      Input file is\
  \ processed. Assume quality control, data normalization and log transformation,\
  \ highly variable gene selection, batch correction/PCA and kNN graph building is\
  \ done.\n\n  --channel <channel_attr>                         Use <channel_attr>\
  \ to create a 'Channel' column metadata field. All cells within a channel are assumed\
  \ to come from a same batch.\n  --black-list <black_list>                      \
  \  Cell barcode attributes in black list will be popped out. Format is \"attr1,attr2,...,attrn\"\
  .\n\n  --select-singlets                                Only select DemuxEM-predicted\
  \ singlets for analysis.\n  --remap-singlets <remap_string>                  Remap\
  \ singlet names using <remap_string>, where <remap_string> takes the format \"new_name_i:old_name_1,old_name_2;new_name_ii:old_name_3;...\"\
  . For example, if we hashed 5 libraries from 3 samples sample1_lib1, sample1_lib2,\
  \ sample2_lib1, sample2_lib2 and sample3, we can remap them to 3 samples using this\
  \ string: \"sample1:sample1_lib1,sample1_lib2;sample2:sample2_lib1,sample2_lib2\"\
  . In this way, the new singlet names will be in metadata field with key 'assignment',\
  \ while the old names will be kept in metadata field with key 'assignment.orig'.\n\
  \  --subset-singlets <subset_string>                If select singlets, only select\
  \ singlets in the <subset_string>, which takes the format \"name1,name2,...\". Note\
  \ that if --remap-singlets is specified, subsetting happens after remapping. For\
  \ example, we can only select singlets from sampe 1 and 3 using \"sample1,sample3\"\
  .\n\n  --genome <genome_name>                           If sample count matrix is\
  \ in either DGE, mtx, csv, tsv or loom format, use <genome_name> as the genome reference\
  \ name.\n  --focus <keys>                                   Focus analysis on Unimodal\
  \ data with <keys>. <keys> is a comma-separated list of keys. If None, the self._selected\
  \ will be the focused one.\n  --append <key>                                   Append\
  \ Unimodal data <key> to any <keys> in --focus.\n\n  --output-loom             \
  \                       Output loom-formatted file.\n  --output-h5ad           \
  \                         Output h5ad-formatted file.\n\n  --min-genes <number>\
  \                             Only keep cells with at least <number> of genes. [default:\
  \ 500]\n  --max-genes <number>                             Only keep cells with\
  \ less than <number> of genes. [default: 6000]\n  --min-umis <number>          \
  \                    Only keep cells with at least <number> of UMIs.\n  --max-umis\
  \ <number>                              Only keep cells with less than <number>\
  \ of UMIs.\n  --mito-prefix <prefix>                           Prefix for mitochondrial\
  \ genes. Can provide multiple prefixes for multiple organisms (e.g. \"MT-\" means\
  \ to use \"MT-\", \"GRCh38:MT-,mm10:mt-,MT-\" means to use \"MT-\" for GRCh38, \"\
  mt-\" for mm10 and \"MT-\" for all other organisms). [default: GRCh38:MT-,mm10:mt-,MT-]\n\
  \  --percent-mito <percent>                         Only keep cells with mitochondrial\
  \ percent less than <percent>%. [default: 20.0]\n  --gene-percent-cells <percent>\
  \                   Only use genes that are expressed in at least <percent>% of\
  \ cells to select variable genes. [default: 0.05]\n\n  --output-filtration-results\
  \                      Output filtration results as a spreadsheet.\n  --plot-filtration-results\
  \                        Plot filtration results as PDF files.\n  --plot-filtration-figsize\
  \ <figsize>              Figure size for filtration plots. <figsize> is a comma-separated\
  \ list of two numbers, the width and height of the figure (e.g. 6,4).\n  --min-genes-before-filtration\
  \ <number>           If raw data matrix is input, empty barcodes will dominate pre-filtration\
  \ statistics. To avoid this, for raw data matrix, only consider barcodes with at\
  \ lease <number> genes for pre-filtration condition. [default: 100]\n\n  --counts-per-cell-after\
  \ <number>                 Total counts per cell after normalization. [default:\
  \ 1e5]\n\n  --select-hvf-flavor <flavor>                     Highly variable feature\
  \ selection method. <flavor> can be 'pegasus' or 'Seurat'. [default: pegasus]\n\
  \  --select-hvf-ngenes <nfeatures>                  Select top <nfeatures> highly\
  \ variable features. If <flavor> is 'Seurat' and <nfeatures> is 'None', select HVGs\
  \ with z-score cutoff at 0.5. [default: 2000]\n  --no-select-hvf               \
  \                   Do not select highly variable features.\n  --plot-hvf      \
  \                                 Plot highly variable feature selection.\n\n  --correct-batch-effect\
  \                           Correct for batch effects.\n  --correction-method <method>\
  \                     Batch correction method, can be either 'L/S' for location/scale\
  \ adjustment algorithm (Li and Wong. The analysis of Gene Expression Data 2003)\
  \ or 'harmony' for Harmony (Korsunsky et al. Nature Methods 2019) or 'scanorama'\
  \ for Scanorama (Hie et al. Nature Biotechnology 2019). [default: harmony]\n  --batch-group-by\
  \ <expression>                    Only valid if correction method is L/S. Batch\
  \ correction assumes the differences in gene expression between channels are due\
  \ to batch effects. However, in many cases, we know that channels can be partitioned\
  \ into several groups and each group is biologically different from others. In this\
  \ case, we will only perform batch correction for channels within each group. This\
  \ option defines the groups. If <expression> is None, we assume all channels are\
  \ from one group. Otherwise, groups are defined according to <expression>. <expression>\
  \ takes the form of either 'attr', or 'attr1+attr2+...+attrn', or 'attr=value11,...,value1n_1;value21,...,value2n_2;...;valuem1,...,valuemn_m'.\
  \ In the first form, 'attr' should be an existing sample attribute, and groups are\
  \ defined by 'attr'. In the second form, 'attr1',...,'attrn' are n existing sample\
  \ attributes and groups are defined by the Cartesian product of these n attributes.\
  \ In the last form, there will be m + 1 groups. A cell belongs to group i (i > 0)\
  \ if and only if its sample attribute 'attr' has a value among valuei1,...,valuein_i.\
  \ A cell belongs to group 0 if it does not belong to any other groups.\n  --harmony-nclusters\
  \ <nclusters>                  Number of clusters used for Harmony batch correction.\n\
  \n  --random-state <seed>                            Random number generator seed.\
  \ [default: 0]\n  --temp-folder <temp_folder>                      Joblib temporary\
  \ folder for memmapping numpy arrays.\n\n  --calc-signature-scores <sig_list>  \
  \             Calculate signature scores for gene sets in <sig_list>. <sig_list>\
  \ is a comma-separated list of strings. Each string should either be a <GMT_file>\
  \ or one of 'cell_cycle_human', 'cell_cycle_mouse', 'gender_human', 'gender_mouse',\
  \ 'mitochondrial_genes_human', 'mitochondrial_genes_mouse', 'ribosomal_genes_human'\
  \ and 'ribosomal_genes_mouse'.\n\n  --pca-n <number>                           \
  \      Number of principal components. [default: 50]\n  --pca-robust           \
  \                          Use 'arpack' instead of 'randomized' as svd_solver for\
  \ large sparse matrices. It will take longer time to compute PCs, but the results\
  \ are more numerically stable.\n\n  --knn-K <number>                           \
  \      Number of nearest neighbors for building kNN graph. [default: 100]\n  --knn-full-speed\
  \                                 For the sake of reproducibility, we only run one\
  \ thread for building kNN indices. Turn on this option will allow multiple threads\
  \ to be used for index building. However, it will also reduce reproducibility due\
  \ to the racing between multiple threads.\n\n  --kBET                          \
  \                 Calculate kBET.\n  --kBET-batch <batch>                      \
  \       kBET batch keyword. [default: Channel]\n  --kBET-alpha <alpha>         \
  \                    kBET rejection alpha. [default: 0.05]\n  --kBET-K <K>     \
  \                                kBET K. [default: 25]\n\n  --diffmap          \
  \                              Calculate diffusion maps.\n  --diffmap-ndc <number>\
  \                           Number of diffusion components. [default: 100]\n  --diffmap-solver\
  \ <solver>                        Solver for eigen decomposition, either 'eigsh'\
  \ or 'randomized'. [default: eigsh]\n  --diffmap-maxt <max_t>                  \
  \         Maximum time stamp to search for the knee point. [default: 5000]\n  --diffmap-to-3d\
  \                                  If map diffusion map into 3D space using PCA.\n\
  \  --calculate-pseudotime <roots>                   Calculate diffusion-based pseudotimes\
  \ based on <roots>. <roots> should be a comma-separated list of cell barcodes.\n\
  \n  --louvain                                        Run louvain clustering algorithm.\n\
  \  --louvain-resolution <resolution>                Resolution parameter for the\
  \ louvain clustering algorithm. [default: 1.3]\n  --louvain-class-label <label>\
  \                    Louvain cluster label name in result. [default: louvain_labels]\n\
  \n  --leiden                                         Run leiden clustering algorithm.\n\
  \  --leiden-resolution <resolution>                 Resolution parameter for the\
  \ leiden clustering algorithm. [default: 1.3]\n  --leiden-niter <niter>        \
  \                   Number of iterations of running the Leiden algorithm. If <niter>\
  \ is negative, run Leiden iteratively until no improvement. [default: -1]\n  --leiden-class-label\
  \ <label>                     Leiden cluster label name in result. [default: leiden_labels]\n\
  \n  --spectral-louvain                               Run spectral-louvain clustering\
  \ algorithm.\n  --spectral-louvain-basis <basis>                 Basis used for\
  \ KMeans clustering. Can be 'pca' or 'diffmap'. If 'diffmap' is not calculated,\
  \ use 'pca' instead. [default: diffmap]\n  --spectral-louvain-nclusters <number>\
  \            Number of first level clusters for Kmeans. [default: 30]\n  --spectral-louvain-nclusters2\
  \ <number>           Number of second level clusters for Kmeans. [default: 50]\n\
  \  --spectral-louvain-ninit <number>                Number of Kmeans tries for first\
  \ level clustering. Default is the same as scikit-learn Kmeans function. [default:\
  \ 10]\n  --spectral-louvain-resolution <resolution>       Resolution parameter for\
  \ louvain. [default: 1.3]\n  --spectral-louvain-class-label <label>           Spectral-louvain\
  \ label name in result. [default: spectral_louvain_labels]\n\n  --spectral-leiden\
  \                                Run spectral-leiden clustering algorithm.\n  --spectral-leiden-basis\
  \ <basis>                  Basis used for KMeans clustering. Can be 'pca' or 'diffmap'.\
  \ If 'diffmap' is not calculated, use 'pca' instead. [default: diffmap]\n  --spectral-leiden-nclusters\
  \ <number>             Number of first level clusters for Kmeans. [default: 30]\n\
  \  --spectral-leiden-nclusters2 <number>            Number of second level clusters\
  \ for Kmeans. [default: 50]\n  --spectral-leiden-ninit <number>                \
  \ Number of Kmeans tries for first level clustering. Default is the same as scikit-learn\
  \ Kmeans function. [default: 10]\n  --spectral-leiden-resolution <resolution>  \
  \      Resolution parameter for leiden. [default: 1.3]\n  --spectral-leiden-class-label\
  \ <label>            Spectral-leiden label name in result. [default: spectral_leiden_labels]\n\
  \n  --tsne                                           Run FIt-SNE package to compute\
  \ t-SNE embeddings for visualization.\n  --tsne-perplexity <perplexity>        \
  \           t-SNE perplexity parameter. [default: 30]\n  --tsne-initialization <choice>\
  \                   <choice> can be either 'random' or 'pca'. 'random' refers to\
  \ random initialization. 'pca' refers to PCA initialization as described in (CITE\
  \ Kobak et al. 2019) [default: pca]\n\n  --umap                                \
  \           Run umap for visualization.\n  --umap-K <K>                        \
  \             K neighbors for umap. [default: 15]\n  --umap-min-dist <number>  \
  \                       Umap parameter. [default: 0.5]\n  --umap-spread <spread>\
  \                           Umap parameter. [default: 1.0]\n\n  --fle          \
  \                                  Run force-directed layout embedding.\n  --fle-K\
  \ <K>                                      K neighbors for building graph for FLE.\
  \ [default: 50]\n  --fle-target-change-per-node <change>            Target change\
  \ per node to stop forceAtlas2. [default: 2.0]\n  --fle-target-steps <steps>   \
  \                    Maximum number of iterations before stopping the forceAtlas2\
  \ algoritm. [default: 5000]\n  --fle-memory <memory>                           \
  \ Memory size in GB for the Java FA2 component. [default: 8]\n\n  --net-down-sample-fraction\
  \ <frac>                Down sampling fraction for net-related visualization. [default:\
  \ 0.1]\n  --net-down-sample-K <K>                          Use <K> neighbors to\
  \ estimate local density for each data point for down sampling. [default: 25]\n\
  \  --net-down-sample-alpha <alpha>                  Weighted down sample, proportional\
  \ to radius^alpha. [default: 1.0]\n\n  --net-regressor-L2-penalty <value>      \
  \         L2 penalty parameter for the deep net regressor. [default: 0.1]\n\n  --net-umap\
  \                                       Run net umap for visualization.\n  --net-umap-polish-learning-rate\
  \ <rate>           After running the deep regressor to predict new coordinate, what\
  \ is the learning rate to use to polish the coordinates for UMAP. [default: 1.0]\n\
  \  --net-umap-polish-nepochs <nepochs>              Number of iterations for polishing\
  \ UMAP run. [default: 40]\n  --net-umap-out-basis <basis>                     Output\
  \ basis for net-UMAP. [default: net_umap]\n\n  --net-fle                       \
  \                 Run net FLE.\n  --net-fle-polish-target-steps <steps>        \
  \    After running the deep regressor to predict new coordinate, what is the number\
  \ of force atlas 2 iterations. [default: 1500]\n  --net-fle-out-basis <basis>  \
  \                    Output basis for net-FLE. [default: net_fle]\n\n  --infer-doublets\
  \                                 Infer doublets using the method described in https://github.com/klarman-cell-observatory/pegasus/raw/master/doublet_detection.pdf.\
  \ Obs attribute 'doublet_score' stores Scrublet-like doublet scores and attribute\
  \ 'demux_type' stores 'doublet/singlet' assignments.\n  --expected-doublet-rate\
  \ <rate>                   The expected doublet rate per sample. By default, calculate\
  \ the expected rate based on number of cells from the 10x multiplet rate table.\n\
  \  --dbl-cluster-attr <attr>                        <attr> refers to a cluster attribute\
  \ containing cluster labels (e.g. 'louvain_labels'). Doublet clusters will be marked\
  \ based on <attr> with the following criteria: passing the Fisher's exact test and\
  \ having >= 50% of cells identified as doublets. By default, the first computed\
  \ cluster attribute in the list of leiden, louvain, spectral_ledein and spectral_louvain\
  \ is used.\n\n  --citeseq                                        Input data contain\
  \ both RNA and CITE-Seq modalities. This will set --focus to be the RNA modality\
  \ and --append to be the CITE-Seq modality. In addition, 'ADT-' will be added in\
  \ front of each antibody name to avoid name conflict with genes in the RNA modality.\n\
  \  --citeseq-umap                                   For high quality cells kept\
  \ in the RNA modality, generate a UMAP based on their antibody expression. \n  --citeseq-umap-exclude\
  \ <list>                    <list> is a comma-separated list of antibodies to be\
  \ excluded from the UMAP calculation (e.g. Mouse-IgG1,Mouse-IgG2a).\n\n  -h, --help\
  \                                       Print out help information.\n\nOutputs:\n\
  \  output_name.zarr.zip                     Output file in Zarr format. To load\
  \ this file in python, use ``import pegasus; data = pegasus.read_input('output_name.zarr.zip')``.\
  \ The log-normalized expression matrix is stored in ``data.X`` as a CSR-format sparse\
  \ matrix. The ``obs`` field contains cell related attributes, including clustering\
  \ results. For example, ``data.obs_names`` records cell barcodes; ``data.obs['Channel']``\
  \ records the channel each cell comes from; ``data.obs['n_genes']``, ``data.obs['n_counts']``,\
  \ and ``data.obs['percent_mito']`` record the number of expressed genes, total UMI\
  \ count, and mitochondrial rate for each cell respectively; ``data.obs['louvain_labels']``\
  \ and ``data.obs['approx_louvain_labels']`` record each cell's cluster labels using\
  \ different clustring algorithms; ``data.obs['pseudo_time']`` records the inferred\
  \ pseudotime for each cell. The ``var`` field contains gene related attributes.\
  \ For example, ``data.var_names`` records gene symbols, ``data.var['gene_ids']``\
  \ records Ensembl gene IDs, and ``data.var['selected']`` records selected variable\
  \ genes. The ``obsm`` field records embedding coordiates. For example, ``data.obsm['X_pca']``\
  \ records PCA coordinates, ``data.obsm['X_tsne']`` records tSNE coordinates, ``data.obsm['X_umap']``\
  \ records UMAP coordinates, ``data.obsm['X_diffmap']`` records diffusion map coordinates,\
  \ ``data.obsm['X_diffmap_pca']`` records the first 3 PCs by projecting the diffusion\
  \ components using PCA, and ``data.obsm['X_fle']`` records the force-directed layout\
  \ coordinates from the diffusion components. The ``uns`` field stores other related\
  \ information, such as reference genome (``data.uns['genome']``). This file can\
  \ be loaded into R and converted into a Seurat object.\n  output_name.<group>.h5ad\
  \                 Optional output. Only exists if '--output-h5ad' is set. Results\
  \ in h5ad format per focused <group>. This file can be loaded into R and converted\
  \ into a Seurat object.\n  output_name.<group>.loom                 Optional output.\
  \ Only exists if '--output-loom' is set. Results in loom format per focused <group>.\n\
  \  output_name.<group>.filt.xlsx            Optional output. Only exists if '--output-filtration-results'\
  \ is set. Filtration statistics per focused <group>. This file has two sheets ---\
  \ Cell filtration stats and Gene filtration stats. The first sheet records cell\
  \ filtering results and it has 10 columns: Channel, channel name; kept, number of\
  \ cells kept; median_n_genes, median number of expressed genes in kept cells; median_n_umis,\
  \ median number of UMIs in kept cells; median_percent_mito, median mitochondrial\
  \ rate as UMIs between mitochondrial genes and all genes in kept cells; filt, number\
  \ of cells filtered out; total, total number of cells before filtration, if the\
  \ input contain all barcodes, this number is the cells left after '--min-genes-on-raw'\
  \ filtration; median_n_genes_before, median expressed genes per cell before filtration;\
  \ median_n_umis_before, median UMIs per cell before filtration; median_percent_mito_before,\
  \ median mitochondrial rate per cell before filtration. The channels are sorted\
  \ in ascending order with respect to the number of kept cells per channel. The second\
  \ sheet records genes that failed to pass the filtering. This sheet has 3 columns:\
  \ gene, gene name; n_cells, number of cells this gene is expressed; percent_cells,\
  \ the fraction of cells this gene is expressed. Genes are ranked in ascending order\
  \ according to number of cells the gene is expressed. Note that only genes not expressed\
  \ in any cell are removed from the data. Other filtered genes are marked as non-robust\
  \ and not used for TPM-like normalization.\n  output_name.<group>.filt.gene.pdf\
  \        Optional output. Only exists if '--plot-filtration-results' is set. This\
  \ file contains violin plots contrasting gene count distributions before and after\
  \ filtration per channel per focused <group>.\n  output_name.<group>.filt.UMI.pdf\
  \         Optional output. Only exists if '--plot-filtration-results' is set. This\
  \ file contains violin plots contrasting UMI count distributions before and after\
  \ filtration per channel per focused <group>.\n  output_name.<group>.filt.mito.pdf\
  \        Optional output. Only exists if '--plot-filtration-results' is set. This\
  \ file contains violin plots contrasting mitochondrial rate distributions before\
  \ and after filtration per channel per focused <group>.\n  output_name.<group>.hvf.pdf\
  \              Optional output. Only exists if '--plot-hvf' is set. This file contains\
  \ a scatter plot describing the highly variable gene selection procedure per focused\
  \ <group>.\n  output_name.<group>.<channel>.dbl.png    Optional output. Only exists\
  \ if '--infer-doublets' is set. Each figure consists of 4 panels showing diagnostic\
  \ plots for doublet inference. If there is only one channel in <group>, file name\
  \ becomes output_name.<group>.dbl.png.\n\nExamples:\n  pegasus cluster -p 20 --correct-batch-effect\
  \ --louvain --tsne manton_bm_10x.h5 manton_bm\n  pegasus cluster -p 20 --leiden\
  \ --umap --net-fle example.zarr.zip example_out\n    \n"
generated_using:
- --help
docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
