from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean, Directory, Float

Pegasus_De_Analysis_V0_1_0 = CommandToolBuilder(tool="pegasus_de_analysis", base_command=["pegasus", "de_analysis"], inputs=[ToolInput(tag="in_labels", input_type=String(optional=True), prefix="--labels", doc=InputDocumentation(doc="Use <attr> as cluster labels.")), ToolInput(tag="in_condition", input_type=String(optional=True), prefix="--condition", doc=InputDocumentation(doc="Compute DE between conditions (one vs rest) in each cluster label if specified.")), ToolInput(tag="in_de_key", input_type=String(optional=True), prefix="--de-key", doc=InputDocumentation(doc="Store DE results into varm with key = <key>. [default: de_res]")), ToolInput(tag="in_use_threads_threads", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="Use <threads> threads. [default: 1]")), ToolInput(tag="in_calculate_welchs_ttest", input_type=Boolean(optional=True), prefix="--t", doc=InputDocumentation(doc="Calculate Welch's t-test.")), ToolInput(tag="in_fisher", input_type=Boolean(optional=True), prefix="--fisher", doc=InputDocumentation(doc="Calculate Fisher's exact test.")), ToolInput(tag="in_temp_folder", input_type=Directory(optional=True), prefix="--temp-folder", doc=InputDocumentation(doc="Joblib temporary folder for memmapping numpy arrays.")), ToolInput(tag="in_alpha", input_type=Float(optional=True), prefix="--alpha", doc=InputDocumentation(doc="Control false discovery rate at <alpha>. [default: 0.05]")), ToolInput(tag="in_n_digits", input_type=Float(optional=True), prefix="--ndigits", doc=InputDocumentation(doc="Round non p-values and q-values to <ndigits> after decimal point in the excel. [default: 3]")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Do not show detailed intermediate outputs.")), ToolInput(tag="in_single_cell_data", input_type=String(), position=0, doc=InputDocumentation(doc="Single cell data with clustering calculated. DE results would be written back.")), ToolInput(tag="in_output_spreadsheet_de", input_type=String(), position=1, doc=InputDocumentation(doc="Output spreadsheet with DE results.")), ToolInput(tag="in_de_results_written", input_type=String(), position=0, doc=InputDocumentation(doc="DE results would be written back to the 'varm' field with name set by --de-key <key>.")), ToolInput(tag="in_excel_spreadsheet_containing", input_type=String(), position=1, doc=InputDocumentation(doc="An excel spreadsheet containing DE results. Each cluster has two tabs in the spreadsheet. One is for up-regulated genes and the other is for down-regulated genes. If DE was performed on conditions within each cluster. Each cluster will have number of conditions tabs and each condition tab contains two spreadsheet: up for up-regulated genes and down for down-regulated genes."))], outputs=[], container="quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pegasus_De_Analysis_V0_1_0().translate("wdl")

