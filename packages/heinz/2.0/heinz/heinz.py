from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, String

Heinz_V0_1_0 = CommandToolBuilder(tool="heinz", base_command=["heinz"], inputs=[ToolInput(tag="in_fdr", input_type=Int(optional=True), prefix="-FDR", doc=InputDocumentation(doc="Specifies fdr")), ToolInput(tag="in_specifies_a", input_type=Int(optional=True), prefix="-a", doc=InputDocumentation(doc="Specifies a")), ToolInput(tag="in_edge_list_file", input_type=File(optional=True), prefix="-e", doc=InputDocumentation(doc="Edge list file")), ToolInput(tag="in_enum", input_type=Int(optional=True), prefix="-enum", doc=InputDocumentation(doc="Enumeration mode:\n0 - No enumeration\n1 - No root\n2 - Fix root\n3 - No root per component (default)")), ToolInput(tag="in_formulation_problem_single", input_type=Int(optional=True), prefix="-f", doc=InputDocumentation(doc="Formulation of the problem:\n0 - Single Commodity Flow\n1 - Multi Commodity Flow\n2 - Cut formulation (Flow)\n3 - Cut formulation (Flow-min)\n4 - Cut formulation (Node-separator)\n5 - Cut formulation (Node-separator, BK, default)\n6 - Tree DP\n7 - Tree DP heuristic (fixed_edge)\n8 - Tree DP heuristic (random_edge)\n9 - Tree DP heuristic (uniform_edge)")), ToolInput(tag="in_lambda", input_type=Int(optional=True), prefix="-lambda", doc=InputDocumentation(doc="Specifies lambda")), ToolInput(tag="in_specifies_number_threads", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Specifies number of threads (default: 1)")), ToolInput(tag="in_max_cuts", input_type=Int(optional=True), prefix="-maxCuts", doc=InputDocumentation(doc="Specifies the maximum number of cuts per step\n(only in conjuction with -f 2, optional, default: -1)")), ToolInput(tag="in_node_file", input_type=File(optional=True), prefix="-n", doc=InputDocumentation(doc="Node file")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Output file")), ToolInput(tag="in_enable_preprocessing", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="Enable preprocessing")), ToolInput(tag="in_specifies_root_node", input_type=String(optional=True), prefix="-r", doc=InputDocumentation(doc="Specifies the root node (optional)")), ToolInput(tag="in_stp_node_file", input_type=File(optional=True), prefix="-s", doc=InputDocumentation(doc="STP node file")), ToolInput(tag="in_time_limit_seconds", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="Time limit (in seconds, default: -1)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Specifies the verbosity level:\n0 - No output\n1 - Only necessary output\n2 - More verbose output (default)\n3 - Debug output")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="Show version number\n"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="Output file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Heinz_V0_1_0().translate("wdl", allow_empty_container=True)

