from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, Directory, String

Feelnc_Codpot_Pl_V0_1_0 = CommandToolBuilder(tool="FEELnc_codpot.pl", base_command=["FEELnc_codpot.pl"], inputs=[ToolInput(tag="in_man", input_type=Boolean(optional=True), prefix="--man", doc=InputDocumentation(doc="Open man page")), ToolInput(tag="in_verbosity", input_type=Boolean(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of verbosity")), ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--infile", doc=InputDocumentation(doc="/.fasta           Specify the .GTF or .FASTA file  (such as a cufflinks transcripts/merged .GTF or .FASTA file)")), ToolInput(tag="in_mrna_file", input_type=File(optional=True), prefix="--mRNAfile", doc=InputDocumentation(doc="/.fasta         Specify the annotation .GTF or .FASTA file  (file of protein coding transcripts .GTF or .FASTA file)")), ToolInput(tag="in_genome", input_type=File(optional=True), prefix="--genome", doc=InputDocumentation(doc="Genome file or directory with chr files (mandatory if input is .GTF) [ default undef ]")), ToolInput(tag="in_l_ncrna_file", input_type=File(optional=True), prefix="--lncRNAfile", doc=InputDocumentation(doc="/.fasta       Specify a known set of lncRNA for training .GTF or .FASTA  [ default undef ]")), ToolInput(tag="in_biotype", input_type=Boolean(optional=True), prefix="--biotype", doc=InputDocumentation(doc="Only consider transcripts having this(these) biotype(s) from the reference annotation (e.g : -b transcript_biotype=protein_coding,pseudogene) [default undef i.e all transcripts]")), ToolInput(tag="in_num_tx", input_type=Int(optional=True), prefix="--numtx", doc=InputDocumentation(doc="Number of mRNA and lncRNA transcripts required for the training. mRNAs and lncRNAs numbers need to be separate by a ',': i.e. 1500,1000 for 1500 mRNAs and 1000 lncRNAs. For all the annotation, let it blank [ default undef, all the two annotations ]")), ToolInput(tag="in_rf_cut", input_type=Boolean(optional=True), prefix="--rfcut", doc=InputDocumentation(doc="=[0-1]                      Random forest voting cutoff [ default undef i.e will compute best cutoff ]")), ToolInput(tag="in_speth_res", input_type=Int(optional=True), prefix="--spethres", doc=InputDocumentation(doc="Two specificity threshold based on the 10-fold cross-validation, first one for mRNA and the second for lncRNA, need to be in ]0,1[ on separated by a ','")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc=",2,3,6,9,12                Kmer size list with size separate by ',' as string [ default '1,2,3,6,9,12' ], the maximum value for one size is '15'")), ToolInput(tag="in_out_name", input_type=File(optional=True), prefix="--outname", doc=InputDocumentation(doc="Output filename [ default infile_name ]")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="='feelnc_codpot_out/'         Output directory [ default './feelnc_codpot_out/' ]")), ToolInput(tag="in_mode", input_type=Boolean(optional=True), prefix="--mode", doc=InputDocumentation(doc="The mode of the lncRNA sequences simulation if no lncRNA sequences have been provided. The mode can be:\n'shuffle'   : make a permutation of mRNA sequences while preserving the 7mer count. Can be done on either FASTA and GTF input file;\n'intergenic': extract intergenic sequences. Can be done *only* on GTF input file.")), ToolInput(tag="in_size_inter", input_type=Int(optional=True), prefix="--sizeinter", doc=InputDocumentation(doc="Ratio between mRNA sequence lengths and non coding intergenic region sequence lengths as, by default, ncInter = mRNA * 0.75")), ToolInput(tag="in_learn_orf_type", input_type=Int(optional=True), prefix="--learnorftype", doc=InputDocumentation(doc="Integer [0,1,2,3,4] to specify the type of longest ORF calculate [ default: 3 ] for learning data set.\nIf the CDS is annotated in the .GTF, then the CDS is considered as the longest ORF, whatever the --orftype value.\n'0': ORF with start and stop codon;\n'1': same as '0' and ORF with only a start codon, take the longest;\n'2': same as '1' but with a stop codon;\n'3': same as '0' and ORF with a start or a stop, take the longest (see '1' and '2');\n'4': same as '3' but if no ORF is found, take the input sequence as ORF.")), ToolInput(tag="in_test_orf_type", input_type=Int(optional=True), prefix="--testorftype", doc=InputDocumentation(doc="Integer [0,1,2,3,4] to specify the type of longest ORF calculate [ default: 3 ] for test data set. See --learnortype description for more informations.")), ToolInput(tag="in_n_tree", input_type=Boolean(optional=True), prefix="--ntree", doc=InputDocumentation(doc="Number of trees used in random forest [ default 500 ]")), ToolInput(tag="in_percentage", input_type=Int(optional=True), prefix="--percentage", doc=InputDocumentation(doc="Percentage of the training file use for the training of the kmer model. What remains will be used to train the random forest")), ToolInput(tag="in_keep_tmp", input_type=Int(optional=True), prefix="--keeptmp", doc=InputDocumentation(doc="To keep the temporary files in a 'tmp' directory the outdir, by default don't keep it (0 value). Any other value than 0 will keep the temporary files")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Use to fixe the seed value for the extraction of intergenic DNA region to get lncRNA like sequences and for the random forest [ default 1234 ]")), ToolInput(tag="in_to", input_type=String(optional=True), prefix="-to", doc=InputDocumentation(doc="added")), ToolInput(tag="in_known_l_ncdot_gtf", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_out_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_name", type_hint=File()), doc=OutputDocumentation(doc="Output filename [ default infile_name ]")), ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="='feelnc_codpot_out/'         Output directory [ default './feelnc_codpot_out/' ]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Feelnc_Codpot_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

