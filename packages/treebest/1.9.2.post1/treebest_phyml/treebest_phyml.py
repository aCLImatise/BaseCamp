from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int, File, Float

Treebest_Phyml_V0_1_0 = CommandToolBuilder(tool="treebest_phyml", base_command=["treebest", "phyml"], inputs=[ToolInput(tag="in_build_opt_loglk", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="build | opt | loglk | dist                          [build]")), ToolInput(tag="in_input_nucleotide_alignment", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="the input is a nucleotide alignment")), ToolInput(tag="in_print_out_statistics", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="print out some statistics")), ToolInput(tag="in_mask_lowscoring_segments", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="do not mask low-scoring segments")), ToolInput(tag="in_collapse_alternative_splicing", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="collapse alternative splicing")), ToolInput(tag="in_number_bootstraps_slow", input_type=Int(optional=True), prefix="-b", doc=InputDocumentation(doc="number of bootstraps (slow)                             [0]")), ToolInput(tag="in_write_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="write output to file                               [stdout]")), ToolInput(tag="in_quality_cutoff_", input_type=Int(optional=True), prefix="-F", doc=InputDocumentation(doc="quality cut-off                                        [15]")), ToolInput(tag="in_jc_kp_f", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="nt: JC69 | K2P | F81 | HKY | F84 | TN93 | GTR         [HKY]\naa: JTT | MtREV | Dayhoff | WAG                       [WAG]")), ToolInput(tag="in_number_relative_substitution", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="number of relative substitution rate categories         [1]")), ToolInput(tag="in_transversiontransition_ratio_estimatinig", input_type=Float(optional=True), prefix="-k", doc=InputDocumentation(doc="|e  transversion/transition ratio, 'e' for estimatinig      [e]")), ToolInput(tag="in_alpha_parameter_gamma", input_type=Float(optional=True), prefix="-a", doc=InputDocumentation(doc="|e  alpha parameter for Gamma distribution                [1.0]")), ToolInput(tag="in_proportion_invariable_sites", input_type=Float(optional=True), prefix="-i", doc=InputDocumentation(doc="|e  proportion of invariable sites                          [0]")), ToolInput(tag="in_use_species_tree", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="use a species tree to guide tree building")), ToolInput(tag="in_species_tree_", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="species tree                         [TreeFam species tree]")), ToolInput(tag="in_duplication_probability_", input_type=Float(optional=True), prefix="-d", doc=InputDocumentation(doc="duplication probability                              [0.15]")), ToolInput(tag="in_probability_loss_speciation", input_type=Float(optional=True), prefix="-l", doc=InputDocumentation(doc="probability of a loss following a speciation         [0.10]")), ToolInput(tag="in_probability_loss_duplication", input_type=Float(optional=True), prefix="-L", doc=InputDocumentation(doc="probability of a loss following a duplication        [0.20]")), ToolInput(tag="in_constraining_tree_", input_type=File(optional=True), prefix="-C", doc=InputDocumentation(doc="constraining tree                                    [NULL]")), ToolInput(tag="in_prob_presence_inconsistent", input_type=Float(optional=True), prefix="-p", doc=InputDocumentation(doc="prob. of the presence of an inconsistent branch      [0.01]")), ToolInput(tag="in_alignment", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_tree", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_write_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_write_output_file", type_hint=File()), doc=OutputDocumentation(doc="write output to file                               [stdout]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Treebest_Phyml_V0_1_0().translate("wdl", allow_empty_container=True)

