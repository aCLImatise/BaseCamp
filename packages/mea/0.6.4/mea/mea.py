from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, Int, String, Boolean

Mea_V0_1_0 = CommandToolBuilder(tool="mea", base_command=["mea"], inputs=[ToolInput(tag="in_alpha", input_type=Float(optional=True), prefix="--alpha", doc=InputDocumentation(doc="slope of base pair distance penalty\n(default=`0.012')")), ToolInput(tag="in_beta", input_type=Int(optional=True), prefix="--beta", doc=InputDocumentation(doc="turning point of base pair distance penalty\n(default=`315')")), ToolInput(tag="in_gamma", input_type=Float(optional=True), prefix="--gamma", doc=InputDocumentation(doc="base pair weight factor  (default=`0.5')")), ToolInput(tag="in_delta", input_type=Float(optional=True), prefix="--delta", doc=InputDocumentation(doc="minimum penalty factor for base pairs\n(default=`0.003')")), ToolInput(tag="in_plot_penalty", input_type=Int(optional=True), prefix="--plot-penalty", doc=InputDocumentation(doc="print penalty values between 4 and given value; don't")), ToolInput(tag="in_structure", input_type=String(optional=True), prefix="--structure", doc=InputDocumentation(doc="Structure (dot-bracket); if given, compare to\nreference only")), ToolInput(tag="in_no_slide_rule", input_type=Boolean(optional=True), prefix="--no-slide-rule", doc=InputDocumentation(doc="Use slide rule [default: use slide rule]")), ToolInput(tag="in_no_conflict_rule", input_type=Boolean(optional=True), prefix="--no-conflict-rule", doc=InputDocumentation(doc="Use conflict rule [default: use conflict rule]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Turn on verbose output")), ToolInput(tag="in_fold", input_type=String(), position=0, doc=InputDocumentation(doc="-r, --reference=STRING  Reference structure (dot-bracket)")), ToolInput(tag="in_tp", input_type=String(), position=0, doc=InputDocumentation(doc="= # true positives")), ToolInput(tag="in_fp", input_type=String(), position=1, doc=InputDocumentation(doc="= # false positives")), ToolInput(tag="in_fn", input_type=String(), position=2, doc=InputDocumentation(doc="= # false negatives")), ToolInput(tag="in_tn", input_type=String(), position=3, doc=InputDocumentation(doc="= # true negatives")), ToolInput(tag="in_ppv", input_type=String(), position=0, doc=InputDocumentation(doc="= TP/(TP+FP) 'Positive Predictive Value'")), ToolInput(tag="in_fone", input_type=Int(), position=1, doc=InputDocumentation(doc="= PPV*SENS / (PPV+SENS), if PPV+SENS!=0; 0, otherwise   'F1-score'")), ToolInput(tag="in_mcc", input_type=String(), position=2, doc=InputDocumentation(doc="= (TP*TN - FP*FN) / sqrt( (TP+FP)*(TP+FN)*(TN+FP)*(TN+FN) )\n'Mathews correlation coefficient'"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mea_V0_1_0().translate("wdl", allow_empty_container=True)

