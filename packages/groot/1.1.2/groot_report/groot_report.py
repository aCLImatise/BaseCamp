from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Boolean, Directory, Int

Groot_Report_V0_1_0 = CommandToolBuilder(tool="groot_report", base_command=["groot", "report"], inputs=[ToolInput(tag="in_bam_file", input_type=File(optional=True), prefix="--bamFile", doc=InputDocumentation(doc="BAM file generated by groot alignment (will use STDIN if not provided)")), ToolInput(tag="in_cov_cut_off", input_type=Float(optional=True), prefix="--covCutoff", doc=InputDocumentation(doc="coverage cutoff for reporting ARGs (default 0.97)")), ToolInput(tag="in_low_cov", input_type=Boolean(optional=True), prefix="--lowCov", doc=InputDocumentation(doc="reports ARGs which don't have 5' or 3' coverage (overrides -c option)")), ToolInput(tag="in_index_dir", input_type=Directory(optional=True), prefix="--indexDir", doc=InputDocumentation(doc="directory for to write/read the GROOT index files")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="filename for log file (default 'groot.log')")), ToolInput(tag="in_processors", input_type=Int(optional=True), prefix="--processors", doc=InputDocumentation(doc="number of processors to use (default 1)")), ToolInput(tag="in_profiling", input_type=Boolean(optional=True), prefix="--profiling", doc=InputDocumentation(doc="create the files needed to profile GROOT using the go tool pprof"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Groot_Report_V0_1_0().translate("wdl", allow_empty_container=True)

