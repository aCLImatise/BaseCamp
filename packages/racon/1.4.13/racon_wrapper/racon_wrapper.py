from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, Float, String

Racon_Wrapper_V0_1_0 = CommandToolBuilder(tool="racon_wrapper", base_command=["racon_wrapper"], inputs=[ToolInput(tag="in_split", input_type=Int(optional=True), prefix="--split", doc=InputDocumentation(doc="split target sequences into chunks of desired size in\nbytes (default: None)")), ToolInput(tag="in_subsample", input_type=Int(optional=True), prefix="--subsample", doc=InputDocumentation(doc="SUBSAMPLE\nsubsample sequences to desired coverage (2nd argument)\ngiven the reference length (1st argument) (default:\nNone)")), ToolInput(tag="in_include_unpolished", input_type=Boolean(optional=True), prefix="--include-unpolished", doc=InputDocumentation(doc="output unpolished target sequences (default: False)")), ToolInput(tag="in_fragment_correction", input_type=Boolean(optional=True), prefix="--fragment-correction", doc=InputDocumentation(doc="perform fragment correction instead of contig\npolishing (overlaps file should contain dual/self\noverlaps!) (default: False)")), ToolInput(tag="in_window_length", input_type=Int(optional=True), prefix="--window-length", doc=InputDocumentation(doc="size of window on which POA is performed (default:\n500)")), ToolInput(tag="in_quality_threshold", input_type=Float(optional=True), prefix="--quality-threshold", doc=InputDocumentation(doc="threshold for average base quality of windows used in\nPOA (default: 10.0)")), ToolInput(tag="in_error_threshold", input_type=Float(optional=True), prefix="--error-threshold", doc=InputDocumentation(doc="maximum allowed error rate used for filtering overlaps\n(default: 0.3)")), ToolInput(tag="in_match", input_type=Int(optional=True), prefix="--match", doc=InputDocumentation(doc="score for matching bases (default: 5)")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="--mismatch", doc=InputDocumentation(doc="score for mismatching bases (default: -4)")), ToolInput(tag="in_gap", input_type=Int(optional=True), prefix="--gap", doc=InputDocumentation(doc="gap penalty (must be negative) (default: -8)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="number of threads (default: 1)")), ToolInput(tag="in_cuda_aligner_batches", input_type=Int(optional=True), prefix="--cudaaligner-batches", doc=InputDocumentation(doc="number of batches for CUDA accelerated alignment\n(default: 0)")), ToolInput(tag="in_cuda_poa_batches", input_type=Int(optional=True), prefix="--cudapoa-batches", doc=InputDocumentation(doc="number of batches for CUDA accelerated polishing\n(default: 0)")), ToolInput(tag="in_cuda_banded_alignment", input_type=Boolean(optional=True), prefix="--cuda-banded-alignment", doc=InputDocumentation(doc="use banding approximation for polishing on GPU. Only\napplicable when -c is used. (default: False)\n")), ToolInput(tag="in_sequences", input_type=String(), position=0, doc=InputDocumentation(doc="input file in FASTA/FASTQ format (can be compressed\nwith gzip) containing sequences used for correction")), ToolInput(tag="in_overlaps", input_type=String(), position=1, doc=InputDocumentation(doc="input file in MHAP/PAF/SAM format (can be compressed\nwith gzip) containing overlaps between sequences and\ntarget sequences")), ToolInput(tag="in_target_sequences", input_type=String(), position=2, doc=InputDocumentation(doc="input file in FASTA/FASTQ format (can be compressed\nwith gzip) containing sequences which will be\ncorrected"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Racon_Wrapper_V0_1_0().translate("wdl", allow_empty_container=True)

