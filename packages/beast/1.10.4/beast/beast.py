from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Float, Directory

Beast_V0_1_0 = CommandToolBuilder(tool="beast", base_command=["beast"], inputs=[ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="-verbose", doc=InputDocumentation(doc="verbose XML parsing messages")), ToolInput(tag="in_warnings", input_type=File(optional=True), prefix="-warnings", doc=InputDocumentation(doc="warning messages about BEAST XML file")), ToolInput(tag="in_strict", input_type=File(optional=True), prefix="-strict", doc=InputDocumentation(doc="on non-conforming BEAST XML file")), ToolInput(tag="in_window", input_type=String(optional=True), prefix="-window", doc=InputDocumentation(doc="a console window")), ToolInput(tag="in_options", input_type=String(optional=True), prefix="-options", doc=InputDocumentation(doc="an options dialog")), ToolInput(tag="in_working", input_type=File(optional=True), prefix="-working", doc=InputDocumentation(doc="working directory to input file's directory")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="-seed", doc=InputDocumentation(doc="a random number generator seed")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="-prefix", doc=InputDocumentation(doc="a prefix for all output log filenames")), ToolInput(tag="in_overwrite", input_type=String(optional=True), prefix="-overwrite", doc=InputDocumentation(doc="overwriting of log files")), ToolInput(tag="in_errors", input_type=Int(optional=True), prefix="-errors", doc=InputDocumentation(doc="maximum number of numerical errors before stopping")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="number of computational threads to use (default auto)")), ToolInput(tag="in_java", input_type=String(optional=True), prefix="-java", doc=InputDocumentation(doc="Java only, no native implementations")), ToolInput(tag="in_tests", input_type=Int(optional=True), prefix="-tests", doc=InputDocumentation(doc="number of full evaluation tests to perform (default 1000)")), ToolInput(tag="in_threshold", input_type=Float(optional=True), prefix="-threshold", doc=InputDocumentation(doc="evaluation test threshold (default 0.1)")), ToolInput(tag="in_adaptation_off", input_type=String(optional=True), prefix="-adaptation_off", doc=InputDocumentation(doc="'t adapt operator sizes")), ToolInput(tag="in_adaptation_target", input_type=Float(optional=True), prefix="-adaptation_target", doc=InputDocumentation(doc="acceptance rate for adaptive operators (default 0.234)")), ToolInput(tag="in_beagle", input_type=String(optional=True), prefix="-beagle", doc=InputDocumentation(doc="BEAGLE library if available (default on)")), ToolInput(tag="in_beagle_auto", input_type=String(optional=True), prefix="-beagle_auto", doc=InputDocumentation(doc=": automatically select fastest resource for analysis")), ToolInput(tag="in_beagle_info", input_type=String(optional=True), prefix="-beagle_info", doc=InputDocumentation(doc=": show information on available resources")), ToolInput(tag="in_beagle_order", input_type=String(optional=True), prefix="-beagle_order", doc=InputDocumentation(doc=": set order of resource use")), ToolInput(tag="in_beagle_instances", input_type=String(optional=True), prefix="-beagle_instances", doc=InputDocumentation(doc=": divide site patterns amongst instances")), ToolInput(tag="in_beagle_multi_partition", input_type=String(optional=True), prefix="-beagle_multipartition", doc=InputDocumentation(doc=": use multipartition extensions if available (default auto)")), ToolInput(tag="in_beagle_cpu", input_type=String(optional=True), prefix="-beagle_CPU", doc=InputDocumentation(doc=": use CPU instance")), ToolInput(tag="in_beagle_gpu", input_type=String(optional=True), prefix="-beagle_GPU", doc=InputDocumentation(doc=": use GPU instance if available")), ToolInput(tag="in_beagle_sse", input_type=String(optional=True), prefix="-beagle_SSE", doc=InputDocumentation(doc=": use SSE extensions if available")), ToolInput(tag="in_beagle_sse_off", input_type=String(optional=True), prefix="-beagle_SSE_off", doc=InputDocumentation(doc=": turn off use of SSE extensions")), ToolInput(tag="in_beagle_threading_off", input_type=String(optional=True), prefix="-beagle_threading_off", doc=InputDocumentation(doc=": turn off auto threading for a CPU instance")), ToolInput(tag="in_beagle_thread_count", input_type=Int(optional=True), prefix="-beagle_thread_count", doc=InputDocumentation(doc=": manually set number of threads for a CPU instance")), ToolInput(tag="in_beagle_cuda", input_type=String(optional=True), prefix="-beagle_cuda", doc=InputDocumentation(doc=": use CUDA parallization if available")), ToolInput(tag="in_beagle_open_cl", input_type=String(optional=True), prefix="-beagle_opencl", doc=InputDocumentation(doc=": use OpenCL parallization if available")), ToolInput(tag="in_beagle_single", input_type=String(optional=True), prefix="-beagle_single", doc=InputDocumentation(doc=": use single precision if available")), ToolInput(tag="in_beagle_double", input_type=String(optional=True), prefix="-beagle_double", doc=InputDocumentation(doc=": use double precision if available")), ToolInput(tag="in_beagle_async", input_type=String(optional=True), prefix="-beagle_async", doc=InputDocumentation(doc=": use asynchronous kernels if available")), ToolInput(tag="in_beagle_scaling", input_type=String(optional=True), prefix="-beagle_scaling", doc=InputDocumentation(doc=": specify scaling scheme to use")), ToolInput(tag="in_beagle_delay_scaling_off", input_type=String(optional=True), prefix="-beagle_delay_scaling_off", doc=InputDocumentation(doc=": don't wait until underflow for scaling option")), ToolInput(tag="in_beagle_rescale", input_type=String(optional=True), prefix="-beagle_rescale", doc=InputDocumentation(doc=": frequency of rescaling (dynamic scaling only)")), ToolInput(tag="in_mpi", input_type=String(optional=True), prefix="-mpi", doc=InputDocumentation(doc="MPI rank to label output")), ToolInput(tag="in_particles", input_type=Directory(optional=True), prefix="-particles", doc=InputDocumentation(doc="a folder of particle start states")), ToolInput(tag="in_mc_three_chains", input_type=Int(optional=True), prefix="-mc3_chains", doc=InputDocumentation(doc="of chains")), ToolInput(tag="in_mc_three_delta", input_type=Int(optional=True), prefix="-mc3_delta", doc=InputDocumentation(doc="increment parameter")), ToolInput(tag="in_mc_three_temperatures", input_type=Int(optional=True), prefix="-mc3_temperatures", doc=InputDocumentation(doc="comma-separated list of the hot chain temperatures")), ToolInput(tag="in_mc_three_swap", input_type=Int(optional=True), prefix="-mc3_swap", doc=InputDocumentation(doc="at which chains temperatures will be swapped")), ToolInput(tag="in_load_state", input_type=File(optional=True), prefix="-load_state", doc=InputDocumentation(doc="a filename to load a saved state from")), ToolInput(tag="in_save_stem", input_type=String(optional=True), prefix="-save_stem", doc=InputDocumentation(doc="a stem for the filenames to save states to")), ToolInput(tag="in_save_at", input_type=File(optional=True), prefix="-save_at", doc=InputDocumentation(doc="a state at which to save a state file")), ToolInput(tag="in_save_every", input_type=File(optional=True), prefix="-save_every", doc=InputDocumentation(doc="a frequency to save the state file")), ToolInput(tag="in_save_state", input_type=File(optional=True), prefix="-save_state", doc=InputDocumentation(doc="a filename to save state to")), ToolInput(tag="in_force_resume", input_type=String(optional=True), prefix="-force_resume", doc=InputDocumentation(doc="resuming from a saved state")), ToolInput(tag="in_citations_file", input_type=File(optional=True), prefix="-citations_file", doc=InputDocumentation(doc="a filename to write a citation list to")), ToolInput(tag="in_version", input_type=String(optional=True), prefix="-version", doc=InputDocumentation(doc="the version and credits and stop")), ToolInput(tag="in_input_file_name", input_type=File(optional=True), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Beast_V0_1_0().translate("wdl", allow_empty_container=True)

