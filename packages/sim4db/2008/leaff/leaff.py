from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int, Float

Leaff_V0_1_0 = CommandToolBuilder(tool="leaff", base_command=["leaff"], inputs=[ToolInput(tag="in_use_sequence_f", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc=":     use sequence in 'file' (-F is also allowed for historical reasons)")), ToolInput(tag="in__read_actions", input_type=File(optional=True), prefix="-A", doc=InputDocumentation(doc=":     read actions from 'file'")), ToolInput(tag="in_print_number_sequences", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc=":          print the number of sequences in the fasta")), ToolInput(tag="in_print_index_labelling", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc=":     print an index, labelling the source 'name'")), ToolInput(tag="in_insert_newline_lettersif", input_type=Boolean(optional=True), prefix="-6", doc=InputDocumentation(doc="<#>:      insert a newline every 60 letters\n(if the next arg is a number, newlines are inserted every\nn letters, e.g., -6 80.  Disable line breaks with -6 0,\nor just don't use -6!)")), ToolInput(tag="in_end_print_bases", input_type=String(optional=True), prefix="-e", doc=InputDocumentation(doc="end:  Print only the bases from position 'beg' to position 'end'\n(space based, relative to the FORWARD sequence!)  If\nbeg == end, then the entire sequence is printed.  It is an\nerror to specify beg > end, or beg > len, or end > len.")), ToolInput(tag="in_ends", input_type=Int(optional=True), prefix="-ends", doc=InputDocumentation(doc="Print n bases from each end of the sequence.  One input\nsequence generates two output sequences, with '_5' or '_3'\nappended to the ID.  If 2n >= length of the sequence, the\nsequence itself is printed, no ends are extracted (they\noverlap).")), ToolInput(tag="in__complement_sequences", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc=":          complement the sequences")), ToolInput(tag="in_dont_print_defline", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc=":          DON'T print the defline")), ToolInput(tag="in__reverse_sequences", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc=":          reverse the sequences")), ToolInput(tag="in__uppercase_bases", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc=":          uppercase all bases")), ToolInput(tag="in_s_l_print", input_type=Int(optional=True), prefix="-G", doc=InputDocumentation(doc="s l:    print n randomly generated sequences, 0 < s <= length <= l")), ToolInput(tag="in_l_print_sequences_s", input_type=Int(optional=True), prefix="-L", doc=InputDocumentation(doc="l:      print all sequences such that s <= length < l")), ToolInput(tag="in_print_sequences_composition", input_type=Float(optional=True), prefix="-N", doc=InputDocumentation(doc="h:      print all sequences such that l <= % N composition < h\n(NOTE 0.0 <= l < h < 100.0)\n(NOTE that you cannot print sequences with 100% N\nThis is a useful bug).")), ToolInput(tag="in_print_sequences_seqid", input_type=File(optional=True), prefix="-q", doc=InputDocumentation(doc=":     print sequences from the seqid list in 'file'")), ToolInput(tag="in_print_randomly_picked", input_type=Int(optional=True), prefix="-r", doc=InputDocumentation(doc=":      print 'num' randomly picked sequences")), ToolInput(tag="in_print_single_sequence", input_type=String(optional=True), prefix="-s", doc=InputDocumentation(doc=":    print the single sequence 'seqid'")), ToolInput(tag="in_l_print_sequences_inclusive", input_type=String(optional=True), prefix="-S", doc=InputDocumentation(doc="l:      print all the sequences from ID 'f' to 'l' (inclusive)")), ToolInput(tag="in_print_sequences_do", input_type=Boolean(optional=True), prefix="-W", doc=InputDocumentation(doc=":          print all sequences (do the whole file)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Leaff_V0_1_0().translate("wdl", allow_empty_container=True)

