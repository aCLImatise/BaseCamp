from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Sim4Db_V0_1_0 = CommandToolBuilder(tool="sim4db", base_command=["sim4db"], inputs=[ToolInput(tag="in_print_status_stderr", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="print status to stderr while running")), ToolInput(tag="in_print_script_lines_stderr", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="print script lines (stderr) as they are processed")), ToolInput(tag="in_yn", input_type=Boolean(optional=True), prefix="-YN", doc=InputDocumentation(doc="print script lines (to given file) as they are processed, annotated with yes/no")), ToolInput(tag="in_cdna", input_type=Boolean(optional=True), prefix="-cdna", doc=InputDocumentation(doc="use these cDNA sequences")), ToolInput(tag="in_genomic", input_type=Boolean(optional=True), prefix="-genomic", doc=InputDocumentation(doc="use these genomic sequences")), ToolInput(tag="in_script", input_type=Boolean(optional=True), prefix="-script", doc=InputDocumentation(doc="use this script file")), ToolInput(tag="in_pairwise", input_type=Boolean(optional=True), prefix="-pairwise", doc=InputDocumentation(doc="do pairs of sequences")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="-output", doc=InputDocumentation(doc="write output to this file")), ToolInput(tag="in_touch", input_type=Boolean(optional=True), prefix="-touch", doc=InputDocumentation(doc="create this file when the program finishes execution")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="-threads", doc=InputDocumentation(doc="Use n threads.")), ToolInput(tag="in_min_coverage", input_type=Boolean(optional=True), prefix="-mincoverage", doc=InputDocumentation(doc="iteratively find all exon models with the specified\nminimum PERCENT COVERAGE")), ToolInput(tag="in_min_identity", input_type=Boolean(optional=True), prefix="-minidentity", doc=InputDocumentation(doc="iteratively find all exon models with the specified\nminimum PERCENT EXON IDENTITY")), ToolInput(tag="in_minlength", input_type=Boolean(optional=True), prefix="-minlength", doc=InputDocumentation(doc="iteratively find all exon models with the specified\nminimum ABSOLUTE COVERAGE (number of bp matched)")), ToolInput(tag="in_always_report", input_type=Int(optional=True), prefix="-alwaysreport", doc=InputDocumentation(doc="report <number> exon models, even if they\nare below the quality thresholds\nIf no mincoverage or minidentity or minlength is given, only\nthe best exon model is returned.\nYou will probably want to specify ALL THREE of mincoverage,\nminidentity and minlength!  Don't assume the default values\nare what you want!\nYou will DEFINITELY want to specify at least one of mincoverage,\nminidentity and minlength with alwaysreport!  If you don't, mincoverage\nwill be set to 90 and minidentity to 95 -- to reduce the number of\nspurious matches when a good match is found.")), ToolInput(tag="in_no_def_lines", input_type=Boolean(optional=True), prefix="-nodeflines", doc=InputDocumentation(doc="don't include the defline in the output")), ToolInput(tag="in_alignments", input_type=Boolean(optional=True), prefix="-alignments", doc=InputDocumentation(doc="print alignments")), ToolInput(tag="in_poly_tails", input_type=Boolean(optional=True), prefix="-polytails", doc=InputDocumentation(doc="DON'T mask poly-A and poly-T tails.")), ToolInput(tag="in_cut", input_type=Boolean(optional=True), prefix="-cut", doc=InputDocumentation(doc="Trim marginal exons if A/T % > x (poly-AT tails)")), ToolInput(tag="in_noncanonical", input_type=String(optional=True), prefix="-noncanonical", doc=InputDocumentation(doc="'t force canonical splice sites")), ToolInput(tag="in_splice_model", input_type=Boolean(optional=True), prefix="-splicemodel", doc=InputDocumentation(doc="Use the following splice model: 0 - original sim4;\n1 - GeneSplicer; 2 - Glimmer (default: 0)")), ToolInput(tag="in_force_strand", input_type=Boolean(optional=True), prefix="-forcestrand", doc=InputDocumentation(doc="Force the strand prediction to always be\n'forward' or 'reverse'")), ToolInput(tag="in_interspecies", input_type=Int(optional=True), prefix="-interspecies", doc=InputDocumentation(doc="sim4cc for inter-species alignments")), ToolInput(tag="in_set_spaced_pattern", input_type=Boolean(optional=True), prefix="-Z", doc=InputDocumentation(doc="set the (spaced) seed pattern")), ToolInput(tag="in_set_relink_factor", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="set the relink weight factor")), ToolInput(tag="in_set_first_threshold", input_type=Boolean(optional=True), prefix="-K", doc=InputDocumentation(doc="set the first MSP threshold")), ToolInput(tag="in_set_second_threshold", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="set the second MSP threshold")), ToolInput(tag="in_ma", input_type=Boolean(optional=True), prefix="-Ma", doc=InputDocumentation(doc="set the limit of the number of MSPs allowed")), ToolInput(tag="in_mp", input_type=Boolean(optional=True), prefix="-Mp", doc=InputDocumentation(doc="same, as percentage of bases in cDNA\nNOTE:  If used, both -Ma and -Mp must be specified!\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="write output to this file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sim4Db_V0_1_0().translate("wdl", allow_empty_container=True)

