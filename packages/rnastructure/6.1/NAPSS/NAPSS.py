from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Napss_V0_1_0 = CommandToolBuilder(tool="NAPSS", base_command=["NAPSS"], inputs=[ToolInput(tag="in_pseudoknot_free", input_type=Boolean(optional=True), prefix="--pseudoknotFree", doc=InputDocumentation(doc="Specify pseudoknot-free prediction mode.\nDefault is to predict pseudoknots.")), ToolInput(tag="in_constraint", input_type=Boolean(optional=True), prefix="--constraint", doc=InputDocumentation(doc="Specify a constraints file to be applied.\nDefault is to have no constraints applied.")), ToolInput(tag="in_dot_percent", input_type=Boolean(optional=True), prefix="--DotPercent", doc=InputDocumentation(doc="Specify a maximum percent energy difference to consider in the dotplot.\nDefault is 5 percent.")), ToolInput(tag="in_maximum", input_type=Boolean(optional=True), prefix="--maximum", doc=InputDocumentation(doc="Specify a maximum number of structures per matched constraint set.\nDefault is 100 structures.")), ToolInput(tag="in_percent", input_type=Boolean(optional=True), prefix="--percent", doc=InputDocumentation(doc="Specify a maximum percent energy difference.\nDefault is 0 which means that all structures are outputted.")), ToolInput(tag="in_penalty_one", input_type=Boolean(optional=True), prefix="--Penalty1", doc=InputDocumentation(doc="Specify a pseudoknot penalty P1.\nDefault is 0.35 kcal/mol.")), ToolInput(tag="in_penalty_two", input_type=Boolean(optional=True), prefix="--Penalty2", doc=InputDocumentation(doc="Specify a pseudoknot penalty P2.\nDefault is 0.65 kcal/mol.")), ToolInput(tag="in_pos_paired", input_type=File(optional=True), prefix="--posPaired", doc=InputDocumentation(doc="Specify the name of the positions paired style output file.\nDefault is to have no file specified.")), ToolInput(tag="in_shape", input_type=Boolean(optional=True), prefix="--SHAPE", doc=InputDocumentation(doc="Specify a SHAPE data file to be used to generate pseudoenergy restraints.")), ToolInput(tag="in_shape_intercept", input_type=Boolean(optional=True), prefix="--SHAPEintercept", doc=InputDocumentation(doc="Specify an intercept used with SHAPE constraints.\nDefault is -0.60 kcal/mol.")), ToolInput(tag="in_shape_slope", input_type=Boolean(optional=True), prefix="--SHAPEslope", doc=InputDocumentation(doc="Specify a slope used with SHAPE constraints.\nDefault is 1.80 kcal/mol.")), ToolInput(tag="in_window", input_type=Boolean(optional=True), prefix="--window", doc=InputDocumentation(doc="Specify a window size.\nDefault is 0 nucleotides.\n")), ToolInput(tag="in_seq_file", input_type=File(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_nmr_file", input_type=File(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_ct_file", input_type=File(), position=2, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_pos_paired", output_type=File(optional=True), selector=InputSelector(input_to_select="in_pos_paired", type_hint=File()), doc=OutputDocumentation(doc="Specify the name of the positions paired style output file.\nDefault is to have no file specified."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Napss_V0_1_0().translate("wdl", allow_empty_container=True)

