from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Float, File, Boolean, String

Simsearch_V0_1_0 = CommandToolBuilder(tool="simsearch", base_command=["simsearch"], inputs=[ToolInput(tag="in_k_nearest", input_type=Int(optional=True), prefix="--k-nearest", doc=InputDocumentation(doc="select the k nearest neighbors (use 'all' for all\nneighbors)")), ToolInput(tag="in_threshold", input_type=Float(optional=True), prefix="--threshold", doc=InputDocumentation(doc="minimum similarity score threshold")), ToolInput(tag="in_queries", input_type=File(optional=True), prefix="--queries", doc=InputDocumentation(doc="filename containing the query fingerprints")), ToolInput(tag="in_nxn", input_type=Boolean(optional=True), prefix="--NxN", doc=InputDocumentation(doc="use the targets as the queries, and exclude the self-\nsimilarity term")), ToolInput(tag="in_query", input_type=String(optional=True), prefix="--query", doc=InputDocumentation(doc="query as a structure record (default format: 'smi')")), ToolInput(tag="in_hex_query", input_type=String(optional=True), prefix="--hex-query", doc=InputDocumentation(doc="query in hex")), ToolInput(tag="in_query_id", input_type=Int(optional=True), prefix="--query-id", doc=InputDocumentation(doc="id for the query or hex-query (default: 'Query1'")), ToolInput(tag="in_query_structures", input_type=File(optional=True), prefix="--query-structures", doc=InputDocumentation(doc="read strutures")), ToolInput(tag="in_query_format", input_type=File(optional=True), prefix="--query-format", doc=InputDocumentation(doc="input query format (default uses the file extension,\nelse 'fps' for --queries and 'smi' for query\nstructures)")), ToolInput(tag="in_target_format", input_type=File(optional=True), prefix="--target-format", doc=InputDocumentation(doc="input target format (default uses the file extension,\nelse 'fps')")), ToolInput(tag="in_id_tag", input_type=File(optional=True), prefix="--id-tag", doc=InputDocumentation(doc="tag containing the record id if --query-structures is\nan SD file)")), ToolInput(tag="in_errors", input_type=String(optional=True), prefix="--errors", doc=InputDocumentation(doc="how should structure parse errors be handled?\n(default=ignore)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output filename (default is stdout)")), ToolInput(tag="in_count", input_type=Boolean(optional=True), prefix="--count", doc=InputDocumentation(doc="report counts")), ToolInput(tag="in_batch_size", input_type=Int(optional=True), prefix="--batch-size", doc=InputDocumentation(doc="batch size")), ToolInput(tag="in_scan", input_type=Boolean(optional=True), prefix="--scan", doc=InputDocumentation(doc="scan the file to find matches (low memory overhead)")), ToolInput(tag="in_memory", input_type=Boolean(optional=True), prefix="--memory", doc=InputDocumentation(doc="build and search an in-memory data structure (faster\nfor multiple queries)")), ToolInput(tag="in_times", input_type=Boolean(optional=True), prefix="--times", doc=InputDocumentation(doc="report load and execution times to stderr"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output filename (default is stdout)"))], container="quay.io/biocontainers/chemfp:1.6.1--py27h3dcb392_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Simsearch_V0_1_0().translate("wdl")

