from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Mdasim_V0_1_0 = CommandToolBuilder(tool="mdasim", base_command=["mdasim"], inputs=[ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="--log", doc=InputDocumentation(doc="= file name for a log file of all single nucleotide errors that happen during amplification")), ToolInput(tag="in_mutation_rate", input_type=Boolean(optional=True), prefix="--mutationrate", doc=InputDocumentation(doc="= chance of a nucleotide substitution")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="extended verbose for debug mode")), ToolInput(tag="in_input", input_type=Boolean(optional=True), prefix="--input", doc=InputDocumentation(doc="= file name of reference DNA sequence (default: reference.fasta)")), ToolInput(tag="in_output", input_type=Boolean(optional=True), prefix="--output", doc=InputDocumentation(doc="= output files prefix , `Amplicons.fasta` will be appended to the prefix (default: out)")), ToolInput(tag="in_output_fragments", input_type=Boolean(optional=True), prefix="--outputfragments", doc=InputDocumentation(doc="writes the lists of fragments and primer positions at the end of simulation in two txt files suffixed by Fragments.txt and PrimerPositions.txt")), ToolInput(tag="in_primers", input_type=Boolean(optional=True), prefix="--primers", doc=InputDocumentation(doc="= file name of input primers in fasta format (default: primerList.fasta)")), ToolInput(tag="in_primer_no", input_type=Boolean(optional=True), prefix="--primerNo", doc=InputDocumentation(doc="= average number of initial available primers (default: input reference length * coverage / frgLngth * 1000)")), ToolInput(tag="in_frg_lng_th", input_type=Boolean(optional=True), prefix="--frgLngth", doc=InputDocumentation(doc="= average number of synthesized bases per phi29 (default: 70,000 nt; synthesized bases per phi29 has uniform distribution; variance = frgLngth^2 / 1200)")), ToolInput(tag="in_coverage", input_type=Boolean(optional=True), prefix="--coverage", doc=InputDocumentation(doc="= expected average coverage (default: 1000)")), ToolInput(tag="in_step_size", input_type=Boolean(optional=True), prefix="--stepSize", doc=InputDocumentation(doc="= number of synthesized bases per phi29 in each step (default: 10000)")), ToolInput(tag="in_alpha", input_type=Boolean(optional=True), prefix="--alpha", doc=InputDocumentation(doc="= normalized number of primers attached in each step (default: 0.5e-11)")), ToolInput(tag="in_attach_num", input_type=Boolean(optional=True), prefix="--attachNum", doc=InputDocumentation(doc="= number of primers attached per single strand of reference sequence in the first step. It can be any positive number. (overrides -A; alpha = attachNum / (input reference length * primerNo))")), ToolInput(tag="in_read_length", input_type=Boolean(optional=True), prefix="--readLength", doc=InputDocumentation(doc="= minimum length of output amplicons (default: 10)")), ToolInput(tag="in_single", input_type=Boolean(optional=True), prefix="--single", doc=InputDocumentation(doc="Input reference is amplified as a single strand sequence")), ToolInput(tag="in_optional", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_args", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mdasim_V0_1_0().translate("wdl", allow_empty_container=True)

