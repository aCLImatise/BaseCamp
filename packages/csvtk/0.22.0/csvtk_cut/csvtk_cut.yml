!Command
command:
- csvtk
- cut
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -f
  - --fields
  description: select only these fields. type "csvtk cut -h" for examples
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -F
  - --fuzzy-fields
  description: using fuzzy fields, e.g., -F -f "*name" or -F -f "id123*"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -i
  - --ignore-case
  description: ignore case (column name)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -u
  - --uniq-column
  description: deduplicate columns matched by multiple fuzzy column names
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -c
  - --chunk-size
  description: chunk size of CSV reader (default 50)
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -C
  - --comment-char
  description: lines starting with commment-character will be ignored. if your header
    row starts with '#', please assign "-C" another rare symbol, e.g. '$' (default
    "#")
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -d
  - --delimiter
  description: delimiting character of the input CSV file (default ",")
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -E
  - --ignore-empty-row
  description: ignore empty rows
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -I
  - --ignore-illegal-row
  description: ignore illegal rows
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --infile-list
  description: file of input files list (one file per line), if given, they are appended
    to files from cli arguments
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -l
  - --lazy-quotes
  description: if given, a quote may appear in an unquoted field and a non-doubled
    quote may appear in a quoted field
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -H
  - --no-header-row
  description: specifies that the input CSV file does not have header row
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -j
  - --num-cpus
  description: number of CPUs to use (default value depends on your computer) (default
    8)
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -D
  - --out-delimiter
  description: delimiting character of the output CSV file, e.g., -D $'\t' for tab
    (default ",")
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -o
  - --out-file
  description: out file ("-" for stdout, suffix .gz for gzipped out) (default "-")
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -T
  - --out-tabs
  description: specifies that the output is delimited with tabs. Overrides "-D"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -t
  - --tabs
  description: specifies that the input CSV file is delimited with tabs. Overrides
    "-d"
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: help for cut
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "select and arrange fields\n\nExamples:\n\n  1. Single column\n     csvtk\
  \ cut -f 1\n     csvtk cut -f colA\n  2. Multiple columns (replicates allowed)\n\
  \     csvtk cut -f 1,3,2,1\n     csvtk cut -f colA,colB,colA\n  3. Column ranges\n\
  \     csvtk cut -f 1,3-5       # 1, 3, 4, 5\n     csvtk cut -f 3,5-        # 3rd\
  \ col, and 5th col to the end\n     csvtk cut -f 1-          # for all\n     csvtk\
  \ cut -f 2-,1        # move 1th col to the end\n  4. Unselect\n     csvtk cut -f\
  \ -1,-3       # discard 1st and 3rd column\n     csvtk cut -f -1--3       # discard\
  \ 1st to 3rd column\n     csvtk cut -f -2-         # discard 2nd and all columns\
  \ on the right.\n     csvtu cut -f -colA,-colB # discard colA and colB\n\nUsage:\n\
  \  csvtk cut [flags]\n\nFlags:\n  -f, --fields string   select only these fields.\
  \ type \"csvtk cut -h\" for examples\n  -F, --fuzzy-fields    using fuzzy fields,\
  \ e.g., -F -f \"*name\" or -F -f \"id123*\"\n  -h, --help            help for cut\n\
  \  -i, --ignore-case     ignore case (column name)\n  -u, --uniq-column     deduplicate\
  \ columns matched by multiple fuzzy column names\n\nGlobal Flags:\n  -c, --chunk-size\
  \ int         chunk size of CSV reader (default 50)\n  -C, --comment-char string\
  \    lines starting with commment-character will be ignored. if your header row\
  \ starts with '#', please assign \"-C\" another rare symbol, e.g. '$' (default \"\
  #\")\n  -d, --delimiter string       delimiting character of the input CSV file\
  \ (default \",\")\n  -E, --ignore-empty-row       ignore empty rows\n  -I, --ignore-illegal-row\
  \     ignore illegal rows\n      --infile-list string     file of input files list\
  \ (one file per line), if given, they are appended to files from cli arguments\n\
  \  -l, --lazy-quotes            if given, a quote may appear in an unquoted field\
  \ and a non-doubled quote may appear in a quoted field\n  -H, --no-header-row  \
  \        specifies that the input CSV file does not have header row\n  -j, --num-cpus\
  \ int           number of CPUs to use (default value depends on your computer) (default\
  \ 8)\n  -D, --out-delimiter string   delimiting character of the output CSV file,\
  \ e.g., -D $'\\t' for tab (default \",\")\n  -o, --out-file string        out file\
  \ (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\")\n  -T, --out-tabs\
  \               specifies that the output is delimited with tabs. Overrides \"-D\"\
  \n  -t, --tabs                   specifies that the input CSV file is delimited\
  \ with tabs. Overrides \"-d\"\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/csvtk:0.22.0--0
