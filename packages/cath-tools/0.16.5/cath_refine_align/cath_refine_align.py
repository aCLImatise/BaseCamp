from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int, Directory

Cath_Refine_Align_V0_1_0 = CommandToolBuilder(tool="cath_refine_align", base_command=["cath-refine-align"], inputs=[ToolInput(tag="in_output_version_information", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --version ]                   Output version information")), ToolInput(tag="in_res_name_align", input_type=Boolean(optional=True), prefix="--res-name-align", doc=InputDocumentation(doc="Align residues by simply matching their names (numbers+insert)\n(for multiple models of the same structure)")), ToolInput(tag="in_fast_a_aln_in_file", input_type=File(optional=True), prefix="--fasta-aln-infile", doc=InputDocumentation(doc="Read FASTA alignment from file <file>")), ToolInput(tag="in_ssap_aln_in_file", input_type=File(optional=True), prefix="--ssap-aln-infile", doc=InputDocumentation(doc="Read SSAP alignment from file <file>")), ToolInput(tag="in_cora_aln_in_file", input_type=File(optional=True), prefix="--cora-aln-infile", doc=InputDocumentation(doc="Read CORA alignment from file <file>")), ToolInput(tag="in_ssap_scores_in_file", input_type=File(optional=True), prefix="--ssap-scores-infile", doc=InputDocumentation(doc="Glue pairwise alignments together using SSAP scores in file <file>\nAssumes all .list alignment files in same directory")), ToolInput(tag="in_do_the_s_saps", input_type=Boolean(optional=True), prefix="--do-the-ssaps", doc=InputDocumentation(doc="[=<dir>(='')]       Do the required SSAPs in directory <dir>; use results as with --ssap-scores-infile\nUse a suitable temp directory if none is specified")), ToolInput(tag="in_align_refining", input_type=String(optional=True), prefix="--align-refining", doc=InputDocumentation(doc="(=HEAVY)   Apply <refn> refining to the alignment, one of available values:")), ToolInput(tag="in_id", input_type=String(optional=True), prefix="--id", doc=InputDocumentation(doc="Structure ids")), ToolInput(tag="in_pdb_in_file", input_type=File(optional=True), prefix="--pdb-infile", doc=InputDocumentation(doc="Read PDB from file <pdbfile> (may be specified multiple times)")), ToolInput(tag="in_pdb_s_from_stdin", input_type=Boolean(optional=True), prefix="--pdbs-from-stdin", doc=InputDocumentation(doc="Read PDBs from stdin (separated by line: 'END   ')")), ToolInput(tag="in_align_regions", input_type=Int(optional=True), prefix="--align-regions", doc=InputDocumentation(doc="Handle region(s) <regions> as the alignment part of the structure.\nMay be specified multiple times, in correspondence with the structures.\nFormat is: D[5inwB02]251-348:B,408-416A:B\n(Put <regions> in quotes to prevent the square brackets confusing your shell ('No match'))")), ToolInput(tag="in_aln_to_cath_aln_file", input_type=File(optional=True), prefix="--aln-to-cath-aln-file", doc=InputDocumentation(doc="[EXPERIMENTAL] Write the alignment to a CATH alignment file")), ToolInput(tag="in_aln_to_cath_aln_stdout", input_type=Boolean(optional=True), prefix="--aln-to-cath-aln-stdout", doc=InputDocumentation(doc="[EXPERIMENTAL] Print the alignment to stdout in CATH alignment format")), ToolInput(tag="in_aln_to_fast_a_file", input_type=File(optional=True), prefix="--aln-to-fasta-file", doc=InputDocumentation(doc="Write the alignment to a FASTA file")), ToolInput(tag="in_aln_to_fast_a_stdout", input_type=Boolean(optional=True), prefix="--aln-to-fasta-stdout", doc=InputDocumentation(doc="Print the alignment to stdout in FASTA format")), ToolInput(tag="in_aln_to_ssap_file", input_type=File(optional=True), prefix="--aln-to-ssap-file", doc=InputDocumentation(doc="Write the alignment to a SSAP file")), ToolInput(tag="in_aln_to_ssap_stdout", input_type=Boolean(optional=True), prefix="--aln-to-ssap-stdout", doc=InputDocumentation(doc="Print the alignment to stdout as SSAP")), ToolInput(tag="in_aln_to_html_file", input_type=File(optional=True), prefix="--aln-to-html-file", doc=InputDocumentation(doc="Write the alignment to a HTML file")), ToolInput(tag="in_aln_to_html_stdout", input_type=Boolean(optional=True), prefix="--aln-to-html-stdout", doc=InputDocumentation(doc="Print the alignment to stdout as HTML")), ToolInput(tag="in_sup_to_pdb_file", input_type=File(optional=True), prefix="--sup-to-pdb-file", doc=InputDocumentation(doc="Write the superposed structures to a single PDB file arg, separated using faked chain codes")), ToolInput(tag="in_sup_to_pdb_files_dir", input_type=Directory(optional=True), prefix="--sup-to-pdb-files-dir", doc=InputDocumentation(doc="Write the superposed structures to separate PDB files in directory arg")), ToolInput(tag="in_sup_to_stdout", input_type=Boolean(optional=True), prefix="--sup-to-stdout", doc=InputDocumentation(doc="Print the superposed structures to stdout, separated using faked chain codes")), ToolInput(tag="in_sup_to_pymol", input_type=Boolean(optional=True), prefix="--sup-to-pymol", doc=InputDocumentation(doc="Start up PyMOL for viewing the superposition")), ToolInput(tag="in_pymol_program", input_type=File(optional=True), prefix="--pymol-program", doc=InputDocumentation(doc="(='pymol')     Use arg as the PyMOL executable for viewing; may optionally include the full path")), ToolInput(tag="in_sup_to_pymol_file", input_type=File(optional=True), prefix="--sup-to-pymol-file", doc=InputDocumentation(doc="Write the superposition to a PyMOL script arg\n(Recommended filename extension: .pml)")), ToolInput(tag="in_sup_to_json_file", input_type=File(optional=True), prefix="--sup-to-json-file", doc=InputDocumentation(doc="Write the superposition to JSON superposition file\n(Recommended filename extension: .sup_json)")), ToolInput(tag="in_viewer_colours", input_type=Int(optional=True), prefix="--viewer-colours", doc=InputDocumentation(doc="Use <colrs> to colour successive entries in the viewer\n(format: colon-separated list of comma-separated triples of RGB values between 0 and 1)\n(will wrap-around when it runs out of colours)")), ToolInput(tag="in_gradient_colour_alignment", input_type=Boolean(optional=True), prefix="--gradient-colour-alignment", doc=InputDocumentation(doc="Colour the length of the alignment with a rainbow gradient (blue -> red)")), ToolInput(tag="in_show_scores_if_present", input_type=Boolean(optional=True), prefix="--show-scores-if-present", doc=InputDocumentation(doc="Show the alignment scores\n(use with gradient-colour-alignment)")), ToolInput(tag="in_scores_to_equivs", input_type=Boolean(optional=True), prefix="--scores-to-equivs", doc=InputDocumentation(doc="Show the alignment scores to equivalent positions, which increases relative scores where few entries are aligned\n(use with --gradient-colour-alignment and --show-scores-if-present)")), ToolInput(tag="in_normalise_scores", input_type=Boolean(optional=True), prefix="--normalise-scores", doc=InputDocumentation(doc="When showing scores, normalise them to the highest score in the alignment\n(use with --gradient-colour-alignment and --show-scores-if-present)")), ToolInput(tag="in_no", input_type=String(), position=0, doc=InputDocumentation(doc="- Don't refine the alignment"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cath_Refine_Align_V0_1_0().translate("wdl", allow_empty_container=True)

