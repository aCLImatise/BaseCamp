from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, Float, String

Ssu_Cmbuild_V0_1_0 = CommandToolBuilder(tool="ssu_cmbuild", base_command=["ssu-cmbuild"], inputs=[ToolInput(tag="in_name_cms_s", input_type=File(optional=True), prefix="-n", doc=InputDocumentation(doc=": name the CM(s) <s>, (only if single aln in file)")), ToolInput(tag="in_append_cm_cmfile", input_type=Boolean(optional=True), prefix="-A", doc=InputDocumentation(doc=": append this CM to <cmfile>")), ToolInput(tag="in_force_allow_overwriting", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc=": force; allow overwriting of <cmfile>")), ToolInput(tag="in_be_verbose_output", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=": be verbose with output")), ToolInput(tag="in_i_ins", input_type=Boolean(optional=True), prefix="--iins", doc=InputDocumentation(doc=": allow informative insert emissions, do not zero them")), ToolInput(tag="in_w_beta", input_type=Int(optional=True), prefix="--Wbeta", doc=InputDocumentation(doc=": set tail loss prob for calc'ing W (max size of a hit) to <x>")), ToolInput(tag="in_devhelp", input_type=Boolean(optional=True), prefix="--devhelp", doc=InputDocumentation(doc=": show list of undocumented developer options")), ToolInput(tag="in_r_search", input_type=File(optional=True), prefix="--rsearch", doc=InputDocumentation(doc=": use RSEARCH parameterization with RIBOSUM matrix file <s>")), ToolInput(tag="in_binary", input_type=Boolean(optional=True), prefix="--binary", doc=InputDocumentation(doc=": save the model(s) in binary format")), ToolInput(tag="in_rf", input_type=Boolean(optional=True), prefix="--rf", doc=InputDocumentation(doc=": use reference coordinate annotation to specify consensus")), ToolInput(tag="in_gap_thresh", input_type=Float(optional=True), prefix="--gapthresh", doc=InputDocumentation(doc=": fraction of gaps to allow in a consensus column [0..1]  [0.5]")), ToolInput(tag="in_ignorant", input_type=Boolean(optional=True), prefix="--ignorant", doc=InputDocumentation(doc=": strip the structural info from input alignment")), ToolInput(tag="in_wgs_c", input_type=Boolean(optional=True), prefix="--wgsc", doc=InputDocumentation(doc=": Gerstein/Sonnhammer/Chothia tree weights  [default]")), ToolInput(tag="in_w_blosum", input_type=Boolean(optional=True), prefix="--wblosum", doc=InputDocumentation(doc=": Henikoff simple filter weights")), ToolInput(tag="in_wpb", input_type=Boolean(optional=True), prefix="--wpb", doc=InputDocumentation(doc=": Henikoff position-based weights")), ToolInput(tag="in_w_none", input_type=Boolean(optional=True), prefix="--wnone", doc=InputDocumentation(doc=": don't do any relative weighting; set all to 1")), ToolInput(tag="in_w_given", input_type=Boolean(optional=True), prefix="--wgiven", doc=InputDocumentation(doc=": use weights as given in MSA file")), ToolInput(tag="in_pb_switch", input_type=Int(optional=True), prefix="--pbswitch", doc=InputDocumentation(doc=": set failover to efficient PB wgts at > <n> seqs  [5000]  (n>0)")), ToolInput(tag="in_wid", input_type=Float(optional=True), prefix="--wid", doc=InputDocumentation(doc=": for --wblosum: set identity cutoff  [0.62]  (0<=x<=1)")), ToolInput(tag="in_e_ent", input_type=Boolean(optional=True), prefix="--eent", doc=InputDocumentation(doc=": adjust eff seq # to achieve relative entropy target  [default]")), ToolInput(tag="in_en_one", input_type=Boolean(optional=True), prefix="--enone", doc=InputDocumentation(doc=": no effective seq # weighting: just use nseq")), ToolInput(tag="in_ere", input_type=Int(optional=True), prefix="--ere", doc=InputDocumentation(doc=": for --eent: set CM target relative entropy to <x>  (x>0)")), ToolInput(tag="in_e_hmm_re", input_type=Int(optional=True), prefix="--ehmmre", doc=InputDocumentation(doc=": for --eent: set minimum HMM relative entropy to <x>  (x>0)")), ToolInput(tag="in_null", input_type=File(optional=True), prefix="--null", doc=InputDocumentation(doc=": read null (random sequence) model from file <s>")), ToolInput(tag="in_prior", input_type=File(optional=True), prefix="--prior", doc=InputDocumentation(doc=": read priors from file <s>")), ToolInput(tag="in_c_target", input_type=String(optional=True), prefix="--ctarget", doc=InputDocumentation(doc=": build (at most) <n> CMs by partitioning MSA into <n> clusters")), ToolInput(tag="in_cmax_id", input_type=Int(optional=True), prefix="--cmaxid", doc=InputDocumentation(doc=": max fractional id b/t 2 clusters is <x>, each cluster -> CM")), ToolInput(tag="in_call", input_type=Boolean(optional=True), prefix="--call", doc=InputDocumentation(doc=": build a separate CM from every seq in MSA")), ToolInput(tag="in_c_orig", input_type=Boolean(optional=True), prefix="--corig", doc=InputDocumentation(doc=": build an additional CM from the original, full MSA")), ToolInput(tag="in_c_dump", input_type=File(optional=True), prefix="--cdump", doc=InputDocumentation(doc=": dump the MSA for each cluster (CM) to file <s>")), ToolInput(tag="in_refine", input_type=String(optional=True), prefix="--refine", doc=InputDocumentation(doc=": refine input aln w/Expectation-Maximization, save to <s>")), ToolInput(tag="in_gibbs", input_type=Boolean(optional=True), prefix="--gibbs", doc=InputDocumentation(doc=": w/--refine, use Gibbs sampling instead of EM")), ToolInput(tag="in_wgibbs_set_seed", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc=": w/--gibbs, set RNG seed to <n> (if 0: one-time arbitrary seed)")), ToolInput(tag="in_wrefine_align_locally", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc=": w/--refine, align locally w.r.t the model")), ToolInput(tag="in_print_individual_sequence", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc=": print individual sequence scores during MSA refinement")), ToolInput(tag="in_cy_k", input_type=Boolean(optional=True), prefix="--cyk", doc=InputDocumentation(doc=": w/--refine align w/the CYK algorithm, not optimal accuracy")), ToolInput(tag="in_sub", input_type=Boolean(optional=True), prefix="--sub", doc=InputDocumentation(doc=": w/--refine, use sub CM for columns b/t HMM start/end points")), ToolInput(tag="in_non_banded", input_type=Boolean(optional=True), prefix="--nonbanded", doc=InputDocumentation(doc=": do not use bands to accelerate alignment with --refine")), ToolInput(tag="in_tau", input_type=String(optional=True), prefix="--tau", doc=InputDocumentation(doc=": set tail loss prob for --hbanded to <x>")), ToolInput(tag="in_fins", input_type=Boolean(optional=True), prefix="--fins", doc=InputDocumentation(doc=": w/--refine, flush inserts left/right in alignments")), ToolInput(tag="in_mx_size", input_type=Int(optional=True), prefix="--mxsize", doc=InputDocumentation(doc=": set maximum allowable DP matrix size to <x> Mb")), ToolInput(tag="in_r_dump", input_type=String(optional=True), prefix="--rdump", doc=InputDocumentation(doc=": w/--refine, print all intermediate alignments to <f>")), ToolInput(tag="in_i_leaved", input_type=Boolean(optional=True), prefix="--ileaved", doc=InputDocumentation(doc=": w/--refine,--cdump, output alnment as interleaved Stockholm")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc="")), ToolInput(tag="in_cm_file_output", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_alignment_file", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ssu_Cmbuild_V0_1_0().translate("wdl", allow_empty_container=True)

