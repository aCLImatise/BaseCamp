from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, String

Unpigz_V0_1_0 = CommandToolBuilder(tool="unpigz", base_command=["unpigz"], inputs=[ToolInput(tag="in_compression_level_level", input_type=Int(optional=True), prefix="-11", doc=InputDocumentation(doc="Compression level (level 11, zopfli, is much slower)")), ToolInput(tag="in_fast", input_type=Boolean(optional=True), prefix="--fast", doc=InputDocumentation(doc="Compression levels 1 and 9 respectively")), ToolInput(tag="in_block_size", input_type=Int(optional=True), prefix="--blocksize", doc=InputDocumentation(doc="Set compression block size to mmmK (default 128K)")), ToolInput(tag="in_stdout", input_type=Boolean(optional=True), prefix="--stdout", doc=InputDocumentation(doc="Write all processed output to stdout (won't delete)")), ToolInput(tag="in_decompress", input_type=Boolean(optional=True), prefix="--decompress", doc=InputDocumentation(doc="Decompress the compressed input")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Force overwrite, compress .gz, links, and to terminal")), ToolInput(tag="in_first", input_type=Boolean(optional=True), prefix="--first", doc=InputDocumentation(doc="Do iterations first, before block split for -11")), ToolInput(tag="in_independent", input_type=Boolean(optional=True), prefix="--independent", doc=InputDocumentation(doc="Compress blocks independently for damage recovery")), ToolInput(tag="in_iterations", input_type=Int(optional=True), prefix="--iterations", doc=InputDocumentation(doc="Number of iterations for -11 optimization")), ToolInput(tag="in_keep", input_type=Boolean(optional=True), prefix="--keep", doc=InputDocumentation(doc="Do not delete original file after processing")), ToolInput(tag="in_zip", input_type=Boolean(optional=True), prefix="--zip", doc=InputDocumentation(doc="Compress to PKWare zip (.zip) single entry format")), ToolInput(tag="in_list", input_type=Boolean(optional=True), prefix="--list", doc=InputDocumentation(doc="List the contents of the compressed input")), ToolInput(tag="in_license", input_type=Boolean(optional=True), prefix="--license", doc=InputDocumentation(doc="Display the pigz license and quit")), ToolInput(tag="in_max_splits", input_type=Int(optional=True), prefix="--maxsplits", doc=InputDocumentation(doc="Maximum number of split blocks for -11")), ToolInput(tag="in_no_name", input_type=Boolean(optional=True), prefix="--no-name", doc=InputDocumentation(doc="Do not store or restore file name in/from header")), ToolInput(tag="in_name", input_type=Boolean(optional=True), prefix="--name", doc=InputDocumentation(doc="Store/restore file name and mod time in/from header")), ToolInput(tag="in_one_block", input_type=Boolean(optional=True), prefix="--oneblock", doc=InputDocumentation(doc="Do not split into smaller blocks for -11")), ToolInput(tag="in_processes", input_type=Int(optional=True), prefix="--processes", doc=InputDocumentation(doc="Allow up to n compression threads (default is the\nnumber of online processors, or 8 if unknown)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Print no messages, even on error")), ToolInput(tag="in_recursive", input_type=Boolean(optional=True), prefix="--recursive", doc=InputDocumentation(doc="Process the contents of all subdirectories")), ToolInput(tag="in_rsync_able", input_type=Boolean(optional=True), prefix="--rsyncable", doc=InputDocumentation(doc="Input-determined block locations for rsync")), ToolInput(tag="in_suffix", input_type=Boolean(optional=True), prefix="--suffix", doc=InputDocumentation(doc=".sss    Use suffix .sss instead of .gz (for compression)")), ToolInput(tag="in_test", input_type=Boolean(optional=True), prefix="--test", doc=InputDocumentation(doc="Test the integrity of the compressed input")), ToolInput(tag="in_no_time", input_type=Boolean(optional=True), prefix="--no-time", doc=InputDocumentation(doc="Do not store or restore mod time in/from header")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Provide more verbose output")), ToolInput(tag="in_zlib", input_type=Boolean(optional=True), prefix="--zlib", doc=InputDocumentation(doc="Compress to zlib (.zz) instead of gzip format")), ToolInput(tag="in_pig_z", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_files", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/pigz:2.3.4", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Unpigz_V0_1_0().translate("wdl")

