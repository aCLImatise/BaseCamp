from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String

Rnalfold_V0_1_0 = CommandToolBuilder(tool="RNALfold", base_command=["RNALfold"], inputs=[ToolInput(tag="in_detailed_help", input_type=Boolean(optional=True), prefix="--detailed-help", doc=InputDocumentation(doc="Print help, including all details and hidden\noptions, and exit")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--full-help", doc=InputDocumentation(doc="Print help, including hidden options, and exit")), ToolInput(tag="in_span", input_type=Int(optional=True), prefix="--span", doc=InputDocumentation(doc="Set the maximum distance between any two\npairing nucleotides.\n(default=`150')")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="[=<filename>]    Print output to file instead of stdout")), ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--infile", doc=InputDocumentation(doc="Read a file instead of reading from stdin")), ToolInput(tag="in_auto_id", input_type=Boolean(optional=True), prefix="--auto-id", doc=InputDocumentation(doc="Automatically generate an ID for each sequence.\n(default=off)")), ToolInput(tag="in_zscore", input_type=Boolean(optional=True), prefix="--zscore", doc=InputDocumentation(doc="[=DOUBLE]         Limit the output to predictions with a Z-score\nbelow a threshold\n(default=`-2')")), ToolInput(tag="in_zscore_pre_filter", input_type=Boolean(optional=True), prefix="--zscore-pre-filter", doc=InputDocumentation(doc="Apply the z-score filtering in the forward")), ToolInput(tag="in_zscore_report_subsumed", input_type=Boolean(optional=True), prefix="--zscore-report-subsumed", doc=InputDocumentation(doc="Report subsumed structures if their z-score is\nless than that of the enclosing structure\n(default=off)")), ToolInput(tag="in_backtrack_global", input_type=Boolean(optional=True), prefix="--backtrack-global", doc=InputDocumentation(doc="Backtrack a global MFE structure.\n(default=off)")), ToolInput(tag="in_g_quad", input_type=Boolean(optional=True), prefix="--gquad", doc=InputDocumentation(doc="Incoorporate G-Quadruplex formation into the\nstructure prediction algorithm\n(default=off)")), ToolInput(tag="in_shape", input_type=File(optional=True), prefix="--shape", doc=InputDocumentation(doc="Use SHAPE reactivity data to guide structure")), ToolInput(tag="in_temp", input_type=Int(optional=True), prefix="--temp", doc=InputDocumentation(doc="Rescale energy parameters to a temperature of\ntemp C. Default is 37C.")), ToolInput(tag="in_dangles", input_type=Int(optional=True), prefix="--dangles", doc=InputDocumentation(doc="Change the dangling end model\n(default=`2')")), ToolInput(tag="in_no_lp", input_type=Boolean(optional=True), prefix="--noLP", doc=InputDocumentation(doc="Produce structures without lonely pairs\n(helices of length 1).\n(default=off)")), ToolInput(tag="in_param_file", input_type=File(optional=True), prefix="--paramFile", doc=InputDocumentation(doc="Read energy parameters from paramfile, instead\nof using the default parameter set.")), ToolInput(tag="in_program", input_type=String(), position=0, doc=InputDocumentation(doc="-v, --verbose                 Be verbose\n(default=off)")), ToolInput(tag="in_recursions", input_type=String(), position=0, doc=InputDocumentation(doc="(default=off)")), ToolInput(tag="in_predictions_dot", input_type=String(), position=1, doc=InputDocumentation(doc="Model Details:"))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc="[=<filename>]    Print output to file instead of stdout"))], container="quay.io/biocontainers/viennarna:2.4.17--py36hd181a71_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rnalfold_V0_1_0().translate("wdl")

