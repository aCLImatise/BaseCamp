from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Float, Int

Format_Input_Py_V0_1_0 = CommandToolBuilder(tool="format_input.py", base_command=["format_input.py"], inputs=[ToolInput(tag="in_output_table", input_type=String(optional=True), prefix="--output_table", doc=InputDocumentation(doc="the formatted table in txt format")), ToolInput(tag="in_set_features_rows", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="set whether the features are on rows (default) or on")), ToolInput(tag="in_set_use_subclass", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[1..n_feats]       set which feature use as subclass (default -1 meaning\nno subclass)")), ToolInput(tag="in_set_value_default", input_type=Float(optional=True), prefix="-o", doc=InputDocumentation(doc="set the normalization value (default -1.0 meaning no\nnormalization)")), ToolInput(tag="in_set_use_subject", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="[1..n_feats]       set which feature use as subject (default -1 meaning\nno subject)")), ToolInput(tag="in_set_policy_adopt", input_type=String(optional=True), prefix="-m", doc=InputDocumentation(doc="set the policy to adopt with missin values: f removes\nthe features with missing values, s removes samples\nwith missing values (default f)")), ToolInput(tag="in_set_minimum_cardinality", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="set the minimum cardinality of each subclass\n(subclasses with low cardinalities will be grouped\ntogether, if the cardinality is still low, no pairwise\ncomparison will be performed with them)")), ToolInput(tag="in_biom_c", input_type=String(optional=True), prefix="-biom_c", doc=InputDocumentation(doc="For biom input files: Set which feature use as class")), ToolInput(tag="in_biom_s", input_type=String(optional=True), prefix="-biom_s", doc=InputDocumentation(doc="For biom input files: set which feature use as\nsubclass\n")), ToolInput(tag="in_input_file", input_type=String(), position=0, doc=InputDocumentation(doc="the input file, feature hierarchical level can be\nspecified with | or . and those symbols must not be\npresent for other reasons in the input file.")), ToolInput(tag="in_output_file", input_type=String(), position=1, doc=InputDocumentation(doc="the output file containing the data for LEfSe")), ToolInput(tag="in_columns", input_type=String(), position=0, doc=InputDocumentation(doc="-c [1..n_feats]       set which feature use as class (default 1)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Format_Input_Py_V0_1_0().translate("wdl", allow_empty_container=True)

