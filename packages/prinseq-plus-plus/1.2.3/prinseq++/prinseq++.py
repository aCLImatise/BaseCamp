from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, Float, String

Prinseq___V0_1_0 = CommandToolBuilder(tool="prinseq++", base_command=["prinseq++"], inputs=[ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="Print version; ignore other arguments.")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="-threads", doc=InputDocumentation(doc="Nuber of threads to use. Note that if more than one thread is used, output\nsequences might not be in the same order as input sequences. (Default=1)")), ToolInput(tag="in_verbose", input_type=Int(optional=True), prefix="-VERBOSE", doc=InputDocumentation(doc="Format of the report of filtered reads, VERBOSE=1 prints information only\non the filters that removed sequences. VERBOSE=2 prints numbers for filters\nin order (min_len, max_len, min_cg, max_cg, min_qual_score, min_qual_mean,\nns_max_n, noiupac, derep, lc_entropy, lc_dust, trim_tail_left, trim_tail_right,\ntrim_qual_left, trim_qual_right, trim_left, trim_right) to compare stats of diferent files.\nVERBOSE=0 prints nothing.\n(Default=1)")), ToolInput(tag="in_fast_q", input_type=File(optional=True), prefix="-fastq", doc=InputDocumentation(doc="Input file in FASTQ format. Can also read a compressed (.gz) file.")), ToolInput(tag="in_fast_q_two", input_type=File(optional=True), prefix="-fastq2", doc=InputDocumentation(doc="Input file in FASTQ format for pair-end reads. Can also read a\ncompressed (.gz) file.")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="-FASTA", doc=InputDocumentation(doc="Input is in fasta format (no quality). Note that the output format is\nstill fastq by default. Quality will be treated as 31 (A) for all bases.")), ToolInput(tag="in_phred_six_four", input_type=Boolean(optional=True), prefix="-phred64", doc=InputDocumentation(doc="Input quality is in phred64 format. This is for older Illumina/Solexa reads.")), ToolInput(tag="in_out_format", input_type=Int(optional=True), prefix="-out_format", doc=InputDocumentation(doc="Set output format. 0 FASTQ, 1 FASTA. (Default=0)")), ToolInput(tag="in_out_name", input_type=Int(optional=True), prefix="-out_name", doc=InputDocumentation(doc="For pair-end sequences, the output files are <string>_good_out_R1 and\n<string>_good_out_R2 for pairs where both reads pass quality control,\n<string>_single_out_R1 and <string>_single_out_R2 for read that passed\nquality control but mate didn't. <string>_bad_out_R1 and <string>_bad_out_R2\nfor reads that fail quality controls. [Default = random size 6 string]")), ToolInput(tag="in_rm_header", input_type=Boolean(optional=True), prefix="-rm_header", doc=InputDocumentation(doc="Remove the header in the 3rd line of the fastq (+header -> +). This does\nnot change the header in the 1st line (@header).")), ToolInput(tag="in_out_gz", input_type=File(optional=True), prefix="-out_gz", doc=InputDocumentation(doc="Write the output to a compressed file (WARNING this can be really SLOW)")), ToolInput(tag="in_out_single_two", input_type=File(optional=True), prefix="-out_single2", doc=InputDocumentation(doc="Rename the output files idividually, this overwrites the names given by\n-out_name only for the selected files. File extension won't be added\nautomatically. (TIP: if you don't need a file, set its name to /dev/null)")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="-min_len", doc=InputDocumentation(doc="Filter sequence shorter than min_len.")), ToolInput(tag="in_max_len", input_type=Int(optional=True), prefix="-max_len", doc=InputDocumentation(doc="Filter sequence longer than max_len.")), ToolInput(tag="in_min_gc", input_type=Float(optional=True), prefix="-min_gc", doc=InputDocumentation(doc="Filter sequence with GC percent content below min_gc.")), ToolInput(tag="in_max_gc", input_type=Float(optional=True), prefix="-max_gc", doc=InputDocumentation(doc="Filter sequence with GC percent content above min_gc.")), ToolInput(tag="in_min_qual_score", input_type=Int(optional=True), prefix="-min_qual_score", doc=InputDocumentation(doc="Filter sequence with at least one base with quality score below\nmin_qual_score.")), ToolInput(tag="in_min_qual_mean", input_type=Int(optional=True), prefix="-min_qual_mean", doc=InputDocumentation(doc="Filter sequence with quality score mean below min_qual_mean.")), ToolInput(tag="in_ns_max_n", input_type=Int(optional=True), prefix="-ns_max_n", doc=InputDocumentation(doc="Filter sequence with more than ns_max_n Ns.")), ToolInput(tag="in_no_iupac", input_type=Boolean(optional=True), prefix="-noiupac", doc=InputDocumentation(doc="Filter sequence with characters other than A, C, G, T or N.")), ToolInput(tag="in_de_rep", input_type=Boolean(optional=True), prefix="-derep", doc=InputDocumentation(doc="Filter duplicated sequences. This only remove exact duplicates.")), ToolInput(tag="in_lc_entropy", input_type=Boolean(optional=True), prefix="-lc_entropy", doc=InputDocumentation(doc="=[float]\nFilter sequences with entropy lower than [float]. [float] should be in\nthe 0-1 interval. (Default=0.5)")), ToolInput(tag="in_lc_dust", input_type=Boolean(optional=True), prefix="-lc_dust", doc=InputDocumentation(doc="=[float]\nFilter sequences with dust_score lower than [float]. [float] should be in\nthe 0-1 interval. (Default=0.5)")), ToolInput(tag="in_trim_left", input_type=Int(optional=True), prefix="-trim_left", doc=InputDocumentation(doc="Trim <integer> bases from the left (5'->3').")), ToolInput(tag="in_trim_right", input_type=Int(optional=True), prefix="-trim_right", doc=InputDocumentation(doc="Trim <integer> bases from the right (3'->5').")), ToolInput(tag="in_trim_tail_left", input_type=Int(optional=True), prefix="-trim_tail_left", doc=InputDocumentation(doc="Trim poly-A/T tail with a minimum length of <integer> at the\n5'-end.")), ToolInput(tag="in_trim_tail_right", input_type=Int(optional=True), prefix="-trim_tail_right", doc=InputDocumentation(doc="Trim poly-A/T tail with a minimum length of <integer> at the\n3'-end.")), ToolInput(tag="in_trim_qual_rule", input_type=String(optional=True), prefix="-trim_qual_rule", doc=InputDocumentation(doc="Rule to use to compare quality score to calculated value. Allowed\noptions are lt (less than), gt (greater than) and et (equal to).\n[default: lt]")), ToolInput(tag="in_trim_qual_left", input_type=Boolean(optional=True), prefix="-trim_qual_left", doc=InputDocumentation(doc="=[float]\nTrim recursively from the 3'-end chunks of length -trim_qual_step if the\nmean quality of the first -trim_qual_window bases is less than [float].\n(Default=20)")), ToolInput(tag="in_trim_qual_right", input_type=Boolean(optional=True), prefix="-trim_qual_right", doc=InputDocumentation(doc="=[float]\nTrim recursively from the 5'-end chunks of length -trim_qual_step if the\nmean quality of the last -trim_qual_window bases is less than [float].\n(Default=20)")), ToolInput(tag="in_trim_qual_window", input_type=Boolean(optional=True), prefix="-trim_qual_window", doc=InputDocumentation(doc="[int]\nSize of the window used by trim_qual_left and trim_qual_right (Default=5)")), ToolInput(tag="in_trim_qual_step", input_type=Boolean(optional=True), prefix="-trim_qual_step", doc=InputDocumentation(doc="[int]\nStep size used by trim_qual_left and trim_qual_right (Default=2)")), ToolInput(tag="in_trim_qual_type", input_type=Int(optional=True), prefix="-trim_qual_type", doc=InputDocumentation(doc="Type of quality score calculation to use. Allowed options are min,\nmean, max and sum. [default= min]\n"))], outputs=[ToolOutput(tag="out_out_gz", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_gz", type_hint=File()), doc=OutputDocumentation(doc="Write the output to a compressed file (WARNING this can be really SLOW)")), ToolOutput(tag="out_out_single_two", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_single_two", type_hint=File()), doc=OutputDocumentation(doc="Rename the output files idividually, this overwrites the names given by\n-out_name only for the selected files. File extension won't be added\nautomatically. (TIP: if you don't need a file, set its name to /dev/null)"))], container="quay.io/biocontainers/prinseq-plus-plus:1.2.3--h176a8bc_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Prinseq___V0_1_0().translate("wdl")

