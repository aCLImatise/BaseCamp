from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean

Prank_V0_1_0 = CommandToolBuilder(tool="prank", base_command=["prank"], inputs=[ToolInput(tag="in_d", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="[default: no tree, generate approximate NJ tree]")), ToolInput(tag="in_m", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="[default: HKY2/WAG]")), ToolInput(tag="in_o", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[default: 'output']")), ToolInput(tag="in_var_3", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="[default: Fasta; type '--help' for details]")), ToolInput(tag="in_short_names", input_type=Boolean(optional=True), prefix="-shortnames", doc=InputDocumentation(doc="[truncate names at first space]")), ToolInput(tag="in_var_5", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="[equivalent]")), ToolInput(tag="in_gap_rate", input_type=Boolean(optional=True), prefix="-gaprate", doc=InputDocumentation(doc="=# [gap opening rate; default: dna 0.025 / prot 0.005]")), ToolInput(tag="in_gap_ext", input_type=Boolean(optional=True), prefix="-gapext", doc=InputDocumentation(doc="=# [gap extension probability; default: dna 0.75 / prot 0.5]")), ToolInput(tag="in_codon", input_type=Boolean(optional=True), prefix="-codon", doc=InputDocumentation(doc="[for coding DNA: use empirical codon model]")), ToolInput(tag="in_protein", input_type=Boolean(optional=True), prefix="-protein", doc=InputDocumentation(doc="[no autodetection: use dna or protein model]")), ToolInput(tag="in_term_gap", input_type=Boolean(optional=True), prefix="-termgap", doc=InputDocumentation(doc="[penalise terminal gaps normally]")), ToolInput(tag="in_no_missing", input_type=Boolean(optional=True), prefix="-nomissing", doc=InputDocumentation(doc="[no missing data, use -F for terminal gaps ]")), ToolInput(tag="in_e", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[pre-aligned sequences; do not remove gaps]")), ToolInput(tag="in_no_post", input_type=Boolean(optional=True), prefix="-nopost", doc=InputDocumentation(doc="[do not compute posterior support; default: compute]")), ToolInput(tag="in_once", input_type=Boolean(optional=True), prefix="-once", doc=InputDocumentation(doc="[run only once; default: twice if no guidetree given]")), ToolInput(tag="in_twice", input_type=Boolean(optional=True), prefix="-twice", doc=InputDocumentation(doc="[run always twice]")), ToolInput(tag="in_use_logs", input_type=Boolean(optional=True), prefix="-uselogs", doc=InputDocumentation(doc="[slower but should work for a greater number of sequences]")), ToolInput(tag="in_translate", input_type=Boolean(optional=True), prefix="-translate", doc=InputDocumentation(doc="[translate to protein]")), ToolInput(tag="in_mt_translate", input_type=Boolean(optional=True), prefix="-mttranslate", doc=InputDocumentation(doc="[translate to protein using mt table]")), ToolInput(tag="in_max_pair_dist", input_type=Boolean(optional=True), prefix="-maxpairdist", doc=InputDocumentation(doc="=# [maximum pairwise distance for matrix computation]")), ToolInput(tag="in_convert", input_type=Boolean(optional=True), prefix="-convert", doc=InputDocumentation(doc="[no alignment, just convert to another format]"))], outputs=[ToolOutput(tag="out_o", output_type=File(optional=True), selector=InputSelector(input_to_select="in_o", type_hint=File()), doc=OutputDocumentation(doc="[default: 'output']"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Prank_V0_1_0().translate("wdl", allow_empty_container=True)

