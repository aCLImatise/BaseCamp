from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory, String

Read_Extractor_V0_1_0 = CommandToolBuilder(tool="read_extractor", base_command=["read-extractor"], inputs=[ToolInput(tag="in_input", input_type=Boolean(optional=True), prefix="--input", doc=InputDocumentation(doc="[string(s)]              Input DAA and/or RMA file(s). Mandatory option.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="[string(s)]             Output file(s). Use %t for class name and %i for class id. (Directory, stdout, .gz ok). Default value(s): 'stdout'.")), ToolInput(tag="in_classification", input_type=Boolean(optional=True), prefix="--classification", doc=InputDocumentation(doc="[string]        The classification to use.  Legal values: EC, EGGNOG, GTDB, INTERPRO2GO, KEGG, SEED, Taxonomy")), ToolInput(tag="in_class_names", input_type=Boolean(optional=True), prefix="--classNames", doc=InputDocumentation(doc="[string(s)]         Names (or ids) of classes to extract reads from (default: extract all classes).")), ToolInput(tag="in_all", input_type=Boolean(optional=True), prefix="--all", doc=InputDocumentation(doc="Extract all reads (not by class). Default value: false.")), ToolInput(tag="in_ignore_exceptions", input_type=Boolean(optional=True), prefix="--ignoreExceptions", doc=InputDocumentation(doc="Ignore exceptions and continue processing. Default value: false.")), ToolInput(tag="in_gzip_output_files", input_type=Directory(optional=True), prefix="--gzipOutputFiles", doc=InputDocumentation(doc="If output directory is given, gzip files written to directory. Default value: true.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Echo commandline options and be verbose. Default value: false.")), ToolInput(tag="in_commands", input_type=String(), position=0, doc=InputDocumentation(doc="-fsc, --frameShiftCorrect            Extract frame-shift corrected reads. Default value: false."))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="[string(s)]             Output file(s). Use %t for class name and %i for class id. (Directory, stdout, .gz ok). Default value(s): 'stdout'.")), ToolOutput(tag="out_gzip_output_files", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_gzip_output_files", type_hint=File()), doc=OutputDocumentation(doc="If output directory is given, gzip files written to directory. Default value: true."))], container="quay.io/biocontainers/megan:6.21.2--h9ee0642_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Read_Extractor_V0_1_0().translate("wdl")

