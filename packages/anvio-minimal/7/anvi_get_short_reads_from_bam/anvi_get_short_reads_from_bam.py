from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean

Anvi_Get_Short_Reads_From_Bam_V0_1_0 = CommandToolBuilder(tool="anvi_get_short_reads_from_bam", base_command=["anvi-get-short-reads-from-bam"], inputs=[ToolInput(tag="in_profile_db", input_type=String(optional=True), prefix="--profile-db", doc=InputDocumentation(doc="Anvi'o profile database (default: None)")), ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs-database' (default: None)")), ToolInput(tag="in_collection_name", input_type=String(optional=True), prefix="--collection-name", doc=InputDocumentation(doc="Collection name. (default: None)")), ToolInput(tag="in_bin_id", input_type=String(optional=True), prefix="--bin-id", doc=InputDocumentation(doc="Bin name you are interested in. (default: None)")), ToolInput(tag="in_bin_ids_file", input_type=File(optional=True), prefix="--bin-ids-file", doc=InputDocumentation(doc="Text file for bins (each line should be a unique bin\nid). (default: None)")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File path to store results. (default: None)")), ToolInput(tag="in_output_file_prefix", input_type=File(optional=True), prefix="--output-file-prefix", doc=InputDocumentation(doc="A prefix to be used while naming the output files (no\nfile type extensions please; just a prefix). (default:\nNone)")), ToolInput(tag="in_gzip_output", input_type=File(optional=True), prefix="--gzip-output", doc=InputDocumentation(doc="When declared, output file(s) will be gzip compressed\nand the extension `.gz` will be added. (default:\nFalse)")), ToolInput(tag="in_split_r_one_and_r_two", input_type=Boolean(optional=True), prefix="--split-R1-and-R2", doc=InputDocumentation(doc="When declared, this program outputs 3 FASTA files for\npaired-end reads: one for R1, one for R2, and one for\nunpaired reads. (default: False)")), ToolInput(tag="in_short_reads_fast_a", input_type=String(), position=0, doc=InputDocumentation(doc="üç∫ More on `anvi-get-short-reads-from-bam`:"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store results. (default: None)")), ToolOutput(tag="out_output_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_prefix", type_hint=File()), doc=OutputDocumentation(doc="A prefix to be used while naming the output files (no\nfile type extensions please; just a prefix). (default:\nNone)")), ToolOutput(tag="out_gzip_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_gzip_output", type_hint=File()), doc=OutputDocumentation(doc="When declared, output file(s) will be gzip compressed\nand the extension `.gz` will be added. (default:\nFalse)"))], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Get_Short_Reads_From_Bam_V0_1_0().translate("wdl")

