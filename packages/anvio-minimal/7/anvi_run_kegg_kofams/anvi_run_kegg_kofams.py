from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Anvi_Run_Kegg_Kofams_V0_1_0 = CommandToolBuilder(tool="anvi_run_kegg_kofams", base_command=["anvi-run-kegg-kofams"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs-database' (default: None)")), ToolInput(tag="in_profile_db", input_type=File(optional=True), prefix="--profile-db", doc=InputDocumentation(doc="If you only want to annotate gene calls in a subset of\nsequences, you can provide a path to a profile\ndatabase with this flag. In this case, you must also\nprovide a collection name so that we know which\nsequenes to focus on. (default: None)")), ToolInput(tag="in_collection_name", input_type=String(optional=True), prefix="--collection-name", doc=InputDocumentation(doc="Name of collection you want to focus on. Provide this\n(along with a profile db) if you only want to annotate\ngene calls in a certain set of bins. (default: None)")), ToolInput(tag="in_kegg_data_dir", input_type=File(optional=True), prefix="--kegg-data-dir", doc=InputDocumentation(doc="The directory path for your KEGG setup, which will\ninclude things like KOfam profiles and KEGG MODULE\ndata. Anvi'o will try to use the default path if you\ndo not specify anything. (default: None)")), ToolInput(tag="in_num_threads", input_type=Int(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="Maximum number of threads to use for multithreading\nwhenever possible. Very conservatively, the default is\n1. It is a good idea to not exceed the number of CPUs\n/ cores on your system. Plus, please be careful with\nthis option if you are running your commands on a SGE\n--if you are clusterizing your runs, and asking for\nmultiple threads to use, you may deplete your\nresources very fast. (default: 1)")), ToolInput(tag="in_hmmer_program", input_type=Int(optional=True), prefix="--hmmer-program", doc=InputDocumentation(doc="Which of the HMMER programs to use to run HMMs\n(hmmscan or hmmsearch). By default anvi'o will use\nhmmscan for typical HMM operations like those in anvi-\nrun-hmms (as these tend to scan a very large number of\ngenes against a relatively small number of HMMs), but\nif you are using this program to scan a very large\nnumber of HMMs, hmmsearch might be a better choice for\nperformance. For this reason, hmmsearch is the default\nin operations like anvi-run-pfams and anvi-run-kegg-\nkofams. See this article for a discussion on the\nperformance of these two programs:\nhttps://cryptogenomicon.org/2011/05/27/hmmscan-vs-\nhmmsearch-speed-the-numerology/ (default: None)")), ToolInput(tag="in_keep_all_hits", input_type=Boolean(optional=True), prefix="--keep-all-hits", doc=InputDocumentation(doc="If you use this flag, anvi'o will not get rid of any\nraw HMM hits, even those that are below the score\nthreshold. (default: False)")), ToolInput(tag="in_log_bit_scores", input_type=Boolean(optional=True), prefix="--log-bitscores", doc=InputDocumentation(doc="Use this flag to generate a tab-delimited text file\ncontaining the bit scores of every KOfam hit that is\nput in the contigs database. (default: False)")), ToolInput(tag="in_just_do_it", input_type=Boolean(optional=True), prefix="--just-do-it", doc=InputDocumentation(doc="Don't bother me with questions or warnings, just do\nit. (default: False)"))], outputs=[], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Run_Kegg_Kofams_V0_1_0().translate("wdl")

