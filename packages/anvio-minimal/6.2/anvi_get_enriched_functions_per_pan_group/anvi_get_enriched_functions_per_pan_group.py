from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean

Anvi_Get_Enriched_Functions_Per_Pan_Group_V0_1_0 = CommandToolBuilder(tool="anvi_get_enriched_functions_per_pan_group", base_command=["anvi-get-enriched-functions-per-pan-group"], inputs=[ToolInput(tag="in_o", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[-F FILE]")), ToolInput(tag="in_pan_db", input_type=String(optional=True), prefix="--pan-db", doc=InputDocumentation(doc="Anvi'o pan database")), ToolInput(tag="in_genomes_storage", input_type=File(optional=True), prefix="--genomes-storage", doc=InputDocumentation(doc="Anvi'o genomes storage file")), ToolInput(tag="in_category_variable", input_type=String(optional=True), prefix="--category-variable", doc=InputDocumentation(doc="The additional layers data variable name that divides\nlayers into multiple categories.")), ToolInput(tag="in_annotation_source", input_type=String(optional=True), prefix="--annotation-source", doc=InputDocumentation(doc="NAME\nGet functional annotations for a specific annotation\nsource. You can use the flag '--list-annotation-\nsources' to learn about what sources are available.")), ToolInput(tag="in_list_annotation_sources", input_type=Boolean(optional=True), prefix="--list-annotation-sources", doc=InputDocumentation(doc="List available functional annotation sources.")), ToolInput(tag="in_include_gc_identity_as_function", input_type=Boolean(optional=True), prefix="--include-gc-identity-as-function", doc=InputDocumentation(doc="This is an option that asks anvi'o to treat gene\ncluster names as functions. By doing so, you are in\nfact creating an opportunity to study functional\nenrichment statistics for each gene cluster\nindependently. For instance, multiple gene clusters\nmay have the same COG function. But if you wish to use\nthe same enrichment analysis in your pangenome without\ncollapsing multiple gene clusters into a single\nfunction name, you can use this flag, and ask for\n'IDENTITY' as the functional annotation source.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File path to store results.")), ToolInput(tag="in_functional_occurrence_table_output", input_type=File(optional=True), prefix="--functional-occurrence-table-output", doc=InputDocumentation(doc="Saves the occurrence frequency information for\nfunctions in genomes in a TAB-delimited format. A file\nname must be provided. To learn more about how the\nfunctional occurrence is computed, please refer to the\ntutorial.")), ToolInput(tag="in_exclude_ungrouped", input_type=Boolean(optional=True), prefix="--exclude-ungrouped", doc=InputDocumentation(doc="Use this flag if you want anvi'o to ignore genomes\nwith no value set for the catergory variable (which\nyou specified using --category-variable). By default\nall variables with no value will be considered as a\nsingle group when preforming the statistical analysis.")), ToolInput(tag="in_just_do_it", input_type=Boolean(optional=True), prefix="--just-do-it", doc=InputDocumentation(doc="Don't bother me with questions or warnings, just do\nit.\n"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store results."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Get_Enriched_Functions_Per_Pan_Group_V0_1_0().translate("wdl", allow_empty_container=True)

