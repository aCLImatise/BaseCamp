from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File, Int

Anvi_Estimate_Scg_Taxonomy_V0_1_0 = CommandToolBuilder(tool="anvi_estimate_scg_taxonomy", base_command=["anvi-estimate-scg-taxonomy"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs'")), ToolInput(tag="in_meta_genome_mode", input_type=Boolean(optional=True), prefix="--metagenome-mode", doc=InputDocumentation(doc="Treat a given contigs database as a metagenome rather\nthan treating it as a single genome.")), ToolInput(tag="in_profile_db", input_type=String(optional=True), prefix="--profile-db", doc=InputDocumentation(doc="Anvi'o profile database")), ToolInput(tag="in_collection_name", input_type=String(optional=True), prefix="--collection-name", doc=InputDocumentation(doc="Collection name.")), ToolInput(tag="in_meta_genomes", input_type=File(optional=True), prefix="--metagenomes", doc=InputDocumentation(doc="A two-column TAB-delimited flat text file. The header\nline must contain these columns: 'name',\n'contigs_db_path', and 'profile_db_path'. Each line\nshould list a single entry, where 'name' can be any\nname to describe the metagenome stored in the anvi'o\ncontigs database. In this context, the anvi'o profiles\nassociated with contigs database must be SINGLE\nPROFILES, as in generated by the program `anvi-\nprofile` and not `anvi-merge`.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File path to store results.")), ToolInput(tag="in_output_file_prefix", input_type=File(optional=True), prefix="--output-file-prefix", doc=InputDocumentation(doc="A prefix to be used while naming the output files (no\nfile type extensions please; just a prefix).")), ToolInput(tag="in_taxonomic_level", input_type=String(optional=True), prefix="--taxonomic-level", doc=InputDocumentation(doc="The taxonomic level to use whenever relevant and/or\navailable. The default taxonomic level is None, but if\nyou choose something specific, anvi'o will focus on\nthat whenever possible.")), ToolInput(tag="in_matrix_format", input_type=Boolean(optional=True), prefix="--matrix-format", doc=InputDocumentation(doc="If you want the reports to look like sparse matrices\nwhenever possible, declare this flag. Matrices are\nespecially good to use when you are working with\ninternal/external genomes since they can show you\nquickly the distribution of each taxon across all\nmetagenomes in programs like EXCEL. WELL TRY IT AND\nSEE.")), ToolInput(tag="in_raw_output", input_type=Boolean(optional=True), prefix="--raw-output", doc=InputDocumentation(doc="Just store the raw output without any processing of\nthe primary data structure.")), ToolInput(tag="in_num_threads", input_type=Int(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="Maximum number of threads to use for multithreading\nwhenever possible. Very conservatively, the default is\n1. It is a good idea to not exceed the number of CPUs\n/ cores on your system. Plus, please be careful with\nthis option if you are running your commands on a SGE\n--if you are clusterizing your runs, and asking for\nmultiple threads to use, you may deplete your\nresources very fast.")), ToolInput(tag="in_scg_name_for_meta_genome_mode", input_type=String(optional=True), prefix="--scg-name-for-metagenome-mode", doc=InputDocumentation(doc="When running in metagenome mode, anvi'o automatically\nchooses the most frequent single-copy core gene to\nestimate the taxonomic composition within a contigs\ndatabase. If you have a different preference you can\nuse this parameter to communicate that.")), ToolInput(tag="in_report_scg_frequencies", input_type=File(optional=True), prefix="--report-scg-frequencies", doc=InputDocumentation(doc="Report SCG frequencies in a TAB-delimited file and\nquit. This is a great way to decide which SCG name to\nuse in metagenome mode (we often wish to use the most\nfrequent SCG to increase the detection of taxa).")), ToolInput(tag="in_just_do_it", input_type=Boolean(optional=True), prefix="--just-do-it", doc=InputDocumentation(doc="Don't bother me with questions or warnings, just do")), ToolInput(tag="in_simplify_taxonomy_information", input_type=Boolean(optional=True), prefix="--simplify-taxonomy-information", doc=InputDocumentation(doc="The taxonomy output may include a large number of\nnames that contain clade-specific code for not-yet-\ncharacterized taxa. With this flag you can simplify\ntaxon names. This will influence all output files and\ndisplays as the use of this flag will on-the-fly trim\ntaxonomic levels with clade-specific code names.")), ToolInput(tag="in_compute_scg_coverages", input_type=Boolean(optional=True), prefix="--compute-scg-coverages", doc=InputDocumentation(doc="When this flag is declared, anvi'o will go back to the\nprofile database to learn coverage statistics of\nsingle-copy core genes for which we have taxonomy\ninformation.")), ToolInput(tag="in_update_profile_db_with_taxonomy", input_type=Boolean(optional=True), prefix="--update-profile-db-with-taxonomy", doc=InputDocumentation(doc="When anvi'o knows all both taxonomic affiliations and\ncoverages across samples for single-copy core genes,\nit can, in theory add this information to the profile\ndatabase. With this flag you can instruct anvi'o to do\nthat and find information on taxonomy in the `layers`\ntab of your interactive interface.")), ToolInput(tag="in_taxonomy_database", input_type=File(optional=True), prefix="--taxonomy-database", doc=InputDocumentation(doc="Path to the directory that contains the BLAST\ndatabases for single-copy core genes. You will almost\nnever need to use this parameter unless you are trying\nsomething very fancy. But when you do, you can tell\nanvi'o where to look for database files through this\nparameter.\n")), ToolInput(tag="in_it_dot", input_type=String(), position=0, doc=InputDocumentation(doc="ADVANCED:"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store results.")), ToolOutput(tag="out_output_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_prefix", type_hint=File()), doc=OutputDocumentation(doc="A prefix to be used while naming the output files (no\nfile type extensions please; just a prefix)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Estimate_Scg_Taxonomy_V0_1_0().translate("wdl", allow_empty_container=True)

