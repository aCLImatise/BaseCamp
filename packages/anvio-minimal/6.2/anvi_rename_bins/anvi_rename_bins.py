from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, File, Boolean

Anvi_Rename_Bins_V0_1_0 = CommandToolBuilder(tool="anvi_rename_bins", base_command=["anvi-rename-bins"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs'")), ToolInput(tag="in_profile_db", input_type=String(optional=True), prefix="--profile-db", doc=InputDocumentation(doc="Anvi'o profile database")), ToolInput(tag="in_collection_to_read", input_type=String(optional=True), prefix="--collection-to-read", doc=InputDocumentation(doc="Collection name to read from. Anvi'o will not\noverwrite an existing collection, instead, it will\ncreate a copy of your collection with new bin names.")), ToolInput(tag="in_collection_to_write", input_type=String(optional=True), prefix="--collection-to-write", doc=InputDocumentation(doc="The new collection name. Give it a nice, fancy name.")), ToolInput(tag="in_prefix", input_type=Int(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix for the bin names. Must be a single word,\ncomposed of digits and numbers. The use of the\nunderscore character is OK, but that's about it (fine,\nthe use of the dash character is OK, too but no\nmore!). If the prefix is 'PREFIX', each bin will be\nrenamed as 'PREFIX_XXX_00001, PREFIX_XXX_00002', and\nso on, in the order of percent completion minus\npercent redundancy (what we call, 'substantive\ncompletion'). The 'XXX' part will either be 'Bin', or\n'MAG depending on other parameters you use. Keep\nreading.")), ToolInput(tag="in_report_file", input_type=File(optional=True), prefix="--report-file", doc=InputDocumentation(doc="This file will report each name change event, so you\ncan trace back the original names of renamed bins\nlater.")), ToolInput(tag="in_list_collections", input_type=Boolean(optional=True), prefix="--list-collections", doc=InputDocumentation(doc="Show available collections and exit.")), ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry-run", doc=InputDocumentation(doc="When used does NOT update the profile database, just\ncreates the report file so you can view how things\nwill be renamed.")), ToolInput(tag="in_call_mags", input_type=Boolean(optional=True), prefix="--call-MAGs", doc=InputDocumentation(doc="This program by default rename your bins as\n'PREFIX_Bin_00001', 'PREFIX_Bin_00002' and so on. If\nyou use this flag, it will name the ones that meet the\ncriteria described by MAG-related flags as\n'PREFIX_MAG_00001', 'PREFIX_MAG_00002', and so on. The\nones that do not get to be named as MAGs will remain\nas bins.")), ToolInput(tag="in_min_completion_for_mag", input_type=Boolean(optional=True), prefix="--min-completion-for-MAG", doc=InputDocumentation(doc="[0-100]\nIf --call-MAGs flag is used, call any bin a 'MAG' if\ntheir completion estimate is above this (the default\nis 70), and the redundancy estimate is less than\n--max-redundancy-for-MAG.")), ToolInput(tag="in_max_redundancy_for_mag", input_type=Boolean(optional=True), prefix="--max-redundancy-for-MAG", doc=InputDocumentation(doc="[0-100]\nIf --call-MAGs flag is used, call any bin a 'MAG' if\ntheir redundancy estimate is below this (the default\nis 10) and the completion estimate is above --min-\ncompletion-for-MAG.")), ToolInput(tag="in_size_for_mag", input_type=Int(optional=True), prefix="--size-for-MAG", doc=InputDocumentation(doc="If --call-MAGs flag is used, call any bin a 'MAG' if\ntheir redundancy estimate is less than --max-\nredundancy-for-MAG, AND THEIR SIZE IS LARGER THAN THIS\nVALUE REGARDLESS OF THE COMPLETION ESTIMATE. The\ndefault behavior is to not care about this at all.\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Rename_Bins_V0_1_0().translate("wdl", allow_empty_container=True)

