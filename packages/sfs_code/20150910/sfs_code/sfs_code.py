from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int, File

Sfs_Code_V0_1_0 = CommandToolBuilder(tool="sfs_code", base_command=["sfs_code"], inputs=[ToolInput(tag="in_mutation", input_type=String(optional=True), prefix="--mutation", doc=InputDocumentation(doc="[P <population>] [L <locus>] [S <site>] [G <gamma>]\nAdd mutation at specified time in a particular [P]opulation, [L]ocus,\n[S]ite, or selection effect [G]amma.")), ToolInput(tag="in_print_gen", input_type=Boolean(optional=True), prefix="--printGen", doc=InputDocumentation(doc="print the generation throughout the simulation.  only useful for long\nsimulations when the generations take a long time to run and you want\nstatus updates.")), ToolInput(tag="in_print_locus", input_type=String(optional=True), prefix="--printLocus", doc=InputDocumentation(doc="The default is to print output for all loci.  Use this option to print the output of just a single locus (or repeat to print multiple loci).")), ToolInput(tag="in_track_ancestry", input_type=Boolean(optional=True), prefix="--trackAncestry", doc=InputDocumentation(doc="[a] <file>\nprint the ancestry of each position simulated")), ToolInput(tag="in_track_trajectory", input_type=Boolean(optional=True), prefix="--trackTrajectory", doc=InputDocumentation(doc="[T <time>] [P <pop>] [L <locus>] [S <site>] [R <min_freq> <max_freq> [S] [A [G <gens>]] [M <max_reps>]] [F [a] <file>]\ntrack the frequency each generation.  [R <min_freq> <max_freq> [S]] sets\nthe desired freq range at time of sampling ([S]topping first time in\nrange).  [A] causes simulation to restart immediately after loss, or at (or\nsome [G]enerations after) time of fixation if max_freq=1.")), ToolInput(tag="in_no_seq", input_type=Boolean(optional=True), prefix="--noSeq", doc=InputDocumentation(doc="don't print ancestral sequence")), ToolInput(tag="in_annotate", input_type=Boolean(optional=True), prefix="--annotate", doc=InputDocumentation(doc="[F <filename>] [<a1> [<a2>...<aR>] [R]]\nindicate whether each locus is coding/non-coding")), ToolInput(tag="in_burn", input_type=Boolean(optional=True), prefix="--BURN", doc=InputDocumentation(doc="<burn>\nset initial burn-in length, generations/P/N")), ToolInput(tag="in_burn_two", input_type=Boolean(optional=True), prefix="--BURN2", doc=InputDocumentation(doc="<burn>\nset burn-in length of subsequent iterations > 1")), ToolInput(tag="in__psi_psiset", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="*     --PSI  [P <pop>] <psi>\nset the CpG mutation bias")), ToolInput(tag="in__constraint_fset", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="*     --constraint  [P <pop>] [L <locus>] <f0>\nset the non-lethal mutation rate")), ToolInput(tag="in_t_i_j", input_type=Boolean(optional=True), prefix="-TD", doc=InputDocumentation(doc="<t> <i> <j> <allele_freq> <N> [locus]\nonly used with -T to create a domesticated population at time <t>")), ToolInput(tag="in_t_vonly_used", input_type=Boolean(optional=True), prefix="-Td", doc=InputDocumentation(doc="<t> [P <pop>] <v>\nonly used with -T to set the demographic effects")), ToolInput(tag="in_te", input_type=Boolean(optional=True), prefix="-TE", doc=InputDocumentation(doc="<t> [pop]\nonly used with -T to end the simulation for a population at time t")), ToolInput(tag="in_errfile", input_type=Boolean(optional=True), prefix="--errfile", doc=InputDocumentation(doc="[a] <file>\nprint error to specific file")), ToolInput(tag="in_pop_freq", input_type=Boolean(optional=True), prefix="--popFreq", doc=InputDocumentation(doc="[a] <file>\ncreate file with population & sample frequencies for each event")), ToolInput(tag="in_prop_female", input_type=Boolean(optional=True), prefix="--propFemale", doc=InputDocumentation(doc="[P <pop>] <pf>\nset the proportion of females in a population")), ToolInput(tag="in__geneffect_pop", input_type=Boolean(optional=True), prefix="-G", doc=InputDocumentation(doc="*     --GenEffect  <pop> <G>\nset the generation effect for a population")), ToolInput(tag="in_tg", input_type=Boolean(optional=True), prefix="-Tg", doc=InputDocumentation(doc="[P <pop>] <alpha>\nonly used with -T to set the exponential population growth rate")), ToolInput(tag="in__geneconversion_lambdaset", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="*     --geneConversion  [P <pop>] [B <BGC>] <f> <lambda>\nset parameters for gene conversion")), ToolInput(tag="in_inf_sites", input_type=Boolean(optional=True), prefix="--INF_SITES", doc=InputDocumentation(doc="simulate infinite-sites model.  This only pertains to segregating\nvariants.  For long simulations, sites that previously received a\nfixation can mutate again.")), ToolInput(tag="in__self_sset", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="*     --self  [P <pop>] <s>\nset the selfing [not really inbreeding] rate")), ToolInput(tag="in_admix", input_type=Int(optional=True), prefix="--admix", doc=InputDocumentation(doc="<new_p> <size> <n_pop> <P_1>...<P_npop> [M <m_1>...<m_npop>] <f_1>...<f_npop>\ncreate new population with specified size by joining <n_pops> existing\npopulations")), ToolInput(tag="in_kappa_kappaset_transition", input_type=Boolean(optional=True), prefix="-K", doc=InputDocumentation(doc="*     --KAPPA  [P <pop>] <kappa>\nset transition transversion rate")), ToolInput(tag="in_tk", input_type=Boolean(optional=True), prefix="-Tk", doc=InputDocumentation(doc="[P <pop>] <K> <r>\nused with -T to implement logistic growth rate")), ToolInput(tag="in_length", input_type=Boolean(optional=True), prefix="--length", doc=InputDocumentation(doc="<nloci> <L1> [<L2>...<Ln>] [R]\nset sequence lengths and number of loci")), ToolInput(tag="in_linkage", input_type=Boolean(optional=True), prefix="--linkage", doc=InputDocumentation(doc="<p/g> <d1> [<d2>...<dn-1>] [R]\nset linkage between adjacent loci")), ToolInput(tag="in_subst_mod", input_type=Boolean(optional=True), prefix="--substMod", doc=InputDocumentation(doc="<mod> [args]\nset the substitution model")), ToolInput(tag="in__migmat_set", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="*     --mig_mat {see documentation...}\nset the migration rates to and from populations")), ToolInput(tag="in__popsize_sizeset", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="*     --popSize  [P <pop>] <size>\nset the effective size of a population")), ToolInput(tag="in__sampsize_set", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="*     --sampSize  [P <pop>] [R <tau_d>] [S <tau_1>]] <SS1> [<SS2>...<SSNpops>]\nset the number of individuals sampled from a population.  When used\nas -Tn, a time must be specified for sampling, and opens the ability for\n[R]ecurrent sampling starting at the pre-specified time, and repeat every\ntau_d*PN_A generations until the end of the simulation, or a specified\n[S]top time tau_1.  Note that the sample size must be specified at the\nend (either a single number to be applied to all populations or include\na number for every population).  You can use -Tn multiple times.")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="[a] <file>\nprint output to specific file")), ToolInput(tag="in_ploidy", input_type=Boolean(optional=True), prefix="--ploidy", doc=InputDocumentation(doc="<P>\nset the ploidy, P=1 is haploid, P=2 is diploid, P=4 is tetraploid")), ToolInput(tag="in_tetra_type", input_type=Boolean(optional=True), prefix="--tetraType", doc=InputDocumentation(doc="<0/1>\nset the type of tetraploid [allo- or auto-]")), ToolInput(tag="in__basefreq_pic", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="*   --baseFreq [P <pop>] <pi_C> <pi_G> <pi_T> <pi_A>\nset the equilibrium base frequencies (default = 0.25)")), ToolInput(tag="in_report_burn_fixed", input_type=Boolean(optional=True), prefix="--ReportBurnFixed", doc=InputDocumentation(doc="report mutations that fixed during burn-in")), ToolInput(tag="in_rho_rhoset_rate", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="*     --rho  [P <pop>] [F <filename>] <rho>\nset the recombination rate for a population")), ToolInput(tag="in_ts", input_type=Boolean(optional=True), prefix="-TS", doc=InputDocumentation(doc="<t> <i> <j>\nused with -T to split the population at a given time")), ToolInput(tag="in_seed", input_type=Boolean(optional=True), prefix="--seed", doc=InputDocumentation(doc="<value>\nset seed for random number generator")), ToolInput(tag="in_used_combination_other", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="*\nused in combination with other parameters for timed effects")), ToolInput(tag="in_thetaset_value_theta", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="*     [P <pop>] <theta>\nset the value of theta for a population")), ToolInput(tag="in__longindel_meanlengthrate", input_type=Boolean(optional=True), prefix="-U", doc=InputDocumentation(doc="*     --longIndel  [P <pop>] <INSrate> <DELrate> <mean_length>\nrate of insertion/deletions with Poisson length distribution")), ToolInput(tag="in_indel_insrate_delrate", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="*     --indel  [P <pop>] <INSrate> <DELrate> <mean_length>\nrate of insertion/deletions with geometric length distribution")), ToolInput(tag="in_rate_class_sites", input_type=Boolean(optional=True), prefix="--rateClassSites", doc=InputDocumentation(doc="[P <pop>] <nclasses> <alpha>\nmutation rate variation among SITES")), ToolInput(tag="in_rate_class_loci", input_type=Boolean(optional=True), prefix="--rateClassLoci", doc=InputDocumentation(doc="[P <pop>] <nclasses> <alpha>\nmutation rate variation among LOCI")), ToolInput(tag="in__seldisttype_set", input_type=Boolean(optional=True), prefix="-W", doc=InputDocumentation(doc="*  --selDistType  [P <pop>] [L <locus>] [F <allele_freq> [w] [T [R <min_freq> <max_freq> [S] [A [G <gens>]] [M <max_reps>]] [F [a] <file>]]] <type> [args]\nset distribution of selective effects.  See documentation for proper\nusage of <type> [args].  Set the distribution for a [P]opulation or\n[L]ocus.  In -TW mode, change selection coefficient of an existing\npolymorphism with a particular [F]requency.  If a frequency is specified,\nyou can [T]rack the allele to ensure that it achieves a particular\nfrequency [R]ange at time of sampling ([S]top the first time in range),\n[A]utomatically restart if the allele is lost (up to a [M]aximal number of\ntries), and output the trajectory to a [F]ile (or [a]ppend to existing).\nNote that tracking a mutation here prevents you from tracking a locus using\n--trackTrajectory.  Unfortunately, tracking only occurs after selection\ncoefficient changes.")), ToolInput(tag="in_neutpop_popallow_population", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="*     --neutPop  <pop>\nallow a population to be neutral")), ToolInput(tag="in_sex", input_type=Boolean(optional=True), prefix="--sex", doc=InputDocumentation(doc="<x1> [<x2 >..<xR>] [R]\nindicate whether each locus is autosomal/sex")), ToolInput(tag="in_pmalerec_pproportion_recombinants", input_type=Boolean(optional=True), prefix="-Y", doc=InputDocumentation(doc="*     --pMaleRec  [P <pop>] <p>\nproportion of recombinants occuring in male meioses vs female.")), ToolInput(tag="in_pmalemig_pmaleproportion_migrants", input_type=Boolean(optional=True), prefix="-y", doc=InputDocumentation(doc="*     --pMaleMig  [P <pop>] <pmale>\nproportion of migrants that are male")), ToolInput(tag="in_additive", input_type=Boolean(optional=True), prefix="--additive", doc=InputDocumentation(doc="specify an additive model of selective effects instead of multiplicative")), ToolInput(tag="in_inversions_invrate_meanlengthrate", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="*     --inversions  [P <pop>] <INVrate> <mean_length>\nrate of inversions with Poisson length distribution\n"))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc="[a] <file>\nprint output to specific file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sfs_Code_V0_1_0().translate("wdl", allow_empty_container=True)

