from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Float, Boolean

Statistic_Pl_V0_1_0 = CommandToolBuilder(tool="statistic.pl", base_command=["statistic.pl"], inputs=[ToolInput(tag="in_n_gram", input_type=File(optional=True), prefix="--ngram", doc=InputDocumentation(doc="Assumes that n-grams in SOURCE file have N\ntokens each. N = 2 by default.")), ToolInput(tag="in_set_freq_combo", input_type=File(optional=True), prefix="--set_freq_combo", doc=InputDocumentation(doc="Uses the frequency combinations in FILE to\ndecode the 'meaning' of the frequency\nvalues in SOURCE. By default, the default\nfrequency combinations output by count.pl\nfor ngrams of size N are assumed.")), ToolInput(tag="in_get_freq_combo", input_type=File(optional=True), prefix="--get_freq_combo", doc=InputDocumentation(doc="Prints out the frequency combinations being\nused to FILE. If frequency combinations have\nbeen provided through --set_freq_combo switch\nabove these are output; otherwise the default\ncombinations being used are output.")), ToolInput(tag="in_frequency", input_type=String(optional=True), prefix="--frequency", doc=InputDocumentation(doc="Ignores all n-grams with frequency < N.")), ToolInput(tag="in_rank", input_type=String(optional=True), prefix="--rank", doc=InputDocumentation(doc="Shows only n-grams with rank <= N.")), ToolInput(tag="in_precision", input_type=Float(optional=True), prefix="--precision", doc=InputDocumentation(doc="Displays values upto N places of decimal.")), ToolInput(tag="in_score", input_type=String(optional=True), prefix="--score", doc=InputDocumentation(doc="Shows only n-grams which have score >= N.")), ToolInput(tag="in_extended", input_type=Boolean(optional=True), prefix="--extended", doc=InputDocumentation(doc="Outputs chosen parameters in 'extended'\nformat, and retains any extended data in\nSOURCE. By default, suppresses any extended\ninformation in SOURCE, and outputs no new\nparameters.")), ToolInput(tag="in_format", input_type=Boolean(optional=True), prefix="--format", doc=InputDocumentation(doc="Creates formatted output.")), ToolInput(tag="in_statistic_library", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_destination", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_source", input_type=String(), position=2, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_get_freq_combo", output_type=File(optional=True), selector=InputSelector(input_to_select="in_get_freq_combo", type_hint=File()), doc=OutputDocumentation(doc="Prints out the frequency combinations being\nused to FILE. If frequency combinations have\nbeen provided through --set_freq_combo switch\nabove these are output; otherwise the default\ncombinations being used are output."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Statistic_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

