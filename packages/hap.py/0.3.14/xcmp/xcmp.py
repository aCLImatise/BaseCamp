from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Xcmp_V0_1_0 = CommandToolBuilder(tool="xcmp", base_command=["xcmp"], inputs=[ToolInput(tag="in_input_v_cfs", input_type=File(optional=True), prefix="--input-vcfs", doc=InputDocumentation(doc="Two VCF files to compare (use file:sample\nfor a specific sample column).")), ToolInput(tag="in_arg_output_variant", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output-vcf ] arg          Output variant comparison results to VCF.")), ToolInput(tag="in_arg_output_failure", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --output-errors ] arg       Output failure information.")), ToolInput(tag="in_arg_reference_fasta", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg           The reference fasta file.")), ToolInput(tag="in_arg_location_start", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --location ] arg            The location to start at.")), ToolInput(tag="in_arg_subset_ofregions", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --regions ] arg             Use a bed file for getting a subset of\nregions (traversal via tabix).")), ToolInput(tag="in_subset_oftargets_streaming", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --targets ] arg             Use a bed file for getting a subset of\ntargets (streaming the whole file, ignoring\nthings outside the bed regions).")), ToolInput(tag="in_arg_field_use", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="[ --qq ] arg                  Field to use for quality scoring (this will\nbe output as the QQ info field).")), ToolInput(tag="in_progress", input_type=String(optional=True), prefix="--progress", doc=InputDocumentation(doc="Set to true to output progress information.")), ToolInput(tag="in_progress_seconds", input_type=String(optional=True), prefix="--progress-seconds", doc=InputDocumentation(doc="Output progress information every n seconds.")), ToolInput(tag="in_arg_overlap_window", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[ --window ] arg              Overlap window to create haplotype blocks.")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --max-n-haplotypes ] arg    Maximum number of haplotypes to enumerate.")), ToolInput(tag="in_expand_hap_blocks", input_type=Int(optional=True), prefix="--expand-hapblocks", doc=InputDocumentation(doc="Number of bases to expand around each\nhaplotype block.")), ToolInput(tag="in_limit", input_type=Int(optional=True), prefix="--limit", doc=InputDocumentation(doc="Maximum number of haplotype blocks to")), ToolInput(tag="in_arg_apply_filtering", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --apply-filters-query ] arg Apply filtering in query VCF (off by\ndefault).")), ToolInput(tag="in_always_hap_cmp", input_type=String(optional=True), prefix="--always-hapcmp", doc=InputDocumentation(doc="Always compare haplotype blocks (even if\nthey match). Testing use only/slow.")), ToolInput(tag="in_no_hap_cmp", input_type=String(optional=True), prefix="--no-hapcmp", doc=InputDocumentation(doc="Disable haplotype comparison. This overrides\nall other haplotype comparison options.\n")), ToolInput(tag="in_process_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--apply-filters-truth arg        Apply filtering in truth VCF (on by "))], outputs=[], container="quay.io/biocontainers/hap.py:0.3.14--py27h5c5a3ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Xcmp_V0_1_0().translate("wdl")

