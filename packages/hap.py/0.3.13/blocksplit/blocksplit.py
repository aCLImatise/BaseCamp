from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Blocksplit_V0_1_0 = CommandToolBuilder(tool="blocksplit", base_command=["blocksplit"], inputs=[ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--input-file", doc=InputDocumentation(doc="The input VCF/BCF file(s) (use file:sample to\nspecify a sample)")), ToolInput(tag="in_arg_write_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output ] arg        Write a bed file giving the locations of\noverlapping blocks (use - for stdout).")), ToolInput(tag="in_arg_use_regionstraversal", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --regions ] arg       Use a bed file for getting a subset of regions\n(traversal via tabix).")), ToolInput(tag="in_targetsstreaming_whole_file", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --targets ] arg       Use a bed file for getting a subset of targets\n(streaming the whole file, ignoring things outside\nthe bed regions).")), ToolInput(tag="in_arg_location_subset", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --location ] arg      The location / subset.")), ToolInput(tag="in_arg_maximum_number_records", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="[ --limit-records ] arg Maximum number of records to process")), ToolInput(tag="in_arg_print_message", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --message-every ] arg Print a message every N records.")), ToolInput(tag="in_arg_overlap_window", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[ --window ] arg        Overlap window length.")), ToolInput(tag="in_arg_maximum_number_blocks", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --nblocks ] arg       Maximum number of blocks to break into (32).")), ToolInput(tag="in_arg_minimum_number", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --nvars ] arg         Minimum number of variants per block (100).")), ToolInput(tag="in_arg_apply_filtering", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --apply-filters ] arg Apply filtering in VCF.")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output."))], outputs=[ToolOutput(tag="out_arg_write_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_write_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output ] arg        Write a bed file giving the locations of\noverlapping blocks (use - for stdout)."))], container="quay.io/biocontainers/hap.py:0.3.13--py27h5c5a3ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Blocksplit_V0_1_0().translate("wdl")

