from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int

Roc_V0_1_0 = CommandToolBuilder(tool="roc", base_command=["roc"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="show verbose information (to stderr)")), ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--input-file", doc=InputDocumentation(doc="The input files")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output-file ] arg  Output file name, defaults to - / write to stdout")), ToolInput(tag="in_arg_separator_character", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --separator ] arg    separator character (default: '\t' for reading tsv)")), ToolInput(tag="in_arg_lines_skip", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="[ --header-lines ] arg lines to skip before starting to read")), ToolInput(tag="in_arg_value_column", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --value ] arg        value column name")), ToolInput(tag="in_value_column", input_type=Int(optional=True), prefix="--value-column", doc=InputDocumentation(doc="value column number")), ToolInput(tag="in_arg_reverse_counting", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --reverse ] arg      Reverse counting for score (default: higher scores\nare better)")), ToolInput(tag="in_arg_tag_column", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --tag ] arg          tag column name")), ToolInput(tag="in_tag_column", input_type=Int(optional=True), prefix="--tag-column", doc=InputDocumentation(doc="tag column number. Tags must be TP/FP/FN, lines\nwith different tags will be ignored")), ToolInput(tag="in_arg_filter_column", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --filter ] arg       filter column name")), ToolInput(tag="in_filter_column", input_type=Int(optional=True), prefix="--filter-column", doc=InputDocumentation(doc="filter column number. This is used if we the value\nwe are varying is a threshold for a certain filter.")), ToolInput(tag="in_arg_filter_name", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --filter-name ] arg  filter name if value is threshold for this filter"))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output-file ] arg  Output file name, defaults to - / write to stdout"))], container="quay.io/biocontainers/hap.py:0.3.13--py27h5c5a3ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Roc_V0_1_0().translate("wdl")

