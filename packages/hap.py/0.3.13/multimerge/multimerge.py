from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Multimerge_V0_1_0 = CommandToolBuilder(tool="multimerge", base_command=["multimerge"], inputs=[ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--input-file", doc=InputDocumentation(doc="The input files")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output-file ] arg   The output file name.")), ToolInput(tag="in_arg_reference_fasta", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg     The reference fasta file.")), ToolInput(tag="in_arg_start_location", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --location ] arg      Start location.")), ToolInput(tag="in_arg_use_regionstraversal", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --regions ] arg       Use a bed file for getting a subset of regions\n(traversal via tabix).")), ToolInput(tag="in_targetsstreaming_whole_file", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --targets ] arg       Use a bed file for getting a subset of targets\n(streaming the whole file, ignoring things outside\nthe bed regions).")), ToolInput(tag="in_limit_records", input_type=String(optional=True), prefix="--limit-records", doc=InputDocumentation(doc="Maximum umber of records to process")), ToolInput(tag="in_message_every", input_type=String(optional=True), prefix="--message-every", doc=InputDocumentation(doc="Print a message every N records.")), ToolInput(tag="in_arg_apply_filtering", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --apply-filters ] arg Apply filtering in VCF.")), ToolInput(tag="in_left_shift", input_type=String(optional=True), prefix="--leftshift", doc=InputDocumentation(doc="Leftshift variant alleles.")), ToolInput(tag="in_trim_alleles", input_type=String(optional=True), prefix="--trimalleles", doc=InputDocumentation(doc="Remove unused variant alleles.")), ToolInput(tag="in_split_alleles", input_type=String(optional=True), prefix="--splitalleles", doc=InputDocumentation(doc="Split and sort variant alleles.")), ToolInput(tag="in_merge_by_location", input_type=String(optional=True), prefix="--merge-by-location", doc=InputDocumentation(doc="Merge calls at the same location.")), ToolInput(tag="in_unique_alleles", input_type=String(optional=True), prefix="--unique-alleles", doc=InputDocumentation(doc="Make alleles unique across a single line.")), ToolInput(tag="in_hom_ref_split", input_type=String(optional=True), prefix="--homref-split", doc=InputDocumentation(doc="Split homref blocks into per-nucleotide blocks.")), ToolInput(tag="in_hom_ref_vcf_out", input_type=String(optional=True), prefix="--homref-vcf-out", doc=InputDocumentation(doc="Output split homref blocks as BCF/VCF.")), ToolInput(tag="in_calls_only", input_type=String(optional=True), prefix="--calls-only", doc=InputDocumentation(doc="Remove homref blocks.")), ToolInput(tag="in_primitives", input_type=String(optional=True), prefix="--primitives", doc=InputDocumentation(doc="Split complex alleles into primitives via")), ToolInput(tag="in_process_formats", input_type=String(optional=True), prefix="--process-formats", doc=InputDocumentation(doc="Process GQ/DP/AD format fields.")), ToolInput(tag="in_realignment_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--process-split arg        Enables splitalleles, trimalleles, unique-alleles,")), ToolInput(tag="in_left_shift_dot", input_type=String(), position=1, doc=InputDocumentation(doc="--process-full arg         Enables splitalleles, trimalleles, unique-alleles,"))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output-file ] arg   The output file name."))], container="quay.io/biocontainers/hap.py:0.3.13--py27h5c5a3ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Multimerge_V0_1_0().translate("wdl")

