from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Float, Int, String

Advntr_Genotype_V0_1_0 = CommandToolBuilder(tool="advntr_genotype", base_command=["advntr", "genotype"], inputs=[ToolInput(tag="in_alignment_file", input_type=File(optional=True), prefix="--alignment_file", doc=InputDocumentation(doc="alignment file in SAM/BAM/CRAM format")), ToolInput(tag="in_reference_filename", input_type=File(optional=True), prefix="--reference_filename", doc=InputDocumentation(doc="path to a FASTA-formatted reference file for CRAM files. It overrides\nfilename specified in header, which is normally used to find the reference")), ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Fasta file containing raw reads")), ToolInput(tag="in_pac_bio", input_type=Boolean(optional=True), prefix="--pacbio", doc=InputDocumentation(doc="set this flag if input file contains PacBio reads instead of Illumina reads")), ToolInput(tag="in_nano_pore", input_type=Boolean(optional=True), prefix="--nanopore", doc=InputDocumentation(doc="set this flag if input file contains Nanopore MinION reads instead of")), ToolInput(tag="in_frameshift", input_type=Boolean(optional=True), prefix="--frameshift", doc=InputDocumentation(doc="set this flag to search for frameshifts in VNTR instead of copy number.\nSupported VNTR IDs: [25561, 519759]")), ToolInput(tag="in_expansion", input_type=Boolean(optional=True), prefix="--expansion", doc=InputDocumentation(doc="set this flag to determine long expansion from PCR-free data")), ToolInput(tag="in_coverage", input_type=Float(optional=True), prefix="--coverage", doc=InputDocumentation(doc="average sequencing coverage in PCR-free sequencing")), ToolInput(tag="in_haploid", input_type=Boolean(optional=True), prefix="--haploid", doc=InputDocumentation(doc="set this flag if the organism is haploid")), ToolInput(tag="in_naive", input_type=Boolean(optional=True), prefix="--naive", doc=InputDocumentation(doc="use naive approach for PacBio reads")), ToolInput(tag="in_working_directory", input_type=File(optional=True), prefix="--working_directory", doc=InputDocumentation(doc="working directory for creating temporary files needed for computation")), ToolInput(tag="in_models", input_type=File(optional=True), prefix="--models", doc=InputDocumentation(doc="VNTR models file [vntr_data/hg19_selected_VNTRs_Illumina.db]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="number of threads [1]")), ToolInput(tag="in_update", input_type=Boolean(optional=True), prefix="--update", doc=InputDocumentation(doc="set this flag to iteratively update the model")), ToolInput(tag="in_vntr_id", input_type=String(optional=True), prefix="--vntr_id", doc=InputDocumentation(doc="comma-separated list of VNTR IDs")), ToolInput(tag="in_illumina", input_type=String(), position=0, doc=InputDocumentation(doc="-o/--outfile <file>             file to write results. adVNTR writes output to stdout if oufile is not")), ToolInput(tag="in_specified_dot", input_type=String(), position=1, doc=InputDocumentation(doc="-of/--outfmt <format>           output format. Allowed values are {text, bed} [text]"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Advntr_Genotype_V0_1_0().translate("wdl", allow_empty_container=True)

