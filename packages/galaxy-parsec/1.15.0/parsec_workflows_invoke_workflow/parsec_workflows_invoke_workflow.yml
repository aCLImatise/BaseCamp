!Command
command:
- parsec
- workflows
- invoke_workflow
positional:
- !Positional
  optional: false
  position: 0
  name: invocation.
  description: "Output:\nA dict containing the workflow invocation describing the\n\
    scheduling of the workflow. For example::\n{'history_id': '2f94e8ae9edff68a',\
    \              'id':\n'df7a1f0c02a5b08e',              'inputs': {'0': {'id':\n\
    'a7db2fac67043c7e',                               'src':\n'hda',             \
    \                  'uuid':\n'7932ffe0-2340-4952-8857-dbaa50f1f46a'}},\n'model_class':\
    \ 'WorkflowInvocation',              'state':\n'ready',              'steps':\
    \ [{'action': None,\n'id': 'd413a19dec13d11e',                         'job_id':\n\
    None,                         'model_class':\n'WorkflowInvocationStep',\n'order_index':\
    \ 0,                         'state': None,\n'update_time': '2015-10-31T22:00:26',\n\
    'workflow_step_id': 'cbbbf59e8f08c98c',\n'workflow_step_label': None,\n'workflow_step_uuid':\
    \ 'b81250fd-3278-4e6a-b269-56a1f01ef485'},\n{'action': None,                 \
    \        'id':\n'2f94e8ae9edff68a',                         'job_id':\n'e89067bb68bee7a0',\
    \                         'model_class':\n'WorkflowInvocationStep',\n'order_index':\
    \ 1,                         'state': 'new',\n'update_time': '2015-10-31T22:00:26',\n\
    'workflow_step_id': '964b37715ec9bd22',\n'workflow_step_label': None,\n'workflow_step_uuid':\n\
    'e62440b8-e911-408b-b124-e05435d3125e'}],\n'update_time': '2015-10-31T22:00:26',\
    \              'uuid':\n'c8aa2b1c-801a-11e5-a9e5-8ca98228593c',\n'workflow_id':\
    \ '03501d7626bd192f'}\nThe ``params`` dict should be specified as follows::\n\
    {STEP_ID: PARAM_DICT, ...}\nwhere PARAM_DICT is::\n{PARAM_NAME: VALUE, ...}\n\
    For backwards compatibility, the following (deprecated) format is\nalso supported\
    \ for ``params``::\n{TOOL_ID: PARAM_DICT, ...}\nin which case PARAM_DICT affects\
    \ all steps with the given tool id.\nIf both by-tool-id and by-step-id specifications\
    \ are used, the\nlatter takes precedence.\nFinally (again, for backwards compatibility),\
    \ PARAM_DICT can also\nbe specified as::\n{'param': PARAM_NAME, 'value': VALUE}\n\
    Note that this format allows only one parameter to be set per\nstep.\nFor a ``repeat``\
    \ parameter, the names of the contained parameters\nneeds         to be specified\
    \ as ``<repeat name>_<repeat\nindex>|<param name>``, with         the repeat index\
    \ starting at\n0. For example, if the tool XML contains::\n<repeat name=\"cutoff\"\
    \ title=\"Parameters used to filter cells\"\nmin=\"1\">               <param name=\"\
    name\" type=\"text\"\nvalue=\"n_genes\" label=\"Name of param...\">\n<option value=\"\
    n_genes\">n_genes</option>\n<option value=\"n_counts\">n_counts</option>\n</param>\
    \               <param name=\"min\" type=\"float\" min=\"0\"\nvalue=\"0\" label=\"\
    Min value\"/>           </repeat>\nthen the PARAM_DICT should be something like::\n\
    {...            \"cutoff_0|name\": \"n_genes\",\n\"cutoff_0|min\": \"2\",    \
    \        \"cutoff_1|name\": \"n_counts\",\n\"cutoff_1|min\": \"4\",          \
    \  ...}\nAt the time of this writing, it is not possible to change the\nnumber\
    \ of         times the contained parameters are repeated.\nTherefore, the parameter\
    \         indexes can go from 0 to n-1,\nwhere n is the number of times the  \
    \       repeated element was\nadded when the workflow was saved in the Galaxy\
    \ UI.\nThe ``replacement_params`` dict should map parameter names in\npost-job\
    \ actions (PJAs) to their runtime values. For\ninstance, if the final step has\
    \ a PJA like the following::\n{'RenameDatasetActionout_file1': {'action_arguments':\n\
    {'newname': '${output}'},\n'action_type': 'RenameDatasetAction',\n'output_name':\
    \ 'out_file1'}}\nthen the following renames the output dataset to 'foo'::\nreplacement_params\
    \ = {'output': 'foo'}\nsee also `this email thread\n<http://lists.bx.psu.edu/pipermail/galaxy-\n\
    dev/2011-September/006875.html>`_.\n.. warning::           Historically, the ``run_workflow``\
    \ method\nconsumed a ``dataset_map``           data structure that was\nindexed\
    \ by unencoded workflow step IDs. These           IDs would\nnot be stable across\
    \ Galaxy instances. The new ``inputs``\nproperty is instead indexed by either\
    \ the ``order_index`` property\n(which is stable across workflow imports) or the\
    \ step UUID which\nis           also stable."
named:
- !Flag
  optional: true
  synonyms:
  - --inputs
  description: "A mapping of workflow inputs to datasets and\ndataset collections.\
    \ The datasets source can\nbe a LibraryDatasetDatasetAssociation\n(``ldda``),\
    \ LibraryDataset (``ld``),\nHistoryDatasetAssociation (``hda``), or\nHistoryDatasetCollectionAssociation\n\
    (``hdca``)."
  args: !SimpleFlagArg
    name: TEXT
- !Flag
  optional: true
  synonyms:
  - --params
  description: "A mapping of non-datasets tool parameters\n(see below)"
  args: !SimpleFlagArg
    name: TEXT
- !Flag
  optional: true
  synonyms:
  - --history_id
  description: "The encoded history ID where to store the\nworkflow output. Alternatively,\n\
    ``history_name`` may be specified to create\na new history."
  args: !SimpleFlagArg
    name: TEXT
- !Flag
  optional: true
  synonyms:
  - --history_name
  description: "Create a new history with the given name to\nstore the workflow output.\
    \ If both\n``history_id`` and ``history_name`` are\nprovided, ``history_name``\
    \ is ignored. If\nneither is specified, a new 'Unnamed\nhistory' is created."
  args: !SimpleFlagArg
    name: TEXT
- !Flag
  optional: true
  synonyms:
  - --import_inputs_to_history
  description: "If ``True``, used workflow inputs will be\nimported into the history.\
    \ If ``False``,\nonly workflow outputs will be visible in the\ngiven history."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --replacement_params
  description: "pattern-based replacements for post-job\nactions (see below)"
  args: !SimpleFlagArg
    name: TEXT
- !Flag
  optional: true
  synonyms:
  - --allow_tool_state_corrections
  description: "If True, allow Galaxy to fill in missing\ntool state when running\
    \ workflows. This may\nbe useful for workflows using tools that\nhave changed\
    \ over time or for workflows\nbuilt outside of Galaxy with only a subset\nof inputs\
    \ defined."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --inputs_by
  description: "Determines how inputs are referenced. Can be\n\"step_index|step_uuid\"\
    \ (default),\n\"step_index\", \"step_id\", \"step_uuid\", or\n\"name\"."
  args: !SimpleFlagArg
    name: TEXT
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: Show this message and exit.
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "Usage: parsec workflows invoke_workflow [OPTIONS] WORKFLOW_ID\n\n  Invoke\
  \ the workflow identified by ``workflow_id``. This will cause a\n  workflow to be\
  \ scheduled and return an object describing the workflow\n  invocation.\n\n  Output:\n\
  \n      A dict containing the workflow invocation describing the\n      scheduling\
  \ of the workflow. For example::\n\n              {'history_id': '2f94e8ae9edff68a',\
  \              'id':\n              'df7a1f0c02a5b08e',              'inputs': {'0':\
  \ {'id':\n              'a7db2fac67043c7e',                               'src':\n\
  \              'hda',                               'uuid':\n              '7932ffe0-2340-4952-8857-dbaa50f1f46a'}},\n\
  \              'model_class': 'WorkflowInvocation',              'state':\n    \
  \          'ready',              'steps': [{'action': None,\n              'id':\
  \ 'd413a19dec13d11e',                         'job_id':\n              None,   \
  \                      'model_class':\n              'WorkflowInvocationStep',\n\
  \              'order_index': 0,                         'state': None,\n      \
  \        'update_time': '2015-10-31T22:00:26',\n              'workflow_step_id':\
  \ 'cbbbf59e8f08c98c',\n              'workflow_step_label': None,\n            \
  \  'workflow_step_uuid': 'b81250fd-3278-4e6a-b269-56a1f01ef485'},\n            \
  \  {'action': None,                         'id':\n              '2f94e8ae9edff68a',\
  \                         'job_id':\n              'e89067bb68bee7a0',         \
  \                'model_class':\n              'WorkflowInvocationStep',\n     \
  \         'order_index': 1,                         'state': 'new',\n          \
  \    'update_time': '2015-10-31T22:00:26',\n              'workflow_step_id': '964b37715ec9bd22',\n\
  \              'workflow_step_label': None,\n              'workflow_step_uuid':\n\
  \              'e62440b8-e911-408b-b124-e05435d3125e'}],\n              'update_time':\
  \ '2015-10-31T22:00:26',              'uuid':\n              'c8aa2b1c-801a-11e5-a9e5-8ca98228593c',\n\
  \              'workflow_id': '03501d7626bd192f'}\n\n          The ``params`` dict\
  \ should be specified as follows::\n\n            {STEP_ID: PARAM_DICT, ...}\n\n\
  \          where PARAM_DICT is::\n\n            {PARAM_NAME: VALUE, ...}\n\n   \
  \       For backwards compatibility, the following (deprecated) format is\n    \
  \      also supported for ``params``::\n\n            {TOOL_ID: PARAM_DICT, ...}\n\
  \n          in which case PARAM_DICT affects all steps with the given tool id.\n\
  \          If both by-tool-id and by-step-id specifications are used, the\n    \
  \      latter takes precedence.\n\n          Finally (again, for backwards compatibility),\
  \ PARAM_DICT can also\n          be specified as::\n\n            {'param': PARAM_NAME,\
  \ 'value': VALUE}\n\n          Note that this format allows only one parameter to\
  \ be set per\n          step.\n\n          For a ``repeat`` parameter, the names\
  \ of the contained parameters\n          needs         to be specified as ``<repeat\
  \ name>_<repeat\n          index>|<param name>``, with         the repeat index\
  \ starting at\n          0. For example, if the tool XML contains::\n\n        \
  \    <repeat name=\"cutoff\" title=\"Parameters used to filter cells\"\n       \
  \     min=\"1\">               <param name=\"name\" type=\"text\"\n            value=\"\
  n_genes\" label=\"Name of param...\">\n            <option value=\"n_genes\">n_genes</option>\n\
  \            <option value=\"n_counts\">n_counts</option>\n            </param>\
  \               <param name=\"min\" type=\"float\" min=\"0\"\n            value=\"\
  0\" label=\"Min value\"/>           </repeat>\n\n          then the PARAM_DICT should\
  \ be something like::\n\n            {...            \"cutoff_0|name\": \"n_genes\"\
  ,\n            \"cutoff_0|min\": \"2\",            \"cutoff_1|name\": \"n_counts\"\
  ,\n            \"cutoff_1|min\": \"4\",            ...}\n\n          At the time\
  \ of this writing, it is not possible to change the\n          number of       \
  \  times the contained parameters are repeated.\n          Therefore, the parameter\
  \         indexes can go from 0 to n-1,\n          where n is the number of times\
  \ the         repeated element was\n          added when the workflow was saved\
  \ in the Galaxy UI.\n\n          The ``replacement_params`` dict should map parameter\
  \ names in\n          post-job actions (PJAs) to their runtime values. For\n   \
  \       instance, if the final step has a PJA like the following::\n\n         \
  \   {'RenameDatasetActionout_file1': {'action_arguments':\n            {'newname':\
  \ '${output}'},\n            'action_type': 'RenameDatasetAction',\n           \
  \ 'output_name': 'out_file1'}}\n\n          then the following renames the output\
  \ dataset to 'foo'::\n\n            replacement_params = {'output': 'foo'}\n\n \
  \         see also `this email thread\n          <http://lists.bx.psu.edu/pipermail/galaxy-\n\
  \          dev/2011-September/006875.html>`_.\n\n          .. warning::        \
  \   Historically, the ``run_workflow`` method\n          consumed a ``dataset_map``\
  \           data structure that was\n          indexed by unencoded workflow step\
  \ IDs. These           IDs would\n          not be stable across Galaxy instances.\
  \ The new ``inputs``\n          property is instead indexed by either the ``order_index``\
  \ property\n          (which is stable across workflow imports) or the step UUID\
  \ which\n          is           also stable.\n\nOptions:\n  --inputs TEXT      \
  \             A mapping of workflow inputs to datasets and\n                   \
  \               dataset collections. The datasets source can\n                 \
  \                 be a LibraryDatasetDatasetAssociation\n                      \
  \            (``ldda``), LibraryDataset (``ld``),\n                            \
  \      HistoryDatasetAssociation (``hda``), or\n                               \
  \   HistoryDatasetCollectionAssociation\n                                  (``hdca``).\n\
  \n  --params TEXT                   A mapping of non-datasets tool parameters\n\
  \                                  (see below)\n\n  --history_id TEXT          \
  \     The encoded history ID where to store the\n                              \
  \    workflow output. Alternatively,\n                                  ``history_name``\
  \ may be specified to create\n                                  a new history.\n\
  \n  --history_name TEXT             Create a new history with the given name to\n\
  \                                  store the workflow output. If both\n        \
  \                          ``history_id`` and ``history_name`` are\n           \
  \                       provided, ``history_name`` is ignored. If\n            \
  \                      neither is specified, a new 'Unnamed\n                  \
  \                history' is created.\n\n  --import_inputs_to_history      If ``True``,\
  \ used workflow inputs will be\n                                  imported into\
  \ the history. If ``False``,\n                                  only workflow outputs\
  \ will be visible in the\n                                  given history.\n\n \
  \ --replacement_params TEXT       pattern-based replacements for post-job\n    \
  \                              actions (see below)\n\n  --allow_tool_state_corrections\
  \  If True, allow Galaxy to fill in missing\n                                  tool\
  \ state when running workflows. This may\n                                  be useful\
  \ for workflows using tools that\n                                  have changed\
  \ over time or for workflows\n                                  built outside of\
  \ Galaxy with only a subset\n                                  of inputs defined.\n\
  \n  --inputs_by TEXT                Determines how inputs are referenced. Can be\n\
  \                                  \"step_index|step_uuid\" (default),\n       \
  \                           \"step_index\", \"step_id\", \"step_uuid\", or\n   \
  \                               \"name\".\n\n  -h, --help                      Show\
  \ this message and exit.\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/galaxy-parsec:1.15.0--pyh5e36f6f_0
