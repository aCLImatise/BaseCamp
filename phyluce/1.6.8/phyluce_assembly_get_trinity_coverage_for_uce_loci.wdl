version 1.0

task PhyluceAssemblyGetTrinityCoverageForUceLoci {
  input {
    String? assemblies
    String? match_count_output
    String? type
    Array[String] exclude
    String? locus_db
    String? output_directory_hold
    String? resume
    String? verbosity
    String? log_path
  }
  command <<<
    phyluce_assembly_get_trinity_coverage_for_uce_loci \
      ~{if defined(assemblies) then ("--assemblies " +  '"' + assemblies + '"') else ""} \
      ~{if defined(match_count_output) then ("--match-count-output " +  '"' + match_count_output + '"') else ""} \
      ~{if defined(type) then ("--type " +  '"' + type + '"') else ""} \
      ~{if defined(exclude) then ("--exclude " +  '"' + exclude + '"') else ""} \
      ~{if defined(locus_db) then ("--locus-db " +  '"' + locus_db + '"') else ""} \
      ~{if defined(output_directory_hold) then ("--output " +  '"' + output_directory_hold + '"') else ""} \
      ~{if defined(resume) then ("--resume " +  '"' + resume + '"') else ""} \
      ~{if defined(verbosity) then ("--verbosity " +  '"' + verbosity + '"') else ""} \
      ~{if defined(log_path) then ("--log-path " +  '"' + log_path + '"') else ""}
  >>>
  parameter_meta {
    assemblies: "The directory containing the assemblies"
    match_count_output: "The output file containing taxa and loci in complete/incomplete matrices generated by get_match_counts.py."
    type: "Whether to compute stats on trimmed or untrimmed UCE data."
    exclude: "A list of assemblies to ignore."
    locus_db: "The SQL database file holding probe matches to targeted loci (usually \"lastz/probe.matches.sqlite\")."
    output_directory_hold: "The output directory to hold the UCE coverage files"
    resume: "The output directory in which to resume after a failure."
    verbosity: "The logging level to use"
    log_path: "The path to a directory to hold logs."
  }
}