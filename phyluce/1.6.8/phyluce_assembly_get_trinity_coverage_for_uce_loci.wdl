version 1.0

task PhyluceAssemblyGetTrinityCoverageForUceLoci {
  input {
    String? locus_db
    Directory? directory_containing_assemblies
    File? output_file_containing
    String? type
    Array[String] exclude
    Directory? output_directory_hold
    Directory? resume
    File? log_path
    String _matchcountoutput
    String _type
    String failure_dot
  }
  command <<<
    phyluce_assembly_get_trinity_coverage_for_uce_loci \
      ~{_matchcountoutput} \
      ~{_type} \
      ~{failure_dot} \
      ~{if defined(locus_db) then ("--locus-db " +  '"' + locus_db + '"') else ""} \
      ~{if defined(directory_containing_assemblies) then ("--assemblies " +  '"' + directory_containing_assemblies + '"') else ""} \
      ~{if defined(output_file_containing) then ("--match-count-output " +  '"' + output_file_containing + '"') else ""} \
      ~{if defined(type) then ("--type " +  '"' + type + '"') else ""} \
      ~{if defined(exclude) then ("--exclude " +  '"' + exclude + '"') else ""} \
      ~{if defined(output_directory_hold) then ("--output " +  '"' + output_directory_hold + '"') else ""} \
      ~{if defined(resume) then ("--resume " +  '"' + resume + '"') else ""} \
      ~{if defined(log_path) then ("--log-path " +  '"' + log_path + '"') else ""}
  >>>
  parameter_meta {
    locus_db: ""
    directory_containing_assemblies: "The directory containing the assemblies"
    output_file_containing: "The output file containing taxa and loci in\\ncomplete/incomplete matrices generated by\\nget_match_counts.py."
    type: "Whether to compute stats on trimmed or untrimmed UCE\\ndata."
    exclude: "A list of assemblies to ignore."
    output_directory_hold: "The output directory to hold the UCE coverage files"
    resume: "The output directory in which to resume after a"
    log_path: "The path to a directory to hold logs."
    _matchcountoutput: "--match-count-output"
    _type: "--type"
    failure_dot: "--verbosity {INFO,WARN,CRITICAL}"
  }
  output {
    File out_stdout = stdout()
    File out_output_file_containing = "${in_output_file_containing}"
    Directory out_output_directory_hold = "${in_output_directory_hold}"
    Directory out_resume = "${in_resume}"
  }
}