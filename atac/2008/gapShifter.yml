!Command
positional:
- !Positional
  description: ''
  position: 0
  name: 'matches '
  optional: false
- !Positional
  description: ''
  position: 1
  name: matches
  optional: false
named: []
command:
- gapShifter
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "usage: gapShifter [options] < matches > matches\n  Instead of the usual\
  \ switch based options to enable behavior\n  gapShifter iterates of a list of shift\
  \ directions and sizes.\n    l      -- shift gaps to the left\n    r      -- shift\
  \ gaps to the right\n    #      -- set the maximum size of a gap to shift\n    log\
  \ x  -- open a logfile 'x' for results of the next shift\n\n  for example\n    gapShifter\
  \ 1 l r l r 10 l r l log X r < some.atac > shifted.atac\n  would shift 1bp gaps\
  \ to the left, then to the right, then left,\n  then set the gap size to 10bp and\
  \ repeat.  The last shift is logged\n  into fle 'X'.\n  \n  This is useful since\
  \ shifting gaps can obliterate matches, but possibly.\n  when both left and right\
  \ shifts are used.\n      GCTAATTAGACG\n      GCT-AT-AGACG\n  The second gap can\
  \ be shifted to the left, and the first gap can be\n  shifted right, resulting in\n\
  \      GCTAATTAGACG\n      GCTA--TAGACG\n  Thus, two one base gaps were merged into\
  \ a two base gap, which might\n  then be able to be shifted.  e.g.:\n      atgatcatcttatc\n\
  \      at---c-t--tatc\n"
generated_using: []
