!Command
positional:
- !Positional
  description: ''
  position: 0
  name: java
  optional: false
named:
- !Flag
  description: '- required, absolute path to the input file.  The input file expected
    to contain the list of  FASTA formatted sequences.  '
  synonyms:
  - -in
  args: !SimpleFlagArg
    name: input file
  optional: true
- !Flag
  description: '- optional, by default the system prints the  output to the console.
    If the file exists it  will be overridden. The order of the predictions in the
    output is  guaranteed to be the same as the order of the  sequences in the input.
    This means that the  prediction for the tenth sequence from the input  will be
    the tenth prediction in the output,  unless -nonols parameter was used to suppress  reporting
    predictions with no NOLS detected     '
  synonyms:
  - -out
  args: !SimpleFlagArg
    name: output file
  optional: true
- !Flag
  description: '- optional, defaults to MEDIUM. Possible values COMPLETE, FULL, MEDIUM,
    SHORT and MINIMAL (case sensitive) Where MINIMAL - contains the sequence name
    and the number of NOLS detected.   Where MINIMAL_TAB - same as MINIMAL but the  fields
    in the output are tab delimited and only  the first word of the sequence name
    is output.   SHORT - same as MINIMAL plus coordinates of  the NOLS  MEDIUM - same
    as SHORT plus NOLS reported  separately   MEDIUM_TAB - same as MEDIUM but the
    fields in  the output are tab delimited and only the first  word of the sequence
    name is output.   FULL - same as MEDIUM plus scores for each  position of the
    sequence. The scores are  reported for every window of size 20 in the full sequence,
    one score per line. The scores are  associate with the first residue of the window.  Windows
    with a score above 0.8 are predicted as  NoLSs.          COMPLETE - same as FULL
    plus the original  sequence                           '
  synonyms:
  - -f
  args: !SimpleFlagArg
    name: output format
  optional: true
- !Flag
  description: '- optional, defaults to the system temp directory (defined by the
    "java.io.tmpdir" environmental  variable) If the directory does not exist, it  will
    be created. However the parent directory  must exist. For example if working directory
    is  set to /home/tmp and home directory does not  exist then the execution will
    be terminated.  If the home directory exist but tmp directory  does not, the tmp
    directory will be created.  If the /home/tmp directory exist then it will  be
    used. If the /home/tmp directory is not  empty, then any files with the same name
    as  generated by the program will be overridden.    '
  synonyms:
  - -d
  args: !SimpleFlagArg
    name: working directory
  optional: true
- !Flag
  description: '- optional, defaults to the number of cores  available on the computer.
    Maximum number of  threads cannot be greater than twice the number  of available
    cores. However, we have not  observed any significant gains from increasing  the
    number of threads beyond the number of CPU cores actually available on the computer. '
  synonyms:
  - -t
  args: !SimpleFlagArg
    name: number of threads
  optional: true
- !Flag
  description: '- optional, an absolute path to the Batchman  executable. By default
    this path is searched in  the environmental variable called BATCHMAN_PATH.  If
    it is not found there, then clinod attempts  to locate the batchman executable
    in the same  directory as the clinod jar file. In order to be  found there the
    batchman executable must be  called the "batchman.exe" on Windows systems and  the
    "batchman" on all other operating systems. If neither of those paths are valid
    then the  execution fails.   If several paths are valid then clinod uses them
    in the following order:   1) Path from the command line parameter 2) Path from
    the environmental variable 3) Local directory path '
  synonyms:
  - -bm
  args: !SimpleFlagArg
    name: batchman path
  optional: true
- !Flag
  description: '- optional, suppresses reporting of the proteins  with no NOLS detected
    if specified. '
  synonyms:
  - -nonols
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '- optional, if specified causes the predictor to  automatically remove
    all non-protein characters  from the sequences that contains them. The predictor
    only works with unambiguous  protein sequences. Only the following characters
    considered to be valid: ARNDCQEGHILKMFPSTWYV.  If any other character is detected
    in the  sequence the predictor stops the execution and  raises the exception unless
    this flag is  specified. In this case, the predictor removes  invalid characters
    from the sequence and writes the information about it into the log file. '
  synonyms:
  - -clean_sequence
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ''
  synonyms:
  - -jar
  args: !SimpleFlagArg
    name: clinod-1.3.jar
  optional: true
command:
- clinod
parent:
subcommands: []
help_flag: !Flag
  description: '- print help (this information). If this flag is  given all other
    options are ignored. '
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "\nNucleOlar localization sequence Detector v. 1.3b (13 May 2011) \nhttp://www.compbio.dundee.ac.uk/nod\
  \ \n \nUsage:\n       java -jar clinod-1.3.jar -in=inputFile <OPTIONS>\n\t\t\n \
  \      -in=<input file>       - required, absolute path to the input file. \n  \
  \                              The input file expected to contain the list of \n\
  \                                FASTA formatted sequences.  \n\t\n       -out=<output\
  \ file>     - optional, by default the system prints the \n                    \
  \            output to the console. If the file exists it \n                   \
  \             will be overridden.\n                                The order of\
  \ the predictions in the output is \n                                guaranteed\
  \ to be the same as the order of the \n                                sequences\
  \ in the input. This means that the \n                                prediction\
  \ for the tenth sequence from the input \n                                will be\
  \ the tenth prediction in the output, \n                                unless -nonols\
  \ parameter was used to suppress \n                                reporting predictions\
  \ with no NOLS detected     \n\t\n       -f=<output format>     - optional, defaults\
  \ to MEDIUM. Possible values\n                                COMPLETE, FULL, MEDIUM,\
  \ SHORT and MINIMAL (case\n                                sensitive)\n        \
  \                        \n                                Where MINIMAL - contains\
  \ the sequence name and\n                                the number of NOLS detected.\
  \  \n                                \n                                Where MINIMAL_TAB\
  \ - same as MINIMAL but the \n                                fields in the output\
  \ are tab delimited and only \n                                the first word of\
  \ the sequence name is output.  \n                                \n           \
  \                     SHORT - same as MINIMAL plus coordinates of \n           \
  \                     the NOLS \n                                \n            \
  \                    MEDIUM - same as SHORT plus NOLS reported \n              \
  \                  separately  \n                                \n            \
  \                    MEDIUM_TAB - same as MEDIUM but the fields in \n          \
  \                      the output are tab delimited and only the first \n      \
  \                          word of the sequence name is output.  \n            \
  \                    \n                                FULL - same as MEDIUM plus\
  \ scores for each \n                                position of the sequence. The\
  \ scores are \n                                reported for every window of size\
  \ 20 in the full\n                                sequence, one score per line.\
  \ The scores are \n                                associate with the first residue\
  \ of the window. \n                                Windows with a score above 0.8\
  \ are predicted as \n                                NoLSs.         \n         \
  \                       \n                                COMPLETE - same as FULL\
  \ plus the original \n                                sequence                 \
  \          \n\n       -d=<working directory> - optional, defaults to the system\
  \ temp directory\n       \t\t\t\t(defined by the \"java.io.tmpdir\" environmental\
  \ \n       \t\t\t\tvariable) If the directory does not exist, it \n       \t\t\t\
  \twill be created. However the parent directory \n       \t\t\t\tmust exist. For\
  \ example if working directory is \n       \t\t\t\tset to /home/tmp and home directory\
  \ does not \n       \t\t\t\texist then the execution will be terminated. \n    \
  \   \t\t\t\tIf the home directory exist but tmp directory \n       \t\t\t\tdoes\
  \ not, the tmp directory will be created. \n       \t\t\t\tIf the /home/tmp directory\
  \ exist then it will \n       \t\t\t\tbe used. If the /home/tmp directory is not\
  \ \n       \t\t\t\tempty, then any files with the same name as \n       \t\t\t\t\
  generated by the program will be overridden.    \n\t\n       -t=<number of threads>\
  \ - optional, defaults to the number of cores \n                               \
  \ available on the computer. Maximum number of \n                              \
  \  threads cannot be greater than twice the number \n                          \
  \      of available cores. However, we have not \n                             \
  \   observed any significant gains from increasing \n                          \
  \      the number of threads beyond the number of CPU\n                        \
  \        cores actually available on the computer. \n                          \
  \      \n\t\t\t\t\t         \t\n       -bm=<batchman path>    - optional, an absolute\
  \ path to the Batchman \n                                executable. By default\
  \ this path is searched in \n                                the environmental variable\
  \ called BATCHMAN_PATH. \n                                If it is not found there,\
  \ then clinod attempts \n                                to locate the batchman\
  \ executable in the same \n                                directory as the clinod\
  \ jar file. In order to be \n                                found there the batchman\
  \ executable must be \n                                called the \"batchman.exe\"\
  \ on Windows systems and \n                                the \"batchman\" on all\
  \ other operating systems.\n                                \n                 \
  \               If neither of those paths are valid then the \n                \
  \                execution fails.  \n                                If several\
  \ paths are valid then clinod uses them\n                                in the\
  \ following order:  \n                                1) Path from the command line\
  \ parameter\n                                2) Path from the environmental variable\n\
  \                                3) Local directory path \n                    \
  \            \n\n       -nonols                - optional, suppresses reporting\
  \ of the proteins \n                                with no NOLS detected if specified.\
  \ \n                                                                   \n      \
  \ -clean_sequence        - optional, if specified causes the predictor to \n   \
  \    \t\t\t\tautomatically remove all non-protein characters \n       \t\t\t\tfrom\
  \ the sequences that contains them.\n       \t\t\t\t \n       \t\t\t\tThe predictor\
  \ only works with unambiguous \n       \t\t\t\tprotein sequences. Only the following\
  \ characters\n       \t\t\t\tconsidered to be valid: ARNDCQEGHILKMFPSTWYV. \n  \
  \     \t\t\t\tIf any other character is detected in the \n       \t\t\t\tsequence\
  \ the predictor stops the execution and \n       \t\t\t\traises the exception unless\
  \ this flag is \n       \t\t\t\tspecified. In this case, the predictor removes \n\
  \       \t\t\t\tinvalid characters from the sequence and writes\n       \t\t\t\t\
  the information about it into the log file. \n                                \n\
  \       -h                     - print help (this information). If this flag is\
  \ \n                                given all other options are ignored. \n    \
  \   \nNolsPredictor requires SNNS Batch Interpreter V1.0 executable which is a part\
  \ of \nthe Stuttgart Neural Network Simulator (SNNS) v 4.2 software suit \navailable\
  \ free of charge from http://www.ra.cs.uni-tuebingen.de/SNNS \n\nThe path to the\
  \ batchman executable can be specified either as BATCHMAN_PATH \nenvironmental variable\
  \ or provided as a command line parameter.  \n\t\nInvocation examples: \n\n  Example\
  \ 1: \n\n       clinod-1.3.jar -in=inputFile\n\n       The predictor loads input\
  \ from inputFile, prints the predictions to the \n       console, uses system's\
  \ temporary directory to store the temporary files \n       and uses the number\
  \ of threads equal to the number of processor \n       cores available on the executing\
  \ machine. This example assumes that \n       BATCHMAN_PATH environmental variable\
  \ is defined or the batchman \n       executable is located in the same directory\
  \ as clinod jar file.   \n\t\n  Example 2:\n    \n       clinod-1.3.jar -in=/homes/input.fs\
  \ -out=/homes/out.txt -t=1 -d=/homes/tmp\n       -bm=/homes/bin/batchman -nonols\
  \ -f=MINIMAL\n    \n       The predictor loads the input from the /homes/input.fs,\
  \ writes output to \n       /homes/out.txt uses a single thread to perform calculations,\
  \ writes \n       temporary files to /homes/tmp, uses the Batchman binary from /homes/bin\n\
  \       directory, reports results in the MINIMAL format and only for the \n   \
  \    sequences where at least one NOLS has been detected.   \n    \nLogging: \n\
  \      \n       NolsPredictor uses Apache log4j library for logging. With its help\
  \ it is \n       possible to track the execution progress or peer into the details\
  \ of the \n       execution of the program which can help to resolve issues. For\
  \ this log4j \n       should be configured to log all events at the INFO level.\
  \ Level DEBUG or \n       TRACE can help if you are experiencing problems with the\
  \ predictor.\n       \n       Example log4j configuration: \n       \n       logDir\
  \ = .\n       log4j.logger.NOD=INFO, ACTIVITY\n       log4j.appender.ACTIVITY=org.apache.log4j.RollingFileAppender\n\
  \       log4j.appender.ACTIVITY.File=${logDir}/activity.log\n       log4j.appender.ACTIVITY.MaxFileSize=10MB\n\
  \       log4j.appender.ACTIVITY.MaxBackupIndex=10000\n       log4j.appender.ACTIVITY.layout=org.apache.log4j.PatternLayout\n\
  \       log4j.appender.ACTIVITY.layout.ConversionPattern=%d{MM-dd@HH:mm:ss} %-5p\
  \ %3x - %m%n\n       \n       This configuration creates a log file called activity.log\
  \ in the current \n       working directory and records all events from the program\
  \ at the level \n       INFO. The activity file is renamed to activity.1 once it\
  \ reaches the \n       10 Mb size and the new activity.log file is created.  \n\
  \       \n       To configure log4j, the configuration should be written into the\
  \ file \n       called log4j.properties and put into the same directory as the program.\n\
  \       By default log4j is configured to output only the error messages to the\
  \ \n       console.  \n       \nPerformance: \n      \n      NolsPredictor writes\
  \ 4 temporary files for a single FASTA sequence, \n      therefore for optimal performance\
  \ the directory for temporary file storage \n      should ideally be located on\
  \ the local hard drive, as opposed to the \n      remote storage. The predictor\
  \ throughput rate is about 2 sequences per \n      second on the average computer.\
  \   \n         \nCitation: \n       \n      Michelle S. Scott, Peter V. Troshin\
  \ and Geoffrey J. Barton - \"NoD: a \n      Nucleolar localization sequence detector\
  \ for eukaryotic and viral \n      proteins\" - submitted\n          \n"
generated_using:
- -h
