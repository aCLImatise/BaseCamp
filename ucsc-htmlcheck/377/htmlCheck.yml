!Command
positional:
- !Positional
  description: ''
  position: 0
  name: how
  optional: false
- !Positional
  description: ''
  position: 1
  name: url
  optional: false
named: []
command:
- htmlCheck
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "htmlCheck - Do a little reading and verification of html file\nusage:\n\
  \   htmlCheck how url\nwhere how is:\n   ok - just check for 200 return.  Print\
  \ error message and exit -1 if no 200\n   getAll - read the url (header and html)\
  \ and print to stdout\n   getHeader - read the header and print to stdout\n   getCookies\
  \ - print list of cookies\n   getHtml - print the html, but not the header to stdout\n\
  \   getForms - print the form structure to stdout\n   getVars - print the form variables\
  \ to stdout\n   getLinks - print links\n   getTags - print out just the tags\n \
  \  checkLinks - check links in page\n   checkLinks2 - check links in page and all\
  \ subpages in same host\n             (Just one level of recursion)\n   checkLocalLinks\
  \ - check local links in page\n   checkLocalLinks2 - check local links in page and\
  \ connected local pages\n             (Just one level of recursion)\n   submit -\
  \ submit first form in page if any using 'GET' method\n   validate - do some basic\
  \ validations including TABLE/TR/TD nesting\n   strictTagNestCheck - check tags\
  \ are correctly nested\noptions:\n   cookies=cookie.txt - Cookies is a two column\
  \ file\n           containing <cookieName><space><value><newLine>\nnote: url will\
  \ need to be in quotes if it contains an ampersand or question mark.\n"
generated_using: []
