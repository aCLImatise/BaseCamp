!Command
positional:
- !Positional
  description: ''
  position: 0
  name: in.psl
  optional: false
- !Positional
  description: ''
  position: 1
  name: target.lst
  optional: false
- !Positional
  description: ''
  position: 2
  name: query.lst
  optional: false
- !Positional
  description: ''
  position: 3
  name: pretty.out
  optional: false
named:
- !Flag
  description: Save in format like Scott Schwartz's axt format. Note gaps in both
    sequences are still allowed in the output, which not all axt readers will expect.
  synonyms:
  - -axt
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Output a dot every N records.
  synonyms:
  - -dot
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: Don't abbreviate long inserts.
  synonyms:
  - -long
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Output alignment checks to filename.
  synonyms:
  - -check
  args: !SimpleFlagArg
    name: fileName
  optional: true
command:
- pslPretty
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "pslPretty - Convert PSL to human-readable output\nusage:\n   pslPretty\
  \ in.psl target.lst query.lst pretty.out\noptions:\n   -axt             Save in\
  \ format like Scott Schwartz's axt format.\n                    Note gaps in both\
  \ sequences are still allowed in the\n                    output, which not all\
  \ axt readers will expect.\n   -dot=N           Output a dot every N records.\n\
  \   -long            Don't abbreviate long inserts.\n   -check=fileName  Output\
  \ alignment checks to filename.\nIt's recommended that the psl file be sorted by\
  \ target if it contains\nmultiple targets; otherwise, this will be extremely slow.\
  \ The target and query\nlists can be fasta, 2bit or nib files, or a list of these\
  \ files, one per line.\n\n"
generated_using:
- --help
