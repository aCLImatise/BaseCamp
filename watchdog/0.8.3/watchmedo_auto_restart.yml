&id003 !Command
positional:
- !Positional
  description: Long-running command to run in a subprocess.
  position: 0
  name: command
  optional: false
- !Positional
  description: 'Command arguments. Note: Use -- before the command arguments, otherwise
    watchmedo will try to interpret them. (default: -)'
  position: 1
  name: arg
  optional: false
named:
- !Flag
  description: 'Directory to watch. Use another -d or --directory option for each
    directory. (default: -)'
  synonyms:
  - -d
  - --directory
  args: !SimpleFlagArg
    name: directory
  optional: true
- !Flag
  description: "matches event paths with these patterns (separated by ;). (default:\
    \ '*')"
  synonyms:
  - -p
  - --pattern
  - --patterns
  args: !SimpleFlagArg
    name: PATTERNS
  optional: true
- !Flag
  description: "ignores event paths with these patterns (separated by ;). (default:\
    \ '')"
  synonyms:
  - -i
  - --ignore-pattern
  - --ignore-patterns
  args: !SimpleFlagArg
    name: IGNORE_PATTERNS
  optional: true
- !Flag
  description: 'ignores events for directories (default: False)'
  synonyms:
  - -D
  - --ignore-directories
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'monitors the directories recursively (default: False)'
  synonyms:
  - -R
  - --recursive
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'use this as the polling interval/blocking timeout (default: 1.0)'
  synonyms:
  - --interval
  - --timeout
  args: !SimpleFlagArg
    name: TIMEOUT
  optional: true
- !Flag
  description: "stop the subprocess with this signal (default SIGINT) (default: 'SIGINT')"
  synonyms:
  - --signal
  args: !SimpleFlagArg
    name: SIGNAL
  optional: true
- !Flag
  description: 'when stopping, kill the subprocess after the specified timeout (default
    10) (default: 10.0)'
  synonyms:
  - --kill-after
  args: !SimpleFlagArg
    name: KILL_AFTER
  optional: true
command:
- watchmedo
- auto-restart
parent: &id001 !Command
  positional: []
  named: []
  command:
  - watchmedo
  parent:
  subcommands:
  - !Command
    positional:
    - !Positional
      description: "directories to watch. (default: '.')"
      position: 0
      name: directories
      optional: false
    named:
    - !Flag
      description: "matches event paths with these patterns (separated by ;). (default:\
        \ '*')"
      synonyms:
      - -p
      - --pattern
      - --patterns
      args: !SimpleFlagArg
        name: PATTERNS
      optional: true
    - !Flag
      description: "ignores event paths with these patterns (separated by ;). (default:\
        \ '')"
      synonyms:
      - -i
      - --ignore-pattern
      - --ignore-patterns
      args: !SimpleFlagArg
        name: IGNORE_PATTERNS
      optional: true
    - !Flag
      description: 'ignores events for directories (default: False)'
      synonyms:
      - -D
      - --ignore-directories
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'monitors the directories recursively (default: False)'
      synonyms:
      - -R
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'use this as the polling interval/blocking timeout (default: 1.0)'
      synonyms:
      - --interval
      - --timeout
      args: !SimpleFlagArg
        name: TIMEOUT
      optional: true
    - !Flag
      description: 'dumps complete dispatching trace (default: False)'
      synonyms:
      - --trace
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '[debug] forces polling (default: False)'
      synonyms:
      - --debug-force-polling
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '[debug] forces BSD kqueue(2) (default: False)'
      synonyms:
      - --debug-force-kqueue
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '[debug] forces Windows API (default: False)'
      synonyms:
      - --debug-force-winapi
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '[debug] forces Windows API + I/O completion (default: False)'
      synonyms:
      - --debug-force-winapi-async
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '[debug] forces Mac OS X FSEvents (default: False)'
      synonyms:
      - --debug-force-fsevents
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '[debug] forces Linux inotify(7) (default: False)'
      synonyms:
      - --debug-force-inotify
      args: !EmptyFlagArg {}
      optional: true
    command:
    - watchmedo
    - log
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: watchmedo log [-h] [-p PATTERNS] [-i IGNORE_PATTERNS] [-D]\
      \ [-R]\n                     [--interval TIMEOUT] [--trace] [--debug-force-polling]\n\
      \                     [--debug-force-kqueue] [--debug-force-winapi]\n      \
      \               [--debug-force-winapi-async] [--debug-force-fsevents]\n    \
      \                 [--debug-force-inotify]\n                     [directories\
      \ [directories ...]]\n\n    Subcommand to log file system events to the console.\n\
      \n    :param args:\n        Command line argument options.\n    \n\npositional\
      \ arguments:\n  directories           directories to watch. (default: '.')\n\
      \noptional arguments:\n  -h, --help            show this help message and exit\n\
      \  -p PATTERNS, --pattern PATTERNS, --patterns PATTERNS\n                  \
      \      matches event paths with these patterns (separated by\n             \
      \           ;). (default: '*')\n  -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS,\
      \ --ignore-patterns IGNORE_PATTERNS\n                        ignores event paths\
      \ with these patterns (separated by\n                        ;). (default: '')\n\
      \  -D, --ignore-directories\n                        ignores events for directories\
      \ (default: False)\n  -R, --recursive       monitors the directories recursively\
      \ (default: False)\n  --interval TIMEOUT, --timeout TIMEOUT\n              \
      \          use this as the polling interval/blocking timeout\n             \
      \           (default: 1.0)\n  --trace               dumps complete dispatching\
      \ trace (default: False)\n  --debug-force-polling\n                        [debug]\
      \ forces polling (default: False)\n  --debug-force-kqueue  [debug] forces BSD\
      \ kqueue(2) (default: False)\n  --debug-force-winapi  [debug] forces Windows\
      \ API (default: False)\n  --debug-force-winapi-async\n                     \
      \   [debug] forces Windows API + I/O completion (default:\n                \
      \        False)\n  --debug-force-fsevents\n                        [debug] forces\
      \ Mac OS X FSEvents (default: False)\n  --debug-force-inotify\n            \
      \            [debug] forces Linux inotify(7) (default: False)\n"
    generated_using: &id002
    - --help
  - !Command
    positional:
    - !Positional
      description: "directories to watch (default: '.')"
      position: 0
      name: directories
      optional: false
    named:
    - !Flag
      description: "shell command executed in response to matching events. These interpolation\
        \ variables are available to your command string:: ${watch_src_path} - event\
        \ source path; ${watch_dest_path} - event destination path (for moved events);\
        \ ${watch_event_type} - event type; ${watch_object} - ``file`` or ``directory``\
        \ Note:: Please ensure you do not use double quotes (\") to quote your command\
        \ string. That will force your shell to interpolate before the command is\
        \ processed by this subcommand. Example option usage:: --command='echo \"\
        ${watch_src_path}\"' (default: -)"
      synonyms:
      - -c
      - --command
      args: !SimpleFlagArg
        name: COMMAND
      optional: true
    - !Flag
      description: "matches event paths with these patterns (separated by ;). (default:\
        \ '*')"
      synonyms:
      - -p
      - --pattern
      - --patterns
      args: !SimpleFlagArg
        name: PATTERNS
      optional: true
    - !Flag
      description: "ignores event paths with these patterns (separated by ;). (default:\
        \ '')"
      synonyms:
      - -i
      - --ignore-pattern
      - --ignore-patterns
      args: !SimpleFlagArg
        name: IGNORE_PATTERNS
      optional: true
    - !Flag
      description: 'ignores events for directories (default: False)'
      synonyms:
      - -D
      - --ignore-directories
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'monitors the directories recursively (default: False)'
      synonyms:
      - -R
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'use this as the polling interval/blocking timeout (default: 1.0)'
      synonyms:
      - --interval
      - --timeout
      args: !SimpleFlagArg
        name: TIMEOUT
      optional: true
    - !Flag
      description: 'wait for process to finish to avoid multiple simultaneous instances
        (default: False)'
      synonyms:
      - -w
      - --wait
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Ignore events that occur while command is still being executed
        to avoid multiple simultaneous instances (default: False)'
      synonyms:
      - -W
      - --drop
      args: !EmptyFlagArg {}
      optional: true
    command:
    - watchmedo
    - shell-command
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: watchmedo shell-command [-h] [-c COMMAND] [-p PATTERNS]\n \
      \                              [-i IGNORE_PATTERNS] [-D] [-R]\n            \
      \                   [--interval TIMEOUT] [-w] [-W]\n                       \
      \        [directories [directories ...]]\n\n    Subcommand to execute shell\
      \ commands in response to file system events.\n\n    :param args:\n        Command\
      \ line argument options.\n    \n\npositional arguments:\n  directories     \
      \      directories to watch (default: '.')\n\noptional arguments:\n  -h, --help\
      \            show this help message and exit\n  -c COMMAND, --command COMMAND\n\
      \                        shell command executed in response to matching events.\n\
      \                        These interpolation variables are available to your\n\
      \                        command string:: ${watch_src_path} - event source\n\
      \                        path; ${watch_dest_path} - event destination path (for\n\
      \                        moved events); ${watch_event_type} - event type;\n\
      \                        ${watch_object} - ``file`` or ``directory`` Note::\n\
      \                        Please ensure you do not use double quotes (\") to\n\
      \                        quote your command string. That will force your shell\n\
      \                        to interpolate before the command is processed by this\n\
      \                        subcommand. Example option usage:: --command='echo\n\
      \                        \"${watch_src_path}\"' (default: -)\n  -p PATTERNS,\
      \ --pattern PATTERNS, --patterns PATTERNS\n                        matches event\
      \ paths with these patterns (separated by\n                        ;). (default:\
      \ '*')\n  -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS, --ignore-patterns\
      \ IGNORE_PATTERNS\n                        ignores event paths with these patterns\
      \ (separated by\n                        ;). (default: '')\n  -D, --ignore-directories\n\
      \                        ignores events for directories (default: False)\n \
      \ -R, --recursive       monitors the directories recursively (default: False)\n\
      \  --interval TIMEOUT, --timeout TIMEOUT\n                        use this as\
      \ the polling interval/blocking timeout\n                        (default: 1.0)\n\
      \  -w, --wait            wait for process to finish to avoid multiple\n    \
      \                    simultaneous instances (default: False)\n  -W, --drop \
      \           Ignore events that occur while command is still being\n        \
      \                executed to avoid multiple simultaneous instances\n       \
      \                 (default: False)\n"
    generated_using: *id002
  - *id003
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag: !Flag
    description: show program's version number and exit
    synonyms:
    - --version
    args: !EmptyFlagArg {}
    optional: true
  help_text: "usage: watchmedo [-h] [--version]\n                 {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
    \                 ...\n\npositional arguments:\n  {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
    \    tricks-from (tricks)\n                        Subcommand to execute tricks\
    \ from a tricks\n                        configuration file. :param args: Command\
    \ line argument\n                        options.\n    tricks-generate-yaml (generate-tricks-yaml)\n\
    \                        Subcommand to generate Yaml configuration for tricks\n\
    \                        named on the command line. :param args: Command line\n\
    \                        argument options.\n    log                 Subcommand\
    \ to log file system events to the console.\n                        :param args:\
    \ Command line argument options.\n    shell-command       Subcommand to execute\
    \ shell commands in response to\n                        file system events. :param\
    \ args: Command line argument\n                        options.\n    auto-restart\
    \        Subcommand to start a long-running subprocess and\n                 \
    \       restart it on matched events. :param args: Command\n                 \
    \       line argument options.\n\noptional arguments:\n  -h, --help          \
    \  show this help message and exit\n  --version             show program's version\
    \ number and exit\n\nCopyright 2011 Yesudeep Mangalapilly <yesudeep@gmail.com>.\n\
    Copyright 2012 Google, Inc.\n\nLicensed under the terms of the Apache license,\
    \ version 2.0. Please see\nLICENSE in the source code for more information.\n"
  generated_using: *id002
subcommands: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "usage: watchmedo auto-restart [-h] [-d directory] [-p PATTERNS]\n    \
  \                          [-i IGNORE_PATTERNS] [-D] [-R]\n                    \
  \          [--interval TIMEOUT] [--signal SIGNAL]\n                            \
  \  [--kill-after KILL_AFTER]\n                              command [arg [arg ...]]\n\
  \n    Subcommand to start a long-running subprocess and restart it\n    on matched\
  \ events.\n\n    :param args:\n        Command line argument options.\n    \n\n\
  positional arguments:\n  command               Long-running command to run in a\
  \ subprocess.\n  arg                   Command arguments. Note: Use -- before the\
  \ command\n                        arguments, otherwise watchmedo will try to interpret\n\
  \                        them. (default: -)\n\noptional arguments:\n  -h, --help\
  \            show this help message and exit\n  -d directory, --directory directory\n\
  \                        Directory to watch. Use another -d or --directory\n   \
  \                     option for each directory. (default: -)\n  -p PATTERNS, --pattern\
  \ PATTERNS, --patterns PATTERNS\n                        matches event paths with\
  \ these patterns (separated by\n                        ;). (default: '*')\n  -i\
  \ IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n\
  \                        ignores event paths with these patterns (separated by\n\
  \                        ;). (default: '')\n  -D, --ignore-directories\n       \
  \                 ignores events for directories (default: False)\n  -R, --recursive\
  \       monitors the directories recursively (default: False)\n  --interval TIMEOUT,\
  \ --timeout TIMEOUT\n                        use this as the polling interval/blocking\
  \ timeout\n                        (default: 1.0)\n  --signal SIGNAL       stop\
  \ the subprocess with this signal (default SIGINT)\n                        (default:\
  \ 'SIGINT')\n  --kill-after KILL_AFTER\n                        when stopping, kill\
  \ the subprocess after the specified\n                        timeout (default 10)\
  \ (default: 10.0)\n"
generated_using: *id002
