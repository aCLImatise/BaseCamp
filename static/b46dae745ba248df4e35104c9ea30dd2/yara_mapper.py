from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Yara_Mapper_V0_1_0 = CommandToolBuilder(tool="yara_mapper", base_command=["yara_mapper"], inputs=[ToolInput(tag="in_version_check", input_type=Boolean(optional=True), prefix="--version-check", doc=InputDocumentation(doc="Turn this option off to disable version update notifications of the\napplication. One of 1, ON, TRUE, T, YES, 0, OFF, FALSE, F, and NO.\nDefault: 1.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Displays global statistics.")), ToolInput(tag="in_very_verbose", input_type=Boolean(optional=True), prefix="--very-verbose", doc=InputDocumentation(doc="Displays extensive statistics for each batch of reads.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="Specify an output file. Default: write the file to standard output.\nValid filetypes are: .sam[.*] and .bam, where * is any of the\nfollowing extensions: gz, bz2, and bgzf for transparent\n(de)compression.")), ToolInput(tag="in_output_format", input_type=File(optional=True), prefix="--output-format", doc=InputDocumentation(doc="Specify an output format. Note: when specifying the option\n--output-file, the output format is taken from the filename\nextension. One of bam, sam, sam.bgzf, sam.gz, and sam.bz2. Default:\nsam.")), ToolInput(tag="in_read_group", input_type=File(optional=True), prefix="--read-group", doc=InputDocumentation(doc="Specify a read group for all records in the SAM/BAM file. Default:\nnone.")), ToolInput(tag="in_secondary_matches", input_type=String(optional=True), prefix="--secondary-matches", doc=InputDocumentation(doc="Specify whether to output secondary matches in the XA tag of the\nprimary alignment, as separate secondary records, or to omit them.\nOne of tag, record, and omit. Default: tag.")), ToolInput(tag="in_align_secondary", input_type=Boolean(optional=True), prefix="--align-secondary", doc=InputDocumentation(doc="Compute and output co- and suboptimal match alignments. Ignored if\n'-sa omit' is set.")), ToolInput(tag="in_rabe_ma_alignments", input_type=Boolean(optional=True), prefix="--rabema-alignments", doc=InputDocumentation(doc="Output alignments compatible with the Read Alignment BEnchMArk\n(RABEMA).")), ToolInput(tag="in_error_rate", input_type=Int(optional=True), prefix="--error-rate", doc=InputDocumentation(doc="Consider alignments within this percentual number of errors.\nIncrease this threshold to increase the number of mapped reads.\nDecrease this threshold to decrease the runtime. In range [0..10].\nDefault: 5.")), ToolInput(tag="in_strata_rate", input_type=Int(optional=True), prefix="--strata-rate", doc=InputDocumentation(doc="Consider suboptimal alignments within this percentual number of\nerrors from the optimal alignment. Increase this threshold to\nincrease the number of alternative alignments at the expense of\nruntime. In range [0..10]. Default: 0.")), ToolInput(tag="in_strata_count", input_type=Int(optional=True), prefix="--strata-count", doc=InputDocumentation(doc="Consider suboptimal alignments within this absolute number of errors\nfrom the optimal alignment. Increase this threshold to increase the\nnumber of alternative alignments at the expense of runtime. In range\n[0..127]. Default: 0.")), ToolInput(tag="in_sensitivity", input_type=String(optional=True), prefix="--sensitivity", doc=InputDocumentation(doc="Sensitivity with respect to edit distance. Full sensitivity\nguarantees to find all considered alignments but increases runtime,\nlow sensitivity decreases runtime by breaking such guarantee. One of\nlow, high, and full. Default: high.")), ToolInput(tag="in_library_length", input_type=Int(optional=True), prefix="--library-length", doc=InputDocumentation(doc="Expected library length. Default: autodetected. In range [1..inf].")), ToolInput(tag="in_library_deviation", input_type=Int(optional=True), prefix="--library-deviation", doc=InputDocumentation(doc="Deviation from the expected library length. Default: autodetected.\nIn range [1..inf].")), ToolInput(tag="in_in_del_rate", input_type=Int(optional=True), prefix="--indel-rate", doc=InputDocumentation(doc="Rescue unaligned ends within this percentual number of indels. In\nrange [0..50]. Default: 25.")), ToolInput(tag="in_no_indels", input_type=Boolean(optional=True), prefix="--no-indels", doc=InputDocumentation(doc="Turn off the rescue of unaligned ends containing indels.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Specify the number of threads to use. In range [1..2048]. Default:\n8."))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="Specify an output file. Default: write the file to standard output.\nValid filetypes are: .sam[.*] and .bam, where * is any of the\nfollowing extensions: gz, bz2, and bgzf for transparent\n(de)compression.")), ToolOutput(tag="out_output_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_format", type_hint=File()), doc=OutputDocumentation(doc="Specify an output format. Note: when specifying the option\n--output-file, the output format is taken from the filename\nextension. One of bam, sam, sam.bgzf, sam.gz, and sam.bz2. Default:\nsam."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Yara_Mapper_V0_1_0().translate("wdl", allow_empty_container=True)

