from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean, File, Array

Augur_Filter_V0_1_0 = CommandToolBuilder(tool="augur_filter", base_command=["augur", "filter"], inputs=[ToolInput(tag="in_sequences", input_type=String(optional=True), prefix="--sequences", doc=InputDocumentation(doc="sequences in fasta or VCF format (default: None)")), ToolInput(tag="in_metadata", input_type=String(optional=True), prefix="--metadata", doc=InputDocumentation(doc="metadata associated with sequences (default: None)")), ToolInput(tag="in_min_date", input_type=Int(optional=True), prefix="--min-date", doc=InputDocumentation(doc="minimal cutoff for date; may be specified as an Augur-\nstyle numeric date (with the year as the integer part)\nor YYYY-MM-DD (default: None)")), ToolInput(tag="in_max_date", input_type=Int(optional=True), prefix="--max-date", doc=InputDocumentation(doc="maximal cutoff for date; may be specified as an Augur-\nstyle numeric date (with the year as the integer part)\nor YYYY-MM-DD (default: None)")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="minimal length of the sequences (default: None)")), ToolInput(tag="in_non_nucleotide", input_type=Boolean(optional=True), prefix="--non-nucleotide", doc=InputDocumentation(doc="exclude sequences that contain illegal characters\n(default: False)")), ToolInput(tag="in_exclude", input_type=File(optional=True), prefix="--exclude", doc=InputDocumentation(doc="file with list of strains that are to be excluded\n(default: None)")), ToolInput(tag="in_include", input_type=File(optional=True), prefix="--include", doc=InputDocumentation(doc="file with list of strains that are to be included\nregardless of priorities or subsampling (default:\nNone)")), ToolInput(tag="in_priority", input_type=File(optional=True), prefix="--priority", doc=InputDocumentation(doc="file with list of priority scores for sequences\n(strain priority) (default: None)")), ToolInput(tag="in_sequences_per_group", input_type=Int(optional=True), prefix="--sequences-per-group", doc=InputDocumentation(doc="subsample to no more than this number of sequences per\ncategory (default: None)")), ToolInput(tag="in_group_by", input_type=Array(t=String(), optional=True), prefix="--group-by", doc=InputDocumentation(doc="categories with respect to subsample; two virtual\nfields, 'month' and 'year', are supported if they\ndon't already exist as real fields but a 'date' field\ndoes exist (default: None)")), ToolInput(tag="in_subsample_seed", input_type=Int(optional=True), prefix="--subsample-seed", doc=InputDocumentation(doc="random number generator seed to allow reproducible\nsub-sampling (with same input data). Can be number or\nstring. (default: None)")), ToolInput(tag="in_exclude_where", input_type=Array(t=String(), optional=True), prefix="--exclude-where", doc=InputDocumentation(doc="Exclude samples matching these conditions. Ex:\n'host=rat' or 'host!=rat'. Multiple values are\nprocessed as OR (matching any of those specified will\nbe excluded), not AND (default: None)")), ToolInput(tag="in_include_where", input_type=Array(t=String(), optional=True), prefix="--include-where", doc=InputDocumentation(doc="Include samples with these values. ex: host=rat.\nMultiple values are processed as OR (having any of\nthose specified will be included), not AND. This rule\nis applied last and ensures any sequences matching\nthese rules will be included. (default: None)")), ToolInput(tag="in_query", input_type=String(optional=True), prefix="--query", doc=InputDocumentation(doc="Filter samples by attribute. Uses Pandas Dataframe\nquerying, see https://pandas.pydata.org/pandas-\ndocs/stable/user_guide/indexing.html#indexing-query\nfor syntax. (default: None)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output file (default: None)\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output file (default: None)\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Augur_Filter_V0_1_0().translate("wdl", allow_empty_container=True)

