from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

_Est2Genome_V0_1_0 = CommandToolBuilder(tool="_est2genome", base_command=["_est2genome"], inputs=[ToolInput(tag="in_match", input_type=Boolean(optional=True), prefix="-match", doc=InputDocumentation(doc="integer    [1] Score for matching two bases (Any\ninteger value)")), ToolInput(tag="in_mismatch", input_type=Boolean(optional=True), prefix="-mismatch", doc=InputDocumentation(doc="integer    [1] Cost for mismatching two bases (Any\ninteger value)")), ToolInput(tag="in_gap_penalty", input_type=Boolean(optional=True), prefix="-gappenalty", doc=InputDocumentation(doc="integer    [2] Cost for deleting a single base in\neither sequence, excluding introns (Any\ninteger value)")), ToolInput(tag="in_intron_penalty", input_type=Boolean(optional=True), prefix="-intronpenalty", doc=InputDocumentation(doc="integer    [40] Cost for an intron, independent of\nlength. (Any integer value)")), ToolInput(tag="in_splice_penalty", input_type=Boolean(optional=True), prefix="-splicepenalty", doc=InputDocumentation(doc="integer    [20] Cost for an intron, independent of\nlength and starting/ending on donor-acceptor\nsites (Any integer value)")), ToolInput(tag="in_min_score", input_type=Boolean(optional=True), prefix="-minscore", doc=InputDocumentation(doc="integer    [30] Exclude alignments with scores below\nthis threshold score. (Any integer value)")), ToolInput(tag="in_reverse", input_type=Boolean(optional=True), prefix="-reverse", doc=InputDocumentation(doc="boolean    Reverse the orientation of the EST sequence")), ToolInput(tag="in_mode", input_type=Boolean(optional=True), prefix="-mode", doc=InputDocumentation(doc="menu       [both] This determines the comparison mode.\nThe default value is 'both', in which case\nboth strands of the est are compared\nassuming a forward gene direction (ie GT/AG\nsplice sites), and the best comparison\nredone assuming a reversed (CT/AC) gene\nsplicing direction. The other allowed modes\nare 'forward', when just the forward strand\nis searched, and 'reverse', ditto for the\nreverse strand. (Values: both (Both\nstrands); forward (Forward strand only);\nreverse (Reverse strand only))")), ToolInput(tag="in_space", input_type=Boolean(optional=True), prefix="-space", doc=InputDocumentation(doc="float      [10.0] For linear-space recursion. If\nproduct of sequence lengths divided by 4\nexceeds this then a divide-and-conquer\nstrategy is used to control the memory\nrequirements. In this way very long\nsequences can be aligned.\nIf you have a machine with plenty of memory\nyou can raise this parameter (but do not\nexceed the machine's physical RAM) (Any\nnumeric value)")), ToolInput(tag="in_shuffle", input_type=Boolean(optional=True), prefix="-shuffle", doc=InputDocumentation(doc="integer    [0] Shuffle (Any integer value)")), ToolInput(tag="in_seed", input_type=Boolean(optional=True), prefix="-seed", doc=InputDocumentation(doc="integer    [20825] Random number seed (Any integer\nvalue)")), ToolInput(tag="in_align", input_type=Boolean(optional=True), prefix="-align", doc=InputDocumentation(doc="boolean    Show the alignment. The alignment includes\nthe first and last 5 bases of each intron,\ntogether with the intron width. The\ndirection of splicing is indicated by angle\nbrackets (forward or reverse) or ????\n(unknown).")), ToolInput(tag="in_width", input_type=Boolean(optional=True), prefix="-width", doc=InputDocumentation(doc="integer    [50] Alignment width (Any integer value)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    _Est2Genome_V0_1_0().translate("wdl", allow_empty_container=True)

