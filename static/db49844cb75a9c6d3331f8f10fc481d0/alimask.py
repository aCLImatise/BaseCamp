from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Float

Alimask_V0_1_0 = CommandToolBuilder(tool="alimask", base_command=["alimask"], inputs=[ToolInput(tag="in_direct_summary_output", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc=": direct summary output to file <f>, not stdout")), ToolInput(tag="in_model_range", input_type=String(optional=True), prefix="--modelrange", doc=InputDocumentation(doc=": range(s) for mask(s) in model coordinates")), ToolInput(tag="in_ali_range", input_type=String(optional=True), prefix="--alirange", doc=InputDocumentation(doc=": range(s) for mask(s) in alignment coordinates")), ToolInput(tag="in_ap_end_mask", input_type=Boolean(optional=True), prefix="--apendmask", doc=InputDocumentation(doc=": add to existing mask (default ignores to existing mask)")), ToolInput(tag="in_model_two_ali", input_type=Int(optional=True), prefix="--model2ali", doc=InputDocumentation(doc=": given model ranges, print corresp. input alignment ranges")), ToolInput(tag="in_ali_two_model", input_type=Int(optional=True), prefix="--ali2model", doc=InputDocumentation(doc=": given alignment ranges, print corresp. model ranges")), ToolInput(tag="in_amino", input_type=Boolean(optional=True), prefix="--amino", doc=InputDocumentation(doc=": input alignment is protein sequence data")), ToolInput(tag="in_dna", input_type=Boolean(optional=True), prefix="--dna", doc=InputDocumentation(doc=": input alignment is DNA sequence data")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="--rna", doc=InputDocumentation(doc=": input alignment is RNA sequence data")), ToolInput(tag="in_out_format", input_type=String(optional=True), prefix="--outformat", doc=InputDocumentation(doc=": output alignment in format <s>  [Stockholm]")), ToolInput(tag="in_fast", input_type=Boolean(optional=True), prefix="--fast", doc=InputDocumentation(doc=": assign cols w/ >= symfrac residues as consensus  [default]")), ToolInput(tag="in_hand", input_type=Boolean(optional=True), prefix="--hand", doc=InputDocumentation(doc=": manual construction (requires reference annotation)")), ToolInput(tag="in_sym_frac", input_type=Float(optional=True), prefix="--symfrac", doc=InputDocumentation(doc=": sets sym fraction controlling --fast construction  [0.5]")), ToolInput(tag="in_frag_thresh", input_type=Float(optional=True), prefix="--fragthresh", doc=InputDocumentation(doc=": if L <= x*alen, tag sequence as a fragment  [0.5]")), ToolInput(tag="in_wpb", input_type=Boolean(optional=True), prefix="--wpb", doc=InputDocumentation(doc=": Henikoff position-based weights  [default]")), ToolInput(tag="in_wgs_c", input_type=Boolean(optional=True), prefix="--wgsc", doc=InputDocumentation(doc=": Gerstein/Sonnhammer/Chothia tree weights")), ToolInput(tag="in_w_blosum", input_type=Boolean(optional=True), prefix="--wblosum", doc=InputDocumentation(doc=": Henikoff simple filter weights")), ToolInput(tag="in_w_none", input_type=Boolean(optional=True), prefix="--wnone", doc=InputDocumentation(doc=": don't do any relative weighting; set all to 1")), ToolInput(tag="in_w_given", input_type=Boolean(optional=True), prefix="--wgiven", doc=InputDocumentation(doc=": use weights as given in MSA file")), ToolInput(tag="in_wid", input_type=Float(optional=True), prefix="--wid", doc=InputDocumentation(doc=": for --wblosum: set identity cutoff  [0.62]  (0<=x<=1)")), ToolInput(tag="in_in_format", input_type=String(optional=True), prefix="--informat", doc=InputDocumentation(doc=": assert input alifile is in format <s> (no autodetect)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc=": set RNG seed to <n> (if 0: one-time arbitrary seed)  [42]")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc="")), ToolInput(tag="in_msa_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_post_msa_file", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_direct_summary_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_direct_summary_output", type_hint=File()), doc=OutputDocumentation(doc=": direct summary output to file <f>, not stdout"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Alimask_V0_1_0().translate("wdl", allow_empty_container=True)

