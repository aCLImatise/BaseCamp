!Command
positional: []
named: []
command:
- svim-asm
subcommands:
- !Command
  positional:
  - !Positional
    description: Working and output directory. Existing files in the directory are
      overwritten. If the directory does not exist, it is created.
    position: 0
    name: working_dir
    optional: false
  - !Positional
    description: SAM/BAM file with alignment of query assembly to reference assembly
      (needs to be coordinate-sorted)
    position: 1
    name: bam_file
    optional: false
  - !Positional
    description: Reference genome file that the assembly was aligned to (FASTA)
    position: 2
    name: genome
    optional: false
  named:
  - !Flag
    description: 'Minimum mapping quality of alignments to consider (default: 20).
      Alignments with a lower mapping quality are ignored.'
    synonyms:
    - --min_mapq
    args: !SimpleFlagArg
      name: MIN_MAPQ
    optional: true
  - !Flag
    description: 'Minimum SV size to detect (default: 40). SVIM can potentially detect
      events of any size but is limited by the signal-to-noise ratio in the input
      alignments. That means that more accurate assemblies and alignments enable the
      detection of smaller events.'
    synonyms:
    - --min_sv_size
    args: !SimpleFlagArg
      name: MIN_SV_SIZE
    optional: true
  - !Flag
    description: 'Maximum SV size to detect (default: 100000). This parameter is used
      to distinguish long deletions (and inversions) from translocations which cannot
      be distinguished from the alignment alone. Split read segments mapping far apart
      on the reference could either indicate a very long deletion (inversion) or a
      translocation breakpoint. SVIM calls a translocation breakpoint if the mapping
      distance is larger than this parameter and a deletion (or inversion) if it is
      smaller or equal.'
    synonyms:
    - --max_sv_size
    args: !SimpleFlagArg
      name: MAX_SV_SIZE
    optional: true
  - !Flag
    description: 'Maximum tolerated gap between adjacent alignment segments on the
      query (default: 50). Example: Deletions are detected from two subsequent segments
      of a split query sequence that are mapped far apart from each other on the reference.
      The query gap tolerance determines the maximum tolerated length of the query
      gap between both segments. If there is an unaligned query segment larger than
      this value between the two segments, no deletion is called.'
    synonyms:
    - --query_gap_tolerance
    args: !SimpleFlagArg
      name: QUERY_GAP_TOLERANCE
    optional: true
  - !Flag
    description: 'Maximum tolerated overlap between adjacent alignment segments on
      the query (default: 50). Example: Deletions are detected from two subsequent
      segments of a split query sequence that are mapped far apart from each other
      on the reference. The query overlap tolerance determines the maximum tolerated
      length of an overlap between both segments in the query. If the overlap between
      the two segments in the query is larger than this value, no deletion is called.'
    synonyms:
    - --query_overlap_tolerance
    args: !SimpleFlagArg
      name: QUERY_OVERLAP_TOLERANCE
    optional: true
  - !Flag
    description: 'Maximum tolerated gap between adjacent alignment segments on the
      reference (default: 50). Example: Insertions are detected from two segments
      of a split query sequence that are mapped right next to each other on the reference
      but with unaligned sequence between them on the query. The reference gap tolerance
      determines the maximum tolerated length of the reference gap between both segments.
      If there is a reference gap larger than this value between the two segments,
      no insertion is called.'
    synonyms:
    - --reference_gap_tolerance
    args: !SimpleFlagArg
      name: REFERENCE_GAP_TOLERANCE
    optional: true
  - !Flag
    description: 'Maximum tolerated overlap between adjacent alignment segments on
      the reference (default: 50). Example: Insertions are detected from two segments
      of a split query sequence that are mapped right next to each other on the reference
      but with unaligned sequence between them on the query. The reference overlap
      tolerance determines the maximum tolerated length of an overlap between both
      segments on the reference. If there is a reference gap larger than this value
      between the two segments, no insertion is called.'
    synonyms:
    - --reference_overlap_tolerance
    args: !SimpleFlagArg
      name: REFERENCE_OVERLAP_TOLERANCE
    optional: true
  - !Flag
    description: 'Sample ID to include in output vcf file (default: Sample)'
    synonyms:
    - --sample
    args: !SimpleFlagArg
      name: SAMPLE
    optional: true
  - !Flag
    description: 'SV types to include in output VCF (default: DEL,INS,INV,DUP_TAN,DUP_INT,BND).
      Give a comma- separated list of SV types. The possible SV types are: DEL (deletions),
      INS (novel insertions), INV (inversions), DUP_TAN (tandem duplications), DUP_INT
      (interspersed duplications), BND (breakends).'
    synonyms:
    - --types
    args: !SimpleFlagArg
      name: TYPES
    optional: true
  - !Flag
    description: 'Use symbolic alleles, such as <DEL> or <INV> in the VCF output (default:
      False). By default, deletions, insertions, and inversions are represented by
      their nucleotide sequence in the output VCF.'
    synonyms:
    - --symbolic_alleles
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: 'Represent tandem and interspersed duplications as insertions in
      output VCF (default: False). By default, duplications are represented by the
      SVTYPE=DUP and the genomic source is given by the POS and END tags. When enabling
      this option, duplications are instead represented by the SVTYPE=INS and POS
      and END both give the insertion point of the duplication.'
    synonyms:
    - --duplications_as_insertions
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: 'Output names of supporting query sequences in INFO tag of VCF (default:
      False). If enabled, the INFO/READS tag contains the list of names of the supporting
      query sequences.'
    synonyms:
    - --query_names
    args: !EmptyFlagArg {}
    optional: true
  command:
  - svim-asm
  - haploid
  subcommands: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
- !Command
  positional:
  - !Positional
    description: Working and output directory. Existing files in the directory are
      overwritten. If the directory does not exist, it is created.
    position: 0
    name: working_dir
    optional: false
  - !Positional
    description: SAM/BAM file with alignment of query assembly's first haplotype to
      reference assembly (needs to be coordinate-sorted)
    position: 1
    name: bam_file1
    optional: false
  - !Positional
    description: SAM/BAM file with alignment of query assembly's second haplotype
      to reference assembly (needs to be coordinate-sorted)
    position: 2
    name: bam_file2
    optional: false
  - !Positional
    description: Reference genome file that the assembly was aligned to (FASTA)
    position: 3
    name: genome
    optional: false
  named:
  - !Flag
    description: 'Minimum mapping quality of alignments to consider (default: 20).
      Alignments with a lower mapping quality are ignored.'
    synonyms:
    - --min_mapq
    args: !SimpleFlagArg
      name: MIN_MAPQ
    optional: true
  - !Flag
    description: 'Minimum SV size to detect (default: 40). SVIM can potentially detect
      events of any size but is limited by the signal-to-noise ratio in the input
      alignments. That means that more accurate assemblies and alignments enable the
      detection of smaller events.'
    synonyms:
    - --min_sv_size
    args: !SimpleFlagArg
      name: MIN_SV_SIZE
    optional: true
  - !Flag
    description: 'Maximum SV size to detect (default: 100000). This parameter is used
      to distinguish long deletions (and inversions) from translocations which cannot
      be distinguished from the alignment alone. Split read segments mapping far apart
      on the reference could either indicate a very long deletion (inversion) or a
      translocation breakpoint. SVIM calls a translocation breakpoint if the mapping
      distance is larger than this parameter and a deletion (or inversion) if it is
      smaller or equal.'
    synonyms:
    - --max_sv_size
    args: !SimpleFlagArg
      name: MAX_SV_SIZE
    optional: true
  - !Flag
    description: 'Maximum tolerated gap between adjacent alignment segments on the
      query (default: 50). Example: Deletions are detected from two subsequent segments
      of a split query sequence that are mapped far apart from each other on the reference.
      The query gap tolerance determines the maximum tolerated length of the query
      gap between both segments. If there is an unaligned query segment larger than
      this value between the two segments, no deletion is called.'
    synonyms:
    - --query_gap_tolerance
    args: !SimpleFlagArg
      name: QUERY_GAP_TOLERANCE
    optional: true
  - !Flag
    description: 'Maximum tolerated overlap between adjacent alignment segments on
      the query (default: 50). Example: Deletions are detected from two subsequent
      segments of a split query sequence that are mapped far apart from each other
      on the reference. The query overlap tolerance determines the maximum tolerated
      length of an overlap between both segments in the query. If the overlap between
      the two segments in the query is larger than this value, no deletion is called.'
    synonyms:
    - --query_overlap_tolerance
    args: !SimpleFlagArg
      name: QUERY_OVERLAP_TOLERANCE
    optional: true
  - !Flag
    description: 'Maximum tolerated gap between adjacent alignment segments on the
      reference (default: 50). Example: Insertions are detected from two segments
      of a split query sequence that are mapped right next to each other on the reference
      but with unaligned sequence between them on the query. The reference gap tolerance
      determines the maximum tolerated length of the reference gap between both segments.
      If there is a reference gap larger than this value between the two segments,
      no insertion is called.'
    synonyms:
    - --reference_gap_tolerance
    args: !SimpleFlagArg
      name: REFERENCE_GAP_TOLERANCE
    optional: true
  - !Flag
    description: 'Maximum tolerated overlap between adjacent alignment segments on
      the reference (default: 50). Example: Insertions are detected from two segments
      of a split query sequence that are mapped right next to each other on the reference
      but with unaligned sequence between them on the query. The reference overlap
      tolerance determines the maximum tolerated length of an overlap between both
      segments on the reference. If there is a reference gap larger than this value
      between the two segments, no insertion is called.'
    synonyms:
    - --reference_overlap_tolerance
    args: !SimpleFlagArg
      name: REFERENCE_OVERLAP_TOLERANCE
    optional: true
  - !Flag
    description: 'Maximum edit distance between both alleles to be paired up into
      a homozygous call (default: 200).'
    synonyms:
    - --max_edit_distance
    args: !SimpleFlagArg
      name: MAX_EDIT_DISTANCE
    optional: true
  - !Flag
    description: 'Sample ID to include in output vcf file (default: Sample)'
    synonyms:
    - --sample
    args: !SimpleFlagArg
      name: SAMPLE
    optional: true
  - !Flag
    description: 'SV types to include in output VCF (default: DEL,INS,INV,DUP_TAN,DUP_INT,BND).
      Give a comma- separated list of SV types. The possible SV types are: DEL (deletions),
      INS (novel insertions), INV (inversions), DUP_TAN (tandem duplications), DUP_INT
      (interspersed duplications), BND (breakends).'
    synonyms:
    - --types
    args: !SimpleFlagArg
      name: TYPES
    optional: true
  - !Flag
    description: 'Use symbolic alleles, such as <DEL> or <INV> in the VCF output (default:
      False). By default, deletions, insertions, and inversions are represented by
      their nucleotide sequence in the output VCF.'
    synonyms:
    - --symbolic_alleles
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: 'Represent tandem and interspersed duplications as insertions in
      output VCF (default: False). By default, duplications are represented by the
      SVTYPE=DUP and the genomic source is given by the POS and END tags. When enabling
      this option, duplications are instead represented by the SVTYPE=INS and POS
      and END both give the insertion point of the duplication.'
    synonyms:
    - --duplications_as_insertions
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: 'Output names of supporting query sequences in INFO tag of VCF (default:
      False). If enabled, the INFO/READS tag contains the list of names of the supporting
      query sequences.'
    synonyms:
    - --query_names
    args: !EmptyFlagArg {}
    optional: true
  command:
  - svim-asm
  - diploid
  subcommands: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: show program's version number and exit
  synonyms:
  - --version
  - -v
  args: !EmptyFlagArg {}
  optional: true
