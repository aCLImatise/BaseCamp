from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, Float, File

Influx_S_V0_1_0 = CommandToolBuilder(tool="influx_s", base_command=["influx_s"], inputs=[ToolInput(tag="in_no_opt", input_type=Boolean(optional=True), prefix="--noopt", doc=InputDocumentation(doc="no optimization, just use free parameters as is (after a\nprojection on feasibility domain), to calculate dependent\nfluxes, cumomers, stats and so on")), ToolInput(tag="in_no_scale", input_type=Boolean(optional=True), prefix="--noscale", doc=InputDocumentation(doc="no scaling factors to optimize => all scaling factors are\nassumed to be 1")), ToolInput(tag="in_meth", input_type=String(optional=True), prefix="--meth", doc=InputDocumentation(doc="method for optimization, one of 'nlsic|BFGS|Nelder-\nMead|pso'. Default: 'nlsic'. Multiple occurrences of this\noption can appear on command line. In this case,\nspecified minimization methods are applied successively,\ne.g. '--meth pso --meth nlsic' means that 'pso' will be\nused first, then 'nlsic' will take over from the point\nwhere 'pso' ends. In case of multiple methods, it is\nrecommended to start with non-gradient methods like 'pso'\nor 'Nelder-Mead' and make them follow by gradient based\nmethods like 'nlsic' or 'BFGS'. If 'pso' or 'Nelder-Mead'\nare indeed used as the first method, it is not\nrecommended to combine them with '--zc' option.")), ToolInput(tag="in_full_sys", input_type=Boolean(optional=True), prefix="--fullsys", doc=InputDocumentation(doc="calculate all cumomer set (not just the reduced one\nnecesary to simulate measurements)")), ToolInput(tag="in_emu", input_type=Boolean(optional=True), prefix="--emu", doc=InputDocumentation(doc="simulate labeling in EMU approach")), ToolInput(tag="in_ir_and", input_type=Boolean(optional=True), prefix="--irand", doc=InputDocumentation(doc="ignore initial approximation for free parameters (free\nfluxes and metabolite concentrations) from the FTBL file\nor from a dedicated file (cf --fseries and --iseries\noption) and use random values drawn uniformly from [0,1]\ninterval")), ToolInput(tag="in_sens", input_type=Int(optional=True), prefix="--sens", doc=InputDocumentation(doc="sensitivity method: SENS can be 'mc[=N]', mc stands for\nMonte-Carlo. N is an optional number of Monte-Carlo\nsimulations. Default for N: 10")), ToolInput(tag="in_cup_x", input_type=Float(optional=True), prefix="--cupx", doc=InputDocumentation(doc="upper limit for reverse fluxes. Must be in interval [0,\n1]. Default: 0.999")), ToolInput(tag="in_cup_n", input_type=Float(optional=True), prefix="--cupn", doc=InputDocumentation(doc="absolute limit for net fluxes: -cupn <= netflux <= cupn.\nMust be non negative. Value 0 means no limit. Default:\n1.e3")), ToolInput(tag="in_cupp", input_type=Float(optional=True), prefix="--cupp", doc=InputDocumentation(doc="upper limit for metabolite pool. Default: 1.e5")), ToolInput(tag="in_clown_r", input_type=String(optional=True), prefix="--clownr", doc=InputDocumentation(doc="lower limit for not reversible free and dependent fluxes.\nZero value (default) means no lower limit")), ToolInput(tag="in_cin_out", input_type=Int(optional=True), prefix="--cinout", doc=InputDocumentation(doc="lower limit for input/output free and dependent fluxes.\nMust be non negative. Default: 0")), ToolInput(tag="in_clow_p", input_type=Float(optional=True), prefix="--clowp", doc=InputDocumentation(doc="lower limit for free metabolite pools. Must be positive.\nDefault 1.e-8")), ToolInput(tag="in_np", input_type=Float(optional=True), prefix="--np", doc=InputDocumentation(doc="When integer >= 1, it is a number of parallel\nsubprocesses used in Monte-Carlo (MC) simulations or for\nmultiple FTBL inputs. When NP is a float number between 0\nand 1, it gives a fraction of available cores (rounded to\nclosest integer) to be used. Without this option or for\nNP=0, all available cores in a given node are used for MC\nsimulations.")), ToolInput(tag="in_ln", input_type=Boolean(optional=True), prefix="--ln", doc=InputDocumentation(doc="Least norm solution is used for increments during the\nnon-linear iterations when Jacobian is rank deficient")), ToolInput(tag="in_sln", input_type=Boolean(optional=True), prefix="--sln", doc=InputDocumentation(doc="Least norm of the solution of linearized problem (and not\njust of increments) is used when Jacobian is rank\ndeficient")), ToolInput(tag="in_tik_h_reg", input_type=Boolean(optional=True), prefix="--tikhreg", doc=InputDocumentation(doc="Approximate least norm solution is used for increments\nduring the non-linear iterations when Jacobian is rank\ndeficient")), ToolInput(tag="in_lim", input_type=Boolean(optional=True), prefix="--lim", doc=InputDocumentation(doc="The same as --ln but with a function limSolve::lsei()")), ToolInput(tag="in_zc", input_type=String(optional=True), prefix="--zc", doc=InputDocumentation(doc="Apply zero crossing strategy with non negative threshold\nfor net fluxes")), ToolInput(tag="in_ff_guess", input_type=Boolean(optional=True), prefix="--ffguess", doc=InputDocumentation(doc="Don't use free/dependent flux definitions from FTBL\nfile(s). Make an automatic guess.")), ToolInput(tag="in_f_series", input_type=File(optional=True), prefix="--fseries", doc=InputDocumentation(doc="File name with free parameter values for multiple\nstarting points. Default: '' (empty, i.e. only one\nstarting point from the FTBL file is used)")), ToolInput(tag="in_iseries", input_type=Int(optional=True), prefix="--iseries", doc=InputDocumentation(doc="Indexes of starting points to use. Format: '1:10' -- use\nonly first ten starting points; '1,3' -- use the the\nfirst and third starting points; '1:10,15,91:100' -- a\nmix of both formats is allowed. Default: '' (empty, i.e.\nall provided starting points are used)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Integer (preferably a prime integer) used for\nreproducible random number generating. It makes\nreproducible random starting points (--irand) but also\nMonte-Carlo simulations for sensitivity analysis.\nDefault: none, i.e. current system value is used, so\nrandom drawing will be varying at each run.")), ToolInput(tag="in_excl_outliers", input_type=Boolean(optional=True), prefix="--excl_outliers", doc=InputDocumentation(doc="This option takes an optional argument, a p-value between\n0 and 1 which is used to filter out measurement outliers.\nThe filtering is based on Z statistics calculated on\nreduced residual distribution. Default: 0.01.")), ToolInput(tag="in_no_calc", input_type=Boolean(optional=True), prefix="--nocalc", doc=InputDocumentation(doc="generate an R code but not execute it.")), ToolInput(tag="in_add_noise", input_type=Boolean(optional=True), prefix="--addnoise", doc=InputDocumentation(doc="Add centered gaussian noise to simulated measurements\nwritten to _res.kvh file. SD of this noise is taken from\nFTBL file")), ToolInput(tag="in_copy_doc", input_type=Boolean(optional=True), prefix="--copy_doc", doc=InputDocumentation(doc="copy documentation directory in the current directory and\nexit. If ./doc exists, its content is silently owerriten.")), ToolInput(tag="in_copy_test", input_type=Boolean(optional=True), prefix="--copy_test", doc=InputDocumentation(doc="copy test directory in the current directory and exit. If\n./test exists, its content is silently owerriten.")), ToolInput(tag="in_install_r_dep", input_type=Boolean(optional=True), prefix="--install_rdep", doc=InputDocumentation(doc="install R dependencies and exit.")), ToolInput(tag="in_time_it", input_type=Boolean(optional=True), prefix="--TIMEIT", doc=InputDocumentation(doc="developer option: measure cpu time or not")), ToolInput(tag="in_prof", input_type=Boolean(optional=True), prefix="--prof", doc=InputDocumentation(doc="developer option: do time profiling or not")), ToolInput(tag="in_tb_limit", input_type=String(optional=True), prefix="--tblimit", doc=InputDocumentation(doc="developer option: set trace back limit for python error\nmessages\n"))], outputs=[], container="quay.io/biocontainers/influx_si:5.4.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Influx_S_V0_1_0().translate("wdl")

