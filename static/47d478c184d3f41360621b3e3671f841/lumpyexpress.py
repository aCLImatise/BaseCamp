from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, Float, Directory

Lumpyexpress_V0_1_0 = CommandToolBuilder(tool="lumpyexpress", base_command=["lumpyexpress"], inputs=[ToolInput(tag="in_full_bam_cram", input_type=File(optional=True), prefix="-B", doc=InputDocumentation(doc="full BAM or CRAM file(s) (comma separated) (required)")), ToolInput(tag="in_split_reads_comma", input_type=File(optional=True), prefix="-S", doc=InputDocumentation(doc="split reads BAM file(s) (comma separated)")), ToolInput(tag="in_discordant_reads_comma", input_type=File(optional=True), prefix="-D", doc=InputDocumentation(doc="discordant reads BAM files(s) (comma separated)")), ToolInput(tag="in_indexed_reference_genome", input_type=File(optional=True), prefix="-R", doc=InputDocumentation(doc="indexed reference genome fasta file (recommended for CRAMs)")), ToolInput(tag="in_bedpe_file_comma", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="bedpe file of depths (comma separated and prefixed by sample:)\ne.g sample_x:/path/to/sample_x.bedpe,sample_y:/path/to/sample_y.bedpe")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="output file [fullBam.bam.vcf]")), ToolInput(tag="in_bed_file_exclude", input_type=File(optional=True), prefix="-x", doc=InputDocumentation(doc="BED file to exclude")), ToolInput(tag="in_output_probability_curves", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc="output probability curves for each variant")), ToolInput(tag="in_minimum_sample_weight", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="minimum sample weight for a call [4]")), ToolInput(tag="in_trim_threshold", input_type=Float(optional=True), prefix="-r", doc=InputDocumentation(doc="trim threshold [0]")), ToolInput(tag="in_temp_directory", input_type=Directory(optional=True), prefix="-T", doc=InputDocumentation(doc="temp directory [./output_prefix.XXXXXXXXXXXX]")), ToolInput(tag="in_keep_temporary_files", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="keep temporary files")), ToolInput(tag="in_path_lumpyexpressconfig_filedefault", input_type=File(optional=True), prefix="-K", doc=InputDocumentation(doc="path to lumpyexpress.config file\n(default: same directory as lumpyexpress)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="verbose"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="output file [fullBam.bam.vcf]"))], container="quay.io/biocontainers/lumpy-sv-minimal:0.3.1--h5ef6573_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Lumpyexpress_V0_1_0().translate("wdl")

