from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean

Snpsplit_V0_1_0 = CommandToolBuilder(tool="SNPsplit", base_command=["SNPsplit"], inputs=[ToolInput(tag="in_snp_file", input_type=File(optional=True), prefix="--snp_file", doc=InputDocumentation(doc="Mandatory file specifying SNP positions to be considered; may be a plain text file or\ngzip compressed. Currently, the SNP file is expected to be in the following format:\nSNP-ID     Chromosome  Position    Strand   Ref/SNP\nexample:   33941939        9       68878541       1       T/G\nOnly the information contained in fields 'Chromosome', 'Position' and 'Reference/SNP base'\nare being used for analysis. The genome referred to as 'Ref' will be used as genome 1,\nthe genome containing the 'SNP' base as genome 2.")), ToolInput(tag="in_paired", input_type=Boolean(optional=True), prefix="--paired", doc=InputDocumentation(doc="Paired-end mode. (Default: OFF).")), ToolInput(tag="in_outdir", input_type=File(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Write all output files into this directory. By default the output files will be written into\nthe same folder as the input file(s). If the specified folder does not exist, SNPsplit will attempt\nto create it first. The path to the output folder can be either relative or absolute.")), ToolInput(tag="in_singletons", input_type=File(optional=True), prefix="--singletons", doc=InputDocumentation(doc="If the allele-tagged paired-end file also contains singleton alignments (which is the\ndefault for e.g. TopHat), these will be written out to extra files (ending in _st.bam)\ninstead of writing everything to combined paired-end and singleton files. Default: OFF.")), ToolInput(tag="in_no_sort", input_type=Boolean(optional=True), prefix="--no_sort", doc=InputDocumentation(doc="This option skips the sorting step if BAM files are already sorted by read name (e.g.\nHi-C files generated by HiCUP). Please note that setting --no_sort for unsorted paired-end\nfiles will break the tagging process!")), ToolInput(tag="in_hic", input_type=Boolean(optional=True), prefix="--hic", doc=InputDocumentation(doc="Assumes Hi-C data processed with HiCUP (www.bioinformatics.babraham.ac.uk/projects/hicup/)\nas input, i.e. the input BAM file is paired-end and Reads 1 and 2 follow each other. Thus,\nthis option also sets the flags --paired and --no_sort. Default: OFF.")), ToolInput(tag="in_bisulfite", input_type=Boolean(optional=True), prefix="--bisulfite", doc=InputDocumentation(doc="Assumes Bisulfite-Seq data processed with Bismark (www.bioinformatics.babraham.ac.uk/projects/bismark/)\nas input. In paired-end mode (--paired), Read 1 and Read 2 of a pair are expected to follow\neach other in consecutive lines. SNPsplit will run a quick check at the start of a run to see if the\nfile provided appears to be a Bismark file, and set the flags --bisulfite and/or --paired\nautomatically. In addition it will perform a quick check to see if a paired-end file appears\nto have been positionally sorted, and if not will set the --no_sort flag.")), ToolInput(tag="in_sam_tools_path", input_type=Boolean(optional=True), prefix="--samtools_path", doc=InputDocumentation(doc="The path to your Samtools installation, e.g. /home/user/samtools/. Does not need to\nbe specified explicitly if Samtools is in the PATH already.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output (for debugging).")), ToolInput(tag="in_conflicting", input_type=Boolean(optional=True), prefix="--conflicting", doc=InputDocumentation(doc="Reads or read pairs that were classified as 'Conflicting' (XX:Z:CF) will be written to\nan extra file (ending in .conflicting.bam) instead of being simply skipped. Reads may be\nclassified as 'Conflicting' if a single read contains SNP information for both genomes at\nthe same time, or if the SNP position was deleted from the read. Read-pairs are considered\n'Conflicting' if either read is was tagged with the XX:Z:CF flag. Default: OFF.")), ToolInput(tag="in_sam", input_type=File(optional=True), prefix="--sam", doc=InputDocumentation(doc="The output will be written out in SAM format instead of BAM (default). SNPsplit will attempt to use\nthe path to Samtools that was specified with --samtools_path, or, if it hasn't been\nspecified, attempt to find Samtools in the PATH environment. If no installation of\nSamtools can be found, the SAM output will be compressed with GZIP instead (yielding a\n.sam.gz output file)."))], outputs=[ToolOutput(tag="out_singletons", output_type=File(optional=True), selector=InputSelector(input_to_select="in_singletons", type_hint=File()), doc=OutputDocumentation(doc="If the allele-tagged paired-end file also contains singleton alignments (which is the\ndefault for e.g. TopHat), these will be written out to extra files (ending in _st.bam)\ninstead of writing everything to combined paired-end and singleton files. Default: OFF.")), ToolOutput(tag="out_sam", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sam", type_hint=File()), doc=OutputDocumentation(doc="The output will be written out in SAM format instead of BAM (default). SNPsplit will attempt to use\nthe path to Samtools that was specified with --samtools_path, or, if it hasn't been\nspecified, attempt to find Samtools in the PATH environment. If no installation of\nSamtools can be found, the SAM output will be compressed with GZIP instead (yielding a\n.sam.gz output file)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Snpsplit_V0_1_0().translate("wdl", allow_empty_container=True)

