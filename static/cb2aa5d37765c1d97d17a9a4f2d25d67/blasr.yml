!Command
positional:
- !Positional
  description: ': report an alignment which has the best alignmentscore and has the
    smallest mapping coordinate in any reference.'
  position: 0
  name: leftmost
  optional: false
named:
- !Flag
  description: (false)Ignore any hq regions in the region table.
  synonyms:
  - --ignoreHQRegions
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (false)
  synonyms:
  - --placeRepeatsRandomly
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: When specified, adjacent insertion or deletions are allowed. Otherwise,
    adjacent  insertion and deletions are merged into one operation.  Using quality
    values  to guide pairwise alignments may dictate that the higher probability alignment  contains
    adjacent insertions or deletions.  Current tools such as GATK do not permit this
    and so they are not reported by default.
  synonyms:
  - --allowAdjacentIndels
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (false) Use a fast heuristic algorithm to speed up sparse dynamic programming.
  synonyms:
  - --fastSDP
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (-200) Maximum score to output (high is bad, negative good).
  synonyms:
  - --maxScore
  args: !SimpleFlagArg
    name: m
  optional: true
- !Flag
  description: (0) Report alignments only if their lengths are greater than minAlnLength.
  synonyms:
  - --minAlnLength
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (0) Report alignments only if their percentage similarity is greater
    than minPctSimilarity.
  synonyms:
  - --minPctSimilarity
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (0) Report alignments only if their percentage accuracy is greater
    than minAccuracy.
  synonyms:
  - --minPctAccuracy
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (1) Align using N processes.  All large data structures such as the
    suffix array and  tuple count table are shared.
  synonyms:
  - --nproc
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: (0) Index of the first read to begin aligning. This is useful when
    multiple instances  are running on the same data, for example when on a multi-rack
    cluster.
  synonyms:
  - --start
  args: !SimpleFlagArg
    name: S
  optional: true
- !Flag
  description: (1) Align one read every 'S' reads.
  synonyms:
  - --stride
  args: !SimpleFlagArg
    name: S
  optional: true
- !Flag
  description: (0) Proportion of reads to randomly subsample (expressed as a decimal)
    and align.
  synonyms:
  - --subsample
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: When specified, only align reads whose ZMW hole numbers are in LIST.
    LIST is a comma-delimited string of ranges, such as '1,2,3,10-13'. This option
    only works when reads are in bam, bax.h5 or plx.h5 format.
  synonyms:
  - --holeNumbers
  args: !SimpleFlagArg
    name: LIST
  optional: true
command:
- blasr
parent:
subcommands: []
help_flag: !Flag
  description: Print this help file.
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "   Options for blasr \n   Basic usage: 'blasr reads.{bam|fasta|bax.h5|fofn}\
  \ genome.fasta [-options] \n option\tDescription (default_value).\n\n Input Files.\n\
  \   reads.bam   is a PacBio BAM file of reads.\n               This is the preferred\
  \ input to blasr because rich quality\n               value (insertion,deletion,\
  \ and substitution quality values) information is \n               maintained. \
  \ The extra quality information improves variant detection and mapping\n       \
  \        speed.\n   reads.fasta is a multi-fasta file of reads.  While any fasta\
  \ file is valid input, \n   reads.bax.h5|reads.plx.h5 is the old DEPRECATED output\
  \ format of SMRT reads.\n   input.fofn  File of file names accepted.\n\n   --sa\
  \ suffixArrayFile\n               Use the suffix array 'sa' for detecting matches\n\
  \               between the reads and the reference.  The suffix\n             \
  \  array has been prepared by the sawriter program.\n\n   --ctab tab \n        \
  \       A table of tuple counts used to estimate match significance.  This is \n\
  \               by the program 'printTupleCountTable'.  While it is quick to generate\
  \ on \n               the fly, if there are many invocations of blasr, it is useful\
  \ to\n               precompute the ctab.\n\n   --regionTable table (DEPRECATED)\n\
  \               Read in a read-region table in HDF format for masking portions of\
  \ reads.\n               This may be a single table if there is just one input file,\
  \ \n               or a fofn.  When a region table is specified, any region table\
  \ inside \n               the reads.plx.h5 or reads.bax.h5 files are ignored.\n\n\
  (DEPRECATED) Options for modifying reads.\n               There is ancilliary information\
  \ about substrings of reads \n               that is stored in a 'region table'\
  \ for each read file.  Because \n               HDF is used, the region table may\
  \ be part of the .bax.h5 or .plx.h5 file,\n               or a separate file.  A\
  \ contiguously read substring from the template \n               is a subread, and\
  \ any read may contain multiple subreads. The boundaries \n               of the\
  \ subreads may be inferred from the region table either directly or \n         \
  \      by definition of adapter boundaries.  Typically region tables also\n    \
  \           contain information for the location of the high and low quality regions\
  \ of\n               reads.  Reads produced by spurrious reads from empty ZMWs have\
  \ a high\n               quality start coordinate equal to high quality end, making\
  \ no usable read.\n   --useccs   \n               Align the circular consensus sequence\
  \ (ccs), then report alignments\n               of the ccs subreads to the window\
  \ that the ccs was mapped to.  Only \n               alignments of the subreads\
  \ are reported.\n   --useccsall\n               Similar to -useccs, except all subreads\
  \ are aligned, rather than just\n               the subreads used to call the ccs.\
  \  This will include reads that only\n               cover part of the template.\n\
  \   --useccsdenovo\n               Align the circular consensus, and report only\
  \ the alignment of the ccs\n               sequence.\n   --noSplitSubreads (false)\n\
  \               Do not split subreads at adapters.  This is typically only \n  \
  \             useful when the genome in an unrolled version of a known template,\
  \ and \n               contains template-adapter-reverse_template sequence.\n  \
  \ --ignoreRegions(false)\n               Ignore any information in the region table.\n\
  \   --ignoreHQRegions (false)Ignore any hq regions in the region table.\n\n Alignments\
  \ To Report.\n   --bestn n (10)\n               Report the top 'n' alignments.\n\
  \   --hitPolicy\n               (all) Specify a policy to treat multiple hits from\
  \ [all, allbest, random, randombest, leftmost]\n                 all       : report\
  \ all alignments.\n                 allbest   : report all equally top scoring alignments.\n\
  \                 random    : report a random alignment.\n                 randombest:\
  \ report a random alignment from multiple equally top scoring alignments.\n    \
  \             leftmost  : report an alignment which has the best alignmentscore\
  \ and has the smallest mapping coordinate in any reference.\n   --placeRepeatsRandomly\
  \ (false)\n               DEPRECATED! If true, equivalent to --hitPolicy randombest.\n\
  \   --randomSeed (0)\n               Seed for random number generator. By default\
  \ (0), use current time as seed. \n   --noSortRefinedAlignments (false) \n     \
  \          Once candidate alignments are generated and scored via sparse dynamic\
  \ \n               programming, they are rescored using local alignment that accounts\
  \ \n               for different error profiles.\n               Resorting based\
  \ on the local alignment may change the order the hits are returned.\n   --allowAdjacentIndels\
  \ \n               When specified, adjacent insertion or deletions are allowed.\
  \ Otherwise, adjacent \n               insertion and deletions are merged into one\
  \ operation.  Using quality values \n               to guide pairwise alignments\
  \ may dictate that the higher probability alignment \n               contains adjacent\
  \ insertions or deletions.  Current tools such as GATK do not permit\n         \
  \      this and so they are not reported by default.\n\n Output Formats and Files\n\
  \   --out out (terminal)  \n               Write output to 'out'.\n   --sam    \
  \   Write output in SAM format. Starting from version 5.2 is no longer supported\n\
  \               Use --bam, then translate from .bam to .sam\n   -m t           \n\
  \               If not printing SAM, modify the output of the alignment.\n     \
  \           t=0 Print blast like output with |'s connecting matched nucleotides.\n\
  \                  1 Print only a summary: score and pos.\n                  2 Print\
  \ in Compare.xml format.\n                  3 Print in vulgar format (DEPRECATED).\n\
  \                  4 Print a longer tabular version of the alignment.\n        \
  \          5 Print in a machine-parsable format that is read by compareSequences.py.\n\
  \   --header\n               Print a header as the first line of the output file\
  \ describing the contents of each column.\n   --titleTable tab (NULL) \n       \
  \        Construct a table of reference sequence titles.  The reference sequences\
  \ are \n               enumerated by row, 0,1,...  The reference index is printed\
  \ in alignment results\n               rather than the full reference name.  This\
  \ makes output concise, particularly when\n               very verbose titles exist\
  \ in reference names.\n   --unaligned file\n               Output reads that are\
  \ not aligned to 'file'\n   --noPrintUnalignedSeqs\n               Must be used\
  \ together with -unaligned, print unaligned read names only.\n   --clipping [none|hard|subread|soft]\
  \ (none)\n               Use no/hard/subread/soft clipping, ONLY for SAM/BAM output.\n\
  \   --printSAMQV (false)\n               Print quality values to SAM output.\n \
  \  --cigarUseSeqMatch (false)\n               CIGAR strings in SAM/BAM output use\
  \ '=' and 'X' to represent sequence match and mismatch instead of 'M'.\n\n Options\
  \ for anchoring alignment regions. This will have the greatest effect on speed and\
  \ sensitivity.\n   --minMatch m (12) \n               Minimum seed length.  Higher\
  \ minMatch will speed up alignment, \n               but decrease sensitivity.\n\
  \   --maxMatch l (inf)\n               Stop mapping a read to the genome when the\
  \ lcp length reaches l.  \n               This is useful when the query is part\
  \ of the reference, for example when \n               constructing pairwise alignments\
  \ for de novo assembly.\n   --maxLCPLength l (inf)\n               The same as -maxMatch.\n\
  \   --maxAnchorsPerPosition m (10000) \n               Do not add anchors from a\
  \ position if it matches to more than 'm' locations in the target.\n   --advanceExactMatches\
  \ E (0)\n               Another trick for speeding up alignments with match - E\
  \ fewer anchors.  Rather than\n               finding anchors between the read and\
  \ the genome at every position in the read, \n               when an anchor is found\
  \ at position i in a read of length L, the next position \n               in a read\
  \ to find an anchor is at i+L-E.\n               Use this when alignining already\
  \ assembled contigs.\n   --nCandidates n (10)\n               Keep up to 'n' candidates\
  \ for the best alignment.  A large value of n will slow mapping\n              \
  \ because the slower dynamic programming steps are applied to more clusters of anchors\n\
  \               which can be a rate limiting step when reads are very long.\n  \
  \ --concordant(false)\n               Map all subreads of a zmw (hole) to where\
  \ the longest full pass subread of the zmw \n               aligned to. This requires\
  \ to use the region table and hq regions.\n               This option only works\
  \ when reads are in base or pulse h5 format.\n   --fastMaxInterval(false)\n    \
  \           Fast search maximum increasing intervals as alignment candidates. The\
  \ search \n               is not as exhaustive as the default, but is much faster.\n\
  \   --aggressiveIntervalCut(false)\n               Agreesively filter out non-promising\
  \ alignment candidates, if there \n               exists at least one promising\
  \ candidate. If this option is turned on, \n               Blasr is likely to ignore\
  \ short alignments of ALU elements.\n   --fastSDP(false)\n               Use a fast\
  \ heuristic algorithm to speed up sparse dynamic programming.\n\n  Options for Refining\
  \ Hits.\n   --refineConcordantAlignments(false)\n               Refine concordant\
  \ alignments. It slightly increases alignment accuracy at cost of time.\n   --sdpTupleSize\
  \ K (11)\n               Use matches of length K to speed dynamic programming alignments.\
  \  This controls\n               accuracy of assigning gaps in pairwise alignments\
  \ once a mapping has been found,\n               rather than mapping sensitivity\
  \ itself.\n   --scoreMatrix \"score matrix string\" \n               Specify an\
  \ alternative score matrix for scoring fasta reads.  The matrix is \n          \
  \     in the format \n                  ACGTN\n                A abcde\n       \
  \         C fghij\n                G klmno\n                T pqrst\n          \
  \      N uvwxy . The values a...y should be input as a quoted space separated \n\
  \               string: \"a b c ... y\". Lower scores are better, so matches should\
  \ be less \n               than mismatches e.g. a,g,m,s = -5 (match), mismatch =\
  \ 6. \n   --affineOpen value (10) \n               Set the penalty for opening an\
  \ affine alignment.\n   --affineExtend a (0)\n               Change affine (extension)\
  \ gap penalty. Lower value allows more gaps.\n\n Options for overlap/dynamic programming\
  \ alignments and pairwise overlap for de novo assembly. \n   --useQuality (false)\n\
  \               Use substitution/insertion/deletion/merge quality values to score\
  \ gap and \n               mismatch penalties in pairwise alignments.  Because the\
  \ insertion and deletion\n               rates are much higher than substitution,\
  \ this will make many alignments \n               favor an insertion/deletion over\
  \ a substitution.  Naive consensus calling methods \n               will then often\
  \ miss substitution polymorphisms. This option should be \n               used when\
  \ calling consensus using the Quiver method.  Furthermore, when \n             \
  \  not using quality values to score alignments, there will be a lower consensus\
  \ \n               accuracy in homolymer regions.\n   --affineAlign (false)\n  \
  \             Refine alignment using affine guided align.\n\n Options for filtering\
  \ reads and alignments\n   --minReadLength l(50)\n               Skip reads that\
  \ have a full length less than l. Subreads may be shorter.\n   --minSubreadLength\
  \ l(0)\n               Do not align subreads of length less than l.\n   --minRawSubreadScore\
  \ m(0)\n               Do not align subreads whose quality score in region table\
  \ is less than m (quality scores should be in range [0, 1000]).\n   --maxScore m(-200)\n\
  \               Maximum score to output (high is bad, negative good).\n   --minAlnLength\n\
  \               (0) Report alignments only if their lengths are greater than minAlnLength.\n\
  \   --minPctSimilarity\n               (0) Report alignments only if their percentage\
  \ similarity is greater than minPctSimilarity.\n   --minPctAccuracy\n          \
  \     (0) Report alignments only if their percentage accuracy is greater than minAccuracy.\n\
  \n Options for parallel alignment.\n   --nproc N (1)\n               Align using\
  \ N processes.  All large data structures such as the suffix array and \n      \
  \         tuple count table are shared.\n   --start S (0)\n               Index\
  \ of the first read to begin aligning. This is useful when multiple instances \n\
  \               are running on the same data, for example when on a multi-rack cluster.\n\
  \   --stride S (1)\n               Align one read every 'S' reads.\n\n Options for\
  \ subsampling reads.\n   --subsample (0)\n               Proportion of reads to\
  \ randomly subsample (expressed as a decimal) and align.\n   --holeNumbers LIST\
  \ \n               When specified, only align reads whose ZMW hole numbers are in\
  \ LIST.\n               LIST is a comma-delimited string of ranges, such as '1,2,3,10-13'.\n\
  \               This option only works when reads are in bam, bax.h5 or plx.h5 format.\n\
  \n -h            Print this help file.\n\nIn release v5.1 of BLASR, command-line\
  \ options will use the \nsingle dash/double dash convention: \nCharacter options\
  \ are preceded by a single dash. (Example: -v) \nWord options are preceded by a\
  \ double dash. (Example: --verbose) \nPlease modify your scripts accordingly when\
  \ BLASR v5.1 is released. \n\nTo cite BLASR, please use: Chaisson M.J., and Tesler\
  \ G., Mapping \nsingle molecule sequencing reads using Basic Local Alignment with\
  \ \nSuccessive Refinement (BLASR): Theory and Application, BMC \nBioinformatics\
  \ 2012, 13:238.\nPlease report any bugs to 'https://github.com/PacificBiosciences/blasr/issues'.\n\
  \n\n"
generated_using:
- -h
