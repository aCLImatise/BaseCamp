from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, String

Elector_V0_1_0 = CommandToolBuilder(tool="elector", base_command=["elector"], inputs=[ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="-threads", doc=InputDocumentation(doc="[THREADS]    Number of threads")), ToolInput(tag="in_corrected", input_type=Boolean(optional=True), prefix="-corrected", doc=InputDocumentation(doc="[CORRECTED]\nFasta file with corrected reads (each read sequence on\none line)")), ToolInput(tag="in_split", input_type=Boolean(optional=True), prefix="-split", doc=InputDocumentation(doc="Corrected reads are split")), ToolInput(tag="in_uncorrected", input_type=Boolean(optional=True), prefix="-uncorrected", doc=InputDocumentation(doc="[UNCORRECTED]\nPrefix of the reads simulation files")), ToolInput(tag="in_perfect", input_type=Boolean(optional=True), prefix="-perfect", doc=InputDocumentation(doc="[PERFECT]    Fasta file with reference read sequences (each read\nsequence on one line)")), ToolInput(tag="in_fasta_file_reference_genome", input_type=Boolean(optional=True), prefix="-reference", doc=InputDocumentation(doc="[REFERENCE]\nFasta file with reference genome sequences (each\nsequence on one line)")), ToolInput(tag="in_simulator", input_type=Boolean(optional=True), prefix="-simulator", doc=InputDocumentation(doc="[SIMULATOR]\nTool used for the simulation of the long reads (either\nnanosim, simlord, or real). Value real should be used\nif assessing real data.")), ToolInput(tag="in_correct_or", input_type=Boolean(optional=True), prefix="-corrector", doc=InputDocumentation(doc="[SOFT]     Corrector used (lowercase, in this list: canu,\ncolormap, consent, daccord, ectools, flas, fmlrc,\nhalc, hercules, hg-color, jabba, lsc, lordec, lorma,\nmecat, nas, nanocorr, pbdagcon, proovread). If no\ncorrector name is provided, make sure the read's\nheaders are correctly formatted (i.e. they correspond\nto those of uncorrected and reference files)")), ToolInput(tag="in_dazz_db", input_type=Boolean(optional=True), prefix="-dazzDb", doc=InputDocumentation(doc="[DAZZDB]      Reads database used for the correction, if the reads\nwere corrected with Daccord or PBDagCon")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="-output", doc=InputDocumentation(doc="[OUTPUTDIRPATH]\nName for output directory")), ToolInput(tag="in_remap", input_type=Boolean(optional=True), prefix="-remap", doc=InputDocumentation(doc="Perform remapping of the corrected reads to the")), ToolInput(tag="in_minsize", input_type=Boolean(optional=True), prefix="-minsize", doc=InputDocumentation(doc="[MINSIZE]    Do not assess reads/fragments chose length is <=\nMINSIZE % of the original read")), ToolInput(tag="in_no_plot", input_type=Boolean(optional=True), prefix="-noplot", doc=InputDocumentation(doc="Do not output plots and PDF report with R/LaTeX")), ToolInput(tag="in_assemble_perform_assembly", input_type=String(), position=0, doc=InputDocumentation(doc="-assemble             Perform assembly of the corrected reads"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="[OUTPUTDIRPATH]\nName for output directory"))], container="quay.io/biocontainers/elector:1.0.4--py36hf0b53f7_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Elector_V0_1_0().translate("wdl")

