from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, String, Int

Rra_V0_1_0 = CommandToolBuilder(tool="RRA", base_command=["RRA"], inputs=[ToolInput(tag="in_format_item_i", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc=". Format: <item id> <group id> <list id> <value> [<probability>] [<chosen>]")), ToolInput(tag="in_format_group_i", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc=". Format: <group id> <number of items in the group> <lo-value> <false discovery rate>")), ToolInput(tag="in_rra_only_smaller", input_type=Float(optional=True), prefix="-p", doc=InputDocumentation(doc=". RRA only consider the items with percentile smaller than this parameter. Default=0.1")), ToolInput(tag="in_rra_only_greater", input_type=Float(optional=True), prefix="-P", doc=InputDocumentation(doc=". RRA only consider the items with percentile greater than this parameter. Default=-1.0")), ToolInput(tag="in_control", input_type=String(optional=True), prefix="--control", doc=InputDocumentation(doc=". A list of control sgRNA names.")), ToolInput(tag="in_permutation", input_type=Int(optional=True), prefix="--permutation", doc=InputDocumentation(doc=". The number of rounds of permutation. Increase this value if the number of genes is small. Default 100.")), ToolInput(tag="in_no_permutation_by_group_dot", input_type=Int(optional=True), prefix="--no-permutation-by-group.", doc=InputDocumentation(doc="default, gene permutation is performed separately, by their number of sgRNAs. Turning this option will perform permutation on all genes together. This makes the program faster, but the p value estimation is accurate only if the number of sgRNAs per gene is approximately the same.")), ToolInput(tag="in_skip_gene", input_type=Int(optional=True), prefix="--skip-gene", doc=InputDocumentation(doc=". Genes to skip from doing permutation. Specify it multiple times if you need to skip more than 1 genes.")), ToolInput(tag="in_min_percentage_goods_grn_a", input_type=Int(optional=True), prefix="--min-percentage-goodsgrna", doc=InputDocumentation(doc=". Filter genes that have too few percentage of 'good sgrnas', or sgrnas that fall below the -p threshold. Must be a number between 0-1. Default 0 (do not filter genes).")), ToolInput(tag="in_min_number_goods_grn_a", input_type=Int(optional=True), prefix="--min-number-goodsgrna", doc=InputDocumentation(doc=". Filter genes that have too few number of 'good sgrnas', or sgrnas that fall below the -p threshold. Must be an integer. Default 0 (do not filter genes).")), ToolInput(tag="in_max_sg_rna_per_gene_permutation", input_type=Int(optional=True), prefix="--max-sgrnapergene-permutation", doc=InputDocumentation(doc=". Only permute genes by group if the number of sgRNAs per gene is smaller than this number. This will save a lot of time if some regions are targeted by a large number of sgRNAs (usually hundreds). Must be an integer. Default 100."))], outputs=[ToolOutput(tag="out_format_group_i", output_type=File(optional=True), selector=InputSelector(input_to_select="in_format_group_i", type_hint=File()), doc=OutputDocumentation(doc=". Format: <group id> <number of items in the group> <lo-value> <false discovery rate>"))], container="quay.io/biocontainers/mageck:0.5.9.4--py38hed8969a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rra_V0_1_0().translate("wdl")

