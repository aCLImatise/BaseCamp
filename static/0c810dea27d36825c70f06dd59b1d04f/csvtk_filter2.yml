!Command
command:
- csvtk
- filter2
positional: []
named:
- !Flag
  description: awk-like filter condition. e.g. '$age>12' or '$1 > $3' or '$name=="abc"'
    or '$1 % 2 == 0'
  synonyms:
  - -f
  - --filter
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: print line number as the first column ("n")
  synonyms:
  - -n
  - --line-number
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: chunk size of CSV reader (default 50)
  synonyms:
  - -c
  - --chunk-size
  args: !SimpleFlagArg
    name: int
  optional: true
- !Flag
  description: lines starting with commment-character will be ignored. if your header
    row starts with '#', please assign "-C" another rare symbol, e.g. '$' (default
    "#")
  synonyms:
  - -C
  - --comment-char
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: delimiting character of the input CSV file (default ",")
  synonyms:
  - -d
  - --delimiter
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: ignore empty rows
  synonyms:
  - -E
  - --ignore-empty-row
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ignore illegal rows
  synonyms:
  - -I
  - --ignore-illegal-row
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: file of input files list (one file per line), if given, they are appended
    to files from cli arguments
  synonyms:
  - --infile-list
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: if given, a quote may appear in an unquoted field and a non-doubled
    quote may appear in a quoted field
  synonyms:
  - -l
  - --lazy-quotes
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: specifies that the input CSV file does not have header row
  synonyms:
  - -H
  - --no-header-row
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: number of CPUs to use (default value depends on your computer) (default
    8)
  synonyms:
  - -j
  - --num-cpus
  args: !SimpleFlagArg
    name: int
  optional: true
- !Flag
  description: delimiting character of the output CSV file, e.g., -D $'\t' for tab
    (default ",")
  synonyms:
  - -D
  - --out-delimiter
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: out file ("-" for stdout, suffix .gz for gzipped out) (default "-")
  synonyms:
  - -o
  - --out-file
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: specifies that the output is delimited with tabs. Overrides "-D"
  synonyms:
  - -T
  - --out-tabs
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: specifies that the input CSV file is delimited with tabs. Overrides
    "-d" and "-D"
  synonyms:
  - -t
  - --tabs
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: help for filter2
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "filter rows by awk-like artithmetic/string expressions\n\nThe artithmetic/string\
  \ expression is supported by:\n\n  https://github.com/Knetic/govaluate\n\nSupported\
  \ operators and types:\n\n  Modifiers: + - / * & | ^ ** % >> <<\n  Comparators:\
  \ > >= < <= == != =~ !~\n  Logical ops: || &&\n  Numeric constants, as 64-bit floating\
  \ point (12345.678)\n  String constants (single quotes: 'foobar')\n  Date constants\
  \ (single quotes)\n  Boolean constants: true false\n  Parenthesis to control order\
  \ of evaluation ( )\n  Arrays (anything separated by , within parenthesis: (1, 2,\
  \ 'foo'))\n  Prefixes: ! - ~\n  Ternary conditional: ? :\n  Null coalescence: ??\n\
  \nUsage:\n  csvtk filter2 [flags]\n\nFlags:\n  -f, --filter string   awk-like filter\
  \ condition. e.g. '$age>12' or '$1 > $3' or '$name==\"abc\"' or '$1 % 2 == 0'\n\
  \  -h, --help            help for filter2\n  -n, --line-number     print line number\
  \ as the first column (\"n\")\n\nGlobal Flags:\n  -c, --chunk-size int         chunk\
  \ size of CSV reader (default 50)\n  -C, --comment-char string    lines starting\
  \ with commment-character will be ignored. if your header row starts with '#', please\
  \ assign \"-C\" another rare symbol, e.g. '$' (default \"#\")\n  -d, --delimiter\
  \ string       delimiting character of the input CSV file (default \",\")\n  -E,\
  \ --ignore-empty-row       ignore empty rows\n  -I, --ignore-illegal-row     ignore\
  \ illegal rows\n      --infile-list string     file of input files list (one file\
  \ per line), if given, they are appended to files from cli arguments\n  -l, --lazy-quotes\
  \            if given, a quote may appear in an unquoted field and a non-doubled\
  \ quote may appear in a quoted field\n  -H, --no-header-row          specifies that\
  \ the input CSV file does not have header row\n  -j, --num-cpus int           number\
  \ of CPUs to use (default value depends on your computer) (default 8)\n  -D, --out-delimiter\
  \ string   delimiting character of the output CSV file, e.g., -D $'\\t' for tab\
  \ (default \",\")\n  -o, --out-file string        out file (\"-\" for stdout, suffix\
  \ .gz for gzipped out) (default \"-\")\n  -T, --out-tabs               specifies\
  \ that the output is delimited with tabs. Overrides \"-D\"\n  -t, --tabs       \
  \            specifies that the input CSV file is delimited with tabs. Overrides\
  \ \"-d\" and \"-D\"\n"
generated_using:
- --help
