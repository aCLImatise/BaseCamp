from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Rtg_Vcfannotate_V0_1_0 = CommandToolBuilder(tool="rtg_vcfannotate", base_command=["rtg", "vcfannotate"], inputs=[ToolInput(tag="in_bed_regions", input_type=File(optional=True), prefix="--bed-regions", doc=InputDocumentation(doc="if set, only read VCF records that overlap the\nranges contained in the specified BED file")), ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="VCF file containing variants to annotate. Use\n'-' to read from standard input")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output VCF file name. Use '-' to write to\nstandard output")), ToolInput(tag="in_region", input_type=Int(optional=True), prefix="--region", doc=InputDocumentation(doc="if set, only read VCF records within the\nspecified range. The format is one of\n<sequence_name>, <sequence_name>:<start>-<end>,\n<sequence_name>:<pos>+<length> or\n<sequence_name>:<pos>~<padding>")), ToolInput(tag="in_annotation", input_type=Int(optional=True), prefix="--annotation", doc=InputDocumentation(doc="add computed annotation to VCF records. Allowed\nvalues are [AC, AN, EP, GQD, IC, LAL, MEANQAD,\nNAA, PD, QA, QD, RA, SCONT, VAF, VAF1, ZY]. May\nbe specified 0 or more times, or as a comma\nseparated list")), ToolInput(tag="in_bed_ids", input_type=File(optional=True), prefix="--bed-ids", doc=InputDocumentation(doc="add variant IDs from BED file. May be specified\n0 or more times")), ToolInput(tag="in_bed_info", input_type=File(optional=True), prefix="--bed-info", doc=InputDocumentation(doc="add INFO annotations from BED file. May be\nspecified 0 or more times")), ToolInput(tag="in_fill_an_ac", input_type=Boolean(optional=True), prefix="--fill-an-ac", doc=InputDocumentation(doc="add or update the AN and AC INFO fields")), ToolInput(tag="in_info_description", input_type=String(optional=True), prefix="--info-description", doc=InputDocumentation(doc="if the BED INFO field is not already declared,\nuse this description in the header (Default is\nAnnotation)")), ToolInput(tag="in_info_id", input_type=String(optional=True), prefix="--info-id", doc=InputDocumentation(doc="the INFO ID for BED INFO annotations (Default\nis ANN)")), ToolInput(tag="in_relabel", input_type=File(optional=True), prefix="--relabel", doc=InputDocumentation(doc="relabel samples according to 'old-name\nnew-name' pairs in specified file")), ToolInput(tag="in_vcf_ids", input_type=File(optional=True), prefix="--vcf-ids", doc=InputDocumentation(doc="add variant IDs from VCF file. May be specified\n0 or more times")), ToolInput(tag="in_add_header", input_type=File(optional=True), prefix="--add-header", doc=InputDocumentation(doc="|FILE  file containing VCF header lines to add, or a\nliteral header line. May be specified 0 or more\ntimes")), ToolInput(tag="in_no_gzip", input_type=Boolean(optional=True), prefix="--no-gzip", doc=InputDocumentation(doc="do not gzip the output")), ToolInput(tag="in_no_header", input_type=Boolean(optional=True), prefix="--no-header", doc=InputDocumentation(doc="prevent VCF header from being written"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output VCF file name. Use '-' to write to\nstandard output"))], container="quay.io/biocontainers/rtg-tools:3.12--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rtg_Vcfannotate_V0_1_0().translate("wdl")

