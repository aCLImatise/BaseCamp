from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory

Velvetoptimiser_Pl_V0_1_0 = CommandToolBuilder(tool="VelvetOptimiser.pl", base_command=["VelvetOptimiser.pl"], inputs=[ToolInput(tag="in_verbose_verbose_logging", input_type=Boolean(optional=True), prefix="--v", doc=InputDocumentation(doc="|verbose+    Verbose logging, includes all velvet output in the logfile. (default '0').")), ToolInput(tag="in_hashsi_starting_lower", input_type=Boolean(optional=True), prefix="--s", doc=InputDocumentation(doc="|hashs=i     The starting (lower) hash value (default '19').")), ToolInput(tag="in_hashei_end_higher", input_type=Boolean(optional=True), prefix="--e", doc=InputDocumentation(doc="|hashe=i     The end (higher) hash value (default '191').")), ToolInput(tag="in_stepi_step_hash", input_type=Boolean(optional=True), prefix="--x", doc=InputDocumentation(doc="|step=i      The step in hash search..  min 2, no odd numbers (default '2').")), ToolInput(tag="in_velvethfiless_file_section", input_type=Boolean(optional=True), prefix="--f", doc=InputDocumentation(doc="|velvethfiles=s The file section of the velveth command line. (default '0').")), ToolInput(tag="in_amosfile_turn_velvet", input_type=File(optional=True), prefix="--a", doc=InputDocumentation(doc="|amosfile!   Turn on velvet's read tracking and amos file output. (default '0').")), ToolInput(tag="in_velvetgoptionss_velvetg_options", input_type=Boolean(optional=True), prefix="--o", doc=InputDocumentation(doc="|velvetgoptions=s Extra velvetg options to pass through.  eg. -long_mult_cutoff -max_coverage etc (default '').")), ToolInput(tag="in_threadsi_maximum_number", input_type=Boolean(optional=True), prefix="--t", doc=InputDocumentation(doc="|threads=i   The maximum number of simulataneous velvet instances to run. (default '8').")), ToolInput(tag="in_genomesizef_approximate_size", input_type=Boolean(optional=True), prefix="--g", doc=InputDocumentation(doc="|genomesize=f The approximate size of the genome to be assembled in megabases.\nOnly used in memory use estimation. If not specified, memory use estimation\nwill not occur. If memory use is estimated, the results are shown and then program exits. (default '0').")), ToolInput(tag="in_optfunckmers_optimisation_function", input_type=Boolean(optional=True), prefix="--k", doc=InputDocumentation(doc="|optFuncKmer=s The optimisation function used for k-mer choice. (default 'n50').")), ToolInput(tag="in_optfunccovs_optimisation_function", input_type=Boolean(optional=True), prefix="--c", doc=InputDocumentation(doc="|optFuncCov=s The optimisation function used for cov_cutoff optimisation. (default 'Lbp').")), ToolInput(tag="in_minimum_covcutoff_used", input_type=Boolean(optional=True), prefix="--m", doc=InputDocumentation(doc="|minCovCutoff=f The minimum cov_cutoff to be used. (default '0').")), ToolInput(tag="in_prefixs_prefix_output", input_type=Boolean(optional=True), prefix="--p", doc=InputDocumentation(doc="|prefix=s    The prefix for the output filenames, the default is the date and time in the format DD-MM-YYYY-HH-MM_. (default 'auto').")), ToolInput(tag="in_dirfinals_name_put", input_type=Directory(optional=True), prefix="--d", doc=InputDocumentation(doc="|dir_final=s The name of the directory to put the final output into. (default '.').")), ToolInput(tag="in_uppercovcutofff_maximum_coverage", input_type=Boolean(optional=True), prefix="--z", doc=InputDocumentation(doc="|upperCovCutoff=f The maximum coverage cutoff to consider as a multiplier of the expected coverage. (default '0.8')."))], outputs=[ToolOutput(tag="out_amosfile_turn_velvet", output_type=File(optional=True), selector=InputSelector(input_to_select="in_amosfile_turn_velvet", type_hint=File()), doc=OutputDocumentation(doc="|amosfile!   Turn on velvet's read tracking and amos file output. (default '0').")), ToolOutput(tag="out_dirfinals_name_put", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_dirfinals_name_put", type_hint=File()), doc=OutputDocumentation(doc="|dir_final=s The name of the directory to put the final output into. (default '.')."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Velvetoptimiser_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

