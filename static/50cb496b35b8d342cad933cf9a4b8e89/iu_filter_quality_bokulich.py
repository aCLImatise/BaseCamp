from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, Int, Boolean, File

Iu_Filter_Quality_Bokulich_V0_1_0 = CommandToolBuilder(tool="iu_filter_quality_bokulich", base_command=["iu-filter-quality-bokulich"], inputs=[ToolInput(tag="in_minimal_highquality_read", input_type=Float(optional=True), prefix="-p", doc=InputDocumentation(doc="Minimal high-quality read length (default: 0.75)")), ToolInput(tag="in_minimum_phred_score", input_type=Int(optional=True), prefix="-q", doc=InputDocumentation(doc="Minimum PHRED score to identify low quality bases\n(default: 3)")), ToolInput(tag="in_maximum_consecutive_lowquality", input_type=Int(optional=True), prefix="-r", doc=InputDocumentation(doc="Maximum of consecutive low-quality calls (default: 3)")), ToolInput(tag="in_maximum_ambiguous_calls", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="Maximum of ambiguous calls allowed (default: 0)")), ToolInput(tag="in_ignore_def_lines", input_type=Boolean(optional=True), prefix="--ignore-deflines", doc=InputDocumentation(doc="If FASTQ files are not CASAVA outputs, parsing the\nheader info may go wrong. This flag tells the software\nto skip parsing deflines.")), ToolInput(tag="in_visualize_quality_curves", input_type=Boolean(optional=True), prefix="--visualize-quality-curves", doc=InputDocumentation(doc="When set, mean quality score for individual bases will\nbe stored and visualized for each group of reads.")), ToolInput(tag="in_limit_num_pairs", input_type=Int(optional=True), prefix="--limit-num-pairs", doc=InputDocumentation(doc="Put a limit to the number of pairs to analyze. For\ntesting purposes.")), ToolInput(tag="in_print_qual_scores", input_type=File(optional=True), prefix="--print-qual-scores", doc=InputDocumentation(doc="When set, the script will print out the Q-scores the\nway it sees it in the FASTQ file. This flag will\ngenerate a lot of useless output to the stdout, and\nyou should not use it if you are not testing\nsomething.")), ToolInput(tag="in_store_read_fate", input_type=Boolean(optional=True), prefix="--store-read-fate", doc=InputDocumentation(doc="As it goes through your raw reads, this program keeps\ntrack of the read fate so you can learn what happened\nto a given read ID in your raw input data once the\nanalysis is done. This output can become extremely\nlarge, and often is utterly useless to you unless you\nhave a very specific benchmarking or debugging\ninterestes, hence, it is not stored by default. You\ncan change that behavior by using this flag, and ask\nillumina-utils to store this data on your disk.\n"))], outputs=[ToolOutput(tag="out_print_qual_scores", output_type=File(optional=True), selector=InputSelector(input_to_select="in_print_qual_scores", type_hint=File()), doc=OutputDocumentation(doc="When set, the script will print out the Q-scores the\nway it sees it in the FASTQ file. This flag will\ngenerate a lot of useless output to the stdout, and\nyou should not use it if you are not testing\nsomething."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Iu_Filter_Quality_Bokulich_V0_1_0().translate("wdl", allow_empty_container=True)

