!Command
command:
- yamllint
positional:
- !Positional
  optional: false
  position: 0
  name: FILE_OR_DIR
  description: files to check
named:
- !Flag
  optional: true
  synonyms:
  - -c
  - --config-file
  description: path to a custom configuration
  args: !SimpleFlagArg
    name: CONFIG_FILE
- !Flag
  optional: true
  synonyms:
  - -d
  - --config-data
  description: custom configuration (as YAML source)
  args: !SimpleFlagArg
    name: CONFIG_DATA
- !Flag
  optional: true
  synonyms:
  - -f
  - --format
  description: format for parsing output
  args: !ChoiceFlagArg
    choices: !!set
      standard:
      parsable:
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - -v
  - --version
  description: show program's version number and exit
  args: !EmptyFlagArg {}
help_text: "usage: yamllint [-h] [-c CONFIG_FILE] [-d CONFIG_DATA]\n             \
  \   [-f {parsable,standard}] [-v]\n                FILE_OR_DIR [FILE_OR_DIR ...]\n\
  \nA linter for YAML files. yamllint does not only check for syntax validity, but\n\
  for weirdnesses like key repetition and cosmetic problems such as lines\nlength,\
  \ trailing spaces, indentation, etc.\n\npositional arguments:\n  FILE_OR_DIR   \
  \        files to check\n\noptional arguments:\n  -h, --help            show this\
  \ help message and exit\n  -c CONFIG_FILE, --config-file CONFIG_FILE\n         \
  \               path to a custom configuration\n  -d CONFIG_DATA, --config-data\
  \ CONFIG_DATA\n                        custom configuration (as YAML source)\n \
  \ -f {parsable,standard}, --format {parsable,standard}\n                       \
  \ format for parsing output\n  -v, --version         show program's version number\
  \ and exit\n"
generated_using:
- --help
docker_image:
