from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Directory, Int, String, Float

Duplomap_V0_1_0 = CommandToolBuilder(tool="duplomap", base_command=["duplomap"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Input reads in the sorted and indexed bam format.")), ToolInput(tag="in_database", input_type=Boolean(optional=True), prefix="--database", doc=InputDocumentation(doc="<FILE|DIR+>                        Database file or directory (multiple entries allowed).")), ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="Reference genome in the indexed fasta format.")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use. [default: 4]")), ToolInput(tag="in_force", input_type=Directory(optional=True), prefix="--force", doc=InputDocumentation(doc="Force work with non-empty output directory.")), ToolInput(tag="in_continue", input_type=Directory(optional=True), prefix="--continue", doc=InputDocumentation(doc="Continue duplomap run in the same output directory. In that case duplomap will skip already analyzed\nduplications clusters (be careful to use the same command line arguments).")), ToolInput(tag="in_iterations", input_type=Int(optional=True), prefix="--iterations", doc=InputDocumentation(doc="Maximum number of iterations of EM-algorithm. [default: 100]")), ToolInput(tag="in_log", input_type=String(optional=True), prefix="--log", doc=InputDocumentation(doc="Logging level in log files (stderr shows logs with info level and higher). [default: debug]  [possible\nvalues: trace, debug, info, warning, error, critical, none]")), ToolInput(tag="in_sam_tools", input_type=File(optional=True), prefix="--samtools", doc=InputDocumentation(doc="Path to Samtools executable. [default: samtools]")), ToolInput(tag="in_minimap_km_er", input_type=Int(optional=True), prefix="--minimap-kmer", doc=InputDocumentation(doc="Minimap2 k-mer size. [default: 11]")), ToolInput(tag="in_preset", input_type=Int(optional=True), prefix="--preset", doc=InputDocumentation(doc="Minimap2 alignment preset. Possible values: pacbio [pb] and nanopore [ont] [default: pacbio]  [possible\nvalues: pacbio, pb, nanopore, ont]")), ToolInput(tag="in_gt_prior", input_type=Float(optional=True), prefix="--gt-prior", doc=InputDocumentation(doc="Reference genotype prior. [default: 0.95]")), ToolInput(tag="in_relative_padding", input_type=Float(optional=True), prefix="--relative-padding", doc=InputDocumentation(doc="Padding added to the sides of possible read locations. For example, for a read with with length 3,000 and\nrelative-padding 0.01, possible locations would be padded by 30 bp on both sides. [default: 0.01]")), ToolInput(tag="in_psv_complexity", input_type=Float(optional=True), prefix="--psv-complexity", doc=InputDocumentation(doc="<FLOAT>\nKeep PSVs that have complexity higher than FLOAT[1] for substitutions (0.6 by default), and FLOAT[2] for\nindels (0.8 by default).")), ToolInput(tag="in_psv_size_diff", input_type=Int(optional=True), prefix="--psv-size-diff", doc=InputDocumentation(doc="Maximal difference in sizes of the PSV sequences (including anchors). PSVs with bigger difference are not\nused, but influence pre-PSV LCS comparison. [default: 10]")), ToolInput(tag="in_gt_min_mapq", input_type=Int(optional=True), prefix="--gt-min-mapq", doc=InputDocumentation(doc="Do not use reads with MAPQ lower than INT to determine genotype probabilities. [default: 30]")), ToolInput(tag="in_read_psv_impact", input_type=Float(optional=True), prefix="--read-psv-impact", doc=InputDocumentation(doc="Maximal read-PSV impact. A single read cannot decrease genotype probability of a PSV by more than 10^FLOAT,\nand a single PSV cannot affect location probabilities by more than 10^FLOAT. [default: 3]")), ToolInput(tag="in_ambiguous", input_type=Float(optional=True), prefix="--ambiguous", doc=InputDocumentation(doc="<FLOAT>\nA read is aligned to a PSV ambiguously if local alignment probabilities between the read and the PSV alleles\nare within FLOAT[1]-fold range (max(probabilities) < min(probabilities) * FLOAT[1]). If the PSV has more\nthan FLOAT[2] percent ambiguously aligned reads, it is not used.\n[default: 4 30]")), ToolInput(tag="in_copy_num_perc", input_type=Float(optional=True), prefix="--copy-num-perc", doc=InputDocumentation(doc="Do not realign reads that overlap high copy number regions by more than FLOAT %. High copy number regions\nare defined in duplomap-prepare with --skip-copy-num. [default: 50]")), ToolInput(tag="in_unknown_regions", input_type=Int(optional=True), prefix="--unknown-regions", doc=InputDocumentation(doc="How to process reads that overlap unknown regions in the reference:\nrealign  - Realign a read and assign appropriate MAPQ,\nkeep-old - Keep an old alignment and MAPQ,\nmapq0    - Keep an old alignment and set MAPQ to 0.\n[default: realign]  [possible values: realign, keep-old, mapq0]")), ToolInput(tag="in_filtering_km_er", input_type=Int(optional=True), prefix="--filtering-kmer", doc=InputDocumentation(doc="k-mer size used for filtering possible location for a read. [default: 11]")), ToolInput(tag="in_filtering_p_value", input_type=Float(optional=True), prefix="--filtering-p-value", doc=InputDocumentation(doc="We compare LCS paths of a read and its possible locations. If location A is better than location B with p-\nvalue lower than FLOAT, location B may be discarded. [default: 1e-4]")), ToolInput(tag="in_max_locations", input_type=Int(optional=True), prefix="--max-locations", doc=InputDocumentation(doc="Maximal number of locations after filtering. If read can align to more than INT locations, it will get the\noriginal alignment and MAPQ 0. [default: 50]")), ToolInput(tag="in_conflicts_p_value", input_type=Float(optional=True), prefix="--conflicts-p-value", doc=InputDocumentation(doc="Each read is put through Binomial test with the number of conflicting PSVs out of all homozygous PSVs. All\nreads that fail the test are assigned low MAPQ. The threshold p-value is divided by the number of reads in\neach component according to the Bonferroni correction. [default: 0.05]")), ToolInput(tag="in_min_conflicts", input_type=Int(optional=True), prefix="--min-conflicts", doc=InputDocumentation(doc="Minimal number of conflicts between a read and PSVs to discard the read. [default: 5]")), ToolInput(tag="in_skip_mapq", input_type=Int(optional=True), prefix="--skip-mapq", doc=InputDocumentation(doc="Skip reads with mapping quality at least INT in the original alignment. These reads will be used to estimate\ngenotypes, but will not be realigned. [default: none]")), ToolInput(tag="in_secondary", input_type=Int(optional=True), prefix="--secondary", doc=InputDocumentation(doc="Output at most INT secondary alignments for each realigned read. Use 'all' to output all secondary\nalignments. [default: 0]")), ToolInput(tag="in_first", input_type=Int(optional=True), prefix="--first", doc=InputDocumentation(doc="<INT>\nUse first INT[1] databases and first INT[2] reads for each database. Use all databases/reads when INT = 0.")), ToolInput(tag="in_generated", input_type=Boolean(optional=True), prefix="--generated", doc=InputDocumentation(doc="Reads are generated and the true position is known.")), ToolInput(tag="in_skip_unique", input_type=Boolean(optional=True), prefix="--skip-unique", doc=InputDocumentation(doc="Do not output reads from unique (not duplicated) regions.")), ToolInput(tag="in_skip_vcf", input_type=File(optional=True), prefix="--skip-vcf", doc=InputDocumentation(doc="Do not output vcf file with genotyped PSVs.")), ToolInput(tag="in_keep", input_type=Boolean(optional=True), prefix="--keep", doc=InputDocumentation(doc="Do not clean, keep all output files.")), ToolInput(tag="in_default_hmm", input_type=Boolean(optional=True), prefix="--default-hmm", doc=InputDocumentation(doc="Use default HMM parameters (instead of estimating using reads).")), ToolInput(tag="in_output_debug", input_type=Boolean(optional=True), prefix="--output-debug", doc=InputDocumentation(doc="Output additional CSV files."))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory.")), ToolOutput(tag="out_force", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Force work with non-empty output directory.")), ToolOutput(tag="out_continue", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_continue", type_hint=File()), doc=OutputDocumentation(doc="Continue duplomap run in the same output directory. In that case duplomap will skip already analyzed\nduplications clusters (be careful to use the same command line arguments).")), ToolOutput(tag="out_skip_vcf", output_type=File(optional=True), selector=InputSelector(input_to_select="in_skip_vcf", type_hint=File()), doc=OutputDocumentation(doc="Do not output vcf file with genotyped PSVs."))], container="quay.io/biocontainers/duplomap:0.9.5--hed695b0_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Duplomap_V0_1_0().translate("wdl")

