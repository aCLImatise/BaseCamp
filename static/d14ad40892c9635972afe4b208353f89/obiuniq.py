from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Obiuniq_V0_1_0 = CommandToolBuilder(tool="obiuniq", base_command=["obiuniq"], inputs=[ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--DEBUG", doc=InputDocumentation(doc="Set logging in debug mode")), ToolInput(tag="in_without_progress_bar", input_type=Boolean(optional=True), prefix="--without-progress-bar", doc=InputDocumentation(doc="desactivate progress bar")), ToolInput(tag="in_merge", input_type=String(optional=True), prefix="--merge", doc=InputDocumentation(doc="Attributes to merge")), ToolInput(tag="in_merge_ids", input_type=Boolean(optional=True), prefix="--merge-ids", doc=InputDocumentation(doc="Add the merged key with all ids of merged sequences")), ToolInput(tag="in_category_attribute", input_type=String(optional=True), prefix="--category-attribute", doc=InputDocumentation(doc="Add one attribute to the list of attributes used to\ngroup sequences before dereplication (option can be\nused several times)")), ToolInput(tag="in_prefix", input_type=Boolean(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Dereplication is done based on prefix matching: (i)\nThe shortest sequence of each group is a prefix of any\nsequence of its group (ii) Two shortest sequences of\nany couple of groups are not theprefix of the other\none")), ToolInput(tag="in_database", input_type=File(optional=True), prefix="--database", doc=InputDocumentation(doc="ecoPCR taxonomy Database name")), ToolInput(tag="in_taxonomy_dump", input_type=File(optional=True), prefix="--taxonomy-dump", doc=InputDocumentation(doc="NCBI Taxonomy dump repository name")), ToolInput(tag="in_skip", input_type=String(optional=True), prefix="--skip", doc=InputDocumentation(doc="skip the N first sequences")), ToolInput(tag="in_only", input_type=String(optional=True), prefix="--only", doc=InputDocumentation(doc="treat only N sequences")), ToolInput(tag="in_genbank", input_type=Boolean(optional=True), prefix="--genbank", doc=InputDocumentation(doc="Input file is in genbank format")), ToolInput(tag="in_embl", input_type=Boolean(optional=True), prefix="--embl", doc=InputDocumentation(doc="Input file is in embl format")), ToolInput(tag="in_skip_on_error", input_type=Boolean(optional=True), prefix="--skip-on-error", doc=InputDocumentation(doc="Skip sequence entries with parse error")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Input file is in fasta nucleic format (including\nobitools fasta extentions)")), ToolInput(tag="in_eco_pcr", input_type=Boolean(optional=True), prefix="--ecopcr", doc=InputDocumentation(doc="Input file is in ecopcr format")), ToolInput(tag="in_raw_fast_a", input_type=Boolean(optional=True), prefix="--raw-fasta", doc=InputDocumentation(doc="Input file is in fasta format (but more tolerant to\nformat variant)")), ToolInput(tag="in_sanger", input_type=Boolean(optional=True), prefix="--sanger", doc=InputDocumentation(doc="Input file is in sanger fastq nucleic format (standard\nfastq)")), ToolInput(tag="in_solexa", input_type=Boolean(optional=True), prefix="--solexa", doc=InputDocumentation(doc="Input file is in fastq nucleic format produced by\nsolexa sequencer")), ToolInput(tag="in_eco_pcr_db", input_type=Boolean(optional=True), prefix="--ecopcrdb", doc=InputDocumentation(doc="Input file is an ecopcr database")), ToolInput(tag="in_nuc", input_type=Boolean(optional=True), prefix="--nuc", doc=InputDocumentation(doc="Input file contains nucleic sequences")), ToolInput(tag="in_prot", input_type=Boolean(optional=True), prefix="--prot", doc=InputDocumentation(doc="Input file contains protein sequences"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Obiuniq_V0_1_0().translate("wdl", allow_empty_container=True)

