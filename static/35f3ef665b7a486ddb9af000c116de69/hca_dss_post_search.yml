!Command
command:
- hca
- dss
- post-search
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - --es-query
  description: Elasticsearch query
  args: !SimpleFlagArg
    name: ES_QUERY
- !Flag
  optional: true
  synonyms:
  - --output-format
  description: Specifies the output format. The default format, `summary`, is a list
    of UUIDs for bundles that match the query. Set this parameter to `raw` to get
    the verbatim JSON metadata for bundles that match the query. When using `output_format
    raw` the `per_page` size is limit to no more than 10 to avoid excessively large
    response sizes.
  args: !ChoiceFlagArg
    choices: !!set
      summary:
      raw:
- !Flag
  optional: true
  synonyms:
  - --replica
  description: Replica to search.
  args: !ChoiceFlagArg
    choices: !!set
      gcp:
      aws:
- !Flag
  optional: true
  synonyms:
  - --per-page
  description: Max number of results to return per page. When using `output_format
    raw` the `per_page` size is limit to no more than 10 to avoid excessively large
    response sizes.
  args: !SimpleFlagArg
    name: PER_PAGE
- !Flag
  optional: true
  synonyms:
  - --search-after
  description: '**Search-After-Context**. An internal state pointer parameter for
    use with pagination. This parameter is referenced by the `Link` header as described
    in the "Pagination" section. The API client should not need to set this parameter
    directly; it should instead directly fetch the URL given in the `Link` header.'
  args: !SimpleFlagArg
    name: SEARCH_AFTER
- !Flag
  optional: true
  synonyms:
  - --no-paginate
  description: Do not automatically page the responses
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: hca dss post-search [-h] --es-query ES_QUERY\n                \
  \           [--output-format {summary,raw}] --replica {aws,gcp}\n              \
  \             [--per-page PER_PAGE] [--search-after SEARCH_AFTER]\n            \
  \               [--no-paginate]\n\nAccepts Elasticsearch JSON query and returns\
  \ matching bundle identifiers\n# Index design\nThe metadata seach index is implemented\
  \ as a [document-oriented database](https://en.wikipedia.org/wiki/Document-oriented_database)\
  \ using [Elasticsearch](https://www.elastic.co/). The index stores all information\
  \ relevant to a bundle within each bundle document, largely eliminating the need\
  \ for [object-relational mapping](https://en.wikipedia.org/wiki/Object-relational_mapping).\
  \ This design is optimized for queries that filter the data.\n\nTo illustrate this\
  \ concept, say our index stored information on three entities, `foo`, `bar`, and\
  \ `baz`. A foo can have many bars and bars can have many bazes. If we were to index\
  \ bazes in a document-oriented design, the information on the foo a bar comes from\
  \ and the bazes it contains are combined into a single document. A example sketch\
  \ of this is shown below in [JSON-schema](https://en.wikipedia.org/wiki/JSON#JSON_Schema).\n\
  ```\n{\n  \"definitions\": {\n    \"bar\": {\n      \"type\": \"object\",\n    \
  \  \"properties\": {\n        \"uuid\": {\n          \"type\": \"string\",\n   \
  \       \"format\": \"uuid\"\n        },\n        \"foo\": {\n          \"type\"\
  : \"object\",\n          \"properties\": {\n            \"uuid\": {\n          \
  \    \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n\
  \            ...\n          }\n        },\n        \"bazes\": {\n          \"type\"\
  : \"array\",\n          \"items\": {\n            \"type\": \"string\",\n      \
  \      \"format\": \"uuid\"\n          }\n        },\n        ...\n      }\n   \
  \ }\n  }\n}\n```\nThis closely resembles the structure of DSS bundle documents:\
  \ projects have many bundles and bundles have many files. Each bundle document is\
  \ a concatenation of the metadata on the project it belongs to and the files it\
  \ contains.\n# Limitations to index design\nThere are limitations to the design\
  \ of DSS's metadata search index. A few important ones are listed below.\n* [Joins](https://en.wikipedia.org/wiki/Join_(SQL))\
  \ between bundle metadata must be conducted client-side\n* Querying is schema-specific;\
  \ fields or values changed between schema version will break queries that use those\
  \ fields and values\n* A new search index must be built for each schema version\n\
  * A lot of metadata is duplicated between documents\n\nOptional Arguments:\n  -h,\
  \ --help            show this help message and exit\n\nRequired Arguments:\n  --es-query\
  \ ES_QUERY   Elasticsearch query\n  --output-format {summary,raw}\n            \
  \            Specifies the output format. The default format, `summary`, is a list\
  \ of UUIDs for bundles that match the query. Set this parameter to `raw` to get\
  \ the verbatim JSON metadata for bundles that match the query. When using `output_format\
  \ raw` the `per_page` size is limit to no more than 10 to avoid excessively large\
  \ response sizes.\n  --replica {aws,gcp}   Replica to search.\n  --per-page PER_PAGE\
  \   Max number of results to return per page. When using `output_format raw` the\
  \ `per_page` size is limit to no more than 10 to avoid excessively large response\
  \ sizes.\n  --search-after SEARCH_AFTER\n                        **Search-After-Context**.\
  \ An internal state pointer parameter for use with pagination. This parameter is\
  \ referenced by the `Link` header as described in the \"Pagination\" section. The\
  \ API client should not need to set this parameter directly; it should instead directly\
  \ fetch the URL given in the `Link` header.\n  --no-paginate         Do not automatically\
  \ page the responses\n\n"
generated_using:
- --help
docker_image:
