&id005 !Command
positional:
- !Positional
  description: ''
  position: 0
  name: indexed_alignments.bam
  optional: false
named:
- !Flag
  description: Minimum anchor length. Junctions which satisfy a minimum  anchor length
    on both sides are reported. [8]
  synonyms:
  - -a
  args: !SimpleFlagArg
    name: INT
  optional: true
- !Flag
  description: Minimum intron length. [70]
  synonyms:
  - -m
  args: !SimpleFlagArg
    name: INT
  optional: true
- !Flag
  description: Maximum intron length. [500000]
  synonyms:
  - -M
  args: !SimpleFlagArg
    name: INT
  optional: true
- !Flag
  description: The file to write output to. [STDOUT]
  synonyms:
  - -o
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: The region to identify junctions  in "chr:start-end" format. Entire
    BAM by default.
  synonyms:
  - -r
  args: !SimpleFlagArg
    name: STR
  optional: true
- !Flag
  description: Strand specificity of RNA library preparation  (0 = unstranded, 1 =
    first-strand/RF, 2, = second-strand/FR). REQUIRED
  synonyms:
  - -s
  args: !SimpleFlagArg
    name: INT
  optional: true
- !Flag
  description: Tag used in bam to label strand. [XS]
  synonyms:
  - -t
  args: !SimpleFlagArg
    name: STR
  optional: true
command:
- regtools
- junctions
- extract
parent: &id001 !Command
  positional: []
  named: []
  command:
  - regtools
  - junctions
  parent: &id002 !Command
    positional: []
    named: []
    command:
    - regtools
    parent:
    subcommands:
    - *id001
    - !Command
      positional:
      - !Positional
        description: ''
        position: 0
        name: command
        optional: false
      named: []
      command:
      - regtools
      - cis-ase
      parent: *id002
      subcommands: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "Usage:\t\tregtools cis-ase <command> [options]\nCommand:\tidentify\t\
        \tIdentify cis ase.\n\n"
      generated_using: &id004
      - --help
    - &id003 !Command
      positional: []
      named: []
      command:
      - regtools
      - cis-splice-effects
      parent: *id002
      subcommands:
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: variants.vcf
          optional: false
        - !Positional
          description: ''
          position: 1
          name: alignments.bam
          optional: false
        - !Positional
          description: ''
          position: 2
          name: ref.fa
          optional: false
        - !Positional
          description: ''
          position: 3
          name: annotations.gtf
          optional: false
        named:
        - !Flag
          description: Output file containing the aberrant splice junctions with annotations.
            [STDOUT]
          synonyms:
          - -o
          args: !SimpleFlagArg
            name: STR
          optional: true
        - !Flag
          description: Output file containing variants annotated as splice relevant
            (VCF format).
          synonyms:
          - -v
          args: !SimpleFlagArg
            name: STR
          optional: true
        - !Flag
          description: Output file containing the aberrant junctions in BED12 format.
          synonyms:
          - -j
          args: !SimpleFlagArg
            name: STR
          optional: true
        - !Flag
          description: Strand specificity of RNA library preparation  (0 = unstranded,
            1 = first-strand/RF, 2, = second-strand/FR). REQUIRED
          synonyms:
          - -s
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Tag used in bam to label strand. [XS]
          synonyms:
          - -t
          args: !SimpleFlagArg
            name: STR
          optional: true
        - !Flag
          description: Minimum anchor length. Junctions which satisfy a minimum  anchor
            length on both sides are reported. [8]
          synonyms:
          - -a
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Minimum intron length. [70]
          synonyms:
          - -m
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Maximum intron length. [500000]
          synonyms:
          - -M
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Window size in b.p to identify splicing events in. The tool
            identifies events in variant.start +/- w basepairs. Default behaviour
            is to look at the window between previous and next exons.
          synonyms:
          - -w
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Maximum distance from the start/end of an exon  to annotate
            a variant as relevant to splicing, the variant  is in exonic space, i.e
            a coding variant. [3]
          synonyms:
          - -e
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Maximum distance from the start/end of an exon  to annotate
            a variant as relevant to splicing, the variant  is in intronic space.
            [2]
          synonyms:
          - -i
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Annotate variants in intronic space within a transcript(not
            to be used with -i).
          synonyms:
          - -I
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: Annotate variants in exonic space within a transcript(not to
            be used with -e).
          synonyms:
          - -E
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: Don't skip single exon transcripts.
          synonyms:
          - -S
          args: !EmptyFlagArg {}
          optional: true
        command:
        - regtools
        - cis-splice-effects
        - identify
        parent: *id003
        subcommands: []
        help_flag:
        usage_flag:
        version_flag:
        help_text: "\nProgram:\tregtools\nVersion:\t0.5.2\nidentify: invalid option\
          \ -- '-'\nUsage:\t\tregtools cis-splice-effects identify [options] variants.vcf\
          \ alignments.bam ref.fa annotations.gtf\nOptions:\n\t\t-o STR\tOutput file\
          \ containing the aberrant splice junctions with annotations. [STDOUT]\n\t\
          \t-v STR\tOutput file containing variants annotated as splice relevant (VCF\
          \ format).\n\t\t-j STR\tOutput file containing the aberrant junctions in\
          \ BED12 format.\n\t\t-s INT\tStrand specificity of RNA library preparation\
          \ \n\t\t\t (0 = unstranded, 1 = first-strand/RF, 2, = second-strand/FR).\
          \ REQUIRED\n\t\t-t STR\tTag used in bam to label strand. [XS]\n\t\t-a INT\t\
          Minimum anchor length. Junctions which satisfy a minimum \n\t\t\t anchor\
          \ length on both sides are reported. [8]\n\t\t-m INT\tMinimum intron length.\
          \ [70]\n\t\t-M INT\tMaximum intron length. [500000]\n\t\t-w INT\tWindow\
          \ size in b.p to identify splicing events in.\n\t\t\t The tool identifies\
          \ events in variant.start +/- w basepairs.\n\t\t\t Default behaviour is\
          \ to look at the window between previous and next exons.\n\t\t-e INT\tMaximum\
          \ distance from the start/end of an exon \n\t\t\t to annotate a variant\
          \ as relevant to splicing, the variant \n\t\t\t is in exonic space, i.e\
          \ a coding variant. [3]\n\t\t-i INT\tMaximum distance from the start/end\
          \ of an exon \n\t\t\t to annotate a variant as relevant to splicing, the\
          \ variant \n\t\t\t is in intronic space. [2]\n\t\t-I\tAnnotate variants\
          \ in intronic space within a transcript(not to be used with -i).\n\t\t-E\t\
          Annotate variants in exonic space within a transcript(not to be used with\
          \ -e).\n\t\t-S\tDon't skip single exon transcripts.\n\nError parsing inputs!(1)\n\
          \n\n"
        generated_using: *id004
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: variants.vcf
          optional: false
        - !Positional
          description: ''
          position: 1
          name: junctions.bed
          optional: false
        - !Positional
          description: ''
          position: 2
          name: ref.fa
          optional: false
        - !Positional
          description: ''
          position: 3
          name: annotations.gtf
          optional: false
        named:
        - !Flag
          description: Output file containing the aberrant splice junctions with annotations.
            [STDOUT]
          synonyms:
          - -o
          args: !SimpleFlagArg
            name: STR
          optional: true
        - !Flag
          description: Output file containing variants annotated as splice relevant
            (VCF format).
          synonyms:
          - -v
          args: !SimpleFlagArg
            name: STR
          optional: true
        - !Flag
          description: Output file containing the aberrant junctions in BED12 format.
          synonyms:
          - -j
          args: !SimpleFlagArg
            name: STR
          optional: true
        - !Flag
          description: Minimum anchor length. Junctions which satisfy a minimum  anchor
            length on both sides are reported. [8]
          synonyms:
          - -a
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Minimum intron length. [70]
          synonyms:
          - -m
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Maximum intron length. [500000]
          synonyms:
          - -M
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Window size in b.p to identify splicing events in. The tool
            identifies events in variant.start +/- w basepairs. Default behaviour
            is to look at the window between previous and next exons.
          synonyms:
          - -w
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Maximum distance from the start/end of an exon  to annotate
            a variant as relevant to splicing, the variant  is in exonic space, i.e
            a coding variant. [3]
          synonyms:
          - -e
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Maximum distance from the start/end of an exon  to annotate
            a variant as relevant to splicing, the variant  is in intronic space.
            [2]
          synonyms:
          - -i
          args: !SimpleFlagArg
            name: INT
          optional: true
        - !Flag
          description: Annotate variants in intronic space within a transcript(not
            to be used with -i).
          synonyms:
          - -I
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: Annotate variants in exonic space within a transcript(not to
            be used with -e).
          synonyms:
          - -E
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: Don't skip single exon transcripts.
          synonyms:
          - -S
          args: !EmptyFlagArg {}
          optional: true
        command:
        - regtools
        - cis-splice-effects
        - associate
        parent: *id003
        subcommands: []
        help_flag:
        usage_flag:
        version_flag:
        help_text: "\nProgram:\tregtools\nVersion:\t0.5.2\nassociate: invalid option\
          \ -- '-'\nUsage:\t\tregtools cis-splice-effects associate [options] variants.vcf\
          \ junctions.bed ref.fa annotations.gtf\nOptions:\n\t\t-o STR\tOutput file\
          \ containing the aberrant splice junctions with annotations. [STDOUT]\n\t\
          \t-v STR\tOutput file containing variants annotated as splice relevant (VCF\
          \ format).\n\t\t-j STR\tOutput file containing the aberrant junctions in\
          \ BED12 format.\n\t\t-a INT\tMinimum anchor length. Junctions which satisfy\
          \ a minimum \n\t\t\t anchor length on both sides are reported. [8]\n\t\t\
          -m INT\tMinimum intron length. [70]\n\t\t-M INT\tMaximum intron length.\
          \ [500000]\n\t\t-w INT\tWindow size in b.p to identify splicing events in.\n\
          \t\t\t The tool identifies events in variant.start +/- w basepairs.\n\t\t\
          \t Default behaviour is to look at the window between previous and next\
          \ exons.\n\t\t-e INT\tMaximum distance from the start/end of an exon \n\t\
          \t\t to annotate a variant as relevant to splicing, the variant \n\t\t\t\
          \ is in exonic space, i.e a coding variant. [3]\n\t\t-i INT\tMaximum distance\
          \ from the start/end of an exon \n\t\t\t to annotate a variant as relevant\
          \ to splicing, the variant \n\t\t\t is in intronic space. [2]\n\t\t-I\t\
          Annotate variants in intronic space within a transcript(not to be used with\
          \ -i).\n\t\t-E\tAnnotate variants in exonic space within a transcript(not\
          \ to be used with -e).\n\t\t-S\tDon't skip single exon transcripts.\n\n\
          Error parsing inputs!(1)\n\n\n"
        generated_using: *id004
      help_flag:
      usage_flag:
      version_flag:
      help_text: "Usage:\t\tregtools cis-splice-effects <command> [options]\nCommand:\t\
        identify\t\tIdentify cis splicing effects.\n\t\tassociate\tAssociate extracted\
        \ junctions with variants\n\n"
      generated_using: *id004
    - !Command
      positional:
      - !Positional
        description: ''
        position: 0
        name: command
        optional: false
      named: []
      command:
      - regtools
      - variants
      parent: *id002
      subcommands: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "Usage:\t\tregtools variants <command> [options]\nCommand:\tannotate\t\
        \tAnnotate variants with splicing information.\n\n"
      generated_using: *id004
    help_flag:
    usage_flag:
    version_flag:
    help_text: "\nProgram:\tregtools\nVersion:\t0.5.2\nUsage:\t\tregtools <command>\
      \ [options]\nCommand:\tjunctions\t\tTools that operate on feature junctions\
      \ (e.g. exon-exon junctions from RNA-seq).\n\t\tcis-ase\t\t\tTools related to\
      \ allele specific expression in cis.\n\t\tcis-splice-effects\tTools related\
      \ to splicing effects of variants.\n\t\tvariants\t\tTools that operate on variants.\n\
      \n"
    generated_using: *id004
  subcommands:
  - *id005
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: junctions.bed
      optional: false
    - !Positional
      description: ''
      position: 1
      name: ref.fa
      optional: false
    - !Positional
      description: ''
      position: 2
      name: annotations.gtf
      optional: false
    named:
    - !Flag
      description: single exon genes
      synonyms:
      - -S
      args: !SimpleFlagArg
        name: include
      optional: true
    - !Flag
      description: The file to write output to. [STDOUT]
      synonyms:
      - -o
      args: !SimpleFlagArg
        name: FILE
      optional: true
    command:
    - regtools
    - junctions
    - annotate
    parent: *id001
    subcommands: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "\nProgram:\tregtools\nVersion:\t0.5.2\nannotate: invalid option --\
      \ '-'\nUsage:\t\tregtools junctions annotate [options] junctions.bed ref.fa\
      \ annotations.gtf\nOptions:\t-S include single exon genes\n\t\t-o FILE\tThe\
      \ file to write output to. [STDOUT]\n\nError parsing inputs!(1)\n\n\n"
    generated_using: *id004
  help_flag:
  usage_flag:
  version_flag:
  help_text: "Usage:\t\tregtools junctions <command> [options]\nCommand:\textract\t\
    \tIdentify exon-exon junctions from alignments.\n\t\tannotate\tAnnotate the junctions.\n\
    \n"
  generated_using: *id004
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\nProgram:\tregtools\nVersion:\t0.5.2\nextract: invalid option -- '-'\n\
  Usage:\t\tregtools junctions extract [options] indexed_alignments.bam\nOptions:\n\
  \t\t-a INT\tMinimum anchor length. Junctions which satisfy a minimum \n\t\t\t anchor\
  \ length on both sides are reported. [8]\n\t\t-m INT\tMinimum intron length. [70]\n\
  \t\t-M INT\tMaximum intron length. [500000]\n\t\t-o FILE\tThe file to write output\
  \ to. [STDOUT]\n\t\t-r STR\tThe region to identify junctions \n\t\t\t in \"chr:start-end\"\
  \ format. Entire BAM by default.\n\t\t-s INT\tStrand specificity of RNA library\
  \ preparation \n\t\t\t (0 = unstranded, 1 = first-strand/RF, 2, = second-strand/FR).\
  \ REQUIRED\n\t\t-t STR\tTag used in bam to label strand. [XS]\n\nError parsing inputs!(1)\n\
  \n\n"
generated_using: *id004
