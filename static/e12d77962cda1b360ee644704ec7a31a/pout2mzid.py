from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Directory

Pout2Mzid_V0_1_0 = CommandToolBuilder(tool="pout2mzid", base_command=["pout2mzid"], inputs=[ToolInput(tag="in_percolator_out_xml", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --percolatorfile ] [Value] Percolator Out XML result file")), ToolInput(tag="in_mzidentml_input_file", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --mzidfile ] [Value]       MzIdentML input file")), ToolInput(tag="in_sets_inputfiles_be", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --inputdir ] [Value]       Sets the mzIdentML input directory. All\nmzIdentML inputfiles must be in that\ndirectory")), ToolInput(tag="in_change_outputfile_stdout", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --changeoutput ] [Value]   Change the outputfile to original\nfilename+[Value]+.mzid.\nDEFAULT: output to stdout")), ToolInput(tag="in_sets_output_directory", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outputdir ] [Value]      Sets the output directory if none exist, it\nwill be created.")), ToolInput(tag="in_file_containing_list", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --filesmzid ] [Value]      File containing a list of mzIdentML filenames")), ToolInput(tag="in_only_adds_results", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --decoy ]                  Only adds results to entries with decoy set\nto true. DEFAULT: false")), ToolInput(tag="in_sets_validation_notbe", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --validate ]               Sets that validation of XML schema should not\nbe performed. Faster parsing.")), ToolInput(tag="in_sets_warning_software", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[ --warning ]                Sets that upon warning the software should\nterminate.\n"))], outputs=[ToolOutput(tag="out_percolator_out_xml", output_type=File(optional=True), selector=InputSelector(input_to_select="in_percolator_out_xml", type_hint=File()), doc=OutputDocumentation(doc="[ --percolatorfile ] [Value] Percolator Out XML result file")), ToolOutput(tag="out_change_outputfile_stdout", output_type=File(optional=True), selector=InputSelector(input_to_select="in_change_outputfile_stdout", type_hint=File()), doc=OutputDocumentation(doc="[ --changeoutput ] [Value]   Change the outputfile to original\nfilename+[Value]+.mzid.\nDEFAULT: output to stdout")), ToolOutput(tag="out_sets_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_sets_output_directory", type_hint=File()), doc=OutputDocumentation(doc="[ --outputdir ] [Value]      Sets the output directory if none exist, it\nwill be created."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pout2Mzid_V0_1_0().translate("wdl", allow_empty_container=True)

