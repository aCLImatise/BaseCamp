!Command
command:
- fasfilter
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -d
  - --description
  description: "Filter sequence records by their descriptions. If used in\ncombination\
    \ with the -x, --regex option, filters records by\nvalues of a regex capture applied\
    \ to their descriptions."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -f
  description: "[int], --field=[int]\nFilter sequece records by a specific field in\
    \ their\ndescriptions. With this option, the description is split into\nfields\
    \ using strings of white space as field delimiters (the\ndefault Perl behavior\
    \ for splitting lines of data into fields).\nThis option takes a mandatory integer\
    \ option argument giving the\nindex for which field to filter on. One-based indexing\
    \ is used,\nso the first field after the identifier has index 1. As standard\n\
    in Perl, negative indices count backwards from the last field in\nthe description;\
    \ field \"-1\" is the last field, \"-2\" is the\nsecond-to-last etc.\nIn fasta\
    \ files, the identifier occurs between the record\nseparator (\">\") and the first\
    \ whitespace on the identifier line,\nand the description is everything after\
    \ the first string of\nwhite space on the identifier line. Therefore the identifier\
    \ is\ncounted as the 0th field, which is what fasfilter tests by\ndefault."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -S
  description: "[regex], --split-on-regex=[regex]\nUse regex <regex> to split the\
    \ description for the -f option\ninstead of the perl default (which splits on\
    \ one or more\nwhitespace characters). Special characters must be quoted to\n\
    protect them from the shell. The regex is often helpfully\nenclosed by single-quote\
    \ (') or double-quote (\") brackets but\nnever by forward slashes (/)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -t
  description: "[string], --tag=[string]\nFilter sequence records by values of a named\
    \ tag in the\ndescription. Name-value pairs in the description are expected to\n\
    have the format \"name:value\" as generated by FAST tools (such as\nfaslen) or\
    \ \"name=value\" as common in General Feature Format. The\n\"name\" must contain\
    \ only characters from the set [a-zA-Z0-9_-].\nThe \"value\" is any string of\
    \ non-whitespace characters. Sequence\nrecords for which the specified tag does\
    \ not exist will not be\nwritten to output. Currently only the first (left-most)\n\
    occcurence of a tag is compared."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -x
  description: "[regex], --regex=[regex]\nFilter sequence records by values of a regex\
    \ capture applied to\nidentifers (by default) or descriptions (in combination\
    \ with the\n-d option). The format of the regex is a perl regular expression\n\
    that must contain exactly one \"capture buffer\" specified by a\npair or parentheses.\
    \ The value captured in this buffer is\ntested. Sequence records that do not match\
    \ the regex will will\nnot be written to output. Currently only the first (left-most)\n\
    match is tested. Special characters must be quoted to protect\nthem from the shell.\
    \ The regex is often helpfully enclosed by\nsingle-quote (') or double-quote (\"\
    ) brackets but never by\nforward slashes (/)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -v
  - --negate
  description: "Output sequences that do not meet the specified numerical\ncriteria."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --man
  description: Print the manual page and exit.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -l
  - --log
  description: "Creates, or appends to, a generic FAST logfile in the current\nworking\
    \ directory. The logfile records date/time of execution,\nfull command with options\
    \ and arguments, and an optional\ncomment."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -L
  description: "[string], --logname=[string]\nUse [string] as the name of the logfile.\
    \ Default is\n\"FAST.log.txt\"."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -C
  description: "[string], --comment=[string]\nInclude comment [string] in logfile.\
    \ No comment is saved by\ndefault."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --format
  description: "=[format]\nUse alternative format for input. See man page for \"fasconvert\"\
    \nfor allowed formats. This is for convenience; the FAST tools are\ndesigned to\
    \ exchange data in Fasta format, and \"fasta\" is the\ndefault format for this\
    \ tool."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -m
  description: "[dna|rna|protein], --moltype=[dna|rna|protein]\nSpecify the type of\
    \ sequence on input (should not be needed in\nmost cases, but sometimes Bioperl\
    \ cannot guess and complains\nwhen processing data)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -q
  - --fastq
  description: fastq format as input and output.
  args: !SimpleFlagArg
    name: use
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: Print a brief help message and exit.
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - --version
  description: Print version information and exit.
  args: !EmptyFlagArg {}
help_text: "Usage:\n    fasfilter [OPTION]... [RANGES] [MULTIFASTA-FILE]...\n\nOptions:\n\
  \    -d, --description\n            Filter sequence records by their descriptions.\
  \ If used in\n            combination with the -x, --regex option, filters records\
  \ by\n            values of a regex capture applied to their descriptions.\n\n \
  \   -f [int], --field=[int]\n            Filter sequece records by a specific field\
  \ in their\n            descriptions. With this option, the description is split\
  \ into\n            fields using strings of white space as field delimiters (the\n\
  \            default Perl behavior for splitting lines of data into fields).\n\n\
  \            This option takes a mandatory integer option argument giving the\n\
  \            index for which field to filter on. One-based indexing is used,\n \
  \           so the first field after the identifier has index 1. As standard\n \
  \           in Perl, negative indices count backwards from the last field in\n \
  \           the description; field \"-1\" is the last field, \"-2\" is the\n   \
  \         second-to-last etc.\n\n            In fasta files, the identifier occurs\
  \ between the record\n            separator (\">\") and the first whitespace on\
  \ the identifier line,\n            and the description is everything after the\
  \ first string of\n            white space on the identifier line. Therefore the\
  \ identifier is\n            counted as the 0th field, which is what fasfilter tests\
  \ by\n            default.\n\n    -S [regex], --split-on-regex=[regex]\n       \
  \     Use regex <regex> to split the description for the -f option\n           \
  \ instead of the perl default (which splits on one or more\n            whitespace\
  \ characters). Special characters must be quoted to\n            protect them from\
  \ the shell. The regex is often helpfully\n            enclosed by single-quote\
  \ (') or double-quote (\") brackets but\n            never by forward slashes (/).\n\
  \n    -t [string], --tag=[string]\n            Filter sequence records by values\
  \ of a named tag in the\n            description. Name-value pairs in the description\
  \ are expected to\n            have the format \"name:value\" as generated by FAST\
  \ tools (such as\n            faslen) or \"name=value\" as common in General Feature\
  \ Format. The\n            \"name\" must contain only characters from the set [a-zA-Z0-9_-].\n\
  \            The \"value\" is any string of non-whitespace characters. Sequence\n\
  \            records for which the specified tag does not exist will not be\n  \
  \          written to output. Currently only the first (left-most)\n           \
  \ occcurence of a tag is compared.\n\n    -x [regex], --regex=[regex]\n        \
  \    Filter sequence records by values of a regex capture applied to\n         \
  \   identifers (by default) or descriptions (in combination with the\n         \
  \   -d option). The format of the regex is a perl regular expression\n         \
  \   that must contain exactly one \"capture buffer\" specified by a\n          \
  \  pair or parentheses. The value captured in this buffer is\n            tested.\
  \ Sequence records that do not match the regex will will\n            not be written\
  \ to output. Currently only the first (left-most)\n            match is tested.\
  \ Special characters must be quoted to protect\n            them from the shell.\
  \ The regex is often helpfully enclosed by\n            single-quote (') or double-quote\
  \ (\") brackets but never by\n            forward slashes (/).\n\n    -v, --negate\n\
  \            Output sequences that do not meet the specified numerical\n       \
  \     criteria.\n\n    -h, --help\n            Print a brief help message and exit.\n\
  \n    --man   Print the manual page and exit.\n\n    --version\n            Print\
  \ version information and exit.\n\n    -l, --log\n            Creates, or appends\
  \ to, a generic FAST logfile in the current\n            working directory. The\
  \ logfile records date/time of execution,\n            full command with options\
  \ and arguments, and an optional\n            comment.\n\n    -L [string], --logname=[string]\n\
  \            Use [string] as the name of the logfile. Default is\n            \"\
  FAST.log.txt\".\n\n    -C [string], --comment=[string]\n            Include comment\
  \ [string] in logfile. No comment is saved by\n            default.\n\n    --format=[format]\n\
  \            Use alternative format for input. See man page for \"fasconvert\"\n\
  \            for allowed formats. This is for convenience; the FAST tools are\n\
  \            designed to exchange data in Fasta format, and \"fasta\" is the\n \
  \           default format for this tool.\n\n    -m [dna|rna|protein], --moltype=[dna|rna|protein]\n\
  \            Specify the type of sequence on input (should not be needed in\n  \
  \          most cases, but sometimes Bioperl cannot guess and complains\n      \
  \      when processing data).\n\n    -q --fastq use fastq format as input and output.\n\
  \n"
generated_using:
- --help
docker_image: quay.io/biocontainers/perl-fast:1.06--pl526_0
