from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, Boolean, String, Directory, Int, File

Maltextract_V0_1_0 = CommandToolBuilder(tool="MaltExtract", base_command=["MaltExtract"], inputs=[ToolInput(tag="in_top", input_type=Float(optional=True), prefix="--top", doc=InputDocumentation(doc="Use top scoring 0.XX of alignments by defualt 0.01")), ToolInput(tag="in_de_stacking_off", input_type=Boolean(optional=True), prefix="--destackingOff", doc=InputDocumentation(doc="Turn Off automated stacked Read Removal only useful in >1 coverage data")), ToolInput(tag="in_down_samp_off", input_type=Boolean(optional=True), prefix="--downSampOff", doc=InputDocumentation(doc="Turn Off automatic downsampling on nodes with more than 10.000 assigned reads")), ToolInput(tag="in_dupre_m_off", input_type=Boolean(optional=True), prefix="--dupRemOff", doc=InputDocumentation(doc="Turn Off automated pcr duplicate removal useful in >1 coverage data")), ToolInput(tag="in_filter", input_type=String(optional=True), prefix="--filter", doc=InputDocumentation(doc="Use chosen filter full (def_anc), ancient, default, crawl, scan, srna,assignment")), ToolInput(tag="in_input", input_type=Directory(optional=True), prefix="--input", doc=InputDocumentation(doc="Specify input directory or RMA6 files")), ToolInput(tag="in_matches", input_type=Boolean(optional=True), prefix="--matches", doc=InputDocumentation(doc="Retrieve Alignments")), ToolInput(tag="in_max_read_length", input_type=Int(optional=True), prefix="--maxReadLength", doc=InputDocumentation(doc="Set maximum read length")), ToolInput(tag="in_megan_summary", input_type=Boolean(optional=True), prefix="--meganSummary", doc=InputDocumentation(doc="Return Megan Summary Files")), ToolInput(tag="in_min_comp", input_type=String(optional=True), prefix="--minComp", doc=InputDocumentation(doc="Use minimum complexity")), ToolInput(tag="in_min_pi", input_type=String(optional=True), prefix="--minPI", doc=InputDocumentation(doc="Set minimum percent identity to XX.X")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Specify out directory")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="How many cores to use?")), ToolInput(tag="in_resources", input_type=File(optional=True), prefix="--resources", doc=InputDocumentation(doc="Set path to required ncbi files")), ToolInput(tag="in_reads", input_type=Boolean(optional=True), prefix="--reads", doc=InputDocumentation(doc="Retrieve Reads")), ToolInput(tag="in_single_stranded", input_type=Boolean(optional=True), prefix="--singleStranded", doc=InputDocumentation(doc="Switch damage patterns to single stranded mode")), ToolInput(tag="in_tax_a", input_type=String(optional=True), prefix="--taxa", doc=InputDocumentation(doc="Target species or List of targets")), ToolInput(tag="in_use_top_alignment", input_type=Boolean(optional=True), prefix="--useTopAlignment", doc=InputDocumentation(doc="Use only the top Alignment per read after filtering")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="How much output to print to screen"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Specify out directory"))], container="quay.io/biocontainers/hops:0.35--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Maltextract_V0_1_0().translate("wdl")

