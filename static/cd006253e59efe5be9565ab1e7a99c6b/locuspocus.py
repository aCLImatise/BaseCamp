from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Locuspocus_V0_1_0 = CommandToolBuilder(tool="locuspocus", base_command=["locuspocus"], inputs=[ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="print detailed debugging messages to terminal\n(standard error)")), ToolInput(tag="in_delta", input_type=Boolean(optional=True), prefix="--delta", doc=InputDocumentation(doc=": INT        when parsing interval loci, use the following\ndelta to extend gene loci and include potential\nregulatory regions; default is 500")), ToolInput(tag="in_skip_ends", input_type=Boolean(optional=True), prefix="--skipends", doc=InputDocumentation(doc="when enumerating interval loci, exclude\nunannotated (and presumably incomplete) iLoci at\neither end of the sequence")), ToolInput(tag="in_ends_only", input_type=Boolean(optional=True), prefix="--endsonly", doc=InputDocumentation(doc="report only incomplete iLocus fragments at the\nunannotated ends of sequences (complement of\n--skipends)")), ToolInput(tag="in_skip_ii_loci", input_type=Boolean(optional=True), prefix="--skipiiloci", doc=InputDocumentation(doc="do not report intergenic iLoci")), ToolInput(tag="in_refine", input_type=Boolean(optional=True), prefix="--refine", doc=InputDocumentation(doc="by default genes are grouped in the same iLocus\nif they have any overlap; 'refine' mode allows\nfor a more nuanced handling of overlapping genes")), ToolInput(tag="in_cds", input_type=Boolean(optional=True), prefix="--cds", doc=InputDocumentation(doc="use CDS rather than UTRs for determining gene\noverlap; implies 'refine' mode")), ToolInput(tag="in_min_overlap", input_type=Boolean(optional=True), prefix="--minoverlap", doc=InputDocumentation(doc=": INT   the minimum number of nucleotides two genes must\noverlap to be grouped in the same iLocus; default\nis 1")), ToolInput(tag="in_name_fmt", input_type=Boolean(optional=True), prefix="--namefmt", doc=InputDocumentation(doc=": STR     provide a printf-style format string to override\nthe default ID format for newly created loci;\ndefault is 'locus%lu' (locus1, locus2, etc) for\nloci and 'iLocus%lu' (iLocus1, iLocus2, etc) for\ninterval loci; note the format string should\ninclude a single %lu specifier to be filled in\nwith a long unsigned integer value")), ToolInput(tag="in_i_lens", input_type=Boolean(optional=True), prefix="--ilens", doc=InputDocumentation(doc=": FILE       create a file with the lengths of each intergenic")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc=": FILE     name of file to which results will be written;\ndefault is terminal (standard output)")), ToolInput(tag="in_retain_ids", input_type=Boolean(optional=True), prefix="--retainids", doc=InputDocumentation(doc="retain original feature IDs from input files;\nconflicts will arise if input contains duplicated\nID values")), ToolInput(tag="in_transmap", input_type=Boolean(optional=True), prefix="--transmap", doc=InputDocumentation(doc=": FILE    print a mapping from each transcript annotation\nto its corresponding locus to the given file")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="include all locus subfeatures (genes, RNAs, etc)\nin the GFF3 output; default includes only locus\nfeatures")), ToolInput(tag="in_filter", input_type=Boolean(optional=True), prefix="--filter", doc=InputDocumentation(doc=": TYPE      comma-separated list of feature types to use in\nconstructing loci/iLoci; default is 'gene'")), ToolInput(tag="in_parent", input_type=Boolean(optional=True), prefix="--parent", doc=InputDocumentation(doc=": CT:PT     if a feature of type $CT exists without a parent,\ncreate a parent for this feature with type $PT;\nfor example, mRNA:gene will create a gene feature\nas a parent for any top-level mRNA feature;\nthis option can be specified multiple times")), ToolInput(tag="in_pseudo", input_type=Boolean(optional=True), prefix="--pseudo", doc=InputDocumentation(doc="correct erroneously labeled pseudogenes")), ToolInput(tag="in_i_locus", input_type=String(), position=0, doc=InputDocumentation(doc="-g|--genemap: FILE     print a mapping from each gene annotation to its"))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc=": FILE     name of file to which results will be written;\ndefault is terminal (standard output)"))], container="quay.io/biocontainers/aegean:0.16.0--hc2cb157_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Locuspocus_V0_1_0().translate("wdl")

