from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Rppr_Convexify_V0_1_0 = CommandToolBuilder(tool="rppr_convexify", base_command=["rppr", "convexify"], inputs=[ToolInput(tag="in_reference_package_path", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Reference package path. Required.")), ToolInput(tag="in_node_numbers", input_type=Boolean(optional=True), prefix="--node-numbers", doc=InputDocumentation(doc="Put the node numbers in where the bootstraps usually go.")), ToolInput(tag="in_tree", input_type=Boolean(optional=True), prefix="--tree", doc=InputDocumentation(doc="A tree file in newick format to work on in place of a reference package.")), ToolInput(tag="in_colors", input_type=Boolean(optional=True), prefix="--colors", doc=InputDocumentation(doc="A CSV file of the colors on the tree supplied with --tree.")), ToolInput(tag="in_specified_path_the", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="If specified, the path to write the discordance tree to.")), ToolInput(tag="in_cut_seqs", input_type=Boolean(optional=True), prefix="--cut-seqs", doc=InputDocumentation(doc="If specified, the path to write a CSV file of cut sequences per-rank to.")), ToolInput(tag="in_alternates", input_type=Boolean(optional=True), prefix="--alternates", doc=InputDocumentation(doc="If specified, the path to write a CSV file of alternate colors per-sequence to.")), ToolInput(tag="in_check_all_ranks", input_type=Boolean(optional=True), prefix="--check-all-ranks", doc=InputDocumentation(doc="When determining alternate colors, check all ranks instead of the least recent uncut rank.")), ToolInput(tag="in_all_alternates", input_type=Boolean(optional=True), prefix="--all-alternates", doc=InputDocumentation(doc="When determining alternate colors, ignore the taxononomy and show all alternates.")), ToolInput(tag="in_cut_off", input_type=Boolean(optional=True), prefix="--cutoff", doc=InputDocumentation(doc="Any trees with a maximum badness over this value are skipped. Default: 12.")), ToolInput(tag="in_limit_rank", input_type=Boolean(optional=True), prefix="--limit-rank", doc=InputDocumentation(doc="If specified, only convexify at the given ranks. Ranks are given as a comma-delimited list of names.")), ToolInput(tag="in_timing", input_type=Boolean(optional=True), prefix="--timing", doc=InputDocumentation(doc="If specified, save timing information for solved trees to a CSV file.")), ToolInput(tag="in_rooted", input_type=Boolean(optional=True), prefix="--rooted", doc=InputDocumentation(doc="Strictly evaluate convexity; ensure that each color sits in its own rooted subtree.")), ToolInput(tag="in_naive", input_type=Boolean(optional=True), prefix="--naive", doc=InputDocumentation(doc="Use the naive convexify algorithm.")), ToolInput(tag="in_no_early", input_type=Boolean(optional=True), prefix="--no-early", doc=InputDocumentation(doc="Don't terminate early when convexifying.")), ToolInput(tag="in_help", input_type=Boolean(optional=True), prefix="--help", doc=InputDocumentation(doc="Display this list of options")), ToolInput(tag="in_convex_if_y", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rppr_Convexify_V0_1_0().translate("wdl", allow_empty_container=True)

