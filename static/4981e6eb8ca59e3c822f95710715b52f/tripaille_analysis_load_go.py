from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Directory, File, Boolean

Tripaille_Analysis_Load_Go_V0_1_0 = CommandToolBuilder(tool="tripaille_analysis_load_go", base_command=["tripaille", "analysis", "load_go"], inputs=[ToolInput(tag="in_organism", input_type=String(optional=True), prefix="--organism", doc=InputDocumentation(doc="Organism common name or abbreviation")), ToolInput(tag="in_organism_id", input_type=Int(optional=True), prefix="--organism_id", doc=InputDocumentation(doc="Organism ID")), ToolInput(tag="in_gaf_ext", input_type=Directory(optional=True), prefix="--gaf_ext", doc=InputDocumentation(doc="If looking for files in a directory, extension of the\nGAF files")), ToolInput(tag="in_query_type", input_type=String(optional=True), prefix="--query_type", doc=InputDocumentation(doc="The feature type (e.g. 'gene', 'mRNA', 'contig') of\nthe query. It must be a valid Sequence Ontology term.")), ToolInput(tag="in_query_matching", input_type=String(optional=True), prefix="--query_matching", doc=InputDocumentation(doc="Method to match identifiers to features in the\ndatabase. ('name', 'uniquename' or 'dbxref')\n[default: uniquename]")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="Import method ('add' or 'remove')  [default: add]")), ToolInput(tag="in_name_column", input_type=Int(optional=True), prefix="--name_column", doc=InputDocumentation(doc="Column containing the feature identifiers (2, 3, 10\nor 11; default=2).  [default: 2]")), ToolInput(tag="in_re_name", input_type=File(optional=True), prefix="--re_name", doc=InputDocumentation(doc="Regular expression to extract the feature name from\nGAF file.")), ToolInput(tag="in_no_wait", input_type=Boolean(optional=True), prefix="--no_wait", doc=InputDocumentation(doc="Do not wait for job to complete")), ToolInput(tag="in_algorithm", input_type=String(optional=True), prefix="--algorithm", doc=InputDocumentation(doc="analysis algorithm")), ToolInput(tag="in_source_version", input_type=String(optional=True), prefix="--sourceversion", doc=InputDocumentation(doc="analysis sourceversion")), ToolInput(tag="in_source_uri", input_type=String(optional=True), prefix="--sourceuri", doc=InputDocumentation(doc="analysis sourceuri")), ToolInput(tag="in_description", input_type=String(optional=True), prefix="--description", doc=InputDocumentation(doc="analysis description")), ToolInput(tag="in_date_executed", input_type=String(optional=True), prefix="--date_executed", doc=InputDocumentation(doc="analysis date_executed (yyyy-mm-dd)")), ToolInput(tag="in_name", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_program", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_program_version", input_type=String(), position=2, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tripaille_Analysis_Load_Go_V0_1_0().translate("wdl", allow_empty_container=True)

