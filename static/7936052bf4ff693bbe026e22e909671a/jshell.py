from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Jshell_V0_1_0 = CommandToolBuilder(tool="jshell", base_command=["jshell"], inputs=[ToolInput(tag="in_class_path", input_type=File(optional=True), prefix="--class-path", doc=InputDocumentation(doc="Specify where to find user class files")), ToolInput(tag="in_module_path", input_type=File(optional=True), prefix="--module-path", doc=InputDocumentation(doc="Specify where to find application modules")), ToolInput(tag="in_add_modules", input_type=File(optional=True), prefix="--add-modules", doc=InputDocumentation(doc="(,<module>)*\nSpecify modules to resolve, or all modules on the\nmodule path if <module> is ALL-MODULE-PATHs")), ToolInput(tag="in_enable_preview", input_type=Boolean(optional=True), prefix="--enable-preview", doc=InputDocumentation(doc="Allow code to depend on preview features of this release")), ToolInput(tag="in_startup", input_type=File(optional=True), prefix="--startup", doc=InputDocumentation(doc="One run replacement for the startup definitions")), ToolInput(tag="in_no_startup", input_type=Boolean(optional=True), prefix="--no-startup", doc=InputDocumentation(doc="Do not run the startup definitions")), ToolInput(tag="in_feedback", input_type=String(optional=True), prefix="--feedback", doc=InputDocumentation(doc="Specify the initial feedback mode. The mode may be\npredefined (silent, concise, normal, or verbose) or\npreviously user-defined")), ToolInput(tag="in_quiet_feedback_same", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="Quiet feedback.  Same as: --feedback concise")), ToolInput(tag="in_really_quiet_feedback", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Really quiet feedback.  Same as: --feedback silent")), ToolInput(tag="in_verbose_feedback_same", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Verbose feedback.  Same as: --feedback verbose")), ToolInput(tag="in_flag_pass_flag", input_type=Boolean(optional=True), prefix="-J", doc=InputDocumentation(doc="<flag>              Pass <flag> directly to the runtime system.\nUse one -J for each runtime flag or flag argument")), ToolInput(tag="in_flag_flag_remote", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="<flag>              Pass <flag> to the remote runtime system.\nUse one -R for each remote flag or flag argument")), ToolInput(tag="in_flag_flag_compileruse", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="<flag>              Pass <flag> to the compiler.\nUse one -C for each compiler flag or flag argument")), ToolInput(tag="in_show_version", input_type=Boolean(optional=True), prefix="--show-version", doc=InputDocumentation(doc="Print version information and continue")), ToolInput(tag="in_help_extra", input_type=Boolean(optional=True), prefix="--help-extra", doc=InputDocumentation(doc="Print help on non-standard options and exit")), ToolInput(tag="in_load_file", input_type=File(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Jshell_V0_1_0().translate("wdl", allow_empty_container=True)

