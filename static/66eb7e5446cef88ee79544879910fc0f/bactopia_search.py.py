from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, File, Int, String

Bactopia_Search_Py_V0_1_0 = CommandToolBuilder(tool="bactopia_search.py", base_command=["bactopia-search.py"], inputs=[ToolInput(tag="in_exact_tax_on", input_type=Boolean(optional=True), prefix="--exact_taxon", doc=InputDocumentation(doc="Exclude Taxon ID descendents.")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Directory to write output. (Default: .)")), ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix to use for output file names. (Default: ena)")), ToolInput(tag="in_limit", input_type=Int(optional=True), prefix="--limit", doc=InputDocumentation(doc="Maximum number of results (per query) to return.\n(Default: 1000000)")), ToolInput(tag="in_accession_limit", input_type=Int(optional=True), prefix="--accession_limit", doc=InputDocumentation(doc="Maximum number of accessions to query at once.\n(Default: 5000)")), ToolInput(tag="in_bio_sample_subset", input_type=Int(optional=True), prefix="--biosample_subset", doc=InputDocumentation(doc="If a BioSample has multiple Experiments, pick a random\nsubset. (Default: Return All)")), ToolInput(tag="in_min_read_length", input_type=Int(optional=True), prefix="--min_read_length", doc=InputDocumentation(doc="Filters samples based on minimum mean read length.\n(Default: No filter)")), ToolInput(tag="in_min_base_count", input_type=Int(optional=True), prefix="--min_base_count", doc=InputDocumentation(doc="Filters samples based on minimum basepair count.\n(Default: No filter)")), ToolInput(tag="in_min_coverage", input_type=Int(optional=True), prefix="--min_coverage", doc=InputDocumentation(doc="Filter samples based on minimum coverage (requires")), ToolInput(tag="in_genome_size", input_type=Int(optional=True), prefix="--genome_size", doc=InputDocumentation(doc="Genome size to estimate coverage (requires --coverage)")), ToolInput(tag="in_bac_topia", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_search", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Directory to write output. (Default: .)")), ToolOutput(tag="out_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prefix", type_hint=File()), doc=OutputDocumentation(doc="Prefix to use for output file names. (Default: ena)"))], container="quay.io/biocontainers/bactopia:1.6.2--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bactopia_Search_Py_V0_1_0().translate("wdl")

