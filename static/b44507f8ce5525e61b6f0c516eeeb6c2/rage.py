from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, Float, String

Rage_V0_1_0 = CommandToolBuilder(tool="rage", base_command=["rage"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase verbosity of output. -v: Show progress of\nsimulation. -vv: Print used parameters after\nsimulation. -vvv: Show details for each simulated\nlocus.")), ToolInput(tag="in_zip", input_type=Boolean(optional=True), prefix="--zip", doc=InputDocumentation(doc="Write output as gzipped fastq.")), ToolInput(tag="in_get_barcodes", input_type=Boolean(optional=True), prefix="--get-barcodes", doc=InputDocumentation(doc="Write copies of the default barcode files into the\ncurrent folder.")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--DEBUG", doc=InputDocumentation(doc="Set debug-friendly values for the data set, i.e. all\nmutation events and mutation types are equally\nprobable.")), ToolInput(tag="in_name", input_type=File(optional=True), prefix="--name", doc=InputDocumentation(doc="Name for the data set that will be used in the file\nname. If none is given, the name 'RAGEdataset' will be\nused.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Prefix of the output path. At this point a folder will\nbe created that contains all output files created by\nddRAGE.")), ToolInput(tag="in_nr_individuals", input_type=Int(optional=True), prefix="--nr-individuals", doc=InputDocumentation(doc="Number of individuals in the result. Default: 3")), ToolInput(tag="in_loci", input_type=Int(optional=True), prefix="--loci", doc=InputDocumentation(doc="Number of loci for which reads will be created or path\nto a FASTA file with predefined fragments. Default: 3")), ToolInput(tag="in_read_length", input_type=Int(optional=True), prefix="--read-length", doc=InputDocumentation(doc="Total sequence length of the reads (including\noverhang, barcodes, etc.). The officially supported\nand well tested range is 50-500bp but longer or\nshorter reads are also possible. Default: 100")), ToolInput(tag="in_coverage", input_type=Int(optional=True), prefix="--coverage", doc=InputDocumentation(doc="Expected coverage that will be created by normal\nduplication and mutations. The exact coverage value is\ndetermined using a probabilistic process. Default: 30")), ToolInput(tag="in_hrl_number", input_type=Int(optional=True), prefix="--hrl-number", doc=InputDocumentation(doc="Number of Highly Repetitive Loci (HRLs) that will be\nadded, given as fraction of total locus size. Example:\n``-l 100 --hrl-number 0.1`` for 10 HRLs. Default: 0.05")), ToolInput(tag="in_no_singletons", input_type=Boolean(optional=True), prefix="--no-singletons", doc=InputDocumentation(doc="Disable generation of singleton reads.")), ToolInput(tag="in_diversity", input_type=Int(optional=True), prefix="--diversity", doc=InputDocumentation(doc="Parameter for the number of genotypes created per\nlocus. This will be used as parameter for a Poisson\ndistribution. Default: 1.0, increase for more alleles/\ngenotypes per locus.")), ToolInput(tag="in_gc_content", input_type=Float(optional=True), prefix="--gc-content", doc=InputDocumentation(doc="GC content of the generated sequences. Default: 0.5")), ToolInput(tag="in_quality_model", input_type=File(optional=True), prefix="--quality-model", doc=InputDocumentation(doc="Path to a quality model file (.qmodel.npz). A qmodel\nfile contains a probability vector for each read\nposition. For details, please refer to the\ndocumentation.")), ToolInput(tag="in_single_end", input_type=Boolean(optional=True), prefix="--single-end", doc=InputDocumentation(doc="Write a single-end dataset. Only writes a p5 FASTQ\nfile. Default: False")), ToolInput(tag="in_overlap", input_type=Float(optional=True), prefix="--overlap", doc=InputDocumentation(doc="Overlap factor (between 0 and 1.0) of randomly\ngenerated reads. Default 0")), ToolInput(tag="in_multiple_p_seven_barcodes", input_type=File(optional=True), prefix="--multiple-p7-barcodes", doc=InputDocumentation(doc="Combine individuals with multiple p7 barcodes in one\noutput file. Default: False")), ToolInput(tag="in_coverage_model", input_type=String(optional=True), prefix="--coverage-model", doc=InputDocumentation(doc="Model to choose coverage values. Can be either\n'poisson' or 'betabinomial'. The Betabinomial model is\nthe default as it can be easily adapted to different\ncoverage profiles using the --BBD-alpha and --BBD-beta\nparameters.")), ToolInput(tag="in_bbd_alpha", input_type=Int(optional=True), prefix="--BBD-alpha", doc=InputDocumentation(doc="Alpha parameter of the Beta-binomial distribution.\nHigher values increase the left tailing of the\ncoverage distribution, if the BBD model is used.\nDefault: 6")), ToolInput(tag="in_bbd_beta", input_type=Int(optional=True), prefix="--BBD-beta", doc=InputDocumentation(doc="Beta parameter of the Beta-binomial distribution.\nHigher values increase the right tailing of the\ncoverage distribution, if the BBD model is used.\nDefault: 2")), ToolInput(tag="in_max_pcr_copies", input_type=Int(optional=True), prefix="--max-pcr-copies", doc=InputDocumentation(doc="Maximum number of PCR copies that can be created for\neach finalized (potentially mutated and multiplied)\nread. Default: 3")), ToolInput(tag="in_hrl_max_coverage", input_type=Int(optional=True), prefix="--hrl-max-coverage", doc=InputDocumentation(doc="Maximum coverage for Highly Repetitive Loci (HRLs)\n(per individual). The minimum coverage is determined\nas mean + 2 standard deviations of the main coverage\ngenerating function. Default: 1000")), ToolInput(tag="in_dbr", input_type=String(optional=True), prefix="--dbr", doc=InputDocumentation(doc="Sequence of the degenerate base region (DBR) in IUPAC\nambiguity code. Default: 'NNNNNNMMGGACG'. To not\ninclude a DBR sequence use --dbr ''")), ToolInput(tag="in_p_five_overhang", input_type=Int(optional=True), prefix="--p5-overhang", doc=InputDocumentation(doc="Sequence of the p5 overhang. Default: 'TGCAT'")), ToolInput(tag="in_p_seven_overhang", input_type=Int(optional=True), prefix="--p7-overhang", doc=InputDocumentation(doc="Sequence of the p7 overhang. Default: 'TAC'")), ToolInput(tag="in_p_five_rec_site", input_type=Int(optional=True), prefix="--p5-rec-site", doc=InputDocumentation(doc="Sequence of the p5 recognition site. Default: 'ATGCAT'")), ToolInput(tag="in_p_seven_rec_site", input_type=Int(optional=True), prefix="--p7-rec-site", doc=InputDocumentation(doc="Sequence of the p7 recognition site. Default: 'GTCA'")), ToolInput(tag="in_barcodes", input_type=File(optional=True), prefix="--barcodes", doc=InputDocumentation(doc="Path to barcodes file or predefined barcode set like\n'barcodes', 'small', 'full' or 'full'. Default:\n'barcodes', a generic population. Take a look at the\nrage/barcode_handler/barcodes folder for more\ninformation.")), ToolInput(tag="in_event_probabilities", input_type=Float(optional=True), prefix="--event-probabilities", doc=InputDocumentation(doc="PROB_DROPOUT PROB_MUTATION\nProbability profile for the distribution of event\ntypes (common, dropout, mutation; in this order).\nExample: ``python ddrage.py --event-probabilities 0.9\n0.05 0.05`` -> common 90%, dropout 5%, mutation 5%\n(Default). Each entry can be given as a float or a\nstring of python code (see example above) which is\nhelpful for small probability values.")), ToolInput(tag="in_mutation_type_probabilities", input_type=Float(optional=True), prefix="--mutation-type-probabilities", doc=InputDocumentation(doc="PROB_INSERTION PROB_DELETION PROB_P5_NA_ALTERNATIVE PROB_P7_NA_ALTERNATIVE PROB_P5_NA_DROPOUT PROB_P7_NA_DROPOUT\nProbability profile for the distribution of mutation\ntypes (snp, insertion, deletion, p5 na alternative, p7\nna alternative, p5 na dropout, p7 na dropout; in this\norder). Example: ``python ddrage.py --mutation-type-\nprobabilities 0.8999 0.05 0.05 '0.0001*0.001'\n'0.0001*0.05' '0.0001*0.899' '0.0001*0.05'`` -> snp\n89.99%, insertion 5%, deletion 5%, p5 na alternative\n0.00001% , p7 na alternative 0.0005%, p5 na dropout\n0.00899%, p7 na dropout 0.0005% (Default). Each entry\ncan be given as a float or a string of python code\n(see example above) which is helpful for small\nprobability values.")), ToolInput(tag="in_prob_heterozygous", input_type=Float(optional=True), prefix="--prob-heterozygous", doc=InputDocumentation(doc="Probability of mutations being heterozygous. Default:\n0.5")), ToolInput(tag="in_prob_incomplete_digestion", input_type=Float(optional=True), prefix="--prob-incomplete-digestion", doc=InputDocumentation(doc="Probability of incomplete digestion for an individual\nat a locus. Default: 0.1")), ToolInput(tag="in_rate_incomplete_digestion", input_type=Float(optional=True), prefix="--rate-incomplete-digestion", doc=InputDocumentation(doc="Expected fraction of reads that are being lost in the\nevent of Incomplete Digestion. Default: 0.2")), ToolInput(tag="in_prob_pcr_copy", input_type=Float(optional=True), prefix="--prob-pcr-copy", doc=InputDocumentation(doc="Probability that a (potentially mutated and\nmultiplied) read will receive PCR copies. This\ninfluences the simulated PCR copy rate. Default: 0.2")), ToolInput(tag="in_hrl_pcr_copies", input_type=Float(optional=True), prefix="--hrl-pcr-copies", doc=InputDocumentation(doc="Probability of PCR copies for HRL reads in relation to\nnormal reads. Default: 0.9, i.e. the probability for a\nPCR copy of a HRL read is prob_pcr_copy * hrl_pcr\ncopies = 0.2 * 0.9 = 0.18")), ToolInput(tag="in_singleton_pcr_copies", input_type=Float(optional=True), prefix="--singleton-pcr-copies", doc=InputDocumentation(doc="Probability of PCR copies for singleton reads in\nrelation to normal reads. Default: 1/3, i.e. the\nprobability for a PCR copy of a singleton read is\nprob_pcr_copy * singleton_pcr_copies = 0.2 * (1/3) =\n0.0666...")), ToolInput(tag="in_prob_seq_error", input_type=Float(optional=True), prefix="--prob-seq-error", doc=InputDocumentation(doc="Probability of sequencing substitution errors.\nDefault: 0.01\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Prefix of the output path. At this point a folder will\nbe created that contains all output files created by\nddRAGE.")), ToolOutput(tag="out_multiple_p_seven_barcodes", output_type=File(optional=True), selector=InputSelector(input_to_select="in_multiple_p_seven_barcodes", type_hint=File()), doc=OutputDocumentation(doc="Combine individuals with multiple p7 barcodes in one\noutput file. Default: False"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rage_V0_1_0().translate("wdl", allow_empty_container=True)

