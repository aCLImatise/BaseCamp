from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File, Int

Find_Enrichment_Py_V0_1_0 = CommandToolBuilder(tool="find_enrichment.py", base_command=["find_enrichment.py"], inputs=[ToolInput(tag="in_alpha", input_type=Boolean(optional=True), prefix="--alpha", doc=InputDocumentation(doc=": test-wise alpha; for each GO term, what significance level to apply\n(most often you don't need to change this other than 0.05 or 0.01)")), ToolInput(tag="in_pval", input_type=Boolean(optional=True), prefix="--pval", doc=InputDocumentation(doc=": experiment-wise alpha; for the entire experiment, what significance\nlevel to apply after Bonferroni correction")), ToolInput(tag="in_ann_of_mt", input_type=String(optional=True), prefix="--annofmt", doc=InputDocumentation(doc="Annotation file format. Not needed if type can be\ndetermined using filename (default: None)")), ToolInput(tag="in_taxid", input_type=File(optional=True), prefix="--taxid", doc=InputDocumentation(doc="When using NCBI's gene2go annotation file, specify\ndesired taxid (default: 9606)")), ToolInput(tag="in_pval_field", input_type=String(optional=True), prefix="--pval_field", doc=InputDocumentation(doc="Only print results when PVAL_FIELD < PVAL. (default:\nNone)")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="Write enrichment results into xlsx or tsv file\n(default: None)")), ToolInput(tag="in_ns", input_type=String(optional=True), prefix="--ns", doc=InputDocumentation(doc="Limit GOEA to specified branch categories.\nBP=Biological Process; MF=Molecular Function;\nCC=Cellular Component (default: BP,MF,CC)")), ToolInput(tag="in_id_two_sym", input_type=Int(optional=True), prefix="--id2sym", doc=InputDocumentation(doc="ASCII file containing one geneid and its symbol per\nline (default: None)")), ToolInput(tag="in_sections", input_type=File(optional=True), prefix="--sections", doc=InputDocumentation(doc="Use sections file for printing grouped GOEA results.\nExample SECTIONS values:\ngoatools.test_data.sections.gjoneska_pfenning\ngoatools/test_data/sections/gjoneska_pfenning.py\ndata/gjoneska_pfenning/sections_in.txt (default: None)")), ToolInput(tag="in_outfile_detail", input_type=File(optional=True), prefix="--outfile_detail", doc=InputDocumentation(doc="Write enrichment results into a text file containing\nthe following information: 1) GOEA GO terms, grouped\ninto sections 2) List of genes and ASCII art showing\nsection membership 3) Detailed list of each gene and\nGO terms w/their P-values (default: None)")), ToolInput(tag="in_compare", input_type=Boolean(optional=True), prefix="--compare", doc=InputDocumentation(doc="the population file as a comparison group. if this\nflag is specified, the population is used as the study\nplus the `population/comparison` (default: False)")), ToolInput(tag="in_ratio", input_type=Int(optional=True), prefix="--ratio", doc=InputDocumentation(doc="only show values where the difference between study\nand population ratios is greater than this. useful for\nexcluding GO categories with small differences, but\ncontaining large numbers of genes. should be a value\nbetween 1 and 2. (default: None)")), ToolInput(tag="in_prt_study_gos_only", input_type=Boolean(optional=True), prefix="--prt_study_gos_only", doc=InputDocumentation(doc="Print GO terms only if they are associated with study\ngenes. This is useful if printng all GO results\nregardless of their significance (--pval=1.0).\n(default: False)")), ToolInput(tag="in_indent", input_type=Boolean(optional=True), prefix="--indent", doc=InputDocumentation(doc="indent GO terms (default: False)")), ToolInput(tag="in_obo", input_type=File(optional=True), prefix="--obo", doc=InputDocumentation(doc="Specifies location and name of the obo file (default:\ngo-basic.obo)")), ToolInput(tag="in_no_propagate_counts", input_type=Boolean(optional=True), prefix="--no_propagate_counts", doc=InputDocumentation(doc="Do not propagate counts to parent terms (default:\nFalse)")), ToolInput(tag="in_relationship", input_type=Boolean(optional=True), prefix="--relationship", doc=InputDocumentation(doc="Propagate counts up all relationships, (default:\nFalse)")), ToolInput(tag="in_relationships", input_type=Boolean(optional=True), prefix="--relationships", doc=InputDocumentation(doc="[RELATIONSHIPS [RELATIONSHIPS ...]]\nPropagate counts up user-specified relationships,\nwhich include: part_of regulates negatively_regulates\npositively_regulates (default: None)")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="Available methods: local( bonferroni sidak holm fdr )\nstatsmodels( sm_bonferroni sm_sidak holm_sidak sm_holm\nsimes_hochberg hommel fdr_bh fdr_by fdr_tsbh fdr_tsbky\nfdr_gbs ) (default: bonferroni,sidak,holm,fdr_bh)")), ToolInput(tag="in_pval_calc", input_type=String(optional=True), prefix="--pvalcalc", doc=InputDocumentation(doc="fisher fisher_scipy_stats (default: fisher)")), ToolInput(tag="in_min_overlap", input_type=Int(optional=True), prefix="--min_overlap", doc=InputDocumentation(doc="Check that a minimum amount of study genes are in the\npopulation (default: 0.7)")), ToolInput(tag="in_go_slim", input_type=File(optional=True), prefix="--goslim", doc=InputDocumentation(doc="The GO slim file is used when grouping GO terms.\n(default: goslim_generic.obo)")), ToolInput(tag="in_ev_inc", input_type=String(optional=True), prefix="--ev_inc", doc=InputDocumentation(doc="Include specified evidence codes and groups separated\nby commas (default: None)")), ToolInput(tag="in_ev_exc", input_type=String(optional=True), prefix="--ev_exc", doc=InputDocumentation(doc="Exclude specified evidence codes and groups separated\nby commas (default: None)")), ToolInput(tag="in_ev_help", input_type=Boolean(optional=True), prefix="--ev_help", doc=InputDocumentation(doc="Print all Evidence codes, with descriptions (default:\nTrue)")), ToolInput(tag="in_ev_help_short", input_type=Boolean(optional=True), prefix="--ev_help_short", doc=InputDocumentation(doc="Print all Evidence codes (default: True)")), ToolInput(tag="in_filenames", input_type=String(), position=0, doc=InputDocumentation(doc="data/study data/population data/association"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Find_Enrichment_Py_V0_1_0().translate("wdl", allow_empty_container=True)

