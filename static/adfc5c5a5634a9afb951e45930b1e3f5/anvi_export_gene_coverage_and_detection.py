from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File

Anvi_Export_Gene_Coverage_And_Detection_V0_1_0 = CommandToolBuilder(tool="anvi_export_gene_coverage_and_detection", base_command=["anvi-export-gene-coverage-and-detection"], inputs=[ToolInput(tag="in_profile_db", input_type=String(optional=True), prefix="--profile-db", doc=InputDocumentation(doc="Anvi'o profile database (default: None)")), ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs-database' (default: None)")), ToolInput(tag="in_output_file_prefix", input_type=File(optional=True), prefix="--output-file-prefix", doc=InputDocumentation(doc="A prefix to be used while naming the output files (no\nfile type extensions please; just a prefix). (default:\nNone)")), ToolInput(tag="in_gene_caller_id", input_type=String(optional=True), prefix="--gene-caller-id", doc=InputDocumentation(doc="A single gene id. (default: None)")), ToolInput(tag="in_genes_of_interest", input_type=File(optional=True), prefix="--genes-of-interest", doc=InputDocumentation(doc="A file with anvi'o gene caller IDs. There should be\nonly one column in the file, and each line should\ncorrespond to a unique gene caller id (without a\ncolumn header). (default: None)"))], outputs=[ToolOutput(tag="out_output_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_prefix", type_hint=File()), doc=OutputDocumentation(doc="A prefix to be used while naming the output files (no\nfile type extensions please; just a prefix). (default:\nNone)"))], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Export_Gene_Coverage_And_Detection_V0_1_0().translate("wdl")

