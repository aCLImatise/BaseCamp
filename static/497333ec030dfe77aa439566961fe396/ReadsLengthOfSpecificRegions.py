from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int

Readslengthofspecificregions_V0_1_0 = CommandToolBuilder(tool="ReadsLengthOfSpecificRegions", base_command=["ReadsLengthOfSpecificRegions"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Input file in BAM format")), ToolInput(tag="in_left_position", input_type=String(optional=True), prefix="--left-position", doc=InputDocumentation(doc="Left position of the sequence you are interested in.")), ToolInput(tag="in_right_position", input_type=String(optional=True), prefix="--right-position", doc=InputDocumentation(doc="Right position of the sequence you are interested in.")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Prefix of output files.[required]")), ToolInput(tag="in_coordinate_file", input_type=File(optional=True), prefix="--coordinateFile", doc=InputDocumentation(doc="The file should contain the coordinate of start and\nstop codon. Generated by\nOutputTranscriptInfo.py.[required]")), ToolInput(tag="in_select_trans_list", input_type=String(optional=True), prefix="--select_trans_list", doc=InputDocumentation(doc="Selected transcript list used for metagene\nanalysis.This files requires the first column must be\nthe transcript ID  with a column name. default=none")), ToolInput(tag="in_type", input_type=Int(optional=True), prefix="--type", doc=InputDocumentation(doc="Type of regions.[CDS/5UTR/3UTR].default=CDS")), ToolInput(tag="in_id_type", input_type=String(optional=True), prefix="--id-type", doc=InputDocumentation(doc="define the id type users input. the default is\ntranscript id, if not, will be transformed into\ntranscript id. default=transcript_id\n"))], outputs=[], container="quay.io/biocontainers/ribominer:0.2.3.1--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Readslengthofspecificregions_V0_1_0().translate("wdl")

