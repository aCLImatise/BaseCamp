from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Directory, Boolean, Int

Cbscanpy_V0_1_0 = CommandToolBuilder(tool="cbScanpy", base_command=["cbScanpy"], inputs=[ToolInput(tag="in_expr_matrix", input_type=File(optional=True), prefix="--exprMatrix", doc=InputDocumentation(doc="gene-cell expression matrix file, possible formats:\n.csv, .h5, .mtx, .txt, .tab, .loom, .h5ad. Existing\nmeta data from .loom and .h5ad will be kept and\nexported.")), ToolInput(tag="in_meta", input_type=String(optional=True), prefix="--meta", doc=InputDocumentation(doc="name of cell meta data table. A table like tsv or csv\nformat, first row has cellId and the cellId must match\na sample name in the expression matrix. Optional but\nrequired if you use --inCluster. 'inMeta' in\nscanpy.conf")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outDir", doc=InputDocumentation(doc="output directory")), ToolInput(tag="in_name", input_type=Directory(optional=True), prefix="--name", doc=InputDocumentation(doc="internal name of dataset in cell browser. No spaces or\nspecial characters. default: name of output directory\n(-o)")), ToolInput(tag="in_in_it", input_type=Boolean(optional=True), prefix="--init", doc=InputDocumentation(doc="copy sample scanpy.conf to current directory")), ToolInput(tag="in_samples_on_rows", input_type=Boolean(optional=True), prefix="--samplesOnRows", doc=InputDocumentation(doc="when reading the expression matrix from a text file,\nassume that samples are on lines (default behavior is\none-gene-per-line, one-sample-per-column). Also in\nscanpy.conf.")), ToolInput(tag="in_conf_fname", input_type=File(optional=True), prefix="--confFname", doc=InputDocumentation(doc="config file from which settings are read, default is\nscanpy.conf")), ToolInput(tag="in_in_cluster", input_type=String(optional=True), prefix="--inCluster", doc=InputDocumentation(doc="Do not run louvain-clustering, but use this meta field\nfrom ad.obs when calculating marker genes. The default\nis to use the louvain clustering results. Can be\nspecified also in scanpy.conf.")), ToolInput(tag="in_skip_matrix", input_type=Boolean(optional=True), prefix="--skipMatrix", doc=InputDocumentation(doc="do not write the scanpy matrix to the destination\ndirectory as a file exprMatrix.tsv.gz")), ToolInput(tag="in_copy_matrix", input_type=Boolean(optional=True), prefix="--copyMatrix", doc=InputDocumentation(doc="Instead of reading the input matrix into scanpy and\nthen writing it back out, just copy the input matrix.\nOnly works if the input matrix is gzipped and in the\nright format and a tsv or csv file, not mtx or\nh5-based files.")), ToolInput(tag="in_genome", input_type=Int(optional=True), prefix="--genome", doc=InputDocumentation(doc="when reading 10X HDF5 files, the genome to read.\nDefault is GRCh38. Use h5ls <h5file> to show possible\ngenomes")), ToolInput(tag="in_test", input_type=Boolean(optional=True), prefix="--test", doc=InputDocumentation(doc="run doctests")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="open an iPython shell when an exception occurs. also\noutput debug messages\n"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="output directory")), ToolOutput(tag="out_name", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_name", type_hint=File()), doc=OutputDocumentation(doc="internal name of dataset in cell browser. No spaces or\nspecial characters. default: name of output directory\n(-o)"))], container="quay.io/biocontainers/ucsc-cell-browser:0.7.15--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cbscanpy_V0_1_0().translate("wdl")

