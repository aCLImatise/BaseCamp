from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, File

Usher_V0_1_0 = CommandToolBuilder(tool="usher", base_command=["usher"], inputs=[ToolInput(tag="in_arg_input_vcf", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --vcf ] arg                      Input VCF file (in uncompressed or\ngzip-compressed .gz format) [REQUIRED]")), ToolInput(tag="in_arg_input_tree", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --tree ] arg                     Input tree file")), ToolInput(tag="in_arg_output_directory", input_type=Directory(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --outdir ] arg (=.)              Output directory to dump output and log\nfiles [DEFAULT uses current directory]")), ToolInput(tag="in_argload_mutationannotated_tree", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --load-mutation-annotated-tree ] arg\nLoad mutation-annotated tree object")), ToolInput(tag="in_argsave_output_mutationannotated", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --save-mutation-annotated-tree ] arg\nSave output mutation-annotated tree\nobject to the specified filename")), ToolInput(tag="in_sort_new_computedparsimony", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --sort-before-placement-1 ]      Sort new samples based on computed\nparsimony score and then number of\noptimal placements before the actual\nplacement [EXPERIMENTAL].")), ToolInput(tag="in_sort_new_the", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="[ --sort-before-placement-2 ]      Sort new samples based on the number of\noptimal placements and then the\nparsimony score before the actual\nplacement [EXPERIMENTAL].")), ToolInput(tag="in_reverse_sorting_order", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reverse-sort ]                 Reverse the sorting order of sorting\noptions (sort-before-placement-1 or\nsort-before-placement-2) [EXPERIMENTAL]")), ToolInput(tag="in_collapse_internal_nodes", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --collapse-tree ]                Collapse internal nodes of the input\ntree with no mutations and condense\nidentical sequences in polytomies into\na single node and the save the tree to\nfile condensed-tree.nh in outdir")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --max-uncertainty-per-sample ] arg (=1000000)\nMaximum number of equally parsimonious\nplacements allowed per sample beyond\nwhich the sample is ignored")), ToolInput(tag="in_write_final_tree", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="[ --write-uncondensed-final-tree ]\nWrite the final tree in uncondensed\nformat and save to file\nuncondensed-final-tree.nh in outdir")), ToolInput(tag="in_arg_write_set", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="[ --write-subtrees-size ] arg (=0) Write minimum set of subtrees covering\nthe newly added samples of size equal\nto or larger than this value")), ToolInput(tag="in_write_parsimony_scores", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --write-parsimony-scores-per-node ]\nWrite the parsimony scores for adding\nnew samples at each existing node in\nthe tree without modifying the tree in\na file names parsimony-scores.tsv in\noutdir")), ToolInput(tag="in_arg_create_tree", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="[ --multiple-placements ] arg (=1) Create a new tree up to this limit for\neach possibility of parsimony-optimal\nplacement")), ToolInput(tag="in_retain_branch_lengths", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --retain-input-branch-lengths ]  Retain the branch lengths from the\ninput tree in out newick files instead\nof using number of mutations for the\nbranch lengths.")), ToolInput(tag="in_arg_number_use", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --threads ] arg (=2)             Number of threads to use when possible\n[DEFAULT uses all available cores, 2\ndetected on this machine]"))], outputs=[ToolOutput(tag="out_arg_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_arg_output_directory", type_hint=File()), doc=OutputDocumentation(doc="[ --outdir ] arg (=.)              Output directory to dump output and log\nfiles [DEFAULT uses current directory]")), ToolOutput(tag="out_argsave_output_mutationannotated", output_type=File(optional=True), selector=InputSelector(input_to_select="in_argsave_output_mutationannotated", type_hint=File()), doc=OutputDocumentation(doc="[ --save-mutation-annotated-tree ] arg\nSave output mutation-annotated tree\nobject to the specified filename"))], container="quay.io/biocontainers/usher:0.1.3--hfcd16c1_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Usher_V0_1_0().translate("wdl")

