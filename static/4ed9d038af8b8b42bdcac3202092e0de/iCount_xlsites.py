from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Icount_Xlsites_V0_1_0 = CommandToolBuilder(tool="iCount_xlsites", base_command=["iCount", "xlsites"], inputs=[ToolInput(tag="in_group_by", input_type=Boolean(optional=True), prefix="--group_by", doc=InputDocumentation(doc="Assign score of a read to either 'start', 'middle' or 'end' nucleotide (default: start)")), ToolInput(tag="in_quant", input_type=Boolean(optional=True), prefix="--quant", doc=InputDocumentation(doc="Report number of 'cDNA' or number of 'reads' (default: cDNA)")), ToolInput(tag="in_segmentation", input_type=Boolean(optional=True), prefix="--segmentation", doc=InputDocumentation(doc="File with custon segmentation format (obtained by ``iCount segment``) (default: None)")), ToolInput(tag="in_mismatches", input_type=Boolean(optional=True), prefix="--mismatches", doc=InputDocumentation(doc="Reads on same position with random barcode differing less than\n``mismatches`` are grouped together (default: 2)")), ToolInput(tag="in_mapq_th", input_type=Boolean(optional=True), prefix="--mapq_th", doc=InputDocumentation(doc="Ignore hits with MAPQ < mapq_th (default: 0)")), ToolInput(tag="in_multimax", input_type=Boolean(optional=True), prefix="--multimax", doc=InputDocumentation(doc="Ignore reads, mapped to more than ``multimax`` places (default: 50)")), ToolInput(tag="in_gap_th", input_type=Boolean(optional=True), prefix="--gap_th", doc=InputDocumentation(doc="Reads with gaps less than gap_th are treated as if they have no gap (default: 4)")), ToolInput(tag="in_report_progress", input_type=Boolean(optional=True), prefix="--report_progress", doc=InputDocumentation(doc="Switch to report progress (default: False)")), ToolInput(tag="in_stdout_log", input_type=Boolean(optional=True), prefix="--stdout_log", doc=InputDocumentation(doc="Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.")), ToolInput(tag="in_file_log", input_type=Boolean(optional=True), prefix="--file_log", doc=InputDocumentation(doc="Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.")), ToolInput(tag="in_file_log_path", input_type=Boolean(optional=True), prefix="--file_logpath", doc=InputDocumentation(doc="Path to log file.")), ToolInput(tag="in_results_file", input_type=Boolean(optional=True), prefix="--results_file", doc=InputDocumentation(doc="File into which to store Metrics.")), ToolInput(tag="in_bam", input_type=String(), position=0, doc=InputDocumentation(doc="Input BAM file with mapped reads")), ToolInput(tag="in_sites_unique", input_type=String(), position=1, doc=InputDocumentation(doc="Output BED6 file to store data from uniquely mapped reads")), ToolInput(tag="in_sites_multi", input_type=String(), position=2, doc=InputDocumentation(doc="Output BED6 file to store data from multi-mapped reads")), ToolInput(tag="in_skipped", input_type=String(), position=3, doc=InputDocumentation(doc="Output BAM file to store reads that do not map as expected by segmentation and\nreference genome sequence. If read's second start does not fall on any of\nsegmentation borders, it is considered problematic. If segmentation is not provided,\nevery read in two parts with gap longer than gap_th is not used (skipped).\nAll such reads are reported to the user for further exploration"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Icount_Xlsites_V0_1_0().translate("wdl", allow_empty_container=True)

