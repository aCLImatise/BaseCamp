from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, Int, Float, File

Ramen_V0_1_0 = CommandToolBuilder(tool="ramen", base_command=["ramen"], inputs=[ToolInput(tag="in_log_f_scores", input_type=Boolean(optional=True), prefix="--log-fscores", doc=InputDocumentation(doc="[on|off] Regression on the log_e of the fluorescence scores\non: (Default) Use the log_e(fluorescence) in the regression.\noff: Use the score directly provided in the sequence file.")), ToolInput(tag="in_log_pwm_scores", input_type=Boolean(optional=True), prefix="--log-pwmscores", doc=InputDocumentation(doc="[on|off] Regression on the log_e of the PWM scores\non: Use the log_e(RMA or AMA Score) in the regression.\noff: (Default) Use the RMA/AMA score directly.")), ToolInput(tag="in_normalise_motifs", input_type=Boolean(optional=True), prefix="--normalise-motifs", doc=InputDocumentation(doc="[on|off] Normalise the motif scores so that the motifs are comparable\non: (Default) Normalise motifs for comparison (Use RMA score).\noff: Use raw AMA score (Not recommended).")), ToolInput(tag="in_lin_reg_switch_xy", input_type=Boolean(optional=True), prefix="--linreg-switchxy", doc=InputDocumentation(doc="[on|on] Switch the x and y axis for the linear regression\non: y-points are PWM scores, x-values are fluorescence scores.\noff: (Default) y-points are fluorescence scores, x-points are PWM scores.")), ToolInput(tag="in_lin_reg_dump_dir", input_type=Directory(optional=True), prefix="--linreg-dumpdir", doc=InputDocumentation(doc="Dump (R-format) TSV files of each regression.")), ToolInput(tag="in_repeats", input_type=Int(optional=True), prefix="--repeats", doc=InputDocumentation(doc="(default=10,000) Number of times to sample for p-value determination.")), ToolInput(tag="in_p_value_cut_off", input_type=Float(optional=True), prefix="--pvalue-cutoff", doc=InputDocumentation(doc="(default=0.05) Only show results with p-value <= this cutoff")), ToolInput(tag="in_bg_format", input_type=Boolean(optional=True), prefix="--bgformat", doc=InputDocumentation(doc="[0|2|3] source used to determine background frequencies\n0: uniform background\n1: MEME motif file\n2: Background file")), ToolInput(tag="in_bg_file", input_type=File(optional=True), prefix="--bgfile", doc=InputDocumentation(doc="file containing background frequencies")), ToolInput(tag="in_motif_format", input_type=Boolean(optional=True), prefix="--motif-format", doc=InputDocumentation(doc="[meme|tamo|regexp] format of input motif file (default meme)")), ToolInput(tag="in_pseudo_count", input_type=Boolean(optional=True), prefix="--pseudocount", doc=InputDocumentation(doc="<float, default = 0.25> Pseudocount for motif affinity scan")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="<1...5>                 Integer describing verbosity. Best used as first argument in list.")), ToolInput(tag="in_sequence_file", input_type=File(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_motif_file", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/meme:5.3.0--py38pl526hc1f1133_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ramen_V0_1_0().translate("wdl")

