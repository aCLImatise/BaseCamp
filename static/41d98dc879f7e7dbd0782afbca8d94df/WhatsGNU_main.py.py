from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Directory

Whatsgnu_Main_Py_V0_1_0 = CommandToolBuilder(tool="WhatsGNU_main.py", base_command=["WhatsGNU_main.py"], inputs=[ToolInput(tag="in_mk_database", input_type=File(optional=True), prefix="--mkdatabase", doc=InputDocumentation(doc="you have to provide path to faa file or a folder of\nmultiple faa files for compression")), ToolInput(tag="in_database", input_type=File(optional=True), prefix="--database", doc=InputDocumentation(doc="you have to provide path to your compressed database")), ToolInput(tag="in_pickle", input_type=Boolean(optional=True), prefix="--pickle", doc=InputDocumentation(doc="Save database in pickle format [Default only txt file]")), ToolInput(tag="in_sql", input_type=Boolean(optional=True), prefix="--sql", doc=InputDocumentation(doc="Save database in SQL format for large Databases\n[Default only txt file]")), ToolInput(tag="in_clusteredproteins_output_file", input_type=File(optional=True), prefix="-r", doc=InputDocumentation(doc="[ROARY_CLUSTERED_PROTEINS], --roary_clustered_proteins [ROARY_CLUSTERED_PROTEINS]\nclustered_proteins output file from roary to be used\nwith -m")), ToolInput(tag="in_database_mode", input_type=String(optional=True), prefix="--database_mode", doc=InputDocumentation(doc="select a mode from 'ortholog' or 'basic' to be used\nwith -d")), ToolInput(tag="in_ri", input_type=Boolean(optional=True), prefix="-ri", doc=InputDocumentation(doc="[RARITY_INDEX], --rarity_index [RARITY_INDEX]\nselect an ortholog variant rarity index (OVRI) cutoff\nvalue in range (0-1)[0.045] for ortholog mode")), ToolInput(tag="in_output_folder", input_type=Directory(optional=True), prefix="--output_folder", doc=InputDocumentation(doc="Database output prefix to be created for results\n(default: timestamped WhatsGNU_results in the current\ndirectory)")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Force overwriting existing results folder assigned\nwith -o (default: off)")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix for output compressed database (default:\nWhatsGNU_compressed_database)")), ToolInput(tag="in_top_genomes", input_type=Boolean(optional=True), prefix="--topgenomes", doc=InputDocumentation(doc="create a file of top 10 genomes with hits")), ToolInput(tag="in_strain_hits", input_type=String(optional=True), prefix="--strainhits", doc=InputDocumentation(doc="check how many hits you get from a particular\nstrain,it has to be used with -t")), ToolInput(tag="in_metadata", input_type=File(optional=True), prefix="--metadata", doc=InputDocumentation(doc="get the metadata composition of your hits, use the\nmetadata_frequency.csv file produced by the WhatsGNU\ncustomizer script")), ToolInput(tag="in_ids_hits", input_type=Boolean(optional=True), prefix="--ids_hits", doc=InputDocumentation(doc="create a file of each protein with locus_tags (ids) of\nall hits from the database, large file (~ 1 Gb for\n3000 pts)")), ToolInput(tag="in_faa_gnu_zero", input_type=Boolean(optional=True), prefix="--faa_GNU_0", doc=InputDocumentation(doc="get a fasta (.faa) file of all proteins with GNU score\nof zero")), ToolInput(tag="in_blastp", input_type=Boolean(optional=True), prefix="--blastp", doc=InputDocumentation(doc="run blastp on the proteins with GNU score of zero and\nmodify the report with ortholog_info, blastp has to be\ninstalled")), ToolInput(tag="in_output_blastp", input_type=Boolean(optional=True), prefix="--output_blastp", doc=InputDocumentation(doc="get the output report of blastp run, it has to be used\nwith -b")), ToolInput(tag="in_select_percent_value", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[PERCENT_IDENTITY], --percent_identity [PERCENT_IDENTITY]\nselect a blastp percent identity cutoff value [80],\nrange(0,100)")), ToolInput(tag="in_select_coverage_value", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[PERCENT_COVERAGE], --percent_coverage [PERCENT_COVERAGE]\nselect a blastp percent coverage cutoff value [80],\nrange(0,100)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="No screen output [default OFF]"))], outputs=[ToolOutput(tag="out_clusteredproteins_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_clusteredproteins_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ROARY_CLUSTERED_PROTEINS], --roary_clustered_proteins [ROARY_CLUSTERED_PROTEINS]\nclustered_proteins output file from roary to be used\nwith -m")), ToolOutput(tag="out_output_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_folder", type_hint=File()), doc=OutputDocumentation(doc="Database output prefix to be created for results\n(default: timestamped WhatsGNU_results in the current\ndirectory)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Whatsgnu_Main_Py_V0_1_0().translate("wdl", allow_empty_container=True)

