from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Float, Directory, Boolean

Ariba_Run_V0_1_0 = CommandToolBuilder(tool="ariba_run", base_command=["ariba", "run"], inputs=[ToolInput(tag="in_nuc_mer_min_id", input_type=Int(optional=True), prefix="--nucmer_min_id", doc=InputDocumentation(doc="Minimum alignment identity (delta-filter -i) [90]")), ToolInput(tag="in_nuc_mer_min_len", input_type=Int(optional=True), prefix="--nucmer_min_len", doc=InputDocumentation(doc="Minimum alignment length (delta-filter -i) [20]")), ToolInput(tag="in_nuc_mer_break_len", input_type=Int(optional=True), prefix="--nucmer_breaklen", doc=InputDocumentation(doc="Value to use for -breaklen when running nucmer [200]")), ToolInput(tag="in_assembler", input_type=String(optional=True), prefix="--assembler", doc=InputDocumentation(doc="Assembler to use")), ToolInput(tag="in_assembly_cov", input_type=Int(optional=True), prefix="--assembly_cov", doc=InputDocumentation(doc="Target read coverage when sampling reads for assembly\n[50]")), ToolInput(tag="in_min_sc_aff_depth", input_type=Int(optional=True), prefix="--min_scaff_depth", doc=InputDocumentation(doc="Minimum number of read pairs needed as evidence for\nscaffold link between two contigs [10]")), ToolInput(tag="in_spades_mode", input_type=String(optional=True), prefix="--spades_mode", doc=InputDocumentation(doc="If using Spades assembler, either use default WGS\nmode, Single Cell mode (`spades.py --sc`) or RNA mode\n(`spades.py --rna`). Use SC or RNA mode if your input\nis from a viral sequencing with very uneven and deep\ncoverage. Set `--assembly_cov` to some high value if\nusing SC or RNA mode")), ToolInput(tag="in_spades_options", input_type=String(optional=True), prefix="--spades_options", doc=InputDocumentation(doc="Extra options to pass to Spades assembler. Sensible\ndefault options will be picked based on\n`--spades_mode` argument. Anything set here will\nreplace the defaults completely")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Experimental. Number of threads. Will run clusters in\nparallel, but not minimap (yet) [1]")), ToolInput(tag="in_assembled_threshold", input_type=Float(optional=True), prefix="--assembled_threshold", doc=InputDocumentation(doc="(between 0 and 1)\nIf proportion of gene assembled (regardless of into\nhow many contigs) is at least this value then the flag\ngene_assembled is set [0.95]")), ToolInput(tag="in_gene_nt_extend", input_type=Int(optional=True), prefix="--gene_nt_extend", doc=InputDocumentation(doc="Max number of nucleotides to extend ends of gene\nmatches to look for start/stop codons [30]")), ToolInput(tag="in_unique_threshold", input_type=Float(optional=True), prefix="--unique_threshold", doc=InputDocumentation(doc="(between 0 and 1)\nIf proportion of bases in gene assembled more than\nonce is <= this value, then the flag unique_contig is\nset [0.03]")), ToolInput(tag="in_force", input_type=Directory(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite output directory, if it already exists")), ToolInput(tag="in_no_clean", input_type=Boolean(optional=True), prefix="--noclean", doc=InputDocumentation(doc="Do not clean up intermediate files")), ToolInput(tag="in_tmp_dir", input_type=Directory(optional=True), prefix="--tmp_dir", doc=InputDocumentation(doc="Existing directory in which to create a temporary\ndirectory used for local assemblies")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose")), ToolInput(tag="in_prepare_ref_dir", input_type=String(), position=0, doc=InputDocumentation(doc="Name of output directory when 'ariba prepareref' was")), ToolInput(tag="in_run", input_type=String(), position=1, doc=InputDocumentation(doc="reads_1               Name of fwd reads fastq file")), ToolInput(tag="in_reads_two", input_type=Int(), position=2, doc=InputDocumentation(doc="Name of rev reads fastq file")), ToolInput(tag="in_outdir", input_type=String(), position=3, doc=InputDocumentation(doc="Output directory (must not already exist)"))], outputs=[ToolOutput(tag="out_force", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Overwrite output directory, if it already exists"))], container="quay.io/biocontainers/ariba:2.14.6--py36hf0b53f7_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ariba_Run_V0_1_0().translate("wdl")

