from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Parseval_V0_1_0 = CommandToolBuilder(tool="parseval", base_command=["parseval"], inputs=[ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc=":                 Print debugging messages")), ToolInput(tag="in_delta", input_type=Boolean(optional=True), prefix="--delta", doc=InputDocumentation(doc=": INT             Extend gene loci by this many nucleotides;\ndefault is 0")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc=":               Print verbose warning messages")), ToolInput(tag="in_data_share", input_type=Boolean(optional=True), prefix="--datashare", doc=InputDocumentation(doc=": STRING      Location from which to copy shared data for\nHTML output (if `make install' has not yet\nbeen run)")), ToolInput(tag="in_out_format", input_type=File(optional=True), prefix="--outformat", doc=InputDocumentation(doc=": STRING      Indicate desired output format; possible\noptions: 'csv', 'text', or 'html'\n(default='text'); in 'text' or 'csv' mode,\nwill create a single file; in 'html' mode,\nwill create a directory")), ToolInput(tag="in_no_gff_three", input_type=Boolean(optional=True), prefix="--nogff3", doc=InputDocumentation(doc=":                Do no print GFF3 output corresponding to each")), ToolInput(tag="in_no_png", input_type=Boolean(optional=True), prefix="--nopng", doc=InputDocumentation(doc=":                 In HTML output mode, skip generation of PNG\ngraphics for each gene locus")), ToolInput(tag="in_summary", input_type=Boolean(optional=True), prefix="--summary", doc=InputDocumentation(doc=":               Only print summary statistics, do not print\nindividual comparisons")), ToolInput(tag="in_overwrite", input_type=Boolean(optional=True), prefix="--overwrite", doc=InputDocumentation(doc=":             Force overwrite of any existing output files")), ToolInput(tag="in_refr_label", input_type=Boolean(optional=True), prefix="--refrlabel", doc=InputDocumentation(doc=": STRING      Optional label for reference annotations")), ToolInput(tag="in_pred_label", input_type=Boolean(optional=True), prefix="--predlabel", doc=InputDocumentation(doc=": STRING      Optional label for prediction annotations")), ToolInput(tag="in_make_filter", input_type=Boolean(optional=True), prefix="--makefilter", doc=InputDocumentation(doc="Create a default configuration file for\nfiltering reported results and quit,\nperforming no comparisons")), ToolInput(tag="in_filter_file", input_type=Boolean(optional=True), prefix="--filterfile", doc=InputDocumentation(doc=": STRING     Use the indicated configuration file to\nfilter reported results;")), ToolInput(tag="in_max_trans", input_type=Boolean(optional=True), prefix="--maxtrans", doc=InputDocumentation(doc=": INT          Maximum transcripts allowed per locus; use 0\nto disable limit; default is 32\n")), ToolInput(tag="in_comparison", input_type=String(), position=0, doc=InputDocumentation(doc="-o|--outfile: FILENAME      File/directory to which output will be"))], outputs=[ToolOutput(tag="out_out_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_format", type_hint=File()), doc=OutputDocumentation(doc=": STRING      Indicate desired output format; possible\noptions: 'csv', 'text', or 'html'\n(default='text'); in 'text' or 'csv' mode,\nwill create a single file; in 'html' mode,\nwill create a directory"))], container="quay.io/biocontainers/aegean:0.16.0--hc2cb157_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Parseval_V0_1_0().translate("wdl")

