from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File

Anvi_Get_Sequences_For_Gene_Calls_V0_1_0 = CommandToolBuilder(tool="anvi_get_sequences_for_gene_calls", base_command=["anvi-get-sequences-for-gene-calls"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs'")), ToolInput(tag="in_gene_caller_ids", input_type=String(optional=True), prefix="--gene-caller-ids", doc=InputDocumentation(doc="Gene caller ids. Multiple of them can be declared\nseparated by a delimiter (the default is a comma). In\nanvi-gen-variability-profile, if you declare nothing\nyou will get all genes matching your other filtering\ncriteria. In other programs, you may get everything,\nnothing, or an error. It really depends on the\nsituation. Fortunately, mistakes are cheap, so it's\nworth a try.")), ToolInput(tag="in_delimiter", input_type=String(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="The delimiter to parse multiple input terms. The\ndefault is ','.")), ToolInput(tag="in_report_extended_def_lines", input_type=Boolean(optional=True), prefix="--report-extended-deflines", doc=InputDocumentation(doc="When declared, the deflines in the resulting FASTA\nfile will contain more information.")), ToolInput(tag="in_wrap", input_type=File(optional=True), prefix="--wrap", doc=InputDocumentation(doc="When to wrap sequences when storing them in a FASTA\nfile. The default is '120'. A value of '0' would be\nequivalent to 'do not wrap'.")), ToolInput(tag="in_export_gff_three", input_type=File(optional=True), prefix="--export-gff3", doc=InputDocumentation(doc="If this is true, the output file will be in GFF3")), ToolInput(tag="in_genomes_storage", input_type=File(optional=True), prefix="--genomes-storage", doc=InputDocumentation(doc="Anvi'o genomes storage file")), ToolInput(tag="in_genome_names", input_type=File(optional=True), prefix="--genome-names", doc=InputDocumentation(doc="Genome names to 'focus'. You can use this parameter to\nlimit the genomes included in your analysis. You can\nprovide these names as a comma-separated list of\nnames, or you can put them in a file, where you have a\nsingle genome name in each line, and provide the file\npath.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File path to store results.\n")), ToolInput(tag="in_format_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--get-aa-sequences    Store amino acid sequences instead."))], outputs=[ToolOutput(tag="out_export_gff_three", output_type=File(optional=True), selector=InputSelector(input_to_select="in_export_gff_three", type_hint=File()), doc=OutputDocumentation(doc="If this is true, the output file will be in GFF3")), ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store results.\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Get_Sequences_For_Gene_Calls_V0_1_0().translate("wdl", allow_empty_container=True)

