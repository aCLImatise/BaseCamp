from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, Array, String

Medaka_Features_V0_1_0 = CommandToolBuilder(tool="medaka_features", base_command=["medaka", "features"], inputs=[ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Verbose logging of debug information. (default: 20)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Minimal logging; warnings only). (default: 20)")), ToolInput(tag="in_batch_size", input_type=Int(optional=True), prefix="--batch_size", doc=InputDocumentation(doc="Inference batch size. (default: 100)")), ToolInput(tag="in_chunk_len", input_type=Int(optional=True), prefix="--chunk_len", doc=InputDocumentation(doc="Chunk length of samples. (default: 10000)")), ToolInput(tag="in_chunk_ovlp", input_type=Int(optional=True), prefix="--chunk_ovlp", doc=InputDocumentation(doc="Overlap of chunks. (default: 1000)")), ToolInput(tag="in_regions", input_type=Array(t=String(), optional=True), prefix="--regions", doc=InputDocumentation(doc="Genomic regions to analyse, or a bed file. (default:\nNone)")), ToolInput(tag="in_truth", input_type=String(optional=True), prefix="--truth", doc=InputDocumentation(doc="Bam of truth aligned to ref to create features for\ntraining. (default: None)")), ToolInput(tag="in_truth_haplo_tag", input_type=String(optional=True), prefix="--truth_haplotag", doc=InputDocumentation(doc="Two-letter tag defining haplotype of alignments for\npolyploidy labels. (default: None)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads for parallel execution. (default: 1)")), ToolInput(tag="in_label_scheme", input_type=String(optional=True), prefix="--label_scheme", doc=InputDocumentation(doc="Labelling scheme. (default: HaploidLabelScheme)")), ToolInput(tag="in_label_scheme_args", input_type=Int(optional=True), prefix="--label_scheme_args", doc=InputDocumentation(doc="=VAL1 KEY2=VAL2a,VAL2b... [KEY1=VAL1 KEY2=VAL2a,VAL2b... ...]\nLabel scheme key-word arguments. (default: {})")), ToolInput(tag="in_feature_encoder", input_type=String(optional=True), prefix="--feature_encoder", doc=InputDocumentation(doc="FeatureEncoder used to create the features. (default:\nCountsFeatureEncoder)")), ToolInput(tag="in_feature_encoder_args", input_type=Int(optional=True), prefix="--feature_encoder_args", doc=InputDocumentation(doc="=VAL1 KEY2=VAL2a,VAL2b... [KEY1=VAL1 KEY2=VAL2a,VAL2b... ...]\nFeature encoder key-word arguments. (default: {})\n")), ToolInput(tag="in_bam", input_type=String(), position=0, doc=InputDocumentation(doc="Input alignments.")), ToolInput(tag="in_output", input_type=String(), position=1, doc=InputDocumentation(doc="Output features file."))], outputs=[], container="quay.io/biocontainers/medaka:1.2.3--py36hbcc4abb_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Medaka_Features_V0_1_0().translate("wdl")

