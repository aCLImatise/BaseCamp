class: CommandLineTool
id: tadbit_bin.cwl
inputs:
- id: in_workdir
  doc: path to working directory (generated with the tool tadbit mapper)
  type: File?
  inputBinding:
    prefix: --workdir
- id: in_resolution
  doc: resolution at which to output matrices
  type: long?
  inputBinding:
    prefix: --resolution
- id: in_nox
  doc: no display server (X screen)
  type: boolean?
  inputBinding:
    prefix: --noX
- id: in_bam
  doc: "path to a TADbit-generated BAM file with all reads (other wise the\ntool will\
    \ guess from the working directory database)"
  type: File?
  inputBinding:
    prefix: --bam
- id: in_jobid
  doc: "Use as input data generated by a job with a given jobid. Use tadbit\ndescribe\
    \ to find out which."
  type: long?
  inputBinding:
    prefix: --jobid
- id: in_force
  doc: overwrite previously run job
  type: boolean?
  inputBinding:
    prefix: --force
- id: in_quiet
  doc: remove all messages
  type: boolean?
  inputBinding:
    prefix: --quiet
- id: in_tmp_db
  doc: if provided uses this directory to manipulate the database
  type: File?
  inputBinding:
    prefix: --tmpdb
- id: in_n_chunks
  doc: maximum number of chunks into which to cut the BAM
  type: long?
  inputBinding:
    prefix: --nchunks
- id: in_cpus
  doc: "[8] Maximum number of CPU cores available in the execution host. If\nhigher\
    \ than 1, tasks with multi-threading capabilities will enabled\n(if 0 all available)\
    \ cores will be used"
  type: long?
  inputBinding:
    prefix: --cpus
- id: in_filter
  doc: "[[1, 2, 3, 4, 6, 7, 9, 10]] Use filters to define a set os valid\npair of\
    \ reads e.g.: '--apply 1 2 3 4 8 9 10'. Where these\nnumberscorrespond to: 0:\
    \ nothing, 1: self-circle, 2: dangling-end,\n3: error, 4: extra dangling-end,\
    \ 5: too close from RES, 6: too\nshort, 7: too large, 8: over-represented, 9:\
    \ duplicated, 10: random\nbreaks, 11: trans-chromosomic"
  type: long[]
  inputBinding:
    prefix: --filter
- id: in_biases
  doc: path to file with pre-calculated biases by columns
  type: File?
  inputBinding:
    prefix: --biases
- id: in_norm
  doc: "[['raw']] normalization(s) to apply. Choices are: [norm, decay, raw,\nraw&decay]"
  type: string[]
  inputBinding:
    prefix: --norm
- id: in_matrix
  doc: "Write text matrix in multiple columns (square). By defaults matrices\nare\
    \ written in BED-like format (also only way to get a raw matrix\nwith all values\
    \ including the ones in masked columns)."
  type: boolean?
  inputBinding:
    prefix: --matrix
- id: in_cooler
  doc: Write i,j,v matrix in cooler format instead of text.
  type: boolean?
  inputBinding:
    prefix: --cooler
- id: in_row_names
  doc: "To store row names in the output text matrix. WARNING: when non-\nmatrix,\
    \ results in two extra columns"
  type: boolean?
  inputBinding:
    prefix: --rownames
- id: in_only_plot
  doc: '[False] Skip writing matrix in text format.'
  type: boolean?
  inputBinding:
    prefix: --only_plot
- id: in_interactive
  doc: '[False] Open matplotlib interactive plot (nothing will be saved).'
  type: boolean?
  inputBinding:
    prefix: --interactive
- id: in_coord
  doc: "Coordinate of the region to retrieve. By default all genome,\narguments can\
    \ be either one chromosome name, or the coordinate in\nthe form: \"-c chr3:110000000-120000000\""
  type: boolean?
  inputBinding:
    prefix: --coord
- id: in_coord_two
  doc: "Coordinate of a second region to retrieve the matrix in the\nintersection\
    \ with the first region."
  type: boolean?
  inputBinding:
    prefix: --coord2
- id: in_only_txt
  doc: Save only text file for matrices, not images
  type: boolean?
  inputBinding:
    prefix: --only_txt
- id: in_plot
  doc: Plot matrix in desired format.
  type: boolean?
  inputBinding:
    prefix: --plot
- id: in_force_plot
  doc: "Force plotting even with demoniacally big matrices (more than\n5000x5000,\
    \ or 1500x1500with interactive option)."
  type: boolean?
  inputBinding:
    prefix: --force_plot
- id: in_triangular
  doc: "[False] represents only half matrix. Note that this also results in\ntruly\
    \ vectorial images of matrix."
  type: boolean?
  inputBinding:
    prefix: --triangular
- id: in_x_tick_rotation
  doc: '[-25] x-tick rotation'
  type: long?
  inputBinding:
    prefix: --xtick_rotation
- id: in_cmap
  doc: '[viridis] Matplotlib color map to use.'
  type: string?
  inputBinding:
    prefix: --cmap
- id: in_bad_color
  doc: "[white] Matplotlib color to use on bins filtered out (only used with\nnormalized\
    \ matrices, not raw)."
  type: string?
  inputBinding:
    prefix: --bad_color
- id: in_format
  doc: '[png] plot file format.'
  type: File?
  inputBinding:
    prefix: --format
- id: in_z_range
  doc: 'Range, in log2 scale of the color scale. i.e.: --zrange=-2,2'
  type: long?
  inputBinding:
    prefix: --zrange
- id: in_transform
  doc: '[log2] can be any of [log2, log, none]'
  type: string?
  inputBinding:
    prefix: --transform
- id: in_fig_size
  doc: "Range, in log2 scale of the color scale. default for triangular\nmatrices:\
    \ --figsize=16,10 and for square matrices: --figsize=16,14\n"
  type: long?
  inputBinding:
    prefix: --figsize
outputs:
- id: out_stdout
  doc: Standard output stream
  type: stdout
hints: []
cwlVersion: v1.1
baseCommand:
- tadbit
- bin
