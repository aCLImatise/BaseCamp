from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, Array, String

Tadbit_Bin_V0_1_0 = CommandToolBuilder(tool="tadbit_bin", base_command=["tadbit", "bin"], inputs=[ToolInput(tag="in_workdir", input_type=File(optional=True), prefix="--workdir", doc=InputDocumentation(doc="path to working directory (generated with the tool tadbit mapper)")), ToolInput(tag="in_resolution", input_type=Int(optional=True), prefix="--resolution", doc=InputDocumentation(doc="resolution at which to output matrices")), ToolInput(tag="in_nox", input_type=Boolean(optional=True), prefix="--noX", doc=InputDocumentation(doc="no display server (X screen)")), ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="path to a TADbit-generated BAM file with all reads (other wise the\ntool will guess from the working directory database)")), ToolInput(tag="in_jobid", input_type=Int(optional=True), prefix="--jobid", doc=InputDocumentation(doc="Use as input data generated by a job with a given jobid. Use tadbit\ndescribe to find out which.")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="overwrite previously run job")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="remove all messages")), ToolInput(tag="in_tmp_db", input_type=File(optional=True), prefix="--tmpdb", doc=InputDocumentation(doc="if provided uses this directory to manipulate the database")), ToolInput(tag="in_n_chunks", input_type=Int(optional=True), prefix="--nchunks", doc=InputDocumentation(doc="maximum number of chunks into which to cut the BAM")), ToolInput(tag="in_cpus", input_type=Int(optional=True), prefix="--cpus", doc=InputDocumentation(doc="[8] Maximum number of CPU cores available in the execution host. If\nhigher than 1, tasks with multi-threading capabilities will enabled\n(if 0 all available) cores will be used")), ToolInput(tag="in_chr_name", input_type=Array(t=String(), optional=True), prefix="--chr_name", doc=InputDocumentation(doc="[fasta header] chromosome name(s). Order of chromosomes in the\noutput matrices.")), ToolInput(tag="in_filter", input_type=Array(t=Int(), optional=True), prefix="--filter", doc=InputDocumentation(doc="[[1, 2, 3, 4, 6, 7, 9, 10]] Use filters to define a set os valid\npair of reads e.g.: '--apply 1 2 3 4 8 9 10'. Where these\nnumberscorrespond to: 0: nothing, 1: self-circle, 2: dangling-end,\n3: error, 4: extra dangling-end, 5: too close from RES, 6: too\nshort, 7: too large, 8: over-represented, 9: duplicated, 10: random\nbreaks, 11: trans-chromosomic")), ToolInput(tag="in_biases", input_type=File(optional=True), prefix="--biases", doc=InputDocumentation(doc="path to file with pre-calculated biases by columns")), ToolInput(tag="in_norm", input_type=Array(t=String(), optional=True), prefix="--norm", doc=InputDocumentation(doc="[['raw']] normalization(s) to apply. Choices are: [norm, decay, raw,\nraw&decay]")), ToolInput(tag="in_matrix", input_type=Boolean(optional=True), prefix="--matrix", doc=InputDocumentation(doc="Write text matrix in multiple columns (square). By defaults matrices\nare written in BED-like format (also only way to get a raw matrix\nwith all values including the ones in masked columns).")), ToolInput(tag="in_cooler", input_type=Boolean(optional=True), prefix="--cooler", doc=InputDocumentation(doc="Write i,j,v matrix in cooler format instead of text.")), ToolInput(tag="in_row_names", input_type=Boolean(optional=True), prefix="--rownames", doc=InputDocumentation(doc="To store row names in the output text matrix. WARNING: when non-\nmatrix, results in two extra columns")), ToolInput(tag="in_only_plot", input_type=Boolean(optional=True), prefix="--only_plot", doc=InputDocumentation(doc="[False] Skip writing matrix in text format.")), ToolInput(tag="in_interactive", input_type=Boolean(optional=True), prefix="--interactive", doc=InputDocumentation(doc="[False] Open matplotlib interactive plot (nothing will be saved).")), ToolInput(tag="in_coord", input_type=Boolean(optional=True), prefix="--coord", doc=InputDocumentation(doc="Coordinate of the region to retrieve. By default all genome,\narguments can be either one chromosome name, or the coordinate in\nthe form: '-c chr3:110000000-120000000'")), ToolInput(tag="in_coord_two", input_type=Boolean(optional=True), prefix="--coord2", doc=InputDocumentation(doc="Coordinate of a second region to retrieve the matrix in the\nintersection with the first region.")), ToolInput(tag="in_only_txt", input_type=Boolean(optional=True), prefix="--only_txt", doc=InputDocumentation(doc="Save only text file for matrices, not images")), ToolInput(tag="in_plot", input_type=Boolean(optional=True), prefix="--plot", doc=InputDocumentation(doc="Plot matrix in desired format.")), ToolInput(tag="in_force_plot", input_type=Boolean(optional=True), prefix="--force_plot", doc=InputDocumentation(doc="Force plotting even with demoniacally big matrices (more than\n5000x5000, or 1500x1500with interactive option).")), ToolInput(tag="in_triangular", input_type=Boolean(optional=True), prefix="--triangular", doc=InputDocumentation(doc="[False] represents only half matrix. Note that this also results in\ntruly vectorial images of matrix.")), ToolInput(tag="in_x_tick_rotation", input_type=Int(optional=True), prefix="--xtick_rotation", doc=InputDocumentation(doc="[-25] x-tick rotation")), ToolInput(tag="in_cmap", input_type=String(optional=True), prefix="--cmap", doc=InputDocumentation(doc="[viridis] Matplotlib color map to use.")), ToolInput(tag="in_bad_color", input_type=String(optional=True), prefix="--bad_color", doc=InputDocumentation(doc="[white] Matplotlib color to use on bins filtered out (only used with\nnormalized matrices, not raw).")), ToolInput(tag="in_format", input_type=File(optional=True), prefix="--format", doc=InputDocumentation(doc="[png] plot file format.")), ToolInput(tag="in_z_range", input_type=Int(optional=True), prefix="--zrange", doc=InputDocumentation(doc="Range, in log2 scale of the color scale. i.e.: --zrange=-2,2")), ToolInput(tag="in_transform", input_type=String(optional=True), prefix="--transform", doc=InputDocumentation(doc="[log2] can be any of [log2, log, none]")), ToolInput(tag="in_fig_size", input_type=Int(optional=True), prefix="--figsize", doc=InputDocumentation(doc="Range, in log2 scale of the color scale. default for triangular\nmatrices: --figsize=16,10 and for square matrices: --figsize=16,14")), ToolInput(tag="in_tad_def", input_type=File(optional=True), prefix="--tad_def", doc=InputDocumentation(doc="tsv file with tad definition, columns: # start end score density"))], outputs=[], container="quay.io/biocontainers/tadbit:1.0.1--py38h6ed170a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tadbit_Bin_V0_1_0().translate("wdl")

