from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, String, Boolean

Analyzechip_Seq_Pl_V0_1_0 = CommandToolBuilder(tool="analyzeChIP_Seq.pl", base_command=["analyzeChIP-Seq.pl"], inputs=[ToolInput(tag="in_or", input_type=Directory(optional=True), prefix="-i", doc=InputDocumentation(doc="(or)")), ToolInput(tag="in_i_raw", input_type=File(optional=True), prefix="-iraw", doc=InputDocumentation(doc="[input alignment file2] ...(creates temporary input directory)")), ToolInput(tag="in_style", input_type=String(optional=True), prefix="-style", doc=InputDocumentation(doc="(findPeaks style for peak finding, default: factor)")), ToolInput(tag="in_m_size", input_type=Boolean(optional=True), prefix="-msize", doc=InputDocumentation(doc="(size of reagion to perform motif finding on, default: factor[200], histone[1000])")), ToolInput(tag="in_focus", input_type=Boolean(optional=True), prefix="-focus", doc=InputDocumentation(doc="(2ndary motif analysis on 'focused' TF peaks, using 50bp regions, or\nanalysis of NFR regions of 'histone' peaks, using 200bp regions)")), ToolInput(tag="in_number_run_finding", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="<#> (number of CPUs to run motif finding with, default: 1)")), ToolInput(tag="in_enhancer", input_type=Boolean(optional=True), prefix="-enhancer", doc=InputDocumentation(doc="(when performing analysis, limit motif finding to peaks >3kb from TSS)")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="-force", doc=InputDocumentation(doc="(forces all steps)")), ToolInput(tag="in_mask", input_type=Boolean(optional=True), prefix="-mask", doc=InputDocumentation(doc="(Motif finding with repeat masked genome, or add 'r' to end of genome name)")), ToolInput(tag="in_skip_freq", input_type=Boolean(optional=True), prefix="-skipFreq", doc=InputDocumentation(doc="(skips nucleotide frequency and GC quality control calculations)")), ToolInput(tag="in_cpg", input_type=Boolean(optional=True), prefix="-cpg", doc=InputDocumentation(doc="(For motif finding, use CpG% sequence bias correction, default: GC%)")), ToolInput(tag="in_tag_go", input_type=Boolean(optional=True), prefix="-tagGO", doc=InputDocumentation(doc="(perform Genome Ontology Analysis on tags - need ~ 3Gbs of memory)")), ToolInput(tag="in_normally_a_experimentsam", input_type=Directory(optional=True), prefix="-A", doc=InputDocumentation(doc="(normally -A experiment1.sam  ...)")), ToolInput(tag="in_inputdirectory_go_expdirectorygoanalysis", input_type=Directory(optional=True), prefix="-D", doc=InputDocumentation(doc="INPUT_DIRECTORY -go EXP_DIRECTORY/GOanalysis")), ToolInput(tag="in_exp_tag_directory", input_type=Directory(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_genome", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_global", input_type=String(optional=True), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_specific", input_type=String(optional=True), position=3, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Analyzechip_Seq_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

