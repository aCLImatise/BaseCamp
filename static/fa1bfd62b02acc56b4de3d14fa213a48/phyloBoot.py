from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean

Phyloboot_V0_1_0 = CommandToolBuilder(tool="phyloBoot", base_command=["phyloBoot"], inputs=[ToolInput(tag="in_tree", input_type=File(optional=True), prefix="--tree", doc=InputDocumentation(doc="|<tree_string>\n(Required if non-parametric and more than two species) Name\nof file or literal string defining tree topology.")), ToolInput(tag="in_n_sites", input_type=Int(optional=True), prefix="--nsites", doc=InputDocumentation(doc="Number of sites in sampled alignments.  If an alignment is\ngiven (non-parametric case), default is number of sites in\nalignment, otherwise default is 1000.")), ToolInput(tag="in_n_reps", input_type=Int(optional=True), prefix="--nreps", doc=InputDocumentation(doc="Number of replicates.  Default is 100.")), ToolInput(tag="in_msa_format", input_type=File(optional=True), prefix="--msa-format", doc=InputDocumentation(doc="|PHYLIP|MPM|MAF|SS\n(non-parametric case only)  Alignment format.  Default is to guess\nformat from file contents.")), ToolInput(tag="in_alignments_only", input_type=File(optional=True), prefix="--alignments-only", doc=InputDocumentation(doc="Generate alignments and write them to files with given filename\nroot, but do not estimate parameters.")), ToolInput(tag="in_dump_mods", input_type=String(optional=True), prefix="--dump-mods", doc=InputDocumentation(doc="Dump .mod files for individual estimated models (one for each\nreplicate).")), ToolInput(tag="in_dump_samples", input_type=File(optional=True), prefix="--dump-samples", doc=InputDocumentation(doc="Dump simulated alignments to files with given filename root.\nSimilar to --alignments-only but does not disable parameter\nestimation.")), ToolInput(tag="in_dump_format", input_type=File(optional=True), prefix="--dump-format", doc=InputDocumentation(doc="|PHYLIP|MPM|SS.\n(For use with --alignments-only or --dump-samples) File format to\nuse when dumping raw alignments.  Default FASTA.")), ToolInput(tag="in_read_mods", input_type=File(optional=True), prefix="--read-mods", doc=InputDocumentation(doc="Read estimated models from list of filenames instead of generating\nalignments and estimating parameters.  fname_list can be comma-\ndelimited list of files, or, if preceded by a '*', the name of a\nfile containing the file names (one per line).  Can be used to compute\nstatistics for replicates that have been processed separately (see\n--alignments-only).  When this option is used, the primary argument\nto the program (<model_fname>|<msa_fname>) will be ignored.")), ToolInput(tag="in_output_average", input_type=File(optional=True), prefix="--output-average", doc=InputDocumentation(doc="Output a tree model representing the average of all input\nmodels to the specified file.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Proceed quietly.")), ToolInput(tag="in_subst_mod", input_type=Int(optional=True), prefix="--subst-mod", doc=InputDocumentation(doc="|F81|HKY85|REV|SSREV|UNREST|R2|R2S|U2|U2S|R3|R3S|U3|U3S\n(default REV).  Nucleotide substitution model.")), ToolInput(tag="in_n_rates", input_type=Int(optional=True), prefix="--nrates", doc=InputDocumentation(doc="(default 1).  Number of rate categories to use.  Specifying a\nvalue of greater than one causes the discrete gamma model for\nrate variation to be used.")), ToolInput(tag="in_em", input_type=Boolean(optional=True), prefix="--EM", doc=InputDocumentation(doc="Use EM rather than the BFGS quasi-Newton algorithm for parameter\nestimation.")), ToolInput(tag="in_precision", input_type=String(optional=True), prefix="--precision", doc=InputDocumentation(doc="|MED|LOW\n(default HIGH) Level of precision to use in estimating model\nparameters.")), ToolInput(tag="in_in_it_model", input_type=String(optional=True), prefix="--init-model", doc=InputDocumentation(doc="Initialize optimization procedure with specified tree model.")), ToolInput(tag="in_in_it_random", input_type=Boolean(optional=True), prefix="--init-random", doc=InputDocumentation(doc="Initialize parameters randomly.")), ToolInput(tag="in_scale", input_type=String(optional=True), prefix="--scale", doc=InputDocumentation(doc="Scale input tree by factor rho before doing parametric simulations.")), ToolInput(tag="in_subtree", input_type=String(optional=True), prefix="--subtree", doc=InputDocumentation(doc="For use with --subtree-scale and/or subtree-switch.  Define\nsubtree including all children of named node, including branch\nleading up to node.")), ToolInput(tag="in_subtree_scale", input_type=String(optional=True), prefix="--subtree-scale", doc=InputDocumentation(doc="Scale subtree defined with --subtree option by factor lambda.")), ToolInput(tag="in_subtree_switch", input_type=String(optional=True), prefix="--subtree-switch", doc=InputDocumentation(doc="With given probability, randomly switch branches in tree from\nsubtree to supertree and vice versa.  Randomization is performed\nindependently for each branch in every column of simulated data.")), ToolInput(tag="in_scale_file", input_type=File(optional=True), prefix="--scale-file", doc=InputDocumentation(doc="(For use with --subtree in parametric mode).  Instead of using\n--subtree-scale or --scale, read in a tab-delimited file with\nthree columns: numSite,scale,subtree_scale.  For each row in the\nfile phyloBoot will simulate the given number of sites with those\nscaling factors, and then will move on to the next row, so that the\ntotal number of sites is the sum of the first column.\n")), ToolInput(tag="in_options_dot", input_type=String(), position=0, doc=InputDocumentation(doc="EXAMPLES:")), ToolInput(tag="in_non_par_errors", input_type=String(), position=0, doc=InputDocumentation(doc="3. Parametric generation of simulated data."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phyloboot_V0_1_0().translate("wdl", allow_empty_container=True)

