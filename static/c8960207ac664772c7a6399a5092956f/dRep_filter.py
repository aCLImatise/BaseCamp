from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Drep_Filter_V0_1_0 = CommandToolBuilder(tool="dRep_filter", base_command=["dRep", "filter"], inputs=[ToolInput(tag="in_processors", input_type=Int(optional=True), prefix="--processors", doc=InputDocumentation(doc="threads (default: 6)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="make extra debugging output (default: False)")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc="Minimum genome length (default: 50000)")), ToolInput(tag="in_completeness", input_type=Int(optional=True), prefix="--completeness", doc=InputDocumentation(doc="Minumum genome completeness (default: 75)")), ToolInput(tag="in_contamination", input_type=Int(optional=True), prefix="--contamination", doc=InputDocumentation(doc="Maximum genome contamination (default: 25)")), ToolInput(tag="in_ignore_genome_quality", input_type=Boolean(optional=True), prefix="--ignoreGenomeQuality", doc=InputDocumentation(doc="Don't run checkM or do any quality filtering. NOT\nRECOMMENDED! This is useful for use with\nbacteriophages or eukaryotes or things where checkM\nscoring does not work. Will only choose genomes based\non length and N50 (default: False)")), ToolInput(tag="in_genomes_filter_ifbdb", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[GENOMES [GENOMES ...]], --genomes [GENOMES [GENOMES ...]]\ngenomes to filter in .fasta format. Not necessary if\nBdb or Wdb already exist (default: None)")), ToolInput(tag="in_genome_info", input_type=File(optional=True), prefix="--genomeInfo", doc=InputDocumentation(doc="location of .csv file containing quality information\non the genomes. Must contain: ['genome'(basename of\n.fasta file of that genome), 'completeness'(0-100\nvalue for completeness of the genome),\n'contamination'(0-100 value of the contamination of\nthe genome)] (default: None)")), ToolInput(tag="in_check_m_method", input_type=String(optional=True), prefix="--checkM_method", doc=InputDocumentation(doc="Either lineage_wf (more accurate) or taxonomy_wf\n(faster) (default: lineage_wf)")), ToolInput(tag="in_set_recursion", input_type=Int(optional=True), prefix="--set_recursion", doc=InputDocumentation(doc="Increases the python recursion limit. NOT RECOMMENDED\nunless checkM is crashing due to recursion issues.\nRecommended to set to 2000 if needed, but setting this\ncould crash python (default: 0)\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Drep_Filter_V0_1_0().translate("wdl", allow_empty_container=True)

