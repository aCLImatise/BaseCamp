from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, Boolean, Float, Int, Directory, File

Optitypepipeline_Py_V0_1_0 = CommandToolBuilder(tool="OptiTypePipeline.py", base_command=["OptiTypePipeline.py"], inputs=[ToolInput(tag="in_input", input_type=Array(t=String(), optional=True), prefix="--input", doc=InputDocumentation(doc=".fastq file(s) (fished or raw) or .bam files stored\nfor re-use, generated by an earlier OptiType run. One\nfile: single-end mode, two files: paired-end mode.")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="--rna", doc=InputDocumentation(doc="Use with RNA sequencing data.")), ToolInput(tag="in_dna", input_type=Boolean(optional=True), prefix="--dna", doc=InputDocumentation(doc="Use with DNA sequencing data.")), ToolInput(tag="in_beta", input_type=Float(optional=True), prefix="--beta", doc=InputDocumentation(doc="The beta value for for homozygosity detection (see\npaper). Default: 0.009. Handle with care.")), ToolInput(tag="in_enumerate", input_type=Int(optional=True), prefix="--enumerate", doc=InputDocumentation(doc="Number of enumerations. OptiType will output the\noptimal solution and the top N-1 suboptimal solutions\nin the results CSV. Default: 1")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Specifies the out directory to which all files should\nbe written.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Specifies prefix of output files")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Set verbose mode on.")), ToolInput(tag="in_config", input_type=File(optional=True), prefix="--config", doc=InputDocumentation(doc="Path to config file. Default: config.ini in the same\ndirectory as this script\n")), ToolInput(tag="in_opti_type", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Specifies the out directory to which all files should\nbe written."))], container="quay.io/biocontainers/optitype:1.3.5--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Optitypepipeline_Py_V0_1_0().translate("wdl")

