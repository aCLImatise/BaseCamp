from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Adjlist_V0_1_0 = CommandToolBuilder(tool="AdjList", base_command=["AdjList"], inputs=[ToolInput(tag="in_length_kmer_is", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="the length of a k-mer (when -K is not set)\nor the span of a k-mer pair (when -K is set)")), ToolInput(tag="in_single_km_er", input_type=Int(optional=True), prefix="--single-kmer", doc=InputDocumentation(doc="the length of a single k-mer in a k-mer pair")), ToolInput(tag="in_min_overlap", input_type=Int(optional=True), prefix="--min-overlap", doc=InputDocumentation(doc="require a minimum overlap of M bases [50]")), ToolInput(tag="in_adj", input_type=Boolean(optional=True), prefix="--adj", doc=InputDocumentation(doc="output the graph in ADJ format [default]")), ToolInput(tag="in_as_qg", input_type=Boolean(optional=True), prefix="--asqg", doc=InputDocumentation(doc="output the graph in ASQG format")), ToolInput(tag="in_dot", input_type=Boolean(optional=True), prefix="--dot", doc=InputDocumentation(doc="output the graph in GraphViz format")), ToolInput(tag="in_gfa", input_type=Boolean(optional=True), prefix="--gfa", doc=InputDocumentation(doc="output the graph in GFA1 format")), ToolInput(tag="in_gfa_one", input_type=Boolean(optional=True), prefix="--gfa1", doc=InputDocumentation(doc="output the graph in GFA1 format")), ToolInput(tag="in_gfa_two", input_type=Boolean(optional=True), prefix="--gfa2", doc=InputDocumentation(doc="output the graph in GFA2 format")), ToolInput(tag="in_gv", input_type=Boolean(optional=True), prefix="--gv", doc=InputDocumentation(doc="output the graph in GraphViz format")), ToolInput(tag="in_sam", input_type=Boolean(optional=True), prefix="--sam", doc=InputDocumentation(doc="output the graph in SAM format")), ToolInput(tag="in_ss", input_type=Boolean(optional=True), prefix="--SS", doc=InputDocumentation(doc="expect contigs to be oriented correctly")), ToolInput(tag="in_no_ss", input_type=Boolean(optional=True), prefix="--no-SS", doc=InputDocumentation(doc="no assumption about contig orientation")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="specify path of database repository in FILE")), ToolInput(tag="in_library", input_type=String(optional=True), prefix="--library", doc=InputDocumentation(doc="specify library NAME for database")), ToolInput(tag="in_strain", input_type=String(optional=True), prefix="--strain", doc=InputDocumentation(doc="specify strain NAME for database")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="specify species NAME for database")), ToolInput(tag="in_var_18", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Adjlist_V0_1_0().translate("wdl", allow_empty_container=True)

