from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Int, Boolean, String

Svtools_Lmerge_V0_1_0 = CommandToolBuilder(tool="svtools_lmerge", base_command=["svtools", "lmerge"], inputs=[ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--inFile", doc=InputDocumentation(doc="a sorted VCF file generated by svtools lsort. Each\nINFO field must contain an SNAME tag containing the\nsample name (e.g. SNAME=SAMPLE_NAME)")), ToolInput(tag="in_percent_slop", input_type=Float(optional=True), prefix="--percent-slop", doc=InputDocumentation(doc="increase the the breakpoint confidence interval both\nup and down stream by a given proportion of the\noriginal size")), ToolInput(tag="in_fixed_slop", input_type=Int(optional=True), prefix="--fixed-slop", doc=InputDocumentation(doc="increase the the breakpoint confidence interval both\nup and down stream by a given fixed size")), ToolInput(tag="in_sum", input_type=Boolean(optional=True), prefix="--sum", doc=InputDocumentation(doc="calculate breakpoint PDF and position using sum\nalgorithm instead of product")), ToolInput(tag="in_include_original_genotypes", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="include original genotypes in output. When multiple\nvariants are merged, the last will dictate the\ngenotype field")), ToolInput(tag="in_weighting_scheme_intended", input_type=String(optional=True), prefix="-w", doc=InputDocumentation(doc="weighting scheme (intended for use in tiered merging),\noptions: unweighted, carrier_wt, evidence_wt")), ToolInput(tag="in_tempdir", input_type=File(optional=True), prefix="--tempdir", doc=InputDocumentation(doc="Directory for temp file downloads"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Svtools_Lmerge_V0_1_0().translate("wdl", allow_empty_container=True)

