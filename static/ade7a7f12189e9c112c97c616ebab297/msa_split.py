from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Msa_Split_V0_1_0 = CommandToolBuilder(tool="msa_split", base_command=["msa_split"], inputs=[ToolInput(tag="in_by_category", input_type=Boolean(optional=True), prefix="--by-category", doc=InputDocumentation(doc="(Requires --features) Split by category, as defined by\nannotations file and (optionally) category map (see\n--catmap)")), ToolInput(tag="in_for_features", input_type=Boolean(optional=True), prefix="--for-features", doc=InputDocumentation(doc="(Requires --features) Extract section of alignment\ncorresponding to every feature.  There will be no output for\nregions not covered by features.")), ToolInput(tag="in_windows", input_type=Boolean(optional=True), prefix="--windows", doc=InputDocumentation(doc="<win_size,win_overlap>\nSplit the alignment into 'windows' of size <win_size> bases,\noverlapping by <win_overlap>.")), ToolInput(tag="in_by_group", input_type=File(optional=True), prefix="--by-group", doc=InputDocumentation(doc="(Requires --features) Split by groups in annotation file,\nas defined by specified tag.  Splits midway between every\npair of consecutive groups.  Features will be sorted by group.\nThere should be no overlapping features (see 'refeature\n--unique').")), ToolInput(tag="in_by_index", input_type=Int(optional=True), prefix="--by-index", doc=InputDocumentation(doc="List of explicit indices at which to split alignment\n(comma-separated).  If the list of indices is '10,20',\nthen sub-alignments will be output for sites 1-9, 10-19, and\n20-<msa_len>.  Note that the indices are relative to the\ninput alignment, and not necessarily in genomic coordinates.")), ToolInput(tag="in_n_partitions", input_type=Int(optional=True), prefix="--npartitions", doc=InputDocumentation(doc="Split alignment equally into specified number of partitions.")), ToolInput(tag="in_between_blocks", input_type=Int(optional=True), prefix="--between-blocks", doc=InputDocumentation(doc="(Not for use with --by-category or --for-features) Try to\npartition at sites between alignment blocks.  Assumes a\nreference sequence alignment, with the first sequence as the\nreference seq (as created by multiz).  Blocks of 30 sites with\ngaps in all sequences but the reference seq are assumed to\nindicate boundaries between alignment blocks.  Partition\nindices will not be moved more than <radius> sites.")), ToolInput(tag="in_features", input_type=File(optional=True), prefix="--features", doc=InputDocumentation(doc="(For use with --by-category, --by-group, --for-features, or\n--windows) Annotations file.  May be GFF, BED, or genepred\nformat.  Coordinates are assumed to be in the coordinate frame of\nthe first sequence in the alignment (assumed to be the reference\nsequence).")), ToolInput(tag="in_cat_map", input_type=File(optional=True), prefix="--catmap", doc=InputDocumentation(doc="|<string>\n(Optionally use with --by-category) Mapping of feature types\nto category numbers.  Can either give a filename or an\n'inline' description of a simple category map, e.g.,\n--catmap 'NCATS = 3 ; CDS 1-3' or --catmap 'NCATS = 1 ; UTR\n1'.")), ToolInput(tag="in_ref_idx", input_type=Int(optional=True), prefix="--refidx", doc=InputDocumentation(doc="(For use with --windows or --by-index) Index of frame of\nreference for split indices.  Default is 1 (1st sequence\nassumed reference).")), ToolInput(tag="in_in_format", input_type=File(optional=True), prefix="--in-format", doc=InputDocumentation(doc="|PHYLIP|MPM|MAF|SS\nInput alignment file format.  Default is to guess format from\nfile contents.")), ToolInput(tag="in_refseq", input_type=File(optional=True), prefix="--refseq", doc=InputDocumentation(doc="(For use with --in-format MAF) Name of file containing\nreference sequence, in FASTA format.")), ToolInput(tag="in_out_format", input_type=File(optional=True), prefix="--out-format", doc=InputDocumentation(doc="|PHYLIP|MPM|SS\nOutput alignment file format.  Default is FASTA.")), ToolInput(tag="in_out_root", input_type=File(optional=True), prefix="--out-root", doc=InputDocumentation(doc="Filename root for output files (default 'msa_split').")), ToolInput(tag="in_sub_features", input_type=Boolean(optional=True), prefix="--sub-features", doc=InputDocumentation(doc="(For use with --features)  Output subsets of features\ncorresponding to subalignments.  Features overlapping\npartition boundaries will be discarded.  Not permitted with\n--by-category.")), ToolInput(tag="in_reverse_compl", input_type=Boolean(optional=True), prefix="--reverse-compl", doc=InputDocumentation(doc="Reverse complement all segments having at least one feature on\nthe reverse strand and none on the positive strand.  For use\nwith --by-group.  Can also be used with --by-category to ensure\nall sites in a category are represented in the same strand\norientation.")), ToolInput(tag="in_gap_strip", input_type=String(optional=True), prefix="--gap-strip", doc=InputDocumentation(doc="|ANY|<seqno>\nStrip columns in output alignments containing all gaps, any\ngaps, or gaps in the specified sequence (<seqno>; indexing\nbegins with one).  Default is not to strip any columns.")), ToolInput(tag="in_seqs", input_type=Int(optional=True), prefix="--seqs", doc=InputDocumentation(doc="Include only specified sequences in output.  Indicate by\nsequence number or name (numbering starts with 1 and is\nevaluated *after* --order is applied).")), ToolInput(tag="in_exclude", input_type=Boolean(optional=True), prefix="--exclude", doc=InputDocumentation(doc="Exclude rather than include specified sequences.")), ToolInput(tag="in_order", input_type=String(optional=True), prefix="--order", doc=InputDocumentation(doc="Change order of rows in alignment to match sequence names\nspecified in name_list.  If a name appears in name_list but\nnot in the alignment, a row of gaps will be inserted.")), ToolInput(tag="in_min_informative", input_type=Int(optional=True), prefix="--min-informative", doc=InputDocumentation(doc="Only output alignments having at least <n> informative sites\n(sites at which at least two non-gap and non-N gaps are present).")), ToolInput(tag="in_do_cats", input_type=String(optional=True), prefix="--do-cats", doc=InputDocumentation(doc="(For use with --by-category) Output sub-alignments for only the\nspecified categories (column-delimited list).")), ToolInput(tag="in_tuple_size", input_type=Int(optional=True), prefix="--tuple-size", doc=InputDocumentation(doc="(for use with --by-category or --out-format SS) Size of tuples\nof columns to consider in downstream analysis (e.g., with\ncontext-dependent phylogenetic models; see 'phyloFit').  With\n--by-category, insert tuple_size-1 columns of missing data\nbetween sites that were not adjacent in the original alignment,\nto avoid creating artificial context.  With --out-format SS,\nexpress sufficient statistics in terms of tuples of specified size.")), ToolInput(tag="in_unordered_ss", input_type=Boolean(optional=True), prefix="--unordered-ss", doc=InputDocumentation(doc="(For use with --out-format SS)  Suppress the portion of the\nsufficient statistics concerned with the order in which columns\nappear.")), ToolInput(tag="in_summary", input_type=File(optional=True), prefix="--summary", doc=InputDocumentation(doc="Output summary of each output alignment to a file with suffix\n'.sum' (includes base frequencies and numbers of gapped columns).")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Proceed quietly.")), ToolInput(tag="in_format_dot", input_type=String(), position=0, doc=InputDocumentation(doc="msa_split mydata.fa --features conserved.bed --by-category \"))], outputs=[ToolOutput(tag="out_out_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_format", type_hint=File()), doc=OutputDocumentation(doc="|PHYLIP|MPM|SS\nOutput alignment file format.  Default is FASTA.")), ToolOutput(tag="out_out_root", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_root", type_hint=File()), doc=OutputDocumentation(doc="Filename root for output files (default 'msa_split').")), ToolOutput(tag="out_summary", output_type=File(optional=True), selector=InputSelector(input_to_select="in_summary", type_hint=File()), doc=OutputDocumentation(doc="Output summary of each output alignment to a file with suffix\n'.sum' (includes base frequencies and numbers of gapped columns)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Msa_Split_V0_1_0().translate("wdl", allow_empty_container=True)

