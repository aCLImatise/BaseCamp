from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Upimapi_Py_V0_1_0 = CommandToolBuilder(tool="upimapi.py", base_command=["upimapi.py"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Input filename - can be: 1. a file containing a list\nof IDs (one per line) 2. a BLAST TSV result file\n(requires to be specified with the --blast parameter\n3. a protein FASTA file to be annotated (requires the\n--use-diamond and -db parameters) 4. nothing! If so,\nwill read input from command line, and parse as CSV\n(id1,id2,...)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="filename of output of UniProt information")), ToolInput(tag="in_excel", input_type=Boolean(optional=True), prefix="--excel", doc=InputDocumentation(doc="Will produce output in EXCEL format (default is TSV)")), ToolInput(tag="in_annotation_columns", input_type=String(optional=True), prefix="--annotation-columns", doc=InputDocumentation(doc="List of UniProt columns to obtain information from")), ToolInput(tag="in_annotation_databases", input_type=String(optional=True), prefix="--annotation-databases", doc=InputDocumentation(doc="List of databases to cross-check with UniProt\ninformation")), ToolInput(tag="in_blast", input_type=Boolean(optional=True), prefix="--blast", doc=InputDocumentation(doc="If input file is in BLAST TSV format (will consider\none ID per line if not set)")), ToolInput(tag="in_full_id", input_type=Boolean(optional=True), prefix="--full-id", doc=InputDocumentation(doc="If IDs in database are in 'full' format: tr|XXX|XXX")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Output will be generated in FASTA format")), ToolInput(tag="in_step", input_type=Int(optional=True), prefix="--step", doc=InputDocumentation(doc="How many IDs to submit per request to the API (default\nis 1000)")), ToolInput(tag="in_max_tries", input_type=Int(optional=True), prefix="--max-tries", doc=InputDocumentation(doc="How many times to try obtaining information from\nUniProt before giving up")), ToolInput(tag="in_use_diamond", input_type=Boolean(optional=True), prefix="--use-diamond", doc=InputDocumentation(doc="Use DIAMOND to annotate sequences before mapping IDs.\nRequires protein FASTA files as input for '-db' and\n'-i' parameters")), ToolInput(tag="in_diamond_output", input_type=String(optional=True), prefix="--diamond-output", doc=InputDocumentation(doc="DIAMOND's output foldername")), ToolInput(tag="in_database", input_type=String(optional=True), prefix="--database", doc=InputDocumentation(doc="Reference database for annotation with DIAMOND.\nNOTICE: if database's IDs are in 'full' format\n(tr|XXX|XXX), specify with ''--full-id' parameter.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use in annotation steps")), ToolInput(tag="in_max_target_seqs", input_type=Int(optional=True), prefix="--max-target-seqs", doc=InputDocumentation(doc="Number of annotations to output per sequence inputed")), ToolInput(tag="in_block_size", input_type=Int(optional=True), prefix="--block-size", doc=InputDocumentation(doc="Billions of sequence letters to be processed at a time\n(UPIMAPI determines best value for this parameter if\nnot set")), ToolInput(tag="in_index_chunks", input_type=Int(optional=True), prefix="--index-chunks", doc=InputDocumentation(doc="Number of chunks for processing the seed index\n(UPIMAPI determines best value for this parameter if\nnot set"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="filename of output of UniProt information"))], container="quay.io/biocontainers/upimapi:1.1.4--hdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Upimapi_Py_V0_1_0().translate("wdl")

