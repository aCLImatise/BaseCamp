!Command
positional:
- !Positional
  description: User configuration to run. See the source code to see an example.
  position: 0
  name: CONFIG_FILE
  optional: false
named:
- !Flag
  description: 'Minimal high-quality read length (default: 0.75)'
  synonyms:
  - -p
  args: !SimpleFlagArg
    name: FLOAT
  optional: true
- !Flag
  description: 'Minimum PHRED score to identify low quality bases (default: 3)'
  synonyms:
  - -q
  args: !SimpleFlagArg
    name: INTEGER
  optional: true
- !Flag
  description: 'Maximum of consecutive low-quality calls (default: 3)'
  synonyms:
  - -r
  args: !SimpleFlagArg
    name: INTEGER
  optional: true
- !Flag
  description: 'Maximum of ambiguous calls allowed (default: 0)'
  synonyms:
  - -n
  args: !SimpleFlagArg
    name: INTEGER
  optional: true
- !Flag
  description: If FASTQ files are not CASAVA outputs, parsing the header info may
    go wrong. This flag tells the software to skip parsing deflines.
  synonyms:
  - --ignore-deflines
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: When set, mean quality score for individual bases will be stored and
    visualized for each group of reads.
  synonyms:
  - --visualize-quality-curves
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Put a limit to the number of pairs to analyze. For testing purposes.
  synonyms:
  - --limit-num-pairs
  args: !SimpleFlagArg
    name: INTEGER
  optional: true
- !Flag
  description: When set, the script will print out the Q-scores the way it sees it
    in the FASTQ file. This flag will generate a lot of useless output to the stdout,
    and you should not use it if you are not testing something.
  synonyms:
  - --print-qual-scores
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: As it goes through your raw reads, this program keeps track of the
    read fate so you can learn what happened to a given read ID in your raw input
    data once the analysis is done. This output can become extremely large, and often
    is utterly useless to you unless you have a very specific benchmarking or debugging
    interestes, hence, it is not stored by default. You can change that behavior by
    using this flag, and ask illumina-utils to store this data on your disk.
  synonyms:
  - --store-read-fate
  args: !EmptyFlagArg {}
  optional: true
command:
- iu-filter-quality-bokulich
subcommands: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
