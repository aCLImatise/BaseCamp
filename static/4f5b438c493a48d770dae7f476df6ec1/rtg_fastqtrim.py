from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Boolean, Int

Rtg_Fastqtrim_V0_1_0 = CommandToolBuilder(tool="rtg_fastqtrim", base_command=["rtg", "fastqtrim"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="input FASTQ file, Use '-' to read from\nstandard input")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output filename. Use '-' to write to\nstandard output")), ToolInput(tag="in_quality_format", input_type=Float(optional=True), prefix="--quality-format", doc=InputDocumentation(doc="quality data encoding method used in FASTQ\ninput files (Illumina 1.8+ uses sanger).\nAllowed values are [sanger, solexa,\nillumina] (Default is sanger)")), ToolInput(tag="in_discard_empty_reads", input_type=Boolean(optional=True), prefix="--discard-empty-reads", doc=InputDocumentation(doc="if set, discard reads that have zero length\nafter trimming. Should not be used with\npaired-end data")), ToolInput(tag="in_end_quality_threshold", input_type=Int(optional=True), prefix="--end-quality-threshold", doc=InputDocumentation(doc="trim read ends to maximise base quality\nabove the given threshold (Default is 0)")), ToolInput(tag="in_min_read_length", input_type=Int(optional=True), prefix="--min-read-length", doc=InputDocumentation(doc="if a read ends up shorter than this\nthreshold it will be trimmed to zero length\n(Default is 0)")), ToolInput(tag="in_start_quality_threshold", input_type=Int(optional=True), prefix="--start-quality-threshold", doc=InputDocumentation(doc="trim read starts to maximise base quality\nabove the given threshold (Default is 0)")), ToolInput(tag="in_trim_end_bases", input_type=Int(optional=True), prefix="--trim-end-bases", doc=InputDocumentation(doc="always trim the specified number of bases\nfrom read end (Default is 0)")), ToolInput(tag="in_trim_start_bases", input_type=Int(optional=True), prefix="--trim-start-bases", doc=InputDocumentation(doc="always trim the specified number of bases\nfrom read start (Default is 0)")), ToolInput(tag="in_no_gzip", input_type=Boolean(optional=True), prefix="--no-gzip", doc=InputDocumentation(doc="do not gzip the output")), ToolInput(tag="in_reverse_complement", input_type=Boolean(optional=True), prefix="--reverse-complement", doc=InputDocumentation(doc="if set, output in reverse complement")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="seed used during subsampling")), ToolInput(tag="in_subsample", input_type=Float(optional=True), prefix="--subsample", doc=InputDocumentation(doc="if set, subsample the input to retain this\nfraction of reads")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="number of threads (Default is the number of\navailable cores)\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output filename. Use '-' to write to\nstandard output"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rtg_Fastqtrim_V0_1_0().translate("wdl", allow_empty_container=True)

