from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Metagraph_Dna_Annotate_V0_1_0 = CommandToolBuilder(tool="metagraph_DNA_annotate", base_command=["metagraph_DNA", "annotate"], inputs=[ToolInput(tag="in_min_count", input_type=Boolean(optional=True), prefix="--min-count", doc=InputDocumentation(doc="[INT]    min k-mer abundance, including [1]")), ToolInput(tag="in_max_count", input_type=Boolean(optional=True), prefix="--max-count", doc=InputDocumentation(doc="[INT]    max k-mer abundance, excluding [inf]")), ToolInput(tag="in_reference", input_type=Boolean(optional=True), prefix="--reference", doc=InputDocumentation(doc="[STR]    basename of reference sequence (for parsing VCF files) []")), ToolInput(tag="in_fwd_and_reverse", input_type=Boolean(optional=True), prefix="--fwd-and-reverse", doc=InputDocumentation(doc="process both forward and reverse complement sequences [off]")), ToolInput(tag="in_an_no_type", input_type=Boolean(optional=True), prefix="--anno-type", doc=InputDocumentation(doc="[STR]    target annotation representation: column / row [column]")), ToolInput(tag="in_annotator", input_type=Boolean(optional=True), prefix="--annotator", doc=InputDocumentation(doc="[STR]    annotator to update []")), ToolInput(tag="in_sparse", input_type=Boolean(optional=True), prefix="--sparse", doc=InputDocumentation(doc="use the row-major sparse matrix to annotate graph [off]")), ToolInput(tag="in_cache", input_type=Boolean(optional=True), prefix="--cache", doc=InputDocumentation(doc="number of columns in cache (for column representation only) [10]")), ToolInput(tag="in_disk_swap", input_type=Boolean(optional=True), prefix="--disk-swap", doc=InputDocumentation(doc="[STR]    directory to use for temporary files [off]")), ToolInput(tag="in_mem_cap_gb", input_type=Boolean(optional=True), prefix="--mem-cap-gb", doc=InputDocumentation(doc="[FLOAT] buffer size in GB (per column in construction) [1]")), ToolInput(tag="in_outfile_base", input_type=File(optional=True), prefix="--outfile-base", doc=InputDocumentation(doc="[STR] basename of output file (or directory, for --separately) []")), ToolInput(tag="in_separately", input_type=Boolean(optional=True), prefix="--separately", doc=InputDocumentation(doc="annotate each file independently and dump to the same directory [off]")), ToolInput(tag="in_sequentially", input_type=Boolean(optional=True), prefix="--sequentially", doc=InputDocumentation(doc="annotate files sequentially (each may use multiple threads) [off]")), ToolInput(tag="in_an_no_filename", input_type=Boolean(optional=True), prefix="--anno-filename", doc=InputDocumentation(doc="include filenames as annotation labels [off]")), ToolInput(tag="in_an_no_header", input_type=Boolean(optional=True), prefix="--anno-header", doc=InputDocumentation(doc="extract annotation labels from headers of sequences in files [off]")), ToolInput(tag="in_header_comment_delim", input_type=Boolean(optional=True), prefix="--header-comment-delim", doc=InputDocumentation(doc="[STR] delimiter for joining fasta header with comment [off]")), ToolInput(tag="in_header_delimiter", input_type=Boolean(optional=True), prefix="--header-delimiter", doc=InputDocumentation(doc="[STR]     delimiter for splitting annotation header into multiple labels [off]")), ToolInput(tag="in_an_no_label", input_type=Boolean(optional=True), prefix="--anno-label", doc=InputDocumentation(doc="[STR]           add label to annotation for all sequences from the files passed []")), ToolInput(tag="in_anchors", input_type=Boolean(optional=True), prefix="--anchors", doc=InputDocumentation(doc="[STR]              location of the anchor file (for row_diff) []")), ToolInput(tag="in_count_km_ers", input_type=Boolean(optional=True), prefix="--count-kmers", doc=InputDocumentation(doc="add k-mer counts to the annotation [off]")), ToolInput(tag="in_parallel", input_type=Boolean(optional=True), prefix="--parallel", doc=InputDocumentation(doc="[INT]     use multiple threads for computation [1]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="switch on verbose output [off]")), ToolInput(tag="in_i", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc="")), ToolInput(tag="in_file_one", input_type=Int(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outfile_base", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile_base", type_hint=File()), doc=OutputDocumentation(doc="[STR] basename of output file (or directory, for --separately) []"))], container="quay.io/biocontainers/metagraph:0.2.0--h74b8f77_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Metagraph_Dna_Annotate_V0_1_0().translate("wdl")

