from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, String, Int, Boolean

Secapr_Assemble_Reads_V0_1_0 = CommandToolBuilder(tool="secapr_assemble_reads", base_command=["secapr", "assemble_reads"], inputs=[ToolInput(tag="in_input", input_type=Directory(optional=True), prefix="--input", doc=InputDocumentation(doc="Call the folder that contains the trimmed reads,\norganized in a separate subfolder for each sample. The\nname of the subfolder has to start with the sample\nname, delimited with an underscore [_] (default output\nof secapr clean_reads function)")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="The output directory where results will be saved")), ToolInput(tag="in_assembler", input_type=String(optional=True), prefix="--assembler", doc=InputDocumentation(doc="The assembler to use (default = spades).")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="Set the kmer value (only available for Abyss and\nSpades). Provide single value for Abyss, or list of\nkmers for Spades, e.g. '--kmer 21,33,55'. Default for\nAbyss is 35, and for spades it is 21,33,55,77,99,127.\nNote that Spades only accepts uneven kmer values.")), ToolInput(tag="in_contig_length", input_type=Int(optional=True), prefix="--contig_length", doc=InputDocumentation(doc="Set the minimum contig length for the assembly.\nContigs that are shorter than this threshold will be\ndiscarded.")), ToolInput(tag="in_max_memory", input_type=Int(optional=True), prefix="--max_memory", doc=InputDocumentation(doc="Set the maximum memory to be used during assembly in\nGB (only available for Spades). This can be necessary\nwhen working with computing nodes with limited memory\nor to avoid over-allocation of computing resources on\nclusters which can in some cases cause your assembly\nto be stopped or interrupted.")), ToolInput(tag="in_single_reads", input_type=Boolean(optional=True), prefix="--single_reads", doc=InputDocumentation(doc="Use this flag if you additionally want to use single\nreads for the assembly")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="For parallel processing you can set the number of\ncores you want to run the assembly on.\n"))], outputs=[ToolOutput(tag="out_input", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_input", type_hint=File()), doc=OutputDocumentation(doc="Call the folder that contains the trimmed reads,\norganized in a separate subfolder for each sample. The\nname of the subfolder has to start with the sample\nname, delimited with an underscore [_] (default output\nof secapr clean_reads function)")), ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="The output directory where results will be saved"))], container="quay.io/biocontainers/secapr:2.1.1--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Secapr_Assemble_Reads_V0_1_0().translate("wdl")

