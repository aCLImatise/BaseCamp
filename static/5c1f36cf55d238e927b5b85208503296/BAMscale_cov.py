from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Directory

Bamscale_Cov_V0_1_0 = CommandToolBuilder(tool="BAMscale_cov", base_command=["BAMscale", "cov"], inputs=[ToolInput(tag="in_bed", input_type=File(optional=True), prefix="--bed", doc=InputDocumentation(doc="Input BED file")), ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="Input BAM file. This can be specified multiple times in case of multiple BAM files")), ToolInput(tag="in_lib_type", input_type=String(optional=True), prefix="--libtype", doc=InputDocumentation(doc="Sequencing type to be used. Can be: single, paired, and auto (default: autodetect)")), ToolInput(tag="in_frag", input_type=String(optional=True), prefix="--frag", doc=InputDocumentation(doc="Compute coverage using fragments instead of reads (default: no)")), ToolInput(tag="in_strand", input_type=String(optional=True), prefix="--strand", doc=InputDocumentation(doc="Reads need to have same orientation of peaks (default: unstranded)")), ToolInput(tag="in_r_strand", input_type=String(optional=True), prefix="--rstrand", doc=InputDocumentation(doc="Reads need to have reverse orientation of peaks (default: unstranded)")), ToolInput(tag="in_seq_cov", input_type=Int(optional=True), prefix="--seqcov", doc=InputDocumentation(doc="Compute sequencing coverage from BAM file quickly using the index (option '0'),\nor count number of reads by parsing entire BAM file (slower, but more accurate; set to '1' [default])")), ToolInput(tag="in_blacklist", input_type=File(optional=True), prefix="--blacklist", doc=InputDocumentation(doc="Input file with list of chromosomes to blacklist when computing coverage for normalization")), ToolInput(tag="in_bed_subtract", input_type=Int(optional=True), prefix="--bedsubtract", doc=InputDocumentation(doc="BED file with regions to subtract when computing coverage for normalization\nThese coordinates should not overlap so reads are not counted multiple times")), ToolInput(tag="in_mapq", input_type=Int(optional=True), prefix="--mapq", doc=InputDocumentation(doc="Minimum (at least) mapping quality (default: 0)")), ToolInput(tag="in_keep_dup", input_type=String(optional=True), prefix="--keepdup", doc=InputDocumentation(doc="Keep duplicated reads (default: no)")), ToolInput(tag="in_no_proper", input_type=String(optional=True), prefix="--noproper", doc=InputDocumentation(doc="Do not filter un-proper alignments (default: filter)")), ToolInput(tag="in_unmap_pair", input_type=String(optional=True), prefix="--unmappair", doc=InputDocumentation(doc="Do not remove reads with unmapped pairs")), ToolInput(tag="in_min_frag", input_type=Int(optional=True), prefix="--minfrag", doc=InputDocumentation(doc="Minimum fragment size for read pairs (default: 0)")), ToolInput(tag="in_max_frag", input_type=Int(optional=True), prefix="--maxfrag", doc=InputDocumentation(doc="Maximum fragment size for read pairs (default: 2000)")), ToolInput(tag="in_frag_filt", input_type=Int(optional=True), prefix="--fragfilt", doc=InputDocumentation(doc="Filter reads based on fragment size (default: no)")), ToolInput(tag="in_diff_chr", input_type=String(optional=True), prefix="--diffchr", doc=InputDocumentation(doc="Keep reads where read pair aligns to different chromosome (default: no)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory name (default: '.')")), ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Output prefix for file names (default: none)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="No. of threads to use (default: 1)"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory name (default: '.')")), ToolOutput(tag="out_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prefix", type_hint=File()), doc=OutputDocumentation(doc="Output prefix for file names (default: none)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bamscale_Cov_V0_1_0().translate("wdl", allow_empty_container=True)

