from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Ivar_Variants_V0_1_0 = CommandToolBuilder(tool="ivar_variants", base_command=["ivar", "variants"], inputs=[ToolInput(tag="in_minimum_quality_score", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="Minimum quality score threshold to count base (Default: 20)")), ToolInput(tag="in_minimum_frequency_threshold", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="Minimum frequency threshold(0 - 1) to call variants (Default: 0.03)")), ToolInput(tag="in_minimum_read_depth", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="Minimum read depth to call variants (Default: 0)")), ToolInput(tag="in_reference_file_used", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="Reference file used for alignment. This is used to translate the nucleotide sequences and identify intra host single nucleotide variants")), ToolInput(tag="in_gff_file_gff", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="A GFF file in the GFF3 format can be supplied to specify coordinates of open reading frames (ORFs). In absence of GFF file, amino acid translation will not be done.")), ToolInput(tag="in_required_prefix_output", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="(Required) Prefix for the output tsv variant file")), ToolInput(tag="in_reference", input_type=Boolean(optional=True), prefix="--reference", doc=InputDocumentation(doc="")), ToolInput(tag="in_var_7", input_type=Int(optional=True), prefix="-Q", doc=InputDocumentation(doc="")), ToolInput(tag="in_b", input_type=Boolean(optional=True), prefix="-B", doc=InputDocumentation(doc="")), ToolInput(tag="in_d", input_type=Int(optional=True), prefix="-d", doc=InputDocumentation(doc="")), ToolInput(tag="in_a", input_type=Boolean(optional=True), prefix="-A", doc=InputDocumentation(doc="")), ToolInput(tag="in_aa", input_type=Boolean(optional=True), prefix="-aa", doc=InputDocumentation(doc="")), ToolInput(tag="in_sam_tools", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_m_pile_up", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_required_prefix_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_required_prefix_output", type_hint=File()), doc=OutputDocumentation(doc="(Required) Prefix for the output tsv variant file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ivar_Variants_V0_1_0().translate("wdl", allow_empty_container=True)

