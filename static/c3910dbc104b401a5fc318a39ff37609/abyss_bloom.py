from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, String, File

Abyss_Bloom_V0_1_0 = CommandToolBuilder(tool="abyss_bloom", base_command=["abyss-bloom"], inputs=[ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="the size of a k-mer [<=128]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_bloom_size", input_type=Int(optional=True), prefix="--bloom-size", doc=InputDocumentation(doc="size of bloom filter [500M]")), ToolInput(tag="in_buffer_size", input_type=Int(optional=True), prefix="--buffer-size", doc=InputDocumentation(doc="size of I/O buffer for each thread, in bytes [100000]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="use N parallel threads [1]")), ToolInput(tag="in_hash_seed", input_type=Int(optional=True), prefix="--hash-seed", doc=InputDocumentation(doc="seed for hash function (only works with\n`-t konnector') [0]")), ToolInput(tag="in_num_hashes", input_type=Int(optional=True), prefix="--num-hashes", doc=InputDocumentation(doc="number of hash functions (only works with\n`-t rolling-hash') [1]")), ToolInput(tag="in_levels", input_type=String(optional=True), prefix="--levels", doc=InputDocumentation(doc="build a cascading bloom filter with N levels\nand output the last level")), ToolInput(tag="in_in_it_level", input_type=Boolean(optional=True), prefix="--init-level", doc=InputDocumentation(doc="='N=FILE'  initialize level N of cascading bloom filter\nfrom FILE")), ToolInput(tag="in_chastity", input_type=Boolean(optional=True), prefix="--chastity", doc=InputDocumentation(doc="discard unchaste reads [default]")), ToolInput(tag="in_no_chastity", input_type=Boolean(optional=True), prefix="--no-chastity", doc=InputDocumentation(doc="do not discard unchaste reads")), ToolInput(tag="in_trim_masked", input_type=Boolean(optional=True), prefix="--trim-masked", doc=InputDocumentation(doc="trim masked bases from the ends of reads")), ToolInput(tag="in_no_trim_masked", input_type=Boolean(optional=True), prefix="--no-trim-masked", doc=InputDocumentation(doc="do not trim masked bases from the ends\nof reads [default]")), ToolInput(tag="in_num_locks", input_type=Int(optional=True), prefix="--num-locks", doc=InputDocumentation(doc="number of write locks on bloom filter [1000]")), ToolInput(tag="in_trim_quality", input_type=String(optional=True), prefix="--trim-quality", doc=InputDocumentation(doc="trim bases from the ends of reads whose\nquality is less than the threshold")), ToolInput(tag="in_bloom_type", input_type=String(optional=True), prefix="--bloom-type", doc=InputDocumentation(doc="'konnector', 'rolling-hash', or 'counting' [konnector]")), ToolInput(tag="in_standard_quality", input_type=Boolean(optional=True), prefix="--standard-quality", doc=InputDocumentation(doc="zero quality is `!' (33)\ndefault for FASTQ and SAM files")), ToolInput(tag="in_illumina_quality", input_type=Boolean(optional=True), prefix="--illumina-quality", doc=InputDocumentation(doc="zero quality is `@' (64)\ndefault for qseq and export files")), ToolInput(tag="in_window", input_type=String(optional=True), prefix="--window", doc=InputDocumentation(doc="/N           build a bloom filter for subwindow M of N")), ToolInput(tag="in_method", input_type=Boolean(optional=True), prefix="--method", doc=InputDocumentation(doc="=`String'      choose distance calculation method\n[`jaccard'(default), `forbes', `czekanowski']")), ToolInput(tag="in_depth", input_type=String(optional=True), prefix="--depth", doc=InputDocumentation(doc="depth of neighbouring from --root [k]")), ToolInput(tag="in_root", input_type=String(optional=True), prefix="--root", doc=InputDocumentation(doc="root k-mer from graph traversal [required]")), ToolInput(tag="in_root_fast_a", input_type=File(optional=True), prefix="--root-fasta", doc=InputDocumentation(doc="get root k-mers from FASTA file")), ToolInput(tag="in_fast_a_attr", input_type=File(optional=True), prefix="--fasta-attr", doc=InputDocumentation(doc=":FILE, assign a node attribute (e.g. 'color=blue')")), ToolInput(tag="in_node_attr", input_type=File(optional=True), prefix="--node-attr", doc=InputDocumentation(doc=":FILE   to k-mers in the given FASTA")), ToolInput(tag="in_bloom_attr", input_type=File(optional=True), prefix="--bloom-attr", doc=InputDocumentation(doc=":FILE  assign a node attribute (e.g. 'color=blue')\nto k-mers in the given Bloom filter")), ToolInput(tag="in_inverse", input_type=Boolean(optional=True), prefix="--inverse", doc=InputDocumentation(doc="get k-mers that are *NOT* in the bloom filter")), ToolInput(tag="in_bed", input_type=Boolean(optional=True), prefix="--bed", doc=InputDocumentation(doc="output k-mers in BED format")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="output k-mers in FASTA format [default]")), ToolInput(tag="in_raw", input_type=Boolean(optional=True), prefix="--raw", doc=InputDocumentation(doc="output k-mers in raw format (one per line)"))], outputs=[], container="quay.io/biocontainers/abyss:2.3.0--ha4ec83a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Abyss_Bloom_V0_1_0().translate("wdl")

