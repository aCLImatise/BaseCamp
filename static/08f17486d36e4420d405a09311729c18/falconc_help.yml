!Command
command:
- falconc
- help
positional:
- !Positional
  optional: false
  position: 0
  name: mapping.
  description: 'Options:'
- !Positional
  optional: false
  position: 1
  name: augmented
  description: 'raptor-db-filter [optional-params] '
- !Positional
  optional: false
  position: 0
  name: RaptorDB.
  description: -u, --use-umc          bool    REQUIRED  Use Unique Molecular Coverage
- !Positional
  optional: false
  position: 0
  name: megabytes.
  description: -a=, --alarms-fn=      string  ""        Optional JSON file to write
    SMRT
- !Positional
  optional: false
  position: 0
  name: output.
  description: 'Options:'
- !Positional
  optional: false
  position: 1
  name: sequences
  description: -o=, --output-fn=  string  REQUIRED  fasta (or fastq) file output
- !Positional
  optional: false
  position: 0
  name: read
  description: -k=, --kmersize=    int     21        Kmer size
- !Positional
  optional: false
  position: 0
  name: filter
  description: -m=, --min-len=          int     6000      Minimum read length, reads
- !Positional
  optional: false
  position: 0
  name: discarded
  description: --min-cov=               int     2         Minimum number of overlaps
    on
- !Positional
  optional: false
  position: 0
  name: locally
  description: --in-fn=                 string  REQUIRED  M4 overlaps file
- !Positional
  optional: false
  position: 1
  name: file
  description: -o=, --out-fn=           string  REQUIRED  Final m4 overlaps file
- !Positional
  optional: false
  position: 0
  name: help
  description: '--help-syntax                                     advanced:'
- !Positional
  optional: false
  position: 0
  name: file
  description: -o=, --out-fn=           string  REQUIRED         Final m4 overlap
    file
- !Positional
  optional: false
  position: 0
  name: filter
  description: -m=, --min-len=          int     6000      Minimum read length, reads
- !Positional
  optional: false
  position: 0
  name: discarded
  description: --min-cov=               int     2         Minimum number of overlaps
    on
- !Positional
  optional: false
  position: 0
  name: locally
  description: -f=, --filter-log-fn=    string  REQUIRED  Write read filter stats
    to this
- !Positional
  optional: false
  position: 1
  name: file
  description: --outputFn=              string  REQUIRED  Final m4 overlap file
- !Positional
  optional: false
  position: 0
  name: assembly.
  description: 'stats-gff [required&optional-params] '
- !Positional
  optional: false
  position: 0
  name: pbreports.
  description: 'rr-hctg-track1 [optional-params] '
- !Positional
  optional: false
  position: 0
  name: cligen-erated
  description: help
- !Positional
  optional: false
  position: 1
  name: phased_read_file
  description: -r=, --read-to-contig-map=  string  "./4-quiver/read_maps/read_to_contig_map"                       setread_to_cont
- !Positional
  optional: false
  position: 2
  name: ig_map
  description: --rawread-ids=              string  "./2-asm-falcon/read_maps/dump_rawread_ids/rawread_ids"         set
    rawread_ids
- !Positional
  optional: false
  position: 0
  name: cligen-erated
  description: help
- !Positional
  optional: false
  position: 1
  name: ig_map
  description: -p=, --partials-fn=         string  "./4-quiver/track-reads/partials.json"       set
    partials_fn
- !Positional
  optional: false
  position: 2
  name: phased_read_file
  description: --rawread-ids=              string  ""                                           set
    rawread_ids
- !Positional
  optional: false
  position: 0
  name: cligen-erated
  description: help
- !Positional
  optional: false
  position: 1
  name: ctg-name
  description: -o=, --out-ids-fn=            string  "all_shard_ids"              If
    given, this
- !Positional
  optional: false
  position: 0
  name: theshard-prefix
  description: .block_id files.
- !Positional
  optional: false
  position: 0
  name: help
  description: '--help-syntax                                  advanced:'
- !Positional
  optional: false
  position: 0
  name: DEPRECATED
  description: 'Options:'
- !Positional
  optional: false
  position: 1
  name: jobs
  description: -s=, --shard-prefix=  string  "shard_id"  The output. Shard files are
named:
- !Flag
  optional: true
  synonyms:
  - --help-syntax
  description: 'advanced: prepend,plurals,..'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -d
  description: =, --int-dummy=     int     42       set int_dummy
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  description: =, --string-dummy=  string  "hello"  set string_dummy
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -f
  description: =, --float_req=  float  REQUIRED  special help message
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -b
  description: =, --bams-fofn=             string  REQUIRED  set bams_fofn
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -a
  description: =, --all-subread-names-fn=  string  ""        set all_subread_names_fn
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -m
  description: =, --min-len=               int     -1        set min_len
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --min-frac
  description: =                   float   0.7       set min_frac
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  description: "=, --output-fn=  string  REQUIRED  Bam or Sam filename (based on its\n\
    extension)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -i
  description: "=, --input-fn=   string  REQUIRED  Bam or Sam filename (based on its\n\
    extension), or '-'"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --output-fn
  description: "=             string  REQUIRED  Bam or Sam filename (based on\nits\
    \ extension)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -e
  description: "=, --end-margin=       int     25        Maximum margin on contig\
    \ ends,\nin basepairs"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -F
  description: "=, --Flags-exclude=    string  \"0\"       Integer (0x ok) of flags\
    \ to\nexclude, independent of other\nfilters"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -v
  - --verbose
  description: "bool    false     Show each skipped alignment,\nand a count."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -t
  - --tags-enrich
  description: "bool    false     Also enrich the tags. (See\nbam-tags-enrich.)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  description: =, --phase-fn=  string  REQUIRED  read2ctg.txt file
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -r
  description: =, --rdb-fn=       string  "rawreads.db"  set rdb_fn
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -g
  description: =, --genome-size=  int64   4600000        set genome_size
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -c
  description: =, --coverage=     float   30.0           set coverage
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -f
  - --fail-low-cov
  description: "bool    false          Exit non-zero if the input\ncoverage was insufficient\
    \ to\nsatisfy the requirement."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --random-seed
  description: =         int64   REQUIRED  Seed for random generation.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -w
  description: "=, --wl-fn=      string  \"\"        white list of sequences to rotate,\n\
    one per line, no spaces, no trailing\nspaces"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --window
  description: =          int     500       window size to caculate gc-skew
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  - --print
  description: "bool    false     print skew data to files\n('SEQ.gc_skew.txt'), one\
    \ per sequence"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --maxCov
  description: =          int     200       set maxCov
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --minCov
  description: =          int     2         set minCov
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --minLen
  description: =          int     6000      set minLen
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --minIdt
  description: =          float   95.0      set minIdt
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -g
  - --gapFilt
  description: bool    false     set gapFilt
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --minDepth
  description: =        int     2         set minDepth
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --minOverhang
  description: =          int     0         set minOverhang
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --blacklistIn
  description: =          string  REQUIRED  set blacklistIn
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --idt-stage2
  description: =            float   90.0      Stage two percent identify
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max-cov
  description: "=               int     200       Maximum number of overlaps on\n\
    either side of a read"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max-diff
  description: "=              int     100       Reads are skipped is abs(5p-3p)\n\
    overlap counts > maxDiff"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --min-overhang
  description: "=          int     0         Minimum amount of overhang\nbases in\
    \ an overlap to keep the\noverlap"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --min-depth
  description: "=             int     2         Depths lower than minDepth are\nconsidered\
    \ gaps"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -g
  - --gap-filt
  description: "bool    false     Run depth filter, takes a\nlittle more time"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -k
  - --keepIntermediates
  description: bool    false     set keepIntermediates
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -n
  description: =, --n-proc=           int     24        Number of processes to run
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -l
  description: "=, --las-json-fn=      string  REQUIRED         List of las files\
    \ from\nfalcon, e.g../1-preads_\novl/las-merge-combine/la\ns_fofn.json"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --min-cov
  description: "=               int     2                Minimum number of\noverlaps\
    \ on either side\nof a read"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debug-log-fn
  description: =          string  "LA4Falcon.log"  Write stderr to this
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --min-len
  description: "=      int     400       Minimum read length; reads shorter than\n\
    minLen will be discarded"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --min-idt-pct
  description: "=  float   96.0      Minimum overlap identity; worse overlaps\nwill\
    \ be discarded"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -n
  - --dry-run
  description: bool    false                     set dry_run
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -t
  - --test
  description: bool    false                                                           set
    test
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  - --stream
  description: bool    false                                                           set
    stream
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -d
  - --debug
  description: bool    false                                                           set
    debug
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --silent
  description: bool    false                                                           set
    silent
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --phased-read-file
  description: =         string  ""                                           set
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --flip-rc
  description: "bool    false     reverse complement (RC) the sequence if\nalignment\
    \ is in RC"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --out-fmt
  description: "=      string  \"json\"    Output format of the config file. (json\n\
    or bash)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -n
  - --no-sort
  description: bool    false     set no_sort
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --mb-per-block
  description: "=               int     REQUIRED                     Try to target\n\
    megabases total\nin all contigs\nin any block"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --blacklist-fn
  description: "=               string  \"\"                           Specifies a\
    \ file\nwith a list of\ncontigs to skip\nfor polishing."
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: print this cligen-erated help
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "This is a multiple-dispatch command.  Top-level --help/--help-syntax\n\
  is also available.  Usage is like:\n    falconc {SUBCMD} [subcommand-opts & args]\n\
  where subcommand syntaxes are as follows:\n\n  version [optional-params] \n  Options:\n\
  \      -h, --help         print this cligen-erated help\n      --help-syntax   \
  \   advanced: prepend,plurals,..\n\n  dataset [optional-params] [extras: string...]\n\
  \  Options:\n      -h, --help         print this cligen-erated help\n      --help-syntax\
  \      advanced: prepend,plurals,..\n\n  kmers [optional-params] \n  Options:\n\
  \      -h, --help                             print this cligen-erated help\n  \
  \    --help-syntax                          advanced: prepend,plurals,..\n     \
  \ -d=, --int-dummy=     int     42       set int_dummy\n      -s=, --string-dummy=\
  \  string  \"hello\"  set string_dummy\n\n  utils [required&optional-params] [extras:\
  \ string...]\n  Options:\n      -h, --help                          print this cligen-erated\
  \ help\n      --help-syntax                       advanced: prepend,plurals,..\n\
  \      -f=, --float_req=  float  REQUIRED  special help message\n\n  bam-filter-ipa\
  \ [required&optional-params] \n    Print subreads which have decent alignments in\
  \ any of the bam inputs.\n  Options:\n      -h, --help                         \
  \             print this cligen-erated\n                                       \
  \               help\n      --help-syntax                                   advanced:\n\
  \                                                      prepend,plurals,..\n    \
  \  -b=, --bams-fofn=             string  REQUIRED  set bams_fofn\n      -a=, --all-subread-names-fn=\
  \  string  \"\"        set all_subread_names_fn\n      -m=, --min-len=         \
  \      int     -1        set min_len\n      --min-frac=                   float\
  \   0.7       set min_frac\n\n  align-filter [required&optional-params] \n    alias\
  \ for bam-filter-ipa\n  Options:\n      -h, --help                             \
  \         print this cligen-erated\n                                           \
  \           help\n      --help-syntax                                   advanced:\n\
  \                                                      prepend,plurals,..\n    \
  \  -b=, --bams-fofn=             string  REQUIRED  set bams_fofn\n      -a=, --all-subread-names-fn=\
  \  string  \"\"        set all_subread_names_fn\n      -m=, --min-len=         \
  \      int     -1        set min_len\n      --min-frac=                   float\
  \   0.7       set min_frac\n\n  bam-tags-enrich [required&optional-params] \n  \
  \  Add XB/XE/XP/XR/XQ: beg/end/%idt/aln-ref-len/qry-len\n  Options:\n      -h, --help\
  \                           print this cligen-erated help\n      --help-syntax \
  \                       advanced: prepend,plurals,..\n      -o=, --output-fn=  string\
  \  REQUIRED  Bam or Sam filename (based on its\n                               \
  \            extension)\n      -i=, --input-fn=   string  REQUIRED  Bam or Sam filename\
  \ (based on its\n                                           extension), or '-'\n\
  \n  bam-filter-clipped [required&optional-params] \n    Filter alignments with significant\
  \ clipping. To skip an alignment, both\n    max_clipping and end_margin must be\
  \ exceeded on at least 1 end.\n  Options:\n      -h, --help                    \
  \             print this cligen-erated help\n      --help-syntax               \
  \               advanced: prepend,plurals,..\n      -o=, --output-count-fn=  string\
  \  REQUIRED  file reporting the number of\n                                    \
  \             reads post filtering\n      --output-fn=             string  REQUIRED\
  \  Bam or Sam filename (based on\n                                             \
  \    its extension)\n      -i=, --input-fn=         string  REQUIRED  Bam or Sam\
  \ filename (based on\n                                                 its extension),\
  \ or '-'\n      -m=, --max-clipping=     int     100       Maximum clipping on left\
  \ or\n                                                 right of query, in basepairs\n\
  \      -e=, --end-margin=       int     25        Maximum margin on contig ends,\n\
  \                                                 in basepairs\n      -F=, --Flags-exclude=\
  \    string  \"0\"       Integer (0x ok) of flags to\n                         \
  \                        exclude, independent of other\n                       \
  \                          filters\n      -v, --verbose            bool    false\
  \     Show each skipped alignment,\n                                           \
  \      and a count.\n      -t, --tags-enrich        bool    false     Also enrich\
  \ the tags. (See\n                                                 bam-tags-enrich.)\n\
  \n  falcon-read2ctg-augment [required&optional-params] \n    Assigns the unphased\
  \ reads to haplotigs or primary contigs based on pbmm2\n    mapping.\n  Options:\n\
  \      -h, --help                          print this cligen-erated help\n     \
  \ --help-syntax                       advanced: prepend,plurals,..\n      -p=, --phase-fn=\
  \  string  REQUIRED  read2ctg.txt file\n      -b=, --bam-fn=    string  REQUIRED\
  \  bam/sam file of unphased reads mapped\n      -o=, --out-fn=    string  REQUIRED\
  \  mostly same as read2ctg.txt, but\n                                          augmented\n\
  \n  raptor-db-filter [optional-params] \n    Read/write raptor-db to/from stdin/stdout.\
  \ Exclude zmws in blacklist.\n  Options:\n      -h, --help                     \
  \   print this cligen-erated help\n      --help-syntax                     advanced:\
  \ prepend,plurals,..\n      -b=, --blacklist-fn=  string  \"\"  set blacklist_fn\n\
  \n  raptor-db-calc-length-cutoff [optional-params] \n    Perform a linear pass on\
  \ an overlap file, and determine rough clipping\n    coordinates to 'correct' reads.\
  \ Write integer to stdout.\n  Options:\n      -h, --help                       \
  \           print this cligen-erated help\n      --help-syntax                 \
  \              advanced: prepend,plurals,..\n      -r=, --rdb-fn=       string \
  \ \"rawreads.db\"  set rdb_fn\n      -g=, --genome-size=  int64   4600000      \
  \  set genome_size\n      -c=, --coverage=     float   30.0           set coverage\n\
  \      -f, --fail-low-cov   bool    false          Exit non-zero if the input\n\
  \                                                  coverage was insufficient to\n\
  \                                                  satisfy the requirement.\n  \
  \    -a=, --alarms-fn=    string  \"\"             Optional JSON file to write\n\
  \                                                  SMRT Link alarms. (typically\n\
  \                                                  used w/ -f)\n\n  raptor-db-subsample\
  \ [required&optional-params] \n  Options:\n      -h, --help                    \
  \           print this cligen-erated help\n      --help-syntax                 \
  \           advanced: prepend,plurals,..\n      -r=, --rdb_fn=         string  REQUIRED\
  \  Path to the RaptorDB file.\n      -g=, --genome_size=    int64   REQUIRED  Approximate\
  \ genome size.\n      -c=, --coverage=       float   REQUIRED  Coverage to select\
  \ from the input\n                                               RaptorDB.\n   \
  \   -u, --use-umc          bool    REQUIRED  Use Unique Molecular Coverage\n   \
  \                                            when subsampling. If a subread is\n\
  \                                               picked, then all subreads from\n\
  \                                               that ZMW will be output as well.\n\
  \      --random-seed=         int64   REQUIRED  Seed for random generation.\n  \
  \    -b=, --block-size-mb=  float   REQUIRED  Block size of the output DB, in\n\
  \                                               megabytes.\n      -a=, --alarms-fn=\
  \      string  \"\"        Optional JSON file to write SMRT\n                  \
  \                             Link alarms. (typically used w/\n                \
  \                               -f)\n\n  circ-orient [required&optional-params]\
  \ \n    reorients circular sequences based on gc-skew distribution and writes to\n\
  \    output.\n  Options:\n      -h, --help                           print this\
  \ cligen-erated help\n      --help-syntax                        advanced: prepend,plurals,..\n\
  \      -i=, --input-fn=   string  REQUIRED  fasta (or fastq) file of circular\n\
  \                                           sequences\n      -o=, --output-fn= \
  \ string  REQUIRED  fasta (or fastq) file output\n      -w=, --wl-fn=      string\
  \  \"\"        white list of sequences to rotate,\n                            \
  \               one per line, no spaces, no trailing\n                         \
  \                  spaces\n      --window=          int     500       window size\
  \ to caculate gc-skew\n      -s=, --step=       int     200       window step\n\
  \      -p, --print        bool    false     print skew data to files\n         \
  \                                  ('SEQ.gc_skew.txt'), one per sequence\n\n  circ-randomize\
  \ [required&optional-params] \n    randomly rotates left rotates the sequence and\
  \ writes to the output file.\n  Options:\n      -h, --help                     \
  \   print this cligen-erated help\n      --help-syntax                     advanced:\
  \ prepend,plurals,..\n      -i=, --input=   string  REQUIRED  fasta file of circular\
  \ sequences\n      -o=, --output=  string  REQUIRED  fasta file output\n      -s=,\
  \ --seed=    int64   0         set seed, if non-zero\n\n  phasr [required&optional-params]\
  \ \n    Phase PacBio CCS/HIFI reads.\n  Options:\n      -h, --help             \
  \               print this cligen-erated help\n      --help-syntax             \
  \            advanced: prepend,plurals,..\n      -a=, --aln-fn=      string  REQUIRED\
  \  BAM alignment, sorted on\n                                            'coordinate'\n\
  \      -r=, --ref-fn=      string  REQUIRED  FASTA reference\n      -o=, --out-fn=\
  \      string  REQUIRED  Output file name\n      -i=, --iterations=  int     1000\
  \      Number of phasing iterations per\n                                      \
  \      read\n      -k=, --kmersize=    int     21        Kmer size\n      -d=, --delta=\
  \       float   0.75      Frequency cut\n\n  m4filt-merge-blacklist [required&optional-params]\
  \ \n  Options:\n      -h, --help                           print this cligen-erated\
  \ help\n      --help-syntax                        advanced: prepend,plurals,..\n\
  \      -b=, --blistFofn=  string  REQUIRED  set blistFofn\n      -o=, --outFn= \
  \     string  REQUIRED  set outFn\n\n  m4filt-stage1 [required&optional-params]\
  \ \n  Options:\n      -h, --help                           print this cligen-erated\
  \ help\n      --help-syntax                        advanced: prepend,plurals,..\n\
  \      -m=, --maxDiff=    int     100       set maxDiff\n      --maxCov=       \
  \   int     200       set maxCov\n      --minCov=          int     2         set\
  \ minCov\n      --minLen=          int     6000      set minLen\n      --minIdt=\
  \          float   95.0      set minIdt\n      -g, --gapFilt      bool    false\
  \     set gapFilt\n      --minDepth=        int     2         set minDepth\n   \
  \   -b=, --blacklist=  string  REQUIRED  set blacklist\n\n  m4filt-stage2 [required&optional-params]\
  \ \n  Options:\n      -h, --help                                print this cligen-erated\
  \ help\n      --help-syntax                             advanced: prepend,plurals,..\n\
  \      -m=, --minIdt=          float   90.0      set minIdt\n      -b=, --bestN=\
  \           int     10        set bestN\n      --minOverhang=          int     0\
  \         set minOverhang\n      --blacklistIn=          string  REQUIRED  set blacklistIn\n\
  \      -f=, --filteredOutput=  string  REQUIRED  set filteredOutput\n\n  m4filt-dump-blacklist\
  \ [required&optional-params] \n  Options:\n      -h, --help                    \
  \       print this cligen-erated help\n      --help-syntax                     \
  \   advanced: prepend,plurals,..\n      -b=, --blacklist=  string  REQUIRED  set\
  \ blacklist\n\n  m4filt [required&optional-params] \n    Run the multi-stage m4\
  \ overlap filter (for HiFi Asm). Take only one m4 file,\n    inFn. If in+'.idx'\
  \ exists, that is the index. In stage one, reads that\n    trigger a filter are\
  \ marked including containment, gaps in coverage along\n    the A-read, and repeat\
  \ reads. In stage two the filters are applied and the\n    N-best overlaps are kept\
  \ for the 5prime and 3prime of each read.\n  Options:\n      -h, --help        \
  \                         print this cligen-erated help\n      --help-syntax   \
  \                           advanced: prepend,plurals,..\n      -i=, --idt-stage1=\
  \       float   90.0      Stage one percent identity\n                         \
  \                        filter, formatted as\n                                \
  \                 percentage, overlaps < %idt are\n                            \
  \                     skipped\n      --idt-stage2=            float   90.0     \
  \ Stage two percent identify\n                                                 filter\n\
  \      -m=, --min-len=          int     6000      Minimum read length, reads\n \
  \                                                shorter than minLen will be\n \
  \                                                discarded\n      --min-cov=   \
  \            int     2         Minimum number of overlaps on\n                 \
  \                                either side of a read\n      --max-cov=       \
  \        int     200       Maximum number of overlaps on\n                     \
  \                            either side of a read\n      --max-diff=          \
  \    int     100       Reads are skipped is abs(5p-3p)\n                       \
  \                          overlap counts > maxDiff\n      -b=, --bestn=       \
  \     int     10        Keep N best overlaps at 5prime\n                       \
  \                          AND 3prime of a read\n      --min-overhang=         \
  \ int     0         Minimum amount of overhang\n                               \
  \                  bases in an overlap to keep the\n                           \
  \                      overlap\n      --min-depth=             int     2       \
  \  Depths lower than minDepth are\n                                            \
  \     considered gaps\n      -g, --gap-filt           bool    false     Run depth\
  \ filter, takes a\n                                                 little more\
  \ time\n      -k, --keepIntermediates  bool    false     set keepIntermediates\n\
  \      -n=, --n-proc=           int     24        Number of processes to run\n \
  \                                                locally\n      --in-fn=       \
  \          string  REQUIRED  M4 overlaps file\n      -f=, --filter-log-fn=    string\
  \  REQUIRED  Write read filter stats to this\n                                 \
  \                file\n      -o=, --out-fn=           string  REQUIRED  Final m4\
  \ overlaps file\n\n  m4filt-falconRunner [required&optional-params] \n    Runs the\
  \ multi-stage m4 overlap filter for falcon. In stage one, reads that\n    trigger\
  \ a filter are marked including containment, gaps in coverage along\n    the A-read,\
  \ and repeat reads. In stage two the filters are applied and the\n    N-best overlaps\
  \ are kept for the 5prime and 3prime of each read.\n  Options:\n      -h, --help\
  \                                        print this cligen-erated\n            \
  \                                            help\n      --help-syntax         \
  \                            advanced:\n                                       \
  \                 prepend,plurals,..\n      -d=, --db=               string  REQUIRED\
  \         set db\n      -l=, --las-json-fn=      string  REQUIRED         List of\
  \ las files from\n                                                        falcon,\
  \ e.g../1-preads_\n                                                        ovl/las-merge-combine/la\n\
  \                                                        s_fofn.json\n      -i=,\
  \ --idt-stage1=       float   90.0             Stage one percent\n             \
  \                                           identity filter,\n                 \
  \                                       formatted as percentage,\n             \
  \                                           overlaps < %idt are\n              \
  \                                          skipped\n      --idt-stage2=        \
  \    float   90.0             Stage two percent\n                              \
  \                          identify filter\n      -m=, --min-len=          int \
  \    6000             Minimum read length,\n                                   \
  \                     reads shorter than\n                                     \
  \                   minLen will be discarded\n      --min-cov=               int\
  \     2                Minimum number of\n                                     \
  \                   overlaps on either side\n                                  \
  \                      of a read\n      --max-cov=               int     200   \
  \           Maximum number of\n                                                \
  \        overlaps on either side\n                                             \
  \           of a read\n      --max-diff=              int     100              Reads\
  \ are skipped is\n                                                        abs(5p-3p)\
  \ overlap\n                                                        counts > maxDiff\n\
  \      -b=, --bestn=            int     10               Keep N best overlaps at\n\
  \                                                        5prime AND 3prime of a\n\
  \                                                        read\n      --min-depth=\
  \             int     2                Depths lower than\n                     \
  \                                   minDepth are considered\n                  \
  \                                      gaps\n      --minOverhang=           int\
  \     0                set minOverhang\n      -g, --gap-filt           bool    false\
  \            Run depth filter, takes\n                                         \
  \               a little more time\n      -k, --keepIntermediates  bool    false\
  \            set keepIntermediates\n      -n=, --n-proc=           int     24  \
  \             Number of processes to\n                                         \
  \               run locally\n      -f=, --filter-log-fn=    string  REQUIRED   \
  \      Write read filter stats\n                                               \
  \         to this file\n      --debug-log-fn=          string  \"LA4Falcon.log\"\
  \  Write stderr to this\n                                                      \
  \  file\n      -o=, --out-fn=           string  REQUIRED         Final m4 overlap\
  \ file\n\n  m4filt-ipaRunner [required&optional-params] \n    Runs the multi-stage\
  \ m4 overlap filter for IPA. In stage one, reads that\n    trigger a filter are\
  \ marked including containment, gaps in coverage along\n    the A-read, and repeat\
  \ reads. In stage two the filters are applied and the\n    N-best overlaps are kept\
  \ for the 5prime and 3prime of each read.\n  Options:\n      -h, --help        \
  \                         print this cligen-erated help\n      --help-syntax   \
  \                           advanced: prepend,plurals,..\n      -o=, --ovls-fofn-fn=\
  \     string  REQUIRED  List of m4 files from\n                                \
  \                 ipa/raptor\n      -i=, --idt-stage1=       float   90.0      Stage\
  \ one percent identity\n                                                 filter,\
  \ formatted as\n                                                 percentage, overlaps\
  \ < %idt are\n                                                 skipped\n      --idt-stage2=\
  \            float   90.0      Stage two percent identify\n                    \
  \                             filter\n      -m=, --min-len=          int     6000\
  \      Minimum read length, reads\n                                            \
  \     shorter than minLen will be\n                                            \
  \     discarded\n      --min-cov=               int     2         Minimum number\
  \ of overlaps on\n                                                 either side of\
  \ a read\n      --max-cov=               int     200       Maximum number of overlaps\
  \ on\n                                                 either side of a read\n \
  \     --max-diff=              int     100       Reads are skipped is abs(5p-3p)\n\
  \                                                 overlap counts > maxDiff\n   \
  \   -b=, --bestn=            int     10        Keep N best overlaps at 5prime\n\
  \                                                 AND 3prime of a read\n      --minOverhang=\
  \           int     0         set minOverhang\n      --min-depth=             int\
  \     2         Depths lower than minDepth are\n                               \
  \                  considered gaps\n      -g, --gap-filt           bool    false\
  \     Run depth filter, takes a\n                                              \
  \   little more time\n      -k, --keepIntermediates  bool    false     set keepIntermediates\n\
  \      -n=, --n-proc=           int     24        Number of processes to run\n \
  \                                                locally\n      -f=, --filter-log-fn=\
  \    string  REQUIRED  Write read filter stats to this\n                       \
  \                          file\n      --outputFn=              string  REQUIRED\
  \  Final m4 overlap file\n\n  m4filt-contained [required&optional-params] \n   \
  \ Parse .m4 file.\n    Write only the overlaps which pass the filters.\n    (no\
  \ overlaps involving contained reads;\n     no overlaps involving short reads;\n\
  \     no overlaps with low identity)\n  Options:\n      -h, --help             \
  \           print this cligen-erated help\n      --help-syntax                 \
  \    advanced: prepend,plurals,..\n      -i=, --in-fn=   string  REQUIRED  Input\
  \ m4 overlap file\n      -o=, --out-fn=  string  REQUIRED  Output m4 overlap file\n\
  \      -n=, --n-proc=  int     24        Number of processes to run locally\n  \
  \                                      (ignored for now)\n      --min-len=     \
  \ int     400       Minimum read length; reads shorter than\n                  \
  \                      minLen will be discarded\n      --min-idt-pct=  float   96.0\
  \      Minimum overlap identity; worse overlaps\n                              \
  \          will be discarded\n\n  m4filt-idx [required&optional-params] \n    Given\
  \ foo.m4, create index file foo.m4.idx (Or just use it if it exists.)\n    Format\
  \ is \"0000 count start len\", where count is the number of overlaps in\n    the\
  \ pile. (First field is dummy, instead of Aread name, for efficiency.)\n    Return\
  \ the sum of all pileups, which should exactly match filesize.\n  Options:\n   \
  \   -h, --help                       print this cligen-erated help\n      --help-syntax\
  \                    advanced: prepend,plurals,..\n      -i=, --in-fn=  string \
  \ REQUIRED  Path to .m4 file. Index filename will\n                            \
  \           have '.idx' appended.\n\n  ovl-cov-stats [required&optional-params]\
  \ \n  Options:\n      -h, --help                       print this cligen-erated\
  \ help\n      --help-syntax                    advanced: prepend,plurals,..\n  \
  \    -i=, --in-fn=  string  REQUIRED  An overlap file in M4 format, or a FOFN\n\
  \                                       of M4 files.\n\n  pbcromwell-rm-las [optional-params]\
  \ \n    Remove all .las files except final stage of merge. (Unzip is still\n   \
  \ possible.) Filepaths come from the provided command as a subprocess, or from\n\
  \    stdin if command==\"-\", (Someday, we will add a flag to delete the final\n\
  \    stage too, optionally.)\n  Options:\n      -h, --help                     \
  \                    print this\n                                              \
  \           cligen-erated help\n      --help-syntax                            \
  \          advanced:\n                                                         prepend,plurals,..\n\
  \      -c=, --command=  string  \"find . -name \\'*.las\\'\"  set command\n    \
  \  -v=, --verbose=  int     1                         set verbose\n      -n, --dry-run\
  \    bool    false                     set dry_run\n\n  pbreports-circ [required&optional-params]\
  \ \n    Given FASTA of all ctgs and text-list of circular ctgs, print a report\n\
  \    (pbreports format).\n  Options:\n      -h, --help                         \
  \ print this cligen-erated help\n      --help-syntax                       advanced:\
  \ prepend,plurals,..\n      -f=, --fasta-fn=  string  REQUIRED  FASTA filename,\
  \ preferably indexed\n                                          (with .fai)\n  \
  \    -c=, --circ-fn=   string  REQUIRED  Text list of circular contigs\n       \
  \                                   (newline-delimited)\n\n  pbreports-ctg-table\
  \ [required&optional-params] \n  Options:\n      -h, --help                    \
  \      print this cligen-erated help\n      --help-syntax                      \
  \ advanced: prepend,plurals,..\n      -f=, --fasta-fn=  string  REQUIRED  FASTA\
  \ filename, preferably indexed\n                                          (with\
  \ .fai)\n      -c=, --circ-fn=   string  REQUIRED  Text list of circular contigs\n\
  \                                          (newline-delimited)\n      -g=, --gff-fn=\
  \    string  REQUIRED  PacBio coverage GFF file.\n\n  stats-assembly [required&optional-params]\
  \ \n  Options:\n      -h, --help                          print this cligen-erated\
  \ help\n      --help-syntax                       advanced: prepend,plurals,..\n\
  \      -f=, --fasta-fn=  string  REQUIRED  FASTA filename, preferably indexed\n\
  \                                          (with .fai)\n\n  stats-preassembly [required&optional-params]\
  \ \n  Options:\n      -h, --help                                 print this cligen-erated\
  \ help\n      --help-syntax                              advanced: prepend,plurals,..\n\
  \      -r=, --rawreads-rdb-fn=  string  REQUIRED  Path to the raw reads RaptorDB.\n\
  \      -p=, --preads-rdb-fn=    string  REQUIRED  Path to the preads\n         \
  \                                        (error-corrected reads)\n             \
  \                                    RaptorDB.\n      -g=, --genome-length=    int32\
  \   REQUIRED  Length of the genome.\n      -c=, --cutoff-length=    int32   REQUIRED\
  \  Length cutoff used for\n                                                 assembly.\n\
  \n  stats-gff [required&optional-params] \n  Options:\n      -h, --help        \
  \                print this cligen-erated help\n      --help-syntax            \
  \         advanced: prepend,plurals,..\n      -g=, --gff-fn=  string  REQUIRED \
  \ A coverage.gff file generated by\n                                        pbreports.\n\
  \n  rr-hctg-track1 [optional-params] \n  Options:\n      -h, --help            \
  \                                                                              print\
  \ this\n                                                                       \
  \                                   cligen-erated\n                            \
  \                                                                              help\n\
  \      --help-syntax                                                           \
  \                            advanced:prepen\n                                 \
  \                                                                         d,plurals,..\n\
  \      -t, --test                  bool    false                               \
  \                            set test\n      -p=, --phased-read-file=    string\
  \  \"./3-unzip/all_phased_reads\"                                    set\n     \
  \                                                                              \
  \                       phased_read_file\n      -r=, --read-to-contig-map=  string\
  \  \"./4-quiver/read_maps/read_to_contig_map\"                       setread_to_cont\n\
  \                                                                              \
  \                            ig_map\n      --rawread-ids=              string  \"\
  ./2-asm-falcon/read_maps/dump_rawread_ids/rawread_ids\"         set rawread_ids\n\
  \      -b=, --bestn=               int     40                                  \
  \                            set bestn\n      -n=, --n-core=              int  \
  \   0                                                               set n_core\n\
  \      -m=, --min-len=             int     2500                                \
  \                            set min_len\n      -o=, --output=              string\
  \  \"./2-asm-falcon/read_maps/dump_rawread_ids/rawread_to_contigs\"  set output\n\
  \      -s, --stream                bool    false                               \
  \                            set stream\n      -d, --debug                 bool\
  \    false                                                           set debug\n\
  \      --silent                    bool    false                               \
  \                            set silent\n\n  rr-hctg-track2 [optional-params] \n\
  \    Stage 2 of rr_hctg_track\n  Options:\n      -h, --help                    \
  \                                                   print this\n               \
  \                                                                        cligen-erated\n\
  \                                                                              \
  \         help\n      --help-syntax                                            \
  \                        advanced:prepen\n                                     \
  \                                                  d,plurals,..\n      -t, --test\
  \                  bool    false                                        set test\n\
  \      -r=, --read-to-contig-map=  string  \"./4-quiver/track_reads/read_to_contig_map\"\
  \  setread_to_cont\n                                                           \
  \                            ig_map\n      -p=, --partials-fn=         string  \"\
  ./4-quiver/track-reads/partials.json\"       set partials_fn\n      -o=, --output=\
  \              string  \"./4-quiver/track-reads/rawread_to_contigs\"  set output\n\
  \      -b=, --bestn=               int     40                                  \
  \         set bestn\n      -n=, --n-core=              int     0               \
  \                             set n_core\n      --phased-read-file=         string\
  \  \"\"                                           set\n                        \
  \                                                               phased_read_file\n\
  \      --rawread-ids=              string  \"\"                                \
  \           set rawread_ids\n      -m=, --min-len=             int     2500    \
  \                                     set min_len\n      -s, --stream          \
  \      bool    false                                        set stream\n      -d,\
  \ --debug                 bool    false                                        set\
  \ debug\n      --silent                    bool    false                       \
  \                 set silent\n\n  bam2clippedFasta [required&optional-params] \n\
  \    Very similar to `samtools fasta`, but the reads are subSequenced.  Output is\n\
  \    printed to STDOUT\n  Options:\n      -h, --help                        print\
  \ this cligen-erated help\n      --help-syntax                     advanced: prepend,plurals,..\n\
  \      -i=, --in-bam=  string  REQUIRED  input bam name\n      -r=, --region=  string\
  \  REQUIRED  htslib formatted region seqid:start-end\n      -f=, --flag=    int\
  \     3844      filter reads with flag\n      --flip-rc       bool    false    \
  \ reverse complement (RC) the sequence if\n                                    \
  \    alignment is in RC\n\n  ipa2-construct-config [required&optional-params] \n\
  \    Takes an advanced options string, and reformats it into JSON format.\n    Input/output\
  \ is on stdin/stdout. Options which aren't set explicitly in the\n    input will\
  \ be set to default (configurable via args).\n  Options:\n      -h, --help     \
  \                   print this cligen-erated help\n      --help-syntax         \
  \            advanced: prepend,plurals,..\n      -o=, --out-fn=  string  REQUIRED\
  \  Output file.\n      --out-fmt=      string  \"json\"    Output format of the\
  \ config file. (json\n                                        or bash)\n      -i=,\
  \ --in-fn=   string  \"-\"       set in_fn\n      -n, --no-sort   bool    false\
  \     set no_sort\n\n  ipa-shard-ovl-asym [required&optional-params] \n    (Used\
  \ to shard the asymmetric overlap jobs.)\n  Options:\n      -h, --help         \
  \                     print this cligen-erated help\n      --help-syntax       \
  \                    advanced: prepend,plurals,..\n      -m=, --max-nshards=   int\
  \     REQUIRED  Maximum number of distributed jobs\n      -s=, --shard-prefix= \
  \ string  \"shard\"   The output. Shard files are\n                            \
  \                  (prefix).(shard_id).block_ids\n                             \
  \                 (though they really are block_id\n                           \
  \                   ranges).\n      -n=, --n=             int     REQUIRED  Generate\
  \ comparisons for\n                                              upper-triangle\
  \ of nxn matrix\n      -o=, --out-ids-fn=    string  \"\"        If given, this\
  \ lists the\n                                              shard_ids, 0 thru N-1,\n\
  \                                              corresponding to the\n          \
  \                                    shard-prefix.block_id files.\n            \
  \                                  Useful for Cromwell.\n\n  ipa-polish-split [required&optional-params]\
  \ Indexed fasta filenames to polish\n    The trailing list of fasta.fai filenames\
  \ are FASTA index files. They will be\n    used to split the shards somewhat evenly.\
  \ (Used to shard the polishing\n    jobs.)\n  Options:\n      -h, --help       \
  \                                                  print this\n                \
  \                                                         cligen-erated\n      \
  \                                                                   help\n     \
  \ --help-syntax                                                      advanced:prepen\n\
  \                                                                         d,plurals,..\n\
  \      -m=, --max-nshards=           int     REQUIRED                     Maximum\
  \ number\n                                                                     \
  \    of distributed\n                                                          \
  \               jobs\n      -s=, --shard-prefix=          string  \"shard\"    \
  \                  The output.\n                                               \
  \                          Shard files are\n                                   \
  \                                      (prefix).(shard_\n                      \
  \                                                   id).block_ids\n      -b=, --block-prefix=\
  \          string  \"block\"                      Block files are\n            \
  \                                                             (prefix).(block_\n\
  \                                                                         id).reads\n\
  \                                                                         (prepared\n\
  \                                                                         previously)\n\
  \      -i=, --in-read-to-contig-fn=  string  \"sorted.read_to_contig.csv\"  2-columns:\
  \ read#\n                                                                      \
  \   ctg-name\n      -o=, --out-ids-fn=            string  \"all_shard_ids\"    \
  \          If given, this\n                                                    \
  \                     lists the\n                                              \
  \                           shard_ids, 0\n                                     \
  \                                    thru N-1,\n                               \
  \                                          corresponding to\n                  \
  \                                                       theshard-prefix\n      \
  \                                                                   .block_id files.\n\
  \      --mb-per-block=               int     REQUIRED                     Try to\
  \ target\n                                                                     \
  \    megabases total\n                                                         \
  \                in all contigs\n                                              \
  \                           in any block\n      --blacklist-fn=               string\
  \  \"\"                           Specifies a file\n                           \
  \                                              with a list of\n                \
  \                                                         contigs to skip\n    \
  \                                                                     for polishing.\n\
  \n  ipa-shard-blocks-m4 [required&optional-params] \n    Given several {block_prefix}.(block_id).m4\
  \ files, create up to {max_nshards}\n    files that each contain a list of block_ids\
  \ (one per line). For now, they\n    are balanced by the number of reads in each\
  \ .m4 file. (Later, the contents\n    of each shard will be processed linearly,\
  \ one block at a time, on a given\n    compute node.) (Used to shard the phasing\
  \ jobs.)\n  Options:\n      -h, --help                                     print\
  \ this cligen-erated\n                                                     help\n\
  \      --help-syntax                                  advanced:\n              \
  \                                       prepend,plurals,..\n      -m=, --max-nshards=\
  \   int     REQUIRED         Maximum number of\n                               \
  \                      distributed jobs\n      -s=, --shard-prefix=  string  \"\
  shard\"          The output. Shard files are\n                                 \
  \                    (prefix).(shard_id).block_i\n                             \
  \                        ds\n      -b=, --block-prefix=  string  \"block\"     \
  \     Block files are\n                                                     (prefix).(block_id).m4\n\
  \                                                     (prepared previously)\n  \
  \    -o=, --out-ids-fn=    string  \"all_shard_ids\"  If given, this lists the\n\
  \                                                     shard_ids, 0 thru N-1,\n \
  \                                                    corresponding to the\n    \
  \                                                 shard-prefix.block_id\n      \
  \                                               files.\n\n  ipa2-polish-prepare\
  \ [required&optional-params] \n    DEPRECATED\n  Options:\n      -h, --help    \
  \                            print this cligen-erated help\n      --help-syntax\
  \                             advanced: prepend,plurals,..\n      -m=, --max-nshards=\
  \   int     REQUIRED    Maximum number of distributed\n                        \
  \                        jobs\n      -s=, --shard-prefix=  string  \"shard_id\"\
  \  The output. Shard files are\n                                               \
  \ (prefix).(shard_id).block_ids\n      -b=, --block-prefix=  string  \"block_id\"\
  \  Block files are\n                                                (prefix).(block_id).reads\n\
  \                                                (prepared previously)\n      -o=,\
  \ --out-ids-fn=    string  \"\"          If given, this lists the\n            \
  \                                    shard_ids, 0 thru N-1,\n                  \
  \                              corresponding to the\n                          \
  \                      shard-prefix.block_id files.\n"
generated_using: []
docker_image:
