from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean

Pegasus_Plot_V0_1_0 = CommandToolBuilder(tool="pegasus_plot", base_command=["pegasus", "plot"], inputs=[ToolInput(tag="in_dpi", input_type=Int(optional=True), prefix="--dpi", doc=InputDocumentation(doc="DPI value for the figure. [default: 500]")), ToolInput(tag="in_restriction", input_type=Int(optional=True), prefix="--restriction", doc=InputDocumentation(doc="...     Set restriction if you only want to plot a subset of data. Multiple <restriction> strings are allowed. There are two types of <restriction>s: global restriction and attribute-specific restriction. Global restriction appiles to all attributes in ``attrs`` and takes the format of 'key:value,value...', or 'key:~value,value...'. This restriction selects cells with the ``data.obs[key]`` values belong to 'value,value...' (or not belong to if '~' shows). Attribute-specific restriction takes the format of 'attr:key:value,value...', or 'attr:key:~value,value...'. It only applies to one attribute 'attr'. If 'attr' and 'key' are the same, one can use '.' to replace 'key' (e.g. ``cluster_labels:.:value1,value2``).Each <restriction> takes the format of 'attr:value,value', or 'attr:~value,value...' which means excluding values. This option is used in both 'composition' and 'scatter'.")), ToolInput(tag="in_attributes", input_type=String(optional=True), prefix="--attributes", doc=InputDocumentation(doc="<attrs> is a comma-separated list of attributes to color the basis. This option is only used in 'scatter'.")), ToolInput(tag="in_basis", input_type=Int(optional=True), prefix="--basis", doc=InputDocumentation(doc="Basis for 2D plotting, chosen from 'umap', 'tsne', 'fitsne', 'fle', 'net_umap', 'net_tsne', 'net_fitsne' or 'net_fle'. [default: umap]")), ToolInput(tag="in_alpha", input_type=String(optional=True), prefix="--alpha", doc=InputDocumentation(doc="Point transparent parameter. Can be a single value or a list of values separated by comma used for each attribute in <attrs>.")), ToolInput(tag="in_legend_loc", input_type=String(optional=True), prefix="--legend-loc", doc=InputDocumentation(doc="Legend location, can be either 'right margin' or 'on data'. If a list is provided, set 'legend_loc' for each attribute in 'attrs' separately. [default: right margin]")), ToolInput(tag="in_palette", input_type=String(optional=True), prefix="--palette", doc=InputDocumentation(doc="Used for setting colors for every categories in categorical attributes. Multiple <palette> strings are allowed. Each string takes the format of 'attr:color1,color2,...,colorn'. 'attr' is the categorical attribute and 'color1' - 'colorn' are the colors for each category in 'attr' (e.g. 'cluster_labels:black,blue,red,...,yellow'). If there is only one categorical attribute in 'attrs', ``palletes`` can be set as a single string and the 'attr' keyword can be omitted (e.g. 'blue,yellow,red').")), ToolInput(tag="in_show_background", input_type=Boolean(optional=True), prefix="--show-background", doc=InputDocumentation(doc="Show points that are not selected as gray.")), ToolInput(tag="in_nrows", input_type=Int(optional=True), prefix="--nrows", doc=InputDocumentation(doc="Number of rows in the figure. If not set, pegasus will figure it out automatically.")), ToolInput(tag="in_ncols", input_type=Int(optional=True), prefix="--ncols", doc=InputDocumentation(doc="Number of columns in the figure. If not set, pegasus will figure it out automatically.")), ToolInput(tag="in_panel_size", input_type=Int(optional=True), prefix="--panel-size", doc=InputDocumentation(doc="Panel size in inches, w x h, separated by comma. Note that margins are not counted in the sizes. For composition, default is (6, 4). For scatter plots, default is (4, 4).")), ToolInput(tag="in_left", input_type=String(optional=True), prefix="--left", doc=InputDocumentation(doc="Figure's left margin in fraction with respect to panel width.")), ToolInput(tag="in_bottom", input_type=String(optional=True), prefix="--bottom", doc=InputDocumentation(doc="Figure's bottom margin in fraction with respect to panel height.")), ToolInput(tag="in_w_space", input_type=String(optional=True), prefix="--wspace", doc=InputDocumentation(doc="Horizontal space between panels in fraction with respect to panel width.")), ToolInput(tag="in_hspace", input_type=String(optional=True), prefix="--hspace", doc=InputDocumentation(doc="Vertical space between panels in fraction with respect to panel height.")), ToolInput(tag="in_group_by", input_type=String(optional=True), prefix="--groupby", doc=InputDocumentation(doc="Use <attr> to categorize the cells for the composition plot, e.g. cell type.")), ToolInput(tag="in_condition", input_type=String(optional=True), prefix="--condition", doc=InputDocumentation(doc="Use <attr> to calculate frequency within each category defined by '--groupby' for the composition plot, e.g. donor.")), ToolInput(tag="in_style", input_type=String(optional=True), prefix="--style", doc=InputDocumentation(doc="Composition plot styles. Can be either 'frequency' or 'normalized'. [default: normalized]")), ToolInput(tag="in_plot_type", input_type=String(), position=0, doc=InputDocumentation(doc="Plot type, either 'scatter' for scatter plots or 'compo' for composition plots")), ToolInput(tag="in_input_file", input_type=String(), position=1, doc=InputDocumentation(doc="Single cell data in Zarr or H5ad format.")), ToolInput(tag="in_output_file", input_type=String(), position=2, doc=InputDocumentation(doc="Output image file."))], outputs=[], container="quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pegasus_Plot_V0_1_0().translate("wdl")

