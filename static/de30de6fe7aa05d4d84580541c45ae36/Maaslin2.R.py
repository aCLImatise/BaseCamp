from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String

Maaslin2_R_V0_1_0 = CommandToolBuilder(tool="Maaslin2.R", base_command=["Maaslin2.R"], inputs=[ToolInput(tag="in_min_abundance", input_type=Int(optional=True), prefix="--min_abundance", doc=InputDocumentation(doc="The minimum abundance for each feature [ Default: 0 ]")), ToolInput(tag="in_min_prevalence", input_type=Int(optional=True), prefix="--min_prevalence", doc=InputDocumentation(doc="The minimum percent of samples for whicha feature is detected at minimum abundance [ Default: 0.1 ]")), ToolInput(tag="in_max_significance", input_type=Int(optional=True), prefix="--max_significance", doc=InputDocumentation(doc="The q-value threshold for significance [ Default: 0.25 ]")), ToolInput(tag="in_normalization", input_type=String(optional=True), prefix="--normalization", doc=InputDocumentation(doc="The normalization method to apply  [ Default: TSS ] [ Choices: TSS, CLR, CSS, NONE, TMM ]")), ToolInput(tag="in_transform", input_type=String(optional=True), prefix="--transform", doc=InputDocumentation(doc="The transform to apply [ Default: LOG ] [ Choices: LOG, LOGIT, AST, NONE ]")), ToolInput(tag="in_analysis_method", input_type=String(optional=True), prefix="--analysis_method", doc=InputDocumentation(doc="The analysis method to apply [ Default: LM ] [ Choices: LM, SLM, CPLM, ZICP, NEGBIN, ZINB ]")), ToolInput(tag="in_random_effects", input_type=String(optional=True), prefix="--random_effects", doc=InputDocumentation(doc="The random effects for the model,  comma-delimited for multiple effects  [ Default: none ]")), ToolInput(tag="in_fixed_effects", input_type=String(optional=True), prefix="--fixed_effects", doc=InputDocumentation(doc="The fixed effects for the model,  comma-delimited for multiple effects  [ Default: all ]")), ToolInput(tag="in_correction", input_type=String(optional=True), prefix="--correction", doc=InputDocumentation(doc="The correction method for computing  the q-value [ Default: BH ]")), ToolInput(tag="in_standardize", input_type=String(optional=True), prefix="--standardize", doc=InputDocumentation(doc="Apply z-score so continuous metadata are on  the same scale [ Default: TRUE ]")), ToolInput(tag="in_plot_heat_map", input_type=String(optional=True), prefix="--plot_heatmap", doc=InputDocumentation(doc="Generate a heatmap for the significant  associations [ Default: TRUE ]")), ToolInput(tag="in_heat_map_first_n", input_type=Int(optional=True), prefix="--heatmap_first_n", doc=InputDocumentation(doc="In heatmap, plot top N features with significant  associations [ Default: 50 ]")), ToolInput(tag="in_plot_scatter", input_type=String(optional=True), prefix="--plot_scatter", doc=InputDocumentation(doc="Generate scatter plots for the significant  associations [ Default: TRUE ]")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="The number of R processes to  run in parallel [ Default: 1 ]\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Maaslin2_R_V0_1_0().translate("wdl", allow_empty_container=True)

