from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Float, Int, Directory

Ariba_Prepareref_V0_1_0 = CommandToolBuilder(tool="ariba_prepareref", base_command=["ariba", "prepareref"], inputs=[ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="REQUIRED. Name of fasta file. Can be used more than\nonce if your sequences are spread over more than on\nfile")), ToolInput(tag="in_metadata", input_type=File(optional=True), prefix="--metadata", doc=InputDocumentation(doc="Name of tsv file of metadata about the input\nsequences. Can be used more than once if your metadata\nis spread over more than one file. Incompatible with\n--all_coding")), ToolInput(tag="in_all_coding", input_type=String(optional=True), prefix="--all_coding", doc=InputDocumentation(doc="Use this if you only have a fasta of presence absence\nsequences as input, and no metadata. Use 'yes' if all\nsequences are coding, or 'no' if they are all non-\ncoding. Incompatible with -m/--metadata")), ToolInput(tag="in_no_cd_hit", input_type=Boolean(optional=True), prefix="--no_cdhit", doc=InputDocumentation(doc="Do not run cd-hit. Each input sequence is put into its\nown 'cluster'. Incompatible with --cdhit_clusters.")), ToolInput(tag="in_cd_hit_clusters", input_type=File(optional=True), prefix="--cdhit_clusters", doc=InputDocumentation(doc="File specifying how the sequences should be clustered.\nWill be used instead of running cdhit. Format is one\ncluster per line. Sequence names separated by\nwhitespace. Incompatible with --no_cdhit")), ToolInput(tag="in_cd_hit_min_id", input_type=Float(optional=True), prefix="--cdhit_min_id", doc=InputDocumentation(doc="Sequence identity threshold (cd-hit option -c) [0.9]")), ToolInput(tag="in_cd_hit_min_length", input_type=Float(optional=True), prefix="--cdhit_min_length", doc=InputDocumentation(doc="Length difference cutoff (cd-hit option -s) [0.0]")), ToolInput(tag="in_cd_hit_max_memory", input_type=Int(optional=True), prefix="--cdhit_max_memory", doc=InputDocumentation(doc="Memory limit in MB (cd-hit option -M) [None]. Use 0\nfor unlimited.")), ToolInput(tag="in_min_gene_length", input_type=Int(optional=True), prefix="--min_gene_length", doc=InputDocumentation(doc="Minimum allowed length in nucleotides of reference\ngenes [6]")), ToolInput(tag="in_max_gene_length", input_type=Int(optional=True), prefix="--max_gene_length", doc=InputDocumentation(doc="Maximum allowed length in nucleotides of reference\ngenes [10000]")), ToolInput(tag="in_min_noncoding_length", input_type=Int(optional=True), prefix="--min_noncoding_length", doc=InputDocumentation(doc="Minimum allowed length in nucleotides of non-coding\nsequences [6]")), ToolInput(tag="in_max_noncoding_length", input_type=Int(optional=True), prefix="--max_noncoding_length", doc=InputDocumentation(doc="Maximum allowed length in nucleotides of non-coding\nsequences [20000]")), ToolInput(tag="in_genetic_code", input_type=Int(optional=True), prefix="--genetic_code", doc=InputDocumentation(doc="Number of genetic code to use. Currently supported\n1,4,11 [11]")), ToolInput(tag="in_force", input_type=Directory(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite output directory, if it already exists")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads (currently only applies to cdhit)\n[1]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose")), ToolInput(tag="in_outdir", input_type=String(), position=0, doc=InputDocumentation(doc="Output directory (must not already exist)"))], outputs=[ToolOutput(tag="out_force", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Overwrite output directory, if it already exists"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ariba_Prepareref_V0_1_0().translate("wdl", allow_empty_container=True)

