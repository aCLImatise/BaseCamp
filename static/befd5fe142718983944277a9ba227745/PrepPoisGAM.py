from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean

Preppoisgam_V0_1_0 = CommandToolBuilder(tool="PrepPoisGAM", base_command=["PrepPoisGAM"], inputs=[ToolInput(tag="in_two_column_read", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc=": a two column read count file(position and count); If unspecified, use <stdin> as input;\nData should be ordered by position")), ToolInput(tag="in_fragment_size_estimated", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc=": fragment size as estimated from paired end data or by cross correlation of reads on postive and negative strands; Default 300")), ToolInput(tag="in__length_default", input_type=Int(optional=True), prefix="-l", doc=InputDocumentation(doc=": read length; Default 50")), ToolInput(tag="in_specified_use_output", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc=": if specified, use this as output")), ToolInput(tag="in_file_stores_estimates", input_type=File(optional=True), prefix="-e", doc=InputDocumentation(doc=": the file that stores the estimates of the glm model")), ToolInput(tag="in_bin_size_default", input_type=Int(optional=True), prefix="-b", doc=InputDocumentation(doc=": the bin size; default 100; only valid if -e is specified")), ToolInput(tag="in_chrom", input_type=String(optional=True), prefix="--chrom", doc=InputDocumentation(doc=": the chromosome under consideration")), ToolInput(tag="in_uds", input_type=Int(optional=True), prefix="--uds", doc=InputDocumentation(doc=": the number base pairs to extend to upstream and downstream. Default 5.")), ToolInput(tag="in_no_gap_in_read", input_type=Boolean(optional=True), prefix="--noGapInRead", doc=InputDocumentation(doc=": when use every nucleotide in the extended read instead of just the nucleotides on two ends")), ToolInput(tag="in_gc_bin", input_type=Boolean(optional=True), prefix="--gc_bin", doc=InputDocumentation(doc=": bin the data and report gc and read count in the bins; Notice that if the option -e is specified, this option will be ignored")), ToolInput(tag="in_map_bin", input_type=Boolean(optional=True), prefix="--map_bin", doc=InputDocumentation(doc=": if specified, bin the data as bins with equal number of uniquely mappable genomic locations\nonly valid if --gc_bin is specified and this option assume the input file has all unique mappable positions of the chromosome under consideration")), ToolInput(tag="in_none_gb_inom", input_type=Boolean(optional=True), prefix="--NoNegBinom", doc=InputDocumentation(doc=": Do not use negative binomial to estimate the variance;\nIf this is not specified, the last row of -e <string> will be used as estimate of theta parameter in the Negative Binomial model")), ToolInput(tag="in_noheader", input_type=Boolean(optional=True), prefix="--NoHeader", doc=InputDocumentation(doc=": Do not print header to the output")), ToolInput(tag="in_refine", input_type=File(optional=True), prefix="--refine", doc=InputDocumentation(doc=": the file that stores the parameters in the refine step")), ToolInput(tag="in_fa_file", input_type=File(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Preppoisgam_V0_1_0().translate("wdl", allow_empty_container=True)

