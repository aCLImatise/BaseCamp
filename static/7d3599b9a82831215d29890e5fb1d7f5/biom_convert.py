from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean

Biom_Convert_V0_1_0 = CommandToolBuilder(tool="biom_convert", base_command=["biom", "convert"], inputs=[ToolInput(tag="in_input_fp", input_type=File(optional=True), prefix="--input-fp", doc=InputDocumentation(doc="The input BIOM table  [required]")), ToolInput(tag="in_output_fp", input_type=File(optional=True), prefix="--output-fp", doc=InputDocumentation(doc="The output BIOM table  [required]")), ToolInput(tag="in_sample_metadata_fp", input_type=File(optional=True), prefix="--sample-metadata-fp", doc=InputDocumentation(doc="The sample metadata mapping file (will add\nsample metadata to the input BIOM table, if\nprovided).")), ToolInput(tag="in_observation_metadata_fp", input_type=File(optional=True), prefix="--observation-metadata-fp", doc=InputDocumentation(doc="The observation metadata mapping file (will\nadd observation metadata to the input BIOM\ntable, if provided).")), ToolInput(tag="in_to_json", input_type=Boolean(optional=True), prefix="--to-json", doc=InputDocumentation(doc="Output as JSON-formatted table.")), ToolInput(tag="in_to_hdf_five", input_type=Boolean(optional=True), prefix="--to-hdf5", doc=InputDocumentation(doc="Output as HDF5-formatted table.")), ToolInput(tag="in_to_tsv", input_type=Boolean(optional=True), prefix="--to-tsv", doc=InputDocumentation(doc="Output as TSV-formatted (classic) table.")), ToolInput(tag="in_collapsed_samples", input_type=Boolean(optional=True), prefix="--collapsed-samples", doc=InputDocumentation(doc="If --to_hdf5 is passed and the original\ntable is a BIOM table with collapsed\nsamples, this will update the sample\nmetadata of the table to the supported HDF5\ncollapsed format.")), ToolInput(tag="in_collapsed_observations", input_type=Boolean(optional=True), prefix="--collapsed-observations", doc=InputDocumentation(doc="If --to_hdf5 is passed and the original\ntable is a BIOM table with collapsed\nobservations, this will update the\nobservation metadata of the table to the\nsupported HDF5 collapsed format.")), ToolInput(tag="in_header_key", input_type=File(optional=True), prefix="--header-key", doc=InputDocumentation(doc="The observation metadata to include from the\ninput BIOM table file when creating a tsv\ntable file. By default no observation\nmetadata will be included.")), ToolInput(tag="in_output_metadata_id", input_type=File(optional=True), prefix="--output-metadata-id", doc=InputDocumentation(doc="The name to be given to the observation\nmetadata column when creating a tsv table\nfile if the column should be renamed.")), ToolInput(tag="in_table_type", input_type=Boolean(optional=True), prefix="--table-type", doc=InputDocumentation(doc="[OTU table|Pathway table|Function table|Ortholog table|Gene table|Metabolite table|Taxon table|Table]\nThe type of the table.")), ToolInput(tag="in_process_obs_metadata", input_type=Boolean(optional=True), prefix="--process-obs-metadata", doc=InputDocumentation(doc="[taxonomy|naive|sc_separated]\nProcess metadata associated with\nobservations when converting from a classic\ntable.")), ToolInput(tag="in_tsv_metadata_formatter", input_type=Boolean(optional=True), prefix="--tsv-metadata-formatter", doc=InputDocumentation(doc="[naive|sc_separated]\nMethod for formatting the observation\nmetadata."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Biom_Convert_V0_1_0().translate("wdl", allow_empty_container=True)

