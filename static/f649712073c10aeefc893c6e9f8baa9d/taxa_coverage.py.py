from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int, File, Float

Taxa_Coverage_Py_V0_1_0 = CommandToolBuilder(tool="taxa_coverage.py", base_command=["taxa_coverage.py"], inputs=[ToolInput(tag="in_is_enabled", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="is enabled.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print information during execution -- useful for\ndebugging [default: False]")), ToolInput(tag="in_tax_a_depth", input_type=Int(optional=True), prefix="--taxa_depth", doc=InputDocumentation(doc="Depth of taxa to generate graphs and summaries for,\nstarting with domain. [default: 3]")), ToolInput(tag="in_all_files", input_type=Boolean(optional=True), prefix="--all_files", doc=InputDocumentation(doc="Test all _hits.txt files in directory specified with")), ToolInput(tag="in_idot", input_type=Boolean(optional=True), prefix="-i.", doc=InputDocumentation(doc="[default: False]")), ToolInput(tag="in_primer_pairs", input_type=Boolean(optional=True), prefix="--primer_pairs", doc=InputDocumentation(doc="Test primer pairs.  Will test all input hits files\nthat are forward and reverse primers.  Hits files must\nhave matching sequences.  The worse scoring primer of\nthe pair dictates amplification success. [default:\nFalse]")), ToolInput(tag="in_output_dir", input_type=File(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="Specify base output directory for taxa summary.  A log\nfile be output to this directory.  Taxonomy graphs and\ntext summaries will be generated in separated\nsubdirectories from the main output directory.\n[default: .]")), ToolInput(tag="in_score_type", input_type=File(optional=True), prefix="--score_type", doc=InputDocumentation(doc="Value to use from primer hits file to determine a\ngivenprimer's amplification success.  Valid choices\nare weighted_score, overall_mismatches, tp_mismatches.\nGibbs energy scores not currently implemented\n[default: weighted_score]")), ToolInput(tag="in_score_threshold", input_type=Float(optional=True), prefix="--score_threshold", doc=InputDocumentation(doc="If primer has score at or below this parameter, the\nprimer amplification is considered to be successful\n[default: 1.0]")), ToolInput(tag="in_hits_fps", input_type=String(optional=True), prefix="--hits_fps", doc=InputDocumentation(doc="Target primer hits files to generate linkers against.\nSeparate multiple files with a colon. [REQUIRED]")), ToolInput(tag="in_tax_a_fp", input_type=File(optional=True), prefix="--taxa_fp", doc=InputDocumentation(doc="Taxonomy mapping file. [REQUIRED]\n"))], outputs=[ToolOutput(tag="out_output_dir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Specify base output directory for taxa summary.  A log\nfile be output to this directory.  Taxonomy graphs and\ntext summaries will be generated in separated\nsubdirectories from the main output directory.\n[default: .]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Taxa_Coverage_Py_V0_1_0().translate("wdl", allow_empty_container=True)

