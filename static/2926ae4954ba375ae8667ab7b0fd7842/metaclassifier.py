from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Metaclassifier_V0_1_0 = CommandToolBuilder(tool="metaclassifier", base_command=["metaclassifier"], inputs=[ToolInput(tag="in_output_dir", input_type=File(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="Specify output directory name, otherwise it will automatically be created using the\ninput sample table file name")), ToolInput(tag="in_frag_type", input_type=String(optional=True), prefix="--frag_type", doc=InputDocumentation(doc="Specify the sequence fragment type in the input sample file, available options are:\npaired: single-end read fragments (default)\nsingle: paired-end read fragments")), ToolInput(tag="in_merge", input_type=Boolean(optional=True), prefix="--merge", doc=InputDocumentation(doc="Merge overlapping paired-end reads (default: False)")), ToolInput(tag="in_tax_class", input_type=String(optional=True), prefix="--tax_class", doc=InputDocumentation(doc="Taxonomy class for quantify taxon level marker read abundance (default: genus)")), ToolInput(tag="in_min_proportion", input_type=Int(optional=True), prefix="--min_proportion", doc=InputDocumentation(doc="Minimum taxon read proportion allowed to retain a sample taxon, allowed proportion,\nranges from 0.00 to 0.01 (default = 0.00)")), ToolInput(tag="in_max_markers", input_type=Int(optional=True), prefix="--max_markers", doc=InputDocumentation(doc="Maximum missing markers allowed to retain a sample taxon (default = 0)")), ToolInput(tag="in_pear_merger", input_type=File(optional=True), prefix="--pear_merger", doc=InputDocumentation(doc="Path to PEAR, the paired-end read merger if not in environmental variables (ENV)\n(default: read from ENV)")), ToolInput(tag="in_seq_tk_converter", input_type=File(optional=True), prefix="--seqtk_converter", doc=InputDocumentation(doc="Path to seqtk, the sequence processing tool if not in environmental variables (ENV)\n(default: read from ENV)")), ToolInput(tag="in_v_search_aligner", input_type=File(optional=True), prefix="--vsearch_aligner", doc=InputDocumentation(doc="Path to VSEARCH, the sequence analysis tool if not in environmental variables (ENV)\n(default: read from ENV)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Specify the number of threads to use (default: 2)")), ToolInput(tag="in_sample_file", input_type=String(), position=0, doc=InputDocumentation(doc="Input tab-delimited file specifying sample names, file names for forward paired-end\nreads, and file names for reverse paired-end (file path if not in working directory)\nThe second file not required for single-end frangments")), ToolInput(tag="in_db_dir", input_type=String(), position=1, doc=InputDocumentation(doc="Input marker database directory with sequence fasta and corresponding taxonomy lineage\nfiles for each marker")), ToolInput(tag="in_config_file", input_type=String(), position=2, doc=InputDocumentation(doc="Input tab-delimited file specifying marker name, and its corresponding VSEARCH's\nusearch_global function minimum query coverage (i.e. 0.8 for 80%) and minimun sequence\nidentity (i.e. 0.95 for 95%) for each search marker (provide the file path if not in\nif the VSEARCH settings configuration is not in working directory)"))], outputs=[], container="quay.io/biocontainers/metaclassifier:v1.0.1--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Metaclassifier_V0_1_0().translate("wdl")

