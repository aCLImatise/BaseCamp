from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, Array, String

Make_Wiggle_V0_1_0 = CommandToolBuilder(tool="make_wiggle", base_command=["make_wiggle"], inputs=[ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Base name for output files")), ToolInput(tag="in_window_size", input_type=Int(optional=True), prefix="--window_size", doc=InputDocumentation(doc="Size of nucleotides to fetch at once for export. Large\nvalues are faster but require more memory (Default:\n100000)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppress all warning messages. Cannot use with '-v'.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase verbosity. With '-v', show every warning.\nWith '-vv', turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each type of warning once)")), ToolInput(tag="in_count_files", input_type=Array(t=String(), optional=True), prefix="--count_files", doc=InputDocumentation(doc="One or more count or alignment file(s) from a single\nsample or set of samples to be pooled.")), ToolInput(tag="in_count_file_format", input_type=String(optional=True), prefix="--countfile_format", doc=InputDocumentation(doc="Format of file containing alignments or counts\n(Default: BAM)")), ToolInput(tag="in_normalize", input_type=Boolean(optional=True), prefix="--normalize", doc=InputDocumentation(doc="Whether counts should be normalized to counts per\nmillion (usually not. default: False)")), ToolInput(tag="in_sum", input_type=String(optional=True), prefix="--sum", doc=InputDocumentation(doc="Sum used in normalization of counts and RPKM/RPNT\ncalculations (Default: total mapped reads/counts in\ndataset)")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min_length", doc=InputDocumentation(doc="Minimum read length required to be included (BAM &\nbowtie files only. Default: 25)")), ToolInput(tag="in_max_length", input_type=Int(optional=True), prefix="--max_length", doc=InputDocumentation(doc="Maximum read length permitted to be included (BAM &\nbowtie files only. Default: 100)")), ToolInput(tag="in_maxmem", input_type=Int(optional=True), prefix="--maxmem", doc=InputDocumentation(doc="Maximum desired memory footprint in MB to devote to\nBigBed/BigWig files. May be exceeded by large queries.\n(Default: 0, No maximum)")), ToolInput(tag="in_big_genome", input_type=Boolean(optional=True), prefix="--big_genome", doc=InputDocumentation(doc="Use slower but memory-efficient implementation for big\ngenomes or for memory-limited computers. For wiggle &\nbowtie files only.")), ToolInput(tag="in_five_prime_variable", input_type=Boolean(optional=True), prefix="--fiveprime_variable", doc=InputDocumentation(doc="Map read alignment to a variable offset from 5'\nposition of read, with offset determined by read\nlength. Requires `--offset` below")), ToolInput(tag="in_five_prime", input_type=Boolean(optional=True), prefix="--fiveprime", doc=InputDocumentation(doc="Map read alignment to 5' position.")), ToolInput(tag="in_three_prime", input_type=Boolean(optional=True), prefix="--threeprime", doc=InputDocumentation(doc="Map read alignment to 3' position")), ToolInput(tag="in_center", input_type=Boolean(optional=True), prefix="--center", doc=InputDocumentation(doc="Subtract N positions from each end of read, and add\n1/(length-N), to each remaining position, where N is\nspecified by `--nibble`")), ToolInput(tag="in_offset", input_type=Int(optional=True), prefix="--offset", doc=InputDocumentation(doc="For `--fiveprime` or `--threeprime`, provide an\ninteger representing the offset into the read,\nstarting from either the 5' or 3' end, at which data\nshould be plotted. For `--fiveprime_variable`, provide\nthe filename of a two-column tab-delimited text file,\nin which first column represents read length or the\nspecial keyword `'default'`, and the second column\nrepresents the offset from the five prime end of that\nread length at which the read should be mapped.\n(Default: 0)")), ToolInput(tag="in_nibble", input_type=Int(optional=True), prefix="--nibble", doc=InputDocumentation(doc="For use with `--center` only. nt to remove from each\nend of read before mapping (Default: 0)")), ToolInput(tag="in_color", input_type=String(optional=True), prefix="--color", doc=InputDocumentation(doc="An RGB hex string (`'#NNNNNN'`, `N` in `[0-9,A-F]`)\nspecifying the track color.")), ToolInput(tag="in_track_name", input_type=String(optional=True), prefix="--track_name", doc=InputDocumentation(doc="Name to give browser track")), ToolInput(tag="in_output_format", input_type=File(optional=True), prefix="--output_format", doc=InputDocumentation(doc="Format of output file (Default: bedgraph)\n")), ToolInput(tag="in_out_base_fw_do_twig", input_type=String(), position=0, doc=InputDocumentation(doc="Counts at each position for the plus/forward strand of each chromosome")), ToolInput(tag="in_out_base_rc_do_twig", input_type=String(), position=1, doc=InputDocumentation(doc="Counts at each position for the minus/reverse strand of each chromosome"))], outputs=[ToolOutput(tag="out_output_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_format", type_hint=File()), doc=OutputDocumentation(doc="Format of output file (Default: bedgraph)\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Make_Wiggle_V0_1_0().translate("wdl", allow_empty_container=True)

