from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int

Kmer_Mask_V0_1_0 = CommandToolBuilder(tool="kmer_mask", base_command=["kmer-mask"], inputs=[ToolInput(tag="in_mdb", input_type=String(optional=True), prefix="-mdb", doc=InputDocumentation(doc="load masking kmers from meryl 'mer-database'")), ToolInput(tag="in_ms", input_type=Boolean(optional=True), prefix="-ms", doc=InputDocumentation(doc="mer-size")), ToolInput(tag="in_edb", input_type=String(optional=True), prefix="-edb", doc=InputDocumentation(doc="save masking kmers to 'exist-database' for faster restarts")), ToolInput(tag="in_input_reads_fastqgz", input_type=Int(optional=True), prefix="-1", doc=InputDocumentation(doc="input reads - fastq, fastq.gz, fastq.bz2 or fastq.xz")), ToolInput(tag="in_optional_present_messes", input_type=Int(optional=True), prefix="-2", doc=InputDocumentation(doc="- (optional, but if not present, messes up the output classification)")), ToolInput(tag="in_output_readsoutfullymaskedfastq_reads", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="out                output reads:\nout.fullymasked.[12].fastq      - reads with below 'lowthreshold' bases retained\nout.partiallymasked.[12].fastq  - reads in between\nout.retained.[12].fastq         - reads with more than 'hightreshold' bases retained\nout.discarded.[12].fastq        - reads with conflicting status")), ToolInput(tag="in_ignore_database_hits", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="ignore database hits below this many consecutive kmers (0)")), ToolInput(tag="in_extend_database_hits", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="extend database hits across this many missing kmers (0)")), ToolInput(tag="in_novel", input_type=Boolean(optional=True), prefix="-novel", doc=InputDocumentation(doc="RETAIN novel sequence not present in the database")), ToolInput(tag="in_confirmed", input_type=Boolean(optional=True), prefix="-confirmed", doc=InputDocumentation(doc="RETAIN confirmed sequence present in the database")), ToolInput(tag="in_promote", input_type=Boolean(optional=True), prefix="-promote", doc=InputDocumentation(doc="promote the lesser RETAINED read to the status of the more RETAINED read\nread1=fullymasked and read2=partiallymasked -> both are partiallymasked")), ToolInput(tag="in_demote", input_type=Boolean(optional=True), prefix="-demote", doc=InputDocumentation(doc="demote the more RETAINED read to the status of the lesser RETAINED read\nread1=fullymasked and read2=partiallymasked -> both are fullymasked")), ToolInput(tag="in_discard", input_type=Boolean(optional=True), prefix="-discard", doc=InputDocumentation(doc="discard pairs with conflicting status (DEFAULT)\nread1=fullymasked and read2=partiallymasked -> both are discarded")), ToolInput(tag="in_unlink", input_type=Boolean(optional=True), prefix="-unlink", doc=InputDocumentation(doc="leave conflicting status alone; mate pairing will be broken")), ToolInput(tag="in_no_masking", input_type=Boolean(optional=True), prefix="-nomasking", doc=InputDocumentation(doc="classify reads as normal, but do not trim masked sequence; output the full original read")), ToolInput(tag="in_write_histogram_retained", input_type=String(optional=True), prefix="-h", doc=InputDocumentation(doc="write a histogram of the amount of sequence RETAINED")), ToolInput(tag="in_use_compute_threads", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="use 't' compute threads")), ToolInput(tag="in_show_progress", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="show progress"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Kmer_Mask_V0_1_0().translate("wdl", allow_empty_container=True)

