!Command
positional:
- !Positional
  description: ''
  position: 0
  name: source files
  optional: false
named:
- !Flag
  description: Use IPv4 rather than IPv6 for the server socket
  synonyms:
  - -ipv4
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Set idle timeout in minutes for fsc (use 0 for no timeout)
  synonyms:
  - -max-idle
  args: !SimpleFlagArg
    name: n
  optional: true
- !Flag
  description: Search and start compile server in given port only
  synonyms:
  - -port
  args: !SimpleFlagArg
    name: n
  optional: true
- !Flag
  description: Reset compile server caches
  synonyms:
  - -reset
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: <hostname:portnumber>  Specify compile server socket
  synonyms:
  - -server
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Shutdown compile server
  synonyms:
  - -shutdown
  args: !EmptyFlagArg {}
  optional: true
command:
- fsc
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "Usage: fsc <options> <source files>\nwhere possible fsc options include:\n\
  \  -ipv4                          Use IPv4 rather than IPv6 for the server socket\n\
  \  -max-idle <n>                  Set idle timeout in minutes for fsc (use 0 for\
  \ no timeout)\n  -port <n>                      Search and start compile server\
  \ in given port only\n  -reset                         Reset compile server caches\n\
  \  -server <hostname:portnumber>  Specify compile server socket\n  -shutdown   \
  \                   Shutdown compile server\n\nStandard scalac options also available:\n\
  \  -Dproperty=value                Pass -Dproperty=value directly to the runtime\
  \ system.\n  -J<flag>                        Pass <flag> directly to the runtime\
  \ system.\n  -P:<plugin>:<opt>               Pass an option to a plugin\n  -X  \
  \                            Print a synopsis of advanced options.\n  -bootclasspath\
  \ <path>           Override location of bootstrap class files.\n  -classpath <path>\
  \               Specify where to find user class files.\n  -d <directory|jar>  \
  \            destination for generated classfiles.\n  -dependencyfile <file>   \
  \       Set dependency tracking file.\n  -deprecation                    Emit warning\
  \ and location for usages of deprecated APIs.\n  -encoding <encoding>          \
  \  Specify character encoding used by source files.\n  -explaintypes           \
  \        Explain type errors in more detail.\n  -extdirs <path>                \
  \ Override location of installed extensions.\n  -feature                       \
  \ Emit warning and location for usages of features that should be imported explicitly.\n\
  \  -g:<level>                      Set level of generated debugging info. (none,source,line,vars,notailcalls)\
  \ default:vars\n  -help                           Print a synopsis of standard options\n\
  \  -javabootclasspath <path>       Override java boot classpath.\n  -javaextdirs\
  \ <path>             Override java extdirs classpath.\n  -language:<_,feature,-feature>\
  \  Enable or disable language features: `_' for all, `-language:help' to list\n\
  \  -no-specialization              Ignore @specialize annotations.\n  -nobootcp\
  \                       Do not use the boot classpath for the scala jars.\n  -nowarn\
  \                         Generate no warnings.\n  -optimise                   \
  \    Generates faster bytecode by applying optimisations to the program\n  -print\
  \                          Print program with Scala-specific features removed.\n\
  \  -sourcepath <path>              Specify location(s) of source files.\n  -target:<target>\
  \                Target platform for object files. All JVM 1.5 targets are deprecated.\
  \ (jvm-1.5,jvm-1.6,jvm-1.7,jvm-1.8) default:jvm-1.6\n  -toolcp <path>          \
  \        Add to the runner classpath.\n  -unchecked                      Enable\
  \ additional warnings where generated code depends on assumptions.\n  -uniqid  \
  \                       Uniquely tag all identifiers in debugging output.\n  -usejavacp\
  \                      Utilize the java.class.path in classpath resolution.\n  -usemanifestcp\
  \                  Utilize the manifest in classpath resolution.\n  -verbose   \
  \                     Output messages about what the compiler is doing.\n  -version\
  \                        Print product version and exit.\n  @<file>            \
  \             A text file containing compiler arguments (options and source files)\n"
generated_using: []
