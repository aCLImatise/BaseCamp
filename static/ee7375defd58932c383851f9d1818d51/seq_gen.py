from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Seq_Gen_V0_1_0 = CommandToolBuilder(tool="seq_gen", base_command=["seq-gen"], inputs=[ToolInput(tag="in__sequence_length", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc=": # = sequence length [default = 1000].")), ToolInput(tag="in_simulated_datasets_tree", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc=": # = simulated datasets per tree [default = 1].")), ToolInput(tag="in_number_partitions_trees", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc=": # = number of partitions (and trees) per sequence [default = 1].")), ToolInput(tag="in_branch_length_scaling", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc=": # = branch length scaling factor [default = 1.0].")), ToolInput(tag="in_total_tree_scale", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc=": # = total tree scale [default = use branch lengths].")), ToolInput(tag="in_use_sequence_alignment", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc=": # = use sequence k as ancestral (needs alignment) [default = random].")), ToolInput(tag="in_model_hky_f", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc=": MODEL = HKY, F84, GTR, JTT, WAG, PAM, BLOSUM, MTREV, CPREV45, MTART, LG, GENERAL\nHKY, F84 & GTR are for nucleotides the rest are for amino acids")), ToolInput(tag="in_shape_alpha_gamma", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc=": # = shape (alpha) for gamma rate heterogeneity [default = none].")), ToolInput(tag="in_number_gamma_rate", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc=": # = number of gamma rate categories [default = continuous].")), ToolInput(tag="in_proportion_invariable_sites", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc=": # = proportion of invariable sites [default = 0.0].")), ToolInput(tag="in_rates_codon_position", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc=": #1 #2 #3 = rates for codon position heterogeneity [default = none].")), ToolInput(tag="in__transitiontransversion_ratio", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc=": # = transition-transversion ratio [default = equal rate].")), ToolInput(tag="in_general_rate_matrix", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc=": #1 #2 #3 #4 #5 #6= general rate matrix [default = all 1.0].")), ToolInput(tag="in_c_g_t", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc=": #A #C #G #T = nucleotide frequencies [default = all equal].")), ToolInput(tag="in_seed_random_number", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc=": # = seed for random number generator [default = system generated].")), ToolInput(tag="in_output_file_format", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc=": Output file format [default = PHYLIP]\np PHYLIP format\nr relaxed PHYLIP format\nn NEXUS format\nf FASTA format")), ToolInput(tag="in_write_additional_information", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc=": Write additional information [default = none]\na Write ancestral sequences for each node\nr Write rate for each site")), ToolInput(tag="in_name_text_file", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc=": NAME = a text file to insert after every dataset [default = none].")), ToolInput(tag="in__quiet", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc=": Quiet"))], outputs=[ToolOutput(tag="out_output_file_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_format", type_hint=File()), doc=OutputDocumentation(doc=": Output file format [default = PHYLIP]\np PHYLIP format\nr relaxed PHYLIP format\nn NEXUS format\nf FASTA format"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seq_Gen_V0_1_0().translate("wdl", allow_empty_container=True)

