from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int

Process_Shortreads_V0_1_0 = CommandToolBuilder(tool="process_shortreads", base_command=["process_shortreads"], inputs=[ToolInput(tag="in_inline_null", input_type=Boolean(optional=True), prefix="--inline-null", doc=InputDocumentation(doc=":   barcode is inline with sequence, occurs only on single-end read (default).")), ToolInput(tag="in_index_null", input_type=Boolean(optional=True), prefix="--index-null", doc=InputDocumentation(doc=":    barcode is provded in FASTQ header (Illumina i5 or i7 read).")), ToolInput(tag="in_null_index", input_type=Boolean(optional=True), prefix="--null-index", doc=InputDocumentation(doc=":    barcode is provded in FASTQ header (Illumina i7 read if both i5 and i7 read are provided).")), ToolInput(tag="in_inline_inline", input_type=Boolean(optional=True), prefix="--inline-inline", doc=InputDocumentation(doc=": barcode is inline with sequence, occurs on single and paired-end read.")), ToolInput(tag="in_index_index", input_type=Boolean(optional=True), prefix="--index-index", doc=InputDocumentation(doc=":   barcode is provded in FASTQ header (Illumina i5 and i7 reads).")), ToolInput(tag="in_inline_index", input_type=Boolean(optional=True), prefix="--inline-index", doc=InputDocumentation(doc=":  barcode is inline with sequence on single-end read and occurs in FASTQ header (from either i5 or i7 read).")), ToolInput(tag="in_index_inline", input_type=Boolean(optional=True), prefix="--index-inline", doc=InputDocumentation(doc=":  barcode occurs in FASTQ header (Illumina i5 or i7 read) and is inline with single-end sequence (for single-end data) on paired-end read (for paired-end data).")), ToolInput(tag="in_adapter_one", input_type=Int(optional=True), prefix="--adapter-1", doc=InputDocumentation(doc=": provide adaptor sequence that may occur on the first read for filtering.")), ToolInput(tag="in_adapter_two", input_type=Int(optional=True), prefix="--adapter-2", doc=InputDocumentation(doc=": provide adaptor sequence that may occur on the paired-read for filtering.")), ToolInput(tag="in_adapter_mm", input_type=Int(optional=True), prefix="--adapter-mm", doc=InputDocumentation(doc=": number of mismatches allowed in the adapter sequence.")), ToolInput(tag="in_retain_header", input_type=Boolean(optional=True), prefix="--retain-header", doc=InputDocumentation(doc=": retain unmodified FASTQ headers in the output.")), ToolInput(tag="in_merge", input_type=Boolean(optional=True), prefix="--merge", doc=InputDocumentation(doc=": if no barcodes are specified, merge all input files into a single output file (or single pair of files).")), ToolInput(tag="in_no_read_trimming", input_type=Boolean(optional=True), prefix="--no-read-trimming", doc=InputDocumentation(doc=": do not trim low quality reads, just discard them.")), ToolInput(tag="in_len_limit", input_type=Int(optional=True), prefix="--len-limit", doc=InputDocumentation(doc=": when trimming sequences, specify the minimum length a sequence must be to keep it (default 31bp).")), ToolInput(tag="in_filter_illumina", input_type=Boolean(optional=True), prefix="--filter-illumina", doc=InputDocumentation(doc=": discard reads that have been marked by Illumina's chastity/purity filter as failing.")), ToolInput(tag="in_barcode_dist", input_type=Boolean(optional=True), prefix="--barcode-dist", doc=InputDocumentation(doc=": provide the distace between barcodes to allow for barcode rescue (default 2)")), ToolInput(tag="in_mate_pair", input_type=Boolean(optional=True), prefix="--mate-pair", doc=InputDocumentation(doc=": raw reads are circularized mate-pair data, first read will be reverse complemented.")), ToolInput(tag="in_no_overhang", input_type=Boolean(optional=True), prefix="--no-overhang", doc=InputDocumentation(doc=": data does not contain an overhang nucleotide between barcode and seqeunce."))], outputs=[], container="quay.io/biocontainers/stacks:2.55--he513fc3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Process_Shortreads_V0_1_0().translate("wdl")

