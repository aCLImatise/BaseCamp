from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String

Huge_Count_Pl_V0_1_0 = CommandToolBuilder(tool="huge_count.pl", base_command=["huge-count.pl"], inputs=[ToolInput(tag="in_token_list", input_type=Boolean(optional=True), prefix="--tokenlist", doc=InputDocumentation(doc="This option is required. Print out all bigrams list.")), ToolInput(tag="in_split", input_type=Int(optional=True), prefix="--split", doc=InputDocumentation(doc="Number of bigrams for each seperated bigrams file.")), ToolInput(tag="in_token", input_type=File(optional=True), prefix="--token", doc=InputDocumentation(doc="Specify a file containing Perl regular expressions that define the\ntokenization scheme for counting.")), ToolInput(tag="in_non_token", input_type=File(optional=True), prefix="--nontoken", doc=InputDocumentation(doc="Specify a file containing Perl regular expressions of non-token\nsequences that are removed prior to tokenization.")), ToolInput(tag="in_stop", input_type=File(optional=True), prefix="--stop", doc=InputDocumentation(doc="Specify a file containing Perl regular expressions of stop words\nthat are to be removed from the output bigrams.")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc="Specify the window size for counting.")), ToolInput(tag="in_remove", input_type=String(optional=True), prefix="--remove", doc=InputDocumentation(doc="Bigrams with counts less than L will be removed from the sample.\nremove must be smaller than uremove.")), ToolInput(tag="in_u_remove", input_type=String(optional=True), prefix="--uremove", doc=InputDocumentation(doc="Bigrams with counts more than L will be removed from the sample.\nuremove must be bigger than remove.")), ToolInput(tag="in_frequency", input_type=String(optional=True), prefix="--frequency", doc=InputDocumentation(doc="Bigrams with counts less than F will not be displayed.\nfrequency must be smaller than ufrequency.")), ToolInput(tag="in_u_frequency", input_type=String(optional=True), prefix="--ufrequency", doc=InputDocumentation(doc="Bigrams with counts more than F will not be displayed.\nufrequency must be bigger than frequency.")), ToolInput(tag="in_new_line", input_type=Boolean(optional=True), prefix="--newLine", doc=InputDocumentation(doc="Prevents bigrams from spanning across the new-line characters.")), ToolInput(tag="in_destination", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_source", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_stop", output_type=File(optional=True), selector=InputSelector(input_to_select="in_stop", type_hint=File()), doc=OutputDocumentation(doc="Specify a file containing Perl regular expressions of stop words\nthat are to be removed from the output bigrams."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Huge_Count_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

