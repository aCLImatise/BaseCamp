from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Float, String, Boolean

Merfishtools_Exp_V0_1_0 = CommandToolBuilder(tool="merfishtools_exp", base_command=["merfishtools", "exp"], inputs=[ToolInput(tag="in_estimate", input_type=File(optional=True), prefix="--estimate", doc=InputDocumentation(doc="Path to write expected value and standard deviation estimates of expression to.\nOutput is formatted into columns: cell, feature, expected value, standard deviation")), ToolInput(tag="in_stats", input_type=File(optional=True), prefix="--stats", doc=InputDocumentation(doc="Path to write global statistics per cell to.\nOutput is formatted into columns: cell, noise-rate")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Seed for shuffling that occurs in EM algorithm.")), ToolInput(tag="in_pzero", input_type=Float(optional=True), prefix="--p0", doc=InputDocumentation(doc="...              Prior probability of 0->1 error [default: 0.04]")), ToolInput(tag="in_p_one", input_type=Float(optional=True), prefix="--p1", doc=InputDocumentation(doc="...              Prior probability of 1->0 error [default: 0.1]")), ToolInput(tag="in_cells", input_type=String(optional=True), prefix="--cells", doc=InputDocumentation(doc="Regular expression to select cells from cell column (see above). [default: .*]")), ToolInput(tag="in_pm_f_window_width", input_type=Boolean(optional=True), prefix="--pmf-window-width", doc=InputDocumentation(doc="<INT,>    Width of the window to calculate PMF for. [default: 100]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use. [default: 1]")), ToolInput(tag="in_codebook_dot", input_type=String(), position=0, doc=InputDocumentation(doc="<READOUTS>        Raw readout data containing molecule assignments to positions.")), ToolInput(tag="in_cell", input_type=String(), position=0, doc=InputDocumentation(doc="feature")), ToolInput(tag="in_hamming_dist", input_type=String(), position=1, doc=InputDocumentation(doc="cell_position_x")), ToolInput(tag="in_cell_position_y", input_type=String(), position=2, doc=InputDocumentation(doc="rna_position_x")), ToolInput(tag="in_rna_position_y", input_type=String(), position=3, doc=InputDocumentation(doc="Otherwise, the official MERFISH binary format is expected."))], outputs=[ToolOutput(tag="out_estimate", output_type=File(optional=True), selector=InputSelector(input_to_select="in_estimate", type_hint=File()), doc=OutputDocumentation(doc="Path to write expected value and standard deviation estimates of expression to.\nOutput is formatted into columns: cell, feature, expected value, standard deviation")), ToolOutput(tag="out_stats", output_type=File(optional=True), selector=InputSelector(input_to_select="in_stats", type_hint=File()), doc=OutputDocumentation(doc="Path to write global statistics per cell to.\nOutput is formatted into columns: cell, noise-rate"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Merfishtools_Exp_V0_1_0().translate("wdl", allow_empty_container=True)

