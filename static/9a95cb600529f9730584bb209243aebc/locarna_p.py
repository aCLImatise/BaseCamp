from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, Float, String

Locarna_P_V0_1_0 = CommandToolBuilder(tool="locarna_p", base_command=["locarna_p"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose. Prints input parameters, sequences and size information.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Be quiet.")), ToolInput(tag="in_in_del", input_type=Int(optional=True), prefix="--indel", doc=InputDocumentation(doc="(-150)\nIndel score. Score contribution of each single base insertion or\ndeletion. Indel opening score and indel score define the affine scoring\nof gaps.")), ToolInput(tag="in_in_del_opening", input_type=Int(optional=True), prefix="--indel-opening", doc=InputDocumentation(doc="(-750)\nIndel opening score. Score contribution of opening an insertion or\ndeletion, i.e. score for a consecutive run of deletions or insertions.\nIndel opening score and indel score define the affine scoring of gaps.")), ToolInput(tag="in_ribo_sum_file", input_type=File(optional=True), prefix="--ribosum-file", doc=InputDocumentation(doc="(RIBOSUM85_60)\nFile specifying the Ribosum base and base-pair similarities. [default:\nuse RIBOSUM85_60 without requiring a Ribosum file.]")), ToolInput(tag="in_use_ribo_sum", input_type=Boolean(optional=True), prefix="--use-ribosum", doc=InputDocumentation(doc="(true)\nUse ribosum scores for scoring base matches and base pair matches; note\nthat tau=0 suppresses any effect on the latter.")), ToolInput(tag="in_match", input_type=Int(optional=True), prefix="--match", doc=InputDocumentation(doc="(50)\nSet score contribution of a base match (unless ribosum scoring).")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="--mismatch", doc=InputDocumentation(doc="(0)\nSet score contribution of a base mismatch (unless ribosum scoring).")), ToolInput(tag="in_struct_weight", input_type=Int(optional=True), prefix="--struct-weight", doc=InputDocumentation(doc="(200)\nMaximal weight of 1/2 arc match. Balances structure vs. sequence score\ncontributions.")), ToolInput(tag="in_exp_prob", input_type=Int(optional=True), prefix="--exp-prob", doc=InputDocumentation(doc="Expected base pair probability. Used as background probability for base\npair scoring [default: calculated from sequence length].")), ToolInput(tag="in_tau", input_type=Int(optional=True), prefix="--tau", doc=InputDocumentation(doc="(50)\nTau factor. Factor for contribution of sequence similarity in an arc\nmatch (in percent). tau=0 does not penalize any sequence information\nincluding compensatory mutations at arc matches, while tau=100 scores\nsequence similarity at ends of base matches (if a scoring matrix like\nribosum is used, this adds the contributions for base pair match from the\nmatrix). [default tau=0!]")), ToolInput(tag="in_temperature_ali_pf", input_type=Int(optional=True), prefix="--temperature-alipf", doc=InputDocumentation(doc="(300)\nTemperature for the /sequence alignment/ partition functions used by the\nprobcons-like sequence-based match/trace probability computation (this\ntemperature is different from the 'physical' temperature of RNA\nfolding!).")), ToolInput(tag="in_pf_scale", input_type=Float(optional=True), prefix="--pf-scale", doc=InputDocumentation(doc="(1.0)\nFactor for scaling the partition functions. Use in order to avoid\noverflow.")), ToolInput(tag="in_extended_pf", input_type=Boolean(optional=True), prefix="--extended-pf", doc=InputDocumentation(doc="Use extended precision for partition function values. This increases\nrun-time and space (less than 2x), however enables handling significantly\nlarger instances.")), ToolInput(tag="in_quad_pf", input_type=Boolean(optional=True), prefix="--quad-pf", doc=InputDocumentation(doc="Use quad precision for partition function values. Even more precision\nthan extended pf, but usually much slower (overrides extended-pf).")), ToolInput(tag="in_write_arc_match_probs", input_type=File(optional=True), prefix="--write-arcmatch-probs", doc=InputDocumentation(doc="Write arcmatch probabilities")), ToolInput(tag="in_write_base_match_probs", input_type=File(optional=True), prefix="--write-basematch-probs", doc=InputDocumentation(doc="Write basematch probabilities")), ToolInput(tag="in_min_am_prob", input_type=Int(optional=True), prefix="--min-am-prob", doc=InputDocumentation(doc="(0.001)\nMinimal arc match probability. Write probabilities for only the arc\nmatchs of at least this probability.")), ToolInput(tag="in_min_bm_prob", input_type=Int(optional=True), prefix="--min-bm-prob", doc=InputDocumentation(doc="(0.001)\nMinimal base match probability. Write probabilities for only the base\nmatchs of at least this probability.")), ToolInput(tag="in_include_am_in_bm", input_type=Boolean(optional=True), prefix="--include-am-in-bm", doc=InputDocumentation(doc="Include arc match cases in base match probabilities")), ToolInput(tag="in_stopwatch", input_type=Boolean(optional=True), prefix="--stopwatch", doc=InputDocumentation(doc="Print run time informations.")), ToolInput(tag="in_min_prob", input_type=Int(optional=True), prefix="--min-prob", doc=InputDocumentation(doc="(0.001)\nMinimal probability. Only base pairs of at least this probability are\ntaken into account.")), ToolInput(tag="in_max_bps_length_ratio", input_type=Int(optional=True), prefix="--max-bps-length-ratio", doc=InputDocumentation(doc="(0.0)\nMaximal ratio of #base pairs divided by sequence length. This serves as a\nsecond filter on the 'significant' base pairs. [default: 0.0 = no\neffect].")), ToolInput(tag="in_max_diff_am", input_type=Int(optional=True), prefix="--max-diff-am", doc=InputDocumentation(doc="(-1)\nMaximal difference for sizes of matched arcs. [-1=off]")), ToolInput(tag="in_max_diff", input_type=Int(optional=True), prefix="--max-diff", doc=InputDocumentation(doc="(-1)\nMaximal difference for positions of alignment traces (and aligned bases).\n[-1=off]")), ToolInput(tag="in_max_diff_at_am", input_type=Int(optional=True), prefix="--max-diff-at-am", doc=InputDocumentation(doc="(-1)\nMaximal difference for positions of alignment traces at arc match ends.\n[-1=off]")), ToolInput(tag="in_max_diff_aln", input_type=File(optional=True), prefix="--max-diff-aln", doc=InputDocumentation(doc="()\nMaximal difference relative to given alignment (file in clustalw format)")), ToolInput(tag="in_max_diff_pw_aln", input_type=Int(optional=True), prefix="--max-diff-pw-aln", doc=InputDocumentation(doc="()\nMaximal difference relative to given alignment (string, delim=AMPERSAND)")), ToolInput(tag="in_max_diff_relax", input_type=Boolean(optional=True), prefix="--max-diff-relax", doc=InputDocumentation(doc="Relax deviation constraints in multiple aligmnent")), ToolInput(tag="in_min_trace_probability", input_type=Int(optional=True), prefix="--min-trace-probability", doc=InputDocumentation(doc="(1e-5)\nMinimal sequence alignment probability of potential traces\n(probability-based sequence alignment envelope) [default=1e-4].")), ToolInput(tag="in_fragment_match_probs", input_type=Boolean(optional=True), prefix="--fragment-match-probs", doc=InputDocumentation(doc="=<'i j k l'>()\nRequests probabilities for the match of fragments [i..j] and [k..l].\nAccepts a ';' separated list of ranges.")), ToolInput(tag="in_max_bp_span", input_type=Int(optional=True), prefix="--maxBPspan", doc=InputDocumentation(doc="(-1)\nLimit maximum base pair span [default=off].")), ToolInput(tag="in_relaxed_anchors", input_type=Boolean(optional=True), prefix="--relaxed-anchors", doc=InputDocumentation(doc="Use relaxed semantics of anchor constraints [default=strict semantics].")), ToolInput(tag="in_constraints_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Report bugs to <will (at) informatik.uni-freiburg.de>."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Locarna_P_V0_1_0().translate("wdl", allow_empty_container=True)

