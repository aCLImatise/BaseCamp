from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Seidr_Roc_V0_1_0 = CommandToolBuilder(tool="seidr_roc", base_command=["seidr", "roc"], inputs=[ToolInput(tag="in_arg_gold_standard", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --gold ] arg                 Gold standard (true edges) input file")), ToolInput(tag="in_n", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --network ] arg              Input SeidrFile [can be positional]")), ToolInput(tag="in_arg_last_score", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --index ] arg (=last score)  Index of score to use")), ToolInput(tag="in_arg_number_consider", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --edges ] arg (=all)         Number of top edges to consider")), ToolInput(tag="in_arg_fraction_include", input_type=Boolean(optional=True), prefix="-E", doc=InputDocumentation(doc="[ --fraction ] arg (=all)      Fraction of gold standard edges to include")), ToolInput(tag="in_arg_number_print", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --points ] arg (=all)        Number of data points to print")), ToolInput(tag="in_arg_list_transcription", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --tfs ] arg                  List of transcription factors to consider")), ToolInput(tag="in_arg_true_negative", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="[ --neg ] arg                  True negative edges")), ToolInput(tag="in_calculate_roc_scores", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --all ]                      Calculate ROC for all scores in the")), ToolInput(tag="in_arg_number_openmp", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --threads ] arg (=1)         Number of OpenMP threads for parallel")), ToolInput(tag="in_force_overwrite_output", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --force ]                    Force overwrite output file if it exists")), ToolInput(tag="in_var_11", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg (=-)         Output file name ['-' for stdout]")), ToolInput(tag="in_sei_dr_file", input_type=String(), position=0, doc=InputDocumentation(doc="OpenMP Options:")), ToolInput(tag="in_sorting", input_type=String(), position=1, doc=InputDocumentation(doc="Common Options:"))], outputs=[ToolOutput(tag="out_force_overwrite_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force_overwrite_output", type_hint=File()), doc=OutputDocumentation(doc="[ --force ]                    Force overwrite output file if it exists")), ToolOutput(tag="out_var_11", output_type=File(optional=True), selector=InputSelector(input_to_select="in_var_11", type_hint=File()), doc=OutputDocumentation(doc="[ --outfile ] arg (=-)         Output file name ['-' for stdout]"))], container="quay.io/biocontainers/seidr:0.14.2--mpi_mpich_h6f92565", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seidr_Roc_V0_1_0().translate("wdl")

