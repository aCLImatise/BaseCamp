from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, Int, String

Multigrmpy_Py_V0_1_0 = CommandToolBuilder(tool="multigrmpy.py", base_command=["multigrmpy.py"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Input file of variants. Must be either JSON or VCF.")), ToolInput(tag="in_manifest", input_type=File(optional=True), prefix="--manifest", doc=InputDocumentation(doc="Manifest of samples with path and bam stats.")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory.")), ToolInput(tag="in_write_alignments", input_type=Directory(optional=True), prefix="--write-alignments", doc=InputDocumentation(doc="Write alignment JSON files into the output folder\n(large!).")), ToolInput(tag="in_infer_read_haplotypes", input_type=Boolean(optional=True), prefix="--infer-read-haplotypes", doc=InputDocumentation(doc="Infer read haplotype paths")), ToolInput(tag="in_reference_sequence", input_type=File(optional=True), prefix="--reference-sequence", doc=InputDocumentation(doc="Reference genome fasta file.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of events to process in parallel.")), ToolInput(tag="in_keep_scratch", input_type=Boolean(optional=True), prefix="--keep-scratch", doc=InputDocumentation(doc="Do not delete temp files.")), ToolInput(tag="in_scratch_dir", input_type=Directory(optional=True), prefix="--scratch-dir", doc=InputDocumentation(doc="Directory for temp files")), ToolInput(tag="in_gr_mpy", input_type=File(optional=True), prefix="--grmpy", doc=InputDocumentation(doc="Path to the grmpy executable")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logfile", doc=InputDocumentation(doc="Write logging information into file rather than to")), ToolInput(tag="in_k_lib_sequence_matching", input_type=String(optional=True), prefix="--klib-sequence-matching", doc=InputDocumentation(doc="Use klib smith waterman aligner.")), ToolInput(tag="in_km_er_sequence_matching", input_type=String(optional=True), prefix="--kmer-sequence-matching", doc=InputDocumentation(doc="Use kmer aligner.")), ToolInput(tag="in_bad_align_uniq_km_er_len", input_type=Int(optional=True), prefix="--bad-align-uniq-kmer-len", doc=InputDocumentation(doc="Kmer length for uniqueness check during read\nfiltering.")), ToolInput(tag="in_no_alt_splitting", input_type=Boolean(optional=True), prefix="--no-alt-splitting", doc=InputDocumentation(doc="Keep long insertion sequences in the graph rather than\ntrimming them at the read / padding length.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Raise logging level from warning to info.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Set logging level to output errors only.")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Log debug level events.")), ToolInput(tag="in_genotyping_parameters", input_type=File(optional=True), prefix="--genotyping-parameters", doc=InputDocumentation(doc="JSON string or file with genotyping model parameters.")), ToolInput(tag="in_max_reads_per_event", input_type=Int(optional=True), prefix="--max-reads-per-event", doc=InputDocumentation(doc="Maximum number of reads to process for a single event.")), ToolInput(tag="in_vcf_split", input_type=String(optional=True), prefix="--vcf-split", doc=InputDocumentation(doc="Mode for splitting the input VCF: lines (default) --\none graph per record ; full -- one graph for the whole\nVCF ; by_id -- use the VCF id column to group adjacent\nrecords ; superloci -- split VCF into blocks where\nrecords are separated by at least read-length\ncharacters")), ToolInput(tag="in_read_length", input_type=Int(optional=True), prefix="--read-length", doc=InputDocumentation(doc="Read length -- this is used to add reference padding\nwhen converting VCF to graphs.")), ToolInput(tag="in_max_ref_node_length", input_type=Int(optional=True), prefix="--max-ref-node-length", doc=InputDocumentation(doc="Maximum length of reference nodes before they get\npadded and truncated.")), ToolInput(tag="in_retrieve_reference_sequence", input_type=Boolean(optional=True), prefix="--retrieve-reference-sequence", doc=InputDocumentation(doc="Retrieve reference sequence for REF nodes")), ToolInput(tag="in_graph_type", input_type=String(optional=True), prefix="--graph-type", doc=InputDocumentation(doc="Type of complex graph to generate. Same as --graph-\ntype in vcf2paragraph.")), ToolInput(tag="in_ins_info_key", input_type=String(optional=True), prefix="--ins-info-key", doc=InputDocumentation(doc="Key in INFO field to indicate sequence of symbolic\n<INS>\n")), ToolInput(tag="in_stderr", input_type=String(), position=0, doc=InputDocumentation(doc="--graph-sequence-matching GRAPH_SEQUENCE_MATCHING"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory.")), ToolOutput(tag="out_write_alignments", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_write_alignments", type_hint=File()), doc=OutputDocumentation(doc="Write alignment JSON files into the output folder\n(large!)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Multigrmpy_Py_V0_1_0().translate("wdl", allow_empty_container=True)

