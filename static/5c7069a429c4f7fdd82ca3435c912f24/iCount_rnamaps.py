from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Icount_Rnamaps_V0_1_0 = CommandToolBuilder(tool="iCount_rnamaps", base_command=["iCount", "rnamaps"], inputs=[ToolInput(tag="in_implicit_handling", input_type=Boolean(optional=True), prefix="--implicit_handling", doc=InputDocumentation(doc="Can be 'closest' or 'split'. In case of implicit read - split score to\nboth neighbours or give it just to the closest neighbour (default: closest)")), ToolInput(tag="in_mismatches", input_type=Boolean(optional=True), prefix="--mismatches", doc=InputDocumentation(doc="Reads on same position with random barcode differing less than\n``mismatches`` are grouped together (default: 2)")), ToolInput(tag="in_mapq_th", input_type=Boolean(optional=True), prefix="--mapq_th", doc=InputDocumentation(doc="Ignore hits with MAPQ < mapq_th (default: 0)")), ToolInput(tag="in_holesize_th", input_type=Boolean(optional=True), prefix="--holesize_th", doc=InputDocumentation(doc="Raeads with size of holes less than holesize_th are treted as if they\nwould have no holes (default: 4)")), ToolInput(tag="in_stdout_log", input_type=Boolean(optional=True), prefix="--stdout_log", doc=InputDocumentation(doc="Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.")), ToolInput(tag="in_file_log", input_type=Boolean(optional=True), prefix="--file_log", doc=InputDocumentation(doc="Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.")), ToolInput(tag="in_file_log_path", input_type=Boolean(optional=True), prefix="--file_logpath", doc=InputDocumentation(doc="Path to log file.")), ToolInput(tag="in_results_file", input_type=Boolean(optional=True), prefix="--results_file", doc=InputDocumentation(doc="File into which to store Metrics.")), ToolInput(tag="in_rna_map_type", input_type=String(), position=0, doc=InputDocumentation(doc="position    all     explicit")), ToolInput(tag="in_bam", input_type=String(), position=0, doc=InputDocumentation(doc="BAM file with alligned reads")), ToolInput(tag="in_segmentation", input_type=String(), position=1, doc=InputDocumentation(doc="GTF file with segmentation. Should be a file produced by function\n`get_regions`")), ToolInput(tag="in_out_file", input_type=String(), position=2, doc=InputDocumentation(doc="Output file with analysis results")), ToolInput(tag="in_strange", input_type=String(), position=3, doc=InputDocumentation(doc="File with strange propertieas obtained when processing bam file")), ToolInput(tag="in_cross_transcript", input_type=String(), position=4, doc=InputDocumentation(doc="File with reads spanning over multiple transcripts or multiple genes"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Icount_Rnamaps_V0_1_0().translate("wdl", allow_empty_container=True)

