from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String, File

Set_Finder_V0_1_0 = CommandToolBuilder(tool="set_finder", base_command=["set_finder"], inputs=[ToolInput(tag="in_all", input_type=Boolean(optional=True), prefix="--all", doc=InputDocumentation(doc="Find all cliques.")), ToolInput(tag="in_single", input_type=Boolean(optional=True), prefix="--single", doc=InputDocumentation(doc="Find only one clique (default).")), ToolInput(tag="in_weight", input_type=Boolean(optional=True), prefix="--weight", doc=InputDocumentation(doc="Tell only maximum weight (no faster than -s).")), ToolInput(tag="in_min", input_type=Int(optional=True), prefix="--min", doc=InputDocumentation(doc="Search for cliques with weight at least N.  If N=0,\nsearches for maximum weight clique (default).")), ToolInput(tag="in_max", input_type=Int(optional=True), prefix="--max", doc=InputDocumentation(doc="Search for cliques with weight at most N.  If N=0,\nno limit is imposed (default).  N being positive is\nincompatible with '--min 0' ('--min 1' is assumed).")), ToolInput(tag="in_bg_freq", input_type=String(optional=True), prefix="--bg_freq", doc=InputDocumentation(doc="Minimum value for genome_length/primer_counts in a set.")), ToolInput(tag="in_bg_len", input_type=Int(optional=True), prefix="--bg_len", doc=InputDocumentation(doc="Length of the background genome (in bases).")), ToolInput(tag="in_maximal", input_type=Boolean(optional=True), prefix="--maximal", doc=InputDocumentation(doc="Require cliques to be maximal.")), ToolInput(tag="in_unweighted", input_type=Boolean(optional=True), prefix="--unweighted", doc=InputDocumentation(doc="Assume weight 1 for all vertices.")), ToolInput(tag="in_from_zero", input_type=Boolean(optional=True), prefix="--from-0", doc=InputDocumentation(doc="Number vertices 0 to n-1 instead of 1 to n when writing.")), ToolInput(tag="in_reorder", input_type=String(optional=True), prefix="--reorder", doc=InputDocumentation(doc="Reorder with function F.  See below for details.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppresses progress output.  Specifying -q twice\nsuppresses all output except the actual result.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output results to file F.")), ToolInput(tag="in_none", input_type=String(), position=0, doc=InputDocumentation(doc="No ordering (same order as in the file).")), ToolInput(tag="in_reverse", input_type=String(), position=1, doc=InputDocumentation(doc="Reverse order as in the file.")), ToolInput(tag="in_default", input_type=String(), position=2, doc=InputDocumentation(doc="One of the two below, depending on weightedness.")), ToolInput(tag="in_unweighted_coloring", input_type=String(), position=3, doc=InputDocumentation(doc="Coloring method efficient for unweighted graphs.")), ToolInput(tag="in_weighted_coloring", input_type=String(), position=4, doc=InputDocumentation(doc="Coloring method efficient for weighted graphs.")), ToolInput(tag="in_degree", input_type=String(), position=5, doc=InputDocumentation(doc="Order by ascending degree.")), ToolInput(tag="in_random", input_type=String(), position=6, doc=InputDocumentation(doc="Random order."))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output results to file F."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Set_Finder_V0_1_0().translate("wdl", allow_empty_container=True)

