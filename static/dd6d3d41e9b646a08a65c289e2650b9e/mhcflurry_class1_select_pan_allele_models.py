from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Int, String

Mhcflurry_Class1_Select_Pan_Allele_Models_V0_1_0 = CommandToolBuilder(tool="mhcflurry_class1_select_pan_allele_models", base_command=["mhcflurry-class1-select-pan-allele-models"], inputs=[ToolInput(tag="in_data", input_type=File(optional=True), prefix="--data", doc=InputDocumentation(doc="Model selection data CSV. Expected columns: allele,\npeptide, measurement_value")), ToolInput(tag="in_models_dir", input_type=Directory(optional=True), prefix="--models-dir", doc=InputDocumentation(doc="Directory to read models")), ToolInput(tag="in_out_models_dir", input_type=Directory(optional=True), prefix="--out-models-dir", doc=InputDocumentation(doc="Directory to write selected models")), ToolInput(tag="in_min_models_per_fold", input_type=Int(optional=True), prefix="--min-models-per-fold", doc=InputDocumentation(doc="Min number of models to select per fold")), ToolInput(tag="in_max_models_per_fold", input_type=Int(optional=True), prefix="--max-models-per-fold", doc=InputDocumentation(doc="Max number of models to select per fold")), ToolInput(tag="in_mass_spec_regex", input_type=String(optional=True), prefix="--mass-spec-regex", doc=InputDocumentation(doc="Regular expression for mass-spec data. Runs on\nmeasurement_source col.Default: mass[- ]spec.")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Keras verbosity. Default: 0")), ToolInput(tag="in_num_jobs", input_type=Int(optional=True), prefix="--num-jobs", doc=InputDocumentation(doc="Number of local processes to parallelize training\nover. Set to 0 for serial run. Default: 0.")), ToolInput(tag="in_backend", input_type=String(optional=True), prefix="--backend", doc=InputDocumentation(doc="Keras backend. If not specified will use system\ndefault.")), ToolInput(tag="in_gpus", input_type=Int(optional=True), prefix="--gpus", doc=InputDocumentation(doc="Number of GPUs to attempt to parallelize across.\nRequires running in parallel.")), ToolInput(tag="in_max_workers_per_gpu", input_type=Int(optional=True), prefix="--max-workers-per-gpu", doc=InputDocumentation(doc="Maximum number of workers to assign to a GPU.\nAdditional tasks will run on CPU.")), ToolInput(tag="in_max_tasks_per_worker", input_type=Int(optional=True), prefix="--max-tasks-per-worker", doc=InputDocumentation(doc="Restart workers after N tasks. Workaround for\ntensorflow memory leaks. Requires Python >=3.2.")), ToolInput(tag="in_worker_log_dir", input_type=Directory(optional=True), prefix="--worker-log-dir", doc=InputDocumentation(doc="Write worker stdout and stderr logs to given\ndirectory.")), ToolInput(tag="in_cluster_submit_command", input_type=String(optional=True), prefix="--cluster-submit-command", doc=InputDocumentation(doc="Default: sh")), ToolInput(tag="in_cluster_results_workdir", input_type=String(optional=True), prefix="--cluster-results-workdir", doc=InputDocumentation(doc="Default: ./cluster-workdir")), ToolInput(tag="in_additional_complete_file", input_type=File(optional=True), prefix="--additional-complete-file", doc=InputDocumentation(doc="Additional file to monitor for job completion.\nDefault: STDERR")), ToolInput(tag="in_cluster_script_prefix_path", input_type=File(optional=True), prefix="--cluster-script-prefix-path", doc=InputDocumentation(doc="How many times to rerun failing jobs. Default: 3\n")), ToolInput(tag="in_model", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_select", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_class_one", input_type=Int(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_pan_allele", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_models_dot", input_type=String(), position=4, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/mhcflurry:2.0.1--pyh864c0ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mhcflurry_Class1_Select_Pan_Allele_Models_V0_1_0().translate("wdl")

