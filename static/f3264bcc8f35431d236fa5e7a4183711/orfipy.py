from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, String, File

Orfipy_V0_1_0 = CommandToolBuilder(tool="orfipy", base_command=["orfipy"], inputs=[ToolInput(tag="in_procs", input_type=Int(optional=True), prefix="--procs", doc=InputDocumentation(doc="Num processor cores to use Default:mp.cpu_count()")), ToolInput(tag="in_single_mode", input_type=Boolean(optional=True), prefix="--single-mode", doc=InputDocumentation(doc="Run in single mode i.e. no parallel processing\n(SLOWER). If supplied with procs, this is ignored.\nDefault: False")), ToolInput(tag="in_table", input_type=Int(optional=True), prefix="--table", doc=InputDocumentation(doc="The codon table number to use or path to .json file\nwith codon table. Use --show-tables to see available\ntables compiled from: https://www.ncbi.nlm.nih.gov/Tax\nonomy/Utils/wprintgc.cgi?chapter=cgencodes Default: 1")), ToolInput(tag="in_start", input_type=String(optional=True), prefix="--start", doc=InputDocumentation(doc="Comma-separated list of start-codons. This will\noverride start codons described in translation table.\nE.g. '--start ATG,ATT' Default: Derived from the\ntranslation table selected")), ToolInput(tag="in_stop", input_type=String(optional=True), prefix="--stop", doc=InputDocumentation(doc="Comma-separated list of stop codons. This will\noverride stop codons described in translation table.\nE.g. '--start TAG,TTT' Default: Derived from the\ntranslation table selected")), ToolInput(tag="in_outdir", input_type=File(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Path to outdir default: orfipy_<infasta>_out")), ToolInput(tag="in_be_done_two", input_type=File(optional=True), prefix="--bed12", doc=InputDocumentation(doc="bed12 out file Default: None")), ToolInput(tag="in_bed", input_type=File(optional=True), prefix="--bed", doc=InputDocumentation(doc="bed out file Default: None")), ToolInput(tag="in_dna", input_type=File(optional=True), prefix="--dna", doc=InputDocumentation(doc="fasta (DNA) out file Default: None")), ToolInput(tag="in_rna", input_type=File(optional=True), prefix="--rna", doc=InputDocumentation(doc="fasta (RNA) out file Default: None")), ToolInput(tag="in_pep", input_type=File(optional=True), prefix="--pep", doc=InputDocumentation(doc="fasta (peptide) out file Default: None")), ToolInput(tag="in_min", input_type=Int(optional=True), prefix="--min", doc=InputDocumentation(doc="Minimum length of ORF, excluding stop codon\n(nucleotide) Default: 30")), ToolInput(tag="in_max", input_type=Int(optional=True), prefix="--max", doc=InputDocumentation(doc="Maximum length of ORF, excluding stop codon\n(nucleotide) Default: 1,000,000,000")), ToolInput(tag="in_strand", input_type=String(optional=True), prefix="--strand", doc=InputDocumentation(doc="Strands to find ORFs [(f)orward,(r)everse,(b)oth]\nDefault: b")), ToolInput(tag="in_partial_three", input_type=Boolean(optional=True), prefix="--partial-3", doc=InputDocumentation(doc="Output ORFs with a start codon but lacking an inframe\nstop codon. E.g. 'ATG TTT AAA' Default: False")), ToolInput(tag="in_partial_five", input_type=Boolean(optional=True), prefix="--partial-5", doc=InputDocumentation(doc="Output ORFs with an inframe stop codon lacking an\ninframe start codon. E.g. 'TTT AAA TAG' Default: False")), ToolInput(tag="in_between_stops", input_type=Boolean(optional=True), prefix="--between-stops", doc=InputDocumentation(doc="Output ORFs defined as regions between stop codons\n(regions free of stop codon). This will set\n--partial-3 and --partial-5 true. Default: False")), ToolInput(tag="in_include_stop", input_type=Boolean(optional=True), prefix="--include-stop", doc=InputDocumentation(doc="Include stop codon in the results, if a stop codon\nexists. This output format is compatible with\nTransDecoder's which includes stop codon coordinates\nDefault: False")), ToolInput(tag="in_longest", input_type=File(optional=True), prefix="--longest", doc=InputDocumentation(doc="Output a separate BED file for longest ORFs per\nsequence. Requires bed option. Default: False")), ToolInput(tag="in_by_frame", input_type=Boolean(optional=True), prefix="--by-frame", doc=InputDocumentation(doc="Output separate BED files for ORFs by frame. Can be\ncombined with '--longest' to output longest ORFs in\neach frame. Requires bed option. Default: False")), ToolInput(tag="in_chunk_size", input_type=Int(optional=True), prefix="--chunk-size", doc=InputDocumentation(doc="Max chunk size in MB. This is useful for limiting\nmemory usage when processing large fasta files using\nmultiple processes The files are processed in chunks\nif file size is greater than chunk-size. By default\norfipy computes the chunk size based on available\nmemory and cpu cores. Providing a smaller chunk-size\nwill lower the memory usage but, actual memory used by\norfipy can be more than the chunk-size. Providing a\nvery high chunk-size can lead to memory issues for\nlarger sequences such as large chromosomes. It is best\nto let orfipy decide on the chunk-size. Default:\nestimated by orfipy based on system memory and cpu")), ToolInput(tag="in_show_tables", input_type=Boolean(optional=True), prefix="--show-tables", doc=InputDocumentation(doc="Print translation tables and exit. Default: False")), ToolInput(tag="in_in_file", input_type=String(), position=0, doc=InputDocumentation(doc="The input file, in plain Fasta/Fastq or gzipped\nformat, containing Nucletide sequences"))], outputs=[ToolOutput(tag="out_be_done_two", output_type=File(optional=True), selector=InputSelector(input_to_select="in_be_done_two", type_hint=File()), doc=OutputDocumentation(doc="bed12 out file Default: None")), ToolOutput(tag="out_bed", output_type=File(optional=True), selector=InputSelector(input_to_select="in_bed", type_hint=File()), doc=OutputDocumentation(doc="bed out file Default: None")), ToolOutput(tag="out_dna", output_type=File(optional=True), selector=InputSelector(input_to_select="in_dna", type_hint=File()), doc=OutputDocumentation(doc="fasta (DNA) out file Default: None")), ToolOutput(tag="out_rna", output_type=File(optional=True), selector=InputSelector(input_to_select="in_rna", type_hint=File()), doc=OutputDocumentation(doc="fasta (RNA) out file Default: None")), ToolOutput(tag="out_pep", output_type=File(optional=True), selector=InputSelector(input_to_select="in_pep", type_hint=File()), doc=OutputDocumentation(doc="fasta (peptide) out file Default: None")), ToolOutput(tag="out_longest", output_type=File(optional=True), selector=InputSelector(input_to_select="in_longest", type_hint=File()), doc=OutputDocumentation(doc="Output a separate BED file for longest ORFs per\nsequence. Requires bed option. Default: False"))], container="quay.io/biocontainers/orfipy:0.0.3--py37h9a982cc_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Orfipy_V0_1_0().translate("wdl")

