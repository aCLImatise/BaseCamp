from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Tetranscripts_V0_1_0 = CommandToolBuilder(tool="TEtranscripts", base_command=["TEtranscripts"], inputs=[ToolInput(tag="in_te", input_type=File(optional=True), prefix="--TE", doc=InputDocumentation(doc="[--format [input file format]]")), ToolInput(tag="in_sample_treatmentmutant_treatmentmutant", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="sample [treatment sample ...], --treatment treatment sample [treatment sample ...]\nSample files in group 1 (e.g. treatment/mutant)")), ToolInput(tag="in_sample_controlwildtype_controlwildtype", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="sample [control sample ...], --control control sample [control sample ...]\nSample files in group 2 (e.g. control/wildtype)")), ToolInput(tag="in_gtf", input_type=File(optional=True), prefix="--GTF", doc=InputDocumentation(doc="GTF file for gene annotations")), ToolInput(tag="in_format", input_type=Boolean(optional=True), prefix="--format", doc=InputDocumentation(doc="[input file format]\nInput file format: BAM or SAM. DEFAULT: BAM")), ToolInput(tag="in_stranded", input_type=Boolean(optional=True), prefix="--stranded", doc=InputDocumentation(doc="[option]   Is this a stranded library? (no, forward, or reverse).\nFor 'first-strand' cDNA libraries (e.g. TruSeq\nstranded), choose reverse. For 'second-strand' cDNA\nlibraries (e.g. QIAseq stranded), choose forward.\nDEFAULT: no.")), ToolInput(tag="in_mode", input_type=Boolean(optional=True), prefix="--mode", doc=InputDocumentation(doc="[TE counting mode]\nHow to count TE: uniq (unique mappers only), or multi\n(distribute among all alignments). DEFAULT: multi")), ToolInput(tag="in_project", input_type=Boolean(optional=True), prefix="--project", doc=InputDocumentation(doc="[name]      Name of this project. DEFAULT: TEtranscripts_out")), ToolInput(tag="in_fdr_cutoff_significance", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[pvalue], --padj [pvalue]\nFDR cutoff for significance. DEFAULT: 0.05")), ToolInput(tag="in_foldchange_ratio_absolute", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[foldchange], --foldchange [foldchange]\nFold-change ratio (absolute) cutoff for differential\nexpression. DEFAULT: 1")), ToolInput(tag="in_min_read", input_type=Boolean(optional=True), prefix="--minread", doc=InputDocumentation(doc="[min_read]  read count cutoff. genes/TEs with reads less than the\ncutoff will not be considered. DEFAULT: 1")), ToolInput(tag="in_de_seq", input_type=Boolean(optional=True), prefix="--DESeq", doc=InputDocumentation(doc="Use DESeq (instead of DESeq2) for differential")), ToolInput(tag="in_number_run_default", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[iteration], --iteration [iteration]\nnumber of iteration to run the optimization. DEFAULT:\n100")), ToolInput(tag="in_max_l", input_type=Boolean(optional=True), prefix="--maxL", doc=InputDocumentation(doc="[maxL]         maximum fragment length. DEFAULT:500")), ToolInput(tag="in_min_l", input_type=Boolean(optional=True), prefix="--minL", doc=InputDocumentation(doc="[minL]         minimum fragment length. DEFAULT:0")), ToolInput(tag="in_average_fragment_length", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="[fragLength], --fragmentLength [fragLength]\naverage fragment length for single end reads. For\npaired-end, estimated from the input alignment file.\nDEFAULT: for paired-end, estimate from the input\nalignment file; for single-end, ignored by default.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="[verbose]   Set verbose level. 0: only show critical message, 1:\nshow additional warning message, 2: show process\ninformation, 3: show debug messages. DEFAULT:2")), ToolInput(tag="in_analysis_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-n [normalization], --norm [normalization]")), ToolInput(tag="in_de_seq_default", input_type=String(), position=0, doc=InputDocumentation(doc="--sortByPos           Alignment files are sorted by chromosome position."))], outputs=[], container="quay.io/biocontainers/tetranscripts:2.2.1--pyh864c0ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tetranscripts_V0_1_0().translate("wdl")

