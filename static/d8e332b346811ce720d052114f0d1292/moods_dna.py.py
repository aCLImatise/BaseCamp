from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Array, String, File, Float

Moods_Dna_Py_V0_1_0 = CommandToolBuilder(tool="moods_dna.py", base_command=["moods-dna.py"], inputs=[ToolInput(tag="in_verbosity", input_type=Boolean(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="verbose (-vv, -vvv for more)")), ToolInput(tag="in_matrices", input_type=Array(t=String(), optional=True), prefix="--matrices", doc=InputDocumentation(doc="matrix files (count/frequency, will be converted to\nPWM before matching)")), ToolInput(tag="in_score_matrices", input_type=Array(t=String(), optional=True), prefix="--score-matrices", doc=InputDocumentation(doc="matrix files (PWM/other score matrix, will be matched\ndirectly)")), ToolInput(tag="in_sequences", input_type=Array(t=String(), optional=True), prefix="--sequences", doc=InputDocumentation(doc="sequence files")), ToolInput(tag="in_p_value", input_type=String(optional=True), prefix="--p-value", doc=InputDocumentation(doc="compute threshold from p-value")), ToolInput(tag="in_threshold", input_type=String(optional=True), prefix="--threshold", doc=InputDocumentation(doc="use specified absolute threshold")), ToolInput(tag="in_best_hits", input_type=String(optional=True), prefix="--best-hits", doc=InputDocumentation(doc="return at least the specified amount of best matches")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="output to file instead of standard output")), ToolInput(tag="in_sep", input_type=String(optional=True), prefix="--sep", doc=InputDocumentation(doc="set field separator in out (default ',')")), ToolInput(tag="in_no_rc", input_type=Boolean(optional=True), prefix="--no-rc", doc=InputDocumentation(doc="disable matching versus reverse complement strand")), ToolInput(tag="in_no_snps", input_type=Boolean(optional=True), prefix="--no-snps", doc=InputDocumentation(doc="ignore IUPAC symbols coding multiple nucleotides")), ToolInput(tag="in_batch", input_type=Boolean(optional=True), prefix="--batch", doc=InputDocumentation(doc="do not recompute thresholds from p-values for each\nsequence separately (recommended when dealing with\nlots of short sequences)")), ToolInput(tag="in_bg", input_type=Float(optional=True), prefix="--bg", doc=InputDocumentation(doc="pC pG pT      background distribution for computing thresholds from\np-value with --batch (default is 0.25 for all alleles)")), ToolInput(tag="in_ps", input_type=Float(optional=True), prefix="--ps", doc=InputDocumentation(doc="total pseudocount added to each matrix column in log-\nodds conversion (default = 0.01)")), ToolInput(tag="in_log_base", input_type=String(optional=True), prefix="--log-base", doc=InputDocumentation(doc="logarithm base for log-odds conversion (default\nnatural logarithm)")), ToolInput(tag="in_lo_bg", input_type=Float(optional=True), prefix="--lo-bg", doc=InputDocumentation(doc="pC pG pT   background distribution for log-odds conversion\n(default is 0.25 for all alleles)")), ToolInput(tag="in_threshold_precision", input_type=Float(optional=True), prefix="--threshold-precision", doc=InputDocumentation(doc="specify the precision used for computing the\nthresholds from p-values (default = 2000.0)\n"))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc="output to file instead of standard output"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Moods_Dna_Py_V0_1_0().translate("wdl", allow_empty_container=True)

