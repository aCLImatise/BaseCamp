from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, Float, String

Sniffles_Debug_V0_1_0 = CommandToolBuilder(tool="sniffles_debug", base_command=["sniffles-debug"], inputs=[ToolInput(tag="in_mapped_reads", input_type=File(optional=True), prefix="--mapped_reads", doc=InputDocumentation(doc="(required)  Sorted bam File")), ToolInput(tag="in_vcf", input_type=File(optional=True), prefix="--vcf", doc=InputDocumentation(doc="VCF output file name []")), ToolInput(tag="in_bed_pe", input_type=File(optional=True), prefix="--bedpe", doc=InputDocumentation(doc="bedpe output file name []")), ToolInput(tag="in_ivcf", input_type=File(optional=True), prefix="--Ivcf", doc=InputDocumentation(doc="Input VCF file name. Enable force calling []")), ToolInput(tag="in_tmp_file", input_type=File(optional=True), prefix="--tmp_file", doc=InputDocumentation(doc="path to temporary file otherwise Sniffles will use the current directory. []")), ToolInput(tag="in_min_support", input_type=Int(optional=True), prefix="--min_support", doc=InputDocumentation(doc="Minimum number of reads that support a SV. [10]")), ToolInput(tag="in_max_num_splits", input_type=Int(optional=True), prefix="--max_num_splits", doc=InputDocumentation(doc="Maximum number of splits per read to be still taken into account. [7]")), ToolInput(tag="in_max_distance", input_type=Int(optional=True), prefix="--max_distance", doc=InputDocumentation(doc="Maximum distance to group SV together. [1000]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use. [3]")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min_length", doc=InputDocumentation(doc="Minimum length of SV to be reported. [30]")), ToolInput(tag="in_min_mapping_qual", input_type=Int(optional=True), prefix="--minmapping_qual", doc=InputDocumentation(doc="Minimum Mapping Quality. [20]")), ToolInput(tag="in_num_reads_report", input_type=Int(optional=True), prefix="--num_reads_report", doc=InputDocumentation(doc="Report up to N reads that support the SV in the vcf file. -1: report all. [0]")), ToolInput(tag="in_min_seq_size", input_type=Int(optional=True), prefix="--min_seq_size", doc=InputDocumentation(doc="Discard read if non of its segment is larger then this. [2000]")), ToolInput(tag="in_min_z_mw", input_type=Int(optional=True), prefix="--min_zmw", doc=InputDocumentation(doc="Discard SV that are not supported by at least x zmws. This applies only for PacBio recognizable reads. [0]")), ToolInput(tag="in_cs_string", input_type=Boolean(optional=True), prefix="--cs_string", doc=InputDocumentation(doc="Enables the scan of CS string instead of Cigar and MD.  [false]")), ToolInput(tag="in_genotype", input_type=Boolean(optional=True), prefix="--genotype", doc=InputDocumentation(doc="Inactivated: Automatically true. [true]")), ToolInput(tag="in_cluster", input_type=Boolean(optional=True), prefix="--cluster", doc=InputDocumentation(doc="Enables Sniffles to phase SVs that occur on the same reads [false]")), ToolInput(tag="in_cluster_support", input_type=Int(optional=True), prefix="--cluster_support", doc=InputDocumentation(doc="Minimum number of reads supporting clustering of SV. [1]")), ToolInput(tag="in_allele_freq", input_type=Float(optional=True), prefix="--allelefreq", doc=InputDocumentation(doc="Threshold on allele frequency (0-1).  [0]")), ToolInput(tag="in_min_homo_af", input_type=Float(optional=True), prefix="--min_homo_af", doc=InputDocumentation(doc="Threshold on allele frequency (0-1).  [0.8]")), ToolInput(tag="in_min_het_af", input_type=Float(optional=True), prefix="--min_het_af", doc=InputDocumentation(doc="Threshold on allele frequency (0-1).  [0.3]")), ToolInput(tag="in_report_bnd", input_type=Boolean(optional=True), prefix="--report_BND", doc=InputDocumentation(doc="Dont report BND instead use Tra in vcf output.  [true]")), ToolInput(tag="in_not_report_seq", input_type=Boolean(optional=True), prefix="--not_report_seq", doc=InputDocumentation(doc="Dont report sequences for indels in vcf output. (Beta version!)  [false]")), ToolInput(tag="in_report_seq", input_type=Boolean(optional=True), prefix="--report-seq", doc=InputDocumentation(doc="Inactivated (see not_report_seq). [false]")), ToolInput(tag="in_ignore_sd", input_type=Boolean(optional=True), prefix="--ignore_sd", doc=InputDocumentation(doc="Ignores the sd based filtering.  [false]")), ToolInput(tag="in_ccs_reads", input_type=Boolean(optional=True), prefix="--ccs_reads", doc=InputDocumentation(doc="Preset CCS Pacbio setting. (Beta)  [false]")), ToolInput(tag="in_report_str", input_type=Boolean(optional=True), prefix="--report_str", doc=InputDocumentation(doc="Enables the report of str. (alpha testing)  [false]")), ToolInput(tag="in_skip_parameter_estimation", input_type=Boolean(optional=True), prefix="--skip_parameter_estimation", doc=InputDocumentation(doc="Enables the scan if only very few reads are present.  [false]")), ToolInput(tag="in_del_ratio", input_type=Float(optional=True), prefix="--del_ratio", doc=InputDocumentation(doc="Estimated ration of deletions per read (0-1).  [0.0458369]")), ToolInput(tag="in_ins_ratio", input_type=Float(optional=True), prefix="--ins_ratio", doc=InputDocumentation(doc="Estimated ratio of insertions per read (0-1).  [0.049379]")), ToolInput(tag="in_max_diff_per_window", input_type=Int(optional=True), prefix="--max_diff_per_window", doc=InputDocumentation(doc="Maximum differences per 100bp. [50]")), ToolInput(tag="in_max_dist_aln_events", input_type=Int(optional=True), prefix="--max_dist_aln_events", doc=InputDocumentation(doc="Maximum distance between alignment (indel) events. [4]\n")), ToolInput(tag="in_fritz_dots_ed_la_zeck_at_gmail_dot_com", input_type=String(), position=0, doc=InputDocumentation(doc="Input/Output:"))], outputs=[ToolOutput(tag="out_vcf", output_type=File(optional=True), selector=InputSelector(input_to_select="in_vcf", type_hint=File()), doc=OutputDocumentation(doc="VCF output file name []")), ToolOutput(tag="out_bed_pe", output_type=File(optional=True), selector=InputSelector(input_to_select="in_bed_pe", type_hint=File()), doc=OutputDocumentation(doc="bedpe output file name []"))], container="quay.io/biocontainers/sniffles:1.0.12--h8b12597_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sniffles_Debug_V0_1_0().translate("wdl")

