from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Int, String

Run_Lefse_Py_V0_1_0 = CommandToolBuilder(tool="run_lefse.py", base_command=["run_lefse.py"], inputs=[ToolInput(tag="in_set_file_textualform", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="set the file for exporting the result (only concise textual\nform)")), ToolInput(tag="in_set_value_anova", input_type=Float(optional=True), prefix="-a", doc=InputDocumentation(doc="set the alpha value for the Anova test (default 0.05)")), ToolInput(tag="in_set_value_wilcoxon", input_type=Float(optional=True), prefix="-w", doc=InputDocumentation(doc="set the alpha value for the Wilcoxon test (default 0.05)")), ToolInput(tag="in_set_threshold_absolute", input_type=Float(optional=True), prefix="-l", doc=InputDocumentation(doc="set the threshold on the absolute value of the logarithmic\nLDA score (default 2.0)")), ToolInput(tag="in_n_logs", input_type=Int(optional=True), prefix="--nlogs", doc=InputDocumentation(doc="max log ingluence of LDA coeff")), ToolInput(tag="in_verbose", input_type=Int(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose execution (default 0)")), ToolInput(tag="in_wil_c", input_type=Int(optional=True), prefix="--wilc", doc=InputDocumentation(doc="wheter to perform the Wicoxon step (default 1)")), ToolInput(tag="in_select_lda_svm", input_type=Int(optional=True), prefix="-r", doc=InputDocumentation(doc="select LDA or SVM for effect size (default LDA)")), ToolInput(tag="in_svm_norm", input_type=Int(optional=True), prefix="--svm_norm", doc=InputDocumentation(doc="whether to normalize the data in [0,1] for SVM feature\nwaiting (default 1 strongly suggested)")), ToolInput(tag="in_set_number_bootstrap", input_type=Int(optional=True), prefix="-b", doc=InputDocumentation(doc="set the number of bootstrap iteration for LDA (default 30)")), ToolInput(tag="in_set_perform_only", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="set whether perform the wilcoxon test only among the\nsubclasses with the same name (default 0)")), ToolInput(tag="in_set_ing_curtissapproach", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="set whether perform the wilcoxon test ing the Curtis's\napproach [BETA VERSION] (default 0)")), ToolInput(tag="in_set_subsampling_value", input_type=Float(optional=True), prefix="-f", doc=InputDocumentation(doc="set the subsampling fraction value for each bootstrap\niteration (default 0.66666)")), ToolInput(tag="in_set_multiple_options", input_type=String(optional=True), prefix="-s", doc=InputDocumentation(doc="set the multiple testing correction options. 0 no correction\n(more strict, default), 1 correction for independent\ncomparisons, 2 correction for independent comparison")), ToolInput(tag="in_min_c", input_type=Int(optional=True), prefix="--min_c", doc=InputDocumentation(doc="minimum number of samples per subclass for performing\nwilcoxon test (default 10)")), ToolInput(tag="in_set_title_analysis", input_type=File(optional=True), prefix="-t", doc=InputDocumentation(doc="set the title of the analysis (default input file without\nextension)")), ToolInput(tag="in_multiclass_tasks_set", input_type=String(optional=True), prefix="-y", doc=InputDocumentation(doc="(for multiclass tasks) set whether the test is performed in\na one-against-one ( 1 - more strict!) or in a one-against-\nall setting ( 0 - less strict) (default 0)\n")), ToolInput(tag="in_input_file", input_type=String(), position=0, doc=InputDocumentation(doc="the input file")), ToolInput(tag="in_output_file", input_type=String(), position=1, doc=InputDocumentation(doc="the output file containing the data for the visualization")), ToolInput(tag="in_module", input_type=String(), position=2, doc=InputDocumentation(doc="optional arguments:"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Run_Lefse_Py_V0_1_0().translate("wdl", allow_empty_container=True)

