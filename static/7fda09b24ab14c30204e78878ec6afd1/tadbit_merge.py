from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, Array, String

Tadbit_Merge_V0_1_0 = CommandToolBuilder(tool="tadbit_merge", base_command=["tadbit", "merge"], inputs=[ToolInput(tag="in_workdir", input_type=File(optional=True), prefix="--workdir", doc=InputDocumentation(doc="path to a new output folder")), ToolInput(tag="in_workdir_one", input_type=File(optional=True), prefix="--workdir1", doc=InputDocumentation(doc="path to working directory of the first HiC data sample to merge")), ToolInput(tag="in_workdir_two", input_type=File(optional=True), prefix="--workdir2", doc=InputDocumentation(doc="path to working directory of the second HiC data sample to merge")), ToolInput(tag="in_bam_one", input_type=File(optional=True), prefix="--bam1", doc=InputDocumentation(doc="path to the first TADbit-generated BAM file with all reads (other\nwise the tool will guess from the working directory database)")), ToolInput(tag="in_nox", input_type=Boolean(optional=True), prefix="--noX", doc=InputDocumentation(doc="no display server (X screen)")), ToolInput(tag="in_bam_two", input_type=File(optional=True), prefix="--bam2", doc=InputDocumentation(doc="path to the second TADbit-generated BAM file with all reads (other\nwise the tool will guess from the working directory database)")), ToolInput(tag="in_cpus", input_type=Int(optional=True), prefix="--cpus", doc=InputDocumentation(doc="[8] Maximum number of CPU cores available in the execution host. If\nhigher than 1, tasks with multi-threading capabilities will enabled\n(if 0 all available) cores will be used")), ToolInput(tag="in_resolution", input_type=Int(optional=True), prefix="--resolution", doc=InputDocumentation(doc="resolution at which to do the comparison, and generate the matrices.")), ToolInput(tag="in_skip_comparison", input_type=Boolean(optional=True), prefix="--skip_comparison", doc=InputDocumentation(doc="skip the comparison between replicates (faster). Comparisons are\nperformed at 3 levels 1- comparing first diagonals of each\nexperiment (and generating SCC score and standard deviation see\nhttps://doi.org/10.1101/gr.220640.117) 2- Comparing the first\neigenvectors of input experiments 3- Generates reproducibility score\nusing function from https://doi.org/10.1093/bioinformatics/btx152")), ToolInput(tag="in_skip_merge", input_type=Boolean(optional=True), prefix="--skip_merge", doc=InputDocumentation(doc="skip the merge of replicates (faster).")), ToolInput(tag="in_save", input_type=Array(t=String(), optional=True), prefix="--save", doc=InputDocumentation(doc="[genome] save genomic or chromosomic matrix.")), ToolInput(tag="in_jobid_one", input_type=Int(optional=True), prefix="--jobid1", doc=InputDocumentation(doc="Use as input data generated by a job with a given jobid. Use tadbit\ndescribe to find out which.")), ToolInput(tag="in_jobid_two", input_type=Int(optional=True), prefix="--jobid2", doc=InputDocumentation(doc="Use as input data generated by a job with a given jobid. Use tadbit\ndescribe to find out which.")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="overwrite previously run job")), ToolInput(tag="in_norm", input_type=Boolean(optional=True), prefix="--norm", doc=InputDocumentation(doc="compare normalized matrices")), ToolInput(tag="in_biases_one", input_type=File(optional=True), prefix="--biases1", doc=InputDocumentation(doc="path to file with precalculated biases by columns")), ToolInput(tag="in_biases_two", input_type=File(optional=True), prefix="--biases2", doc=InputDocumentation(doc="path to file with precalculated biases by columns")), ToolInput(tag="in_filter", input_type=Array(t=Int(), optional=True), prefix="--filter", doc=InputDocumentation(doc="[[1, 2, 3, 4, 6, 7, 9, 10]] Use filters to define a set os valid\npair of reads e.g.: '--apply 1 2 3 4 8 9 10'. Where these\nnumberscorrespond to: 1: self-circle, 2: dangling-end, 3: error, 4:\nextra dangling-end, 5: too close from RES, 6: too short, 7: too\nlarge, 8: over-represented, 9: duplicated, 10: random breaks, 11:\ntrans-chromosomic")), ToolInput(tag="in_sam_tools", input_type=File(optional=True), prefix="--samtools", doc=InputDocumentation(doc="path samtools binary")), ToolInput(tag="in_tmp_db", input_type=File(optional=True), prefix="--tmpdb", doc=InputDocumentation(doc="if provided uses this directory to manipulate the database"))], outputs=[ToolOutput(tag="out_workdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_workdir", type_hint=File()), doc=OutputDocumentation(doc="path to a new output folder"))], container="quay.io/biocontainers/tadbit:1.0.1--py38h6ed170a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tadbit_Merge_V0_1_0().translate("wdl")

