from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Metagraph_Align_V0_1_0 = CommandToolBuilder(tool="metagraph_align", base_command=["metagraph", "align"], inputs=[ToolInput(tag="in_fwd_and_reverse", input_type=Boolean(optional=True), prefix="--fwd-and-reverse", doc=InputDocumentation(doc="for each input sequence, align its reverse complement as well [off]")), ToolInput(tag="in_header_comment_delim", input_type=Boolean(optional=True), prefix="--header-comment-delim", doc=InputDocumentation(doc="[STR] delimiter for joining fasta header with comment [off]")), ToolInput(tag="in_parallel", input_type=Boolean(optional=True), prefix="--parallel", doc=InputDocumentation(doc="[INT]             use multiple threads for computation [1]")), ToolInput(tag="in_map", input_type=Boolean(optional=True), prefix="--map", doc=InputDocumentation(doc="map k-mers to graph exactly instead of aligning.\nTurned on if --count-kmers or --query-presence are set [off]")), ToolInput(tag="in_compacted", input_type=Boolean(optional=True), prefix="--compacted", doc=InputDocumentation(doc="dump the GFA's 'P' lines in a compacted mode [off]")), ToolInput(tag="in_km_er_length", input_type=Boolean(optional=True), prefix="--kmer-length", doc=InputDocumentation(doc="[INT]          length of mapped k-mers (at most graph's k) [k]")), ToolInput(tag="in_count_km_ers", input_type=Boolean(optional=True), prefix="--count-kmers", doc=InputDocumentation(doc="for each sequence, report the number of k-mers discovered in graph [off]")), ToolInput(tag="in_query_presence", input_type=Boolean(optional=True), prefix="--query-presence", doc=InputDocumentation(doc="test sequences for presence, report as 0 or 1 [off]")), ToolInput(tag="in_filter_present", input_type=Boolean(optional=True), prefix="--filter-present", doc=InputDocumentation(doc="report only present input sequences as FASTA [off]")), ToolInput(tag="in_batch_size", input_type=Boolean(optional=True), prefix="--batch-size", doc=InputDocumentation(doc="query batch size (number of base pairs) [100000000]")), ToolInput(tag="in_outfile_base", input_type=File(optional=True), prefix="--outfile-base", doc=InputDocumentation(doc="[STR]                         basename of output file []")), ToolInput(tag="in_json", input_type=Boolean(optional=True), prefix="--json", doc=InputDocumentation(doc="output alignment in JSON format [off]")), ToolInput(tag="in_align_both_strands", input_type=Boolean(optional=True), prefix="--align-both-strands", doc=InputDocumentation(doc="return best alignments for either input sequence or its reverse complement [off]")), ToolInput(tag="in_align_alternative_alignments", input_type=Boolean(optional=True), prefix="--align-alternative-alignments", doc=InputDocumentation(doc="the number of alternative paths to report per seed [1]")), ToolInput(tag="in_align_min_path_score", input_type=Boolean(optional=True), prefix="--align-min-path-score", doc=InputDocumentation(doc="[INT]                 the minimum score that a reported path can have [0]")), ToolInput(tag="in_align_edit_distance", input_type=Boolean(optional=True), prefix="--align-edit-distance", doc=InputDocumentation(doc="use unit costs for scoring matrix [off]")), ToolInput(tag="in_align_max_nodes_per_seq_char", input_type=Boolean(optional=True), prefix="--align-max-nodes-per-seq-char", doc=InputDocumentation(doc="[FLOAT]       maximum number of nodes to consider per sequence character [12.0]")), ToolInput(tag="in_align_max_ram", input_type=Boolean(optional=True), prefix="--align-max-ram", doc=InputDocumentation(doc="[FLOAT]                      maximum amount of RAM used per alignment in MB [200.0]")), ToolInput(tag="in_align_match_score", input_type=Boolean(optional=True), prefix="--align-match-score", doc=InputDocumentation(doc="[INT]                    positive match score [2]")), ToolInput(tag="in_align_mm_transition_penalty", input_type=Boolean(optional=True), prefix="--align-mm-transition-penalty", doc=InputDocumentation(doc="[INT]          positive transition penalty (DNA only) [3]")), ToolInput(tag="in_align_mm_transversion_penalty", input_type=Boolean(optional=True), prefix="--align-mm-transversion-penalty", doc=InputDocumentation(doc="[INT]        positive transversion penalty (DNA only) [3]")), ToolInput(tag="in_align_gap_open_penalty", input_type=Boolean(optional=True), prefix="--align-gap-open-penalty", doc=InputDocumentation(doc="[INT]               positive gap opening penalty [5]")), ToolInput(tag="in_align_gap_extension_penalty", input_type=Boolean(optional=True), prefix="--align-gap-extension-penalty", doc=InputDocumentation(doc="[INT]          positive gap extension penalty [2]")), ToolInput(tag="in_align_min_cell_score", input_type=Boolean(optional=True), prefix="--align-min-cell-score", doc=InputDocumentation(doc="[INT]                 the minimum value that a cell in the alignment table can hold [0]")), ToolInput(tag="in_align_x_drop", input_type=Boolean(optional=True), prefix="--align-xdrop", doc=InputDocumentation(doc="[INT]                          the maximum difference between the current and the best alignment [27]")), ToolInput(tag="in_align_min_seed_length", input_type=Boolean(optional=True), prefix="--align-min-seed-length", doc=InputDocumentation(doc="[INT]                the minimum length of a seed [graph k]")), ToolInput(tag="in_align_max_seed_length", input_type=Boolean(optional=True), prefix="--align-max-seed-length", doc=InputDocumentation(doc="[INT]                the maximum length of a seed [graph k]")), ToolInput(tag="in_align_min_exact_match", input_type=Boolean(optional=True), prefix="--align-min-exact-match", doc=InputDocumentation(doc="[FLOAT]              fraction of matching nucleotides required to align sequence [0.7]")), ToolInput(tag="in_align_max_num_seeds_per_locus", input_type=Boolean(optional=True), prefix="--align-max-num-seeds-per-locus", doc=InputDocumentation(doc="[INT]        the maximum number of allowed inexact seeds per locus [inf]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="switch on verbose output [off]")), ToolInput(tag="in_i", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc="")), ToolInput(tag="in_fast_q_one", input_type=Int(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outfile_base", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile_base", type_hint=File()), doc=OutputDocumentation(doc="[STR]                         basename of output file []"))], container="quay.io/biocontainers/metagraph:0.2.0--h74b8f77_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Metagraph_Align_V0_1_0().translate("wdl")

