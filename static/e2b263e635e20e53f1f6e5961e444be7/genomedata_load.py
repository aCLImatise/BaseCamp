from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean

Genomedata_Load_V0_1_0 = CommandToolBuilder(tool="genomedata_load", base_command=["genomedata-load"], inputs=[ToolInput(tag="in_sequence", input_type=File(optional=True), prefix="--sequence", doc=InputDocumentation(doc="Add the sequence data in the specified file or files\n(may use UNIX glob wildcard syntax)")), ToolInput(tag="in_assembly_report", input_type=File(optional=True), prefix="--assembly-report", doc=InputDocumentation(doc="Tab-delimited file with columnar mappings between\nchromosome naming styles.")), ToolInput(tag="in_name_style", input_type=String(optional=True), prefix="--name-style", doc=InputDocumentation(doc="Chromsome naming style to use based on ASSEMBLY-\nREPORT. Default: UCSC-style-name")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print status updates and diagnostic messages")), ToolInput(tag="in_file__track", input_type=File(optional=True), prefix="-t", doc=InputDocumentation(doc="=FILE, --track NAME=FILE\nAdd data from FILE as the track NAME, such as: -t\nsignal=signal.wig")), ToolInput(tag="in_mask_file", input_type=File(optional=True), prefix="--maskfile", doc=InputDocumentation(doc="A BED file containing regions to mask out from tracks\nbefore loading")), ToolInput(tag="in_assembly", input_type=Boolean(optional=True), prefix="--assembly", doc=InputDocumentation(doc="sequence files contain assembly (AGP) files instead of")), ToolInput(tag="in_file_mode", input_type=Boolean(optional=True), prefix="--file-mode", doc=InputDocumentation(doc="If specified, the Genomedata archive will be\nimplemented as a single file, with a separate h5 group\nfor each Chromosome. This is recommended if there are\na large number of Chromosomes. The default behavior is\nto use a single file if there are at least 100\nChromosomes being added.")), ToolInput(tag="in_directory_mode", input_type=Boolean(optional=True), prefix="--directory-mode", doc=InputDocumentation(doc="If specified, the Genomedata archive will be\nimplemented as a directory, with a separate file for\neach Chromosome. This is recommended if there are a\nsmall number of Chromosomes. The default behavior is\nto use a directory if there are fewer than 100\nChromosomes being added.")), ToolInput(tag="in_create_genomedata_archive", input_type=String(), position=0, doc=InputDocumentation(doc="Create Genomedata archive named GENOMEDATAFILE by loading")), ToolInput(tag="in_respectively_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Example: genomedata-load -t high=signal.high.wig -t low=signal.low.bed.gz -s chrX.fa -s chrY.fa.gz GENOMEDATAFILE")), ToolInput(tag="in_genomedata_archive", input_type=String(), position=0, doc=InputDocumentation(doc="genomedata archive"))], outputs=[ToolOutput(tag="out_mask_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_mask_file", type_hint=File()), doc=OutputDocumentation(doc="A BED file containing regions to mask out from tracks\nbefore loading"))], container="quay.io/biocontainers/genomedata:1.5.0--py36h485661d_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Genomedata_Load_V0_1_0().translate("wdl")

