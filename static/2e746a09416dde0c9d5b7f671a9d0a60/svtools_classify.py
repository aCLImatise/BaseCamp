from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Float

Svtools_Classify_V0_1_0 = CommandToolBuilder(tool="svtools_classify", base_command=["svtools", "classify"], inputs=[ToolInput(tag="in_input", input_type=String(optional=True), prefix="--input", doc=InputDocumentation(doc="VCF input")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="VCF output [stdout]")), ToolInput(tag="in_gender", input_type=File(optional=True), prefix="--gender", doc=InputDocumentation(doc="tab delimited file of sample genders (male=1,\nfemale=2) ex: SAMPLE_A 2")), ToolInput(tag="in_annotation", input_type=File(optional=True), prefix="--annotation", doc=InputDocumentation(doc="BED file of annotated elements")), ToolInput(tag="in_fraction", input_type=Float(optional=True), prefix="--fraction", doc=InputDocumentation(doc="fraction of reciprocal overlap to apply annotation to\nvariant [0.9]")), ToolInput(tag="in_exclude", input_type=File(optional=True), prefix="--exclude", doc=InputDocumentation(doc="list of samples to exclude from classification\nalgorithms")), ToolInput(tag="in_slope_threshold", input_type=Float(optional=True), prefix="--slope_threshold", doc=InputDocumentation(doc="minimum slope absolute value of regression line to\nclassify as DEL or DUP[1.0]")), ToolInput(tag="in_r_squared_threshold", input_type=Float(optional=True), prefix="--rsquared_threshold", doc=InputDocumentation(doc="minimum R^2 correlation value of regression line to\nclassify as DEL or DUP [0.2], for large sample\nreclassification")), ToolInput(tag="in_t_set", input_type=String(optional=True), prefix="--tSet", doc=InputDocumentation(doc="high quality deletions & duplications training\ndataset[vcf], required by naive Bayes reclassification")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="reclassification method, one of (large_sample,\nnaive_bayes, hybrid)")), ToolInput(tag="in_diag_file", input_type=File(optional=True), prefix="--diag_file", doc=InputDocumentation(doc="text file to output method comparisons")), ToolInput(tag="in_sex_chrom", input_type=String(optional=True), prefix="--sex-chrom", doc=InputDocumentation(doc="Comma-separated list of sex chromosome names\n[chrX,chrY]")), ToolInput(tag="in_tempdir", input_type=File(optional=True), prefix="--tempdir", doc=InputDocumentation(doc="Directory for temp file downloads"))], outputs=[ToolOutput(tag="out_diag_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_diag_file", type_hint=File()), doc=OutputDocumentation(doc="text file to output method comparisons"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Svtools_Classify_V0_1_0().translate("wdl", allow_empty_container=True)

