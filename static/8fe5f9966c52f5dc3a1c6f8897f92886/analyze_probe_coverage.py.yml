!Command
command:
- analyze_probe_coverage.py
positional: []
named:
- !Flag
  description: ''
  synonyms:
  - -m
  - -l
  args: !SimpleFlagArg
    name: MISMATCHES
  optional: true
- !Flag
  description: "Labels for one or more target datasets (e.g., one\nlabel per species)"
  synonyms:
  - -d
  - --dataset
  args: !RepeatFlagArg
    name: DATASET
  optional: true
- !Flag
  description: "Path to a FASTA file that provides the probes (one per\nsequence)\
    \ whose coverage should be analyzed against\nthe genomes in the given datasets"
  synonyms:
  - -f
  - --probes-fasta
  args: !SimpleFlagArg
    name: PROBES_FASTA
  optional: true
- !Flag
  description: "Allow for this number of mismatches when determining\nwhether a probe\
    \ covers a sequence"
  synonyms:
  - -m
  - --mismatches
  args: !SimpleFlagArg
    name: MISMATCHES
  optional: true
- !Flag
  description: "Say that a portion of a probe covers a portion of a\nsequence if the\
    \ two share a substring with at most\nMISMATCHES mismatches that has length >=\
    \ LCF_THRES bp"
  synonyms:
  - -l
  - --lcf-thres
  args: !SimpleFlagArg
    name: LCF_THRES
  optional: true
- !Flag
  description: "(Optional) When determining whether a probe covers a\nsequence, require\
    \ that there be an exact match (i.e.,\nno mismatches) of length at least\nISLAND_OF_EXACT_MATCH\
    \ bp between a portion of the\nprobe and a portion of the sequence"
  synonyms:
  - --island-of-exact-match
  args: !SimpleFlagArg
    name: ISLAND_OF_EXACT_MATCH
  optional: true
- !Flag
  description: "Extend the coverage of each side of a probe by this\nnumber of bp.\
    \ That is, a probe covers a region that\nconsists of the portion of a sequence\
    \ it hybridizes\nto, as well as this number of bp on each side of that\nportion.\
    \ This is useful in modeling hybrid selection,\nwhere a probe hybridizes toa fragment\
    \ that includes\nthe region targeted by the probe, along with\nsurrounding portions\
    \ of the sequence. Increasing its\nvalue should reduce the number of probes required\
    \ to\nachieve the desired coverage."
  synonyms:
  - -e
  - --cover-extension
  args: !SimpleFlagArg
    name: COVER_EXTENSION
  optional: true
- !Flag
  description: "(Optional) Use only the first N target genomes in the\ndataset"
  synonyms:
  - --limit-target-genomes
  args: !SimpleFlagArg
    name: LIMIT_TARGET_GENOMES
  optional: true
- !Flag
  description: Print analysis of the probe set's coverage
  synonyms:
  - --print-analysis
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "The file to which to write a TSV-formatted matrix of\nthe probe set's\
    \ coverage analysis"
  synonyms:
  - --write-analysis-to-tsv
  args: !SimpleFlagArg
    name: WRITE_ANALYSIS_TO_TSV
  optional: true
- !Flag
  description: "The file to which to write the average coverage\nachieved by the probe\
    \ set within sliding windows of\neach target genome"
  synonyms:
  - --write-sliding-window-coverage
  args: !SimpleFlagArg
    name: WRITE_SLIDING_WINDOW_COVERAGE
  optional: true
- !Flag
  description: "(Optional) An int >= 1 that gives the maximum number\nof processes\
    \ to use in multiprocessing pools; uses\nmin(number of CPUs in the system, MAX_NUM_PROCESSES)\n\
    processes"
  synonyms:
  - --max-num-processes
  args: !SimpleFlagArg
    name: MAX_NUM_PROCESSES
  optional: true
- !Flag
  description: "(Optional) Use this value (KMER_PROBE_LENGTH_K) as the\nk-mer length\
    \ when constructing a map of k-mers to the\nprobes that contain these k-mers.\
    \ This map is used\nwhen mapping the given probes to target sequences and\nthe\
    \ k-mers serve as seeds for calculating whether a\nprobe 'covers' a subsequence.\
    \ The value should be\nsufficiently less than the probe length (PROBE_LENGTH)\n\
    so that it can find mappings even when the candidate\nprobe and target sequence\
    \ are divergent. In\nparticular, CATCH will try to find a value k >=\nKMER_PROBE_LENGTH_K\
    \ (by default, >=10) such that k\ndivides PROBE_LENGTH and k < PROBE_LENGTH /\
    \ MISMATCHES\n(if MISMATCHES=0, then k=PROBE_LENGTH). It will then\nuse this k\
    \ as the k-mer length in mappings; if no such\nk exists, it will use a randomized\
    \ approach with\nKMER_PROBE_LENGTH_K as the k-mer length."
  synonyms:
  - --kmer-probe-map-k
  args: !SimpleFlagArg
    name: KMER_PROBE_MAP_K
  optional: true
- !Flag
  description: Debug output
  synonyms:
  - --debug
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Verbose output
  synonyms:
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: show program's version number and exit
  synonyms:
  - -V
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "usage: analyze_probe_coverage.py [-h] -d DATASET [DATASET ...] -f PROBES_FASTA\n\
  \                                 -m MISMATCHES -l LCF_THRES\n                 \
  \                [--island-of-exact-match ISLAND_OF_EXACT_MATCH]\n             \
  \                    [-e COVER_EXTENSION]\n                                 [--limit-target-genomes\
  \ LIMIT_TARGET_GENOMES]\n                                 [--print-analysis]\n \
  \                                [--write-analysis-to-tsv WRITE_ANALYSIS_TO_TSV]\n\
  \                                 [--write-sliding-window-coverage WRITE_SLIDING_WINDOW_COVERAGE]\n\
  \                                 [--max-num-processes MAX_NUM_PROCESSES]\n    \
  \                             [--kmer-probe-map-k KMER_PROBE_MAP_K]\n          \
  \                       [--debug] [--verbose] [-V]\n\noptional arguments:\n  -h,\
  \ --help            show this help message and exit\n  -d DATASET [DATASET ...],\
  \ --dataset DATASET [DATASET ...]\n                        Labels for one or more\
  \ target datasets (e.g., one\n                        label per species)\n  -f PROBES_FASTA,\
  \ --probes-fasta PROBES_FASTA\n                        Path to a FASTA file that\
  \ provides the probes (one per\n                        sequence) whose coverage\
  \ should be analyzed against\n                        the genomes in the given datasets\n\
  \  -m MISMATCHES, --mismatches MISMATCHES\n                        Allow for this\
  \ number of mismatches when determining\n                        whether a probe\
  \ covers a sequence\n  -l LCF_THRES, --lcf-thres LCF_THRES\n                   \
  \     Say that a portion of a probe covers a portion of a\n                    \
  \    sequence if the two share a substring with at most\n                      \
  \  MISMATCHES mismatches that has length >= LCF_THRES bp\n  --island-of-exact-match\
  \ ISLAND_OF_EXACT_MATCH\n                        (Optional) When determining whether\
  \ a probe covers a\n                        sequence, require that there be an exact\
  \ match (i.e.,\n                        no mismatches) of length at least\n    \
  \                    ISLAND_OF_EXACT_MATCH bp between a portion of the\n       \
  \                 probe and a portion of the sequence\n  -e COVER_EXTENSION, --cover-extension\
  \ COVER_EXTENSION\n                        Extend the coverage of each side of a\
  \ probe by this\n                        number of bp. That is, a probe covers a\
  \ region that\n                        consists of the portion of a sequence it\
  \ hybridizes\n                        to, as well as this number of bp on each side\
  \ of that\n                        portion. This is useful in modeling hybrid selection,\n\
  \                        where a probe hybridizes toa fragment that includes\n \
  \                       the region targeted by the probe, along with\n         \
  \               surrounding portions of the sequence. Increasing its\n         \
  \               value should reduce the number of probes required to\n         \
  \               achieve the desired coverage.\n  --limit-target-genomes LIMIT_TARGET_GENOMES\n\
  \                        (Optional) Use only the first N target genomes in the\n\
  \                        dataset\n  --print-analysis      Print analysis of the\
  \ probe set's coverage\n  --write-analysis-to-tsv WRITE_ANALYSIS_TO_TSV\n      \
  \                  The file to which to write a TSV-formatted matrix of\n      \
  \                  the probe set's coverage analysis\n  --write-sliding-window-coverage\
  \ WRITE_SLIDING_WINDOW_COVERAGE\n                        The file to which to write\
  \ the average coverage\n                        achieved by the probe set within\
  \ sliding windows of\n                        each target genome\n  --max-num-processes\
  \ MAX_NUM_PROCESSES\n                        (Optional) An int >= 1 that gives the\
  \ maximum number\n                        of processes to use in multiprocessing\
  \ pools; uses\n                        min(number of CPUs in the system, MAX_NUM_PROCESSES)\n\
  \                        processes\n  --kmer-probe-map-k KMER_PROBE_MAP_K\n    \
  \                    (Optional) Use this value (KMER_PROBE_LENGTH_K) as the\n  \
  \                      k-mer length when constructing a map of k-mers to the\n \
  \                       probes that contain these k-mers. This map is used\n   \
  \                     when mapping the given probes to target sequences and\n  \
  \                      the k-mers serve as seeds for calculating whether a\n   \
  \                     probe 'covers' a subsequence. The value should be\n      \
  \                  sufficiently less than the probe length (PROBE_LENGTH)\n    \
  \                    so that it can find mappings even when the candidate\n    \
  \                    probe and target sequence are divergent. In\n             \
  \           particular, CATCH will try to find a value k >=\n                  \
  \      KMER_PROBE_LENGTH_K (by default, >=10) such that k\n                    \
  \    divides PROBE_LENGTH and k < PROBE_LENGTH / MISMATCHES\n                  \
  \      (if MISMATCHES=0, then k=PROBE_LENGTH). It will then\n                  \
  \      use this k as the k-mer length in mappings; if no such\n                \
  \        k exists, it will use a randomized approach with\n                    \
  \    KMER_PROBE_LENGTH_K as the k-mer length.\n  --debug               Debug output\n\
  \  --verbose             Verbose output\n  -V, --version         show program's\
  \ version number and exit\n"
generated_using:
- --help
