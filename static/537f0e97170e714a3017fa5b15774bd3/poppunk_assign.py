from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean, Float, Directory

Poppunk_Assign_V0_1_0 = CommandToolBuilder(tool="poppunk_assign", base_command=["poppunk_assign"], inputs=[ToolInput(tag="in_db", input_type=String(optional=True), prefix="--db", doc=InputDocumentation(doc="Location of built reference database")), ToolInput(tag="in_query", input_type=File(optional=True), prefix="--query", doc=InputDocumentation(doc="File listing query input assemblies")), ToolInput(tag="in_distances", input_type=String(optional=True), prefix="--distances", doc=InputDocumentation(doc="Prefix of input pickle of pre-calculated distances (if\nnot in --db)")), ToolInput(tag="in_external_clustering", input_type=File(optional=True), prefix="--external-clustering", doc=InputDocumentation(doc="File with cluster definitions or other labels\ngenerated with any other method.")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Prefix for output files (required)")), ToolInput(tag="in_plot_fit", input_type=Int(optional=True), prefix="--plot-fit", doc=InputDocumentation(doc="Create this many plots of some fits relating k-mer to\ncore/accessory distances [default = 0]")), ToolInput(tag="in_write_references", input_type=Boolean(optional=True), prefix="--write-references", doc=InputDocumentation(doc="Write reference database isolates' cluster assignments\nout too")), ToolInput(tag="in_update_db", input_type=Boolean(optional=True), prefix="--update-db", doc=InputDocumentation(doc="Update reference database with query sequences")), ToolInput(tag="in_overwrite", input_type=Boolean(optional=True), prefix="--overwrite", doc=InputDocumentation(doc="Overwrite any existing database files")), ToolInput(tag="in_graph_weights", input_type=Boolean(optional=True), prefix="--graph-weights", doc=InputDocumentation(doc="Save within-strain Euclidean distances into the graph")), ToolInput(tag="in_min_km_er_count", input_type=Int(optional=True), prefix="--min-kmer-count", doc=InputDocumentation(doc="Minimum k-mer count when using reads as input [default\n= 0]")), ToolInput(tag="in_exact_count", input_type=Boolean(optional=True), prefix="--exact-count", doc=InputDocumentation(doc="Use the exact k-mer counter with reads [default = use\ncountmin counter]")), ToolInput(tag="in_strand_preserved", input_type=Boolean(optional=True), prefix="--strand-preserved", doc=InputDocumentation(doc="Treat input as being on the same strand, and ignore\nreverse complement k-mers [default = use canonical\nk-mers]")), ToolInput(tag="in_qc_filter", input_type=String(optional=True), prefix="--qc-filter", doc=InputDocumentation(doc="Behaviour following sequence QC step: 'stop'\n[default], 'prune' (analyse data passing QC), or\n'continue' (analyse all data)")), ToolInput(tag="in_retain_failures", input_type=Boolean(optional=True), prefix="--retain-failures", doc=InputDocumentation(doc="Retain sketches of genomes that do not pass QC filters\nin separate database [default = False]")), ToolInput(tag="in_max_a_dist", input_type=Int(optional=True), prefix="--max-a-dist", doc=InputDocumentation(doc="Maximum accessory distance to permit [default = 0.5]")), ToolInput(tag="in_max_pi_dist", input_type=Int(optional=True), prefix="--max-pi-dist", doc=InputDocumentation(doc="Maximum core distance to permit [default = 0.5]")), ToolInput(tag="in_type_isolate", input_type=String(optional=True), prefix="--type-isolate", doc=InputDocumentation(doc="Isolate from which distances can be calculated for\npruning [default = None]")), ToolInput(tag="in_length_sigma", input_type=Int(optional=True), prefix="--length-sigma", doc=InputDocumentation(doc="Number of standard deviations of length distribution\nbeyond which sequences will be excluded [default = 5]")), ToolInput(tag="in_length_range", input_type=Int(optional=True), prefix="--length-range", doc=InputDocumentation(doc="LENGTH_RANGE\nAllowed length range, outside of which sequences will\nbe excluded [two values needed - lower and upper\nbounds]")), ToolInput(tag="in_prop_n", input_type=Float(optional=True), prefix="--prop-n", doc=InputDocumentation(doc="Threshold ambiguous base proportion above which\nsequences will be excluded [default = 0.1]")), ToolInput(tag="in_upper_n", input_type=String(optional=True), prefix="--upper-n", doc=InputDocumentation(doc="Threshold ambiguous base count above which sequences\nwill be excluded")), ToolInput(tag="in_model_dir", input_type=Directory(optional=True), prefix="--model-dir", doc=InputDocumentation(doc="Directory containing model to use for assigning\nqueries to clusters [default = reference database\ndirectory]")), ToolInput(tag="in_previous_clustering", input_type=Directory(optional=True), prefix="--previous-clustering", doc=InputDocumentation(doc="Directory containing previous cluster definitions and\nnetwork [default = use that in the directory\ncontaining the model]")), ToolInput(tag="in_core_only", input_type=Boolean(optional=True), prefix="--core-only", doc=InputDocumentation(doc="(with a 'refine' model) Use a core-distance only model\nfor assigning queries [default = False]")), ToolInput(tag="in_accessory_only", input_type=Boolean(optional=True), prefix="--accessory-only", doc=InputDocumentation(doc="(with a 'refine' or 'lineage' model) Use an accessory-\ndistance only model for assigning queries [default =\nFalse]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use [default = 1]")), ToolInput(tag="in_gpu_sketch", input_type=Boolean(optional=True), prefix="--gpu-sketch", doc=InputDocumentation(doc="Use a GPU when calculating sketches (read data only)\n[default = False]")), ToolInput(tag="in_gpu_dist", input_type=Boolean(optional=True), prefix="--gpu-dist", doc=InputDocumentation(doc="Use a GPU when calculating distances [default = False]")), ToolInput(tag="in_gpu_graph", input_type=Boolean(optional=True), prefix="--gpu-graph", doc=InputDocumentation(doc="Use a GPU when constructing networks [default = False]")), ToolInput(tag="in_deviceid", input_type=Int(optional=True), prefix="--deviceid", doc=InputDocumentation(doc="CUDA device ID, if using GPU [default = 0]")), ToolInput(tag="in_citation", input_type=Boolean(optional=True), prefix="--citation", doc=InputDocumentation(doc="Give a citation, and possible methods paragraph based\non the command line\n"))], outputs=[], container="quay.io/biocontainers/poppunk:2.4.0--py39h7f0572b_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Poppunk_Assign_V0_1_0().translate("wdl")

