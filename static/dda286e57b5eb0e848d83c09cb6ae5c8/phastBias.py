from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, Float, File, String

Phastbias_V0_1_0 = CommandToolBuilder(tool="phastBias", base_command=["phastBias"], inputs=[ToolInput(tag="in_msa_format", input_type=Boolean(optional=True), prefix="--msa-format", doc=InputDocumentation(doc=").  The neutral model must be in the .mod format")), ToolInput(tag="in_bgc", input_type=Int(optional=True), prefix="--bgc", doc=InputDocumentation(doc="The B parameter describes the strength of gBGC.  It must be > 0.\nToo low of a value may yield false positives, as the gBGC model\nbecomes indistinguishable from the non-gBGC model.\nDefault: 3")), ToolInput(tag="in_estimate_bgc", input_type=Int(optional=True), prefix="--estimate-bgc", doc=InputDocumentation(doc="Use '--estimate-bgc 1' to estimate B by maximum likelihood.\nDefault: 0")), ToolInput(tag="in_bgc_exp_length", input_type=Int(optional=True), prefix="--bgc-exp-length", doc=InputDocumentation(doc="Set the prior expected length of gBGC tracts.  This is equivalent to\n1/alpha in the parametrization defined by Capra et al, where\nalpha is the rate out of gBGC states.\nDefault: 1000")), ToolInput(tag="in_estimate_bgc_exp_length", input_type=Int(optional=True), prefix="--estimate-bgc-exp-length", doc=InputDocumentation(doc="Use '--estimate-bgc-exp-length 1' to estimate this parameter by an\nexpectation-maximization algorithm.\nDefault: 0")), ToolInput(tag="in_bgc_target_coverage", input_type=Float(optional=True), prefix="--bgc-target-coverage", doc=InputDocumentation(doc="Set the prior for gBGC tract coverage (as a fraction between 0 and 1).\nThis is represented in the model as beta/(alpha+beta), where beta\nis the rate into the gBGC state, and alpha is the rate out of the\ngBGC state.\nDefault: 0.01")), ToolInput(tag="in_estimate_bgc_target_coverage", input_type=Int(optional=True), prefix="--estimate-bgc-target-coverage", doc=InputDocumentation(doc="Use '--estimate-bgc-target-coverage 0' to hold this parameter constant.\nDefault: 1 (This is the only parameter estimated by default.)")), ToolInput(tag="in_rho", input_type=Float(optional=True), prefix="--rho", doc=InputDocumentation(doc="Set the scaling factor for branch lengths in conserved states.  Rho should\nbe between 0 and 1.\nDefault: 0.31")), ToolInput(tag="in_cons_exp_length", input_type=Int(optional=True), prefix="--cons-exp-length", doc=InputDocumentation(doc="Set the prior expected length of conserved elements.  This parameter is\nheld constant; if you want to tune it, it is recommended to do this\nwith the phastCons program under a non-gBGC model (see the\n--expected-length option in phastCons).\nDefault: 45")), ToolInput(tag="in_cons_target_coverage", input_type=Int(optional=True), prefix="--cons-target-coverage", doc=InputDocumentation(doc="Set the prior for coverage of conserved elements (as a fraction\nbetween 0 and 1).  Like the --cons-exp-length above, this parameter\nis also held constant, but can be tuned with phastCons (see\nphastCons --transitions).\nDefault: 0.3")), ToolInput(tag="in_scale", input_type=Int(optional=True), prefix="--scale", doc=InputDocumentation(doc="Set an overall scaling factor for the branch lengths in all states.\nDefault: 1")), ToolInput(tag="in_estimate_scale", input_type=Int(optional=True), prefix="--estimate-scale", doc=InputDocumentation(doc="Rescale the branches in all states by a scaling factor determined by\nmaximum likelihood (initialized by --scale above).\nDefault: 0")), ToolInput(tag="in_eq_freqs_from_msa", input_type=Int(optional=True), prefix="--eqfreqs-from-msa", doc=InputDocumentation(doc="Reset equilibrium frequencies of A,C,G,T based on frequencies observed\nin the alignment.  Otherwise will not be altered from input model.\nDefault: 1")), ToolInput(tag="in_output_tracts", input_type=File(optional=True), prefix="--output-tracts", doc=InputDocumentation(doc="Print a GFF file identifying all regions with posterior probability of\nbeing in a gBGC state > 0.5.")), ToolInput(tag="in_posteriors", input_type=File(optional=True), prefix="--posteriors", doc=InputDocumentation(doc="Use this option to control posterior probability output, which is\nwritten to stdout.  'none' implies do not output anything; wig outputs\na standard fixed-step wiggle file giving the probability that each\nbase is assigned to a gBGC state; 'full' outputs a table with five\ncolumns.  The first column is the coordinate (1-based relative to\nthe first sequence in the alignment), followed by the probabilities\nof each of the four states: neutral, conserved, gBGC neutral,\ngBGC conserved.\nDefault: wig")), ToolInput(tag="in_output_mods", input_type=String(optional=True), prefix="--output-mods", doc=InputDocumentation(doc="Print out the tree models for all four states to <output_root>.cons.mod,\n<output_root>.neutral.mod, <output_root>.gBGC_cons.mod, and\n<output_root>.gBGC_neutral.mod.")), ToolInput(tag="in_informative_fn", input_type=File(optional=True), prefix="--informative-fn", doc=InputDocumentation(doc="Print a GFF containing regions of the alignment which are informative\nfor gBGC. Note: only works properly if foreground branch is a single\nbranch (not a group of branches).")), ToolInput(tag="in_informative_only", input_type=Boolean(optional=True), prefix="--informative-only", doc=InputDocumentation(doc="(To be used with --informative-fn). Print the informative regions, then\nquit.")), ToolInput(tag="in_states_dot", input_type=String(), position=0, doc=InputDocumentation(doc="It can also produce gBGC tracts by thresholding this"))], outputs=[ToolOutput(tag="out_posteriors", output_type=File(optional=True), selector=InputSelector(input_to_select="in_posteriors", type_hint=File()), doc=OutputDocumentation(doc="Use this option to control posterior probability output, which is\nwritten to stdout.  'none' implies do not output anything; wig outputs\na standard fixed-step wiggle file giving the probability that each\nbase is assigned to a gBGC state; 'full' outputs a table with five\ncolumns.  The first column is the coordinate (1-based relative to\nthe first sequence in the alignment), followed by the probabilities\nof each of the four states: neutral, conserved, gBGC neutral,\ngBGC conserved.\nDefault: wig"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phastbias_V0_1_0().translate("wdl", allow_empty_container=True)

