from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Directory, String

Run_Pipeline_Py_V0_1_0 = CommandToolBuilder(tool="run_pipeline.py", base_command=["run_pipeline.py"], inputs=[ToolInput(tag="in_assembly", input_type=File(optional=True), prefix="--assembly", doc=InputDocumentation(doc="Path to initial assembly")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc="Length of contigs at start")), ToolInput(tag="in_bed", input_type=File(optional=True), prefix="--bed", doc=InputDocumentation(doc="Bed file of alignments sorted by read names")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory to put results")), ToolInput(tag="in_cut_off", input_type=Int(optional=True), prefix="--cutoff", doc=InputDocumentation(doc="Minimum contig length to scaffold, default=1000")), ToolInput(tag="in_gfa", input_type=File(optional=True), prefix="--gfa", doc=InputDocumentation(doc="GFA file for assembly")), ToolInput(tag="in_enzyme", input_type=String(optional=True), prefix="--enzyme", doc=InputDocumentation(doc="Restriction Enzyme used for experiment")), ToolInput(tag="in_iter", input_type=Int(optional=True), prefix="--iter", doc=InputDocumentation(doc="Number of iterations to run, default = 3")), ToolInput(tag="in_dup", input_type=File(optional=True), prefix="--dup", doc=InputDocumentation(doc="File containing duplicated contig information")), ToolInput(tag="in_exp", input_type=Int(optional=True), prefix="--exp", doc=InputDocumentation(doc="Expected Genome size of the assembled genome")), ToolInput(tag="in_clean", input_type=String(optional=True), prefix="--clean", doc=InputDocumentation(doc="Set this option to 'yes' if you want to find\nmisassemblies in input assembly")), ToolInput(tag="in_filter", input_type=File(optional=True), prefix="--filter", doc=InputDocumentation(doc="Filter bed file for contigs present in the assembly")), ToolInput(tag="in_prnt", input_type=File(optional=True), prefix="--prnt", doc=InputDocumentation(doc="Set this option to 'yes' if you want to output the\nscaffolds sequence and agp file for each iteration\n"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory to put results")), ToolOutput(tag="out_prnt", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prnt", type_hint=File()), doc=OutputDocumentation(doc="Set this option to 'yes' if you want to output the\nscaffolds sequence and agp file for each iteration\n"))], container="quay.io/biocontainers/salsa2:2.2--py27h78a066a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Run_Pipeline_Py_V0_1_0().translate("wdl")

