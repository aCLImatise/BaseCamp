from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Float, Boolean, String

Slam_V0_1_0 = CommandToolBuilder(tool="SLAM", base_command=["SLAM"], inputs=[ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="SLAM database file which reads will be\naligned against")), ToolInput(tag="in_min_alignment_score", input_type=Int(optional=True), prefix="--min-alignment-score", doc=InputDocumentation(doc="(=0)        alignment score cutoff")), ToolInput(tag="in_score_fraction_threshold", input_type=Float(optional=True), prefix="--score-fraction-threshold", doc=InputDocumentation(doc="(=0.94999999999999996)\nscreen alignments with scores <\nthis*top score")), ToolInput(tag="in_match_score", input_type=Int(optional=True), prefix="--match-score", doc=InputDocumentation(doc="(=2)                match score")), ToolInput(tag="in_mismatch_penalty", input_type=Int(optional=True), prefix="--mismatch-penalty", doc=InputDocumentation(doc="(=3)           mismatch penalty (positive)")), ToolInput(tag="in_gap_open", input_type=Int(optional=True), prefix="--gap-open", doc=InputDocumentation(doc="(=5)                   gap opening penalty (positive)")), ToolInput(tag="in_gap_extend", input_type=Int(optional=True), prefix="--gap-extend", doc=InputDocumentation(doc="(=2)                 gap extend penalty (positive)")), ToolInput(tag="in_num_reads", input_type=Int(optional=True), prefix="--num-reads", doc=InputDocumentation(doc="(=4294967295)         Number of reads from R1/R2 File to")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="write to this file instead of stdout")), ToolInput(tag="in_sam_file", input_type=File(optional=True), prefix="--sam-file", doc=InputDocumentation(doc="write SAM output to this file")), ToolInput(tag="in_num_alignments", input_type=Int(optional=True), prefix="--num-alignments", doc=InputDocumentation(doc="(=10)            Number of alignments to report in SAM")), ToolInput(tag="in_just_align", input_type=Boolean(optional=True), prefix="--just-align", doc=InputDocumentation(doc="only perform alignments, not")), ToolInput(tag="in_align", input_type=String(), position=0, doc=InputDocumentation(doc="--num-reads-at-once arg (=10000000)   Reduce RAM usage by only analysing ")), ToolInput(tag="in_file", input_type=File(), position=0, doc=InputDocumentation(doc="--sam-xa                              only output primary alignment lines, ")), ToolInput(tag="in_meta_genomics", input_type=String(), position=0, doc=InputDocumentation(doc="--no-pseudo-assembly                  do not link alignments together"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="write to this file instead of stdout")), ToolOutput(tag="out_sam_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sam_file", type_hint=File()), doc=OutputDocumentation(doc="write SAM output to this file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Slam_V0_1_0().translate("wdl", allow_empty_container=True)

