from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int

2Csfastq_1Csfastq_V0_1_0 = CommandToolBuilder(tool="2csfastq_1csfastq", base_command=["2csfastq_1csfastq"], inputs=[ToolInput(tag="in_cs_fast_q_one", input_type=Boolean(optional=True), prefix="-csfastq1", doc=InputDocumentation(doc="(string)        first csfastq file.")), ToolInput(tag="in_cs_fast_q_two", input_type=Boolean(optional=True), prefix="-csfastq2", doc=InputDocumentation(doc="(string)        second csfastq file.")), ToolInput(tag="in_tags", input_type=Boolean(optional=True), prefix="-tags", doc=InputDocumentation(doc="(string,string)    Pair-end tags ( R3, F3, F5_BC ... )")), ToolInput(tag="in_add_tags", input_type=Boolean(optional=True), prefix="-add_tags", doc=InputDocumentation(doc="(string,string)    add pair-end tags to not tagged read name")), ToolInput(tag="in_trim_name", input_type=Boolean(optional=True), prefix="-trim_name", doc=InputDocumentation(doc="By default the program trim the read name at the first space.\nUsing this parameter the trimming is disabled")), ToolInput(tag="in_tone", input_type=Boolean(optional=True), prefix="-t1", doc=InputDocumentation(doc="(int)          it trims sequences at 3' end of the first read")), ToolInput(tag="in_t_two", input_type=Boolean(optional=True), prefix="-t2", doc=InputDocumentation(doc="(int)          it trims sequences at 3' end of the second read")), ToolInput(tag="in_int_minimum_mean", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="(int)          minimum mean average quality tolerated for paired_end sequences")), ToolInput(tag="in_len", input_type=Boolean(optional=True), prefix="-len", doc=InputDocumentation(doc="(int)          minimum reads size after trimming")), ToolInput(tag="in_double_encoded", input_type=Boolean(optional=True), prefix="-double-encoded", doc=InputDocumentation(doc="output double encoded reads [disabled]")), ToolInput(tag="in_fragment", input_type=Boolean(optional=True), prefix="-fragment", doc=InputDocumentation(doc="fragment library: use only -csfastq2 to set the input csfastq file")), ToolInput(tag="in_mate_pair", input_type=Boolean(optional=True), prefix="-mate-pair", doc=InputDocumentation(doc="Sequences coming from mate pair library (wiil be considered as\npaired-end library [disabled]")), ToolInput(tag="in_bs", input_type=Boolean(optional=True), prefix="-bs", doc=InputDocumentation(doc="base space reads as input [disabled]")), ToolInput(tag="in_max_reads", input_type=Boolean(optional=True), prefix="-max_reads", doc=InputDocumentation(doc="(float)         Max number of reads to be considered before the program exits")), ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="-log", doc=InputDocumentation(doc="(string)        log file.")), ToolInput(tag="in_tag_two", input_type=Int(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    2Csfastq_1Csfastq_V0_1_0().translate("wdl", allow_empty_container=True)

