from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, Int, String

Unfazed_V0_1_0 = CommandToolBuilder(tool="unfazed", base_command=["unfazed"], inputs=[ToolInput(tag="in_dn_ms", input_type=File(optional=True), prefix="--dnms", doc=InputDocumentation(doc="valid VCF OR BED file of the DNMs of interest> If BED,\nmust contain chrom, start, end, kid_id, var_type\ncolumns (default: None)")), ToolInput(tag="in_sites", input_type=File(optional=True), prefix="--sites", doc=InputDocumentation(doc="sorted/bgzipped/indexed VCF/BCF file of SNVs to\nidentify informative sites. Must contain each kid and\nboth parents (default: None)")), ToolInput(tag="in_ped", input_type=File(optional=True), prefix="--ped", doc=InputDocumentation(doc="ped file including the kid and both parent IDs\n(default: None)")), ToolInput(tag="in_bam_dir", input_type=Directory(optional=True), prefix="--bam-dir", doc=InputDocumentation(doc="directory where bam/cram files (named {sample_id}.bam\nor {sample_id}.cram) are stored for offspring. If not\nincluded, --bam-pairs must be set (default: None)")), ToolInput(tag="in_bam_pairs", input_type=Boolean(optional=True), prefix="--bam-pairs", doc=InputDocumentation(doc="[BAM_PAIRS [BAM_PAIRS ...]]\nspace-delimited list of pairs in the format\n{sample_id}:{bam_path} where {sample_id} matches an\noffspring id from the dnm file. Can be used with\n--bam-dir arg, must be used in its absence (default:\nNone)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="number of threads to use (default: 2)")), ToolInput(tag="in_output_type", input_type=String(optional=True), prefix="--output-type", doc=InputDocumentation(doc="choose output type. If --dnms is not a VCF/BCF, output\nmust be to BED format. Defaults to match --dnms input\nfile (default: None)")), ToolInput(tag="in_include_ambiguous", input_type=Boolean(optional=True), prefix="--include-ambiguous", doc=InputDocumentation(doc="include ambiguous phasing results (default: False)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="print verbose output including sites and reads used\nfor phasing. Only applies to BED output (default:\nFalse)")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="name for output file. Defaults to stdout (default:\n/dev/stdout)")), ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="reference fasta file (required for crams) (default:\nNone)\n")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc="name for output file. Defaults to stdout (default:\n/dev/stdout)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Unfazed_V0_1_0().translate("wdl", allow_empty_container=True)

