from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Float, Int, Boolean, File, String

Grmpy_V0_1_0 = CommandToolBuilder(tool="grmpy", base_command=["grmpy"], inputs=[ToolInput(tag="in_arg_output_folder_alignments", input_type=Directory(optional=True), prefix="-A", doc=InputDocumentation(doc="[ --alignment-output-folder ] arg      Output folder for alignments. Note\nthese can become very large and are\nonly requiredfor curation /\nvisualisation or faster reanalysis.")), ToolInput(tag="in_bad_align_frac", input_type=Float(optional=True), prefix="--bad-align-frac", doc=InputDocumentation(doc="(=0.800000012)       Fraction of read that needs to be\nmapped in order for it to be used.")), ToolInput(tag="in_bad_align_uniq_km_er_len", input_type=Int(optional=True), prefix="--bad-align-uniq-kmer-len", doc=InputDocumentation(doc="(=0)        Kmer length for uniqueness check\nduring read filtering.")), ToolInput(tag="in_arg_json_file", input_type=Boolean(optional=True), prefix="-G", doc=InputDocumentation(doc="[ --genotyping-parameters ] arg        JSON file with genotyping model")), ToolInput(tag="in_gzipcompress_output_files", input_type=File(optional=True), prefix="-z", doc=InputDocumentation(doc="[ --gzip-output ] [=arg(=1)] (=0)      gzip-compress output files. If -O\nis used, output file names are\nappended with .gz")), ToolInput(tag="in_help_defaults", input_type=Boolean(optional=True), prefix="--help-defaults", doc=InputDocumentation(doc="produce tab-delimited list of\ncommand line options and their\ndefault values")), ToolInput(tag="in_help_md", input_type=Boolean(optional=True), prefix="--help-md", doc=InputDocumentation(doc="produce help message pre-formatted\nas a markdown file section and exit")), ToolInput(tag="in_infer_read_haplotypes", input_type=Boolean(optional=True), prefix="--infer-read-haplotypes", doc=InputDocumentation(doc="[=arg(=1)] (=0)   Infer haplotype paths using read\nand fragment information.")), ToolInput(tag="in_k_lib_sequence_matching", input_type=Int(optional=True), prefix="--klib-sequence-matching", doc=InputDocumentation(doc="(=0)         Use klib smith-waterman aligner.")), ToolInput(tag="in_km_er_sequence_matching", input_type=Int(optional=True), prefix="--kmer-sequence-matching", doc=InputDocumentation(doc="(=0)         Use kmer aligner.")), ToolInput(tag="in_log_async", input_type=Int(optional=True), prefix="--log-async", doc=InputDocumentation(doc="(=0)                      Enable / disable async logging.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Log to a file instead of stderr.")), ToolInput(tag="in_log_level", input_type=String(optional=True), prefix="--log-level", doc=InputDocumentation(doc="(=info)                   Set log level (error, warning,\ninfo).")), ToolInput(tag="in_arg_manifest_samples", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --manifest ] arg                     Manifest of samples with path and\nbam stats.")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="[ --max-reads-per-event ] arg (=10000) Maximum number of reads to process\nfor a single event.")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output-file ] arg                  Output file name. Will output to\nstdout if omitted or '-'.")), ToolInput(tag="in_arg_output_folder_path", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --output-folder ] arg                Output folder path. paragraph will\nattempt to create the folder but\nnot the entire path. Will output to\nstdout if neither of output-file or\noutput-folder provided. If\nspecified, paragraph will produce\none output file for each input file\nbearing the same name.")), ToolInput(tag="in_path_sequence_matching", input_type=File(optional=True), prefix="--path-sequence-matching", doc=InputDocumentation(doc="(=0)         Enables alignment to paths")), ToolInput(tag="in_progress", input_type=Boolean(optional=True), prefix="--progress", doc=InputDocumentation(doc="[=arg(=1)] (=1)")), ToolInput(tag="in_arg_reference_genome", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg                    Reference genome fasta file.")), ToolInput(tag="in_response_file", input_type=File(optional=True), prefix="--response-file", doc=InputDocumentation(doc="file with more command line")), ToolInput(tag="in_print_program_version", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --version ]                          print program version information")), ToolInput(tag="in_parameters", input_type=String(), position=0, doc=InputDocumentation(doc="--graph-sequence-matching arg (=1)        Enables smith waterman graph ")), ToolInput(tag="in_alignment", input_type=String(), position=1, doc=InputDocumentation(doc="-g [ --graph-spec ] arg                   JSON file(s) describing the ")), ToolInput(tag="in_arguments", input_type=String(), position=0, doc=InputDocumentation(doc="-t [ --sample-threads ] arg (=8)          Number of threads for parallel "))], outputs=[ToolOutput(tag="out_arg_output_folder_alignments", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_arg_output_folder_alignments", type_hint=File()), doc=OutputDocumentation(doc="[ --alignment-output-folder ] arg      Output folder for alignments. Note\nthese can become very large and are\nonly requiredfor curation /\nvisualisation or faster reanalysis.")), ToolOutput(tag="out_gzipcompress_output_files", output_type=File(optional=True), selector=InputSelector(input_to_select="in_gzipcompress_output_files", type_hint=File()), doc=OutputDocumentation(doc="[ --gzip-output ] [=arg(=1)] (=0)      gzip-compress output files. If -O\nis used, output file names are\nappended with .gz")), ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output-file ] arg                  Output file name. Will output to\nstdout if omitted or '-'."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Grmpy_V0_1_0().translate("wdl", allow_empty_container=True)

