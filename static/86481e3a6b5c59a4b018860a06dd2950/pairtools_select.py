from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Pairtools_Select_V0_1_0 = CommandToolBuilder(tool="pairtools_select", base_command=["pairtools", "select"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output file. If the path ends with .gz or\n.lz4, the output is pbgzip-/lz4c-compressed.\nBy default, the output is printed into\nstdout.")), ToolInput(tag="in_output_rest", input_type=File(optional=True), prefix="--output-rest", doc=InputDocumentation(doc="output file for pairs of other types.  If\nthe path ends with .gz or .lz4, the output\nis pbgzip-/lz4c-compressed. By default, such\npairs are dropped.")), ToolInput(tag="in_send_comments_to", input_type=Boolean(optional=True), prefix="--send-comments-to", doc=InputDocumentation(doc="[selected|rest|both|none]\nWhich of the outputs should receive header\nand comment lines  [default: both]")), ToolInput(tag="in_chrom_subset", input_type=File(optional=True), prefix="--chrom-subset", doc=InputDocumentation(doc="A path to a chromosomes file (tab-separated,\n1st column contains chromosome names)\ncontaining a chromosome subset of interest.\nIf provided, additionally filter pairs with\nboth sides originating from the provided\nsubset of chromosomes. This operation\nmodifies the #chromosomes: and #chromsize:\nheader fields accordingly.")), ToolInput(tag="in_startup_code", input_type=String(optional=True), prefix="--startup-code", doc=InputDocumentation(doc="An auxiliary code to execute before\nfiltering. Use to define functions that can\nbe evaluated in the CONDITION statement")), ToolInput(tag="in_type_cast", input_type=Int(optional=True), prefix="--type-cast", doc=InputDocumentation(doc="...  Cast a given column to a given type. By\ndefault, only pos and mapq are cast to int,\nother columns are kept as str. Provide as -t\n<column_name> <type>, e.g. -t read_len1 int.\nMultiple entries are allowed.")), ToolInput(tag="in_nproc_in", input_type=Int(optional=True), prefix="--nproc-in", doc=InputDocumentation(doc="Number of processes used by the auto-guessed\ninput decompressing command.  [default: 3]")), ToolInput(tag="in_nproc_out", input_type=Int(optional=True), prefix="--nproc-out", doc=InputDocumentation(doc="Number of processes used by the auto-guessed\noutput compressing command.  [default: 8]")), ToolInput(tag="in_cmd_in", input_type=File(optional=True), prefix="--cmd-in", doc=InputDocumentation(doc="A command to decompress the input file. If\nprovided, fully overrides the auto-guessed\ncommand. Does not work with stdin. Must read\ninput from stdin and print output into\nstdout. EXAMPLE: pbgzip -dc -n 3")), ToolInput(tag="in_cmd_out", input_type=File(optional=True), prefix="--cmd-out", doc=InputDocumentation(doc="A command to compress the output file. If\nprovided, fully overrides the auto-guessed\ncommand. Does not work with stdout. Must\nread input from stdin and print output into\nstdout. EXAMPLE: pbgzip -c -n 8")), ToolInput(tag="in_quote", input_type=String(), position=0, doc=InputDocumentation(doc="CONDITION with single quotes, and use double quotes for string"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output file. If the path ends with .gz or\n.lz4, the output is pbgzip-/lz4c-compressed.\nBy default, the output is printed into\nstdout.")), ToolOutput(tag="out_output_rest", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_rest", type_hint=File()), doc=OutputDocumentation(doc="output file for pairs of other types.  If\nthe path ends with .gz or .lz4, the output\nis pbgzip-/lz4c-compressed. By default, such\npairs are dropped."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pairtools_Select_V0_1_0().translate("wdl", allow_empty_container=True)

