from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String

Halliftover_V0_1_0 = CommandToolBuilder(tool="halLiftover", base_command=["halLiftover"], inputs=[ToolInput(tag="in_append", input_type=Boolean(optional=True), prefix="--append", doc=InputDocumentation(doc=":                     append results to tgtBed [default = 0]")), ToolInput(tag="in_cache_bytes", input_type=Int(optional=True), prefix="--cacheBytes", doc=InputDocumentation(doc=":         maximum size in bytes of regular hdf5 cache [default =\n15728640]")), ToolInput(tag="in_cache_mdc", input_type=Int(optional=True), prefix="--cacheMDC", doc=InputDocumentation(doc=":           number of metadata slots in hdf5 cache [default = 113]")), ToolInput(tag="in_cacher_dc", input_type=Int(optional=True), prefix="--cacheRDC", doc=InputDocumentation(doc=":           number of regular slots in hdf5 cache.  should be a\nprime number ~= 10 * DefaultCacheRDCBytes / chunk\n[default = 599999]")), ToolInput(tag="in_cache_w_zero", input_type=Int(optional=True), prefix="--cacheW0", doc=InputDocumentation(doc=":            w0 parameter fro hdf5 cache [default = 0.75]")), ToolInput(tag="in_coalescence_limit", input_type=String(optional=True), prefix="--coalescenceLimit", doc=InputDocumentation(doc=":   coalescence limit genome: the genome at or above the\nMRCA of source and target at which we stop looking for\nhomologies (default: MRCA) [default = ]")), ToolInput(tag="in_in_bed_version", input_type=Int(optional=True), prefix="--inBedVersion", doc=InputDocumentation(doc=":       bed version of input file as integer between 3 and 9 or\n12 reflecting the number of columns (see bed format")), ToolInput(tag="in_in_memory", input_type=Boolean(optional=True), prefix="--inMemory", doc=InputDocumentation(doc=":                   load all data in memory (and disable hdf5 cache)\n[default = 0]")), ToolInput(tag="in_keep_extra", input_type=Boolean(optional=True), prefix="--keepExtra", doc=InputDocumentation(doc=":                  keep extra columns. these are columns in the input\nbeyond the specified or detected bed version, and which\nare cut by default. [default = 0]")), ToolInput(tag="in_no_dupes", input_type=Boolean(optional=True), prefix="--noDupes", doc=InputDocumentation(doc=":                    do not map between duplications in graph. [default = 0]")), ToolInput(tag="in_out_bed_version", input_type=Int(optional=True), prefix="--outBedVersion", doc=InputDocumentation(doc=":      bed version of output file as integer between 3 and 9\nor 12 reflecting the number of columns (see bed format\nspecification for more details). Will be same as input\nby default. [default = 0]")), ToolInput(tag="in_out_psl", input_type=Boolean(optional=True), prefix="--outPSL", doc=InputDocumentation(doc=":                     write output in PSL instead of bed format. overrides\n--outBedVersion when specified. [default = 0]")), ToolInput(tag="in_out_psl_with_name", input_type=Boolean(optional=True), prefix="--outPSLWithName", doc=InputDocumentation(doc=":             write output as input BED name followed by PSL line\ninstead of bed format. overrides --outBedVersion when\nspecified. [default = 0]")), ToolInput(tag="in_tab", input_type=Boolean(optional=True), prefix="--tab", doc=InputDocumentation(doc=":                        input is tab-separated. this allows column entries to\ncontain spaces.  if this flag is not set, both spaces\nand tabs are used to separate input columns. [default =\n0]\n")), ToolInput(tag="in_hal_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_src_genome", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_src_bed", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_tgt_genome", input_type=String(), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_tgt_bed", input_type=String(), position=4, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Halliftover_V0_1_0().translate("wdl", allow_empty_container=True)

