from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String, Float

Hmmsim_V0_1_0 = CommandToolBuilder(tool="hmmsim", base_command=["hmmsim"], inputs=[ToolInput(tag="in_obtain_length_statistics", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc=": obtain alignment length statistics too")), ToolInput(tag="in_verbose_print_scores", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=": verbose: print scores")), ToolInput(tag="in_length_random_target", input_type=Int(optional=True), prefix="-L", doc=InputDocumentation(doc=": length of random target seqs  [100]  (n>0)")), ToolInput(tag="in_number_random_target", input_type=Int(optional=True), prefix="-N", doc=InputDocumentation(doc=": number of random target seqs  [1000]  (n>0)")), ToolInput(tag="in_direct_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc=": direct output to file <f>, not stdout")), ToolInput(tag="in_a_file", input_type=File(optional=True), prefix="--afile", doc=InputDocumentation(doc=": output alignment lengths to file <f>")), ToolInput(tag="in_e_file", input_type=String(optional=True), prefix="--efile", doc=InputDocumentation(doc=": output E vs. E plots to <f> in xy format")), ToolInput(tag="in_f_file", input_type=String(optional=True), prefix="--ffile", doc=InputDocumentation(doc=": output filter fraction: # seqs passing P thresh")), ToolInput(tag="in_pfile", input_type=String(optional=True), prefix="--pfile", doc=InputDocumentation(doc=": output P(S>x) plots to <f> in xy format")), ToolInput(tag="in_x_file", input_type=String(optional=True), prefix="--xfile", doc=InputDocumentation(doc=": output bitscores as binary double vector to <f>")), ToolInput(tag="in_fs", input_type=Boolean(optional=True), prefix="--fs", doc=InputDocumentation(doc=": multihit local alignment  [default]")), ToolInput(tag="in_sw", input_type=Boolean(optional=True), prefix="--sw", doc=InputDocumentation(doc=": unihit local alignment")), ToolInput(tag="in_ls", input_type=Boolean(optional=True), prefix="--ls", doc=InputDocumentation(doc=": multihit glocal alignment")), ToolInput(tag="in_unihit_glocal_alignment", input_type=Boolean(optional=True), prefix="--s", doc=InputDocumentation(doc=": unihit glocal alignment")), ToolInput(tag="in_v_it", input_type=Boolean(optional=True), prefix="--vit", doc=InputDocumentation(doc=": score seqs with the Viterbi algorithm  [default]")), ToolInput(tag="in_fwd", input_type=Boolean(optional=True), prefix="--fwd", doc=InputDocumentation(doc=": score seqs with the Forward algorithm")), ToolInput(tag="in_hyb", input_type=Boolean(optional=True), prefix="--hyb", doc=InputDocumentation(doc=": score seqs with the Hybrid algorithm")), ToolInput(tag="in_msv", input_type=Boolean(optional=True), prefix="--msv", doc=InputDocumentation(doc=": score seqs with the MSV algorithm")), ToolInput(tag="in_fast", input_type=Boolean(optional=True), prefix="--fast", doc=InputDocumentation(doc=": use the optimized versions of the above")), ToolInput(tag="in_tm_in", input_type=Float(optional=True), prefix="--tmin", doc=InputDocumentation(doc=": set lower bound tail mass for fwd,island  [0.02]")), ToolInput(tag="in_tmax", input_type=Float(optional=True), prefix="--tmax", doc=InputDocumentation(doc=": set lower bound tail mass for fwd,island  [0.02]")), ToolInput(tag="in_t_points", input_type=Int(optional=True), prefix="--tpoints", doc=InputDocumentation(doc=": set number of tail probs to try  [1]")), ToolInput(tag="in_t_linear", input_type=Boolean(optional=True), prefix="--tlinear", doc=InputDocumentation(doc=": use linear not log spacing of tail probs")), ToolInput(tag="in_eml", input_type=Int(optional=True), prefix="--EmL", doc=InputDocumentation(doc=": length of sequences for MSV Gumbel mu fit  [200]  (n>0)")), ToolInput(tag="in_emn", input_type=Int(optional=True), prefix="--EmN", doc=InputDocumentation(doc=": number of sequences for MSV Gumbel mu fit  [200]  (n>0)")), ToolInput(tag="in_evl", input_type=Int(optional=True), prefix="--EvL", doc=InputDocumentation(doc=": length of sequences for Viterbi Gumbel mu fit  [200]  (n>0)")), ToolInput(tag="in_evn", input_type=Int(optional=True), prefix="--EvN", doc=InputDocumentation(doc=": number of sequences for Viterbi Gumbel mu fit  [200]  (n>0)")), ToolInput(tag="in_efl", input_type=Int(optional=True), prefix="--EfL", doc=InputDocumentation(doc=": length of sequences for Forward exp tail tau fit  [100]  (n>0)")), ToolInput(tag="in_efn", input_type=Int(optional=True), prefix="--EfN", doc=InputDocumentation(doc=": number of sequences for Forward exp tail tau fit  [200]  (n>0)")), ToolInput(tag="in_eft", input_type=Float(optional=True), prefix="--Eft", doc=InputDocumentation(doc=": tail mass for Forward exponential tail tau fit  [0.04]  (0<x<1)")), ToolInput(tag="in_stall", input_type=Boolean(optional=True), prefix="--stall", doc=InputDocumentation(doc=": arrest after start: for debugging MPI under gdb")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc=": set random number seed to <n>  [0]")), ToolInput(tag="in_bg_flat", input_type=Boolean(optional=True), prefix="--bgflat", doc=InputDocumentation(doc=": set uniform background frequencies")), ToolInput(tag="in_bg_comp", input_type=Boolean(optional=True), prefix="--bgcomp", doc=InputDocumentation(doc=": set bg frequencies to model's average composition")), ToolInput(tag="in_x_no_length_model", input_type=Boolean(optional=True), prefix="--x-no-lengthmodel", doc=InputDocumentation(doc=": turn the H3 length model off")), ToolInput(tag="in_nu", input_type=Float(optional=True), prefix="--nu", doc=InputDocumentation(doc=": set nu parameter (# expected HSPs) for GMSV  [2.0]")), ToolInput(tag="in_p_thresh", input_type=Float(optional=True), prefix="--pthresh", doc=InputDocumentation(doc=": set P-value threshold for --ffile  [0.02]")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc="")), ToolInput(tag="in_hmm_file", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_direct_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_direct_output_file", type_hint=File()), doc=OutputDocumentation(doc=": direct output to file <f>, not stdout")), ToolOutput(tag="out_a_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_a_file", type_hint=File()), doc=OutputDocumentation(doc=": output alignment lengths to file <f>"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hmmsim_V0_1_0().translate("wdl", allow_empty_container=True)

