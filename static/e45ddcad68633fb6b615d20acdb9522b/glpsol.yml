!Command
command:
- glpsol
positional:
- !Positional
  optional: false
  position: 0
  name: language
  description: -m filename, --model filename
named:
- !Flag
  optional: true
  synonyms:
  - --mps
  description: read LP/MIP problem in fixed MPS format
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --freemps
  description: read LP/MIP problem in free MPS format (default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --lp
  description: read LP/MIP problem in CPLEX LP format
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --glp
  description: read LP/MIP problem in GLPK format
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --math
  description: read LP/MIP model written in GNU MathProg modeling
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -d
  - --data
  description: "read data section from filename (for --math only);\nif model file\
    \ also has data section, it is ignored"
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - -y
  - --display
  description: "send display output to filename (for --math only);\nby default the\
    \ output is sent to terminal"
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --seed
  description: "initialize pseudo-random number generator used in\nMathProg model\
    \ with specified seed (any integer);\nif seed value is ?, some random seed will\
    \ be used"
  args: !SimpleFlagArg
    name: value
- !Flag
  optional: true
  synonyms:
  - --mincost
  description: read min-cost flow problem in DIMACS format
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --maxflow
  description: read maximum flow problem in DIMACS format
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --cnf
  description: read CNF-SAT problem in DIMACS format
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --simplex
  description: use simplex method (default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --interior
  description: use interior point method (LP only)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -r
  - --read
  description: "read solution from filename rather to find it with\nthe solver"
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --min
  description: minimization
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max
  description: maximization
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --scale
  description: scale problem (default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --noscale
  description: do not scale problem
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  - --output
  description: write solution to filename in printable format
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - -w
  - --write
  description: write solution to filename in plain text format
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --ranges
  description: "write sensitivity analysis report to filename in\nprintable format\
    \ (simplex only)"
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --tmlim
  description: limit solution time to nnn seconds
  args: !SimpleFlagArg
    name: nnn
- !Flag
  optional: true
  synonyms:
  - --memlim
  description: limit available memory to nnn megabytes
  args: !SimpleFlagArg
    name: nnn
- !Flag
  optional: true
  synonyms:
  - --check
  description: do not solve problem, check input data only
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --name
  description: change problem name to probname
  args: !SimpleFlagArg
    name: probname
- !Flag
  optional: true
  synonyms:
  - --wmps
  description: write problem to filename in fixed MPS format
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --wfreemps
  description: write problem to filename in free MPS format
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --wlp
  description: write problem to filename in CPLEX LP format
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --wglp
  description: write problem to filename in GLPK format
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --wcnf
  description: write problem to filename in DIMACS CNF-SAT format
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --log
  description: write copy of terminal output to filename
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --luf
  description: plain LU-factorization (default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --btf
  description: block triangular LU-factorization
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --ft
  description: Forrest-Tomlin update (requires --luf; default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --cbg
  description: Schur complement + Bartels-Golub update
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --cgr
  description: Schur complement + Givens rotation update
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --primal
  description: use primal simplex (default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --dual
  description: use dual simplex
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --std
  description: use standard initial basis of all slacks
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --adv
  description: use advanced initial basis (default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --bib
  description: use Bixby's initial basis
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --ini
  description: "use as initial basis previously saved with -w\n(disables LP presolver)"
  args: !SimpleFlagArg
    name: filename
- !Flag
  optional: true
  synonyms:
  - --steep
  description: use steepest edge technique (default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --nosteep
  description: use standard "textbook" pricing
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --relax
  description: use Harris' two-pass ratio test (default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --norelax
  description: use standard "textbook" ratio test
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --presol
  description: use presolver (default; assumes --scale and --adv)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --nopresol
  description: do not use presolver
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --exact
  description: use simplex method based on exact arithmetic
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --xcheck
  description: check final basis using exact arithmetic
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --nord
  description: use natural (original) ordering
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --qmd
  description: use quotient minimum degree ordering
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --amd
  description: use approximate minimum degree ordering (default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --symamd
  description: use approximate minimum degree ordering
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --nomip
  description: "consider all integer variables as continuous\n(allows solving MIP\
    \ as pure LP)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --first
  description: branch on first integer variable
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --last
  description: branch on last integer variable
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --mostf
  description: branch on most fractional variable
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --drtom
  description: "branch using heuristic by Driebeck and Tomlin\n(default)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --pcost
  description: "branch using hybrid pseudocost heuristic (may be\nuseful for hard\
    \ instances)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --dfs
  description: backtrack using depth first search
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --bfs
  description: backtrack using breadth first search
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --bestp
  description: backtrack using the best projection heuristic
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --bestb
  description: "backtrack using node with best local bound\n(default)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --intopt
  description: use MIP presolver (default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --nointopt
  description: do not use MIP presolver
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --binarize
  description: "replace general integer variables by binary ones\n(assumes --intopt)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --fpump
  description: apply feasibility pump heuristic
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --proxy
  description: "[nnn]     apply proximity search heuristic (nnn is time limit\nin\
    \ seconds; default is 60)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gomory
  description: generate Gomory's mixed integer cuts
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --mir
  description: generate MIR (mixed integer rounding) cuts
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --cover
  description: generate mixed cover cuts
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --clique
  description: generate clique cuts
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --cuts
  description: generate all cuts above
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --mipgap
  description: set relative mip gap tolerance to tol
  args: !SimpleFlagArg
    name: tol
- !Flag
  optional: true
  synonyms:
  - --minisat
  description: "translate integer feasibility problem to CNF-SAT\nand solve it with\
    \ MiniSat solver"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --objbnd
  description: "add inequality obj <= bound (minimization) or\nobj >= bound (maximization)\
    \ to integer feasibility\nproblem (assumes --minisat)"
  args: !SimpleFlagArg
    name: bound
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: display this help information and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - -v
  - --version
  description: display program version and exit
  args: !EmptyFlagArg {}
help_text: "Usage: glpsol [options...] filename\n\nGeneral options:\n   --mps    \
  \         read LP/MIP problem in fixed MPS format\n   --freemps         read LP/MIP\
  \ problem in free MPS format (default)\n   --lp              read LP/MIP problem\
  \ in CPLEX LP format\n   --glp             read LP/MIP problem in GLPK format \n\
  \   --math            read LP/MIP model written in GNU MathProg modeling\n     \
  \                language\n   -m filename, --model filename\n                  \
  \   read model section and optional data section from\n                     filename\
  \ (same as --math)\n   -d filename, --data filename\n                     read data\
  \ section from filename (for --math only);\n                     if model file also\
  \ has data section, it is ignored\n   -y filename, --display filename\n        \
  \             send display output to filename (for --math only);\n             \
  \        by default the output is sent to terminal\n   --seed value      initialize\
  \ pseudo-random number generator used in\n                     MathProg model with\
  \ specified seed (any integer);\n                     if seed value is ?, some random\
  \ seed will be used\n   --mincost         read min-cost flow problem in DIMACS format\n\
  \   --maxflow         read maximum flow problem in DIMACS format\n   --cnf     \
  \        read CNF-SAT problem in DIMACS format\n   --simplex         use simplex\
  \ method (default)\n   --interior        use interior point method (LP only)\n \
  \  -r filename, --read filename\n                     read solution from filename\
  \ rather to find it with\n                     the solver\n   --min            \
  \ minimization\n   --max             maximization\n   --scale           scale problem\
  \ (default)\n   --noscale         do not scale problem\n   -o filename, --output\
  \ filename\n                     write solution to filename in printable format\n\
  \   -w filename, --write filename\n                     write solution to filename\
  \ in plain text format\n   --ranges filename\n                     write sensitivity\
  \ analysis report to filename in\n                     printable format (simplex\
  \ only)\n   --tmlim nnn       limit solution time to nnn seconds \n   --memlim nnn\
  \      limit available memory to nnn megabytes\n   --check           do not solve\
  \ problem, check input data only\n   --name probname   change problem name to probname\n\
  \   --wmps filename   write problem to filename in fixed MPS format\n   --wfreemps\
  \ filename\n                     write problem to filename in free MPS format\n\
  \   --wlp filename    write problem to filename in CPLEX LP format\n   --wglp filename\
  \   write problem to filename in GLPK format\n   --wcnf filename   write problem\
  \ to filename in DIMACS CNF-SAT format\n   --log filename    write copy of terminal\
  \ output to filename\n   -h, --help        display this help information and exit\n\
  \   -v, --version     display program version and exit\n\nLP basis factorization\
  \ options:\n   --luf             plain LU-factorization (default)\n   --btf    \
  \         block triangular LU-factorization\n   --ft              Forrest-Tomlin\
  \ update (requires --luf; default)\n   --cbg             Schur complement + Bartels-Golub\
  \ update\n   --cgr             Schur complement + Givens rotation update\n\nOptions\
  \ specific to simplex solver:\n   --primal          use primal simplex (default)\n\
  \   --dual            use dual simplex\n   --std             use standard initial\
  \ basis of all slacks\n   --adv             use advanced initial basis (default)\n\
  \   --bib             use Bixby's initial basis\n   --ini filename    use as initial\
  \ basis previously saved with -w\n                     (disables LP presolver)\n\
  \   --steep           use steepest edge technique (default)\n   --nosteep      \
  \   use standard \"textbook\" pricing\n   --relax           use Harris' two-pass\
  \ ratio test (default)\n   --norelax         use standard \"textbook\" ratio test\n\
  \   --presol          use presolver (default; assumes --scale and --adv)\n   --nopresol\
  \        do not use presolver\n   --exact           use simplex method based on\
  \ exact arithmetic\n   --xcheck          check final basis using exact arithmetic\n\
  \nOptions specific to interior-point solver:\n   --nord            use natural (original)\
  \ ordering\n   --qmd             use quotient minimum degree ordering\n   --amd\
  \             use approximate minimum degree ordering (default)\n   --symamd   \
  \       use approximate minimum degree ordering\n\nOptions specific to MIP solver:\n\
  \   --nomip           consider all integer variables as continuous\n           \
  \          (allows solving MIP as pure LP)\n   --first           branch on first\
  \ integer variable\n   --last            branch on last integer variable\n   --mostf\
  \           branch on most fractional variable \n   --drtom           branch using\
  \ heuristic by Driebeck and Tomlin\n                     (default)\n   --pcost \
  \          branch using hybrid pseudocost heuristic (may be\n                  \
  \   useful for hard instances)\n   --dfs             backtrack using depth first\
  \ search \n   --bfs             backtrack using breadth first search\n   --bestp\
  \           backtrack using the best projection heuristic\n   --bestb          \
  \ backtrack using node with best local bound\n                     (default)\n \
  \  --intopt          use MIP presolver (default)\n   --nointopt        do not use\
  \ MIP presolver\n   --binarize        replace general integer variables by binary\
  \ ones\n                     (assumes --intopt)\n   --fpump           apply feasibility\
  \ pump heuristic\n   --proxy [nnn]     apply proximity search heuristic (nnn is\
  \ time limit\n                     in seconds; default is 60)\n   --gomory     \
  \     generate Gomory's mixed integer cuts\n   --mir             generate MIR (mixed\
  \ integer rounding) cuts\n   --cover           generate mixed cover cuts\n   --clique\
  \          generate clique cuts\n   --cuts            generate all cuts above\n\
  \   --mipgap tol      set relative mip gap tolerance to tol\n   --minisat      \
  \   translate integer feasibility problem to CNF-SAT\n                     and solve\
  \ it with MiniSat solver\n   --objbnd bound    add inequality obj <= bound (minimization)\
  \ or\n                     obj >= bound (maximization) to integer feasibility\n\
  \                     problem (assumes --minisat)\n\nFor description of the MPS\
  \ and CPLEX LP formats see Reference Manual.\nFor description of the modeling language\
  \ see \"GLPK: Modeling Language\nGNU MathProg\". Both documents are included in\
  \ the GLPK distribution.\n\nSee GLPK web page at <http://www.gnu.org/software/glpk/glpk.html>.\n\
  \nPlease report bugs to <bug-glpk@gnu.org>.\n"
generated_using:
- --help
docker_image:
