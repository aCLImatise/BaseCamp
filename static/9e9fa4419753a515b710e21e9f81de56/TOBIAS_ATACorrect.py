from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean, Directory

Tobias_Atacorrect_V0_1_0 = CommandToolBuilder(tool="TOBIAS_ATACorrect", base_command=["TOBIAS", "ATACorrect"], inputs=[ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="A .bam-file containing reads to be corrected")), ToolInput(tag="in_genome", input_type=File(optional=True), prefix="--genome", doc=InputDocumentation(doc="A .fasta-file containing whole genomic sequence")), ToolInput(tag="in_peaks", input_type=File(optional=True), prefix="--peaks", doc=InputDocumentation(doc="A .bed-file containing ATAC peak regions")), ToolInput(tag="in_regions_in", input_type=String(optional=True), prefix="--regions-in", doc=InputDocumentation(doc="Input regions for estimating bias (default: regions not\nin peaks.bed)")), ToolInput(tag="in_regions_out", input_type=String(optional=True), prefix="--regions-out", doc=InputDocumentation(doc="Output regions (default: peaks.bed)")), ToolInput(tag="in_blacklist", input_type=String(optional=True), prefix="--blacklist", doc=InputDocumentation(doc="Blacklisted regions in .bed-format (default: None)")), ToolInput(tag="in_extend", input_type=Int(optional=True), prefix="--extend", doc=InputDocumentation(doc="Extend output regions with basepairs\nupstream/downstream (default: 100)")), ToolInput(tag="in_split_strands", input_type=Boolean(optional=True), prefix="--split-strands", doc=InputDocumentation(doc="Write out tracks per strand")), ToolInput(tag="in_norm_off", input_type=Boolean(optional=True), prefix="--norm-off", doc=InputDocumentation(doc="Switches off normalization based on number of reads")), ToolInput(tag="in_track_off", input_type=Boolean(optional=True), prefix="--track-off", doc=InputDocumentation(doc="[<track> [<track> ...]]\nSwitch off writing of individual .bigwig-tracks\n(uncorrected/bias/expected/corrected)")), ToolInput(tag="in_k_flank", input_type=Int(optional=True), prefix="--k_flank", doc=InputDocumentation(doc="Flank +/- of cutsite to estimate bias from (default:\n12)")), ToolInput(tag="in_read_shift", input_type=Int(optional=True), prefix="--read_shift", doc=InputDocumentation(doc="<int>         Read shift for forward and reverse reads (default: 4")), ToolInput(tag="in_bg_shift", input_type=Int(optional=True), prefix="--bg_shift", doc=InputDocumentation(doc="Read shift for estimation of background frequencies\n(default: 100)")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc="Window size for calculating expected signal (default:\n100)")), ToolInput(tag="in_score_mat", input_type=String(optional=True), prefix="--score_mat", doc=InputDocumentation(doc="Type of matrix to use for bias estimation (PWM/DWM)\n(default: DWM)")), ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix for output files (default: same as .bam file)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory for files (default: current working\ndirectory)")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Number of cores to use for computation (default: 1)")), ToolInput(tag="in_split", input_type=Int(optional=True), prefix="--split", doc=InputDocumentation(doc="Split of multiprocessing jobs (default: 100)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of output logging (0: silent, 1: errors/warnings,\n2: info, 3: stats, 4: debug, 5: spam) (default: 3)\n"))], outputs=[ToolOutput(tag="out_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prefix", type_hint=File()), doc=OutputDocumentation(doc="Prefix for output files (default: same as .bam file)")), ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory for files (default: current working\ndirectory)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tobias_Atacorrect_V0_1_0().translate("wdl", allow_empty_container=True)

