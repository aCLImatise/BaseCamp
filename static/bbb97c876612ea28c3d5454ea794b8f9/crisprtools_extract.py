from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Crisprtools_Extract_V0_1_0 = CommandToolBuilder(tool="crisprtools_extract", base_command=["crisprtools", "extract"], inputs=[ToolInput(tag="in_output_file_directory", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="output file directory  [default: .]")), ToolInput(tag="in_give_custom_prefix", input_type=String(optional=True), prefix="-O", doc=InputDocumentation(doc="Give a custom prefix to each of the outputed files [default: ]")), ToolInput(tag="in_comma_separated_list", input_type=Int(), prefix="-g", doc=InputDocumentation(doc="A comma separated list of group IDs that you would like to extract data from.\nNote that only the group number is needed, do not use prefixes like 'Group' or 'G', which\nare sometimes used in file names or in a .crispr file")), ToolInput(tag="in_extract_spacers_listed", input_type=File(optional=True), prefix="-s", doc=InputDocumentation(doc="[FILE] --spacer[=FILE]         Extract the spacers of the listed group.  By default\nprints to stdout however an output file can also be given as an optional arguement")), ToolInput(tag="in_extract_direct_repeats", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="[FILE] --direct-repeat[=FILE]  Extract the direct repeats of the listed group. By default\nprints to stdout however an output file can also be given as an optional arguement")), ToolInput(tag="in_extract_flanking_sequences", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="[FILE] --flanker[=FILE]        Extract the flanking sequences of the listed group. By default\nprints to stdout however an output file can also be given as an optional arguement")), ToolInput(tag="in_supress_coverage_information", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="Supress coverage information when printing spacers")), ToolInput(tag="in_header_prefix", input_type=String(optional=True), prefix="--header-prefix", doc=InputDocumentation(doc="Print a prefix to each of the headers [default: ]")), ToolInput(tag="in_split_group", input_type=File(optional=True), prefix="--split-group", doc=InputDocumentation(doc="Split the results into different files for each group.  File names\nspecified with -s -d -f will not be used in this mode but instead\noutput files will take the form of PREFIX_GROUP_[type].fa\n"))], outputs=[ToolOutput(tag="out_output_file_directory", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_directory", type_hint=File()), doc=OutputDocumentation(doc="output file directory  [default: .]")), ToolOutput(tag="out_extract_spacers_listed", output_type=File(optional=True), selector=InputSelector(input_to_select="in_extract_spacers_listed", type_hint=File()), doc=OutputDocumentation(doc="[FILE] --spacer[=FILE]         Extract the spacers of the listed group.  By default\nprints to stdout however an output file can also be given as an optional arguement")), ToolOutput(tag="out_extract_direct_repeats", output_type=File(optional=True), selector=InputSelector(input_to_select="in_extract_direct_repeats", type_hint=File()), doc=OutputDocumentation(doc="[FILE] --direct-repeat[=FILE]  Extract the direct repeats of the listed group. By default\nprints to stdout however an output file can also be given as an optional arguement")), ToolOutput(tag="out_extract_flanking_sequences", output_type=File(optional=True), selector=InputSelector(input_to_select="in_extract_flanking_sequences", type_hint=File()), doc=OutputDocumentation(doc="[FILE] --flanker[=FILE]        Extract the flanking sequences of the listed group. By default\nprints to stdout however an output file can also be given as an optional arguement")), ToolOutput(tag="out_split_group", output_type=File(optional=True), selector=InputSelector(input_to_select="in_split_group", type_hint=File()), doc=OutputDocumentation(doc="Split the results into different files for each group.  File names\nspecified with -s -d -f will not be used in this mode but instead\noutput files will take the form of PREFIX_GROUP_[type].fa\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Crisprtools_Extract_V0_1_0().translate("wdl", allow_empty_container=True)

