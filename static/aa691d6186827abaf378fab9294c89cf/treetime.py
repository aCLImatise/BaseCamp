from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Float, String, Array, Boolean, Directory

Treetime_V0_1_0 = CommandToolBuilder(tool="treetime", base_command=["treetime"], inputs=[ToolInput(tag="in_tree", input_type=File(optional=True), prefix="--tree", doc=InputDocumentation(doc="Name of file containing the tree in newick, nexus, or\nphylip format. If none is provided, treetime will\nattempt to build a tree from the alignment using\nfasttree, iqtree, or raxml (assuming they are\ninstalled)")), ToolInput(tag="in_sequence_length", input_type=Int(optional=True), prefix="--sequence-length", doc=InputDocumentation(doc="length of the sequence, used to calculate expected\nvariation in branch length. Not required if alignment\nis provided.")), ToolInput(tag="in_aln", input_type=File(optional=True), prefix="--aln", doc=InputDocumentation(doc="alignment file (fasta)")), ToolInput(tag="in_vcf_reference", input_type=File(optional=True), prefix="--vcf-reference", doc=InputDocumentation(doc="only for vcf input: fasta file of the sequence the VCF\nwas mapped to.")), ToolInput(tag="in_dates", input_type=Float(optional=True), prefix="--dates", doc=InputDocumentation(doc="csv file with dates for nodes with 'node_name, date'\nwhere date is float (as in 2012.15)")), ToolInput(tag="in_name_column", input_type=String(optional=True), prefix="--name-column", doc=InputDocumentation(doc="label of the column to be used as taxon name")), ToolInput(tag="in_date_column", input_type=String(optional=True), prefix="--date-column", doc=InputDocumentation(doc="label of the column to be used as sampling date")), ToolInput(tag="in_clock_filter", input_type=Int(optional=True), prefix="--clock-filter", doc=InputDocumentation(doc="ignore tips that don't follow a loose clock, 'clock-\nfilter=number of interquartile ranges from\nregression'. Default=3.0, set to 0 to switch off.")), ToolInput(tag="in_re_root", input_type=Array(t=String(), optional=True), prefix="--reroot", doc=InputDocumentation(doc="Reroot the tree using root-to-tip regression. Valid\nchoices are 'min_dev', 'least-squares', and 'oldest'.\n'least-squares' adjusts the root to minimize residuals\nof the root-to-tip vs sampling time regression,\n'min_dev' minimizes variance of root-to-tip distances.\n'least-squares' can be combined with --covariation to\naccount for shared ancestry. Alternatively, you can\nspecify a node name or a list of node names to be used\nas outgroup or use 'oldest' to reroot to the oldest\nnode. By default, TreeTime will reroot using 'least-\nsquares'. Use --keep-root to keep the current root.")), ToolInput(tag="in_keep_root", input_type=Boolean(optional=True), prefix="--keep-root", doc=InputDocumentation(doc="don't reroot the tree. Otherwise, reroot to minimize\nthe the residual of the regression of root-to-tip\ndistance and sampling time")), ToolInput(tag="in_tip_slack", input_type=String(optional=True), prefix="--tip-slack", doc=InputDocumentation(doc="excess variance associated with terminal nodes\naccounting for overdisperion of the molecular clock")), ToolInput(tag="in_covariation", input_type=Boolean(optional=True), prefix="--covariation", doc=InputDocumentation(doc="Account for covariation when estimating rates or\nrerooting using root-to-tip regression, default False.")), ToolInput(tag="in_gtr", input_type=String(optional=True), prefix="--gtr", doc=InputDocumentation(doc="GTR model to use. '--gtr infer' will infer a model\nfrom the data. Alternatively, specify the model type.\nIf the specified model requires additional options,\nuse '--gtr-params' to specify those.")), ToolInput(tag="in_gtr_params", input_type=Array(t=String(), optional=True), prefix="--gtr-params", doc=InputDocumentation(doc="GTR parameters for the model specified by the --gtr\nargument. The parameters should be feed as 'key=value'\nlist of parameters. Example: '--gtr K80 --gtr-params\nkappa=0.2 pis=0.25,0.25,0.25,0.25'. See the exact\ndefinitions of the parameters in the GTR creation\nmethods in treetime/nuc_models.py or\ntreetime/aa_models.py")), ToolInput(tag="in_aa", input_type=Boolean(optional=True), prefix="--aa", doc=InputDocumentation(doc="use aminoacid alphabet")), ToolInput(tag="in_clock_rate", input_type=String(optional=True), prefix="--clock-rate", doc=InputDocumentation(doc="if specified, the rate of the molecular clock won't be\noptimized.")), ToolInput(tag="in_clock_std_dev", input_type=String(optional=True), prefix="--clock-std-dev", doc=InputDocumentation(doc="standard deviation of the provided clock rate estimate")), ToolInput(tag="in_branch_length_mode", input_type=String(optional=True), prefix="--branch-length-mode", doc=InputDocumentation(doc="If set to 'input', the provided branch length will be\nused without modification. Note that branch lengths\noptimized by treetime are only accurate at short\nevolutionary distances.")), ToolInput(tag="in_confidence", input_type=Boolean(optional=True), prefix="--confidence", doc=InputDocumentation(doc="estimate confidence intervals of divergence times.")), ToolInput(tag="in_keep_poly_to_mies", input_type=Boolean(optional=True), prefix="--keep-polytomies", doc=InputDocumentation(doc="Don't resolve polytomies using temporal information.")), ToolInput(tag="in_relax", input_type=Float(optional=True), prefix="--relax", doc=InputDocumentation(doc="RELAX   use an autocorrelated molecular clock. Strength of the\ngaussian priors on branch specific rate deviation and\nthe coupling of parent and offspring rates can be\nspecified e.g. as --relax 1.0 0.5. Values around 1.0\ncorrespond to weak priors, larger values constrain\nrate deviations more strongly. Coupling 0 (--relax 1.0\n0) corresponds to an un-correlated clock.")), ToolInput(tag="in_max_iter", input_type=Int(optional=True), prefix="--max-iter", doc=InputDocumentation(doc="maximal number of iterations the inference cycle is\nrun. Note that for polytomy resolution and coalescence\nmodels max_iter should be at least 2")), ToolInput(tag="in_coalescent", input_type=String(optional=True), prefix="--coalescent", doc=InputDocumentation(doc="coalescent time scale -- sensible values are on the\norder of the average hamming distance of\ncontemporaneous sequences. In addition, 'opt'\n'skyline' are valid options and estimate a constant\ncoalescent rate or a piecewise linear coalescent rate\nhistory")), ToolInput(tag="in_n_skyline", input_type=Int(optional=True), prefix="--n-skyline", doc=InputDocumentation(doc="number of grid points in skyline coalescent model")), ToolInput(tag="in_plot_tree", input_type=File(optional=True), prefix="--plot-tree", doc=InputDocumentation(doc="filename to save the plot to. Suffix will determine\nformat (choices pdf, png, svg, default=pdf)")), ToolInput(tag="in_plot_rtt", input_type=File(optional=True), prefix="--plot-rtt", doc=InputDocumentation(doc="filename to save the plot to. Suffix will determine\nformat (choices pdf, png, svg, default=pdf)")), ToolInput(tag="in_tip_labels", input_type=Boolean(optional=True), prefix="--tip-labels", doc=InputDocumentation(doc="add tip labels (default for small trees with <30\nleaves)")), ToolInput(tag="in_no_tip_labels", input_type=Boolean(optional=True), prefix="--no-tip-labels", doc=InputDocumentation(doc="don't show tip labels (default for small trees with\n>=30 leaves)")), ToolInput(tag="in_keep_overhangs", input_type=Boolean(optional=True), prefix="--keep-overhangs", doc=InputDocumentation(doc="do not fill terminal gaps")), ToolInput(tag="in_zero_based", input_type=Boolean(optional=True), prefix="--zero-based", doc=InputDocumentation(doc="zero based mutation indexing")), ToolInput(tag="in_reconstruct_tip_states", input_type=Boolean(optional=True), prefix="--reconstruct-tip-states", doc=InputDocumentation(doc="overwrite ambiguous states on tips with the most\nlikely inferred state")), ToolInput(tag="in_report_ambiguous", input_type=Boolean(optional=True), prefix="--report-ambiguous", doc=InputDocumentation(doc="include transitions involving ambiguous states")), ToolInput(tag="in_verbose", input_type=Int(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbosity of output 0-6")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="directory to write the output to"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="directory to write the output to"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Treetime_V0_1_0().translate("wdl", allow_empty_container=True)

