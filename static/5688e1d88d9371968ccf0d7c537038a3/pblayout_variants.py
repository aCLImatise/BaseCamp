from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Pblayout_Variants_V0_1_0 = CommandToolBuilder(tool="pblayout_variants", base_command=["pblayout", "variants"], inputs=[ToolInput(tag="in_alias_seq_db", input_type=Boolean(optional=True), prefix="--alias-seqdb", doc=InputDocumentation(doc="STR   If provided, read names will be looked up in the SeqDB index cache to determine their")), ToolInput(tag="in_max_in_del_len", input_type=Boolean(optional=True), prefix="--max-indel-len", doc=InputDocumentation(doc="INT   Indels above this length will be masked and not used for error correction and variant\ncalling, and they won't contribute to the consensus. [10000000]")), ToolInput(tag="in_min_coverage", input_type=Boolean(optional=True), prefix="--min-coverage", doc=InputDocumentation(doc="INT   Minimum coverage of a pile for phasing. [6]")), ToolInput(tag="in_max_alleles", input_type=Boolean(optional=True), prefix="--max-alleles", doc=InputDocumentation(doc="INT   Ignore variant sites with more alleles than this value. If <= 0 no thresholding is\napplied. [2]")), ToolInput(tag="in_mask_diff_window", input_type=Boolean(optional=True), prefix="--mask-diff-window", doc=InputDocumentation(doc="INT   If two or more diffs are within this many bases from each other, mask them. [0]")), ToolInput(tag="in_num_rss_iterations", input_type=Boolean(optional=True), prefix="--num-rss-iterations", doc=InputDocumentation(doc="INT   Number of times to repeat NumRss beyond the first. [0]")), ToolInput(tag="in_phase", input_type=Boolean(optional=True), prefix="--phase", doc=InputDocumentation(doc="Run the phasing. Write <out_prefix>.keepers.ovl and .scraps.ovl")), ToolInput(tag="in_batch", input_type=Boolean(optional=True), prefix="--batch", doc=InputDocumentation(doc="INT   Number of piles to load in a batch. [1000]")), ToolInput(tag="in_write_rss_ascii", input_type=Boolean(optional=True), prefix="--write-rss-ascii", doc=InputDocumentation(doc="Write the read similarity scores in ASCII format instead of binary.")), ToolInput(tag="in_debug_verbose", input_type=Boolean(optional=True), prefix="--debug-verbose", doc=InputDocumentation(doc="Prints out extremely verbose debug information.")), ToolInput(tag="in_prefix", input_type=Boolean(optional=True), prefix="--prefix", doc=InputDocumentation(doc="STR   Prefix of the output files. Two files will be written: {out_prefix}.ovl and\n{out_prefix}.(ascii|binary).rss [pblayout]")), ToolInput(tag="in_num_threads", input_type=Boolean(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="INT   Number of threads to use, 0 means autodetection. [0]")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="STR   Set log level. Valid choices: (TRACE, DEBUG, INFO, WARN, FATAL). [WARN]")), ToolInput(tag="in_log_file", input_type=Boolean(optional=True), prefix="--log-file", doc=InputDocumentation(doc="FILE  Log to a file, instead of stderr.")), ToolInput(tag="in_in_fn", input_type=String(), position=0, doc=InputDocumentation(doc="STR   Path to a file in IPAOvl format.")), ToolInput(tag="in_ids_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--min-allele-count    INT   Maximum number of times a diff can occur in a pile to call it an error. Threshold is"))], outputs=[], container="quay.io/biocontainers/pbipa:1.3.2--hee625c5_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pblayout_Variants_V0_1_0().translate("wdl")

