from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File, Int

Proteininference_Py_V0_1_0 = CommandToolBuilder(tool="proteinInference.py", base_command=["proteinInference.py"], inputs=[ToolInput(tag="in_threads_to_run", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="Threads to run")), ToolInput(tag="in_fasta_file_match", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[FASTA], --fasta [FASTA]\nThe fasta file to match peptides against.")), ToolInput(tag="in_name_file_wish", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[OUT], --out [OUT]\nThe name of the file you wish to create with results\nappended.")), ToolInput(tag="in_peptide_out", input_type=Boolean(optional=True), prefix="--peptide-out", doc=InputDocumentation(doc="[PEPTIDE_OUT]\nThe file to write digested products to.")), ToolInput(tag="in_protein_out", input_type=Boolean(optional=True), prefix="--protein-out", doc=InputDocumentation(doc="[PROTEIN_OUT]\nThe file to write grouped products to.")), ToolInput(tag="in_strict", input_type=Boolean(optional=True), prefix="--strict", doc=InputDocumentation(doc="For numeric operations, fail if types are incorrect\n(converting NA to a float for instance).")), ToolInput(tag="in_tsv", input_type=File(optional=True), prefix="--tsv", doc=InputDocumentation(doc="The delimited file.")), ToolInput(tag="in_delimiter", input_type=String(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="The delimiter for fields.")), ToolInput(tag="in_peptide_col", input_type=Int(optional=True), prefix="--peptide-col", doc=InputDocumentation(doc="The column of interest (default: 1). Can be a column\nname.")), ToolInput(tag="in_header", input_type=Int(optional=True), prefix="--header", doc=InputDocumentation(doc="The number of headers lines (default: 1).")), ToolInput(tag="in_regex", input_type=String(optional=True), prefix="--regex", doc=InputDocumentation(doc="A perl regular expression determining which parts of\nthe header to capture.")), ToolInput(tag="in_inferred_name", input_type=String(optional=True), prefix="--inferred-name", doc=InputDocumentation(doc="The name you want to assign for protein inference (in\ncase you are regexing for gene names or something).")), ToolInput(tag="in_no_inference", input_type=Boolean(optional=True), prefix="--no-inference", doc=InputDocumentation(doc="Do not append proteins inferred from sequences.")), ToolInput(tag="in_no_equality", input_type=Boolean(optional=True), prefix="--no-equality", doc=InputDocumentation(doc="Do not consider Leucine and Isoleucine equal for\npeptide mapping.")), ToolInput(tag="in_enzyme", input_type=String(optional=True), prefix="--enzyme", doc=InputDocumentation(doc="[{trypsin,lysc,none,argc,gluc,aspn,V8} ...]\nThe enzyme used to digest the sample.")), ToolInput(tag="in_enzyme_pattern", input_type=String(optional=True), prefix="--enzyme-pattern", doc=InputDocumentation(doc="A regex cleavage pattern such as [KR]|{P} to cleave\nproteins with.")), ToolInput(tag="in_min", input_type=Int(optional=True), prefix="--min", doc=InputDocumentation(doc="Minimum cleavage length")), ToolInput(tag="in_max", input_type=Int(optional=True), prefix="--max", doc=InputDocumentation(doc="Maximum cleavage length")), ToolInput(tag="in_i_baq", input_type=Boolean(optional=True), prefix="--ibaq", doc=InputDocumentation(doc="Provide to append iBAQ values as well (requires\nprotein inference).")), ToolInput(tag="in_precursors", input_type=String(optional=True), prefix="--precursors", doc=InputDocumentation(doc="The column with precursor area (defaults to header\nlines containing 'Precursor').")), ToolInput(tag="in_i_baq_function", input_type=String(optional=True), prefix="--ibaq-function", doc=InputDocumentation(doc="The function to apply to groups of iBAQ values (for\nmultiple peptide matches). Options: concat, mean,\nmedian, var, std, sum, count")), ToolInput(tag="in_non_redundant", input_type=Boolean(optional=True), prefix="--non-redundant", doc=InputDocumentation(doc="Use only non-redundant theoretical tryptic peptides\nfor the iBAQ denominator.")), ToolInput(tag="in_normalize", input_type=Boolean(optional=True), prefix="--normalize", doc=InputDocumentation(doc="Normalize iBAQ to total intensity of column (useful\nfor comparing multiple samples).")), ToolInput(tag="in_unique_only", input_type=Boolean(optional=True), prefix="--unique-only", doc=InputDocumentation(doc="Only group proteins with unique peptides")), ToolInput(tag="in_position", input_type=Boolean(optional=True), prefix="--position", doc=InputDocumentation(doc="Write the position of the peptide matches.")), ToolInput(tag="in_case_sensitive", input_type=Boolean(optional=True), prefix="--case-sensitive", doc=InputDocumentation(doc="Treat peptides as case-sensitive (ie separate modified\npeptides)")), ToolInput(tag="in_mod_out", input_type=Boolean(optional=True), prefix="--mod-out", doc=InputDocumentation(doc="[MOD_OUT]   The file to write a modification-centric summary to.")), ToolInput(tag="in_modification_site", input_type=Boolean(optional=True), prefix="--modification-site", doc=InputDocumentation(doc="Write the position in the parent protein of the\nmodification (requires case-sensitive and\nmodifications being lower-cased).")), ToolInput(tag="in_mod_col", input_type=String(optional=True), prefix="--mod-col", doc=InputDocumentation(doc="The column containing modification information.")), ToolInput(tag="in_mod_col_func", input_type=String(optional=True), prefix="--mod-col-func", doc=InputDocumentation(doc="The function to apply. Options: concat, mean, median,\nvar, std, sum, count\n")), ToolInput(tag="in_fast_a", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_out", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_name_file_wish", output_type=File(optional=True), selector=InputSelector(input_to_select="in_name_file_wish", type_hint=File()), doc=OutputDocumentation(doc="[OUT], --out [OUT]\nThe name of the file you wish to create with results\nappended."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Proteininference_Py_V0_1_0().translate("wdl", allow_empty_container=True)

