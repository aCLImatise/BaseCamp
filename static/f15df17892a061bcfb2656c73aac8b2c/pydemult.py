from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Directory, Boolean

Pydemult_V0_1_0 = CommandToolBuilder(tool="pydemult", base_command=["pydemult"], inputs=[ToolInput(tag="in_fast_q", input_type=File(optional=True), prefix="--fastq", doc=InputDocumentation(doc="FASTQ file for demultiplexing.")), ToolInput(tag="in_sample_sheet", input_type=String(optional=True), prefix="--samplesheet", doc=InputDocumentation(doc="Samplesheet containing barcodes and samplenames")), ToolInput(tag="in_column_separator", input_type=String(optional=True), prefix="--column-separator", doc=InputDocumentation(doc="Separator that is used in samplesheet")), ToolInput(tag="in_barcode_column", input_type=String(optional=True), prefix="--barcode-column", doc=InputDocumentation(doc="Name of the column containing barcodes")), ToolInput(tag="in_sample_column", input_type=String(optional=True), prefix="--sample-column", doc=InputDocumentation(doc="Name of the column containing sample names")), ToolInput(tag="in_barcode_regex", input_type=String(optional=True), prefix="--barcode-regex", doc=InputDocumentation(doc="Regular expression to parse cell barcode (CB) and UMIs\n(UMI) from read names")), ToolInput(tag="in_edit_distance", input_type=Int(optional=True), prefix="--edit-distance", doc=InputDocumentation(doc="Maximum allowed edit distance for barcodes")), ToolInput(tag="in_edit_alphabet", input_type=String(optional=True), prefix="--edit-alphabet", doc=InputDocumentation(doc="The alphabet that is used to created edited barcodes")), ToolInput(tag="in_buffer_size", input_type=Int(optional=True), prefix="--buffer-size", doc=InputDocumentation(doc="Buffer size for the FASTQ reader (in Bytes). Must be\nlarge enough to contain the largest entry.")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory to write individual fastq files to.")), ToolInput(tag="in_output_file_suffix", input_type=File(optional=True), prefix="--output-file-suffix", doc=InputDocumentation(doc=".fastq.gz\nA suffix to append to individual fastq files.")), ToolInput(tag="in_write_unmatched", input_type=Boolean(optional=True), prefix="--write-unmatched", doc=InputDocumentation(doc="Write reads with unmatched barcodes into")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use for multiprocessing.")), ToolInput(tag="in_writer_threads", input_type=Int(optional=True), prefix="--writer-threads", doc=InputDocumentation(doc="Number of threads to use for writing")), ToolInput(tag="in_unmatched_dot_fast_q_do_tgz", input_type=String(), position=0, doc=InputDocumentation(doc="--keep-empty          Keep empty sequences in demultiplexed output files."))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory to write individual fastq files to.")), ToolOutput(tag="out_output_file_suffix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_suffix", type_hint=File()), doc=OutputDocumentation(doc=".fastq.gz\nA suffix to append to individual fastq files."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pydemult_V0_1_0().translate("wdl", allow_empty_container=True)

