from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Float, Int, File, String

Rnapvmin_V0_1_0 = CommandToolBuilder(tool="RNApvmin", base_command=["RNApvmin"], inputs=[ToolInput(tag="in_detailed_help", input_type=Boolean(optional=True), prefix="--detailed-help", doc=InputDocumentation(doc="Print help, including all details and hidden\noptions, and exit")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--full-help", doc=InputDocumentation(doc="Print help, including hidden options, and exit")), ToolInput(tag="in_tau_sigma_ratio", input_type=Float(optional=True), prefix="--tauSigmaRatio", doc=InputDocumentation(doc="Ratio of the weighting factors tau and sigma.\n(default=`1.0')")), ToolInput(tag="in_objective_function", input_type=Int(optional=True), prefix="--objectiveFunction", doc=InputDocumentation(doc="The energies of the perturbation vector and the\ndiscripancies between predicted and observed\npairing probabilities contribute to the\nobjective function. This parameter defines,\nwhich function is used to process the\ncontributions before summing them up.\n0 square\n1 absolute.  (default=`0')")), ToolInput(tag="in_sample_size", input_type=Int(optional=True), prefix="--sampleSize", doc=InputDocumentation(doc="The iterative minimization process requires to\nevaluate the gradient of the objective\nfunction.  (default=`1000')")), ToolInput(tag="in_nonredundant", input_type=Boolean(optional=True), prefix="--nonRedundant", doc=InputDocumentation(doc="Enable non-redundant sampling strategy.\n(default=off)")), ToolInput(tag="in_intermediate_path", input_type=File(optional=True), prefix="--intermediatePath", doc=InputDocumentation(doc="Write an output file for each iteration of the\nminimization process.")), ToolInput(tag="in_initial_vector", input_type=Int(optional=True), prefix="--initialVector", doc=InputDocumentation(doc="Specify the vector of initial pertubations.\n(default=`0')")), ToolInput(tag="in_minimizer", input_type=Int(optional=True), prefix="--minimizer", doc=InputDocumentation(doc="Set the minimizing algorithm used for finding\nan appropriate perturbation vector.\n(possible values='conjugate_fr',\n'conjugate_pr', 'vector_bfgs',\n'vector_bfgs2', 'steepest_descent',\n'default' default=`default')")), ToolInput(tag="in_temp", input_type=Float(optional=True), prefix="--temp", doc=InputDocumentation(doc="Rescale energy parameters to a temperature in\ndegrees centigrade.  (default=`37.0')")), ToolInput(tag="in_no_tetra", input_type=Boolean(optional=True), prefix="--noTetra", doc=InputDocumentation(doc="Do not include special tabulated stabilizing\nenergies for tri-, tetra- and hexaloop\nhairpins.  (default=off)")), ToolInput(tag="in_dangles", input_type=Int(optional=True), prefix="--dangles", doc=InputDocumentation(doc="Specify 'dangling end' model for bases\nadjacent to helices in free ends and\nmulti-loops.  (default=`2')")), ToolInput(tag="in_no_lp", input_type=Boolean(optional=True), prefix="--noLP", doc=InputDocumentation(doc="Produce structures without lonely pairs\n(helices of length 1).  (default=off)")), ToolInput(tag="in_no_gu", input_type=Boolean(optional=True), prefix="--noGU", doc=InputDocumentation(doc="Do not allow GU pairs.  (default=off)")), ToolInput(tag="in_no_closing_gu", input_type=Boolean(optional=True), prefix="--noClosingGU", doc=InputDocumentation(doc="Do not allow GU pairs at the end of helices.\n(default=off)")), ToolInput(tag="in_param_file", input_type=File(optional=True), prefix="--paramFile", doc=InputDocumentation(doc="Read energy parameters from paramfile, instead\nof using the default parameter set.")), ToolInput(tag="in_max_bp_span", input_type=Int(optional=True), prefix="--maxBPspan", doc=InputDocumentation(doc="Set the maximum base pair span.  (default=`-1')")), ToolInput(tag="in_program", input_type=String(), position=0, doc=InputDocumentation(doc="-j, --numThreads=INT          Set the number of threads used for")), ToolInput(tag="in_calculations_dot", input_type=String(), position=1, doc=InputDocumentation(doc="--shapeConversion=STRING  Specify the method used to convert SHAPE"))], outputs=[ToolOutput(tag="out_intermediate_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_intermediate_path", type_hint=File()), doc=OutputDocumentation(doc="Write an output file for each iteration of the\nminimization process."))], container="quay.io/biocontainers/viennarna:2.4.17--py36hd181a71_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rnapvmin_V0_1_0().translate("wdl")

