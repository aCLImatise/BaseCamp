!Command
command:
- pttree
positional:
- !Positional
  optional: false
  position: 0
  name: node
  description: --no-print-compression
named:
- !Flag
  optional: true
  synonyms:
  - -L
  - --max-level
  description: "maximum branch depth of tree to display (-1 == no\nlimit)"
  args: !SimpleFlagArg
    name: MAX_DEPTH
- !Flag
  optional: true
  synonyms:
  - -S
  - --sort-by
  description: "artificially order nodes, can be either \"size\", \"name\"\nor \"\
    none\""
  args: !SimpleFlagArg
    name: SORT_BY
- !Flag
  optional: true
  synonyms:
  - --print-size
  description: print size of each node/branch
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --no-print-size
  - --print-shape
  description: print shape of each node
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --no-print-shape
  - --print-compression
  description: print compression library(level) for each compressed
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --print-percent
  description: "print size of each node as a % of the total tree size\non disk"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --no-print-percent
  - --use-si-units
  description: report sizes in SI units (1 MB == 10^6 B)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --use-binary-units
  description: report sizes in binary units (1 MiB == 2^20 B)
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: pttree [-h] [-L MAX_DEPTH] [-S SORT_BY] [--print-size]\n      \
  \        [--no-print-size] [--print-shape] [--no-print-shape]\n              [--print-compression]\
  \ [--no-print-compression] [--print-percent]\n              [--no-print-percent]\
  \ [--use-si-units] [--use-binary-units]\n              filename[:nodepath]\n\n`pttree`\
  \ is designed to give a quick overview of the contents of a PyTables\nHDF5 file\
  \ by printing a depth-indented list of nodes, similar to the output of\nthe Unix\
  \ `tree` function. It can also display the size, shape and compression\nstates of\
  \ individual nodes, as well as summary information for the whole file.\nFor a more\
  \ verbose output (including metadata), see `ptdump`.\n\npositional arguments:\n\
  \  filename[:nodepath]   path to the root of the tree structure\n\noptional arguments:\n\
  \  -h, --help            show this help message and exit\n  -L MAX_DEPTH, --max-level\
  \ MAX_DEPTH\n                        maximum branch depth of tree to display (-1\
  \ == no\n                        limit)\n  -S SORT_BY, --sort-by SORT_BY\n     \
  \                   artificially order nodes, can be either \"size\", \"name\"\n\
  \                        or \"none\"\n  --print-size          print size of each\
  \ node/branch\n  --no-print-size\n  --print-shape         print shape of each node\n\
  \  --no-print-shape\n  --print-compression   print compression library(level) for\
  \ each compressed\n                        node\n  --no-print-compression\n  --print-percent\
  \       print size of each node as a % of the total tree size\n                \
  \        on disk\n  --no-print-percent\n  --use-si-units        report sizes in\
  \ SI units (1 MB == 10^6 B)\n  --use-binary-units    report sizes in binary units\
  \ (1 MiB == 2^20 B)\n"
generated_using:
- --help
docker_image:
