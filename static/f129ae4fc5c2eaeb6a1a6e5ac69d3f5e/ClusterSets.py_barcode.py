from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, File, Boolean, Int, Float

Clustersets_Py_Barcode_V0_1_0 = CommandToolBuilder(tool="ClusterSets.py_barcode", base_command=["ClusterSets.py", "barcode"], inputs=[ToolInput(tag="in_list_fastafastq_files", input_type=Array(t=String(), optional=True), prefix="-s", doc=InputDocumentation(doc="A list of FASTA/FASTQ files containing sequences to\nprocess. (default: None)")), ToolInput(tag="in_explicit_output_file", input_type=Array(t=String(), optional=True), prefix="-o", doc=InputDocumentation(doc="Explicit output file name(s). Note, this argument\ncannot be used with the --failed, --outdir, or\n--outname arguments. If unspecified, then the output\nfilename will be based on the input filename(s).\n(default: None)")), ToolInput(tag="in_outdir", input_type=File(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Specify to changes the output directory to the\nlocation specified. The input file directory is used\nif this is not specified. (default: None)")), ToolInput(tag="in_out_name", input_type=File(optional=True), prefix="--outname", doc=InputDocumentation(doc="Changes the prefix of the successfully processed\noutput file to the string specified. May not be\nspecified with multiple input files. (default: None)")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Specify to force output as FASTA rather than FASTQ.\n(default: None)")), ToolInput(tag="in_delim", input_type=String(optional=True), prefix="--delim", doc=InputDocumentation(doc="DELIMITER DELIMITER\nA list of the three delimiters that separate\nannotation blocks, field names and values, and values\nwithin a field, respectively. (default: ('|', '=',\n','))")), ToolInput(tag="in_nproc", input_type=Int(optional=True), prefix="--nproc", doc=InputDocumentation(doc="The number of simultaneous computational processes to\nexecute (CPU cores to utilized). (default: 8)")), ToolInput(tag="in_name_add_information", input_type=String(optional=True), prefix="-k", doc=InputDocumentation(doc="The name of the output annotation field to add with\nthe cluster information for each sequence. (default:\nCLUSTER)")), ToolInput(tag="in_ident", input_type=Float(optional=True), prefix="--ident", doc=InputDocumentation(doc="The sequence identity threshold to use for clustering.\nNote, how identity is calculated is specific to the\nclustering application used. (default: 0.9)")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc="The minimum allowed shorter/longer sequence length\nratio allowed within a cluster. Setting this value to\n1.0 will require identical length matches within\nclusters. A value of 0.0 will allow clusters\ncontaining any length of substring. (default: 0.0)")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="A string to use as the prefix for each cluster\nidentifier. By default, cluster identifiers will be\nnumeric values only. (default: )")), ToolInput(tag="in_cluster", input_type=String(optional=True), prefix="--cluster", doc=InputDocumentation(doc="The clustering tool to use for assigning clusters.\nMust be one of usearch, vsearch or cd-hit-est. Note,\nfor cd-hit-est the maximum memory limit is set to 3GB.\n(default: usearch)")), ToolInput(tag="in_exec", input_type=File(optional=True), prefix="--exec", doc=InputDocumentation(doc="The name or path of the usearch, vsearch or cd-hit-est\nexecutable. (default: None)")), ToolInput(tag="in_annotation_field_containing", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="The annotation field containing barcode sequences.\n(default: BARCODE)\n"))], outputs=[], container="quay.io/biocontainers/presto:0.6.2--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Clustersets_Py_Barcode_V0_1_0().translate("wdl")

