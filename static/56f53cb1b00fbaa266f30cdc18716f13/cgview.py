from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Float, Boolean, String, File, Directory

Cgview_V0_1_0 = CommandToolBuilder(tool="cgview", base_command=["cgview"], inputs=[ToolInput(tag="in_specifies_label_font_size", input_type=Int(optional=True), prefix="-A", doc=InputDocumentation(doc="Specifies a label font size.")), ToolInput(tag="in_specifies_base_center", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="Specifies the base to center on when zooming.")), ToolInput(tag="in_specifies_legend_font_size", input_type=Int(optional=True), prefix="-D", doc=InputDocumentation(doc="Specifies a legend font size.")), ToolInput(tag="in_specifies_tick_density", input_type=Float(optional=True), prefix="-d", doc=InputDocumentation(doc="Specifies tick density, between 0 and 1.0. Default is 1.0.")), ToolInput(tag="in_embed_vectorbased_text", input_type=Boolean(optional=True), prefix="-E", doc=InputDocumentation(doc="Whether or not to embed vector-based text in SVG output.")), ToolInput(tag="in_exclude_svg_output", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="Whether or not to exclude SVG output from image series.")), ToolInput(tag="in_format_png_svg", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="The format of the output: PNG, JPG, SVG, or SVGZ.")), ToolInput(tag="in_html_file_create", input_type=File(optional=True), prefix="-h", doc=InputDocumentation(doc="HTML file to create.")), ToolInput(tag="in_the_height_map", input_type=Int(optional=True), prefix="-H", doc=InputDocumentation(doc="The height of the map.")), ToolInput(tag="in_input_file_parse", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="The input file to parse.")), ToolInput(tag="in_draw_labels_inside", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="Whether or not to draw labels on the inside of the backbone circle.")), ToolInput(tag="in_width_external_legend", input_type=Int(optional=True), prefix="-L", doc=InputDocumentation(doc="The width of an external legend.")), ToolInput(tag="in_image_file_create", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="The image file to create.")), ToolInput(tag="in_path_image_option", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="The path to the image file in the HTML file created using the -h option.")), ToolInput(tag="in_whether_remove_legends", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="Whether or not to remove legends.")), ToolInput(tag="in_whether_remove_labels", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="Whether or not to remove labels.")), ToolInput(tag="in_directory_receive_series", input_type=Directory(optional=True), prefix="-s", doc=InputDocumentation(doc="Directory to receive an image series.")), ToolInput(tag="in_reference_external_stylesheet", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="Whether or not to reference external stylesheet in HTML output.")), ToolInput(tag="in_reference_overlibjs_html", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="Whether or not to reference overlib.js in HTML output.")), ToolInput(tag="in_specifies_ruler_font_size", input_type=Int(optional=True), prefix="-U", doc=InputDocumentation(doc="Specifies a sequence ruler font size.")), ToolInput(tag="in_the_width_map", input_type=Int(optional=True), prefix="-W", doc=InputDocumentation(doc="The width of the map.")), ToolInput(tag="in_comma_separated_values", input_type=String(optional=True), prefix="-x", doc=InputDocumentation(doc="Comma separated zoom values for image series.")), ToolInput(tag="in_the_factor_zoom", input_type=String(optional=True), prefix="-z", doc=InputDocumentation(doc="The factor to zoom in by.")), ToolInput(tag="in_jar", input_type=String(optional=True), prefix="-jar", doc=InputDocumentation(doc="")), ToolInput(tag="in_java", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cgview_V0_1_0().translate("wdl", allow_empty_container=True)

