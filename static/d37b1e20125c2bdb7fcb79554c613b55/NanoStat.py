from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, Int, Boolean, String, Array

Nanostat_V0_1_0 = CommandToolBuilder(tool="NanoStat", base_command=["NanoStat"], inputs=[ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Specify directory for output, only in combination with -n.")), ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Specify an optional prefix to be used for the output file.")), ToolInput(tag="in_name", input_type=File(optional=True), prefix="--name", doc=InputDocumentation(doc="Specify a filename/path for the output, stdout is the default.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Set the allowed number of threads to be used by the script.")), ToolInput(tag="in_barcoded", input_type=Boolean(optional=True), prefix="--barcoded", doc=InputDocumentation(doc="Use if you want to split the summary file by barcode")), ToolInput(tag="in_read_type", input_type=String(optional=True), prefix="--readtype", doc=InputDocumentation(doc="Which read type to extract information about from summary. Options are 1D, 2D,\n1D2")), ToolInput(tag="in_fast_q", input_type=Array(t=File(), optional=True), prefix="--fastq", doc=InputDocumentation(doc="Data is in one or more (compressed) fastq file(s).")), ToolInput(tag="in_fast_a", input_type=Array(t=File(), optional=True), prefix="--fasta", doc=InputDocumentation(doc="Data is in one or more (compressed) fasta file(s).")), ToolInput(tag="in_summary", input_type=Array(t=File(), optional=True), prefix="--summary", doc=InputDocumentation(doc="Data is in one or more (compressed) summary file(s)generated by albacore or\nguppy.")), ToolInput(tag="in_bam", input_type=Array(t=File(), optional=True), prefix="--bam", doc=InputDocumentation(doc="Data is in one or more sorted bam file(s).")), ToolInput(tag="in_ub_am", input_type=Array(t=File(), optional=True), prefix="--ubam", doc=InputDocumentation(doc="Data is in one or more unmapped bam file(s).")), ToolInput(tag="in_cram", input_type=Array(t=File(), optional=True), prefix="--cram", doc=InputDocumentation(doc="Data is in one or more sorted cram file(s).")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Specify directory for output, only in combination with -n.")), ToolOutput(tag="out_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prefix", type_hint=File()), doc=OutputDocumentation(doc="Specify an optional prefix to be used for the output file.")), ToolOutput(tag="out_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_name", type_hint=File()), doc=OutputDocumentation(doc="Specify a filename/path for the output, stdout is the default."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nanostat_V0_1_0().translate("wdl", allow_empty_container=True)

