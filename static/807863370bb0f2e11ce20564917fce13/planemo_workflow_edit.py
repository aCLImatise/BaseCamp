from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Boolean, File, String, Int, Float

Planemo_Workflow_Edit_V0_1_0 = CommandToolBuilder(tool="planemo_workflow_edit", base_command=["planemo", "workflow_edit"], inputs=[ToolInput(tag="in_galaxy_root", input_type=Directory(optional=True), prefix="--galaxy_root", doc=InputDocumentation(doc="Root of development galaxy directory to\nexecute command with.")), ToolInput(tag="in_galaxy_python_version", input_type=Boolean(optional=True), prefix="--galaxy_python_version", doc=InputDocumentation(doc="[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under")), ToolInput(tag="in_extra_tools", input_type=File(optional=True), prefix="--extra_tools", doc=InputDocumentation(doc="Extra tool sources to include in Galaxy's\ntool panel (file or directory). These will\nnot be linted/tested/etc... but they will be\navailable to workflows and for interactive\nuse.")), ToolInput(tag="in_install_galaxy", input_type=Boolean(optional=True), prefix="--install_galaxy", doc=InputDocumentation(doc="Download and configure a disposable copy of\nGalaxy from github.")), ToolInput(tag="in_galaxy_branch", input_type=String(optional=True), prefix="--galaxy_branch", doc=InputDocumentation(doc="Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root isn't specified.")), ToolInput(tag="in_galaxy_source", input_type=String(optional=True), prefix="--galaxy_source", doc=InputDocumentation(doc="Git source of Galaxy to target (defaults to\nthe official galaxyproject github source if\na Galaxy root isn't specified.")), ToolInput(tag="in_skip_v_env", input_type=Boolean(optional=True), prefix="--skip_venv", doc=InputDocumentation(doc="Do not create or source a virtualenv\nenvironment for Galaxy, this should be used\nor instance to preserve an externally\nconfigured virtual environment or conda\nenvironment.")), ToolInput(tag="in_no_cache_galaxy", input_type=Boolean(optional=True), prefix="--no_cache_galaxy", doc=InputDocumentation(doc="Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\nNot caching this results in faster downloads\n(no git) - so is better on throw away\ninstances such with TravisCI.")), ToolInput(tag="in_no_cleanup", input_type=Boolean(optional=True), prefix="--no_cleanup", doc=InputDocumentation(doc="Do not cleanup temp files created for and by")), ToolInput(tag="in_no_docker", input_type=Boolean(optional=True), prefix="--no_docker", doc=InputDocumentation(doc="Run Galaxy tools in Docker if enabled.")), ToolInput(tag="in_docker_cmd", input_type=String(optional=True), prefix="--docker_cmd", doc=InputDocumentation(doc="Command used to launch docker (defaults to\ndocker).")), ToolInput(tag="in_no_docker_sudo", input_type=Boolean(optional=True), prefix="--no_docker_sudo", doc=InputDocumentation(doc="Flag to use sudo when running docker.")), ToolInput(tag="in_docker_host", input_type=String(optional=True), prefix="--docker_host", doc=InputDocumentation(doc="Docker host to target when executing docker\ncommands (defaults to localhost).")), ToolInput(tag="in_docker_sudo_cmd", input_type=String(optional=True), prefix="--docker_sudo_cmd", doc=InputDocumentation(doc="sudo command to use when --docker_sudo is\nenabled (defaults to sudo).")), ToolInput(tag="in_mulled_containers", input_type=Boolean(optional=True), prefix="--mulled_containers", doc=InputDocumentation(doc="Test tools against mulled containers (forces\n--docker).")), ToolInput(tag="in_job_config_file", input_type=File(optional=True), prefix="--job_config_file", doc=InputDocumentation(doc="Job configuration file for Galaxy to target.")), ToolInput(tag="in_tool_dependency_dir", input_type=Directory(optional=True), prefix="--tool_dependency_dir", doc=InputDocumentation(doc="Tool dependency dir for Galaxy to target.")), ToolInput(tag="in_port", input_type=Int(optional=True), prefix="--port", doc=InputDocumentation(doc="Port to serve Galaxy on (default is 9090).")), ToolInput(tag="in_host", input_type=Float(optional=True), prefix="--host", doc=InputDocumentation(doc="Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted to localhost connections\nfor security reasons set to 0.0.0.0 to bind\nGalaxy to all ports including potentially\npublicly accessible ones.")), ToolInput(tag="in_engine", input_type=Boolean(optional=True), prefix="--engine", doc=InputDocumentation(doc="[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but running Galaxy within a Docker\ncontainer.")), ToolInput(tag="in_non_strict_cwl", input_type=Boolean(optional=True), prefix="--non_strict_cwl", doc=InputDocumentation(doc="Disable strict validation of CWL.")), ToolInput(tag="in_docker_galaxy_image", input_type=String(optional=True), prefix="--docker_galaxy_image", doc=InputDocumentation(doc="Docker image identifier for docker-galaxy-\nflavor used if engine type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy.")), ToolInput(tag="in_docker_extra_volume", input_type=File(optional=True), prefix="--docker_extra_volume", doc=InputDocumentation(doc="Extra path to mount if --engine docker.")), ToolInput(tag="in_test_data", input_type=Directory(optional=True), prefix="--test_data", doc=InputDocumentation(doc="test-data directory to for specified\ntool(s).")), ToolInput(tag="in_tool_data_table", input_type=File(optional=True), prefix="--tool_data_table", doc=InputDocumentation(doc="tool_data_table_conf.xml file to for\nspecified tool(s).")), ToolInput(tag="in_dependency_resolvers_config_file", input_type=File(optional=True), prefix="--dependency_resolvers_config_file", doc=InputDocumentation(doc="Dependency resolver configuration for Galaxy\nto target.")), ToolInput(tag="in_brew_dependency_resolution", input_type=Boolean(optional=True), prefix="--brew_dependency_resolution", doc=InputDocumentation(doc="Configure Galaxy to use plain brew\ndependency resolution.")), ToolInput(tag="in_shed_dependency_resolution", input_type=Boolean(optional=True), prefix="--shed_dependency_resolution", doc=InputDocumentation(doc="Configure Galaxy to use brewed Tool Shed\ndependency resolution.")), ToolInput(tag="in_no_dependency_resolution", input_type=Boolean(optional=True), prefix="--no_dependency_resolution", doc=InputDocumentation(doc="Configure Galaxy with no dependency")), ToolInput(tag="in_cond_a_debug", input_type=Boolean(optional=True), prefix="--conda_debug", doc=InputDocumentation(doc="Enable more verbose conda logging.")), ToolInput(tag="in_cond_a_ensure_channels", input_type=String(optional=True), prefix="--conda_ensure_channels", doc=InputDocumentation(doc="Ensure conda is configured with specified\ncomma separated list of channels.")), ToolInput(tag="in_cond_a_use_local", input_type=Boolean(optional=True), prefix="--conda_use_local", doc=InputDocumentation(doc="Use locally built packages while building\nConda environments.")), ToolInput(tag="in_cond_a_dependency_resolution", input_type=Boolean(optional=True), prefix="--conda_dependency_resolution", doc=InputDocumentation(doc="Configure Galaxy to use only conda for\ndependency resolution.")), ToolInput(tag="in_cond_a_copy_dependencies", input_type=Boolean(optional=True), prefix="--conda_copy_dependencies", doc=InputDocumentation(doc="Conda dependency resolution for Galaxy will\ncopy dependencies instead of attempting to\nlink them.")), ToolInput(tag="in_no_cond_a_auto_install", input_type=Boolean(optional=True), prefix="--no_conda_auto_install", doc=InputDocumentation(doc="Conda dependency resolution for Galaxy will\nattempt to install requested but missing\npackages.")), ToolInput(tag="in_no_cond_a_auto_in_it", input_type=Boolean(optional=True), prefix="--no_conda_auto_init", doc=InputDocumentation(doc="Conda dependency resolution for Galaxy will\nauto install conda itself using miniconda if\nnot availabe on conda_prefix.")), ToolInput(tag="in_profile", input_type=String(optional=True), prefix="--profile", doc=InputDocumentation(doc="Name of profile (created with the\nprofile_create command) to use with this\ncommand.")), ToolInput(tag="in_postgres", input_type=Boolean(optional=True), prefix="--postgres", doc=InputDocumentation(doc="Use postgres database type.")), ToolInput(tag="in_database_type", input_type=Boolean(optional=True), prefix="--database_type", doc=InputDocumentation(doc="[postgres|postgres_docker|sqlite|auto]\nType of database to use for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available options. Use\npostgres to use an existing postgres server\nyou user can access without a password via\nthe psql command. Use postgres_docker to\nhave Planemo manage a docker container\nrunning postgres. Data with postgres_docker\nis not yet persisted past when you restart\nthe docker container launched by Planemo so\nbe careful with this option.")), ToolInput(tag="in_postgres_psql_path", input_type=File(optional=True), prefix="--postgres_psql_path", doc=InputDocumentation(doc="Name or or path to postgres client binary\n(psql).")), ToolInput(tag="in_postgres_database_user", input_type=String(optional=True), prefix="--postgres_database_user", doc=InputDocumentation(doc="Postgres username for managed development")), ToolInput(tag="in_database_connection", input_type=String(optional=True), prefix="--database_connection", doc=InputDocumentation(doc="Database connection string to use for")), ToolInput(tag="in_shed_tool_path", input_type=Directory(optional=True), prefix="--shed_tool_path", doc=InputDocumentation(doc="Location of shed tools directory for Galaxy.")), ToolInput(tag="in_no_galaxy_single_user", input_type=Boolean(optional=True), prefix="--no_galaxy_single_user", doc=InputDocumentation(doc="By default Planemo will configure Galaxy to\nrun in single-user mode where there is just\none user and this user is automatically\nlogged it. Use --no_galaxy_single_user to\nprevent Galaxy from running this way.")), ToolInput(tag="in_daemon", input_type=Boolean(optional=True), prefix="--daemon", doc=InputDocumentation(doc="Serve Galaxy process as a daemon.")), ToolInput(tag="in_pid_file", input_type=File(optional=True), prefix="--pid_file", doc=InputDocumentation(doc="Location of pid file is executed with")), ToolInput(tag="in_ignore_dependency_problems", input_type=Boolean(optional=True), prefix="--ignore_dependency_problems", doc=InputDocumentation(doc="When installing shed repositories for")), ToolInput(tag="in_text_email_address", input_type=String(), position=0, doc=InputDocumentation(doc="--galaxy_email TEXT             E-mail address to use when launching single-")), ToolInput(tag="in_resolvers_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--conda_prefix DIRECTORY        Conda prefix to use for conda dependency")), ToolInput(tag="in_commands_dot", input_type=String(), position=1, doc=InputDocumentation(doc="--conda_exec FILE               Location of conda executable.")), ToolInput(tag="in__shedtoolconf_text", input_type=String(), position=0, doc=InputDocumentation(doc="--shed_tool_conf TEXT           Location of shed tools conf file for Galaxy.")), ToolInput(tag="in_executing_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--shed_install / --no_shed_install"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Planemo_Workflow_Edit_V0_1_0().translate("wdl", allow_empty_container=True)

