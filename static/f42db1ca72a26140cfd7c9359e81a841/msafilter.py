from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Boolean, Int, Float, String, File

Msafilter_V0_1_0 = CommandToolBuilder(tool="msafilter", base_command=["msafilter"], inputs=[ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc=": specify a directory for all output files")), ToolInput(tag="in__be_verbose", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=": be verbose")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc=": window size  (n>0)")), ToolInput(tag="in_slide", input_type=Int(optional=True), prefix="--slide", doc=InputDocumentation(doc=": window slide  [50]  (n>0)")), ToolInput(tag="in_one_msa", input_type=Boolean(optional=True), prefix="--onemsa", doc=InputDocumentation(doc=": if file has more than one msa, analyze only the first one")), ToolInput(tag="in_filter_xseqcons_residues", input_type=Float(optional=True), prefix="-F", doc=InputDocumentation(doc=": filter out seqs <x*seq_cons residues  (0<x<=1.0)")), ToolInput(tag="in_require_d_", input_type=Float(optional=True), prefix="-I", doc=InputDocumentation(doc=": require seqs to have < <x> id  [1.0]  (0<x<=1.0)")), ToolInput(tag="in_require_seqs_", input_type=Float(optional=True), prefix="-i", doc=InputDocumentation(doc=": require seqs to have >= <x> id  (0<=x<1.0)")), ToolInput(tag="in_t_start", input_type=Int(optional=True), prefix="--tstart", doc=InputDocumentation(doc=": min alignment position to analyze [1..alen]  (n>0)")), ToolInput(tag="in_tend", input_type=Int(optional=True), prefix="--tend", doc=InputDocumentation(doc=": max alignment position to analyze [1..alen]  (n>0)")), ToolInput(tag="in_consensus", input_type=Boolean(optional=True), prefix="--consensus", doc=InputDocumentation(doc=": analyze only consensus (seq_cons) positions")), ToolInput(tag="in_sub_msa", input_type=Int(optional=True), prefix="--submsa", doc=InputDocumentation(doc=": take n random sequences from the alignment, all if NULL  (n>0)")), ToolInput(tag="in_n_seq_min", input_type=Int(optional=True), prefix="--nseqmin", doc=InputDocumentation(doc=": minimum number of sequences in the alignment  (n>0)")), ToolInput(tag="in_gap_thresh", input_type=Float(optional=True), prefix="--gapthresh", doc=InputDocumentation(doc=": keep columns with < <x> fraction of gaps  [1.0]  (0<=x<=1)")), ToolInput(tag="in_mini_d", input_type=Float(optional=True), prefix="--minid", doc=InputDocumentation(doc=": minimum avgid of the given alignment  (0<x<=1.0)")), ToolInput(tag="in_max_id", input_type=Float(optional=True), prefix="--maxid", doc=InputDocumentation(doc=": maximum avgid of the given alignment  (0<x<=1.0)")), ToolInput(tag="in_in_format", input_type=String(optional=True), prefix="--informat", doc=InputDocumentation(doc=": specify format")), ToolInput(tag="in_out_msa", input_type=File(optional=True), prefix="--outmsa", doc=InputDocumentation(doc=": write msa used to file <f>,")), ToolInput(tag="in_out_map", input_type=File(optional=True), prefix="--outmap", doc=InputDocumentation(doc=": write map file to <f>")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc=": set RNG seed to <n>. Use 0 for a random seed.  [42]  (n>=0)")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc="")), ToolInput(tag="in_msa_file", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc=": specify a directory for all output files"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Msafilter_V0_1_0().translate("wdl", allow_empty_container=True)

