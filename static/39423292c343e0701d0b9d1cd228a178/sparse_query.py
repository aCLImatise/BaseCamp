from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int

Sparse_Query_V0_1_0 = CommandToolBuilder(tool="sparse_query", base_command=["sparse", "query"], inputs=[ToolInput(tag="in_dbname", input_type=String(optional=True), prefix="--dbname", doc=InputDocumentation(doc="Name for the database. REQUIRED.")), ToolInput(tag="in_seq_list", input_type=File(optional=True), prefix="--seqlist", doc=InputDocumentation(doc="File name for the output. Default: to screen.")), ToolInput(tag="in_default", input_type=String(optional=True), prefix="--default", doc=InputDocumentation(doc="Default MapDB criteria for updates. Choose from:\nrepresentative, subpopulation, Virus, Eukaryota")), ToolInput(tag="in_min", input_type=Int(optional=True), prefix="--min", doc=InputDocumentation(doc="Minimum size of genomes to show")), ToolInput(tag="in_max", input_type=Int(optional=True), prefix="--max", doc=InputDocumentation(doc="Maximum size of genomes to show")), ToolInput(tag="in_group", input_type=String(optional=True), prefix="--group", doc=InputDocumentation(doc="Filter using the prefix of barcode addresses")), ToolInput(tag="in_tag", input_type=String(optional=True), prefix="--tag", doc=InputDocumentation(doc="Filter by relationships between different level of barcodes. i.e.,\n'p!=r;p==a' gets references that have the same numbers in p groups and a groups, but different between p groups and r groups")), ToolInput(tag="in_index", input_type=String(optional=True), prefix="--index", doc=InputDocumentation(doc="Filter by index.")), ToolInput(tag="in_barcode", input_type=String(optional=True), prefix="--barcode", doc=InputDocumentation(doc="Filter by barcode.")), ToolInput(tag="in_assembly_accession", input_type=String(optional=True), prefix="--assembly_accession", doc=InputDocumentation(doc="Filter by assembly_accession.")), ToolInput(tag="in_refseq_category", input_type=String(optional=True), prefix="--refseq_category", doc=InputDocumentation(doc="Filter by refseq_category.")), ToolInput(tag="in_assembly_level", input_type=String(optional=True), prefix="--assembly_level", doc=InputDocumentation(doc="Filter by assembly_level.")), ToolInput(tag="in_taxid", input_type=String(optional=True), prefix="--taxid", doc=InputDocumentation(doc="Filter by taxid.")), ToolInput(tag="in_organism_name", input_type=String(optional=True), prefix="--organism_name", doc=InputDocumentation(doc="Filter by organism_name.")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="Filter by species.")), ToolInput(tag="in_genus", input_type=String(optional=True), prefix="--genus", doc=InputDocumentation(doc="Filter by genus.")), ToolInput(tag="in_family", input_type=String(optional=True), prefix="--family", doc=InputDocumentation(doc="Filter by family.")), ToolInput(tag="in_order", input_type=String(optional=True), prefix="--order", doc=InputDocumentation(doc="Filter by order.")), ToolInput(tag="in_class", input_type=String(optional=True), prefix="--class", doc=InputDocumentation(doc="Filter by class.")), ToolInput(tag="in_phylum", input_type=String(optional=True), prefix="--phylum", doc=InputDocumentation(doc="Filter by phylum.")), ToolInput(tag="in_kingdom", input_type=String(optional=True), prefix="--kingdom", doc=InputDocumentation(doc="Filter by kingdom.")), ToolInput(tag="in_superkingdom", input_type=String(optional=True), prefix="--superkingdom", doc=InputDocumentation(doc="Filter by superkingdom.\n"))], outputs=[ToolOutput(tag="out_seq_list", output_type=File(optional=True), selector=InputSelector(input_to_select="in_seq_list", type_hint=File()), doc=OutputDocumentation(doc="File name for the output. Default: to screen."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sparse_Query_V0_1_0().translate("wdl", allow_empty_container=True)

