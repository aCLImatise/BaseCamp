from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Array, String

Uint8_To_Bed_Parallel_Py_V0_1_0 = CommandToolBuilder(tool="uint8_to_bed_parallel.py", base_command=["uint8_to_bed_parallel.py"], inputs=[ToolInput(tag="in_c_two_t", input_type=Boolean(optional=True), prefix="-C2T", doc=InputDocumentation(doc="If using converted genomes specify -C2T or -G2A")), ToolInput(tag="in_g_two_a", input_type=Boolean(optional=True), prefix="-G2A", doc=InputDocumentation(doc="If using converted genomes specify -C2T or -G2A")), ToolInput(tag="in_chr_size_path", input_type=Array(t=String(), optional=True), prefix="-chrsize_path", doc=InputDocumentation(doc="/../chrsize.tsv from out_dir")), ToolInput(tag="in_write_unique", input_type=Boolean(optional=True), prefix="-WriteUnique", doc=InputDocumentation(doc="If -Bismap is true and want to store the merged uint\nfile, specify this option")), ToolInput(tag="in_wiggle", input_type=Boolean(optional=True), prefix="-wiggle", doc=InputDocumentation(doc="If specified, will generate wiggle files for each\nchromosome. Make sure to specify -job_id or run in job\narray for parallel computation.")), ToolInput(tag="in_bed", input_type=Boolean(optional=True), prefix="-bed", doc=InputDocumentation(doc="If specified, will generate bed files that specify all\nof the regions in the genome that are uniquely\nmappable by each of the k-mers")), ToolInput(tag="in_km_ers", input_type=Boolean(optional=True), prefix="-kmers", doc=InputDocumentation(doc="[KMERS [KMERS ...]]\nSpecify kmers separated by space such as: -kmers k10\nk20")), ToolInput(tag="in_job_id", input_type=String(optional=True), prefix="-job_id", doc=InputDocumentation(doc="If not using job array, specify this index which will\nbe used for selecting the chromosomes")), ToolInput(tag="in_var_id", input_type=String(optional=True), prefix="-var_id", doc=InputDocumentation(doc="Environmental variable for finding chromosome indices")), ToolInput(tag="in_in_dir", input_type=String(), position=0, doc=InputDocumentation(doc="folder with <chrom>.uint8.unique.gz files")), ToolInput(tag="in_out_dir", input_type=String(), position=1, doc=InputDocumentation(doc="Folder for writing the output files")), ToolInput(tag="in_out_label", input_type=String(), position=2, doc=InputDocumentation(doc="File names would be kmer.<out_label>.bed.gz"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Uint8_To_Bed_Parallel_Py_V0_1_0().translate("wdl", allow_empty_container=True)

