from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean

Prank_V0_1_0 = CommandToolBuilder(tool="prank", base_command=["prank"], inputs=[ToolInput(tag="in_in_fasta_format", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="(in FASTA format)")), ToolInput(tag="in_t", input_type=File(optional=True), prefix="-t", doc=InputDocumentation(doc="[default: no tree, generate approximate NJ tree]")), ToolInput(tag="in_o", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[default: 'output']")), ToolInput(tag="in_f", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="['fasta' (default), 'phylipi', 'phylips', 'paml', 'nexus']")), ToolInput(tag="in_show_xml", input_type=Boolean(optional=True), prefix="-showxml", doc=InputDocumentation(doc="[output xml-files]")), ToolInput(tag="in_show_tree", input_type=Boolean(optional=True), prefix="-showtree", doc=InputDocumentation(doc="[output dnd-files]")), ToolInput(tag="in_show_an_c", input_type=Boolean(optional=True), prefix="-showanc", doc=InputDocumentation(doc="[output ancestral sequences]")), ToolInput(tag="in_show_events", input_type=Boolean(optional=True), prefix="-showevents", doc=InputDocumentation(doc="[output evolutioanry events]")), ToolInput(tag="in_show_all", input_type=Boolean(optional=True), prefix="-showall", doc=InputDocumentation(doc="[output all of these]")), ToolInput(tag="in_support", input_type=Boolean(optional=True), prefix="-support", doc=InputDocumentation(doc="[compute posterior support]")), ToolInput(tag="in_nj_tree", input_type=Boolean(optional=True), prefix="-njtree", doc=InputDocumentation(doc="[estimate tree from input alignment (and realign)]")), ToolInput(tag="in_tree_only", input_type=Boolean(optional=True), prefix="-treeonly", doc=InputDocumentation(doc="[estimate tree only]")), ToolInput(tag="in_gap_rate", input_type=Boolean(optional=True), prefix="-gaprate", doc=InputDocumentation(doc="=# [gap opening rate; default: dna 0.025 / prot 0.005]")), ToolInput(tag="in_gap_ext", input_type=Boolean(optional=True), prefix="-gapext", doc=InputDocumentation(doc="=# [gap extension probability; default: dna 0.75 / prot 0.5]")), ToolInput(tag="in_codon", input_type=Boolean(optional=True), prefix="-codon", doc=InputDocumentation(doc="[for coding DNA: use empirical codon model]")), ToolInput(tag="in_protein", input_type=Boolean(optional=True), prefix="-protein", doc=InputDocumentation(doc="[no autodetection: use dna or protein model]")), ToolInput(tag="in_term_gap", input_type=Boolean(optional=True), prefix="-termgap", doc=InputDocumentation(doc="[penalise terminal gaps normally]")), ToolInput(tag="in_no_missing", input_type=Boolean(optional=True), prefix="-nomissing", doc=InputDocumentation(doc="[no missing data, use -F for terminal gaps ]")), ToolInput(tag="in_keep", input_type=Boolean(optional=True), prefix="-keep", doc=InputDocumentation(doc="[keep alignment 'as is' (e.g. for ancestor inference)]")), ToolInput(tag="in_iterate", input_type=Boolean(optional=True), prefix="-iterate", doc=InputDocumentation(doc="=# [rounds of re-alignment iteration]")), ToolInput(tag="in_once", input_type=Boolean(optional=True), prefix="-once", doc=InputDocumentation(doc="[run only once; same as -iterate=1]")), ToolInput(tag="in_prune_tree", input_type=Boolean(optional=True), prefix="-prunetree", doc=InputDocumentation(doc="[prune guide tree branches with no sequence data]")), ToolInput(tag="in_prune_data", input_type=Boolean(optional=True), prefix="-prunedata", doc=InputDocumentation(doc="[prune sequence data with no guide tree leaves]")), ToolInput(tag="in_use_logs", input_type=Boolean(optional=True), prefix="-uselogs", doc=InputDocumentation(doc="[slower but should work for a greater number of sequences]")), ToolInput(tag="in_translate", input_type=Boolean(optional=True), prefix="-translate", doc=InputDocumentation(doc="[translate to protein]")), ToolInput(tag="in_mt_translate", input_type=Boolean(optional=True), prefix="-mttranslate", doc=InputDocumentation(doc="[translate to protein using mt table]")), ToolInput(tag="in_convert", input_type=Boolean(optional=True), prefix="-convert", doc=InputDocumentation(doc="[no alignment, just convert to another format]")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="[check for updates]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="[print progress etc. during runtime]"))], outputs=[ToolOutput(tag="out_o", output_type=File(optional=True), selector=InputSelector(input_to_select="in_o", type_hint=File()), doc=OutputDocumentation(doc="[default: 'output']"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Prank_V0_1_0().translate("wdl", allow_empty_container=True)

