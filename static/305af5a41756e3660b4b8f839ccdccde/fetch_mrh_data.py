from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean

Fetch_Mrh_Data_V0_1_0 = CommandToolBuilder(tool="fetch_mrh_data", base_command=["fetch_mrh_data"], inputs=[ToolInput(tag="in_chrom", input_type=String(optional=True), prefix="--chrom", doc=InputDocumentation(doc="The first region chromosome.")), ToolInput(tag="in_chrom_two", input_type=Int(optional=True), prefix="--chrom2", doc=InputDocumentation(doc="The first region chromosome. If no value is passed,\nthis will be set to the same value as 'chrom'.")), ToolInput(tag="in_start", input_type=String(optional=True), prefix="--start", doc=InputDocumentation(doc="The first region start coordinate to plot. If no value\nis passed, this will be set to the first bin position\nin the heatmap. [default: None]")), ToolInput(tag="in_start_two", input_type=Int(optional=True), prefix="--start2", doc=InputDocumentation(doc="The second region start coordinate to plot. If no\nvalue is passed, this will be set to the same value as\nstart. [default: None]")), ToolInput(tag="in_end", input_type=String(optional=True), prefix="--end", doc=InputDocumentation(doc="The first region stop coordinate to plot. If no value\nis passed, this will be set to the last bin position\nin the heatmap [default: None]")), ToolInput(tag="in_end_two", input_type=Int(optional=True), prefix="--end2", doc=InputDocumentation(doc="The second region stop coordinate to plot. If no value\nis passed, this will be set to the last bin position\nin the heatmap [default: None]")), ToolInput(tag="in_max_resolution", input_type=Int(optional=True), prefix="--max-resolution", doc=InputDocumentation(doc="The maximum resolution bound for returned data. If no\nvalue is passed, this will be set to the highest\nresolution available in the heatmap for the\nchromosome(s). [default: None]")), ToolInput(tag="in_min_resolution", input_type=Int(optional=True), prefix="--min-resolution", doc=InputDocumentation(doc="The minimum resolution bound for returned data. If no\nvalue is passed, this will be set to the lowest\nresolution available in the heatmap for the\nchromosome(s). [default: None]")), ToolInput(tag="in_text", input_type=Boolean(optional=True), prefix="--text", doc=InputDocumentation(doc="Write a genomic interval text file instead of an\nimage.\n")), ToolInput(tag="in_heat_map", input_type=String(), position=0, doc=InputDocumentation(doc="The name of a HiFive multi-resolution heatmap file to\nconstruct the image from.")), ToolInput(tag="in_output", input_type=String(), position=1, doc=InputDocumentation(doc="The name of the file to write the multi-resolution\nHiFive heatmap image to."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fetch_Mrh_Data_V0_1_0().translate("wdl", allow_empty_container=True)

