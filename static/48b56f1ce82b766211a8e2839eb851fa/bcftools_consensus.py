from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Bcftools_Consensus_V0_1_0 = CommandToolBuilder(tool="bcftools_consensus", base_command=["bcftools", "consensus"], inputs=[ToolInput(tag="in_sample", input_type=String(optional=True), prefix="--sample", doc=InputDocumentation(doc="apply variants of the given sample")), ToolInput(tag="in_chain", input_type=File(optional=True), prefix="--chain", doc=InputDocumentation(doc="write a chain file for liftover")), ToolInput(tag="in_absent", input_type=String(optional=True), prefix="--absent", doc=InputDocumentation(doc="replace positions absent from VCF with CHAR")), ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="exclude sites for which the expression is true (see man page for details)")), ToolInput(tag="in_fast_a_ref", input_type=File(optional=True), prefix="--fasta-ref", doc=InputDocumentation(doc="reference sequence in fasta format")), ToolInput(tag="in_haplotype", input_type=Int(optional=True), prefix="--haplotype", doc=InputDocumentation(doc="choose which allele to use from the FORMAT/GT field, note\nthe codes are case-insensitive:\n1: first allele from GT, regardless of phasing\n2: second allele from GT, regardless of phasing\nR: REF allele in het genotypes\nA: ALT allele\nI: IUPAC code for all genotypes\nLR,LA: longer allele and REF/ALT if equal length\nSR,SA: shorter allele and REF/ALT if equal length\n1pIu,2pIu: first/second allele for phased and IUPAC code for unphased GTs")), ToolInput(tag="in_include", input_type=String(optional=True), prefix="--include", doc=InputDocumentation(doc="select sites for which the expression is true (see man page for details)")), ToolInput(tag="in_iupac_codes", input_type=Boolean(optional=True), prefix="--iupac-codes", doc=InputDocumentation(doc="output variants in the form of IUPAC ambiguity codes")), ToolInput(tag="in_mark_del", input_type=String(optional=True), prefix="--mark-del", doc=InputDocumentation(doc="instead of removing sequence, insert CHAR for deletions")), ToolInput(tag="in_mark_ins", input_type=String(optional=True), prefix="--mark-ins", doc=InputDocumentation(doc="|lc           highlight insertions in uppercase (uc) or lowercase (lc), leaving the rest as is")), ToolInput(tag="in_mark_snv", input_type=String(optional=True), prefix="--mark-snv", doc=InputDocumentation(doc="|lc           highlight substitutions in uppercase (uc) or lowercase (lc), leaving the rest as is")), ToolInput(tag="in_mask", input_type=File(optional=True), prefix="--mask", doc=InputDocumentation(doc="replace regions according to the next --mask-with option. The default is --mask-with N")), ToolInput(tag="in_mask_with", input_type=String(optional=True), prefix="--mask-with", doc=InputDocumentation(doc="|uc|lc     replace with CHAR (skips overlapping variants); change to uppercase (uc) or lowercase (lc)")), ToolInput(tag="in_missing", input_type=String(optional=True), prefix="--missing", doc=InputDocumentation(doc="output CHAR instead of skipping a missing genotype './.'")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="write output to a file [standard output]")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="prefix to add to output sequence names")), ToolInput(tag="in_file_dot_vcf_do_tgz", input_type=File(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="write output to a file [standard output]"))], container="quay.io/biocontainers/bcftools:1.12--h3f113a9_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bcftools_Consensus_V0_1_0().translate("wdl")

