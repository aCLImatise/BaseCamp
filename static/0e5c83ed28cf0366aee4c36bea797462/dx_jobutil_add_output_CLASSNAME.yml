&id001 !Command
positional:
- !Positional
  description: Name of the output field name
  position: 0
  name: name
  optional: false
- !Positional
  description: Value of the output field
  position: 1
  name: value
  optional: false
named:
- !Flag
  description: '[CLASSNAME]  Class of output for formatting purposes, e.g. "int";
    default "auto"'
  synonyms:
  - --class
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Output field is an array
  synonyms:
  - --array
  args: !EmptyFlagArg {}
  optional: true
command:
- dx-jobutil-add-output
- CLASSNAME
parent: !Command
  positional: []
  named:
  - !Flag
    description: ''
    synonyms:
    - --class
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: ''
    synonyms:
    - --array
    args: !EmptyFlagArg {}
    optional: true
  command:
  - dx-jobutil-add-output
  parent:
  subcommands:
  - *id001
  help_flag: !Flag
    description: ''
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: dx-jobutil-add-output [-h] [--class [CLASSNAME]] [--array] name\
    \ value\ndx-jobutil-add-output: error: the following arguments are required: name,\
    \ value\n"
  generated_using: []
subcommands: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "usage: dx-jobutil-add-output [-h] [--class [CLASSNAME]] [--array] name\
  \ value\n\nReads and modifies job_output.json in your home directory to be a JSON\
  \ hash\nwith key *name* and value  *value*.\n\nIf --class is not provided or is\
  \ set to \"auto\", auto-detection of the output\nformat will occur.  In particular,\
  \ it will treat it as a number, hash, or\nboolean if it can be successfully parsed\
  \ as such.  If it is a string which\nmatches the pattern for a data object ID, it\
  \ will encapsulate it in a DNAnexus\nlink hash; otherwise it is treated as a simple\
  \ string.\n\nUse --array to append to an array of values or prepend \"array:\" to\
  \ the --class\nargument.\n\nTo use the output of another job as part of your output,\
  \ use --class=jobref\n(which will throw an error if it is not formatted correctly),\
  \ or use the\nautomatic parsing which will recognize anything starting with a job\
  \ ID as a\njob-based object reference.  You should format the value as follows:\n\
  \n  Format: <job ID>:<output field name>\n  Example: dx-jobutil-add-output myoutput\
  \ --class=jobref \\\n             job-B2JKYqK4Zg2K915yQxPQ0024:other_output\n\n\
  Analysis references can be specified similarly with --class=analysisref and\nformatted\
  \ as:\n\n  Format: <analysis ID>:<stage ID>.<output field name>\n          <analysis\
  \ ID>:<exported output field name>\n  Example: dx-jobutil-add-output myoutput --class=analysisref\
  \ \\\n             analysis-B2JKYqK4Zg2K915yQxPQ0024:some_output\n\npositional arguments:\n\
  \  name                 Name of the output field name\n  value                Value\
  \ of the output field\n\noptional arguments:\n  -h, --help           show this help\
  \ message and exit\n  --class [CLASSNAME]  Class of output for formatting purposes,\
  \ e.g. \"int\";\n                       default \"auto\"\n  --array            \
  \  Output field is an array\n"
generated_using:
- --help
