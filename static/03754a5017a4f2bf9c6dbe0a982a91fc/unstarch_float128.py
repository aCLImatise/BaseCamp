from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Unstarch_Float128_V0_1_0 = CommandToolBuilder(tool="unstarch_float128", base_command=["unstarch-float128"], inputs=[ToolInput(tag="in_elements", input_type=Boolean(optional=True), prefix="--elements", doc=InputDocumentation(doc="Show total element count for archive. If\n<chromosome> is specified, the result\nshows the element count for the\nchromosome.")), ToolInput(tag="in_elements_max_string_length", input_type=Boolean(optional=True), prefix="--elements-max-string-length", doc=InputDocumentation(doc="Show the maximum string length over all\nelements in <chromosome>, if specified.\nIf <chromosome> is not specified, the\nmaximum string length is shown over all\nchromosomes.")), ToolInput(tag="in_bases_uniq", input_type=Boolean(optional=True), prefix="--bases-uniq", doc=InputDocumentation(doc="Show total and unique base counts,\nrespectively, for archive. If\n<chromosome> is specified, the count is\nspecific to the chromosome, if available.")), ToolInput(tag="in_has_duplicate_as_string", input_type=Boolean(optional=True), prefix="--has-duplicate-as-string", doc=InputDocumentation(doc="Show whether there is one or more\nduplicate elements in the specified\nchromosome, either as a numerical (1/0)\nor string (true/false) value. If no\n<chromosome> is specified, the value\ngiven indicates if there is one or more\nduplicate elements across all chromosome\nrecords.")), ToolInput(tag="in_has_nested_as_string", input_type=Boolean(optional=True), prefix="--has-nested-as-string", doc=InputDocumentation(doc="Show whether there is one ore more nested\nelements in the specified chromosome,\neither as a numerical (1/0) or string\n(true/false) value. If no <chromosome> is\nspecified, the value given indicates if\nthere is one or more nested elements\nacross all chromosome records.")), ToolInput(tag="in_list", input_type=Boolean(optional=True), prefix="--list", doc=InputDocumentation(doc="List archive metadata (output is in text\nformat). If chromosome is specified, the\nattributes of the given chromosome are\nshown.")), ToolInput(tag="in_list_json_no_trailing_new_line", input_type=Boolean(optional=True), prefix="--list-json-no-trailing-newline", doc=InputDocumentation(doc="List archive metadata (output is in JSON\nformat)")), ToolInput(tag="in_list_chromosomes", input_type=Boolean(optional=True), prefix="--list-chromosomes", doc=InputDocumentation(doc="List all or specified chromosome in\nstarch archive (like 'bedextract --list-\nchr'). If <chromosome> is specified but\nis not in the output list, nothing is\nreturned.")), ToolInput(tag="in_note", input_type=Boolean(optional=True), prefix="--note", doc=InputDocumentation(doc="Show descriptive note, if available.")), ToolInput(tag="in_signature", input_type=Boolean(optional=True), prefix="--signature", doc=InputDocumentation(doc="Display the Base64-encoded SHA-1 data\nintegrity signature for specified\n<chromosome>, or the signatures of the\nmetadata and all available chromosomes,\nif the <chromosome> is unspecified.")), ToolInput(tag="in_verify_signature", input_type=Boolean(optional=True), prefix="--verify-signature", doc=InputDocumentation(doc="Verify data integrity of specified\n<chromosome>, or the integrity of all\navailable chromosomes, if the\n<chromosome> is unspecified.")), ToolInput(tag="in_archive_timestamp", input_type=Boolean(optional=True), prefix="--archive-timestamp", doc=InputDocumentation(doc="Show archive creation timestamp (ISO 8601\nformat).")), ToolInput(tag="in_archive_type", input_type=Boolean(optional=True), prefix="--archive-type", doc=InputDocumentation(doc="Show archive compression type.")), ToolInput(tag="in_archive_version", input_type=Boolean(optional=True), prefix="--archive-version", doc=InputDocumentation(doc="Show archive version.")), ToolInput(tag="in_is_starch", input_type=Boolean(optional=True), prefix="--is-starch", doc=InputDocumentation(doc="Test if <starch-file> is a valid archive\nand print 0/1 (false/true) to standard\noutput. Unstarch will also return a non-\nzero error code if the input file is not\na valid archive.")), ToolInput(tag="in_un_starch", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_chromosome", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Unstarch_Float128_V0_1_0().translate("wdl", allow_empty_container=True)

