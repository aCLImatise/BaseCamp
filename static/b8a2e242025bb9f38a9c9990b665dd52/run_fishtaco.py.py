from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String

Run_Fishtaco_Py_V0_1_0 = CommandToolBuilder(tool="run_fishtaco.py", base_command=["run_fishtaco.py"], inputs=[ToolInput(tag="in_taxonomic_abundance_profiles", input_type=File(optional=True), prefix="--taxonomic_abundance_profiles", doc=InputDocumentation(doc="Input file of taxonomic abundance profiles")), ToolInput(tag="in_functional_abundance_profiles", input_type=File(optional=True), prefix="--functional_abundance_profiles", doc=InputDocumentation(doc="Input file of functional abundance profiles")), ToolInput(tag="in_labels", input_type=File(optional=True), prefix="--labels", doc=InputDocumentation(doc="Input file of label assignment for the two sample sets\nbeing compared")), ToolInput(tag="in_genomic_content_of_tax_a", input_type=File(optional=True), prefix="--genomic_content_of_taxa", doc=InputDocumentation(doc="Input file of genomic content of each taxa")), ToolInput(tag="in_perform_inference_of_genomic_content", input_type=Boolean(optional=True), prefix="--perform_inference_of_genomic_content", doc=InputDocumentation(doc="Defines if genome content is inferred (either de-novo\nor prior-based if genomic content is also given)")), ToolInput(tag="in_label_to_find_enrichment_in", input_type=Int(optional=True), prefix="-label_to_find_enrichment_in", doc=InputDocumentation(doc="Define sample set label to find enrichment in\n(default: 1)")), ToolInput(tag="in_label_to_find_enrichment_against", input_type=Int(optional=True), prefix="-label_to_find_enrichment_against", doc=InputDocumentation(doc="Define sample set label to find enrichment against\n(default: 0)")), ToolInput(tag="in_output_prefix", input_type=String(optional=True), prefix="--output_prefix", doc=InputDocumentation(doc="Output prefix for result files (default: fishtaco_out)")), ToolInput(tag="in_map_function_level", input_type=String(optional=True), prefix="-map_function_level", doc=InputDocumentation(doc="Map functions to pathways or modules (default:\npathway)")), ToolInput(tag="in_map_function_file", input_type=File(optional=True), prefix="-map_function_file", doc=InputDocumentation(doc="pathways or modules mapping file (default: use\ninternal KEGG file)")), ToolInput(tag="in_perform_inference_on_ko_level", input_type=Boolean(optional=True), prefix="-perform_inference_on_ko_level", doc=InputDocumentation(doc="Indicates to perform the inference on the KO level\n(default: use the mapped functional level, e.g.,\npathway)")), ToolInput(tag="in_multiple_hypothesis_correction", input_type=String(optional=True), prefix="--multiple_hypothesis_correction", doc=InputDocumentation(doc="Multiple hypothesis correction for functional\nenrichment (default: FDR-0.05)")), ToolInput(tag="in_maximum_functions_to_analyze", input_type=Int(optional=True), prefix="--maximum_functions_to_analyze", doc=InputDocumentation(doc="Maximum number of enriched functions to consider\n(default: All)")), ToolInput(tag="in_tax_a_assessment_method", input_type=String(optional=True), prefix="--taxa_assessment_method", doc=InputDocumentation(doc="The method used when assessing taxa to compute\nindividual contributions (default: multi_taxa)")), ToolInput(tag="in_score_to_compute", input_type=String(optional=True), prefix="--score_to_compute", doc=InputDocumentation(doc="The enrichment score to compute for each function\n(default: wilcoxon)")), ToolInput(tag="in_max_score_cut_off", input_type=Int(optional=True), prefix="--max_score_cutoff", doc=InputDocumentation(doc="The maximum score cutoff (for example, when dividing\nby zero) (default: 100)")), ToolInput(tag="in_na_rep", input_type=String(optional=True), prefix="-na_rep", doc=InputDocumentation(doc="How to represent NAs in the output (default: NA)")), ToolInput(tag="in_number_of_permutations", input_type=Int(optional=True), prefix="-number_of_permutations", doc=InputDocumentation(doc="number of permutations (default: 100)")), ToolInput(tag="in_number_of_shapley_orderings_per_tax_a", input_type=Int(optional=True), prefix="-number_of_shapley_orderings_per_taxa", doc=InputDocumentation(doc="number of shapley orderings per taxa (default: 5)")), ToolInput(tag="in_enrichment_results", input_type=File(optional=True), prefix="--enrichment_results", doc=InputDocumentation(doc="Pre-computed functional enrichment results from the\ncompute_differential_abundance.py script (default:\nNone)")), ToolInput(tag="in_single_function_filter", input_type=String(optional=True), prefix="-single_function_filter", doc=InputDocumentation(doc="Limit analysis only to this single function (default:\nNone)")), ToolInput(tag="in_multi_function_filter_list", input_type=String(optional=True), prefix="-multi_function_filter_list", doc=InputDocumentation(doc="Limit analysis only to these comma-separated functions\n(default: None)")), ToolInput(tag="in_functional_profile_already_corrected_with_music_c", input_type=Boolean(optional=True), prefix="-functional_profile_already_corrected_with_musicc", doc=InputDocumentation(doc="Indicates that the functional profile has been already\ncorrected with MUSiCC prior to running FishTaco\n(default: False)")), ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="--log", doc=InputDocumentation(doc="Write to log file (default: False)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Run_Fishtaco_Py_V0_1_0().translate("wdl", allow_empty_container=True)

