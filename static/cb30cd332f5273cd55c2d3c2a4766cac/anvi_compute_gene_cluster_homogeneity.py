from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Int

Anvi_Compute_Gene_Cluster_Homogeneity_V0_1_0 = CommandToolBuilder(tool="anvi_compute_gene_cluster_homogeneity", base_command=["anvi-compute-gene-cluster-homogeneity"], inputs=[ToolInput(tag="in_pan_db", input_type=String(optional=True), prefix="--pan-db", doc=InputDocumentation(doc="Anvi'o pan database")), ToolInput(tag="in_genomes_storage", input_type=File(optional=True), prefix="--genomes-storage", doc=InputDocumentation(doc="Anvi'o genomes storage file")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File path to store results.")), ToolInput(tag="in_store_in_db", input_type=Boolean(optional=True), prefix="--store-in-db", doc=InputDocumentation(doc="Store analysis results into the database directly.")), ToolInput(tag="in_gene_cluster_id", input_type=String(optional=True), prefix="--gene-cluster-id", doc=InputDocumentation(doc="Gene cluster ID you are interested in.")), ToolInput(tag="in_gene_cluster_ids_file", input_type=File(optional=True), prefix="--gene-cluster-ids-file", doc=InputDocumentation(doc="Text file for gene clusters (each line should contain\nbe a unique gene cluster id).")), ToolInput(tag="in_collection_name", input_type=String(optional=True), prefix="--collection-name", doc=InputDocumentation(doc="Collection name.")), ToolInput(tag="in_bin_id", input_type=String(optional=True), prefix="--bin-id", doc=InputDocumentation(doc="Bin name you are interested in.")), ToolInput(tag="in_quick_homogeneity", input_type=Boolean(optional=True), prefix="--quick-homogeneity", doc=InputDocumentation(doc="By default, anvi'o will use a homogeneity algorithm\nthat checks for horizontal and vertical geometric\nhomogeneity (along with functional). With this flag,\nyou can tell anvi'o to skip horizontal geometric\nhomogeneity calculations. It will be less accurate but\nquicker.")), ToolInput(tag="in_num_threads", input_type=Int(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="Maximum number of threads to use for multithreading\nwhenever possible. Very conservatively, the default is\n1. It is a good idea to not exceed the number of CPUs\n/ cores on your system. Plus, please be careful with\nthis option if you are running your commands on a SGE\n--if you are clusterizing your runs, and asking for\nmultiple threads to use, you may deplete your\nresources very fast.")), ToolInput(tag="in_just_do_it", input_type=Boolean(optional=True), prefix="--just-do-it", doc=InputDocumentation(doc="Don't bother me with questions or warnings, just do\nit.\n"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store results."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Compute_Gene_Cluster_Homogeneity_V0_1_0().translate("wdl", allow_empty_container=True)

