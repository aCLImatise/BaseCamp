from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Directory, String, File, Boolean

Ganon_Build_V0_1_0 = CommandToolBuilder(tool="ganon_build", base_command=["ganon-build"], inputs=[ToolInput(tag="in_reference_files", input_type=Int(optional=True), prefix="--reference-files", doc=InputDocumentation(doc="Sequence files .fasta .fa .fna (e.g\nref.fna[.gz],[ref2.fna[.gz],...,refN.fna[.gz]])")), ToolInput(tag="in_directory_reference_files", input_type=Directory(optional=True), prefix="--directory-reference-files", doc=InputDocumentation(doc="Directory with reference files. Do not\nprovide wildcards, just path (e.g. /path/to/folder/)")), ToolInput(tag="in_extension", input_type=String(optional=True), prefix="--extension", doc=InputDocumentation(doc="Extension of the files to search in the")), ToolInput(tag="in_seq_id_bin_file", input_type=File(optional=True), prefix="--seqid-bin-file", doc=InputDocumentation(doc="Tab-separated file linking sequences and bin\nidentifiers. The file should contain the\nfollowing fields: Seq. Identifier <tab> Pos. Seq.\nStart <tab> Pos. Seq. End <tab> Bin Id")), ToolInput(tag="in_output_filter_file", input_type=File(optional=True), prefix="--output-filter-file", doc=InputDocumentation(doc="Output file for filter (e.g. filter.ibf)")), ToolInput(tag="in_update_filter_file", input_type=File(optional=True), prefix="--update-filter-file", doc=InputDocumentation(doc="Previously generated filter file to be")), ToolInput(tag="in_filter_size", input_type=Int(optional=True), prefix="--filter-size", doc=InputDocumentation(doc="Final filter size in Megabytes (MB) [mutually\nexclusive --filter-size-bits]")), ToolInput(tag="in_filter_size_bits", input_type=Int(optional=True), prefix="--filter-size-bits", doc=InputDocumentation(doc="Final filter size in Bits (bit) [mutually\nexclusive --filter-size]")), ToolInput(tag="in_km_er_size", input_type=Int(optional=True), prefix="--kmer-size", doc=InputDocumentation(doc="k size to build filter")), ToolInput(tag="in_hash_functions", input_type=Int(optional=True), prefix="--hash-functions", doc=InputDocumentation(doc="Number of hash functions to build filter")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads")), ToolInput(tag="in_n_refs", input_type=Int(optional=True), prefix="--n-refs", doc=InputDocumentation(doc="Number of sequences for each batch")), ToolInput(tag="in_n_batches", input_type=Int(optional=True), prefix="--n-batches", doc=InputDocumentation(doc="Number of batches of n-refs to hold in memory")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output mode")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Quiet output mode (only outputs errors and\nwarnings to the stderr)")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="")), ToolInput(tag="in_c", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="")), ToolInput(tag="in_updated", input_type=String(), position=0, doc=InputDocumentation(doc="-c, --update-complete         When using --update-filter-file and all"))], outputs=[ToolOutput(tag="out_output_filter_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_filter_file", type_hint=File()), doc=OutputDocumentation(doc="Output file for filter (e.g. filter.ibf)"))], container="quay.io/biocontainers/ganon:0.4.0--py38hb45e0f6_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ganon_Build_V0_1_0().translate("wdl")

