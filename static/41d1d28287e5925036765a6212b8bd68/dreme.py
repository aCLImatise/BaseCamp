from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, Boolean, Float, String, Int

Dreme_V0_1_0 = CommandToolBuilder(tool="dreme", base_command=["dreme"], inputs=[ToolInput(tag="in_directory_create_directoryand", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc="<directory>         create the specified output directory\nand write all output to files in that directory")), ToolInput(tag="in_oc", input_type=Directory(optional=True), prefix="-oc", doc=InputDocumentation(doc="create the specified output directory\noverwritting it if it already exists;\ndefault: create dreme_out in the currrent\nworking directory")), ToolInput(tag="in_positive_sequence_file", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="positive sequence file name (required)")), ToolInput(tag="in_negative_sequence_file", input_type=File(optional=True), prefix="-n", doc=InputDocumentation(doc="negative sequence file name (optional);\ndefault: the positive sequences are shuffled\nto create the negative set if -n is not used")), ToolInput(tag="in_dna", input_type=Boolean(optional=True), prefix="-dna", doc=InputDocumentation(doc="use the standard DNA alphabet; this is the default")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="-rna", doc=InputDocumentation(doc="use the standard RNA alphabet")), ToolInput(tag="in_protein", input_type=Boolean(optional=True), prefix="-protein", doc=InputDocumentation(doc="use the standard Protein alphabet (may not work well)")), ToolInput(tag="in_alph", input_type=File(optional=True), prefix="-alph", doc=InputDocumentation(doc="use custom alphabet (some restrictions apply - see manual)")), ToolInput(tag="in_norc", input_type=Boolean(optional=True), prefix="-norc", doc=InputDocumentation(doc="search given strand only for motifs (not reverse complement)")), ToolInput(tag="in_stop_evalue_ethreshdefault", input_type=Float(optional=True), prefix="-e", doc=InputDocumentation(doc="stop if motif E-value > <ethresh>;\ndefault: 0.05")), ToolInput(tag="in_stop_motifs_been", input_type=String(optional=True), prefix="-m", doc=InputDocumentation(doc="stop if <m> motifs have been output;\ndefault: only stop at E-value threshold")), ToolInput(tag="in_stop_time_elapseddefault", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="stop if the specified time has elapsed;\ndefault: only stop at E-value threshold")), ToolInput(tag="in_number_res_generalize", input_type=Int(optional=True), prefix="-g", doc=InputDocumentation(doc="number of REs to generalize; default: 100\nHint: Increasing <ngen> will make the motif\nsearch more thorough at some cost in speed.")), ToolInput(tag="in_seed_shuffling_sequences", input_type=File(optional=True), prefix="-s", doc=InputDocumentation(doc="seed for shuffling sequences; ignored\nif -n <filename> given; default: 1")), ToolInput(tag="in_verbosity", input_type=Float(optional=True), prefix="-verbosity", doc=InputDocumentation(doc="1..5 for varying degrees of extra output\ndefault: 2")), ToolInput(tag="in_png", input_type=Boolean(optional=True), prefix="-png", doc=InputDocumentation(doc="create PNG logos")), ToolInput(tag="in_eps", input_type=Boolean(optional=True), prefix="-eps", doc=InputDocumentation(doc="create EPS logos")), ToolInput(tag="in_desc", input_type=String(optional=True), prefix="-desc", doc=InputDocumentation(doc="store the description in the output;\ndefault: no description")), ToolInput(tag="in_d_file", input_type=File(optional=True), prefix="-dfile", doc=InputDocumentation(doc="acts like -desc but reads the description from\nthe specified file; allows characters that would\notherwise have to be escaped;\ndefault: no description")), ToolInput(tag="in_mink", input_type=Int(optional=True), prefix="-mink", doc=InputDocumentation(doc="minimum width of core motif; default 3")), ToolInput(tag="in_max_k", input_type=Int(optional=True), prefix="-maxk", doc=InputDocumentation(doc="maximum width of core motif; default 8")), ToolInput(tag="in_sets_minkmaxkk", input_type=String(optional=True), prefix="-k", doc=InputDocumentation(doc="sets mink=maxk=<k>")), ToolInput(tag="in_print_list_tested", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="print list of enrichment of all REs tested")), ToolInput(tag="in_sequences_dot", input_type=String(), position=0, doc=InputDocumentation(doc="It can also find motifs in a single set of DNA sequences,"))], outputs=[ToolOutput(tag="out_directory_create_directoryand", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_directory_create_directoryand", type_hint=File()), doc=OutputDocumentation(doc="<directory>         create the specified output directory\nand write all output to files in that directory")), ToolOutput(tag="out_oc", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_oc", type_hint=File()), doc=OutputDocumentation(doc="create the specified output directory\noverwritting it if it already exists;\ndefault: create dreme_out in the currrent\nworking directory"))], container="quay.io/biocontainers/meme:5.3.0--py38pl526hc1f1133_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dreme_V0_1_0().translate("wdl")

