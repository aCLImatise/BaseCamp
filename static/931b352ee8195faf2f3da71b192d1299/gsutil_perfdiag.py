from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Gsutil_Perfdiag_V0_1_0 = CommandToolBuilder(tool="gsutil_perfdiag", base_command=["gsutil", "perfdiag"], inputs=[ToolInput(tag="in_sets_number_objects", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="Sets the number of objects to use when downloading and uploading\nfiles during tests. Defaults to 5.")), ToolInput(tag="in_sets_number_running", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Sets the number of processes to use while running throughput\nexperiments. The default value is 1.")), ToolInput(tag="in_sets_number_use", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="Sets the number of threads per process to use while running\nthroughput experiments. Each process will receive an equal number\nof threads. The default value is 1.\nNote: All specified threads and processes will be created, but may\nnot by saturated with work if too few objects (specified with -n)\nand too few components (specified with -y) are specified.")), ToolInput(tag="in_sets_type_used", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="Sets the type of parallelism to be used (only applicable when\nthreads or processes are specified and threads * processes > 1).\nThe default is to use fan. Must be one of the following:\nfan\nUse one thread per object. This is akin to using gsutil -m cp,\nwith sliced object download / parallel composite upload\ndisabled.\nslice\nUse Y (specified with -y) threads for each object, transferring\none object at a time. This is akin to using parallel object\ndownload / parallel composite upload, without -m. Sliced\nuploads not supported for s3.\nboth\nUse Y (specified with -y) threads for each object, transferring\nmultiple objects at a time. This is akin to simultaneously\nusing sliced object download / parallel composite upload and\ngsutil -m cp. Sliced uploads not supported for s3.")), ToolInput(tag="in_sets_number_divide", input_type=Boolean(optional=True), prefix="-y", doc=InputDocumentation(doc="Sets the number of slices to divide each file/object into while\ntransferring data. Only applicable with the slice (or both)\nparallelism type. The default is 4 slices.")), ToolInput(tag="in_sets_size_n", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Sets the size (in bytes) for each of the N (set with -n) objects\nused in the read and write throughput tests. The default is 1 MiB.\nThis can also be specified using byte suffixes such as 500K or 1M.\nNote: these values are interpreted as multiples of 1024 (K=1024,\nM=1024*1024, etc.)\nNote: If rthru_file or wthru_file are performed, N (set with -n)\ntimes as much disk space as specified will be required for the\noperation.")), ToolInput(tag="in_sets_directory_store", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="Sets the directory to store temporary local files in. If not\nspecified, a default temporary directory will be used.")), ToolInput(tag="in_sets_list_perform", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="Sets the list of diagnostic tests to perform. The default is to\nrun the lat, rthru, and wthru diagnostic tests. Must be a\ncomma-separated list containing one or more of the following:\nlat\nFor N (set with -n) objects, write the object, retrieve its\nmetadata, read the object, and finally delete the object.\nRecord the latency of each operation.\nlist\nWrite N (set with -n) objects to the bucket, record how long\nit takes for the eventually consistent listing call to return\nthe N objects in its result, delete the N objects, then record\nhow long it takes listing to stop returning the N objects.\nrthru\nRuns N (set with -n) read operations, with at most C\n(set with -c) reads outstanding at any given time.\nrthru_file\nThe same as rthru, but simultaneously writes data to the disk,\nto gauge the performance impact of the local disk on downloads.\nwthru\nRuns N (set with -n) write operations, with at most C\n(set with -c) writes outstanding at any given time.\nwthru_file\nThe same as wthru, but simultaneously reads data from the disk,\nto gauge the performance impact of the local disk on uploads.")), ToolInput(tag="in_adds_metadata_m", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="Adds metadata to the result JSON file. Multiple -m values can be\nspecified. Example:\ngsutil perfdiag -m 'key1:val1' -m 'key2:val2' gs://bucketname\nEach metadata key will be added to the top-level 'metadata'\ndictionary in the output JSON file.")), ToolInput(tag="in_writes_results_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Writes the results of the diagnostic to an output file. The output\nis a JSON file containing system information and performance\ndiagnostic results. The file can be read and reported later using\nthe -i option.")), ToolInput(tag="in_reads_json_file", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="Reads the JSON output file created using the -o command and prints\na formatted description of the results."))], outputs=[ToolOutput(tag="out_adds_metadata_m", output_type=File(optional=True), selector=InputSelector(input_to_select="in_adds_metadata_m", type_hint=File()), doc=OutputDocumentation(doc="Adds metadata to the result JSON file. Multiple -m values can be\nspecified. Example:\ngsutil perfdiag -m 'key1:val1' -m 'key2:val2' gs://bucketname\nEach metadata key will be added to the top-level 'metadata'\ndictionary in the output JSON file.")), ToolOutput(tag="out_writes_results_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_writes_results_file", type_hint=File()), doc=OutputDocumentation(doc="Writes the results of the diagnostic to an output file. The output\nis a JSON file containing system information and performance\ndiagnostic results. The file can be read and reported later using\nthe -i option.")), ToolOutput(tag="out_reads_json_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_reads_json_file", type_hint=File()), doc=OutputDocumentation(doc="Reads the JSON output file created using the -o command and prints\na formatted description of the results."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gsutil_Perfdiag_V0_1_0().translate("wdl", allow_empty_container=True)

