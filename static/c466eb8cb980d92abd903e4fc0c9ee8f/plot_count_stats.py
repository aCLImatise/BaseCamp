from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Array, Boolean, Float

Plot_Count_Stats_V0_1_0 = CommandToolBuilder(tool="plot_count_stats", base_command=["plot_count_stats"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Full path to file containing table output by")), ToolInput(tag="in_output_prefix", input_type=File(optional=True), prefix="--output_prefix", doc=InputDocumentation(doc="'Prefix' of output files. This includes full path to\ndesired file and desired file name before suffix\n(suffix will be .pdf).")), ToolInput(tag="in_exclude_suffix", input_type=File(optional=True), prefix="--exclude_suffix", doc=InputDocumentation(doc="Text to remove from end of sample names in input file.\nDefault is to remove nothing. Note that the sample\nnames in the input file have to match the names in the\nmeta file AFTER they undergo this step.")), ToolInput(tag="in_first_chr", input_type=Int(optional=True), prefix="--first_chr", doc=InputDocumentation(doc="Chromosome to use a numerator on X-axis. For example,\nif one was comparing chrX and chrY, and using chr19 to\nnormalize, recommended values would be: --first_chr\nchrX --second_chr chrY --const_chr chr19.")), ToolInput(tag="in_second_chr", input_type=Int(optional=True), prefix="--second_chr", doc=InputDocumentation(doc="Chromosome to use a numerator on Y-axis. For example,\nif one was comparing chrX and chrY, and using chr19 to\nnormalize, recommended values would be: --first_chr\nchrX --second_chr chrY --const_chr chr19.")), ToolInput(tag="in_const_chr", input_type=Int(optional=True), prefix="--const_chr", doc=InputDocumentation(doc="Chromosome to use denominator on both the X- and\nY-axis. For example, if one was comparing chrX and\nchrY, and using chr19 to normalize, recommended values\nwould be: --first_chr chrX --second_chr chrY\n--const_chr chr19.")), ToolInput(tag="in_var_one_marker", input_type=String(optional=True), prefix="--var1_marker", doc=InputDocumentation(doc="Way of designating variable 1 values in plot. Choices\nare 'color', 'shape', or 'size'. Must be used in\nconjunction with --var1_marker_vals. Default is\n'color'.")), ToolInput(tag="in_var_one_marker_vals", input_type=Array(t=Int(), optional=True), prefix="--var1_marker_vals", doc=InputDocumentation(doc="Marker values to use for variable 1 values. If\n--var1_marker is 'color', then --var1_marker_vals\nshould be a space-separated list of Matplotlib colors\n(e.g., 'red blue green'). If --var1_marker is 'shape'\nthen --var1_marker_vals should be a space-separated\nlist of Matplotlib scatter markers (e.g., 'x o D' for\nx, cicle, and Diamond). Finally, if --var1_marker is\n'size', then --var1_marker_vals should be a space-\nseparated list of Matplotlib marker sizes in units of\npoints^2 (e.g., '5 10 15'). Default is 'red blue'.")), ToolInput(tag="in_var_two_marker", input_type=String(optional=True), prefix="--var2_marker", doc=InputDocumentation(doc="Way of designating variable 2 values in plot. Choices\nare 'color', 'shape', or 'size'. Must be used in\nconjunction with --var2_marker_vals. Default is\n'none', which will only process --var1_marker.")), ToolInput(tag="in_var_two_marker_vals", input_type=Boolean(optional=True), prefix="--var2_marker_vals", doc=InputDocumentation(doc="[VAR2_MARKER_VALS [VAR2_MARKER_VALS ...]]\nMarker values to use for variable 2 values. If\n--var2_marker is 'color', then --var2_marker_vals\nshould be a space-separated list of Matplotlib colors\n(e.g., 'red blue green'). If --var2_marker is 'shape'\nthen --var2_marker_vals should be a space-separated\nlist of Matplotlib scatter markers (e.g., 'x o D' for\nx, cicle, and Diamond). Finally, if --var2_marker is\n'size', then --var2_marker_vals should be a space-\nseparated list of Matplotlib marker sizes in units of\npoints^2 (e.g., '5 10 15'). Default is 'red blue'.")), ToolInput(tag="in_marker_size", input_type=Int(optional=True), prefix="--marker_size", doc=InputDocumentation(doc="If 'size' is not selected for --var1_marker or\n--var2_marker, use this size for markers. Default is\n100.")), ToolInput(tag="in_marker_color", input_type=Int(optional=True), prefix="--marker_color", doc=InputDocumentation(doc="If 'color' is not selected for --var1_marker or\n--var2_marker, use this color for markers. Default is\n'black'.")), ToolInput(tag="in_marker_shape", input_type=Int(optional=True), prefix="--marker_shape", doc=InputDocumentation(doc="If 'shape' is not selected for --var1_marker or\n--var2_marker, use this shape for markers (see\nmatplotlib for possible shapes). Default is 'o' for\ncircles.")), ToolInput(tag="in_marker_alpha", input_type=Float(optional=True), prefix="--marker_alpha", doc=InputDocumentation(doc="Marker transparency ranging from 0.0 to 1.0 (1.0 being\nnontransparent). Default is 0.5.")), ToolInput(tag="in_legend_marker_scale", input_type=Int(optional=True), prefix="--legend_marker_scale", doc=InputDocumentation(doc="Use this value to scale maker size in legend, if\ndesired. Default is 1.0, or no scaling.")), ToolInput(tag="in_x_title", input_type=Int(optional=True), prefix="--x_title", doc=InputDocumentation(doc="X axis title. Default is '<name of first chrom> /\n<name of const chrom> ratio'. E.g., 'chrX / chr19\nratio'")), ToolInput(tag="in_y_title", input_type=Int(optional=True), prefix="--y_title", doc=InputDocumentation(doc="Y axis title. Default is '<name of second chrom> /\n<name of const chrom> ratio'. E.g., 'chrY / chr19\nratio'\n")), ToolInput(tag="in_meta", input_type=String(optional=True), prefix="--meta", doc=InputDocumentation(doc="")), ToolInput(tag="in_chrom_stats", input_type=String(), position=0, doc=InputDocumentation(doc="--meta META           Full path to file containing metadata table. This file"))], outputs=[ToolOutput(tag="out_input", output_type=File(optional=True), selector=InputSelector(input_to_select="in_input", type_hint=File()), doc=OutputDocumentation(doc="Full path to file containing table output by")), ToolOutput(tag="out_output_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_prefix", type_hint=File()), doc=OutputDocumentation(doc="'Prefix' of output files. This includes full path to\ndesired file and desired file name before suffix\n(suffix will be .pdf)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Plot_Count_Stats_V0_1_0().translate("wdl", allow_empty_container=True)

