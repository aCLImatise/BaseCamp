!Command
command:
- gatekeeperbench
positional:
- !Positional
  description: ''
  position: 0
  name: opts
  optional: true
named:
- !Flag
  description: gkpStoreName    create/read/write the store called 'gkpStoreName'
  synonyms:
  - -g
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: s               use random seed s
  synonyms:
  - -seed
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: add numFrags random fragments
  synonyms:
  - -create
  args: !SimpleFlagArg
    name: numFrags
  optional: true
- !Flag
  description: numMates        update numMates random mated fragments
  synonyms:
  - -mates
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: numReads        read numReads random fragments
  synonyms:
  - -reads
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: not a very useful benchmark.  It is somewhat CPU bound, and simply
    writes
  synonyms:
  - -n
  args: !SimpleFlagArg
    name: is
  optional: true
- !Flag
  description: possibly the most brutal test.  It reads and writes randomly to a moderately
  synonyms:
  - -m
  args: !SimpleFlagArg
    name: is
  optional: true
- !Flag
  description: (presumed to be) the majority of accesses made by the assembler.  It
    reads a
  synonyms:
  - -r
  args: !SimpleFlagArg
    name: is
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "Exactly one of -n, -m and -r must be supplied.\n\nusage: gatekeeperbench\
  \ -g gkpStoreName [opts]\n  -g      gkpStoreName    create/read/write the store\
  \ called 'gkpStoreName'\n  -seed   s               use random seed s\n\n  -create\
  \ numFrags        add numFrags random fragments\n  -mates  numMates        update\
  \ numMates random mated fragments\n  -reads  numReads        read numReads random\
  \ fragments\n\n-n is not a very useful benchmark.  It is somewhat CPU bound, and\
  \ simply writes\nsequentially to a handful of files.  This isn't the primary task\
  \ of this benchmark,\nwe just need to create the files somehow.\n\n-m is possibly\
  \ the most brutal test.  It reads and writes randomly to a moderately\nlarge file.\
  \  Record size is 104 bytes.\n\n-r is (presumed to be) the majority of accesses\
  \ made by the assembler.  It reads a\nrandom fragment from the store.  It reads\
  \ the 104 byte record from one file, and\na variable length (800 to 1200 bytes)\
  \ sequence from a larger file.\n\n"
generated_using:
- --help
