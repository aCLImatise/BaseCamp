from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, File, Boolean, Int, Directory, String

Mcast_V0_1_0 = CommandToolBuilder(tool="mcast", base_command=["mcast"], inputs=[ToolInput(tag="in_alpha", input_type=Float(optional=True), prefix="--alpha", doc=InputDocumentation(doc="The fraction of all TF binding sites that are binding sites\nfor the TF of interest. Used in the calculation of PSP.\n(default 1.0)")), ToolInput(tag="in_b_file", input_type=File(optional=True), prefix="--bfile", doc=InputDocumentation(doc="File containing n-order Markov background model")), ToolInput(tag="in_hard_mask", input_type=Boolean(optional=True), prefix="--hardmask", doc=InputDocumentation(doc="Nucleotides in lower case will be converted to 'N'\npreventing them from being considred in motif matches")), ToolInput(tag="in_max_gap", input_type=Int(optional=True), prefix="--max-gap", doc=InputDocumentation(doc="Maximum allowed distance between adjacent hits;\n(default = 50)")), ToolInput(tag="in_max_stored_scores", input_type=Int(optional=True), prefix="--max-stored-scores", doc=InputDocumentation(doc="Maximum number of matches that will be stored in memory;\n(default=100000)")), ToolInput(tag="in_max_total_width", input_type=Int(optional=True), prefix="--max-total-width", doc=InputDocumentation(doc="Maximum combined width of all motifs; (default= no limit)")), ToolInput(tag="in_motif_p_thresh", input_type=Float(optional=True), prefix="--motif-pthresh", doc=InputDocumentation(doc="p-value threshold for motif hits; (default = 0.0005).")), ToolInput(tag="in_name_output_not", input_type=Directory(optional=True), prefix="--o", doc=InputDocumentation(doc="Name of output directory. Existing files will not be\noverwritten. (default=mcast_out)")), ToolInput(tag="in_oc", input_type=Directory(optional=True), prefix="--oc", doc=InputDocumentation(doc="Name of output directory. Existing files will be")), ToolInput(tag="in_output_p_thresh", input_type=String(optional=True), prefix="--output-pthresh", doc=InputDocumentation(doc="Print only results with p-values less than <value>.\n(default: not used).")), ToolInput(tag="in_output_q_thresh", input_type=String(optional=True), prefix="--output-qthresh", doc=InputDocumentation(doc="Print only results with q-values less than <value>./\n(default: not used).")), ToolInput(tag="in_parse_genomic_coord", input_type=Boolean(optional=True), prefix="--parse-genomic-coord", doc=InputDocumentation(doc="Parse genomic coord. found in sequence headers")), ToolInput(tag="in_psp", input_type=File(optional=True), prefix="--psp", doc=InputDocumentation(doc="File containing position specific priors; (default none)")), ToolInput(tag="in_prior_dist", input_type=File(optional=True), prefix="--prior-dist", doc=InputDocumentation(doc="File containing distribution of position specific priors;\n(default none)")), ToolInput(tag="in_synth", input_type=Boolean(optional=True), prefix="--synth", doc=InputDocumentation(doc="Use synthetic scores for distribution")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Use this seed for the generation of synthetic sequences\nwhich are in turn used to create synthetic scores.\n(default: 42)")), ToolInput(tag="in_text", input_type=Boolean(optional=True), prefix="--text", doc=InputDocumentation(doc="Plain text output only")), ToolInput(tag="in_transfac", input_type=Boolean(optional=True), prefix="--transfac", doc=InputDocumentation(doc="Motif file is in TRANSFAC format. (default: MEME format)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Verbosity of error messagess, with <value> in the range 0-5;\n(default = 3).")), ToolInput(tag="in_overwritten_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--output-ethresh <value>      Print only results with E-values less than <value>."))], outputs=[ToolOutput(tag="out_name_output_not", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_name_output_not", type_hint=File()), doc=OutputDocumentation(doc="Name of output directory. Existing files will not be\noverwritten. (default=mcast_out)")), ToolOutput(tag="out_oc", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_oc", type_hint=File()), doc=OutputDocumentation(doc="Name of output directory. Existing files will be"))], container="quay.io/biocontainers/meme:5.3.0--py38pl526hc1f1133_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mcast_V0_1_0().translate("wdl")

