!Command
command:
- dep
- check
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -q
  description: 'Suppress non-error output (default: false)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -skip-lock
  description: 'Skip checking that imports and Gopkg.toml are in sync with Gopkg.lock
    (default: false)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -skip-vendor
  description: 'Skip checking that vendor is in sync with Gopkg.lock (default: false)'
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "Usage: dep check [-q] [-skip-lock] [-skip-vendor]\n\nCheck determines\
  \ if your project is in a good state. If problems are found, it\nprints a description\
  \ of each issue, then exits 1. Passing -q suppresses output.\n\nFlags control which\
  \ specific checks will be run. By default, dep check verifies\nthat Gopkg.lock is\
  \ in sync with Gopkg.toml and the imports in your project's .go\nfiles, and that\
  \ the vendor directory is in sync with Gopkg.lock. These checks\ncan be disabled\
  \ with -skip-lock and -skip-vendor, respectively.\n\n(See https://golang.github.io/dep/docs/ensure-mechanics.html#staying-in-sync\
  \ for\nmore information on what it means to be \"in sync.\")\n\nIf your workflow\
  \ necessitates that you modify the contents of vendor, you can\nforce check to ignore\
  \ hash mismatches on a per-project basis by naming\nproject roots in Gopkg.toml's\
  \ \"noverify\" list.\n\nFlags:\n\n  -q            Suppress non-error output (default:\
  \ false)\n  -skip-lock    Skip checking that imports and Gopkg.toml are in sync\
  \ with Gopkg.lock (default: false)\n  -skip-vendor  Skip checking that vendor is\
  \ in sync with Gopkg.lock (default: false)\n\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/gotree:0.4.1--h375a9b1_0
