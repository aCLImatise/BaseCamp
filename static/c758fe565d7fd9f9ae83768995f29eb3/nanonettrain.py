from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean, Array, Float

Nanonettrain_V0_1_0 = CommandToolBuilder(tool="nanonettrain", base_command=["nanonettrain"], inputs=[ToolInput(tag="in_train", input_type=File(optional=True), prefix="--train", doc=InputDocumentation(doc="Input training data, either a path to fast5 files or a\nsingle netcdf file (default: None)")), ToolInput(tag="in_train_list", input_type=String(optional=True), prefix="--train_list", doc=InputDocumentation(doc="Strand list constaining training set (default: None)")), ToolInput(tag="in_section", input_type=String(optional=True), prefix="--section", doc=InputDocumentation(doc="Section of reads to train (default: template)")), ToolInput(tag="in_val", input_type=File(optional=True), prefix="--val", doc=InputDocumentation(doc="Input validation data, either a path to fast5 files or\na single netcdf file (default: None)")), ToolInput(tag="in_val_list", input_type=String(optional=True), prefix="--val_list", doc=InputDocumentation(doc="Strand list constaining validation set (default: None)")), ToolInput(tag="in_workspace", input_type=File(optional=True), prefix="--workspace", doc=InputDocumentation(doc="Path for storing training and validation NetCDF files,\nif not specified a temporary file is used. (default:\n/tmp)")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Output prefix (default: None)")), ToolInput(tag="in_model", input_type=File(optional=True), prefix="--model", doc=InputDocumentation(doc="ANN configuration file (default: /root/.cache/Python-\nEggs/nanonet-2.0.0-py2.7-linux-x86_64.egg-\ntmp/nanonet/data/default_model.tmpl)")), ToolInput(tag="in_km_er_length", input_type=Int(optional=True), prefix="--kmer_length", doc=InputDocumentation(doc="Length of kmers to learn. (default: 5)")), ToolInput(tag="in_bases", input_type=String(optional=True), prefix="--bases", doc=InputDocumentation(doc="Alphabet of kmers to learn. (default: ACGT)")), ToolInput(tag="in_device", input_type=Int(optional=True), prefix="--device", doc=InputDocumentation(doc="ID of CUDA device to use. (default: 0)")), ToolInput(tag="in_no_cuda", input_type=Boolean(optional=True), prefix="--no-cuda", doc=InputDocumentation(doc="Use CUDA acceleration. (Default: --no-cuda) (default:\nFalse)")), ToolInput(tag="in_window", input_type=Array(t=String(), optional=True), prefix="--window", doc=InputDocumentation(doc="The detailed list of the entire window. (default: [-1,\n0, 1])")), ToolInput(tag="in_max_epochs", input_type=Int(optional=True), prefix="--max_epochs", doc=InputDocumentation(doc="Max training epocs, default 500 (default: 500)")), ToolInput(tag="in_max_epochs_no_best", input_type=Int(optional=True), prefix="--max_epochs_no_best", doc=InputDocumentation(doc="Stop training when no improvment for number of epocs,\ndefault 50 (default: 50)")), ToolInput(tag="in_validate_every", input_type=Int(optional=True), prefix="--validate_every", doc=InputDocumentation(doc="Run validation data set every number of epocs.\n(default: 5)")), ToolInput(tag="in_parallel_sequences", input_type=Int(optional=True), prefix="--parallel_sequences", doc=InputDocumentation(doc="Number of sequences in a min-batch (default: 125)")), ToolInput(tag="in_learning_rate", input_type=Float(optional=True), prefix="--learning_rate", doc=InputDocumentation(doc="Learning rate parameters of SGD. (default: 1e-05)")), ToolInput(tag="in_momentum", input_type=Float(optional=True), prefix="--momentum", doc=InputDocumentation(doc="Momentum parameter of SGD. (default: 0.9)")), ToolInput(tag="in_cache_path", input_type=File(optional=True), prefix="--cache_path", doc=InputDocumentation(doc="Path for currennt temporary files. (default: /tmp)\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nanonettrain_V0_1_0().translate("wdl", allow_empty_container=True)

