from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, Float, File, String

Abyss_Filtergraph_V0_1_0 = CommandToolBuilder(tool="abyss_filtergraph", base_command=["abyss-filtergraph"], inputs=[ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="k-mer size")), ToolInput(tag="in_ss", input_type=Boolean(optional=True), prefix="--SS", doc=InputDocumentation(doc="expect contigs to be oriented correctly")), ToolInput(tag="in_no_ss", input_type=Boolean(optional=True), prefix="--no-SS", doc=InputDocumentation(doc="no assumption about contig orientation")), ToolInput(tag="in_island", input_type=Int(optional=True), prefix="--island", doc=InputDocumentation(doc="remove islands shorter than N [0]")), ToolInput(tag="in_tip", input_type=Int(optional=True), prefix="--tip", doc=InputDocumentation(doc="remove tips shorter than N [0]")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc="remove contigs shorter than N [0]")), ToolInput(tag="in_max_length", input_type=Int(optional=True), prefix="--max-length", doc=InputDocumentation(doc="remove contigs longer than N [0]")), ToolInput(tag="in_coverage", input_type=Float(optional=True), prefix="--coverage", doc=InputDocumentation(doc="remove contigs with mean k-mer coverage less than FLOAT [0]")), ToolInput(tag="in_max_coverage", input_type=Float(optional=True), prefix="--max-coverage", doc=InputDocumentation(doc="remove contigs with mean k-mer coverage at least FLOAT [0]")), ToolInput(tag="in_shim", input_type=Boolean(optional=True), prefix="--shim", doc=InputDocumentation(doc="remove filler contigs that only contribute\nto adjacency [default]")), ToolInput(tag="in_no_shim", input_type=Boolean(optional=True), prefix="--no-shim", doc=InputDocumentation(doc="disable filler contigs removal")), ToolInput(tag="in_shim_max_degree", input_type=Int(optional=True), prefix="--shim-max-degree", doc=InputDocumentation(doc="only remove shims where the smaller of\nin/out degree is smaller than N [1]")), ToolInput(tag="in_min_overlap", input_type=Int(optional=True), prefix="--min-overlap", doc=InputDocumentation(doc="require a minimum overlap of N bases [10]")), ToolInput(tag="in_assemble", input_type=Boolean(optional=True), prefix="--assemble", doc=InputDocumentation(doc="assemble unambiguous paths")), ToolInput(tag="in_no_assemble", input_type=Boolean(optional=True), prefix="--no-assemble", doc=InputDocumentation(doc="disable assembling of paths [default]")), ToolInput(tag="in_graph", input_type=File(optional=True), prefix="--graph", doc=InputDocumentation(doc="write the contig adjacency graph to FILE")), ToolInput(tag="in_ignore", input_type=File(optional=True), prefix="--ignore", doc=InputDocumentation(doc="ignore contigs seen in FILE")), ToolInput(tag="in_remove", input_type=File(optional=True), prefix="--remove", doc=InputDocumentation(doc="remove contigs seen in FILE")), ToolInput(tag="in_output_graph_adj", input_type=Boolean(optional=True), prefix="--adj", doc=InputDocumentation(doc="output the graph in ADJ format [default]")), ToolInput(tag="in_as_qg", input_type=Boolean(optional=True), prefix="--asqg", doc=InputDocumentation(doc="output the graph in ASQG format")), ToolInput(tag="in_dot", input_type=Boolean(optional=True), prefix="--dot", doc=InputDocumentation(doc="output the graph in GraphViz format")), ToolInput(tag="in_gfa", input_type=Boolean(optional=True), prefix="--gfa", doc=InputDocumentation(doc="output the graph in GFA1 format")), ToolInput(tag="in_gfa_one", input_type=Boolean(optional=True), prefix="--gfa1", doc=InputDocumentation(doc="output the graph in GFA1 format")), ToolInput(tag="in_gfa_two", input_type=Boolean(optional=True), prefix="--gfa2", doc=InputDocumentation(doc="output the graph in GFA2 format")), ToolInput(tag="in_gv", input_type=Boolean(optional=True), prefix="--gv", doc=InputDocumentation(doc="output the graph in GraphViz format")), ToolInput(tag="in_sam", input_type=Boolean(optional=True), prefix="--sam", doc=InputDocumentation(doc="output the graph in SAM format")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_contig_adjacency_graph", input_type=String(), position=0, doc=InputDocumentation(doc="contig adjacency graph")), ToolInput(tag="in_fast_a", input_type=String(), position=1, doc=InputDocumentation(doc="contigs to check consistency of ADJ edges"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Abyss_Filtergraph_V0_1_0().translate("wdl", allow_empty_container=True)

