from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Xml_Grep_V0_1_0 = CommandToolBuilder(tool="xml_grep", base_command=["xml_grep"], inputs=[ToolInput(tag="in_man", input_type=Boolean(optional=True), prefix="--man", doc=InputDocumentation(doc="full documentation")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="--Version", doc=InputDocumentation(doc="display the tool version")), ToolInput(tag="in_root", input_type=File(optional=True), prefix="--root", doc=InputDocumentation(doc="look for and return xml chunks matching <cond>\nif neither '--root' nor '--file' are used then the element(s) that\ntrigger the '--cond' option is (are) used. If '--cond' is not used\nthen all elements matching the <cond> are returned\nseveral '--root' can be provided")), ToolInput(tag="in_cond", input_type=File(optional=True), prefix="--cond", doc=InputDocumentation(doc="return the chunks (or file names) only if they contain elements\nmatching <cond>\nseveral '--cond' can be provided (in which case they are OR'ed)")), ToolInput(tag="in_files", input_type=File(optional=True), prefix="--files", doc=InputDocumentation(doc="return only file names (do not generate an XML output)\nusage of this option precludes using any of the options that define\nthe XML output: '--roots', '--encoding', '--wrap', '--group_by_file'\nor '--pretty_print'")), ToolInput(tag="in_count", input_type=Boolean(optional=True), prefix="--count", doc=InputDocumentation(doc="return only the number of matches in each file\nusage of this option precludes using any of the options that define\nthe XML output: '--roots', '--encoding', '--wrap', '--group_by_file'\nor '--pretty_print'")), ToolInput(tag="in_strict", input_type=Boolean(optional=True), prefix="--strict", doc=InputDocumentation(doc="without this option parsing errors are reported to STDOUT and the\nfile skipped")), ToolInput(tag="in_date", input_type=Boolean(optional=True), prefix="--date", doc=InputDocumentation(doc="when on (by default) the wrapping element get a 'date' attribute\nthat gives the date the tool was run.\nwith '--nodate' this attribute is not added, which can be useful if\nyou need to compare 2 runs.")), ToolInput(tag="in_encoding", input_type=Int(optional=True), prefix="--encoding", doc=InputDocumentation(doc="encoding of the xml output (utf-8 by default)")), ToolInput(tag="in_nb_results", input_type=String(optional=True), prefix="--nb_results", doc=InputDocumentation(doc="output only <nb> results")), ToolInput(tag="in_by_file", input_type=File(optional=True), prefix="--by_file", doc=InputDocumentation(doc="output only <nb> results by file")), ToolInput(tag="in_wrap", input_type=String(optional=True), prefix="--wrap", doc=InputDocumentation(doc="wrap the xml result in the provided tag (defaults to 'xml_grep')\nIf wrap is set to an empty string ('--wrap ''') then the xml result\nis not wrapped at all.")), ToolInput(tag="in_nowrap", input_type=Boolean(optional=True), prefix="--nowrap", doc=InputDocumentation(doc="same as using '--wrap ''': the xml result is not wrapped.")), ToolInput(tag="in_descr", input_type=String(optional=True), prefix="--descr", doc=InputDocumentation(doc="attributes of the wrap tag (defaults to 'version='<VERSION>'\ndate='<date>'')")), ToolInput(tag="in_group_by_file", input_type=File(optional=True), prefix="--group_by_file", doc=InputDocumentation(doc="wrap results for each files into a separate element. By default that\nelement is named 'file'. It has an attribute named 'filename' that\ngives the name of the file.\nthe short version of this option is -g")), ToolInput(tag="in_exclude", input_type=File(optional=True), prefix="--exclude", doc=InputDocumentation(doc="same as using '-v' in grep: the elements that match the condition\nare excluded from the result, the input file(s) is (are) otherwise\nunchanged\nthe short form of this option is -v")), ToolInput(tag="in_pretty_print", input_type=String(optional=True), prefix="--pretty_print", doc=InputDocumentation(doc="pretty print the output using XML::Twig styles (''indented'',\n''record'' or ''record_c'' are probably what you are looking for)\nif the option is used but no style is given then ''indented'' is\nused\nshort form for this argument is -s")), ToolInput(tag="in_text_only", input_type=Boolean(optional=True), prefix="--text_only", doc=InputDocumentation(doc="Displays the text of the results, one by line.")), ToolInput(tag="in_html", input_type=Boolean(optional=True), prefix="--html", doc=InputDocumentation(doc="Allow HTML input, files are converted using HTML::TreeBuilder")), ToolInput(tag="in_tidy", input_type=Boolean(optional=True), prefix="--Tidy", doc=InputDocumentation(doc="Allow HTML input, files are converted using HTML::Tidy"))], outputs=[ToolOutput(tag="out_files", output_type=File(optional=True), selector=InputSelector(input_to_select="in_files", type_hint=File()), doc=OutputDocumentation(doc="return only file names (do not generate an XML output)\nusage of this option precludes using any of the options that define\nthe XML output: '--roots', '--encoding', '--wrap', '--group_by_file'\nor '--pretty_print'")), ToolOutput(tag="out_by_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_by_file", type_hint=File()), doc=OutputDocumentation(doc="output only <nb> results by file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Xml_Grep_V0_1_0().translate("wdl", allow_empty_container=True)

