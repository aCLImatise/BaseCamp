!Command
command:
- chainBridge
positional:
- !Positional
  description: ''
  position: 0
  name: in.chain
  optional: false
- !Positional
  description: ''
  position: 1
  name: target.2bit
  optional: false
- !Positional
  description: ''
  position: 2
  name: query.2bit
  optional: false
named:
- !Flag
  description: "Maximum size of double-sided gap to try to bridge (default: 6000)\n\
    Note: there is no size limit for exact sequence matches"
  synonyms:
  - -maxGap
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: Read the scoring matrix from a blastz-format file
  synonyms:
  - -scoreScheme
  args: !SimpleFlagArg
    name: fileName
  optional: true
- !Flag
  description: "Specify type of linearGap to use.\nloose is chicken/human linear gap\
    \ costs.\nmedium is mouse/human linear gap costs.\nOr specify a piecewise linearGap\
    \ tab delimited file.\n(default: loose)\n"
  synonyms:
  - -linearGap
  args: !SimpleFlagArg
    name: medium|loose|filename
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "chainBridge - Attempt to extend alignments through double-sided gaps of\
  \ similar size\nusage:\n   chainBridge in.chain target.2bit query.2bit out.chain\n\
  options:\n   -maxGap=N  Maximum size of double-sided gap to try to bridge (default:\
  \ 6000)\n              Note: there is no size limit for exact sequence matches\n\
  \   -scoreScheme=fileName Read the scoring matrix from a blastz-format file\n  \
  \ -linearGap=<medium|loose|filename> Specify type of linearGap to use.\n       \
  \       loose is chicken/human linear gap costs.\n              medium is mouse/human\
  \ linear gap costs.\n              Or specify a piecewise linearGap tab delimited\
  \ file.\n              (default: loose)\n\n"
generated_using: []
