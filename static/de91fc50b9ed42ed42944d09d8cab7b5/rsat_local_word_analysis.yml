!Command
command:
- rsat
- local-word-analysis
positional:
- !Positional
  optional: false
  position: 0
  name: local-word-analysis
  description: VERSION
- !Positional
  optional: false
  position: 1
  name: '20181203'
  description: AUTHOR
- !Positional
  optional: false
  position: 0
  name: sequences
  description: pattern discovery
- !Positional
  optional: false
  position: 0
  name: P-VALUE
  description: "The probability to observe exactly k occurrences of a given oligomer\n\
    is computed using the binomial statistics\nunderrepresentation\nk           k\
    \       (N-k)\nP(X<=k) = SUM C(k,N)  p   (1-p)\ni=0\noverreprensentation\nN  \
    \          k       (N-k)\nP(X>=k) = SUM  C(k,N)  p   (1-p)\ni=k"
- !Positional
  optional: false
  position: 1
  name: E-VALUE
  description: E-VALUE = number_of_tests * P-VALUE
named:
- !Flag
  optional: true
  synonyms:
  - -v
  description: '#, --verbosity=#   set verbosity to level #'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -i
  description: "#, --input=#       read sequence from # (must be in FASTA format)\n\
    if not specified, the standard input is used"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  description: "#, --output=#      output results to #\nif not specified, the standard\
    \ output is used"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -l
  description: "#, --length=#      set oligomer length to # (REQUIRED ARGUMENT)\n\
    when the option dyad is used # represents the length of one monad\nEXAMPLE: --length=7"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --dyad
  description: count dyads instead of oligomers
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --spacing
  description: ":B         when using dyads set the spacing between A to B\nEXAMPLE:\
    \ --length=3 --dyad --spacing=1:20"
  args: !SimpleFlagArg
    name: A
- !Flag
  optional: true
  synonyms:
  - --under
  description: use under-represented words statistics
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  description: "#, --strand=#      search in forward strand + or in both strands +-\
    \ (default)\nEXAMPLE: --strand=+"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  - --overlap
  description: "allow overlapping oligomer occurrences\nEXAMPLE: --overlap"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --window
  description: "=#            count oligomers in fixed window of length #\nuse --window=variable\
    \ to use a variable size window (slower)\nuse --window=none to search without\
    \ window\nEXAMPLE: --window=20 (window of length 20)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --windowgroup
  description: "=#       count oligomers in fixed window of length #, 2#, ...\nonly\
    \ valid when the --center option is used\nEXAMPLE: --center=0 --windowgroup=20\
    \ (use a window of length 20, 40, 60, ...)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --right
  description: "=#             use right bound position as reference\nposition #.\
    \ This should be used when dealing with\nupstream sequences.\nEXAMPLE: --right=-1\
    \ (use right bound of input\nsequence as position -1)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --left
  description: "=#              use left bound position as reference\nposition #.\
    \ This should be used when dealing with\ndownstream sequences.\nEXAMPLE: --left=0\
    \ (use left bound of input\nsequences as position 0)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --center
  description: "=#            use center position as reference\nposition #.\nEXAMPLE:\
    \ --center=0 (use center of input\nsequences as position 0)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -m
  description: "#, --markov=#      use a Markov model of order # calibrated from\n\
    input sequences\norder 0 corresponds to single nucleotide frequencies\nEXAMPLE:\
    \ --markov=2 (Markov chain of order 2)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --bgfile
  description: "=#            use a predefined local-word-analysis background model.\n\
    EXAMPLE --bgfile=mybgfile"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --bgoligo
  description: "=#           use a predefined oligo-analysis background model\nEXAMPLE:\
    \ --bgolio=myfile.gz"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --bgoligomarkov
  description: "=#     use a Markovian background model loaded from a\npredefined\
    \ oligo-analysis file\nEXAMPLE: --bgoligomarkov=myfile.gz"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --bgwindow
  description: "=#          use a widow size of length # in background model\nEXAMPLE:\
    \ --bgwindow=200 (use a background window of length 200)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max
  description: "VALUE     limit output to items that have PARAM <= VALUE\nEXAMPLE:\
    \ --max rank 10\nSupported parameters: seq,identifier,obs_freq,exp_\nfreq,occ,exp_occ,occ_P,occ_E,occ_sig,start,end,wid\n\
    th,n_win,n_pos,w_rank,rank"
  args: !SimpleFlagArg
    name: PARAM
- !Flag
  optional: true
  synonyms:
  - --min
  description: "VALUE     limit output to items that have PARAM >= VALUE\nEXAMPLE:\
    \ --min occ_sig 0\nSupported parameters:seq,identifier,obs_freq,exp_f\nreq,occ,exp_occ,occ_P,occ_E,occ_sig,start,end,widt\n\
    h,n_win,n_pos,w_rank,rank"
  args: !SimpleFlagArg
    name: PARAM
- !Flag
  optional: true
  synonyms:
  - --sort
  description: "=[+][-]PARAM    sort ouput according to PARAM in growing\norder (+)\
    \ or inverse (-)\nEXAMPLE: --sort=+label\nSupported parameters:seq,identifier,obs_freq,exp_f\n\
    req,occ,exp_occ,occ_P,occ_E,occ_sig,start,end,width\nh,n_win,n_pos,w_rank,rank"
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - --version
  description: show program's version number and exit
  args: !EmptyFlagArg {}
help_text: "NAME\n        local-word-analysis\n\nVERSION\n        20181203\n\nAUTHOR\n\
  \        Matthieu Defrance <matthieu.dc.defrance@ulb.ac.be>\n\nDESCRIPTION\n   \
  \     compute oligomer frequencies in a set of sequences,\n        and detects locally\
  \ overrepresented oligomers.\n\nCATEGORY\n        sequences\n        pattern discovery\n\
  \        \nARGUMENTS\n    GENERAL OPTIONS\n        --version             show program's\
  \ version number and exit\n        -h, --help            show this help message\
  \ and exit\n        -v #, --verbosity=#   set verbosity to level #\n        \n\n\
  \        -i #, --input=#       read sequence from # (must be in FASTA format)\n\
  \                              if not specified, the standard input is used\n  \
  \      -o #, --output=#      output results to #\n                             \
  \ if not specified, the standard output is used\n    COUNTING OPTIONS\n        -l\
  \ #, --length=#      set oligomer length to # (REQUIRED ARGUMENT)\n            \
  \                  when the option dyad is used # represents the length of one monad\n\
  \                              EXAMPLE: --length=7    \n        --dyad         \
  \       count dyads instead of oligomers                              \n       \
  \ --spacing=A:B         when using dyads set the spacing between A to B\n      \
  \                        EXAMPLE: --length=3 --dyad --spacing=1:20\n        --under\
  \               use under-represented words statistics\n        -s #, --strand=#\
  \      search in forward strand + or in both strands +- (default)\n            \
  \                  EXAMPLE: --strand=+\n        -p, --overlap         allow overlapping\
  \ oligomer occurrences\n                              EXAMPLE: --overlap\n     \
  \   --window=#            count oligomers in fixed window of length #\n        \
  \                      use --window=variable to use a variable size window (slower)\n\
  \                              use --window=none to search without window\n    \
  \                          EXAMPLE: --window=20 (window of length 20)\n        --windowgroup=#\
  \       count oligomers in fixed window of length #, 2#, ...\n                 \
  \             only valid when the --center option is used\n                    \
  \          EXAMPLE: --center=0 --windowgroup=20 (use a window of length 20, 40,\
  \ 60, ...)\n        --right=#             use right bound position as reference\n\
  \                              position #. This should be used when dealing with\
  \ \n                              upstream sequences.\n                        \
  \      EXAMPLE: --right=-1 (use right bound of input\n                         \
  \     sequence as position -1)\n        --left=#              use left bound position\
  \ as reference\n                              position #. This should be used when\
  \ dealing with\n                              downstream sequences.\n          \
  \                    EXAMPLE: --left=0 (use left bound of input\n              \
  \                sequences as position 0)\n        --center=#            use center\
  \ position as reference\n                              position #.\n           \
  \                   EXAMPLE: --center=0 (use center of input\n                 \
  \             sequences as position 0)\n                              \n    BACKGROUND\
  \ MODEL OPTIONS                              \n        -m #, --markov=#      use\
  \ a Markov model of order # calibrated from\n                              input\
  \ sequences\n                              order 0 corresponds to single nucleotide\
  \ frequencies\n                              EXAMPLE: --markov=2 (Markov chain of\
  \ order 2)\n        --bgfile=#            use a predefined local-word-analysis background\
  \ model.\n                              EXAMPLE --bgfile=mybgfile\n        --bgoligo=#\
  \           use a predefined oligo-analysis background model\n                 \
  \             EXAMPLE: --bgolio=myfile.gz\n        --bgoligomarkov=#     use a Markovian\
  \ background model loaded from a\n                              predefined oligo-analysis\
  \ file\n                              EXAMPLE: --bgoligomarkov=myfile.gz\n     \
  \   --bgwindow=#          use a widow size of length # in background model \n  \
  \                            EXAMPLE: --bgwindow=200 (use a background window of\
  \ length 200)\n\n    FILTER OPTIONS                             \n        --max=PARAM\
  \ VALUE     limit output to items that have PARAM <= VALUE\n                   \
  \           EXAMPLE: --max rank 10\n                              Supported parameters:\
  \ seq,identifier,obs_freq,exp_\n                              freq,occ,exp_occ,occ_P,occ_E,occ_sig,start,end,wid\n\
  \                              th,n_win,n_pos,w_rank,rank\n        --min=PARAM VALUE\
  \     limit output to items that have PARAM >= VALUE\n                         \
  \     EXAMPLE: --min occ_sig 0\n                              Supported parameters:seq,identifier,obs_freq,exp_f\n\
  \                              req,occ,exp_occ,occ_P,occ_E,occ_sig,start,end,widt\n\
  \                              h,n_win,n_pos,w_rank,rank\n        --sort=[+][-]PARAM\
  \    sort ouput according to PARAM in growing\n                              order\
  \ (+) or inverse (-)\n                              EXAMPLE: --sort=+label\n   \
  \                           Supported parameters:seq,identifier,obs_freq,exp_f\n\
  \                              req,occ,exp_occ,occ_P,occ_E,occ_sig,start,end,width\n\
  \                              h,n_win,n_pos,w_rank,rank\n\n\n\nSTATISTICS\n   \
  \ P-VALUE\n        The probability to observe exactly k occurrences of a given oligomer\n\
  \        is computed using the binomial statistics\n\n        underrepresentation\n\
  \n                   k           k       (N-k)\n        P(X<=k) = SUM C(k,N)  p\
  \   (1-p)\n                  i=0    \n\n        overreprensentation\n\n        \
  \           N            k       (N-k)\n        P(X>=k) = SUM  C(k,N)  p   (1-p)\n\
  \                  i=k    \n\n    E-VALUE\n        E-VALUE = number_of_tests * P-VALUE\n\
  \n"
generated_using:
- --help
docker_image:
