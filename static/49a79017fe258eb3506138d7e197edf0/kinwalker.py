from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Kinwalker_V0_1_0 = CommandToolBuilder(tool="kinwalker", base_command=["kinwalker"], inputs=[ToolInput(tag="in_in_it_structure", input_type=Boolean(optional=True), prefix="--init_structure", doc=InputDocumentation(doc="Start with a structure other than the open chain.")), ToolInput(tag="in_interrupt", input_type=Boolean(optional=True), prefix="--interrupt", doc=InputDocumentation(doc="Allow interrupted folding trajectories when the barrier is exceeded.")), ToolInput(tag="in_print_front_dot", input_type=Boolean(optional=True), prefix="--printfront.", doc=InputDocumentation(doc="Creates PS plots of front progression with index i, named front_trajectory($i).ps.\n-t, --test          Use test sequence.\n-v, --verbose       Verbose mode. Print debugging messages about program progress.")), ToolInput(tag="in_barrier_heuristic", input_type=Boolean(optional=True), prefix="--barrier_heuristic", doc=InputDocumentation(doc="'M' Morgan-Higgs,'S' limits small stacks,'B' Barriers,'A' all, then take minimum. Default: >M<")), ToolInput(tag="in_dangle", input_type=Boolean(optional=True), prefix="--dangle", doc=InputDocumentation(doc="Dangle value of 0,1,2 as in the ViennaRNA package. Default: >0<")), ToolInput(tag="in_grouping", input_type=Boolean(optional=True), prefix="--grouping", doc=InputDocumentation(doc="How barrier_heuristic 'M' treats conflict groups('standard' or 'regroup'). Default: >standard<")), ToolInput(tag="in_look_ahead", input_type=Boolean(optional=True), prefix="--lookahead", doc=InputDocumentation(doc="#BP that MorganHiggs forms its subpaths from. Default: >1<")), ToolInput(tag="in_max_keep", input_type=Boolean(optional=True), prefix="--maxkeep", doc=InputDocumentation(doc="Breadth of breadth first seerch in barrier_heuristic='B'. Default: >1<")), ToolInput(tag="in_no_lonely", input_type=Boolean(optional=True), prefix="--nolonely", doc=InputDocumentation(doc="Value of noLonelyPairs as in ViennaRNA. Default: >2<")), ToolInput(tag="in_transcribed", input_type=Boolean(optional=True), prefix="--transcribed", doc=InputDocumentation(doc="#bases initially transcribed, <0 means all is transcribed. Default: >1<)")), ToolInput(tag="in_transcription_rate", input_type=Boolean(optional=True), prefix="--transcription_rate", doc=InputDocumentation(doc="#bases transcribed per second. Default: >200.000000<)")), ToolInput(tag="in_window_size", input_type=Boolean(optional=True), prefix="--windowsize", doc=InputDocumentation(doc="Max size of substructures considered for folding events during transcription, 0= all are considered. Default: >0<)")), ToolInput(tag="in_seq_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_outfile", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/viennarna:2.4.17--py36hd181a71_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Kinwalker_V0_1_0().translate("wdl")

