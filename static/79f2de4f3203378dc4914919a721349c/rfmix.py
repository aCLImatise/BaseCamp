from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Float, Int, Boolean

Rfmix_V0_1_0 = CommandToolBuilder(tool="rfmix", base_command=["rfmix"], inputs=[ToolInput(tag="in_query_file", input_type=File(optional=True), prefix="--query-file", doc=InputDocumentation(doc="(required)\nVCF file with samples to analyze                      (required)")), ToolInput(tag="in_reference_file", input_type=File(optional=True), prefix="--reference-file", doc=InputDocumentation(doc="(required)\nVCF file with reference individuals                   (required)")), ToolInput(tag="in_sample_map", input_type=String(optional=True), prefix="--sample-map", doc=InputDocumentation(doc="(required)\nReference panel sample population classification map  (required)")), ToolInput(tag="in_genetic_map", input_type=File(optional=True), prefix="--genetic-map", doc=InputDocumentation(doc="(required)\nGenetic map file                                      (required)")), ToolInput(tag="in_output_basename", input_type=String(optional=True), prefix="--output-basename", doc=InputDocumentation(doc="(required)\nBasename (prefix) for output files                    (required)")), ToolInput(tag="in_chromosome", input_type=String(optional=True), prefix="--chromosome", doc=InputDocumentation(doc="(required)\nExecute only on specified chromosome                  (required)")), ToolInput(tag="in_crf_spacing", input_type=Float(optional=True), prefix="--crf-spacing", doc=InputDocumentation(doc="Conditional Random Field spacing (# of SNPs)")), ToolInput(tag="in_rf_window_size", input_type=Float(optional=True), prefix="--rf-window-size", doc=InputDocumentation(doc="Random forest window size (class estimation window size)")), ToolInput(tag="in_crf_weight", input_type=Float(optional=True), prefix="--crf-weight", doc=InputDocumentation(doc="Weight of observation term relative to transition term in conditional random field")), ToolInput(tag="in_generations", input_type=Float(optional=True), prefix="--generations", doc=InputDocumentation(doc="Average number of generations since expected admixture")), ToolInput(tag="in_em_iterations", input_type=Int(optional=True), prefix="--em-iterations", doc=InputDocumentation(doc="Maximum number of EM iterations")), ToolInput(tag="in_reanalyze_reference", input_type=Boolean(optional=True), prefix="--reanalyze-reference", doc=InputDocumentation(doc="In EM, analyze local ancestry of the reference panel and reclassify it")), ToolInput(tag="in_node_size", input_type=Int(optional=True), prefix="--node-size", doc=InputDocumentation(doc="Terminal node size for random forest trees")), ToolInput(tag="in_trees", input_type=Int(optional=True), prefix="--trees", doc=InputDocumentation(doc="Number of tree in random forest to estimate population class probability")), ToolInput(tag="in_max_missing", input_type=Float(optional=True), prefix="--max-missing", doc=InputDocumentation(doc="Maximum proportion of missing data allowed to include a SNP")), ToolInput(tag="in_bootstrap_mode", input_type=Int(optional=True), prefix="--bootstrap-mode", doc=InputDocumentation(doc="Specify random forest bootstrap mode as integer code (see manual)")), ToolInput(tag="in_rf_minimum_snps", input_type=Int(optional=True), prefix="--rf-minimum-snps", doc=InputDocumentation(doc="With genetic sized rf windows, include at least this many SNPs regardless of span")), ToolInput(tag="in_analyze_range", input_type=Float(optional=True), prefix="--analyze-range", doc=InputDocumentation(doc="Physical position range, specified as <start pos>-<end pos>, in Mbp (decimal allowed)")), ToolInput(tag="in_debug", input_type=String(optional=True), prefix="--debug", doc=InputDocumentation(doc="Turn on any debugging output")), ToolInput(tag="in_n_threads", input_type=Int(optional=True), prefix="--n-threads", doc=InputDocumentation(doc="Force number of simultaneous thread for parallel execution")), ToolInput(tag="in_random_seed", input_type=Int(optional=True), prefix="--random-seed", doc=InputDocumentation(doc="Seed value for random number generation (integer)\n(maybe specified in hexadecimal by preceeding with 0x), or the string\n'clock' to seed with the current system time.\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rfmix_V0_1_0().translate("wdl", allow_empty_container=True)

