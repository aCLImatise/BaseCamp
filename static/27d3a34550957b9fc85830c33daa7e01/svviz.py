from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Float, Boolean, String

Svviz_V0_1_0 = CommandToolBuilder(tool="svviz", base_command=["svviz"], inputs=[ToolInput(tag="in_bam", input_type=File(optional=True), prefix="--bam", doc=InputDocumentation(doc="sorted, indexed bam file containing reads of interest to plot; can be specified multiple\ntimes to load multiple samples")), ToolInput(tag="in_type", input_type=File(optional=True), prefix="--type", doc=InputDocumentation(doc="event type: either del[etion], ins[ertion], inv[ersion], mei (mobile element insertion),\ntra[nslocation], largedeletion (ldel), breakend (bkend) or batch (for reading variants\nfrom a VCF file in batch mode)")), ToolInput(tag="in_annotations", input_type=File(optional=True), prefix="--annotations", doc=InputDocumentation(doc="bed or gtf file containing annotations to plot; will be compressed and indexed using\nsamtools tabix in place if needed (can specify multiple annotations files)")), ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="An additional indexable fasta file specifying insertion sequences (eg mobile element\nsequences)")), ToolInput(tag="in_min_mapq", input_type=Int(optional=True), prefix="--min-mapq", doc=InputDocumentation(doc="minimum mapping quality for reads (default: 0)")), ToolInput(tag="in_pair_min_mapq", input_type=Int(optional=True), prefix="--pair-min-mapq", doc=InputDocumentation(doc="include only read pairs where at least one read end both exceeds PAIR_MAPQ and\nfalls near the variant being analyzed (default: 0)")), ToolInput(tag="in_max_multi_mapping_similarity", input_type=Int(optional=True), prefix="--max-multimapping-similarity", doc=InputDocumentation(doc="maximum ratio between best and second-best alignment scores within visualization\nregion in order to retain read (default: 0.95)")), ToolInput(tag="in_aln_quality", input_type=Int(optional=True), prefix="--aln-quality", doc=InputDocumentation(doc="minimum score of the Smith-Waterman alignment against the ref or alt allele in order to be\nconsidered (multiplied by 2)")), ToolInput(tag="in_aln_score_delta", input_type=Float(optional=True), prefix="--aln-score-delta", doc=InputDocumentation(doc="minimum difference in scores between ref alignment score and alt alignment score\nto be assigned to one allele (use an integer to specify a hard score difference\nthreshold, or a float to specify a score difference relative to the read size;\ndefault: 2)")), ToolInput(tag="in_include_supplementary", input_type=Boolean(optional=True), prefix="--include-supplementary", doc=InputDocumentation(doc="include supplementary alignments (ie, those with the 0x800 bit set in the bam flags);\ndefault: false")), ToolInput(tag="in_fast", input_type=Boolean(optional=True), prefix="--fast", doc=InputDocumentation(doc="implements some optimizations designed to find exact sequence matches quickly;\nwill substantially increase speed on Illumina data but may result in some inexact\nresults; default: false")), ToolInput(tag="in_sample_reads", input_type=String(optional=True), prefix="--sample-reads", doc=InputDocumentation(doc="use at most this many reads (pairs), sampling randomly if need be, useful\nwhen running in batch mode (default: use all reads)")), ToolInput(tag="in_max_reads", input_type=Int(optional=True), prefix="--max-reads", doc=InputDocumentation(doc="maximum number of reads allowed, totaled across all samples, useful when running in batch\nmode (default: unlimited)")), ToolInput(tag="in_max_size", input_type=Int(optional=True), prefix="--max-size", doc=InputDocumentation(doc="maximum event size allowed, totaled across all chromosome parts in bp; if either the ref\nallele or alt allele exceeds this size, it will be skipped (default: unlimited)")), ToolInput(tag="in_max_deletion_size", input_type=Int(optional=True), prefix="--max-deletion-size", doc=InputDocumentation(doc="deletion size above which the deletion is analyzed in breakend mode (default: don't\nconvert to breakend mode)")), ToolInput(tag="in_port", input_type=String(optional=True), prefix="--port", doc=InputDocumentation(doc="define a port to use for the web browser (default: random port)")), ToolInput(tag="in_processes", input_type=String(optional=True), prefix="--processes", doc=InputDocumentation(doc="how many processes to use for read realignment (default: use all available cores)")), ToolInput(tag="in_no_web", input_type=Boolean(optional=True), prefix="--no-web", doc=InputDocumentation(doc="don't show the web interface")), ToolInput(tag="in_save_reads", input_type=File(optional=True), prefix="--save-reads", doc=InputDocumentation(doc="save relevant reads to this file (bam)")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="how verbose the progress and logging should be")), ToolInput(tag="in_export", input_type=File(optional=True), prefix="--export", doc=InputDocumentation(doc="export view to file; in single variant-mode, the exported file format is determined from\nthe filename extension unless --format is specified; in batch mode, this should be the name\nof a directory into which to save the files (use --format to set format); setting --export\nautomatically sets --no-web")), ToolInput(tag="in_format", input_type=File(optional=True), prefix="--format", doc=InputDocumentation(doc="file export format, either svg, png or\npdf; by default, this is pdf (batch mode) or automatically identified from the file\nextension of --export")), ToolInput(tag="in_open_exported", input_type=Boolean(optional=True), prefix="--open-exported", doc=InputDocumentation(doc="automatically open the exported file")), ToolInput(tag="in_converter", input_type=String(optional=True), prefix="--converter", doc=InputDocumentation(doc="which program should be used to convert the output into PDF or PNG; choose from [webkitToPDF,\nlibrsvg, inkscape] (default: auto)")), ToolInput(tag="in_thicker_lines", input_type=Boolean(optional=True), prefix="--thicker-lines", doc=InputDocumentation(doc="Reads are shown with thicker lines, potentially overlapping one another, but increasing\ncontrast when zoomed out")), ToolInput(tag="in_context", input_type=Int(optional=True), prefix="--context", doc=InputDocumentation(doc="Number of additional nucleotides of genomic context to either side of the visualization\n(useful for showing nearby annotations)")), ToolInput(tag="in_flanks", input_type=Boolean(optional=True), prefix="--flanks", doc=InputDocumentation(doc="Show reads in regions flanking the structural variant; these reads do not\ncontribute to the ref or alt allele read counts (default: false)")), ToolInput(tag="in_skip_cigar", input_type=Boolean(optional=True), prefix="--skip-cigar", doc=InputDocumentation(doc="Don't color mismatches, insertions and deletions")), ToolInput(tag="in_dot_plots", input_type=Boolean(optional=True), prefix="--dotplots", doc=InputDocumentation(doc="generate dotplots to show sequence homology within the aligned region; requires some\nadditional optional python libraries (scipy and PIL) and may take several minutes for\nlonger variants")), ToolInput(tag="in_export_insert_sizes", input_type=Boolean(optional=True), prefix="--export-insert-sizes", doc=InputDocumentation(doc="plot the insert size distributions for each sample, for each event")), ToolInput(tag="in_summary", input_type=File(optional=True), prefix="--summary", doc=InputDocumentation(doc="save summary statistics to this (tab-delimited) file")), ToolInput(tag="in_lenient", input_type=Boolean(optional=True), prefix="--lenient", doc=InputDocumentation(doc="lowers the minimum alignment quality, showing reads even when breakpoints are only\napproximately correct, or reads of lower quality (eg PacBio); and requires a larger\ndifference in alignment scores in order to assign a read to an allele")), ToolInput(tag="in_ref", input_type=String(), position=0, doc=InputDocumentation(doc="reference fasta file (a .faidx index file will be created if it doesn't exist so you need \nwrite permissions for this directory)")), ToolInput(tag="in_breakpoints", input_type=String(), position=1, doc=InputDocumentation(doc="information about the breakpoint to be analyzed; see below for information"))], outputs=[ToolOutput(tag="out_save_reads", output_type=File(optional=True), selector=InputSelector(input_to_select="in_save_reads", type_hint=File()), doc=OutputDocumentation(doc="save relevant reads to this file (bam)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Svviz_V0_1_0().translate("wdl", allow_empty_container=True)

