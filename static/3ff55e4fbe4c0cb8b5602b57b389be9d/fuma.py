from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Array, File

Fuma_V0_1_0 = CommandToolBuilder(tool="fuma", base_command=["fuma"], inputs=[ToolInput(tag="in_formats", input_type=Boolean(optional=True), prefix="--formats", doc=InputDocumentation(doc="show accepted dataset formats")), ToolInput(tag="in_matching_method", input_type=String(optional=True), prefix="--matching-method", doc=InputDocumentation(doc="The used method to match two gene sets. Overlap\nmatches when two gene set have one or more genes\noverlapping. Subset matches when one gene set is a\nsubset of the other. EGM is exact gene matching; all\ngenes in both sets need to be identical to match.")), ToolInput(tag="in_strand_specific_matching", input_type=Boolean(optional=True), prefix="--strand-specific-matching", doc=InputDocumentation(doc="Consider fusion genes distinct when the breakpoints\nhave different strands: (A<-,B<-) != (->A,B<-);\ndefault")), ToolInput(tag="in_no_strand_specific_matching", input_type=Boolean(optional=True), prefix="--no-strand-specific-matching", doc=InputDocumentation(doc="Consider fusion genes identical when the breakpoints\nhave different strands: (A<-,B<-) == (->A,B<-)")), ToolInput(tag="in_accept_or_donor_order_specific_matching", input_type=Boolean(optional=True), prefix="--acceptor-donor-order-specific-matching", doc=InputDocumentation(doc="Consider fusion genes distinct when the donor and\nacceptor sites are swapped: (A,B) != (B,A)")), ToolInput(tag="in_no_accept_or_donor_order_specific_matching", input_type=Boolean(optional=True), prefix="--no-acceptor-donor-order-specific-matching", doc=InputDocumentation(doc="Consider fusion genes identical when the donor and\nacceptor sites are swapped: (A,B) == (B,A); default")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="increase output verbosity")), ToolInput(tag="in_annotationaliasfilename_file_bed", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ADD_GENE_ANNOTATION [ADD_GENE_ANNOTATION ...]], --add-gene-annotation [ADD_GENE_ANNOTATION [ADD_GENE_ANNOTATION ...]]\nannotation_alias:filename * file in BED format")), ToolInput(tag="in_add_sample", input_type=Array(t=String(), optional=True), prefix="--add-sample", doc=InputDocumentation(doc="sample_alias:format:filename (available formats: fuma\n--formats)")), ToolInput(tag="in_samplealiasannotationalias", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[LINK_SAMPLE_TO_ANNOTATION [LINK_SAMPLE_TO_ANNOTATION ...]], --link-sample-to-annotation [LINK_SAMPLE_TO_ANNOTATION [LINK_SAMPLE_TO_ANNOTATION ...]]\nsample_alias:annotation_alias")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="output filename; '-' for stdout")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="")), ToolInput(tag="in_output_format", input_type=String(), position=0, doc=InputDocumentation(doc="-g LONG_GENE_SIZE, --long-gene-size LONG_GENE_SIZE"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="output filename; '-' for stdout"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fuma_V0_1_0().translate("wdl", allow_empty_container=True)

