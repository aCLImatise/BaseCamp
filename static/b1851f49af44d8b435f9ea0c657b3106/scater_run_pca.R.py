from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Float

Scater_Run_Pca_R_V0_1_0 = CommandToolBuilder(tool="scater_run_pca.R", base_command=["scater-run-pca.R"], inputs=[ToolInput(tag="in_input_object_file", input_type=File(optional=True), prefix="--input-object-file", doc=InputDocumentation(doc="singleCellExperiment object containing expression values and experimental information. Must have been appropriately prepared.")), ToolInput(tag="in_n_components", input_type=Int(optional=True), prefix="--ncomponents", doc=InputDocumentation(doc="Numeric scalar indicating the number of principal components to obtain.")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="String specifying how the PCA should be performed. (default: prcomp)")), ToolInput(tag="in_ntop", input_type=Int(optional=True), prefix="--ntop", doc=InputDocumentation(doc="Numeric scalar specifying the number of most variable features to use for PCA.")), ToolInput(tag="in_exprs_values", input_type=Int(optional=True), prefix="--exprs-values", doc=InputDocumentation(doc="Integer scalar or string indicating which assay of object should be used to obtain the expression values for the calculations.")), ToolInput(tag="in_feature_set", input_type=File(optional=True), prefix="--feature-set", doc=InputDocumentation(doc="file (one cell per line) to be used to derive a character vector of row names indicating a set of features to use for PCA. This will override any ntop argument if specified.")), ToolInput(tag="in_scale_features", input_type=Float(optional=True), prefix="--scale-features", doc=InputDocumentation(doc="Logical scalar, should the expression values be standardised so that each feature has unit variance? This will also remove features with standard deviations below 1e-8.")), ToolInput(tag="in_use_cold_at_a", input_type=String(optional=True), prefix="--use-coldata", doc=InputDocumentation(doc="Logical scalar specifying whether the column data should be used instead of expression values to perform PCA.")), ToolInput(tag="in_selected_variables", input_type=String(optional=True), prefix="--selected-variables", doc=InputDocumentation(doc="Comma-separated list of strings indicating which variables in colData(object) to use for PCA when use_coldata=TRUE.")), ToolInput(tag="in_detect_outliers", input_type=String(optional=True), prefix="--detect-outliers", doc=InputDocumentation(doc="Logical scalar, should outliers be detected based on PCA coordinates generated from column-level metadata?")), ToolInput(tag="in_output_object_file", input_type=File(optional=True), prefix="--output-object-file", doc=InputDocumentation(doc="file name in which to store serialized R object of type 'SingleCellExperiment'."))], outputs=[ToolOutput(tag="out_output_object_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_object_file", type_hint=File()), doc=OutputDocumentation(doc="file name in which to store serialized R object of type 'SingleCellExperiment'."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Scater_Run_Pca_R_V0_1_0().translate("wdl", allow_empty_container=True)

