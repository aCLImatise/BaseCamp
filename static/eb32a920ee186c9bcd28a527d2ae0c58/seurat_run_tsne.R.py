from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Seurat_Run_Tsne_R_V0_1_0 = CommandToolBuilder(tool="seurat_run_tsne.R", base_command=["seurat-run-tsne.R"], inputs=[ToolInput(tag="in_input_object_file", input_type=File(optional=True), prefix="--input-object-file", doc=InputDocumentation(doc="File name in which a serialized R matrix object may be found.")), ToolInput(tag="in_input_format", input_type=String(optional=True), prefix="--input-format", doc=InputDocumentation(doc="Either loom, seurat, anndata or singlecellexperiment for the input format to read.")), ToolInput(tag="in_output_format", input_type=String(optional=True), prefix="--output-format", doc=InputDocumentation(doc="Either loom, seurat, anndata or singlecellexperiment for the output format.")), ToolInput(tag="in_reduction_use", input_type=String(optional=True), prefix="--reduction-use", doc=InputDocumentation(doc="Which dimensional reduction (e.g. PCA, ICA) to use for the tSNE. Default is PCA.")), ToolInput(tag="in_tsn_e_method", input_type=String(optional=True), prefix="--tsne-method", doc=InputDocumentation(doc="Select the method to use to compute the tSNE. Available methods are: Rtsne, Flt-SNE")), ToolInput(tag="in_perplexity", input_type=Int(optional=True), prefix="--perplexity", doc=InputDocumentation(doc="Perplexity value for tSNE, if none is set, the default from seurat, 30, is used.")), ToolInput(tag="in_cells_use", input_type=File(optional=True), prefix="--cells-use", doc=InputDocumentation(doc="File to be used to derive a vector of which cells to analyze (default, all cells).")), ToolInput(tag="in_dim_embed", input_type=Int(optional=True), prefix="--dim_embed", doc=InputDocumentation(doc="The dimensional space of the resulting tSNE embedding (default is 2). For example, set to 3 for a 3d tSNE")), ToolInput(tag="in_dims_use", input_type=String(optional=True), prefix="--dims-use", doc=InputDocumentation(doc="A comma-separated list of the which dimensions to use as input features.")), ToolInput(tag="in_genes_use", input_type=File(optional=True), prefix="--genes-use", doc=InputDocumentation(doc="File to be used to derive a vector of gene names. If set, run the tSNE on this subset of genes (instead of running on a set of reduced dimensions). Not set (NULL) by default.")), ToolInput(tag="in_output_object_file", input_type=File(optional=True), prefix="--output-object-file", doc=InputDocumentation(doc="File name in which to store serialized R object of type 'Seurat'.'")), ToolInput(tag="in_output_embeddings_file", input_type=File(optional=True), prefix="--output-embeddings-file", doc=InputDocumentation(doc="File name in which to store a csv-format embeddings table with PCs by cell.")), ToolInput(tag="in_random_seed", input_type=Int(optional=True), prefix="--random-seed", doc=InputDocumentation(doc="Seed of the random number generator")), ToolInput(tag="in_add_iter", input_type=Boolean(optional=True), prefix="--add-iter", doc=InputDocumentation(doc="If an existing tSNE has already been computed, uses the current tSNE to seed the algorithm and then adds additional iterations on top of this")), ToolInput(tag="in_reduction_key", input_type=Int(optional=True), prefix="--reduction-key", doc=InputDocumentation(doc="KEY\ndimensional reduction key, specifies the string before the number for the dimension names. tSNE_ by default")), ToolInput(tag="in_reduction_name", input_type=String(optional=True), prefix="--reduction-name", doc=InputDocumentation(doc="NAME\ndimensional reduction name, specifies the position in the object$dr list. tsne by default"))], outputs=[ToolOutput(tag="out_output_object_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_object_file", type_hint=File()), doc=OutputDocumentation(doc="File name in which to store serialized R object of type 'Seurat'.'")), ToolOutput(tag="out_output_embeddings_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_embeddings_file", type_hint=File()), doc=OutputDocumentation(doc="File name in which to store a csv-format embeddings table with PCs by cell."))], container="quay.io/biocontainers/seurat-scripts:0.0.9--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seurat_Run_Tsne_R_V0_1_0().translate("wdl")

