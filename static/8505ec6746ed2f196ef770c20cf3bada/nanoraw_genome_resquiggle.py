from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, Boolean, File, Int

Nanoraw_Genome_Resquiggle_V0_1_0 = CommandToolBuilder(tool="nanoraw_genome_resquiggle", base_command=["nanoraw", "genome_resquiggle"], inputs=[ToolInput(tag="in_base_call_subgroups", input_type=Array(t=String(), optional=True), prefix="--basecall-subgroups", doc=InputDocumentation(doc="FAST5 subgroup (under Analyses/[corrected-group])\nwhere individual template and/or complement reads are\nstored. Default: ['BaseCalled_template']")), ToolInput(tag="in_two_d", input_type=Boolean(optional=True), prefix="--2d", doc=InputDocumentation(doc="Input contains 2D reads. Equivalent to `--basecall-\nsubgroups BaseCalled_template BaseCalled_complement`")), ToolInput(tag="in_graph_map_executable", input_type=File(optional=True), prefix="--graphmap-executable", doc=InputDocumentation(doc="Relative or absolute path to built graphmap executable\nor command name if globally installed.")), ToolInput(tag="in_bwa_mem_executable", input_type=File(optional=True), prefix="--bwa-mem-executable", doc=InputDocumentation(doc="Relative or absolute path to built bwa-mem executable\nor command name if globally installed.")), ToolInput(tag="in_timeout", input_type=String(optional=True), prefix="--timeout", doc=InputDocumentation(doc="Timeout in seconds for the processing of a single\nread. Default: No timeout.")), ToolInput(tag="in_cpts_limit", input_type=Int(optional=True), prefix="--cpts-limit", doc=InputDocumentation(doc="Maximum number of changepoints to find within a single\nindel group. (Not setting this option can cause a\nprocess to stall and cannot be controlled by the\ntimeout option). Default: No limit.")), ToolInput(tag="in_normalization_type", input_type=String(optional=True), prefix="--normalization-type", doc=InputDocumentation(doc="Type of normalization to apply to raw signal when\ncalculating statistics based on new segmentation.\nShould be one of {'median', 'pA', 'pA_raw', 'none'}.\n'none' will provde the raw 16-bit DAQ values as the\nraw signal is stored. 'pA_raw' will calculate the pA\nestimates as in the ONT events (using offset, range\nand digitization parameters stored in the FAST5 file).\n'pA' will first apply the 'pA_raw' normalization\nfollowed by kmer-based correction for pA drift as\ndescribed in the nanopolish methylation manuscript\n(this option requires the [--pore-model-filename]\noption). 'median' will shift by the median of each\nreads' raw signal and scale by the MAD. Default:\nmedian")), ToolInput(tag="in_pore_model_filename", input_type=File(optional=True), prefix="--pore-model-filename", doc=InputDocumentation(doc="File containing kmer model parameters (level_mean and\nlevel_stdv) used in order to compute kmer-based\ncorrected pA values. E.g. https://github.com/jts/nanop\nolish/blob/master/etc/r9-models/template_median68pA.5m\ners.model")), ToolInput(tag="in_outlier_threshold", input_type=Int(optional=True), prefix="--outlier-threshold", doc=InputDocumentation(doc="Number of median absolute deviation (MAD) values at\nwhich to clip the raw signal. This can help avoid\nstrong re-segmentation artifacts from spikes in\nsignal. Set to negative value to disable outlier\nclipping. Default: 5")), ToolInput(tag="in_fast_five_pattern", input_type=Int(optional=True), prefix="--fast5-pattern", doc=InputDocumentation(doc="A pattern to search for a subset of files within\nfast5-basedir. Note that on the unix command line\npatterns may be expanded so it is best practice to\nquote patterns.")), ToolInput(tag="in_recursive", input_type=Boolean(optional=True), prefix="--recursive", doc=InputDocumentation(doc="Search for FAST5 files within immediate sub-\ndirectories.Note that this only searches a single\nlevel of subdirectories and only for files ending in\n.fast5. This is equivalent to specifying\n--fast5-pattern '*/*.fast5'.")), ToolInput(tag="in_overwrite", input_type=Boolean(optional=True), prefix="--overwrite", doc=InputDocumentation(doc="Overwrite previous corrected group in FAST5/HDF5 file.\n(Note this only effects the group defined by\n--corrected-group).")), ToolInput(tag="in_failed_reads_filename", input_type=File(optional=True), prefix="--failed-reads-filename", doc=InputDocumentation(doc="Output failed read filenames into a this file with\nassoicated error for each read. Default: Do not store\nfailed reads.")), ToolInput(tag="in_corrected_group", input_type=Int(optional=True), prefix="--corrected-group", doc=InputDocumentation(doc="FAST5 group to access/plot created by\ngenome_resquiggle script. Default:\nRawGenomeCorrected_000")), ToolInput(tag="in_base_call_group", input_type=Int(optional=True), prefix="--basecall-group", doc=InputDocumentation(doc="FAST5 group to use for obtaining original basecalls\n(under Analyses group). Default: Basecall_1D_000")), ToolInput(tag="in_processes", input_type=Int(optional=True), prefix="--processes", doc=InputDocumentation(doc="Number of processes. Default: 2")), ToolInput(tag="in_align_processes", input_type=Int(optional=True), prefix="--align-processes", doc=InputDocumentation(doc="Number of processes to use for aligning and parsing\noriginal basecalls. Each process will independently\nload the genome into memory, so use caution with\nlarger genomes (e.g. human). Default: 1")), ToolInput(tag="in_align_threads_per_process", input_type=Int(optional=True), prefix="--align-threads-per-process", doc=InputDocumentation(doc="Number of threads to use per alignment process. This\nvalue is passed to the underlying mapper system calls.\nDefault: [--processes] / (2 * [--align-processes)]")), ToolInput(tag="in_re_squiggle_processes", input_type=Int(optional=True), prefix="--resquiggle-processes", doc=InputDocumentation(doc="Number of processes to use for re-squiggling raw data.\nDefault: [--processes] / 2")), ToolInput(tag="in_alignment_batch_size", input_type=Int(optional=True), prefix="--alignment-batch-size", doc=InputDocumentation(doc="Batch size (number of reads) for each alignment call.\nNote that a new system call to the mapper is made for\neach batch (including loading of the genome), so it is\nadvised to use larger values for larger genomes.\nDefault: 500")), ToolInput(tag="in_skip_event_stdev", input_type=Boolean(optional=True), prefix="--skip-event-stdev", doc=InputDocumentation(doc="Skip computation of corrected event standard\ndeviations to save (potentially significant) time on\ncomputations.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Don't print status information.")), ToolInput(tag="in_fast_five_basedir", input_type=Int(), position=0, doc=InputDocumentation(doc="Directory containing fast5 files.")), ToolInput(tag="in_genome_fast_a", input_type=String(), position=1, doc=InputDocumentation(doc="Path to fasta file for mapping."))], outputs=[ToolOutput(tag="out_failed_reads_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_failed_reads_filename", type_hint=File()), doc=OutputDocumentation(doc="Output failed read filenames into a this file with\nassoicated error for each read. Default: Do not store\nfailed reads."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nanoraw_Genome_Resquiggle_V0_1_0().translate("wdl", allow_empty_container=True)

