from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Directory, Int, Boolean

Haphpipe_Model_Test_V0_1_0 = CommandToolBuilder(tool="haphpipe_model_test", base_command=["haphpipe", "model_test"], inputs=[ToolInput(tag="in_seqs", input_type=String(optional=True), prefix="--seqs", doc=InputDocumentation(doc="Alignment in FASTA or PHYLIP format")), ToolInput(tag="in_run_id", input_type=String(optional=True), prefix="--run_id", doc=InputDocumentation(doc="Prefix for output files")), ToolInput(tag="in_out_name", input_type=File(optional=True), prefix="--outname", doc=InputDocumentation(doc="Name for output file (Default: modeltest_results)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory (Default: .)")), ToolInput(tag="in_data_type", input_type=String(optional=True), prefix="--data_type", doc=InputDocumentation(doc="Data type: nt or aa")), ToolInput(tag="in_partitions", input_type=File(optional=True), prefix="--partitions", doc=InputDocumentation(doc="Partitions file")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Seed for random number generator")), ToolInput(tag="in_topology", input_type=String(optional=True), prefix="--topology", doc=InputDocumentation(doc="Starting topology: ml, mp, fixed-ml-jc, fixed-ml-gtr,\nfixed-mp, random, or user")), ToolInput(tag="in_utree", input_type=String(optional=True), prefix="--utree", doc=InputDocumentation(doc="User-defined starting tree")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="force output overriding (default: False)")), ToolInput(tag="in_asc_bias", input_type=String(optional=True), prefix="--asc_bias", doc=InputDocumentation(doc="Ascertainment bias correction: lewis, felsenstein, or")), ToolInput(tag="in_het", input_type=String(optional=True), prefix="--het", doc=InputDocumentation(doc="Set rate heterogeneity: u (uniform), i (invariant\nsites +I), g (gamma +G), or f (both invariant sites\nand gamma +I+G)")), ToolInput(tag="in_models", input_type=File(optional=True), prefix="--models", doc=InputDocumentation(doc="Text file with candidate models, one per line")), ToolInput(tag="in_schemes", input_type=Int(optional=True), prefix="--schemes", doc=InputDocumentation(doc="Number of predefined DNA substitution schemes\nevaluated: 3, 5, 7, 11, or 203")), ToolInput(tag="in_template", input_type=String(optional=True), prefix="--template", doc=InputDocumentation(doc="Set candidate models according to a specified tool:\nraxml, phyml, mrbayes, or paup")), ToolInput(tag="in_n_cpu", input_type=Int(optional=True), prefix="--ncpu", doc=InputDocumentation(doc="Number of CPU to use (default: 1)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Do not write output to console (silence stdout and\nstderr) (default: False)")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logfile", doc=InputDocumentation(doc="Name for log file (output)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Print commands but do not run (default: False)")), ToolInput(tag="in_keep_tmp", input_type=Boolean(optional=True), prefix="--keep_tmp", doc=InputDocumentation(doc="Keep temporary directory (default: False)")), ToolInput(tag="in_stam_a_takis", input_type=String(), position=0, doc=InputDocumentation(doc="--frequencies FREQUENCIES"))], outputs=[ToolOutput(tag="out_out_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_name", type_hint=File()), doc=OutputDocumentation(doc="Name for output file (Default: modeltest_results)")), ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory (Default: .)")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Name for log file (output)"))], container="quay.io/biocontainers/haphpipe:1.0.3--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Haphpipe_Model_Test_V0_1_0().translate("wdl")

