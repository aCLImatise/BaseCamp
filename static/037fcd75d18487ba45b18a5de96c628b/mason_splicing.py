from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File

Mason_Splicing_V0_1_0 = CommandToolBuilder(tool="mason_splicing", base_command=["mason_splicing"], inputs=[ToolInput(tag="in_version_check", input_type=Boolean(optional=True), prefix="--version-check", doc=InputDocumentation(doc="Turn this option off to disable version update notifications of the\napplication. One of 1, ON, TRUE, T, YES, 0, OFF, FALSE, F, and NO.\nDefault: 1.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Low verbosity.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Higher verbosity.")), ToolInput(tag="in_very_verbose", input_type=Boolean(optional=True), prefix="--very-verbose", doc=InputDocumentation(doc="Highest verbosity.")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Seed for random number generation. Default: 0.")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Output of materialized contigs. Valid filetypes are: .sam[.*],\n.raw[.*], .frn[.*], .fq[.*], .fna[.*], .ffn[.*], .fastq[.*],\n.fasta[.*], .faa[.*], .fa[.*], and .bam, where * is any of the\nfollowing extensions: gz and bgzf for transparent (de)compression.")), ToolInput(tag="in_haplotype_name_sep", input_type=Int(optional=True), prefix="--haplotype-name-sep", doc=InputDocumentation(doc="String separating contig name from haplotype number. Default: /.")), ToolInput(tag="in_in_gff", input_type=File(optional=True), prefix="--in-gff", doc=InputDocumentation(doc="Path to input GFF or GTF file, must be sorted by reference name.\nValid filetypes are: .gtf[.*], .gff[.*], .gff3[.*], and .gff, where\n* is any of the following extensions: gz and bgzf for transparent\n(de)compression.")), ToolInput(tag="in_gff_type", input_type=File(optional=True), prefix="--gff-type", doc=InputDocumentation(doc="Splicing will filter to the records that have this type. Default:\nexon.")), ToolInput(tag="in_gff_group_by", input_type=File(optional=True), prefix="--gff-group-by", doc=InputDocumentation(doc="Assign features to their parent using the tag with this name.\nDefault: Parent.")), ToolInput(tag="in_input_reference", input_type=File(optional=True), prefix="--input-reference", doc=InputDocumentation(doc="Path to FASTA file to read the reference from. Valid filetypes are:\n.sam[.*], .raw[.*], .gbk[.*], .frn[.*], .fq[.*], .fna[.*], .ffn[.*],\n.fastq[.*], .fasta[.*], .faa[.*], .fa[.*], .embl[.*], and .bam,\nwhere * is any of the following extensions: gz and bgzf for\ntransparent (de)compression.")), ToolInput(tag="in_input_vcf", input_type=File(optional=True), prefix="--input-vcf", doc=InputDocumentation(doc="Path to the VCF file with variants to apply. Valid filetype is:\n.vcf[.*], where * is any of the following extensions: gz and bgzf\nfor transparent (de)compression."))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output of materialized contigs. Valid filetypes are: .sam[.*],\n.raw[.*], .frn[.*], .fq[.*], .fna[.*], .ffn[.*], .fastq[.*],\n.fasta[.*], .faa[.*], .fa[.*], and .bam, where * is any of the\nfollowing extensions: gz and bgzf for transparent (de)compression."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mason_Splicing_V0_1_0().translate("wdl", allow_empty_container=True)

