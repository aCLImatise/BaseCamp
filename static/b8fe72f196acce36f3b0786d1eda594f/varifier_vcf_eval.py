from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Varifier_Vcf_Eval_V0_1_0 = CommandToolBuilder(tool="varifier_vcf_eval", base_command=["varifier", "vcf_eval"], inputs=[ToolInput(tag="in_flank_length", input_type=Int(optional=True), prefix="--flank_length", doc=InputDocumentation(doc="Length of sequence to add either side of variant when\nmaking probe sequences [100]")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Replace outdir if it already exists")), ToolInput(tag="in_filter_pass", input_type=Int(optional=True), prefix="--filter_pass", doc=InputDocumentation(doc="[,FILTER2[,...]]\nDefines how to handle FILTER column of input VCF file.\nComma-separated list of filter names. A VCF line is\nkept if any of its FILTER entries are in the provided\nlist. Put '.' in the list to keep records where the\nfilter column is '.'. Default behaviour is to ignore\nthe filter column and use all records")), ToolInput(tag="in_ref_mask", input_type=File(optional=True), prefix="--ref_mask", doc=InputDocumentation(doc="BED file of ref regions to mask. Any variants in the\nVCF overlapping the mask are removed at the start of\nthe pipeline")), ToolInput(tag="in_truth_mask", input_type=File(optional=True), prefix="--truth_mask", doc=InputDocumentation(doc="BED file of truth genome regions to mask. Any variants\nin the VCF matching to the mask are flagged and do not\ncount towards precision or recall")), ToolInput(tag="in_truth_vcf", input_type=File(optional=True), prefix="--truth_vcf", doc=InputDocumentation(doc="VCF file of variant calls between vcf_fasta and\ntruth_fasta, where reference of this VCF file is\ntruth_fasta. If provided, used to calculate recall")), ToolInput(tag="in_max_recall_ref_len", input_type=Int(optional=True), prefix="--max_recall_ref_len", doc=InputDocumentation(doc="For recall, do not look for expected variants where\nREF length is more than this number. Default is no\nlimit. This option will not work if you use\n--truth_vcf")), ToolInput(tag="in_use_ref_calls", input_type=Boolean(optional=True), prefix="--use_ref_calls", doc=InputDocumentation(doc="Include 0/0 genotype calls when calculating TPs and\nprecision. By default they are ignored")), ToolInput(tag="in_split_ref", input_type=Boolean(optional=True), prefix="--split_ref", doc=InputDocumentation(doc="When using MUMmer to get expected calls for recall,\nsplit the ref genome into one file per sequence, and\nrun MUMmer on each split. Experimental - should\nimprove run time for big genomes")), ToolInput(tag="in_no_max_match", input_type=Boolean(optional=True), prefix="--no_maxmatch", doc=InputDocumentation(doc="When using nucmer to get expected calls for recall, do\nnot use the --maxmatch option. May reduce sensitivity\nto finding all variants")), ToolInput(tag="in_cpus", input_type=Int(optional=True), prefix="--cpus", doc=InputDocumentation(doc="Number of CPUs to use when running nucmer and minimap2\nto get recall, eveything else is single-core/thread.\nIf you have a big genome, more efficient to run\nmake_truth_vcf with >1 CPU, then use its output with\n--truth_vcf when running vcf_eval. [1]\n")), ToolInput(tag="in_truth_fast_a", input_type=String(), position=0, doc=InputDocumentation(doc="FASTA file of truth genome")), ToolInput(tag="in_vcf_fast_a", input_type=String(), position=1, doc=InputDocumentation(doc="FASTA file corresponding to vcf_file")), ToolInput(tag="in_vcf_in", input_type=String(), position=2, doc=InputDocumentation(doc="VCF file to evaluate")), ToolInput(tag="in_outdir", input_type=String(), position=3, doc=InputDocumentation(doc="Name of output directory"))], outputs=[], container="quay.io/biocontainers/varifier:0.3.1--pyhdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Varifier_Vcf_Eval_V0_1_0().translate("wdl")

