from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Directory, Int, Boolean, File

Chisel_Prep_V0_1_0 = CommandToolBuilder(tool="chisel_prep", base_command=["chisel_prep"], inputs=[ToolInput(tag="in_reference", input_type=String(optional=True), prefix="--reference", doc=InputDocumentation(doc="Reference genome, which is mandatory in FASTQ mode\n(default: None)")), ToolInput(tag="in_run_dir", input_type=Directory(optional=True), prefix="--rundir", doc=InputDocumentation(doc="Running directory (default: current directory)")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output name in running directory (default:\nbarcodedcells.bam)")), ToolInput(tag="in_re_xp_name", input_type=Int(optional=True), prefix="--rexpname", doc=InputDocumentation(doc="Regulare expression to extract cell name from input\nFASTQ filenames (default:\n`(.*)_S.*_L.*_R[1|2]_001.fastq.*`)")), ToolInput(tag="in_re_xp_read", input_type=Int(optional=True), prefix="--rexpread", doc=InputDocumentation(doc="Regulare expression to extract cell name from input\nFASTQ filenames (default:\n`.*_S.*_L.*_(R[1|2])_001.fastq.*`)")), ToolInput(tag="in_no_duplicates", input_type=Boolean(optional=True), prefix="--noduplicates", doc=InputDocumentation(doc="Do not perform marking duplicates and recalibration\nwith Picard tools (default: False)")), ToolInput(tag="in_keep_tmpdir", input_type=Boolean(optional=True), prefix="--keeptmpdir", doc=InputDocumentation(doc="Do not erase temporary directory (default: False)")), ToolInput(tag="in_barcode_length", input_type=Int(optional=True), prefix="--barcodelength", doc=InputDocumentation(doc="Length of barcodes (default: 12)")), ToolInput(tag="in_bcf_tools", input_type=File(optional=True), prefix="--bcftools", doc=InputDocumentation(doc="Path to the directory to 'bcftools' executable\n(default: in $PATH)")), ToolInput(tag="in_sam_tools", input_type=File(optional=True), prefix="--samtools", doc=InputDocumentation(doc="Path to the directory to 'samtools' executable\n(default: in $PATH)")), ToolInput(tag="in_bwa", input_type=File(optional=True), prefix="--bwa", doc=InputDocumentation(doc="Path to the directory to 'bwa' executable (default: in\n$PATH)")), ToolInput(tag="in_jobs", input_type=Int(optional=True), prefix="--jobs", doc=InputDocumentation(doc="Number of parallele jobs to use (default: equal to\nnumber of available processors)")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="Random seed for replication (default: None)")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc="Input FASTQs, BAMs, or TSV file with different\nbehaviors: .........................................\n(1) FASTQs -- specified in a directory DIR as\n`DIR/*.fastq` or `DIR/*.fastq.gz` -- will be barcoded\nand aligned with (optionally) marked duplicates into a\nbarcoded BAM file; .................................\n(2) BAMs -- specified in a directory DIR as\n`DIR/*.bam` -- will be barcoded and aligned with\n(optionally) marked duplicates into a barcoded BAM\nfile; ..............................................\n(3) a single BAM file with unique cells names in the\nfield `RG:Z:` will be converted into a barcoded BAM\nfile with the additional `CB:Z:` tag; ..............\n(4) a tab-separated table of inputs (TSV with optional\nheader starting with `#`) with two columns: the first\ncolumn is an input file (FASTQ or BAM) and the second\ncolumn is the corresponding cell name. When FASTQs are\nprovided, a third column can be optionally specified\nto indicate the read name in paired-end sequencing,\ne.g., indicating either R1 or R2 for the first or\nsecond mate of paired-end reads, respectively. If a\nthird column is not present, FASTQs are assumed to be\nfrom single-end sequencing."))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output name in running directory (default:\nbarcodedcells.bam)"))], container="quay.io/biocontainers/chisel:0.0.5--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Chisel_Prep_V0_1_0().translate("wdl")

