!Command
command:
- simsearch
positional: []
named:
- !Flag
  description: "select the k nearest neighbors (use 'all' for all\nneighbors)"
  synonyms:
  - -k
  - --k-nearest
  args: !SimpleFlagArg
    name: INT
  optional: true
- !Flag
  description: minimum similarity score threshold
  synonyms:
  - -t
  - --threshold
  args: !SimpleFlagArg
    name: FLOAT
  optional: true
- !Flag
  description: filename containing the query fingerprints
  synonyms:
  - --queries
  - -q
  args: !SimpleFlagArg
    name: FILENAME
  optional: true
- !Flag
  description: "use the targets as the queries, and exclude the self-\nsimilarity\
    \ term"
  synonyms:
  - --NxN
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "query as a structure record (default format: 'smi')"
  synonyms:
  - --query
  args: !SimpleFlagArg
    name: STRING
  optional: true
- !Flag
  description: query in hex
  synonyms:
  - --hex-query
  args: !SimpleFlagArg
    name: HEX
  optional: true
- !Flag
  description: "id for the query or hex-query (default: 'Query1'"
  synonyms:
  - --query-id
  args: !SimpleFlagArg
    name: ID
  optional: true
- !Flag
  description: read strutures
  synonyms:
  - --query-structures
  - -S
  args: !SimpleFlagArg
    name: FILENAME
  optional: true
- !Flag
  description: "input query format (default uses the file extension,\nelse 'fps' for\
    \ --queries and 'smi' for query\nstructures)"
  synonyms:
  - --query-format
  - --in
  args: !SimpleFlagArg
    name: FORMAT
  optional: true
- !Flag
  description: "input target format (default uses the file extension,\nelse 'fps')"
  synonyms:
  - --target-format
  args: !SimpleFlagArg
    name: FORMAT
  optional: true
- !Flag
  description: "tag containing the record id if --query-structures is\nan SD file)"
  synonyms:
  - --id-tag
  args: !SimpleFlagArg
    name: NAME
  optional: true
- !Flag
  description: "how should structure parse errors be handled?\n(default=ignore)"
  synonyms:
  - --errors
  args: !ChoiceFlagArg
    choices: !!set
      ? ignore
      ? report
      ? strict
  optional: true
- !Flag
  description: output filename (default is stdout)
  synonyms:
  - -o
  - --output
  args: !SimpleFlagArg
    name: FILENAME
  optional: true
- !Flag
  description: report counts
  synonyms:
  - -c
  - --count
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: batch size
  synonyms:
  - -b
  - --batch-size
  args: !SimpleFlagArg
    name: INT
  optional: true
- !Flag
  description: scan the file to find matches (low memory overhead)
  synonyms:
  - --scan
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "build and search an in-memory data structure (faster\nfor multiple\
    \ queries)"
  synonyms:
  - --memory
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: report load and execution times to stderr
  synonyms:
  - --times
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: show program's version number and exit
  synonyms:
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "usage: simsearch [-h] [-k INT] [-t FLOAT] [--queries FILENAME] [--NxN]\n\
  \                 [--query STRING] [--hex-query HEX] [--query-id ID]\n         \
  \        [--query-structures FILENAME] [--query-format FORMAT]\n               \
  \  [--target-format FORMAT] [--id-tag NAME]\n                 [--errors {strict,report,ignore}]\
  \ [-o FILENAME] [-c] [-b INT]\n                 [--scan] [--memory] [--times] [--version]\n\
  \                 target_filename\n\nSearch an FPS or FPB file for similar fingerprints\n\
  \npositional arguments:\n  target_filename       target filename\n\noptional arguments:\n\
  \  -h, --help            show this help message and exit\n  -k INT, --k-nearest\
  \ INT\n                        select the k nearest neighbors (use 'all' for all\n\
  \                        neighbors)\n  -t FLOAT, --threshold FLOAT\n           \
  \             minimum similarity score threshold\n  --queries FILENAME, -q FILENAME\n\
  \                        filename containing the query fingerprints\n  --NxN   \
  \              use the targets as the queries, and exclude the self-\n         \
  \               similarity term\n  --query STRING        query as a structure record\
  \ (default format: 'smi')\n  --hex-query HEX       query in hex\n  --query-id ID\
  \         id for the query or hex-query (default: 'Query1'\n  --query-structures\
  \ FILENAME, -S FILENAME\n                        read strutures\n  --query-format\
  \ FORMAT, --in FORMAT\n                        input query format (default uses\
  \ the file extension,\n                        else 'fps' for --queries and 'smi'\
  \ for query\n                        structures)\n  --target-format FORMAT\n   \
  \                     input target format (default uses the file extension,\n  \
  \                      else 'fps')\n  --id-tag NAME         tag containing the record\
  \ id if --query-structures is\n                        an SD file)\n  --errors {strict,report,ignore}\n\
  \                        how should structure parse errors be handled?\n       \
  \                 (default=ignore)\n  -o FILENAME, --output FILENAME\n         \
  \               output filename (default is stdout)\n  -c, --count           report\
  \ counts\n  -b INT, --batch-size INT\n                        batch size\n  --scan\
  \                scan the file to find matches (low memory overhead)\n  --memory\
  \              build and search an in-memory data structure (faster\n          \
  \              for multiple queries)\n  --times               report load and execution\
  \ times to stderr\n  --version             show program's version number and exit\n"
generated_using:
- --help
