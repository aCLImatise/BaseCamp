from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Pancake_Seqfetch_V0_1_0 = CommandToolBuilder(tool="pancake_seqfetch", base_command=["pancake", "seqfetch"], inputs=[ToolInput(tag="in_out_fmt", input_type=Boolean(optional=True), prefix="--out-fmt", doc=InputDocumentation(doc="STR   Output format. If an input file is FASTA and out format is FASTQ, dummy QVs\nwill be added. Valid choices: (fasta, fastq). [fasta]")), ToolInput(tag="in_dummy_qv", input_type=Boolean(optional=True), prefix="--dummy-qv", doc=InputDocumentation(doc="STR   Dummy QV to be added to sequences when input format is FASTA and output\nFASTQ. [!]")), ToolInput(tag="in_alias", input_type=Boolean(optional=True), prefix="--alias", doc=InputDocumentation(doc="STR   SeqDB file path. If provided, the SeqDB will be used to look-up the\nprovided sequences by their IDs.")), ToolInput(tag="in_fail", input_type=Boolean(optional=True), prefix="--fail", doc=InputDocumentation(doc="Exit non-zero if not all seqs are found.")), ToolInput(tag="in_write_ids", input_type=Boolean(optional=True), prefix="--write-ids", doc=InputDocumentation(doc="The output sequence names will be replaced by their IDs in the SeqDB, if\nthe SeqDB was provided as input.")), ToolInput(tag="in_use_hpc", input_type=Boolean(optional=True), prefix="--use-hpc", doc=InputDocumentation(doc="Fetch homopolymer compressed sequences.")), ToolInput(tag="in_use_rle", input_type=Boolean(optional=True), prefix="--use-rle", doc=InputDocumentation(doc="Write a run-length-encoded file alongside to the output file. The RLE file\ncontains conversion coordinates from the HPC space to the original space\ninstead of the run-length-encoding. This option does not write the HPC\nsequence, for that please specify '--user-hpc'.")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="STR   Set log level. Valid choices: (TRACE, DEBUG, INFO, WARN, FATAL). [WARN]")), ToolInput(tag="in_log_file", input_type=Boolean(optional=True), prefix="--log-file", doc=InputDocumentation(doc="FILE  Log to a file, instead of stderr.")), ToolInput(tag="in_out_fn", input_type=String(), position=0, doc=InputDocumentation(doc="STR   Output file for the fetched sequences.")), ToolInput(tag="in_fetch_list", input_type=String(), position=1, doc=InputDocumentation(doc="STR   List of sequences to fetch, one per line.")), ToolInput(tag="in_formats_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Algorithm Options:"))], outputs=[], container="quay.io/biocontainers/pbipa:1.3.2--hee625c5_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pancake_Seqfetch_V0_1_0().translate("wdl")

