from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, File, Boolean, Directory

Mulled_Build_Channel_V0_1_0 = CommandToolBuilder(tool="mulled_build_channel", base_command=["mulled-build-channel"], inputs=[ToolInput(tag="in_repo_data", input_type=String(optional=True), prefix="--repo-data", doc=InputDocumentation(doc="Published repository data. If you want to build all containers for bioconda, this parameter needs to be set to 'bioconda'")), ToolInput(tag="in_diff_hours", input_type=Int(optional=True), prefix="--diff-hours", doc=InputDocumentation(doc="If finding all recently changed recipes, use this number of hours.")), ToolInput(tag="in_force_rebuild", input_type=String(optional=True), prefix="--force-rebuild", doc=InputDocumentation(doc="Rebuild package even if already published.")), ToolInput(tag="in_invo_lucro_path", input_type=File(optional=True), prefix="--involucro-path", doc=InputDocumentation(doc="Path to involucro (if not set will look in working directory and on PATH).")), ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry-run", doc=InputDocumentation(doc="Just print commands instead of executing them.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Cause process to be verbose.")), ToolInput(tag="in_singularity", input_type=Boolean(optional=True), prefix="--singularity", doc=InputDocumentation(doc="Additionally build a singularity image.")), ToolInput(tag="in_singularity_image_dir", input_type=Directory(optional=True), prefix="--singularity-image-dir", doc=InputDocumentation(doc="Directory to write singularity images too.")), ToolInput(tag="in_namespace", input_type=String(optional=True), prefix="--namespace", doc=InputDocumentation(doc="quay.io namespace.")), ToolInput(tag="in_repository_template", input_type=String(optional=True), prefix="--repository_template", doc=InputDocumentation(doc="Docker repository target for publication (only quay.io or compat. API is currently supported).")), ToolInput(tag="in_channels", input_type=String(optional=True), prefix="--channels", doc=InputDocumentation(doc="Comma separated list of target conda channels.")), ToolInput(tag="in_cond_a_version", input_type=String(optional=True), prefix="--conda-version", doc=InputDocumentation(doc="Change to specified version of Conda before installing packages.")), ToolInput(tag="in_o_auth_token", input_type=String(optional=True), prefix="--oauth-token", doc=InputDocumentation(doc="If set, use this token when communicating with quay.io API.")), ToolInput(tag="in_check_published", input_type=String(optional=True), prefix="--check-published", doc=InputDocumentation(doc="Build a single container with specific package(s).")), ToolInput(tag="in_repository_name", input_type=String(optional=True), prefix="--repository-name", doc=InputDocumentation(doc="Name of a single container (leave blank to auto-generate based on packages)."))], outputs=[], container="quay.io/biocontainers/galaxy-tool-util:21.1.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mulled_Build_Channel_V0_1_0().translate("wdl")

