from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Vtools_Export_V0_1_0 = CommandToolBuilder(tool="vtools_export", base_command=["vtools", "export"], inputs=[ToolInput(tag="in_name_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[OUTPUT], --output [OUTPUT]\nName of output file. Output will be written to the\nstandard output if this parameter is left unspecified.")), ToolInput(tag="in_samples_exported_specified", input_type=File(optional=True), prefix="-s", doc=InputDocumentation(doc="[COND [COND ...]], --samples [COND [COND ...]]\nSamples that will be exported, specified by conditions\nsuch as 'aff=1' and 'filename like 'MG%''. Multiple\nsamples could be exported to a file if the output\nformat allows. No sample will be outputted if this\nparameter is ignored.")), ToolInput(tag="in_format", input_type=File(optional=True), prefix="--format", doc=InputDocumentation(doc="Format of the exported file. It can be one of the\nvariant tools supported file types such as VCF (cf.\n'vtools show formats') or a local format specification\nfile (with extension .fmt). Some formats accept\nadditional parameters (cf. 'vtools show format FMT')\nand allows you to export additional or alternative\nfields.")), ToolInput(tag="in_build", input_type=Int(optional=True), prefix="--build", doc=InputDocumentation(doc="Build version of the reference genome (e.g. hg18) of\nthe exported data. It can only be one of the primary\n(default) of alternative (if exists) reference genome\nof the project.")), ToolInput(tag="in_header", input_type=Boolean(optional=True), prefix="--header", doc=InputDocumentation(doc="[HEADER [HEADER ...]]\nA complete header or a list of names that will be\njoined by a delimiter specified by the file format to\nform a header. If a special name - is specified, the\nheader will be read from the standard input, which is\nthe preferred way to specify large multi-line headers\n(e.g. cat myheader | vtools export --header -).\nStrings in the form of %(VAR)s will be interpolated to\nvalues of variable VAR, which can be 'sample_names'\nfor list of sample names, 'datetime' for current date\nand time, and 'command' for the command used to create\noutput.")), ToolInput(tag="in_jobs", input_type=Int(optional=True), prefix="--jobs", doc=InputDocumentation(doc="Number of processes to export data. Multiple threads\nwill be automatically used if there are a large number\nof samples.")), ToolInput(tag="in_verbosity", input_type=String(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Output error and warning (0), info (1), debug (2) and\ntrace (3) information to standard output (default to\n1).\n")), ToolInput(tag="in_output", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_cond", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_name_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_name_output_file", type_hint=File()), doc=OutputDocumentation(doc="[OUTPUT], --output [OUTPUT]\nName of output file. Output will be written to the\nstandard output if this parameter is left unspecified.")), ToolOutput(tag="out_samples_exported_specified", output_type=File(optional=True), selector=InputSelector(input_to_select="in_samples_exported_specified", type_hint=File()), doc=OutputDocumentation(doc="[COND [COND ...]], --samples [COND [COND ...]]\nSamples that will be exported, specified by conditions\nsuch as 'aff=1' and 'filename like 'MG%''. Multiple\nsamples could be exported to a file if the output\nformat allows. No sample will be outputted if this\nparameter is ignored."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Vtools_Export_V0_1_0().translate("wdl", allow_empty_container=True)

