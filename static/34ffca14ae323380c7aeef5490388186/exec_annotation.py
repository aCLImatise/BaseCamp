from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Directory, String, Boolean

Exec_Annotation_V0_1_0 = CommandToolBuilder(tool="exec_annotation", base_command=["exec_annotation"], inputs=[ToolInput(tag="in_file_output_result", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="File to output the result  [stdout]")), ToolInput(tag="in_profile", input_type=File(optional=True), prefix="--profile", doc=InputDocumentation(doc="Profile HMM database")), ToolInput(tag="in_ko_list", input_type=File(optional=True), prefix="--ko-list", doc=InputDocumentation(doc="KO information file")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Number of CPU to use  [1]")), ToolInput(tag="in_config", input_type=File(optional=True), prefix="--config", doc=InputDocumentation(doc="Config file")), ToolInput(tag="in_tmp_dir", input_type=Directory(optional=True), prefix="--tmp-dir", doc=InputDocumentation(doc="Temporary directory  [./tmp]")), ToolInput(tag="in_e_value", input_type=String(optional=True), prefix="--e-value", doc=InputDocumentation(doc="Largest E-value required of the hits")), ToolInput(tag="in_threshold_scale", input_type=String(optional=True), prefix="--threshold-scale", doc=InputDocumentation(doc="The score thresholds will be multiplied by this value")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="Format of the output [detail]\ndetail:          Detail for each hits (including hits below threshold)\ndetail-tsv:      Tab separeted values for detail format\nmapper:          KEGG Mapper compatible format\nmapper-one-line: Similar to mapper, but all hit KOs are listed in one line")), ToolInput(tag="in_create_alignment", input_type=Boolean(optional=True), prefix="--create-alignment", doc=InputDocumentation(doc="Create domain annotation files for each sequence\nThey will be located in the tmp directory\nIncompatible with -r")), ToolInput(tag="in_re_annotate", input_type=Boolean(optional=True), prefix="--reannotate", doc=InputDocumentation(doc="Skip hmmsearch\nIncompatible with --create-alignment")), ToolInput(tag="in_keep_tabular", input_type=Boolean(optional=True), prefix="--keep-tabular", doc=InputDocumentation(doc="Neither create tabular.txt nor delete K number files\nBy default, all K number files will be combined into\na tabular.txt and delete them")), ToolInput(tag="in_keep_output", input_type=Boolean(optional=True), prefix="--keep-output", doc=InputDocumentation(doc="Neither create output.txt nor delete K number files\nBy default, all K number files will be combined into\na output.txt and delete them\nMust be with --create-alignment")), ToolInput(tag="in_query", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_file_output_result", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_output_result", type_hint=File()), doc=OutputDocumentation(doc="File to output the result  [stdout]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Exec_Annotation_V0_1_0().translate("wdl", allow_empty_container=True)

