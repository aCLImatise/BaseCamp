!Command
command:
- np-likeness
positional:
- !Positional
  optional: false
  position: 0
  name: below.
  description: "-generateSignatures           Given input sdf/smi file use this function\n\
    to generate atomSignatures for training molecules."
- !Positional
  optional: false
  position: 1
  name: generateSignatures
  description: -inSignaturesFile <arg>       To specify atomSignatures .txt file
named:
- !Flag
  optional: true
  synonyms:
  - -in
  description: Input structure file to score or to
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -intype
  description: 'Input file type: Enter sdf/smi'
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -npTrainer
  description: "Serialized NP atomSignatures file generated\nby this program"
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -out
  description: Output structure from scoring
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -outFragments
  description: "Output .txt file for reconstructed\nfragments. Specify this option\
    \ only if 'reconstructFragments' is true.\nAlternatively, this option can also\
    \ be specified along with\n'generateSignatures' as a output file"
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -outtype
  description: 'Output file type: Enter sdf/smi'
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -reconstructFragments
  description: "Optional boolean argument {true/false} to\nreconstruct fragments.\
    \ If true individual fragments with scores are\nwritten out in SMILES format"
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -serializeSignatures
  description: "Use this function to serialize .txt\nsignatures file generated by\
    \ this program using 'generateSignatures'\noption.The input for this function\
    \ is taken via option 'inSignaturesFile'.\nAlternatively, this function can be\
    \ used alongside 'generateSignatures'\nfunction to directly serialize and store\
    \ the generated signatures."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -signatureHeight
  description: "Signature height to be generated; Use this\nalong 'generateSignatures';\
    \ Default size: 2"
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -smTrainer
  description: "Serialized SM atomSignatures file generated\nby this program"
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -v
  description: "Application info\nFor input and output file please specify the type\
    \ using -intype and -outtype repectively.\nCurrently the types can be either sdf/smi.\n\
    If my mistake you input a sdf file but give it a different format type,\nthe program\
    \ will not complain but will finish without any output. If output file options\
    \ (out/outFragments) are unspecified,\nauto generated output files (based on Input\
    \ format) will be written to the directory of the input file.\n"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -inSignaturesFile
  description: ''
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -generateSignatures
  description: ''
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -help
  description: Usage information
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "[--help]\nusage:\n                Natural Product-likeness calculator\
  \ v-2.1 calculates natural\n                product-likeness of small molecules\
  \ based on open-data of natural\n                products. Input [Options] [Targets]\
  \ for the application are specified\n                below.\n -generateSignatures\
  \           Given input sdf/smi file use this function\n                       \
  \        to generate atomSignatures for training molecules.\n -help            \
  \             Usage information\n -in <arg>                     Input structure\
  \ file to score or to\n                               generateSignatures\n -inSignaturesFile\
  \ <arg>       To specify atomSignatures .txt file\n                            \
  \   generated by this program using 'generateSignatures' option; Used as input\n\
  \                               only for 'serializeSignatures' function.\n -intype\
  \ <arg>                 Input file type: Enter sdf/smi\n -npTrainer <arg>      \
  \        Serialized NP atomSignatures file generated\n                         \
  \      by this program\n -out <arg>                    Output structure from scoring\n\
  \ -outFragments <arg>           Output .txt file for reconstructed\n           \
  \                    fragments. Specify this option only if 'reconstructFragments'\
  \ is true.\n                               Alternatively, this option can also be\
  \ specified along with\n                               'generateSignatures' as a\
  \ output file\n -outtype <arg>                Output file type: Enter sdf/smi\n\
  \ -reconstructFragments <arg>   Optional boolean argument {true/false} to\n    \
  \                           reconstruct fragments. If true individual fragments\
  \ with scores are\n                               written out in SMILES format\n\
  \ -serializeSignatures          Use this function to serialize .txt\n          \
  \                     signatures file generated by this program using 'generateSignatures'\n\
  \                               option.The input for this function is taken via\
  \ option 'inSignaturesFile'.\n                               Alternatively, this\
  \ function can be used alongside 'generateSignatures'\n                        \
  \       function to directly serialize and store the generated signatures.\n -signatureHeight\
  \ <arg>        Signature height to be generated; Use this\n                    \
  \           along 'generateSignatures'; Default size: 2\n -smTrainer <arg>     \
  \         Serialized SM atomSignatures file generated\n                        \
  \       by this program\n -v                            Application info\n\tFor\
  \ input and output file please specify the type using -intype and -outtype repectively.\
  \ \n\tCurrently the types can be either sdf/smi.\n\tIf my mistake you input a sdf\
  \ file but give it a different format type, \n\tthe program will not complain but\
  \ will finish without any output. If output file options (out/outFragments) are\
  \ unspecified, \n\tauto generated output files (based on Input format) will be written\
  \ to the directory of the input file.\n"
generated_using:
- --help
docker_image:
