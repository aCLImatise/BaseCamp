from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Float

Gthconsensus_V0_1_0 = CommandToolBuilder(tool="gthconsensus", base_command=["gthconsensus"], inputs=[ToolInput(tag="in_translation_table", input_type=Boolean(optional=True), prefix="-translationtable", doc=InputDocumentation(doc="set the codon translation table used for codon translation in\nmatching, DP, and output\ndefault: 1")), ToolInput(tag="in_be_verbosedefault_no", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="be verbose\ndefault: no")), ToolInput(tag="in_xml_out", input_type=Boolean(optional=True), prefix="-xmlout", doc=InputDocumentation(doc="show output in XML format\ndefault: no")), ToolInput(tag="in_gff_three_out", input_type=Boolean(optional=True), prefix="-gff3out", doc=InputDocumentation(doc="show output in GFF3 format\ndefault: no")), ToolInput(tag="in_md_five_ids", input_type=Boolean(optional=True), prefix="-md5ids", doc=InputDocumentation(doc="show MD5 fingerprints as sequence IDs\ndefault: no")), ToolInput(tag="in_redirect_output_specified", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="redirect output to specified file\ndefault: undefined")), ToolInput(tag="in_gzip", input_type=File(optional=True), prefix="-gzip", doc=InputDocumentation(doc="write gzip compressed output file\ndefault: no")), ToolInput(tag="in_bzip_two", input_type=File(optional=True), prefix="-bzip2", doc=InputDocumentation(doc="write bzip2 compressed output file\ndefault: no")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="-force", doc=InputDocumentation(doc="force writing to output file\ndefault: no")), ToolInput(tag="in_gs_two_out", input_type=Boolean(optional=True), prefix="-gs2out", doc=InputDocumentation(doc="output in old GeneSeqer2 format\ndefault: no")), ToolInput(tag="in_min_alignment_score", input_type=Float(optional=True), prefix="-minalignmentscore", doc=InputDocumentation(doc="the minimum alignment score for spliced alignments to be\nincluded into the set of spliced alignments\ndefault: 0.00")), ToolInput(tag="in_max_alignment_score", input_type=Float(optional=True), prefix="-maxalignmentscore", doc=InputDocumentation(doc="the maximum alignment score for spliced alignments to be\nincluded into the set of spliced alignments\ndefault: 1.00")), ToolInput(tag="in_min_coverage", input_type=Boolean(optional=True), prefix="-mincoverage", doc=InputDocumentation(doc="set the minimum coverage for spliced alignments to be\nincluded into the set of spliced alignments\ndefault: 0.00")), ToolInput(tag="in_max_coverage", input_type=Boolean(optional=True), prefix="-maxcoverage", doc=InputDocumentation(doc="set the maximum coverage for spliced alignments to be\nincluded into the set of spliced alignments\ndefault: 9999.99")), ToolInput(tag="in_intermediate", input_type=Boolean(optional=True), prefix="-intermediate", doc=InputDocumentation(doc="stop after calculation of spliced alignments and output\nresults in reusable XML format. Do not process this output\nyourself, use the ``normal'' XML output instead!\ndefault: no")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="display version information and exit"))], outputs=[ToolOutput(tag="out_redirect_output_specified", output_type=File(optional=True), selector=InputSelector(input_to_select="in_redirect_output_specified", type_hint=File()), doc=OutputDocumentation(doc="redirect output to specified file\ndefault: undefined")), ToolOutput(tag="out_gzip", output_type=File(optional=True), selector=InputSelector(input_to_select="in_gzip", type_hint=File()), doc=OutputDocumentation(doc="write gzip compressed output file\ndefault: no")), ToolOutput(tag="out_bzip_two", output_type=File(optional=True), selector=InputSelector(input_to_select="in_bzip_two", type_hint=File()), doc=OutputDocumentation(doc="write bzip2 compressed output file\ndefault: no")), ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="force writing to output file\ndefault: no"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gthconsensus_V0_1_0().translate("wdl", allow_empty_container=True)

