from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Array, String, File, Int, Boolean

Chromatiblock_V0_1_0 = CommandToolBuilder(tool="chromatiblock", base_command=["chromatiblock"], inputs=[ToolInput(tag="in_input_directory", input_type=Directory(optional=True), prefix="--input_directory", doc=InputDocumentation(doc="Directory of fasta files to use as input.")), ToolInput(tag="in_fast_a_files", input_type=Array(t=String(), optional=True), prefix="--fasta_files", doc=InputDocumentation(doc="List of fasta/genbank files to use as input")), ToolInput(tag="in_order_list", input_type=String(optional=True), prefix="--order_list", doc=InputDocumentation(doc="List of fasta files in desired order.")), ToolInput(tag="in_working_directory", input_type=Directory(optional=True), prefix="--working_directory", doc=InputDocumentation(doc="Folder to write intermediate files.")), ToolInput(tag="in_sibel_i_a_path", input_type=File(optional=True), prefix="--sibelia_path", doc=InputDocumentation(doc="Specify path to sibelia (does not need to be set if\nSibelia binary is in path).")), ToolInput(tag="in_sibel_i_a_mode", input_type=String(optional=True), prefix="--sibelia_mode", doc=InputDocumentation(doc="mode for running sibelia <loose|fine|far>")), ToolInput(tag="in_extensions", input_type=File(optional=True), prefix="--extensions", doc=InputDocumentation(doc="When -d is used for input files, chromatiblock will\ncheck against this comma seperated list to determine\nwhether to add file to the list of input sequences.")), ToolInput(tag="in_out", input_type=String(optional=True), prefix="--out", doc=InputDocumentation(doc="Location to write output.")), ToolInput(tag="in_output_format", input_type=File(optional=True), prefix="--output_format", doc=InputDocumentation(doc="file format to write to, if all is selected --out will\nbe a prefix and extension will be added")), ToolInput(tag="in_ppi", input_type=Int(optional=True), prefix="--ppi", doc=InputDocumentation(doc="pixels per inch (only used for png, figure width is 8\ninches)")), ToolInput(tag="in_min_block_size", input_type=Int(optional=True), prefix="--min_block_size", doc=InputDocumentation(doc="Minimum size of syntenic block.")), ToolInput(tag="in_categorise", input_type=String(optional=True), prefix="--categorise", doc=InputDocumentation(doc="color blocks by category")), ToolInput(tag="in_genes_of_interest_blast", input_type=String(optional=True), prefix="--genes_of_interest_blast", doc=InputDocumentation(doc="mark genes of interest using BLASTx")), ToolInput(tag="in_genes_of_interest_file", input_type=File(optional=True), prefix="--genes_of_interest_file", doc=InputDocumentation(doc="mark genes of interest using a file")), ToolInput(tag="in_genome_height", input_type=String(optional=True), prefix="--genome_height", doc=InputDocumentation(doc="Height of genome blocks")), ToolInput(tag="in_gap", input_type=String(optional=True), prefix="--gap", doc=InputDocumentation(doc="gap between genomes")), ToolInput(tag="in_skip_sibel_i_a", input_type=Directory(optional=True), prefix="--skip_sibelia", doc=InputDocumentation(doc="Use sibelia output already in working directory")), ToolInput(tag="in_skip_blast", input_type=Boolean(optional=True), prefix="--skip_blast", doc=InputDocumentation(doc="use existing BLASTx file for annotation")), ToolInput(tag="in_maf_alignment", input_type=File(optional=True), prefix="--maf_alignment", doc=InputDocumentation(doc="use a maf file for alignment.")), ToolInput(tag="in_svg_pan_zoom_location", input_type=Int(optional=True), prefix="--svg_pan_zoom_location", doc=InputDocumentation(doc="location of svg-pan-zoom.min.js")), ToolInput(tag="in_add_fast_a_labels", input_type=String(optional=True), prefix="--add_fasta_labels", doc=InputDocumentation(doc="add fasta names to figure")), ToolInput(tag="in_force", input_type=Directory(optional=True), prefix="--force", doc=InputDocumentation(doc="overwrite working directory and output")), ToolInput(tag="in_keep", input_type=Boolean(optional=True), prefix="--keep", doc=InputDocumentation(doc="keep working directory")), ToolInput(tag="in_gpl_v_three", input_type=Int(), position=0, doc=InputDocumentation(doc="USAGE: chromatiblock -f genome1.fasta genome2.fasta .... genomeN.fasta -w working_dir -o figure.html ")), ToolInput(tag="in_or", input_type=String(), position=1, doc=InputDocumentation(doc="chromatiblock -d /path/to/fasta_directory/ -w working_dir -o figure.svg -of svg"))], outputs=[ToolOutput(tag="out_output_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_format", type_hint=File()), doc=OutputDocumentation(doc="file format to write to, if all is selected --out will\nbe a prefix and extension will be added")), ToolOutput(tag="out_skip_sibel_i_a", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_skip_sibel_i_a", type_hint=File()), doc=OutputDocumentation(doc="Use sibelia output already in working directory")), ToolOutput(tag="out_force", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="overwrite working directory and output"))], container="quay.io/biocontainers/chromatiblock:1.0.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Chromatiblock_V0_1_0().translate("wdl")

