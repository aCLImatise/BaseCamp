!Command
command:
- k8
positional:
- !Positional
  optional: false
  position: 0
  name: d8
  description: ''
- !Positional
  optional: false
  position: 0
  name: shell
  description: ''
- !Positional
  optional: true
  position: 1
  name: filek
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - --use_strict
  description: "(enforce strict mode)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --es5_readonly
  description: "(activate correct semantics for inheriting readonliness)\ntype: bool\
    \  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --es52_globals
  description: "(activate new semantics for global var declarations)\ntype: bool \
    \ default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --harmony_typeof
  description: "(enable harmony semantics for typeof)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --harmony_scoping
  description: "(enable harmony block scoping)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --harmony_modules
  description: "(enable harmony modules (implies block scoping))\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --harmony_proxies
  description: "(enable harmony proxies)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --harmony_collections
  description: "(enable harmony collections (sets, maps, and weak maps))\ntype: bool\
    \  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --harmony_observation
  description: "(enable harmony object observation (implies harmony collections)\n\
    type: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --harmony
  description: "(enable all harmony features (except typeof))\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --packed_arrays
  description: "(optimizes arrays that have no holes)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --smi_only_arrays
  description: "(tracks arrays with only smi values)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --clever_optimizations
  description: "(Optimize object size, Array shift, DOM strings and string +)\ntype:\
    \ bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --unbox_double_arrays
  description: "(automatically unbox arrays of doubles)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --string_slices
  description: "(use string slices)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --crankshaft
  description: "(use crankshaft)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --hydrogen_filter
  description: "(optimization filter)\ntype: string  default:"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --use_range
  description: "(use hydrogen range analysis)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --eliminate_dead_phis
  description: "(eliminate dead phis)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --use_gvn
  description: "(use hydrogen global value numbering)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --use_canonicalizing
  description: "(use hydrogen instruction canonicalizing)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --use_inlining
  description: "(use function inlining)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max_inlined_source_size
  description: "(maximum source size in bytes considered for a single inlining)\n\
    type: int  default: 600"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max_inlined_nodes
  description: "(maximum number of AST nodes considered for a single inlining)\ntype:\
    \ int  default: 196"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max_inlined_nodes_cumulative
  description: "(maximum cumulative number of AST nodes considered for inlining)\n\
    type: int  default: 196"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --loop_invariant_code_motion
  description: "(loop invariant code motion)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --fast_math
  description: "(faster (but maybe less accurate) math functions)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --collect_megamorphic_maps_from_stub_cache
  description: "(crankshaft harvests type feedback from stub cache)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --hydrogen_stats
  description: "(print statistics for hydrogen)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_hydrogen
  description: "(trace generated hydrogen to file)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_phase
  description: "(trace generated IR for specified phases)\ntype: string  default:\
    \ Z"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_inlining
  description: "(trace inlining decisions)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_alloc
  description: "(trace register allocator)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_all_uses
  description: "(trace all use positions)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_range
  description: "(trace range analysis)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_gvn
  description: "(trace global value numbering)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_representation
  description: "(trace representation types)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --stress_pointer_maps
  description: "(pointer map for every instruction)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --stress_environments
  description: "(environment for every instruction)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --deopt_every_n_times
  description: "(deoptimize every n times a deopt point is passed)\ntype: int  default:\
    \ 0"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trap_on_deopt
  description: "(put a break point before deoptimizing)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --deoptimize_uncommon_cases
  description: "(deoptimize uncommon cases)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --polymorphic_inlining
  description: "(polymorphic inlining)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --use_osr
  description: "(use on-stack replacement)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --array_bounds_checks_elimination
  description: "(perform array bounds checks elimination)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --array_index_dehoisting
  description: "(perform array index dehoisting)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --dead_code_elimination
  description: "(use dead code elimination)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_dead_code_elimination
  description: "(trace dead code elimination)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --track_allocation_sites
  description: "(Use allocation site info to reduce transitions)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_osr
  description: "(trace on-stack replacement)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --stress_runs
  description: "(number of stress runs)\ntype: int  default: 0"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --optimize_closures
  description: "(optimize closures)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --lookup_sample_by_shared
  description: "(when picking a function to optimize, watch for shared function info,\
    \ not JSFunction itself)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --cache_optimized_code
  description: "(cache optimized code for closures)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --inline_construct
  description: "(inline constructor calls)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --inline_arguments
  description: "(inline functions with arguments object)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --inline_accessors
  description: "(inline JavaScript accessors)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --loop_weight
  description: "(loop weight for representation inference)\ntype: int  default: 1"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --optimize_for_in
  description: "(optimize functions containing for-in loops)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --opt_safe_uint32_operations
  description: "(allow uint32 values on optimize frames if they are used only in safe\
    \ operations)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --parallel_recompilation
  description: "(optimizing hot functions asynchronously on a separate thread)\ntype:\
    \ bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_parallel_recompilation
  description: "(track parallel recompilation)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --parallel_recompilation_queue_length
  description: "(the length of the parallel compilation queue)\ntype: int  default:\
    \ 2"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --manual_parallel_recompilation
  description: "(disable automatic optimization)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --experimental_profiler
  description: "(enable all profiler experiments)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --watch_ic_patching
  description: "(profiler considers IC stability)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --frame_count
  description: "(number of stack frames inspected by the profiler)\ntype: int  default:\
    \ 1"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --self_optimization
  description: "(primitive functions trigger their own optimization)\ntype: bool \
    \ default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --direct_self_opt
  description: "(call recompile stub directly when self-optimizing)\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --retry_self_opt
  description: "(re-try self-optimization if it failed)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --interrupt_at_exit
  description: "(insert an interrupt check at function exit)\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --weighted_back_edges
  description: "(weight back edges by jump distance for interrupt triggering)\ntype:\
    \ bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --interrupt_budget
  description: "(execution budget before interrupt is triggered)\ntype: int  default:\
    \ 5888"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --type_info_threshold
  description: "(percentage of ICs that must have type info to allow optimization)\n\
    type: int  default: 15"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --self_opt_count
  description: "(call count before self-optimization)\ntype: int  default: 130"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_opt_verbose
  description: "(extra verbose compilation tracing)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debug_code
  description: "(generate extra code (assertions) for debugging)\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --code_comments
  description: "(emit comments in code disassembly)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_sse2
  description: "(enable use of SSE2 instructions if available)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_sse3
  description: "(enable use of SSE3 instructions if available)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_sse4_1
  description: "(enable use of SSE4.1 instructions if available)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_cmov
  description: "(enable use of CMOV instruction if available)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_rdtsc
  description: "(enable use of RDTSC instruction if available)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_sahf
  description: "(enable use of SAHF instruction if available (X64 only))\ntype: bool\
    \  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_vfp3
  description: "(enable use of VFP3 instructions if available - this implies enabling\
    \ ARMv7 and VFP2 instructions (ARM only))\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_vfp2
  description: "(enable use of VFP2 instructions if available)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_armv7
  description: "(enable use of ARMv7 instructions if available (ARM only))\ntype:\
    \ bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_sudiv
  description: "(enable use of SDIV and UDIV instructions if available (ARM only))\n\
    type: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_movw_movt
  description: "(enable loading 32-bit constant by means of movw/movt instruction\
    \ pairs (ARM only))\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_unaligned_accesses
  description: "(enable unaligned accesses for ARMv7 (ARM only))\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_fpu
  description: "(enable use of MIPS FPU instructions if available (MIPS only))\ntype:\
    \ bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_vldr_imm
  description: "(enable use of constant pools for double immediate (ARM only))\ntype:\
    \ bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --expose_natives_as
  description: "(expose natives in global object)\ntype: string  default: NULL"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --expose_debug_as
  description: "(expose debug in global object)\ntype: string  default: NULL"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --expose_gc
  description: "(expose gc extension)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --expose_externalize_string
  description: "(expose externalize string extension)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --stack_trace_limit
  description: "(number of stack frames to capture)\ntype: int  default: 10"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --builtins_in_stack_traces
  description: "(show built-in functions in stack traces)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --disable_native_files
  description: "(disable builtin natives files)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --inline_new
  description: "(use fast inline allocation)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --stack_trace_on_abort
  description: "(print a stack trace if an assertion failure occurs)\ntype: bool \
    \ default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace
  description: "(trace function calls)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --mask_constants_with_cookie
  description: "(use random jit cookie to mask large constants)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --lazy
  description: "(use lazy compilation)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_opt
  description: "(trace lazy optimization)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_opt_stats
  description: "(trace lazy optimization statistics)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --opt
  description: "(use adaptive optimizations)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --always_opt
  description: "(always try to optimize functions)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --prepare_always_opt
  description: "(prepare for turning on always opt)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_deopt
  description: "(trace deoptimization)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --min_preparse_length
  description: "(minimum length for automatic enable preparsing)\ntype: int  default:\
    \ 1024"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --always_full_compiler
  description: "(try to use the dedicated run-once backend for all code)\ntype: bool\
    \  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max_opt_count
  description: "(maximum number of optimization attempts before giving up.)\ntype:\
    \ int  default: 10"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --compilation_cache
  description: "(enable compilation cache)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --cache_prototype_transitions
  description: "(cache prototype transitions)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_debug_json
  description: "(trace debugging JSON request/response)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debugger_auto_break
  description: "(automatically set the debug break flag when debugger commands are\
    \ in the queue)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --enable_liveedit
  description: "(enable liveedit experimental feature)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --break_on_abort
  description: "(always cause a debug break before aborting)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --stack_size
  description: "(default size of stack region v8 is allowed to use (in kBytes))\n\
    type: int  default: 984"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max_stack_trace_source_length
  description: "(maximum length of function source code printed in a stack trace.)\n\
    type: int  default: 300"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --always_inline_smi_code
  description: "(always inline smi code in non-opt code)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max_new_space_size
  description: "(max size of the new generation (in kBytes))\ntype: int  default:\
    \ 0"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max_old_space_size
  description: "(max size of the old generation (in Mbytes))\ntype: int  default:\
    \ 0"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --max_executable_size
  description: "(max size of executable memory (in Mbytes))\ntype: int  default: 0"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gc_global
  description: "(always perform global GCs)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gc_interval
  description: "(garbage collect after <n> allocations)\ntype: int  default: -1"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_gc
  description: "(print one trace line following each garbage collection)\ntype: bool\
    \  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_gc_nvp
  description: "(print one detailed trace line in name=value format after each garbage\
    \ collection)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_gc_ignore_scavenger
  description: "(do not print trace line after scavenger collection)\ntype: bool \
    \ default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --print_cumulative_gc_stat
  description: "(print cumulative GC statistics in name=value format on exit)\ntype:\
    \ bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_gc_verbose
  description: "(print more details following each garbage collection)\ntype: bool\
    \  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_fragmentation
  description: "(report fragmentation for old pointer and data pages)\ntype: bool\
    \  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_external_memory
  description: "(print amount of external allocated memory after each time it is adjusted.)\n\
    type: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --collect_maps
  description: "(garbage collect maps from which no objects can be reached)\ntype:\
    \ bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --flush_code
  description: "(flush code that we expect not to use again (during full gc))\ntype:\
    \ bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --flush_code_incrementally
  description: "(flush code that we expect not to use again (incrementally))\ntype:\
    \ bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --age_code
  description: "(track un-executed functions to age code and flush only old code)\n\
    type: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --incremental_marking
  description: "(use incremental marking)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --incremental_marking_steps
  description: "(do incremental marking steps)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_incremental_marking
  description: "(trace progress of the incremental marking)\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --track_gc_object_stats
  description: "(track object counts and memory usage)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --use_idle_notification
  description: "(Use idle notification to reduce memory footprint.)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --use_ic
  description: "(use inline caching)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --native_code_counters
  description: "(generate extra code for manipulating stats counters)\ntype: bool\
    \  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --always_compact
  description: "(Perform compaction on every full GC)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --lazy_sweeping
  description: "(Use lazy sweeping for old pointer and data spaces)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --never_compact
  description: "(Never perform compaction on full GC - testing only)\ntype: bool \
    \ default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --compact_code_space
  description: "(Compact code space on full non-incremental collections)\ntype: bool\
    \  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --incremental_code_compaction
  description: "(Compact code space on full incremental collections)\ntype: bool \
    \ default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --cleanup_code_caches_at_gc
  description: "(Flush inline caches prior to mark compact collection and flush code\
    \ caches in maps during mark compact cycle.)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --use_marking_progress_bar
  description: "(Use a progress bar to scan large objects in increments when incremental\
    \ marking is active.)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --random_seed
  description: "(Default seed for initializing random generator (0, the default, means\
    \ to use system random).)\ntype: int  default: 0"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --use_verbose_printer
  description: "(allows verbose printing)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --allow_natives_syntax
  description: "(allow natives syntax)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_parse
  description: "(trace parsing and preparsing)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_sim
  description: "(Trace simulator execution)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --check_icache
  description: "(Check icache flushes in ARM and MIPS simulator)\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --stop_sim_at
  description: "(Simulator stop after x number of instructions)\ntype: int  default:\
    \ 0"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --sim_stack_alignment
  description: "(Stack alingment in bytes in simulator (4 or 8, 8 is default))\ntype:\
    \ int  default: 8"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --trace_exception
  description: "(print stack trace when throwing exceptions)\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --preallocate_message_memory
  description: "(preallocate some memory to build stack traces.)\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --randomize_hashes
  description: "(randomize hashes to avoid predictable hash collisions (with snapshots\
    \ this option cannot override the baked-in seed))\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --hash_seed
  description: "(Fixed seed to use to hash property keys (0 means random)(with snapshots\
    \ this option cannot override the baked-in seed))\ntype: int  default: 0"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --preemption
  description: "(activate a 100ms timer that switches between V8 threads)\ntype: bool\
    \  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --regexp_optimization
  description: "(generate optimized regexp code)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --testing_bool_flag
  description: "(testing_bool_flag)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --testing_int_flag
  description: "(testing_int_flag)\ntype: int  default: 13"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --testing_float_flag
  description: "(float-flag)\ntype: float  default: 2.500000"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --testing_string_flag
  description: "(string-flag)\ntype: string  default: Hello, world!"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --testing_prng_seed
  description: "(Seed used for threading test randomness)\ntype: int  default: 42"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --testing_serialization_file
  description: "(file in which to serialize heap)\ntype: string  default: /tmp/serdes"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --extra_code
  description: "(A filename with extra code to be included in the snapshot (mksnapshot\
    \ only))\ntype: string  default: NULL"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --dump_counters
  description: "(Dump counters on exit)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debugger
  description: "(Enable JavaScript debugger)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --remote_debugger
  description: "(Connect JavaScript debugger to the debugger agent in another process)\n\
    type: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debugger_agent
  description: "(Enable debugger agent)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debugger_port
  description: "(Port to use for remote debugging)\ntype: int  default: 5858"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --map_counters
  description: "(Map counters to a file)\ntype: string  default:"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --js_arguments
  description: "(Pass all remaining arguments to the script. Alias for \"--\".)\n\
    type: arguments  default:"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debug_compile_events
  description: "(Enable debugger compile events)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debug_script_collected_events
  description: "(Enable debugger script collected events)\ntype: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gdbjit
  description: "(enable GDBJIT interface (disables compacting GC))\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gdbjit_full
  description: "(enable GDBJIT interface for all code objects)\ntype: bool  default:\
    \ false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gdbjit_dump
  description: "(dump elf objects with debug info to disk)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gdbjit_dump_filter
  description: "(dump only objects containing this substring)\ntype: string  default:"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --force_marking_deque_overflows
  description: "(force overflows of marking deque by reducing it's size to 64 words)\n\
    type: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --stress_compaction
  description: "(stress the GC compactor to flush out bugs (implies --force_marking_deque_overflows))\n\
    type: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log
  description: "(Minimal logging (no API, code, GC, suspect, or handles samples).)\n\
    type: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_all
  description: "(Log all events to the log file.)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_runtime
  description: "(Activate runtime system %Log call.)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_api
  description: "(Log API events to the log file.)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_code
  description: "(Log code events to the log file without profiling.)\ntype: bool \
    \ default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_gc
  description: "(Log heap samples on garbage collection for the hp2ps tool.)\ntype:\
    \ bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_handles
  description: "(Log global handle events.)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_snapshot_positions
  description: "(log positions of (de)serialized objects in the snapshot.)\ntype:\
    \ bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_suspect
  description: "(Log suspect operations.)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --prof
  description: "(Log statistical profiling information (implies --log-code).)\ntype:\
    \ bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --prof_auto
  description: "(Used with --prof, starts profiling automatically)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --prof_lazy
  description: "(Used with --prof, only does sampling and logging when profiler is\
    \ active (implies --noprof_auto).)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --prof_browser_mode
  description: "(Used with --prof, turns on browser-compatible mode for profiling.)\n\
    type: bool  default: true"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_regexp
  description: "(Log regular expression execution.)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --logfile
  description: "(Specify the name of the log file.)\ntype: string  default: v8.log"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --ll_prof
  description: "(Enable low-level linux profiler.)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gc_fake_mmap
  description: "(Specify the name of the file for fake gc mmap used in ll_prof)\n\
    type: string  default: /tmp/__v8_gc__"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_internal_timer_events
  description: "(Time internal events.)\ntype: bool  default: false"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --log_timer_events
  description: "(Time events including external callbacks.)\ntype: bool  default:\
    \ false\n"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --shell
  description: ''
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -e
  description: ''
  args: !SimpleFlagArg
    name: string
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - --help
  description: "(Print usage message, including flags, on console)\ntype: bool  default:\
    \ true"
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "Usage:\n  shell [options] -e string\n    execute string in V8\n  shell\
  \ [options] file1 file2 ... filek\n    run JavaScript scripts in file1, file2, ...,\
  \ filek\n  shell [options]\n  shell [options] --shell [file1 file2 ... filek]\n\
  \    run an interactive JavaScript shell\n  d8 [options] file1 file2 ... filek\n\
  \  d8 [options]\n  d8 [options] --shell [file1 file2 ... filek]\n    run the new\
  \ debugging shell\n\nOptions:\n  --use_strict (enforce strict mode)\n        type:\
  \ bool  default: false\n  --es5_readonly (activate correct semantics for inheriting\
  \ readonliness)\n        type: bool  default: true\n  --es52_globals (activate new\
  \ semantics for global var declarations)\n        type: bool  default: true\n  --harmony_typeof\
  \ (enable harmony semantics for typeof)\n        type: bool  default: false\n  --harmony_scoping\
  \ (enable harmony block scoping)\n        type: bool  default: false\n  --harmony_modules\
  \ (enable harmony modules (implies block scoping))\n        type: bool  default:\
  \ false\n  --harmony_proxies (enable harmony proxies)\n        type: bool  default:\
  \ false\n  --harmony_collections (enable harmony collections (sets, maps, and weak\
  \ maps))\n        type: bool  default: false\n  --harmony_observation (enable harmony\
  \ object observation (implies harmony collections)\n        type: bool  default:\
  \ false\n  --harmony (enable all harmony features (except typeof))\n        type:\
  \ bool  default: false\n  --packed_arrays (optimizes arrays that have no holes)\n\
  \        type: bool  default: true\n  --smi_only_arrays (tracks arrays with only\
  \ smi values)\n        type: bool  default: true\n  --clever_optimizations (Optimize\
  \ object size, Array shift, DOM strings and string +)\n        type: bool  default:\
  \ true\n  --unbox_double_arrays (automatically unbox arrays of doubles)\n      \
  \  type: bool  default: true\n  --string_slices (use string slices)\n        type:\
  \ bool  default: true\n  --crankshaft (use crankshaft)\n        type: bool  default:\
  \ true\n  --hydrogen_filter (optimization filter)\n        type: string  default:\
  \ \n  --use_range (use hydrogen range analysis)\n        type: bool  default: true\n\
  \  --eliminate_dead_phis (eliminate dead phis)\n        type: bool  default: true\n\
  \  --use_gvn (use hydrogen global value numbering)\n        type: bool  default:\
  \ true\n  --use_canonicalizing (use hydrogen instruction canonicalizing)\n     \
  \   type: bool  default: true\n  --use_inlining (use function inlining)\n      \
  \  type: bool  default: true\n  --max_inlined_source_size (maximum source size in\
  \ bytes considered for a single inlining)\n        type: int  default: 600\n  --max_inlined_nodes\
  \ (maximum number of AST nodes considered for a single inlining)\n        type:\
  \ int  default: 196\n  --max_inlined_nodes_cumulative (maximum cumulative number\
  \ of AST nodes considered for inlining)\n        type: int  default: 196\n  --loop_invariant_code_motion\
  \ (loop invariant code motion)\n        type: bool  default: true\n  --fast_math\
  \ (faster (but maybe less accurate) math functions)\n        type: bool  default:\
  \ true\n  --collect_megamorphic_maps_from_stub_cache (crankshaft harvests type feedback\
  \ from stub cache)\n        type: bool  default: true\n  --hydrogen_stats (print\
  \ statistics for hydrogen)\n        type: bool  default: false\n  --trace_hydrogen\
  \ (trace generated hydrogen to file)\n        type: bool  default: false\n  --trace_phase\
  \ (trace generated IR for specified phases)\n        type: string  default: Z\n\
  \  --trace_inlining (trace inlining decisions)\n        type: bool  default: false\n\
  \  --trace_alloc (trace register allocator)\n        type: bool  default: false\n\
  \  --trace_all_uses (trace all use positions)\n        type: bool  default: false\n\
  \  --trace_range (trace range analysis)\n        type: bool  default: false\n  --trace_gvn\
  \ (trace global value numbering)\n        type: bool  default: false\n  --trace_representation\
  \ (trace representation types)\n        type: bool  default: false\n  --stress_pointer_maps\
  \ (pointer map for every instruction)\n        type: bool  default: false\n  --stress_environments\
  \ (environment for every instruction)\n        type: bool  default: false\n  --deopt_every_n_times\
  \ (deoptimize every n times a deopt point is passed)\n        type: int  default:\
  \ 0\n  --trap_on_deopt (put a break point before deoptimizing)\n        type: bool\
  \  default: false\n  --deoptimize_uncommon_cases (deoptimize uncommon cases)\n \
  \       type: bool  default: true\n  --polymorphic_inlining (polymorphic inlining)\n\
  \        type: bool  default: true\n  --use_osr (use on-stack replacement)\n   \
  \     type: bool  default: true\n  --array_bounds_checks_elimination (perform array\
  \ bounds checks elimination)\n        type: bool  default: true\n  --array_index_dehoisting\
  \ (perform array index dehoisting)\n        type: bool  default: true\n  --dead_code_elimination\
  \ (use dead code elimination)\n        type: bool  default: true\n  --trace_dead_code_elimination\
  \ (trace dead code elimination)\n        type: bool  default: false\n  --track_allocation_sites\
  \ (Use allocation site info to reduce transitions)\n        type: bool  default:\
  \ true\n  --trace_osr (trace on-stack replacement)\n        type: bool  default:\
  \ false\n  --stress_runs (number of stress runs)\n        type: int  default: 0\n\
  \  --optimize_closures (optimize closures)\n        type: bool  default: true\n\
  \  --lookup_sample_by_shared (when picking a function to optimize, watch for shared\
  \ function info, not JSFunction itself)\n        type: bool  default: true\n  --cache_optimized_code\
  \ (cache optimized code for closures)\n        type: bool  default: true\n  --inline_construct\
  \ (inline constructor calls)\n        type: bool  default: true\n  --inline_arguments\
  \ (inline functions with arguments object)\n        type: bool  default: true\n\
  \  --inline_accessors (inline JavaScript accessors)\n        type: bool  default:\
  \ true\n  --loop_weight (loop weight for representation inference)\n        type:\
  \ int  default: 1\n  --optimize_for_in (optimize functions containing for-in loops)\n\
  \        type: bool  default: true\n  --opt_safe_uint32_operations (allow uint32\
  \ values on optimize frames if they are used only in safe operations)\n        type:\
  \ bool  default: true\n  --parallel_recompilation (optimizing hot functions asynchronously\
  \ on a separate thread)\n        type: bool  default: false\n  --trace_parallel_recompilation\
  \ (track parallel recompilation)\n        type: bool  default: false\n  --parallel_recompilation_queue_length\
  \ (the length of the parallel compilation queue)\n        type: int  default: 2\n\
  \  --manual_parallel_recompilation (disable automatic optimization)\n        type:\
  \ bool  default: false\n  --experimental_profiler (enable all profiler experiments)\n\
  \        type: bool  default: true\n  --watch_ic_patching (profiler considers IC\
  \ stability)\n        type: bool  default: false\n  --frame_count (number of stack\
  \ frames inspected by the profiler)\n        type: int  default: 1\n  --self_optimization\
  \ (primitive functions trigger their own optimization)\n        type: bool  default:\
  \ false\n  --direct_self_opt (call recompile stub directly when self-optimizing)\n\
  \        type: bool  default: false\n  --retry_self_opt (re-try self-optimization\
  \ if it failed)\n        type: bool  default: false\n  --interrupt_at_exit (insert\
  \ an interrupt check at function exit)\n        type: bool  default: false\n  --weighted_back_edges\
  \ (weight back edges by jump distance for interrupt triggering)\n        type: bool\
  \  default: false\n  --interrupt_budget (execution budget before interrupt is triggered)\n\
  \        type: int  default: 5888\n  --type_info_threshold (percentage of ICs that\
  \ must have type info to allow optimization)\n        type: int  default: 15\n \
  \ --self_opt_count (call count before self-optimization)\n        type: int  default:\
  \ 130\n  --trace_opt_verbose (extra verbose compilation tracing)\n        type:\
  \ bool  default: false\n  --debug_code (generate extra code (assertions) for debugging)\n\
  \        type: bool  default: false\n  --code_comments (emit comments in code disassembly)\n\
  \        type: bool  default: false\n  --enable_sse2 (enable use of SSE2 instructions\
  \ if available)\n        type: bool  default: true\n  --enable_sse3 (enable use\
  \ of SSE3 instructions if available)\n        type: bool  default: true\n  --enable_sse4_1\
  \ (enable use of SSE4.1 instructions if available)\n        type: bool  default:\
  \ true\n  --enable_cmov (enable use of CMOV instruction if available)\n        type:\
  \ bool  default: true\n  --enable_rdtsc (enable use of RDTSC instruction if available)\n\
  \        type: bool  default: true\n  --enable_sahf (enable use of SAHF instruction\
  \ if available (X64 only))\n        type: bool  default: true\n  --enable_vfp3 (enable\
  \ use of VFP3 instructions if available - this implies enabling ARMv7 and VFP2 instructions\
  \ (ARM only))\n        type: bool  default: true\n  --enable_vfp2 (enable use of\
  \ VFP2 instructions if available)\n        type: bool  default: true\n  --enable_armv7\
  \ (enable use of ARMv7 instructions if available (ARM only))\n        type: bool\
  \  default: true\n  --enable_sudiv (enable use of SDIV and UDIV instructions if\
  \ available (ARM only))\n        type: bool  default: true\n  --enable_movw_movt\
  \ (enable loading 32-bit constant by means of movw/movt instruction pairs (ARM only))\n\
  \        type: bool  default: false\n  --enable_unaligned_accesses (enable unaligned\
  \ accesses for ARMv7 (ARM only))\n        type: bool  default: true\n  --enable_fpu\
  \ (enable use of MIPS FPU instructions if available (MIPS only))\n        type:\
  \ bool  default: true\n  --enable_vldr_imm (enable use of constant pools for double\
  \ immediate (ARM only))\n        type: bool  default: false\n  --expose_natives_as\
  \ (expose natives in global object)\n        type: string  default: NULL\n  --expose_debug_as\
  \ (expose debug in global object)\n        type: string  default: NULL\n  --expose_gc\
  \ (expose gc extension)\n        type: bool  default: false\n  --expose_externalize_string\
  \ (expose externalize string extension)\n        type: bool  default: false\n  --stack_trace_limit\
  \ (number of stack frames to capture)\n        type: int  default: 10\n  --builtins_in_stack_traces\
  \ (show built-in functions in stack traces)\n        type: bool  default: false\n\
  \  --disable_native_files (disable builtin natives files)\n        type: bool  default:\
  \ false\n  --inline_new (use fast inline allocation)\n        type: bool  default:\
  \ true\n  --stack_trace_on_abort (print a stack trace if an assertion failure occurs)\n\
  \        type: bool  default: true\n  --trace (trace function calls)\n        type:\
  \ bool  default: false\n  --mask_constants_with_cookie (use random jit cookie to\
  \ mask large constants)\n        type: bool  default: true\n  --lazy (use lazy compilation)\n\
  \        type: bool  default: true\n  --trace_opt (trace lazy optimization)\n  \
  \      type: bool  default: false\n  --trace_opt_stats (trace lazy optimization\
  \ statistics)\n        type: bool  default: false\n  --opt (use adaptive optimizations)\n\
  \        type: bool  default: true\n  --always_opt (always try to optimize functions)\n\
  \        type: bool  default: false\n  --prepare_always_opt (prepare for turning\
  \ on always opt)\n        type: bool  default: false\n  --trace_deopt (trace deoptimization)\n\
  \        type: bool  default: false\n  --min_preparse_length (minimum length for\
  \ automatic enable preparsing)\n        type: int  default: 1024\n  --always_full_compiler\
  \ (try to use the dedicated run-once backend for all code)\n        type: bool \
  \ default: false\n  --max_opt_count (maximum number of optimization attempts before\
  \ giving up.)\n        type: int  default: 10\n  --compilation_cache (enable compilation\
  \ cache)\n        type: bool  default: true\n  --cache_prototype_transitions (cache\
  \ prototype transitions)\n        type: bool  default: true\n  --trace_debug_json\
  \ (trace debugging JSON request/response)\n        type: bool  default: false\n\
  \  --debugger_auto_break (automatically set the debug break flag when debugger commands\
  \ are in the queue)\n        type: bool  default: true\n  --enable_liveedit (enable\
  \ liveedit experimental feature)\n        type: bool  default: true\n  --break_on_abort\
  \ (always cause a debug break before aborting)\n        type: bool  default: true\n\
  \  --stack_size (default size of stack region v8 is allowed to use (in kBytes))\n\
  \        type: int  default: 984\n  --max_stack_trace_source_length (maximum length\
  \ of function source code printed in a stack trace.)\n        type: int  default:\
  \ 300\n  --always_inline_smi_code (always inline smi code in non-opt code)\n   \
  \     type: bool  default: false\n  --max_new_space_size (max size of the new generation\
  \ (in kBytes))\n        type: int  default: 0\n  --max_old_space_size (max size\
  \ of the old generation (in Mbytes))\n        type: int  default: 0\n  --max_executable_size\
  \ (max size of executable memory (in Mbytes))\n        type: int  default: 0\n \
  \ --gc_global (always perform global GCs)\n        type: bool  default: false\n\
  \  --gc_interval (garbage collect after <n> allocations)\n        type: int  default:\
  \ -1\n  --trace_gc (print one trace line following each garbage collection)\n  \
  \      type: bool  default: false\n  --trace_gc_nvp (print one detailed trace line\
  \ in name=value format after each garbage collection)\n        type: bool  default:\
  \ false\n  --trace_gc_ignore_scavenger (do not print trace line after scavenger\
  \ collection)\n        type: bool  default: false\n  --print_cumulative_gc_stat\
  \ (print cumulative GC statistics in name=value format on exit)\n        type: bool\
  \  default: false\n  --trace_gc_verbose (print more details following each garbage\
  \ collection)\n        type: bool  default: false\n  --trace_fragmentation (report\
  \ fragmentation for old pointer and data pages)\n        type: bool  default: false\n\
  \  --trace_external_memory (print amount of external allocated memory after each\
  \ time it is adjusted.)\n        type: bool  default: false\n  --collect_maps (garbage\
  \ collect maps from which no objects can be reached)\n        type: bool  default:\
  \ true\n  --flush_code (flush code that we expect not to use again (during full\
  \ gc))\n        type: bool  default: true\n  --flush_code_incrementally (flush code\
  \ that we expect not to use again (incrementally))\n        type: bool  default:\
  \ true\n  --age_code (track un-executed functions to age code and flush only old\
  \ code)\n        type: bool  default: true\n  --incremental_marking (use incremental\
  \ marking)\n        type: bool  default: true\n  --incremental_marking_steps (do\
  \ incremental marking steps)\n        type: bool  default: true\n  --trace_incremental_marking\
  \ (trace progress of the incremental marking)\n        type: bool  default: false\n\
  \  --track_gc_object_stats (track object counts and memory usage)\n        type:\
  \ bool  default: false\n  --use_idle_notification (Use idle notification to reduce\
  \ memory footprint.)\n        type: bool  default: true\n  --use_ic (use inline\
  \ caching)\n        type: bool  default: true\n  --native_code_counters (generate\
  \ extra code for manipulating stats counters)\n        type: bool  default: false\n\
  \  --always_compact (Perform compaction on every full GC)\n        type: bool  default:\
  \ false\n  --lazy_sweeping (Use lazy sweeping for old pointer and data spaces)\n\
  \        type: bool  default: true\n  --never_compact (Never perform compaction\
  \ on full GC - testing only)\n        type: bool  default: false\n  --compact_code_space\
  \ (Compact code space on full non-incremental collections)\n        type: bool \
  \ default: true\n  --incremental_code_compaction (Compact code space on full incremental\
  \ collections)\n        type: bool  default: true\n  --cleanup_code_caches_at_gc\
  \ (Flush inline caches prior to mark compact collection and flush code caches in\
  \ maps during mark compact cycle.)\n        type: bool  default: true\n  --use_marking_progress_bar\
  \ (Use a progress bar to scan large objects in increments when incremental marking\
  \ is active.)\n        type: bool  default: true\n  --random_seed (Default seed\
  \ for initializing random generator (0, the default, means to use system random).)\n\
  \        type: int  default: 0\n  --use_verbose_printer (allows verbose printing)\n\
  \        type: bool  default: true\n  --allow_natives_syntax (allow natives syntax)\n\
  \        type: bool  default: false\n  --trace_parse (trace parsing and preparsing)\n\
  \        type: bool  default: false\n  --trace_sim (Trace simulator execution)\n\
  \        type: bool  default: false\n  --check_icache (Check icache flushes in ARM\
  \ and MIPS simulator)\n        type: bool  default: false\n  --stop_sim_at (Simulator\
  \ stop after x number of instructions)\n        type: int  default: 0\n  --sim_stack_alignment\
  \ (Stack alingment in bytes in simulator (4 or 8, 8 is default))\n        type:\
  \ int  default: 8\n  --trace_exception (print stack trace when throwing exceptions)\n\
  \        type: bool  default: false\n  --preallocate_message_memory (preallocate\
  \ some memory to build stack traces.)\n        type: bool  default: false\n  --randomize_hashes\
  \ (randomize hashes to avoid predictable hash collisions (with snapshots this option\
  \ cannot override the baked-in seed))\n        type: bool  default: true\n  --hash_seed\
  \ (Fixed seed to use to hash property keys (0 means random)(with snapshots this\
  \ option cannot override the baked-in seed))\n        type: int  default: 0\n  --preemption\
  \ (activate a 100ms timer that switches between V8 threads)\n        type: bool\
  \  default: false\n  --regexp_optimization (generate optimized regexp code)\n  \
  \      type: bool  default: true\n  --testing_bool_flag (testing_bool_flag)\n  \
  \      type: bool  default: true\n  --testing_int_flag (testing_int_flag)\n    \
  \    type: int  default: 13\n  --testing_float_flag (float-flag)\n        type:\
  \ float  default: 2.500000\n  --testing_string_flag (string-flag)\n        type:\
  \ string  default: Hello, world!\n  --testing_prng_seed (Seed used for threading\
  \ test randomness)\n        type: int  default: 42\n  --testing_serialization_file\
  \ (file in which to serialize heap)\n        type: string  default: /tmp/serdes\n\
  \  --extra_code (A filename with extra code to be included in the snapshot (mksnapshot\
  \ only))\n        type: string  default: NULL\n  --help (Print usage message, including\
  \ flags, on console)\n        type: bool  default: true\n  --dump_counters (Dump\
  \ counters on exit)\n        type: bool  default: false\n  --debugger (Enable JavaScript\
  \ debugger)\n        type: bool  default: false\n  --remote_debugger (Connect JavaScript\
  \ debugger to the debugger agent in another process)\n        type: bool  default:\
  \ false\n  --debugger_agent (Enable debugger agent)\n        type: bool  default:\
  \ false\n  --debugger_port (Port to use for remote debugging)\n        type: int\
  \  default: 5858\n  --map_counters (Map counters to a file)\n        type: string\
  \  default: \n  --js_arguments (Pass all remaining arguments to the script. Alias\
  \ for \"--\".)\n        type: arguments  default: \n  --debug_compile_events (Enable\
  \ debugger compile events)\n        type: bool  default: true\n  --debug_script_collected_events\
  \ (Enable debugger script collected events)\n        type: bool  default: true\n\
  \  --gdbjit (enable GDBJIT interface (disables compacting GC))\n        type: bool\
  \  default: false\n  --gdbjit_full (enable GDBJIT interface for all code objects)\n\
  \        type: bool  default: false\n  --gdbjit_dump (dump elf objects with debug\
  \ info to disk)\n        type: bool  default: false\n  --gdbjit_dump_filter (dump\
  \ only objects containing this substring)\n        type: string  default: \n  --force_marking_deque_overflows\
  \ (force overflows of marking deque by reducing it's size to 64 words)\n       \
  \ type: bool  default: false\n  --stress_compaction (stress the GC compactor to\
  \ flush out bugs (implies --force_marking_deque_overflows))\n        type: bool\
  \  default: false\n  --log (Minimal logging (no API, code, GC, suspect, or handles\
  \ samples).)\n        type: bool  default: false\n  --log_all (Log all events to\
  \ the log file.)\n        type: bool  default: false\n  --log_runtime (Activate\
  \ runtime system %Log call.)\n        type: bool  default: false\n  --log_api (Log\
  \ API events to the log file.)\n        type: bool  default: false\n  --log_code\
  \ (Log code events to the log file without profiling.)\n        type: bool  default:\
  \ false\n  --log_gc (Log heap samples on garbage collection for the hp2ps tool.)\n\
  \        type: bool  default: false\n  --log_handles (Log global handle events.)\n\
  \        type: bool  default: false\n  --log_snapshot_positions (log positions of\
  \ (de)serialized objects in the snapshot.)\n        type: bool  default: false\n\
  \  --log_suspect (Log suspect operations.)\n        type: bool  default: false\n\
  \  --prof (Log statistical profiling information (implies --log-code).)\n      \
  \  type: bool  default: false\n  --prof_auto (Used with --prof, starts profiling\
  \ automatically)\n        type: bool  default: true\n  --prof_lazy (Used with --prof,\
  \ only does sampling and logging when profiler is active (implies --noprof_auto).)\n\
  \        type: bool  default: false\n  --prof_browser_mode (Used with --prof, turns\
  \ on browser-compatible mode for profiling.)\n        type: bool  default: true\n\
  \  --log_regexp (Log regular expression execution.)\n        type: bool  default:\
  \ false\n  --logfile (Specify the name of the log file.)\n        type: string \
  \ default: v8.log\n  --ll_prof (Enable low-level linux profiler.)\n        type:\
  \ bool  default: false\n  --gc_fake_mmap (Specify the name of the file for fake\
  \ gc mmap used in ll_prof)\n        type: string  default: /tmp/__v8_gc__\n  --log_internal_timer_events\
  \ (Time internal events.)\n        type: bool  default: false\n  --log_timer_events\
  \ (Time events including external callbacks.)\n        type: bool  default: false\n"
generated_using:
- --help
docker_image:
