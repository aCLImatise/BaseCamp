from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Int, Boolean

Siriusadapter_V0_1_0 = CommandToolBuilder(tool="SiriusAdapter", base_command=["SiriusAdapter"], inputs=[ToolInput(tag="in_executable", input_type=File(optional=True), prefix="-executable", doc=InputDocumentation(doc="The Sirius executable. Provide a full or relative path, or make sure it can be found in your PATH environment.")), ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*                                          MzML Input file (valid formats: 'mzML')")), ToolInput(tag="in_in_feature_info", input_type=File(optional=True), prefix="-in_featureinfo", doc=InputDocumentation(doc="FeatureXML input with feature and adduct information (valid formats: 'featureXML')")), ToolInput(tag="in_out_sirius", input_type=File(optional=True), prefix="-out_sirius", doc=InputDocumentation(doc="MzTab Output file for SiriusAdapter results (valid formats: 'mzTab')")), ToolInput(tag="in_out_finger_id", input_type=File(optional=True), prefix="-out_fingerid", doc=InputDocumentation(doc="MzTab output file for CSI:FingerID, if this parameter is given, SIRIUS will search for a molecular structure using CSI:FingerID after determining the sum formula (valid formats: 'mzTab')")), ToolInput(tag="in_out_ms", input_type=File(optional=True), prefix="-out_ms", doc=InputDocumentation(doc="Internal SIRIUS .ms format after OpenMS preprocessing (valid formats: 'ms')")), ToolInput(tag="in_out_workspace_directory", input_type=Directory(optional=True), prefix="-out_workspace_directory", doc=InputDocumentation(doc="Output directory for SIRIUS workspace")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out_sirius", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_sirius", type_hint=File()), doc=OutputDocumentation(doc="MzTab Output file for SiriusAdapter results (valid formats: 'mzTab')")), ToolOutput(tag="out_out_finger_id", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_finger_id", type_hint=File()), doc=OutputDocumentation(doc="MzTab output file for CSI:FingerID, if this parameter is given, SIRIUS will search for a molecular structure using CSI:FingerID after determining the sum formula (valid formats: 'mzTab')")), ToolOutput(tag="out_out_workspace_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out_workspace_directory", type_hint=File()), doc=OutputDocumentation(doc="Output directory for SIRIUS workspace"))], container="quay.io/biocontainers/openms:2.6.0--h4afb90d_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Siriusadapter_V0_1_0().translate("wdl")

