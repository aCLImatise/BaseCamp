!Command
command:
- openmg
positional:
- !Positional
  optional: false
  position: 0
  name: java
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - -ec
  description: ':  elemental composition of the molecules to be generated.'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  description: ':   SDF file where to store the molecules.'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -fr
  description: ":  SDF file containing prescribed one or multiple substructures. In\
    \ the case\nof multiple substructures, they have to be non-overlapping."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -jar
  description: ''
  args: !SimpleFlagArg
    name: OMG.jar
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "OMG generates chemical structures\n\nUsage: java -jar OMG.jar -ec <elemental_composition>\
  \ [-o <out_file.sdf>, -fr <in_fragments.sdf>]\n\nRequired Parameters\n-ec:  elemental\
  \ composition of the molecules to be generated.\n\nOptional Parameters\n-o:   SDF\
  \ file where to store the molecules. \n-fr:  SDF file containing prescribed one\
  \ or multiple substructures. In the case\n         of multiple substructures, they\
  \ have to be non-overlapping. \n\n\nExamples:\njava -jar OMG.jar -ec C6H6\n\njava\
  \ -jar OMG.jar -ec C6H6 -o out_C6H6.sdf\n\njava -jar OMG.jar -ec C2H5NO2 -fr fragment_CO2.sdf\n\
  \n"
generated_using:
- -h
docker_image:
