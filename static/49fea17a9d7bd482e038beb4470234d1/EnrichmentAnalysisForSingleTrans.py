from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int

Enrichmentanalysisforsingletrans_V0_1_0 = CommandToolBuilder(tool="EnrichmentAnalysisForSingleTrans", base_command=["EnrichmentAnalysisForSingleTrans"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="All ratio file generated by EnrichmentAnalysis.py.")), ToolInput(tag="in_ot_put_prefix", input_type=String(optional=True), prefix="--otput_prefix", doc=InputDocumentation(doc="Prefix of output files.[required]")), ToolInput(tag="in_coordinate_file", input_type=File(optional=True), prefix="--coordinateFile", doc=InputDocumentation(doc="The file should contain the coordinate of start and\nstop codon. Generated by\nOutputTranscriptInfo.py.[required]")), ToolInput(tag="in_single_trans", input_type=String(optional=True), prefix="--single-trans", doc=InputDocumentation(doc="A single selected transcript.")), ToolInput(tag="in_selected_trans_list", input_type=File(optional=True), prefix="--selected-trans-list", doc=InputDocumentation(doc="Selected transcripts list. The first column of this\nfile must be transcript id or gene identifier with a\ncolumn name.")), ToolInput(tag="in_ymin", input_type=Int(optional=True), prefix="--ymin", doc=InputDocumentation(doc="The max of ylim. default=none")), ToolInput(tag="in_ymax", input_type=Int(optional=True), prefix="--ymax", doc=InputDocumentation(doc="The max of ylim. default=none")), ToolInput(tag="in_unit", input_type=String(optional=True), prefix="--unit", doc=InputDocumentation(doc="Unit for density calculation.[codon or nt]")), ToolInput(tag="in_a_xv_line", input_type=String(optional=True), prefix="--axvline", doc=InputDocumentation(doc="Position to plot a vertical line in x axis.\ndefault=none")), ToolInput(tag="in_a_xh_line", input_type=String(optional=True), prefix="--axhline", doc=InputDocumentation(doc="Position to plot a vertical line in y axis.\ndefault=none")), ToolInput(tag="in_slide_window", input_type=Int(optional=True), prefix="--slide-window", doc=InputDocumentation(doc="Using slide window to average the density.Input a\ntrue strings such as yes, y or 1. none=default")), ToolInput(tag="in_start", input_type=Int(optional=True), prefix="--start", doc=InputDocumentation(doc="The start position need to be averaged.default=5")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc="The length of silde window. default=7")), ToolInput(tag="in_step", input_type=Int(optional=True), prefix="--step", doc=InputDocumentation(doc="The step length of slide window. default=1")), ToolInput(tag="in_id_type", input_type=String(optional=True), prefix="--id-type", doc=InputDocumentation(doc="define the id type users input. the default is\ntranscript id, if not, will be transformed into\ntranscript id. transcript_id=default\n"))], outputs=[], container="quay.io/biocontainers/ribominer:0.2.3.1--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Enrichmentanalysisforsingletrans_V0_1_0().translate("wdl")

