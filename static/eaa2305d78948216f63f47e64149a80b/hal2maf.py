from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Hal2Maf_V0_1_0 = CommandToolBuilder(tool="hal2maf", base_command=["hal2maf"], inputs=[ToolInput(tag="in_append", input_type=File(optional=True), prefix="--append", doc=InputDocumentation(doc=":                      append to instead of overwrite output file. [default =\n0]")), ToolInput(tag="in_cache_bytes", input_type=Int(optional=True), prefix="--cacheBytes", doc=InputDocumentation(doc=":          maximum size in bytes of regular hdf5 cache [default =\n15728640]")), ToolInput(tag="in_cache_mdc", input_type=Int(optional=True), prefix="--cacheMDC", doc=InputDocumentation(doc=":            number of metadata slots in hdf5 cache [default = 113]")), ToolInput(tag="in_cacher_dc", input_type=Int(optional=True), prefix="--cacheRDC", doc=InputDocumentation(doc=":            number of regular slots in hdf5 cache.  should be a\nprime number ~= 10 * DefaultCacheRDCBytes / chunk\n[default = 599999]")), ToolInput(tag="in_cache_w_zero", input_type=Int(optional=True), prefix="--cacheW0", doc=InputDocumentation(doc=":             w0 parameter fro hdf5 cache [default = 0.75]")), ToolInput(tag="in_global", input_type=Boolean(optional=True), prefix="--global", doc=InputDocumentation(doc=":                      output all columns in alignment, ignoring refGenome,\nrefSequence, etc. flags [default = 0]")), ToolInput(tag="in_in_memory", input_type=Boolean(optional=True), prefix="--inMemory", doc=InputDocumentation(doc=":                    load all data in memory (and disable hdf5 cache)\n[default = 0]")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc=":              length of the reference genome (or sequence if\nspecified) to convert.  If set to 0, the entire thing\nis converted [default = 0]")), ToolInput(tag="in_max_block_len", input_type=Int(optional=True), prefix="--maxBlockLen", doc=InputDocumentation(doc=":         maximum length of MAF block in output [default = 1000]")), ToolInput(tag="in_max_ref_gap", input_type=Int(optional=True), prefix="--maxRefGap", doc=InputDocumentation(doc=":           maximum gap length in reference [default = 0]")), ToolInput(tag="in_no_ancestors", input_type=Boolean(optional=True), prefix="--noAncestors", doc=InputDocumentation(doc=":                 don't write ancestral sequences. IMPORTANT: Must be\nused in conjunction with --refGenome to set a\nnon-ancestral genome as the reference because the\ndefault reference is the root. [default = 0]")), ToolInput(tag="in_no_dupes", input_type=Boolean(optional=True), prefix="--noDupes", doc=InputDocumentation(doc=":                     ignore paralogy edges [default = 0]")), ToolInput(tag="in_only_orthologs", input_type=Boolean(optional=True), prefix="--onlyOrthologs", doc=InputDocumentation(doc=":               make only orthologs to the reference appear in the MAF\nblocks [default = 0]")), ToolInput(tag="in_only_sequence_names", input_type=Boolean(optional=True), prefix="--onlySequenceNames", doc=InputDocumentation(doc=":           use only sequence names for output names.  By default,\nthe UCSC convention of Genome.Sequence is used")), ToolInput(tag="in_print_tree", input_type=Boolean(optional=True), prefix="--printTree", doc=InputDocumentation(doc=":                   print a gene tree for every block [default = 0]")), ToolInput(tag="in_ref_genome", input_type=String(optional=True), prefix="--refGenome", doc=InputDocumentation(doc=":           name of reference genome (root if empty) [default =\n'']")), ToolInput(tag="in_ref_sequence", input_type=String(optional=True), prefix="--refSequence", doc=InputDocumentation(doc=":         name of reference sequence within reference genome\n(all sequences if empty) [default = '']")), ToolInput(tag="in_ref_targets", input_type=File(optional=True), prefix="--refTargets", doc=InputDocumentation(doc=":          bed file coordinates of intervals in the reference\ngenome to export (or 'stdin' to pipe from standard\ninput) [default = '']")), ToolInput(tag="in_root_genome", input_type=String(optional=True), prefix="--rootGenome", doc=InputDocumentation(doc=":          name of root genome (none if empty) [default = '']")), ToolInput(tag="in_start", input_type=Int(optional=True), prefix="--start", doc=InputDocumentation(doc=":               coordinate within reference genome (or sequence if\nspecified) to start at [default = 0]")), ToolInput(tag="in_target_genomes", input_type=String(optional=True), prefix="--targetGenomes", doc=InputDocumentation(doc=":       comma-separated (no spaces) list of target genomes\n(others are excluded) (vist all if empty) [default =\n'']")), ToolInput(tag="in_unique", input_type=Boolean(optional=True), prefix="--unique", doc=InputDocumentation(doc=":                      only write column whose left-most reference coordinate\nis in the specified range.  this is used to insure")), ToolInput(tag="in_hal_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_maf_file", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_append", output_type=File(optional=True), selector=InputSelector(input_to_select="in_append", type_hint=File()), doc=OutputDocumentation(doc=":                      append to instead of overwrite output file. [default =\n0]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hal2Maf_V0_1_0().translate("wdl", allow_empty_container=True)

