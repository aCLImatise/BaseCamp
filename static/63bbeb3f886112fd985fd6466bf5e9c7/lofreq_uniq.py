from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String, Float

Lofreq_Uniq_V0_1_0 = CommandToolBuilder(tool="lofreq_uniq", base_command=["lofreq", "uniq"], inputs=[ToolInput(tag="in_vcf_in", input_type=File(optional=True), prefix="--vcf-in", doc=InputDocumentation(doc="Input vcf file listing variants [- = stdin; gzip supported]")), ToolInput(tag="in_vcf_out", input_type=File(optional=True), prefix="--vcf-out", doc=InputDocumentation(doc="Output vcf file [- = stdout; gzip supported]")), ToolInput(tag="in_uni_freq", input_type=Boolean(optional=True), prefix="--uni-freq", doc=InputDocumentation(doc="Assume variants have uniform test frequency of this value (unused if <=0) [-1.000000]")), ToolInput(tag="in_uniq_thresh", input_type=Int(optional=True), prefix="--uniq-thresh", doc=InputDocumentation(doc="Minimum uniq phred-value required. Conflicts with -m. 0 for off (default=0)")), ToolInput(tag="in_uniq_mtc", input_type=String(optional=True), prefix="--uniq-mtc", doc=InputDocumentation(doc="Uniq multiple testing correction type. One of 'bonf', 'holm' or 'fdr'. (default=MTC_FDR)")), ToolInput(tag="in_uniq_alpha", input_type=Float(optional=True), prefix="--uniq-alpha", doc=InputDocumentation(doc="Uniq Multiple testing correction p-value threshold (default=0.001000)")), ToolInput(tag="in_uniq_n_tests", input_type=Int(optional=True), prefix="--uniq-ntests", doc=InputDocumentation(doc="Uniq multiple testing correction p-value threshold (default=#vars)")), ToolInput(tag="in_output_all", input_type=Boolean(optional=True), prefix="--output-all", doc=InputDocumentation(doc="Report all variants instead of only the ones, marked unique.\nNote, that variants already filtered in input will not be printed.")), ToolInput(tag="in_use_det_lim", input_type=Boolean(optional=True), prefix="--use-det-lim", doc=InputDocumentation(doc="Report variants if they are above implied detection limit\nDefault is to use binomial test to check for frequency differences")), ToolInput(tag="in_use_orphan", input_type=Boolean(optional=True), prefix="--use-orphan", doc=InputDocumentation(doc="Don't ignore anomalous read pairs / orphan reads")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Enable debugging")), ToolInput(tag="in_indexed_in_dot_bam", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_vcf_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_vcf_out", type_hint=File()), doc=OutputDocumentation(doc="Output vcf file [- = stdout; gzip supported]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Lofreq_Uniq_V0_1_0().translate("wdl", allow_empty_container=True)

