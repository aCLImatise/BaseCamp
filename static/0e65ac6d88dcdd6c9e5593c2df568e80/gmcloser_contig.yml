&id003 !Command
command:
- gmcloser
- contig
positional: []
named:
- !Flag
  description: 'is not specied:'
  synonyms:
  - --target_scaf
  args: !SimpleFlagArg
    name: option
  optional: true
parent: &id001 !Command
  command:
  - gmcloser
  positional: []
  named:
  - !Flag
    description: input target scaffold fasta file (e.g., scaf.fa) [mandatory]
    synonyms:
    - --target_scaf
    - -t
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: input query contig (or long-read) fasta file (e.g., contig.fa) (if
      long reads are used, -lr option must be specified) [mandatory]
    synonyms:
    - --query_seq
    - -q
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: prefix name of output files [mandatory]
    synonyms:
    - --prefix_out
    - -p
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: space-separated list of fastq or fasta files (or gzip compressed
      files) of paired-end reads (e.g., -r read_pe1.fq read_pe2.fq)
    synonyms:
    - --read_file
    - -r
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: read length of paired-end reads specified with the -r, -st, -sq,
      or -sd option (mean read length if read lengths are variable) [mandatory]
    synonyms:
    - --read_len
    - -l
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'average insert size of paired-end reads [>read_len <20001, default:
      400]'
    synonyms:
    - --insert
    - -i
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'standard deviation of insert size of paired-end reads [default:
      40]'
    synonyms:
    - --sd_insert
    - -d
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'fastq or fasta [default: fastq]'
    synonyms:
    - --read_format
    - -f
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: space-separated list of sam alignment file(s) for target scaffolds,
      created in a single-end read alignment mode for paired-end reads (e.g., -sa
      tPE1.sam tPE2.sam, for paired-end read files PE1.fq and PE2.fq)
    synonyms:
    - --sam_talign
    - -st
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: space-separated list of sam alignment file(s) for query contigs,
      created in a single-end read alignment mode for paired-end reads (e.g., -sa
      qPE1.sam qPE2.sam, for paired-end read files PE1.fq and PE2.fq)
    synonyms:
    - --sam_qalign
    - -sq
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: path of directory (i.e., bowtie_align) containing sam alignment files
      generated from a previous job with GMcloser (this can be used in place of -st
      and -sq option)
    synonyms:
    - --sam_dir
    - -sd
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: Nucmer alignment file for query against target [optional]
    synonyms:
    - --align_file
    - -a
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'connect between gap-encompassing subcontig pairs with their original
      (not merged with query contigs) termini [default: false]'
    synonyms:
    - --connect_subcon
    - -c
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'extend scaffold temini with aligned query sequences [default: false]
      (When using long read query, this option is disabled in the current version)'
    synonyms:
    - --extend
    - -et
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'conduct alignment between target and query contigs with BLASTn [default:
      false] (Nucmer alignment by default)'
    synonyms:
    - --blast
    - -b
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: "minimum overlap length to be filtered for Nucmer alignments.\nContig-alignments\
      \ that satisfy both the values specified with -mm and -mi are selected, irrespective\
      \ of any mapping rates of PE-reads. [>49, default: 300]"
    synonyms:
    - --min_match_len
    - -mm
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'minimum overlap identity (%) to be filtered for Nucmer alignments.
      Alignments are selected by combination with -mm option. [95~100, default: 99]'
    synonyms:
    - --min_identity
    - -mi
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'minimum overlap length for merging between neighbor subcontigs with
      YASS aligner [>14, default: 20]'
    synonyms:
    - --min_len_local
    - -ml
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'minimum length of subcontigs, to be used for gapclosing [default:
      100]'
    synonyms:
    - --min_subcon
    - -ms
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'minimum length of gap, when spliting the target scaffold sequences
      into subcontigs  [>0, default: 1]'
    synonyms:
    - --min_gap_size
    - -g
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'maximum length of indel, observed in alignments between target subcontigs
      and query contigs. The alignments separated by the indel will be merged. [default:
      70]'
    synonyms:
    - --max_indel
    - -is
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'maximum alignment coverage (%) of query singletones for target subcontigs
      (query with >= INT is excluded from query singletone output) [default: 60]'
    synonyms:
    - --max_qsc
    - -qsc
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'base call quality format of fastq read file; illumina (phred64)
      or sanger (phred33) [default: auto]'
    synonyms:
    - --base_qual
    - -bq
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: "nucmer exact match length, a value specified with '-l' option of\
      \ the Nucmer aligner [default: auto, increased from 30 to 50 depending on the\
      \ total contig length]"
    synonyms:
    - --nuc_len
    - -nl
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'score to add to (subtract from) the standard threshold score for
      selection of correct contig-subcontig alignments (e.g., 1 or -1) [default: 0]'
    synonyms:
    - --ad_score
    - -as
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'heterozygosity factor (specify this if your sequenced genome is
      heterozygous (>0.2% difference of the haploid size)) [default: false]'
    synonyms:
    - --hetero
    - -ht
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'number of threads (for machines with multiple processors), enabling
      all the alignment processes in parallel [default: 5]'
    synonyms:
    - --thread
    - -n
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'number of threads (for machines with multiple processors), enabling
      the subcontig-connection process in parallel [default: number specified with
      --thread]'
    synonyms:
    - --thread_connect
    - -nc
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'query sequence file is a fasta file of long reads (PacBio reads
      must be error-corrected) [default: false] (alignment is peformed with blast)'
    synonyms:
    - --long_read
    - -LR
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'fold coverage of long reads for target scaffolds [default: auto
      ; automatically calculated by dividing a total length of query by a total length
      of target]'
    synonyms:
    - --lr_cov
    - -lc
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: "minimum number of queries that are aligned to either 5'- or 3'-terminus\
      \ of a target subcontig [default: 1]"
    synonyms:
    - --min_qalign
    - -mq
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: 'number of iteration [default: 3]'
    synonyms:
    - --iterate
    - -it
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: BLASTn alignment file for query against query [optional]
    synonyms:
    - --alignq
    - -aq
    args: !SimpleFlagArg
      name: or
    optional: true
  - !Flag
    description: ''
    synonyms:
    - --help
    args: !SimpleFlagArg
      name: or
    optional: true
  parent:
  subcommands:
  - !Command
    command:
    - gmcloser
    - '5'
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: &id002
    - --help
  - !Command
    command:
    - gmcloser
    - connect
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - input
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - queries
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - factor
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - against
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - base
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - YASS
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - call
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - their
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - gap
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - name
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - fastq
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - between
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - path
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - extend
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - deviation
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - output
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - ver.
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - exact
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - reads
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - filtered
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - iteration
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - files
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - identity
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - be
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - average
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - for
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - indel
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - original
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - read
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - gap-encompassing
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - size
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - length
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - fold
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - are
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - target
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - scaffold
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - or
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - merging
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - Nucmer
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - sam
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - help
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - and
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - list
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - directory
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - either
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - overlap
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - score
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - of
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - add
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - heterozygosity
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - subcontig
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - query
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - number
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - sequence
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - temini
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - minimum
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - contigs
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - aligner
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - format
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - match
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - conduct
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - BLASTn
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - paired-end
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - sequences
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - aligned
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - with
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - alignments.
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - nucmer
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - neighbor
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - to
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - *id003
  - !Command
    command:
    - gmcloser
    - long
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - scaffolds
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - alignment
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - that
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - subcontigs
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - prefix
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - file
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - coverage
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - quality
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - insert
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - the
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - threads
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - pairs
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - space-separated
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - specified
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - standard
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - a
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - fasta
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - is
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  - !Command
    command:
    - gmcloser
    - maximum
    positional: []
    named:
    - !Flag
      description: 'is not specied:'
      synonyms:
      - --target_scaf
      args: !SimpleFlagArg
        name: option
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "--target_scaf option is not specied: \n"
    generated_using: *id002
  usage: []
  help_flag: !Flag
    description: output help message
    synonyms:
    - --help
    - -h
    args: !SimpleFlagArg
      name: or
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage:\n      GMcloser ver. 1.5\n  \n      Options:\n       --target_scaf\
    \ or -t <STR>       input target scaffold fasta file (e.g., scaf.fa) [mandatory]\n\
    \       --query_seq or -q <STR>         input query contig (or long-read) fasta\
    \ file (e.g., contig.fa) (if long reads are used, -lr option must be specified)\
    \ [mandatory]\n       --prefix_out or -p <STR>        prefix name of output files\
    \ [mandatory]\n   \n       --read_file or -r <STR>         space-separated list\
    \ of fastq or fasta files (or gzip compressed files) of paired-end reads (e.g.,\
    \ -r read_pe1.fq read_pe2.fq)\n       --read_len or -l <INT>          read length\
    \ of paired-end reads specified with the -r, -st, -sq, or -sd option (mean read\
    \ length if read lengths are variable) [mandatory]\n       --insert or -i <INT>\
    \            average insert size of paired-end reads [>read_len <20001, default:\
    \ 400]\n       --sd_insert or -d <INT>         standard deviation of insert size\
    \ of paired-end reads [default: 40]\n       --read_format or -f <STR>       fastq\
    \ or fasta [default: fastq]\n       --sam_talign or -st <STR>       space-separated\
    \ list of sam alignment file(s) for target scaffolds, created in a single-end\
    \ read alignment mode for paired-end reads (e.g., -sa tPE1.sam tPE2.sam, for paired-end\
    \ read files PE1.fq and PE2.fq)\n       --sam_qalign or -sq <STR>       space-separated\
    \ list of sam alignment file(s) for query contigs, created in a single-end read\
    \ alignment mode for paired-end reads (e.g., -sa qPE1.sam qPE2.sam, for paired-end\
    \ read files PE1.fq and PE2.fq)\n       --sam_dir or -sd <STR>          path of\
    \ directory (i.e., bowtie_align) containing sam alignment files generated from\
    \ a previous job with GMcloser (this can be used in place of -st and -sq option)\n\
    \       --align_file or -a <STR>        Nucmer alignment file for query against\
    \ target [optional]\n\n       --connect_subcon or -c          connect between\
    \ gap-encompassing subcontig pairs with their original (not merged with query\
    \ contigs) termini [default: false]\n       --extend or -et                 extend\
    \ scaffold temini with aligned query sequences [default: false] (When using long\
    \ read query, this option is disabled in the current version)\n       --blast\
    \ or -b                   conduct alignment between target and query contigs with\
    \ BLASTn [default: false] (Nucmer alignment by default)\n   \n       --min_match_len\
    \ or -mm <INT>    minimum overlap length to be filtered for Nucmer alignments.\n\
    \                                       Contig-alignments that satisfy both the\
    \ values specified with -mm and -mi are selected, irrespective of any mapping\
    \ rates of PE-reads. [>49, default: 300]\n       --min_identity or -mi <INT> \
    \    minimum overlap identity (%) to be filtered for Nucmer alignments. Alignments\
    \ are selected by combination with -mm option. [95~100, default: 99]\n       --min_len_local\
    \ or -ml <INT>    minimum overlap length for merging between neighbor subcontigs\
    \ with YASS aligner [>14, default: 20]\n       --min_subcon or -ms <INT>     \
    \  minimum length of subcontigs, to be used for gapclosing [default: 100]\n  \
    \     --min_gap_size or -g <INT>      minimum length of gap, when spliting the\
    \ target scaffold sequences into subcontigs  [>0, default: 1]\n       --max_indel\
    \ or -is <INT>        maximum length of indel, observed in alignments between\
    \ target subcontigs and query contigs. The alignments separated by the indel will\
    \ be merged. [default: 70]\n       --max_qsc or -qsc <INT>         maximum alignment\
    \ coverage (%) of query singletones for target subcontigs (query with >= INT is\
    \ excluded from query singletone output) [default: 60]\n       --base_qual or\
    \ -bq <STR>        base call quality format of fastq read file; illumina (phred64)\
    \ or sanger (phred33) [default: auto]\n       --nuc_len or -nl <INT>         \
    \ nucmer exact match length, a value specified with '-l' option of the Nucmer\
    \ aligner [default: auto, increased from 30 to 50 depending on the total contig\
    \ length]\n       --ad_score or -as <FLOAT>       score to add to (subtract from)\
    \ the standard threshold score for selection of correct contig-subcontig alignments\
    \ (e.g., 1 or -1) [default: 0]\n       --hetero or -ht                 heterozygosity\
    \ factor (specify this if your sequenced genome is heterozygous (>0.2% difference\
    \ of the haploid size)) [default: false]\n       --thread or -n <INT>        \
    \    number of threads (for machines with multiple processors), enabling all the\
    \ alignment processes in parallel [default: 5]\n       --thread_connect or -nc\
    \ <INT>   number of threads (for machines with multiple processors), enabling\
    \ the subcontig-connection process in parallel [default: number specified with\
    \ --thread]\n       --help or -h                    output help message\n   \n\
    \       [Options for long read query]\n       --long_read or -LR             \
    \ query sequence file is a fasta file of long reads (PacBio reads must be error-corrected)\
    \ [default: false] (alignment is peformed with blast)\n       --lr_cov or -lc\
    \ <INT>           fold coverage of long reads for target scaffolds [default: auto\
    \ ; automatically calculated by dividing a total length of query by a total length\
    \ of target]\n       --min_qalign or -mq <INT>       minimum number of queries\
    \ that are aligned to either 5'- or 3'-terminus of a target subcontig [default:\
    \ 1]\n       --iterate or -it <INT>          number of iteration [default: 3]\n\
    \       --alignq or -aq <STR>           BLASTn alignment file for query against\
    \ query [optional]\n\n"
  generated_using: *id002
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "--target_scaf option is not specied: \n"
generated_using: *id002
