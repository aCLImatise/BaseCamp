from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Directory, Int

Hilive_V0_1_0 = CommandToolBuilder(tool="hilive", base_command=["hilive"], inputs=[ToolInput(tag="in_illuminas_basecalls_directory", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[--bcl-dir]        Illumina's BaseCalls directory which contains the sequence information of the reads.")), ToolInput(tag="in_path_hilive_index", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[--index]          Path to the HiLive index.")), ToolInput(tag="in_length_types_read", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[--reads]          Length and types of the read segments.")), ToolInput(tag="in_print_license_information", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --license ]                  Print license information and exit.")), ToolInput(tag="in_arg_path_config", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --config ] arg               Path to a config file. Config file is in\n.ini format. Duplicate keys are not\npermitted. Instead, use comma-separated\nlists. Parameters obtained from the command\nline are prioritized over settings made in\nthe config file.\nExample for a config.ini:\nbcl-dir=./BaseCalls\nlanes=1\nout-cycle=50,100")), ToolInput(tag="in_run_info", input_type=File(optional=True), prefix="--runinfo", doc=InputDocumentation(doc="Path to Illumina's runInfo.xml file. If\nspecified, read lengths, lane count and\ntile count are automatically set in\naccordance with the sequencing run.\nParameters obtained from the command line\nor config file are prioritized over\nsettings obtained from the runInfo.xml.")), ToolInput(tag="in_continue", input_type=File(optional=True), prefix="--continue", doc=InputDocumentation(doc="Continue an interrupted HiLive run from a\nspecified cycle. We strongly recommend to\nload the config file that was automatically\ncreated for the original run to continue\nwith identical settings. This config file\n(hilive_config.ini) can be found in the\ntemporary directory specified with\n--temp-dir.")), ToolInput(tag="in_arg_specify_tiles", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --tiles ] arg                Specify the tiles to be considered for read\nalignment. [Default: [1-2][1-3][01-16] (96\ntiles)]")), ToolInput(tag="in_arg_specify_number", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --max-tile ] arg             Specify the highest tile number. The tile\nnumbers will be computed by this number,\nconsidering the correct surface count,\nswath count and tile count for Illumina\nsequencing.\nThis parameter serves as a shortcut for\n--tiles.\nExample:\n--max-tile 2216\nwill activate all tiles in\n[1-2][1-2][01-16].")), ToolInput(tag="in_arg_barcodes_beconsidered", input_type=Boolean(optional=True), prefix="-B", doc=InputDocumentation(doc="[ --barcodes ] arg             Barcode(s) of the sample(s) to be\nconsidered for read alignment. Barcodes\nmust match the barcode length(s) as\nspecified with --reads. Delimit different\nsegments of the same barcodes by '-' and\ndifferent barcodes by ','. [Default: All\nbarcodes]\nExample:\n-b ACCG-ATTG,ATGT-TGAC\nfor two different barcodes of length 2x4bp.")), ToolInput(tag="in_run_id", input_type=String(optional=True), prefix="--run-id", doc=InputDocumentation(doc="ID of the sequencing run. Should be\nobtained from runInfo.xml.")), ToolInput(tag="in_flow_cell_id", input_type=String(optional=True), prefix="--flowcell-id", doc=InputDocumentation(doc="ID of the flowcell. Should be obtained from")), ToolInput(tag="in_arg_path_directory", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --out-dir ] arg              Path to the directory that is used for the\noutput files. The directory will be created\nif it does not exist. [Default: ./out]")), ToolInput(tag="in_arg_format_output", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --out-format ] arg           Format of the output files. Currently, SAM\nand BAM format are supported. [Default:\nBAM]")), ToolInput(tag="in_arg_cycles_alignment", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --out-cycles ] arg           Cycles for that alignment output is\nwritten. The respective temporary files are\nkept. [Default: write only after the last\ncycle]")), ToolInput(tag="in_report_found_report", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="[ --out-mode ] arg             The output mode. [Default: ANYBEST]\n[ALL|A]: Report all found alignments.\n[BESTN#|N#]: Report the # best found\nalignments.\n[ALLBEST|H]: Report all found alignments\nwith the best score.\n[ANYBEST|B]: Report one best alignment.\n[UNIQUE|U]: Report only unique alignments.")), ToolInput(tag="in_report_unmapped", input_type=Boolean(optional=True), prefix="--report-unmapped", doc=InputDocumentation(doc="Activate reporting unmapped reads.\n[Default: false]")), ToolInput(tag="in_extended_cigar", input_type=Boolean(optional=True), prefix="--extended-cigar", doc=InputDocumentation(doc="Activate extended CIGAR format for the\nalignment output files ('=' for matches and\n'X' for mismatches instead of using 'M' for\nboth). [Default: false]")), ToolInput(tag="in_force_resort", input_type=Directory(optional=True), prefix="--force-resort", doc=InputDocumentation(doc="Always sort temporary alignment files\nbefore writing output. Existing sorted\nalign files are overwritten. This is only\nnecessary if the temp directory is used\nmore than once for new alignments. In\ngeneral, this is not recommended for most\napplications. [Default: false (only sort if\nno sorted files exist)]")), ToolInput(tag="in_max_soft_clip_ratio", input_type=Int(optional=True), prefix="--max-softclip-ratio", doc=InputDocumentation(doc="Maximal relative length of the front\nsoftclip (only relevant during output)\n[Default: 0.2]\nFurther explanation:\nHiLive uses an approach that requires one\nexact match of a k-mer at the beginning of\nan alignment. This can lead to unaligned\nregions at the beginning of the read which\nwe report as 'softclips'. With this\nparameter, you can control the maximal\nlength of this region.")), ToolInput(tag="in_arg_alignment_mode", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --align-mode ] arg           Alignment mode to balance speed and\naccuracy [very-fast|fast|balanced|accurate|\nvery-accurate]. This selected mode\nautomatically sets other parameters.\nIndividually configured parameters are\nprioritized over settings made by selecting\nan alignment mode. [Default: balanced]")), ToolInput(tag="in_anchor_length", input_type=Int(optional=True), prefix="--anchor-length", doc=InputDocumentation(doc="Length of the alignment anchor (or initial\nseed) [Default: set by the selected\nalignment mode]")), ToolInput(tag="in_error_interval", input_type=Int(optional=True), prefix="--error-interval", doc=InputDocumentation(doc="The interval to tolerate more errors during\nalignment (low=accurate; great=fast).\n[Default: 'anchor-length'/2]")), ToolInput(tag="in_seeding_interval", input_type=Int(optional=True), prefix="--seeding-interval", doc=InputDocumentation(doc="The interval to create new seeds\n(low=accurate; great=fast). [Default:\n'anchor-length'/2]")), ToolInput(tag="in_max_soft_clip_length", input_type=Int(optional=True), prefix="--max-softclip-length", doc=InputDocumentation(doc="The maximum length of a front softclip when\ncreating new seeds. In contrast to\n--max-softclip-ratio, this parameter may\nhave effects on runtime and mapping\naccuracy. [Default: 'readlength/2]")), ToolInput(tag="in_barcode_errors", input_type=Int(optional=True), prefix="--barcode-errors", doc=InputDocumentation(doc="The number of errors that are tolerated for\nthe barcode segments. A single value can be\nprovided to be applied for all barcode\nsegments. Alternatively, the value can be\nset for each segment individually.\n[Default: 1]\nExample:\n--barcode-errors 2 [2 errors for all\nbarcode segments]\n--barcode-errors 2,1 [2 errors for the\nfirst, 1 error for the second segment]")), ToolInput(tag="in_align_undetermined_barcodes", input_type=Boolean(optional=True), prefix="--align-undetermined-barcodes", doc=InputDocumentation(doc="Align all barcodes. Reads with a barcode\nthat don't match one of the barcodes\nspecified with '--barcodes' will be\nreported as undetermined. [Default: false]")), ToolInput(tag="in_min_base_call_quality", input_type=Int(optional=True), prefix="--min-basecall-quality", doc=InputDocumentation(doc="Minimum basecall quality for a nucleotide\nto be considered as a match [Default: 1\n(everything but N-calls)]")), ToolInput(tag="in_keep_invalid_sequences", input_type=Boolean(optional=True), prefix="--keep-invalid-sequences", doc=InputDocumentation(doc="Keep sequences of invalid reads, i.e. with\nunconsidered barcode or filtered by the\nsequencer. This option must be activated to\nreport unmapped reads. [Default: false]")), ToolInput(tag="in_arg_minimum_alignment", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --min-as ] arg               Minimum alignment score. [Default: Set\nautomatically based on the alignment mode\nand match/mismatch scores]")), ToolInput(tag="in_match_score", input_type=Int(optional=True), prefix="--match-score", doc=InputDocumentation(doc="Score for a match. [Default: 0]")), ToolInput(tag="in_mismatch_penalty", input_type=Int(optional=True), prefix="--mismatch-penalty", doc=InputDocumentation(doc="Penalty for a mismatch. [Default: 6]")), ToolInput(tag="in_insertion_opening_penalty", input_type=Int(optional=True), prefix="--insertion-opening-penalty", doc=InputDocumentation(doc="Penalty for insertion opening. [Default: 5]")), ToolInput(tag="in_insertion_extension_penalty", input_type=Int(optional=True), prefix="--insertion-extension-penalty", doc=InputDocumentation(doc="Penalty for insertion extension. [Default:\n3]")), ToolInput(tag="in_deletion_opening_penalty", input_type=Int(optional=True), prefix="--deletion-opening-penalty", doc=InputDocumentation(doc="Penalty for deletion opening. [Default: 5]")), ToolInput(tag="in_deletion_extension_penalty", input_type=Int(optional=True), prefix="--deletion-extension-penalty", doc=InputDocumentation(doc="Penalty for deletion extension. [Default:\n3]")), ToolInput(tag="in_max_gap_length", input_type=Int(optional=True), prefix="--max-gap-length", doc=InputDocumentation(doc="Maximal permitted consecutive gap length.\nIncreasing this parameter may lead to\nhighly increased runtime! [Default: 3]")), ToolInput(tag="in_soft_clip_opening_penalty", input_type=String(optional=True), prefix="--softclip-opening-penalty", doc=InputDocumentation(doc="Penalty for softclip opening (only relevant\nduring output). [Default:\n'mismatch-penalty']")), ToolInput(tag="in_soft_clip_extension_penalty", input_type=Int(optional=True), prefix="--softclip-extension-penalty", doc=InputDocumentation(doc="Penalty for softclip extension (only\nrelevant during output). [Default:\n'mismatch-penalty'/'anchor-length']")), ToolInput(tag="in_temp_dir", input_type=Directory(optional=True), prefix="--temp-dir", doc=InputDocumentation(doc="Temporary directory to store the alignment\nfiles and hilive_config.ini. [Default:\n./temp]")), ToolInput(tag="in_arg_keep_files", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="[ --keep-files ] arg           Keep intermediate alignment files for these\ncycles. The last cycle is always kept.\n[Default: Keep files of output cycles]\nFurther Explanations:\nHiLive comes with a separated executable\n'hilive-out'. This executable can be used\nto produce alignment files in SAM or BAM\nformat from existing temporary files. Thus,\noutput can only be created for cycles for\nthat keeping the temporary alignment files\nis activated. Temporary alignemnt files are\nalso needed if an interrupted run is\ncontinued with the '--continue' parameter.")), ToolInput(tag="in_keep_intermediate_files", input_type=Boolean(optional=True), prefix="-K", doc=InputDocumentation(doc="[ --keep-all-files ]           Keep all intermediate alignment files. This\noption may lead to huge disk space\nrequirements. [Default: false]")), ToolInput(tag="in_block_size", input_type=Int(optional=True), prefix="--block-size", doc=InputDocumentation(doc="Block size for the alignment input/output\nstream in Bytes. Append 'K' or 'M' to\nspecify in Kilobytes or Megabytes,\nrespectively. [Default: 64M]\nExample:\n--block-size 1024 [1024 bytes]\n--block-size 64K [64 Kilobytes]\n--block-size 64M [64 Megabytes]")), ToolInput(tag="in_compression", input_type=Int(optional=True), prefix="--compression", doc=InputDocumentation(doc="Compression of temporary alignment files.\n[Default: LZ4]\n0: no compression.\n1: Deflate (smaller).\n2: LZ4 (faster).")), ToolInput(tag="in_arg_number_spawn", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --num-threads ] arg          Number of threads to spawn (including\noutput threads). [Default: 1]")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="[ --num-out-threads ] arg      Maximum number of threads to use for\noutput. More threads may be used for output\nautomatically if threads are idle.\n[Default: 'num-threads'/2]\n")), ToolInput(tag="in_run_info_dot_xml_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--instrument-id arg               ID of the sequencing machine. Should be "))], outputs=[ToolOutput(tag="out_arg_path_config", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_path_config", type_hint=File()), doc=OutputDocumentation(doc="[ --config ] arg               Path to a config file. Config file is in\n.ini format. Duplicate keys are not\npermitted. Instead, use comma-separated\nlists. Parameters obtained from the command\nline are prioritized over settings made in\nthe config file.\nExample for a config.ini:\nbcl-dir=./BaseCalls\nlanes=1\nout-cycle=50,100")), ToolOutput(tag="out_arg_path_directory", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_path_directory", type_hint=File()), doc=OutputDocumentation(doc="[ --out-dir ] arg              Path to the directory that is used for the\noutput files. The directory will be created\nif it does not exist. [Default: ./out]")), ToolOutput(tag="out_force_resort", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_force_resort", type_hint=File()), doc=OutputDocumentation(doc="Always sort temporary alignment files\nbefore writing output. Existing sorted\nalign files are overwritten. This is only\nnecessary if the temp directory is used\nmore than once for new alignments. In\ngeneral, this is not recommended for most\napplications. [Default: false (only sort if\nno sorted files exist)]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hilive_V0_1_0().translate("wdl", allow_empty_container=True)

