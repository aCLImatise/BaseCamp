from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int

Tobias_Tfbscan_V0_1_0 = CommandToolBuilder(tool="TOBIAS_TFBScan", base_command=["TOBIAS", "TFBScan"], inputs=[ToolInput(tag="in_motifs", input_type=Boolean(optional=True), prefix="--motifs", doc=InputDocumentation(doc="File containing motifs in either MEME, PFM or JASPAR format")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="A fasta file of sequences to use for scanning motifs")), ToolInput(tag="in_regions", input_type=Boolean(optional=True), prefix="--regions", doc=InputDocumentation(doc="Subset scanning to regions of interest")), ToolInput(tag="in_outdir", input_type=File(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory for TFBS sites in one file per motif (default:\n./tfbscan_output/). NOTE: Select either --outdir or --outfile.")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="Output file for TFBS sites joined in one bed-file (default: not\nset). NOTE: Select either --outdir or --outfile.")), ToolInput(tag="in_naming", input_type=Boolean(optional=True), prefix="--naming", doc=InputDocumentation(doc="Naming convention for bed-ids and output files ('id', 'name',\n'name_id', 'id_name') (default: 'name_id')")), ToolInput(tag="in_gc", input_type=Boolean(optional=True), prefix="--gc", doc=InputDocumentation(doc="Set the gc content for background regions (default: will be\nestimated from fasta)")), ToolInput(tag="in_p_value", input_type=Boolean(optional=True), prefix="--pvalue", doc=InputDocumentation(doc="Set p-value for motif matches (default: 0.0001)")), ToolInput(tag="in_keep_overlaps", input_type=Boolean(optional=True), prefix="--keep-overlaps", doc=InputDocumentation(doc="Keep overlaps of same motifs (default: overlaps are resolved by\nkeeping best-scoring site)")), ToolInput(tag="in_add_region_columns", input_type=Boolean(optional=True), prefix="--add-region-columns", doc=InputDocumentation(doc="Add extra information columns (starting from 4th column) from")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of output logging (0: silent, 1: errors/warnings, 2: info,\n3: stats, 4: debug, 5: spam) (default: 3)")), ToolInput(tag="in_split", input_type=Int(optional=True), prefix="--split", doc=InputDocumentation(doc="Split of multiprocessing jobs (default: 100)")), ToolInput(tag="in_cores", input_type=Boolean(optional=True), prefix="--cores", doc=InputDocumentation(doc="Number of cores to use (default: 1)"))], outputs=[ToolOutput(tag="out_outdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory for TFBS sites in one file per motif (default:\n./tfbscan_output/). NOTE: Select either --outdir or --outfile.")), ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc="Output file for TFBS sites joined in one bed-file (default: not\nset). NOTE: Select either --outdir or --outfile."))], container="quay.io/biocontainers/tobias:0.12.10--py37h97743b1_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tobias_Tfbscan_V0_1_0().translate("wdl")

