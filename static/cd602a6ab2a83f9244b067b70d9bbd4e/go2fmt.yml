!Command
positional:
- !Positional
  description: a YAML representation of a GO::Model::Graph object
  position: 0
  name: obj_yaml
  optional: false
- !Positional
  description: A dump of the perl GO::Model::Graph object. You need Storable from
    CPAN for this to work. This is intended to cache objects on the filesystem, for
    fast access. The obj_storable representation may not be portable
  position: 1
  name: obj_storable
  optional: false
- !Positional
  description: A html-ified OBO output format
  position: 2
  name: text_html
  optional: false
- !Positional
  description: XML that maps directly to the GODB relational schema (can then be loaded
    using stag-storenode.pl)
  position: 3
  name: godb_prestore
  optional: false
- !Positional
  description: XML that maps directly to the Chado relational schema (can then be
    loaded using stag-storenode.pl)
  position: 4
  name: chadodb_prestore
  optional: false
named: []
command:
- go2fmt.pl
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\e[1mNAME\e[0m\n    go2fmt.pl go2obo_xml go2owl go2rdf_xml go2obo_text\n\
  \n\e[1mSYNOPSIS\e[0m\n      go2fmt.pl -w obo_xml -e errlog.xml ontology/*.ontology\n\
  \      go2fmt.pl -w obo_xml -e errlog.xml ontology/gene_ontology.obo\n\n\e[1mDESCRIPTION\e\
  [0m\n    parses any GO/OBO style ontology file and writes out as a different format\n\
  \n  \e[1mARGUMENTS\e[0m\n   -e ERRFILE\n    writes parse errors in XML - defaults\
  \ to STDERR (there should be no parse\n    errors in well formed files)\n\n   -p\
  \ FORMAT\n    determines which parser to use; if left unspecified, will make a guess\n\
  \    based on file suffix. See below for formats\n\n   -w|writer FORMAT\n    format\
  \ for output - see below for list\n\n   -|xslt XSLT\n    The name or filename of\
  \ an XSLT transform\n\n    This can either be an absolute path to a file anywhere\
  \ on the filesystem,\n    or it can just be the name of the xslt; eg\n\n      go2fmt.pl\
  \ -xslt oboxml_to_owl go.obo\n\n    If the name is specified, then first of all\
  \ $GO_ROOT/xml/xsl/*.xsl will be\n    searched; if GO_ROOT is not set, then the\
  \ perl modules dir where GO is\n    installed will be searched (the xslts will be\
  \ installed here automatically\n    if you follow the normal install process)\n\n\
  \  \e[1m-use_cache\e[0m\n    If this switch is specified, then caching mode is turned\
  \ on.\n\n    With caching mode, the first time you parse a file, then an additional\n\
  \    file will be exported in a special format that is fast to parse. This file\n\
  \    will have the same filename as the original file, except it will have the\n\
  \    \".cache\" suffix.\n\n    The next time you parse the file, this program will\
  \ automatically check\n    for the existence of the \".cache\" file. If it exists,\
  \ and is more recent\n    than the file you specified, this is parsed instead. If\
  \ it does not exist,\n    it is rebuilt.\n\n    This will bring a speed improvement\
  \ for b<some> of the output formats\n    below (such as pathlist). Most output formats\
  \ work with event-based\n    parsing, so caching the object brings no benefit and\
  \ will in fact be\n    slower than bypassing the cache\n\n  \e[1mFORMATS\e[0m\n\
  \    writable formats are\n\n    go_ont\n        Files with suffix \".ontology\"\
  \n\n        These store the ontology DAGs\n\n    go_def\n        Files with suffix\
  \ \".defs\"\n\n    go_xref\n        External database references for GO terms\n\n\
  \        Files with suffix \"2go\" (eg ec2go, metacyc2go)\n\n    go_assoc\n    \
  \    Annotations of genes or gene products using GO\n\n        Files with prefix\
  \ \"gene-association.\"\n\n    obo_text\n        Files with suffix \".obo\"\n\n\
  \        This is a new file format replacement for the existing GO flat file\n \
  \       formats. It handles ontologies, definitions and xrefs (but not\n       \
  \ associations)\n\n    obo_xml\n        Files with suffix \".obo.xml\" or \".obo-xml\"\
  \n\n        This is the XML version of the OBO flat file format above\n\n    prolog\n\
  \        prolog facts - you will need a prolog compiler/interpreter to use\n   \
  \     these. You can reason over these facts using Obol or the forthcoming\n   \
  \     Bio-LP project\n\n    tbl simple (lossy) tabular representation\n\n    summary\n\
  \        can be used on both ontology files and association files\n\n    pathlist\n\
  \        shows all paths to the root\n\n    owl OWL format (default: OWL-DL)\n\n\
  \        OWL is a W3C standard format for ontologies\n\n        You will need the\
  \ XSL files from the full go-dev distribution to run\n        this; see the XML\
  \ section in <http://www.godatabase.org/dev>\n\n    obj_yaml\n        a YAML representation\
  \ of a GO::Model::Graph object\n\n    obj_storable\n        A dump of the perl GO::Model::Graph\
  \ object. You need Storable from\n        CPAN for this to work. This is intended\
  \ to cache objects on the\n        filesystem, for fast access. The obj_storable\
  \ representation may not\n        be portable\n\n    text_html\n        A html-ified\
  \ OBO output format\n\n    godb_prestore\n        XML that maps directly to the\
  \ GODB relational schema (can then be\n        loaded using stag-storenode.pl)\n\
  \n    chadodb_prestore\n        XML that maps directly to the Chado relational schema\
  \ (can then be\n        loaded using stag-storenode.pl)\n\n  \e[1mDOCUMENTATION\e\
  [0m\n    <http://www.godatabase.org/dev>\n\n"
generated_using:
- --help
