from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Taxknife_V0_1_0 = CommandToolBuilder(tool="taxknife", base_command=["taxknife"], inputs=[ToolInput(tag="in_arg_annotate_choose", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --mode ] arg (=annotate)       choose mode:\n'traverse': follow nodes upwards in\ntaxonomy\n'annotate': looks up metainformation\nattached to nodes (e.g. names)\n'tree': writes a (sub)tree")), ToolInput(tag="in_arg_input_column", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --field ] arg (=1)             input column")), ToolInput(tag="in_unmappable_taxids_remain", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="[ --keep-not-rank ]            unmappable taxids remain (otherwise mapped\nto root)")), ToolInput(tag="in_unknown_taxonomic_ids", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --keep-not-taxid ]           unknown taxonomic IDs are kept (otherwise\nskipped)")), ToolInput(tag="in_arg_replace_unknown_taxids", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --set-invalid-traverse ] arg replace unknown taxids by this given value")), ToolInput(tag="in_arg_traverse_taxonomy", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --traverse-ranks ] arg       traverse taxonomy up to one of these ranks\n(space separated list)")), ToolInput(tag="in_set_nodes_used", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --allnodes ]                 if set, all nodes will be used, not only at\nselected ranks")), ToolInput(tag="in_arg_replace_taxids_are", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --set-invalid-annotate ] arg replace all taxids that are invalid by this\ngiven value")), ToolInput(tag="in__arg_name", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --show ] arg (=name)         either 'name', 'rank', 'path' or\n'taxid-path'")), ToolInput(tag="in_arg_select_ranks", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --name-ranks ] arg           select ranks to be considered; if not set,\ndefault ranks will be used")), ToolInput(tag="in_arg_consider_orderedspace", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="[ --tree-ranks ] arg             consider these taxonomic ranks (ordered\nspace separated list from low to high,\ne.g. species family phylum)")), ToolInput(tag="in_arg_treenewick_name", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg (=tree.newick) name of newick file to be written")), ToolInput(tag="in_fill_dummy_nodes", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --fill-intermediate ]          fill in dummy intermediate nodes if ranks\nare missing")), ToolInput(tag="in_show_scientific_names", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --names ]                      show scientific names in tree (no\ncharacter restrictions)\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Taxknife_V0_1_0().translate("wdl", allow_empty_container=True)

