from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean

Bp_Search2Gff_Pl_V0_1_0 = CommandToolBuilder(tool="bp_search2gff.pl", base_command=["bp_search2gff.pl"], inputs=[ToolInput(tag="in_optional_inputfilename_readeither", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="- (optional) inputfilename, will read\neither ARGV files or from STDIN")), ToolInput(tag="in__output_filename", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="- the output filename [default STDOUT]")), ToolInput(tag="in_search_result_format", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="- search result format (blast, fasta,waba,axt)\n(ssearch is fasta format). default is blast.")), ToolInput(tag="in_type", input_type=String(optional=True), prefix="--type", doc=InputDocumentation(doc="- if you want to see query or hit information\nin the GFF report")), ToolInput(tag="in_source", input_type=Boolean(optional=True), prefix="--source", doc=InputDocumentation(doc="- specify the source (will be algorithm name\notherwise like BLASTN)")), ToolInput(tag="in_method", input_type=Boolean(optional=True), prefix="--method", doc=InputDocumentation(doc="- the method tag (primary_tag) of the features\n(default is similarity)")), ToolInput(tag="in_score_func", input_type=Boolean(optional=True), prefix="--scorefunc", doc=InputDocumentation(doc="- a string or a file that when parsed evaluates\nto a closure which will be passed a feature\nobject and that returns the score to be printed")), ToolInput(tag="in_loc_func", input_type=Boolean(optional=True), prefix="--locfunc", doc=InputDocumentation(doc="- a string or a file that when parsed evaluates\nto a closure which will be passed two\nfeatures, query and hit, and returns the\nlocation (Bio::LocationI compliant) for the\nGFF3 feature created for each HSP; the closure\nmay use the clone_loc() and create_loc()\nfunctions for convenience, see their PODs")), ToolInput(tag="in_one_hsp", input_type=Boolean(optional=True), prefix="--onehsp", doc=InputDocumentation(doc="- only print the first HSP feature for each hit")), ToolInput(tag="in_parent", input_type=Boolean(optional=True), prefix="--parent", doc=InputDocumentation(doc="- the parent to which HSP features should refer\nif not the name of the hit or query (depending\non --type)")), ToolInput(tag="in_no_target", input_type=Boolean(optional=True), prefix="--notarget", doc=InputDocumentation(doc="- whether to always add the Target tag or not")), ToolInput(tag="in_component", input_type=Boolean(optional=True), prefix="--component", doc=InputDocumentation(doc="- generate GFF component fields (chromosome)")), ToolInput(tag="in_match", input_type=Boolean(optional=True), prefix="--match", doc=InputDocumentation(doc="- generate a 'match' line which is a container\nof all the similarity HSPs")), ToolInput(tag="in_add_id", input_type=Boolean(optional=True), prefix="--addid", doc=InputDocumentation(doc="- add ID tag in the absence of --match")), ToolInput(tag="in_cut_off", input_type=Boolean(optional=True), prefix="--cutoff", doc=InputDocumentation(doc="- specify an evalue cutoff")), ToolInput(tag="in_clone_loc", input_type=String(), position=0, doc=InputDocumentation(doc="Title : clone_loc Usage : my $l = clone_loc($feature->location);\nFunction: Helper function to simplify the task of cloning locations for\n--locfunc closures.\nPresently simply implemented using Storable::dclone().\nExample :\nReturns : A L<Bio::LocationI> object of the same type and with the\nsame properties as the argument, but physically different.\nAll structured properties will be cloned as well.\nArgs    : A L<Bio::LocationI> compliant object")), ToolInput(tag="in_create_loc", input_type=String(), position=1, doc=InputDocumentation(doc="Title : create_loc Usage : my $l = create_loc('10..12'); Function:\nHelper function to simplify the task of creating locations for --locfunc\nclosures. Creates a location from a feature- table formatted string.\nExample : Returns : A Bio::LocationI object representing the location\ngiven as formatted string. Args : A GenBank feature-table formatted\nstring.\n"))], outputs=[ToolOutput(tag="out__output_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in__output_filename", type_hint=File()), doc=OutputDocumentation(doc="- the output filename [default STDOUT]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bp_Search2Gff_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

