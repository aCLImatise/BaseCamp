from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, String, File, Boolean, Int, Float

Phylophlan_V0_1_0 = CommandToolBuilder(tool="phylophlan", base_command=["phylophlan"], inputs=[ToolInput(tag="in_input", input_type=Directory(optional=True), prefix="--input", doc=InputDocumentation(doc="Folder containing your input genomes and/or proteomes\n(default: None)")), ToolInput(tag="in_clean", input_type=String(optional=True), prefix="--clean", doc=InputDocumentation(doc="Clean the output and partial data produced for the\nspecified project (default: None)")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output folder name, otherwise it will be the name of\nthe input folder concatenated with the name of the\ndatabase used (default: None)")), ToolInput(tag="in_database", input_type=String(optional=True), prefix="--database", doc=InputDocumentation(doc="The name of the database of markers to use (default:\nNone)")), ToolInput(tag="in_db_type", input_type=String(optional=True), prefix="--db_type", doc=InputDocumentation(doc="Specify the type of the database of markers, where 'n'\nstands for nucleotides and 'a' for amino acids. If not\nspecified, PhyloPhlAn will automatically detect the\ntype of database (default: None)")), ToolInput(tag="in_config_file", input_type=File(optional=True), prefix="--config_file", doc=InputDocumentation(doc="The configuration file to load, four ready-to-use\nconfiguration files can be generated using the\n'write_default_configs.sh' script present in the\n'configs' folder (default: None)")), ToolInput(tag="in_diversity", input_type=String(optional=True), prefix="--diversity", doc=InputDocumentation(doc="Specify the expected diversity of the phylogeny,\nautomatically adjust some parameters: 'low': for\ngenus-/species-/strain-level phylogenies; 'medium':\nfor class-/order-level phylogenies; 'high': for\nphylum-/tree-of-life size phylogenies (default: None)")), ToolInput(tag="in_accurate", input_type=Boolean(optional=True), prefix="--accurate", doc=InputDocumentation(doc="Use more phylogenetic signal which can result in more\naccurate phylogeny; affected parameters depend on the\n'--diversity' level (default: False)")), ToolInput(tag="in_fast", input_type=Boolean(optional=True), prefix="--fast", doc=InputDocumentation(doc="Perform more a faster phylogeny reconstruction by\nreducing the phylogenetic positions to use; affected\nparameters depend on the '--diversity' level (default:\nFalse)")), ToolInput(tag="in_clean_all", input_type=Boolean(optional=True), prefix="--clean_all", doc=InputDocumentation(doc="Remove all installation and database files\nautomatically generated (default: False)")), ToolInput(tag="in_database_list", input_type=Boolean(optional=True), prefix="--database_list", doc=InputDocumentation(doc="List of all the available databases that can be\nspecified with the -d/--database option (default:\nFalse)")), ToolInput(tag="in_sub_mat", input_type=String(optional=True), prefix="--submat", doc=InputDocumentation(doc="Specify the substitution matrix to use, available\nsubstitution matrices can be listed with '--\nsubmat_list' (default: None)")), ToolInput(tag="in_sub_mat_list", input_type=Boolean(optional=True), prefix="--submat_list", doc=InputDocumentation(doc="List of all the available substitution matrices that\ncan be specified with the -s/--submat option (default:\nFalse)")), ToolInput(tag="in_sub_mod_list", input_type=Boolean(optional=True), prefix="--submod_list", doc=InputDocumentation(doc="List of all the available substitution models that can\nbe specified with the --maas option (default: False)")), ToolInput(tag="in_nproc", input_type=Int(optional=True), prefix="--nproc", doc=InputDocumentation(doc="The number of cores to use (default: 1)")), ToolInput(tag="in_min_num_proteins", input_type=Int(optional=True), prefix="--min_num_proteins", doc=InputDocumentation(doc="Proteomes with less than this number of proteins will\nbe discarded (default: 1)")), ToolInput(tag="in_min_len_protein", input_type=Int(optional=True), prefix="--min_len_protein", doc=InputDocumentation(doc="Proteins in proteomes shorter than this value will be\ndiscarded (default: 50)")), ToolInput(tag="in_min_num_markers", input_type=Int(optional=True), prefix="--min_num_markers", doc=InputDocumentation(doc="Input genomes or proteomes that map to less than the\nspecified number of markers will be discarded\n(default: 1)")), ToolInput(tag="in_trim", input_type=String(optional=True), prefix="--trim", doc=InputDocumentation(doc="Specify which type of trimming to perform: 'gap_trim':\nexecute what specified in the 'trim' section of the\nconfiguration file; 'gap_perc': remove columns with a\npercentage of gaps above a certain threshold (see '--\ngap_perc_threshold' parameter)'not_variant': remove\ncolumns with at least one nucleotide/amino acid\nappearing above a certain threshold (see '--\nnot_variant_threshold' parameter); 'greedy': performs\nall the above trimming steps; If not specified, no\ntrimming will be performed (default: None)")), ToolInput(tag="in_gap_perc_threshold", input_type=Float(optional=True), prefix="--gap_perc_threshold", doc=InputDocumentation(doc="Specify the value used to consider a column not\nvariant when '--trim not_variant' is specified\n(default: 0.67)")), ToolInput(tag="in_not_variant_threshold", input_type=Float(optional=True), prefix="--not_variant_threshold", doc=InputDocumentation(doc="Specify the value used to consider a column not\nvariant when '--trim not_variant' is specified\n(default: 0.99)")), ToolInput(tag="in_subsample", input_type=String(optional=True), prefix="--subsample", doc=InputDocumentation(doc="The number of positions to retain from each single\nmarker, available option are: 'phylophlan': specific\nnumber of positions for each PhyloPhlAn marker (only\nwhen '--database phylophlan'); 'onethousand': return\nthe top 1000 positions; 'sevenhundred': return the top\n700; 'fivehundred': return the top 500; 'threehundred'\nreturn the top 300; 'onehundred': return the top 100\npositions; 'fifty': return the top 50 positions;\n'twentyfive': return the top 25 positions;\n'fiftypercent': return the top 50 percent positions;\n'twentyfivepercent': return the top 25% positions;\n'tenpercent': return the top 10% positions; If not\nspecified, the complete alignment will be used\n(default: None)")), ToolInput(tag="in_unknown_fraction", input_type=Float(optional=True), prefix="--unknown_fraction", doc=InputDocumentation(doc="Define the amount of unknowns ('X' and '-') allowed in\neach column of the MSA of the markers (default: 0.3)")), ToolInput(tag="in_scoring_function", input_type=String(optional=True), prefix="--scoring_function", doc=InputDocumentation(doc="Specify which scoring function to use to evaluate\ncolumns in the MSA results (default: None)")), ToolInput(tag="in_sort", input_type=Boolean(optional=True), prefix="--sort", doc=InputDocumentation(doc="If specified, the markers will be ordered, when using\nthe PhyloPhlAn database, it will be automatically set\nto 'True' (default: False)")), ToolInput(tag="in_remove_fragmentary_entries", input_type=Boolean(optional=True), prefix="--remove_fragmentary_entries", doc=InputDocumentation(doc="If specified the MSAs will be checked and cleaned from\nfragmentary entries. See --fragmentary_threshold for\nthe threshold values above which an entry will be\nconsidered fragmentary (default: False)")), ToolInput(tag="in_fragmentary_threshold", input_type=Float(optional=True), prefix="--fragmentary_threshold", doc=InputDocumentation(doc="The fraction of gaps in the MSA to be considered\nfragmentary and hence discarded (default: 0.85)")), ToolInput(tag="in_min_num_entries", input_type=Int(optional=True), prefix="--min_num_entries", doc=InputDocumentation(doc="The minimum number of entries to be present for each\nof the markers in the database (default: 4)")), ToolInput(tag="in_maas", input_type=File(optional=True), prefix="--maas", doc=InputDocumentation(doc="Select a mapping file that specifies the substitution\nmodel of amino acid to use for each of the markers for\nthe gene tree reconstruction. File must be tab-\nseparated (default: None)")), ToolInput(tag="in_remove_only_gaps_entries", input_type=Boolean(optional=True), prefix="--remove_only_gaps_entries", doc=InputDocumentation(doc="If specified, entries in the MSAs composed only of\ngaps ('-') will be removed. This is equivalent to\nspecify '--remove_fragmentary_entries\n--fragmentary_threshold 1' (default: False)")), ToolInput(tag="in_mutation_rates", input_type=Boolean(optional=True), prefix="--mutation_rates", doc=InputDocumentation(doc="If specified will produced a mutation rates table for\neach of the aligned markers and a summary table for\nthe concatenated MSA. This operation can take a long\ntime to finish (default: False)")), ToolInput(tag="in_force_nucleotides", input_type=Boolean(optional=True), prefix="--force_nucleotides", doc=InputDocumentation(doc="If specified force PhyloPhlAn to use nucleotide\nsequences for the phylogenetic analysis, even in the\ncase of a database of amino acids (default: False)")), ToolInput(tag="in_update", input_type=Boolean(optional=True), prefix="--update", doc=InputDocumentation(doc="Update the databases file (default: False)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Makes PhyloPhlAn verbose (default: False)")), ToolInput(tag="in_input_folder", input_type=Directory(optional=True), prefix="--input_folder", doc=InputDocumentation(doc="Path to the folder containing the input data (default:\ninput/)")), ToolInput(tag="in_data_folder", input_type=File(optional=True), prefix="--data_folder", doc=InputDocumentation(doc="Path to the folder where to store the intermediate\nfiles, default is 'tmp' inside the project's output\nfolder (default: None)")), ToolInput(tag="in_databases_folder", input_type=Directory(optional=True), prefix="--databases_folder", doc=InputDocumentation(doc="Path to the folder containing the database files\n(default: phylophlan_databases/)")), ToolInput(tag="in_sub_mat_folder", input_type=Directory(optional=True), prefix="--submat_folder", doc=InputDocumentation(doc="Path to the folder containing the substitution\nmatrices to use to compute the column score for the\nsubsampling step (default:\nphylophlan_substitution_matrices/)")), ToolInput(tag="in_sub_mod_folder", input_type=Directory(optional=True), prefix="--submod_folder", doc=InputDocumentation(doc="Path to the folder containing the mapping file with\nsubstitution models for each marker for the gene tree\nbuilding (default: phylophlan_substitution_models/)")), ToolInput(tag="in_configs_folder", input_type=Directory(optional=True), prefix="--configs_folder", doc=InputDocumentation(doc="Path to the folder containing the configuration files\n(default: phylophlan_configs/)")), ToolInput(tag="in_output_folder", input_type=Directory(optional=True), prefix="--output_folder", doc=InputDocumentation(doc="Path to the output folder where to save the results\n(default: )")), ToolInput(tag="in_genome_extension", input_type=String(optional=True), prefix="--genome_extension", doc=InputDocumentation(doc="Extension for input genomes (default: .fna)")), ToolInput(tag="in_proteome_extension", input_type=String(optional=True), prefix="--proteome_extension", doc=InputDocumentation(doc="Extension for input proteomes (default: .faa)\n"))], outputs=[ToolOutput(tag="out_data_folder", output_type=File(optional=True), selector=InputSelector(input_to_select="in_data_folder", type_hint=File()), doc=OutputDocumentation(doc="Path to the folder where to store the intermediate\nfiles, default is 'tmp' inside the project's output\nfolder (default: None)")), ToolOutput(tag="out_output_folder", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_folder", type_hint=File()), doc=OutputDocumentation(doc="Path to the output folder where to save the results\n(default: )"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phylophlan_V0_1_0().translate("wdl", allow_empty_container=True)

