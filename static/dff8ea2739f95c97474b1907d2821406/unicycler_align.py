from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Unicycler_Align_V0_1_0 = CommandToolBuilder(tool="unicycler_align", base_command=["unicycler_align"], inputs=[ToolInput(tag="in_ref", input_type=File(optional=True), prefix="--ref", doc=InputDocumentation(doc="FASTA file containing one or more reference")), ToolInput(tag="in_sam", input_type=File(optional=True), prefix="--sam", doc=InputDocumentation(doc="SAM file of resulting alignments")), ToolInput(tag="in_contamination", input_type=File(optional=True), prefix="--contamination", doc=InputDocumentation(doc="FASTA file of known contamination in long reads")), ToolInput(tag="in_scores", input_type=String(optional=True), prefix="--scores", doc=InputDocumentation(doc="Comma-delimited string of alignment scores: match,\nmismatch, gap open, gap extend (default: 3,-6,-5,-2)")), ToolInput(tag="in_low_score", input_type=String(optional=True), prefix="--low_score", doc=InputDocumentation(doc="Score threshold - alignments below this are\nconsidered poor (default: set threshold\nautomatically)")), ToolInput(tag="in_keep_bad", input_type=Boolean(optional=True), prefix="--keep_bad", doc=InputDocumentation(doc="Include alignments in the results even if they are\nbelow the low score threshold (default: low-scoring\nalignments are discarded)")), ToolInput(tag="in_sensitivity", input_type=Int(optional=True), prefix="--sensitivity", doc=InputDocumentation(doc="A number from 0 (least sensitive) to 3 (most\nsensitive) (default: 0)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads used (default: number of CPUs, up\nto 8)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of stdout information (0 to 4) (default: 1)")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--min_len", doc=InputDocumentation(doc="Minimum alignment length (bp) - exclude alignments\nshorter than this length (default: 100)")), ToolInput(tag="in_allowed_overlap", input_type=Int(optional=True), prefix="--allowed_overlap", doc=InputDocumentation(doc="Allow this much overlap between alignments in a\nsingle read (default: 100)\n")), ToolInput(tag="in_reads", input_type=String(optional=True), prefix="--reads", doc=InputDocumentation(doc="")), ToolInput(tag="in_sequences", input_type=String(), position=0, doc=InputDocumentation(doc="--reads READS           FASTQ or FASTA file of long reads"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Unicycler_Align_V0_1_0().translate("wdl", allow_empty_container=True)

