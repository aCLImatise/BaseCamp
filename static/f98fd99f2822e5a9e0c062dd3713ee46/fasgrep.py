from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Fasgrep_V0_1_0 = CommandToolBuilder(tool="fasgrep", base_command=["fasgrep"], inputs=[ToolInput(tag="in_sequence", input_type=Boolean(optional=True), prefix="--sequence", doc=InputDocumentation(doc="Print records whose sequence data match the regex. Default:\n[query identifiers]")), ToolInput(tag="in_description", input_type=Boolean(optional=True), prefix="--description", doc=InputDocumentation(doc="Print records whose descriptions match the regex. Default:\n[query identifiers]")), ToolInput(tag="in_split_descriptions_matches", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[int], --field=[int]\nSplit descriptions into fields, and print records for which a\nspecific numbered field matches the regex. With this option, the\ndescription is split into fields using strings of white space as\nfield delimiters (the Perl default).\nThis option takes a mandatory integer option argument giving the\nindex for which field the regex should query. One-based indexing\nis used, so the first field after the identifier has index 1. As\nstandard in Perl, negative indices count backwards from the last\nfield in the description; field '-1' is the last field, '-2' is\nthe second-to-last etc.\nIn fasta files, the identifier occurs between the record\nseparator ('>') and the first whitespace on the identifier line,\nand the description is everything after the first string of\nwhite space on the identifier line. Therefore the identifier is\ncounted as the 0th field, which is what fasgrep matches by\ndefault.")), ToolInput(tag="in_query_sequence_records", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[string], --tag=[string]\nQuery sequence records by values of a named tag in the\ndescription. Name-value pairs in the description are expected to\nhave the format 'name:value' as generated by FAST tools (such as\nfaslen) or 'name=value' as common in General Feature Format. The\n'name' must contain only characters from the set [a-zA-Z0-9_-].\nThe 'value' is any string of non-whitespace characters. Sequence\nrecords for which the specified tag does not exist will not be\nwritten to output. Currently only the first (left-most)\nocccurence of a tag is tested.")), ToolInput(tag="in_use_regex_regex", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="[regex], --split-on-regex=[regex]\nUse regex <regex> to split the description for the -f option\ninstead of the perl default (which splits on one or more\nwhitespace characters). Special characters must be quoted to\nprotect them from the shell.")), ToolInput(tag="in_negate", input_type=Boolean(optional=True), prefix="--negate", doc=InputDocumentation(doc="Output sequences that do not match the regular expression\nargument.")), ToolInput(tag="in_insensitive", input_type=Boolean(optional=True), prefix="--insensitive", doc=InputDocumentation(doc="Match data case-insensitively.")), ToolInput(tag="in_iupac_expand_nuc", input_type=Boolean(optional=True), prefix="--iupac-expand-nuc", doc=InputDocumentation(doc="Expand IUPAC ambiguity symbols in the regex argument for DNA/RNA\nsequence matching (implies -s, matching on sequence data). For\nexample, the symbol 'B' in the regex is equivalent to '[CGTU]'.\nThis option, -e, has priority over -p.")), ToolInput(tag="in_rev_com_iupac_expand_nuc", input_type=Boolean(optional=True), prefix="--revcom-iupac-expand-nuc", doc=InputDocumentation(doc="Reverse complement the regular-expression and expand IUPAC\nambiguity symbols for DNA/RNA sequence matching (implies -s,\nmatching on sequence data). For example, the symbol 'B' in the\nregex is equivalent to '[ACG]'. This option, -r, takes priority\nover -e or -p. priority.")), ToolInput(tag="in_iupac_expand_prot", input_type=Boolean(optional=True), prefix="--iupac-expand-prot", doc=InputDocumentation(doc="Expand IUPAC ambiguity symbols in the regex argyment for protein\nsequence matching (implies -s, matching on sequence data).")), ToolInput(tag="in_specify_type_sequence", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[dna|rna|protein], --moltype=[dna|rna|protein]\nSpecify the type of sequence on input (should not be needed in\nmost cases, but sometimes Bioperl cannot guess and complains\nwhen processing data).")), ToolInput(tag="in_man", input_type=Boolean(optional=True), prefix="--man", doc=InputDocumentation(doc="Print the manual page and exit.")), ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="--log", doc=InputDocumentation(doc="Creates, or appends to, a generic FAST logfile in the current\nworking directory. The logfile records date/time of execution,\nfull command with options and arguments, and an optional\ncomment.")), ToolInput(tag="in_use_name_default", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="[string], --logname=[string]\nUse [string] as the name of the logfile. Default is\n'FAST.log.txt'.")), ToolInput(tag="in_include_comment_logfile", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="[string], --comment=[string]\nInclude comment [string] in logfile. No comment is saved by\ndefault.")), ToolInput(tag="in_format", input_type=Boolean(optional=True), prefix="--format", doc=InputDocumentation(doc="=[format]\nUse alternative format for input. See man page for 'fasconvert'\nfor allowed formats. This is for convenience; the FAST tools are\ndesigned to exchange data in Fasta format, and 'fasta' is the\ndefault format for this tool.")), ToolInput(tag="in_fast_q", input_type=String(optional=True), prefix="--fastq", doc=InputDocumentation(doc="> Use fastq format as input and output."))], outputs=[], container="quay.io/biocontainers/perl-fast:1.06--pl526_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fasgrep_V0_1_0().translate("wdl")

