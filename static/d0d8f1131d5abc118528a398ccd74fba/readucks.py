from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, String, Int, Array

Readucks_V0_1_0 = CommandToolBuilder(tool="readucks", base_command=["readucks"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="FASTQ of input reads or a directory which will be\nrecursively searched for FASTQ files (required).")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="Output directory (default: working directory)")), ToolInput(tag="in_bin_barcodes", input_type=Boolean(optional=True), prefix="--bin_barcodes", doc=InputDocumentation(doc="Reads will be binned based on their barcode and\nsaved to separate files. (default: False)")), ToolInput(tag="in_annotate_files", input_type=Boolean(optional=True), prefix="--annotate_files", doc=InputDocumentation(doc="Writes a CSV file for each input file containing\nbarcode calls for each read. (default: False)")), ToolInput(tag="in_extended_info", input_type=Boolean(optional=True), prefix="--extended_info", doc=InputDocumentation(doc="Writes extended information about barcode calls.\n(default: False)")), ToolInput(tag="in_summary_info", input_type=Boolean(optional=True), prefix="--summary_info", doc=InputDocumentation(doc="Writes another file with information about barcode\ncalls. (default: False)")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Demuxing mode, one of ['stringent','lenient',\n'porechop']. (default: porechop)")), ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Optional prefix to file names")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="The number of threads to use (1 to turn off\nmultithreading) (default: 2)")), ToolInput(tag="in_num_reads_in_batch", input_type=Int(optional=True), prefix="--num_reads_in_batch", doc=InputDocumentation(doc="The number of reads to process (and hold in memory)\nat a time (default: 200)")), ToolInput(tag="in_check_reads", input_type=Int(optional=True), prefix="--check_reads", doc=InputDocumentation(doc="Number of barcodes to classify before filtering\nbarcode set (default: 1000)")), ToolInput(tag="in_adapter_threshold", input_type=Int(optional=True), prefix="--adapter_threshold", doc=InputDocumentation(doc="Identity required for a barcode to be included after\nfiltering (default: 90)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of output information: 0 = none, 1 = some, 2 =\nlots (default: 1)")), ToolInput(tag="in_require_two_barcodes", input_type=Boolean(optional=True), prefix="--require_two_barcodes", doc=InputDocumentation(doc="Match barcodes at both ends of read (default single)")), ToolInput(tag="in_report_alternate_call", input_type=Boolean(optional=True), prefix="--report_alternate_call", doc=InputDocumentation(doc="Reports double/single barcode call to csv in\nsingle/double barcoding mode (default: False)")), ToolInput(tag="in_native_barcodes", input_type=Boolean(optional=True), prefix="--native_barcodes", doc=InputDocumentation(doc="Only attempts to match the 24 native barcodes\n(default)")), ToolInput(tag="in_pcr_barcodes", input_type=Boolean(optional=True), prefix="--pcr_barcodes", doc=InputDocumentation(doc="Only attempts to match the 96 PCR barcodes (default:\nFalse)")), ToolInput(tag="in_rapid_barcodes", input_type=Boolean(optional=True), prefix="--rapid_barcodes", doc=InputDocumentation(doc="Only attempts to match the 12 rapid barcodes\n(default: False)")), ToolInput(tag="in_limit_barcodes_to", input_type=Array(t=String(), optional=True), prefix="--limit_barcodes_to", doc=InputDocumentation(doc="Specify a list of barcodes to look for (numbers\nrefer to native, PCR or rapid)")), ToolInput(tag="in_threshold", input_type=Int(optional=True), prefix="--threshold", doc=InputDocumentation(doc="A read must have at least this percent identity to a\nbarcode (default: 75)")), ToolInput(tag="in_secondary_threshold", input_type=Int(optional=True), prefix="--secondary_threshold", doc=InputDocumentation(doc="The second barcode must have at least this percent\nidentity (and match the first one) (default: 65)")), ToolInput(tag="in_score_diff", input_type=Int(optional=True), prefix="--score_diff", doc=InputDocumentation(doc="The second barcode must have at least this percent\nidentity (and match the first one) (default: 5)")), ToolInput(tag="in_scoring_scheme", input_type=String(optional=True), prefix="--scoring_scheme", doc=InputDocumentation(doc="Comma-delimited string of alignment scores: match,\nmismatch, gap open, gap extend (default: 3,-6,-5,-2)"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory (default: working directory)"))], container="quay.io/biocontainers/readucks:0.0.3--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Readucks_V0_1_0().translate("wdl")

