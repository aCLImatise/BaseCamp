from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String

Coolbox_Joint_View_V0_1_0 = CommandToolBuilder(tool="coolbox_joint_view", base_command=["coolbox", "joint_view"], inputs=[ToolInput(tag="in_current_range", input_type=String(), position=0, doc=InputDocumentation(doc="frames")), ToolInput(tag="in_add", input_type=String(), position=0, doc=InputDocumentation(doc="Add a Element(Track, Coverage, Feature), for example: coolbox add XAxis")), ToolInput(tag="in_end_with", input_type=String(), position=1, doc=InputDocumentation(doc="End the with block")), ToolInput(tag="in_gen_notebook", input_type=String(), position=2, doc=InputDocumentation(doc="Generate The notebook contain codes for run coolbox browser.")), ToolInput(tag="in_go_to", input_type=String(), position=3, doc=InputDocumentation(doc="Goto a genome range.")), ToolInput(tag="in_joint_view", input_type=String(), position=4, doc=InputDocumentation(doc="Start a new frame positioned at the specified frame_pos in the final joint view. The center frame should be a single Cool, HicMat, DotHic track.")), ToolInput(tag="in_load_module", input_type=String(), position=5, doc=InputDocumentation(doc="Import custom tracks from a module/package for example:")), ToolInput(tag="in_plot", input_type=String(), position=6, doc=InputDocumentation(doc="Draw a figure within a genome range and save to file")), ToolInput(tag="in_print_source", input_type=String(), position=7, doc=InputDocumentation(doc="Print the browser composing code.")), ToolInput(tag="in_run_j_up_y_ter", input_type=String(), position=8, doc=InputDocumentation(doc="Create a notebook according to command line, then start a jupyter process.")), ToolInput(tag="in_run_webapp", input_type=String(), position=9, doc=InputDocumentation(doc="Run a independent coolbox browser web app. (Create notebook and run voila)")), ToolInput(tag="in_set_genome", input_type=String(), position=10, doc=InputDocumentation(doc="Set reference genome for browser object.")), ToolInput(tag="in_show_doc", input_type=String(), position=11, doc=InputDocumentation(doc="Print the document of specified Element type. For example: coolbox show_doc Cool")), ToolInput(tag="in_source", input_type=String(), position=12, doc=InputDocumentation(doc="start_with\nStart a 'with' block, apply the element to all elements within the block.")), ToolInput(tag="in_version", input_type=String(), position=13, doc=InputDocumentation(doc="print coolbox version")), ToolInput(tag="in_frame_pos", input_type=String(), position=0, doc=InputDocumentation(doc="genome"))], outputs=[], container="quay.io/biocontainers/coolbox:0.3.5--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Coolbox_Joint_View_V0_1_0().translate("wdl")

