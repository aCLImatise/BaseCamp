!Command
command:
- julia
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - --project
  description: '[={<dir>|@.}]    Set <dir> as the home project/environment'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -J
  - --sysimage
  description: Start up with the given system image file
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -H
  - --home
  description: Set location of `julia` executable
  args: !SimpleFlagArg
    name: dir
- !Flag
  optional: true
  synonyms:
  - --startup-file
  description: ={yes|no}   Load `~/.julia/config/startup.jl`
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --handle-signals
  description: ={yes|no} Enable or disable Julia's default signal handlers
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --sysimage-native-code
  description: "={yes|no}\nUse native code from system image if available"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --compiled-modules
  description: "={yes|no}\nEnable or disable incremental precompilation of modules"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -e
  - --eval
  description: Evaluate <expr>
  args: !SimpleFlagArg
    name: expr
- !Flag
  optional: true
  synonyms:
  - -E
  - --print
  description: Evaluate <expr> and display the result
  args: !SimpleFlagArg
    name: expr
- !Flag
  optional: true
  synonyms:
  - -L
  - --load
  description: Load <file> immediately on all processors
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -p
  - --procs
  description: "{N|auto}      Integer value N launches N additional local worker processes\n\
    \"auto\" launches as many workers as the number of local CPU threads (logical\
    \ cores)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --machine-file
  description: Run processes on hosts listed in <file>
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -i
  description: Interactive mode; REPL runs and isinteractive() is true
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -q
  - --quiet
  description: 'Quiet startup: no banner, suppress REPL warnings'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --banner
  description: ={yes|no|auto}    Enable or disable startup banner
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --color
  description: ={yes|no|auto}     Enable or disable color text
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --history-file
  description: ={yes|no}   Load or save history
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --depwarn
  description: ={yes|no|error}  Enable or disable syntax and method deprecation warnings
    ("error" turns warnings into errors)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --warn-overwrite
  description: ={yes|no} Enable or disable method overwrite warnings
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -C
  - --cpu-target
  description: Limit usage of CPU features up to <target>; set to "help" to see the
    available options
  args: !SimpleFlagArg
    name: target
- !Flag
  optional: true
  synonyms:
  - -O
  - --optimize
  description: Set the optimization level (default level is 2 if unspecified or 3
    if used without a level)
  args: !ChoiceFlagArg
    choices: !!set
      '3':
      '2':
      '0':
      '1':
- !Flag
  optional: true
  synonyms:
  - -g
  - -g
  description: Enable / Set the level of debug info generation (default level is 1
    if unspecified or 2 if used without a level)
  args: !SimpleFlagArg
    name: level
- !Flag
  optional: true
  synonyms:
  - --inline
  description: ={yes|no}         Control whether inlining is permitted, including
    overriding @inline declarations
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --check-bounds
  description: ={yes|no}   Emit bounds checks always or never (ignoring declarations)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --math-mode
  description: Disallow or enable unsafe floating point optimizations (overrides @fastmath
    declaration)
  args: !ChoiceFlagArg
    choices: !!set
      fast:
      ieee:
- !Flag
  optional: true
  synonyms:
  - --code-coverage
  description: "={none|user|all}, --code-coverage\nCount executions of source lines\
    \ (omitting setting is equivalent to \"user\")"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --track-allocation
  description: "={none|user|all}, --track-allocation\nCount bytes allocated by each\
    \ source line\n"
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: Print this message
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - -v
  - --version
  description: Display version information
  args: !EmptyFlagArg {}
help_text: "julia [switches] -- [programfile] [args...]\n -v, --version          \
  \   Display version information\n -h, --help                Print this message\n\
  \n --project[={<dir>|@.}]    Set <dir> as the home project/environment\n -J, --sysimage\
  \ <file>     Start up with the given system image file\n -H, --home <dir>      \
  \    Set location of `julia` executable\n --startup-file={yes|no}   Load `~/.julia/config/startup.jl`\n\
  \ --handle-signals={yes|no} Enable or disable Julia's default signal handlers\n\
  \ --sysimage-native-code={yes|no}\n                           Use native code from\
  \ system image if available\n --compiled-modules={yes|no}\n                    \
  \       Enable or disable incremental precompilation of modules\n\n -e, --eval <expr>\
  \         Evaluate <expr>\n -E, --print <expr>        Evaluate <expr> and display\
  \ the result\n -L, --load <file>         Load <file> immediately on all processors\n\
  \n -p, --procs {N|auto}      Integer value N launches N additional local worker\
  \ processes\n                           \"auto\" launches as many workers as the\
  \ number of local CPU threads (logical cores)\n --machine-file <file>     Run processes\
  \ on hosts listed in <file>\n\n -i                        Interactive mode; REPL\
  \ runs and isinteractive() is true\n -q, --quiet               Quiet startup: no\
  \ banner, suppress REPL warnings\n --banner={yes|no|auto}    Enable or disable startup\
  \ banner\n --color={yes|no|auto}     Enable or disable color text\n --history-file={yes|no}\
  \   Load or save history\n\n --depwarn={yes|no|error}  Enable or disable syntax\
  \ and method deprecation warnings (\"error\" turns warnings into errors)\n --warn-overwrite={yes|no}\
  \ Enable or disable method overwrite warnings\n\n -C, --cpu-target <target> Limit\
  \ usage of CPU features up to <target>; set to \"help\" to see the available options\n\
  \ -O, --optimize={0,1,2,3}  Set the optimization level (default level is 2 if unspecified\
  \ or 3 if used without a level)\n -g, -g <level>            Enable / Set the level\
  \ of debug info generation (default level is 1 if unspecified or 2 if used without\
  \ a level)\n --inline={yes|no}         Control whether inlining is permitted, including\
  \ overriding @inline declarations\n --check-bounds={yes|no}   Emit bounds checks\
  \ always or never (ignoring declarations)\n --math-mode={ieee,fast}   Disallow or\
  \ enable unsafe floating point optimizations (overrides @fastmath declaration)\n\
  \n --code-coverage={none|user|all}, --code-coverage\n                          \
  \ Count executions of source lines (omitting setting is equivalent to \"user\")\n\
  \ --track-allocation={none|user|all}, --track-allocation\n                     \
  \      Count bytes allocated by each source line\n\n"
generated_using:
- --help
docker_image:
