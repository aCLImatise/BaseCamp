from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String

Centroid_Fold_V0_1_0 = CommandToolBuilder(tool="centroid_fold", base_command=["centroid_fold"], inputs=[ToolInput(tag="in_arg_specify_default", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --engine ] arg    specify the inference engine (default: 'McCaskill')")), ToolInput(tag="in_arg_mixture_weights", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[ --mixture ] arg   mixture weights of inference engines")), ToolInput(tag="in_arg_weight_base", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --gamma ] arg     weight of base pairs")), ToolInput(tag="in_arg_thereshold_base", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --threshold ] arg thereshold of base pairs (this option overwrites\n'gamma')")), ToolInput(tag="in_ea", input_type=Int(optional=True), prefix="--ea", doc=InputDocumentation(doc="compute (pseudo-)expected accuracy (pseudo if arg==0,\nsampling if arg>0; arg: # of sampling)")), ToolInput(tag="in_max_mcc", input_type=Int(optional=True), prefix="--max-mcc", doc=InputDocumentation(doc="predict secondary structure by maximizing\npseudo-expected MCC (arg: # of sampling)")), ToolInput(tag="in_me_a", input_type=Boolean(optional=True), prefix="--mea", doc=InputDocumentation(doc="run as an MEA estimator")), ToolInput(tag="in_noncanonical", input_type=Boolean(optional=True), prefix="--noncanonical", doc=InputDocumentation(doc="allow non-canonical base-pairs")), ToolInput(tag="in_use_structure_constraints", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="[ --constraints ]   use structure constraints")), ToolInput(tag="in_arg_specify_filename", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output ] arg    specify filename to output predicted secondary\nstructures. If empty, use the standard output.")), ToolInput(tag="in_posteriors", input_type=String(optional=True), prefix="--posteriors", doc=InputDocumentation(doc="output base-pairing probability matrices which contain\nbase-pairing probabilities more than the given value.")), ToolInput(tag="in_o_posteriors", input_type=File(optional=True), prefix="--oposteriors", doc=InputDocumentation(doc="specify filename to output base-pairing probability\nmatrices. If empty, use the standard output.")), ToolInput(tag="in_postscript", input_type=String(optional=True), prefix="--postscript", doc=InputDocumentation(doc="draw predicted secondary structures with the\npostscript (PS) format")), ToolInput(tag="in_params", input_type=File(optional=True), prefix="--params", doc=InputDocumentation(doc="use the parameter file")), ToolInput(tag="in_arg_maximum_distance", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --max-dist ] arg (=0) the maximum distance of base-pairs")), ToolInput(tag="in_arg_specify_number", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --sampling ] arg           specify the number of samples to be generated\nfor each sequence")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --max-clusters ] arg (=10) the maximum number of clusters for the\nstochastic sampling algorithm")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="(=0)                 specify the seed for the random number\ngenerator (set this automatically if seed=0)\n")), ToolInput(tag="in_seq", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_arg_specify_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_specify_filename", type_hint=File()), doc=OutputDocumentation(doc="[ --output ] arg    specify filename to output predicted secondary\nstructures. If empty, use the standard output.")), ToolOutput(tag="out_o_posteriors", output_type=File(optional=True), selector=InputSelector(input_to_select="in_o_posteriors", type_hint=File()), doc=OutputDocumentation(doc="specify filename to output base-pairing probability\nmatrices. If empty, use the standard output."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Centroid_Fold_V0_1_0().translate("wdl", allow_empty_container=True)

