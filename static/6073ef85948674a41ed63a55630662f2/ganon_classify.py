from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Int, String, Boolean

Ganon_Classify_V0_1_0 = CommandToolBuilder(tool="ganon_classify", base_command=["ganon-classify"], inputs=[ToolInput(tag="in_single_reads", input_type=File(optional=True), prefix="--single-reads", doc=InputDocumentation(doc="File[s] with single-end reads .fq .fastq .fasta\n.fa (e.g. file1.fq[.gz],[file2.fq[.gz] ...\nfileN.fq[.gz]])")), ToolInput(tag="in_paired_reads", input_type=Float(optional=True), prefix="--paired-reads", doc=InputDocumentation(doc="Pairs of files with paired-end reads .fq .fastq\n.fasta .fa (e.g.\nfile1.1.fq[.gz],file1.2.fq[.gz],[file2.1.fq[.gz],file2.2.fq[.gz] ...\nfileN.1.fq[.gz],fileN.2.fq[.gz]])")), ToolInput(tag="in_ibf", input_type=File(optional=True), prefix="--ibf", doc=InputDocumentation(doc="ibf (Interleaved Bloom Filter) file[s] (e.g. -b\na.ibf,b.ibf OR -b a.ibf -b b.ibf )")), ToolInput(tag="in_map", input_type=File(optional=True), prefix="--map", doc=InputDocumentation(doc="map files[s]. Tab-separated file mapping target\ngroups (taxids, assemblies) and bin identifiers\nwith the following fields: target <tab> bin id\n(e.g. -g a.map,b.map OR -g a.map -g b.map)")), ToolInput(tag="in_tax", input_type=File(optional=True), prefix="--tax", doc=InputDocumentation(doc="tax (taxonomy) files[s]. Tab-separated file\nwith a complete tree with the following fields:\nnode <tab> parent node <tab> rank <tab> name (e.g.\n-g a.tax,b.tax OR -g a.tax -g b.tax)")), ToolInput(tag="in_hierarchy_labels", input_type=Int(optional=True), prefix="--hierarchy-labels", doc=InputDocumentation(doc="Hierarchy labels for the database files\n(hierarchy follows the order of the sorted labels)\n(e.g. 1_host,2_target,1_host,3). Default:\n'1_default'")), ToolInput(tag="in_min_km_ers", input_type=Int(optional=True), prefix="--min-kmers", doc=InputDocumentation(doc="Minimum percentage of k-mers matching for a\nread to to be assigned [muttualy exclusive\n--max-error]. One per filter. Default: 0.25")), ToolInput(tag="in_max_error", input_type=Int(optional=True), prefix="--max-error", doc=InputDocumentation(doc="Maximum number of errors/mismatches allowed\n[muttualy exclusive --min-kmers]. One per filter.")), ToolInput(tag="in_max_error_unique", input_type=Int(optional=True), prefix="--max-error-unique", doc=InputDocumentation(doc="Maximum number of errors/mismatches allowed for\nunique matches after filtering. One per\nhiearchy label.")), ToolInput(tag="in_strata_filter", input_type=Int(optional=True), prefix="--strata-filter", doc=InputDocumentation(doc="Additional errors allowed (relative to the best\nmatch) to filter and select matches. -1 for no\nfiltering. One per hiearchy label. Default: 0")), ToolInput(tag="in_offset", input_type=Int(optional=True), prefix="--offset", doc=InputDocumentation(doc="Offset for skipping k-mers while counting.\nFunction must be enabled on compilation time with\n-DGANON_OFFSET=ON. Default: 1 = no offset")), ToolInput(tag="in_output_prefix", input_type=String(optional=True), prefix="--output-prefix", doc=InputDocumentation(doc="Output prefix for output files (prefix.lca,\nprefix.rep, prefix.all, prefix.unc). If multi-level\nhiearchy is provded, files are generated\naccordingly (prefix.hiearchy.lca, ...). Omit for\noutput to STDOUT (only .lca will be printed)")), ToolInput(tag="in_output_all", input_type=File(optional=True), prefix="--output-all", doc=InputDocumentation(doc="Output file with all matches (prefix.all) [it\ncan be very big]")), ToolInput(tag="in_output_unclassified", input_type=Boolean(optional=True), prefix="--output-unclassified", doc=InputDocumentation(doc="Output unclassified read ids (prefix.unc)")), ToolInput(tag="in_output_single", input_type=Boolean(optional=True), prefix="--output-single", doc=InputDocumentation(doc="Generate only one output (prefix.lca and\nprefix.rep) even with multiple hierarchy levels")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads")), ToolInput(tag="in_n_reads", input_type=Int(optional=True), prefix="--n-reads", doc=InputDocumentation(doc="Number of reads for each batch. Default: 400")), ToolInput(tag="in_n_batches", input_type=Int(optional=True), prefix="--n-batches", doc=InputDocumentation(doc="Number of batches of n-reads to hold in memory.\nDefault: 1000")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output mode")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Quiet output mode (only outputs errors and\nwarnings to the STDERR)")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_all", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_all", type_hint=File()), doc=OutputDocumentation(doc="Output file with all matches (prefix.all) [it\ncan be very big]"))], container="quay.io/biocontainers/ganon:0.4.0--py38hb45e0f6_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ganon_Classify_V0_1_0().translate("wdl")

