from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Float

Pyprophet_Export_V0_1_0 = CommandToolBuilder(tool="pyprophet_export", base_command=["pyprophet", "export"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="--in", doc=InputDocumentation(doc="PyProphet input file.  [required]")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Output TSV/CSV (matrix, legacy_split,\nlegacy_merged) file.")), ToolInput(tag="in_format", input_type=Boolean(optional=True), prefix="--format", doc=InputDocumentation(doc="[matrix|legacy_split|legacy_merged|score_plots]\nExport format, either matrix,\nlegacy_split/legacy_merged\n(mProphet/PyProphet) or score_plots format.\n[default: legacy_split]")), ToolInput(tag="in_no_csv", input_type=Boolean(optional=True), prefix="--no-csv", doc=InputDocumentation(doc="Export CSV instead of TSV file.  [default:\nFalse]")), ToolInput(tag="in_no_transition_quantification", input_type=Boolean(optional=True), prefix="--no-transition_quantification", doc=InputDocumentation(doc="[format: legacy] Report aggregated\ntransition-level quantification.  [default:\nTrue]")), ToolInput(tag="in_max_transition_pep", input_type=Float(optional=True), prefix="--max_transition_pep", doc=InputDocumentation(doc="[format: legacy] Maximum PEP to retain\nscored transitions for quantification\n(requires transition-level scoring).\n[default: 0.7]")), ToolInput(tag="in_ipf", input_type=Boolean(optional=True), prefix="--ipf", doc=InputDocumentation(doc="[peptidoform|augmented|disable]\n[format: matrix/legacy] Should IPF results\nbe reported if present? 'peptidoform':\nReport results on peptidoform-level,\n'augmented': Augment OpenSWATH results with\nIPF scores, 'disable': Ignore IPF results\n[default: peptidoform]")), ToolInput(tag="in_ipf_max_pept_i_do_form_pep", input_type=Float(optional=True), prefix="--ipf_max_peptidoform_pep", doc=InputDocumentation(doc="[format: matrix/legacy] IPF: Filter results\nto maximum run-specific peptidoform-level\nPEP.  [default: 0.4]")), ToolInput(tag="in_max_rs_peak_group_q_value", input_type=Float(optional=True), prefix="--max_rs_peakgroup_qvalue", doc=InputDocumentation(doc="[format: matrix/legacy] Filter results to\nmaximum run-specific peak group-level\nq-value.  [default: 0.05]")), ToolInput(tag="in_no_peptide", input_type=Boolean(optional=True), prefix="--no-peptide", doc=InputDocumentation(doc="Append peptide-level error-rate estimates if")), ToolInput(tag="in_max_global_peptide_q_value", input_type=Float(optional=True), prefix="--max_global_peptide_qvalue", doc=InputDocumentation(doc="[format: matrix/legacy] Filter results to\nmaximum global peptide-level q-value.\n[default: 0.01]")), ToolInput(tag="in_no_protein", input_type=Boolean(optional=True), prefix="--no-protein", doc=InputDocumentation(doc="Append protein-level error-rate estimates if")), ToolInput(tag="in_max_global_protein_q_value", input_type=Float(optional=True), prefix="--max_global_protein_qvalue", doc=InputDocumentation(doc="[format: matrix/legacy] Filter results to\nmaximum global protein-level q-value.\n[default: 0.01]"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output TSV/CSV (matrix, legacy_split,\nlegacy_merged) file."))], container="quay.io/biocontainers/pyprophet:2.1.6--py37hf01694f_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pyprophet_Export_V0_1_0().translate("wdl")

