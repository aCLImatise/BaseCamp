from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, String, Array, Boolean

Eukulele_V0_1_0 = CommandToolBuilder(tool="EUKulele", base_command=["EUKulele"], inputs=[ToolInput(tag="in_config_file", input_type=File(optional=True), prefix="--config_file", doc=InputDocumentation(doc="The percentage of the total available memory which\nshould be targeted for use by processes.")), ToolInput(tag="in_use_salmon_counts", input_type=Directory(optional=True), prefix="--use_salmon_counts", doc=InputDocumentation(doc="Salmon directory is required if use_salmon_counts is\ntrue.")), ToolInput(tag="in_names_to_reads", input_type=File(optional=True), prefix="--names_to_reads", doc=InputDocumentation(doc="A file to be created or used if it exists that relates\ntranscript names to salmon counts from the salmon\ndirectory.")), ToolInput(tag="in_database", input_type=String(optional=True), prefix="--database", doc=InputDocumentation(doc="The name of the database to be used to assess the\nreads.")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="Folder where the output will be written.")), ToolInput(tag="in_sample_dir", input_type=Directory(optional=True), prefix="--sample_dir", doc=InputDocumentation(doc="Folder where the input data is located (the protein or\npeptide files to be assessed).")), ToolInput(tag="in_reference_dir", input_type=Directory(optional=True), prefix="--reference_dir", doc=InputDocumentation(doc="Folder containing the reference files for the chosen\ndatabase.")), ToolInput(tag="in_ref_fast_a", input_type=File(optional=True), prefix="--ref_fasta", doc=InputDocumentation(doc="Either a file in the reference directory where the\nfasta file for the database is located, or a directory\ncontaining multiple fasta files that constitute the\ndatabase.")), ToolInput(tag="in_alignment_choice", input_type=File(optional=True), prefix="--alignment_choice", doc=InputDocumentation(doc="If specified, the following two arguments ('--\norganisms' and '--taxonomy_organisms' are overwritten\nby the two columns of this tab-separated file.")), ToolInput(tag="in_individual_or_summary", input_type=String(optional=True), prefix="--individual_or_summary", doc=InputDocumentation(doc="These arguments are used if 'individual' is specified.")), ToolInput(tag="in_individual", input_type=Array(t=String(), optional=True), prefix="--individual", doc=InputDocumentation(doc="List of organisms to check BUSCO completeness on.")), ToolInput(tag="in_taxonomy_organisms", input_type=Array(t=String(), optional=True), prefix="--taxonomy_organisms", doc=InputDocumentation(doc="Taxonomic level of organisms specified in organisms\ntag.")), ToolInput(tag="in_trans_decoder_or_f_size", input_type=File(optional=True), prefix="--transdecoder_orfsize", doc=InputDocumentation(doc="Whether to create FASTA files containing ID'd\ntranscripts during BUSCO analysis.")), ToolInput(tag="in_run_trans_decoder", input_type=Boolean(optional=True), prefix="--run_transdecoder", doc=InputDocumentation(doc="Whether TransDecoder should be run on\nmetatranscriptomic samples. Otherwise, BLASTp is run\nif protein translated samples are providedotherwise\nBLASTx is run on nucleotide samples.")), ToolInput(tag="in_test", input_type=Boolean(optional=True), prefix="--test", doc=InputDocumentation(doc="Whether we're just running a test and should not\nexecute downloads.\n")), ToolInput(tag="in_mets_or_mags", input_type=Boolean(optional=True), prefix="--mets_or_mags", doc=InputDocumentation(doc="")), ToolInput(tag="in_subroutine", input_type=String(), position=0, doc=InputDocumentation(doc="Choice of subroutine to run."))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Folder where the output will be written."))], container="quay.io/biocontainers/eukulele:1.0.4--pyhcb32578_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Eukulele_V0_1_0().translate("wdl")

