!Command
command:
- run_genome_evaluations.py
positional: []
named:
- !Flag
  description: "Print information during execution -- useful for\ndebugging [default:\
    \ False]"
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'the output directory [default: <input_dir>]'
  synonyms:
  - -o
  - --output_dir
  args: !SimpleFlagArg
    name: OUTPUT_DIR
  optional: true
- !Flag
  description: "Method for parallelization. Valid choices are: sge,\ntorque, multithreaded\
    \ [default: multithreaded]"
  synonyms:
  - -j
  - --parallel_method
  args: !SimpleFlagArg
    name: PARALLEL_METHOD
  optional: true
- !Flag
  description: "Method for trait prediction.  See predict_traits.py\nfor full documentation.\
    \ Valid choices are:\nasr_and_weighting, nearest_neighbor, random_neighbor\n[default:\
    \ asr_and_weighting]"
  synonyms:
  - -m
  - --prediction_method
  args: !SimpleFlagArg
    name: PREDICTION_METHOD
  optional: true
- !Flag
  description: "If set, calculate confidence intervals with ace_ml or\nace_reml, and\
    \ use confidence intervals in trait\nprediction"
  synonyms:
  - --with_confidence
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "If set, calculate accuracy using the NSTI (nearest\nsequenced taxon\
    \ index) during trait prediction"
  synonyms:
  - --with_accuracy
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Method for ancestral_state_reconstruction.  See\nancestral_state_reconstruction.py\
    \ for full\ndocumentation. Valid choices are: ace_ml, ace_reml,\nace_pic, wagner\
    \ [default: wagner]"
  synonyms:
  - -a
  - --asr_method
  args: !SimpleFlagArg
    name: ASR_METHOD
  optional: true
- !Flag
  description: "Method for weighting during trait prediction.  See\npredict_traits.py\
    \ for full documentation. Valid\nchoices are: linear, exponential, equal [default:\n\
    exponential]"
  synonyms:
  - -w
  - --weighting_method
  args: !SimpleFlagArg
    name: WEIGHTING_METHOD
  optional: true
- !Flag
  description: 'Number of jobs to be submitted. [default: 100]'
  synonyms:
  - -n
  - --num_jobs
  args: !SimpleFlagArg
    name: NUM_JOBS
  optional: true
- !Flag
  description: "location to store intermediate files [default:\n<output_dir>]"
  synonyms:
  - --tmp-dir
  args: !SimpleFlagArg
    name: TMP_DIR
  optional: true
- !Flag
  description: "run all jobs even if output files exist [default:\nFalse]"
  synonyms:
  - --force
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "check if pre-existing output files have null files. If\nso remove\
    \ them and re-run. [default: False]"
  synonyms:
  - --check_for_null_files
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "directory containing one or more test datasets\n[REQUIRED]"
  synonyms:
  - -i
  - --input_dir
  args: !SimpleFlagArg
    name: INPUT_DIR
  optional: true
- !Flag
  description: "reference tree that was used with make_test_datasets\n[REQUIRED]\n"
  synonyms:
  - -t
  - --ref_tree
  args: !SimpleFlagArg
    name: REF_TREE
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: show program's version number and exit
  synonyms:
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "Usage: run_genome_evaluations.py [options] {-i/--input_dir INPUT_DIR -t/--ref_tree\
  \ REF_TREE}\n\n[] indicates optional input (order unimportant)\n{} indicates required\
  \ input (order unimportant)\n\nUsing files created by make_test_datasets.py it runs\
  \ each test dataset through the ASR (ancestral_state_reconstruction.py) and the\
  \ genome prediction (predict_traits.py)\n\nExample usage: \nPrint help message and\
  \ exit\n run_genome_evaluations.py -h\n\nMinimum Requirments: Provide a directory\
  \ that contains one or more datasets created by make_test_datasets.py and the original\
  \ reference tree used\n run_genome_evaluations.py -i test_datasets_dir -t reference_tree_fp\n\
  \nSpecify output file: \n run_genome_evaluations.py -i test_datasets_dir -t reference_tree_fp\
  \ -o output_dir\n\nForce the launching of jobs that alredy seem done by overwriting\
  \ existing output files: \n run_genome_evaluations.py --force -i test_datasets_dir\
  \ -t reference_tree_fp -o output_dir\n\nOptions:\n  --version             show program's\
  \ version number and exit\n  -h, --help            show this help message and exit\n\
  \  -v, --verbose         Print information during execution -- useful for\n    \
  \                    debugging [default: False]\n  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR\n\
  \                        the output directory [default: <input_dir>]\n  -j PARALLEL_METHOD,\
  \ --parallel_method=PARALLEL_METHOD\n                        Method for parallelization.\
  \ Valid choices are: sge,\n                        torque, multithreaded [default:\
  \ multithreaded]\n  -m PREDICTION_METHOD, --prediction_method=PREDICTION_METHOD\n\
  \                        Method for trait prediction.  See predict_traits.py\n \
  \                       for full documentation. Valid choices are:\n           \
  \             asr_and_weighting, nearest_neighbor, random_neighbor\n           \
  \             [default: asr_and_weighting]\n  --with_confidence     If set, calculate\
  \ confidence intervals with ace_ml or\n                        ace_reml, and use\
  \ confidence intervals in trait\n                        prediction\n  --with_accuracy\
  \       If set, calculate accuracy using the NSTI (nearest\n                   \
  \     sequenced taxon index) during trait prediction\n  -a ASR_METHOD, --asr_method=ASR_METHOD\n\
  \                        Method for ancestral_state_reconstruction.  See\n     \
  \                   ancestral_state_reconstruction.py for full\n               \
  \         documentation. Valid choices are: ace_ml, ace_reml,\n                \
  \        ace_pic, wagner [default: wagner]\n  -w WEIGHTING_METHOD, --weighting_method=WEIGHTING_METHOD\n\
  \                        Method for weighting during trait prediction.  See\n  \
  \                      predict_traits.py for full documentation. Valid\n       \
  \                 choices are: linear, exponential, equal [default:\n          \
  \              exponential]\n  -n NUM_JOBS, --num_jobs=NUM_JOBS\n              \
  \          Number of jobs to be submitted. [default: 100]\n  --tmp-dir=TMP_DIR \
  \    location to store intermediate files [default:\n                        <output_dir>]\n\
  \  --force               run all jobs even if output files exist [default:\n   \
  \                     False]\n  --check_for_null_files\n                       \
  \ check if pre-existing output files have null files. If\n                     \
  \   so remove them and re-run. [default: False]\n\n  REQUIRED options:\n    The\
  \ following options must be provided under all circumstances.\n\n    -i INPUT_DIR,\
  \ --input_dir=INPUT_DIR\n                        directory containing one or more\
  \ test datasets\n                        [REQUIRED]\n    -t REF_TREE, --ref_tree=REF_TREE\n\
  \                        reference tree that was used with make_test_datasets\n\
  \                        [REQUIRED]\n"
generated_using:
- --help
