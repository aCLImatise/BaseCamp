from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int

Sequana_Compressor_V0_1_0 = CommandToolBuilder(tool="sequana_compressor", base_command=["sequana_compressor"], inputs=[ToolInput(tag="in_source", input_type=String(optional=True), prefix="--source", doc=InputDocumentation(doc="be provided but no analysis will be performed")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="set verbosity off")), ToolInput(tag="in_recursive", input_type=Boolean(optional=True), prefix="--recursive", doc=InputDocumentation(doc="recursive search")), ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dryrun", doc=InputDocumentation(doc="Do not execute anything")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Maximum number of threads to use per task (4).")), ToolInput(tag="in_jobs", input_type=Int(optional=True), prefix="--jobs", doc=InputDocumentation(doc="Maximum number of cores to use at the same time (4).")), ToolInput(tag="in_bypass_job_limit", input_type=Boolean(optional=True), prefix="--bypass-job-limit", doc=InputDocumentation(doc="The number of jobs is limited to 20 to limit IO. If\nyou want to bypass this limitation, use this option.")), ToolInput(tag="in_unlock", input_type=Boolean(optional=True), prefix="--unlock", doc=InputDocumentation(doc="If you stopped the application, the underlying\nsnakemake process are interrupted and directories were\nsnakemake was launch will be locked. If so please use\nthis option using the --source and --target as when\nyou got the error message")), ToolInput(tag="in_snake_make_options", input_type=String(optional=True), prefix="--snakemake-options", doc=InputDocumentation(doc="Any valid list of options accepted by snakemake except\n-s and -j (for -j, use our --jobs argument). Note that\nby default --keep-going is used ; If you set this\nargument yourself, you have to add --keep-going as\nwell otherwise it stops at the first error encountered")), ToolInput(tag="in_snake_make_cluster", input_type=String(optional=True), prefix="--snakemake-cluster", doc=InputDocumentation(doc="a valid snakemake option dedicated to a cluster.\ne.g on LSF cluster use:\n--cluster 'qsub -cwd -q<QUEUE> '\nOn a SLURM system use for example:\n--cluster 'sbatch --qos normal'\n")), ToolInput(tag="in_welcome", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_to", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_se_quan_a", input_type=String(), position=2, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sequana_Compressor_V0_1_0().translate("wdl", allow_empty_container=True)

