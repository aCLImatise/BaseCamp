from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean, File, Float

Cnvkit_Py_Genemetrics_V0_1_0 = CommandToolBuilder(tool="cnvkit.py_genemetrics", base_command=["cnvkit.py", "genemetrics"], inputs=[ToolInput(tag="in_segment", input_type=String(optional=True), prefix="--segment", doc=InputDocumentation(doc="Segmentation calls (.cns), the output of the 'segment'\ncommand).")), ToolInput(tag="in_threshold", input_type=Int(optional=True), prefix="--threshold", doc=InputDocumentation(doc="Copy number change threshold to report a gene\ngain/loss. [Default: 0.2]")), ToolInput(tag="in_min_probes", input_type=Int(optional=True), prefix="--min-probes", doc=InputDocumentation(doc="Minimum number of covered probes to report a\ngain/loss. [Default: 3]")), ToolInput(tag="in_drop_low_coverage", input_type=Boolean(optional=True), prefix="--drop-low-coverage", doc=InputDocumentation(doc="Drop very-low-coverage bins before segmentation to\navoid false-positive deletions in poor-quality tumor\nsamples.")), ToolInput(tag="in_haploid_x_reference", input_type=Boolean(optional=True), prefix="--haploid-x-reference", doc=InputDocumentation(doc="Assume inputs were normalized to a male reference\n(i.e. female samples will have +1 log-coverage of\nchrX; otherwise male samples would have -1 chrX).")), ToolInput(tag="in_sample_sex", input_type=String(optional=True), prefix="--sample-sex", doc=InputDocumentation(doc="Specify the sample's chromosomal sex as male or\nfemale. (Otherwise guessed from X and Y coverage).")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output table file name.")), ToolInput(tag="in_mean", input_type=Boolean(optional=True), prefix="--mean", doc=InputDocumentation(doc="Mean log2-ratio (unweighted).")), ToolInput(tag="in_median", input_type=Boolean(optional=True), prefix="--median", doc=InputDocumentation(doc="Median.")), ToolInput(tag="in_mode", input_type=Boolean(optional=True), prefix="--mode", doc=InputDocumentation(doc="Mode (i.e. peak density of log2 ratios).")), ToolInput(tag="in_t_test", input_type=Boolean(optional=True), prefix="--ttest", doc=InputDocumentation(doc="One-sample t-test of bin log2 ratios versus 0.0.")), ToolInput(tag="in_stdev", input_type=Boolean(optional=True), prefix="--stdev", doc=InputDocumentation(doc="Standard deviation.")), ToolInput(tag="in_sem", input_type=Boolean(optional=True), prefix="--sem", doc=InputDocumentation(doc="Standard error of the mean.")), ToolInput(tag="in_mad", input_type=Boolean(optional=True), prefix="--mad", doc=InputDocumentation(doc="Median absolute deviation (standardized).")), ToolInput(tag="in_mse", input_type=Boolean(optional=True), prefix="--mse", doc=InputDocumentation(doc="Mean squared error.")), ToolInput(tag="in_iqr", input_type=Boolean(optional=True), prefix="--iqr", doc=InputDocumentation(doc="Inter-quartile range.")), ToolInput(tag="in_bivar", input_type=Boolean(optional=True), prefix="--bivar", doc=InputDocumentation(doc="Tukey's biweight midvariance.")), ToolInput(tag="in_ci", input_type=Boolean(optional=True), prefix="--ci", doc=InputDocumentation(doc="Confidence interval (by bootstrap).")), ToolInput(tag="in_pi", input_type=Boolean(optional=True), prefix="--pi", doc=InputDocumentation(doc="Prediction interval.")), ToolInput(tag="in_alpha", input_type=Float(optional=True), prefix="--alpha", doc=InputDocumentation(doc="Level to estimate confidence and prediction intervals;\nuse with --ci and --pi. [Default: 0.05]")), ToolInput(tag="in_bootstrap", input_type=Int(optional=True), prefix="--bootstrap", doc=InputDocumentation(doc="Number of bootstrap iterations to estimate confidence\ninterval; use with --ci. [Default: 100]\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output table file name."))], container="quay.io/biocontainers/cnvkit:0.9.8--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cnvkit_Py_Genemetrics_V0_1_0().translate("wdl")

