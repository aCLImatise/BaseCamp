from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Anvi_Script_Compute_Ani_For_Fasta_V0_1_0 = CommandToolBuilder(tool="anvi_script_compute_ani_for_fasta", base_command=["anvi-script-compute-ani-for-fasta"], inputs=[ToolInput(tag="in_fast_a_file", input_type=File(optional=True), prefix="--fasta-file", doc=InputDocumentation(doc="A FASTA-formatted input file (default: None)")), ToolInput(tag="in_output_dir", input_type=File(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Directory path for output files (default: None)")), ToolInput(tag="in_pan_db", input_type=String(optional=True), prefix="--pan-db", doc=InputDocumentation(doc="Anvi'o pan database (default: None)")), ToolInput(tag="in_num_threads", input_type=Int(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="Maximum number of threads to use for multithreading\nwhenever possible. Very conservatively, the default is\n1. It is a good idea to not exceed the number of CPUs\n/ cores on your system. Plus, please be careful with\nthis option if you are running your commands on a SGE\n--if you are clusterizing your runs, and asking for\nmultiple threads to use, you may deplete your\nresources very fast. (default: 1)")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="File path to store debug/output messages. (default:\nNone)")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="Method for pyANI. The default is ANIb. You must have\nthe necessary binary in path for whichever method you\nchoose. According to the pyANI help for v0.2.7 at\nhttps://github.com/widdowquinn/pyani, the method\n'ANIm' uses MUMmer (NUCmer) to align the input\nsequences. 'ANIb' uses BLASTN+ to align 1020nt\nfragments of the input sequences. 'ANIblastall': uses\nthe legacy BLASTN to align 1020nt fragments Finally,\n'TETRA': calculates tetranucleotide frequencies of\neach input sequence")), ToolInput(tag="in_distance", input_type=String(optional=True), prefix="--distance", doc=InputDocumentation(doc="The distance metric for the hierarchical clustering.\nThe default is 'euclidean'.")), ToolInput(tag="in_linkage", input_type=String(optional=True), prefix="--linkage", doc=InputDocumentation(doc="The linkage method for the hierarchical clustering.\nThe default is 'ward'.")), ToolInput(tag="in_just_do_it", input_type=Boolean(optional=True), prefix="--just-do-it", doc=InputDocumentation(doc="Don't bother me with questions or warnings, just do\nit. (default: False)")), ToolInput(tag="in_fast_a", input_type=String(), position=0, doc=InputDocumentation(doc="üçï Can provide: ")), ToolInput(tag="in_genome_similarity", input_type=String(), position=1, doc=InputDocumentation(doc="üç∫ More on `anvi-script-compute-ani-for-fasta`:"))], outputs=[ToolOutput(tag="out_output_dir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Directory path for output files (default: None)")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store debug/output messages. (default:\nNone)"))], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Script_Compute_Ani_For_Fasta_V0_1_0().translate("wdl")

