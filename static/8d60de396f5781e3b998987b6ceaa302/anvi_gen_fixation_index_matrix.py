from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Int

Anvi_Gen_Fixation_Index_Matrix_V0_1_0 = CommandToolBuilder(tool="anvi_gen_fixation_index_matrix", base_command=["anvi-gen-fixation-index-matrix"], inputs=[ToolInput(tag="in_profile_db", input_type=String(optional=True), prefix="--profile-db", doc=InputDocumentation(doc="Anvi'o profile database")), ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs'")), ToolInput(tag="in_structure_db", input_type=String(optional=True), prefix="--structure-db", doc=InputDocumentation(doc="Anvi'o structure database.")), ToolInput(tag="in_variability_profile", input_type=String(optional=True), prefix="--variability-profile", doc=InputDocumentation(doc="The output of anvi-gen-variability-profile, or a\ndifferent variant-calling output that has been\nconverted to the anvi'o format.")), ToolInput(tag="in_collection_name", input_type=String(optional=True), prefix="--collection-name", doc=InputDocumentation(doc="Collection name.")), ToolInput(tag="in_bin_id", input_type=String(optional=True), prefix="--bin-id", doc=InputDocumentation(doc="Bin name you are interested in.")), ToolInput(tag="in_splits_of_interest", input_type=File(optional=True), prefix="--splits-of-interest", doc=InputDocumentation(doc="A file with split names. There should be only one\ncolumn in the file, and each line should correspond to\na unique split name.")), ToolInput(tag="in_genes_of_interest", input_type=File(optional=True), prefix="--genes-of-interest", doc=InputDocumentation(doc="A file with anvi'o gene caller IDs. There should be\nonly one column in the file, and each line should\ncorrespond to a unique gene caller id (without a\ncolumn header).")), ToolInput(tag="in_gene_caller_ids", input_type=String(optional=True), prefix="--gene-caller-ids", doc=InputDocumentation(doc="Gene caller ids. Multiple of them can be declared\nseparated by a delimiter (the default is a comma). In\nanvi-gen-variability-profile, if you declare nothing\nyou will get all genes matching your other filtering\ncriteria. In other programs, you may get everything,\nnothing, or an error. It really depends on the\nsituation. Fortunately, mistakes are cheap, so it's\nworth a try.")), ToolInput(tag="in_only_if_structure", input_type=Boolean(optional=True), prefix="--only-if-structure", doc=InputDocumentation(doc="If provided, your genes of interest will be further\nsubset to only include genes with structures in your\nstructure database, and therefore must be supplied in\nconjunction with a structure database, i.e. `-s\n<your_structure_database>`. If you did not specify\ngenes of interest, ALL genes will be subset to those\nthat have structures.")), ToolInput(tag="in_samples_of_interest", input_type=File(optional=True), prefix="--samples-of-interest", doc=InputDocumentation(doc="A file with samples names. There should be only one\ncolumn in the file, and each line should correspond to\na unique sample name (without a column header).")), ToolInput(tag="in_engine", input_type=String(optional=True), prefix="--engine", doc=InputDocumentation(doc="Variability engine. The default is 'NT'.")), ToolInput(tag="in_min_occurrence", input_type=Int(optional=True), prefix="--min-occurrence", doc=InputDocumentation(doc="Minimum number of samples a nucleotide position should\nbe reported as variable. Default is 1. If you set it\nto 2, for instance, each eligible variable position\nwill be expected to appear in at least two samples,\nwhich will reduce the impact of stochastic, or\nunintelligible variable positions.")), ToolInput(tag="in_min_coverage_in_each_sample", input_type=Int(optional=True), prefix="--min-coverage-in-each-sample", doc=InputDocumentation(doc="Minimum coverage of a given variable nucleotide\nposition in all samples. If a nucleotide position is\ncovered less than this value even in one sample, it\nwill be removed from the analysis. Default is 0.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File path to store results.")), ToolInput(tag="in_keep_negatives", input_type=Boolean(optional=True), prefix="--keep-negatives", doc=InputDocumentation(doc="Negative numbers are theoretically possible, and are\nsometimes interpreted as out-breeding. By default, we\nset negative numbers to 0 so the results are\nreflective of a standard distance metric. Provide this\nflag if you would prefer otherwise.\n"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store results."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Gen_Fixation_Index_Matrix_V0_1_0().translate("wdl", allow_empty_container=True)

