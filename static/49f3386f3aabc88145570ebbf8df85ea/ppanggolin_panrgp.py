from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, Int, String

Ppanggolin_Panrgp_V0_1_0 = CommandToolBuilder(tool="ppanggolin_panrgp", base_command=["ppanggolin", "panrgp"], inputs=[ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="A tab-separated file listing the organism names, and\nthe fasta filepath of its genomic sequence(s) (the\nfastas can be compressed). One line per organism. This\noption can be used alone. (default: None)")), ToolInput(tag="in_an_no", input_type=File(optional=True), prefix="--anno", doc=InputDocumentation(doc="A tab-separated file listing the organism names, and\nthe gff filepath of its annotations (the gffs can be\ncompressed). One line per organism. This option can be\nused alone IF the fasta sequences are in the gff\nfiles, otherwise --fasta needs to be used. (default:\nNone)")), ToolInput(tag="in_clusters", input_type=File(optional=True), prefix="--clusters", doc=InputDocumentation(doc="a tab-separated file listing the cluster names, the\ngene IDs, and optionnally whether they are a fragment\nor not. (default: None)")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory (default:\nppanggolin_output_DATE2021-02-28_HOUR18.01.43_PID471)")), ToolInput(tag="in_basename", input_type=File(optional=True), prefix="--basename", doc=InputDocumentation(doc="basename for the output file (default: pangenome)")), ToolInput(tag="in_rarefaction", input_type=Boolean(optional=True), prefix="--rarefaction", doc=InputDocumentation(doc="Use to compute the rarefaction curves (WARNING: can be\ntime consumming) (default: False)")), ToolInput(tag="in_nb_of_partitions", input_type=Int(optional=True), prefix="--nb_of_partitions", doc=InputDocumentation(doc="Number of partitions to use. Must be at least 3. If\nunder 3, it will be detected automatically. (default:\n-1)")), ToolInput(tag="in_interest", input_type=String(optional=True), prefix="--interest", doc=InputDocumentation(doc="Comma separated list of elements to flag when drawing\nand writing hotspots (default: )")), ToolInput(tag="in_no_defrag", input_type=Boolean(optional=True), prefix="--no_defrag", doc=InputDocumentation(doc="DO NOT Realign gene families to link fragments with\ntheir non-fragmented gene family. (default: False)")), ToolInput(tag="in_tmpdir", input_type=Directory(optional=True), prefix="--tmpdir", doc=InputDocumentation(doc="directory for storing temporary files (default: /tmp)")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Indicate verbose level (0 for warning and errors only,\n1 for info, 2 for debug) (default: 1)")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="log output file (default: stdout)")), ToolInput(tag="in_disable_prog_bar", input_type=Boolean(optional=True), prefix="--disable_prog_bar", doc=InputDocumentation(doc="disables the progress bars (default: False)")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Number of available cpus (default: 1)")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="--force", doc=InputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory (default:\nppanggolin_output_DATE2021-02-28_HOUR18.01.43_PID471)")), ToolOutput(tag="out_basename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_basename", type_hint=File()), doc=OutputDocumentation(doc="basename for the output file (default: pangenome)")), ToolOutput(tag="out_log", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log", type_hint=File()), doc=OutputDocumentation(doc="log output file (default: stdout)")), ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], container="quay.io/biocontainers/ppanggolin:1.1.131--py37hf01694f_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ppanggolin_Panrgp_V0_1_0().translate("wdl")

