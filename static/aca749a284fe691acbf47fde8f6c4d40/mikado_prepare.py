from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Directory

Mikado_Prepare_V0_1_0 = CommandToolBuilder(tool="mikado_prepare", base_command=["mikado", "prepare"], inputs=[ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Genome FASTA file. Required.")), ToolInput(tag="in_start_method", input_type=String(optional=True), prefix="--start-method", doc=InputDocumentation(doc="Multiprocessing start method.")), ToolInput(tag="in_strand_specific", input_type=Boolean(optional=True), prefix="--strand-specific", doc=InputDocumentation(doc="Flag. If set, monoexonic transcripts will be left on\ntheir strand rather than being moved to the unknown\nstrand.")), ToolInput(tag="in_strand_specific_assemblies", input_type=String(optional=True), prefix="--strand-specific-assemblies", doc=InputDocumentation(doc="Comma-delimited list of strand specific assemblies.")), ToolInput(tag="in_list", input_type=Boolean(optional=True), prefix="--list", doc=InputDocumentation(doc="Tab-delimited file containing rows with the following\nformat: <file> <label> <strandedness>\n<score(optional)> <is_reference(optional)>\n<always_keep(optional) strandedness, is_reference and\nalways_keep must be boolean values (True, False) score\nmust be a valid floating number.")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="Log file. Optional.")), ToolInput(tag="in_lenient", input_type=Boolean(optional=True), prefix="--lenient", doc=InputDocumentation(doc="Flag. If set, transcripts with only non-canonical\nsplices will be output as well.")), ToolInput(tag="in_minimum_cdna_length", input_type=Int(optional=True), prefix="--minimum-cdna-length", doc=InputDocumentation(doc="Minimum length for transcripts. Default: 200 bps.")), ToolInput(tag="in_max_intron_size", input_type=Int(optional=True), prefix="--max-intron-size", doc=InputDocumentation(doc="Maximum intron length for transcripts. Default:\n1,000,000 bps.")), ToolInput(tag="in_procs", input_type=Int(optional=True), prefix="--procs", doc=InputDocumentation(doc="Number of processors to use (default None)")), ToolInput(tag="in_strip_cds", input_type=Boolean(optional=True), prefix="--strip_cds", doc=InputDocumentation(doc="Boolean flag. If set, ignores any CDS/UTR segment.")), ToolInput(tag="in_labels", input_type=String(optional=True), prefix="--labels", doc=InputDocumentation(doc="Labels to attach to the IDs of the transcripts of the\ninput files, separated by comma.")), ToolInput(tag="in_single_thread", input_type=Boolean(optional=True), prefix="--single-thread", doc=InputDocumentation(doc="Disable multi-threading. Useful for debugging.")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Output directory. Default: current working directory")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Output file. Default: mikado_prepared.gtf.")), ToolInput(tag="in_out_fast_a", input_type=File(optional=True), prefix="--out_fasta", doc=InputDocumentation(doc="Output file. Default: mikado_prepared.fasta.")), ToolInput(tag="in_json_conf", input_type=File(optional=True), prefix="--json-conf", doc=InputDocumentation(doc="Configuration file.")), ToolInput(tag="in_keep_redundant", input_type=Boolean(optional=True), prefix="--keep-redundant", doc=InputDocumentation(doc="Boolean flag. If invoked, Mikado prepare will retain\nredundant models.")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Random seed number.")), ToolInput(tag="in_gff", input_type=String(), position=0, doc=InputDocumentation(doc="Input GFF/GTF file(s)."))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory. Default: current working directory")), ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output file. Default: mikado_prepared.gtf.")), ToolOutput(tag="out_out_fast_a", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_fast_a", type_hint=File()), doc=OutputDocumentation(doc="Output file. Default: mikado_prepared.fasta."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mikado_Prepare_V0_1_0().translate("wdl", allow_empty_container=True)

