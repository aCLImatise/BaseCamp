!Command
command:
- demuxbyname.sh
positional:
- !Positional
  optional: false
  position: 0
  name: in
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - -Xmx
  description: "This will set Java's memory usage, overriding autodetection.\n-Xmx20g\
    \ will specify 20 gigs of RAM, and -Xmx200m will specify 200 megs.\nThe max is\
    \ typically 85% of physical memory."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -eoom
  description: "This flag will cause the process to exit if an out-of-memory\nexception\
    \ occurs.  Requires Java 8u92+."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -da
  description: Disable assertions.
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\nWritten by Brian Bushnell\nLast modified Jan 7, 2020\n\nDescription:\
  \  Demultiplexes sequences into multiple files based on their names,\nsubstrings\
  \ of their names, or prefixes or suffixes of their names.\nAllows unlimited output\
  \ files while maintaining only a small number of open file handles.\n\nUsage:\n\
  demuxbyname.sh in=<file> in2=<file2> out=<outfile> out2=<outfile2> names=<string,string,string...>\n\
  \nAlternately:\ndemuxbyname.sh in=<file> out=<outfile> delimiter=whitespace prefixmode=f\n\
  This will demultiplex by the substring after the last whitespace.\n\ndemuxbyname.sh\
  \ in=<file> out=<outfile> length=8 prefixmode=t\nThis will demultiplex by the first\
  \ 8 characters of read names.\n\ndemuxbyname.sh in=<file> out=<outfile> delimiter=:\
  \ prefixmode=f\nThis will split on colons, and use the last substring as the name;\
  \ useful for\ndemuxing by barcode for Illumina headers in this format:\n@A00178:73:HH7H3DSXX:4:1101:13666:1047\
  \ 1:N:0:ACGTTGGT+TGACGCAT\n\nin2 and out2 are for paired reads in twin files and\
  \ are optional.\nIf input is paired and there is only one output file, it will be\
  \ written interleaved.\n\nFile Parameters:\nin=<file>       Input file.\nin2=<file>\
  \      If input reads are paired in twin files, use in2 for the second file.\nout=<file>\
  \      Output files for reads with matched headers (must contain % symbol).\n  \
  \              For example, out=out_%.fq with names XX and YY would create out_XX.fq\
  \ and out_YY.fq.\n                If twin files for paired reads are desired, use\
  \ the # symbol.  For example,\n                out=out_%_#.fq in this case would\
  \ create out_XX_1.fq, out_XX_2.fq, out_YY_1.fq, etc.\noutu=<file>     Output file\
  \ for reads with unmatched headers.\nstats=<file>    Print statistics about how\
  \ many reads went to each file.\n\nProcessing Modes (determines how to convert a\
  \ read into a name):\nprefixmode=t    (pm) Match prefix of read header.  If false,\
  \ match suffix of read header.\n                prefixmode=f is equivalent to suffixmode=t.\n\
  barcode=f       Parse barcodes from Illumina headers.\nchrom=f         For mapped\
  \ sam files, make one file per chromosome (scaffold) using the rname.\nheader=f\
  \        Use the entire sequence header.\ndelimiter=      For prefix or suffix mode,\
  \ specifying a delimiter will allow exact matches even if the length is variable.\n\
  \                This allows demultiplexing based on names that are found without\
  \ specifying a list of names.\n                In suffix mode, for example, everything\
  \ after the last delimiter will be used.\n                Normally the delimiter\
  \ will be used as a literal string (a Java regular expression); for example, ':'\
  \ or 'HISEQ'.\n                But there are some special delimiters which will\
  \ be replaced by the symbol they name, \n                because they are reserved\
  \ in some operating systems or cause other problems.\n                These are\
  \ provided for convenience due to possible OS conflicts:\n                   space,\
  \ tab, whitespace, pound, greaterthan, lessthan, equals,\n                   colon,\
  \ semicolon, bang, and, quote, singlequote\n                These are provided because\
  \ they interfere with Java regular expression syntax:\n                   backslash,\
  \ hat, dollar, dot, pipe, questionmark, star,\n                   plus, openparen,\
  \ closeparen, opensquare, opencurly\n                In other words, to match '.',\
  \ you should set 'delimiter=dot'.\nsubstring=f     Names can be substrings of read\
  \ headers.  Substring mode is\n                slow if the list of names is large.\
  \  Requires a list of names.\n\nOther Processing Parameters:\ncolumn=-1       If\
  \ positive, split the header on a delimiter and match that column (1-based).\n \
  \               For example, using this header:\n                NB501886:61:HL3GMAFXX:1:11101:10717:1140\
  \ 1:N:0:ACTGAGC+ATTAGAC\n                You could demux by tile (11101) using 'delimiter=:\
  \ column=5'\n                Column is 1-based (first column is 1).\n          \
  \      If column is omitted when a delimiter is present, prefixmode\n          \
  \      will use the first substring, and suffixmode will use the last substring.\n\
  names=          List of strings (or files containing strings) to parse from read\
  \ names.\n                If the names are in text files, there should be one name\
  \ per line.\n                This is optional.  If a list of names is provided,\
  \ files will only be created for those names.\n                For example, 'prefixmode=t\
  \ length=5' would create a file for every unique last 5 characters in read names,\n\
  \                and every read would be written to one of those files.  But if\
  \ there was addionally 'names=ABCDE,FGHIJ' \n                then at most 2 files\
  \ would be created, and anything not matching those names would go to outu.\nlength=0\
  \        If positive, use a suffix or prefix of this length from read name instead\
  \ of or in addition to the list of names.\n                For example, you could\
  \ create files based on the first 8 characters of read names.\nhdist=0         Allow\
  \ a hamming distance for demultiplexing barcodes.  This requires a list of names\
  \ (barcodes).\nreplace=        Replace some characters in the output filenames.\
  \  For example, replace=+-\n                would replace the + symbol in headers\
  \ with the - symbol in filenames.  So you could\n                match the name\
  \ ACTGAGC+ATTAGAC in the header, but write to a file named ACTGAGC-ATTAGAC.\n\n\
  Buffering Parameters\nstreams=4       Allow at most this many active streams.  The\
  \ actual number of open files\n                will be 1 greater than this if outu\
  \ is set, and doubled if output\n                is paired and written in twin files\
  \ instead of interleaved.\nminreads=0      Don't create a file for fewer than this\
  \ many reads; instead, send them to unknown.\n                This option will incur\
  \ additional memory usage.\n\nCommon parameters:\now=t            (overwrite) Overwrites\
  \ files that already exist.\nzl=4            (ziplevel) Set compression level, 1\
  \ (low) to 9 (max).\nint=auto        (interleaved) Determines whether INPUT file\
  \ is considered interleaved.\nqin=auto        ASCII offset for input quality.  May\
  \ be 33 (Sanger), 64 (Illumina), or auto.\nqout=auto       ASCII offset for output\
  \ quality.  May be 33 (Sanger), 64 (Illumina), or auto (same as input).\n      \
  \              \n\nJava Parameters:\n-Xmx            This will set Java's memory\
  \ usage, overriding autodetection.\n                -Xmx20g will specify 20 gigs\
  \ of RAM, and -Xmx200m will specify 200 megs.\n                The max is typically\
  \ 85% of physical memory.\n-eoom           This flag will cause the process to exit\
  \ if an out-of-memory\n                exception occurs.  Requires Java 8u92+.\n\
  -da             Disable assertions.\n\nPlease contact Brian Bushnell at bbushnell@lbl.gov\
  \ if you encounter any problems.\n\n"
generated_using:
- --help
docker_image:
