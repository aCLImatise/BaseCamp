from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int

Augustus_V0_1_0 = CommandToolBuilder(tool="augustus", base_command=["augustus"], inputs=[ToolInput(tag="in_strand", input_type=String(optional=True), prefix="--strand", doc=InputDocumentation(doc="or --strand=backward")), ToolInput(tag="in_gene_model", input_type=String(optional=True), prefix="--genemodel", doc=InputDocumentation(doc="or --genemodel=exactlyone\npartial      : allow prediction of incomplete genes at the sequence boundaries (default)\nintronless   : only predict single-exon genes like in prokaryotes and some eukaryotes\ncomplete     : only predict complete genes\natleastone   : predict at least one complete gene\nexactlyone   : predict exactly one complete gene")), ToolInput(tag="in_single_strand", input_type=String(optional=True), prefix="--singlestrand", doc=InputDocumentation(doc="predict genes independently on each strand, allow overlapping genes on opposite strands\nThis option is turned off by default.")), ToolInput(tag="in_hints_file", input_type=File(optional=True), prefix="--hintsfile", doc=InputDocumentation(doc="When this option is used the prediction considering hints (extrinsic information) is turned on.\nhintsfilename contains the hints in gff format.")), ToolInput(tag="in_augustus_config_path", input_type=File(optional=True), prefix="--AUGUSTUS_CONFIG_PATH", doc=InputDocumentation(doc="path to config directory (if not specified as environment variable)")), ToolInput(tag="in_alternatives_from_evidence", input_type=String(optional=True), prefix="--alternatives-from-evidence", doc=InputDocumentation(doc="/false\nreport alternative transcripts when they are suggested by hints")), ToolInput(tag="in_alternatives_from_sampling", input_type=String(optional=True), prefix="--alternatives-from-sampling", doc=InputDocumentation(doc="/false\nreport alternative transcripts generated through probabilistic sampling")), ToolInput(tag="in_min_mean_exon_intron_prob", input_type=Int(optional=True), prefix="--minmeanexonintronprob", doc=InputDocumentation(doc="For a description of these parameters see section 4 of README.TXT.")), ToolInput(tag="in_protein_profile", input_type=File(optional=True), prefix="--proteinprofile", doc=InputDocumentation(doc="When this option is used the prediction will consider the protein profile provided as parameter.\nThe protein profile extension is described in section 7 of README.TXT.")), ToolInput(tag="in_progress", input_type=String(optional=True), prefix="--progress", doc=InputDocumentation(doc="show a progressmeter")), ToolInput(tag="in_gff_three", input_type=Int(optional=True), prefix="--gff3", doc=InputDocumentation(doc="/off\noutput in gff3 format")), ToolInput(tag="in_prediction_start", input_type=String(optional=True), prefix="--predictionStart", doc=InputDocumentation(doc="A and B define the range of the sequence for which predictions should be found.")), ToolInput(tag="in_utr", input_type=String(optional=True), prefix="--UTR", doc=InputDocumentation(doc="/off\npredict the untranslated regions in addition to the coding sequence. This currently works only for a subset of species.")), ToolInput(tag="in_no_in_frames_top", input_type=String(optional=True), prefix="--noInFrameStop", doc=InputDocumentation(doc="/false\nDo not report transcripts with in-frame stop codons. Otherwise, intron-spanning stop codons could occur. Default: false")), ToolInput(tag="in_no_prediction", input_type=String(optional=True), prefix="--noprediction", doc=InputDocumentation(doc="/false\nIf true and input is in genbank format, no prediction is made. Useful for getting the annotated protein sequences.")), ToolInput(tag="in_unique_geneid", input_type=String(optional=True), prefix="--uniqueGeneId", doc=InputDocumentation(doc="/false\nIf true, output gene identifyers like this: seqname.gN")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="")), ToolInput(tag="in_prepare", input_type=String(), position=0, doc=InputDocumentation(doc=": prepare a new minimal data set to test comparative Augustus")), ToolInput(tag="in_intron_less", input_type=String(), position=1, doc=InputDocumentation(doc=": run prediction over some given minimal data set"))], outputs=[], container="quay.io/biocontainers/augustus:3.4.0--pl526h0faeac2_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Augustus_V0_1_0().translate("wdl")

