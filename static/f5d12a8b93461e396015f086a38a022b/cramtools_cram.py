from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Cramtools_Cram_V0_1_0 = CommandToolBuilder(tool="cramtools_cram", base_command=["cramtools", "cram"], inputs=[ToolInput(tag="in_capture_all_tags", input_type=Boolean(optional=True), prefix="--capture-all-tags", doc=InputDocumentation(doc="Capture all tags. (default: false)")), ToolInput(tag="in_capture_tags", input_type=Boolean(optional=True), prefix="--capture-tags", doc=InputDocumentation(doc="Capture the tags listed, for example 'OQ:XA:XB' (default: )")), ToolInput(tag="in_encrypt", input_type=Boolean(optional=True), prefix="--encrypt", doc=InputDocumentation(doc="Encrypt the CRAM file. (default: false)")), ToolInput(tag="in_ignore_md_five_mismatch", input_type=Boolean(optional=True), prefix="--ignore-md5-mismatch", doc=InputDocumentation(doc="Fail on MD5 mismatch if true, or correct (overwrite) the checksums and continue if false. (default: false)")), ToolInput(tag="in_ignore_tags", input_type=Boolean(optional=True), prefix="--ignore-tags", doc=InputDocumentation(doc="Ignore the tags listed, for example 'OQ:XA:XB' (default: )")), ToolInput(tag="in_inject_sq_uri", input_type=Boolean(optional=True), prefix="--inject-sq-uri", doc=InputDocumentation(doc="Inject or change the @SQ:UR header fields to point to ENA reference service.  (default: false)")), ToolInput(tag="in_input_bam_file", input_type=Boolean(optional=True), prefix="--input-bam-file", doc=InputDocumentation(doc="Path to a BAM file to be converted to CRAM. Omit if standard input (pipe).")), ToolInput(tag="in_input_is_sam", input_type=Boolean(optional=True), prefix="--input-is-sam", doc=InputDocumentation(doc="Input is in SAM format. (default: false)")), ToolInput(tag="in_lossless_quality_score", input_type=Boolean(optional=True), prefix="--lossless-quality-score", doc=InputDocumentation(doc="Preserve all quality scores. Overwrites '--lossless-quality-score'. (default: false)")), ToolInput(tag="in_lossy_quality_score_spec", input_type=Boolean(optional=True), prefix="--lossy-quality-score-spec", doc=InputDocumentation(doc="A string specifying what quality scores should be preserved. (default: )")), ToolInput(tag="in_max_records", input_type=Boolean(optional=True), prefix="--max-records", doc=InputDocumentation(doc="Stop after compressing this many records.  (default: 9223372036854775807)")), ToolInput(tag="in_output_cram_file", input_type=File(optional=True), prefix="--output-cram-file", doc=InputDocumentation(doc="The path for the output CRAM file. Omit if standard output (pipe).")), ToolInput(tag="in_preserve_read_names", input_type=Boolean(optional=True), prefix="--preserve-read-names", doc=InputDocumentation(doc="Preserve all read names. (default: false)")), ToolInput(tag="in_reference_fast_a_file", input_type=Boolean(optional=True), prefix="--reference-fasta-file", doc=InputDocumentation(doc="The reference fasta file, uncompressed and indexed (.fai file, use 'samtools faidx').")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="Change log level: DEBUG, INFO, WARNING, ERROR. (default: ERROR)")), ToolInput(tag="in_main_class", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_cram_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_cram_file", type_hint=File()), doc=OutputDocumentation(doc="The path for the output CRAM file. Omit if standard output (pipe)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cramtools_Cram_V0_1_0().translate("wdl", allow_empty_container=True)

