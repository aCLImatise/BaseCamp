from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Delly_Lr_V0_1_0 = CommandToolBuilder(tool="delly_lr", base_command=["delly", "lr"], inputs=[ToolInput(tag="in_arg_sv_type", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --svtype ] arg (=ALL)            SV type to compute [DEL, INS, DUP, INV,\nBND, ALL]")), ToolInput(tag="in_y", input_type=Boolean(optional=True), prefix="-y", doc=InputDocumentation(doc="[ --technology ] arg (=ont)        seq. technology [pb, ont]")), ToolInput(tag="in_arg_genome_fasta", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --genome ] arg                   genome fasta file")), ToolInput(tag="in_arg_file_exclude", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="[ --exclude ] arg                  file with regions to exclude")), ToolInput(tag="in_arg_sv_bcf", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg (='sv.bcf')      SV BCF output file")), ToolInput(tag="in__arg_min_mapping_quality", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="[ --mapqual ] arg (=10)            min. mapping quality")), ToolInput(tag="in_arg_min_clipping", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --minclip ] arg (=25)            min. clipping length")), ToolInput(tag="in_arg_min_clique", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="[ --min-clique-size ] arg (=2)     min. clique size")), ToolInput(tag="in_arg_min_reference", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --minrefsep ] arg (=30)          min. reference separation")), ToolInput(tag="in_arg_max_read", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --maxreadsep ] arg (=75)         max. read separation")), ToolInput(tag="in_arg_max_reads", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --max-reads ] arg (=5)           max. reads for consensus computation")), ToolInput(tag="in_arg_min_size", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --flank-size ] arg (=400)        min. flank size")), ToolInput(tag="in_arg_flank_quality", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --flank-quality ] arg (=0.899999976)\nmin. flank quality")), ToolInput(tag="in_arg_min_mapping_quality_genotyping", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="[ --geno-qual ] arg (=5)           min. mapping quality for genotyping")), ToolInput(tag="in_arg_gzipped_file", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --dump ] arg                     gzipped output file for SV-reads")), ToolInput(tag="in_generic", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_arg_sv_bcf", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_sv_bcf", type_hint=File()), doc=OutputDocumentation(doc="[ --outfile ] arg (='sv.bcf')      SV BCF output file")), ToolOutput(tag="out_arg_gzipped_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_gzipped_file", type_hint=File()), doc=OutputDocumentation(doc="[ --dump ] arg                     gzipped output file for SV-reads"))], container="quay.io/biocontainers/delly:0.8.7--hf3ca161_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Delly_Lr_V0_1_0().translate("wdl")

