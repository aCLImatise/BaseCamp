from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Float, String, Boolean

Svm_Train_V0_1_0 = CommandToolBuilder(tool="svm_train", base_command=["svm-train"], inputs=[ToolInput(tag="in_set_type_svm_", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc=": set type of SVM (default 0)\n0 -- C-SVC              (multi-class classification)\n1 -- nu-SVC             (multi-class classification)\n2 -- one-class SVM\n3 -- epsilon-SVR        (regression)\n4 -- nu-SVR             (regression)")), ToolInput(tag="in_set_type_kernel_", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc=": set type of kernel function (default 2)\n0 -- linear: u'*v\n1 -- polynomial: (gamma*u'*v + coef0)^degree\n2 -- radial basis function: exp(-gamma*|u-v|^2)\n3 -- sigmoid: tanh(gamma*u'*v + coef0)\n4 -- precomputed kernel (kernel values in training_set_file)")), ToolInput(tag="in_set_degree_kernel", input_type=Int(optional=True), prefix="-d", doc=InputDocumentation(doc=": set degree in kernel function (default 3)")), ToolInput(tag="in_set_gamma_kernel", input_type=Int(optional=True), prefix="-g", doc=InputDocumentation(doc=": set gamma in kernel function (default 1/num_features)")), ToolInput(tag="in_set_coef_kernel", input_type=Int(optional=True), prefix="-r", doc=InputDocumentation(doc=": set coef0 in kernel function (default 0)")), ToolInput(tag="in_set_c_csvc", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc=": set the parameter C of C-SVC, epsilon-SVR, and nu-SVR (default 1)")), ToolInput(tag="in_set_parameter_nusvc", input_type=Float(optional=True), prefix="-n", doc=InputDocumentation(doc=": set the parameter nu of nu-SVC, one-class SVM, and nu-SVR (default 0.5)")), ToolInput(tag="in_set_epsilon_loss", input_type=Float(optional=True), prefix="-p", doc=InputDocumentation(doc=": set the epsilon in loss function of epsilon-SVR (default 0.1)")), ToolInput(tag="in_set_memory_size", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc=": set cache memory size in MB (default 100)")), ToolInput(tag="in_set_tolerance_termination", input_type=Float(optional=True), prefix="-e", doc=InputDocumentation(doc=": set tolerance of termination criterion (default 0.001)")), ToolInput(tag="in_use_shrinking_heuristics", input_type=Int(optional=True), prefix="-h", doc=InputDocumentation(doc=": whether to use the shrinking heuristics, 0 or 1 (default 1)")), ToolInput(tag="in_train_svc_model", input_type=Int(optional=True), prefix="-b", doc=InputDocumentation(doc=": whether to train a SVC or SVR model for probability estimates, 0 or 1 (default 0)")), ToolInput(tag="in_wi", input_type=Int(optional=True), prefix="-wi", doc=InputDocumentation(doc=": set the parameter C of class i to weight*C, for C-SVC (default 1)")), ToolInput(tag="in_cross_validation_mode", input_type=String(optional=True), prefix="-v", doc=InputDocumentation(doc=": n-fold cross validation mode")), ToolInput(tag="in_quiet_mode_outputs", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc=": quiet mode (no outputs)")), ToolInput(tag="in__log_file", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc=": log file")), ToolInput(tag="in_training_set_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_model_file", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Svm_Train_V0_1_0().translate("wdl", allow_empty_container=True)

