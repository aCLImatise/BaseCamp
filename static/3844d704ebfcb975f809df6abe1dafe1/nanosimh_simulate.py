from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Float, Boolean

Nanosimh_Simulate_V0_1_0 = CommandToolBuilder(tool="nanosimh_simulate", base_command=["nanosimh_simulate"], inputs=[ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="reference genome in fasta file")), ToolInput(tag="in_profile", input_type=String(optional=True), prefix="--profile", doc=InputDocumentation(doc="prefix of training set profiles [training]")), ToolInput(tag="in_out_pref", input_type=File(optional=True), prefix="--out-pref", doc=InputDocumentation(doc="prefix of output file [simulated]")), ToolInput(tag="in_number", input_type=Int(optional=True), prefix="--number", doc=InputDocumentation(doc="number of generated reads [20000]")), ToolInput(tag="in_mis_rate", input_type=Float(optional=True), prefix="--mis-rate", doc=InputDocumentation(doc="mismatch rate (weight tuning) [1.0]")), ToolInput(tag="in_ins_rate", input_type=Float(optional=True), prefix="--ins-rate", doc=InputDocumentation(doc="insertion rate (weight tuning) [1.0]")), ToolInput(tag="in_del_rate", input_type=Float(optional=True), prefix="--del-rate", doc=InputDocumentation(doc="deletion reate (weight tuning) [1.0]")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="initial seed for the pseudorandom number generator (0\nfor random) [1]")), ToolInput(tag="in_circular", input_type=Boolean(optional=True), prefix="--circular", doc=InputDocumentation(doc="circular simulation (linear otherwise)")), ToolInput(tag="in_perfect", input_type=Boolean(optional=True), prefix="--perfect", doc=InputDocumentation(doc="output perfect reads, no mutations")), ToolInput(tag="in_merge_contigs", input_type=Boolean(optional=True), prefix="--merge-contigs", doc=InputDocumentation(doc="merge contigs from the reference")), ToolInput(tag="in_rnf", input_type=Boolean(optional=True), prefix="--rnf", doc=InputDocumentation(doc="use RNF format for read names")), ToolInput(tag="in_rnf_add_cigar", input_type=Boolean(optional=True), prefix="--rnf-add-cigar", doc=InputDocumentation(doc="add cigar to RNF names (not fully debugged, yet)")), ToolInput(tag="in_max_len", input_type=Int(optional=True), prefix="--max-len", doc=InputDocumentation(doc="maximum read length [inf]")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--min-len", doc=InputDocumentation(doc="minimum read length [50]")), ToolInput(tag="in_km_er_bias", input_type=Int(optional=True), prefix="--kmer-bias", doc=InputDocumentation(doc="prohibits homopolymers with length >= n bases in\noutput reads [6]"))], outputs=[ToolOutput(tag="out_out_pref", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_pref", type_hint=File()), doc=OutputDocumentation(doc="prefix of output file [simulated]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nanosimh_Simulate_V0_1_0().translate("wdl", allow_empty_container=True)

