from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Ss_V0_1_0 = CommandToolBuilder(tool="ss", base_command=["ss"], inputs=[ToolInput(tag="in_input_file_type", input_type=File(optional=True), prefix="--input_file_type", doc=InputDocumentation(doc="Type of file to be imported. If not specified, file\ntype will be determined by the file extension given.\nAvailable choices are: CSV, TSV, JSON, Excel, HDF5,\nParquet, MsgPack, Stata, Pickle, SQLite, ARFF, GCT,\nKallisto, GEO, Salmon")), ToolInput(tag="in_output_file_type", input_type=File(optional=True), prefix="--output_file_type", doc=InputDocumentation(doc="Type of file to which results are exported. If not\nspecified, file type will be determined by the file\nextension given. Available choices are: CSV, TSV,\nJSON, Excel, HDF5, Parquet, MsgPack, Stata, Pickle,\nSQLite, ARFF, GCT, RMarkdown, JupyterNotebook")), ToolInput(tag="in_transpose", input_type=File(optional=True), prefix="--transpose", doc=InputDocumentation(doc="Transpose index and columns in the output file")), ToolInput(tag="in_filter_data_using", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="'FILTER', --filter 'FILTER'\nFilter data using python logical syntax. Your filter\nmust be surrounded by quotes. For example: -f\n'ColumnName1 > 12.5 and (ColumnName2 == 'x' or\nColumnName2 =='y')'")), ToolInput(tag="in_columns", input_type=File(optional=True), prefix="--columns", doc=InputDocumentation(doc="List of additional column names to include in the\noutput file. Column names must be seperated by commas\nand without spaces. For example: -c\nColumnName1,ColumnName2,ColumnName3")), ToolInput(tag="in_all_columns", input_type=File(optional=True), prefix="--all_columns", doc=InputDocumentation(doc="Includes all columns in the output file. Overrides the\n'--columns' flag")), ToolInput(tag="in_gzip", input_type=File(optional=True), prefix="--gzip", doc=InputDocumentation(doc="Gzips the output file")), ToolInput(tag="in_set_index", input_type=String(optional=True), prefix="--set_index", doc=InputDocumentation(doc="Sets the given column to become the index column,\nwhere appropriate.\n")), ToolInput(tag="in_input_file", input_type=String(), position=0, doc=InputDocumentation(doc="Data file to be imported, filtered, and/or transformed")), ToolInput(tag="in_output_file", input_type=String(), position=1, doc=InputDocumentation(doc="File path to which results are exported"))], outputs=[ToolOutput(tag="out_transpose", output_type=File(optional=True), selector=InputSelector(input_to_select="in_transpose", type_hint=File()), doc=OutputDocumentation(doc="Transpose index and columns in the output file")), ToolOutput(tag="out_columns", output_type=File(optional=True), selector=InputSelector(input_to_select="in_columns", type_hint=File()), doc=OutputDocumentation(doc="List of additional column names to include in the\noutput file. Column names must be seperated by commas\nand without spaces. For example: -c\nColumnName1,ColumnName2,ColumnName3")), ToolOutput(tag="out_all_columns", output_type=File(optional=True), selector=InputSelector(input_to_select="in_all_columns", type_hint=File()), doc=OutputDocumentation(doc="Includes all columns in the output file. Overrides the\n'--columns' flag")), ToolOutput(tag="out_gzip", output_type=File(optional=True), selector=InputSelector(input_to_select="in_gzip", type_hint=File()), doc=OutputDocumentation(doc="Gzips the output file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ss_V0_1_0().translate("wdl", allow_empty_container=True)

