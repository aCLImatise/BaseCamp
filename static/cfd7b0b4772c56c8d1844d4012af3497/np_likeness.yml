!Command
positional:
- !Positional
  description: ''
  position: 0
  name: Natural
  optional: false
- !Positional
  description: ''
  position: 1
  name: Product-likeness
  optional: false
- !Positional
  description: ''
  position: 2
  name: calculator
  optional: false
- !Positional
  description: ''
  position: 3
  name: v-2.1
  optional: false
- !Positional
  description: ''
  position: 4
  name: calculates
  optional: false
- !Positional
  description: ''
  position: 5
  name: natural
  optional: false
named: []
command:
- np-likeness
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "[--help]\nusage:\n                Natural Product-likeness calculator\
  \ v-2.1 calculates natural\n                product-likeness of small molecules\
  \ based on open-data of natural\n                products. Input [Options] [Targets]\
  \ for the application are specified\n                below.\n -generateSignatures\
  \           Given input sdf/smi file use this function\n                       \
  \        to generate atomSignatures for training molecules.\n -help            \
  \             Usage information\n -in <arg>                     Input structure\
  \ file to score or to\n                               generateSignatures\n -inSignaturesFile\
  \ <arg>       To specify atomSignatures .txt file\n                            \
  \   generated by this program using 'generateSignatures' option; Used as input\n\
  \                               only for 'serializeSignatures' function.\n -intype\
  \ <arg>                 Input file type: Enter sdf/smi\n -npTrainer <arg>      \
  \        Serialized NP atomSignatures file generated\n                         \
  \      by this program\n -out <arg>                    Output structure from scoring\n\
  \ -outFragments <arg>           Output .txt file for reconstructed\n           \
  \                    fragments. Specify this option only if 'reconstructFragments'\
  \ is true.\n                               Alternatively, this option can also be\
  \ specified along with\n                               'generateSignatures' as a\
  \ output file\n -outtype <arg>                Output file type: Enter sdf/smi\n\
  \ -reconstructFragments <arg>   Optional boolean argument {true/false} to\n    \
  \                           reconstruct fragments. If true individual fragments\
  \ with scores are\n                               written out in SMILES format\n\
  \ -serializeSignatures          Use this function to serialize .txt\n          \
  \                     signatures file generated by this program using 'generateSignatures'\n\
  \                               option.The input for this function is taken via\
  \ option 'inSignaturesFile'.\n                               Alternatively, this\
  \ function can be used alongside 'generateSignatures'\n                        \
  \       function to directly serialize and store the generated signatures.\n -signatureHeight\
  \ <arg>        Signature height to be generated; Use this\n                    \
  \           along 'generateSignatures'; Default size: 2\n -smTrainer <arg>     \
  \         Serialized SM atomSignatures file generated\n                        \
  \       by this program\n -v                            Application info\n\tFor\
  \ input and output file please specify the type using -intype and -outtype repectively.\
  \ \n\tCurrently the types can be either sdf/smi.\n\tIf my mistake you input a sdf\
  \ file but give it a different format type, \n\tthe program will not complain but\
  \ will finish without any output. If output file options (out/outFragments) are\
  \ unspecified, \n\tauto generated output files (based on Input format) will be written\
  \ to the directory of the input file.\n"
generated_using:
- --help
