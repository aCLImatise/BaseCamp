from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Int

Mia_V0_1_0 = CommandToolBuilder(tool="mia", base_command=["mia"], inputs=[ToolInput(tag="in_supplied_default_matrix", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="(if not supplied an default matrix is used)")), ToolInput(tag="in_root_file_name", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="<root file name for maln output file(s)> (assembly.maln.iter)")), ToolInput(tag="in_database_repeat_alignment", input_type=String(optional=True), prefix="-u", doc=InputDocumentation(doc="database has repeat sequences, keep one based on alignment score")), ToolInput(tag="in_database_repeat_sum", input_type=String(optional=True), prefix="-U", doc=InputDocumentation(doc="database has repeat sequences, keep one based on sum of q-scores")), ToolInput(tag="in_tolerance_collapse_sequences", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="<tolerance> collapse sequences with same start, end, strand info into a single sequence\nAllow <tolerance> bases difference for start and end coordinates\nImportant: keep NO SPACE between parameter and value: e.g. -C3")), ToolInput(tag="in_adapter_presence_coordinate", input_type=Int(optional=True), prefix="-A", doc=InputDocumentation(doc="adapter presence and coordinate information to more aggressively\nremove repeat sequences - suitable only for 454 sequences that have not\nalready been adapter trimmed")), ToolInput(tag="in_database_has_trim", input_type=String(optional=True), prefix="-T", doc=InputDocumentation(doc="database has adapters, trim these")), ToolInput(tag="in_filename_list_sequence", input_type=File(optional=True), prefix="-a", doc=InputDocumentation(doc="<filename of list of sequence IDs to use, ignoring all others>")), ToolInput(tag="in_consensus_calling_code", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="<consensus calling code; default = 1>")), ToolInput(tag="in_referenceassembly_is_circular", input_type=String(optional=True), prefix="-c", doc=InputDocumentation(doc="reference/assembly is circular")), ToolInput(tag="in_assembly_convergence_default", input_type=String(optional=True), prefix="-i", doc=InputDocumentation(doc="assembly until convergence (default)")), ToolInput(tag="in_iterate_assembly_convergence", input_type=String(optional=True), prefix="-n", doc=InputDocumentation(doc="not iterate assembly until convergence")), ToolInput(tag="in_only_output_assembly", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="<only output the FINAL assembly, not each iteration>")), ToolInput(tag="in_special_discount_homopolymer", input_type=String(optional=True), prefix="-D", doc=InputDocumentation(doc="special discount for homopolymer gaps")), ToolInput(tag="in_do_score_cutoff", input_type=String(optional=True), prefix="-M", doc=InputDocumentation(doc="<do not do dynamic score cutoff, instead use this Hard score cutoff>")), ToolInput(tag="in_r", input_type=String(optional=True), prefix="-r", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_root_file_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_root_file_name", type_hint=File()), doc=OutputDocumentation(doc="<root file name for maln output file(s)> (assembly.maln.iter)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mia_V0_1_0().translate("wdl", allow_empty_container=True)

