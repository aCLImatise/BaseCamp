from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Svm_Ensemble_V0_1_0 = CommandToolBuilder(tool="svm_ensemble", base_command=["svm-ensemble"], inputs=[ToolInput(tag="in_arg_expression_table", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --infile ] arg                   The expression table (without headers)")), ToolInput(tag="in__arg_file_containing_gene_names", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --genes ] arg                    File containing gene names")), ToolInput(tag="in_deprecated_transform_data", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --scale ]                        (deprecated) Transform data to z-scores")), ToolInput(tag="in_no_scale", input_type=Boolean(optional=True), prefix="--no-scale", doc=InputDocumentation(doc="Do not transform data to z-scores")), ToolInput(tag="in_y", input_type=Boolean(optional=True), prefix="-y", doc=InputDocumentation(doc="[ --type ] arg (=EPSILON_SVR)      SVM type [NU_SVR, EPSILON_SVR]")), ToolInput(tag="in_k", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="[ --kernel ] arg (=LINEAR)         SVM kernel [LINEAR, POLY, RBF, SIGMOID]")), ToolInput(tag="in_arg_polynomial_degree", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --degree ] arg (=3)              Polynomial degree (for POLY kernel)")), ToolInput(tag="in_arg_kernel_coefficient", input_type=Boolean(optional=True), prefix="-G", doc=InputDocumentation(doc="[ --gamma ] arg (=0.01)            Kernel coefficient for POLY/RBF/SIGMOID")), ToolInput(tag="in_arg_value_nusvr", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --nu ] arg (=0.5)                nu value (for NU_SVR)")), ToolInput(tag="in_arg_penalty_c", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="[ --penalty ] arg (=1)             Penalty C value")), ToolInput(tag="in_arg_epsilontolerance_stopping", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --tol ] arg (=0.001)             Epsilon/tolerance (stopping criterion)")), ToolInput(tag="in__arg_epsilon", input_type=Boolean(optional=True), prefix="-E", doc=InputDocumentation(doc="[ --eps ] arg (=0.1)               Epsilon (for EPSILON_SVR)")), ToolInput(tag="in_arg_use_heuristic", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="[ --shrinking ] arg (=1)           Whether to use the shrinking heuristic\n[0: off, 1: on]")), ToolInput(tag="in_arg_ensemble_size", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --ensemble ] arg (=1000)         The ensemble size")), ToolInput(tag="in_arg_predictorsthe_minimum", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --min-predictor-size ] arg (=20% of predictors)\nThe minimum absolute number of\npredictors (genes) to be sampled.")), ToolInput(tag="in_arg_predictorsthe_maximum", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc="[ --max-predictor-size ] arg (=80% of predictors)\nThe maximum absolute number of\npredictors (genes) to be sampled")), ToolInput(tag="in_arg_minimum_absolute", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="[ --min-experiment-size ] arg (=20% of experiments)\nThe minimum absolute number of\nexperiments (samples) to be sampled")), ToolInput(tag="in_arg_maximum_absolute", input_type=Boolean(optional=True), prefix="-X", doc=InputDocumentation(doc="[ --max-experiment-size ] arg (=80% of experiments)\nThe maximum absolute number of\nexperiments (samples) to be sampled")), ToolInput(tag="in_arg_number_genes", input_type=Boolean(optional=True), prefix="-B", doc=InputDocumentation(doc="[ --batch-size ] arg (=0)          Number of genes in MPI batch")), ToolInput(tag="in_arg_directory_path", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --tempdir ] arg                  Temporary directory path")), ToolInput(tag="in_arg_number_openmp", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="[ --threads ] arg (=2)             Number of OpenMP threads per MPI task")), ToolInput(tag="in_force_overwrite_output", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --force ]                        Force overwrite if output already")), ToolInput(tag="in_arg_svmscorestsvoutput_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --outfile ] arg (=svm_scores.tsv)\nOutput file path")), ToolInput(tag="in_save_resume", input_type=File(optional=True), prefix="--save-resume", doc=InputDocumentation(doc="Path to a file that stores job resume")), ToolInput(tag="in_arg_verbosity_level", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --verbosity ] arg (=3)           Verbosity level (lower is less verbose)")), ToolInput(tag="in_print_program_version", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="[ --version ]                      Print the program version")), ToolInput(tag="in_kernels", input_type=String(), position=0, doc=InputDocumentation(doc="-c [ --coef ] arg (=0.01)             Independent term in kernel function ")), ToolInput(tag="in_exists", input_type=String(), position=0, doc=InputDocumentation(doc="-t [ --targets ] arg                  File containing gene names of genes of ")), ToolInput(tag="in_info_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--resume-from arg                     Try to resume job from this file."))], outputs=[ToolOutput(tag="out_arg_svmscorestsvoutput_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_svmscorestsvoutput_file", type_hint=File()), doc=OutputDocumentation(doc="[ --outfile ] arg (=svm_scores.tsv)\nOutput file path"))], container="quay.io/biocontainers/seidr:0.14.2--mpi_mpich_h6f92565", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Svm_Ensemble_V0_1_0().translate("wdl")

