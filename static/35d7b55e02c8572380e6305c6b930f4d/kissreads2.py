from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Kissreads2_V0_1_0 = CommandToolBuilder(tool="kissreads2", base_command=["kissreads2"], inputs=[ToolInput(tag="in_phasing", input_type=Boolean(optional=True), prefix="-phasing", doc=InputDocumentation(doc="(0 arg) :    [Experimental] Phase alleles mapped by the same (pair of) read(s)")), ToolInput(tag="in_arg_radseq_option", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="(0 arg) :    [Experimental] Radseq option, homogeneous read depth along the prediction")), ToolInput(tag="in_predictions", input_type=Boolean(optional=True), prefix="-predictions", doc=InputDocumentation(doc="(1 arg) :    Input predictions")), ToolInput(tag="in_reads", input_type=Boolean(optional=True), prefix="-reads", doc=InputDocumentation(doc="(1 arg) :    Input reads")), ToolInput(tag="in_unco", input_type=File(optional=True), prefix="-unco", doc=InputDocumentation(doc="(1 arg) :    Output uncoherent file name  [default '/dev/null']")), ToolInput(tag="in_co", input_type=File(optional=True), prefix="-co", doc=InputDocumentation(doc="(1 arg) :    Output coherent file name")), ToolInput(tag="in_hamming", input_type=Boolean(optional=True), prefix="-hamming", doc=InputDocumentation(doc="(1 arg) :    Maximal hamming distance authorized while mapping  [default '1']")), ToolInput(tag="in_coverage_file", input_type=Boolean(optional=True), prefix="-coverage_file", doc=InputDocumentation(doc="(1 arg) :    File (.h5) generated by kissnp2, containing the coverage threshold per read set  [default '_removemeplease']")), ToolInput(tag="in_arg_size_k_used", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="(1 arg) :    Size of k, used as minial overlap and kmer spanning read coherence  [default '31']")), ToolInput(tag="in_index_stride", input_type=Boolean(optional=True), prefix="-index_stride", doc=InputDocumentation(doc="(1 arg) :    Index Stride  [default '2']")), ToolInput(tag="in_size_seeds", input_type=Boolean(optional=True), prefix="-size_seeds", doc=InputDocumentation(doc="(1 arg) :    Size of the used seeds (distinct from the size of k)  [default '25']")), ToolInput(tag="in_output_fast_a", input_type=Boolean(optional=True), prefix="-output_fasta", doc=InputDocumentation(doc="(0 arg) :    Output standart Fasta. By default the output is formatted especially for the discoSnp++ pipeline")), ToolInput(tag="in_genotype", input_type=Boolean(optional=True), prefix="-genotype", doc=InputDocumentation(doc="(0 arg) :    Compute genotypes")), ToolInput(tag="in_nb_cores", input_type=Boolean(optional=True), prefix="-nb-cores", doc=InputDocumentation(doc="(1 arg) :    number of cores  [default '0']")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="(1 arg) :    verbosity level  [default '1']")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="(0 arg) :    version"))], outputs=[ToolOutput(tag="out_unco", output_type=File(optional=True), selector=InputSelector(input_to_select="in_unco", type_hint=File()), doc=OutputDocumentation(doc="(1 arg) :    Output uncoherent file name  [default '/dev/null']")), ToolOutput(tag="out_co", output_type=File(optional=True), selector=InputSelector(input_to_select="in_co", type_hint=File()), doc=OutputDocumentation(doc="(1 arg) :    Output coherent file name"))], container="quay.io/biocontainers/discosnp:2.5.4--h8b12597_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Kissreads2_V0_1_0().translate("wdl")

