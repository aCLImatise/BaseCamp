!Command
positional: []
named:
- !Flag
  description: the input otu table in biom format [REQUIRED]
  synonyms:
  - -i
  - --input_otu_table
  args: !SimpleFlagArg
    name: INPUT_OTU_TABLE
  optional: true
- !Flag
  description: the output file for the predicted metagenome [REQUIRED]
  synonyms:
  - -o
  - --output_metagenome_table
  args: !SimpleFlagArg
    name: OUTPUT_METAGENOME_TABLE
  optional: true
command:
- predict_metagenomes.py
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "Usage: predict_metagenomes.py [options] {-i/--input_otu_table INPUT_OTU_TABLE\
  \ -o/--output_metagenome_table OUTPUT_METAGENOME_TABLE}\n\n[] indicates optional\
  \ input (order unimportant)\n{} indicates required input (order unimportant)\n\n\
  \n\nExample usage: \nPrint help message and exit\n predict_metagenomes.py -h\n\n\
  Predict KO abundances for a given OTU table picked against the newest version of\
  \ GreenGenes.\n predict_metagenomes.py -i normalized_otus.biom -o predicted_metagenomes.biom\n\
  \nChange output format to plain tab-delimited\n predict_metagenomes.py -f -i normalized_otus.biom\
  \ -o predicted_metagenomes.txt\n\nPredict KO abundances for a given OTU table, but\
  \ do not round predictions to nearest whole number (esp. needed for proportional\
  \ abundances)\n predict_metagenomes.py --no_round -i normalized_otus.biom -o predicted_metagenomes.txt\n\
  \nPredict COG abundances for a given OTU table.\n predict_metagenomes.py -i normalized_otus.biom\
  \ -t cog -o cog_predicted_metagenomes.biom\n\nPredict RFAM abundances for a given\
  \ OTU table.\n predict_metagenomes.py -i normalized_otus.biom -t rfam -o rfam_predicted_metagenomes.biom\n\
  \nOutput confidence intervals for each prediction.\n predict_metagenomes.py -i normalized_otus.biom\
  \ -o predicted_metagenomes.biom --with_confidence\n\nPredict metagenomes using a\
  \ custom trait table in tab-delimited format.\n predict_metagenomes.py -i otu_table_for_custom_trait_table.biom\
  \ -c custom_trait_table.tab -o output_metagenome_from_custom_trait_table.biom\n\n\
  Predict metagenomes,variances,and 95% confidence intervals for each gene category\
  \ using a custom trait table in tab-delimited format.\n predict_metagenomes.py -i\
  \ otu_table_for_custom_trait_table.biom --input_variance_table custom_trait_table_variances.tab\
  \ -c custom_trait_table.tab -o output_metagenome_from_custom_trait_table.biom --with_confidence\n\
  \nChange the version of GG used to pick OTUs\n predict_metagenomes.py -i normalized_otus.biom\
  \ -g 18may2012 -o predicted_metagenomes.biom\n\nOptions:\n  --version          \
  \   show program's version number and exit\n  -h, --help            show this help\
  \ message and exit\n  -v, --verbose         Print information during execution --\
  \ useful for\n                        debugging [default: False]\n  -t TYPE_OF_PREDICTION,\
  \ --type_of_prediction=TYPE_OF_PREDICTION\n                        Type of functional\
  \ predictions. Valid choices are: ko,\n                        cog, rfam [default:\
  \ ko]\n  -g GG_VERSION, --gg_version=GG_VERSION\n                        Version\
  \ of GreenGenes that was used for OTU picking.\n                        Valid choices\
  \ are: 13_5, 18may2012 [default: 13_5]\n  -c INPUT_COUNT_TABLE, --input_count_table=INPUT_COUNT_TABLE\n\
  \                        Precalculated function predictions on per otu basis in\n\
  \                        biom format (can be gzipped). Note: using this option\n\
  \                        overrides --type_of_prediction and --gg_version.\n    \
  \                    [default: none]\n  -a ACCURACY_METRICS, --accuracy_metrics=ACCURACY_METRICS\n\
  \                        If provided, calculate accuracy metrics for the\n     \
  \                   predicted metagenome.  NOTE: requires that per-genome\n    \
  \                    accuracy metrics were calculated using\n                  \
  \      predict_traits.py during genome prediction (e.g. there\n                \
  \        are \"NSTI\" values in the genome .biom file metadata)\n  --no_round  \
  \          Disable rounding number of predicted functions to the\n             \
  \           the nearest whole number. This option is important if\n            \
  \            you are inputting abundances as proportions [default:\n           \
  \             False]\n  --normalize_by_function\n                        Normalizes\
  \ the predicted functional abundances by\n                        dividing each\
  \ abundance by the sum of functional\n                        abundances in the\
  \ sample. Total sum of abundances for\n                        each sample will\
  \ equal 1.\n  --normalize_by_otu    Normalizes the predicted functional abundances\
  \ by\n                        dividing each abundance by the sum of OTUs in the\n\
  \                        sample. Note: total sum of abundances for each sample\n\
  \                        will NOT equal 1.\n  --suppress_subset_loading\n      \
  \                  Normally, only counts for OTUs present in the sample\n      \
  \                  are loaded.  If this flag is passed, the full biom\n        \
  \                table is loaded.  This makes no difference for the\n          \
  \              analysis, but may result in faster load times (at the\n         \
  \               cost of more memory usage)\n  --load_precalc_file_in_biom\n    \
  \                    Instead of loading the precalculated file in tab-\n       \
  \                 delimited format (with otu ids as row ids and traits\n       \
  \                 as columns) load the data in biom format (with otu as\n      \
  \                  SampleIds and traits as ObservationIds) [default:\n         \
  \               False]\n  --input_variance_table=INPUT_VARIANCE_TABLE\n        \
  \                Precalculated table of variances corresponding to the\n       \
  \                 precalculated table of function predictions.  As with\n      \
  \                  the count table, these are on a per otu basis and in\n      \
  \                  BIOM format (can be gzipped). Note: using this option\n     \
  \                   overrides --type_of_prediction and --gg_version.\n         \
  \               [default: none]\n  --with_confidence     Calculate 95% confidence\
  \ intervals for metagenome\n                        predictions.  By default, this\
  \ uses the confidence\n                        intervals for the precalculated table\
  \ of genes for\n                        greengenes OTUs.  If you pass a custom count\
  \ table\n                        with -c and select this option, you must also specify\n\
  \                        a corresponding table of confidence intervals for the\n\
  \                        gene content prediction using --input_variance_table.\n\
  \                        (these are generated by running predict_traits.py with\n\
  \                        the --with_confidence option). If this flag is set,\n \
  \                       three addtional output files will be generated, named\n\
  \                        the same as the metagenome prediction output, but with\n\
  \                        .variance .upper_CI or .lower_CI appended immediately\n\
  \                        before the file extension [default: False]\n  -f, --format_tab_delimited\n\
  \                        output the predicted metagenome table in tab-delimited\n\
  \                        format [default: False]\n\n  REQUIRED options:\n    The\
  \ following options must be provided under all circumstances.\n\n    -i INPUT_OTU_TABLE,\
  \ --input_otu_table=INPUT_OTU_TABLE\n                        the input otu table\
  \ in biom format [REQUIRED]\n    -o OUTPUT_METAGENOME_TABLE, --output_metagenome_table=OUTPUT_METAGENOME_TABLE\n\
  \                        the output file for the predicted metagenome\n        \
  \                [REQUIRED]\n"
generated_using:
- --help
