from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int

Anvi_Gen_Variability_Matrix_V0_1_0 = CommandToolBuilder(tool="anvi_gen_variability_matrix", base_command=["anvi-gen-variability-matrix"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs-database' (default: None)")), ToolInput(tag="in_splits_of_interest", input_type=File(optional=True), prefix="--splits-of-interest", doc=InputDocumentation(doc="A file with split names. There should be only one\ncolumn in the file, and each line should correspond to\na unique split name. (default: None)")), ToolInput(tag="in_samples_of_interest", input_type=File(optional=True), prefix="--samples-of-interest", doc=InputDocumentation(doc="A file with samples names. There should be only one\ncolumn in the file, and each line should correspond to\na unique sample name (without a column header).\n(default: None)")), ToolInput(tag="in_num_positions_from_each_split", input_type=Int(optional=True), prefix="--num-positions-from-each-split", doc=InputDocumentation(doc="Each split may have one or more variable positions. By\ndefault, anvi'o will report every SNV position found\nin a given split. This parameter will help you to\ndefine a cutoff for the maximum number of SNVs to be\nreported from a split (if the number of SNVs is more\nthan the number you declare using this parameter, the\npositions will be randomly subsampled). (default: 0)")), ToolInput(tag="in_min_scatter", input_type=Int(optional=True), prefix="--min-scatter", doc=InputDocumentation(doc="This one is tricky. If you have N samples in your\ndataset, a given variable position x in one of your\nsplits can split your N samples into `t` groups based\non the identity of the variation they harbor at\nposition x. For instance, `t` would have been 1, if\nall samples had the same type of variation at position\nx (which would not be very interesting, because in\nthis case position x would have zero contribution to a\ndeeper understanding of how these samples differ based\non variability. When `t` > 1, it would mean that\nidentities at position x across samples do differ. But\nhow much scattering occurs based on position x when t\n> 1? If t=2, how many samples ended in each group?\nObviously, even distribution of samples across groups\nmay tell us something different than uneven\ndistribution of samples across groups. So, this\nparameter filters out any x if 'the number of samples\nin the second largest group' (=scatter) is less than\n-m. Here is an example: let's assume you have 7\nsamples. While 5 of those have AG, 2 of them have TC\nat position x. This would mean scatter of x is 2. If\nyou set -m to 2, this position would not be reported\nin your output matrix. The default value for -m is 0,\nwhich means every `x` found in the database and\nsurvived previous filtering criteria will be reported.\nNaturally, -m cannot be more than half of the number\nof samples. Please refer to the user documentation if\nthis is confusing.")), ToolInput(tag="in_min_ratio_of_competing_s_nts", input_type=Int(optional=True), prefix="--min-ratio-of-competings-nts", doc=InputDocumentation(doc="Minimum ratio of the competing nucleotides at a given\nposition. Default is 0.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File path to store results. (default: variability.txt)"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store results. (default: variability.txt)"))], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Gen_Variability_Matrix_V0_1_0().translate("wdl")

