from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int

Lra_Align_V0_1_0 = CommandToolBuilder(tool="lra_align", base_command=["lra", "align"], inputs=[ToolInput(tag="in_ccs", input_type=Boolean(optional=True), prefix="-CCS", doc=InputDocumentation(doc="(flag) Align CCS reads.")), ToolInput(tag="in_clr", input_type=Boolean(optional=True), prefix="-CLR", doc=InputDocumentation(doc="(flag) Align CLR reads.")), ToolInput(tag="in_ont", input_type=Boolean(optional=True), prefix="-ONT", doc=InputDocumentation(doc="(flag) Align Nanopore reads.")), ToolInput(tag="in_contig", input_type=Boolean(optional=True), prefix="-CONTIG", doc=InputDocumentation(doc="(flag) Align large contigs.")), ToolInput(tag="in_print_alignment_format", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[FMT]   Print alignment format FMT='b' bed, 's' sam, 'p' PAF, 'pc' PAF with cigar, 'a' pairwise alignment.")), ToolInput(tag="in_use_hardclipping_sam", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="Use hard-clipping for SAM output format")), ToolInput(tag="in_flag", input_type=Boolean(optional=True), prefix="-Flag", doc=InputDocumentation(doc="F(int)  Skip reads with any flags in F set (bam input only).")), ToolInput(tag="in_nint_use_threads", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="n(int)   Use n threads (1)")), ToolInput(tag="in_flag_query_positions", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="(flag)  Query all positions in a read, not just minimizers.")), ToolInput(tag="in_sv", input_type=Boolean(optional=True), prefix="-SV", doc=InputDocumentation(doc="(int) (path to svsig file)  Print sv signatures for each alignment with length above the given threshold (DEFAULT:25). And the path of output svsig file")), ToolInput(tag="in_at", input_type=Boolean(optional=True), prefix="-at", doc=InputDocumentation(doc="(float) a float in (0, 1), Threshold to decide secondary alignments based on chaining value (DEFAULT:0.7).")), ToolInput(tag="in_start", input_type=Boolean(optional=True), prefix="--start", doc=InputDocumentation(doc="(int)   Start aligning at this read.")), ToolInput(tag="in_stride", input_type=Boolean(optional=True), prefix="--stride", doc=InputDocumentation(doc="(int)   Read stride (for multi-job alignment of the same file).")), ToolInput(tag="in_flag_enable_dotplot", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="(flag)  Enable dotPlot")), ToolInput(tag="in_pal", input_type=Boolean(optional=True), prefix="-PAl", doc=InputDocumentation(doc="(int) Print at most how many alignments for one read")), ToolInput(tag="in_al", input_type=Boolean(optional=True), prefix="-Al", doc=InputDocumentation(doc="(int) Compute at most how many alignments for one read")), ToolInput(tag="in_pass_through", input_type=String(optional=True), prefix="--passthrough", doc=InputDocumentation(doc="auxilary tags from the input unaligned bam to the output")), ToolInput(tag="in_genome_dot_fa", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_reads", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_reads_two", input_type=Int(optional=True), position=2, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/lra:1.1.2--h5ef6573_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Lra_Align_V0_1_0().translate("wdl")

