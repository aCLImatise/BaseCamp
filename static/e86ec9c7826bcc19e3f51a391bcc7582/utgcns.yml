!Command
positional:
- !Positional
  description: -e e            Expect alignments at up to fraction e error -em m           Don't
    ever allow alignments more than fraction m error -l l            Expect alignments
    of at least l bases -maxcoverage c  Use non-contained reads and the longest contained
    reads, up to C coverage, for consensus generation.  The default is 0, and will
    use all reads. -threads t      Use 't' compute threads; default 1.
  position: 0
  name: PARAMETERS
  optional: false
- !Positional
  description: -v              Show multialigns. -V              Enable debugging
    option 'verbosemultialign'.
  position: 1
  name: LOGGING
  optional: false
named:
- !Flag
  description: Write computed tigs to binary output file 'results'
  synonyms:
  - -O
  args: !SimpleFlagArg
    name: results
  optional: true
- !Flag
  description: Write computed tigs to layout output file 'layouts'
  synonyms:
  - -L
  args: !SimpleFlagArg
    name: layouts
  optional: true
- !Flag
  description: Write computed tigs to fasta  output file 'fasta'
  synonyms:
  - -A
  args: !SimpleFlagArg
    name: fasta
  optional: true
- !Flag
  description: Write computed tigs to fastq  output file 'fastq'
  synonyms:
  - -Q
  args: !SimpleFlagArg
    name: fastq
  optional: true
- !Flag
  description: Create a copy of the inputs needed to compute the tigs.  This file
    can then be sent to the developers for debugging.  The tig(s) are not processed
    and no other outputs are created.  Ideally, only one tig is selected (-u, below).
  synonyms:
  - -export
  args: !SimpleFlagArg
    name: name
  optional: true
command:
- utgcns
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "usage: utgcns [opts]\n\n  INPUT\n    -S g            Load reads from sqStore\
  \ 'g'\n    -R f            Load reads from partition file 'f'\n    -T t v      \
  \    Load tig from tgStore 't'.\n    -t file         Test the computation of the\
  \ tig layout in 'file'\n                      'file' can be from:\n            \
  \            'tgStoreDump -d layout' (human readable layout format)\n          \
  \              'utgcns -L'             (human readable layout format)\n        \
  \                'utgcns -O'             (binary multialignment format)\n\n    -import\
  \ name    Load tig and reads from file 'name' created with -export.  This\n    \
  \                is usually used by developers.\n\n\n  ALGORITHM\n    -quick   \
  \       Stitch reads together to cover the contig.  The bases in the contig\n  \
  \                  is formed from exactly one read; no consensus sequence is computed.\n\
  \                    This is useful for checking intermediate assembly structure\
  \ by mapping\n                    to reference, or as input to a polishing step.\
  \  Read positions will be\n                    incorrect, and no BAM output is possible.\n\
  \n    -pbdagcon       Use pbdagcon (https://github.com/PacificBiosciences/pbdagcon).\n\
  \                    This is fast and robust.  It is the default algorithm.  It\
  \ does not\n                    generate a final multialignment output (the -v option\
  \ will not show\n                    anything useful).\n\n    -norealign      Disable\
  \ alignment of reads back to the final consensus sequence.\n\n\n  ALIGNER\n    -edlib\
  \          Myers' O(ND) algorithm from Edlib (https://github.com/Martinsos/edlib).\n\
  \                    This is the default (and, yes, there is no non-default aligner).\n\
  \n\n  OUTPUT\n    -O results      Write computed tigs to binary output file 'results'\n\
  \    -L layouts      Write computed tigs to layout output file 'layouts'\n    -A\
  \ fasta        Write computed tigs to fasta  output file 'fasta'\n    -Q fastq \
  \       Write computed tigs to fastq  output file 'fastq'\n\n    -export name  \
  \  Create a copy of the inputs needed to compute the tigs.  This\n             \
  \       file can then be sent to the developers for debugging.  The tig(s)\n   \
  \                 are not processed and no other outputs are created.  Ideally,\n\
  \                    only one tig is selected (-u, below).\n\n\n  TIG SELECTION\
  \ (if -T input is used)\n    -tig b          Compute only tig ID 'b' (must be in\
  \ the correct partition!)\n    -tig b-e        Compute only tigs from ID 'b' to\
  \ ID 'e'\n    -u              Alias for -tig\n    -minlength l    Do not compute\
  \ consensus for tigs shorter than l bases.\n    -maxlength l    Do not compute consensus\
  \ for tigs longer than l bases.\n\n    -onlyunassem    Only compute consensus for\
  \ unassembled tigs.\n    -onlycontig     Only compute consensus for real unitigs/contigs.\n\
  \n    -norepeat       Do not compute consensus for repeat tigs.\n    -nobubble \
  \      Do not compute consensus for bubble tigs.\n    -nosingleton    Do not compute\
  \ consensus for singleton (single-read) tigs.\n\n  PARAMETERS\n    -e e        \
  \    Expect alignments at up to fraction e error\n    -em m           Don't ever\
  \ allow alignments more than fraction m error\n    -l l            Expect alignments\
  \ of at least l bases\n    -maxcoverage c  Use non-contained reads and the longest\
  \ contained reads, up to\n                    C coverage, for consensus generation.\
  \  The default is 0, and will\n                    use all reads.\n    -threads\
  \ t      Use 't' compute threads; default 1.\n\n  LOGGING\n    -v              Show\
  \ multialigns.\n    -V              Enable debugging option 'verbosemultialign'.\n\
  \nUnknown option '--help'.\nERROR:  No sequence data!  Need one of seqStore (-S),\
  \ read file (-R) or package (-p).\nERROR:  No tigStore (-T) OR no test tig (-t)\
  \ OR no package (-p) supplied.\n"
generated_using:
- --help
