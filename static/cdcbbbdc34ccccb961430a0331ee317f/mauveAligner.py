from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean, Directory

Mauvealigner_V0_1_0 = CommandToolBuilder(tool="mauveAligner", base_command=["mauveAligner"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file name.  Prints to screen by default")), ToolInput(tag="in_mums", input_type=String(optional=True), prefix="--mums", doc=InputDocumentation(doc="MUMs only, do not attempt to determine locally collinear blocks (LCBs)")), ToolInput(tag="in_no_recursion", input_type=String(optional=True), prefix="--no-recursion", doc=InputDocumentation(doc="'t perform recursive anchor identification (implies --no-gapped-alignment)")), ToolInput(tag="in_no_lcb_extension", input_type=String(optional=True), prefix="--no-lcb-extension", doc=InputDocumentation(doc="determining LCBs, don't attempt to extend the LCBs")), ToolInput(tag="in_seed_size", input_type=Int(optional=True), prefix="--seed-size", doc=InputDocumentation(doc="Initial seed match size, default is log_2( average seq. length )")), ToolInput(tag="in_max_extension_iterations", input_type=Int(optional=True), prefix="--max-extension-iterations", doc=InputDocumentation(doc="Limit LCB extensions to this number of attempts, default is 4")), ToolInput(tag="in_eliminate_inclusions", input_type=String(optional=True), prefix="--eliminate-inclusions", doc=InputDocumentation(doc="linked inclusions in subset matches.")), ToolInput(tag="in_weight", input_type=Int(optional=True), prefix="--weight", doc=InputDocumentation(doc="Minimum LCB weight in base pairs per sequence")), ToolInput(tag="in_match_input", input_type=File(optional=True), prefix="--match-input", doc=InputDocumentation(doc="Use specified match file instead of searching for matches")), ToolInput(tag="in_lcb_match_input", input_type=Boolean(optional=True), prefix="--lcb-match-input", doc=InputDocumentation(doc="Indicates that the match input file contains matches that have been clustered into LCBs")), ToolInput(tag="in_lcb_input", input_type=File(optional=True), prefix="--lcb-input", doc=InputDocumentation(doc="Use specified lcb file instead of constructing LCBs (skips LCB generation)")), ToolInput(tag="in_scratch_path", input_type=File(optional=True), prefix="--scratch-path", doc=InputDocumentation(doc="For large genomes, use a directory for storage of temporary data.  Should be given two or more times to with different paths.")), ToolInput(tag="in_id_matrix", input_type=File(optional=True), prefix="--id-matrix", doc=InputDocumentation(doc="Generate LCB stats and write them to the specified file")), ToolInput(tag="in_island_size", input_type=Int(optional=True), prefix="--island-size", doc=InputDocumentation(doc="Find islands larger than the given number")), ToolInput(tag="in_island_output", input_type=File(optional=True), prefix="--island-output", doc=InputDocumentation(doc="Output islands the given file (requires --island-size)")), ToolInput(tag="in_backbone_size", input_type=Int(optional=True), prefix="--backbone-size", doc=InputDocumentation(doc="Find stretches of backbone longer than the given number of b.p.")), ToolInput(tag="in_max_backbone_gap", input_type=Int(optional=True), prefix="--max-backbone-gap", doc=InputDocumentation(doc="Allow backbone to be interrupted by gaps up to this length in b.p.")), ToolInput(tag="in_backbone_output", input_type=File(optional=True), prefix="--backbone-output", doc=InputDocumentation(doc="Output islands the given file (requires --island-size)")), ToolInput(tag="in_coverage_output", input_type=File(optional=True), prefix="--coverage-output", doc=InputDocumentation(doc="Output a coverage list to the specified file (- for stdout)")), ToolInput(tag="in_repeats", input_type=String(optional=True), prefix="--repeats", doc=InputDocumentation(doc="a repeat map.  Only one sequence can be specified")), ToolInput(tag="in_output_guide_tree", input_type=File(optional=True), prefix="--output-guide-tree", doc=InputDocumentation(doc="Write out a guide tree to the designated file")), ToolInput(tag="in_collinear", input_type=String(optional=True), prefix="--collinear", doc=InputDocumentation(doc="that input sequences are collinear--they have no rearrangements")), ToolInput(tag="in_no_gapped_alignment", input_type=String(optional=True), prefix="--no-gapped-alignment", doc=InputDocumentation(doc="'t perform a gapped alignment")), ToolInput(tag="in_max_gapped_aligner_length", input_type=Int(optional=True), prefix="--max-gapped-aligner-length", doc=InputDocumentation(doc="Maximum number of base pairs to attempt aligning with the gapped aligner")), ToolInput(tag="in_min_recursive_gap_length", input_type=Int(optional=True), prefix="--min-recursive-gap-length", doc=InputDocumentation(doc="Minimum size of gaps that Mauve will perform recursive MUM anchoring on (Default is 200)")), ToolInput(tag="in_permutation_matrix_output", input_type=File(optional=True), prefix="--permutation-matrix-output", doc=InputDocumentation(doc="Write out the LCBs as a signed permutation matrix to the given file")), ToolInput(tag="in_permutation_matrix_min_weight", input_type=Int(optional=True), prefix="--permutation-matrix-min-weight", doc=InputDocumentation(doc="A permutation matrix will be written for every set of LCBs with weight between this value and the value of --weight")), ToolInput(tag="in_alignment_output_dir", input_type=Directory(optional=True), prefix="--alignment-output-dir", doc=InputDocumentation(doc="Outputs a set of alignment files (one per LCB) to a given directory")), ToolInput(tag="in_alignment_output_format", input_type=Directory(optional=True), prefix="--alignment-output-format", doc=InputDocumentation(doc="Selects the output format for --alignment-output-dir")), ToolInput(tag="in_output_alignment", input_type=File(optional=True), prefix="--output-alignment", doc=InputDocumentation(doc="Write out an XMFA format alignment to the designated file")), ToolInput(tag="in_seq_n_filename", input_type=File(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_s_mln_filename", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file name.  Prints to screen by default")), ToolOutput(tag="out_coverage_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_coverage_output", type_hint=File()), doc=OutputDocumentation(doc="Output a coverage list to the specified file (- for stdout)")), ToolOutput(tag="out_output_guide_tree", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_guide_tree", type_hint=File()), doc=OutputDocumentation(doc="Write out a guide tree to the designated file")), ToolOutput(tag="out_permutation_matrix_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_permutation_matrix_output", type_hint=File()), doc=OutputDocumentation(doc="Write out the LCBs as a signed permutation matrix to the given file")), ToolOutput(tag="out_output_alignment", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_alignment", type_hint=File()), doc=OutputDocumentation(doc="Write out an XMFA format alignment to the designated file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mauvealigner_V0_1_0().translate("wdl", allow_empty_container=True)

