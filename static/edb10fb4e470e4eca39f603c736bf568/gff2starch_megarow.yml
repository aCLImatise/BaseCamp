!Command
positional: []
named: []
command:
- gff2starch-megarow
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "convert2bed -i gff\n  version:  2.4.39\n  author:   Alex Reynolds\n\n\
  \  Converts 1-based, closed [a, b] GFF3 input into 0-based, half-\n  open [a-1,\
  \ b) six-column extended BED or BEDOPS Starch\n\n  Usage:\n\n  $ gff2bed < foo.gff\
  \ > sorted-foo.gff.bed\n  $ gff2starch < foo.gff > sorted-foo.gff.starch\n\n  Or:\n\
  \n  $ convert2bed -i gff < foo.gff > sorted-foo.gff.bed\n  $ convert2bed -i gff\
  \ -o starch < foo.gff > sorted-foo.gff.starch\n\n  We make no assumptions about\
  \ sort order from converted output. Apply\n  the usage case displayed to pass data\
  \ to the sort-bed application,\n  which generates lexicographically-sorted BED data\
  \ as output.\n\n  If you want to skip sorting, use the --do-not-sort option:\n\n\
  \  $ gff2bed --do-not-sort < foo.gff > unsorted-foo.gff.bed\n\n  The GFF3 specification\
  \ (http://www.sequenceontology.org/gff3.shtml) \n  contains columns that do not\
  \ map directly to common or UCSC BED columns.\n  Therefore, we add the following\
  \ columns to preserve the ability to\n  seamlessly convert back to GFF3 after performing\
  \ operations with\n  bedops, bedmap, or other BEDOPS or BED-processing tools.\n\n\
  \  - The 'source' GFF column data maps to the 7th BED column\n  - The 'type' data\
  \ maps to the 8th BED column\n  - The 'phase' data maps to the 9th BED column\n\
  \  - The 'attributes' data maps to the 10th BED column\n\n  We make the following\
  \ assumptions about the GFF3 input data:\n\n  - The 'seqid' GFF column data maps\
  \ to the chromosome label (1st BED column)\n  - The 'ID' attribute in the 'attributes'\
  \ GFF column (if present) maps to\n    the element ID (4th BED column)\n  - The\
  \ 'score' and 'strand' GFF columns (if present) are mapped to the\n    5th and 6th\
  \ BED columns, respectively\n\n  If we encounter zero-length insertion elements\
  \ (which are defined\n  where the start and stop GFF column data values are equivalent),\
  \ the\n  start coordinate is decremented to convert to 0-based, half-open indexing,\n\
  \  and a 'zero_length_insertion' attribute is added to the 'attributes' GFF\n  column\
  \ data.\n\n  Metadata and header fields are usually stripped. Use the --keep-header\n\
  \  option to preserve these data as pseudo-BED elements that use the \"_header\"\
  \n  chromosome name.\n\n  GFF conversion options:\n\n  --keep-header (-k)\n    \
  \  Preserve header section as pseudo-BED elements\n\n  Other processing options:\n\
  \n  --do-not-sort (-d)\n      Do not sort BED output with sort-bed (not compatible\
  \ with --output=starch)\n  --max-mem=<value> (-m <val>)\n      Sets aside <value>\
  \ memory for sorting BED output. For example, <value> can\n      be 8G, 8000M or\
  \ 8000000000 to specify 8 GB of memory (default is 2G)\n  --sort-tmpdir=<dir> (-r\
  \ <dir>)\n      Optionally sets [dir] as temporary directory for sort data, when\
  \ used in\n      conjunction with --max-mem=[value], instead of the host's operating\
  \ system\n      default temporary directory\n  --starch-bzip2 (-z)\n      Used with\
  \ --output=starch, the compressed output explicitly applies the bzip2\n      algorithm\
  \ to compress intermediate data (default is bzip2)\n  --starch-gzip (-g)\n     \
  \ Used with --output=starch, the compressed output applies gzip compression on\n\
  \      intermediate data\n  --starch-note=\"xyz...\" (-e \"xyz...\")\n      Used\
  \ with --output=starch, this adds a note to the Starch archive metadata\n  --help\
  \ | --help[-bam|-gff|-gtf|-gvf|-psl|-rmsk|-sam|-vcf|-wig] (-h | -h <fmt>)\n    \
  \  Show general help message (or detailed help for a specified input format)\n \
  \ --version (-w)\n      Show application version\n\n"
generated_using:
- --help
