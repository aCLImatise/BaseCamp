from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean, File

Fastsimbac_V0_1_0 = CommandToolBuilder(tool="fastSimBac", base_command=["fastSimBac"], inputs=[ToolInput(tag="in_debugging_messages", input_type=String(optional=True), prefix="-s", doc=InputDocumentation(doc="debugging messages")), ToolInput(tag="in_mutation_rate_generations", input_type=Int(optional=True), prefix="-i", doc=InputDocumentation(doc="(mutation rate per site per 2N generations)")), ToolInput(tag="in_input_clonal_frame", input_type=Int(optional=True), prefix="-C", doc=InputDocumentation(doc="(the input clonal frame to fix simulations on, sample names must be integers from 0 on)")), ToolInput(tag="in_burn_used_initialize", input_type=Int(optional=True), prefix="-b", doc=InputDocumentation(doc="(burn in: sequence length in base pairs to be used to initialize the recombination process)")), ToolInput(tag="in_lambda_r_recombination", input_type=Int(optional=True), prefix="-r", doc=InputDocumentation(doc="<lambda> (r = recombination (gene conversion) initiation rate per-individual, per-base pair, per-2N generations; lambda = mean length of recombination tract in base pairs)")), ToolInput(tag="in_lambda_r_rate", input_type=Int(optional=True), prefix="-x", doc=InputDocumentation(doc="<lambda2> (r2 = between-species recombination (gene conversion) initiation rate per-individual, per-base pair, per-2N generations; lambda2 = mean length of between-species recombination tract in base pairs)")), ToolInput(tag="in_print_local_tree", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="(Print each local tree in Newick format to standard out)")), ToolInput(tag="in_tab_delimited_file", input_type=File(optional=True), prefix="-R", doc=InputDocumentation(doc="(Tab delimited file where first two columns indicate range of base pair positions scaled to the unit interval and last column is ratio with respect to base line recombination rate)")), ToolInput(tag="in_tab_delimited_frequency", input_type=File(optional=True), prefix="-F", doc=InputDocumentation(doc="[0|1] (Tab delimited frequency distribution file where first column indicate range of SNP allele frequencies from previous row to current row and last column is desired bin frequency. Second parameter is 1 if SNPs with derived allele freq > 1.0 should have alleles flipped, 0 otherwise)")), ToolInput(tag="in_assign_growth_rate", input_type=String(optional=True), prefix="-G", doc=InputDocumentation(doc="(Assign growth rate alpha across populations where alpha=-log(Np/Nr) )")), ToolInput(tag="in_migrate_assign_elements", input_type=Int(optional=True), prefix="-I", doc=InputDocumentation(doc="<n1> <n2> .. <mig_rate> (Assign all elements of the migration matrix for n populations.  Values in matrix set to mig_rate/(n-1) )")), ToolInput(tag="in_m_assign_ijth", input_type=String(optional=True), prefix="-m", doc=InputDocumentation(doc="<j> <m>  (Assign i,j-th element of migration matrix to m)")), ToolInput(tag="in_ma", input_type=Int(optional=True), prefix="-ma", doc=InputDocumentation(doc="..<m_12>..<m_nn> (Assign values to all elements of migration matrix for n populations)")), ToolInput(tag="in_size_pop_i", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="<size>   (Pop i has size set to size*N_0)")), ToolInput(tag="in_alpha_used_appear", input_type=String(optional=True), prefix="-g", doc=InputDocumentation(doc="<alpha>  (If used must appear after -M option)")), ToolInput(tag="in_alpha_assign_growth", input_type=String(optional=True), prefix="-eG", doc=InputDocumentation(doc="<alpha>  (Assign growth rate for all pops at time t)")), ToolInput(tag="in_i_alpha_assign", input_type=String(optional=True), prefix="-eg", doc=InputDocumentation(doc="<i> <alpha>  (Assign growth rate alpha of pop i at time t)")), ToolInput(tag="in_m_assign_rate", input_type=String(optional=True), prefix="-eM", doc=InputDocumentation(doc="<m> (Assign migrate rate m for all elements of migration matrix at time t)")), ToolInput(tag="in_i_mij_assign", input_type=String(optional=True), prefix="-em", doc=InputDocumentation(doc="<i> <j> <m_ij> (Assign migration rate for i,j-th element of migration matrix at time t)")), ToolInput(tag="in_ema", input_type=Int(optional=True), prefix="-ema", doc=InputDocumentation(doc="<n> <m_11>..<m_12>..<m_nn> (Assign migration rates  within the migration matrix for n populations at time t)")), ToolInput(tag="in_size_new_sizes", input_type=Int(optional=True), prefix="-eN", doc=InputDocumentation(doc="<size> (New pop sizes at time t for all pops where new sizes = size*N_0)")), ToolInput(tag="in_i_sizei_size", input_type=Int(optional=True), prefix="-en", doc=InputDocumentation(doc="<i> <size_i> (New pop size of pop i will be set to (size_i*N_0) at time t)")), ToolInput(tag="in_es", input_type=Int(optional=True), prefix="-es", doc=InputDocumentation(doc="<i> <p> (Split two populations.  At time t, a proportion p of chromosomes from pop i will migrate to a population i+1)")), ToolInput(tag="in_ej", input_type=String(optional=True), prefix="-ej", doc=InputDocumentation(doc="<i> <j> (Join two populations.  At time t all chromosomes migrate from pop i to pop j)")), ToolInput(tag="in_sample_size", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_region_in_base_pairs", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/fastsimbac:1.0.1_bd3ad13d8f79--h17a57d0_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fastsimbac_V0_1_0().translate("wdl")

