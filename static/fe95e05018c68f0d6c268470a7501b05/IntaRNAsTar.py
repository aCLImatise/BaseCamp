from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String, File

Intarnastar_V0_1_0 = CommandToolBuilder(tool="IntaRNAsTar", base_command=["IntaRNAsTar"], inputs=[ToolInput(tag="in_arg_rna_sequence_streamfile_where_read_query", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="[ --query ] arg            either an RNA sequence or the stream/file name\nfrom where to read the query sequences (should\nbe the shorter sequences to increase\nefficiency); use 'STDIN' to read from standard\ninput stream; sequences have to use IUPAC\nnucleotide encoding; output alias is [seq2]")), ToolInput(tag="in_arg_rna_sequence_streamfile_where_read_sequences", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --target ] arg           either an RNA sequence or the stream/file name\nfrom where to read the target sequences (should\nbe the longer sequences to increase\nefficiency); use 'STDIN' to read from standard\ninput stream; sequences have to use IUPAC\nnucleotide encoding; output alias is [seq1]")), ToolInput(tag="in_helix_min_bp", input_type=Int(optional=True), prefix="--helixMinBP", doc=InputDocumentation(doc="(=2)         minimal number of base pairs inside a helix\n(arg in range [2,4])")), ToolInput(tag="in_helix_max_bp", input_type=Int(optional=True), prefix="--helixMaxBP", doc=InputDocumentation(doc="(=10)        maximal number of base pairs inside a helix\n(arg in range [2,20])")), ToolInput(tag="in_helix_max_il", input_type=Int(optional=True), prefix="--helixMaxIL", doc=InputDocumentation(doc="(=0)         maximal size for each internal loop size in a\nhelix (arg in range [0,2]).")), ToolInput(tag="in_helix_min_pu", input_type=Int(optional=True), prefix="--helixMinPu", doc=InputDocumentation(doc="(=0)         minimal unpaired probability (per sequence) of\nconsidered helices (arg in range [0,1]).")), ToolInput(tag="in_helix_max_e", input_type=Int(optional=True), prefix="--helixMaxE", doc=InputDocumentation(doc="(=0)          maximal energy (excluding) a helix may have\n(arg in range [-999,999]).")), ToolInput(tag="in_helix_full_e", input_type=Boolean(optional=True), prefix="--helixFullE", doc=InputDocumentation(doc="[=arg(=1)] (=0)  if given (or true), the overall energy of a\nhelix (including E_init, ED, dangling ends, ..)\nwill be used for helixMaxE checks; otherwise\nonly loop-terms are considered.")), ToolInput(tag="in_no_seed", input_type=Boolean(optional=True), prefix="--noSeed", doc=InputDocumentation(doc="[=arg(=1)] (=0)      if given (or true), no seed is enforced within\nthe predicted interactions")), ToolInput(tag="in_seed_tq", input_type=Int(optional=True), prefix="--seedTQ", doc=InputDocumentation(doc="comma separated list of explicit seed base pair\nencoding(s) in the format\nstartTbpsT&startQbpsQ, e.g. '3|||.|&7||.||',\nwhere 'startT/Q' are the indices of the 5' seed\nends in target/query sequence and 'bpsT/Q' the\nrespective dot-bar base pair encodings. This\ndisables all other seed constraints and seed\nidentification.")), ToolInput(tag="in_seed_bp", input_type=Int(optional=True), prefix="--seedBP", doc=InputDocumentation(doc="(=7)             number of inter-molecular base pairs within the\nseed region (arg in range [2,20])")), ToolInput(tag="in_arg_h_prediction", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --mode ] arg (=H)        prediction mode :\n'H' = heuristic (fast and low memory),\n'M' = exact (slow),\n'S' = seed-only")), ToolInput(tag="in_model", input_type=String(optional=True), prefix="--model", doc=InputDocumentation(doc="(=X)              interaction model :\n'S' = single-site, minimum-free-energy\ninteraction (interior loops only),\n'X' = single-site, minimum-free-energy\ninteraction via seed-extension (interior loops\nonly),\n'B' = single-site, helix-block-based,\nminimum-free-energy interaction (blocks of\nstable helices and interior loops only),\n'P' = single-site interaction with minimal\nfree ensemble energy per site (interior loops\nonly)")), ToolInput(tag="in_acc", input_type=String(optional=True), prefix="--acc", doc=InputDocumentation(doc="(=C)                accessibility computation :\n'N' no accessibility contributions\n'C' computation of accessibilities (see --accW\nand --accL)")), ToolInput(tag="in_int_len_max", input_type=Int(optional=True), prefix="--intLenMax", doc=InputDocumentation(doc="(=60)         interaction site : maximal window size to be\nconsidered for interaction (arg in range\n[0,99999]; 0 refers to the full sequence\nlength). If --accW is provided, the smaller\nwindow size of both is used.")), ToolInput(tag="in_int_loop_max", input_type=Int(optional=True), prefix="--intLoopMax", doc=InputDocumentation(doc="(=8)         interaction site : maximal number of unpaired\nbases between neighbored interacting bases to\nbe considered in interactions (arg in range\n[0,30]; 0 enforces stackings only)")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="(=STDOUT)           output (multi-arg) : provide a file name for\noutput (will be overwritten) or 'STDOUT/STDERR'\nto write to the according stream (according to\n--outMode).\nUse one of the following PREFIXES\n(colon-separated) to generate ADDITIONAL\noutput:\n'qMinE:' (query) for each position the minimal\nenergy of any interaction covering the position\n(CSV format)\n'qSpotProb:' (query) for each position the\nprobability that is is covered by an\ninteraction covering (CSV format)\n'qAcc:' (query) ED accessibility values\n('qPu'-like format).\n'qPu:' (query) unpaired probabilities values\n(RNAplfold format).\n'tMinE:' (target) for each position the\nminimal energy of any interaction covering the\nposition (CSV format)\n'tSpotProb:' (target) for each position the\nprobability that is is covered by an\ninteraction covering (CSV format)\n'tAcc:' (target) ED accessibility values\n('tPu'-like format).\n'tPu:' (target) unpaired probabilities values\n(RNAplfold format).\n'pMinE:' (target+query) for each index pair\nthe minimal energy of any interaction covering\nthe pair (CSV format)\n'spotProb:' (target+query) tracks for a given\nset of interaction spots their probability to\nbe covered by an interaction. If no spots are\nprovided, probabilities for all index\ncombinations are computed. Spots are encoded by\ncomma-separated 'idxT&idxQ' pairs\n(target-query). For each spot a probability is\nprovided in concert with the probability that\nnone of the spots (encoded by '0&0') is covered\n(CSV format). The spot encoding is followed\ncolon-separated by the output stream/file name,\neg. '--out='spotProb:3&76,59&2:STDERR''. NOTE:\nvalue has to be quoted due to '&' symbol!\nFor each, provide a file name or STDOUT/STDERR\nto write to the respective output stream.")), ToolInput(tag="in_out_sep", input_type=String(optional=True), prefix="--outSep", doc=InputDocumentation(doc="(=;)             column separator to be used in tabular CSV")), ToolInput(tag="in_arg_number_reportarg", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --outNumber ] arg (=1)   number of (sub)optimal interactions to report\n(arg in range [0,1000])")), ToolInput(tag="in_out_overlap", input_type=String(optional=True), prefix="--outOverlap", doc=InputDocumentation(doc="(=Q)         suboptimal output : interactions can overlap\n'N' in none of the sequences,\n'T' in the target only,\n'Q' in the query only,\n'B' in both sequences")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="(=1)            maximal number of threads to be used for\nparallel computation of query-target\ncombinations. A value of 0 requests all\navailable CPUs. Note, the number of threads\nmultiplies the required memory used for\ncomputation! (arg in range [0,8])")), ToolInput(tag="in_personality", input_type=String(optional=True), prefix="--personality", doc=InputDocumentation(doc="IntaRNA personality to be used, which defines\ndefault values, available program arguments and\ntool behavior")), ToolInput(tag="in_parameter_file", input_type=File(optional=True), prefix="--parameterFile", doc=InputDocumentation(doc="file from where to read additional command line")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--fullhelp", doc=InputDocumentation(doc="show the extended help page for all available")), ToolInput(tag="in_output", input_type=String(), position=0, doc=InputDocumentation(doc="--outMode arg (=C)            output mode :\n'N' normal output (ASCII char + energy),\n'D' detailed output (ASCII char +")), ToolInput(tag="in_arguments", input_type=String(), position=0, doc=InputDocumentation(doc="-h [ --help ]                 show the help page for basic parameters")), ToolInput(tag="in_parameters", input_type=String(), position=1, doc=InputDocumentation(doc="Run --fullhelp for the extended list of parameters"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="(=STDOUT)           output (multi-arg) : provide a file name for\noutput (will be overwritten) or 'STDOUT/STDERR'\nto write to the according stream (according to\n--outMode).\nUse one of the following PREFIXES\n(colon-separated) to generate ADDITIONAL\noutput:\n'qMinE:' (query) for each position the minimal\nenergy of any interaction covering the position\n(CSV format)\n'qSpotProb:' (query) for each position the\nprobability that is is covered by an\ninteraction covering (CSV format)\n'qAcc:' (query) ED accessibility values\n('qPu'-like format).\n'qPu:' (query) unpaired probabilities values\n(RNAplfold format).\n'tMinE:' (target) for each position the\nminimal energy of any interaction covering the\nposition (CSV format)\n'tSpotProb:' (target) for each position the\nprobability that is is covered by an\ninteraction covering (CSV format)\n'tAcc:' (target) ED accessibility values\n('tPu'-like format).\n'tPu:' (target) unpaired probabilities values\n(RNAplfold format).\n'pMinE:' (target+query) for each index pair\nthe minimal energy of any interaction covering\nthe pair (CSV format)\n'spotProb:' (target+query) tracks for a given\nset of interaction spots their probability to\nbe covered by an interaction. If no spots are\nprovided, probabilities for all index\ncombinations are computed. Spots are encoded by\ncomma-separated 'idxT&idxQ' pairs\n(target-query). For each spot a probability is\nprovided in concert with the probability that\nnone of the spots (encoded by '0&0') is covered\n(CSV format). The spot encoding is followed\ncolon-separated by the output stream/file name,\neg. '--out='spotProb:3&76,59&2:STDERR''. NOTE:\nvalue has to be quoted due to '&' symbol!\nFor each, provide a file name or STDOUT/STDERR\nto write to the respective output stream."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Intarnastar_V0_1_0().translate("wdl", allow_empty_container=True)

