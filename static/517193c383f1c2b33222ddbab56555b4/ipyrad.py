from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String, Directory

Ipyrad_V0_1_0 = CommandToolBuilder(tool="ipyrad", base_command=["ipyrad"], inputs=[ToolInput(tag="in_results", input_type=Boolean(optional=True), prefix="--results", doc=InputDocumentation(doc="show results summary for Assembly in params.txt and")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="do not print to stderror or stdout.")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="print lots more info to ipyrad_log.txt.")), ToolInput(tag="in_create_new_file", input_type=File(optional=True), prefix="-n", doc=InputDocumentation(doc="create new file 'params-{new}.txt' in current")), ToolInput(tag="in_set_assembly_s", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc="Set of assembly steps to run, e.g., -s 123")), ToolInput(tag="in_create_new_branch", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[BRANCH [BRANCH ...]]\ncreate new branch of Assembly as params-{branch}.txt,\nand can be used to drop samples from Assembly.")), ToolInput(tag="in_merge_multiple_assemblies", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[MERGE [MERGE ...]]\nmerge multiple Assemblies into one joint Assembly, and\ncan be used to merge Samples into one Sample.")), ToolInput(tag="in_number_cpu_cores", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="number of CPU cores to use (Default=0=All)")), ToolInput(tag="in_tune_threading_default", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="tune threading of multi-threaded binaries (Default=2)")), ToolInput(tag="in_mpi", input_type=Boolean(optional=True), prefix="--MPI", doc=InputDocumentation(doc="connect to parallel CPUs across multiple nodes")), ToolInput(tag="in_ip_cluster", input_type=Boolean(optional=True), prefix="--ipcluster", doc=InputDocumentation(doc="[IPCLUSTER]\nconnect to running ipcluster, enter profile name or\nprofile='default'")), ToolInput(tag="in_download", input_type=Boolean(optional=True), prefix="--download", doc=InputDocumentation(doc="[DOWNLOAD [DOWNLOAD ...]]\ndownload fastq files by accession (e.g., SRP or SRR)")), ToolInput(tag="in_p", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="")), ToolInput(tag="in_f", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="")), ToolInput(tag="in_exit", input_type=String(), position=0, doc=InputDocumentation(doc="-f, --force           force overwrite of existing data")), ToolInput(tag="in_directory", input_type=Directory(), position=1, doc=InputDocumentation(doc="-p PARAMS             path to params file for Assembly:"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ipyrad_V0_1_0().translate("wdl", allow_empty_container=True)

