from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String, File

Cutadapt_V0_1_0 = CommandToolBuilder(tool="cutadapt", base_command=["cutadapt"], inputs=[ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="[{trace}]     Print debug log. 'trace' prints also DP matrices")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Number of CPU cores to use. Use 0 to auto-detect.\nDefault: 1")), ToolInput(tag="in_adapter", input_type=Int(optional=True), prefix="--adapter", doc=InputDocumentation(doc="Sequence of an adapter ligated to the 3' end (paired\ndata: of the first read). The adapter and subsequent\nbases are trimmed. If a '$' character is appended\n('anchoring'), the adapter is only found if it is a\nsuffix of the read.")), ToolInput(tag="in_front", input_type=Int(optional=True), prefix="--front", doc=InputDocumentation(doc="Sequence of an adapter ligated to the 5' end (paired\ndata: of the first read). The adapter and any\npreceding bases are trimmed. Partial matches at the 5'\nend are allowed. If a '^' character is prepended\n('anchoring'), the adapter is only found if it is a\nprefix of the read.")), ToolInput(tag="in_anywhere", input_type=Int(optional=True), prefix="--anywhere", doc=InputDocumentation(doc="Sequence of an adapter that may be ligated to the 5'\nor 3' end (paired data: of the first read). Both types\nof matches as described under -a und -g are allowed.\nIf the first base of the read is part of the match,\nthe behavior is as with -g, otherwise as with -a. This\noption is mostly for rescuing failed library\npreparations - do not use if you know which end your\nadapter was ligated to!")), ToolInput(tag="in_error_rate", input_type=Int(optional=True), prefix="--error-rate", doc=InputDocumentation(doc="Maximum allowed error rate as value between 0 and 1\n(no. of errors divided by length of matching region).\nDefault: 0.1 (=10%)")), ToolInput(tag="in_no_indels", input_type=Boolean(optional=True), prefix="--no-indels", doc=InputDocumentation(doc="Allow only mismatches in alignments. Default: allow\nboth mismatches and indels")), ToolInput(tag="in_times", input_type=Int(optional=True), prefix="--times", doc=InputDocumentation(doc="Remove up to COUNT adapters from each read. Default: 1")), ToolInput(tag="in_overlap", input_type=Int(optional=True), prefix="--overlap", doc=InputDocumentation(doc="Require MINLENGTH overlap between read and adapter for\nan adapter to be found. Default: 3")), ToolInput(tag="in_match_read_wildcards", input_type=Boolean(optional=True), prefix="--match-read-wildcards", doc=InputDocumentation(doc="Interpret IUPAC wildcards in reads. Default: False")), ToolInput(tag="in_no_match_adapter_wildcards", input_type=Boolean(optional=True), prefix="--no-match-adapter-wildcards", doc=InputDocumentation(doc="Do not interpret IUPAC wildcards in adapters.")), ToolInput(tag="in_action", input_type=String(optional=True), prefix="--action", doc=InputDocumentation(doc="What to do with found adapters. mask: replace with 'N'\ncharacters; lowercase: convert to lowercase; none:\nleave unchanged (useful with --discard-untrimmed).\nDefault: trim")), ToolInput(tag="in_rev_comp", input_type=Boolean(optional=True), prefix="--revcomp", doc=InputDocumentation(doc="Check both the read and its reverse complement for\nadapter matches. If match is on reverse-complemented\nversion, output that one. Default: check only read")), ToolInput(tag="in_cut", input_type=Int(optional=True), prefix="--cut", doc=InputDocumentation(doc="Remove bases from each read (first read only if\npaired). If LENGTH is positive, remove bases from the\nbeginning. If LENGTH is negative, remove bases from\nthe end. Can be used twice if LENGTHs have different\nsigns. This is applied *before* adapter trimming.")), ToolInput(tag="in_next_seq_trim", input_type=Int(optional=True), prefix="--nextseq-trim", doc=InputDocumentation(doc="'CUTOFF\nNextSeq-specific quality trimming (each read). Trims\nalso dark cycles appearing as high-quality G bases.")), ToolInput(tag="in_cutofftrim_lowquality_bases", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="[5'CUTOFF,]3'CUTOFF, --quality-cutoff [5'CUTOFF,]3'CUTOFF\nTrim low-quality bases from 5' and/or 3' ends of each\nread before adapter removal. Applied to both reads if\ndata is paired. If one value is given, only the 3' end\nis trimmed. If two comma-separated cutoffs are given,\nthe 5' end is trimmed with the first cutoff, the 3'\nend with the second.")), ToolInput(tag="in_quality_base", input_type=Int(optional=True), prefix="--quality-base", doc=InputDocumentation(doc="Assume that quality values in FASTQ are encoded as\nascii(quality + N). This needs to be set to 64 for\nsome old Illumina FASTQ files. Default: 33")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc="Shorten reads to LENGTH. Positive values remove bases\nat the end while negative ones remove bases at the\nbeginning. This and the following modifications are\napplied after adapter trimming.")), ToolInput(tag="in_trim_n", input_type=Boolean(optional=True), prefix="--trim-n", doc=InputDocumentation(doc="Trim N's on ends of reads.")), ToolInput(tag="in_length_tag", input_type=Int(optional=True), prefix="--length-tag", doc=InputDocumentation(doc="Search for TAG followed by a decimal number in the\ndescription field of the read. Replace the decimal\nnumber with the correct length of the trimmed read.\nFor example, use --length-tag 'length=' to correct\nfields like 'length=123'.")), ToolInput(tag="in_strip_suffix", input_type=String(optional=True), prefix="--strip-suffix", doc=InputDocumentation(doc="Remove this suffix from read names if present. Can be\ngiven multiple times.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Add this prefix to read names. Use {name} to insert\nthe name of the matching adapter.")), ToolInput(tag="in_suffix", input_type=String(optional=True), prefix="--suffix", doc=InputDocumentation(doc="Add this suffix to read names; can also include {name}")), ToolInput(tag="in_zero_cap", input_type=Boolean(optional=True), prefix="--zero-cap", doc=InputDocumentation(doc="Change negative quality values to zero.")), ToolInput(tag="in_discard_reads_shorter", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="[:LEN2], --minimum-length LEN[:LEN2]\nDiscard reads shorter than LEN. Default: 0")), ToolInput(tag="in_discard_reads_longer", input_type=Int(optional=True), prefix="-M", doc=InputDocumentation(doc="[:LEN2], --maximum-length LEN[:LEN2]\nDiscard reads longer than LEN. Default: no limit")), ToolInput(tag="in_max_n", input_type=Int(optional=True), prefix="--max-n", doc=InputDocumentation(doc="Discard reads with more than COUNT 'N' bases. If COUNT\nis a number between 0 and 1, it is interpreted as a\nfraction of the read length.")), ToolInput(tag="in_max_expected_errors", input_type=Int(optional=True), prefix="--max-expected-errors", doc=InputDocumentation(doc="Discard reads whose expected number of errors\n(computed from quality values) exceeds ERRORS.")), ToolInput(tag="in_discard_trimmed", input_type=Boolean(optional=True), prefix="--discard-trimmed", doc=InputDocumentation(doc="Discard reads that contain an adapter. Use also -O to\navoid discarding too many randomly matching reads.")), ToolInput(tag="in_discard_untrimmed", input_type=Boolean(optional=True), prefix="--discard-untrimmed", doc=InputDocumentation(doc="Discard reads that do not contain an adapter.")), ToolInput(tag="in_discard_casa_va", input_type=Boolean(optional=True), prefix="--discard-casava", doc=InputDocumentation(doc="Discard reads that did not pass CASAVA filtering\n(header has :Y:).")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Print only error messages.")), ToolInput(tag="in_report", input_type=String(optional=True), prefix="--report", doc=InputDocumentation(doc="Which type of report to print: 'full' or 'minimal'.\nDefault: full")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Write trimmed reads to FILE. FASTQ or FASTA format is\nchosen depending on input. Summary report is sent to\nstandard output. Use '{name}' for demultiplexing (see\ndocs). Default: write to standard output")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Output FASTA to standard output even on FASTQ input.")), ToolInput(tag="in_use_compression_level", input_type=Boolean(optional=True), prefix="-Z", doc=InputDocumentation(doc="Use compression level 1 for gzipped output files\n(faster, but uses more space)")), ToolInput(tag="in_info_file", input_type=File(optional=True), prefix="--info-file", doc=InputDocumentation(doc="Write information about each read and its adapter\nmatches into FILE. See the documentation for the file\nformat.")), ToolInput(tag="in_rest_file", input_type=File(optional=True), prefix="--rest-file", doc=InputDocumentation(doc="When the adapter matches in the middle of a read,\nwrite the rest (after the adapter) to FILE.")), ToolInput(tag="in_wildcard_file", input_type=File(optional=True), prefix="--wildcard-file", doc=InputDocumentation(doc="When the adapter has N wildcard bases, write adapter\nbases matching wildcard positions to FILE. (Inaccurate\nwith indels.)")), ToolInput(tag="in_too_short_output", input_type=File(optional=True), prefix="--too-short-output", doc=InputDocumentation(doc="Write reads that are too short (according to length\nspecified by -m) to FILE. Default: discard reads")), ToolInput(tag="in_too_long_output", input_type=File(optional=True), prefix="--too-long-output", doc=InputDocumentation(doc="Write reads that are too long (according to length\nspecified by -M) to FILE. Default: discard reads")), ToolInput(tag="in_untrimmed_output", input_type=File(optional=True), prefix="--untrimmed-output", doc=InputDocumentation(doc="Write reads that do not contain any adapter to FILE.\nDefault: output to same file as trimmed reads")), ToolInput(tag="in_a", input_type=Int(optional=True), prefix="-A", doc=InputDocumentation(doc="3' adapter to be removed from second read in a pair.")), ToolInput(tag="in_g", input_type=Int(optional=True), prefix="-G", doc=InputDocumentation(doc="5' adapter to be removed from second read in a pair.")), ToolInput(tag="in_b", input_type=Int(optional=True), prefix="-B", doc=InputDocumentation(doc="5'/3 adapter to be removed from second read in a pair.")), ToolInput(tag="in_remove_length_bases", input_type=Int(optional=True), prefix="-U", doc=InputDocumentation(doc="Remove LENGTH bases from second read in a pair.")), ToolInput(tag="in_paired_output", input_type=File(optional=True), prefix="--paired-output", doc=InputDocumentation(doc="Write second read in a pair to FILE.")), ToolInput(tag="in_pair_adapters", input_type=Boolean(optional=True), prefix="--pair-adapters", doc=InputDocumentation(doc="Treat adapters given with -a/-A etc. as pairs. Either\nboth or none are removed from each read pair.")), ToolInput(tag="in_pair_filter", input_type=Boolean(optional=True), prefix="--pair-filter", doc=InputDocumentation(doc="(any|both|first)\nWhich of the reads in a paired-end read have to match\nthe filtering criterion in order for the pair to be\nfiltered. Default: any")), ToolInput(tag="in_interleaved", input_type=Boolean(optional=True), prefix="--interleaved", doc=InputDocumentation(doc="Read and/or write interleaved paired-end reads.")), ToolInput(tag="in_untrimmed_paired_output", input_type=File(optional=True), prefix="--untrimmed-paired-output", doc=InputDocumentation(doc="Write second read in a pair to this FILE when no\nadapter was found. Use with --untrimmed-output.\nDefault: output to same file as trimmed reads")), ToolInput(tag="in_too_short_paired_output", input_type=File(optional=True), prefix="--too-short-paired-output", doc=InputDocumentation(doc="Write second read in a pair to this file if pair is\ntoo short. Use also --too-short-output.")), ToolInput(tag="in_too_long_paired_output", input_type=File(optional=True), prefix="--too-long-paired-output", doc=InputDocumentation(doc="Write second read in a pair to this file if pair is\ntoo long. Use also --too-long-output.\n"))], outputs=[ToolOutput(tag="out_untrimmed_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_untrimmed_output", type_hint=File()), doc=OutputDocumentation(doc="Write reads that do not contain any adapter to FILE.\nDefault: output to same file as trimmed reads")), ToolOutput(tag="out_untrimmed_paired_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_untrimmed_paired_output", type_hint=File()), doc=OutputDocumentation(doc="Write second read in a pair to this FILE when no\nadapter was found. Use with --untrimmed-output.\nDefault: output to same file as trimmed reads")), ToolOutput(tag="out_too_short_paired_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_too_short_paired_output", type_hint=File()), doc=OutputDocumentation(doc="Write second read in a pair to this file if pair is\ntoo short. Use also --too-short-output.")), ToolOutput(tag="out_too_long_paired_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_too_long_paired_output", type_hint=File()), doc=OutputDocumentation(doc="Write second read in a pair to this file if pair is\ntoo long. Use also --too-long-output.\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cutadapt_V0_1_0().translate("wdl", allow_empty_container=True)

