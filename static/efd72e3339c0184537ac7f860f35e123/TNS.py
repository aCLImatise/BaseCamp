from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Tns_V0_1_0 = CommandToolBuilder(tool="TNS", base_command=["TNS"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Input CSV file with inferred genetic links (or stdin\nif omitted). Can be specified multiple times for\nmultiple input files (e.g. to include a reference\ndatabase). Must be a CSV file with three columns:\nID1,ID2,distance.")), ToolInput(tag="in_uds", input_type=File(optional=True), prefix="--uds", doc=InputDocumentation(doc="Input CSV file with UDS data. Must be a CSV file with\nthree columns: ID1,ID2,distance.")), ToolInput(tag="in_dot", input_type=File(optional=True), prefix="--dot", doc=InputDocumentation(doc="Output DOT file for GraphViz (or stdout if omitted)")), ToolInput(tag="in_cluster", input_type=File(optional=True), prefix="--cluster", doc=InputDocumentation(doc="Output a CSV file with cluster assignments for each\nsequence")), ToolInput(tag="in_threshold", input_type=String(optional=True), prefix="--threshold", doc=InputDocumentation(doc="Only count edges where the distance is less than this\nthreshold. Provide comma-separated values to compute\nsubclusters if the output mode is JSON. If -t auto is\nspecified, a heuristic is used to determine an ad hoc\noptimal threshold.")), ToolInput(tag="in_edi", input_type=File(optional=True), prefix="--edi", doc=InputDocumentation(doc="A .json file with clinical information")), ToolInput(tag="in_old_edi", input_type=File(optional=True), prefix="--old_edi", doc=InputDocumentation(doc="A .csv file with legacy EDI dates")), ToolInput(tag="in_format", input_type=Int(optional=True), prefix="--format", doc=InputDocumentation(doc="Sequence ID format. One of AEH (ID | sample_date |\notherfiels default), LANL (e.g. B_HXB2_K03455_1983 :\nsubtype_country_id_year -- could have more fields),\nregexp (match a regular expression, use the first\ngroup as the ID), or plain (treat as sequence ID only,\nno meta); one per input argument if specified")), ToolInput(tag="in_exclude", input_type=Int(optional=True), prefix="--exclude", doc=InputDocumentation(doc="Exclude any sequence which belongs to a cluster\ncontaining a 'reference' strain, defined by the year\nof isolation. The value of this argument is an integer\nyear (e.g. 1984) so that any sequence isolated in or\nbefore that year (e.g. <=1983) is considered to be a\nlab strain. This option makes sense for LANL or AEH\ndata.")), ToolInput(tag="in_resistance", input_type=File(optional=True), prefix="--resistance", doc=InputDocumentation(doc="Load a JSON file with resistance annotation by\nsequence")), ToolInput(tag="in_parser_parser_pattern", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="PARSER, --parser PARSER PARSER\nThe reg.exp pattern to split up sequence ids; only\nused if format is regexp; format is INDEX EXPRESSION\n(consumes two arguments)")), ToolInput(tag="in_attributes", input_type=File(optional=True), prefix="--attributes", doc=InputDocumentation(doc="Load a CSV file with optional node attributes")), ToolInput(tag="in_compact_json", input_type=Boolean(optional=True), prefix="--compact-json", doc=InputDocumentation(doc="Output the network report as a compact JSON object")), ToolInput(tag="in_json", input_type=Boolean(optional=True), prefix="--json", doc=InputDocumentation(doc="Output the network report as a JSON object")), ToolInput(tag="in_singletons", input_type=Boolean(optional=True), prefix="--singletons", doc=InputDocumentation(doc="Include singletons in JSON output")), ToolInput(tag="in_filter", input_type=File(optional=True), prefix="--filter", doc=InputDocumentation(doc="Only return clusters with ids listed by a newline\nseparated supplied file.")), ToolInput(tag="in_sequences", input_type=File(optional=True), prefix="--sequences", doc=InputDocumentation(doc="Provide the MSA with sequences which were used to make\nthe distance file. Can be specified multiple times to\ninclude mutliple MSA files")), ToolInput(tag="in_edge_filtering", input_type=String(optional=True), prefix="--edge-filtering", doc=InputDocumentation(doc="Compute edge support and mark edges for removal using\nsequence-based triangle tests (requires the -s\nargument) and either only report them or remove the\nedges before doing other analyses")), ToolInput(tag="in_central_ities", input_type=File(optional=True), prefix="--centralities", doc=InputDocumentation(doc="Output a CSV file with node centralities")), ToolInput(tag="in_edge_filter_cycles", input_type=Boolean(optional=True), prefix="--edge-filter-cycles", doc=InputDocumentation(doc="Filter edges that are in cycles other than triangles")), ToolInput(tag="in_cycle_report_file", input_type=File(optional=True), prefix="--cycle-report-file", doc=InputDocumentation(doc="Prints cycle report to specified file")), ToolInput(tag="in_triangles", input_type=Int(optional=True), prefix="--triangles", doc=InputDocumentation(doc="Maximum number of triangles to consider in each\nfiltering pass")), ToolInput(tag="in_contaminants", input_type=String(optional=True), prefix="--contaminants", doc=InputDocumentation(doc="Screen for contaminants by marking or removing\nsequences that cluster with any of the contaminant IDs\n(-F option) [default is not to screen]")), ToolInput(tag="in_contaminant_file", input_type=File(optional=True), prefix="--contaminant-file", doc=InputDocumentation(doc="IDs of contaminant sequences")), ToolInput(tag="in_multiple_edges", input_type=Boolean(optional=True), prefix="--multiple-edges", doc=InputDocumentation(doc="Permit multiple edges (e.g. different dates) to link\nthe same pair of nodes in the network [default is to\nchoose the one with the shortest distance]")), ToolInput(tag="in_bridges", input_type=Boolean(optional=True), prefix="--bridges", doc=InputDocumentation(doc="Report all bridges (edges whose removal would cause\nthe graph to disconnect)")), ToolInput(tag="in_no_degree_fit", input_type=Boolean(optional=True), prefix="--no-degree-fit", doc=InputDocumentation(doc="Do not perform degree distribution fitting")), ToolInput(tag="in_extract", input_type=String(optional=True), prefix="--extract", doc=InputDocumentation(doc="If provided, extract all the sequences")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Write the output file to")), ToolInput(tag="in_prior", input_type=File(optional=True), prefix="--prior", doc=InputDocumentation(doc="When running in JSON output mode, provide a JSON file\nstoring a previous (subset) version of the network for\nconsistent cluster naming")), ToolInput(tag="in_auto_profile", input_type=String(optional=True), prefix="--auto-profile", doc=InputDocumentation(doc="If provided supercedes most other output and inference\nsettings; will add edges from shortest to longest and\nreport network statistics as a function of distance\ncutoff")), ToolInput(tag="in_after", input_type=String(optional=True), prefix="--after", doc=InputDocumentation(doc="[assumes DATES are available] If provided (as\nYYYYMMDD) then only allow EDGES that connect nodes\nwith dates at or AFTER this date")), ToolInput(tag="in_before", input_type=String(optional=True), prefix="--before", doc=InputDocumentation(doc="[assumes DATES are available] If provided (as\nYYYYMMDD) then only allow EDGES that connect nodes\nwith dates at or BEFORE this date")), ToolInput(tag="in_import_attributes", input_type=String(optional=True), prefix="--import-attributes", doc=InputDocumentation(doc="Import node attributes from this JSON")), ToolInput(tag="in_sub_cluster_annotation", input_type=String(optional=True), prefix="--subcluster-annotation", doc=InputDocumentation(doc="SUBCLUSTER_ANNOTATION\nAs 'dist' 'field''. Use subcluster annotation for\ndistance 'dist' from node attribute 'field'\n"))], outputs=[ToolOutput(tag="out_dot", output_type=File(optional=True), selector=InputSelector(input_to_select="in_dot", type_hint=File()), doc=OutputDocumentation(doc="Output DOT file for GraphViz (or stdout if omitted)")), ToolOutput(tag="out_cluster", output_type=File(optional=True), selector=InputSelector(input_to_select="in_cluster", type_hint=File()), doc=OutputDocumentation(doc="Output a CSV file with cluster assignments for each\nsequence")), ToolOutput(tag="out_central_ities", output_type=File(optional=True), selector=InputSelector(input_to_select="in_central_ities", type_hint=File()), doc=OutputDocumentation(doc="Output a CSV file with node centralities")), ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Write the output file to")), ToolOutput(tag="out_prior", output_type=File(optional=True), selector=InputSelector(input_to_select="in_prior", type_hint=File()), doc=OutputDocumentation(doc="When running in JSON output mode, provide a JSON file\nstoring a previous (subset) version of the network for\nconsistent cluster naming"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tns_V0_1_0().translate("wdl", allow_empty_container=True)

