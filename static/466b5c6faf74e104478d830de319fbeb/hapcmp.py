from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Hapcmp_V0_1_0 = CommandToolBuilder(tool="hapcmp", base_command=["hapcmp"], inputs=[ToolInput(tag="in_input_regions", input_type=File(optional=True), prefix="--input-regions", doc=InputDocumentation(doc="The input bed file specifying haplotype block\nregions (use - for stdin).")), ToolInput(tag="in_input_v_cfs", input_type=File(optional=True), prefix="--input-vcfs", doc=InputDocumentation(doc="Two VCF files to compare (use file:sample for a\nspecific sample column).")), ToolInput(tag="in_arg_output_block", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --output-bed ] arg       Output block results as bed files (default is\nto output to stdout).")), ToolInput(tag="in_arg_output_failure", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --output-errors ] arg    Output failure information.")), ToolInput(tag="in_arg_output_shared", input_type=File(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --output-diffs ] arg     Output shared and different variants to a mJSON\nfile (one json record per line, default is to\nnot output diffs).")), ToolInput(tag="in_arg_reference_fasta", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg        The reference fasta file.")), ToolInput(tag="in_arg_maximum_number_enumerate", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --max-n-haplotypes ] arg Maximum number of haplotypes to enumerate.")), ToolInput(tag="in_output_sequences", input_type=String(optional=True), prefix="--output-sequences", doc=InputDocumentation(doc="Set to true to output haplotype sequences.")), ToolInput(tag="in_progress", input_type=String(optional=True), prefix="--progress", doc=InputDocumentation(doc="Set to true to output progress information.")), ToolInput(tag="in_progress_seconds", input_type=String(optional=True), prefix="--progress-seconds", doc=InputDocumentation(doc="Output progress information every n seconds.")), ToolInput(tag="in_arg_maximum_number_process", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --limit ] arg            Maximum number of haplotype blocks to process.")), ToolInput(tag="in_arg_apply_filtering", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --apply-filters ] arg    Apply filtering in VCF.")), ToolInput(tag="in_do_alignment", input_type=String(optional=True), prefix="--do-alignment", doc=InputDocumentation(doc="Perform alignments on mismatching haplotypes to\nfind best approximate match.\n"))], outputs=[ToolOutput(tag="out_arg_output_shared", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_shared", type_hint=File()), doc=OutputDocumentation(doc="[ --output-diffs ] arg     Output shared and different variants to a mJSON\nfile (one json record per line, default is to\nnot output diffs)."))], container="quay.io/biocontainers/hap.py:0.3.13--py27h5c5a3ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hapcmp_V0_1_0().translate("wdl")

