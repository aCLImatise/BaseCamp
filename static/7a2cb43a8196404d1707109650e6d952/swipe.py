from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Float, Boolean

Swipe_V0_1_0 = CommandToolBuilder(tool="swipe", base_command=["swipe"], inputs=[ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="sequence database base name (required)")), ToolInput(tag="in_query", input_type=File(optional=True), prefix="--query", doc=InputDocumentation(doc="query sequence filename (stdin)")), ToolInput(tag="in_matrix", input_type=File(optional=True), prefix="--matrix", doc=InputDocumentation(doc="/FILE     score matrix name or filename (BLOSUM62)")), ToolInput(tag="in_penalty", input_type=Int(optional=True), prefix="--penalty", doc=InputDocumentation(doc="penalty for nucleotide mismatch (-3)")), ToolInput(tag="in_reward", input_type=Int(optional=True), prefix="--reward", doc=InputDocumentation(doc="reward for nucleotide match (1)")), ToolInput(tag="in_gap_open", input_type=Int(optional=True), prefix="--gapopen", doc=InputDocumentation(doc="gap open penalty (11)")), ToolInput(tag="in_gap_extend", input_type=Int(optional=True), prefix="--gapextend", doc=InputDocumentation(doc="gap extension penalty (1)")), ToolInput(tag="in_num_descriptions", input_type=Int(optional=True), prefix="--num_descriptions", doc=InputDocumentation(doc="sequence descriptions to show (250)")), ToolInput(tag="in_num_alignments", input_type=Int(optional=True), prefix="--num_alignments", doc=InputDocumentation(doc="sequence alignments to show (100)")), ToolInput(tag="in_evalue", input_type=Float(optional=True), prefix="--evalue", doc=InputDocumentation(doc="maximum expect value of sequences to show (10.0)")), ToolInput(tag="in_mine_value", input_type=Float(optional=True), prefix="--minevalue", doc=InputDocumentation(doc="minimum expect value of sequences to show (0.0)")), ToolInput(tag="in_min_score", input_type=Int(optional=True), prefix="--min_score", doc=InputDocumentation(doc="minimum score of sequences to show (1)")), ToolInput(tag="in_max_score", input_type=Int(optional=True), prefix="--max_score", doc=InputDocumentation(doc="maximum score of sequences to show (inf.)")), ToolInput(tag="in_num_threads", input_type=Int(optional=True), prefix="--num_threads", doc=InputDocumentation(doc="number of threads to use [1-256] (1)")), ToolInput(tag="in_out_fmt", input_type=Int(optional=True), prefix="--outfmt", doc=InputDocumentation(doc="output format [0,7-9=plain,xml,tsv,tsv+] (0)")), ToolInput(tag="in_show_gis", input_type=Boolean(optional=True), prefix="--show_gis", doc=InputDocumentation(doc="show gi numbers in results (no)")), ToolInput(tag="in_sym_type", input_type=Int(optional=True), prefix="--symtype", doc=InputDocumentation(doc="/NUM     symbol type/translation [0-4] (1)")), ToolInput(tag="in_strand", input_type=Int(optional=True), prefix="--strand", doc=InputDocumentation(doc="/NUM      query strands to search [1-3] (3)")), ToolInput(tag="in_query_gen_code", input_type=Int(optional=True), prefix="--query_gencode", doc=InputDocumentation(doc="query genetic code [1-23] (1)")), ToolInput(tag="in_db_gen_code", input_type=Int(optional=True), prefix="--db_gencode", doc=InputDocumentation(doc="database genetic code [1-23] (1)")), ToolInput(tag="in_taxid_list", input_type=File(optional=True), prefix="--taxidlist", doc=InputDocumentation(doc="taxid list filename (none)")), ToolInput(tag="in_dump", input_type=Int(optional=True), prefix="--dump", doc=InputDocumentation(doc="dump database [0-2=no,yes,split headers] (0)")), ToolInput(tag="in_show_taxid", input_type=Boolean(optional=True), prefix="--show_taxid", doc=InputDocumentation(doc="show taxid etc in results (no)")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="output file (stdout)")), ToolInput(tag="in_db_size", input_type=Int(optional=True), prefix="--dbsize", doc=InputDocumentation(doc="set effective database size (0)")), ToolInput(tag="in_two_two_one_dot", input_type=Int(), position=0, doc=InputDocumentation(doc="Usage: swipe [OPTIONS]"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="output file (stdout)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Swipe_V0_1_0().translate("wdl", allow_empty_container=True)

