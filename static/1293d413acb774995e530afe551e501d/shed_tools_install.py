from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Shed_Tools_Install_V0_1_0 = CommandToolBuilder(tool="shed_tools_install", base_command=["shed-tools", "install"], inputs=[ToolInput(tag="in_tools_file", input_type=File(optional=True), prefix="--toolsfile", doc=InputDocumentation(doc="Tools file to use (see tool_list.yaml.sample)")), ToolInput(tag="in_yaml_tool", input_type=String(optional=True), prefix="--yaml_tool", doc=InputDocumentation(doc="Install tool represented by yaml string")), ToolInput(tag="in_name", input_type=File(optional=True), prefix="--name", doc=InputDocumentation(doc="The name of the tool to install (only applicable if\nthe tools file is not provided).")), ToolInput(tag="in_owner", input_type=File(optional=True), prefix="--owner", doc=InputDocumentation(doc="The owner of the tool to install (only applicable if\nthe tools file is not provided).")), ToolInput(tag="in_revisions", input_type=Boolean(optional=True), prefix="--revisions", doc=InputDocumentation(doc="[REVISIONS [REVISIONS ...]]\nThe revisions of the tool repository that will be\ninstalled. All revisions must be specified after this\nflag by a space.Example: --revisions 0a5c7992b1ac\nf048033da666(Only applicable if the tools file is not\nprovided).")), ToolInput(tag="in_toolshed", input_type=File(optional=True), prefix="--toolshed", doc=InputDocumentation(doc="The Tool Shed URL where to install the tool from. This\nis applicable only if the tool info is provided as an\noption vs. in the tools file.")), ToolInput(tag="in_install_tool_dependencies", input_type=Boolean(optional=True), prefix="--install_tool_dependencies", doc=InputDocumentation(doc="Turn on installation of tool dependencies using\nclassic toolshed packages. Can be overwritten on a\nper-tool basis in the tools file.")), ToolInput(tag="in_skip_install_resolver_dependencies", input_type=Boolean(optional=True), prefix="--skip_install_resolver_dependencies", doc=InputDocumentation(doc="Skip installing tool dependencies through resolver\n(e.g. conda). Will be ignored on galaxy releases older\nthan 16.07. Can be overwritten on a per-tool basis in\nthe tools file")), ToolInput(tag="in_skip_install_repository_dependencies", input_type=Boolean(optional=True), prefix="--skip_install_repository_dependencies", doc=InputDocumentation(doc="Skip installing the repository dependencies.")), ToolInput(tag="in_test", input_type=Boolean(optional=True), prefix="--test", doc=InputDocumentation(doc="Run tool tests on install tools, requires Galaxy 18.05\nor newer.")), ToolInput(tag="in_test_existing", input_type=Boolean(optional=True), prefix="--test_existing", doc=InputDocumentation(doc="If testing tools during install, also run tool tests\non repositories already installed (i.e. skipped\nrepositories).")), ToolInput(tag="in_test_json", input_type=File(optional=True), prefix="--test_json", doc=InputDocumentation(doc="If testing tools, record tool test output to specified\nfile. This file can be turned into reports with\n``planemo test_reports <output.json>``.")), ToolInput(tag="in_test_user_api_key", input_type=String(optional=True), prefix="--test_user_api_key", doc=InputDocumentation(doc="If testing tools, a user is needed to execute the\ntests. This can be different the --api_key which is\nassumed to be an admin key. If --api_key is a valid\nuser (e.g. it is not a master API key) this does not\nneed to be specified and --api_key will be reused.")), ToolInput(tag="in_test_user", input_type=String(optional=True), prefix="--test_user", doc=InputDocumentation(doc="If testing tools, a user is needed to execute the\ntests. If --api_key is a master api key (i.e. not tied\nto a real user) and --test_user_api_key isn't\nspecified, this user email will be used. This user\nwill be created if needed.")), ToolInput(tag="in_parallel_tests", input_type=Int(optional=True), prefix="--parallel_tests", doc=InputDocumentation(doc="Specify the maximum number of tests that will be run\nin parallel.")), ToolInput(tag="in_section", input_type=File(optional=True), prefix="--section", doc=InputDocumentation(doc="Galaxy tool panel section ID where the tool will be\ninstalled (the section must exist in Galaxy; only\napplicable if the tools file is not provided).")), ToolInput(tag="in_section_label", input_type=File(optional=True), prefix="--section_label", doc=InputDocumentation(doc="Galaxy tool panel section label where tool will be\ninstalled (if the section does not exist, it will be\ncreated; only applicable if the tools file is not\nprovided).")), ToolInput(tag="in_latest", input_type=Boolean(optional=True), prefix="--latest", doc=InputDocumentation(doc="Will override the revisions in the tools file and\nalways install the latest revision.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Increase output verbosity.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log_file", doc=InputDocumentation(doc="Where the log file should be stored. Default is a file\nin your system's temp folder")), ToolInput(tag="in_galaxy", input_type=String(optional=True), prefix="--galaxy", doc=InputDocumentation(doc="Target Galaxy instance URL/IP address")), ToolInput(tag="in_user", input_type=String(optional=True), prefix="--user", doc=InputDocumentation(doc="Galaxy user email address")), ToolInput(tag="in_password", input_type=String(optional=True), prefix="--password", doc=InputDocumentation(doc="Password for the Galaxy user")), ToolInput(tag="in_api_key", input_type=File(optional=True), prefix="--api_key", doc=InputDocumentation(doc="Galaxy admin user API key (required if not defined in\nthe tools list file)\n"))], outputs=[ToolOutput(tag="out_test_json", output_type=File(optional=True), selector=InputSelector(input_to_select="in_test_json", type_hint=File()), doc=OutputDocumentation(doc="If testing tools, record tool test output to specified\nfile. This file can be turned into reports with\n``planemo test_reports <output.json>``."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Shed_Tools_Install_V0_1_0().translate("wdl", allow_empty_container=True)

