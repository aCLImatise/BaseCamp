from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Mapseq_V0_1_0 = CommandToolBuilder(tool="mapseq", base_command=["mapseq"], inputs=[ToolInput(tag="in_n_threads", input_type=Boolean(optional=True), prefix="-nthreads", doc=InputDocumentation(doc="<int>  number of threads to use [default: 4]")), ToolInput(tag="in_top_hits", input_type=Boolean(optional=True), prefix="-tophits", doc=InputDocumentation(doc="<int>  number of reference sequences to include in alignment phase [default: 20]")), ToolInput(tag="in_to_potus", input_type=Boolean(optional=True), prefix="-topotus", doc=InputDocumentation(doc="<int>  number of internal reference otus to include in alignment phase [default: 10]")), ToolInput(tag="in_min_score", input_type=Boolean(optional=True), prefix="-minscore", doc=InputDocumentation(doc="<int>  minimum score cutoff to consider for a classification, should be reduced when searching very small sequences, i.e.: primer search [default: 30]")), ToolInput(tag="in_mini_done", input_type=Boolean(optional=True), prefix="-minid1", doc=InputDocumentation(doc="<int>  minimum number of shared kmers to consider hit in second phase kmer search [default: 1]")), ToolInput(tag="in_mini_d_two", input_type=Boolean(optional=True), prefix="-minid2", doc=InputDocumentation(doc="<int>  minimum number of shared kmers to consider hit in alignment phase [default: 1]")), ToolInput(tag="in_otu_lim", input_type=Boolean(optional=True), prefix="-otulim", doc=InputDocumentation(doc="<int>  number of sequences per internal cluster to include in alignment phase [default: 50]")), ToolInput(tag="in_print_hits", input_type=Boolean(optional=True), prefix="-print_hits", doc=InputDocumentation(doc="outputs list of top hits for each input sequence")), ToolInput(tag="in_print_align", input_type=Boolean(optional=True), prefix="-print_align", doc=InputDocumentation(doc="outputs alignments")), ToolInput(tag="in_otu_counts", input_type=File(optional=True), prefix="-otucounts", doc=InputDocumentation(doc="<sample1.mseq>\ncomputes summary of classification counts from the classification output file")), ToolInput(tag="in_otu_table", input_type=File(optional=True), prefix="-otutable", doc=InputDocumentation(doc="<sample1.mseq> [sample2.mseq [...]]\ngenerates a tsv file with taxonomic labels as rows and samples as columns from classification output files")), ToolInput(tag="in_input_dot_fa", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_otu_counts", output_type=File(optional=True), selector=InputSelector(input_to_select="in_otu_counts", type_hint=File()), doc=OutputDocumentation(doc="<sample1.mseq>\ncomputes summary of classification counts from the classification output file")), ToolOutput(tag="out_otu_table", output_type=File(optional=True), selector=InputSelector(input_to_select="in_otu_table", type_hint=File()), doc=OutputDocumentation(doc="<sample1.mseq> [sample2.mseq [...]]\ngenerates a tsv file with taxonomic labels as rows and samples as columns from classification output files"))], container="quay.io/biocontainers/mapseq:1.2.6--h8dc0705_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mapseq_V0_1_0().translate("wdl")

