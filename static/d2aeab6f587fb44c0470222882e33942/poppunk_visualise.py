from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Directory, Boolean, Float, Int

Poppunk_Visualise_V0_1_0 = CommandToolBuilder(tool="poppunk_visualise", base_command=["poppunk_visualise"], inputs=[ToolInput(tag="in_ref_db", input_type=String(optional=True), prefix="--ref-db", doc=InputDocumentation(doc="Location of built reference database")), ToolInput(tag="in_query_db", input_type=String(optional=True), prefix="--query-db", doc=InputDocumentation(doc="Location of query database, if distances are from ref-")), ToolInput(tag="in_include_files", input_type=File(optional=True), prefix="--include-files", doc=InputDocumentation(doc="File with list of sequences to include in\nvisualisation. Default is to use all sequences in\ndatabase.")), ToolInput(tag="in_external_clustering", input_type=File(optional=True), prefix="--external-clustering", doc=InputDocumentation(doc="File with cluster definitions or other labels\ngenerated with any other method.")), ToolInput(tag="in_model_dir", input_type=Directory(optional=True), prefix="--model-dir", doc=InputDocumentation(doc="Directory containing model to use for assigning\nqueries to clusters [default = reference database\ndirectory]")), ToolInput(tag="in_previous_clustering", input_type=File(optional=True), prefix="--previous-clustering", doc=InputDocumentation(doc="File containing previous cluster definitions and\nnetwork [default = use that in the directory\ncontaining the model]")), ToolInput(tag="in_previous_query_clustering", input_type=File(optional=True), prefix="--previous-query-clustering", doc=InputDocumentation(doc="File containing previous cluster definitions from\npoppunk_assign [default = use that in the directory of\nthe query database]")), ToolInput(tag="in_network_file", input_type=File(optional=True), prefix="--network-file", doc=InputDocumentation(doc="Specify a file to use for any graph visualisations")), ToolInput(tag="in_display_cluster", input_type=String(optional=True), prefix="--display-cluster", doc=InputDocumentation(doc="Column of clustering CSV to use for plotting")), ToolInput(tag="in_output", input_type=String(optional=True), prefix="--output", doc=InputDocumentation(doc="Prefix for output files (required)")), ToolInput(tag="in_overwrite", input_type=Boolean(optional=True), prefix="--overwrite", doc=InputDocumentation(doc="Overwrite any existing visualisation files")), ToolInput(tag="in_core_only", input_type=Boolean(optional=True), prefix="--core-only", doc=InputDocumentation(doc="(with a 'refine' model) Use a core-distance only model\nfor assigning queries [default = False]")), ToolInput(tag="in_accessory_only", input_type=Boolean(optional=True), prefix="--accessory-only", doc=InputDocumentation(doc="(with a 'refine' or 'lineage' model) Use an accessory-\ndistance only model for assigning queries [default =\nFalse]")), ToolInput(tag="in_micro_react", input_type=Boolean(optional=True), prefix="--microreact", doc=InputDocumentation(doc="Generate output files for microreact visualisation")), ToolInput(tag="in_cytoscape", input_type=Boolean(optional=True), prefix="--cytoscape", doc=InputDocumentation(doc="Generate network output files for Cytoscape")), ToolInput(tag="in_p_handango", input_type=Boolean(optional=True), prefix="--phandango", doc=InputDocumentation(doc="Generate phylogeny and TSV for Phandango visualisation")), ToolInput(tag="in_grape_tree", input_type=Boolean(optional=True), prefix="--grapetree", doc=InputDocumentation(doc="Generate phylogeny and CSV for grapetree visualisation")), ToolInput(tag="in_tree", input_type=String(optional=True), prefix="--tree", doc=InputDocumentation(doc="Type of tree to calculate [default = nj]")), ToolInput(tag="in_mst_distances", input_type=String(optional=True), prefix="--mst-distances", doc=InputDocumentation(doc="Distances used to calculate a minimum spanning tree\n[default = core]")), ToolInput(tag="in_rapid_nj", input_type=File(optional=True), prefix="--rapidnj", doc=InputDocumentation(doc="Path to rapidNJ binary to build NJ tree for Microreact")), ToolInput(tag="in_perplexity", input_type=Float(optional=True), prefix="--perplexity", doc=InputDocumentation(doc="Perplexity used to calculate t-SNE projection (with\n--microreact) [default=20.0]")), ToolInput(tag="in_info_csv", input_type=String(optional=True), prefix="--info-csv", doc=InputDocumentation(doc="Epidemiological information CSV formatted for\nmicroreact (can be used with other outputs)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use [default = 1]")), ToolInput(tag="in_gpu_dist", input_type=Boolean(optional=True), prefix="--gpu-dist", doc=InputDocumentation(doc="Use a GPU when calculating distances [default = False]")), ToolInput(tag="in_gpu_graph", input_type=Boolean(optional=True), prefix="--gpu-graph", doc=InputDocumentation(doc="Use a GPU when calculating graphs [default = False]")), ToolInput(tag="in_deviceid", input_type=Int(optional=True), prefix="--deviceid", doc=InputDocumentation(doc="CUDA device ID, if using GPU [default = 0]")), ToolInput(tag="in_strand_preserved", input_type=Boolean(optional=True), prefix="--strand-preserved", doc=InputDocumentation(doc="If distances being calculated, treat strand as known\nwhen calculating random match chances [default =\nFalse]")), ToolInput(tag="in_query", input_type=String(), position=0, doc=InputDocumentation(doc="--distances DISTANCES"))], outputs=[], container="quay.io/biocontainers/poppunk:2.4.0--py39h7f0572b_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Poppunk_Visualise_V0_1_0().translate("wdl")

