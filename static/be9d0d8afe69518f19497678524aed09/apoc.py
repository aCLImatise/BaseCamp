from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, String

Apoc_V0_1_0 = CommandToolBuilder(tool="apoc", base_command=["apoc"], inputs=[ToolInput(tag="in_fa", input_type=Int(optional=True), prefix="-fa", doc=InputDocumentation(doc="Global structure alignment: 1 - enable (default), 0 - disable.")), ToolInput(tag="in_lt", input_type=File(optional=True), prefix="-lt", doc=InputDocumentation(doc="Provide a list of templates to compare in a file.")), ToolInput(tag="in_lq", input_type=File(optional=True), prefix="-lq", doc=InputDocumentation(doc="Provide a list of queries (targets) to compare in a file.")), ToolInput(tag="in_pt", input_type=Boolean(optional=True), prefix="-pt", doc=InputDocumentation(doc="<str1,str2,...>\nNames of pockets in the first (template) structure for comparison.")), ToolInput(tag="in_pq", input_type=Boolean(optional=True), prefix="-pq", doc=InputDocumentation(doc="<str1,str2,...>\nNames of pockets in the second (query) structure for comparison.")), ToolInput(tag="in_block", input_type=File(optional=True), prefix="-block", doc=InputDocumentation(doc="Load a block of concatenated pdb files.")), ToolInput(tag="in_p_vol", input_type=Int(optional=True), prefix="-pvol", doc=InputDocumentation(doc="Minimal pocket volume in grid points. Default 100")), ToolInput(tag="in_plen", input_type=Int(optional=True), prefix="-plen", doc=InputDocumentation(doc="Minimal number of pocket residues. Default 10")), ToolInput(tag="in_sod", input_type=Boolean(optional=True), prefix="-sod", doc=InputDocumentation(doc="Restrict to sequence-order-dependent alignment. Default no restriction.")), ToolInput(tag="in_alignment_printout_none", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Alignment printout: 0 - none, 1 - concise, 2 - detailed (default).")), ToolInput(tag="in_similarity_scoring_metric", input_type=String(optional=True), prefix="-m", doc=InputDocumentation(doc="Similarity scoring metric:  tm (TM-score), ps (PS-score, default).")), ToolInput(tag="in_normalize_score_fixed", input_type=Int(optional=True), prefix="-L", doc=InputDocumentation(doc="Normalize the score with a fixed length specified by num.")), ToolInput(tag="in_normalize_score_average", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="Normalize the score by the average size of two structures.")), ToolInput(tag="in_normalize_score_minimum", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="Normalize the score by the minimum size of two structures.")), ToolInput(tag="in_normalize_score_maximum", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Normalize the score by the maximum size of two structures.\n")), ToolInput(tag="in_options", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_pdb_file_one", input_type=Int(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_pdb_file_two", input_type=Int(), position=2, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Apoc_V0_1_0().translate("wdl", allow_empty_container=True)

