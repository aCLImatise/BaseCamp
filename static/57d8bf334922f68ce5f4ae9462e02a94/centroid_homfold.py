from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Centroid_Homfold_V0_1_0 = CommandToolBuilder(tool="centroid_homfold", base_command=["centroid_homfold"], inputs=[ToolInput(tag="in_arg_fasta_file", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="[ --homologous ] arg fasta file containing homologous sequences (REQUIRED)")), ToolInput(tag="in_engine_s", input_type=String(optional=True), prefix="--engine_s", doc=InputDocumentation(doc="specify the inference engine for secondary structures\n(default: 'McCaskill')")), ToolInput(tag="in_engine_a", input_type=String(optional=True), prefix="--engine_a", doc=InputDocumentation(doc="specify the inference engine for pairwise alignments\n(default: 'CONTRAlign')")), ToolInput(tag="in_arg_weight_base", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --gamma ] arg      weight of base pairs")), ToolInput(tag="in_arg_thereshold_base", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --threshold ] arg  thereshold of base pairs (this option overwrites\n'gamma')")), ToolInput(tag="in_ea", input_type=Boolean(optional=True), prefix="--ea", doc=InputDocumentation(doc="compute (pseudo-)expected accuracy")), ToolInput(tag="in_arg_specify_filename", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output ] arg     specify filename to output predicted secondary\nstructures. If empty, use the standard output.")), ToolInput(tag="in_posteriors", input_type=String(optional=True), prefix="--posteriors", doc=InputDocumentation(doc="output base-pairing probability matrices which\ncontain base-pairing probabilities more than the\ngiven value.")), ToolInput(tag="in_o_posteriors", input_type=File(optional=True), prefix="--oposteriors", doc=InputDocumentation(doc="specify filename to output base-pairing probability\nmatrices. If empty, use the standard output.")), ToolInput(tag="in_postscript", input_type=String(optional=True), prefix="--postscript", doc=InputDocumentation(doc="draw predicted secondary structures with the\npostscript (PS) format")), ToolInput(tag="in_params", input_type=File(optional=True), prefix="--params", doc=InputDocumentation(doc="use the parameter file")), ToolInput(tag="in_seq", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_arg_specify_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_specify_filename", type_hint=File()), doc=OutputDocumentation(doc="[ --output ] arg     specify filename to output predicted secondary\nstructures. If empty, use the standard output.")), ToolOutput(tag="out_o_posteriors", output_type=File(optional=True), selector=InputSelector(input_to_select="in_o_posteriors", type_hint=File()), doc=OutputDocumentation(doc="specify filename to output base-pairing probability\nmatrices. If empty, use the standard output."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Centroid_Homfold_V0_1_0().translate("wdl", allow_empty_container=True)

