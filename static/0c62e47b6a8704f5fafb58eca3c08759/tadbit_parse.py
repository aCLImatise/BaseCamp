from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, Array

Tadbit_Parse_V0_1_0 = CommandToolBuilder(tool="tadbit_parse", base_command=["tadbit", "parse"], inputs=[ToolInput(tag="in_workdir", input_type=File(optional=True), prefix="--workdir", doc=InputDocumentation(doc="path to working directory (generated with the tool tadbit mapper)")), ToolInput(tag="in_type", input_type=File(optional=True), prefix="--type", doc=InputDocumentation(doc="[map]file type to be parser, MAP (GEM-mapper), SAM or BAM")), ToolInput(tag="in_read", input_type=Int(optional=True), prefix="--read", doc=InputDocumentation(doc="In case only one of the reads needs to be parsed")), ToolInput(tag="in_filter_chrom", input_type=Int(optional=True), prefix="--filter_chrom", doc=InputDocumentation(doc="default: --filter_chrom\n'^(chr)?[A-Za-z]?[0-9]{0,3}[XVI]{0,3}(?:ito)?[A-Z-a-z]?(_dna)?$',\nregexp to consider only chromosome names passing")), ToolInput(tag="in_skip", input_type=Boolean(optional=True), prefix="--skip", doc=InputDocumentation(doc="[DEBUG] in case already mapped.")), ToolInput(tag="in_compress_input", input_type=Boolean(optional=True), prefix="--compress_input", doc=InputDocumentation(doc="Compress input mapped files when parsing is done. This is done in\nbackground, while next MAP file is processed, or while reads are\nsorted.")), ToolInput(tag="in_tmp_db", input_type=File(optional=True), prefix="--tmpdb", doc=InputDocumentation(doc="if provided uses this directory to manipulate the database")), ToolInput(tag="in_genome", input_type=Array(t=File(), optional=True), prefix="--genome", doc=InputDocumentation(doc="paths to file(s) with FASTA files of the reference genome. If many,\nfiles will be concatenated. I.e.: --genome chr_1.fa chr_2.fa In this\nlast case, order is important or the rest of the analysis. Note: it\ncan also be the path to a previously parsed genome in pickle format.")), ToolInput(tag="in_job_ids", input_type=Array(t=Int(), optional=True), prefix="--jobids", doc=InputDocumentation(doc="Use as input data generated by a job with a given jobid(s). Use\ntadbit describe to find out which. In this case one jobid can be\npassed per read.")), ToolInput(tag="in_nox", input_type=Boolean(optional=True), prefix="--noX", doc=InputDocumentation(doc="no display server (X screen)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tadbit_Parse_V0_1_0().translate("wdl", allow_empty_container=True)

