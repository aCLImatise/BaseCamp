from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Array, Int, Boolean, String

Barcode_Splitter_V0_1_0 = CommandToolBuilder(tool="barcode_splitter", base_command=["barcode_splitter"], inputs=[ToolInput(tag="in_bc_file", input_type=File(optional=True), prefix="--bcfile", doc=InputDocumentation(doc="REQUIRED: Tab delimited file: 'Sample_ID <tab>\nBarcode_Sequence' Multiple barcode columns with\ndifferent barcode lengths allowed, but all barcodes in\neach inidividual column must be the same length.")), ToolInput(tag="in_idx_read", input_type=Array(t=Int(), optional=True), prefix="--idxread", doc=InputDocumentation(doc="REQUIRED: Indicate in which read file(s) to search for\nthe corresponding column of barcode sequences, e.g. if\nthe first column of barcodes is in the second sequence\nread file and the second column's barcodes are in the\nthird sequence read file, you'd supply `--idxread 2 3`")), ToolInput(tag="in_mismatches", input_type=Int(optional=True), prefix="--mismatches", doc=InputDocumentation(doc="Number of mismatches allowed in barcode matching")), ToolInput(tag="in_barcodes_at_end", input_type=Boolean(optional=True), prefix="--barcodes_at_end", doc=InputDocumentation(doc="Barcodes are at the end of the index read (default is\nat the beginning)")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix for output files")), ToolInput(tag="in_suffix", input_type=String(optional=True), prefix="--suffix", doc=InputDocumentation(doc="Suffix for output files (default based on --format)")), ToolInput(tag="in_galaxy", input_type=Boolean(optional=True), prefix="--galaxy", doc=InputDocumentation(doc="Produce 'Galaxy safe' filenames by removing\nunderscores (default: False)")), ToolInput(tag="in_no_sanitize", input_type=Boolean(optional=True), prefix="--nosanitize", doc=InputDocumentation(doc="Do not produce 'safe' filenames by replacing unusual\ncharacters in the supplied prefix and sample IDs with\nunderscores. (default: False)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose output")), ToolInput(tag="in_gzip_out", input_type=Boolean(optional=True), prefix="--gzipout", doc=InputDocumentation(doc="Output files in compressed gzip format (default is\nuncompressed)")), ToolInput(tag="in_split_all", input_type=Boolean(optional=True), prefix="--split_all", doc=InputDocumentation(doc="Split all input files, including index read files (by\ndefault, index read files are not split unless all\nread files are index files)")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="Specify format for sequence files (fasta or fastq)")), ToolInput(tag="in_gzip_in", input_type=Boolean(optional=True), prefix="--gzipin", doc=InputDocumentation(doc="Assume input files are in gzip format, despite file\nextension (default is auto based on input file\nextension)")), ToolInput(tag="in_file", input_type=File(), position=0, doc=InputDocumentation(doc="A series of 1 or more [optionally zipped] fastq files."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Barcode_Splitter_V0_1_0().translate("wdl", allow_empty_container=True)

