!Command
positional: []
named:
- !Flag
  description: '|i    <STRING>  Input one or multiple FASTQ file(s). Use comma (,)
    to separate multiple input files.'
  synonyms:
  - --input
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|d <STRING>  The path of signature database. The database can be in
    FASTA format or BWA index (5 files).'
  synonyms:
  - --database
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|t  <INT>     Number of threads [default: auto-detect]'
  synonyms:
  - --threads
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|l  <STRING>  Specify the taxonomic level of the input database  (e.g.
    family, species, genus, strain, etc.). The value will be auto-detected if the
    input database ended with levels (e.g. GOTTCHA_db.species). [default: none]'
  synonyms:
  - --dbLevel
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|o   <STRING>  Output directory [default: ./]'
  synonyms:
  - --outdir
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|p   <STRING>  Filename prefix of the output. [default: <INPUT_FILENAME_PREFIX>]'
  synonyms:
  - --prefix
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|r   <STRING>  The field will be used to calculate relative abundance.
    You can specify one of the following fields: "LINEAR_LENGTH", "TOTAL_BP_MAPPED",
    "HIT_COUNT", "LINEAR_DOC". [default: LINEAR_DOC]'
  synonyms:
  - --relAbu
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|m     <STRING>  You can specify one of the output mode: "summary"
    : this mode will report a summary of profiling result to *.gottcha.tsv file. "full"    :
    other than a summary, this mode will report unfiltered result to *.gottcha_full.tsv
    with more detail. "all"     : other than two tables, this mode will  keep all
    output files that were  generated by each profiling step. [default: summary]'
  synonyms:
  - --mode
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|n       Ignore alignments that hit to plasmids [default: null]'
  synonyms:
  - --noPlasmidHit
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|b   <STRING>  BWA-MEM in this script is used to map input reads to  GOTTCHA
    database. If you want to run it with your own parameters, use this option to specify.
    [default: "-k 30 -T 0 -B 100 -O 100 -E 100"]'
  synonyms:
  - --bwaOpt
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|s    <STRING>  Specify a directory contains pre-splitrimmed input
    files. E.g. input file is "test.fastq", the script will looking for "test_splitrim.fastq"
    and "test_splitrim.stats.txt" in the specified directory.'
  synonyms:
  - --stDir
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Dump the mapping result in SAM format.
  synonyms:
  - --dumpSam
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '<INT>     Minimum quality for a read to be considered valid (0-41)
    [default: 20]'
  synonyms:
  - --minQ
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '<INT>     Fixed length to which each trimmed read will be cut  down
    to [default: 30]'
  synonyms:
  - --fixL
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '<INT>     ASCII encoding of quality score (33 or 64) [default:  33] '
  synonyms:
  - --ascii
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '<FLOAT>   Minimum linear coverage to be considered valid in  abundance
    calculation [default: 0.005]'
  synonyms:
  - --minCov
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '<INT>     Minimum Mean-Linear-Hit-Length to be considered valid in
    abundance calculation [default: 5]'
  synonyms:
  - --minMLHL
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '<FLOAT>   Critical coverage below which --minMLHL will cause an organism
    to fail [default: 0.006]'
  synonyms:
  - --cCov
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '<INT>     Minimum unique length to be considered valid in abundance
    calculation [default: 100]'
  synonyms:
  - --minLen
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: <INT>     Minimum number of hits to be considered valid in  abundance
    calculation [10]
  synonyms:
  - --minHits
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '?             display this help                   '
  synonyms:
  - --help/h/
  args: !EmptyFlagArg {}
  optional: true
command:
- gottcha.pl
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\n\nPROGRAM: GOTTCHA metagenomic taxonomic profiling tool\n\nVERSION:\
  \ 1.0b\n\nDESCRIPTION:\n\nGenomic Origin Through Taxonomic CHAllenge (GOTTCHA) is\
  \ an \nannotation-independent and signature-based metagenomic taxonomic profiling\
  \ tool\nthat has significantly smaller FDR than other profiling tools. This Perl\
  \ script \nis a wrapper to run the GOTTCHA profiling tool with pre-computed signature\
  \ \ndatabases. The procedure includes 3 major steps: split-trimming the input data,\
  \ \nmapping reads to a GOTTCHA database using BWA, profiling/filtering the result.\n\
  \nUSAGE: /tmp/tmprqrt4zpm/bin/gottcha.pl [OPTIONS] --input <FASTQ> --database <DATABASE_PATH>\n\
  \n    --input|i    <STRING>  Input one or multiple FASTQ file(s). Use comma (,)\n\
  \                           to separate multiple input files.\n\t              \
  \         \n    --database|d <STRING>  The path of signature database. The database\
  \ can be\n                           in FASTA format or BWA index (5 files).\n\n\
  [OPTIONS]\n\n  *** GENERAL OPTIONS ***\n\n    --threads|t  <INT>     Number of threads\
  \ [default: auto-detect]\n    --dbLevel|l  <STRING>  Specify the taxonomic level\
  \ of the input database \n                           (e.g. family, species, genus,\
  \ strain, etc.). The\n                           value will be auto-detected if\
  \ the input database\n                           ended with levels (e.g. GOTTCHA_db.species).\n\
  \                           [default: none]\n    --outdir|o   <STRING>  Output directory\
  \ [default: ./]\n    --prefix|p   <STRING>  Filename prefix of the output.\n   \
  \                        [default: <INPUT_FILENAME_PREFIX>]\n    --relAbu|r   <STRING>\
  \  The field will be used to calculate relative\n                           abundance.\
  \ You can specify one of the following\n                           fields: \"LINEAR_LENGTH\"\
  , \"TOTAL_BP_MAPPED\",\n                           \"HIT_COUNT\", \"LINEAR_DOC\"\
  .\n                           [default: LINEAR_DOC]\n    --mode|m     <STRING> \
  \ You can specify one of the output mode:\n                           \"summary\"\
  \ : this mode will report a summary of\n                                       profiling\
  \ result to *.gottcha.tsv file.\n                           \"full\"    : other\
  \ than a summary, this mode will\n                                       report\
  \ unfiltered result to\n                                       *.gottcha_full.tsv\
  \ with more detail.\n                           \"all\"     : other than two tables,\
  \ this mode will \n                                       keep all output files\
  \ that were \n                                       generated by each profiling\
  \ step.\n                           [default: summary]\n    --noPlasmidHit|n   \
  \    Ignore alignments that hit to plasmids\n                           [default:\
  \ null]\n    --bwaOpt|b   <STRING>  BWA-MEM in this script is used to map input\
  \ reads to \n                           GOTTCHA database. If you want to run it\
  \ with your own\n                           parameters, use this option to specify.\n\
  \                           [default: \"-k 30 -T 0 -B 100 -O 100 -E 100\"]\n   \
  \ --stDir|s    <STRING>  Specify a directory contains pre-splitrimmed input\n  \
  \                         files. E.g. input file is \"test.fastq\", the script\n\
  \                           will looking for \"test_splitrim.fastq\" and\n     \
  \                      \"test_splitrim.stats.txt\" in the specified directory.\n\
  \    --dumpSam              Dump the mapping result in SAM format.\n\n  *** OPTIONS\
  \ FOR SPLIT-TRIMMING READS ***\n\n    --minQ       <INT>     Minimum quality for\
  \ a read to be considered valid\n                           (0-41) [default: 20]\n\
  \    --fixL       <INT>     Fixed length to which each trimmed read will be cut\
  \ \n                           down to [default: 30]\n    --ascii      <INT>   \
  \  ASCII encoding of quality score (33 or 64) [default: \n                     \
  \      33] \n\n  *** OPTIONS FOR FILTERING PROFILING RESULT ***\n\n    --minCov\
  \     <FLOAT>   Minimum linear coverage to be considered valid in \n           \
  \                abundance calculation [default: 0.005]\n    --minMLHL    <INT>\
  \     Minimum Mean-Linear-Hit-Length to be considered valid\n                  \
  \         in abundance calculation [default: 5]\n    --cCov       <FLOAT>   Critical\
  \ coverage below which --minMLHL will cause an\n                           organism\
  \ to fail [default: 0.006]\n    --minLen     <INT>     Minimum unique length to\
  \ be considered valid in\n                           abundance calculation [default:\
  \ 100]\n    --minHits    <INT>     Minimum number of hits to be considered valid\
  \ in \n                           abundance calculation [10]\n    \n    --help/h/?\
  \             display this help                   \n\n"
generated_using:
- --help
