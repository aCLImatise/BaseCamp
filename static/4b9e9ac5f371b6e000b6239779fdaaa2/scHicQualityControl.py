from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Array, File, Boolean

Schicqualitycontrol_V0_1_0 = CommandToolBuilder(tool="scHicQualityControl", base_command=["scHicQualityControl"], inputs=[ToolInput(tag="in_schic_matrix_scool", input_type=String(optional=True), prefix="--matrix", doc=InputDocumentation(doc="scHi-C matrix, -m scool scHi-C matrix\nThe single cell Hi-C interaction matrices to\ninvestigate for QC. Needs to be in scool format\n(default: None)")), ToolInput(tag="in_outputs_cool", input_type=String(optional=True), prefix="--outputScool", doc=InputDocumentation(doc="scool matrix which contains only the filtered matrices\n(default: filtered_matrices.scool)")), ToolInput(tag="in_minimum_read_coverage", input_type=Int(optional=True), prefix="--minimumReadCoverage", doc=InputDocumentation(doc="Remove all samples with a lower read coverage as this\nvalue. (default: 1000000)")), ToolInput(tag="in_minimum_density", input_type=Int(optional=True), prefix="--minimumDensity", doc=InputDocumentation(doc="Remove all samples with a lower density as this value.\nThe density is given by: number of non-zero\ninteractions / all possible interactions. (default:\n0.001)")), ToolInput(tag="in_maximum_region_to_consider", input_type=Int(optional=True), prefix="--maximumRegionToConsider", doc=InputDocumentation(doc="To compute the density, consider only this genomic\ndistance around the diagonal. (default: 30000000)")), ToolInput(tag="in_chromosomes", input_type=Array(t=String(), optional=True), prefix="--chromosomes", doc=InputDocumentation(doc="List of chromosomes that a cell needs to have to be\nnot deleted. However, other chromosomes/contigs and\nscaffolds which may exist are not deleted. Use\nscHicAdjustMatrix for this. (default: None)")), ToolInput(tag="in_out_filename_density", input_type=File(optional=True), prefix="--outFileNameDensity", doc=InputDocumentation(doc="File name of the density histogram (default:\ndensity.png)")), ToolInput(tag="in_out_filename_read_coverage", input_type=File(optional=True), prefix="--outFileNameReadCoverage", doc=InputDocumentation(doc="File name of the read coverage (default:\nreadCoverage.png)")), ToolInput(tag="in_out_filename_qc_report", input_type=File(optional=True), prefix="--outFileNameQCReport", doc=InputDocumentation(doc="File name of the quality report (default:\nqc_report.txt)")), ToolInput(tag="in_plot_only", input_type=Boolean(optional=True), prefix="--plotOnly", doc=InputDocumentation(doc="Do not create a new matrix, create only the plots.\n(default: False)")), ToolInput(tag="in_run_chromosome_check", input_type=Boolean(optional=True), prefix="--runChromosomeCheck", doc=InputDocumentation(doc="Skip the data integrity check for the chromosomes.\n(default: False)")), ToolInput(tag="in_dpi", input_type=Int(optional=True), prefix="--dpi", doc=InputDocumentation(doc="The dpi of the plot. (default: 300)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads. Using the python multiprocessing\nmodule. (default: 4)")), ToolInput(tag="in_sch_i_c", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_var_14", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_out_filename_density", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_filename_density", type_hint=File()), doc=OutputDocumentation(doc="File name of the density histogram (default:\ndensity.png)")), ToolOutput(tag="out_out_filename_read_coverage", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_filename_read_coverage", type_hint=File()), doc=OutputDocumentation(doc="File name of the read coverage (default:\nreadCoverage.png)")), ToolOutput(tag="out_out_filename_qc_report", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_filename_qc_report", type_hint=File()), doc=OutputDocumentation(doc="File name of the quality report (default:\nqc_report.txt)"))], container="quay.io/biocontainers/schicexplorer:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Schicqualitycontrol_V0_1_0().translate("wdl")

