from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Pmv_V0_1_0 = CommandToolBuilder(tool="pmv", base_command=["pmv"], inputs=[ToolInput(tag="in_again", input_type=File(optional=True), prefix="--again", doc=InputDocumentation(doc=": play back lastlog file")), ToolInput(tag="in_overwrite_log", input_type=Boolean(optional=True), prefix="--overwriteLog", doc=InputDocumentation(doc=": overwrite log file")), ToolInput(tag="in_unique_log", input_type=Boolean(optional=True), prefix="--uniqueLog", doc=InputDocumentation(doc=": create a log file with a unique name")), ToolInput(tag="in_no_log", input_type=Boolean(optional=True), prefix="--noLog", doc=InputDocumentation(doc=": turn off logging")), ToolInput(tag="in_no_gui", input_type=Boolean(optional=True), prefix="--noGUI", doc=InputDocumentation(doc=": start PMV without the Graphical User Interface")), ToolInput(tag="in_no_splash", input_type=String(optional=True), prefix="--noSplash", doc=InputDocumentation(doc=": turn off Splash Screen")), ToolInput(tag="in_die", input_type=Boolean(optional=True), prefix="--die", doc=InputDocumentation(doc=": do not start GUI event loop")), ToolInput(tag="in_customizer", input_type=File(optional=True), prefix="--customizer", doc=InputDocumentation(doc=": run the user specified file")), ToolInput(tag="in_lib", input_type=String(optional=True), prefix="--lib", doc=InputDocumentation(doc=": add a libraries of commands")), ToolInput(tag="in_ipython", input_type=String(optional=True), prefix="--ipython", doc=InputDocumentation(doc=": create an ipython shell instead of a python shell")), ToolInput(tag="in_update", input_type=Boolean(optional=True), prefix="--update", doc=InputDocumentation(doc="[nightly|tested|clear] : update MGLTools\nif no arguments are given Update Manager GUI is provided\n'nightly': download and install Nightly Builds\n'tested' : download and install tested Nightly Builds\n'clear'  : clear/uninstall all the updates")), ToolInput(tag="in_d_mode", input_type=String(optional=True), prefix="--dmode", doc=InputDocumentation(doc=": specify a display mode\nmodes can be any a combination of display mode\n'cpk'  : cpk\n'lines': lines\n'ss'   : secondary structure ribbon\n'sb'   : sticks and balls\n'lic'  : licorice\n'ms'   : molecular surface\n'ca'   : C-alpha trace\n'bt'   : backbone trace\n'sp'   : CA-spline\n'sssb' : secondary structure for proteins,\nsticks and balls for other residues with bonds\nlines for other residues without bonds")), ToolInput(tag="in_c_mode", input_type=String(optional=True), prefix="--cmode", doc=InputDocumentation(doc=": specify a display mode color scheme:\n'ca' : color by atom\n'cr' : color by residue (RASMOL scheme)\n'cc' : color by chain\n'cm' : color by molecule\n'cdg': color using David Goodsell's scheme\n'cs' : color residues using Shapely scheme\n'css': color by secondary structure element\nexample:\ndisplay protein as ribbon, non protein as sticks and balls\nand color by atom type\npmv -i --dmode sssb --cmode cr myprot.pdb\npmv -i -m sssb -c cr myprot.pdb\n")), ToolInput(tag="in_options", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pmv_V0_1_0().translate("wdl", allow_empty_container=True)

