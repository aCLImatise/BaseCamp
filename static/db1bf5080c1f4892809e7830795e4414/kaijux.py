from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Float, Boolean

Kaijux_V0_1_0 = CommandToolBuilder(tool="kaijux", base_command=["kaijux"], inputs=[ToolInput(tag="in_name_database_file", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="Name of database file (.fmi) file")), ToolInput(tag="in_name_input_file", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="Name of input file containing reads in FASTA or FASTQ format")), ToolInput(tag="in_name_second_input", input_type=File(optional=True), prefix="-j", doc=InputDocumentation(doc="Name of second input file for paired-end reads")), ToolInput(tag="in_name_specified_output", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Name of output file. If not specified, output will be printed to STDOUT")), ToolInput(tag="in_number_parallel_threads", input_type=Int(optional=True), prefix="-z", doc=InputDocumentation(doc="Number of parallel threads for classification (default: 1)")), ToolInput(tag="in_run_mode_default", input_type=String(optional=True), prefix="-a", doc=InputDocumentation(doc="Run mode, either 'mem'  or 'greedy' (default: greedy)")), ToolInput(tag="in_number_mismatches_allowed", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="Number of mismatches allowed in Greedy mode (default: 3)")), ToolInput(tag="in_minimum_match_length", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Minimum match length (default: 11)")), ToolInput(tag="in_minimum_match_score", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc="Minimum match score in Greedy mode (default: 65)")), ToolInput(tag="in_minimum_evalue_greedy", input_type=Float(optional=True), prefix="-E", doc=InputDocumentation(doc="Minimum E-value in Greedy mode")), ToolInput(tag="in_enable_seg_low", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="Enable SEG low complexity filter (enabled by default)")), ToolInput(tag="in_disable_seg_low", input_type=Boolean(optional=True), prefix="-X", doc=InputDocumentation(doc="Disable SEG low complexity filter")), ToolInput(tag="in_enable_verbose_output", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Enable verbose output."))], outputs=[ToolOutput(tag="out_name_specified_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_name_specified_output", type_hint=File()), doc=OutputDocumentation(doc="Name of output file. If not specified, output will be printed to STDOUT"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Kaijux_V0_1_0().translate("wdl", allow_empty_container=True)

