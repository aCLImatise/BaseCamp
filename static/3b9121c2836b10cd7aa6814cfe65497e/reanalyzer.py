from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Reanalyzer_V0_1_0 = CommandToolBuilder(tool="reanalyzer", base_command=["reanalyzer"], inputs=[ToolInput(tag="in_input", input_type=Boolean(optional=True), prefix="--input", doc=InputDocumentation(doc="[string(s)]              Input  file (stdin ok). Mandatory option.")), ToolInput(tag="in_classify", input_type=Boolean(optional=True), prefix="--classify", doc=InputDocumentation(doc="Run classification algorithm. Default value: true.")), ToolInput(tag="in_min_score", input_type=Boolean(optional=True), prefix="--minScore", doc=InputDocumentation(doc="[number]             Min score (-1: no change). Default value: -1.0.")), ToolInput(tag="in_max_expected", input_type=Boolean(optional=True), prefix="--maxExpected", doc=InputDocumentation(doc="[number]          Max expected (-1: no change). Default value: -1.0.")), ToolInput(tag="in_min_percent_identity", input_type=Boolean(optional=True), prefix="--minPercentIdentity", doc=InputDocumentation(doc="[number]   Min percent identity (-1: no change). Default value: -1.0.")), ToolInput(tag="in_top_percent", input_type=Boolean(optional=True), prefix="--topPercent", doc=InputDocumentation(doc="[number]          Top percent (-1: no change). Default value: -1.0.")), ToolInput(tag="in_min_support_percent", input_type=Boolean(optional=True), prefix="--minSupportPercent", doc=InputDocumentation(doc="[number]   Min support as percent of assigned reads (0: off, -1: no change). Default value: -1.0.")), ToolInput(tag="in_min_support", input_type=Boolean(optional=True), prefix="--minSupport", doc=InputDocumentation(doc="[number]          Min support (0: off, -1; no change). Default value: -1.")), ToolInput(tag="in_min_percent_read_cover", input_type=Boolean(optional=True), prefix="--minPercentReadCover", doc=InputDocumentation(doc="[number]   Min percent of read length to be covered by alignments (-1: no change). Default value: -1.0.")), ToolInput(tag="in_min_percent_reference_cover", input_type=Boolean(optional=True), prefix="--minPercentReferenceCover", doc=InputDocumentation(doc="[number]   Min percent of reference length to be covered by alignments (-1: no change). Default value: -1.0.")), ToolInput(tag="in_lca_algorithm", input_type=Boolean(optional=True), prefix="--lcaAlgorithm", doc=InputDocumentation(doc="[string]        Set the LCA algorithm to use for taxonomic assignment. Default value: naive Legal values: naive, weighted, longReads")), ToolInput(tag="in_lca_coverage_percent", input_type=Boolean(optional=True), prefix="--lcaCoveragePercent", doc=InputDocumentation(doc="[number]   Set the percent for the LCA to cover (-1: no change). Default value: -1.0.")), ToolInput(tag="in_read_assignment_mode", input_type=Boolean(optional=True), prefix="--readAssignmentMode", doc=InputDocumentation(doc="[string]   Set the read assignment mode. Default value: alignedBases in long read mode, readCount else")), ToolInput(tag="in_con_file", input_type=Boolean(optional=True), prefix="--conFile", doc=InputDocumentation(doc="[string]              File of contaminant taxa (one Id or name per line).")), ToolInput(tag="in_paired", input_type=Boolean(optional=True), prefix="--paired", doc=InputDocumentation(doc="Reads are paired. Default value: false.")), ToolInput(tag="in_properties_file", input_type=Boolean(optional=True), prefix="--propertiesFile", doc=InputDocumentation(doc="[string]        Properties file. Default value: /root/.Megan.def")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Echo commandline options and be verbose. Default value: false.")), ToolInput(tag="in_parameters", input_type=String(), position=0, doc=InputDocumentation(doc="-lg, --longReads                     Parse and analyse as long reads. Default value: false."))], outputs=[], container="quay.io/biocontainers/megan:6.21.2--h9ee0642_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Reanalyzer_V0_1_0().translate("wdl")

