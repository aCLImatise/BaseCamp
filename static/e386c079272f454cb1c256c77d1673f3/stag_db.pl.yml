!Command
command:
- stag-db.pl
positional:
- !Positional
  optional: false
  position: 0
  name: ARGUMENTS
  description: "-i INDEXFILE\nThis file will be used as the persistent index for storage/retrieval"
- !Positional
  optional: false
  position: 0
  name: Stag
  description: For more complex stag to database mapping, see DBIx::DBStag and the
- !Positional
  optional: false
  position: 1
  name: scripts
  description: stag-storenode
named:
- !Flag
  optional: true
  synonyms:
  - -r
  description: "This is the name of the stag node (XML element) that will be stored\
    \ in\nthe index; for example, with the XML below you may want to use the node\n\
    name person and the unique key id\n<person_set>\n<person>\n<id>...</id>\n</person>\n\
    <person>\n<id>...</id>\n</person>\n...\n</person_set>\nThis flag should only be\
    \ used when you want to store data"
  args: !SimpleFlagArg
    name: RELATION-NAME
- !Flag
  optional: true
  synonyms:
  - -k
  description: "This node will be used as the unique/primary key for the data\nThis\
    \ node should be nested directly below the node that is being stored\nin the index\
    \ - if it is more that one below, specify a path\nThis flag should only be used\
    \ when you want to store data"
  args: !SimpleFlagArg
    name: UNIQUE-KEY
- !Flag
  optional: true
  synonyms:
  - -u
  description: Synonym for -k
  args: !SimpleFlagArg
    name: UNIQUE-KEY
- !Flag
  optional: true
  synonyms:
  - -p
  description: "This can be the name of a stag supported format (xml, sxpr, itext)\
    \ - XML\nis assumed by default\nIt can also be a module name - this module is\
    \ used to parse the input\nfile into a stag stream; see Data::Stag::BaseGenerator\
    \ for details on\nwriting your own parsers/event generators\nThis flag should\
    \ only be used when you want to store data"
  args: !SimpleFlagArg
    name: PARSER
- !Flag
  optional: true
  synonyms:
  - -q
  description: "Fetches the relation/node with unique key value equal to query-id\n\
    Multiple arguments can be passed by specifying -q multple times\nThis flag should\
    \ only be used when you want to query data"
  args: !SimpleFlagArg
    name: QUERY-ID
- !Flag
  optional: true
  synonyms:
  - -top
  description: "If this is specified in conjunction with -q or -qf then all the query\n\
    result nodes will be nested inside a node with this name (ie this\nprovides a\
    \ root for the resulting document tree)"
  args: !SimpleFlagArg
    name: NODE-NAME
- !Flag
  optional: true
  synonyms:
  - -qf
  description: "This is a file of newline-seperated IDs; this is useful for querying\
    \ the\nindex in batch"
  args: !SimpleFlagArg
    name: QUERY-FILE
- !Flag
  optional: true
  synonyms:
  - -keys
  description: This will write a list of all primary keys in the index
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -w
  description: "This format will be used to write the data; can be any stag format\
    \ (xml,\nsxpr, itext) - default XML.\nCan also be a module that catches the incoming\
    \ stag event stream and\ndoes something with it (for example, this could be a\
    \ module you write\nyourself that transforms the stag events into HTML)"
  args: !SimpleFlagArg
    name: WRITER
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    stag-db - persistent storage and retrieval for stag data (xml,\
  \ sxpr,\n    itext)\n\nSYNOPSIS\n      stag-db -r person -k social_security_no -i\
  \ ./person-idx myrecords.xml\n      stag-db -i ./person-idx -q 999-9999-9999 -q\
  \ 888-8888-8888\n\nDESCRIPTION\n    Builds a simple file-based database for persistent\
  \ storage and retrieval\n    of nodes from a stag compatible document.\n\n    Imagine\
  \ you have a very large file of data, in a stag compatible format\n    such as XML.\
  \ You want to index all the elements of type person; each\n    person can be uniquely\
  \ identified by social_security_no, which is a\n    direct subnode of person\n\n\
  \    The first thing to do is to build an index file, which will be stored in\n\
  \    your current directory:\n\n      stag-db -r person -k social_security_no -i\
  \ ./person-idx myrecords.xml\n\n    You can then use the index \"person-idx\" to\
  \ retrieve person nodes by\n    their social security number\n\n      stag-db -i\
  \ ./person-idx -q 999-9999-9999 > some-person.xml\n\n    You can export using different\
  \ stag formats\n\n      stag-db -i ./person-idx -q 999-9999-9999 -w sxpr > some-person.xml\n\
  \n    You can retrieve multiple nodes (although these need to be rooted to\n   \
  \ make a valid file)\n\n      stag-db -i ./person-idx -q 999-9999-9999 -q 888-8888-8888\
  \ -top personset\n\n    Or you can use a list of IDs from a file (newline delimited)\n\
  \n      stag-db -i ./person-idx -qf my_ss_nmbrs.txt -top personset\n\n  ARGUMENTS\n\
  \   -i INDEXFILE\n    This file will be used as the persistent index for storage/retrieval\n\
  \n   -r RELATION-NAME\n    This is the name of the stag node (XML element) that\
  \ will be stored in\n    the index; for example, with the XML below you may want\
  \ to use the node\n    name person and the unique key id\n\n      <person_set>\n\
  \        <person>\n          <id>...</id>\n        </person>\n        <person>\n\
  \          <id>...</id>\n        </person>\n        ...\n      </person_set>\n\n\
  \    This flag should only be used when you want to store data\n\n   -k UNIQUE-KEY\n\
  \    This node will be used as the unique/primary key for the data\n\n    This node\
  \ should be nested directly below the node that is being stored\n    in the index\
  \ - if it is more that one below, specify a path\n\n    This flag should only be\
  \ used when you want to store data\n\n   -u UNIQUE-KEY\n    Synonym for -k\n\n \
  \  -p PARSER\n    This can be the name of a stag supported format (xml, sxpr, itext)\
  \ - XML\n    is assumed by default\n\n    It can also be a module name - this module\
  \ is used to parse the input\n    file into a stag stream; see Data::Stag::BaseGenerator\
  \ for details on\n    writing your own parsers/event generators\n\n    This flag\
  \ should only be used when you want to store data\n\n   -q QUERY-ID\n    Fetches\
  \ the relation/node with unique key value equal to query-id\n\n    Multiple arguments\
  \ can be passed by specifying -q multple times\n\n    This flag should only be used\
  \ when you want to query data\n\n   -top NODE-NAME\n    If this is specified in\
  \ conjunction with -q or -qf then all the query\n    result nodes will be nested\
  \ inside a node with this name (ie this\n    provides a root for the resulting document\
  \ tree)\n\n   -qf QUERY-FILE\n    This is a file of newline-seperated IDs; this\
  \ is useful for querying the\n    index in batch\n\n   -keys\n    This will write\
  \ a list of all primary keys in the index\n\n   -w WRITER\n    This format will\
  \ be used to write the data; can be any stag format (xml,\n    sxpr, itext) - default\
  \ XML.\n\n    Can also be a module that catches the incoming stag event stream and\n\
  \    does something with it (for example, this could be a module you write\n   \
  \ yourself that transforms the stag events into HTML)\n\nSEE ALSO\n    Data::Stag\n\
  \n    For more complex stag to database mapping, see DBIx::DBStag and the\n    scripts\n\
  \n    stag-storenode\n\n    selectall_xml\n\n"
generated_using:
- --help
docker_image:
