from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Somatic_Vcf2Tsv_Py_V0_1_0 = CommandToolBuilder(tool="somatic_vcf2tsv.py", base_command=["somatic_vcf2tsv.py"], inputs=[ToolInput(tag="in_vcf_format", input_type=File(optional=True), prefix="--vcf-format", doc=InputDocumentation(doc="Input file is VCF formatted. (default: None)")), ToolInput(tag="in_bed_format", input_type=File(optional=True), prefix="--bed-format", doc=InputDocumentation(doc="Input file is BED formatted. (default: None)")), ToolInput(tag="in_positions_list", input_type=String(optional=True), prefix="--positions-list", doc=InputDocumentation(doc="A list of positions: tab seperating contig and\npositions. (default: None)")), ToolInput(tag="in_normal_bam_file", input_type=File(optional=True), prefix="--normal-bam-file", doc=InputDocumentation(doc="Normal BAM File (default: None)")), ToolInput(tag="in_tumor_bam_file", input_type=File(optional=True), prefix="--tumor-bam-file", doc=InputDocumentation(doc="Tumor BAM File (default: None)")), ToolInput(tag="in_ground_truth_vcf", input_type=String(optional=True), prefix="--ground-truth-vcf", doc=InputDocumentation(doc="VCF of true hits (default: None)")), ToolInput(tag="in_dbsnp_vcf", input_type=String(optional=True), prefix="--dbsnp-vcf", doc=InputDocumentation(doc="dbSNP VCF: do not use if input VCF is annotated\n(default: None)")), ToolInput(tag="in_cosmic_vcf", input_type=String(optional=True), prefix="--cosmic-vcf", doc=InputDocumentation(doc="COSMIC VCF: do not use if input VCF is annotated\n(default: None)")), ToolInput(tag="in_mute_ct_vcf", input_type=String(optional=True), prefix="--mutect-vcf", doc=InputDocumentation(doc="MuTect VCF (default: None)")), ToolInput(tag="in_str_elka_vcf", input_type=String(optional=True), prefix="--strelka-vcf", doc=InputDocumentation(doc="Strelka VCF (default: None)")), ToolInput(tag="in_somatic_sniper_vcf", input_type=String(optional=True), prefix="--somaticsniper-vcf", doc=InputDocumentation(doc="SomaticSniper VCF (default: None)")), ToolInput(tag="in_vars_can_vcf", input_type=Int(optional=True), prefix="--varscan-vcf", doc=InputDocumentation(doc="VarScan2 VCF (default: None)")), ToolInput(tag="in_jsm_vcf", input_type=Int(optional=True), prefix="--jsm-vcf", doc=InputDocumentation(doc="JointSNVMix2 VCF (default: None)")), ToolInput(tag="in_var_dict_vcf", input_type=String(optional=True), prefix="--vardict-vcf", doc=InputDocumentation(doc="VarDict VCF (default: None)")), ToolInput(tag="in_muse_vcf", input_type=String(optional=True), prefix="--muse-vcf", doc=InputDocumentation(doc="MuSE VCF (default: None)")), ToolInput(tag="in_lo_freq_vcf", input_type=String(optional=True), prefix="--lofreq-vcf", doc=InputDocumentation(doc="LoFreq VCF (default: None)")), ToolInput(tag="in_scalpel_vcf", input_type=String(optional=True), prefix="--scalpel-vcf", doc=InputDocumentation(doc="Scalpel VCF (default: None)")), ToolInput(tag="in_tn_scope_vcf", input_type=String(optional=True), prefix="--tnscope-vcf", doc=InputDocumentation(doc="TNscope VCF (default: None)")), ToolInput(tag="in_platypus_vcf", input_type=String(optional=True), prefix="--platypus-vcf", doc=InputDocumentation(doc="Platypus VCF (default: None)")), ToolInput(tag="in_genome_reference", input_type=File(optional=True), prefix="--genome-reference", doc=InputDocumentation(doc=".fasta.fai file to get the contigs (default: None)")), ToolInput(tag="in_de_duplicate", input_type=Boolean(optional=True), prefix="--deduplicate", doc=InputDocumentation(doc="Do not consider duplicate reads from BAM files.\nDefault is to count everything (default: False)")), ToolInput(tag="in_minimum_mapping_quality", input_type=Int(optional=True), prefix="--minimum-mapping-quality", doc=InputDocumentation(doc="Minimum mapping quality below which is considered poor\n(default: 1)")), ToolInput(tag="in_minimum_base_quality", input_type=Int(optional=True), prefix="--minimum-base-quality", doc=InputDocumentation(doc="Minimum base quality below which is considered poor\n(default: 5)")), ToolInput(tag="in_minimum_num_callers", input_type=Int(optional=True), prefix="--minimum-num-callers", doc=InputDocumentation(doc="Minimum number of tools to be considered (default: 0)")), ToolInput(tag="in_p_scale", input_type=String(optional=True), prefix="--p-scale", doc=InputDocumentation(doc="phred, fraction, or none (default: None)")), ToolInput(tag="in_output_tsv_file", input_type=File(optional=True), prefix="--output-tsv-file", doc=InputDocumentation(doc="Output TSV Name (default: <_io.TextIOWrapper\nname='<stdout>' mode='w' encoding='utf-8'>)\n"))], outputs=[ToolOutput(tag="out_output_tsv_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_tsv_file", type_hint=File()), doc=OutputDocumentation(doc="Output TSV Name (default: <_io.TextIOWrapper\nname='<stdout>' mode='w' encoding='utf-8'>)\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Somatic_Vcf2Tsv_Py_V0_1_0().translate("wdl", allow_empty_container=True)

