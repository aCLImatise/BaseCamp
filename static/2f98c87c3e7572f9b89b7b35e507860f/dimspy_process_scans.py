from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean, Float

Dimspy_Process_Scans_V0_1_0 = CommandToolBuilder(tool="dimspy_process_scans", base_command=["dimspy", "process-scans"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Directory (*.raw, *.mzml or tab-delimited peaklist\nfiles), single *.mzml/*.raw file or zip archive\n(*.mzml only)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="HDF5 file to save the peaklist objects to.")), ToolInput(tag="in_file_list", input_type=File(optional=True), prefix="--filelist", doc=InputDocumentation(doc="Tab-delimited file that include the name of the data\nfiles (*.raw or *.mzml) and meta data. Column names:\nfilename, replicate, batch, injectionOrder,\nclassLabel.")), ToolInput(tag="in_function_noise", input_type=String(optional=True), prefix="--function-noise", doc=InputDocumentation(doc="Select function to calculate noise.")), ToolInput(tag="in_snr_threshold", input_type=String(optional=True), prefix="--snr-threshold", doc=InputDocumentation(doc="Signal-to-noise threshold")), ToolInput(tag="in_ppm", input_type=String(optional=True), prefix="--ppm", doc=InputDocumentation(doc="Mass tolerance in Parts per million to group peaks\nacross scans / mass spectra.")), ToolInput(tag="in_min_scans", input_type=Int(optional=True), prefix="--min_scans", doc=InputDocumentation(doc="Minimum number of scans required for each m/z range or\nevent.")), ToolInput(tag="in_min_fraction", input_type=Int(optional=True), prefix="--min-fraction", doc=InputDocumentation(doc="Minimum fraction a peak has to be present. Use 0.0 to\nnot apply this filter.")), ToolInput(tag="in_rsd_threshold", input_type=String(optional=True), prefix="--rsd-threshold", doc=InputDocumentation(doc="Maximum threshold - relative standard deviation\n(Calculated for peaks that have been measured across a\nminimum of two scans).")), ToolInput(tag="in_skip_stitching", input_type=Boolean(optional=True), prefix="--skip-stitching", doc=InputDocumentation(doc="Skip the step where (SIM) windows are 'stitched' or\n'joined' together. Individual peaklists are generated\nfor each window.")), ToolInput(tag="in_end_scantype_", input_type=Float(optional=True), prefix="-x", doc=InputDocumentation(doc="end scan_type, --exclude-scan-events start end scan_type\nScan events to select. E.g. 100.0 200.0 sim or 50.0\n1000.0 full")), ToolInput(tag="in_end__removemzrange", input_type=Float(optional=True), prefix="-z", doc=InputDocumentation(doc="end, --remove-mz-range start end\nM/z range(s) to remove. E.g. 100.0 102.0 or 140.0\n145.0.")), ToolInput(tag="in_report", input_type=String(optional=True), prefix="--report", doc=InputDocumentation(doc="Summary/Report of processed mass spectra")), ToolInput(tag="in_block_size", input_type=Int(optional=True), prefix="--block-size", doc=InputDocumentation(doc="The size of each block of peaks to perform clustering\non.")), ToolInput(tag="in_n_cpus", input_type=Int(optional=True), prefix="--ncpus", doc=InputDocumentation(doc="Number of central processing units (CPUs).\n")), ToolInput(tag="in_ringing", input_type=String(), position=0, doc=InputDocumentation(doc="-e start end scan_type, --include-scan-events start end scan_type"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dimspy_Process_Scans_V0_1_0().translate("wdl", allow_empty_container=True)

