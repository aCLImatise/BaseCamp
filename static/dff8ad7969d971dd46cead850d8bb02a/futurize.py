from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String, Directory, File

Futurize_V0_1_0 = CommandToolBuilder(tool="futurize", base_command=["futurize"], inputs=[ToolInput(tag="in_all_imports", input_type=Boolean(optional=True), prefix="--all-imports", doc=InputDocumentation(doc="Add all __future__ and future imports to each module")), ToolInput(tag="in_stage_one", input_type=Boolean(optional=True), prefix="--stage1", doc=InputDocumentation(doc="Modernize Python 2 code only; no compatibility with\nPython 3 (or dependency on ``future``)")), ToolInput(tag="in_stage_two", input_type=Boolean(optional=True), prefix="--stage2", doc=InputDocumentation(doc="Take modernized (stage1) code and add a dependency on\n``future`` to provide Py3 compatibility.")), ToolInput(tag="in_both_stages", input_type=Boolean(optional=True), prefix="--both-stages", doc=InputDocumentation(doc="Apply both stages 1 and 2")), ToolInput(tag="in_unicode_literals", input_type=Boolean(optional=True), prefix="--unicode-literals", doc=InputDocumentation(doc="Add ``from __future__ import unicode_literals`` to\nimplicitly convert all unadorned string literals ''\ninto unicode strings")), ToolInput(tag="in_fix", input_type=Int(optional=True), prefix="--fix", doc=InputDocumentation(doc="Each FIX specifies a transformation; default: all.\nEither use '-f division -f metaclass' etc. or use the\nfully-qualified module name: '-f\nlib2to3.fixes.fix_types -f\nlibfuturize.fixes.fix_unicode_keep_u'")), ToolInput(tag="in_processes", input_type=Int(optional=True), prefix="--processes", doc=InputDocumentation(doc="Run 2to3 concurrently")), ToolInput(tag="in_no_fix", input_type=String(optional=True), prefix="--nofix", doc=InputDocumentation(doc="Prevent a fixer from being run.")), ToolInput(tag="in_list_fixes", input_type=Boolean(optional=True), prefix="--list-fixes", doc=InputDocumentation(doc="List available transformations")), ToolInput(tag="in_print_function", input_type=Boolean(optional=True), prefix="--print-function", doc=InputDocumentation(doc="Modify the grammar so that print() is a function")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="More verbose logging")), ToolInput(tag="in_no_diffs", input_type=Boolean(optional=True), prefix="--no-diffs", doc=InputDocumentation(doc="Don't show diffs of the refactoring")), ToolInput(tag="in_write", input_type=Boolean(optional=True), prefix="--write", doc=InputDocumentation(doc="Write back modified files")), ToolInput(tag="in_no_backups", input_type=Boolean(optional=True), prefix="--nobackups", doc=InputDocumentation(doc="Don't write backups for modified files.")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Put output files in this directory instead of\noverwriting the input files.  Requires -n. For Python\n>= 2.7 only.")), ToolInput(tag="in_write_unchanged_files", input_type=Boolean(optional=True), prefix="--write-unchanged-files", doc=InputDocumentation(doc="Also write files even if no changes were required\n(useful with --output-dir); implies -w.")), ToolInput(tag="in_add_suffix", input_type=String(optional=True), prefix="--add-suffix", doc=InputDocumentation(doc="Append this string to all output filenames. Requires\n-n if non-empty. For Python >= 2.7 only.ex: --add-\nsuffix='3' will generate .py3 files.\n")), ToolInput(tag="in_file_vertical_line_dir", input_type=File(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Futurize_V0_1_0().translate("wdl", allow_empty_container=True)

