!Command
command:
- rsat
- genome-blast
positional:
- !Positional
  optional: false
  position: 0
  name: genome-blast
  description: "\e[1mDESCRIPTION\e[0m"
- !Positional
  optional: false
  position: 0
  name: util
  description: "\e[1mINPUT FORMAT\e[0m"
- !Positional
  optional: false
  position: 0
  name: organism.
  description: Although the matching is performed at the protein level, the table
- !Positional
  optional: false
  position: 0
  name: comparison.
  description: "\e[1mUSAGE\e[0m"
- !Positional
  optional: false
  position: 0
  name: blastall
  description: The formatdb step has to be done before running blastall. Note that
    both
- !Positional
  optional: false
  position: 0
  name: comparisons.
  description: 'Example: matching all Fungi against all Bacteria genome-blast -qtaxon'
- !Positional
  optional: false
  position: 0
  name: default.
  description: "\e[1m-outdir output_directory\e[0m"
- !Positional
  optional: false
  position: 0
  name: blast.
  description: "genome-blast -v 1 -q my_org -dbtaxon my_taxon -task blastall\ngenome-blast\
    \ -v 1 -db my_org -qtaxon my_taxon -task blastall -no_self"
named:
- !Flag
  optional: true
  synonyms:
  - -task
  description: ',blastall'
  args: !SimpleFlagArg
    name: formatdb
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\e[1mNAME\e[0m\n    genome-blast\n\n\e[1mDESCRIPTION\e[0m\n    Use BLAST\
  \ to detect homologs between all the protein of query and\n    reference organisms.\n\
  \n    The BLAST result is exported as a tab-delimited file, contining one row\n\
  \    per hit. This hit table is post-processed to rank the hits and identify\n \
  \   the bidirectional best hits (BBH).\n\n\e[1mCATEGORY\e[0m\n    util\n\n\e[1mINPUT\
  \ FORMAT\e[0m\n    This program requires the complete set of protein sequences of\
  \ the query\n    and reference genomes. The protein sequence files must be in fasta\n\
  \    format (.fasta or .fasta.gz), with the file name assigned by the RSAT\n   \
  \ program install-genome.\n\n\e[1mOUTPUT FORMAT\e[0m\n    The output format is a\
  \ set of tab-delimited files (one per pairwise\n    genome comparison).\n\n    The\
  \ first 14 columns correspond to the BLAST tab-delimited output\n    (directly obtained\
  \ with the option -m 8).\n\n    1. query_organism\n        Name of the query organism,\
  \ i.e. the organism for which each protein\n        is used as a query for BLAST.\n\
  \n    2. db_organism\n        Name of the query organism, i.e. the organism against\
  \ which the\n        query protein will be matched.\n\n        The BLAST formatting\
  \ of the proteome of the db organism has to be\n        done before the search is\
  \ started. Formatting is done with the\n        option \e[33m-task format\e[0m.\n\
  \n    3. query\n        The ID of the gene coding for the query protein in the query\n\
  \        organism.\n\n        Although the matching is performed at the protein\
  \ level, the table\n        returns the corresponding genes, because the goal is\
  \ to idenfity\n        pairs of homologous genes.\n\n    4. subject\n        The\
  \ ID of the gene in the db organism whose product matched the\n        query protein.\
  \ The name \"subject\" corresponds to the blast\n        nomenclature, to indicate\
  \ the protein of the database that was\n        matched by the query protein.\n\n\
  \    5. ident\n        Percentage of identity.\n\n    6. ali_len\n        Total\
  \ length of the alignment.\n\n    7. mismat\n        Number of mismatches in the\
  \ alignment.\n\n    8. gap_open\n        Number of gap openings in the alignment.\n\
  \n    9. q_start\n        Starting position of the aligned segment in the query\
  \ protein.\n\n    10. q_end\n        Ending position of the aligned segment in the\
  \ query protein.\n\n    11. s_start\n        Starting position of the aligned segment\
  \ in the matched protein (the\n        \"subject\", according to BLAST nomenclature).\n\
  \n    12. s_end\n        Ending position of the aligned segment in the matched protein\
  \ (the\n        \"subject\", according to BLAST nomenclature).\n\n    13. e_value\n\
  \        E-value of the alignment.\n\n    14. bit_sc\n        Bit score of the alignment.\n\
  \n    15. q_rank (post-processing)\n        Query rank: rank of the hit among all\
  \ the hits found for the current\n        query protein in the database genome.\n\
  \n    16. s_rank (post-processing)\n        Database rank: rank of the hit among\
  \ all the hits found for the\n        current database (subject) protein in the\
  \ database genome.\n\n\e[1mSPACE REQUIREMENT\e[0m\n    The BLAST tables are compressed\
  \ (.gz) to save space, but the genome-wide\n    comparisons occupy an important\
  \ disk space. As a rough estimation, each\n    pairwise genome comparison requires\
  \ a space of ~250Mb.\n\n    There are currently (March 2009) more than 1000 bacterial\
  \ genomes.\n    Matching all against all qould require a disk space of 1000*1000*250Mb\
  \ =\n    250Tb. The RSAT server is not able tosupport the all-against-all\n    comparison.\n\
  \n\e[1mUSAGE\e[0m\n  \e[1mFirst step: formatting the database organism\e[0m\n  \
  \  genome-blast -q query_organism -db db_organism -task formatdb\n\n      genome-blast\
  \ -q Escherichia_coli_GCF_000005845.2_ASM584v2 -db Bacillus_subtilis -task formatdb\n\
  \n    The query organism is simply ignore for this task.\n\n  \e[1mEven better:\
  \ formatting all database organisms for a given taxon\e[0m\n    If you want to blast\
  \ one or several query genomes against several\n    database genomes (which is usually\
  \ the case), a much more convenient way\n    to proceed is run the formatdb task\
  \ with the option -dbtaxon.\n\n    genome-blast -q query_organism -dbtaxon db_taxon\
  \ -task formatdb\n\n     genome-blast -q Escherichia_coli_GCF_000005845.2_ASM584v2\
  \ -dbtaxon Bacteria -task formatdb\n\n  \e[1mMatching a query genome against a single\
  \ database genome\e[0m\n    Each comparison has to be performed in both direction,\
  \ in order to\n    identify the reciprocal hits (used to infer orthology).\n\n \
  \    genome-blast -q organism_1 -db organism_2 -task blastall\n     genome-blast\
  \ -db organism_2 -db organism_1 -task blastall\n\n    Example: genome-blast -q Escherichia_coli_GCF_000005845.2_ASM584v2\
  \ -db\n    Bacillus_subtilis -task blastall genome-blast -db\n    Escherichia_coli_GCF_000005845.2_ASM584v2\
  \ -q Bacillus_subtilis -task\n    blastall\n\n    The formatdb step has to be done\
  \ before running blastall. Note that both\n    taks can be requested in a single\
  \ command, in which case formatdb is run\n    before blastall.\n\n     genome-blast\
  \ -q Escherichia_coli_GCF_000005845.2_ASM584v2 -db Bacillus_subtilis -task formatdb,blastall\n\
  \     genome-blast -db Escherichia_coli_GCF_000005845.2_ASM584v2 -q Bacillus_subtilis\
  \ -task formatdb,blastall\n\n  \e[1mMatching a query genome against all genomes\
  \ of a given taxon\e[0m\n     genome-blast -q query_organism -dbtaxon db_taxon -task\
  \ blastall\n     genome-blast -db query_organism -qtaxon db_taxon -task blastall\n\
  \n     genome-blast -q Escherichia_coli_GCF_000005845.2_ASM584v2 -dbtaxon Bacteria\
  \ -task blastall\n     genome-blast -db Escherichia_coli_GCF_000005845.2_ASM584v2\
  \ -qtaxon Bacteria -task blastall\n\n  \e[1mRunning taxon-wide comparisons on a\
  \ PC cluster\e[0m\n    Beware, each BLAST comparison can take several minutes. In\
  \ 2009, there\n    are more than 1000 available Bacterial genomes and this number\
  \ increases\n    exponentially with time. It is thus generally recommended to run\n\
  \    taxon-wide comparisons on a PC cluster, by using the option \e[33m-batch\e\
  [0m.\n\n     genome-blast -q Escherichia_coli_GCF_000005845.2_ASM584v2 -dbtaxon\
  \ Bacteria -task blastall -batch\n     genome-blast -db Escherichia_coli_GCF_000005845.2_ASM584v2\
  \ -qtaxon Bacteria -task blastall -batch\n\n  \e[1mMatching a taxon against another\
  \ taxon\e[0m\n    The options -dbtaxon and -qtaxon can be used to match all genomes\
  \ of a\n    given taxon (the query taxon) against all genomes of another taxon (the\n\
  \    database taxon).\n\n    Beware, with 1000 Bacterial genomes (available in the\
  \ beginning of\n    2009), an all-against-all comparison would represent 10^6 genome\n\
  \    comparisons.\n\n    Example: matching all Fungi against all Bacteria genome-blast\
  \ -qtaxon\n    Fungi -dbtaxon Bacteria -task blastall -batch genome-blast -qtaxon\n\
  \    bacteria -dbtaxon Fungi -task blastall -batch\n\n    Example: matching all\
  \ Fungi against all Fungi genome-blast -qtaxon Fungi\n    -dbtaxon Fungi -task blastall\
  \ -batch\n\n    In the latter case, there is no need to run the reciprocal blast,\
  \ since\n    the query yaxon is the same as the database taxon.\n\n\e[1mOPTIONS\e\
  [0m\n    \e[1m-v #\e[0m\n        Level of verbosity (detail in the warning messages\
  \ during execution)\n\n    \e[1m-h\e[0m  Display full help message\n\n    \e[1m-help\e\
  [0m\n        display options\n\n    \e[1m-q query_organism\e[0m\n        Name of\
  \ the query organism. This option can be used iteratively to\n        specify several\
  \ query organisms.\n\n    \e[1m-db db_organism\e[0m\n        Name of the db organism.\
  \ This option can be used iteratively to\n        specify several db organisms.\n\
  \n    \e[1m-qtaxon query_taxon\e[0m\n        Name of the query taxon. All the organisms\
  \ included in this taxon\n        will be used as QUERY organisms. This option can\
  \ be used iteratively\n        to specify several taxons.\n\n    \e[1m-dbtaxon db_taxon\e\
  [0m\n        Name of the db taxon. All the organisms included in this taxon will\n\
  \        be used as DB organisms. This option can be used iteratively to\n     \
  \   specify several taxons.\n\n    \e[1m-db_org_file\e[0m\n        File containing\
  \ a list of database organisms.\n\n    \e[1m-query_org_file\e[0m\n        File containing\
  \ a list of database organisms.\n\n    \e[1m-reciprocal\e[0m\n        Run blastall\
  \ in both direction, i.e. after having blasted query\n        organism against database\
  \ organism, blast database organism against\n        taxon organism. This option\
  \ is useless when dbtaxon == qtaxon.\n\n    \e[1m-diamond\e[0m\n        Use diamond\
  \ instead of formatdb and blastall.\n\n        genome-blast uses blastall by default.\
  \ This option makes it use\n        diamond blast which has a significant increase\
  \ in speed. Although,\n        slighly less sensitive.\n\n    \e[1m-threads\e[0m\n\
  \        Specifies the number of threads used for diamond blast. Uses 1 by\n   \
  \     default.\n\n    \e[1m-outdir output_directory\e[0m\n        Specify the ourput\
  \ directory.\n\n        By default, blast results are exported in the RSAT genome\
  \ directory\n        ($RSAT/public_html/data/genomes), but for this you need to\
  \ have\n        write access to that directory. If this is not the case, the output\n\
  \        can be redirected to another directory of your choice.\n\n    \e[1m-task\
  \ selected_task\e[0m\n        Select the tasks to be performed. Supported tasks:\n\
  \        formatdb,blastall,rank,cleandb,all.\n\n        This option can be used\
  \ iteratively on the same command line to\n        select multiple tasks.\n\n  \
  \      Example:\n\n        -task formatdb,blastall\n\n        For a full analysis,\
  \ simply type '-task all'\n\n    \e[1m-new_only\e[0m\n        Skip blastall if the\
  \ files already exist, even if they are old. By\n        default, blastall runs\
  \ and overwrites the old files, but for updates\n        this option is convenient\
  \ to run only the searches for the newly\n        installed organisms.\n\n    \e\
  [1m-no_self\e[0m\n        Avoid self-comparison. Note that self-comparison is required\
  \ for\n        get-orthologs, but this option alllows to run it twice when running\n\
  \        blast of an organism against a taxon in both directions. In this\n    \
  \    case, you use the option -no_self only when running the reciprocal\n      \
  \  blast.\n\n         genome-blast -v 1 -q my_org -dbtaxon my_taxon -task blastall\n\
  \         genome-blast -v 1 -db my_org -qtaxon my_taxon -task blastall -no_self\n\
  \n    \e[1m-skip_db_org X\e[0m\n        Skip the first X DB organisms.\n\n     \
  \   This is convenient to resume an interrupted list of genomes.\n\n    \e[1m-skip_query_org\
  \ X\e[0m\n        Skip the first X query organisms.\n\n        This is convenient\
  \ to resume an interrupted list of genomes.\n\n    \e[1m-n\e[0m  Dry run: echo the\
  \ tasks but do not execute them.\n\n    \e[1m-nodie\e[0m\n        Don't die on error.\n\
  \n    \e[1m-batch\e[0m\n        Run the tasks in batch. This option requires to\
  \ dispose of a PC\n        cluster, and to properly configure it in the configuration\
  \ file\n        $RSAT/RSAT_config.props.\n\n    \e[1m-batch batch_nb\e[0m\n    \
  \    If the first argument following the option \e[33m-batch\e[0m is a strictly\n\
  \        positive Natural number, jobs are posted to the cluster queue by\n    \
  \    groups of \e[33mbatch_nb\e[0m tasks (each job script regroups \e[33mbatch_nb\e\
  [0m tasks).\n\n    \e[1m-queue\e[0m\n        Cluster queue.\n\n        By default,\
  \ the cluster queue is specified in the configuration file\n        ($RSAT/RSAT_config.props).\
  \ However, since each BLAST task can take a\n        more or less long time depending\
  \ on the proteome sizes, it is\n        recommended to use a queue that supports\
  \ long time (e.g. 1h per job\n        or more).\n\n\e[1mSEE ALSO\e[0m\n    \e[1mget-orthologs\e\
  [0m\n        The program \e[33mget-orthologs\e[0m uses as input the BLAST similarity\
  \ tables\n        computed by genome-blast.\n\n\e[1mWISH LIST\e[0m\n"
generated_using:
- -h
docker_image:
