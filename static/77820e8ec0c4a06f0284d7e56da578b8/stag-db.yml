!Command
positional: []
named:
- !Flag
  description: This file will be used as the persistent index for storage/retrieval
  synonyms:
  - -i
  args: !SimpleFlagArg
    name: INDEXFILE
  optional: true
- !Flag
  description: "This is the name of the stag node (XML element) that will be stored\
    \ in the index; for example, with the XML below you may want to use the node name\
    \ \e[1mperson\e[0m and the unique key \e[1mid\e[0m <person_set> <person> <id>...</id>\
    \ </person> <person> <id>...</id> </person> ... </person_set> This flag should\
    \ only be used when you want to store data"
  synonyms:
  - -r
  args: !SimpleFlagArg
    name: RELATION-NAME
  optional: true
- !Flag
  description: This node will be used as the unique/primary key for the data This
    node should be nested directly below the node that is being stored in the index
    - if it is more that one below, specify a path This flag should only be used when
    you want to store data
  synonyms:
  - -k
  args: !SimpleFlagArg
    name: UNIQUE-KEY
  optional: true
- !Flag
  description: "Synonym for \e[1m-k\e[0m"
  synonyms:
  - -u
  args: !SimpleFlagArg
    name: UNIQUE-KEY
  optional: true
- !Flag
  description: This can be the name of a stag supported format (xml, sxpr, itext)
    - XML is assumed by default It can also be a module name - this module is used
    to parse the input file into a stag stream; see Data::Stag::BaseGenerator for
    details on writing your own parsers/event generators This flag should only be
    used when you want to store data
  synonyms:
  - -p
  args: !SimpleFlagArg
    name: PARSER
  optional: true
- !Flag
  description: Fetches the relation/node with unique key value equal to query-id Multiple
    arguments can be passed by specifying -q multple times This flag should only be
    used when you want to query data
  synonyms:
  - -q
  args: !SimpleFlagArg
    name: QUERY-ID
  optional: true
- !Flag
  description: "If this is specified in conjunction with \e[1m-q\e[0m or \e[1m-qf\e\
    [0m then all the query result nodes will be nested inside a node with this name\
    \ (ie this provides a root for the resulting document tree)"
  synonyms:
  - -top
  args: !SimpleFlagArg
    name: NODE-NAME
  optional: true
- !Flag
  description: This is a file of newline-seperated IDs; this is useful for querying
    the index in batch
  synonyms:
  - -qf
  args: !SimpleFlagArg
    name: QUERY-FILE
  optional: true
- !Flag
  description: This will write a list of all primary keys in the index
  synonyms:
  - -keys
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: This format will be used to write the data; can be any stag format
    (xml, sxpr, itext) - default XML. Can also be a module that catches the incoming
    stag event stream and does something with it (for example, this could be a module
    you write yourself that transforms the stag events into HTML)
  synonyms:
  - -w
  args: !SimpleFlagArg
    name: WRITER
  optional: true
command:
- stag-db.pl
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\e[1mNAME\e[0m\n    stag-db - persistent storage and retrieval for stag\
  \ data (xml, sxpr,\n    itext)\n\n\e[1mSYNOPSIS\e[0m\n      stag-db -r person -k\
  \ social_security_no -i ./person-idx myrecords.xml\n      stag-db -i ./person-idx\
  \ -q 999-9999-9999 -q 888-8888-8888\n\n\e[1mDESCRIPTION\e[0m\n    Builds a simple\
  \ file-based database for persistent storage and retrieval\n    of nodes from a\
  \ stag compatible document.\n\n    Imagine you have a very large file of data, in\
  \ a stag compatible format\n    such as XML. You want to index all the elements\
  \ of type \e[1mperson\e[0m; each\n    person can be uniquely identified by \e[1msocial_security_no\e\
  [0m, which is a direct\n    subnode of \e[1mperson\e[0m\n\n    The first thing to\
  \ do is to build an index file, which will be stored in\n    your current directory:\n\
  \n      stag-db -r person -k social_security_no -i ./person-idx myrecords.xml\n\n\
  \    You can then use the index \"person-idx\" to retrieve \e[1mperson\e[0m nodes\
  \ by their\n    social security number\n\n      stag-db -i ./person-idx -q 999-9999-9999\
  \ > some-person.xml\n\n    You can export using different stag formats\n\n     \
  \ stag-db -i ./person-idx -q 999-9999-9999 -w sxpr > some-person.xml\n\n    You\
  \ can retrieve multiple nodes (although these need to be rooted to make\n    a valid\
  \ file)\n\n      stag-db -i ./person-idx -q 999-9999-9999 -q 888-8888-8888 -top\
  \ personset\n\n    Or you can use a list of IDs from a file (newline delimited)\n\
  \n      stag-db -i ./person-idx -qf my_ss_nmbrs.txt -top personset\n\n  \e[1mARGUMENTS\e\
  [0m\n   -i INDEXFILE\n    This file will be used as the persistent index for storage/retrieval\n\
  \n   -r RELATION-NAME\n    This is the name of the stag node (XML element) that\
  \ will be stored in the\n    index; for example, with the XML below you may want\
  \ to use the node name\n    \e[1mperson\e[0m and the unique key \e[1mid\e[0m\n\n\
  \      <person_set>\n        <person>\n          <id>...</id>\n        </person>\n\
  \        <person>\n          <id>...</id>\n        </person>\n        ...\n    \
  \  </person_set>\n\n    This flag should only be used when you want to store data\n\
  \n   -k UNIQUE-KEY\n    This node will be used as the unique/primary key for the\
  \ data\n\n    This node should be nested directly below the node that is being stored\
  \ in\n    the index - if it is more that one below, specify a path\n\n    This flag\
  \ should only be used when you want to store data\n\n   -u UNIQUE-KEY\n    Synonym\
  \ for \e[1m-k\e[0m\n\n   -p PARSER\n    This can be the name of a stag supported\
  \ format (xml, sxpr, itext) - XML\n    is assumed by default\n\n    It can also\
  \ be a module name - this module is used to parse the input file\n    into a stag\
  \ stream; see Data::Stag::BaseGenerator for details on writing\n    your own parsers/event\
  \ generators\n\n    This flag should only be used when you want to store data\n\n\
  \   -q QUERY-ID\n    Fetches the relation/node with unique key value equal to query-id\n\
  \n    Multiple arguments can be passed by specifying -q multple times\n\n    This\
  \ flag should only be used when you want to query data\n\n   -top NODE-NAME\n  \
  \  If this is specified in conjunction with \e[1m-q\e[0m or \e[1m-qf\e[0m then all\
  \ the query\n    result nodes will be nested inside a node with this name (ie this\
  \ provides\n    a root for the resulting document tree)\n\n   -qf QUERY-FILE\n \
  \   This is a file of newline-seperated IDs; this is useful for querying the\n \
  \   index in batch\n\n   -keys\n    This will write a list of all primary keys in\
  \ the index\n\n   -w WRITER\n    This format will be used to write the data; can\
  \ be any stag format (xml,\n    sxpr, itext) - default XML.\n\n    Can also be a\
  \ module that catches the incoming stag event stream and does\n    something with\
  \ it (for example, this could be a module you write yourself\n    that transforms\
  \ the stag events into HTML)\n\n\e[1mSEE ALSO\e[0m\n    Data::Stag\n\n    For more\
  \ complex stag to database mapping, see DBIx::DBStag and the\n    scripts\n\n  \
  \  stag-storenode\n\n    selectall_xml\n\n"
generated_using:
- --help
