from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Unittest_Lv_V0_1_0 = CommandToolBuilder(tool="UnitTest_LV", base_command=["UnitTest_LV"], inputs=[ToolInput(tag="in_list_tests", input_type=Boolean(optional=True), prefix="--list-tests", doc=InputDocumentation(doc="list all/matching test cases")), ToolInput(tag="in_list_tags", input_type=Boolean(optional=True), prefix="--list-tags", doc=InputDocumentation(doc="list all/matching tags")), ToolInput(tag="in_success", input_type=Boolean(optional=True), prefix="--success", doc=InputDocumentation(doc="include successful tests in output")), ToolInput(tag="in_break", input_type=Boolean(optional=True), prefix="--break", doc=InputDocumentation(doc="break into debugger on failure")), ToolInput(tag="in_no_throw", input_type=Boolean(optional=True), prefix="--nothrow", doc=InputDocumentation(doc="skip exception tests")), ToolInput(tag="in_invisibles", input_type=Boolean(optional=True), prefix="--invisibles", doc=InputDocumentation(doc="show invisibles (tabs, newlines)")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="output filename")), ToolInput(tag="in_reporter", input_type=String(optional=True), prefix="--reporter", doc=InputDocumentation(doc="reporter to use (defaults to console)")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="--name", doc=InputDocumentation(doc="suite name")), ToolInput(tag="in_abort", input_type=Boolean(optional=True), prefix="--abort", doc=InputDocumentation(doc="abort at first failure")), ToolInput(tag="in_abort_x", input_type=String(optional=True), prefix="--abortx", doc=InputDocumentation(doc="abort after x failures")), ToolInput(tag="in_warn", input_type=String(optional=True), prefix="--warn", doc=InputDocumentation(doc="enable warnings")), ToolInput(tag="in_durations", input_type=String(optional=True), prefix="--durations", doc=InputDocumentation(doc="show test durations")), ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--input-file", doc=InputDocumentation(doc="load test names to run from a file")), ToolInput(tag="in_list_test_names_only", input_type=Boolean(optional=True), prefix="--list-test-names-only", doc=InputDocumentation(doc="list all/matching test cases names only")), ToolInput(tag="in_list_reporters", input_type=Boolean(optional=True), prefix="--list-reporters", doc=InputDocumentation(doc="list all reporters")), ToolInput(tag="in_order", input_type=String(optional=True), prefix="--order", doc=InputDocumentation(doc="test case order (defaults to decl)")), ToolInput(tag="in_rng_seed", input_type=Boolean(optional=True), prefix="--rng-seed", doc=InputDocumentation(doc="<'time'|number>   set a specific seed for random numbers")), ToolInput(tag="in_force_colour", input_type=Boolean(optional=True), prefix="--force-colour", doc=InputDocumentation(doc="force colourised output"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="output filename"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Unittest_Lv_V0_1_0().translate("wdl", allow_empty_container=True)

