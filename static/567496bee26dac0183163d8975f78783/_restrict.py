from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

_Restrict_V0_1_0 = CommandToolBuilder(tool="_restrict", base_command=["_restrict"], inputs=[ToolInput(tag="in_site_len", input_type=Boolean(optional=True), prefix="-sitelen", doc=InputDocumentation(doc="integer    [4] This sets the minimum length of the\nrestriction enzyme recognition site. Any\nenzymes with sites shorter than this will be\nignored. (Integer from 2 to 20)")), ToolInput(tag="in_enzymes", input_type=Boolean(optional=True), prefix="-enzymes", doc=InputDocumentation(doc="string     [all] The name 'all' reads in all enzyme\nnames from the REBASE database. You can\nspecify enzymes by giving their names with\ncommas between then, such as:\n'HincII,hinfI,ppiI,hindiii'.\nThe case of the names is not important. You\ncan specify a file of enzyme names to read\nin by giving the name of the file holding\nthe enzyme names with a '@' character in\nfront of it, for example, '@enz.list'.\nBlank lines and lines starting with a hash\ncharacter or '!' are ignored and all other\nlines are concatenated together with a comma\ncharacter ',' and then treated as the list\nof enzymes to search for.\nAn example of a file of enzyme names is:\n! my enzymes\nHincII, ppiII\n! other enzymes\nhindiii\nHinfI\nPpiI (Any string)")), ToolInput(tag="in_data_file", input_type=Boolean(optional=True), prefix="-datafile", doc=InputDocumentation(doc="datafile   Restriction enzyme data file (optional)")), ToolInput(tag="in_m_file", input_type=Boolean(optional=True), prefix="-mfile", doc=InputDocumentation(doc="datafile   [Emethylsites.dat] Restriction enzyme\nmethylation data file")), ToolInput(tag="in_min", input_type=Boolean(optional=True), prefix="-min", doc=InputDocumentation(doc="integer    [1] This sets the minimum number of cuts for\nany restriction enzyme that will be\nconsidered. Any enzymes that cut fewer times\nthan this will be ignored. (Integer from 1\nto 1000)")), ToolInput(tag="in_max", input_type=Boolean(optional=True), prefix="-max", doc=InputDocumentation(doc="integer    [2000000000] This sets the maximum number of\ncuts for any restriction enzyme that will\nbe considered. Any enzymes that cut more\ntimes than this will be ignored. (Any\ninteger value)")), ToolInput(tag="in_solo_fragment", input_type=Boolean(optional=True), prefix="-solofragment", doc=InputDocumentation(doc="boolean    [N] This gives the fragment lengths of the\nforward sense strand produced by complete\nrestriction by each restriction enzyme on\nits own. Results are added to the tail\nsection of the report.")), ToolInput(tag="in_single", input_type=Boolean(optional=True), prefix="-single", doc=InputDocumentation(doc="boolean    [N] If this is set then this forces the\nvalues of the mincuts and maxcuts qualifiers\nto both be 1. Any other value you may have\nset them to will be ignored.")), ToolInput(tag="in_plasmid", input_type=Boolean(optional=True), prefix="-plasmid", doc=InputDocumentation(doc="boolean    [N] If this is set then this allows searches\nfor restriction enzyme recognition site and\ncut positions that span the end of the\nsequence to be considered.")), ToolInput(tag="in_methylation", input_type=Boolean(optional=True), prefix="-methylation", doc=InputDocumentation(doc="boolean    [N] If this is set then RE recognition sites\nwill not match methylated bases.")), ToolInput(tag="in_fragments", input_type=Boolean(optional=True), prefix="-fragments", doc=InputDocumentation(doc="boolean    [N] This gives the fragment lengths of the\nforward sense strand produced by complete\nrestriction using all of the input enzymes\ntogether. Results are added to the tail\nsection of the report.")), ToolInput(tag="in_considered_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-[no]ambiguity      boolean    [Y] This allows those enzymes which have one")), ToolInput(tag="in_the_mdot", input_type=String(), position=0, doc=InputDocumentation(doc="-alphabetic         boolean    [N] Sort output alphabetically"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    _Restrict_V0_1_0().translate("wdl", allow_empty_container=True)

