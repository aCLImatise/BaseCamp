from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Boolean, String

Runbydirectory_V0_1_0 = CommandToolBuilder(tool="runByDirectory", base_command=["runByDirectory"], inputs=[ToolInput(tag="in_num_threads", input_type=Int(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="Number of threads (1)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file with sequence and read placement (output.txt)")), ToolInput(tag="in_error_out", input_type=File(optional=True), prefix="--error-out", doc=InputDocumentation(doc="Output file with directories that failed (err_dirs.txt)")), ToolInput(tag="in_keep_directories", input_type=Boolean(optional=True), prefix="--keep-directories", doc=InputDocumentation(doc="Keep the individual gap directories (false)")), ToolInput(tag="in_jumping_read_joining_run", input_type=Boolean(optional=True), prefix="--jumping-read-joining-run", doc=InputDocumentation(doc="This is a run to find short reversed jumping read inserts (false)")), ToolInput(tag="in_celera_terminator_directory", input_type=File(optional=True), prefix="--Celera-terminator-directory", doc=InputDocumentation(doc="*The location of the terminator directory for the Celera run")), ToolInput(tag="in_max_nodes", input_type=Int(optional=True), prefix="--max-nodes", doc=InputDocumentation(doc="Max nodes to use when closing gaps locally (200000)")), ToolInput(tag="in_min_km_er_len", input_type=Int(optional=True), prefix="--min-kmer-len", doc=InputDocumentation(doc="Minimum k-mer length used when closing gaps locally (17)")), ToolInput(tag="in_max_km_er_len", input_type=Int(optional=True), prefix="--max-kmer-len", doc=InputDocumentation(doc="Maximum k-mer length used when closing gaps locally (65)")), ToolInput(tag="in_mean_for_faux_inserts", input_type=Int(optional=True), prefix="--mean-for-faux-inserts", doc=InputDocumentation(doc="Mean specified when joining the ends of the contigs (500)")), ToolInput(tag="in_join_aggressive", input_type=Int(optional=True), prefix="--join-aggressive", doc=InputDocumentation(doc="If set to 1 calls the pair joined if there is any path (as opposed to a unique path) (0)")), ToolInput(tag="in_stdev_for_faux_inserts", input_type=Int(optional=True), prefix="--stdev-for-faux-inserts", doc=InputDocumentation(doc="Standard deviation specified when joining the ends of the contigs (200)")), ToolInput(tag="in_num_stdev_s_allowed", input_type=Int(optional=True), prefix="--num-stdevs-allowed", doc=InputDocumentation(doc="Number of standard deviations the join length can be from the mean when trying to join a mate pair. (5)")), ToolInput(tag="in_mean_and_stdev_file", input_type=File(optional=True), prefix="--mean-and-stdev-file", doc=InputDocumentation(doc="File with means and standard deviations for each gap")), ToolInput(tag="in_output_dir", input_type=File(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="The subdirectory to put the individual gaps into (.)")), ToolInput(tag="in_contig_end_sequence_file", input_type=File(optional=True), prefix="--contig-end-sequence-file", doc=InputDocumentation(doc="*Name of the file containing the contig end sequences for joining")), ToolInput(tag="in_num_joins_per_directory", input_type=Int(optional=True), prefix="--num-joins-per-directory", doc=InputDocumentation(doc="Number of joins put in each directory (1)")), ToolInput(tag="in_skip_gaps", input_type=Int(optional=True), prefix="--skip-gaps", doc=InputDocumentation(doc="Number of gaps to skip -- useful for restarting (0)")), ToolInput(tag="in_dir_for_read_sequences", input_type=File(optional=True), prefix="--dir-for-read-sequences", doc=InputDocumentation(doc="*Name of dir where readFile.### exist; should be absolute")), ToolInput(tag="in_cmdline_parse", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file with sequence and read placement (output.txt)")), ToolOutput(tag="out_error_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_error_out", type_hint=File()), doc=OutputDocumentation(doc="Output file with directories that failed (err_dirs.txt)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Runbydirectory_V0_1_0().translate("wdl", allow_empty_container=True)

