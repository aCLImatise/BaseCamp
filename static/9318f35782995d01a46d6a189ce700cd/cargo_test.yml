!Command
command:
- cargo
- test
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - --lib
  description: Test only this package's library
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --doc
  description: Test only this library's documentation
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --bin
  description: Test only the specified binary
  args: !SimpleFlagArg
    name: NAME
- !Flag
  optional: true
  synonyms:
  - --example
  description: Test only the specified example
  args: !SimpleFlagArg
    name: NAME
- !Flag
  optional: true
  synonyms:
  - --test
  description: Test only the specified integration test target
  args: !SimpleFlagArg
    name: NAME
- !Flag
  optional: true
  synonyms:
  - --bench
  description: Test only the specified benchmark target
  args: !SimpleFlagArg
    name: NAME
- !Flag
  optional: true
  synonyms:
  - --no-run
  description: Compile, but don't run tests
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  - --package
  description: to run tests for
  args: !SimpleFlagArg
    name: SPEC
- !Flag
  optional: true
  synonyms:
  - -j
  - --jobs
  description: 'Number of parallel jobs, defaults to # of CPUs'
  args: !SimpleFlagArg
    name: N
- !Flag
  optional: true
  synonyms:
  - --release
  description: Build artifacts in release mode, with optimizations
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --features
  description: Space-separated list of features to also build
  args: !SimpleFlagArg
    name: FEATURES
- !Flag
  optional: true
  synonyms:
  - --all-features
  description: Build all available features
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --no-default-features
  description: Do not build the `default` feature
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --target
  description: Build for the target triple
  args: !SimpleFlagArg
    name: TRIPLE
- !Flag
  optional: true
  synonyms:
  - --manifest-path
  description: Path to the manifest to build tests for
  args: !SimpleFlagArg
    name: PATH
- !Flag
  optional: true
  synonyms:
  - -v
  - --verbose
  description: '...            Use verbose output'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -q
  - --quiet
  description: No output printed to stdout
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --color
  description: 'Coloring: auto, always, never'
  args: !SimpleFlagArg
    name: WHEN
- !Flag
  optional: true
  synonyms:
  - --message-format
  description: 'Error format: human, json [default: human]'
  args: !SimpleFlagArg
    name: FMT
- !Flag
  optional: true
  synonyms:
  - --no-fail-fast
  description: Run all tests regardless of failure
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --frozen
  description: Require Cargo.lock and cache are up to date
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --locked
  description: Require Cargo.lock is up to date
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: Print this message
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "Execute all unit and integration tests of a local package\n\nUsage:\n\
  \    cargo test [options] [--] [<args>...]\n\nOptions:\n    -h, --help         \
  \          Print this message\n    --lib                        Test only this package's\
  \ library\n    --doc                        Test only this library's documentation\n\
  \    --bin NAME                   Test only the specified binary\n    --example\
  \ NAME               Test only the specified example\n    --test NAME          \
  \        Test only the specified integration test target\n    --bench NAME     \
  \            Test only the specified benchmark target\n    --no-run            \
  \         Compile, but don't run tests\n    -p SPEC, --package SPEC ...  Package\
  \ to run tests for\n    -j N, --jobs N               Number of parallel jobs, defaults\
  \ to # of CPUs\n    --release                    Build artifacts in release mode,\
  \ with optimizations\n    --features FEATURES          Space-separated list of features\
  \ to also build\n    --all-features               Build all available features\n\
  \    --no-default-features        Do not build the `default` feature\n    --target\
  \ TRIPLE              Build for the target triple\n    --manifest-path PATH    \
  \     Path to the manifest to build tests for\n    -v, --verbose ...           \
  \ Use verbose output\n    -q, --quiet                  No output printed to stdout\n\
  \    --color WHEN                 Coloring: auto, always, never\n    --message-format\
  \ FMT         Error format: human, json [default: human]\n    --no-fail-fast   \
  \            Run all tests regardless of failure\n    --frozen                 \
  \    Require Cargo.lock and cache are up to date\n    --locked                 \
  \    Require Cargo.lock is up to date\n\nAll of the trailing arguments are passed\
  \ to the test binaries generated for\nfiltering tests and generally providing options\
  \ configuring how they run. For\nexample, this will run all tests with the name\
  \ `foo` in their name:\n\n    cargo test foo\n\nIf the --package argument is given,\
  \ then SPEC is a package id specification\nwhich indicates which package should\
  \ be tested. If it is not given, then the\ncurrent package is tested. For more information\
  \ on SPEC and its format, see the\n`cargo help pkgid` command.\n\nThe --jobs argument\
  \ affects the building of the test executable but does\nnot affect how many jobs\
  \ are used when running the tests.\n\nCompilation can be configured via the `test`\
  \ profile in the manifest.\n\nBy default the rust test harness hides output from\
  \ test execution to\nkeep results readable. Test output can be recovered (e.g. for\
  \ debugging)\nby passing `--nocapture` to the test binaries:\n\n  cargo test --\
  \ --nocapture\n\nTo get the list of all options available for the test binaries\
  \ use this:\n\n  cargo test -- --help\n"
generated_using:
- --help
docker_image:
