from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Openpepxl_V0_1_0 = CommandToolBuilder(tool="OpenPepXL", base_command=["OpenPepXL"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*                                    Input file containing the spectra. (valid formats: 'mzML')")), ToolInput(tag="in_consensus", input_type=File(optional=True), prefix="-consensus", doc=InputDocumentation(doc="*                             Input file containing the linked mass peaks. (valid formats: 'consensusXML')")), ToolInput(tag="in_database", input_type=File(optional=True), prefix="-database", doc=InputDocumentation(doc="*                              Input file containing the protein database. (valid formats: 'fasta')")), ToolInput(tag="in_decoy_string", input_type=String(optional=True), prefix="-decoy_string", doc=InputDocumentation(doc="String that was appended (or prefixed - see 'prefix' flag below) to the accessions in the protein database to indicate decoy proteins. (default: 'decoy')")), ToolInput(tag="in_decoy_prefix", input_type=Boolean(optional=True), prefix="-decoy_prefix", doc=InputDocumentation(doc="Set flag, if the decoy_string is a prefix of accessions in the protein database. Otherwise it is a suffix.")), ToolInput(tag="in_algorithm", input_type=Boolean(optional=True), prefix="-algorithm", doc=InputDocumentation(doc=":number_top_hits <num>               Number of top hits reported for each spectrum pair (default: '5')")), ToolInput(tag="in_out_x_quest_xml", input_type=File(optional=True), prefix="-out_xquestxml", doc=InputDocumentation(doc="Results in the xquest.xml format (at least one of these output parameters should be set, otherwise you will not have any results). (valid formats: 'xml', 'xquest.xml')")), ToolInput(tag="in_out_x_quest_spec_xml", input_type=File(optional=True), prefix="-out_xquest_specxml", doc=InputDocumentation(doc="Matched spectra in the xQuest .spec.xml format for spectra visualization in the xQuest results manager. (valid formats: 'xml', 'spec.xml')")), ToolInput(tag="in_out_idxml", input_type=File(optional=True), prefix="-out_idXML", doc=InputDocumentation(doc="Results in idXML format (at least one of these output parameters should be set, otherwise you will not have any results) (valid formats: 'idXML')")), ToolInput(tag="in_out_mz_ident_ml", input_type=File(optional=True), prefix="-out_mzIdentML", doc=InputDocumentation(doc="Results in mzIdentML (.mzid) format (at least one of these output parameters should be set, otherwise you will not have any results) (valid formats: 'mzid')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Openpepxl_V0_1_0().translate("wdl", allow_empty_container=True)

