from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, String, Int

Run_Genome_Evaluations_Py_V0_1_0 = CommandToolBuilder(tool="run_genome_evaluations.py", base_command=["run_genome_evaluations.py"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print information during execution -- useful for\ndebugging [default: False]")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="the output directory [default: <input_dir>]")), ToolInput(tag="in_parallel_method", input_type=String(optional=True), prefix="--parallel_method", doc=InputDocumentation(doc="Method for parallelization. Valid choices are: sge,\ntorque, multithreaded [default: multithreaded]")), ToolInput(tag="in_prediction_method", input_type=String(optional=True), prefix="--prediction_method", doc=InputDocumentation(doc="Method for trait prediction.  See predict_traits.py\nfor full documentation. Valid choices are:\nasr_and_weighting, nearest_neighbor, random_neighbor\n[default: asr_and_weighting]")), ToolInput(tag="in_with_confidence", input_type=Boolean(optional=True), prefix="--with_confidence", doc=InputDocumentation(doc="If set, calculate confidence intervals with ace_ml or\nace_reml, and use confidence intervals in trait\nprediction")), ToolInput(tag="in_with_accuracy", input_type=Boolean(optional=True), prefix="--with_accuracy", doc=InputDocumentation(doc="If set, calculate accuracy using the NSTI (nearest\nsequenced taxon index) during trait prediction")), ToolInput(tag="in_asr_method", input_type=String(optional=True), prefix="--asr_method", doc=InputDocumentation(doc="Method for ancestral_state_reconstruction.  See\nancestral_state_reconstruction.py for full\ndocumentation. Valid choices are: ace_ml, ace_reml,\nace_pic, wagner [default: wagner]")), ToolInput(tag="in_weighting_method", input_type=String(optional=True), prefix="--weighting_method", doc=InputDocumentation(doc="Method for weighting during trait prediction.  See\npredict_traits.py for full documentation. Valid\nchoices are: linear, exponential, equal [default:\nexponential]")), ToolInput(tag="in_num_jobs", input_type=Int(optional=True), prefix="--num_jobs", doc=InputDocumentation(doc="Number of jobs to be submitted. [default: 100]")), ToolInput(tag="in_tmp_dir", input_type=String(optional=True), prefix="--tmp-dir", doc=InputDocumentation(doc="location to store intermediate files [default:\n<output_dir>]")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="run all jobs even if output files exist [default:\nFalse]")), ToolInput(tag="in_check_for_null_files", input_type=Boolean(optional=True), prefix="--check_for_null_files", doc=InputDocumentation(doc="check if pre-existing output files have null files. If\nso remove them and re-run. [default: False]")), ToolInput(tag="in_input_dir", input_type=Directory(optional=True), prefix="--input_dir", doc=InputDocumentation(doc="directory containing one or more test datasets\n[REQUIRED]")), ToolInput(tag="in_ref_tree", input_type=String(optional=True), prefix="--ref_tree", doc=InputDocumentation(doc="reference tree that was used with make_test_datasets\n[REQUIRED]\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Run_Genome_Evaluations_Py_V0_1_0().translate("wdl", allow_empty_container=True)

