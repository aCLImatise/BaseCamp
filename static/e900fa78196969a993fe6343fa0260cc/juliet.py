from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Juliet_V0_1_0 = CommandToolBuilder(tool="juliet", base_command=["juliet"], inputs=[ToolInput(tag="in_config", input_type=Boolean(optional=True), prefix="--config", doc=InputDocumentation(doc="Defines genes of interest within the reference for reporting purposes. Enter either 1) the predefined target config 'HIV_HXB2' or a custom target config through either 2a) the path to the target config JSON file or 2b) the JSON string.")), ToolInput(tag="in_mode_phasing", input_type=Boolean(optional=True), prefix="--mode-phasing", doc=InputDocumentation(doc="Phase variants and cluster haplotypes.")), ToolInput(tag="in_region", input_type=Boolean(optional=True), prefix="--region", doc=InputDocumentation(doc="Clip reads to this genomic region. Empty means all reads.")), ToolInput(tag="in_drm_only", input_type=Boolean(optional=True), prefix="--drm-only", doc=InputDocumentation(doc="Only report variants that confer drug resistance, as listed in the target configuration file.")), ToolInput(tag="in_min_perc", input_type=Boolean(optional=True), prefix="--min-perc", doc=InputDocumentation(doc="Report only variants whose percentage of the total population exceeds this value. Increasing it helps to remove PCR noise. [0.1]")), ToolInput(tag="in_max_perc", input_type=Boolean(optional=True), prefix="--max-perc", doc=InputDocumentation(doc="Report only variants whose percentage of the total population is less than this value. Lowering it helps to phase low frequency variants when the highest-frequency variant is different from the reference. [100]")), ToolInput(tag="in_sub", input_type=Boolean(optional=True), prefix="--sub", doc=InputDocumentation(doc="Substitution Rate, specify to override the learned rate. [0]")), ToolInput(tag="in_del", input_type=Boolean(optional=True), prefix="--del", doc=InputDocumentation(doc="Deletion Rate, specify to override the learned rate. [0]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Debug returns all amino acids, irrelevant of their significance.")), ToolInput(tag="in_emit_tool_contract", input_type=Boolean(optional=True), prefix="--emit-tool-contract", doc=InputDocumentation(doc="Emit tool contract.")), ToolInput(tag="in_resolved_tool_contract", input_type=Boolean(optional=True), prefix="--resolved-tool-contract", doc=InputDocumentation(doc="Use args from resolved tool contract.")), ToolInput(tag="in_source", input_type=String(), position=0, doc=InputDocumentation(doc="Source BAM or DataSet XML file."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Juliet_V0_1_0().translate("wdl", allow_empty_container=True)

