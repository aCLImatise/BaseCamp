from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String

Reseq_Seqtoillumina_V0_1_0 = CommandToolBuilder(tool="reseq_seqToIllumina", base_command=["reseq", "seqToIllumina"], inputs=[ToolInput(tag="in_arg_number_threads", input_type=Boolean(optional=True), prefix="-j", doc=InputDocumentation(doc="[ --threads ] arg (=0)      Number of threads used (0=auto)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="(=4)           Sets the level of verbosity (4=everything,\n0=nothing)")), ToolInput(tag="in_error_mutli_plier", input_type=Int(optional=True), prefix="--errorMutliplier", doc=InputDocumentation(doc="(=1)     Divides the original probability of correct\nbase calls(no substitution error) by this\nvalue and renormalizes")), ToolInput(tag="in_arg_input_file", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --input ] arg             Input file (fasta format, gz and bz2\nsupported) [stdin]")), ToolInput(tag="in_ipf_iterations", input_type=Int(optional=True), prefix="--ipfIterations", doc=InputDocumentation(doc="(=200)     Maximum number of iterations for iterative\nproportional fitting")), ToolInput(tag="in_ipf_precision", input_type=Int(optional=True), prefix="--ipfPrecision", doc=InputDocumentation(doc="(=5)        Iterative proportional fitting procedure stops\nafter reaching this precision (%)")), ToolInput(tag="in_no_indel_errors", input_type=Boolean(optional=True), prefix="--noInDelErrors", doc=InputDocumentation(doc="Simulate reads without InDel errors")), ToolInput(tag="in_no_substitution_errors", input_type=Boolean(optional=True), prefix="--noSubstitutionErrors", doc=InputDocumentation(doc="Simulate reads without substitution errors")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output ] arg            Output file (fastq format, gz and bz2\nsupported) [stdout]")), ToolInput(tag="in_arg_loads_last", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --probabilitiesIn ] arg   Loads last estimated probabilities and\ncontinues from there if precision is not met\n[<statsIn>.ipf]")), ToolInput(tag="in_arg_stores_probabilities", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc="[ --probabilitiesOut ] arg  Stores the probabilities estimated by\niterative proportional fitting\n[<probabilitiesIn>]")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="Seed used for simulation, if none is given\nrandom seed will be used")), ToolInput(tag="in_arg_profile_file", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --statsIn ] arg           Profile file that contains the statistics used\nfor simulation\n"))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output ] arg            Output file (fastq format, gz and bz2\nsupported) [stdout]"))], container="quay.io/biocontainers/reseq:1.1--py38h56fca86_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Reseq_Seqtoillumina_V0_1_0().translate("wdl")

