from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int

Bunwarpj_V0_1_0 = CommandToolBuilder(tool="bunwarpj", base_command=["bunwarpj"], inputs=[ToolInput(tag="in_align", input_type=Boolean(optional=True), prefix="-align", doc=InputDocumentation(doc=": ALIGN TWO IMAGES")), ToolInput(tag="in_elastic_transform", input_type=Boolean(optional=True), prefix="-elastic_transform", doc=InputDocumentation(doc=": TRANSFORM A SOURCE IMAGE WITH A GIVEN ELASTIC DEFORMATION")), ToolInput(tag="in_raw_transform", input_type=Boolean(optional=True), prefix="-raw_transform", doc=InputDocumentation(doc=": TRANSFORM A SOURCE IMAGE WITH A GIVEN RAW DEFORMATION")), ToolInput(tag="in_compare_elastic", input_type=Boolean(optional=True), prefix="-compare_elastic", doc=InputDocumentation(doc=": COMPARE 2 OPPOSITE ELASTIC DEFORMATIONS (BY WARPING INDEX)")), ToolInput(tag="in_compare_elastic_raw", input_type=Boolean(optional=True), prefix="-compare_elastic_raw", doc=InputDocumentation(doc=": COMPARE AN ELASTIC DEFORMATION WITH A RAW DEFORMATION (BY WARPING INDEX)")), ToolInput(tag="in_compare_raw", input_type=Boolean(optional=True), prefix="-compare_raw", doc=InputDocumentation(doc=": COMPARE 2 ELASTIC DEFORMATIONS (BY WARPING INDEX)")), ToolInput(tag="in_convert_to_raw", input_type=Boolean(optional=True), prefix="-convert_to_raw", doc=InputDocumentation(doc=": CONVERT AN ELASTIC DEFORMATION INTO RAW FORMAT")), ToolInput(tag="in_compose_elastic", input_type=Boolean(optional=True), prefix="-compose_elastic", doc=InputDocumentation(doc=": COMPOSE TWO ELASTIC DEFORMATIONS")), ToolInput(tag="in_compose_raw", input_type=Boolean(optional=True), prefix="-compose_raw", doc=InputDocumentation(doc=": COMPOSE TWO RAW DEFORMATIONS")), ToolInput(tag="in_compose_raw_elastic", input_type=Boolean(optional=True), prefix="-compose_raw_elastic", doc=InputDocumentation(doc=": COMPOSE A RAW DEFORMATION WITH AN ELASTIC DEFORMATION")), ToolInput(tag="in_adapt_transform", input_type=Boolean(optional=True), prefix="-adapt_transform", doc=InputDocumentation(doc=": ADAPT AN ELASTIC DEFORMATION GIVEN A NEW IMAGE SIZE")), ToolInput(tag="in_bun_war_pj", input_type=String(), position=0, doc=InputDocumentation(doc="-help                       : SHOW THIS MESSAGE")), ToolInput(tag="in_var_12", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_target_mask", input_type=String(), position=2, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_14", input_type=String(), position=3, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_source_mask", input_type=String(), position=4, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_min_scale_def", input_type=String(), position=5, doc=InputDocumentation(doc=": Scale of the coarsest deformation\n0 is the coarsest possible")), ToolInput(tag="in_max_scale_def", input_type=String(), position=6, doc=InputDocumentation(doc=": Scale of the finest deformation")), ToolInput(tag="in_max_subs_amp_fact", input_type=String(), position=7, doc=InputDocumentation(doc=": Maximum subsampling factor (power of 2: [0, 1, 2 ... 7]")), ToolInput(tag="in_div_weight", input_type=String(), position=8, doc=InputDocumentation(doc=": Weight of the divergence term")), ToolInput(tag="in_curl_weight", input_type=String(), position=9, doc=InputDocumentation(doc=": Weight of the curl term")), ToolInput(tag="in_image_weight", input_type=String(), position=10, doc=InputDocumentation(doc=": Weight of the image term")), ToolInput(tag="in_consistency_weight", input_type=String(), position=11, doc=InputDocumentation(doc=": Weight of the deformation consistency")), ToolInput(tag="in_landmark_weight", input_type=String(), position=0, doc=InputDocumentation(doc=": Weight of the landmarks")), ToolInput(tag="in_landmark_file", input_type=String(), position=1, doc=InputDocumentation(doc=": Landmark file")), ToolInput(tag="in_affine_file_one", input_type=Int(), position=0, doc=InputDocumentation(doc=": Initial source affine matrix transformation")), ToolInput(tag="in_affine_file_two", input_type=Int(), position=1, doc=InputDocumentation(doc=": Initial target affine matrix transformation")), ToolInput(tag="in_var_27", input_type=String(), position=0, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_28", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_29", input_type=String(), position=0, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_30", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_31", input_type=String(), position=0, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_32", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_33", input_type=String(), position=0, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_34", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_35", input_type=String(), position=0, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_36", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_37", input_type=String(), position=0, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_38", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_39", input_type=String(), position=0, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_40", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_41", input_type=String(), position=0, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_42", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_43", input_type=String(), position=0, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_44", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_45", input_type=String(), position=0, doc=InputDocumentation(doc=": In any image format")), ToolInput(tag="in_var_46", input_type=String(), position=1, doc=InputDocumentation(doc=": In any image format"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bunwarpj_V0_1_0().translate("wdl", allow_empty_container=True)

