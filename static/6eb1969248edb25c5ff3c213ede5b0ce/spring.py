from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Spring_V0_1_0 = CommandToolBuilder(tool="spring", base_command=["spring"], inputs=[ToolInput(tag="in__compress", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --compress ]               compress")), ToolInput(tag="in__decompress", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --decompress ]             decompress")), ToolInput(tag="in_decompress_range", input_type=File(optional=True), prefix="--decompress-range", doc=InputDocumentation(doc="end\n(optional) decompress only reads (or read\npairs for PE datasets) from start to end\n(both inclusive) (1 <= start <= end <=\nnum_reads (or num_read_pairs for PE)). If -r\nwas specified during compression, the range\nof reads does not correspond to the original\norder of reads in the FASTQ file.")), ToolInput(tag="in_arg_input_file", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --input-file ] arg         input file name (two files for paired end)")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output-file ] arg        output file name (for paired end\ndecompression, if only one file is specified,\ntwo output files will be created by suffixing\n.1 and .2.)")), ToolInput(tag="in_arg_directory_create", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[ --working-dir ] arg (=.)   directory to create temporary files (default\ncurrent directory)")), ToolInput(tag="in_arg_number_threads", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --num-threads ] arg (=8)   number of threads (default 8)")), ToolInput(tag="in_retain_read_order", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --allow-read-reordering ]  do not retain read order during compression\n(paired reads still remain paired)")), ToolInput(tag="in_no_quality", input_type=Boolean(optional=True), prefix="--no-quality", doc=InputDocumentation(doc="do not retain quality values during")), ToolInput(tag="in_use_compression_arbitrarily", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --long ]                   Use for compression of arbitrarily long read\nlengths. Can also provide better compression\nfor reads with significant number of indels.\n-r disabled in this mode. For Illumina short\nreads, compression is better without -l flag.")), ToolInput(tag="in_enable_input_gzipped", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --gzipped-fastq ]          enable if compression input is gzipped fastq\nor to output gzipped fastq during\ndecompression")), ToolInput(tag="in_fast_a_input", input_type=Boolean(optional=True), prefix="--fasta-input", doc=InputDocumentation(doc="enable if compression input is fasta file\n(i.e., no qualities)\n"))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output-file ] arg        output file name (for paired end\ndecompression, if only one file is specified,\ntwo output files will be created by suffixing\n.1 and .2.)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Spring_V0_1_0().translate("wdl", allow_empty_container=True)

