from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, Int, String

Create_Clone_V0_1_0 = CommandToolBuilder(tool="create_clone", base_command=["create_clone"], inputs=[ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Print debug information (very verbose) to file /create_clone.log")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Add additional context (time and file) to log messages")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="--silent", doc=InputDocumentation(doc="Print only warnings and error messages")), ToolInput(tag="in_case", input_type=Directory(optional=True), prefix="--case", doc=InputDocumentation(doc="(required) Specify a new case name. If not a full pathname,\nthe new case will be created under then current working directory.")), ToolInput(tag="in_clone", input_type=Directory(optional=True), prefix="--clone", doc=InputDocumentation(doc="(required) Specify a case to be cloned. If not a full pathname,\nthe case to be cloned is assumed to be under then current working directory.")), ToolInput(tag="in_ensemble", input_type=Int(optional=True), prefix="--ensemble", doc=InputDocumentation(doc="clone an ensemble of cases, the case name argument must end in an integer.\nfor example: ./create_clone --clone case.template --case case.001 --ensemble 4\nwill create case.001, case.002, case.003, case.004 from existing case.template")), ToolInput(tag="in_user_mods_dir", input_type=Directory(optional=True), prefix="--user-mods-dir", doc=InputDocumentation(doc="Full pathname to a directory containing any combination of user_nl_* files\nand shell_commands script (typically containing xmlchange commands).\nThe directory can also contain an SourceMods/ directory with the same structure\nas would be found in a case directory. If this argument is used in conjunction\nwith the --keepexe flag, then no changes will be permitted to the env_build.xml\nin the newly created case directory.")), ToolInput(tag="in_keep_exe", input_type=Boolean(optional=True), prefix="--keepexe", doc=InputDocumentation(doc="Sets EXEROOT to point to original build. It is HIGHLY recommended\nthat the original case be built BEFORE cloning it if the --keepexe flag is specfied.\nThis flag will make the SourceMods/ directory in the newly created case directory a\nsymbolic link to the SourceMods/ directory in the original case directory.")), ToolInput(tag="in_mach_dir", input_type=Directory(optional=True), prefix="--mach-dir", doc=InputDocumentation(doc="Specify the locations of the Machines directory, other than the default.\nThe default is CIMEROOT/machines.")), ToolInput(tag="in_project", input_type=String(optional=True), prefix="--project", doc=InputDocumentation(doc="Specify a project id. The default is the user-specified environment variable\nvariable PROJECT or ACCOUNT or read from ~/.cesm_proj.")), ToolInput(tag="in_cime_output_root", input_type=Directory(optional=True), prefix="--cime-output-root", doc=InputDocumentation(doc="Specify the root output directory. The default is the setting in the original\ncase directory. NOTE: create_clone will fail if this directory is not writable.\n"))], outputs=[ToolOutput(tag="out_cime_output_root", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_cime_output_root", type_hint=File()), doc=OutputDocumentation(doc="Specify the root output directory. The default is the setting in the original\ncase directory. NOTE: create_clone will fail if this directory is not writable.\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Create_Clone_V0_1_0().translate("wdl", allow_empty_container=True)

