from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean

Sqlmetal_V0_1_0 = CommandToolBuilder(tool="sqlmetal", base_command=["sqlmetal"], inputs=[ToolInput(tag="in_conn", input_type=String(optional=True), prefix="--conn", doc=InputDocumentation(doc="STRING\nDatabase CONNECTION STRING. Cannot be used with\n/server, /user or /password options.")), ToolInput(tag="in_user", input_type=String(optional=True), prefix="--user", doc=InputDocumentation(doc="Login user NAME.")), ToolInput(tag="in_password", input_type=String(optional=True), prefix="--password", doc=InputDocumentation(doc="Login PASSWORD.")), ToolInput(tag="in_server", input_type=String(optional=True), prefix="--server", doc=InputDocumentation(doc="Database server NAME.")), ToolInput(tag="in_database", input_type=String(optional=True), prefix="--database", doc=InputDocumentation(doc="Database catalog NAME on server.")), ToolInput(tag="in_provider", input_type=String(optional=True), prefix="--provider", doc=InputDocumentation(doc="Specify PROVIDER. May be Ingres, MySql, Oracle,\nOracleODP, PostgreSql or Sqlite.")), ToolInput(tag="in_with_schema_loader", input_type=String(optional=True), prefix="--with-schema-loader", doc=InputDocumentation(doc="ISchemaLoader implementation TYPE.")), ToolInput(tag="in_with_db_connection", input_type=String(optional=True), prefix="--with-dbconnection", doc=InputDocumentation(doc="IDbConnection implementation TYPE.")), ToolInput(tag="in_with_sql_dialect", input_type=String(optional=True), prefix="--with-sql-dialect", doc=InputDocumentation(doc="IVendor implementation TYPE.")), ToolInput(tag="in_code", input_type=File(optional=True), prefix="--code", doc=InputDocumentation(doc="Output as source code to FILE. Cannot be used\nwith /dbml option.")), ToolInput(tag="in_db_ml", input_type=File(optional=True), prefix="--dbml", doc=InputDocumentation(doc="Output as dbml to FILE. Cannot be used with /map")), ToolInput(tag="in_aliases", input_type=File(optional=True), prefix="--aliases", doc=InputDocumentation(doc="Use mapping FILE.")), ToolInput(tag="in_schema", input_type=Boolean(optional=True), prefix="--schema", doc=InputDocumentation(doc="Generate schema in code files (default: enabled).")), ToolInput(tag="in_namespace", input_type=String(optional=True), prefix="--namespace", doc=InputDocumentation(doc="Namespace NAME of generated code (default: no\nnamespace).")), ToolInput(tag="in_entity_base", input_type=String(optional=True), prefix="--entitybase", doc=InputDocumentation(doc="Base TYPE of entity classes in the generated\ncode (default: entities have no base class).")), ToolInput(tag="in_member_attribute", input_type=String(optional=True), prefix="--member-attribute", doc=InputDocumentation(doc="ATTRIBUTE for entity members in the generated\ncode, can be specified multiple times.")), ToolInput(tag="in_generate_type", input_type=String(optional=True), prefix="--generate-type", doc=InputDocumentation(doc="Generate only the TYPE selected, can be\nspecified multiple times and does not prevent\nreferences from being generated (default:\ngenerate a DataContex subclass and all the\nentities in the schema).")), ToolInput(tag="in_generate_equals_hash", input_type=String(optional=True), prefix="--generate-equals-hash", doc=InputDocumentation(doc="overrides for Equals() and\nGetHashCode() methods.")), ToolInput(tag="in_s_procs", input_type=Boolean(optional=True), prefix="--sprocs", doc=InputDocumentation(doc="Extract stored procedures.")), ToolInput(tag="in_plural_ize", input_type=Boolean(optional=True), prefix="--pluralize", doc=InputDocumentation(doc="Automatically pluralize or singularize class and\nmember names using specified culture rules.")), ToolInput(tag="in_culture", input_type=String(optional=True), prefix="--culture", doc=InputDocumentation(doc="Specify CULTURE for word recognition and\npluralization (default: 'en').")), ToolInput(tag="in_case", input_type=String(optional=True), prefix="--case", doc=InputDocumentation(doc="Transform names with the indicated STYLE\n(default: net; may be: leave, pascal, camel,\nnet).")), ToolInput(tag="in_generate_timestamps", input_type=Boolean(optional=True), prefix="--generate-timestamps", doc=InputDocumentation(doc="Generate timestampes in the generated code\n(default: enabled).")), ToolInput(tag="in_readline", input_type=Boolean(optional=True), prefix="--readline", doc=InputDocumentation(doc="Wait for a key to be pressed after processing.")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Enables additional information to help with\ndebugging, such as full stack traces in error\nmessages.")), ToolInput(tag="in_option_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--language=NAME        Language NAME for source code: C#, C#2 or VB "))], outputs=[ToolOutput(tag="out_code", output_type=File(optional=True), selector=InputSelector(input_to_select="in_code", type_hint=File()), doc=OutputDocumentation(doc="Output as source code to FILE. Cannot be used\nwith /dbml option.")), ToolOutput(tag="out_db_ml", output_type=File(optional=True), selector=InputSelector(input_to_select="in_db_ml", type_hint=File()), doc=OutputDocumentation(doc="Output as dbml to FILE. Cannot be used with /map"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sqlmetal_V0_1_0().translate("wdl", allow_empty_container=True)

