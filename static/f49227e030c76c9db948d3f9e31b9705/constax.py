from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, Directory

Constax_V0_1_0 = CommandToolBuilder(tool="constax", base_command=["constax"], inputs=[ToolInput(tag="in_conf", input_type=Int(optional=True), prefix="--conf", doc=InputDocumentation(doc="Classification confidence threshold")), ToolInput(tag="in_num_threads", input_type=Int(optional=True), prefix="--num_threads", doc=InputDocumentation(doc="Number of threads to use")), ToolInput(tag="in_max_hits", input_type=Int(optional=True), prefix="--max_hits", doc=InputDocumentation(doc="Maximum number of BLAST hits to use, for use with -b option")), ToolInput(tag="in_evalue", input_type=Int(optional=True), prefix="--evalue", doc=InputDocumentation(doc="Maximum expect value of BLAST hits to use, for use with -b option")), ToolInput(tag="in_p_iden", input_type=Int(optional=True), prefix="--p_iden", doc=InputDocumentation(doc="Minimum proportion identity of BLAST hits to use, for use with -b option")), ToolInput(tag="in_db", input_type=Boolean(optional=True), prefix="--db", doc=InputDocumentation(doc="Database to train classifiers")), ToolInput(tag="in_train_file", input_type=Boolean(optional=True), prefix="--trainfile", doc=InputDocumentation(doc="=./training_files                    Path to which training files will be written")), ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Input file in FASTA format containing sequence records to classify")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="=./outputs                              Output directory for classifications")), ToolInput(tag="in_tax", input_type=Boolean(optional=True), prefix="--tax", doc=InputDocumentation(doc="=./taxonomy_assignments                    Directory for taxonomy assignments")), ToolInput(tag="in_train", input_type=Boolean(optional=True), prefix="--train", doc=InputDocumentation(doc="Complete training if specified")), ToolInput(tag="in_blast", input_type=Boolean(optional=True), prefix="--blast", doc=InputDocumentation(doc="Use BLAST instead of UTAX if specified")), ToolInput(tag="in_select_by_keyword", input_type=Boolean(optional=True), prefix="--select_by_keyword", doc=InputDocumentation(doc="Takes a keyword argument and --input FASTA file to produce a filtered database with headers containing the keyword with name --output")), ToolInput(tag="in_msu_hpcc", input_type=Boolean(optional=True), prefix="--msu_hpcc", doc=InputDocumentation(doc="If specified, use executable paths on Michigan State University HPCC. Overrides other path arguments")), ToolInput(tag="in_conservative", input_type=Boolean(optional=True), prefix="--conservative", doc=InputDocumentation(doc="If specified, use conservative consensus rule (2 null = null winner)")), ToolInput(tag="in_make_plot", input_type=Boolean(optional=True), prefix="--make_plot", doc=InputDocumentation(doc="If specified, run R script to make plot of classified taxa")), ToolInput(tag="in_check", input_type=Boolean(optional=True), prefix="--check", doc=InputDocumentation(doc="If specified, runs checks but stops before training or classifying")), ToolInput(tag="in_mem", input_type=Boolean(optional=True), prefix="--mem", doc=InputDocumentation(doc="Memory available to use for RDP, in MB. 32000MB recommended for UNITE, 128000MB for SILVA")), ToolInput(tag="in_sin_tax_path", input_type=Boolean(optional=True), prefix="--sintax_path", doc=InputDocumentation(doc="Path to USEARCH/VSEARCH executable for SINTAX classification")), ToolInput(tag="in_u_tax_path", input_type=Boolean(optional=True), prefix="--utax_path", doc=InputDocumentation(doc="Path to USEARCH executable for UTAX classification")), ToolInput(tag="in_rdp_path", input_type=Boolean(optional=True), prefix="--rdp_path", doc=InputDocumentation(doc="Path to RDP classifier.jar file")), ToolInput(tag="in_cons_tax_path", input_type=Boolean(optional=True), prefix="--constax_path", doc=InputDocumentation(doc="Path to CONSTAX scripts")), ToolInput(tag="in_path_file", input_type=Boolean(optional=True), prefix="--pathfile", doc=InputDocumentation(doc="File with paths to SINTAX, UTAX, RDP, and CONSTAX executables")), ToolInput(tag="in_isolates", input_type=Boolean(optional=True), prefix="--isolates", doc=InputDocumentation(doc="FASTA formatted file of isolates to use BLAST against")), ToolInput(tag="in_isolates_query_coverage", input_type=Int(optional=True), prefix="--isolates_query_coverage", doc=InputDocumentation(doc="Threshold of sequence query coverage to report isolate matches")), ToolInput(tag="in_isolates_percent_identity", input_type=Int(optional=True), prefix="--isolates_percent_identity", doc=InputDocumentation(doc="Threshold of aligned sequence percent identity to report isolate matches")), ToolInput(tag="in_high_level_db", input_type=Boolean(optional=True), prefix="--high_level_db", doc=InputDocumentation(doc="FASTA database file of representative sequences for assignment of high level taxonomy")), ToolInput(tag="in_high_level_query_coverage", input_type=Int(optional=True), prefix="--high_level_query_coverage", doc=InputDocumentation(doc="Threshold of sequence query coverage to report high-level taxonomy matches")), ToolInput(tag="in_high_level_percent_identity", input_type=Int(optional=True), prefix="--high_level_percent_identity", doc=InputDocumentation(doc="Threshold of aligned sequence percent identity to report high-level taxonomy matches"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="=./outputs                              Output directory for classifications"))], container="quay.io/biocontainers/constax:2.0.6--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Constax_V0_1_0().translate("wdl")

