from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean, Float, Directory

Pipelign_V0_1_0 = CommandToolBuilder(tool="pipelign", base_command=["pipelign"], inputs=[ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--inFile", doc=InputDocumentation(doc="Input sequence file in FASTA format")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outFile", doc=InputDocumentation(doc="FASTA formatted output alignment file")), ToolInput(tag="in_lent_hr", input_type=Int(optional=True), prefix="--lenThr", doc=InputDocumentation(doc="Length threshold for full sequences (default: 0.7)")), ToolInput(tag="in_alphabet", input_type=String(optional=True), prefix="--alphabet", doc=InputDocumentation(doc="Input sequences can be dna/rna/aa (default: dna)")), ToolInput(tag="in_keep_orphans", input_type=Boolean(optional=True), prefix="--keepOrphans", doc=InputDocumentation(doc="Add fragments without clusters")), ToolInput(tag="in_keep_bad_seqs", input_type=Boolean(optional=True), prefix="--keepBadSeqs", doc=InputDocumentation(doc="Add long sequences with too many ambiguous residues")), ToolInput(tag="in_m_zip", input_type=Boolean(optional=True), prefix="--mZip", doc=InputDocumentation(doc="Create zipped intermediate output files")), ToolInput(tag="in_simper", input_type=Float(optional=True), prefix="--simPer", doc=InputDocumentation(doc="Percent sequence similarity for clustering (default: 0.8)")), ToolInput(tag="in_run", input_type=String(optional=True), prefix="--run", doc=InputDocumentation(doc="Run either (J)oblib/(G)NU parallel version (default: G)")), ToolInput(tag="in_merge", input_type=String(optional=True), prefix="--merge", doc=InputDocumentation(doc="Merge using (P)arallel/(C)onsensus strategy  (default: P)")), ToolInput(tag="in_thread", input_type=Int(optional=True), prefix="--thread", doc=InputDocumentation(doc="Number of CPU/threads to use (default: 1)")), ToolInput(tag="in_mite_rate_long", input_type=Int(optional=True), prefix="--mIterateLong", doc=InputDocumentation(doc="Number of iterations to refine long alignments (default: 1)")), ToolInput(tag="in_miter_at_emerge", input_type=Int(optional=True), prefix="--mIterateMerge", doc=InputDocumentation(doc="Number of iterations to refine merged alignment (default: 1)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outDir", doc=InputDocumentation(doc="Name for output directory to hold intermediate files")), ToolInput(tag="in_clear_existing_directory", input_type=Directory(optional=True), prefix="--clearExistingDirectory", doc=InputDocumentation(doc="Remove files from existing output directory")), ToolInput(tag="in_am_big_per", input_type=Float(optional=True), prefix="--ambigPer", doc=InputDocumentation(doc="Proportion of ambiguous characters allowed in the long sequences (default: 0.1)")), ToolInput(tag="in_stage", input_type=String(optional=True), prefix="--stage", doc=InputDocumentation(doc="1  Make cluster alignments and HMM of long sequences\n2  Align long sequences only\n3  Assign fragments to clusters\n4  Make cluster alignments with fragments\n5  Align all sequences")), ToolInput(tag="in_exclude_clusters", input_type=Boolean(optional=True), prefix="--excludeClusters", doc=InputDocumentation(doc="Exclude clusters from final alignment\n"))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc="FASTA formatted output alignment file")), ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Name for output directory to hold intermediate files")), ToolOutput(tag="out_clear_existing_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_clear_existing_directory", type_hint=File()), doc=OutputDocumentation(doc="Remove files from existing output directory"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pipelign_V0_1_0().translate("wdl", allow_empty_container=True)

