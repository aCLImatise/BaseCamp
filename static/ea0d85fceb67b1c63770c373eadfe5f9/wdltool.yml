!Command
command:
- wdltool
positional:
- !Positional
  optional: false
  position: 0
  name: workflow.
  description: Fill in the values in this JSON document and
named: []
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\njava -jar wdltool.jar <action> <parameters>\n\nActions:\nvalidate <WDL\
  \ file>\n\n  Performs full validation of the WDL file including syntax\n  and semantic\
  \ checking\n\ninputs <WDL file>\n\n  Print a JSON skeleton file of the inputs needed\
  \ for this\n  workflow.  Fill in the values in this JSON document and\n  pass it\
  \ in to the 'run' subcommand.\n\nhighlight <WDL file> <html|console>\n\n  Reformats\
  \ and colorizes/tags a WDL file. The second\n  parameter is the output type.  \"\
  html\" will output the WDL\n  file with <span> tags around elements.  \"console\"\
  \ mode\n  will output colorized text to the terminal\n\nparse <WDL file>\n\n  Compares\
  \ a WDL file against the grammar and prints out an\n  abstract syntax tree if it\
  \ is valid, and a syntax error\n  otherwise.  Note that higher-level AST checks\
  \ are not done\n  via this sub-command and the 'validate' subcommand should\n  be\
  \ used for full validation.\n\ngraph <WDL file>\n\n  Reads a WDL file against the\
  \ grammar and prints out a\n  .dot of the DAG if it is valid, and a syntax error\n\
  \  otherwise.\n\nwomgraph <WDL or CWL file> [ancillary files]\n\n  Reads a WDL or\
  \ CWL file from the first argument and\n  converts it to a WOM representation then\
  \ prints out a graph\n  of the WOM produced.\n  Any imported files can be supplied\
  \ as subsequent arguments.\n\n                     \n"
generated_using:
- --help
docker_image:
