from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Lofreq_Call_V0_1_0 = CommandToolBuilder(tool="lofreq_call", base_command=["lofreq", "call"], inputs=[ToolInput(tag="in_ref", input_type=File(optional=True), prefix="--ref", doc=InputDocumentation(doc="Indexed reference fasta file (gzip supported) [null]")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Vcf output file [- = stdout]")), ToolInput(tag="in_region", input_type=String(optional=True), prefix="--region", doc=InputDocumentation(doc="Limit calls to this region (chrom:start-end) [null]")), ToolInput(tag="in_bed", input_type=File(optional=True), prefix="--bed", doc=InputDocumentation(doc="List of positions (chr pos) or regions (BED) [null]")), ToolInput(tag="in_min_bq", input_type=Int(optional=True), prefix="--min-bq", doc=InputDocumentation(doc="Skip any base with baseQ smaller than INT [6]")), ToolInput(tag="in_min_alt_bq", input_type=Int(optional=True), prefix="--min-alt-bq", doc=InputDocumentation(doc="Skip alternate bases with baseQ smaller than INT [6]")), ToolInput(tag="in_def_alt_bq", input_type=Int(optional=True), prefix="--def-alt-bq", doc=InputDocumentation(doc="Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]")), ToolInput(tag="in_min_jq", input_type=Int(optional=True), prefix="--min-jq", doc=InputDocumentation(doc="Skip any base with joinedQ smaller than INT [0]")), ToolInput(tag="in_min_alt_jq", input_type=Int(optional=True), prefix="--min-alt-jq", doc=InputDocumentation(doc="Skip alternate bases with joinedQ smaller than INT [0]")), ToolInput(tag="in_def_alt_jq", input_type=Int(optional=True), prefix="--def-alt-jq", doc=InputDocumentation(doc="Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]")), ToolInput(tag="in_no_baq", input_type=Boolean(optional=True), prefix="--no-baq", doc=InputDocumentation(doc="Disable use of base-alignment quality (BAQ)")), ToolInput(tag="in_no_i_daq", input_type=Boolean(optional=True), prefix="--no-idaq", doc=InputDocumentation(doc="Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)")), ToolInput(tag="in_del_baq", input_type=Boolean(optional=True), prefix="--del-baq", doc=InputDocumentation(doc="Delete pre-existing BAQ values, i.e. compute even if already present in BAM")), ToolInput(tag="in_no_ext_baq", input_type=Boolean(optional=True), prefix="--no-ext-baq", doc=InputDocumentation(doc="Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)")), ToolInput(tag="in_min_mq", input_type=Int(optional=True), prefix="--min-mq", doc=InputDocumentation(doc="Skip reads with mapping quality smaller than INT [0]")), ToolInput(tag="in_max_mq", input_type=Int(optional=True), prefix="--max-mq", doc=InputDocumentation(doc="Cap mapping quality at INT [255]")), ToolInput(tag="in_no_mq", input_type=Boolean(optional=True), prefix="--no-mq", doc=InputDocumentation(doc="Don't merge mapping quality in LoFreq's model")), ToolInput(tag="in_call_indels", input_type=Boolean(optional=True), prefix="--call-indels", doc=InputDocumentation(doc="Enable indel calls (note: preprocess your file to include indel alignment qualities!)")), ToolInput(tag="in_only_indels", input_type=Boolean(optional=True), prefix="--only-indels", doc=InputDocumentation(doc="Only call indels; no SNVs")), ToolInput(tag="in_src_qual", input_type=Boolean(optional=True), prefix="--src-qual", doc=InputDocumentation(doc="Enable computation of source quality")), ToolInput(tag="in_ign_vcf", input_type=File(optional=True), prefix="--ign-vcf", doc=InputDocumentation(doc="Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas")), ToolInput(tag="in_def_nm_q", input_type=Int(optional=True), prefix="--def-nm-q", doc=InputDocumentation(doc="If >= 0, then replace non-match base qualities with this default value [-1]")), ToolInput(tag="in_sig", input_type=Boolean(optional=True), prefix="--sig", doc=InputDocumentation(doc="P-Value cutoff / significance level [0.010000]")), ToolInput(tag="in_bon_f", input_type=Boolean(optional=True), prefix="--bonf", doc=InputDocumentation(doc="Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']")), ToolInput(tag="in_min_cov", input_type=Int(optional=True), prefix="--min-cov", doc=InputDocumentation(doc="Test only positions having at least this coverage [1]\n(note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)")), ToolInput(tag="in_max_depth", input_type=Int(optional=True), prefix="--max-depth", doc=InputDocumentation(doc="Cap coverage at this depth [1000000]")), ToolInput(tag="in_illumina_one_dot_three", input_type=Boolean(optional=True), prefix="--illumina-1.3", doc=InputDocumentation(doc="Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded")), ToolInput(tag="in_use_orphan", input_type=Boolean(optional=True), prefix="--use-orphan", doc=InputDocumentation(doc="Count anomalous read pairs (i.e. where mate is not aligned properly)")), ToolInput(tag="in_plp_summary_only", input_type=Boolean(optional=True), prefix="--plp-summary-only", doc=InputDocumentation(doc="No variant calling. Just output pileup summary per column")), ToolInput(tag="in_no_default_filter", input_type=Boolean(optional=True), prefix="--no-default-filter", doc=InputDocumentation(doc="Don't run default 'lofreq filter' automatically after calling variants")), ToolInput(tag="in_force_overwrite", input_type=Boolean(optional=True), prefix="--force-overwrite", doc=InputDocumentation(doc="Overwrite any existing output")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Enable debugging")), ToolInput(tag="in_in_dot_bam", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Vcf output file [- = stdout]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Lofreq_Call_V0_1_0().translate("wdl", allow_empty_container=True)

