from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Mixcr_Alignmentsdiff_V0_1_0 = CommandToolBuilder(tool="mixcr_alignmentsDiff", base_command=["mixcr", "alignmentsDiff"], inputs=[ToolInput(tag="in_no_warnings", input_type=Boolean(optional=True), prefix="--no-warnings", doc=InputDocumentation(doc="Suppress all warning messages.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose warning messages.")), ToolInput(tag="in_force_overwrite", input_type=File(optional=True), prefix="--force-overwrite", doc=InputDocumentation(doc="Force overwrite of output file(s).")), ToolInput(tag="in_only_in_first", input_type=File(optional=True), prefix="--only-in-first", doc=InputDocumentation(doc="output for alignments contained only in the first .vdjca file")), ToolInput(tag="in_only_in_second", input_type=File(optional=True), prefix="--only-in-second", doc=InputDocumentation(doc="output for alignments contained only in the second .vdjca file")), ToolInput(tag="in_diff_from_first", input_type=File(optional=True), prefix="--diff-from-first", doc=InputDocumentation(doc="output for alignments from the first file that are different from those\nalignments in the second file")), ToolInput(tag="in_diff_from_second", input_type=File(optional=True), prefix="--diff-from-second", doc=InputDocumentation(doc="output for alignments from the second file that are different from those\nalignments in the first file")), ToolInput(tag="in_gene_feature", input_type=String(optional=True), prefix="--gene-feature", doc=InputDocumentation(doc="Specifies a gene feature to compare")), ToolInput(tag="in_top_hits_level", input_type=Int(optional=True), prefix="--top-hits-level", doc=InputDocumentation(doc="Number of top hits to search for a match\n")), ToolInput(tag="in_scr", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_alignments_diff", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_gene_feature_to_match", input_type=String(optional=True), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_only_second", input_type=String(optional=True), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_in_one", input_type=Int(), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_in_two", input_type=Int(), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_report", input_type=String(optional=True), position=6, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_force_overwrite", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force_overwrite", type_hint=File()), doc=OutputDocumentation(doc="Force overwrite of output file(s).")), ToolOutput(tag="out_only_in_first", output_type=File(optional=True), selector=InputSelector(input_to_select="in_only_in_first", type_hint=File()), doc=OutputDocumentation(doc="output for alignments contained only in the first .vdjca file")), ToolOutput(tag="out_only_in_second", output_type=File(optional=True), selector=InputSelector(input_to_select="in_only_in_second", type_hint=File()), doc=OutputDocumentation(doc="output for alignments contained only in the second .vdjca file")), ToolOutput(tag="out_diff_from_first", output_type=File(optional=True), selector=InputSelector(input_to_select="in_diff_from_first", type_hint=File()), doc=OutputDocumentation(doc="output for alignments from the first file that are different from those\nalignments in the second file")), ToolOutput(tag="out_diff_from_second", output_type=File(optional=True), selector=InputSelector(input_to_select="in_diff_from_second", type_hint=File()), doc=OutputDocumentation(doc="output for alignments from the second file that are different from those\nalignments in the first file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mixcr_Alignmentsdiff_V0_1_0().translate("wdl", allow_empty_container=True)

