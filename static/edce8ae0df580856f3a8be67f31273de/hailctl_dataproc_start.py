from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Float, String, Boolean

Hailctl_Dataproc_Start_V0_1_0 = CommandToolBuilder(tool="hailctl_dataproc_start", base_command=["hailctl", "dataproc", "start"], inputs=[ToolInput(tag="in_master_machine_type", input_type=Int(optional=True), prefix="--master-machine-type", doc=InputDocumentation(doc="Master machine type (default: n1-highmem-8).")), ToolInput(tag="in_master_memory_fraction", input_type=Float(optional=True), prefix="--master-memory-fraction", doc=InputDocumentation(doc="Fraction of master memory allocated to the JVM. Use a\nsmaller value to reserve more memory for Python.\n(default: 0.8)")), ToolInput(tag="in_master_boot_disk_size", input_type=Int(optional=True), prefix="--master-boot-disk-size", doc=InputDocumentation(doc="Disk size of master machine, in GB (default: 100).")), ToolInput(tag="in_num_master_local_ssds", input_type=Int(optional=True), prefix="--num-master-local-ssds", doc=InputDocumentation(doc="Number of local SSDs to attach to the master machine\n(default: 0).")), ToolInput(tag="in_num_preemptible_workers", input_type=Int(optional=True), prefix="--num-preemptible-workers", doc=InputDocumentation(doc="Number of preemptible worker machines (default: 0).")), ToolInput(tag="in_num_worker_local_ssds", input_type=Int(optional=True), prefix="--num-worker-local-ssds", doc=InputDocumentation(doc="Number of local SSDs to attach to each worker machine\n(default: 0).")), ToolInput(tag="in_num_workers", input_type=Int(optional=True), prefix="--num-workers", doc=InputDocumentation(doc="Number of worker machines (default: 2).")), ToolInput(tag="in_preemptible_worker_boot_disk_size", input_type=Int(optional=True), prefix="--preemptible-worker-boot-disk-size", doc=InputDocumentation(doc="Disk size of preemptible machines, in GB (default:\n40).")), ToolInput(tag="in_worker_boot_disk_size", input_type=Int(optional=True), prefix="--worker-boot-disk-size", doc=InputDocumentation(doc="Disk size of worker machines, in GB (default: 40).")), ToolInput(tag="in_worker_machine_type", input_type=Int(optional=True), prefix="--worker-machine-type", doc=InputDocumentation(doc="Worker machine type (default: n1-standard-8, or\nn1-highmem-8 with --vep).")), ToolInput(tag="in_zone", input_type=Int(optional=True), prefix="--zone", doc=InputDocumentation(doc="Compute zone for the cluster (default: us-central1-b).")), ToolInput(tag="in_properties", input_type=String(optional=True), prefix="--properties", doc=InputDocumentation(doc="Additional configuration properties for the cluster")), ToolInput(tag="in_metadata", input_type=Int(optional=True), prefix="--metadata", doc=InputDocumentation(doc="Comma-separated list of metadata to add:\nKEY1=VALUE1,KEY2=VALUE2...")), ToolInput(tag="in_packages", input_type=String(optional=True), prefix="--packages", doc=InputDocumentation(doc="Comma-separated list of Python packages to be\ninstalled on the master node.")), ToolInput(tag="in_project", input_type=String(optional=True), prefix="--project", doc=InputDocumentation(doc="Google Cloud project to start cluster (defaults to\ncurrently set project).")), ToolInput(tag="in_configuration", input_type=String(optional=True), prefix="--configuration", doc=InputDocumentation(doc="Google Cloud configuration to start cluster (defaults\nto currently set configuration).")), ToolInput(tag="in_max_idle", input_type=Int(optional=True), prefix="--max-idle", doc=InputDocumentation(doc="If specified, maximum idle time before shutdown (e.g.\n60m).")), ToolInput(tag="in_max_age", input_type=Int(optional=True), prefix="--max-age", doc=InputDocumentation(doc="If specified, maximum age before shutdown (e.g. 60m).")), ToolInput(tag="in_bucket", input_type=String(optional=True), prefix="--bucket", doc=InputDocumentation(doc="The Google Cloud Storage bucket to use for cluster\nstaging (just the bucket name, no gs:// prefix).")), ToolInput(tag="in_network", input_type=String(optional=True), prefix="--network", doc=InputDocumentation(doc="the network for all nodes in this cluster")), ToolInput(tag="in_master_tags", input_type=String(optional=True), prefix="--master-tags", doc=InputDocumentation(doc="comma-separated list of instance tags to apply to the\nmastern node")), ToolInput(tag="in_wheel", input_type=String(optional=True), prefix="--wheel", doc=InputDocumentation(doc="Non-default Hail installation. Warning: experimental.")), ToolInput(tag="in_in_it", input_type=String(optional=True), prefix="--init", doc=InputDocumentation(doc="Comma-separated list of init scripts to run.")), ToolInput(tag="in_in_it_timeout", input_type=String(optional=True), prefix="--init_timeout", doc=InputDocumentation(doc="Flag to specify a timeout period for the\ninitialization action")), ToolInput(tag="in_vep", input_type=String(optional=True), prefix="--vep", doc=InputDocumentation(doc="Install VEP for the specified reference genome.")), ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry-run", doc=InputDocumentation(doc="Print gcloud dataproc command, but don't run it."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hailctl_Dataproc_Start_V0_1_0().translate("wdl", allow_empty_container=True)

