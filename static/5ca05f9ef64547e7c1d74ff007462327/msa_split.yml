!Command
command:
- msa_split
positional:
- !Positional
  optional: false
  position: 0
  name: format.
  description: msa_split mydata.fa --features conserved.bed --by-category \
named:
- !Flag
  optional: true
  synonyms:
  - --by-category
  - -L
  description: "(Requires --features) Split by category, as defined by\nannotations\
    \ file and (optionally) category map (see\n--catmap)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --for-features
  - -F
  description: "(Requires --features) Extract section of alignment\ncorresponding\
    \ to every feature.  There will be no output for\nregions not covered by features."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --windows
  - -w
  description: "<win_size,win_overlap>\nSplit the alignment into \"windows\" of size\
    \ <win_size> bases,\noverlapping by <win_overlap>."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --by-group
  - -P
  description: "(Requires --features) Split by groups in annotation file,\nas defined\
    \ by specified tag.  Splits midway between every\npair of consecutive groups.\
    \  Features will be sorted by group.\nThere should be no overlapping features\
    \ (see 'refeature\n--unique')."
  args: !SimpleFlagArg
    name: tag
- !Flag
  optional: true
  synonyms:
  - --by-index
  - -p
  description: "List of explicit indices at which to split alignment\n(comma-separated).\
    \  If the list of indices is \"10,20\",\nthen sub-alignments will be output for\
    \ sites 1-9, 10-19, and\n20-<msa_len>.  Note that the indices are relative to\
    \ the\ninput alignment, and not necessarily in genomic coordinates."
  args: !SimpleFlagArg
    name: indices
- !Flag
  optional: true
  synonyms:
  - --npartitions
  - -n
  description: Split alignment equally into specified number of partitions.
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - --between-blocks
  - -B
  description: "(Not for use with --by-category or --for-features) Try to\npartition\
    \ at sites between alignment blocks.  Assumes a\nreference sequence alignment,\
    \ with the first sequence as the\nreference seq (as created by multiz).  Blocks\
    \ of 30 sites with\ngaps in all sequences but the reference seq are assumed to\n\
    indicate boundaries between alignment blocks.  Partition\nindices will not be\
    \ moved more than <radius> sites."
  args: !SimpleFlagArg
    name: radius
- !Flag
  optional: true
  synonyms:
  - --features
  - -g
  description: "(For use with --by-category, --by-group, --for-features, or\n--windows)\
    \ Annotations file.  May be GFF, BED, or genepred\nformat.  Coordinates are assumed\
    \ to be in the coordinate frame of\nthe first sequence in the alignment (assumed\
    \ to be the reference\nsequence)."
  args: !SimpleFlagArg
    name: fname
- !Flag
  optional: true
  synonyms:
  - --catmap
  - -c
  description: "|<string>\n(Optionally use with --by-category) Mapping of feature\
    \ types\nto category numbers.  Can either give a filename or an\n\"inline\" description\
    \ of a simple category map, e.g.,\n--catmap \"NCATS = 3 ; CDS 1-3\" or --catmap\
    \ \"NCATS = 1 ; UTR\n1\"."
  args: !SimpleFlagArg
    name: fname
- !Flag
  optional: true
  synonyms:
  - --refidx
  - -d
  description: "(For use with --windows or --by-index) Index of frame of\nreference\
    \ for split indices.  Default is 1 (1st sequence\nassumed reference)."
  args: !SimpleFlagArg
    name: frame_index
- !Flag
  optional: true
  synonyms:
  - --in-format
  - -i
  description: "|PHYLIP|MPM|MAF|SS\nInput alignment file format.  Default is to guess\
    \ format from\nfile contents."
  args: !SimpleFlagArg
    name: FASTA
- !Flag
  optional: true
  synonyms:
  - --refseq
  - -M
  description: "(For use with --in-format MAF) Name of file containing\nreference\
    \ sequence, in FASTA format."
  args: !SimpleFlagArg
    name: fname
- !Flag
  optional: true
  synonyms:
  - --out-format
  - -o
  description: "|PHYLIP|MPM|SS\nOutput alignment file format.  Default is FASTA."
  args: !SimpleFlagArg
    name: FASTA
- !Flag
  optional: true
  synonyms:
  - --out-root
  - -r
  description: Filename root for output files (default "msa_split").
  args: !SimpleFlagArg
    name: name
- !Flag
  optional: true
  synonyms:
  - --sub-features
  - -f
  description: "(For use with --features)  Output subsets of features\ncorresponding\
    \ to subalignments.  Features overlapping\npartition boundaries will be discarded.\
    \  Not permitted with\n--by-category."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --reverse-compl
  - -s
  description: "Reverse complement all segments having at least one feature on\nthe\
    \ reverse strand and none on the positive strand.  For use\nwith --by-group. \
    \ Can also be used with --by-category to ensure\nall sites in a category are represented\
    \ in the same strand\norientation."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --gap-strip
  - -G
  description: "|ANY|<seqno>\nStrip columns in output alignments containing all gaps,\
    \ any\ngaps, or gaps in the specified sequence (<seqno>; indexing\nbegins with\
    \ one).  Default is not to strip any columns."
  args: !SimpleFlagArg
    name: ALL
- !Flag
  optional: true
  synonyms:
  - --seqs
  - -l
  description: "Include only specified sequences in output.  Indicate by\nsequence\
    \ number or name (numbering starts with 1 and is\nevaluated *after* --order is\
    \ applied)."
  args: !SimpleFlagArg
    name: seq_list
- !Flag
  optional: true
  synonyms:
  - --exclude
  - -x
  description: Exclude rather than include specified sequences.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --order
  - -O
  description: "Change order of rows in alignment to match sequence names\nspecified\
    \ in name_list.  If a name appears in name_list but\nnot in the alignment, a row\
    \ of gaps will be inserted."
  args: !SimpleFlagArg
    name: name_list
- !Flag
  optional: true
  synonyms:
  - --min-informative
  - -I
  description: "Only output alignments having at least <n> informative sites\n(sites\
    \ at which at least two non-gap and non-N gaps are present)."
  args: !SimpleFlagArg
    name: n
- !Flag
  optional: true
  synonyms:
  - --do-cats
  - -C
  description: "(For use with --by-category) Output sub-alignments for only the\n\
    specified categories (column-delimited list)."
  args: !SimpleFlagArg
    name: cat_list
- !Flag
  optional: true
  synonyms:
  - --tuple-size
  - -T
  description: "(for use with --by-category or --out-format SS) Size of tuples\nof\
    \ columns to consider in downstream analysis (e.g., with\ncontext-dependent phylogenetic\
    \ models; see 'phyloFit').  With\n--by-category, insert tuple_size-1 columns of\
    \ missing data\nbetween sites that were not adjacent in the original alignment,\n\
    to avoid creating artificial context.  With --out-format SS,\nexpress sufficient\
    \ statistics in terms of tuples of specified size."
  args: !SimpleFlagArg
    name: tuple_size
- !Flag
  optional: true
  synonyms:
  - --unordered-ss
  - -z
  description: "(For use with --out-format SS)  Suppress the portion of the\nsufficient\
    \ statistics concerned with the order in which columns\nappear."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --summary
  - -S
  description: "Output summary of each output alignment to a file with suffix\n\"\
    .sum\" (includes base frequencies and numbers of gapped columns)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --quiet
  - -q
  description: Proceed quietly.
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - --help
  - -h
  description: "Print this help message.\n"
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "\nUSAGE: msa_split [OPTIONS] <fname> \n\nDESCRIPTION:\n\n    Partitions\
  \ a multiple sequence alignment either at designated\n    columns, or according\
  \ to specified category labels, and outputs\n    sub-alignments for the partitions.\
  \  Optionally splits an\n    associated annotations file.\n\nEXAMPLES:\n\n    (See\
  \ below for details on options)\n\n    1. Read an alignment for a whole human chromosome\
  \ from a MAF file\n    and extract sub-alignments in 1Mb windows overlapping by\
  \ 1kb.  Use\n    sufficient statistics (SS) format for output (can be used by\n\
  \    phyloFit, phastCons, or exoniphy).  Set window boundaries between\n    alignment\
  \ blocks, if possible.\n\n        msa_split chr1.maf --refseq chr1.fa --in-format\
  \ MAF \\\n            --windows 1000000,1000 --out-format SS \\\n            --between-blocks\
  \ 5000 --out-root chr1\n\n    (Windows will be defined using the coordinate system\
  \ of the first\n    sequence in the alignment, assumed to be the reference sequence;\n\
  \    output will be to chr1.1-1000000.ss, chr1.999001-1999000.ss, ...)\n\n    2.\
  \ As in (1), but report unordered sufficient statistics (much\n    more compact\
  \ and adequate for use with phyloFit).\n\n        msa_split chr1.maf --refseq chr1.fa\
  \ --in-format MAF \\\n            --windows 1000000,1000 --out-format SS \\\n  \
  \          --between-blocks 5000 --out-root chr1 --unordered-ss\n\n    3. Extract\
  \ sub-alignments of sites in conserved elements and not\n    in conserved elements,\
  \ as defined by a BED file (coordinates\n    assumed to be for 1st sequence).  Read\
  \ multiple alignment in FASTA\n    format.\n\n        msa_split mydata.fa --features\
  \ conserved.bed --by-category \\\n            --out-root mydata\n\n    (Output will\
  \ be to mydata.background-0.fa and mydata.bed_feature-1.fa\n    [latter has sites\
  \ of category number 1, defined by bed file]\n\n    3. Extract sub-alignments of\
  \ sites in each of the three codon\n    positions, as defined by a GFF file (coordinates\
  \ assumed to be for\n    1st sequence).  Reverse complement genes on minus strand.\n\
  \n        msa_split chr22.maf --in-format MAF --features chr22.gff \\\n        \
  \    --by-category --catmap \"NCATS 3 ; CDS 1-3\" --do-cats CDS \\\n           \
  \ --reverse-compl --out-root chr22 --out-format SS\n\n    (Output will be to chr22.cds-1.ss,\
  \ chr22.cds-2.ss, chr22.cds-3.ss)\n\n    4. Split an alignment into pieces corresponding\
  \ to the genes in a\n    GFF file.  Assume genes are defined by the tag \"transcript_id\"\
  .\n\n        msa_split cftr.fa --features cftr.gff --by-group transcript_id\n\n\
  \    5. Obtain a sub-alignment for each of a set of regulatory regions,\n    as\
  \ defined in a BED file.\n\n        msa_split chr22.maf --in-format MAF --refseq\
  \ chr22.fa \\\n\t    --features chr22.reg.bed --for-features \\\n\t    --out-root\
  \ chr22.reg\n\nOPTIONS:\n\n (Splitting options)\n    --windows, -w <win_size,win_overlap>\n\
  \        Split the alignment into \"windows\" of size <win_size> bases,\n      \
  \  overlapping by <win_overlap>.\n\n    --by-category, -L\n        (Requires --features)\
  \ Split by category, as defined by\n        annotations file and (optionally) category\
  \ map (see\n        --catmap)\n\n    --by-group, -P <tag>\n        (Requires --features)\
  \ Split by groups in annotation file,\n        as defined by specified tag.  Splits\
  \ midway between every\n        pair of consecutive groups.  Features will be sorted\
  \ by group.\n        There should be no overlapping features (see 'refeature\n \
  \       --unique').\n\n    --for-features, -F\n        (Requires --features) Extract\
  \ section of alignment\n        corresponding to every feature.  There will be no\
  \ output for\n        regions not covered by features.\n\n    --by-index, -p <indices>\n\
  \        List of explicit indices at which to split alignment\n        (comma-separated).\
  \  If the list of indices is \"10,20\",\n        then sub-alignments will be output\
  \ for sites 1-9, 10-19, and\n        20-<msa_len>.  Note that the indices are relative\
  \ to the \n        input alignment, and not necessarily in genomic coordinates.\n\
  \n    --npartitions, -n <number>\n        Split alignment equally into specified\
  \ number of partitions.\n\n    --between-blocks, -B <radius>\n        (Not for use\
  \ with --by-category or --for-features) Try to\n        partition at sites between\
  \ alignment blocks.  Assumes a\n        reference sequence alignment, with the first\
  \ sequence as the\n        reference seq (as created by multiz).  Blocks of 30 sites\
  \ with\n        gaps in all sequences but the reference seq are assumed to\n   \
  \     indicate boundaries between alignment blocks.  Partition\n        indices\
  \ will not be moved more than <radius> sites.\n\n    --features, -g <fname>\n  \
  \      (For use with --by-category, --by-group, --for-features, or \n\t--windows)\
  \ Annotations file.  May be GFF, BED, or genepred\n        format.  Coordinates\
  \ are assumed to be in the coordinate frame of \n        the first sequence in the\
  \ alignment (assumed to be the reference\n        sequence).\n\n    --catmap, -c\
  \ <fname>|<string>\n        (Optionally use with --by-category) Mapping of feature\
  \ types\n        to category numbers.  Can either give a filename or an\n      \
  \  \"inline\" description of a simple category map, e.g.,\n        --catmap \"NCATS\
  \ = 3 ; CDS 1-3\" or --catmap \"NCATS = 1 ; UTR\n        1\".\n\n    --refidx, -d\
  \ <frame_index>\n        (For use with --windows or --by-index) Index of frame of\n\
  \        reference for split indices.  Default is 1 (1st sequence\n        assumed\
  \ reference).\n\n (File names & formats, type of output, etc.)\n    --in-format,\
  \ -i FASTA|PHYLIP|MPM|MAF|SS\n        Input alignment file format.  Default is to\
  \ guess format from \n        file contents.\n\n    --refseq, -M <fname>\n     \
  \   (For use with --in-format MAF) Name of file containing\n        reference sequence,\
  \ in FASTA format.\n\n    --out-format, -o FASTA|PHYLIP|MPM|SS\n        Output alignment\
  \ file format.  Default is FASTA.\n\n    --out-root, -r <name>\n        Filename\
  \ root for output files (default \"msa_split\").\n\n    --sub-features, -f\n\t(For\
  \ use with --features)  Output subsets of features\n\tcorresponding to subalignments.\
  \  Features overlapping\n\tpartition boundaries will be discarded.  Not permitted\
  \ with\n\t--by-category.\n\n    --reverse-compl, -s\n        Reverse complement\
  \ all segments having at least one feature on\n        the reverse strand and none\
  \ on the positive strand.  For use\n        with --by-group.  Can also be used with\
  \ --by-category to ensure\n        all sites in a category are represented in the\
  \ same strand\n        orientation.\n\n    --gap-strip, -G ALL|ANY|<seqno>\n   \
  \     Strip columns in output alignments containing all gaps, any\n        gaps,\
  \ or gaps in the specified sequence (<seqno>; indexing\n        begins with one).\
  \  Default is not to strip any columns.\n\n    --seqs, -l <seq_list>\n        Include\
  \ only specified sequences in output.  Indicate by \n        sequence number or\
  \ name (numbering starts with 1 and is\n        evaluated *after* --order is applied).\n\
  \n    --exclude, -x\n        Exclude rather than include specified sequences.\n\n\
  \    --order, -O <name_list>\n        Change order of rows in alignment to match\
  \ sequence names\n        specified in name_list.  If a name appears in name_list\
  \ but\n        not in the alignment, a row of gaps will be inserted.\n\n    --min-informative,\
  \ -I <n> \n        Only output alignments having at least <n> informative sites\n\
  \        (sites at which at least two non-gap and non-N gaps are present).\n\n \
  \   --do-cats, -C <cat_list>\n        (For use with --by-category) Output sub-alignments\
  \ for only the\n        specified categories (column-delimited list).\n\n    --tuple-size,\
  \ -T <tuple_size>\n        (for use with --by-category or --out-format SS) Size\
  \ of tuples\n        of columns to consider in downstream analysis (e.g., with\n\
  \        context-dependent phylogenetic models; see 'phyloFit').  With\n       \
  \ --by-category, insert tuple_size-1 columns of missing data\n        between sites\
  \ that were not adjacent in the original alignment,\n        to avoid creating artificial\
  \ context.  With --out-format SS,\n        express sufficient statistics in terms\
  \ of tuples of specified size.\n\n    --unordered-ss, -z  \n        (For use with\
  \ --out-format SS)  Suppress the portion of the\n        sufficient statistics concerned\
  \ with the order in which columns\n        appear.\n\n    --summary, -S \n     \
  \   Output summary of each output alignment to a file with suffix\n        \".sum\"\
  \ (includes base frequencies and numbers of gapped columns).\n\n (Other)\n    --quiet,\
  \ -q\n        Proceed quietly.\n\n    --help, -h\n        Print this help message.\n\
  \n"
generated_using:
- --help
docker_image:
