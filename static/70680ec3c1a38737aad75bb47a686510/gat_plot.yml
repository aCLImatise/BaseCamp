!Command
positional: []
named:
- !Flag
  description: store timeing information in file [none].
  synonyms:
  - --timeit
  args: !SimpleFlagArg
    name: TIMEIT_FILE
  optional: true
- !Flag
  description: name in timing file for this class of jobs [all].
  synonyms:
  - --timeit-name
  args: !SimpleFlagArg
    name: TIMEIT_NAME
  optional: true
- !Flag
  description: add header for timing information [none].
  synonyms:
  - --timeit-header
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: OUTPUT filename pattern for various methods [%s].
  synonyms:
  - -P
  - --output-filename-pattern
  args: !SimpleFlagArg
    name: OUTPUT_FILENAME_PATTERN
  optional: true
- !Flag
  description: force over-writing of existing files.
  synonyms:
  - -F
  - --force-output
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: file to read stdin from [default = stdin].
  synonyms:
  - -I
  - --stdin
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: file with logging information [default = stdout].
  synonyms:
  - -L
  - --log
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: file with error information [default = stderr].
  synonyms:
  - -E
  - --error
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: file where output is to go [default = stdout].
  synonyms:
  - -S
  - --stdout
  args: !SimpleFlagArg
    name: FILE
  optional: true
command:
- gat-plot.py
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "Usage: \ngat-plot - plot results from a gat analysis\n===========================================\n\
  \n:Author: Andreas Heger\n:Release: $Id$\n:Date: |today|\n:Tags: Python\n\nPurpose\n\
  -------\n\nThis script takes the results of a ``gat-run.py` or ``gat-compare.py``\n\
  and plots the results.\n\nThis script requires matplotlib.\n\nUsage\n-----\n\nExample::\n\
  \n   python gat-plot.py --input-filename-results=gat.results.tsv.gz\n   python gat-plot.py\
  \ --input-filename-counts=gat.counts.tsv.gz\n \nType::\n\n   python gatplot.py --help\n\
  \nfor command line help.\n\nDocumentation\n-------------\n\nCode\n----\n\n\n\nOptions:\n\
  \  --version             show program's version number and exit\n  -h, --help  \
  \          show this help message and exit\n  -l SAMPLE_FILES, --sample-file=SAMPLE_FILES\n\
  \                        filename with sample files. Start processing from\n   \
  \                     samples [default=[]].\n  -o OUTPUT_ORDER, --order=OUTPUT_ORDER\n\
  \                        order results in output by fold, track, etc.\n        \
  \                [default=fold].\n  -p PVALUE_METHOD, --pvalue-method=PVALUE_METHOD\n\
  \                        type of pvalue reported [default=empirical].\n  --results-file=INPUT_FILENAME_RESULTS\n\
  \                        start processing from results - no segments required\n\
  \                        [default=none].\n  --output-plots-pattern=OUTPUT_PLOTS_PATTERN\n\
  \                        output pattern for plots [default=none]\n  --output-samples-pattern=OUTPUT_SAMPLES_PATTERN\n\
  \                        output pattern for samples. Samples are stored in bed\n\
  \                        format, one for  each segment [default=none]\n  --plots=PLOTS\
  \         plots to be created [default=[]].\n\n  Script timing options:\n    --timeit=TIMEIT_FILE\n\
  \                        store timeing information in file [none].\n    --timeit-name=TIMEIT_NAME\n\
  \                        name in timing file for this class of jobs [all].\n   \
  \ --timeit-header     add header for timing information [none].\n\n  Common options:\n\
  \    -v LOGLEVEL, --verbose=LOGLEVEL\n                        loglevel [1]. The\
  \ higher, the more output.\n    -?                  output short help (command line\
  \ options only.\n\n  Input/output options:\n    -P OUTPUT_FILENAME_PATTERN, --output-filename-pattern=OUTPUT_FILENAME_PATTERN\n\
  \                        OUTPUT filename pattern for various methods [%s].\n   \
  \ -F, --force-output  force over-writing of existing files.\n    -I FILE, --stdin=FILE\n\
  \                        file to read stdin from [default = stdin].\n    -L FILE,\
  \ --log=FILE\n                        file with logging information [default = stdout].\n\
  \    -E FILE, --error=FILE\n                        file with error information\
  \ [default = stderr].\n    -S FILE, --stdout=FILE\n                        file\
  \ where output is to go [default = stdout].\n"
generated_using:
- --help
