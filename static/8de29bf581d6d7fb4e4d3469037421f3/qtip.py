from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, File, Int, Float, Boolean, String, Directory

Qtip_V0_1_0 = CommandToolBuilder(tool="qtip", base_command=["qtip"], inputs=[ToolInput(tag="in_ref", input_type=Array(t=File(), optional=True), prefix="--ref", doc=InputDocumentation(doc="FASTA file, or many FASTAs separated by spaces,\ncontaining reference genome sequences (default: None)")), ToolInput(tag="in_unpaired_read_name", input_type=Array(t=File(), optional=True), prefix="--U", doc=InputDocumentation(doc="Unpaired read FASTQ file name, or many FASTQ file\nnames separated by spaces (default: None)")), ToolInput(tag="in_m_one", input_type=Array(t=File(), optional=True), prefix="--m1", doc=InputDocumentation(doc="Mate 1 FASTQ file name, or many FASTQ file names\nseparated by spaces; must be specified in same order\nas --m2 (default: None)")), ToolInput(tag="in_m_two", input_type=Array(t=File(), optional=True), prefix="--m2", doc=InputDocumentation(doc="Mate 2 FASTQ file name, or many FASTQ file names\nseparated by spaces; must be specified in same order\nas --m1 (default: None)")), ToolInput(tag="in_index", input_type=File(optional=True), prefix="--index", doc=InputDocumentation(doc="Index file to use; specify the appropriate prefix,\ne.g. Bowtie 2 index file name without the .X.bt2\nsuffix. (default: None)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Integer to initialize pseudo-random generator\n(default: 99099)")), ToolInput(tag="in_max_allowed_fra_glen", input_type=Int(optional=True), prefix="--max-allowed-fraglen", doc=InputDocumentation(doc="When simulating fragments, longer fragments are\ntruncated to this length (default: 100000)")), ToolInput(tag="in_input_model_size", input_type=Int(optional=True), prefix="--input-model-size", doc=InputDocumentation(doc="Maximum # templates to keep when building an input\nmodel. There are 4 separate models for each alignment\ncategory and this governs the maximum for all 4.\n(default: 30000)")), ToolInput(tag="in_sim_unp_min", input_type=Int(optional=True), prefix="--sim-unp-min", doc=InputDocumentation(doc="If predictions for unpaired reads are needed, simulate\nat least this # of unpaired reads. (default: 30000)")), ToolInput(tag="in_sim_conc_min", input_type=Int(optional=True), prefix="--sim-conc-min", doc=InputDocumentation(doc="If predictions for concordantly aligned reads are\nneeded, simulate at least this # of concordant pairs.\n(default: 30000)")), ToolInput(tag="in_sim_disc_min", input_type=Int(optional=True), prefix="--sim-disc-min", doc=InputDocumentation(doc="If predictions for discordantly aligned reads are\nneeded, simulate at least this # of discordant pairs.\n(default: 10000)")), ToolInput(tag="in_sim_bad_end_min", input_type=Int(optional=True), prefix="--sim-bad-end-min", doc=InputDocumentation(doc="If predictions for ends with an unaligned mate are\nneeded, simulate at least this # of pairs with a bad\nend. (default: 10000)")), ToolInput(tag="in_sim_function", input_type=Int(optional=True), prefix="--sim-function", doc=InputDocumentation(doc="|linear|const\nFunction giving # of tandem reads to simulate in a\ncategory; parameter is the number of input reads. See\nalso: --sim-factor. (default: sqrt)")), ToolInput(tag="in_sim_factor", input_type=Float(optional=True), prefix="--sim-factor", doc=InputDocumentation(doc="This is multiplied with X (if --sim-function=linear)\nor with sqrt(X) (if --sim-function=sqrt) or with 1 (if\n--sim-function=const) to calculate # tandem reads to\nsimulate in a given category, where X is # of input\nreads in that category. (default: 45.0)")), ToolInput(tag="in_wiggle", input_type=Int(optional=True), prefix="--wiggle", doc=InputDocumentation(doc="Wiggle room to allow in starting position when\ndetermining whether alignment is correct (default: 30)")), ToolInput(tag="in_bt_two_exe", input_type=File(optional=True), prefix="--bt2-exe", doc=InputDocumentation(doc="Path to Bowtie 2 aligner exe, 'bowtie2' (default:\nNone)")), ToolInput(tag="in_bwa_exe", input_type=File(optional=True), prefix="--bwa-exe", doc=InputDocumentation(doc="Path to BWA-MEM aligner exe, 'bwa' (default: None)")), ToolInput(tag="in_snap_exe", input_type=File(optional=True), prefix="--snap-exe", doc=InputDocumentation(doc="Path to SNAP aligner exe, 'snap-aligner' (default:\nNone)")), ToolInput(tag="in_aligner", input_type=Int(optional=True), prefix="--aligner", doc=InputDocumentation(doc="Which aligner to use: bowtie2 | bwa-mem | snap\n(default: bowtie2)")), ToolInput(tag="in_write_orig_mapq", input_type=Boolean(optional=True), prefix="--write-orig-mapq", doc=InputDocumentation(doc="Write original MAPQ as an extra field in output SAM\n(default: False)")), ToolInput(tag="in_write_precise_mapq", input_type=Boolean(optional=True), prefix="--write-precise-mapq", doc=InputDocumentation(doc="Write a more precise MAPQ prediction as an extra field\nin output SAM (default: False)")), ToolInput(tag="in_orig_mapq_flag", input_type=String(optional=True), prefix="--orig-mapq-flag", doc=InputDocumentation(doc=":X\nIf --write-orig-mapq is specified, store original MAPQ\nin this extra SAM field (default: Zm:Z)")), ToolInput(tag="in_precise_mapq_flag", input_type=String(optional=True), prefix="--precise-mapq-flag", doc=InputDocumentation(doc=":X\nIf --write-precise-mapq is specified, store original\nMAPQ in this extra SAM field (default: Zp:Z)")), ToolInput(tag="in_keep_z_tz", input_type=Boolean(optional=True), prefix="--keep-ztz", doc=InputDocumentation(doc="Don't remove ZT:Z field, with aligner-reported feature\ndata, from the final output SAM (default: False)")), ToolInput(tag="in_model_family", input_type=String(optional=True), prefix="--model-family", doc=InputDocumentation(doc="{RandomForest | ExtraTrees | GradientBoosting}\n(default: RandomForest)")), ToolInput(tag="in_num_trees", input_type=Int(optional=True), prefix="--num-trees", doc=InputDocumentation(doc=",int,...\nnumber of decision trees to try; relevant for all\nmodel families (default: 30)")), ToolInput(tag="in_max_features", input_type=Float(optional=True), prefix="--max-features", doc=InputDocumentation(doc=",float,...\nmaximum number of features to consider at each\ndecision tree node; relevant for RandomForest and\nExtraTrees (default: 0.1,0.2,0.25,0.3,0.35,0.4,0.45)")), ToolInput(tag="in_max_leaf_nodes", input_type=Int(optional=True), prefix="--max-leaf-nodes", doc=InputDocumentation(doc=",int,...\nmaximum number of leaf nodes to include in a decision\ntree; relevant for RandomForest and ExtraTrees\n(default: 35)")), ToolInput(tag="in_learning_rate", input_type=Float(optional=True), prefix="--learning-rate", doc=InputDocumentation(doc=",float,...\nlearning rate to use when fitting; only relevant for\nGradientBoosting (default: 0.75,0.8,0.85,0.9,0.95,1.0)")), ToolInput(tag="in_optimization_tolerance", input_type=Float(optional=True), prefix="--optimization-tolerance", doc=InputDocumentation(doc="When using hill climbing procedure to optimize\nhyperparamters,stop when OOB score can't be improved\nby this relative factor (default: 0.01)")), ToolInput(tag="in_re_weight_ratio", input_type=Float(optional=True), prefix="--reweight-ratio", doc=InputDocumentation(doc="When fitting, reweigh samples so weight of highest-\nmapq alignment has this times as much weight as\nlowest-mapq. (default: 1.0)")), ToolInput(tag="in_re_weight_mapq", input_type=Boolean(optional=True), prefix="--reweight-mapq", doc=InputDocumentation(doc="When fitting, reweigh samples according to initially-\npredicted mapq. Higher predictions get more weight\n(default: False)")), ToolInput(tag="in_re_weight_mapq_offset", input_type=Float(optional=True), prefix="--reweight-mapq-offset", doc=InputDocumentation(doc="Add this to every MAPQ before reweighting (default:\n10.0)")), ToolInput(tag="in_collapse", input_type=Boolean(optional=True), prefix="--collapse", doc=InputDocumentation(doc="Remove redundant rows just before prediction. Usually\nnot a net win. (default: False)")), ToolInput(tag="in_max_rows", input_type=Int(optional=True), prefix="--max-rows", doc=InputDocumentation(doc="Maximum number of rows (alignments) to feed at once to\nthe prediction function (default: 250000)")), ToolInput(tag="in_no_oob", input_type=Boolean(optional=True), prefix="--no-oob", doc=InputDocumentation(doc="Don't use out-of-bag score when fitting\nhyperparameters -- use cross validation instead. No\neffect for models that don't calculate OOB score.\n(default: False)")), ToolInput(tag="in_skip_rewrite", input_type=Boolean(optional=True), prefix="--skip-rewrite", doc=InputDocumentation(doc="Skip the final SAM rewriting step; other results,\nincluding any fit and prediction assessments\nrequested, are still written. (default: False)")), ToolInput(tag="in_profile_memory", input_type=Boolean(optional=True), prefix="--profile-memory", doc=InputDocumentation(doc="Use guppy/heapy to profile memory and periodically\nprint heap usage (default: False)")), ToolInput(tag="in_predict_for_training", input_type=Boolean(optional=True), prefix="--predict-for-training", doc=InputDocumentation(doc="Make predictions and produce associated plots/output\nfiles for training (tandem) data (default: False)")), ToolInput(tag="in_try_include_mapq", input_type=Boolean(optional=True), prefix="--try-include-mapq", doc=InputDocumentation(doc="Try both with and without including the tool-predicted\nMAPQ as a feature; default: does not include it\n(default: False)")), ToolInput(tag="in_subsampling_series", input_type=Float(optional=True), prefix="--subsampling-series", doc=InputDocumentation(doc="Comma separated list of subsampling fractions to try\n(default: 1.0)")), ToolInput(tag="in_trials", input_type=Int(optional=True), prefix="--trials", doc=InputDocumentation(doc="Number of times to repeat fitting/prediction (default:\n1)")), ToolInput(tag="in_assess_accuracy", input_type=Boolean(optional=True), prefix="--assess-accuracy", doc=InputDocumentation(doc="When correctness can be inferred from simulated read\nnames, assess accuracy of old and new MAPQ predictions\n(default: False)")), ToolInput(tag="in_assess_limit", input_type=Int(optional=True), prefix="--assess-limit", doc=InputDocumentation(doc="The maximum number of alignments to assess when\nassessing accuracy (default: 100000000)")), ToolInput(tag="in_temp_directory", input_type=File(optional=True), prefix="--temp-directory", doc=InputDocumentation(doc="Write temporary files to this directory; when None:\nuses environment variables like TMPDIR, TEMP, etc\n(default: None)")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="--output-directory", doc=InputDocumentation(doc="Write outputs to this directory (default: None)")), ToolInput(tag="in_vanilla_output", input_type=File(optional=True), prefix="--vanilla-output", doc=InputDocumentation(doc="Only write final SAM file; suppress all other output\n(default: None)")), ToolInput(tag="in_keep_intermediates", input_type=Directory(optional=True), prefix="--keep-intermediates", doc=InputDocumentation(doc="Keep intermediates in output directory; if False,\nintermediates are written to a temporary directory\nthen deleted (default: False)")), ToolInput(tag="in_profile", input_type=Boolean(optional=True), prefix="--profile", doc=InputDocumentation(doc="Print profiling info (default: False)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be talkative (default: False)"))], outputs=[ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="Write outputs to this directory (default: None)")), ToolOutput(tag="out_vanilla_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_vanilla_output", type_hint=File()), doc=OutputDocumentation(doc="Only write final SAM file; suppress all other output\n(default: None)")), ToolOutput(tag="out_keep_intermediates", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_keep_intermediates", type_hint=File()), doc=OutputDocumentation(doc="Keep intermediates in output directory; if False,\nintermediates are written to a temporary directory\nthen deleted (default: False)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Qtip_V0_1_0().translate("wdl", allow_empty_container=True)

