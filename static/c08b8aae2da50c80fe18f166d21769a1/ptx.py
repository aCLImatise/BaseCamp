from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File, Int

Ptx_V0_1_0 = CommandToolBuilder(tool="ptx", base_command=["ptx"], inputs=[ToolInput(tag="in_auto_reference", input_type=Boolean(optional=True), prefix="--auto-reference", doc=InputDocumentation(doc="output automatically generated references")), ToolInput(tag="in_traditional", input_type=Boolean(optional=True), prefix="--traditional", doc=InputDocumentation(doc="behave more like System V 'ptx'")), ToolInput(tag="in_flag_truncation", input_type=String(optional=True), prefix="--flag-truncation", doc=InputDocumentation(doc="use STRING for flagging line truncations.\nThe default is '/'")), ToolInput(tag="in_macro_name", input_type=String(optional=True), prefix="--macro-name", doc=InputDocumentation(doc="macro name to use instead of 'xx'")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="generate output as TeX directives")), ToolInput(tag="in_right_side_refs", input_type=Boolean(optional=True), prefix="--right-side-refs", doc=InputDocumentation(doc="put references at right, not counted in -w")), ToolInput(tag="in_sentence_regexp", input_type=String(optional=True), prefix="--sentence-regexp", doc=InputDocumentation(doc="for end of lines or end of sentences")), ToolInput(tag="in_word_regexp", input_type=String(optional=True), prefix="--word-regexp", doc=InputDocumentation(doc="use REGEXP to match each keyword")), ToolInput(tag="in_break_file", input_type=File(optional=True), prefix="--break-file", doc=InputDocumentation(doc="word break characters in this FILE")), ToolInput(tag="in_ignore_case", input_type=Boolean(optional=True), prefix="--ignore-case", doc=InputDocumentation(doc="fold lower case to upper case for sorting")), ToolInput(tag="in_gap_size", input_type=Int(optional=True), prefix="--gap-size", doc=InputDocumentation(doc="gap size in columns between output fields")), ToolInput(tag="in_ignore_file", input_type=File(optional=True), prefix="--ignore-file", doc=InputDocumentation(doc="read ignore word list from FILE")), ToolInput(tag="in_only_file", input_type=File(optional=True), prefix="--only-file", doc=InputDocumentation(doc="read only word list from this FILE")), ToolInput(tag="in_references", input_type=Boolean(optional=True), prefix="--references", doc=InputDocumentation(doc="first field of each line is a reference")), ToolInput(tag="in_typeset_mode", input_type=Boolean(optional=True), prefix="--typeset-mode", doc=InputDocumentation(doc="- not implemented -")), ToolInput(tag="in_width", input_type=Int(optional=True), prefix="--width", doc=InputDocumentation(doc="output width in columns, reference excluded"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ptx_V0_1_0().translate("wdl", allow_empty_container=True)

