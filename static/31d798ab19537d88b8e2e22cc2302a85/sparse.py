from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String, Float

Sparse_V0_1_0 = CommandToolBuilder(tool="sparse", base_command=["sparse"], inputs=[ToolInput(tag="in_galaxy_xml", input_type=Boolean(optional=True), prefix="--galaxy-xml", doc=InputDocumentation(doc="Print galaxy xml wrapper.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose. Prints input parameters, sequences and size information.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Be quiet.")), ToolInput(tag="in_in_del", input_type=Int(optional=True), prefix="--indel", doc=InputDocumentation(doc="(-150)\nIndel score. Score contribution of each single base insertion or\ndeletion. Indel opening score and indel score define the affine scoring\nof gaps.")), ToolInput(tag="in_in_del_loop", input_type=Int(optional=True), prefix="--indel-loop", doc=InputDocumentation(doc="(-300)\nScore for insertions and deletions of loops per base")), ToolInput(tag="in_in_del_opening", input_type=Int(optional=True), prefix="--indel-opening", doc=InputDocumentation(doc="(-750)\nIndel opening score. Score contribution of opening an insertion or\ndeletion, i.e. score for a consecutive run of deletions or insertions.\nIndel opening score and indel score define the affine scoring of gaps.")), ToolInput(tag="in_in_del_opening_loop", input_type=Int(optional=True), prefix="--indel-opening-loop", doc=InputDocumentation(doc="(-900)\nOpening score for insertions and deletions of loops")), ToolInput(tag="in_ribo_sum_file", input_type=File(optional=True), prefix="--ribosum-file", doc=InputDocumentation(doc="(RIBOSUM85_60)\nFile specifying the Ribosum base and base-pair similarities. [default:\nuse RIBOSUM85_60 without requiring a Ribosum file.]")), ToolInput(tag="in_use_ribo_sum", input_type=Boolean(optional=True), prefix="--use-ribosum", doc=InputDocumentation(doc="(true)\nUse ribosum scores for scoring base matches and base pair matches; note\nthat tau=0 suppresses any effect on the latter.")), ToolInput(tag="in_match", input_type=Int(optional=True), prefix="--match", doc=InputDocumentation(doc="(50)\nSet score contribution of a base match (unless ribosum scoring).")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="--mismatch", doc=InputDocumentation(doc="(0)\nSet score contribution of a base mismatch (unless ribosum scoring).")), ToolInput(tag="in_unpaired_penalty", input_type=Int(optional=True), prefix="--unpaired-penalty", doc=InputDocumentation(doc="(0)\nPenalty for unpaired bases")), ToolInput(tag="in_struct_weight", input_type=Int(optional=True), prefix="--struct-weight", doc=InputDocumentation(doc="(200)\nMaximal weight of 1/2 arc match. Balances structure vs. sequence score\ncontributions.")), ToolInput(tag="in_exp_prob", input_type=Int(optional=True), prefix="--exp-prob", doc=InputDocumentation(doc="Expected base pair probability. Used as background probability for base\npair scoring [default: calculated from sequence length].")), ToolInput(tag="in_tau", input_type=Int(optional=True), prefix="--tau", doc=InputDocumentation(doc="(100)\nTau factor. Factor for contribution of sequence similarity in an arc\nmatch (in percent). tau=0 does not penalize any sequence information\nincluding compensatory mutations at arc matches, while tau=100 scores\nsequence similarity at ends of base matches (if a scoring matrix like\nribosum is used, this adds the contributions for base pair match from the\nmatrix). [default tau=0!]")), ToolInput(tag="in_exclusion", input_type=Int(optional=True), prefix="--exclusion", doc=InputDocumentation(doc="(0)\nScore contribution per exclusion in structure local alignment. Set to\nzero for unrestricted structure locality.")), ToolInput(tag="in_stacking", input_type=Boolean(optional=True), prefix="--stacking", doc=InputDocumentation(doc="Use stacking terms (requires stack-probs by RNAfold -p2)")), ToolInput(tag="in_new_stacking", input_type=Boolean(optional=True), prefix="--new-stacking", doc=InputDocumentation(doc="Use new stacking terms (requires stack-probs by RNAfold -p2)")), ToolInput(tag="in_extended_pf", input_type=Boolean(optional=True), prefix="--extended-pf", doc=InputDocumentation(doc="Use extended precision for the computation of sequence envelopes. This\nenables handling significantly larger instances. [default]")), ToolInput(tag="in_quad_pf", input_type=Boolean(optional=True), prefix="--quad-pf", doc=InputDocumentation(doc="Use quad precision for partition function values. Even more precision\nthan extended pf, but usually much slower (overrides extended-pf).")), ToolInput(tag="in_width", input_type=Int(optional=True), prefix="--width", doc=InputDocumentation(doc="(120)\nWidth of alignment output.")), ToolInput(tag="in_clustal", input_type=File(optional=True), prefix="--clustal", doc=InputDocumentation(doc="Write alignment in ClustalW (aln) format to given file.")), ToolInput(tag="in_stockholm", input_type=File(optional=True), prefix="--stockholm", doc=InputDocumentation(doc="Write alignment Stockholm format to given file.")), ToolInput(tag="in_pp", input_type=File(optional=True), prefix="--pp", doc=InputDocumentation(doc="Write alignment in PP format to given file.")), ToolInput(tag="in_ali_fold_consensus_dp", input_type=Boolean(optional=True), prefix="--alifold-consensus-dp", doc=InputDocumentation(doc="Compute consensus dot plot by alifold (warning: this may fail for long\nsequences).")), ToolInput(tag="in_consensus_structure", input_type=String(optional=True), prefix="--consensus-structure", doc=InputDocumentation(doc="(alifold)\nType of consensus structures written to screen and stockholm output\n[alifold|mea|none] (default: none).")), ToolInput(tag="in_consensus_gamma", input_type=Float(optional=True), prefix="--consensus-gamma", doc=InputDocumentation(doc="(1.0)\nBase pair weight for mea consensus computation. For MEA, base pairs are\nscored by their pair probability times 2 gamma; unpaired bases, by their\nunpaired probability.")), ToolInput(tag="in_local_output", input_type=Boolean(optional=True), prefix="--local-output", doc=InputDocumentation(doc="Output only local sub-alignment (to std out).")), ToolInput(tag="in_local_file_output", input_type=File(optional=True), prefix="--local-file-output", doc=InputDocumentation(doc="Write only local sub-alignment to output files.")), ToolInput(tag="in_pos_output", input_type=Boolean(optional=True), prefix="--pos-output", doc=InputDocumentation(doc="Output only local sub-alignment positions.")), ToolInput(tag="in_write_structure", input_type=Boolean(optional=True), prefix="--write-structure", doc=InputDocumentation(doc="Write guidance structure in output.")), ToolInput(tag="in_special_gap_symbols", input_type=Boolean(optional=True), prefix="--special-gap-symbols", doc=InputDocumentation(doc="Special distinct gap symbols for loop gaps or gaps caused by\nsparsification")), ToolInput(tag="in_stopwatch", input_type=Boolean(optional=True), prefix="--stopwatch", doc=InputDocumentation(doc="Print run time informations.")), ToolInput(tag="in_min_prob", input_type=Int(optional=True), prefix="--min-prob", doc=InputDocumentation(doc="(0.001)\nMinimal probability. Only base pairs of at least this probability are\ntaken into account.")), ToolInput(tag="in_prob_unpaired_in_loop_threshold", input_type=Float(optional=True), prefix="--prob-unpaired-in-loop-threshold", doc=InputDocumentation(doc="(0.00005)\nThreshold for prob_unpaired_in_loop")), ToolInput(tag="in_prob_base_pair_in_loop_threshold", input_type=Float(optional=True), prefix="--prob-basepair-in-loop-threshold", doc=InputDocumentation(doc="(0.0001)\nThreshold for prob_basepair_in_loop")), ToolInput(tag="in_max_bps_length_ratio", input_type=Int(optional=True), prefix="--max-bps-length-ratio", doc=InputDocumentation(doc="(0.0)\nMaximal ratio of #base pairs divided by sequence length. This serves as a\nsecond filter on the 'significant' base pairs. [default: 0.0 = no\neffect].")), ToolInput(tag="in_max_uil_length_ratio", input_type=Int(optional=True), prefix="--max-uil-length-ratio", doc=InputDocumentation(doc="(0.0)\nMaximal ratio of #unpaired bases in loops divided by sequence length\n(def: no effect)")), ToolInput(tag="in_max_bp_il_length_ratio", input_type=Int(optional=True), prefix="--max-bpil-length-ratio", doc=InputDocumentation(doc="(0.0)\nMaximal ratio of #base pairs in loops divided by loop length (def: no\neffect)")), ToolInput(tag="in_max_diff_am", input_type=Int(optional=True), prefix="--max-diff-am", doc=InputDocumentation(doc="(-1)\nMaximal difference for sizes of matched arcs. [-1=off]")), ToolInput(tag="in_max_diff", input_type=Int(optional=True), prefix="--max-diff", doc=InputDocumentation(doc="(-1)\nMaximal difference for positions of alignment traces (and aligned bases).\n[-1=off]")), ToolInput(tag="in_max_diff_at_am", input_type=Int(optional=True), prefix="--max-diff-at-am", doc=InputDocumentation(doc="(-1)\nMaximal difference for positions of alignment traces at arc match ends.\n[-1=off]")), ToolInput(tag="in_max_diff_aln", input_type=File(optional=True), prefix="--max-diff-aln", doc=InputDocumentation(doc="()\nMaximal difference relative to given alignment (file in clustalw format)")), ToolInput(tag="in_max_diff_pw_aln", input_type=Int(optional=True), prefix="--max-diff-pw-aln", doc=InputDocumentation(doc="()\nMaximal difference relative to given alignment (string, delim=AMPERSAND)")), ToolInput(tag="in_max_diff_relax", input_type=Boolean(optional=True), prefix="--max-diff-relax", doc=InputDocumentation(doc="Relax deviation constraints in multiple aligmnent")), ToolInput(tag="in_min_trace_probability", input_type=Int(optional=True), prefix="--min-trace-probability", doc=InputDocumentation(doc="(1e-5)\nMinimal sequence alignment probability of potential traces\n(probability-based sequence alignment envelope) [default=1e-4].")), ToolInput(tag="in_me_a_alignment", input_type=Boolean(optional=True), prefix="--mea-alignment", doc=InputDocumentation(doc="Perform maximum expected accuracy alignment (instead of using the default\nsimilarity scoring).")), ToolInput(tag="in_match_prob_method", input_type=Int(optional=True), prefix="--match-prob-method", doc=InputDocumentation(doc="(0)\nSelect method for computing sequence-based base match probablities (to be\nused for mea-type alignment scores). Methods: 1=probcons-style from HMM,\n2=probalign-style from PFs, 3=from PFs, local")), ToolInput(tag="in_prob_cons_file", input_type=File(optional=True), prefix="--probcons-file", doc=InputDocumentation(doc="Read parameters for probcons-like calculation of match probabilities from\nprobcons parameter file.")), ToolInput(tag="in_temperature_ali_pf", input_type=Int(optional=True), prefix="--temperature-alipf", doc=InputDocumentation(doc="(300)\nTemperature for the /sequence alignment/ partition functions used by the\nprobcons-like sequence-based match/trace probability computation (this\ntemperature is different from the 'physical' temperature of RNA\nfolding!).")), ToolInput(tag="in_pf_struct_weight", input_type=Int(optional=True), prefix="--pf-struct-weight", doc=InputDocumentation(doc="(200)\nStructure weight in PF computations (for the computation of\nsequence-based match probabilties from partition functions).")), ToolInput(tag="in_me_a_gap_cost", input_type=Boolean(optional=True), prefix="--mea-gapcost", doc=InputDocumentation(doc="Use gap cost in mea alignment")), ToolInput(tag="in_me_a_alpha", input_type=Int(optional=True), prefix="--mea-alpha", doc=InputDocumentation(doc="(0)\nWeight alpha for MEA")), ToolInput(tag="in_me_a_beta", input_type=Int(optional=True), prefix="--mea-beta", doc=InputDocumentation(doc="(200)\nWeight beta for MEA")), ToolInput(tag="in_me_a_gamma", input_type=Int(optional=True), prefix="--mea-gamma", doc=InputDocumentation(doc="(100)\nWeight gamma for MEA")), ToolInput(tag="in_probability_scale", input_type=Int(optional=True), prefix="--probability-scale", doc=InputDocumentation(doc="(10000)\nScale for probabilities/resolution of mea score")), ToolInput(tag="in_write_match_probs", input_type=File(optional=True), prefix="--write-match-probs", doc=InputDocumentation(doc="Write match probs to file (don't align!).")), ToolInput(tag="in_read_match_probs", input_type=File(optional=True), prefix="--read-match-probs", doc=InputDocumentation(doc="Read match probabilities from file.")), ToolInput(tag="in_write_arc_match_scores", input_type=File(optional=True), prefix="--write-arcmatch-scores", doc=InputDocumentation(doc="Write arcmatch scores (don't align!)")), ToolInput(tag="in_read_arc_match_scores", input_type=File(optional=True), prefix="--read-arcmatch-scores", doc=InputDocumentation(doc="Read arcmatch scores.")), ToolInput(tag="in_read_arc_match_probs", input_type=File(optional=True), prefix="--read-arcmatch-probs", doc=InputDocumentation(doc="Read arcmatch probabilities (weighted by factor mea_beta/100)")), ToolInput(tag="in_no_lp", input_type=Boolean(optional=True), prefix="--noLP", doc=InputDocumentation(doc="Disallow lonely pairs in prediction and alignment.")), ToolInput(tag="in_max_bp_span", input_type=Int(optional=True), prefix="--maxBPspan", doc=InputDocumentation(doc="(-1)\nLimit maximum base pair span [default=off].")), ToolInput(tag="in_relaxed_anchors", input_type=Boolean(optional=True), prefix="--relaxed-anchors", doc=InputDocumentation(doc="Use relaxed semantics of anchor constraints [default=strict semantics].")), ToolInput(tag="in_constraints_dot", input_type=String(), position=0, doc=InputDocumentation(doc="Report bugs to <miladim (at) informatik.uni-freiburg.de>."))], outputs=[ToolOutput(tag="out_local_file_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_local_file_output", type_hint=File()), doc=OutputDocumentation(doc="Write only local sub-alignment to output files."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sparse_V0_1_0().translate("wdl", allow_empty_container=True)

