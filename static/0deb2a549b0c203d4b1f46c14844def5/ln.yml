!Command
command:
- ln
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - --backup
  description: '[=CONTROL]      make a backup of each existing destination file'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -b
  description: like --backup but does not accept an argument
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -d
  - -F
  - --directory
  description: "allow the superuser to attempt to hard link\ndirectories (note: will\
    \ probably fail due to\nsystem restrictions, even for the superuser)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -f
  - --force
  description: remove existing destination files
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -i
  - --interactive
  description: prompt whether to remove destinations
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -L
  - --logical
  description: dereference TARGETs that are symbolic links
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -n
  - --no-dereference
  description: "treat LINK_NAME as a normal file if\nit is a symbolic link to a directory"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -P
  - --physical
  description: make hard links directly to symbolic links
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -r
  - --relative
  description: create symbolic links relative to link location
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  - --symbolic
  description: make symbolic links instead of hard links
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -S
  - --suffix
  description: override the usual backup suffix
  args: !SimpleFlagArg
    name: SUFFIX
- !Flag
  optional: true
  synonyms:
  - -t
  - --target-directory
  description: "specify the DIRECTORY in which to create\nthe links"
  args: !SimpleFlagArg
    name: DIRECTORY
- !Flag
  optional: true
  synonyms:
  - -T
  - --no-target-directory
  description: treat LINK_NAME as a normal file always
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -v
  - --verbose
  description: print name of each linked file
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - --help
  description: display this help and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - --version
  description: output version information and exit
  args: !EmptyFlagArg {}
help_text: "Usage: ln [OPTION]... [-T] TARGET LINK_NAME\n  or:  ln [OPTION]... TARGET\n\
  \  or:  ln [OPTION]... TARGET... DIRECTORY\n  or:  ln [OPTION]... -t DIRECTORY TARGET...\n\
  In the 1st form, create a link to TARGET with the name LINK_NAME.\nIn the 2nd form,\
  \ create a link to TARGET in the current directory.\nIn the 3rd and 4th forms, create\
  \ links to each TARGET in DIRECTORY.\nCreate hard links by default, symbolic links\
  \ with --symbolic.\nBy default, each destination (name of new link) should not already\
  \ exist.\nWhen creating hard links, each TARGET must exist.  Symbolic links\ncan\
  \ hold arbitrary text; if later resolved, a relative link is\ninterpreted in relation\
  \ to its parent directory.\n\nMandatory arguments to long options are mandatory\
  \ for short options too.\n      --backup[=CONTROL]      make a backup of each existing\
  \ destination file\n  -b                          like --backup but does not accept\
  \ an argument\n  -d, -F, --directory         allow the superuser to attempt to hard\
  \ link\n                                directories (note: will probably fail due\
  \ to\n                                system restrictions, even for the superuser)\n\
  \  -f, --force                 remove existing destination files\n  -i, --interactive\
  \           prompt whether to remove destinations\n  -L, --logical             \
  \  dereference TARGETs that are symbolic links\n  -n, --no-dereference        treat\
  \ LINK_NAME as a normal file if\n                                it is a symbolic\
  \ link to a directory\n  -P, --physical              make hard links directly to\
  \ symbolic links\n  -r, --relative              create symbolic links relative to\
  \ link location\n  -s, --symbolic              make symbolic links instead of hard\
  \ links\n  -S, --suffix=SUFFIX         override the usual backup suffix\n  -t, --target-directory=DIRECTORY\
  \  specify the DIRECTORY in which to create\n                                the\
  \ links\n  -T, --no-target-directory   treat LINK_NAME as a normal file always\n\
  \  -v, --verbose               print name of each linked file\n      --help    \
  \ display this help and exit\n      --version  output version information and exit\n\
  \nThe backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\n\
  The version control method may be selected via the --backup option or through\n\
  the VERSION_CONTROL environment variable.  Here are the values:\n\n  none, off \
  \      never make backups (even if --backup is given)\n  numbered, t     make numbered\
  \ backups\n  existing, nil   numbered if numbered backups exist, simple otherwise\n\
  \  simple, never   always make simple backups\n\nUsing -s ignores -L and -P.  Otherwise,\
  \ the last option specified controls\nbehavior when a TARGET is a symbolic link,\
  \ defaulting to -P.\n\nGNU coreutils online help: <https://www.gnu.org/software/coreutils/>\n\
  Report any translation bugs to <https://translationproject.org/team/>\nFull documentation\
  \ <https://www.gnu.org/software/coreutils/ln>\nor available locally via: info '(coreutils)\
  \ ln invocation'\n"
generated_using:
- --help
docker_image:
