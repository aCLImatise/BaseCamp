from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Rnacofold_V0_1_0 = CommandToolBuilder(tool="RNAcofold", base_command=["RNAcofold"], inputs=[ToolInput(tag="in_detailed_help", input_type=Boolean(optional=True), prefix="--detailed-help", doc=InputDocumentation(doc="Print help, including all details and hidden\noptions, and exit")), ToolInput(tag="in_full_help", input_type=Boolean(optional=True), prefix="--full-help", doc=InputDocumentation(doc="Print help, including hidden options, and exit")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose.\n(default=off)")), ToolInput(tag="in_jobs", input_type=Boolean(optional=True), prefix="--jobs", doc=InputDocumentation(doc="[=number]           Split batch input into jobs and start\nprocessing in parallel using multiple\nthreads. A value of 0 indicates to use as\nmany parallel threads as computation cores\nare available.\n(default=`0')")), ToolInput(tag="in_nops", input_type=Boolean(optional=True), prefix="--noPS", doc=InputDocumentation(doc="Do not produce postscript drawing of the mfe")), ToolInput(tag="in_noconv", input_type=Boolean(optional=True), prefix="--noconv", doc=InputDocumentation(doc="Do not automatically substitute nucleotide\n'T' with 'U'\n(default=off)")), ToolInput(tag="in_auto_id", input_type=Boolean(optional=True), prefix="--auto-id", doc=InputDocumentation(doc="Automatically generate an ID for each sequence.\n(default=off)")), ToolInput(tag="in_id_prefix", input_type=File(optional=True), prefix="--id-prefix", doc=InputDocumentation(doc="Prefix for automatically generated IDs (as used\nin output file names)\n(default=`sequence')")), ToolInput(tag="in_max_bp_span", input_type=Int(optional=True), prefix="--maxBPspan", doc=InputDocumentation(doc="Set the maximum base pair span\n(default=`-1')")), ToolInput(tag="in_constraint", input_type=Boolean(optional=True), prefix="--constraint", doc=InputDocumentation(doc="[=<filename>] Calculate structures subject to constraints.\n(default=`')")), ToolInput(tag="in_batch", input_type=Boolean(optional=True), prefix="--batch", doc=InputDocumentation(doc="Use constraints for multiple sequences.\n(default=off)")), ToolInput(tag="in_canonical_bp_only", input_type=Boolean(optional=True), prefix="--canonicalBPonly", doc=InputDocumentation(doc="Remove non-canonical base pairs from the\nstructure constraint\n(default=off)")), ToolInput(tag="in_enforce_constraint", input_type=Boolean(optional=True), prefix="--enforceConstraint", doc=InputDocumentation(doc="Enforce base pairs given by round brackets ( )\nin structure constraint\n(default=off)")), ToolInput(tag="in_shape", input_type=File(optional=True), prefix="--shape", doc=InputDocumentation(doc="Use SHAPE reactivity data to guide structure")), ToolInput(tag="in_shape_conversion", input_type=String(optional=True), prefix="--shapeConversion", doc=InputDocumentation(doc="/C/S/L/O  + [optional parameters]\nSelect method to convert SHAPE reactivities to\npairing probabilities.\n(default=`O')")), ToolInput(tag="in_part_func", input_type=Boolean(optional=True), prefix="--partfunc", doc=InputDocumentation(doc="[=INT]          Calculate the partition function and base\npairing probability matrix in addition to the\nmfe structure. Default is calculation of mfe\nstructure only.\n(default=`1')")), ToolInput(tag="in_all_pf", input_type=Boolean(optional=True), prefix="--all_pf", doc=InputDocumentation(doc="[=INT]            Compute the partition function and free\nenergies not only of the hetero-dimer\nconsisting of the two input sequences (the\n'AB dimer'), but also of the homo-dimers AA\nand BB as well as A and B monomers.\n(default=`1')")), ToolInput(tag="in_concentrations", input_type=Boolean(optional=True), prefix="--concentrations", doc=InputDocumentation(doc="In addition to everything listed under the -a\noption, read in initial monomer\nconcentrations and compute the expected\nequilibrium concentrations of the 5 possible\nspecies (AB, AA, BB, A, B).\n(default=off)")), ToolInput(tag="in_conc_file", input_type=File(optional=True), prefix="--concfile", doc=InputDocumentation(doc="Specify a file with initial concentrations for\nthe two sequences.")), ToolInput(tag="in_centroid", input_type=Boolean(optional=True), prefix="--centroid", doc=InputDocumentation(doc="Compute the centroid structure.\n(default=off)")), ToolInput(tag="in_me_a", input_type=Boolean(optional=True), prefix="--MEA", doc=InputDocumentation(doc="[=gamma]             Calculate an MEA (maximum expected accuracy)\nstructure, where the expected accuracy is\ncomputed from the pair probabilities: each\nbase pair (i,j) gets a score 2*gamma*p_ij and\nthe score of an unpaired base is given by the\nprobability of not forming a pair.\n(default=`1.')")), ToolInput(tag="in_g_quad", input_type=Boolean(optional=True), prefix="--gquad", doc=InputDocumentation(doc="Incoorporate G-Quadruplex formation into the\nstructure prediction algorithm.\n(default=off)")), ToolInput(tag="in_temp", input_type=Int(optional=True), prefix="--temp", doc=InputDocumentation(doc="Rescale energy parameters to a temperature of\ntemp C. Default is 37C.")), ToolInput(tag="in_no_tetra", input_type=Boolean(optional=True), prefix="--noTetra", doc=InputDocumentation(doc="Do not include special tabulated stabilizing\nenergies for tri-, tetra- and hexaloop\nhairpins.\n(default=off)")), ToolInput(tag="in_dangles", input_type=Int(optional=True), prefix="--dangles", doc=InputDocumentation(doc="How to treat 'dangling end' energies for\nbases adjacent to helices in free ends and\nmulti-loops\n(default=`2')")), ToolInput(tag="in_no_lp", input_type=Boolean(optional=True), prefix="--noLP", doc=InputDocumentation(doc="Produce structures without lonely pairs\n(helices of length 1).\n(default=off)")), ToolInput(tag="in_no_gu", input_type=Boolean(optional=True), prefix="--noGU", doc=InputDocumentation(doc="Do not allow GU pairs\n(default=off)")), ToolInput(tag="in_no_closing_gu", input_type=Boolean(optional=True), prefix="--noClosingGU", doc=InputDocumentation(doc="Do not allow GU pairs at the end of helices\n(default=off)")), ToolInput(tag="in_param_file", input_type=File(optional=True), prefix="--paramFile", doc=InputDocumentation(doc="Read energy parameters from paramfile, instead\nof using the default parameter set.")), ToolInput(tag="in_structure_dot", input_type=String(), position=0, doc=InputDocumentation(doc="(default=off)")), ToolInput(tag="in_predictions", input_type=String(), position=0, doc=InputDocumentation(doc="--shapeMethod=[D/Z/W] + [optional parameters]")), ToolInput(tag="in_data_dot", input_type=String(), position=0, doc=InputDocumentation(doc="(default=`D')"))], outputs=[ToolOutput(tag="out_id_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_id_prefix", type_hint=File()), doc=OutputDocumentation(doc="Prefix for automatically generated IDs (as used\nin output file names)\n(default=`sequence')"))], container="quay.io/biocontainers/viennarna:2.4.17--py36hd181a71_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rnacofold_V0_1_0().translate("wdl")

