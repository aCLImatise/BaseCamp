from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Directory

Haystac_Sample_V0_1_0 = CommandToolBuilder(tool="haystac_sample", base_command=["haystac", "sample"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Path to the sample output directory")), ToolInput(tag="in_fast_q", input_type=File(optional=True), prefix="--fastq", doc=InputDocumentation(doc="Single-end fastq input file (optionally compressed).")), ToolInput(tag="in_fast_q_r_one", input_type=File(optional=True), prefix="--fastq-r1", doc=InputDocumentation(doc="Paired-end forward strand (R1) fastq input file.")), ToolInput(tag="in_fast_q_r_two", input_type=File(optional=True), prefix="--fastq-r2", doc=InputDocumentation(doc="Paired-end reverse strand (R2) fastq input file.")), ToolInput(tag="in_sra", input_type=String(optional=True), prefix="--sra", doc=InputDocumentation(doc="Download fastq input from the SRA database")), ToolInput(tag="in_collapse", input_type=Boolean(optional=True), prefix="--collapse", doc=InputDocumentation(doc="Collapse overlapping paired-end reads, e.g. for aDNA\n(default: False)")), ToolInput(tag="in_trim_adapters", input_type=Boolean(optional=True), prefix="--trim-adapters", doc=InputDocumentation(doc="Automatically trim sequencing adapters from fastq\ninput (default: True)")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Maximum number of CPU cores to use (default: 8)")), ToolInput(tag="in_mem", input_type=Int(optional=True), prefix="--mem", doc=InputDocumentation(doc="Maximum memory (MB) to use (default: 16012)")), ToolInput(tag="in_unlock", input_type=Directory(optional=True), prefix="--unlock", doc=InputDocumentation(doc="Unlock the output directory following a crash or hard\nrestart (default: False)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Enable debugging mode (default: False)")), ToolInput(tag="in_snake_make", input_type=Boolean(optional=True), prefix="--snakemake", doc=InputDocumentation(doc="'<json>'  Pass additional flags to the `snakemake` scheduler."))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Path to the sample output directory")), ToolOutput(tag="out_unlock", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_unlock", type_hint=File()), doc=OutputDocumentation(doc="Unlock the output directory following a crash or hard\nrestart (default: False)"))], container="quay.io/biocontainers/haystac:0.3.2--py36_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Haystac_Sample_V0_1_0().translate("wdl")

