!Command
command:
- gcloud
- topic
- formats
positional:
- !Positional
  optional: false
  position: 0
  name: Formats
  description: "A format expression is used to change the default output format of\
    \ a\ncommand. Many output formats are available; some for pretty printing\nhuman-readable\
    \ output and others for returning machine-readable output.\nA format expression\
    \ has 3 parts:\nNAME\nname\nATTRIBUTES\n[ [no-]attribute-name[=value] [, ... ]\
    \ ]\nPROJECTION\n( resource-key [, ...] ) NAME is required, ATTRIBUTES are optional,\
    \ and\nPROJECTIONS may be required for some formats. Unknown attribute names\n\
    are silently ignored.\nEach gcloud list command has a default format expression.\
    \ The --format flag\ncan alter or replace the default. For example,\n--format='[box]'\n\
    adds box decorations to a default table, and\n--format=json\nlists the resource\
    \ in json format.\nThe formats and format specific attributes are:\nconfig\nA\
    \ dictionary of dictionaries in config style.\nThe format attributes are:\nexport\n\
    Display the dictionary as a list of system specific environment\nexport commands.\n\
    unset\nDisplay the dictionary as a list of system specific environment\nunset\
    \ commands.\ncsv\nComma Separated Values (http://www.ietf.org/rfc/rfc4180.txt)\
    \ with no\nkeys. This format requires a projection to define the values to be\n\
    printed.\nThe format attributes are:\ndelimiter=\"string\"\nThe string printed\
    \ between list value items, default \";\".\nno-heading\nDisables the initial key\
    \ name heading record.\nseparator=\"string\"\nThe string printed between values,\
    \ default \",\".\nterminator=\"string\"\nThe string printed after each record,\
    \ default \"\\n\" (newline).\ndefault\nAn alias for the yaml format.\ndiff\nA\
    \ unified diff of the first two projection columns.\nThe format attributes are:\n\
    format\nThe format of the diffed resources. Each resource is converted to\nthis\
    \ format and the diff of the converted resources is displayed.\nThe default is\
    \ 'flattened'.\ndisable\nDisables formatted output and does not consume the resources.\n\
    flattened\nA flattened tree. Each output line contains one key:value pair.\nThe\
    \ format attributes are:\nno-pad\nDon't print space after the separator. The default\
    \ adjusts the\nspace to align the values into the same output column. Use no-pad\n\
    for comparing resource outputs.\nseparator=SEPARATOR\nPrint SEPARATOR between\
    \ the key and value. The default is \": \".\nget\nEquivalent to the value[no-transforms]\
    \ format. Default transforms are\nnot applied to the displayed values.\njson\n\
    JSON (http://www.json.org), JavaScript Object Notation.\nThe format attributes\
    \ are:\nno-undefined\nDoes not display resource data items with null values.\n\
    list\nAn ordered list of items.\nThe format attributes are:\nalways-display-title\n\
    Display the title even if there are no records.\ncompact\nDisplay all items in\
    \ a record on one line.\nmulti\nEach projection key must have a subformat defined\
    \ by the\n:format=FORMAT-STRING attribute. For example,\n`--format=\"multi(data:format=json,\
    \ info:format='table[box](a, b, c)')\"`\nformats the data field as JSON and the\
    \ info field as a boxed table.\nnone\nDisables formatted output and consumes the\
    \ resources.\nobject\nBypasses JSON-serialization and prints the object representation\
    \ of\neach resource.\nThe format attributes are:\nseparator\nThe line printed\
    \ between resources.\nterminator\nThe line printed after each resource.\ntable\n\
    Aligned left-adjusted columns with optional title, column headings and\nsorting.\
    \ This format requires a projection to define the table columns.\nThe default\
    \ column headings are the disambiguated right hand components\nof the column keys\
    \ in ANGRY_SNAKE_CASE. For example, the projection\nkeys (first.name, last.name)\
    \ produce the default column heading\n('NAME', 'LAST_NAME').\nIf --page-size=N\
    \ is specified then output is grouped into tables with\nat most N rows. Headings,\
    \ alignment and sorting are done per-page. The\ntitle, if any, is printed before\
    \ the first table.\nThe format attributes are:\nbox\nPrints a box around the entire\
    \ table and each cell, including the\ntitle if any.\nformat=FORMAT-STRING\nPrints\
    \ the key data indented by 4 spaces using FORMAT-STRING which\ncan reference any\
    \ of the supported formats.\nno-heading\nDisables the column headings.\noptional\n\
    Does not display the column if it is empty.\npad=N\nSets the column horizontal\
    \ pad to N spaces. The default is 1 for\nbox, 2 otherwise.\ntitle=TITLE\nPrints\
    \ a centered TITLE at the top of the table, within the table\nbox if box is enabled.\n\
    text\nAn alias for the flattened format.\nvalue\nCSV with no heading and <TAB>\
    \ separator instead of <COMMA>. Used to\nretrieve individual resource values.\
    \ This format requires a projection\nto define the value(s) to be printed.\nThe\
    \ format attributes are:\ndelimiter=\"string\"\nThe string printed between list\
    \ value items, default \";\".\nquote\n\"...\" quote values that contain delimiter,\
    \ separator or terminator\nstrings.\nseparator=\"string\"\nThe string printed\
    \ between values, default \"\\t\" (tab).\nterminator=\"string\"\nThe string printed\
    \ after each record, default \"\\n\" (newline).\nyaml\nYAML (http://www.yaml.org),\
    \ YAML ain't markup language.\nThe format attributes are:\nnull=string\nDisplay\
    \ string instead of null for null/None values.\nno-undefined\nDoes not display\
    \ resource data items with null values.\nAll formats have these attributes:\n\
    disable\nDisables formatted output and does not consume the resources.\nprivate\n\
    Disables log file output. Use this for sensitive resource data that\nshould not\
    \ be displayed in log files. Explicit command line IO\nredirection overrides this\
    \ attribute."
named:
- !Flag
  optional: true
  synonyms:
  - --iam-account
  description: \
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --project
  description: \
  args: !SimpleFlagArg
    name: test-minutia-123
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    gcloud topic formats - resource formats supplementary help\n\
  \nDESCRIPTION\n    Most gcloud commands return a list of resources on success. By\
  \ default they\n    are pretty-printed on the standard output. The\n    --format=NAME[ATTRIBUTES](PROJECTION)\
  \ and --filter=EXPRESSION flags along\n    with projections can be used to format\
  \ and change the default output to a\n    more meaningful result.\n\n    To change\
  \ the default output format of a command, use the --format flag.\n    Resource formats\
  \ are described in detail below.\n\n    To select resources to be listed, use the\
  \ --filter flag. For details run $\n    gcloud topic filters.\n\n    To reach resource\
  \ items through a unique path of names from the root, use\n    resource-keys. For\
  \ details run $ gcloud topic resource-keys.\n\n    To list a subset of resource\
  \ keys in a resource, use projections. For\n    details run $ gcloud topic projections.\n\
  \n  Formats\n    A format expression is used to change the default output format\
  \ of a\n    command. Many output formats are available; some for pretty printing\n\
  \    human-readable output and others for returning machine-readable output.\n\n\
  \    A format expression has 3 parts:\n\n     NAME\n        name\n     ATTRIBUTES\n\
  \        [ [no-]attribute-name[=value] [, ... ] ]\n     PROJECTION\n        ( resource-key\
  \ [, ...] ) NAME is required, ATTRIBUTES are optional, and\n        PROJECTIONS\
  \ may be required for some formats. Unknown attribute names\n        are silently\
  \ ignored.\n\n    Each gcloud list command has a default format expression. The\
  \ --format flag\n    can alter or replace the default. For example,\n\n        --format='[box]'\n\
  \n    adds box decorations to a default table, and\n\n        --format=json\n\n\
  \    lists the resource in json format.\n\n    The formats and format specific attributes\
  \ are:\n\n     config\n        A dictionary of dictionaries in config style.\n\n\
  \        The format attributes are:\n\n         export\n            Display the\
  \ dictionary as a list of system specific environment\n            export commands.\n\
  \         unset\n            Display the dictionary as a list of system specific\
  \ environment\n            unset commands.\n\n     csv\n        Comma Separated\
  \ Values (http://www.ietf.org/rfc/rfc4180.txt) with no\n        keys. This format\
  \ requires a projection to define the values to be\n        printed.\n\n       \
  \ The format attributes are:\n\n         delimiter=\"string\"\n            The string\
  \ printed between list value items, default \";\".\n         no-heading\n      \
  \      Disables the initial key name heading record.\n         separator=\"string\"\
  \n            The string printed between values, default \",\".\n         terminator=\"\
  string\"\n            The string printed after each record, default \"\\n\" (newline).\n\
  \n     default\n        An alias for the yaml format.\n\n     diff\n        A unified\
  \ diff of the first two projection columns.\n\n        The format attributes are:\n\
  \n         format\n            The format of the diffed resources. Each resource\
  \ is converted to\n            this format and the diff of the converted resources\
  \ is displayed.\n            The default is 'flattened'.\n\n     disable\n     \
  \   Disables formatted output and does not consume the resources.\n\n     flattened\n\
  \        A flattened tree. Each output line contains one key:value pair.\n\n   \
  \     The format attributes are:\n\n         no-pad\n            Don't print space\
  \ after the separator. The default adjusts the\n            space to align the values\
  \ into the same output column. Use no-pad\n            for comparing resource outputs.\n\
  \         separator=SEPARATOR\n            Print SEPARATOR between the key and value.\
  \ The default is \": \".\n\n     get\n        Equivalent to the value[no-transforms]\
  \ format. Default transforms are\n        not applied to the displayed values.\n\
  \n     json\n        JSON (http://www.json.org), JavaScript Object Notation.\n\n\
  \        The format attributes are:\n\n         no-undefined\n            Does not\
  \ display resource data items with null values.\n\n     list\n        An ordered\
  \ list of items.\n\n        The format attributes are:\n\n         always-display-title\n\
  \            Display the title even if there are no records.\n         compact\n\
  \            Display all items in a record on one line.\n\n     multi\n        Each\
  \ projection key must have a subformat defined by the\n        :format=FORMAT-STRING\
  \ attribute. For example,\n\n            `--format=\"multi(data:format=json, info:format='table[box](a,\
  \ b, c)')\"`\n\n        formats the data field as JSON and the info field as a boxed\
  \ table.\n\n     none\n        Disables formatted output and consumes the resources.\n\
  \n     object\n        Bypasses JSON-serialization and prints the object representation\
  \ of\n        each resource.\n\n        The format attributes are:\n\n         separator\n\
  \            The line printed between resources.\n         terminator\n        \
  \    The line printed after each resource.\n\n     table\n        Aligned left-adjusted\
  \ columns with optional title, column headings and\n        sorting. This format\
  \ requires a projection to define the table columns.\n        The default column\
  \ headings are the disambiguated right hand components\n        of the column keys\
  \ in ANGRY_SNAKE_CASE. For example, the projection\n        keys (first.name, last.name)\
  \ produce the default column heading\n        ('NAME', 'LAST_NAME').\n\n       \
  \ If --page-size=N is specified then output is grouped into tables with\n      \
  \  at most N rows. Headings, alignment and sorting are done per-page. The\n    \
  \    title, if any, is printed before the first table.\n\n        The format attributes\
  \ are:\n\n         box\n            Prints a box around the entire table and each\
  \ cell, including the\n            title if any.\n         format=FORMAT-STRING\n\
  \            Prints the key data indented by 4 spaces using FORMAT-STRING which\n\
  \            can reference any of the supported formats.\n         no-heading\n\
  \            Disables the column headings.\n         optional\n            Does\
  \ not display the column if it is empty.\n         pad=N\n            Sets the column\
  \ horizontal pad to N spaces. The default is 1 for\n            box, 2 otherwise.\n\
  \         title=TITLE\n            Prints a centered TITLE at the top of the table,\
  \ within the table\n            box if box is enabled.\n\n     text\n        An\
  \ alias for the flattened format.\n\n     value\n        CSV with no heading and\
  \ <TAB> separator instead of <COMMA>. Used to\n        retrieve individual resource\
  \ values. This format requires a projection\n        to define the value(s) to be\
  \ printed.\n\n        The format attributes are:\n\n         delimiter=\"string\"\
  \n            The string printed between list value items, default \";\".\n    \
  \     quote\n            \"...\" quote values that contain delimiter, separator\
  \ or terminator\n            strings.\n         separator=\"string\"\n         \
  \   The string printed between values, default \"\\t\" (tab).\n         terminator=\"\
  string\"\n            The string printed after each record, default \"\\n\" (newline).\n\
  \n     yaml\n        YAML (http://www.yaml.org), YAML ain't markup language.\n\n\
  \        The format attributes are:\n\n         null=string\n            Display\
  \ string instead of null for null/None values.\n         no-undefined\n        \
  \    Does not display resource data items with null values.\n\n    All formats have\
  \ these attributes:\n\n     disable\n        Disables formatted output and does\
  \ not consume the resources.\n     private\n        Disables log file output. Use\
  \ this for sensitive resource data that\n        should not be displayed in log\
  \ files. Explicit command line IO\n        redirection overrides this attribute.\n\
  \nEXAMPLES\n    List a table of compute instance resources sorted by name with box\n\
  \    decorations and title Instances:\n\n        $ gcloud compute instances list\
  \ \\\n            --format='table[box,title=Instances](name:sort=1,\n         zone:title=zone,\
  \ status)'\n\n    List a nested table of the quotas of a region:\n\n        $ gcloud\
  \ compute regions describe us-central1 \\\n            --format=\"table(quotas:format='table(metric,limit,usage)')\"\
  \n\n    Print a flattened list of global quotas in CSV format:\n\n        $ gcloud\
  \ compute project-info describe --flatten='quotas[]' \\\n            --format='csv(quotas.metric,quotas.limit,quotas.usage)'\n\
  \n    List the disk interfaces for all compute instances as a compact comma\n  \
  \  separated list:\n\n        $ gcloud compute instances list \\\n            --format='value(disks[].interface.list())'\n\
  \n    List the URIs for all compute instances:\n\n        $ gcloud compute instances\
  \ list --format='value(uri())'\n\n    List the project authenticated user email\
  \ address:\n\n        $ gcloud info --format='value(config.account)'\n\n    List\
  \ resources filtered on repeated fields by projecting subfields on a\n    repeated\
  \ message:\n\n        $ gcloud alpha genomics readgroupsets list \\\n          \
  \  --format 'default(readGroups[].name)'\n\n    Return the scope of the current\
  \ instance:\n\n        $ gcloud compute zones list --format=\"value(selfLink.scope())\"\
  \n\n    selfLink is a fully qualified name. (e.g.\n    'https://www.googleapis.com/compute/v1/projects/my-project/zones/us-central1-a')\n\
  \    The previous example returns a list of just the names of each zone (e.g.\n\
  \    'us-central1-a'). This is because selfLink.scope() grabs the last part of\n\
  \    the URL segment. To extract selfLink starting from /projects and return the\n\
  \    scope of the current instance:\n\n        $ gcloud compute zones list \\\n\
  \            --format=\"value(selfLink.scope(projects))\"\n\n    List all scopes\
  \ enabled for a Compute Engine instance and flatten the\n    multi-valued resource:\n\
  \n        $ gcloud compute instances list \\\n            --format=\"flattened(name,serviceAccounts[].email,serviceAccounts\\\
  \n        [].scopes[].basename())\"\n\n    Display a multi-valued resource's service\
  \ account keys with the\n    corresponding service account, extracting just the\
  \ first '/' delimited part\n    with segment(0):\n\n        $ gcloud iam service-accounts\
  \ keys list \\\n            --iam-account \\\n            svc-2-123@test-minutia-123.iam.gserviceaccount.com\
  \ \\\n            --project test-minutia-123 \\\n            --format=\"table(name.scope(serviceAccounts).segment(0):label='se\\\
  \n        rvice Account',name.scope(keys):label='keyID',validAfterTime)\"\n\n  \
  \  The last example returns a table with service account names without their\n \
  \   full paths, keyID and validity.\n"
generated_using:
- --help
docker_image:
