from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Treeator_V0_1_0 = CommandToolBuilder(tool="treeator", base_command=["treeator"], inputs=[ToolInput(tag="in_alphabet_file", input_type=Boolean(optional=True), prefix="--alphabet_file", doc=InputDocumentation(doc="[file/type] give file with character alphabet, or dna,\nprotein, or binary for dna, amino acid,\nrespectively binary (0 1) alphabets (default:\ndna).")), ToolInput(tag="in_data_file", input_type=Boolean(optional=True), prefix="--data_file", doc=InputDocumentation(doc="[file]          give the data file.")), ToolInput(tag="in_fixed", input_type=Boolean(optional=True), prefix="--fixed", doc=InputDocumentation(doc="[number/s]          give parameter to fix. First parameter is\nindexed 0. Several parameters can be given in a\ncomma separated string, e.g. -e 0,2,3.")), ToolInput(tag="in_file", input_type=Boolean(optional=True), prefix="--file", doc=InputDocumentation(doc="[file]               give data file name, or if data file name\nalready given, then tree file name. If nexus\nformat and no tree file name is given, tree is\nassumed to be in same file as data.")), ToolInput(tag="in_format", input_type=Boolean(optional=True), prefix="--format", doc=InputDocumentation(doc="[format]                give the format of the input files. For\ncharacter file fasta, phylip and nexus are the\noptions. For the tree file the options are\nnewick and nexus. Give the character file\nformat first, and the tree file format after a\ncomma, e.g. --format phylip,newick. Fasta is\nthe default character file format, and newick\nis the default tree file format (unless\ncharacter file is set to nexus, then nexus is\nalso default for tree file, e.g. --format\nnexus).")), ToolInput(tag="in_get_state_at_nodes", input_type=Boolean(optional=True), prefix="--get_state_at_nodes", doc=InputDocumentation(doc="will give the states at internal nodes as\ncomments (readable in FigTree).")), ToolInput(tag="in_likelihood", input_type=Boolean(optional=True), prefix="--likelihood", doc=InputDocumentation(doc="calculate likelihood for data given tree.")), ToolInput(tag="in_model", input_type=Boolean(optional=True), prefix="--model", doc=InputDocumentation(doc="[number/s]          give the model by numbering the rate parameters\nfor different transition, e.g. -m 0,1,0,2,1,2.\nThe order is by row, i.e. from parameter 0 to\nparameter 1 first then, 0 to 2, and so on to\nall other parameters, then 1 to 0, and so\nforth.")), ToolInput(tag="in_neighbour_joining", input_type=Boolean(optional=True), prefix="--neighbour_joining", doc=InputDocumentation(doc="compute neighbour joining tree for given data.\nThe data should be  a left triangular\nsimilarity matrix.")), ToolInput(tag="in_no_branch_length", input_type=Boolean(optional=True), prefix="--no_branch_length", doc=InputDocumentation(doc="do not print branch lengths and do not\ncalculate branch lengths for parsimony trees.")), ToolInput(tag="in_no_label", input_type=Boolean(optional=True), prefix="--no_label", doc=InputDocumentation(doc="will tell treeator that there are no taxon\nlabels in the similarity matrix.")), ToolInput(tag="in_no_optim", input_type=Boolean(optional=True), prefix="--no_optim", doc=InputDocumentation(doc="calculate likelihood for given parameters. No\noptimization.")), ToolInput(tag="in_output", input_type=Boolean(optional=True), prefix="--output", doc=InputDocumentation(doc="[newick/nexus]          give tree format for output, nexus (nex or x\nfor short) or newick (new or w for short), e.g\n--output x. (default w).")), ToolInput(tag="in_parameters", input_type=Boolean(optional=True), prefix="--parameters", doc=InputDocumentation(doc="[values]       give corresponding parameter values for\nparameters. If optimizing these will be\nstarting values, e.g. -P 0.1,0.01,0.05.")), ToolInput(tag="in_parsimony", input_type=Boolean(optional=True), prefix="--parsimony", doc=InputDocumentation(doc="calculate parsimony score for given tree and\ndata.")), ToolInput(tag="in_random", input_type=Boolean(optional=True), prefix="--random", doc=InputDocumentation(doc="do stepwise addition in random order.")), ToolInput(tag="in_tree_file", input_type=Boolean(optional=True), prefix="--tree_file", doc=InputDocumentation(doc="[file]          give tree file name.")), ToolInput(tag="in_step_wise", input_type=Boolean(optional=True), prefix="--step_wise", doc=InputDocumentation(doc="do parsimony stepwise addition.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="get additional output.")), ToolInput(tag="in_arguments", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_data_file_dot_txt", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Treeator_V0_1_0().translate("wdl", allow_empty_container=True)

