from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Directory, Int

Realphy_V113_V0_1_0 = CommandToolBuilder(tool="REALPHY_v113", base_command=["REALPHY_v113"], inputs=[ToolInput(tag="in_read_length", input_type=Boolean(optional=True), prefix="-readLength", doc=InputDocumentation(doc="[integer] default=50 Possible values: Integer greater than 30; Size of fragments that are to be produced from the FASTA/GBK input sequences. With longer read lengths the mapping will take longer but will also map more divergent sequences.")), ToolInput(tag="in_quality", input_type=Boolean(optional=True), prefix="-quality", doc=InputDocumentation(doc="[integer] default=20; Possible values: Integer value between 0 and 41 that corresponds to quality values in fastq files (PHRED+33). Bases with values below thresold in fastq file will not be considered (fasta files will be converted into fastq files with a quality of 20).")), ToolInput(tag="in_poly_threshold", input_type=Boolean(optional=True), prefix="-polyThreshold", doc=InputDocumentation(doc="[double] default=0.95; Possible values: Double value between 0 and 1.  Polymorphisms that occur at lower frequency than the specified threshold at any given position of the alignment will not be considered.")), ToolInput(tag="in_per_base_cov", input_type=Boolean(optional=True), prefix="-perBaseCov", doc=InputDocumentation(doc="[integer] default=10; Possible values: Integer greater than or equal to 10.  Polymorphisms will only be extracted for regions that are covered by more than the set threshold of reads.")), ToolInput(tag="in_ref", input_type=Boolean(optional=True), prefix="-ref", doc=InputDocumentation(doc="[sequence file name (without extension or path!)] default=random; Possible values: The file name of a sequence data set without the extension (.fas, .fasta, .fa, .fna, .fastq, .fastq.gz, .gb or .gbk). Sets the reference sequence.")), ToolInput(tag="in_root", input_type=Boolean(optional=True), prefix="-root", doc=InputDocumentation(doc="[sequence file name (without extension or path!)] default=random; Possible values: The file name of a sequence data set without the extension (.fas, .fasta, .fa, .fna, .fastq, .fastq.gz, .gb or .gbk).  Specifies the root of the tree.")), ToolInput(tag="in_refn", input_type=Boolean(optional=True), prefix="-refN", doc=InputDocumentation(doc="[sequence file name (without extension or path!)] where N is the n-th reference genome; default=not set; Possible values: The file name of a sequence data set without the extension (.fas, .fasta, .fa, .fna, .fastq, .fastq.gz, .gb or .gbk).")), ToolInput(tag="in_genes", input_type=File(optional=True), prefix="-genes", doc=InputDocumentation(doc="set then genes (CDS) are extracted from a given genbank file.")), ToolInput(tag="in_gap_threshold", input_type=Boolean(optional=True), prefix="-gapThreshold", doc=InputDocumentation(doc="[double] default=0; specifies the proportion of input sequences that are allowed to contain gaps in the final sequence alignment (i.e. if set to 0.2 at most 20% of all nucleotides in each final alignment column are allowed to be gaps).")), ToolInput(tag="in_clean", input_type=String(optional=True), prefix="-clean", doc=InputDocumentation(doc="set then the whole analysis will be rerun and existing data will be overwritten!")), ToolInput(tag="in_tree_builder", input_type=Boolean(optional=True), prefix="-treeBuilder", doc=InputDocumentation(doc="[integer] default=4;\n0=Do not build a tree;\n1=treepuzzle;\n2=raxml\n3=max. parsimony (dnapars)\n4=PhyML (default)")), ToolInput(tag="in_quiet", input_type=String(optional=True), prefix="-quiet", doc=InputDocumentation(doc="set then it suppresses any program output except for errors or warnings.")), ToolInput(tag="in_var_only", input_type=String(optional=True), prefix="-varOnly", doc=InputDocumentation(doc="set then homologous positions that are conserved in all input sequences are put out. If set then the reconstructed tree may be wrong.")), ToolInput(tag="in_seed_length", input_type=Boolean(optional=True), prefix="-seedLength", doc=InputDocumentation(doc="[integer] default=22 Possible values: Integer between 4 and 32; specifies k-mer length in bowtie2.")), ToolInput(tag="in_suffix", input_type=Directory(optional=True), prefix="-suffix", doc=InputDocumentation(doc="[string] default=not set; appends a suffix to the reference output folder.")), ToolInput(tag="in_delete", input_type=String(optional=True), prefix="-delete", doc=InputDocumentation(doc="this option is set then all alignment output files and sequence cut files will be deleted after the program is terminated.")), ToolInput(tag="in_merge", input_type=File(optional=True), prefix="-merge", doc=InputDocumentation(doc="this option is set multiple references are selected, a final polymorphism file will be generated which combines all polymorphism files for all references.")), ToolInput(tag="in_gaps", input_type=Int(optional=True), prefix="-gaps", doc=InputDocumentation(doc="this option is set. The gapThreshold is automatically set to 100%, unless a different gapThreshold is specified.")), ToolInput(tag="in_config", input_type=Boolean(optional=True), prefix="-config", doc=InputDocumentation(doc="[string] this specifies the location of the config.txt. If not set it is assumed that the config.txt is in the working directory.")), ToolInput(tag="in_tree_options", input_type=Boolean(optional=True), prefix="-treeOptions", doc=InputDocumentation(doc="[text file] This option allows the user to provide command line parameters to the tree program in the first line of a given text file.")), ToolInput(tag="in_bowtie_options", input_type=Boolean(optional=True), prefix="-bowtieOptions", doc=InputDocumentation(doc="[text file] This option allows the user to provide command line parameters to bowtie2 in the first line of a given text file.")), ToolInput(tag="in_version", input_type=String(optional=True), prefix="-version", doc=InputDocumentation(doc="the program's version.")), ToolInput(tag="in_jar", input_type=Int(optional=True), prefix="-jar", doc=InputDocumentation(doc="")), ToolInput(tag="in_x_mx", input_type=Boolean(optional=True), prefix="-Xmx", doc=InputDocumentation(doc="")), ToolInput(tag="in_java", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_available", input_type=String(optional=True), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_ram", input_type=String(optional=True), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_in", input_type=String(optional=True), position=3, doc=InputDocumentation(doc="")), ToolInput(tag="in_mb", input_type=String(optional=True), position=4, doc=InputDocumentation(doc="")), ToolInput(tag="in_m", input_type=String(), position=5, doc=InputDocumentation(doc="")), ToolInput(tag="in_sequence", input_type=String(optional=True), position=6, doc=InputDocumentation(doc="")), ToolInput(tag="in_folder", input_type=Directory(optional=True), position=7, doc=InputDocumentation(doc="")), ToolInput(tag="in_output", input_type=String(optional=True), position=8, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_suffix", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_suffix", type_hint=File()), doc=OutputDocumentation(doc="[string] default=not set; appends a suffix to the reference output folder."))], container="quay.io/biocontainers/realphy:1.13--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Realphy_V113_V0_1_0().translate("wdl")

