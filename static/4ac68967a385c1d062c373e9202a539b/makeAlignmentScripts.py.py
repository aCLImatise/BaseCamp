from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Directory, File, Int, Boolean

Makealignmentscripts_Py_V0_1_0 = CommandToolBuilder(tool="makeAlignmentScripts.py", base_command=["makeAlignmentScripts.py"], inputs=[ToolInput(tag="in_var_0", input_type=String(optional=True), prefix="-outbam", doc=InputDocumentation(doc="[-nt THREADS]")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="--output-directory", doc=InputDocumentation(doc="input bam path if already aligned (default: None)")), ToolInput(tag="in_output_bam_file", input_type=File(optional=True), prefix="--out-bam", doc=InputDocumentation(doc="output bam file name (default: None)")), ToolInput(tag="in_genome_reference", input_type=Int(optional=True), prefix="--genome-reference", doc=InputDocumentation(doc="[IN_FASTQ1S [IN_FASTQ1S ...]], --in-fastq1s [IN_FASTQ1S [IN_FASTQ1S ...]]\npaths of forward reads (default: None)")), ToolInput(tag="in_fq_two", input_type=Boolean(optional=True), prefix="-fq2", doc=InputDocumentation(doc="[IN_FASTQ2S [IN_FASTQ2S ...]], --in-fastq2s [IN_FASTQ2S [IN_FASTQ2S ...]]\npaths of reverse reads in paired-end sequencing\n(default: None)")), ToolInput(tag="in_out_fast_q_one_name", input_type=Int(optional=True), prefix="--out-fastq1-name", doc=InputDocumentation(doc="file name of forward reads (default: None)")), ToolInput(tag="in_out_fast_q_two_name", input_type=Int(optional=True), prefix="--out-fastq2-name", doc=InputDocumentation(doc="file name of reverse reads (default: None)")), ToolInput(tag="in_extra_trim_arguments", input_type=String(optional=True), prefix="--extra-trim-arguments", doc=InputDocumentation(doc="split input fastq files before trimming to maximize\nmulti-threading efficiency in trimming. (default:\nFalse)")), ToolInput(tag="in_extra_mark_dup_arguments", input_type=String(optional=True), prefix="--extra-markdup-arguments", doc=InputDocumentation(doc="place holder for now (default: )")), ToolInput(tag="in_parallelize_mark_dup", input_type=Boolean(optional=True), prefix="--parallelize-markdup", doc=InputDocumentation(doc="parallelize by splitting input bam files and work on\neach independently, and then merge. (default: False)")), ToolInput(tag="in_run_workflow", input_type=Boolean(optional=True), prefix="--run-workflow", doc=InputDocumentation(doc="Execute the bash scripts locally right here. Only\nworks on Linux machines with modern bash shells.\n(default: False)\n"))], outputs=[ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="input bam path if already aligned (default: None)")), ToolOutput(tag="out_output_bam_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_bam_file", type_hint=File()), doc=OutputDocumentation(doc="output bam file name (default: None)"))], container="quay.io/biocontainers/somaticseq:3.6.2--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Makealignmentscripts_Py_V0_1_0().translate("wdl")

