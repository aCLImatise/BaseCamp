class: CommandLineTool
id: ribo_run.cwl
inputs:
- id: in_reference_fast_a
  doc: "path to a (multi)fasta or a directory containing one\nor more chromosomal\
    \ sequences in fasta format.\nRequired, unless using a config file"
  type: File?
  inputBinding:
    prefix: --reference_fasta
- id: in_config
  doc: 'config file; if none given, create one; default: /'
  type: File?
  inputBinding:
    prefix: --config
- id: in_outputdir__defaulttriboseedpipelineresults
  doc: "/output/dir/, --output /output/dir/\noutput directory; default:\n/2020-09-10T0043_riboSeed_pipeline_results/"
  type: Directory?
  inputBinding:
    prefix: -o
- id: in_experiment_name
  doc: 'prefix for results files; default: inferred'
  type: string?
  inputBinding:
    prefix: --experiment_name
- id: in_kingdom
  doc: "whether to look for eukaryotic, archaeal, or bacterial\nrDNA; default: bac"
  type: string?
  inputBinding:
    prefix: --Kingdom
- id: in_ss__specificfeatures
  doc: ":23S:5S, --specific_features 16S:23S:5S\ncolon:separated -- specific features;\
    \ default:\n16S:23S:5S"
  type: long?
  inputBinding:
    prefix: -S
- id: in_clusters
  doc: "number of rDNA clusters;if submitting multiple\nrecords, must be a colon:separated\
    \ list whose length\nmatches number of genbank records. Default is inferred\n\
    from specific feature with fewest hits"
  type: long?
  inputBinding:
    prefix: --clusters
- id: in_cluster_file
  doc: "clustered_loci file output from riboSelect;this is\ncreated by default from\
    \ run_riboSeed, but if you don't\nagree with the operon structure predicted by\n\
    riboSelect, you can use your alternate clustered_loci\nfile. default: None"
  type: File?
  inputBinding:
    prefix: --cluster_file
- id: in_fast_q_one
  doc: path to forward fastq file, can be compressed
  type: long?
  inputBinding:
    prefix: --fastq1
- id: in_fast_q_two
  doc: path to reverse fastq file, can be compressed
  type: long?
  inputBinding:
    prefix: --fastq2
- id: in_fast_q_single_one
  doc: path to single fastq file
  type: long?
  inputBinding:
    prefix: --fastq_single1
- id: in_score_min
  doc: "If using smalt, this sets the '-m' param; default with\nsmalt is inferred\
    \ from read length. If using BWA,\nreads mapping with ASscore lower than this\
    \ will be\nrejected; default with BWA is half of read length"
  type: long?
  inputBinding:
    prefix: --score_min
- id: in_ref_as_contig
  doc: "ignore: reference will not be used in subassembly.\ntrusted: SPAdes will use\
    \ the seed sequences as a\n--trusted-contig; untrusted: SPAdes will treat as\n\
    --untrusted-contig. infer: if mapping percentage over\n80%, 'trusted'; else 'untrusted'.\
    \ See SPAdes docs for\ndetails. default: infer"
  type: string?
  inputBinding:
    prefix: --ref_as_contig
- id: in_linear
  doc: "if genome is known to not be circular and a region of\ninterest (including\
    \ flanking bits) extends past\nchromosome end, this extends the seqence past\n\
    chromosome origin forward by --padding; default: False"
  type: boolean?
  inputBinding:
    prefix: --linear
- id: in_sub_assembler
  doc: "assembler to use for subassembly scheme. SPAdes is\nused by default, but Skesa\
    \ is a new addition that\nseems to work for subassembly and is faster"
  type: string?
  inputBinding:
    prefix: --subassembler
- id: in_just_seed
  doc: "Don't do an assembly, just generate the long read\n'seeds'; default: False"
  type: boolean?
  inputBinding:
    prefix: --just_seed
- id: in_flanking_length
  doc: 'length of flanking regions, in bp; default: 1000'
  type: long?
  inputBinding:
    prefix: --flanking_length
- id: in_kmers_kmers_used
  doc: ",33,55,77,99,127, --kmers 21,33,55,77,99,127\nkmers used for final assembly,\
    \ separated by commas\nsuch as21,33,55,77,99,127. Can be set to 'auto', where\n\
    SPAdes chooses. We ensure kmers are not too big or too\nclose to read length;\
    \ default: 21,33,55,77,99,127"
  type: long?
  inputBinding:
    prefix: -k
- id: in_force_km_ers
  doc: "skip checking to see if kmerchoice is appropriate to\nread length. Sometimes\
    \ kmers longer than reads can\nhelp in the final assembly, as the long reads\n\
    generated by riboSeed contain kmers longer than the\nread length"
  type: boolean?
  inputBinding:
    prefix: --force_kmers
- id: in__prekmers_kmers
  doc: ",33,55,77,99, --pre_kmers 21,33,55,77,99\nkmers used during seeding assemblies,\
    \ separated bt\ncommas; default: 21,33,55,77,99"
  type: long?
  inputBinding:
    prefix: -p
- id: in_min_flank_depth
  doc: "a subassembly won't be performed if this minimum depth\nis not achieved on\
    \ both the 3' and5' end of the\npseudocontig. default: 0"
  type: long?
  inputBinding:
    prefix: --min_flank_depth
- id: in_clean_temps
  doc: "if --clean_temps, mapping files will be removed once\nthey are no no longer\
    \ needed during the mapping\niterations to save space; default: False"
  type: boolean?
  inputBinding:
    prefix: --clean_temps
- id: in_iterations
  doc: "if iterations>1, multiple seedings will occur after\nsubassembly of seed regions;\
    \ if setting --target_len,\nseedings will continue until --iterations are\ncompleted\
    \ or --target_len is matched or exceeded;\ndefault: 3"
  type: long?
  inputBinding:
    prefix: --iterations
- id: in_skip_control
  doc: "if --skip_control, no de novo assembly will be done;\ndefault: False"
  type: boolean?
  inputBinding:
    prefix: --skip_control
- id: in_verbosity
  doc: "Logger writes debug to file in output dir; this sets\nverbosity level sent\
    \ to stderr. 1 = debug(), 2 =\ninfo(), 3 = warning(), 4 = error() and 5 = critical();\n\
    default: 2"
  type: File?
  inputBinding:
    prefix: --verbosity
- id: in_cores
  doc: 'cores used; default: None'
  type: long?
  inputBinding:
    prefix: --cores
- id: in_memory
  doc: 'cores for multiprocessing; default: 8'
  type: long?
  inputBinding:
    prefix: --memory
- id: in_damn_the_torpedos
  doc: Ignore certain errors, full speed ahead!
  type: boolean?
  inputBinding:
    prefix: --damn_the_torpedos
- id: in_stages
  doc: "[{sketch,spec,snag,score,stack,none} ...]\nWhich assessment stages you wish\
    \ to run: sketch, spec,\nsnag, score, stack. Any combination thereof"
  type: string?
  inputBinding:
    prefix: --stages
- id: in_threads
  doc: "if your cores are hyperthreaded, set number threads to\nthe number of threads\
    \ per processer.If unsure, see\n'cat /proc/cpuinfo' under 'cpu cores', or 'lscpu'\n\
    under 'Thread(s) per core'.: 1"
  type: string?
  inputBinding:
    prefix: --threads
- id: in_additional_libs
  doc: "include these libraries in final assembly in addition\nto the reads supplied\
    \ as -F and -R. They must be\nsupplied according to SPAdes arg naming scheme.\
    \ Use at\nown risk.default: None"
  type: string?
  inputBinding:
    prefix: --additional_libs
- id: in_serialize
  doc: "if --serialize, runs seeding and assembly without\nmultiprocessing. We recommend\
    \ this for machines with\nless than 8GB RAM: False"
  type: boolean?
  inputBinding:
    prefix: --serialize
outputs:
- id: out_stdout
  doc: Standard output stream
  type: stdout
- id: out_outputdir__defaulttriboseedpipelineresults
  doc: "/output/dir/, --output /output/dir/\noutput directory; default:\n/2020-09-10T0043_riboSeed_pipeline_results/"
  type: Directory?
  outputBinding:
    glob: $(inputs.in_outputdir__defaulttriboseedpipelineresults)
- id: out_cluster_file
  doc: "clustered_loci file output from riboSelect;this is\ncreated by default from\
    \ run_riboSeed, but if you don't\nagree with the operon structure predicted by\n\
    riboSelect, you can use your alternate clustered_loci\nfile. default: None"
  type: File?
  outputBinding:
    glob: $(inputs.in_cluster_file)
- id: out_verbosity
  doc: "Logger writes debug to file in output dir; this sets\nverbosity level sent\
    \ to stderr. 1 = debug(), 2 =\ninfo(), 3 = warning(), 4 = error() and 5 = critical();\n\
    default: 2"
  type: File?
  outputBinding:
    glob: $(inputs.in_verbosity)
hints: []
cwlVersion: v1.1
baseCommand:
- ribo
- run
