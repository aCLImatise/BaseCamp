from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String, File, Float

Cpecanlastz_D_V0_1_0 = CommandToolBuilder(tool="cPecanLastz_D", base_command=["cPecanLastz_D"], inputs=[ToolInput(tag="in_self", input_type=Boolean(optional=True), prefix="--self", doc=InputDocumentation(doc="the target sequence is also the query")), ToolInput(tag="in_word", input_type=Int(optional=True), prefix="--word", doc=InputDocumentation(doc="set max bits for word hash;  use this to trade time for\nmemory, eliminating thrashing for heavy seeds\n(default is 28 bits)")), ToolInput(tag="in_filter", input_type=String(optional=True), prefix="--filter", doc=InputDocumentation(doc=",<M>       filter seed hits, requiring at least M matches and\nallowing no more than T transversions\n(default is no filtering)")), ToolInput(tag="in_not_wins", input_type=Boolean(optional=True), prefix="--notwins", doc=InputDocumentation(doc="require just one seed hit")), ToolInput(tag="in_twins", input_type=Int(optional=True), prefix="--twins", doc=InputDocumentation(doc="..<maxgap> require two nearby seed hits on the same diagonal\n(default is twins aren't required)")), ToolInput(tag="in_seed_queue", input_type=Int(optional=True), prefix="--seedqueue", doc=InputDocumentation(doc="set number of entries in seed hit queue\n(default is 262144)")), ToolInput(tag="in_segments", input_type=File(optional=True), prefix="--segments", doc=InputDocumentation(doc="read anchor segments from a file, instead of\ndiscovering anchors via seeding")), ToolInput(tag="in_no_recover_seeds", input_type=Boolean(optional=True), prefix="--norecoverseeds", doc=InputDocumentation(doc="don't recover hash-collision seed hits")), ToolInput(tag="in_recover_seeds", input_type=Boolean(optional=True), prefix="--recoverseeds", doc=InputDocumentation(doc="recover hash-collision seed hits\n(default is not to recover seed hits)")), ToolInput(tag="in_step", input_type=Int(optional=True), prefix="--step", doc=InputDocumentation(doc="set step length (default is 1)")), ToolInput(tag="in_chain", input_type=Boolean(optional=True), prefix="--chain", doc=InputDocumentation(doc="=<diag,anti>    perform chaining with given penalties for diagonal and")), ToolInput(tag="in_no_trivial", input_type=Boolean(optional=True), prefix="--notrivial", doc=InputDocumentation(doc="do not output a trivial self-alignment block if the\ntarget and query happen to be identical")), ToolInput(tag="in_scores", input_type=File(optional=True), prefix="--scores", doc=InputDocumentation(doc="read substitution scores from a file\n(default is HOXD70)")), ToolInput(tag="in_match", input_type=String(optional=True), prefix="--match", doc=InputDocumentation(doc=",<P>        scores are +R/-P for match/mismatch")), ToolInput(tag="in_gap", input_type=Boolean(optional=True), prefix="--gap", doc=InputDocumentation(doc="=<open,extend>    set gap open and extend penalties (default is 400.000000,30.000000)")), ToolInput(tag="in_x_drop", input_type=Int(optional=True), prefix="--xdrop", doc=InputDocumentation(doc="set x-drop threshold (default is 10*sub[A][A])")), ToolInput(tag="in_y_drop", input_type=Int(optional=True), prefix="--ydrop", doc=InputDocumentation(doc="set y-drop threshold (default is open+300extend)")), ToolInput(tag="in_nox_trim", input_type=Boolean(optional=True), prefix="--noxtrim", doc=InputDocumentation(doc="if x-drop extension encounters end of sequence, don't\ntrim back to peak score (use this for short reads)")), ToolInput(tag="in_no_y_trim", input_type=Boolean(optional=True), prefix="--noytrim", doc=InputDocumentation(doc="if y-drop extension encounters end of sequence, don't\ntrim back to peak score (use this for short reads)")), ToolInput(tag="in_infer", input_type=String(optional=True), prefix="--infer", doc=InputDocumentation(doc="infer scores from the sequences, then use them")), ToolInput(tag="in_infer_only", input_type=File(optional=True), prefix="--inferonly", doc=InputDocumentation(doc="infer scores but don't use them (requires --infscores)\nall inference options are read from the control file")), ToolInput(tag="in_inf_scores", input_type=Boolean(optional=True), prefix="--infscores", doc=InputDocumentation(doc="[=<file>]   write inferred scores to a file")), ToolInput(tag="in_hsp_thresh", input_type=Float(optional=True), prefix="--hspthresh", doc=InputDocumentation(doc="set threshold for high scoring pairs (default is 3000.000000)\nungapped extensions scoring lower are discarded\n<score> can also be a percentage or base count")), ToolInput(tag="in_exact", input_type=Int(optional=True), prefix="--exact", doc=InputDocumentation(doc="set threshold for exact matches\nif specified, exact matches are found rather than high\nscoring pairs (replaces --hspthresh)")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="--mismatch", doc=InputDocumentation(doc=",<length> set threshold for mismatches\nif specified, N-mismatch segments are found rather\nthan high scoring pairs (replaces --hspthresh)")), ToolInput(tag="in_inner", input_type=String(optional=True), prefix="--inner", doc=InputDocumentation(doc="set threshold for HSPs during interpolation\n(default is no interpolation)")), ToolInput(tag="in_gapped_thresh", input_type=String(optional=True), prefix="--gappedthresh", doc=InputDocumentation(doc="set threshold for gapped alignments\ngapped extensions scoring lower are discarded\n<score> can also be a percentage or base count\n(default is to use same value as --hspthresh)")), ToolInput(tag="in_ball", input_type=String(optional=True), prefix="--ball", doc=InputDocumentation(doc="[%]      set minimum score required of words 'in' a quantum ball")), ToolInput(tag="in_no_mirror", input_type=Boolean(optional=True), prefix="--nomirror", doc=InputDocumentation(doc="don't report mirror-image alignments when using --self\n(default is to skip processing them, but recreate them\nin the output)")), ToolInput(tag="in_allocate", input_type=Boolean(optional=True), prefix="--allocate", doc=InputDocumentation(doc=":traceback=<bytes>  space for trace-back information\n(default is 80.0M)")), ToolInput(tag="in_max_word_count", input_type=String(optional=True), prefix="--maxwordcount", doc=InputDocumentation(doc="[%] limit seed word-repeats in target\nwords occurring too often are not used in seed hits\n(default is no word-repeat limit)")), ToolInput(tag="in_masking", input_type=String(optional=True), prefix="--masking", doc=InputDocumentation(doc="mask any position in target hit this many times\nzero indicates no masking\n(default is no masking)")), ToolInput(tag="in_identity", input_type=Int(optional=True), prefix="--identity", doc=InputDocumentation(doc="[..<max>] filter alignments by percent identity\n0<=min<=max<=100;  blocks (or HSPs) outside min..max\nare discarded\n(default is no identity filtering)")), ToolInput(tag="in_coverage", input_type=Int(optional=True), prefix="--coverage", doc=InputDocumentation(doc="[..<max>] filter alignments by percentage of query covered\n0<=min<=max<=100;  blocks (or HSPs) outside min..max\nare discarded\n(default is no query coverage filtering)")), ToolInput(tag="in_continuity", input_type=Int(optional=True), prefix="--continuity", doc=InputDocumentation(doc="[..<max>] filter alignments by percent continuity\n0<=min<=max<=100;  blocks (or HSPs) outside min..max\nare discarded\n(default is no continuity filtering)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="specify output alignment file;  otherwise alignments\nare written to stdout")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="specify output format; one of lav, axt, maf, cigar,\nrdotplot, text or general\n(use --help=formats for more details)\n(by default output is LAV)")), ToolInput(tag="in_read_group", input_type=String(optional=True), prefix="--readgroup", doc=InputDocumentation(doc="specify readgroup tags for SAM format\n(use --help=formats for more details)")), ToolInput(tag="in_mark_end", input_type=File(optional=True), prefix="--markend", doc=InputDocumentation(doc="Write a comment at the end of the output file")), ToolInput(tag="in_r_dotplot", input_type=File(optional=True), prefix="--rdotplot", doc=InputDocumentation(doc="create an output file suitable for plotting in R.")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="set info level (0 is minimum, 10 is everything)\n(default is 0)")), ToolInput(tag="in_table_only", input_type=Boolean(optional=True), prefix="--tableonly", doc=InputDocumentation(doc="[=count]    just produce the target position table, don't\nsearch for seeds")), ToolInput(tag="in_write_segments", input_type=File(optional=True), prefix="--writesegments", doc=InputDocumentation(doc="just produce the anchor segments table, don't\nperform gapped alignment")), ToolInput(tag="in_write_capsule", input_type=File(optional=True), prefix="--writecapsule", doc=InputDocumentation(doc="write the target and seed word table to a file")), ToolInput(tag="in_target_capsule", input_type=File(optional=True), prefix="--targetcapsule", doc=InputDocumentation(doc="read the target seed word table from a file\n(this replaces the target specifier)")), ToolInput(tag="in_anti_diagonal", input_type=String(), position=0, doc=InputDocumentation(doc="(by default no chaining is performed)"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="specify output alignment file;  otherwise alignments\nare written to stdout")), ToolOutput(tag="out_mark_end", output_type=File(optional=True), selector=InputSelector(input_to_select="in_mark_end", type_hint=File()), doc=OutputDocumentation(doc="Write a comment at the end of the output file")), ToolOutput(tag="out_r_dotplot", output_type=File(optional=True), selector=InputSelector(input_to_select="in_r_dotplot", type_hint=File()), doc=OutputDocumentation(doc="create an output file suitable for plotting in R."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cpecanlastz_D_V0_1_0().translate("wdl", allow_empty_container=True)

