from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Dcmsend_V0_1_0 = CommandToolBuilder(tool="dcmsend", base_command=["dcmsend"], inputs=[ToolInput(tag="in_list_decoders", input_type=Boolean(optional=True), prefix="--list-decoders", doc=InputDocumentation(doc="list transfer syntaxes of decoders and exit")), ToolInput(tag="in_arguments", input_type=Boolean(optional=True), prefix="--arguments", doc=InputDocumentation(doc="print expanded command line arguments")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="quiet mode, print no warnings and errors")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose mode, print processing details")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="debug mode, print debug information")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="[l]evel: string constant\n(fatal, error, warn, info, debug, trace)\nuse level l for the logger")), ToolInput(tag="in_log_config", input_type=Boolean(optional=True), prefix="--log-config", doc=InputDocumentation(doc="[f]ilename: string\nuse config file f for the logger")), ToolInput(tag="in_read_dataset", input_type=Boolean(optional=True), prefix="--read-dataset", doc=InputDocumentation(doc="read data set without file meta information")), ToolInput(tag="in_no_recurse", input_type=Boolean(optional=True), prefix="--no-recurse", doc=InputDocumentation(doc="do not recurse within directories (default)")), ToolInput(tag="in_decompress_never", input_type=Boolean(optional=True), prefix="--decompress-never", doc=InputDocumentation(doc="never decompress compressed data sets")), ToolInput(tag="in_no_halt", input_type=Boolean(optional=True), prefix="--no-halt", doc=InputDocumentation(doc="do not halt on first invalid input file\nor if unsuccessful store encountered")), ToolInput(tag="in_no_illegal_proposal", input_type=Boolean(optional=True), prefix="--no-illegal-proposal", doc=InputDocumentation(doc="do not propose any presentation context that\ndoes not contain the default TS (if needed)")), ToolInput(tag="in_no_uid_checks", input_type=Boolean(optional=True), prefix="--no-uid-checks", doc=InputDocumentation(doc="do not check UID values of input files")), ToolInput(tag="in_ae_title", input_type=Boolean(optional=True), prefix="--aetitle", doc=InputDocumentation(doc="[a]etitle: string\nset my calling AE title (default: DCMSEND)")), ToolInput(tag="in_call", input_type=Boolean(optional=True), prefix="--call", doc=InputDocumentation(doc="[a]etitle: string\nset called AE title of peer (default: ANY-SCP)")), ToolInput(tag="in_single_association", input_type=Boolean(optional=True), prefix="--single-association", doc=InputDocumentation(doc="always use a single association")), ToolInput(tag="in_timeout", input_type=Boolean(optional=True), prefix="--timeout", doc=InputDocumentation(doc="[s]econds: integer (default: unlimited)\ntimeout for connection requests")), ToolInput(tag="in_acse_timeout", input_type=Boolean(optional=True), prefix="--acse-timeout", doc=InputDocumentation(doc="[s]econds: integer (default: 30)\ntimeout for ACSE messages")), ToolInput(tag="in_dim_se_timeout", input_type=Boolean(optional=True), prefix="--dimse-timeout", doc=InputDocumentation(doc="[s]econds: integer (default: unlimited)\ntimeout for DIMSE messages")), ToolInput(tag="in_max_pdu", input_type=Boolean(optional=True), prefix="--max-pdu", doc=InputDocumentation(doc="[n]umber of bytes: integer (4096..131072)\nset max receive pdu to n bytes (default: 16384)")), ToolInput(tag="in_max_send_pdu", input_type=Boolean(optional=True), prefix="--max-send-pdu", doc=InputDocumentation(doc="[n]umber of bytes: integer (4096..131072)\nrestrict max send pdu to n bytes")), ToolInput(tag="in_peer", input_type=String(), position=0, doc=InputDocumentation(doc="hostname of DICOM peer")), ToolInput(tag="in_port", input_type=String(), position=1, doc=InputDocumentation(doc="tcp/ip port number of peer")), ToolInput(tag="in_dcm_file_in", input_type=String(), position=2, doc=InputDocumentation(doc="DICOM file or directory to be transmitted"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dcmsend_V0_1_0().translate("wdl", allow_empty_container=True)

