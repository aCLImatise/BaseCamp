from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Kmc_Tools_Simple_V0_1_0 = CommandToolBuilder(tool="kmc_tools_simple", base_command=["kmc_tools", "simple"], inputs=[ToolInput(tag="in_ci", input_type=Boolean(optional=True), prefix="-ci", doc=InputDocumentation(doc="<value>  - exclude k-mers occurring less than <value> times")), ToolInput(tag="in_cx", input_type=Boolean(optional=True), prefix="-cx", doc=InputDocumentation(doc="<value>  - exclude k-mers occurring more of than <value> times")), ToolInput(tag="in_cs", input_type=Boolean(optional=True), prefix="-cs", doc=InputDocumentation(doc="<value>  - maximal value of a counter")), ToolInput(tag="in_oc", input_type=Boolean(optional=True), prefix="-oc", doc=InputDocumentation(doc="<value>  - redefine counter calculation mode for equal k-mers\nAvailable values :\nmin   - get lower value of a k-mer counter (default value for intersect operation)\nmax   - get upper value of a k-mer counter\nsum   - get sum of counters from both databases\ndiff  - get difference between counters (default for counters_subtract operation)\nleft  - get counter from first database (input1)\nright - get counter from second database (input2)")), ToolInput(tag="in_intersect", input_type=String(), position=0, doc=InputDocumentation(doc="- output database will contains only k-mers that are present in both input sets")), ToolInput(tag="in_union", input_type=String(), position=1, doc=InputDocumentation(doc="- output database will contains each k-mer present in any of input sets")), ToolInput(tag="in_km_ers_subtract", input_type=String(), position=2, doc=InputDocumentation(doc="- difference of input sets based on k-mers. \nOutput database will contains only k-mers that are present in first input set but absent in the second one")), ToolInput(tag="in_counters_subtract", input_type=String(), position=3, doc=InputDocumentation(doc="- difference of input sets based on k-mers and their counters (weaker version of kmers_subtract).\nOutput database will contains all k-mers that are present in first input,\nbeyond those for which counter operation will lead to remove (i.e. counter equal to 0 or negative number)")), ToolInput(tag="in_reverse_km_ers_subtract", input_type=String(), position=4, doc=InputDocumentation(doc="- same as kmers_subtract but treat input2 as first and input1 as second")), ToolInput(tag="in_reverse_counters_subtract", input_type=String(), position=5, doc=InputDocumentation(doc="- same as counters_subtract but treat input2 as first and input1 as second"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Kmc_Tools_Simple_V0_1_0().translate("wdl", allow_empty_container=True)

