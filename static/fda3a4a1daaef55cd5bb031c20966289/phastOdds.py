from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Phastodds_V0_1_0 = CommandToolBuilder(tool="phastOdds", base_command=["phastOdds"], inputs=[ToolInput(tag="in_background_mods", input_type=String(optional=True), prefix="--background-mods", doc=InputDocumentation(doc="(Required) Comma-delimited list of tree model (*.mod) files for\nbackground.  If used with --background-hmm, order of models must\ncorrespond to order of states in HMM.")), ToolInput(tag="in_feature_mods", input_type=String(optional=True), prefix="--feature-mods", doc=InputDocumentation(doc="(Required) Comma-delimited list of tree model (*.mod) files for\nfeatures.  If used with --feature-hmm, order of models must\ncorrespond to order of states in HMM.")), ToolInput(tag="in_background_hmm", input_type=String(optional=True), prefix="--background-hmm", doc=InputDocumentation(doc="HMM for background.  If there is only one backgound tree\nmodel, a trivial (single-state) HMM will be assumed.")), ToolInput(tag="in_feature_hmm", input_type=String(optional=True), prefix="--feature-hmm", doc=InputDocumentation(doc="HMM for features.  If there is only one tree model for\nfeatures, a trivial (single-state) HMM will be assumed.")), ToolInput(tag="in_features", input_type=File(optional=True), prefix="--features", doc=InputDocumentation(doc="(Required unless -w or -y) File defining features to be scored\n(GFF, BED, or genepred).")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc="(Can be used instead of -g or -y) Compute scores in a sliding\nwindow of the specified size.")), ToolInput(tag="in_base_by_base", input_type=Boolean(optional=True), prefix="--base-by-base", doc=InputDocumentation(doc="(Can be used instead of -g or -y) Output base-by-base scores, in\nthe coordinate frame of the reference sequence (or of the sequence\nspecified by --refidx).  Output is in fixed-step WIG format\n(http://genome.ucsc.edu/goldenPath/help/wiggle.html).  This option\ncan only be used with individual phylogenetic models, not with sets\nof models and a (nontrivial) HMM.")), ToolInput(tag="in_window_wig", input_type=Int(optional=True), prefix="--window-wig", doc=InputDocumentation(doc="(Can be used instead of -g or -y) Like --window but outputs scores\nin fixed-step WIG format, as with --base-by-base.  Scores for the\npositive strand only are output.")), ToolInput(tag="in_msa_format", input_type=File(optional=True), prefix="--msa-format", doc=InputDocumentation(doc="Input format for alignment.  May be FASTA, PHYLIP, MPM, SS, or\nMAF (default is to guess format from file contents).")), ToolInput(tag="in_ref_idx", input_type=Int(optional=True), prefix="--refidx", doc=InputDocumentation(doc="Index of reference sequence for coordinates.  Use 0 to\nindicate the coordinate system of the alignment as a whole.\nDefault is 1, for first sequence.")), ToolInput(tag="in_output_bed", input_type=Boolean(optional=True), prefix="--output-bed", doc=InputDocumentation(doc="(For use with -g) Generate output in bed format rather than GFF.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose mode.  Print messages to stderr describing what the\nprogram is doing."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phastodds_V0_1_0().translate("wdl", allow_empty_container=True)

