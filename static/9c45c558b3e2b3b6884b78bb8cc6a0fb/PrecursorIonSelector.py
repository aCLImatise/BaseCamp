from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Precursorionselector_V0_1_0 = CommandToolBuilder(tool="PrecursorIonSelector", base_command=["PrecursorIonSelector"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*            Input feature map file (featureXML) (valid formats: 'featureXML')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="Modified feature map (valid formats: 'featureXML')")), ToolInput(tag="in_next_feat", input_type=File(optional=True), prefix="-next_feat", doc=InputDocumentation(doc="Feature map (featureXML) file with the selected precursors (valid formats: 'featureXML')")), ToolInput(tag="in_ids", input_type=File(optional=True), prefix="-ids", doc=InputDocumentation(doc="*              File containing results of identification (valid formats: 'idXML')")), ToolInput(tag="in_num_precursors", input_type=Int(optional=True), prefix="-num_precursors", doc=InputDocumentation(doc="Number of precursors to be selected (default: '1')")), ToolInput(tag="in_raw_data", input_type=File(optional=True), prefix="-raw_data", doc=InputDocumentation(doc="Input profile data. (valid formats: 'mzML')")), ToolInput(tag="in_load_preprocessing", input_type=Boolean(optional=True), prefix="-load_preprocessing", doc=InputDocumentation(doc="The preprocessed db is loaded from file, not calculated.")), ToolInput(tag="in_store_preprocessing", input_type=Boolean(optional=True), prefix="-store_preprocessing", doc=InputDocumentation(doc="The preprocessed db is stored.")), ToolInput(tag="in_simulation", input_type=Boolean(optional=True), prefix="-simulation", doc=InputDocumentation(doc="Simulate the whole LC-MS/MS run.")), ToolInput(tag="in_sim_results", input_type=File(optional=True), prefix="-sim_results", doc=InputDocumentation(doc="File containing the results of the simulation run (valid formats: 'txt')")), ToolInput(tag="in_db_path", input_type=File(optional=True), prefix="-db_path", doc=InputDocumentation(doc="Db file (valid formats: 'fasta')")), ToolInput(tag="in_rt_model", input_type=File(optional=True), prefix="-rt_model", doc=InputDocumentation(doc="SVM Model for RTPredict (valid formats: 'txt')")), ToolInput(tag="in_dt_model", input_type=File(optional=True), prefix="-dt_model", doc=InputDocumentation(doc="SVM Model for PTPredict (valid formats: 'txt')")), ToolInput(tag="in_fixed_modifications", input_type=String(optional=True), prefix="-fixed_modifications", doc=InputDocumentation(doc="The modifications i.e. Carboxymethyl (C)")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Modified feature map (valid formats: 'featureXML')")), ToolOutput(tag="out_next_feat", output_type=File(optional=True), selector=InputSelector(input_to_select="in_next_feat", type_hint=File()), doc=OutputDocumentation(doc="Feature map (featureXML) file with the selected precursors (valid formats: 'featureXML')")), ToolOutput(tag="out_sim_results", output_type=File(optional=True), selector=InputSelector(input_to_select="in_sim_results", type_hint=File()), doc=OutputDocumentation(doc="File containing the results of the simulation run (valid formats: 'txt')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Precursorionselector_V0_1_0().translate("wdl", allow_empty_container=True)

