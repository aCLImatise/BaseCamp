from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File, Int, Float

Abyss_P_V0_1_0 = CommandToolBuilder(tool="ABYSS_P", base_command=["ABYSS-P"], inputs=[ToolInput(tag="in_chastity", input_type=Boolean(optional=True), prefix="--chastity", doc=InputDocumentation(doc="discard unchaste reads [default]")), ToolInput(tag="in_no_chastity", input_type=Boolean(optional=True), prefix="--no-chastity", doc=InputDocumentation(doc="do not discard unchaste reads")), ToolInput(tag="in_trim_masked", input_type=Boolean(optional=True), prefix="--trim-masked", doc=InputDocumentation(doc="trim masked bases from the ends of reads\n[default]")), ToolInput(tag="in_no_trim_masked", input_type=Boolean(optional=True), prefix="--no-trim-masked", doc=InputDocumentation(doc="do not trim masked bases from the ends of")), ToolInput(tag="in_mask_quality", input_type=String(optional=True), prefix="--mask-quality", doc=InputDocumentation(doc="mask all low quality bases as `N'")), ToolInput(tag="in_standard_quality", input_type=Boolean(optional=True), prefix="--standard-quality", doc=InputDocumentation(doc="zero quality is `!' (33)\ndefault for FASTQ and SAM files")), ToolInput(tag="in_illumina_quality", input_type=Boolean(optional=True), prefix="--illumina-quality", doc=InputDocumentation(doc="zero quality is `@' (64)\ndefault for qseq and export files")), ToolInput(tag="in_ss", input_type=Boolean(optional=True), prefix="--SS", doc=InputDocumentation(doc="assemble in strand-specific mode")), ToolInput(tag="in_no_ss", input_type=Boolean(optional=True), prefix="--no-SS", doc=InputDocumentation(doc="do not assemble in strand-specific mode")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="write the contigs to FILE")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="the length of a k-mer (when -K is not set) [<=128]\nor the span of a k-mer pair (when -K is set)")), ToolInput(tag="in_single_km_er", input_type=Int(optional=True), prefix="--single-kmer", doc=InputDocumentation(doc="the length of a single k-mer in a k-mer pair")), ToolInput(tag="in_trim_length", input_type=Int(optional=True), prefix="--trim-length", doc=InputDocumentation(doc="maximum length of blunt contigs to trim [k]")), ToolInput(tag="in_coverage", input_type=Float(optional=True), prefix="--coverage", doc=InputDocumentation(doc="remove contigs with mean k-mer coverage\nless than this threshold")), ToolInput(tag="in_kc", input_type=Int(optional=True), prefix="--kc", doc=InputDocumentation(doc="remove all k-mers with multiplicity < N [0]")), ToolInput(tag="in_bubbles", input_type=Int(optional=True), prefix="--bubbles", doc=InputDocumentation(doc="pop bubbles shorter than N bp [3*k]")), ToolInput(tag="in_no_bubbles", input_type=Boolean(optional=True), prefix="--no-bubbles", doc=InputDocumentation(doc="do not pop bubbles")), ToolInput(tag="in_erode", input_type=String(optional=True), prefix="--erode", doc=InputDocumentation(doc="erode bases at the ends of blunt contigs with coverage\nless than this threshold [round(sqrt(median))]")), ToolInput(tag="in_erode_strand", input_type=Int(optional=True), prefix="--erode-strand", doc=InputDocumentation(doc="erode bases at the ends of blunt contigs\nwith coverage less than this threshold on\neither strand [1 if sqrt(median) > 2 else 0]")), ToolInput(tag="in_coverage_hist", input_type=File(optional=True), prefix="--coverage-hist", doc=InputDocumentation(doc="write the k-mer coverage histogram to FILE")), ToolInput(tag="in_mask_cov", input_type=Boolean(optional=True), prefix="--mask-cov", doc=InputDocumentation(doc="do not include kmers containing masked bases in\ncoverage calculations [experimental]")), ToolInput(tag="in_snp", input_type=File(optional=True), prefix="--snp", doc=InputDocumentation(doc="record popped bubbles in FILE")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_db", input_type=File(optional=True), prefix="--db", doc=InputDocumentation(doc="specify path of database repository in FILE")), ToolInput(tag="in_library", input_type=String(optional=True), prefix="--library", doc=InputDocumentation(doc="specify library NAME for database")), ToolInput(tag="in_strain", input_type=String(optional=True), prefix="--strain", doc=InputDocumentation(doc="specify strain NAME for database")), ToolInput(tag="in_species", input_type=String(optional=True), prefix="--species", doc=InputDocumentation(doc="specify species NAME for database")), ToolInput(tag="in_graph", input_type=File(optional=True), prefix="--graph", doc=InputDocumentation(doc="generate a graph in dot format")), ToolInput(tag="in_reads", input_type=String(), position=0, doc=InputDocumentation(doc="-q, --trim-quality=N  trim bases from the ends of reads whose"))], outputs=[], container="quay.io/biocontainers/abyss:2.2.5--ha4ec83a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Abyss_P_V0_1_0().translate("wdl")

