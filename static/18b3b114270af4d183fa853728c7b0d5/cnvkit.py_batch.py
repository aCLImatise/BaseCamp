from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File, Int, Directory

Cnvkit_Py_Batch_V0_1_0 = CommandToolBuilder(tool="cnvkit.py_batch", base_command=["cnvkit.py", "batch"], inputs=[ToolInput(tag="in_seq_method", input_type=String(optional=True), prefix="--seq-method", doc=InputDocumentation(doc="Sequencing assay type: hybridization capture\n('hybrid'), targeted amplicon sequencing ('amplicon'),\nor whole genome sequencing ('wgs'). Determines whether\nand how to use antitarget bins. [Default: hybrid]")), ToolInput(tag="in_segment_method", input_type=String(optional=True), prefix="--segment-method", doc=InputDocumentation(doc="Method used in the 'segment' step. [Default: cbs]")), ToolInput(tag="in_haploid_x_reference", input_type=Boolean(optional=True), prefix="--haploid-x-reference", doc=InputDocumentation(doc="Use or assume a male reference (i.e. female samples\nwill have +1 log-CNR of chrX; otherwise male samples\nwould have -1 chrX).")), ToolInput(tag="in_count_reads", input_type=Boolean(optional=True), prefix="--count-reads", doc=InputDocumentation(doc="Get read depths by counting read midpoints within each\nbin. (An alternative algorithm).")), ToolInput(tag="in_drop_low_coverage", input_type=Boolean(optional=True), prefix="--drop-low-coverage", doc=InputDocumentation(doc="Drop very-low-coverage bins before segmentation to\navoid false-positive deletions in poor-quality tumor\nsamples.")), ToolInput(tag="in_number_subprocesses_used", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[PROCESSES], --processes [PROCESSES]\nNumber of subprocesses used to running each of the BAM\nfiles in parallel. Without an argument, use the\nmaximum number of available CPUs. [Default: process\neach BAM in serial]")), ToolInput(tag="in_r_script_path", input_type=File(optional=True), prefix="--rscript-path", doc=InputDocumentation(doc="Path to the Rscript excecutable to use for running R\ncode. Use this option to specify a non-default R\ninstallation. [Default: Rscript]")), ToolInput(tag="in_normal_samples_used", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[FILES [FILES ...]], --normal [FILES [FILES ...]]\nNormal samples (.bam) used to construct the pooled,\npaired, or flat reference. If this option is used but\nno filenames are given, a 'flat' reference will be\nbuilt. Otherwise, all filenames following this option\nwill be used.")), ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Reference genome, FASTA format (e.g. UCSC hg19.fa)")), ToolInput(tag="in_targets", input_type=File(optional=True), prefix="--targets", doc=InputDocumentation(doc="Target intervals (.bed or .list)")), ToolInput(tag="in_anti_targets", input_type=File(optional=True), prefix="--antitargets", doc=InputDocumentation(doc="Antitarget intervals (.bed or .list)")), ToolInput(tag="in_annotate", input_type=File(optional=True), prefix="--annotate", doc=InputDocumentation(doc="Use gene models from this file to assign names to the\ntarget regions. Format: UCSC refFlat.txt or\nensFlat.txt file (preferred), or BED, interval list,\nGFF, or similar.")), ToolInput(tag="in_short_names", input_type=Boolean(optional=True), prefix="--short-names", doc=InputDocumentation(doc="Reduce multi-accession bait labels to be short and")), ToolInput(tag="in_access", input_type=File(optional=True), prefix="--access", doc=InputDocumentation(doc="Regions of accessible sequence on chromosomes (.bed),\nas output by the 'access' command.")), ToolInput(tag="in_anti_target_avg_size", input_type=Int(optional=True), prefix="--antitarget-avg-size", doc=InputDocumentation(doc="Average size of antitarget bins (results are\napproximate).")), ToolInput(tag="in_anti_target_min_size", input_type=Int(optional=True), prefix="--antitarget-min-size", doc=InputDocumentation(doc="Minimum size of antitarget bins (smaller regions are\ndropped).")), ToolInput(tag="in_output_reference", input_type=File(optional=True), prefix="--output-reference", doc=InputDocumentation(doc="Output filename/path for the new reference file being\ncreated. (If given, ignores the -o/--output-dir option\nand will write the file to the given path. Otherwise,\n'reference.cnn' will be created in the current\ndirectory or specified output directory.)")), ToolInput(tag="in_cluster", input_type=Boolean(optional=True), prefix="--cluster", doc=InputDocumentation(doc="Calculate and use cluster-specific summary stats in\nthe reference pool to normalize samples.")), ToolInput(tag="in_reference", input_type=Int(optional=True), prefix="--reference", doc=InputDocumentation(doc="Copy number reference file (.cnn).")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Output directory.")), ToolInput(tag="in_scatter", input_type=Boolean(optional=True), prefix="--scatter", doc=InputDocumentation(doc="Create a whole-genome copy ratio profile as a PDF\nscatter plot.")), ToolInput(tag="in_diagram", input_type=Boolean(optional=True), prefix="--diagram", doc=InputDocumentation(doc="Create an ideogram of copy ratios on chromosomes as a\nPDF.\n")), ToolInput(tag="in_bam_files", input_type=String(), position=0, doc=InputDocumentation(doc="Mapped sequence reads (.bam)")), ToolInput(tag="in_consistent_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--target-avg-size TARGET_AVG_SIZE"))], outputs=[ToolOutput(tag="out_output_reference", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_reference", type_hint=File()), doc=OutputDocumentation(doc="Output filename/path for the new reference file being\ncreated. (If given, ignores the -o/--output-dir option\nand will write the file to the given path. Otherwise,\n'reference.cnn' will be created in the current\ndirectory or specified output directory.)")), ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory."))], container="quay.io/biocontainers/cnvkit:0.9.8--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cnvkit_Py_Batch_V0_1_0().translate("wdl")

