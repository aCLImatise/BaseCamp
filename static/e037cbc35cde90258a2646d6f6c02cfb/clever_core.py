from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Clever_Core_V0_1_0 = CommandToolBuilder(tool="clever_core", base_command=["clever-core"], inputs=[ToolInput(tag="in_be_verbose_additionalstatistics", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --verbose ]                      Be verbose: output additional\nstatistics for each variation.")), ToolInput(tag="in_arg_significance_level", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="[ --edge_sig_level ] arg (=0.20000000000000001)\nSignificance level for edges (the lower\nthe level, the more edges will be\npresent).")), ToolInput(tag="in_arg_weight_beconsidered", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[ --min_aln_weight ] arg (=0.0016000000000000001)\nMinimum weight of alignment pairs to be\nconsidered.")), ToolInput(tag="in_arg_maximum_insert", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --max_insert_length ] arg (=50000)\nMaximum insert length of alignments to\nbe considered (0=unlimited).")), ToolInput(tag="in_arg_maximum_allowed", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --max_coverage ] arg (=200)      Maximum allowed coverage. If exceeded,\nviolating reads are ignored. The number\nof such ignored reads is printed to\nstderr (0=unlimited).")), ToolInput(tag="in_arg_write_edges", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --write_edges ] arg              Write edges to file of given name.")), ToolInput(tag="in_arg_false_discovery", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --fdr ] arg (=0.10000000000000001)\nFalse discovery rate (FDR).")), ToolInput(tag="in_output_cliques_ones", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --all ]                          Output all cliques instead of only the\nsignificant ones. Cliques are not\nsorted and last column (FDR) is not\ncomputed.")), ToolInput(tag="in_arg_output_reads", input_type=File(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --output_reads ] arg             Output reads belonging to at least one\nsignificant clique to the given\nfilename (along with their assignment\nto significant cliques.")), ToolInput(tag="in_arg_output_coverage", input_type=File(optional=True), prefix="-C", doc=InputDocumentation(doc="[ --output_coverage ] arg          Output the coverage with considered\ninsert segments along the chromosome\n(one line per position) to the given\nfilename.")), ToolInput(tag="in_use_separate_mean", input_type=Boolean(optional=True), prefix="-A", doc=InputDocumentation(doc="[ --readgroup_aware ]              Use a separate mean and standard\ndeviations per read group. If given,\nargument <distribution-file> must refer\nto a file containing this information.")), ToolInput(tag="in_use_given_distributioninstead", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --arbitrary_dist ]               Use a given (arbitrary) distribution\ninstead of a normal distribution as\nnull model (EXPERIMENTAL).")), ToolInput(tag="in_arg_load_cached", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="[ --cached_dist ] arg              Load cached distributions as\nprecomputed with tool\n'precompute-distributions'. Does not\nchange results, but increases speed.\nOnly applicable when using option -d.")), ToolInput(tag="in_arg_bam_file", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --read_groups ] arg              BAM file from whose header read group\ninformation is to be read, required if\noptions -A or -S are to be used.")), ToolInput(tag="in_read_groups_come", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="[ --multisample ]                  Read groups come from multiple samples\nas indicated by SM fields in BAM\nheader. Evaluate cliques sample wise.\n")), ToolInput(tag="in_distribution_file", input_type=File(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_arg_output_reads", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_reads", type_hint=File()), doc=OutputDocumentation(doc="[ --output_reads ] arg             Output reads belonging to at least one\nsignificant clique to the given\nfilename (along with their assignment\nto significant cliques.")), ToolOutput(tag="out_arg_output_coverage", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_coverage", type_hint=File()), doc=OutputDocumentation(doc="[ --output_coverage ] arg          Output the coverage with considered\ninsert segments along the chromosome\n(one line per position) to the given\nfilename."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Clever_Core_V0_1_0().translate("wdl", allow_empty_container=True)

