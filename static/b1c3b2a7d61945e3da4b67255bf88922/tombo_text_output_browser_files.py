from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, Int, File, String, Boolean

Tombo_Text_Output_Browser_Files_V0_1_0 = CommandToolBuilder(tool="tombo_text_output_browser_files", base_command=["tombo", "text_output", "browser_files"], inputs=[ToolInput(tag="in_fast_five_based_irs", input_type=Array(t=Int(), optional=True), prefix="--fast5-basedirs", doc=InputDocumentation(doc="Directories containing fast5 files.")), ToolInput(tag="in_control_fast_five_based_irs", input_type=Array(t=Int(), optional=True), prefix="--control-fast5-basedirs", doc=InputDocumentation(doc="Set of directories containing fast5 files for control\nreads, containing only canonical nucleotides.")), ToolInput(tag="in_statistics_filename", input_type=File(optional=True), prefix="--statistics-filename", doc=InputDocumentation(doc="File to save/load genomic base anchored statistics.")), ToolInput(tag="in_genome_fast_a", input_type=File(optional=True), prefix="--genome-fasta", doc=InputDocumentation(doc="FASTA file used to re-squiggle. For faster sequence\naccess.")), ToolInput(tag="in_motif_descriptions", input_type=Array(t=String(), optional=True), prefix="--motif-descriptions", doc=InputDocumentation(doc="Ground truth, motif centered, modified base\ndescriptions for output filtering. Format descriptions\nas: 'motif:mod_pos:name'. The mod_pos indicates the\nmodified base within the motif (1-based index).\nExample: CCWGG:2:dcm_5mC GATC:2:dam_6mA would filter\noutput for identification of E. coli dam and dcm\nmethylation.")), ToolInput(tag="in_browser_file_basename", input_type=File(optional=True), prefix="--browser-file-basename", doc=InputDocumentation(doc="Basename for output browser files. Two files (plus and\nminus strand) will be produced for each --file-types\nsupplied. Filenames formatted as '[browser-file-\nbasename].[file-\ntype].[sample|control]?.[plus|minus].[wig|bedgraph]'.\nDefault: tombo_results")), ToolInput(tag="in_file_types", input_type=String(optional=True), prefix="--file-types", doc=InputDocumentation(doc="[{coverage,valid_coverage,fraction,dampened_fraction,signal,signal_sd,dwell,difference,statistic} ...]\nData types of genome browser files to produce.\nProduced coverage files are in bedGraph format, while\nall other file types will be in wiggle format\n(https://genome.ucsc.edu/goldenpath/help/wiggle.html).\nDefault: 'coverage'")), ToolInput(tag="in_corrected_group", input_type=Int(optional=True), prefix="--corrected-group", doc=InputDocumentation(doc="FAST5 group created by resquiggle command. Default:\nRawGenomeCorrected_000")), ToolInput(tag="in_base_call_subgroups", input_type=Array(t=String(), optional=True), prefix="--basecall-subgroups", doc=InputDocumentation(doc="FAST5 subgroup(s) (under /Analyses/[--basecall-\ngroup]/) containing basecalls and created within\n[--corrected-group] containing re-squiggle results.\nDefault: ['BaseCalled_template']")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Don't print status information."))], outputs=[ToolOutput(tag="out_browser_file_basename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_browser_file_basename", type_hint=File()), doc=OutputDocumentation(doc="Basename for output browser files. Two files (plus and\nminus strand) will be produced for each --file-types\nsupplied. Filenames formatted as '[browser-file-\nbasename].[file-\ntype].[sample|control]?.[plus|minus].[wig|bedgraph]'.\nDefault: tombo_results"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tombo_Text_Output_Browser_Files_V0_1_0().translate("wdl", allow_empty_container=True)

