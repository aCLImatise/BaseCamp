from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Directory, Float, Int

Liftoff_V0_1_0 = CommandToolBuilder(tool="liftoff", base_command=["liftoff"], inputs=[ToolInput(tag="in_annotation_file_lift", input_type=File(optional=True), prefix="-g", doc=InputDocumentation(doc="annotation file to lift over in GFF or GTF format")), ToolInput(tag="in_db", input_type=String(optional=True), prefix="-db", doc=InputDocumentation(doc="name of feature database; if not specified, the -g\nargument must be provided and a database will be built\nautomatically")), ToolInput(tag="in_write_output_written", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="write output to FILE in same format as input; by\ndefault, output is written to terminal (stdout)")), ToolInput(tag="in_write_unmapped_features", input_type=File(optional=True), prefix="-u", doc=InputDocumentation(doc="write unmapped features to FILE; default is\n'unmapped_features.txt'")), ToolInput(tag="in_exclude_partial", input_type=Boolean(optional=True), prefix="-exclude_partial", doc=InputDocumentation(doc="write partial mappings below -s and -a threshold to\nunmapped_features.txt; if true partial/low sequence\nidentity mappings will be included in the gff file with\npartial_mapping=True, low_identity=True in comments")), ToolInput(tag="in_dir", input_type=Directory(optional=True), prefix="-dir", doc=InputDocumentation(doc="name of directory to save intermediate fasta and SAM\nfiles; default is 'intermediate_files'")), ToolInput(tag="in_mm_two_options", input_type=Boolean(optional=True), prefix="-mm2_options", doc=InputDocumentation(doc="=STR   space delimited minimap2 parameters. By default ='-a")), ToolInput(tag="in_designate_feature_it", input_type=Float(optional=True), prefix="-a", doc=InputDocumentation(doc="designate a feature mapped only if it aligns with\ncoverage ≥A; by default A=0.5")), ToolInput(tag="in_designate_feature_its", input_type=Float(optional=True), prefix="-s", doc=InputDocumentation(doc="designate a feature mapped only if its child features\n(usually exons/CDS) align with sequence identity ≥S; by\ndefault S=0.5")), ToolInput(tag="in_distance_scaling_factor", input_type=Float(optional=True), prefix="-d", doc=InputDocumentation(doc="distance scaling factor; alignment nodes separated by\nmore than a factor of D in the target genome will not be\nconnected in the graph; by default D=2.0")), ToolInput(tag="in_flank", input_type=Int(optional=True), prefix="-flank", doc=InputDocumentation(doc="amount of flanking sequence to align as a fraction\n[0.0-1.0] of gene length. This can improve gene\nalignment where gene structure differs between target\nand reference; by default F=0.0")), ToolInput(tag="in_use_parallel_processes", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="use p parallel processes to accelerate alignment; by\ndefault p=1")), ToolInput(tag="in_minimap_path", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="Minimap2 path")), ToolInput(tag="in_list_feature_lift", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="list of feature types to lift over")), ToolInput(tag="in_infer_genes", input_type=Boolean(optional=True), prefix="-infer_genes", doc=InputDocumentation(doc="use if annotation file only includes transcripts,\nexon/CDS features")), ToolInput(tag="in_infer_transcripts", input_type=Boolean(optional=True), prefix="-infer_transcripts", doc=InputDocumentation(doc="use if annotation file only includes exon/CDS features\nand does not include transcripts/mRNA")), ToolInput(tag="in_chrom_s", input_type=File(optional=True), prefix="-chroms", doc=InputDocumentation(doc="comma seperated file with corresponding chromosomes in\nthe reference,target sequences")), ToolInput(tag="in_unplaced", input_type=File(optional=True), prefix="-unplaced", doc=InputDocumentation(doc="text file with name(s) of unplaced sequences to map\ngenes from after genes from chromosomes in chroms.txt\nare mapped; default is 'unplaced_seq_names.txt'")), ToolInput(tag="in_copies", input_type=Boolean(optional=True), prefix="-copies", doc=InputDocumentation(doc="look for extra gene copies in the target genome")), ToolInput(tag="in_sc", input_type=Float(optional=True), prefix="-sc", doc=InputDocumentation(doc="with -copies, minimum sequence identity in exons/CDS for\nwhich a gene is considered a copy; must be greater than\n-s; default is 1.0")), ToolInput(tag="in_overlap", input_type=Float(optional=True), prefix="-overlap", doc=InputDocumentation(doc="maximum fraction [0.0-1.0] of overlap allowed by 2\nfeatures; by default O=0.1")), ToolInput(tag="in_mismatch", input_type=Int(optional=True), prefix="-mismatch", doc=InputDocumentation(doc="mismatch penalty in exons when finding best mapping; by\ndefault M=2")), ToolInput(tag="in_gap_open", input_type=Int(optional=True), prefix="-gap_open", doc=InputDocumentation(doc="gap open penalty in exons when finding best mapping; by\ndefault GO=2")), ToolInput(tag="in_gap_extend", input_type=Int(optional=True), prefix="-gap_extend", doc=InputDocumentation(doc="gap extend penalty in exons when finding best mapping;\nby default GE=1")), ToolInput(tag="in_polish", input_type=Boolean(optional=True), prefix="-polish", doc=InputDocumentation(doc="annotate status of each CDS (partial, missing start,\nmissing stop, inframe stop codon)\n")), ToolInput(tag="in_target", input_type=String(), position=0, doc=InputDocumentation(doc="target fasta genome to lift genes to")), ToolInput(tag="in_reference", input_type=String(), position=1, doc=InputDocumentation(doc="reference fasta genome to lift genes from"))], outputs=[], container="quay.io/biocontainers/liftoff:1.6.1--pyhdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Liftoff_V0_1_0().translate("wdl")

