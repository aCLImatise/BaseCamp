from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Dv_Postprocess_Variants_Py_V0_1_0 = CommandToolBuilder(tool="dv_postprocess_variants.py", base_command=["dv_postprocess_variants.py"], inputs=[ToolInput(tag="in_cnn_hom_ref_call_min_gq", input_type=Boolean(optional=True), prefix="--cnn_homref_call_min_gq", doc=InputDocumentation(doc=": All CNN RefCalls whose GQ is less than this value\nwill have ./. genotype instead of 0/0.\n(default: '20.0')\n(a number)")), ToolInput(tag="in_gvc_f_outfile", input_type=Boolean(optional=True), prefix="--gvcf_outfile", doc=InputDocumentation(doc=": Optional. Destination path where we will write the Genomic VCF")), ToolInput(tag="in_non_variant_site_tf_record_path", input_type=Boolean(optional=True), prefix="--nonvariant_site_tfrecord_path", doc=InputDocumentation(doc=": Optional. Path(s) to the non-variant sites\nprotos in TFRecord format to convert to gVCF file. This should be the\ncomplete set of outputs from the --gvcf flag of make_examples.py.")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc=": Required. Destination path where we will write output variant calls\nin VCF format.")), ToolInput(tag="in_qual_filter", input_type=Boolean(optional=True), prefix="--qual_filter", doc=InputDocumentation(doc=": Any variant with QUAL < qual_filter will be filtered in the VCF")), ToolInput(tag="in_ref", input_type=Boolean(optional=True), prefix="--ref", doc=InputDocumentation(doc=": Required. Genome reference in FAI-indexed FASTA format. Used to\ndetermine the sort order for the emitted variants and the VCF header.")), ToolInput(tag="in_sample_name", input_type=Boolean(optional=True), prefix="--sample_name", doc=InputDocumentation(doc=": Optional. If set, this will only be used if the sample name\ncannot be determined from the CallVariantsOutput or non-variant sites\nprotos.")), ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--infile", doc=InputDocumentation(doc="Input tfrecord file from call_variants")), ToolInput(tag="in_gvc_f_in_file", input_type=File(optional=True), prefix="--gvcf_infile", doc=InputDocumentation(doc="Input gVCF tfrecord file from make_examples, formatted\nas {{gvcf}}/{{sample}}.gvcf.tfrecord@{{cores}}.gz,\nwith arguments as supplied to make_examples.")), ToolInput(tag="in_output_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--infile: Required. Path(s) to CallVariantOutput protos in TFRecord format to")), ToolInput(tag="in_call_variants_do_tpy_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--multi_allelic_qual_filter: The qual value below which to filter multi-"))], outputs=[ToolOutput(tag="out_outfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outfile", type_hint=File()), doc=OutputDocumentation(doc=": Required. Destination path where we will write output variant calls\nin VCF format."))], container="quay.io/biocontainers/deepvariant:1.1.0--py36hf3e76ba_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dv_Postprocess_Variants_Py_V0_1_0().translate("wdl")

