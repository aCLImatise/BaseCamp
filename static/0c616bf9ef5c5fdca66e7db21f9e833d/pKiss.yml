!Command
positional:
- !Positional
  description: ''
  position: 0
  name: fasta file name or RNA sequence
  optional: false
named:
- !Flag
  description: ': Select the computation mode. Available modes are "mfe", "subopt",
    "enforce", "local", "shapes", "probs", "cast", "eval", "abstract". Omit the ticks
    on input. Default is "subopt".'
  synonyms:
  - --mode
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: ': This sets the energy range as an absolute value of the minimum free
    energy. For example, when --absoluteDeviation 10.0 is specified, and the minimum
    free energy is -10.0 kcal/mol, the energy range is set to 0.0 to -10.0 kcal/mol.
    <float> must be a positive floating point number. Connot be combined with --relativeDeviation.
    Only available in modes: "subopt", "local", "shapes", "cast".'
  synonyms:
  - --absoluteDeviation
  args: !SimpleFlagArg
    name: float
  optional: true
- !Flag
  description: ': This sets the energy range as percentage value of the minimum free
    energy. For example, when --relativeDeviation 5.0 is specified, and the minimum
    free energy is -10.0 kcal/mol, the energy range is set to -9.5 to -10.0 kcal/mol.
    <float> must be a positive floating point number. By default, --relativeDeviation
    is set to 10 %. Cannot be combined with --absoluteDeviation. Only available in
    modes: "subopt", "local", "shapes", "cast".'
  synonyms:
  - --relativeDeviation
  args: !SimpleFlagArg
    name: float
  optional: true
- !Flag
  description: ': Set shape abstraction level. Currently, we provide five different
    levels (see 1] for their definitions), where 5 is the most abstract and 1 the
    most concrete one. <int> must be a number between 5 and 1. Default is 5 (the most
    abstract one). Only available in modes: "shapes", "probs", "cast", "eval", "abstract".'
  synonyms:
  - --shapeLevel
  args: !SimpleFlagArg
    name: int
  optional: true
- !Flag
  description: ': This option sets a barrier for filtering out results with very low
    probabilities during calculation. The default value here is 1e-06, which gives
    a significant speedup compared to a disabled filter. (See 4] for details.) Note
    that this filter can have a slight influence on the overall results. To disable
    this filter, use option --lowProbFilter 0. <float> must be a positive floating
    point number smaller than 1. Only available in mode: "probs".'
  synonyms:
  - --lowProbFilter
  args: !SimpleFlagArg
    name: float
  optional: true
- !Flag
  description: ': This option sets a filter for omitting low probability results during
    output. It is just for reporting convenience. Unlike probability cutoff filter,
    this option does not have any influence on runtime or probabilities beyond this
    value. To disable this filter, use option --outputLowProbFilter 0. <float> must
    be a positive floating point number smaller than 1. Only available in mode: "probs".'
  synonyms:
  - --outputLowProbFilter
  args: !SimpleFlagArg
    name: float
  optional: true
- !Flag
  description: ': Activates window mode and computes substrings of size <int> for
    the input. After computation for the first <int> bases is done, the window is
    pushed <y> bases to the right and the next computation is startet. <y> is set
    by --windowIncrement. <int> must be a non-zero positive integer, smaller than
    the input length. Only available in modes: "mfe", "subopt", "enforce", "local",
    "shapes", "probs".'
  synonyms:
  - --windowSize
  args: !SimpleFlagArg
    name: int
  optional: true
- !Flag
  description: ': If --windowSize is given, this parameter sets the offset for the
    next window to <int> bases. <int> must be a non-zero positive integer, smaller
    than --windowSize. Default is 1. Only available in modes: "mfe", "subopt", "enforce",
    "local", "shapes", "probs".'
  synonyms:
  - --windowIncrement
  args: !SimpleFlagArg
    name: int
  optional: true
- !Flag
  description: ": Select pseudoknot strategy. There are four different strategies\
    \ how to compute kissing hairpins (K-type pseudoknots). We suggest 'A', see [8]\
    \ for details. If you choose 'P' only H-type pseudoknots can be computed. Available\
    \ strategies are 'A','B','C','D' and 'P'. On input omit the ticks. Default is\
    \ 'A'. Only available in modes: \"mfe\", \"subopt\", \"enforce\", \"local\", \"\
    shapes\", \"probs\", \"cast\"."
  synonyms:
  - --strategy
  args: !SimpleFlagArg
    name: char
  optional: true
- !Flag
  description: ': Set minimal hairpin length for K-type pseudoknots. The first heuristic
    step in computung kissing hairpins, is to find stable, non-interrupted helices.
    These helices must have a minimal length, i.e. number of stacked base-pairs, of
    <int>. The higher the value, the faster the program, but also the less accurate.
    This affects only the stems of both hairpins, not their kissing helix! <int> must
    be a positive number. Default is 2.'
  synonyms:
  - --minHairpinLength
  args: !SimpleFlagArg
    name: int
  optional: true
- !Flag
  description: ": Set a maximal pseudoknot size. To speed up computation, you can\
    \ limit the number of bases involved in a pseudoknot (and all it's loop regions)\
    \ by giving <int>. Only positive numbers are allowed for <int> By default, there\
    \ is no limitation, i.e. --maxKnotSize is set to input length. Only available\
    \ in modes: \"mfe\", \"subopt\", \"enforce\", \"local\", \"shapes\", \"probs\"\
    , \"cast\"."
  synonyms:
  - --maxKnotSize
  args: !SimpleFlagArg
    name: int
  optional: true
- !Flag
  description: ': Set init. energy penalty for an H-type pseudoknot. Thermodynamic
    energy parameters for pseudoknots have not been measured in a wet lab, yet. Thus,
    you might want to set the penalty for opening a H-type pseudoknot yourself. <float>
    must be a floating point number. Default is 9 kcal/mol. Only available in modes:
    "mfe", "subopt", "enforce", "local", "shapes", "probs", "cast", "eval".'
  synonyms:
  - --Hpenalty
  args: !SimpleFlagArg
    name: float
  optional: true
- !Flag
  description: ': Set init. energy penalty for an K-type pseudoknot. Thermodynamic
    energy parameters for pseudoknots have not been measured in a wet lab, yet. Thus,
    you might want to set the penalty for opening a K-type pseudoknot yourself. <float>
    must be a floating point number. Default is 12 kcal/mol. Only available in modes:
    "mfe", "subopt", "enforce", "local", "shapes", "probs", "cast", "eval".'
  synonyms:
  - --Kpenalty
  args: !SimpleFlagArg
    name: float
  optional: true
- !Flag
  description: ": Lonely base pairs have no stabilizing effect, because they cannot\
    \ stack on another pair, but they heavily increase the size of the folding space.\
    \ Thus, we normally forbid them. Should you want to allow them set <int> to 1.\
    \ <int> must be 0 (=don't allow lonely base pairs) or 1 (= allow them). Default\
    \ is 0, i.e. no lonely base pairs."
  synonyms:
  - --allowLP
  args: !SimpleFlagArg
    name: int
  optional: true
- !Flag
  description: ': Rescale energy parameters to a temperature of temp C. <float> must
    be a floating point number. Default is 37 C. Only available in modes: "mfe", "subopt",
    "enforce", "local", "shapes", "probs", "cast", "eval".'
  synonyms:
  - --temperature
  args: !SimpleFlagArg
    name: float
  optional: true
- !Flag
  description: ': Read energy parameters from paramfile, instead of using the default
    parameter set. See the RNAlib (Vienna RNA package) documentation for details on
    the file format. Default are parameters released by the Turner group in 2004 (see
    [5] and [6]). Only available in modes: "mfe", "subopt", "enforce", "local", "shapes",
    "probs", "cast", "eval".'
  synonyms:
  - --param
  args: !SimpleFlagArg
    name: paramfile
  optional: true
- !Flag
  description: ": pKiss expects that according Bellman's GAP compiled binaries are\
    \ located in the same directory as the Perl wrapper is. Should you moved them\
    \ into another directory, you must set --binPath to this new location!"
  synonyms:
  - --binPath
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: ": pKiss expects a special naming schema for the according Bellman's\
    \ GAP compiled binaries. On default, each binary is named \"pKiss_\", followed\
    \ by the mode, followed by \"_window\" for the window mode version. Thus, for\
    \ non-window mode \"subopt\" the name would be \"pKiss_subopt\". With --binPrefix\
    \ you can change the prefix into some arbitary one."
  synonyms:
  - --binPrefix
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: ': Sets the number of digits used for printing shape probabilities.
    <int> must be a positive integer number. Default is 7. Only available in mode:
    "probs".'
  synonyms:
  - --probDecimals
  args: !SimpleFlagArg
    name: int
  optional: true
- !Flag
  description: ": Prints the actual command for Bellman's GAP binary."
  synonyms:
  - --verbose
  args: !SimpleFlagArg
    name: int
  optional: true
- !Flag
  description: ': Provide a file name to which a HTML formatted version of the output
    should be saved in. Only available in modes: "mfe", "subopt", "enforce", "local",
    "shapes", "probs", "cast", "eval".'
  synonyms:
  - --varna
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: ''
  synonyms:
  - -options
  args: !EmptyFlagArg {}
  optional: true
command:
- pKiss
parent:
subcommands: []
help_flag: !Flag
  description: ': show this brief help on version and usage'
  synonyms:
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "# pKiss: RNA secondary structure predictions including pseudoknots\n#\
  \        version 2.2.12 (20.03.2015)\n#        Stefan Janssen (bibi-help@techfak.uni-bielefeld.de)\n\
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\
  \nUSAGE: \nperl pKiss [-mode] [-options] <fasta file name or RNA sequence>\n\n pKiss\
  \ comes with the following different modes of predictions:\n  mfe     : Computes\
  \ the single energetically most stable secondary structure\n            for the\
  \ given RNA sequence. This structure might contain a\n            pseudoknot of\
  \ type H (simple canonical recursive pseudoknot) or\n            type K (simple\
  \ canonical recursive kissing hairpin), but need not\n            to. Co-optimal\
  \ results will be suppressed, i.e. should different\n            prediction have\
  \ the same best energy value, just an arbitrary one\n            out of them will\
  \ be reported.\n\n  subopt  : Often, the biological relevant structure is hidden\
  \ among suboptimal\n            predictions. In \"subopt mode\", you can also inspect\
  \ all suboptimal\n            solutions up to a given threshold (see parameters\n\
  \            --absoluteDeviation and --relativeDeviation). Due to semantic\n   \
  \         ambiguity of the underlying \"microstate\" grammar, sometimes\n      \
  \      identical predictions will show up. As Vienna-Dot-Bracket strings\n     \
  \       they seem to be the same, but according to base dangling they\n        \
  \    differ and thus might even have slightly different energies. See 1]\n     \
  \       for details.\n\n  enforce : Energetically best pseudoknots might be deeply\
  \ buried under\n            suboptimal solutions. Use \"enforce\" mode to enforce\
  \ a structure\n            prediction for each of the for classes: \"nested structure\"\
  \ (as\n            \"RNAfold\" would compute, i.e. without pseudoknots), \"H-type\n\
  \            pseudoknot\", \"K-type pseudoknot\" and \"H- and K-type pseudoknot\"\
  .\n            Useful if you want to compute the tendency of folding a pseudoknot\n\
  \            or not, like in 2].\n\n  local   : Computes energetically best and\
  \ suboptimal local pseudoknots. Local\n            means, leading and trailing bases\
  \ can be omitted and every\n            prediction is a pseudoknot.\n\n  shapes\
  \  : Output of \"subopt\" mode is crowded by many very similar answers,\n      \
  \      which make it hard to focus to the \"important\" changes. The\n         \
  \   abstract shape concept 3] groups similar answers together and\n            reports\
  \ only the best answer within such a group. Due to\n            abstraction, suboptimal\
  \ analyses can be done more thorough, by\n            ignoring boring differences.\n\
  \            (see parameter --shapeLevel)\n\n  probs   : Structure probabilities\
  \ are strictly correlated to their energy\n            values. Grouped together\
  \ into shape classes, their probabilities\n            add up. Often a shape class\
  \ with many members of worse energy\n            becomes more probable than the\
  \ shape containing the mfe structure\n            but not much more members. See\
  \ 4] for details on shape\n            probabilities.\n\n  cast    : This mode is\
  \ the RNAcast approache, see 8].\n            For a family of RNA sequences, this\
  \ method independently enumerates\n            the near-optimal abstract shape space,\
  \ and predicts as the\n            consensus an abstract shape common to all sequences.\
  \ For each\n            sequence, it delivers the thermodynamically best structure\
  \ which\n            has this common shape.\n            Input is a multiple fasta\
  \ file, which should contain at least two\n            sequences.\n            Output\
  \ is sorted by \"score\" of common shapes, i.e. summed free\n            energy\
  \ of all sequences. R is the rank (= list position) of the\n            shape in\
  \ individual sequence analysis.\n\n  eval    : Evaluates the free energy of an RNA\
  \ molecule in fixed secondary\n            structure, similar to RNAeval from the\
  \ Vienna group. Multiple\n            answers stem from semantic ambiguity of the\
  \ underlying grammar.\n            It might happen, that your given structure is\
  \ not a structure for\n            the sequence. Maybe your settings are too restrictive,\
  \ e.g. not\n            allowing lonely base-pairs (--allowLP), too long hairpin\
  \ stems for\n            pseudoknots (--minHairpinLength) or the given pseudoknot\
  \ is more\n            complex than those of pKiss.\n            If you input a\
  \ (multiple) FASTA file, pKiss assumes that exactly\n            first half of the\
  \ contents of each entry is RNA sequence, second\n            half is the according\
  \ structure. Whitespaces are ignored.\n\n  abstract : Converts a Vienna-Dot-Bracket\
  \ representation of a secondary\n             structure into a shape string.\n\n\
  GENERAL OPTIONS:\n  --mode <string> : Select the computation mode. Available modes\
  \ are \"mfe\",\n                    \"subopt\", \"enforce\", \"local\", \"shapes\"\
  , \"probs\", \"cast\",\n                    \"eval\", \"abstract\". Omit the ticks\
  \ on input.\n                    Default is \"subopt\".\n\n  --absoluteDeviation\
  \ <float> : This sets the energy range as an absolute value\n                  \
  \              of the minimum free energy. For example, when\n                 \
  \               --absoluteDeviation 10.0 is specified, and the\n               \
  \                 minimum free energy is -10.0 kcal/mol, the\n                 \
  \               energy range is set to 0.0 to -10.0 kcal/mol.\n                \
  \                <float> must be a positive floating point\n                   \
  \             number.\n                                Connot be combined with --relativeDeviation.\n\
  \                                Only available in modes: \"subopt\", \"local\"\
  ,\n                                \"shapes\", \"cast\".\n\n  --relativeDeviation\
  \ <float> : This sets the energy range as percentage value\n                   \
  \             of the minimum free energy. For example, when\n                  \
  \              --relativeDeviation 5.0 is specified, and the\n                 \
  \               minimum free energy is -10.0 kcal/mol, the\n                   \
  \             energy range is set to -9.5 to -10.0 kcal/mol.\n                 \
  \               <float> must be a positive floating point\n                    \
  \            number.\n                                By default, --relativeDeviation\
  \ is set to 10 %.\n                                Cannot be combined with --absoluteDeviation.\n\
  \                                Only available in modes: \"subopt\", \"local\"\
  ,\n                                \"shapes\", \"cast\".\n\n  --shapeLevel <int>\
  \ : Set shape abstraction level. Currently, we provide five\n                  \
  \     different levels (see 1] for their definitions), where 5\n               \
  \        is the most abstract and 1 the most concrete one.\n                   \
  \    <int> must be a number between 5 and 1.\n                       Default is\
  \ 5 (the most abstract one).\n                       Only available in modes: \"\
  shapes\", \"probs\", \"cast\",\n                       \"eval\", \"abstract\".\n\
  \n  --lowProbFilter <float> : This option sets a barrier for filtering out\n   \
  \                         results with very low probabilities during\n         \
  \                   calculation. The default value here is 1e-06, which\n      \
  \                      gives a significant speedup compared to a disabled\n    \
  \                        filter. (See 4] for details.) Note that this filter\n \
  \                           can have a slight influence on the overall results.\n\
  \                            To disable this filter, use option --lowProbFilter\n\
  \                            0.\n                            <float> must be a positive\
  \ floating point number\n                            smaller than 1.\n         \
  \                   Only available in mode: \"probs\".\n\n  --outputLowProbFilter\
  \ <float> : This option sets a filter for omitting low\n                       \
  \           probability results during output. It is just\n                    \
  \              for reporting convenience. Unlike probability\n                 \
  \                 cutoff filter, this option does not have any\n               \
  \                   influence on runtime or probabilities beyond\n             \
  \                     this value. To disable this filter, use\n                \
  \                  option --outputLowProbFilter 0.\n                           \
  \       <float> must be a positive floating point\n                            \
  \      number smaller than 1.\n                                  Only available\
  \ in mode: \"probs\".\n\n  --windowSize <int> : Activates window mode and computes\
  \ substrings of size\n                       <int> for the input. After computation\
  \ for the first\n                       <int> bases is done, the window is pushed\
  \ <y> bases to\n                       the right and the next computation is startet.\
  \ <y> is\n                       set by --windowIncrement.\n                   \
  \    <int> must be a non-zero positive integer, smaller than\n                 \
  \      the input length.\n                       Only available in modes: \"mfe\"\
  , \"subopt\", \"enforce\",\n                       \"local\", \"shapes\", \"probs\"\
  .\n\n  --windowIncrement <int> : If --windowSize is given, this parameter sets the\n\
  \                            offset for the next window to <int> bases.\n      \
  \                      <int> must be a non-zero positive integer, smaller\n    \
  \                        than --windowSize.\n                            Default\
  \ is 1.\n                            Only available in modes: \"mfe\", \"subopt\"\
  ,\n                            \"enforce\", \"local\", \"shapes\", \"probs\".\n\n\
  PSEUDOKNOT OPTIONS:\n  --strategy <char> : Select pseudoknot strategy. There are\
  \ four different\n                      strategies how to compute kissing hairpins\
  \ (K-type\n                      pseudoknots). We suggest 'A', see [8] for details.\
  \ If you\n                      choose 'P' only H-type pseudoknots can be computed.\n\
  \                      Available strategies are 'A','B','C','D' and 'P'. On\n  \
  \                    input omit the ticks.\n                      Default is 'A'.\n\
  \                      Only available in modes: \"mfe\", \"subopt\", \"enforce\"\
  ,\n                      \"local\", \"shapes\", \"probs\", \"cast\".\n\n  --minHairpinLength\
  \ <int> : Set minimal hairpin length for K-type pseudoknots.\n                 \
  \            The first heuristic step in computung kissing\n                   \
  \          hairpins, is to find stable, non-interrupted\n                      \
  \       helices. These helices must have a minimal length,\n                   \
  \          i.e. number of stacked base-pairs, of <int>. The\n                  \
  \           higher the value, the faster the program, but also\n               \
  \              the less accurate. This affects only the stems of\n             \
  \                both hairpins, not their kissing helix!\n                     \
  \        <int> must be a positive number.\n                             Default\
  \ is 2.\n\n  --maxKnotSize <int> : Set a maximal pseudoknot size. To speed up computation,\n\
  \                        you can limit the number of bases involved in a\n     \
  \                   pseudoknot (and all it's loop regions) by giving <int>.\n  \
  \                      Only positive numbers are allowed for <int>\n           \
  \             By default, there is no limitation, i.e. --maxKnotSize\n         \
  \               is set to input length.\n                        Only available\
  \ in modes: \"mfe\", \"subopt\", \"enforce\",\n                        \"local\"\
  , \"shapes\", \"probs\", \"cast\".\n\n  --Hpenalty <float> : Set init. energy penalty\
  \ for an H-type pseudoknot.\n                       Thermodynamic energy parameters\
  \ for pseudoknots have not\n                       been measured in a wet lab, yet.\
  \ Thus, you might want to\n                       set the penalty for opening a\
  \ H-type pseudoknot\n                       yourself.\n                       <float>\
  \ must be a floating point number.\n                       Default is 9 kcal/mol.\n\
  \                       Only available in modes: \"mfe\", \"subopt\", \"enforce\"\
  ,\n                       \"local\", \"shapes\", \"probs\", \"cast\", \"eval\".\n\
  \n  --Kpenalty <float> : Set init. energy penalty for an K-type pseudoknot.\n  \
  \                     Thermodynamic energy parameters for pseudoknots have not\n\
  \                       been measured in a wet lab, yet. Thus, you might want to\n\
  \                       set the penalty for opening a K-type pseudoknot\n      \
  \                 yourself.\n                       <float> must be a floating point\
  \ number.\n                       Default is 12 kcal/mol.\n                    \
  \   Only available in modes: \"mfe\", \"subopt\", \"enforce\",\n               \
  \        \"local\", \"shapes\", \"probs\", \"cast\", \"eval\".\n\nFOLDING OPTIONS:\n\
  \  --allowLP <int> : Lonely base pairs have no stabilizing effect, because they\n\
  \                    cannot stack on another pair, but they heavily increase the\n\
  \                    size of the folding space. Thus, we normally forbid them.\n\
  \                    Should you want to allow them set <int> to 1.\n           \
  \         <int> must be 0 (=don't allow lonely base pairs) or 1 (=\n           \
  \         allow them).\n                    Default is 0, i.e. no lonely base pairs.\n\
  \n  --temperature <float> : Rescale energy parameters to a temperature of temp C.\n\
  \                          <float> must be a floating point number.\n          \
  \                Default is 37 C.\n                          Only available in modes:\
  \ \"mfe\", \"subopt\", \"enforce\",\n                          \"local\", \"shapes\"\
  , \"probs\", \"cast\", \"eval\".\n\n  --param <paramfile> : Read energy parameters\
  \ from paramfile, instead of using\n                        the default parameter\
  \ set. See the RNAlib (Vienna RNA\n                        package) documentation\
  \ for details on the file format.\n                        Default are parameters\
  \ released by the Turner group in\n                        2004 (see [5] and [6]).\n\
  \                        Only available in modes: \"mfe\", \"subopt\", \"enforce\"\
  ,\n                        \"local\", \"shapes\", \"probs\", \"cast\", \"eval\"\
  .\n\nSYSTEM OPTIONS:\n  --binPath <string> : pKiss expects that according Bellman's\
  \ GAP compiled\n                       binaries are located in the same directory\
  \ as the Perl\n                       wrapper is. Should you moved them into another\n\
  \                       directory, you must set --binPath to this new location!\n\
  \n  --binPrefix <string> : pKiss expects a special naming schema for the\n     \
  \                    according Bellman's GAP compiled binaries. On default,\n  \
  \                       each binary is named \"pKiss_\", followed by the mode,\n\
  \                         followed by \"_window\" for the window mode version.\n\
  \                         Thus, for non-window mode \"subopt\" the name would be\n\
  \                         \"pKiss_subopt\". With --binPrefix you can change the\n\
  \                         prefix into some arbitary one.\n\n  --probDecimals <int>\
  \ : Sets the number of digits used for printing shape\n                        \
  \ probabilities.\n                         <int> must be a positive integer number.\n\
  \                         Default is 7.\n                         Only available\
  \ in mode: \"probs\".\n\n  --help : show this brief help on version and usage\n\n\
  \  --verbose <int> : Prints the actual command for Bellman's GAP binary.\n\n  --varna\
  \ <string> : Provide a file name to which a HTML formatted version of\n        \
  \             the output should be saved in.\n                     Only available\
  \ in modes: \"mfe\", \"subopt\", \"enforce\",\n                     \"local\", \"\
  shapes\", \"probs\", \"cast\", \"eval\".\n\nREFERENCES:\n[1] Stefan Janssen, Christian\
  \ Schudoma, Gerhard Steger, Robert Giegerich.\n    \"Lost in folding space? Comparing\
  \ four variants of the thermodynamic model\n    for RNA secondary structure prediction.\"\
  \n    BMC Bioinformatics 2011. doi:10.1186/1471-2105-12-429\n\n[2] Corinna Theis,\
  \ Jens Reeder, Robert Giegerich.\n    \"KnotInFrame: prediction of -1 ribosomal\
  \ frameshift events.\"\n    Nucleic Acids Research 2008. doi:10.1093/nar/gkn578\n\
  \n[3] Stefan Janssen, Robert Giegerich.\n    \"Faster computation of exact RNA shape\
  \ probabilities.\"\n    Bioinformatics 2010. doi:10.1093/bioinformatics/btq014\n\
  \n[4] Bjoern Voss, Robert Giegerich, Marc Rehmsmeier.\n    \"Complete probabilistic\
  \ analysis of RNA shapes.\"\n    BMC Biology 2006. doi:10.1186/1741-7007-4-5\n\n\
  [5] David H Mathews, Matthew D Disney, Jessica L Childs, Susan J Schroeder,\n  \
  \  Michael Zuker, Douglas H Turner.\n    \"Incorporating chemical modification constraints\
  \ into a dynamic programming\n    algorithm for prediction of RNA secondary structure.\"\
  \n    Proceedings of the National Academy of Sciences of the United States of\n\
  \    America 2004. doi:10.1073/pnas.0401799101\n\n[6] Douglas H Turner, David H\
  \ Mathews.\n    \"NNDB: The nearest neighbor parameter database for predicting stability\
  \ of\n    nucleic acid secondary structure.\"\n    Nucleic Acids Research 2009.\
  \ doi:10.1093/nar/gkp892\n\n[7] Jens Reeder, Robert Giegerich.\n    \"Consensus\
  \ shapes: an alternative to the Sankoff algorithm for RNA\n    consensus structure\
  \ prediction.\"\n    Bioinformatics 2005. doi:10.1093/bioinformatics/bti577\n\n\
  [8] Corinna Theis, Stefan Janssen, Robert Giegerich\n    \"Prediction of RNA secondary\
  \ structure including kissing hairpin motifs.\"\n    Algorithms in Bioinformatics\
  \ 2010. doi:10.1007/978-3-642-15294-8_5\n\nCITATION:\n    If you use this program\
  \ in your work you might want to cite:\n\n[9] Stefan Janssen, Robert Giegerich.\n\
  \    \"The RNA shapes studio.\"\n    Bioinformatics 2014. doi:10.1093/bioinformatics/btu649\n\
  \n"
generated_using:
- --help
