from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean

Idmapper_V0_1_0 = CommandToolBuilder(tool="IDMapper", base_command=["IDMapper"], inputs=[ToolInput(tag="in_id", input_type=File(optional=True), prefix="-id", doc=InputDocumentation(doc="*                  Protein/peptide identifications file (valid formats: 'mzid', 'idXML')")), ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*                  Feature map/consensus map file (valid formats: 'featureXML', 'consensusXML', 'mzq')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*                 Output file (the format depends on the input file format). (valid formats: 'featureXML', 'consensusXML', 'mzq')")), ToolInput(tag="in_rt_tolerance", input_type=Int(optional=True), prefix="-rt_tolerance", doc=InputDocumentation(doc="RT tolerance (in seconds) for the matching of peptide identifications and (consensus) features.\nTolerance is understood as 'plus or minus x', so the matching range increases by twice the given value. (default: '5' min: '0')")), ToolInput(tag="in_mz_tolerance", input_type=Int(optional=True), prefix="-mz_tolerance", doc=InputDocumentation(doc="M/z tolerance (in ppm or Da) for the matching of peptide identifications and (consensus) features.\nTolerance is understood as 'plus or minus x', so the matching range increases by twice the given value. (default: '20' min: '0')")), ToolInput(tag="in_mz_measure", input_type=String(optional=True), prefix="-mz_measure", doc=InputDocumentation(doc="Unit of 'mz_tolerance'. (default: 'ppm' valid: 'ppm', 'Da')")), ToolInput(tag="in_mz_reference", input_type=String(optional=True), prefix="-mz_reference", doc=InputDocumentation(doc="Source of m/z values for peptide identifications. If 'precursor', the precursor-m/z from the idXML is used. If 'peptide',\nmasses are computed from the sequences of peptide hits; in this case, an identification matches if any of its hits matches.\n('peptide' should be used together with 'feature:use_centroid_mz' to avoid false-positive matches.) (default: 'precursor' valid: 'precursor', 'peptide')")), ToolInput(tag="in_ignore_charge", input_type=Boolean(optional=True), prefix="-ignore_charge", doc=InputDocumentation(doc="For feature/consensus maps: Assign an ID independently of whether its charge state matches that of the (consensus) feature.")), ToolInput(tag="in_consensus", input_type=Boolean(optional=True), prefix="-consensus", doc=InputDocumentation(doc=":use_subelements   Match using RT and m/z of sub-features instead of consensus RT and m/z. A consensus feature matches if any of its sub-features matches.")), ToolInput(tag="in_spectra", input_type=Boolean(optional=True), prefix="-spectra", doc=InputDocumentation(doc=":in <file>           MS run used to annotated unidentified spectra to features or consensus features. (valid formats: 'mzML')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Idmapper_V0_1_0().translate("wdl", allow_empty_container=True)

