!Command
command:
- clinod
positional:
- !Positional
  optional: false
  position: 0
  name: console.
  description: "Performance: \r"
named:
- !Flag
  optional: true
  synonyms:
  - -in
  description: "- required, absolute path to the input file.\nThe input file expected\
    \ to contain the list of\nFASTA formatted sequences."
  args: !SimpleFlagArg
    name: input file
- !Flag
  optional: true
  synonyms:
  - -out
  description: "- optional, by default the system prints the\noutput to the console.\
    \ If the file exists it\nwill be overridden.\nThe order of the predictions in\
    \ the output is\nguaranteed to be the same as the order of the\nsequences in the\
    \ input. This means that the\nprediction for the tenth sequence from the input\n\
    will be the tenth prediction in the output,\nunless -nonols parameter was used\
    \ to suppress\nreporting predictions with no NOLS detected"
  args: !SimpleFlagArg
    name: output file
- !Flag
  optional: true
  synonyms:
  - -f
  description: "- optional, defaults to MEDIUM. Possible values\nCOMPLETE, FULL, MEDIUM,\
    \ SHORT and MINIMAL (case\nsensitive)\nWhere MINIMAL - contains the sequence name\
    \ and\nthe number of NOLS detected.\nWhere MINIMAL_TAB - same as MINIMAL but the\n\
    fields in the output are tab delimited and only\nthe first word of the sequence\
    \ name is output.\nSHORT - same as MINIMAL plus coordinates of\nthe NOLS\nMEDIUM\
    \ - same as SHORT plus NOLS reported\nseparately\nMEDIUM_TAB - same as MEDIUM\
    \ but the fields in\nthe output are tab delimited and only the first\nword of\
    \ the sequence name is output.\nFULL - same as MEDIUM plus scores for each\nposition\
    \ of the sequence. The scores are\nreported for every window of size 20 in the\
    \ full\nsequence, one score per line. The scores are\nassociate with the first\
    \ residue of the window.\nWindows with a score above 0.8 are predicted as\nNoLSs.\n\
    COMPLETE - same as FULL plus the original\nsequence"
  args: !SimpleFlagArg
    name: output format
- !Flag
  optional: true
  synonyms:
  - -d
  description: "- optional, defaults to the system temp directory\n(defined by the\
    \ \"java.io.tmpdir\" environmental\nvariable) If the directory does not exist,\
    \ it\nwill be created. However the parent directory\nmust exist. For example if\
    \ working directory is\nset to /home/tmp and home directory does not\nexist then\
    \ the execution will be terminated.\nIf the home directory exist but tmp directory\n\
    does not, the tmp directory will be created.\nIf the /home/tmp directory exist\
    \ then it will\nbe used. If the /home/tmp directory is not\nempty, then any files\
    \ with the same name as\ngenerated by the program will be overridden."
  args: !SimpleFlagArg
    name: working directory
- !Flag
  optional: true
  synonyms:
  - -t
  description: "- optional, defaults to the number of cores\navailable on the computer.\
    \ Maximum number of\nthreads cannot be greater than twice the number\nof available\
    \ cores. However, we have not\nobserved any significant gains from increasing\n\
    the number of threads beyond the number of CPU\ncores actually available on the\
    \ computer."
  args: !SimpleFlagArg
    name: number of threads
- !Flag
  optional: true
  synonyms:
  - -bm
  description: "- optional, an absolute path to the Batchman\nexecutable. By default\
    \ this path is searched in\nthe environmental variable called BATCHMAN_PATH.\n\
    If it is not found there, then clinod attempts\nto locate the batchman executable\
    \ in the same\ndirectory as the clinod jar file. In order to be\nfound there the\
    \ batchman executable must be\ncalled the \"batchman.exe\" on Windows systems\
    \ and\nthe \"batchman\" on all other operating systems.\nIf neither of those paths\
    \ are valid then the\nexecution fails.\nIf several paths are valid then clinod\
    \ uses them\nin the following order:\n1) Path from the command line parameter\n\
    2) Path from the environmental variable\n3) Local directory path"
  args: !SimpleFlagArg
    name: batchman path
- !Flag
  optional: true
  synonyms:
  - -nonols
  description: "- optional, suppresses reporting of the proteins\nwith no NOLS detected\
    \ if specified."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -clean_sequence
  description: "- optional, if specified causes the predictor to\nautomatically remove\
    \ all non-protein characters\nfrom the sequences that contains them.\nThe predictor\
    \ only works with unambiguous\nprotein sequences. Only the following characters\n\
    considered to be valid: ARNDCQEGHILKMFPSTWYV.\nIf any other character is detected\
    \ in the\nsequence the predictor stops the execution and\nraises the exception\
    \ unless this flag is\nspecified. In this case, the predictor removes\ninvalid\
    \ characters from the sequence and writes\nthe information about it into the log\
    \ file."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -jar
  description: ''
  args: !SimpleFlagArg
    name: clinod-1.3.jar
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  description: "- print help (this information). If this flag is\ngiven all other\
    \ options are ignored."
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "\r\nNucleOlar localization sequence Detector v. 1.3b (13 May 2011) \r\n\
  http://www.compbio.dundee.ac.uk/nod \r\n \r\nUsage:\r\n       java -jar clinod-1.3.jar\
  \ -in=inputFile <OPTIONS>\r\n\t\t\r\n       -in=<input file>       - required, absolute\
  \ path to the input file. \r\n                                The input file expected\
  \ to contain the list of \r\n                                FASTA formatted sequences.\
  \  \r\n\t\r\n       -out=<output file>     - optional, by default the system prints\
  \ the \r\n                                output to the console. If the file exists\
  \ it \r\n                                will be overridden.\r\n               \
  \                 The order of the predictions in the output is \r\n           \
  \                     guaranteed to be the same as the order of the \r\n       \
  \                         sequences in the input. This means that the \r\n     \
  \                           prediction for the tenth sequence from the input \r\n\
  \                                will be the tenth prediction in the output, \r\n\
  \                                unless -nonols parameter was used to suppress \r\
  \n                                reporting predictions with no NOLS detected  \
  \   \r\n\t\r\n       -f=<output format>     - optional, defaults to MEDIUM. Possible\
  \ values\r\n                                COMPLETE, FULL, MEDIUM, SHORT and MINIMAL\
  \ (case\r\n                                sensitive)\r\n                      \
  \          \r\n                                Where MINIMAL - contains the sequence\
  \ name and\r\n                                the number of NOLS detected.  \r\n\
  \                                \r\n                                Where MINIMAL_TAB\
  \ - same as MINIMAL but the \r\n                                fields in the output\
  \ are tab delimited and only \r\n                                the first word\
  \ of the sequence name is output.  \r\n                                \r\n    \
  \                            SHORT - same as MINIMAL plus coordinates of \r\n  \
  \                              the NOLS \r\n                                \r\n\
  \                                MEDIUM - same as SHORT plus NOLS reported \r\n\
  \                                separately  \r\n                              \
  \  \r\n                                MEDIUM_TAB - same as MEDIUM but the fields\
  \ in \r\n                                the output are tab delimited and only the\
  \ first \r\n                                word of the sequence name is output.\
  \  \r\n                                \r\n                                FULL\
  \ - same as MEDIUM plus scores for each \r\n                                position\
  \ of the sequence. The scores are \r\n                                reported for\
  \ every window of size 20 in the full\r\n                                sequence,\
  \ one score per line. The scores are \r\n                                associate\
  \ with the first residue of the window. \r\n                                Windows\
  \ with a score above 0.8 are predicted as \r\n                                NoLSs.\
  \         \r\n                                \r\n                             \
  \   COMPLETE - same as FULL plus the original \r\n                             \
  \   sequence                           \r\n\r\n       -d=<working directory> - optional,\
  \ defaults to the system temp directory\r\n       \t\t\t\t(defined by the \"java.io.tmpdir\"\
  \ environmental \r\n       \t\t\t\tvariable) If the directory does not exist, it\
  \ \r\n       \t\t\t\twill be created. However the parent directory \r\n       \t\
  \t\t\tmust exist. For example if working directory is \r\n       \t\t\t\tset to\
  \ /home/tmp and home directory does not \r\n       \t\t\t\texist then the execution\
  \ will be terminated. \r\n       \t\t\t\tIf the home directory exist but tmp directory\
  \ \r\n       \t\t\t\tdoes not, the tmp directory will be created. \r\n       \t\t\
  \t\tIf the /home/tmp directory exist then it will \r\n       \t\t\t\tbe used. If\
  \ the /home/tmp directory is not \r\n       \t\t\t\tempty, then any files with the\
  \ same name as \r\n       \t\t\t\tgenerated by the program will be overridden. \
  \   \r\n\t\r\n       -t=<number of threads> - optional, defaults to the number of\
  \ cores \r\n                                available on the computer. Maximum number\
  \ of \r\n                                threads cannot be greater than twice the\
  \ number \r\n                                of available cores. However, we have\
  \ not \r\n                                observed any significant gains from increasing\
  \ \r\n                                the number of threads beyond the number of\
  \ CPU\r\n                                cores actually available on the computer.\
  \ \r\n                                \r\n\t\t\t\t\t         \t\r\n       -bm=<batchman\
  \ path>    - optional, an absolute path to the Batchman \r\n                   \
  \             executable. By default this path is searched in \r\n             \
  \                   the environmental variable called BATCHMAN_PATH. \r\n      \
  \                          If it is not found there, then clinod attempts \r\n \
  \                               to locate the batchman executable in the same \r\
  \n                                directory as the clinod jar file. In order to\
  \ be \r\n                                found there the batchman executable must\
  \ be \r\n                                called the \"batchman.exe\" on Windows\
  \ systems and \r\n                                the \"batchman\" on all other\
  \ operating systems.\r\n                                \r\n                   \
  \             If neither of those paths are valid then the \r\n                \
  \                execution fails.  \r\n                                If several\
  \ paths are valid then clinod uses them\r\n                                in the\
  \ following order:  \r\n                                1) Path from the command\
  \ line parameter\r\n                                2) Path from the environmental\
  \ variable\r\n                                3) Local directory path \r\n     \
  \                           \r\n\r\n       -nonols                - optional, suppresses\
  \ reporting of the proteins \r\n                                with no NOLS detected\
  \ if specified. \r\n                                                           \
  \        \r\n       -clean_sequence        - optional, if specified causes the predictor\
  \ to \r\n       \t\t\t\tautomatically remove all non-protein characters \r\n   \
  \    \t\t\t\tfrom the sequences that contains them.\r\n       \t\t\t\t \r\n    \
  \   \t\t\t\tThe predictor only works with unambiguous \r\n       \t\t\t\tprotein\
  \ sequences. Only the following characters\r\n       \t\t\t\tconsidered to be valid:\
  \ ARNDCQEGHILKMFPSTWYV. \r\n       \t\t\t\tIf any other character is detected in\
  \ the \r\n       \t\t\t\tsequence the predictor stops the execution and \r\n   \
  \    \t\t\t\traises the exception unless this flag is \r\n       \t\t\t\tspecified.\
  \ In this case, the predictor removes \r\n       \t\t\t\tinvalid characters from\
  \ the sequence and writes\r\n       \t\t\t\tthe information about it into the log\
  \ file. \r\n                                \r\n       -h                     -\
  \ print help (this information). If this flag is \r\n                          \
  \      given all other options are ignored. \r\n       \r\nNolsPredictor requires\
  \ SNNS Batch Interpreter V1.0 executable which is a part of \r\nthe Stuttgart Neural\
  \ Network Simulator (SNNS) v 4.2 software suit \r\navailable free of charge from\
  \ http://www.ra.cs.uni-tuebingen.de/SNNS \r\n\r\nThe path to the batchman executable\
  \ can be specified either as BATCHMAN_PATH \r\nenvironmental variable or provided\
  \ as a command line parameter.  \r\n\t\r\nInvocation examples: \r\n\r\n  Example\
  \ 1: \r\n\r\n       clinod-1.3.jar -in=inputFile\r\n\r\n       The predictor loads\
  \ input from inputFile, prints the predictions to the \r\n       console, uses system's\
  \ temporary directory to store the temporary files \r\n       and uses the number\
  \ of threads equal to the number of processor \r\n       cores available on the\
  \ executing machine. This example assumes that \r\n       BATCHMAN_PATH environmental\
  \ variable is defined or the batchman \r\n       executable is located in the same\
  \ directory as clinod jar file.   \r\n\t\r\n  Example 2:\r\n    \r\n       clinod-1.3.jar\
  \ -in=/homes/input.fs -out=/homes/out.txt -t=1 -d=/homes/tmp\r\n       -bm=/homes/bin/batchman\
  \ -nonols -f=MINIMAL\r\n    \r\n       The predictor loads the input from the /homes/input.fs,\
  \ writes output to \r\n       /homes/out.txt uses a single thread to perform calculations,\
  \ writes \r\n       temporary files to /homes/tmp, uses the Batchman binary from\
  \ /homes/bin\r\n       directory, reports results in the MINIMAL format and only\
  \ for the \r\n       sequences where at least one NOLS has been detected.   \r\n\
  \    \r\nLogging: \r\n      \r\n       NolsPredictor uses Apache log4j library for\
  \ logging. With its help it is \r\n       possible to track the execution progress\
  \ or peer into the details of the \r\n       execution of the program which can\
  \ help to resolve issues. For this log4j \r\n       should be configured to log\
  \ all events at the INFO level. Level DEBUG or \r\n       TRACE can help if you\
  \ are experiencing problems with the predictor.\r\n       \r\n       Example log4j\
  \ configuration: \r\n       \r\n       logDir = .\r\n       log4j.logger.NOD=INFO,\
  \ ACTIVITY\r\n       log4j.appender.ACTIVITY=org.apache.log4j.RollingFileAppender\r\
  \n       log4j.appender.ACTIVITY.File=${logDir}/activity.log\r\n       log4j.appender.ACTIVITY.MaxFileSize=10MB\r\
  \n       log4j.appender.ACTIVITY.MaxBackupIndex=10000\r\n       log4j.appender.ACTIVITY.layout=org.apache.log4j.PatternLayout\r\
  \n       log4j.appender.ACTIVITY.layout.ConversionPattern=%d{MM-dd@HH:mm:ss} %-5p\
  \ %3x - %m%n\r\n       \r\n       This configuration creates a log file called activity.log\
  \ in the current \r\n       working directory and records all events from the program\
  \ at the level \r\n       INFO. The activity file is renamed to activity.1 once\
  \ it reaches the \r\n       10 Mb size and the new activity.log file is created.\
  \  \r\n       \r\n       To configure log4j, the configuration should be written\
  \ into the file \r\n       called log4j.properties and put into the same directory\
  \ as the program.\r\n       By default log4j is configured to output only the error\
  \ messages to the \r\n       console.  \r\n       \r\nPerformance: \r\n      \r\n\
  \      NolsPredictor writes 4 temporary files for a single FASTA sequence, \r\n\
  \      therefore for optimal performance the directory for temporary file storage\
  \ \r\n      should ideally be located on the local hard drive, as opposed to the\
  \ \r\n      remote storage. The predictor throughput rate is about 2 sequences per\
  \ \r\n      second on the average computer.   \r\n         \r\nCitation: \r\n  \
  \     \r\n      Michelle S. Scott, Peter V. Troshin and Geoffrey J. Barton - \"\
  NoD: a \r\n      Nucleolar localization sequence detector for eukaryotic and viral\
  \ \r\n      proteins\" - submitted\r\n          \n"
generated_using:
- -h
docker_image:
