!Command
command:
- prinseq++
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -v
  - -version
  description: Print version; ignore other arguments.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -threads
  description: "Nuber of threads to use. Note that if more than one thread is used,\
    \ output\nsequences might not be in the same order as input sequences. (Default=1)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -VERBOSE
  description: "Format of the report of filtered reads, VERBOSE=1 prints information\
    \ only\non the filters that removed sequences. VERBOSE=2 prints numbers for filters\n\
    in order (min_len, max_len, min_cg, max_cg, min_qual_score, min_qual_mean,\nns_max_n,\
    \ noiupac, derep, lc_entropy, lc_dust, trim_tail_left, trim_tail_right,\ntrim_qual_left,\
    \ trim_qual_right, trim_left, trim_right) to compare stats of diferent files.\n\
    VERBOSE=0 prints nothing.\n(Default=1)"
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -fastq
  description: Input file in FASTQ format. Can also read a compressed (.gz) file.
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -fastq2
  description: "Input file in FASTQ format for pair-end reads. Can also read a\ncompressed\
    \ (.gz) file."
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -FASTA
  description: "Input is in fasta format (no quality). Note that the output format\
    \ is\nstill fastq by default. Quality will be treated as 31 (A) for all bases."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -phred64
  description: Input quality is in phred64 format. This is for older Illumina/Solexa
    reads.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -out_format
  description: Set output format. 0 FASTQ, 1 FASTA. (Default=0)
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -out_name
  description: "For pair-end sequences, the output files are <string>_good_out_R1\
    \ and\n<string>_good_out_R2 for pairs where both reads pass quality control,\n\
    <string>_single_out_R1 and <string>_single_out_R2 for read that passed\nquality\
    \ control but mate didn't. <string>_bad_out_R1 and <string>_bad_out_R2\nfor reads\
    \ that fail quality controls. [Default = random size 6 string]"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -rm_header
  description: "Remove the header in the 3rd line of the fastq (+header -> +). This\
    \ does\nnot change the header in the 1st line (@header)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -out_gz
  description: Write the output to a compressed file (WARNING this can be really SLOW)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -out_good
  - -out_single
  - -out_bad
  - -out_good2
  - -out_single2
  - -out_bad2
  description: "Rename the output files idividually, this overwrites the names given\
    \ by\n-out_name only for the selected files. File extension won't be added\nautomatically.\
    \ (TIP: if you don't need a file, set its name to /dev/null)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -min_len
  description: Filter sequence shorter than min_len.
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -max_len
  description: Filter sequence longer than max_len.
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -min_gc
  description: Filter sequence with GC percent content below min_gc.
  args: !SimpleFlagArg
    name: float
- !Flag
  optional: true
  synonyms:
  - -max_gc
  description: Filter sequence with GC percent content above min_gc.
  args: !SimpleFlagArg
    name: float
- !Flag
  optional: true
  synonyms:
  - -min_qual_score
  description: "Filter sequence with at least one base with quality score below\n\
    min_qual_score."
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -min_qual_mean
  description: Filter sequence with quality score mean below min_qual_mean.
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -ns_max_n
  description: Filter sequence with more than ns_max_n Ns.
  args: !SimpleFlagArg
    name: int
- !Flag
  optional: true
  synonyms:
  - -noiupac
  description: Filter sequence with characters other than A, C, G, T or N.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -derep
  description: Filter duplicated sequences. This only remove exact duplicates.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -lc_entropy
  description: "=[float]\nFilter sequences with entropy lower than [float]. [float]\
    \ should be in\nthe 0-1 interval. (Default=0.5)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -lc_dust
  description: "=[float]\nFilter sequences with dust_score lower than [float]. [float]\
    \ should be in\nthe 0-1 interval. (Default=0.5)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -trim_left
  description: Trim <integer> bases from the left (5'->3').
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_right
  description: Trim <integer> bases from the right (3'->5').
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_tail_left
  description: "Trim poly-A/T tail with a minimum length of <integer> at the\n5'-end."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_tail_right
  description: "Trim poly-A/T tail with a minimum length of <integer> at the\n3'-end."
  args: !SimpleFlagArg
    name: integer
- !Flag
  optional: true
  synonyms:
  - -trim_qual_rule
  description: "Rule to use to compare quality score to calculated value. Allowed\n\
    options are lt (less than), gt (greater than) and et (equal to).\n[default: lt]"
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -trim_qual_left
  description: "=[float]\nTrim recursively from the 3'-end chunks of length -trim_qual_step\
    \ if the\nmean quality of the first -trim_qual_window bases is less than [float].\n\
    (Default=20)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -trim_qual_right
  description: "=[float]\nTrim recursively from the 5'-end chunks of length -trim_qual_step\
    \ if the\nmean quality of the last -trim_qual_window bases is less than [float].\n\
    (Default=20)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -trim_qual_window
  description: "[int]\nSize of the window used by trim_qual_left and trim_qual_right\
    \ (Default=5)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -trim_qual_step
  description: "[int]\nStep size used by trim_qual_left and trim_qual_right (Default=2)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -trim_qual_type
  description: "Type of quality score calculation to use. Allowed options are min,\n\
    mean, max and sum. [default= min]\n"
  args: !SimpleFlagArg
    name: string
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - -help
  description: Print the help page; ignore other arguments.
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "\n        PRINSEQ++ 1.2\n            \nPRINSEQ++ is a C++ implementation\
  \ of the prinseq-lite.pl program. It can be used \nto filter, reformat or trim genomic\
  \ and metagenomic sequence data. It is 5X faster \nthan prinseq-lite.pl and uses\
  \ less RAM thanks to the use of multi-threading \nand the cboost libraries. It can\
  \ read and write compressed (gzip) files, drastically \nreducing the use of hard\
  \ drive.\n\n        \nOption:\n    -h | -help\n        Print the help page; ignore\
  \ other arguments.\n        \n    -v | -version\n        Print version; ignore other\
  \ arguments.\n        \n    -threads \n        Nuber of threads to use. Note that\
  \ if more than one thread is used, output\n        sequences might not be in the\
  \ same order as input sequences. (Default=1)\n    \n    -VERBOSE <int>\n       \
  \ Format of the report of filtered reads, VERBOSE=1 prints information only\n  \
  \      on the filters that removed sequences. VERBOSE=2 prints numbers for filters\
  \ \n        in order (min_len, max_len, min_cg, max_cg, min_qual_score, min_qual_mean,\n\
  \        ns_max_n, noiupac, derep, lc_entropy, lc_dust, trim_tail_left, trim_tail_right,\
  \ \n        trim_qual_left, trim_qual_right, trim_left, trim_right) to compare stats\
  \ of diferent files.\n        VERBOSE=0 prints nothing.\n        (Default=1)\n \
  \   \n    ***** INPUT OPTIONS *****\n    \n    -fastq <file>\n        Input file\
  \ in FASTQ format. Can also read a compressed (.gz) file.\n        \n    -fastq2\
  \ <file>\n        Input file in FASTQ format for pair-end reads. Can also read a\
  \ \n        compressed (.gz) file.\n        \n    -FASTA\n        Input is in fasta\
  \ format (no quality). Note that the output format is \n        still fastq by default.\
  \ Quality will be treated as 31 (A) for all bases.\n        \n    -phred64\n   \
  \     Input quality is in phred64 format. This is for older Illumina/Solexa reads.\n\
  \n    ***** OUTPUT OPTION *****\n    \n    -out_format <int>\n        Set output\
  \ format. 0 FASTQ, 1 FASTA. (Default=0)\n        \n    -out_name <string>\n    \
  \    For pair-end sequences, the output files are <string>_good_out_R1 and\n   \
  \     <string>_good_out_R2 for pairs where both reads pass quality control,\n  \
  \      <string>_single_out_R1 and <string>_single_out_R2 for read that passed\n\
  \        quality control but mate didn't. <string>_bad_out_R1 and <string>_bad_out_R2\
  \  \n        for reads that fail quality controls. [Default = random size 6 string]\
  \ \n    \n    -rm_header\n        Remove the header in the 3rd line of the fastq\
  \ (+header -> +). This does\n        not change the header in the 1st line (@header).\n\
  \        \n    -out_gz \n        Write the output to a compressed file (WARNING\
  \ this can be really SLOW)\n        \n    -out_good  , -out_single , -out_bad,\n\
  \    -out_good2 , -out_single2, -out_bad2\n        Rename the output files idividually,\
  \ this overwrites the names given by\n        -out_name only for the selected files.\
  \ File extension won't be added \n        automatically. (TIP: if you don't need\
  \ a file, set its name to /dev/null)\n        \n    ***** FILTER OPTION ******\n\
  \        \n    -min_len <int>\n        Filter sequence shorter than min_len.\n \
  \   \n    -max_len <int>\n        Filter sequence longer than max_len.\n       \
  \ \n    -min_gc <float>\n        Filter sequence with GC percent content below min_gc.\n\
  \    \n    -max_gc <float>\n        Filter sequence with GC percent content above\
  \ min_gc.\n    \n    -min_qual_score <int>\n        Filter sequence with at least\
  \ one base with quality score below \n        min_qual_score.\n        \n    -min_qual_mean\
  \ <int>\n        Filter sequence with quality score mean below min_qual_mean.\n\
  \        \n    -ns_max_n <int>\n        Filter sequence with more than ns_max_n\
  \ Ns.\n   \n    -noiupac         \n        Filter sequence with characters other\
  \ than A, C, G, T or N.\n\n    -derep\n        Filter duplicated sequences. This\
  \ only remove exact duplicates.\n        \n    -lc_entropy=[float]\n        Filter\
  \ sequences with entropy lower than [float]. [float] should be in\n        the 0-1\
  \ interval. (Default=0.5)\n\n    -lc_dust=[float]\n        Filter sequences with\
  \ dust_score lower than [float]. [float] should be in\n        the 0-1 interval.\
  \ (Default=0.5)\n        \n    ***** TRIM OPTIONS *****\n\n    -trim_left <integer>\n\
  \        Trim <integer> bases from the left (5'->3').\n        \n    -trim_right\
  \ <integer>\n        Trim <integer> bases from the right (3'->5').\n    \n    -trim_tail_left\
  \ <integer>\n        Trim poly-A/T tail with a minimum length of <integer> at the\n\
  \        5'-end.\n\n    -trim_tail_right <integer>\n        Trim poly-A/T tail with\
  \ a minimum length of <integer> at the\n        3'-end.\n\n    -trim_qual_rule <string>\n\
  \        Rule to use to compare quality score to calculated value. Allowed\n   \
  \     options are lt (less than), gt (greater than) and et (equal to).\n       \
  \ [default: lt]\n\n    -trim_qual_left=[float]\n        Trim recursively from the\
  \ 3'-end chunks of length -trim_qual_step if the\n        mean quality of the first\
  \ -trim_qual_window bases is less than [float]. \n        (Default=20)\n       \
  \ \n    -trim_qual_right=[float]\n        Trim recursively from the 5'-end chunks\
  \ of length -trim_qual_step if the\n        mean quality of the last -trim_qual_window\
  \ bases is less than [float]. \n        (Default=20)    \n\n    -trim_qual_window\
  \ [int]\n        Size of the window used by trim_qual_left and trim_qual_right (Default=5)\n\
  \n    -trim_qual_step [int]\n        Step size used by trim_qual_left and trim_qual_right\
  \ (Default=2)\n    \n    -trim_qual_type <string>\n        Type of quality score\
  \ calculation to use. Allowed options are min,\n        mean, max and sum. [default=\
  \ min]\n        \n"
generated_using:
- --help
docker_image: quay.io/biocontainers/prinseq-plus-plus:1.2.3--h176a8bc_0
