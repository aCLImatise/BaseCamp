from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, Int, Boolean, String

Coverm_Make_V0_1_0 = CommandToolBuilder(tool="coverm_make", base_command=["coverm", "make"], inputs=[ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="--output-directory", doc=InputDocumentation(doc="Where generated BAM files will go")), ToolInput(tag="in_reference", input_type=File(optional=True), prefix="--reference", doc=InputDocumentation(doc="..             FASTA file of contigs e.g. concatenated\ngenomes or assembly, or minimap2 index\n(with --minimap2-reference-is-index),\nor BWA index stem (with -p bwa-mem).\nIf multiple references FASTA files are\nprovided and --sharded is specified,\nthen reads will be mapped to references\nseparately as sharded BAMs.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use for mapping")), ToolInput(tag="in_forward_fastaq_files", input_type=File(optional=True), prefix="-1", doc=InputDocumentation(doc="..                          Forward FASTA/Q file(s) for mapping")), ToolInput(tag="in_reverse_fastaq_files", input_type=File(optional=True), prefix="-2", doc=InputDocumentation(doc="..                          Reverse FASTA/Q file(s) for mapping")), ToolInput(tag="in_coupled", input_type=File(optional=True), prefix="--coupled", doc=InputDocumentation(doc="<PATH> ..        One or more pairs of forward and reverse\nFASTA/Q files for mapping in order\n<sample1_R1.fq.gz> <sample1_R2.fq.gz>\n<sample2_R1.fq.gz> <sample2_R2.fq.gz> ..")), ToolInput(tag="in_interleaved", input_type=File(optional=True), prefix="--interleaved", doc=InputDocumentation(doc="..               Interleaved FASTA/Q files(s) for mapping.")), ToolInput(tag="in_single", input_type=File(optional=True), prefix="--single", doc=InputDocumentation(doc="..                    Unpaired FASTA/Q files(s) for mapping.")), ToolInput(tag="in_mapper", input_type=Int(optional=True), prefix="--mapper", doc=InputDocumentation(doc="Underlying mapping software used\n('minimap2-sr', 'bwa-mem', 'minimap2-ont',\n'minimap2-pb', or 'minimap2-no-preset').\nminimap2 -sr, -ont, -pb, -no-preset specify\n'-x' preset of minimap2 to be used\n(with map-ont, map-pb for -ont, -pb).\n[default: 'minimap2-sr']")), ToolInput(tag="in_minimap_two_params", input_type=Int(optional=True), prefix="--minimap2-params", doc=InputDocumentation(doc="Extra parameters to provide to minimap2,\nboth indexing command (if used) and for\nmapping. Note that usage of this parameter\nhas security implications if untrusted input\nis specified. '-a' is always specified.\n[default '']")), ToolInput(tag="in_minimap_two_reference_is_index", input_type=Boolean(optional=True), prefix="--minimap2-reference-is-index", doc=InputDocumentation(doc="Treat reference as a minimap2 database, not\nas a FASTA file.")), ToolInput(tag="in_bwa_params", input_type=String(optional=True), prefix="--bwa-params", doc=InputDocumentation(doc="Extra parameters to provide to BWA. Note\nthat usage of this parameter has security\nimplications if untrusted input is specified.\n[default '']")), ToolInput(tag="in_discard_unmapped", input_type=Boolean(optional=True), prefix="--discard-unmapped", doc=InputDocumentation(doc="Exclude unmapped reads from generated BAM files."))], outputs=[ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="Where generated BAM files will go"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Coverm_Make_V0_1_0().translate("wdl", allow_empty_container=True)

