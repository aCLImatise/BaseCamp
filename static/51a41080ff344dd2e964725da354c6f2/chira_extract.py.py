from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Chira_Extract_Py_V0_1_0 = CommandToolBuilder(tool="chira_extract.py", base_command=["chira_extract.py"], inputs=[ToolInput(tag="in_loci", input_type=Boolean(optional=True), prefix="--loci", doc=InputDocumentation(doc="Input BED file with alignments (default: None)")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Path to output directory (default: None)")), ToolInput(tag="in_gtf", input_type=Boolean(optional=True), prefix="--gtf", doc=InputDocumentation(doc="Annotation GTF file (default: None)")), ToolInput(tag="in_processes", input_type=Boolean(optional=True), prefix="--processes", doc=InputDocumentation(doc="Number of processes to use (default: 1)")), ToolInput(tag="in_tpm_cut_off", input_type=Boolean(optional=True), prefix="--tpm_cutoff", doc=InputDocumentation(doc="Transcripts with less than this percentile TPMs will\nbe discarded in the final output. [0-1.0] (default: 0)")), ToolInput(tag="in_score_cut_off", input_type=Boolean(optional=True), prefix="--score_cutoff", doc=InputDocumentation(doc="Hybrids with less than this score will be discarded in\nthe final output. [0-1.0] (default: 0.0)")), ToolInput(tag="in_chimeric_overlap", input_type=Boolean(optional=True), prefix="--chimeric_overlap", doc=InputDocumentation(doc="Maximum number of bases allowed between the chimeric\nsegments of a read (default: 2)")), ToolInput(tag="in_hybridize", input_type=Boolean(optional=True), prefix="--hybridize", doc=InputDocumentation(doc="Hybridize the predicted chimeras (default: False)")), ToolInput(tag="in_no_seed", input_type=Boolean(optional=True), prefix="--no_seed", doc=InputDocumentation(doc="Do not enforce seed interactions (default: False)")), ToolInput(tag="in_accessibility", input_type=Boolean(optional=True), prefix="--accessibility", doc=InputDocumentation(doc="IntaRNA accessibility: C (compute) or N (not)\n(default: N)")), ToolInput(tag="in_in_tarn_a_mode", input_type=Boolean(optional=True), prefix="--intarna_mode", doc=InputDocumentation(doc="IntaRNA mode: H (heuristic), M (exact), S (seed-only)\n(default: H)")), ToolInput(tag="in_temperature", input_type=Boolean(optional=True), prefix="--temperature", doc=InputDocumentation(doc="IntaRNA temperature parameter in Celsius to setup the\nVRNA energy parameters (default: 37)")), ToolInput(tag="in_seed_bp", input_type=Boolean(optional=True), prefix="--seed_bp", doc=InputDocumentation(doc="IntaRNA --seedBP parameter: number of inter-molecular\nbase pairs within the seed region (default: 5)")), ToolInput(tag="in_seed_min_pu", input_type=Boolean(optional=True), prefix="--seed_min_pu", doc=InputDocumentation(doc="IntaRNA --seedMinPu parameter: minimal unpaired\nprobability (per sequence) a seed region may have\n(default: 0)")), ToolInput(tag="in_acc_width", input_type=Boolean(optional=True), prefix="--acc_width", doc=InputDocumentation(doc="IntaRNA --accW parameter: sliding window size for\naccessibility computation (default: 150)")), ToolInput(tag="in_ref_fast_a_one", input_type=Boolean(optional=True), prefix="--ref_fasta1", doc=InputDocumentation(doc="First prioroty fasta file (default: None)")), ToolInput(tag="in_ref_fast_a_two", input_type=Boolean(optional=True), prefix="--ref_fasta2", doc=InputDocumentation(doc="second priority fasta file (default: None)")), ToolInput(tag="in_ref", input_type=Boolean(optional=True), prefix="--ref", doc=InputDocumentation(doc="Reference fasta file (default: None)")), ToolInput(tag="in_summer_ize", input_type=Boolean(optional=True), prefix="--summerize", doc=InputDocumentation(doc="Summerize interactions at loci level (default: False)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Path to output directory (default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Chira_Extract_Py_V0_1_0().translate("wdl", allow_empty_container=True)

