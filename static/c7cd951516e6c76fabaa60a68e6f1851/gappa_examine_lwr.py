from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, Directory

Gappa_Examine_Lwr_V0_1_0 = CommandToolBuilder(tool="gappa_examine_lwr", base_command=["gappa", "examine", "lwr"], inputs=[ToolInput(tag="in_j_place_path", input_type=File(optional=True), prefix="--jplace-path", doc=InputDocumentation(doc=":PATH(existing)=[] ... REQUIRED\nList of jplace files or directories to process. For directories, only files with the extension `.jplace[.gz]` are processed.")), ToolInput(tag="in_ignore_multiplicities", input_type=Boolean(optional=True), prefix="--ignore-multiplicities", doc=InputDocumentation(doc="Set the multiplicity of each pquery to 1.")), ToolInput(tag="in_histogram_bins", input_type=Int(optional=True), prefix="--histogram-bins", doc=InputDocumentation(doc="=25    Number of histogram bins for binning the LWR values.")), ToolInput(tag="in_num_lwrs", input_type=Int(optional=True), prefix="--num-lwrs", doc=InputDocumentation(doc="=5           Number of histograms to print. That is, how many of the LWRs per pquery to output (most likely, second most likely, etc), or in other words, how many LWRs columns the output table should have.")), ToolInput(tag="in_no_list_file", input_type=File(optional=True), prefix="--no-list-file", doc=InputDocumentation(doc="If set, do not write out the LWRs per pquery, but just the histogram file. As the list needs to keep all pquery names in memory (to get the correct order), the memory requirements might be too large. In that case, this option can help.")), ToolInput(tag="in_no_compat_check", input_type=Boolean(optional=True), prefix="--no-compat-check", doc=InputDocumentation(doc="If set, disables the check for tree compatibility. Useful if comparing results across differing reference trees.")), ToolInput(tag="in_out_dir", input_type=Directory(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="=.            Directory to write files to")), ToolInput(tag="in_file_prefix", input_type=File(optional=True), prefix="--file-prefix", doc=InputDocumentation(doc="File prefix for output files")), ToolInput(tag="in_file_suffix", input_type=File(optional=True), prefix="--file-suffix", doc=InputDocumentation(doc="File suffix for output files")), ToolInput(tag="in_allow_file_overwriting", input_type=Boolean(optional=True), prefix="--allow-file-overwriting", doc=InputDocumentation(doc="Allow to overwrite existing output files instead of aborting the command.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Produce more verbose output.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="=1            Number of threads to use for calculations.")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], outputs=[ToolOutput(tag="out_no_list_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_no_list_file", type_hint=File()), doc=OutputDocumentation(doc="If set, do not write out the LWRs per pquery, but just the histogram file. As the list needs to keep all pquery names in memory (to get the correct order), the memory requirements might be too large. In that case, this option can help.")), ToolOutput(tag="out_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_prefix", type_hint=File()), doc=OutputDocumentation(doc="File prefix for output files")), ToolOutput(tag="out_file_suffix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_file_suffix", type_hint=File()), doc=OutputDocumentation(doc="File suffix for output files")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Write all output to a log file, in addition to standard output to the terminal."))], container="quay.io/biocontainers/gappa:0.7.1--he513fc3_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gappa_Examine_Lwr_V0_1_0().translate("wdl")

