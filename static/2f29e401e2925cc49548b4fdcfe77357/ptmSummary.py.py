from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Array, File

Ptmsummary_Py_V0_1_0 = CommandToolBuilder(tool="ptmSummary.py", base_command=["ptmSummary.py"], inputs=[ToolInput(tag="in_threads_to_run", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="Threads to run")), ToolInput(tag="in_no_log_two", input_type=Boolean(optional=True), prefix="--no-log2", doc=InputDocumentation(doc="Do not log2 normalize quantification values.")), ToolInput(tag="in_no_median", input_type=Boolean(optional=True), prefix="--no-median", doc=InputDocumentation(doc="Do not normalize quantification values by the median\nof the experiment.")), ToolInput(tag="in_wp", input_type=Array(t=String(), optional=True), prefix="--wp", doc=InputDocumentation(doc="The whole proteome inference file, if it exists. For\nmultiple replicates, separate by spaces.")), ToolInput(tag="in_non_mod_norm", input_type=Boolean(optional=True), prefix="--non-mod-norm", doc=InputDocumentation(doc="Normalize the data by the non-modified peptides.")), ToolInput(tag="in_site_file", input_type=File(optional=True), prefix="--site-file", doc=InputDocumentation(doc="The output path for the file with sumamries at the\nsite level.")), ToolInput(tag="in_peptide_file", input_type=File(optional=True), prefix="--peptide-file", doc=InputDocumentation(doc="The output path for the file with sumamries at the\nsite and peptide level.")), ToolInput(tag="in_inference", input_type=Array(t=String(), optional=True), prefix="--inference", doc=InputDocumentation(doc="The protein inference file (your peptide file with\ngene/protein annotations). For multiple files,\nseparate by spaces (must be in same order as mods).")), ToolInput(tag="in_gene", input_type=String(optional=True), prefix="--gene", doc=InputDocumentation(doc="The Gene column name")), ToolInput(tag="in_protein", input_type=String(optional=True), prefix="--protein", doc=InputDocumentation(doc="The Protein column name")), ToolInput(tag="in_peptide", input_type=String(optional=True), prefix="--peptide", doc=InputDocumentation(doc="The Peptide column name")), ToolInput(tag="in_quant", input_type=Array(t=String(), optional=True), prefix="--quant", doc=InputDocumentation(doc="The name of quantification columns (such as\nHeavy/Light). Separate multiple columns by spaces")), ToolInput(tag="in_mods", input_type=Array(t=String(), optional=True), prefix="--mods", doc=InputDocumentation(doc="The modifications file (the file with sites,\npeptides). For multiple files, separate by spaces\n(must be in same order as inference).")), ToolInput(tag="in_site_protein", input_type=File(optional=True), prefix="--site-protein", doc=InputDocumentation(doc="The mod file protein column name\n"))], outputs=[ToolOutput(tag="out_site_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_site_file", type_hint=File()), doc=OutputDocumentation(doc="The output path for the file with sumamries at the\nsite level.")), ToolOutput(tag="out_peptide_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_peptide_file", type_hint=File()), doc=OutputDocumentation(doc="The output path for the file with sumamries at the\nsite and peptide level."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ptmsummary_Py_V0_1_0().translate("wdl", allow_empty_container=True)

