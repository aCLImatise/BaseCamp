from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Yapc_V0_1_0 = CommandToolBuilder(tool="yapc", base_command=["yapc"], inputs=[ToolInput(tag="in_smoothing_window_width", input_type=Int(optional=True), prefix="--smoothing-window-width", doc=InputDocumentation(doc="Width of the smoothing window used for the second\nderivative track. If the peak calls aren't capturing\nthe peak shape well, try setting this to different\nvalues ranging from 75 to 200. (default: 150)")), ToolInput(tag="in_smoothing_times", input_type=Int(optional=True), prefix="--smoothing-times", doc=InputDocumentation(doc="Number of times smoothing is applied to the second\nderivative. (default: 3)")), ToolInput(tag="in_min_concave_region_width", input_type=Int(optional=True), prefix="--min-concave-region-width", doc=InputDocumentation(doc="Discard concave regions smaller than the threshold\nspecified. (default: 75)")), ToolInput(tag="in_truncate_idr_input", input_type=Int(optional=True), prefix="--truncate-idr-input", doc=InputDocumentation(doc="Truncate IDR input to the number of peaks specified.\n(default: 100000)")), ToolInput(tag="in_fixed_peak_halfwidth", input_type=Int(optional=True), prefix="--fixed-peak-halfwidth", doc=InputDocumentation(doc="Set final peak coordinates to the specified number of\nbase pairs on either side of the concave region mode.\n(default: None)")), ToolInput(tag="in_pseudo_replicates", input_type=Boolean(optional=True), prefix="--pseudoreplicates", doc=InputDocumentation(doc="Use pseudoreplicates as implemented in modENCODE\n(Landt et al 2012; around Fig 7): for each condition,\nassess peak reproducibility in replicates and\npseudoreplicates; report globalIDRs for the set with a\nlarger number of peak calls (at IDR=0.001).\nPseudoreplicates are specified as the 3rd and 4th file\nname after every condition. (default: False)")), ToolInput(tag="in_recycle", input_type=File(optional=True), prefix="--recycle", doc=InputDocumentation(doc="Do not recompute (intermediate) output files if a file\nwith the expected name is already present. Enabling\nthis can lead to funky behaviour e.g. in the case of a\npreviously interrupted run. (default: False)\n")), ToolInput(tag="in_output_prefix", input_type=String(), position=0, doc=InputDocumentation(doc="Prefix to use for all output files")), ToolInput(tag="in_condition_rep_one_rep_two", input_type=Int(), position=1, doc=InputDocumentation(doc="Name of the condition, BigWig files of first and\nsecond replicates; all separated by spaces. (default:\nNone)"))], outputs=[ToolOutput(tag="out_recycle", output_type=File(optional=True), selector=InputSelector(input_to_select="in_recycle", type_hint=File()), doc=OutputDocumentation(doc="Do not recompute (intermediate) output files if a file\nwith the expected name is already present. Enabling\nthis can lead to funky behaviour e.g. in the case of a\npreviously interrupted run. (default: False)\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Yapc_V0_1_0().translate("wdl", allow_empty_container=True)

