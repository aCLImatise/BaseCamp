from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, File

Rustc_V0_1_0 = CommandToolBuilder(tool="rustc", base_command=["rustc"], inputs=[ToolInput(tag="in_cfg", input_type=String(optional=True), prefix="--cfg", doc=InputDocumentation(doc="Configure the compilation environment")), ToolInput(tag="in_path_add_directory", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="[KIND=]PATH      Add a directory to the library search path. The\noptional KIND can be one of dependency, crate, native,\nframework or all (the default).")), ToolInput(tag="in_name_link_crates", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[KIND=]NAME      Link the generated crate(s) to the specified native\nlibrary NAME. The optional KIND can be one of static,\ndylib, or framework. If omitted, dylib is assumed.")), ToolInput(tag="in_crate_type", input_type=Boolean(optional=True), prefix="--crate-type", doc=InputDocumentation(doc="[bin|lib|rlib|dylib|cdylib|staticlib]\nComma separated list of types of crates for the\ncompiler to emit")), ToolInput(tag="in_crate_name", input_type=String(optional=True), prefix="--crate-name", doc=InputDocumentation(doc="Specify the name of the crate being built")), ToolInput(tag="in_emit", input_type=Boolean(optional=True), prefix="--emit", doc=InputDocumentation(doc="[asm|llvm-bc|llvm-ir|obj|link|dep-info]\nComma separated list of types of output for the\ncompiler to emit")), ToolInput(tag="in_print", input_type=Boolean(optional=True), prefix="--print", doc=InputDocumentation(doc="[crate-name|file-names|sysroot|cfg|target-list|target-cpus|target-features|relocation-models|code-models]\nComma separated list of compiler information to print\non stdout")), ToolInput(tag="in_equivalent_c_debuginfo", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="Equivalent to -C debuginfo=2")), ToolInput(tag="in_equivalent_c_optlevel", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="Equivalent to -C opt-level=2")), ToolInput(tag="in_write_output_to_filename", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Write output to <filename>")), ToolInput(tag="in_out_dir", input_type=File(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="Write output to compiler-chosen filename in <dir>")), ToolInput(tag="in_explain", input_type=String(optional=True), prefix="--explain", doc=InputDocumentation(doc="Provide a detailed explanation of an error message")), ToolInput(tag="in_test", input_type=Boolean(optional=True), prefix="--test", doc=InputDocumentation(doc="Build a test harness")), ToolInput(tag="in_target", input_type=String(optional=True), prefix="--target", doc=InputDocumentation(doc="Target triple for which the code is compiled")), ToolInput(tag="in_warn", input_type=String(optional=True), prefix="--warn", doc=InputDocumentation(doc="Set lint warnings")), ToolInput(tag="in_allow", input_type=String(optional=True), prefix="--allow", doc=InputDocumentation(doc="Set lint allowed")), ToolInput(tag="in_deny", input_type=String(optional=True), prefix="--deny", doc=InputDocumentation(doc="Set lint denied")), ToolInput(tag="in_forbid", input_type=String(optional=True), prefix="--forbid", doc=InputDocumentation(doc="Set lint forbidden")), ToolInput(tag="in_cap_lint_s", input_type=String(optional=True), prefix="--cap-lints", doc=InputDocumentation(doc="Set the most restrictive lint level. More restrictive\nlints are capped at this level")), ToolInput(tag="in_codegen", input_type=String(optional=True), prefix="--codegen", doc=InputDocumentation(doc="[=VALUE]\nSet a codegen option")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Use verbose output")), ToolInput(tag="in_print_internal_options", input_type=String(optional=True), prefix="-Z", doc=InputDocumentation(doc="Print internal options for debugging rustc")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_write_output_to_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_write_output_to_filename", type_hint=File()), doc=OutputDocumentation(doc="Write output to <filename>")), ToolOutput(tag="out_out_dir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_dir", type_hint=File()), doc=OutputDocumentation(doc="Write output to compiler-chosen filename in <dir>"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rustc_V0_1_0().translate("wdl", allow_empty_container=True)

