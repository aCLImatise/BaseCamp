from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Directory, Boolean, Float

Streme_V0_1_0 = CommandToolBuilder(tool="streme", base_command=["streme"], inputs=[ToolInput(tag="in_positive_sequence_file", input_type=File(optional=True), prefix="--p", doc=InputDocumentation(doc="positive sequence file name (required)")), ToolInput(tag="in_negative_sequence_file", input_type=File(optional=True), prefix="--n", doc=InputDocumentation(doc="negative sequence file name;\ndefault: if --n is not given, then STREME\ncreates negative sequences by shuffling each of\nthe positive sequences preserving the positions\nof non-core characters and k-mer frequencies\n(see --kmer, below; ignored if --objfun cd given)")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="estimates an order k-1 background model for scoring\nsites and preserves k-mer frequencies when creating\nnegative sequences by shuffling positive sequences;\ndefault: 3 (DNA), 3 (RNA), 1 (Protein), 1 (custom)")), ToolInput(tag="in_obj_fun", input_type=String(optional=True), prefix="--objfun", doc=InputDocumentation(doc="|cd           objective function to optimize in motif discovery\nde : Differential Enrichment\ncd : Central Distance\ndefault: de")), ToolInput(tag="in_output_directory_default", input_type=Directory(optional=True), prefix="--o", doc=InputDocumentation(doc="output directory; default: 'streme_out'")), ToolInput(tag="in_oc", input_type=String(optional=True), prefix="--oc", doc=InputDocumentation(doc="allow overwriting; default: 'streme_out'")), ToolInput(tag="in_text", input_type=Boolean(optional=True), prefix="--text", doc=InputDocumentation(doc="output text only; overrides --o and --oc;\ndefault: create text, HTML and XML files in <output_dir>")), ToolInput(tag="in_dna", input_type=Boolean(optional=True), prefix="--dna", doc=InputDocumentation(doc="sequences use standard DNA alphabet (default)")), ToolInput(tag="in_rna", input_type=Boolean(optional=True), prefix="--rna", doc=InputDocumentation(doc="sequences use standard RNA alphabet")), ToolInput(tag="in_protein", input_type=Boolean(optional=True), prefix="--protein", doc=InputDocumentation(doc="sequences use standard protein alphabet")), ToolInput(tag="in_alph", input_type=File(optional=True), prefix="--alph", doc=InputDocumentation(doc="sequences use alphabet defined in <alph_file>;\nconverts to uppercase unless both cases in core")), ToolInput(tag="in_min_w", input_type=Int(optional=True), prefix="--minw", doc=InputDocumentation(doc="minimum width for motifs (must be >= 3);\ndefault: 8")), ToolInput(tag="in_max_w", input_type=Int(optional=True), prefix="--maxw", doc=InputDocumentation(doc="maximum width for motifs (must be <= 30);\ndefault: 15")), ToolInput(tag="in_sets_minwidth_maxwidth", input_type=Int(optional=True), prefix="--w", doc=InputDocumentation(doc="sets <minwidth> and <maxwidth> to <w> (must be <= 30);\ndefault: see --minw and --maxw")), ToolInput(tag="in_n_eval", input_type=Int(optional=True), prefix="--neval", doc=InputDocumentation(doc="evaluate <neval> seeds of each width;\ndefault: 25")), ToolInput(tag="in_nref", input_type=Int(optional=True), prefix="--nref", doc=InputDocumentation(doc="refine <nref> evaluated seeds of each width;\nnref==0 means just evaluate single best seed;\ndefault: 4")), ToolInput(tag="in_niter", input_type=Int(optional=True), prefix="--niter", doc=InputDocumentation(doc="iterate refinement at most <niter> times per seed;\ndefault: 20")), ToolInput(tag="in_pvt", input_type=Float(optional=True), prefix="--pvt", doc=InputDocumentation(doc="stop if hold-out set p-value greater than <pvt>\n(see --patience and --hofract, below);\noverrides --nmotifs;\ndefault: 0.05")), ToolInput(tag="in_patience", input_type=Int(optional=True), prefix="--patience", doc=InputDocumentation(doc="quit after <patience> consecutive motifs exceed <pvt>;\ndefault: 3")), ToolInput(tag="in_n_motifs", input_type=Int(optional=True), prefix="--nmotifs", doc=InputDocumentation(doc="stop if <nmotifs> motifs have been output;\noverrides --pvt if > 0;\ndefault: quit when new motif p-values exceed <pvt>")), ToolInput(tag="in_time", input_type=String(optional=True), prefix="--time", doc=InputDocumentation(doc="quit before <t> CPU seconds consumed;\ndefault: no time limit")), ToolInput(tag="in_total_length", input_type=Int(optional=True), prefix="--totallength", doc=InputDocumentation(doc="truncate each sequence set to length <len>;\ndefault: 0 (do not truncate)")), ToolInput(tag="in_ho_fract", input_type=Float(optional=True), prefix="--hofract", doc=InputDocumentation(doc="fraction of sequences in hold-out set;\ndefault: 0.1")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="random seed for shuffling sequences;\ndefault: 0")), ToolInput(tag="in_desc", input_type=String(optional=True), prefix="--desc", doc=InputDocumentation(doc="include this description text in HTML")), ToolInput(tag="in_d_file", input_type=File(optional=True), prefix="--dfile", doc=InputDocumentation(doc="include contents of this description file in HTML,\noverrides --desc")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="|2|3|4|5    level of diagnostic output (default: 2)\n1: none 2: helpful 3: debug 4: tons 5: ludicrous\n"))], outputs=[ToolOutput(tag="out_output_directory_default", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory_default", type_hint=File()), doc=OutputDocumentation(doc="output directory; default: 'streme_out'"))], container="quay.io/biocontainers/meme:5.3.0--py38pl526hc1f1133_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Streme_V0_1_0().translate("wdl")

