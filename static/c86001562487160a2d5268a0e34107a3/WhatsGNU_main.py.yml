!Command
command:
- WhatsGNU_main.py
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -m
  - --mkdatabase
  description: "you have to provide path to faa file or a folder of\nmultiple faa\
    \ files for compression"
  args: !SimpleFlagArg
    name: MKDATABASE
- !Flag
  optional: true
  synonyms:
  - -d
  - --database
  description: you have to provide path to your compressed database
  args: !SimpleFlagArg
    name: DATABASE
- !Flag
  optional: true
  synonyms:
  - -a
  - --pickle
  description: Save database in pickle format [Default only txt file]
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -j
  - --sql
  description: "Save database in SQL format for large Databases\n[Default only txt\
    \ file]"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -r
  description: "[ROARY_CLUSTERED_PROTEINS], --roary_clustered_proteins [ROARY_CLUSTERED_PROTEINS]\n\
    clustered_proteins output file from roary to be used\nwith -m"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -dm
  - --database_mode
  description: "select a mode from 'ortholog' or 'basic' to be used\nwith -d"
  args: !ChoiceFlagArg
    choices: !!set
      basic:
      ortholog:
- !Flag
  optional: true
  synonyms:
  - -ri
  description: "[RARITY_INDEX], --rarity_index [RARITY_INDEX]\nselect an ortholog\
    \ variant rarity index (OVRI) cutoff\nvalue in range (0-1)[0.045] for ortholog\
    \ mode"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  - --output_folder
  description: "Database output prefix to be created for results\n(default: timestamped\
    \ WhatsGNU_results in the current\ndirectory)"
  args: !SimpleFlagArg
    name: OUTPUT_FOLDER
- !Flag
  optional: true
  synonyms:
  - --force
  description: "Force overwriting existing results folder assigned\nwith -o (default:\
    \ off)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  - --prefix
  description: "Prefix for output compressed database (default:\nWhatsGNU_compressed_database)"
  args: !SimpleFlagArg
    name: PREFIX
- !Flag
  optional: true
  synonyms:
  - -t
  - --topgenomes
  description: create a file of top 10 genomes with hits
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  - --strainhits
  description: "check how many hits you get from a particular\nstrain,it has to be\
    \ used with -t"
  args: !SimpleFlagArg
    name: STRAINHITS
- !Flag
  optional: true
  synonyms:
  - -e
  - --metadata
  description: "get the metadata composition of your hits, use the\nmetadata_frequency.csv\
    \ file produced by the WhatsGNU\ncustomizer script"
  args: !SimpleFlagArg
    name: METADATA
- !Flag
  optional: true
  synonyms:
  - -i
  - --ids_hits
  description: "create a file of each protein with locus_tags (ids) of\nall hits from\
    \ the database, large file (~ 1 Gb for\n3000 pts)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -f
  - --faa_GNU_0
  description: "get a fasta (.faa) file of all proteins with GNU score\nof zero"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -b
  - --blastp
  description: "run blastp on the proteins with GNU score of zero and\nmodify the\
    \ report with ortholog_info, blastp has to be\ninstalled"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -op
  - --output_blastp
  description: "get the output report of blastp run, it has to be used\nwith -b"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -w
  description: "[PERCENT_IDENTITY], --percent_identity [PERCENT_IDENTITY]\nselect\
    \ a blastp percent identity cutoff value [80],\nrange(0,100)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -c
  description: "[PERCENT_COVERAGE], --percent_coverage [PERCENT_COVERAGE]\nselect\
    \ a blastp percent coverage cutoff value [80],\nrange(0,100)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -q
  - --quiet
  description: No screen output [default OFF]
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - -v
  - --version
  description: print version and exit
  args: !EmptyFlagArg {}
help_text: "usage: WhatsGNU_main.py [-h] [-m MKDATABASE | -d DATABASE] [-a] [-j]\n\
  \                        [-r [ROARY_CLUSTERED_PROTEINS]] [-dm {ortholog,basic}]\n\
  \                        [-ri [RARITY_INDEX]] [-o OUTPUT_FOLDER] [--force]\n   \
  \                     [-p PREFIX] [-t] [-s STRAINHITS] [-e METADATA] [-i]\n    \
  \                    [-f] [-b] [-op] [-w [PERCENT_IDENTITY]]\n                 \
  \       [-c [PERCENT_COVERAGE]] [-q] [-v]\n                        query_faa\n\n\
  WhatsGNU v1.0 utilizes the natural variation in public databases to rank\nprotein\
  \ sequences based on the number of observed exact protein matches\n(the GNU score) in\
  \ all known genomes of a particular species. It generates a\nreport for all the\
  \ proteins in your query in seconds.\n\npositional arguments:\n  query_faa     \
  \        Query protein FASTA file/s to analyze (.faa)\n\noptional arguments:\n \
  \ -h, --help            show this help message and exit\n  -m MKDATABASE, --mkdatabase\
  \ MKDATABASE\n                        you have to provide path to faa file or a\
  \ folder of\n                        multiple faa files for compression\n  -d DATABASE,\
  \ --database DATABASE\n                        you have to provide path to your\
  \ compressed database\n  -a, --pickle          Save database in pickle format [Default\
  \ only txt file]\n  -j, --sql             Save database in SQL format for large\
  \ Databases\n                        [Default only txt file]\n  -r [ROARY_CLUSTERED_PROTEINS],\
  \ --roary_clustered_proteins [ROARY_CLUSTERED_PROTEINS]\n                      \
  \  clustered_proteins output file from roary to be used\n                      \
  \  with -m\n  -dm {ortholog,basic}, --database_mode {ortholog,basic}\n         \
  \               select a mode from 'ortholog' or 'basic' to be used\n          \
  \              with -d\n  -ri [RARITY_INDEX], --rarity_index [RARITY_INDEX]\n  \
  \                      select an ortholog variant rarity index (OVRI) cutoff\n \
  \                       value in range (0-1)[0.045] for ortholog mode\n  -o OUTPUT_FOLDER,\
  \ --output_folder OUTPUT_FOLDER\n                        Database output prefix\
  \ to be created for results\n                        (default: timestamped WhatsGNU_results\
  \ in the current\n                        directory)\n  --force               Force\
  \ overwriting existing results folder assigned\n                        with -o\
  \ (default: off)\n  -p PREFIX, --prefix PREFIX\n                        Prefix for\
  \ output compressed database (default:\n                        WhatsGNU_compressed_database)\n\
  \  -t, --topgenomes      create a file of top 10 genomes with hits\n  -s STRAINHITS,\
  \ --strainhits STRAINHITS\n                        check how many hits you get from\
  \ a particular\n                        strain,it has to be used with -t\n  -e METADATA,\
  \ --metadata METADATA\n                        get the metadata composition of your\
  \ hits, use the\n                        metadata_frequency.csv file produced by\
  \ the WhatsGNU\n                        customizer script\n  -i, --ids_hits    \
  \    create a file of each protein with locus_tags (ids) of\n                  \
  \      all hits from the database, large file (~ 1 Gb for\n                    \
  \    3000 pts)\n  -f, --faa_GNU_0       get a fasta (.faa) file of all proteins\
  \ with GNU score\n                        of zero\n  -b, --blastp          run blastp\
  \ on the proteins with GNU score of zero and\n                        modify the\
  \ report with ortholog_info, blastp has to be\n                        installed\n\
  \  -op, --output_blastp  get the output report of blastp run, it has to be used\n\
  \                        with -b\n  -w [PERCENT_IDENTITY], --percent_identity [PERCENT_IDENTITY]\n\
  \                        select a blastp percent identity cutoff value [80],\n \
  \                       range(0,100)\n  -c [PERCENT_COVERAGE], --percent_coverage\
  \ [PERCENT_COVERAGE]\n                        select a blastp percent coverage cutoff\
  \ value [80],\n                        range(0,100)\n  -q, --quiet           No\
  \ screen output [default OFF]\n  -v, --version         print version and exit\n"
generated_using:
- --help
docker_image:
