from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Directory

Install_V0_1_0 = CommandToolBuilder(tool="install", base_command=["install"], inputs=[ToolInput(tag="in_backup", input_type=Boolean(optional=True), prefix="--backup", doc=InputDocumentation(doc="[=CONTROL]  make a backup of each existing destination file")), ToolInput(tag="in__backup_accept", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="like --backup but does not accept an argument")), ToolInput(tag="in_ignored", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="(ignored)")), ToolInput(tag="in_compare", input_type=Boolean(optional=True), prefix="--compare", doc=InputDocumentation(doc="compare each pair of source and destination files, and\nin some cases, do not modify the destination at all")), ToolInput(tag="in_directory", input_type=Boolean(optional=True), prefix="--directory", doc=InputDocumentation(doc="treat all arguments as directory names; create all\ncomponents of the specified directories")), ToolInput(tag="in_create_leading_components", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="create all leading components of DEST except the last,\nor all components of --target-directory,\nthen copy SOURCE to DEST")), ToolInput(tag="in_group", input_type=String(optional=True), prefix="--group", doc=InputDocumentation(doc="set group ownership, instead of process' current group")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="set permission mode (as in chmod), instead of rwxr-xr-x")), ToolInput(tag="in_owner", input_type=String(optional=True), prefix="--owner", doc=InputDocumentation(doc="set ownership (super-user only)")), ToolInput(tag="in_preserve_timestamps", input_type=Boolean(optional=True), prefix="--preserve-timestamps", doc=InputDocumentation(doc="apply access/modification times of SOURCE files\nto corresponding destination files")), ToolInput(tag="in_strip", input_type=Boolean(optional=True), prefix="--strip", doc=InputDocumentation(doc="strip symbol tables")), ToolInput(tag="in_strip_program", input_type=String(optional=True), prefix="--strip-program", doc=InputDocumentation(doc="program used to strip binaries")), ToolInput(tag="in_suffix", input_type=String(optional=True), prefix="--suffix", doc=InputDocumentation(doc="override the usual backup suffix")), ToolInput(tag="in_target_directory", input_type=Directory(optional=True), prefix="--target-directory", doc=InputDocumentation(doc="copy all SOURCE arguments into DIRECTORY")), ToolInput(tag="in_no_target_directory", input_type=Boolean(optional=True), prefix="--no-target-directory", doc=InputDocumentation(doc="treat DEST as a normal file")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="print the name of each directory as it is created")), ToolInput(tag="in_preserve_context", input_type=Boolean(optional=True), prefix="--preserve-context", doc=InputDocumentation(doc="preserve SELinux security context")), ToolInput(tag="in_set_security_context", input_type=Boolean(optional=True), prefix="-Z", doc=InputDocumentation(doc="set SELinux security context of destination\nfile and each created directory to default type")), ToolInput(tag="in_context", input_type=Boolean(optional=True), prefix="--context", doc=InputDocumentation(doc="[=CTX]     like -Z, or if CTX is specified then set the\nSELinux or SMACK security context to CTX"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Install_V0_1_0().translate("wdl", allow_empty_container=True)

