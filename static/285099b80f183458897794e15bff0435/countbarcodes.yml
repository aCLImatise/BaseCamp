!Command
positional:
- !Positional
  description: ''
  position: 0
  name: in
  optional: false
named: []
command:
- countbarcodes.sh
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\nWritten by Brian Bushnell\nLast modified October 16, 2015\n\nDescription:\
  \ Counts the number of reads with each barcode.\n\nUsage:   countbarcodes.sh in=<file>\
  \ counts=<file>\n\nInput may be stdin or a fasta or fastq file, raw or gzipped.\n\
  If you pipe via stdin/stdout, please include the file type; e.g. for gzipped fasta\
  \ input, set in=stdin.fa.gz\n\nInput parameters:\nin=<file>           Input reads,\
  \ whose names end in a colon then barcode.\ncounts=<file>       Output of counts.\n\
  interleaved=auto    (int) If true, forces fastq input to be paired and interleaved.\n\
  qin=auto            ASCII offset for input quality.  May be 33 (Sanger), 64 (Illumina),\
  \ or auto.\nunpigz=t            Use pigz to decompress.\nexpected=           Comma-delimited\
  \ list of expected bar codes.\nvalid=              Comma-delimited list of valid\
  \ bar codes.\ncountundefined=t    Count barcodes that contain non-ACGT symbols.\n\
  printheader=t       Print a header.\nmaxrows=-1          Optionally limit the number\
  \ of rows printed.\n\nOutput parameters:\nout=<file>          Write bar codes and\
  \ counts here.  'out=stdout' will pipe to standard out.\n\nJava Parameters:\n-Xmx\
  \                This will set Java's memory usage, overriding autodetection.\n\
  \                    -Xmx20g will specify 20 gigs of RAM, and -Xmx200m will specify\
  \ 200 megs.\n                    The max is typically 85% of physical memory.\n\
  -eoom               This flag will cause the process to exit if an\n           \
  \         out-of-memory exception occurs.  Requires Java 8u92+.\n-da           \
  \      Disable assertions.\n\nPlease contact Brian Bushnell at bbushnell@lbl.gov\
  \ if you encounter any problems.\n\n"
generated_using:
- --help
