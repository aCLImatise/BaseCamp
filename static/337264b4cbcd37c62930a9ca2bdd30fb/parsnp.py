from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Array, String, Int

Parsnp_V0_1_0 = CommandToolBuilder(tool="parsnp", base_command=["parsnp"], inputs=[ToolInput(tag="in_curated", input_type=Boolean(optional=True), prefix="--curated", doc=InputDocumentation(doc="(c)urated genome directory, use all genomes in dir and ignore MUMi?")), ToolInput(tag="in_sequences", input_type=Array(t=String(), optional=True), prefix="--sequences", doc=InputDocumentation(doc="A list of files containing genomes/contigs/scaffolds")), ToolInput(tag="in_reference", input_type=String(optional=True), prefix="--reference", doc=InputDocumentation(doc="(r)eference genome (set to ! to pick random one from sequence dir)")), ToolInput(tag="in_genbank", input_type=Array(t=String(), optional=True), prefix="--genbank", doc=InputDocumentation(doc="A list of Genbank file(s) (gbk)")), ToolInput(tag="in_output_dir", input_type=String(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Specify (assembled) query genome to use, in addition to genomes found in genome dir")), ToolInput(tag="in_max_mumi_distr_dist", input_type=Int(optional=True), prefix="--max-mumi-distr-dist", doc=InputDocumentation(doc="Max MUMi distance value for MUMi distribution")), ToolInput(tag="in_max_mumi_distance", input_type=Int(optional=True), prefix="--max-mumi-distance", doc=InputDocumentation(doc="Max MUMi distance (default: autocutoff based on distribution of MUMi values)")), ToolInput(tag="in_fast_mum", input_type=Boolean(optional=True), prefix="--fastmum", doc=InputDocumentation(doc="Fast MUMi calculation")), ToolInput(tag="in_mumi_only", input_type=Boolean(optional=True), prefix="--mumi_only", doc=InputDocumentation(doc="Calculate MUMi and exit? overrides all other choices!")), ToolInput(tag="in_use_ani", input_type=Boolean(optional=True), prefix="--use-ani", doc=InputDocumentation(doc="Use ani for genome recruitment")), ToolInput(tag="in_min_ani", input_type=Int(optional=True), prefix="--min-ani", doc=InputDocumentation(doc="Min ANI value to allow for genome recruitment.")), ToolInput(tag="in_use_mash", input_type=Boolean(optional=True), prefix="--use-mash", doc=InputDocumentation(doc="Use mash for genome recruitment")), ToolInput(tag="in_max_mash_dist", input_type=Int(optional=True), prefix="--max-mash-dist", doc=InputDocumentation(doc="Max mash distance.")), ToolInput(tag="in_min_anchor_length", input_type=Int(optional=True), prefix="--min-anchor-length", doc=InputDocumentation(doc="Min (a)NCHOR length (default = 1.1*(Log(S)))")), ToolInput(tag="in_mum_length", input_type=Int(optional=True), prefix="--mum-length", doc=InputDocumentation(doc="Mum length")), ToolInput(tag="in_max_cluster_d", input_type=Int(optional=True), prefix="--max-cluster-d", doc=InputDocumentation(doc="Maximal cluster D value")), ToolInput(tag="in_min_cluster_size", input_type=Int(optional=True), prefix="--min-cluster-size", doc=InputDocumentation(doc="Minimum cluster size")), ToolInput(tag="in_max_diagonal_difference", input_type=Int(optional=True), prefix="--max-diagonal-difference", doc=InputDocumentation(doc="Maximal diagonal difference. Either percentage (e.g. 0.2) or bp (e.g. 100bp)")), ToolInput(tag="in_alignment_program", input_type=String(optional=True), prefix="--alignment-program", doc=InputDocumentation(doc="Alignment program to use")), ToolInput(tag="in_unaligned", input_type=Boolean(optional=True), prefix="--unaligned", doc=InputDocumentation(doc="Ouput unaligned regions")), ToolInput(tag="in_use_fast_tree", input_type=Boolean(optional=True), prefix="--use-fasttree", doc=InputDocumentation(doc="Use fasttree instead of RaxML")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use")), ToolInput(tag="in_max_partition_size", input_type=Int(optional=True), prefix="--max-partition-size", doc=InputDocumentation(doc="Max partition size (limits memory usage)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbose output"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Parsnp_V0_1_0().translate("wdl", allow_empty_container=True)

