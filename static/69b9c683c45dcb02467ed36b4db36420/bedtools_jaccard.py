from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Bedtools_Jaccard_V0_1_0 = CommandToolBuilder(tool="bedtools_jaccard", base_command=["bedtools", "jaccard"], inputs=[ToolInput(tag="in_require_same_strandedness", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Require same strandedness.  That is, only report hits in B\nthat overlap A on the _same_ strand.\n- By default, overlaps are reported without respect to strand.")), ToolInput(tag="in_require_different_strandedness", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="Require different strandedness.  That is, only report hits in B\nthat overlap A on the _opposite_ strand.\n- By default, overlaps are reported without respect to strand.")), ToolInput(tag="in_minimum_overlap_a", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Minimum overlap required as a fraction of A.\n- Default is 1E-9 (i.e., 1bp).\n- FLOAT (e.g. 0.50)")), ToolInput(tag="in_minimum_overlap_b", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="Minimum overlap required as a fraction of B.\n- Default is 1E-9 (i.e., 1bp).\n- FLOAT (e.g. 0.50)")), ToolInput(tag="in_require_overlap_be", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="Require that the fraction overlap be reciprocal for A AND B.\n- In other words, if -f is 0.90 and -r is used, this requires\nthat B overlap 90% of A and A _also_ overlaps 90% of B.")), ToolInput(tag="in_require_fraction_be", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="Require that the minimum fraction be satisfied for A OR B.\n- In other words, if -e is used with -f 0.90 and -F 0.10 this requires\nthat either 90% of A is covered OR 10% of  B is covered.\nWithout -e, both fractions would have to be satisfied.")), ToolInput(tag="in_split", input_type=Boolean(optional=True), prefix="-split", doc=InputDocumentation(doc="Treat 'split' BAM or BED12 entries as distinct BED intervals.")), ToolInput(tag="in_provide_genome_file", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="Provide a genome file to enforce consistent chromosome sort order\nacross input files. Only applies when used with -sorted option.")), ToolInput(tag="in_no_name_check", input_type=Boolean(optional=True), prefix="-nonamecheck", doc=InputDocumentation(doc="For sorted data, don't throw an error if the file has different naming conventions\nfor the same chromosome. ex. 'chr1' vs 'chr01'.")), ToolInput(tag="in_bed", input_type=Boolean(optional=True), prefix="-bed", doc=InputDocumentation(doc="If using BAM input, write output as BED.")), ToolInput(tag="in_header", input_type=File(optional=True), prefix="-header", doc=InputDocumentation(doc="the header from the A file prior to results.")), ToolInput(tag="in_no_buf", input_type=Boolean(optional=True), prefix="-nobuf", doc=InputDocumentation(doc="Disable buffered output. Using this option will cause each line\nof output to be printed as it is generated, rather than saved\nin a buffer. This will make printing large output files\nnoticeably slower, but can be useful in conjunction with\nother software tools and scripts that need to process one\nline of bedtools output at a time.")), ToolInput(tag="in_i_obuf", input_type=Boolean(optional=True), prefix="-iobuf", doc=InputDocumentation(doc="Specify amount of memory to use for input buffer.\nTakes an integer argument. Optional suffixes K/M/G supported.\nNote: currently has no effect with compressed files.")), ToolInput(tag="in_b", input_type=String(optional=True), prefix="-b", doc=InputDocumentation(doc="")), ToolInput(tag="in_a", input_type=String(optional=True), prefix="-a", doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bedtools_Jaccard_V0_1_0().translate("wdl")

