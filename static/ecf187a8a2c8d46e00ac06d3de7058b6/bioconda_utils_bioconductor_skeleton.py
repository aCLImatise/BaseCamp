from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File, Int

Bioconda_Utils_Bioconductor_Skeleton_V0_1_0 = CommandToolBuilder(tool="bioconda_utils_bioconductor_skeleton", base_command=["bioconda-utils", "bioconductor-skeleton"], inputs=[ToolInput(tag="in_versioned", input_type=Boolean(optional=True), prefix="--versioned", doc=InputDocumentation(doc="If specified, recipe will be created in\nRECIPES/<package>/<version> (default: False)")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite the contents of an existing recipe. If")), ToolInput(tag="in_recursive", input_type=String(optional=True), prefix="--recursive", doc=InputDocumentation(doc="also used, then overwrite *all* recipes")), ToolInput(tag="in_pkg_version", input_type=String(optional=True), prefix="--pkg-version", doc=InputDocumentation(doc="Package version to use instead of the current one\n(default: -)")), ToolInput(tag="in_bioc_version", input_type=String(optional=True), prefix="--bioc-version", doc=InputDocumentation(doc="Version of Bioconductor to target. If not specified,\nthen automatically finds the latest version of\nBioconductor with the specified version in --pkg-\nversion, or if --pkg-version not specified, then finds\nthe the latest package version in the latest\nBioconductor version (default: -)")), ToolInput(tag="in_skip_if_in_channels", input_type=Boolean(optional=True), prefix="--skip-if-in-channels", doc=InputDocumentation(doc="[SKIP_IF_IN_CHANNELS [SKIP_IF_IN_CHANNELS ...]]\nWhen --recursive is used, it will build *all* recipes.\nUse this argument to skip recursive building for\npackages that already exist in the packages listed\nhere. (default: ['conda-forge', 'bioconda'])")), ToolInput(tag="in_loglevel", input_type=String(optional=True), prefix="--loglevel", doc=InputDocumentation(doc="Set logging level (debug, info, warning, error,\ncritical) (default: 'debug')")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--logfile", doc=InputDocumentation(doc="Write log to file (default: -)")), ToolInput(tag="in_log_file_level", input_type=File(optional=True), prefix="--logfile-level", doc=InputDocumentation(doc="Log level for log file (default: 'debug')")), ToolInput(tag="in_log_command_max_lines", input_type=Int(optional=True), prefix="--log-command-max-lines", doc=InputDocumentation(doc="Limit lines emitted for commands executed (default: -)\n")), ToolInput(tag="in_recipe_folder", input_type=String(), position=0, doc=InputDocumentation(doc="Path to folder containing recipes (default: recipes/)\n(default: -)")), ToolInput(tag="in_config", input_type=String(), position=1, doc=InputDocumentation(doc="Path to Bioconda config (default: config.yml)\n(default: -)")), ToolInput(tag="in_package", input_type=String(), position=2, doc=InputDocumentation(doc="Bioconductor package name. This is case-sensitive, and\nmust match the package name on the Bioconductor site.\nIf 'update-all-packages' is specified, then all\npackages in a given bioconductor release will be\ncreated/updated (--force is then implied)."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bioconda_Utils_Bioconductor_Skeleton_V0_1_0().translate("wdl", allow_empty_container=True)

