from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean

Go2Fmt_Pl_V0_1_0 = CommandToolBuilder(tool="go2fmt.pl", base_command=["go2fmt.pl"], inputs=[ToolInput(tag="in_writes_parse_errors", input_type=String(optional=True), prefix="-e", doc=InputDocumentation(doc="writes parse errors in XML - defaults to STDERR (there should be no\nparse errors in well formed files)")), ToolInput(tag="in_determines_parser_use", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="determines which parser to use; if left unspecified, will make a guess\nbased on file suffix. See below for formats")), ToolInput(tag="in_writer_formatformat_see", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="|writer FORMAT\nformat for output - see below for list")), ToolInput(tag="in_use_cache", input_type=File(optional=True), prefix="-use_cache", doc=InputDocumentation(doc="If this switch is specified, then caching mode is turned on.\nWith caching mode, the first time you parse a file, then an additional\nfile will be exported in a special format that is fast to parse. This\nfile will have the same filename as the original file, except it will\nhave the '.cache' suffix.\nThe next time you parse the file, this program will automatically check\nfor the existence of the '.cache' file. If it exists, and is more recent\nthan the file you specified, this is parsed instead. If it does not\nexist, it is rebuilt.\nThis will bring a speed improvement for b<some> of the output formats\nbelow (such as pathlist). Most output formats work with event-based\nparsing, so caching the object brings no benefit and will in fact be\nslower than bypassing the cache")), ToolInput(tag="in_format", input_type=String(), position=0, doc=InputDocumentation(doc="ARGUMENTS")), ToolInput(tag="in_formats", input_type=String(), position=0, doc=InputDocumentation(doc="writable formats are")), ToolInput(tag="in_go_ont", input_type=String(), position=1, doc=InputDocumentation(doc="Files with suffix '.ontology'\nThese store the ontology DAGs")), ToolInput(tag="in_go_def", input_type=String(), position=2, doc=InputDocumentation(doc="Files with suffix '.defs'")), ToolInput(tag="in_go_xref", input_type=String(), position=3, doc=InputDocumentation(doc="External database references for GO terms\nFiles with suffix '2go' (eg ec2go, metacyc2go)")), ToolInput(tag="in_go_assoc", input_type=String(), position=4, doc=InputDocumentation(doc="Annotations of genes or gene products using GO\nFiles with prefix 'gene-association.'")), ToolInput(tag="in_obo_text", input_type=String(), position=5, doc=InputDocumentation(doc="Files with suffix '.obo'\nThis is a new file format replacement for the existing GO flat file\nformats. It handles ontologies, definitions and xrefs (but not\nassociations)")), ToolInput(tag="in_obo_xml", input_type=String(), position=6, doc=InputDocumentation(doc="Files with suffix '.obo.xml' or '.obo-xml'\nThis is the XML version of the OBO flat file format above")), ToolInput(tag="in_prolog", input_type=String(), position=7, doc=InputDocumentation(doc="prolog facts - you will need a prolog compiler/interpreter to use\nthese. You can reason over these facts using Obol or the forthcoming\nBio-LP project")), ToolInput(tag="in_summary", input_type=String(), position=0, doc=InputDocumentation(doc="can be used on both ontology files and association files")), ToolInput(tag="in_path_list", input_type=String(), position=1, doc=InputDocumentation(doc="shows all paths to the root")), ToolInput(tag="in_obj_yaml", input_type=String(), position=0, doc=InputDocumentation(doc="a YAML representation of a GO::Model::Graph object")), ToolInput(tag="in_obj_storable", input_type=String(), position=1, doc=InputDocumentation(doc="A dump of the perl GO::Model::Graph object. You need Storable from\nCPAN for this to work. This is intended to cache objects on the\nfilesystem, for fast access. The obj_storable representation may not\nbe portable")), ToolInput(tag="in_text_html", input_type=String(), position=2, doc=InputDocumentation(doc="A html-ified OBO output format")), ToolInput(tag="in_god_b_pre_store", input_type=String(), position=3, doc=InputDocumentation(doc="XML that maps directly to the GODB relational schema (can then be\nloaded using stag-storenode.pl)")), ToolInput(tag="in_ch_adodb_pre_store", input_type=String(), position=4, doc=InputDocumentation(doc="XML that maps directly to the Chado relational schema (can then be\nloaded using stag-storenode.pl)"))], outputs=[ToolOutput(tag="out_use_cache", output_type=File(optional=True), selector=InputSelector(input_to_select="in_use_cache", type_hint=File()), doc=OutputDocumentation(doc="If this switch is specified, then caching mode is turned on.\nWith caching mode, the first time you parse a file, then an additional\nfile will be exported in a special format that is fast to parse. This\nfile will have the same filename as the original file, except it will\nhave the '.cache' suffix.\nThe next time you parse the file, this program will automatically check\nfor the existence of the '.cache' file. If it exists, and is more recent\nthan the file you specified, this is parsed instead. If it does not\nexist, it is rebuilt.\nThis will bring a speed improvement for b<some> of the output formats\nbelow (such as pathlist). Most output formats work with event-based\nparsing, so caching the object brings no benefit and will in fact be\nslower than bypassing the cache"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Go2Fmt_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

