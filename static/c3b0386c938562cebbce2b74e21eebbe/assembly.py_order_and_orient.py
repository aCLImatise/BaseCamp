from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Directory, Boolean

Assembly_Py_Order_And_Orient_V0_1_0 = CommandToolBuilder(tool="assembly.py_order_and_orient", base_command=["assembly.py", "order_and_orient"], inputs=[ToolInput(tag="in_out_alternate_contigs", input_type=String(optional=True), prefix="--outAlternateContigs", doc=InputDocumentation(doc="Output sequences (FASTA format) from alternative\ncontigs that mapped, but were not chosen for the final\noutput.")), ToolInput(tag="in_break_len", input_type=Int(optional=True), prefix="--breaklen", doc=InputDocumentation(doc="Amount to extend alignment clusters by (if --extend).\nnucmer default 200, promer default 60.")), ToolInput(tag="in_max_gap", input_type=Int(optional=True), prefix="--maxgap", doc=InputDocumentation(doc="Maximum gap between two adjacent matches in a cluster.\nOur default is 200. nucmer default 90, promer default\n30. Manual suggests going to 1000.")), ToolInput(tag="in_min_match", input_type=Int(optional=True), prefix="--minmatch", doc=InputDocumentation(doc="Minimum length of an maximal exact match. Our default\nis 10. nucmer default 20, promer default 6.")), ToolInput(tag="in_min_cluster", input_type=Int(optional=True), prefix="--mincluster", doc=InputDocumentation(doc="Minimum cluster length. nucmer default 65, promer\ndefault 20.")), ToolInput(tag="in_min_pct_id", input_type=Int(optional=True), prefix="--min_pct_id", doc=InputDocumentation(doc="show-tiling: minimum percent identity for contig\nalignment (0.0 - 1.0, default: 0.6)")), ToolInput(tag="in_min_contig_len", input_type=Int(optional=True), prefix="--min_contig_len", doc=InputDocumentation(doc="show-tiling: reject contigs smaller than this\n(default: 200)")), ToolInput(tag="in_min_pct_contig_aligned", input_type=Int(optional=True), prefix="--min_pct_contig_aligned", doc=InputDocumentation(doc="show-tiling: minimum percent of contig length in\nalignment (0.0 - 1.0, default: 0.3)")), ToolInput(tag="in_loglevel", input_type=String(optional=True), prefix="--loglevel", doc=InputDocumentation(doc="Verboseness of output. [default: DEBUG]")), ToolInput(tag="in_tmp_dir", input_type=Directory(optional=True), prefix="--tmp_dir", doc=InputDocumentation(doc="Base directory for temp files. [default: /tmp]")), ToolInput(tag="in_tmp_dir_keep", input_type=Boolean(optional=True), prefix="--tmp_dirKeep", doc=InputDocumentation(doc="Keep the tmp_dir if an exception occurs while running.\nDefault is to delete all temp files at the end, even\nif there's a failure.\n")), ToolInput(tag="in_in_fasta", input_type=String(), position=0, doc=InputDocumentation(doc="Input de novo assembly/contigs, FASTA format.")), ToolInput(tag="in_in_reference", input_type=String(), position=1, doc=InputDocumentation(doc="Reference genome for ordering, orienting, and merging\ncontigs, FASTA format.")), ToolInput(tag="in_out_fast_a", input_type=String(), position=2, doc=InputDocumentation(doc="Output assembly, FASTA format, with the same number of\nchromosomes as inReference, and in the same order."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Assembly_Py_Order_And_Orient_V0_1_0().translate("wdl", allow_empty_container=True)

