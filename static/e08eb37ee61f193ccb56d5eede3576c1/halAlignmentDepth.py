from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Halalignmentdepth_V0_1_0 = CommandToolBuilder(tool="halAlignmentDepth", base_command=["halAlignmentDepth"], inputs=[ToolInput(tag="in_cache_bytes", input_type=Int(optional=True), prefix="--cacheBytes", doc=InputDocumentation(doc=":      maximum size in bytes of regular hdf5 cache [default =\n15728640]")), ToolInput(tag="in_cache_mdc", input_type=Int(optional=True), prefix="--cacheMDC", doc=InputDocumentation(doc=":        number of metadata slots in hdf5 cache [default = 113]")), ToolInput(tag="in_cacher_dc", input_type=Int(optional=True), prefix="--cacheRDC", doc=InputDocumentation(doc=":        number of regular slots in hdf5 cache.  should be a prime\nnumber ~= 10 * DefaultCacheRDCBytes / chunk [default =\n599999]")), ToolInput(tag="in_cache_w_zero", input_type=Int(optional=True), prefix="--cacheW0", doc=InputDocumentation(doc=":         w0 parameter fro hdf5 cache [default = 0.75]")), ToolInput(tag="in_count_dupes", input_type=Boolean(optional=True), prefix="--countDupes", doc=InputDocumentation(doc=":              count each other *position* each base aligns to, rather\nthan the number of unique genomes, including paralogies so\na genome can be counted  multiple times.  This will give\nthe height of the MAF column created with hal2maf.\n[default = 0]")), ToolInput(tag="in_in_memory", input_type=Boolean(optional=True), prefix="--inMemory", doc=InputDocumentation(doc=":                load all data in memory (and disable hdf5 cache) [default\n= 0]")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc=":          length of the reference genome (or sequence if specified)\nto convert.  If set to 0, the entire thing is converted\n[default = 0]")), ToolInput(tag="in_no_ancestors", input_type=Boolean(optional=True), prefix="--noAncestors", doc=InputDocumentation(doc=":             do not count ancestral genomes. [default = 0]")), ToolInput(tag="in_out_wiggle", input_type=File(optional=True), prefix="--outWiggle", doc=InputDocumentation(doc=":       output wig file (stdout if none) [default = stdout]")), ToolInput(tag="in_ref_sequence", input_type=String(optional=True), prefix="--refSequence", doc=InputDocumentation(doc=":     sequence name to export (all sequences by default)\n[default = '']")), ToolInput(tag="in_root_genome", input_type=String(optional=True), prefix="--rootGenome", doc=InputDocumentation(doc=":      name of root genome (none if empty) [default = '']")), ToolInput(tag="in_start", input_type=Int(optional=True), prefix="--start", doc=InputDocumentation(doc=":           coordinate within reference genome (or sequence if\nspecified) to start at [default = 0]")), ToolInput(tag="in_step", input_type=Int(optional=True), prefix="--step", doc=InputDocumentation(doc=":            step size [default = 1]")), ToolInput(tag="in_target_genomes", input_type=String(optional=True), prefix="--targetGenomes", doc=InputDocumentation(doc=":   comma-separated (no spaces) list of target genomes (others\nare excluded) (vist all if empty) [default = '']\n")), ToolInput(tag="in_hal_path", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_ref_genome", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_out_wiggle", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_wiggle", type_hint=File()), doc=OutputDocumentation(doc=":       output wig file (stdout if none) [default = stdout]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Halalignmentdepth_V0_1_0().translate("wdl", allow_empty_container=True)

