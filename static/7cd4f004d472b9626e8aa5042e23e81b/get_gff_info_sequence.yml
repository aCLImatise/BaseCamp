&id003 !Command
positional:
- !Positional
  description: ''
  position: 0
  name: GFF_FILE
  optional: true
- !Positional
  description: ''
  position: 1
  name: FASTA_FILE
  optional: true
named:
- !Flag
  description: Reverse complement sequences on the - strand
  synonyms:
  - -r
  - --reverse
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Write the sequences on one line
  synonyms:
  - -w
  - --no-wrap
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Split the sequence header of the reference at the first space, to emulate
    BLAST behaviour
  synonyms:
  - -s
  - --split
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Fasta file containing the reference sequences of the GFF file
  synonyms:
  - -f
  - --reference
  args: !SimpleFlagArg
    name: FILENAME
  optional: true
- !Flag
  description: Shows Progress Bar
  synonyms:
  - --progress
  args: !EmptyFlagArg {}
  optional: true
command:
- get-gff-info
- sequence
parent: &id001 !Command
  positional: []
  named: []
  command:
  - get-gff-info
  parent:
  subcommands:
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: GFF_FILE
      optional: true
    - !Positional
      description: ''
      position: 1
      name: OUTPUT_FILE
      optional: true
    named:
    - !Flag
      description: Reference FASTA file for the GFF  [required]
      synonyms:
      - -f
      - --reference
      args: !SimpleFlagArg
        name: FILENAME
      optional: true
    - !Flag
      description: The output will be a JSON dictionary
      synonyms:
      - -j
      - --json-out
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: If the coverage must be calculated on each strand
      synonyms:
      - -s
      - --strand-specific
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Emulate BLAST output (use only the header part before the first
        space)
      synonyms:
      - -r
      - --rename
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Shows Progress Bar
      synonyms:
      - --progress
      args: !EmptyFlagArg {}
      optional: true
    command:
    - get-gff-info
    - cov
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: get-gff-info cov [OPTIONS] [GFF_FILE] [OUTPUT_FILE]\n\n  Report\
      \ on how much a sequence length is covered by annotations in [gff-\n  file]\n\
      \nOptions:\n  -v, --verbose\n  -f, --reference FILENAME  Reference FASTA file\
      \ for the GFF  [required]\n  -j, --json-out            The output will be a\
      \ JSON dictionary\n  -s, --strand-specific     If the coverage must be calculated\
      \ on each strand\n  -r, --rename              Emulate BLAST output (use only\
      \ the header part\n                            before the first space)\n\n \
      \ --progress                Shows Progress Bar\n  --help                   \
      \ Show this message and exit.\n"
    generated_using: &id002
    - --help
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: GFF_FILE
      optional: true
    named:
    - !Flag
      description: 'Directory for the database  [default: gff-dbm]'
      synonyms:
      - -d
      - --output-dir
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    command:
    - get-gff-info
    - dbm
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: get-gff-info dbm [OPTIONS] [GFF_FILE]\n\n  Creates a dbm database\
      \ with annotations from file [gff-file] into db\n  [output-dir]\n\nOptions:\n\
      \  -v, --verbose\n  -d, --output-dir TEXT  Directory for the database  [default:\
      \ gff-dbm]\n  --help                 Show this message and exit.\n"
    generated_using: *id002
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: GFF_FILE
      optional: true
    - !Positional
      description: ''
      position: 1
      name: GTF_FILE
      optional: true
    named:
    - !Flag
      description: 'GFF attribute to use for the GTF *gene_id* attribute [default:
        gene_id]'
      synonyms:
      - -g
      - --gene-id
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    command:
    - get-gff-info
    - gtf
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: get-gff-info gtf [OPTIONS] [GFF_FILE] [GTF_FILE]\n\n  Extract\
      \ annotations from a GFF file [gff-file] to a GTF file [gtf-file]\n\nOptions:\n\
      \  -v, --verbose\n  -g, --gene-id TEXT  GFF attribute to use for the GTF *gene_id*\
      \ attribute\n                      [default: gene_id]\n\n  --help          \
      \    Show this message and exit.\n"
    generated_using: *id002
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: GFF_FILE
      optional: true
    - !Positional
      description: ''
      position: 1
      name: OUTPUT_FILE
      optional: true
    named:
    - !Flag
      description: Taxonomy used to populate the lineage
      synonyms:
      - -t
      - --taxonomy
      args: !SimpleFlagArg
        name: FILENAME
      optional: true
    - !Flag
      description: No cache for the lineage function
      synonyms:
      - -c
      - --no-cache
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: If used, the json will be written in a human readble form
      synonyms:
      - -i
      - --indent
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: Shows Progress Bar
      synonyms:
      - --progress
      args: !EmptyFlagArg {}
      optional: true
    command:
    - get-gff-info
    - mongodb
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: get-gff-info mongodb [OPTIONS] [GFF_FILE] [OUTPUT_FILE]\n\n\
      \  Extract annotations from a GFF [gff-file] file and makes output for\n  MongoDB\
      \ [output-file]\n\nOptions:\n  -v, --verbose\n  -t, --taxonomy FILENAME  Taxonomy\
      \ used to populate the lineage\n  -c, --no-cache           No cache for the\
      \ lineage function\n  -i, --indent INTEGER     If used, the json will be written\
      \ in a human\n                           readble form\n\n  --progress      \
      \         Shows Progress Bar\n  --help                   Show this message and\
      \ exit.\n"
    generated_using: *id002
  - *id003
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: GFF_FILE
      optional: true
    named:
    - !Flag
      description: 'Prefix for the file name in output  [default: split]'
      synonyms:
      - -p
      - --prefix
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: 'Number of chunks into which split the GFF file [default: 10]'
      synonyms:
      - -n
      - --number
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: gzip output files
      synonyms:
      - -z
      - --gzip
      args: !EmptyFlagArg {}
      optional: true
    command:
    - get-gff-info
    - split
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: get-gff-info split [OPTIONS] [GFF_FILE]\n\n  Split annotations\
      \ from a GFF file [gff-file] to several files starting\n  with [prefix]\n\n\
      Options:\n  -v, --verbose\n  -p, --prefix TEXT     Prefix for the file name\
      \ in output  [default: split]\n  -n, --number INTEGER  Number of chunks into\
      \ which split the GFF file\n                        [default: 10]\n\n  -z, --gzip\
      \            gzip output files\n  --help                Show this message and\
      \ exit.\n"
    generated_using: *id002
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: get-gff-info [OPTIONS] COMMAND [ARGS]...\n\n  Main function\n\
    \nOptions:\n  --version  Show the version and exit.\n  --cite\n  --help     Show\
    \ this message and exit.\n\nCommands:\n  cov       Report on how much a sequence\
    \ length is covered by annotations...\n  dbm       Creates a dbm database with\
    \ annotations from file [gff-file]...\n  gtf       Extract annotations from a\
    \ GFF file [gff-file] to a GTF file...\n  mongodb   Extract annotations from a\
    \ GFF [gff-file] file and makes output...\n  sequence  Extract the nucleotidic\
    \ sequences of annotations from [gff-\n            file]...\n\n  split     Split\
    \ annotations from a GFF file [gff-file] to several files...\n"
  generated_using: *id002
subcommands: []
help_flag: !Flag
  description: Show this message and exit.
  synonyms:
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "Usage: get-gff-info sequence [OPTIONS] [GFF_FILE] [FASTA_FILE]\n\n  Extract\
  \ the nucleotidic sequences of annotations from [gff-file] to\n  [fasta-file]\n\n\
  Options:\n  -v, --verbose\n  -r, --reverse             Reverse complement sequences\
  \ on the - strand\n  -w, --no-wrap             Write the sequences on one line\n\
  \  -s, --split               Split the sequence header of the reference at the\n\
  \                            first space, to emulate BLAST behaviour\n\n  -f, --reference\
  \ FILENAME  Fasta file containing the reference sequences of\n                 \
  \           the GFF file\n\n  --progress                Shows Progress Bar\n  --help\
  \                    Show this message and exit.\n"
generated_using: *id002
