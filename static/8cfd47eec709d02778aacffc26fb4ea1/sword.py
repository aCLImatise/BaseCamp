from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Float, String

Sword_V0_1_0 = CommandToolBuilder(tool="sword", base_command=["sword"], inputs=[ToolInput(tag="in_query", input_type=File(optional=True), prefix="--query", doc=InputDocumentation(doc="(required)\ninput fasta database query file")), ToolInput(tag="in_target", input_type=File(optional=True), prefix="--target", doc=InputDocumentation(doc="(required)\ninput fasta database target file")), ToolInput(tag="in_gap_open", input_type=Int(optional=True), prefix="--gap-open", doc=InputDocumentation(doc="default: 10\ngap opening penalty, must be given as a positive integer")), ToolInput(tag="in_gap_extend", input_type=Int(optional=True), prefix="--gap-extend", doc=InputDocumentation(doc="default: 1\ngap extension penalty, must be given as a positive integer and\nmust be less or equal to gap opening penalty")), ToolInput(tag="in_matrix", input_type=Int(optional=True), prefix="--matrix", doc=InputDocumentation(doc="default: BLOSUM_62\nsimilarity matrix, can be one of the following:\nBLOSUM_45\nBLOSUM_50\nBLOSUM_62\nBLOSUM_80\nBLOSUM_90\nPAM_30\nPAM_70\nPAM_250")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="default: stdout\noutput file for the alignment")), ToolInput(tag="in_out_fmt", input_type=File(optional=True), prefix="--outfmt", doc=InputDocumentation(doc="default: bm9\nout format for the output file, must be one of the following:\nbm0      - blast m0 output format\nbm8      - blast m8 tabular output format\nbm9      - blast m9 commented tabular output format")), ToolInput(tag="in_evalue", input_type=Float(optional=True), prefix="--evalue", doc=InputDocumentation(doc="default: 10.0\nevalue threshold, alignments with higher evalue are filtered,\nmust be given as a positive float")), ToolInput(tag="in_max_aligns", input_type=Int(optional=True), prefix="--max-aligns", doc=InputDocumentation(doc="default: 10\nmaximum number of alignments to be outputted")), ToolInput(tag="in_algorithm", input_type=String(optional=True), prefix="--algorithm", doc=InputDocumentation(doc="default: SW\nalgorithm used for alignment, must be one of the following:\nSW - Smith-Waterman local alignment\nNW - Needleman-Wunsch global alignment\nHW - semiglobal alignment\nOV - overlap alignment")), ToolInput(tag="in_km_er_length", input_type=Int(optional=True), prefix="--kmer-length", doc=InputDocumentation(doc="default: 3\nlength of kmers used for database search\npossible values: 3, 4, 5")), ToolInput(tag="in_max_candidates", input_type=Int(optional=True), prefix="--max-candidates", doc=InputDocumentation(doc="default: 30000\nnumber of target sequences (per query sequence) passed\nto the alignment part")), ToolInput(tag="in_threshold", input_type=Int(optional=True), prefix="--threshold", doc=InputDocumentation(doc="default: 13\nminimum score for two kmers to trigger a hit\nif 0 given, only exact matching kmers are checked")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="default: hardware concurrency / 2\nnumber of threads used in thread pool")), ToolInput(tag="in_arguments", input_type=String(optional=True), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="default: stdout\noutput file for the alignment")), ToolOutput(tag="out_out_fmt", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_fmt", type_hint=File()), doc=OutputDocumentation(doc="default: bm9\nout format for the output file, must be one of the following:\nbm0      - blast m0 output format\nbm8      - blast m8 tabular output format\nbm9      - blast m9 commented tabular output format"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sword_V0_1_0().translate("wdl", allow_empty_container=True)

