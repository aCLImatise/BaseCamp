from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean, Int

Simug_V0_1_0 = CommandToolBuilder(tool="simuG", base_command=["simuG"], inputs=[ToolInput(tag="in_man", input_type=String(optional=True), prefix="-man", doc=InputDocumentation(doc="Print more detailed help message. Example: -m.")), ToolInput(tag="in_version", input_type=String(optional=True), prefix="-version", doc=InputDocumentation(doc="Print version information. Example: -v.")), ToolInput(tag="in_refseq", input_type=String(optional=True), prefix="-refseq", doc=InputDocumentation(doc="Specify the reference genome to be used as the template (in\nfasta or fasta.gz format). This option is mandatory. Default =\n''. Example: -refseq ref.genome.fa(.gz).")), ToolInput(tag="in_snp_vcf", input_type=Boolean(optional=True), prefix="-snp_vcf", doc=InputDocumentation(doc="Specify the list of exact SNP variants to be introduced (in vcf\nor vcf.gz format). When specified, the options '-snp_count',\n'-snp_model', and '-titv_ratio' will be ignored. If there are\nalso INDEL variants in the vcf file, they will be automatically\nignored. Default = ''. Example: -snp_vcf snp.vcf(.gz).")), ToolInput(tag="in_snp_count", input_type=Boolean(optional=True), prefix="-snp_count", doc=InputDocumentation(doc="Specify the number of SNP variants to be introduced. Default =\n''. Example: -snp_count 5000.")), ToolInput(tag="in_snp_model", input_type=Boolean(optional=True), prefix="-snp_model", doc=InputDocumentation(doc="Specify the SNP model file generated by the ancillary script\nvcf2model.pl. When specified, the option '-titv_ratio' will be\nignored. Default = ''. Example: -snp_model snp_model.txt.")), ToolInput(tag="in_tit_v_ratio", input_type=Boolean(optional=True), prefix="-titv_ratio", doc=InputDocumentation(doc="Specify the Ti/Tv ratio (transition/transversion ratio) used for\nsimulate SNP variants. Default = 0.5. Example: -titv_ratio 2.0.\nFor transition only, set '-titv_ratio Inf'. For transversion\nonly, set '-titv_ratio 0'.")), ToolInput(tag="in_coding_partition_for_snp_simulation", input_type=Boolean(optional=True), prefix="-coding_partition_for_snp_simulation", doc=InputDocumentation(doc="Specify the coding partition (e.g. 'noncoding', 'coding', '2d'\nor '4d') used for constraining simulate SNP variants within the\nspecified sites. This option needs to be used together with the\noption '-gene_gff'. Default = ''. Example:\n-coding_partition_for_snp_simulation 4d for simulating SNP only\nin 4-fold degenerate (4d) sites.")), ToolInput(tag="in_in_del_vcf", input_type=Boolean(optional=True), prefix="-indel_vcf", doc=InputDocumentation(doc="Specify the list of exact INDEL variants to be introduced (in\nvcf or vcf.gz format). When specified, the options\n'-indel_count', '-indel_model', '-ins_del_ratio',\n'-indel_size_powerlaw_alpha', and\n'-indel_size_powerlaw_constant' will be ignored. If there are\nalso SNP variants in the vcf file, they will be automatically\nignored. Default = ''. Example: -indel_vcf indel.vcf(.gz).")), ToolInput(tag="in_in_del_count", input_type=Boolean(optional=True), prefix="-indel_count", doc=InputDocumentation(doc="Specify the number of INDEL variants to be introduced. Default =\n''. Example: -indel_count 500.")), ToolInput(tag="in_in_del_model", input_type=Boolean(optional=True), prefix="-indel_model", doc=InputDocumentation(doc="Specify the INDEL model file generated by the ancillary script\nvcf2model.pl. When specified, the options '-ins_del_ratio',\n'-indel_size_powerlaw_alpha', and\n'-indel_size_powerlaw_constant' will be ignored. Default = ''.\nExample: -indel_model indel_model.txt.")), ToolInput(tag="in_ins_del_ratio", input_type=Boolean(optional=True), prefix="-ins_del_ratio", doc=InputDocumentation(doc="Specify the Insertion/Deletion ratio used for simulate INDEL\nvariants. Default = 1.0. Example: -ins_del_ratio 1.0. For\ninsertion only, set '-ins_del_ratio Inf'. For deletion only, set\n'-ins_del_ratio 0'.")), ToolInput(tag="in_in_del_size_power_law_alpha", input_type=Boolean(optional=True), prefix="-indel_size_powerlaw_alpha", doc=InputDocumentation(doc="Specify the exponent factor alpha for power-law-fitted indel\nsize distribution: p = C * (size) ** (alpha) for size >= 1 &\nsize <= 50. Default = 2.0. Example: -indel_size_powerlaw_alpha\n2.0.")), ToolInput(tag="in_in_del_size_power_law_constant", input_type=Boolean(optional=True), prefix="-indel_size_powerlaw_constant", doc=InputDocumentation(doc="Specify the exponent factor alpha for power-law-fitted indel\nsize distribution: p = C * (size) ** (alpha) for size >= 1 &\nsize <= 50. Default = 0.5. Example:\n-indel_size_powerlaw_constant 0.5.")), ToolInput(tag="in_cnv_vcf", input_type=Boolean(optional=True), prefix="-cnv_vcf", doc=InputDocumentation(doc="Specify the list of exact CNV variants to be introduced (in vcf\nor vcf.gz format). When specified, the options '-cnv_count',\n'-cnv_gain_loss_ratio', '-cnv_max_copy_number', '-cnv_min_size',\nand '-cnv_max_size' will be ignored. Default = ''. Example:\n-cnv_vcf cnv.vcf.")), ToolInput(tag="in_cnv_count", input_type=Boolean(optional=True), prefix="-cnv_count", doc=InputDocumentation(doc="Specify the number of CNV variants to be introduced. Default =\n''. Example: -cnv_count 50.")), ToolInput(tag="in_cnv_gain_loss_ratio", input_type=Boolean(optional=True), prefix="-cnv_gain_loss_ratio", doc=InputDocumentation(doc="Specify the relative ratio of DNA again over DNA loss. Default =\n1.0. Example: -cnv_gain_loss_ratio 1.0. For copy number gain\nonly, set '-cnv_gain_loss Inf'. For copy number loss only, set\n'-cnv_gain_loss_ratio 0'.")), ToolInput(tag="in_cnv_max_copy_number", input_type=Boolean(optional=True), prefix="-cnv_max_copy_number", doc=InputDocumentation(doc="Specify the maximal copy number for CNV. Default = 10. Example:\n-cnv_max_copy_number 10.")), ToolInput(tag="in_cnv_min_size", input_type=Boolean(optional=True), prefix="-cnv_min_size", doc=InputDocumentation(doc="Specify the minimal size (in basepair) for CNV variants. Default\n= 100. Example: -cnv_min_size 100.")), ToolInput(tag="in_cnv_max_size", input_type=Boolean(optional=True), prefix="-cnv_max_size", doc=InputDocumentation(doc="Specify the maximal size (in basepair) for CNV variants. Default\n= 100000. Example: -cnv_max_size 100.")), ToolInput(tag="in_duplication_tandem_dispersed_ratio", input_type=Boolean(optional=True), prefix="-duplication_tandem_dispersed_ratio", doc=InputDocumentation(doc="Specify the expect frequency ratio between tandem duplication\nand dispersed duplication for CNV variants. Default = 1.\nExample: -duplication_tandem_dispersed_ratio 1. For simulating\ntandem duplication only, set\n'-duplication_tandem_dispersed_ratio Inf'. For simulating\ndispersed duplication only, set\n'-duplication_tandem_dispersed_ratio 0'.")), ToolInput(tag="in_inversion_vcf", input_type=Boolean(optional=True), prefix="-inversion_vcf", doc=InputDocumentation(doc="Specify the list of exact inversions to be introduced (in vcf or\nvcf.gz format). When specified, the options '-inversion_count',\n'-inversion_min_size', '-inversion_max_size', and\n'-inversion_breakpoint_gff' will be ignored. Default = ''.\nExample: -inversion_vcf inversion.vcf(.gz).")), ToolInput(tag="in_inversion_count", input_type=Boolean(optional=True), prefix="-inversion_count", doc=InputDocumentation(doc="Specify the number of inversions to be introduced. Default = ''.\nExample: -inversion_count 5.")), ToolInput(tag="in_inversion_min_size", input_type=Boolean(optional=True), prefix="-inversion_min_size", doc=InputDocumentation(doc="Specify the minimal size (in basepair) for inversion. Default =\n1000. Example: -inversion_min_size 1000.")), ToolInput(tag="in_inversion_max_size", input_type=Boolean(optional=True), prefix="-inversion_max_size", doc=InputDocumentation(doc="Specify the maximal size (in basepair) for inversion. Default =\n100000. Example: -inversion_max_size 100000.")), ToolInput(tag="in_inversion_breakpoint_gff", input_type=Boolean(optional=True), prefix="-inversion_breakpoint_gff", doc=InputDocumentation(doc="Specify the list of potential breakpoints for triggering\ninversions (in gff3 or gff3.gz format). Default = ''. Example:\n-inversion_breakpoint_gff inversion_breakpoint.gff(.gz).")), ToolInput(tag="in_translocation_vcf", input_type=Boolean(optional=True), prefix="-translocation_vcf", doc=InputDocumentation(doc="Specify the list of exact translocations to be introduced (in\nvcf or vcf.gz format). When specified, the options\n'-translocation_count' and '-sv_breakpoint_gff' will be ignored.\nDefault = ''. Example: -translocation_vcf\ntransloaction.vcf(.gz).")), ToolInput(tag="in_translocation_count", input_type=Boolean(optional=True), prefix="-translocation_count", doc=InputDocumentation(doc="Specify the number of translocations to be introduced. Default =\n''. Example: -translocation_count 1.")), ToolInput(tag="in_translocation_breakpoint_gff", input_type=Boolean(optional=True), prefix="-translocation_breakpoint_gff", doc=InputDocumentation(doc="Specify the list of potential breakpoints for triggering\ntranslocations (in gff3 or gff3.gz format). Default = ''.\nExample: -translocation_breakpoint_gff\ntranslocation_breakpoint.gff(.gz).")), ToolInput(tag="in_centromere_gff", input_type=Boolean(optional=True), prefix="-centromere_gff", doc=InputDocumentation(doc="Specify centromeres for constraining the random CNV, inversion,\nand translocation simulation (in gff3 or gff3.gz format). When\nthis option applied, those potential CNVs that will induce\ncentromere deletion/duplication as well as the potential\ninversions and translocations with breakpoints overlapped with\ndefined centromeres will be disalled. Also, potential\ntranslocation that will induce dicentric rearranged chromosomes\nwill be disalled as well. Default = ''. Example: -centromere_gff\ncentromere.gff(.gz).")), ToolInput(tag="in_gene_gff", input_type=Boolean(optional=True), prefix="-gene_gff", doc=InputDocumentation(doc="Specify genes for constraining the random SNP, CNV, inversion,\nand translocation simulation (in gff3 or gff3.gz format). For\nrandom SNP simulation, this option needs to be used together\nwith the option '-coding_partition_for_snp_simulation' to\nconstrain SNPs simulations only in noncoding regions, coding\nregions, 2-fold degenerate (2d) sites or 4-fold degenerate (4d)\nsites. For random CNV, inversion, and translocation simulation,\napplied this option will disallow simulated breakpoints falling\non the defined genes. Default = ''. Example: -gene_gff\ngene.gff(.gz).")), ToolInput(tag="in_excluded_chr_list", input_type=Boolean(optional=True), prefix="-excluded_chr_list", doc=InputDocumentation(doc="Specify the name of chromosome(s) to be excluded for introducing\ngenomic variants (a single-column list file in txt format).\nDefault = ''. Example: -excluded_chr_list excluded_chr_list.txt.")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="-seed", doc=InputDocumentation(doc="Specify an integer as the random seed for the simulation. It is\nrecommended to set a very big integer for ideal randomness.\nDefault = ''. Example: -seed 201812201903.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="-prefix", doc=InputDocumentation(doc="Specify the prefix for output files. Default = 'output_prefix'.\nExample: -prefix sim.\n"))], outputs=[], container="quay.io/biocontainers/simug:1.0.0--hdfd78af_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Simug_V0_1_0().translate("wdl")

