from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Appspam_V0_1_0 = CommandToolBuilder(tool="appspam", base_command=["appspam"], inputs=[ToolInput(tag="in_reference_sequencesfull_path", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Reference sequences.\nFull path to fasta file with references.")), ToolInput(tag="in_query_sequencesfull_path", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="Query sequences.\nFull path to fasta file with query sequences.")), ToolInput(tag="in_reference_treefile_bifurcating", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="Reference tree.\nFile of reference tree in newick format.\n(Rooted, bifurcating tree in newick format.\nAll leaves must have identical names to reference sequences.)")), ToolInput(tag="in_out_j_place", input_type=File(optional=True), prefix="--out_jplace", doc=InputDocumentation(doc="Path and name to JPlace output file.")), ToolInput(tag="in_weight", input_type=Boolean(optional=True), prefix="--weight", doc=InputDocumentation(doc="Weight of pattern.")), ToolInput(tag="in_dont_care", input_type=Boolean(optional=True), prefix="--dontCare", doc=InputDocumentation(doc="Number of don't care positions.")), ToolInput(tag="in_mode", input_type=Boolean(optional=True), prefix="--mode", doc=InputDocumentation(doc="Placement-mode.\nOne of [MINDIST, SPAMCOUNT, LCADIST, LCACOUNT, SPAMX]")), ToolInput(tag="in_spam_x", input_type=Boolean(optional=True), prefix="--spamx", doc=InputDocumentation(doc="Threshold when to place at leaves for SPAMX.")), ToolInput(tag="in_unassembled", input_type=Boolean(optional=True), prefix="--unassembled", doc=InputDocumentation(doc="Use unassembled references,\nsee github repository for more information.")), ToolInput(tag="in_delimiter", input_type=Boolean(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="Delimiter used for unassembled references.")), ToolInput(tag="in_pattern", input_type=Boolean(optional=True), prefix="--pattern", doc=InputDocumentation(doc="Number of patterns.")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads.")), ToolInput(tag="in_sampling", input_type=Boolean(optional=True), prefix="--sampling", doc=InputDocumentation(doc="Experimental: Samples the spaced word matches.")), ToolInput(tag="in_read_block_size", input_type=Boolean(optional=True), prefix="--readBlockSize", doc=InputDocumentation(doc="Read block size.")), ToolInput(tag="in_threshold", input_type=Boolean(optional=True), prefix="--threshold", doc=InputDocumentation(doc="Threshold used for filtering spaced word matches.")), ToolInput(tag="in_turn_verbose_mode", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Turn on verbose mode with additional\ninformation printed to std_out.")), ToolInput(tag="in_write_scores", input_type=Boolean(optional=True), prefix="--write-scores", doc=InputDocumentation(doc="Write all query-reference distances to files.")), ToolInput(tag="in_write_histogram", input_type=Boolean(optional=True), prefix="--write-histogram", doc=InputDocumentation(doc="Write scores for all spaced word matches to file."))], outputs=[ToolOutput(tag="out_out_j_place", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_j_place", type_hint=File()), doc=OutputDocumentation(doc="Path and name to JPlace output file."))], container="quay.io/biocontainers/appspam:1.03--hc9558a2_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Appspam_V0_1_0().translate("wdl")

