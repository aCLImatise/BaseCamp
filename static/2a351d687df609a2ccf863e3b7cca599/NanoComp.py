from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Directory, String, Boolean, File, Array

Nanocomp_V0_1_0 = CommandToolBuilder(tool="NanoComp", base_command=["NanoComp"], inputs=[ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Set the allowed number of threads to be used by the script")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Specify directory in which output has to be created.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Specify an optional prefix to be used for the output files.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Write log messages also to terminal.")), ToolInput(tag="in_raw", input_type=Boolean(optional=True), prefix="--raw", doc=InputDocumentation(doc="Store the extracted data in tab separated file.")), ToolInput(tag="in_store", input_type=Boolean(optional=True), prefix="--store", doc=InputDocumentation(doc="Store the extracted data in a pickle file for future plotting.")), ToolInput(tag="in_read_type", input_type=String(optional=True), prefix="--readtype", doc=InputDocumentation(doc="Which read type to extract information about from summary. Options are 1D, 2D,\n1D2")), ToolInput(tag="in_maxlength", input_type=Int(optional=True), prefix="--maxlength", doc=InputDocumentation(doc="Drop reads longer than length specified.")), ToolInput(tag="in_minlength", input_type=Int(optional=True), prefix="--minlength", doc=InputDocumentation(doc="Drop reads shorter than length specified.")), ToolInput(tag="in_barcoded", input_type=Boolean(optional=True), prefix="--barcoded", doc=InputDocumentation(doc="Barcoded experiment in summary format, splitting per barcode.")), ToolInput(tag="in_split_runs", input_type=File(optional=True), prefix="--split_runs", doc=InputDocumentation(doc="File: Split the summary on run IDs and use names in tsv file. Mandatory header\nfields are 'NAME' and 'RUN_ID'.")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="--format", doc=InputDocumentation(doc="Specify the output format of the plots.")), ToolInput(tag="in_names", input_type=Array(t=String(), optional=True), prefix="--names", doc=InputDocumentation(doc="Specify the names to be used for the datasets")), ToolInput(tag="in_colors", input_type=Array(t=String(), optional=True), prefix="--colors", doc=InputDocumentation(doc="Specify the colors to be used for the datasets")), ToolInput(tag="in_plot", input_type=String(optional=True), prefix="--plot", doc=InputDocumentation(doc="Which plot type to use: 'box', 'violin' (default), 'ridge' (joyplot) or 'false'\n(no plots)")), ToolInput(tag="in_title", input_type=String(optional=True), prefix="--title", doc=InputDocumentation(doc="Add a title to all plots, requires quoting if using spaces")), ToolInput(tag="in_dpi", input_type=String(optional=True), prefix="--dpi", doc=InputDocumentation(doc="Set the dpi for saving images")), ToolInput(tag="in_fast_a", input_type=Array(t=File(), optional=True), prefix="--fasta", doc=InputDocumentation(doc="Data is in (compressed) fasta format.")), ToolInput(tag="in_fast_q", input_type=Array(t=String(), optional=True), prefix="--fastq", doc=InputDocumentation(doc="Data is in (compressed) fastq format.")), ToolInput(tag="in_summary", input_type=Array(t=String(), optional=True), prefix="--summary", doc=InputDocumentation(doc="Data is in (compressed) summary files generated by albacore or guppy.")), ToolInput(tag="in_bam", input_type=Array(t=String(), optional=True), prefix="--bam", doc=InputDocumentation(doc="Data is in sorted bam files.")), ToolInput(tag="in_ub_am", input_type=Array(t=File(), optional=True), prefix="--ubam", doc=InputDocumentation(doc="Data is in one or more unmapped bam file(s).")), ToolInput(tag="in_cram", input_type=Array(t=File(), optional=True), prefix="--cram", doc=InputDocumentation(doc="Data is in one or more sorted cram file(s).")), ToolInput(tag="in_pickle", input_type=Array(t=File(), optional=True), prefix="--pickle", doc=InputDocumentation(doc="Data is in one or more pickle file(s) from using NanoComp/NanoPlot.")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Specify directory in which output has to be created."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Nanocomp_V0_1_0().translate("wdl", allow_empty_container=True)

