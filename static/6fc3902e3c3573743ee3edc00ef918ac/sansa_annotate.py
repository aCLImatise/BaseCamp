from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Sansa_Annotate_V0_1_0 = CommandToolBuilder(tool="sansa_annotate", base_command=["sansa", "annotate"], inputs=[ToolInput(tag="in_arg_output_annotation", input_type=File(optional=True), prefix="-a", doc=InputDocumentation(doc="[ --anno ] arg (='anno.bcf')       output annotation VCF/BCF file")), ToolInput(tag="in_arg_gzipped_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --output ] arg (='query.tsv.gz') gzipped output file for query SVs")), ToolInput(tag="in_arg_database_vcfbcf", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --db ] arg                       database VCF/BCF file")), ToolInput(tag="in_arg_max_breakpoint", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[ --bpoffset ] arg (=50)           max. breakpoint offset")), ToolInput(tag="in_arg_min_reciprocal", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --ratio ] arg (=0.800000012)     min. reciprocal overlap")), ToolInput(tag="in_s", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --strategy ] arg (=best)         matching strategy [best|all]")), ToolInput(tag="in_require_matching_types", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --notype ]                       do not require matching SV types")), ToolInput(tag="in_report_svs_match", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --nomatch ]                      report SVs without match in database\n(ANNOID=None)")), ToolInput(tag="in_arg_gtfgffbed_file", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --gtf ] arg                      gtf/gff3/bed file")), ToolInput(tag="in_arg_genename_gtfgff", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --id ] arg (=gene_name)          gtf/gff3 attribute")), ToolInput(tag="in_arg_gene_gtfgff", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="[ --feature ] arg (=gene)          gtf/gff3 feature")), ToolInput(tag="in_arg_max_distance", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[ --distance ] arg (=1000)         max. distance (0: overlapping features\nonly)")), ToolInput(tag="in_report_contained_genes", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[ --contained ]                    report contained genes (useful for CNVs\nbut potentially long list of genes)\n")), ToolInput(tag="in_input_dot_bcf", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_arg_output_annotation", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_annotation", type_hint=File()), doc=OutputDocumentation(doc="[ --anno ] arg (='anno.bcf')       output annotation VCF/BCF file")), ToolOutput(tag="out_arg_gzipped_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_gzipped_file", type_hint=File()), doc=OutputDocumentation(doc="[ --output ] arg (='query.tsv.gz') gzipped output file for query SVs"))], container="quay.io/biocontainers/sansa:0.0.8--hf925130_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sansa_Annotate_V0_1_0().translate("wdl")

