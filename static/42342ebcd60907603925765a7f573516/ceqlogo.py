from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean

Ceqlogo_V0_1_0 = CommandToolBuilder(tool="ceqlogo", base_command=["ceqlogo"], inputs=[ToolInput(tag="in_loads_motif_option", input_type=File(optional=True), prefix="-m", doc=InputDocumentation(doc="Loads a motif from the file specified by the\nprevious -i option. The motif ID or position\ncan be used.")), ToolInput(tag="in_number_samples_i", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc="Number of samples for previously loaded motif\n(-m or -i).")), ToolInput(tag="in_shift_m_i", input_type=String(optional=True), prefix="-s", doc=InputDocumentation(doc="Shift for previously loaded motif (-m or -i).")), ToolInput(tag="in_reverse_complement_motifm", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="Reverse complement previously loaded motif\n(-m or -i).")), ToolInput(tag="in_pseudocounts_loaded_motifs", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="Pseudocounts for loaded motifs; default: 0.")), ToolInput(tag="in_prefentially_lookup_motifs", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="Prefentially lookup motifs by position;\ndefault: prefer the ID.")), ToolInput(tag="in_output_file_path", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Output file path. Default is stdout.")), ToolInput(tag="in_format_output_eps", input_type=String(optional=True), prefix="-f", doc=InputDocumentation(doc="Format of output (EPS, PNG); default: EPS")), ToolInput(tag="in_height_output_logo", input_type=Int(optional=True), prefix="-h", doc=InputDocumentation(doc="Height of output logo in cm (real # > 0).")), ToolInput(tag="in_width_output_logo", input_type=Int(optional=True), prefix="-w", doc=InputDocumentation(doc="Width of output logo in cm (real # > 0).")), ToolInput(tag="in_label_for_title", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="Label for title.")), ToolInput(tag="in_descriptive_fine_print", input_type=String(optional=True), prefix="-d", doc=InputDocumentation(doc="Descriptive fine print.")), ToolInput(tag="in_label_for_xaxis", input_type=String(optional=True), prefix="-x", doc=InputDocumentation(doc="Label for x-axis.")), ToolInput(tag="in_label_yaxis_default", input_type=String(optional=True), prefix="-y", doc=InputDocumentation(doc="Label for y-axis; default: 'bits'.")), ToolInput(tag="in_number_bits_tic", input_type=Int(optional=True), prefix="-c", doc=InputDocumentation(doc="Number of bits between tic marks.")), ToolInput(tag="in_fraction_error_show", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="Fraction of error bar to show (real # > 0).")), ToolInput(tag="in_turn_small_correction", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="...................   Turn on small sample correction.")), ToolInput(tag="in_turn_bar_ends", input_type=Boolean(optional=True), prefix="-B", doc=InputDocumentation(doc="...................   Turn on bar ends.")), ToolInput(tag="in_turn_error_bars", input_type=Boolean(optional=True), prefix="-E", doc=InputDocumentation(doc="...................   Turn on error bars.")), ToolInput(tag="in_turn_outlining_characters", input_type=Boolean(optional=True), prefix="-O", doc=InputDocumentation(doc="...................   Turn on outlining of characters.")), ToolInput(tag="in_turn_boxing_characters", input_type=Boolean(optional=True), prefix="-X", doc=InputDocumentation(doc="...................   Turn on boxing of characters")), ToolInput(tag="in_turn_numbering_xaxis", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="...................   Turn off numbering of x-axis.")), ToolInput(tag="in__turn_yaxis", input_type=Boolean(optional=True), prefix="-Y", doc=InputDocumentation(doc="...................   Turn off y-axis"))], outputs=[ToolOutput(tag="out_output_file_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_path", type_hint=File()), doc=OutputDocumentation(doc="Output file path. Default is stdout."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ceqlogo_V0_1_0().translate("wdl", allow_empty_container=True)

