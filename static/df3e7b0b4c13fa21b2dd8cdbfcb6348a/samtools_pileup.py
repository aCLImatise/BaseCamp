from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, Float, String

Samtools_Pileup_V0_1_0 = CommandToolBuilder(tool="samtools_pileup", base_command=["samtools", "pileup"], inputs=[ToolInput(tag="in_simple_incomplete_pileup", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="simple (yet incomplete) pileup format")), ToolInput(tag="in_the_input_sam", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="the input is in SAM")), ToolInput(tag="in_disable_baq_computation", input_type=Boolean(optional=True), prefix="-B", doc=InputDocumentation(doc="disable BAQ computation")), ToolInput(tag="in_use_original_model", input_type=Boolean(optional=True), prefix="-A", doc=InputDocumentation(doc="use the original MAQ model for SNP calling (DEPRECATED)")), ToolInput(tag="in_output_best_call", input_type=Boolean(optional=True), prefix="-2", doc=InputDocumentation(doc="output the 2nd best call and quality")), ToolInput(tag="in_only_show_linesconsensus", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="only show lines/consensus with indels")), ToolInput(tag="in_min_base_quality", input_type=Int(optional=True), prefix="-Q", doc=InputDocumentation(doc="min base quality (possibly capped by BAQ) [13]")), ToolInput(tag="in_coefficient_adjusting_mapq", input_type=Int(optional=True), prefix="-C", doc=InputDocumentation(doc="coefficient for adjusting mapQ of poor mappings [0]")), ToolInput(tag="in_filtering_reads_bits", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="filtering reads with bits in INT [0x704]")), ToolInput(tag="in_cap_mapping_quality", input_type=Int(optional=True), prefix="-M", doc=InputDocumentation(doc="cap mapping quality at INT [60]")), ToolInput(tag="in_limit_maximum_depth", input_type=Int(optional=True), prefix="-d", doc=InputDocumentation(doc="limit maximum depth for indels [1024]")), ToolInput(tag="in_list_reference_sequences", input_type=File(optional=True), prefix="-t", doc=InputDocumentation(doc="list of reference sequences (force -S)")), ToolInput(tag="in_list_sites_is", input_type=File(optional=True), prefix="-l", doc=InputDocumentation(doc="list of sites at which pileup is output")), ToolInput(tag="in_reference_sequence_fasta", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="reference sequence in the FASTA format")), ToolInput(tag="in_compute_consensus_sequence", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="compute the consensus sequence")), ToolInput(tag="in_print_variants_only", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="print variants only (for -c)")), ToolInput(tag="in_output_glfv_deprecated", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="output in the GLFv3 format (DEPRECATED)")), ToolInput(tag="in_theta_maq_consensus", input_type=Float(optional=True), prefix="-T", doc=InputDocumentation(doc="theta in maq consensus calling model (for -c) [0.83]")), ToolInput(tag="in_number_haplotypes_sample", input_type=Int(optional=True), prefix="-N", doc=InputDocumentation(doc="number of haplotypes in the sample (for -c) [2]")), ToolInput(tag="in_prior_difference_two", input_type=Float(optional=True), prefix="-r", doc=InputDocumentation(doc="prior of a difference between two haplotypes (for -c) [0.001]")), ToolInput(tag="in_prior_indel_two", input_type=Float(optional=True), prefix="-G", doc=InputDocumentation(doc="prior of an indel between two haplotypes (for -c) [0.00015]")), ToolInput(tag="in_phred_prob_indel", input_type=Int(optional=True), prefix="-I", doc=InputDocumentation(doc="phred prob. of an indel in sequencing/prep. (for -c) [40]")), ToolInput(tag="in_in_dot_bam", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Samtools_Pileup_V0_1_0().translate("wdl", allow_empty_container=True)

