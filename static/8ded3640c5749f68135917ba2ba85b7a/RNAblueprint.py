from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Rnablueprint_V0_1_0 = CommandToolBuilder(tool="RNAblueprint", base_command=["RNAblueprint"], inputs=[ToolInput(tag="in__be_verbose", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --verbose ]             be verbose")), ToolInput(tag="in_be_verbose_debugging", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="[ --debug ]               be verbose for debugging")), ToolInput(tag="in_arg_input_file", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[ --in ] arg              input file which contains the structures,\nsequence constraints and the start sequence\n[string]\nstructures: secondary structures in dot-bracket\nnotation. one structure per input\nline\nsequence constraints: Permanent sequence\nconstraints in IUPAC\nnotation [ACGTUWSMKRYBDHVN\n] (optional)\nstart sequence:  A initial RNA sequence to start\nthe sampling from [ACGU]\n(optional)")), ToolInput(tag="in_arg_output_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="[ --out ] arg             output file for writing the sequences (default:\nstdout) [string]")), ToolInput(tag="in_arg_write_file", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="[ --graphml ] arg         write a GraphML file representing the dependency\ngraph to the given filename (optional) [string]")), ToolInput(tag="in_sample_stochastic_sampling", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[ --mode ] arg (=sample)  mode for sequence generation [string]:\nsample: stochastic sampling of all positions\n(default)\nsample-clocal: Only sample one connected\ncomponent at a time starting from\nan initial sequence\nsample-plocal: Sample only single paths starting\nfrom an initial sequence\nclocal-neighbors: Only find neighboring\nsequences to the initial start\nsequence by sampling one\nconnected component only\nplocal-neighbors: Only find neighboring\nsequences to the initial start\nsequence by sampling one path\nonly")), ToolInput(tag="in_s", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[ --seed ] arg            random number generator seed [unsigned long]")), ToolInput(tag="in_n", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --num ] arg (=10)       number of designs (default: 10) [unsigned int]"))], outputs=[ToolOutput(tag="out_arg_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_file", type_hint=File()), doc=OutputDocumentation(doc="[ --out ] arg             output file for writing the sequences (default:\nstdout) [string]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rnablueprint_V0_1_0().translate("wdl", allow_empty_container=True)

