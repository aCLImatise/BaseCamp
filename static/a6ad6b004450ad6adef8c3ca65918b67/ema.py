from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Ema_V0_1_0 = CommandToolBuilder(tool="ema", base_command=["ema"], inputs=[ToolInput(tag="in_specify_barcode_whitelist", input_type=File(optional=True), prefix="-w", doc=InputDocumentation(doc=": specify barcode whitelist [required]")), ToolInput(tag="in_specify_output_prefix", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc=": specify output prefix [required]")), ToolInput(tag="in_number_barcode_make", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc=": number of barcode buckets to make [500]")), ToolInput(tag="in_output_bxzformatted_fastqs", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc=": output BX:Z-formatted FASTQs [off]")), ToolInput(tag="in_set_number_threads", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc=": set number of threads [1]")), ToolInput(tag="in_first_preprocessed_sorted", input_type=Int(optional=True), prefix="-1", doc=InputDocumentation(doc=": first (preprocessed and sorted) FASTQ file [none]")), ToolInput(tag="in_second_preprocessed_sorted", input_type=Int(optional=True), prefix="-2", doc=InputDocumentation(doc=": second (preprocessed and sorted) FASTQ file [none]")), ToolInput(tag="in_specify_special_path", input_type=File(optional=True), prefix="-s", doc=InputDocumentation(doc=": specify special FASTQ path [none]")), ToolInput(tag="in_multiinput_mode_takes", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc=": multi-input mode; takes input files after flags and spawns a thread for each [off]")), ToolInput(tag="in__indexed_reference", input_type=File(optional=True), prefix="-r", doc=InputDocumentation(doc=": indexed reference [required]")), ToolInput(tag="in_full_read_group", input_type=String(optional=True), prefix="-R", doc=InputDocumentation(doc=": full read group string (e.g. '@RG\tID:foo\tSM:bar') [none]")), ToolInput(tag="in_apply_fragment_optimization", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc=": apply fragment read density optimization [off]")), ToolInput(tag="in_sequencing_platform_one", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc=": sequencing platform (one of '10x', 'tru', 'cpt') [10x]")), ToolInput(tag="in_index_follow_tag", input_type=Int(optional=True), prefix="-i", doc=InputDocumentation(doc=": index to follow 'BX' tag in SAM output [1]  -t <threads>: set number of threads [1]")), ToolInput(tag="in_count_vertical_line_preproc_vertical_line_align_vertical_line_help", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ema_V0_1_0().translate("wdl", allow_empty_container=True)

