from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Partition_V0_1_0 = CommandToolBuilder(tool="partition", base_command=["partition"], inputs=[ToolInput(tag="in_dna", input_type=Boolean(optional=True), prefix="--DNA", doc=InputDocumentation(doc="Specify that the sequence is DNA, and DNA parameters are to be used.\nDefault is to use RNA parameters.")), ToolInput(tag="in_disable_coax", input_type=Boolean(optional=True), prefix="--disablecoax", doc=InputDocumentation(doc="Specify that coaxial stacking recusions should not be used. This option\nuses a less realistic energy function in exchange for a faster\ncalculation.")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Suppress progress display and other unnecessary output.")), ToolInput(tag="in_alphabet", input_type=Boolean(optional=True), prefix="--alphabet", doc=InputDocumentation(doc="Specify the name of a folding alphabet and associated nearest neighbor\nparameters. The alphabet is the prefix for the thermodynamic parameter\nfiles, e.g. 'rna' for RNA parameters or 'dna' for DNA parameters or a\ncustom extended/modified alphabet. The thermodynamic parameters need to\nreside in the at the location indicated by environment variable DATAPATH.\nThe default is 'rna' (i.e. use RNA parameters). This option overrides the\n--DNA flag.")), ToolInput(tag="in_constraint", input_type=Boolean(optional=True), prefix="--constraint", doc=InputDocumentation(doc="Specify a constraints file to be applied.\nDefault is to have no constraints applied.")), ToolInput(tag="in_double_offset", input_type=Boolean(optional=True), prefix="--doubleOffset", doc=InputDocumentation(doc="Specify a double-stranded offset file, which adds energy bonuses to\nparticular double-stranded nucleotides.\nDefault is to have no double-stranded offset specified.")), ToolInput(tag="in_max_distance", input_type=Boolean(optional=True), prefix="--maxdistance", doc=InputDocumentation(doc="Specify a maximum pairing distance between nucleotides.\nDefault is no restriction on distance between pairs.")), ToolInput(tag="in_shape", input_type=Boolean(optional=True), prefix="--SHAPE", doc=InputDocumentation(doc="Specify a SHAPE constraints file to be applied. These constraints are\npseudoenergy constraints.\nDefault is to have no constraints applied.")), ToolInput(tag="in_shape_intercept", input_type=Boolean(optional=True), prefix="--SHAPEintercept", doc=InputDocumentation(doc="Specify an intercept used with SHAPE constraints.\nDefault is -0.6 kcal/mol.")), ToolInput(tag="in_shape_slope", input_type=Boolean(optional=True), prefix="--SHAPEslope", doc=InputDocumentation(doc="Specify a slope used with SHAPE constraints.\nDefault is 1.8 kcal/mol.")), ToolInput(tag="in_temperature", input_type=Boolean(optional=True), prefix="--temperature", doc=InputDocumentation(doc="Specify the temperature at which calculation takes place in Kelvin.\nDefault is 310.15 K, which is 37 degrees C.")), ToolInput(tag="in_experimental_pair_bonus", input_type=Boolean(optional=True), prefix="--experimentalPairBonus", doc=InputDocumentation(doc="Input text file with bonuses (in kcal) as a matrix. As with SHAPE, bonuses\nwill be applied twice to internal base pairs, once to edge base pairs, and\nnot at all to single stranded regions.\nDefault is no experimental pair bonus file specified.")), ToolInput(tag="in_xo", input_type=Boolean(optional=True), prefix="-xo", doc=InputDocumentation(doc="Specify an intercept (overall offset) to use with the 2D experimental pair\nbonus file.\nDefault is 0.0 (no change to input bonuses).")), ToolInput(tag="in_xs", input_type=Boolean(optional=True), prefix="-xs", doc=InputDocumentation(doc="Specify a number to multiply the experimental pair bonus matrix by.\nDefault is 1.0 (no change to input bonuses).\n")), ToolInput(tag="in_sequence_file", input_type=File(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_pfs_file", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Partition_V0_1_0().translate("wdl", allow_empty_container=True)

