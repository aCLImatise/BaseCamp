!Command
positional: []
named:
- !Flag
  description: For the 'addinfo' method, this would be any FASTA/Q file (or STDIN).
    For the 'splitpairs' method, this would be either the forward or reverse file
    from a paired-end sequencing run. For the 'makepairs' method, this would be the
    interleaved file of forward and reverse reads that has been trimmed.
  synonyms:
  - -i
  - --infile
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: The outfile for the 'addinfo' or 'joinpairs' methods (may be STDOUT
    instead of a file).
  synonyms:
  - -o
  - --outfile
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: The file of forward sequences from an Illumina paired-end sequencing
    run.
  synonyms:
  - -f
  - --forward
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: The file of reverse sequences from an Illumina paired-end sequencing
    run.
  synonyms:
  - -r
  - --reverse
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: The output file to place the paired forward reads.
  synonyms:
  - -fp
  - --forw_paired
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: The output file to place the paired reverse reads.
  synonyms:
  - -rp
  - --rev_paired
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: The output file to place the unpaired forward reads.
  synonyms:
  - -fs
  - --forw_unpaired
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: The output file to place the unpaired reverse reads.
  synonyms:
  - -rs
  - --rev_unpaired
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: The pair number to add to the file with the 'addinfo' method. Should
    be either '1' or '2' and other arguments with generate an exception.
  synonyms:
  - -p
  - --pairnum
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: For the 'addinfo' method, uppercase the sequence.
  synonyms:
  - -uc
  - --uppercase
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: For the 'makepairs' method, print (to STDOUT) statistics for paired/unpaired
    forward and reverse reads. This is useful for record keeping and debugging. The
    reason this is not the default is that people may want to run multiple instances
    of this command and redirect the output to the same file or to another program.
  synonyms:
  - -s
  - --stats
  args: !EmptyFlagArg {}
  optional: true
command:
- gaas_fastq_pairfq_lite.pl
parent:
subcommands: []
help_flag: !Flag
  description: Print a usage statement.
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: Get the program version and exit.
  synonyms:
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "Name:\n    pairfq_lite.pl - Sync paired-end sequences from separate FASTA/Q\
  \ files\n\nUsage:\n    ## Add pair information back to the reads\n\n    pairfq_lite.pl\
  \ addinfo -i s_1_1_trim.fq -o s_1_1_trim_info.fq -p 1\n\n    pairfq_lite.pl addinfo\
  \ -i s_1_2_trim.fq -o s_1_2_trim_info.fq -p 2\n\n    ## Sync paired-end reads and\
  \ write singleton reads to separate files\n\n    pairfq_lite.pl makepairs -f s_1_1_trim_info.fq\
  \ -r s_1_2_trim_info.fq -fp\n    s_1_1_trim_paired.fq -rp s_1_2_trim_paired.fq -fs\
  \ s_1_1_trim_unpaired.fq\n    -rs s_1_2_trim_unpaired.fq --stats\n\n    OR\n\n \
  \   pairfq_lite.pl makepairs -i s_interl_trimmed.fq -fp s_1_1_trim_paired.fq\n \
  \   -rp s_1_2_trim_paired.fq -fs s_1_1_trim_unpaired.fq -rs\n    s_1_2_trim_unpaired.fq\
  \ --stats ## Interleave the paired-end reads\n\n    pairfq_lite.pl joinpairs -f\
  \ s_1_1_trim_paired.fq -r s_1_2_trim_paired.fq\n    -o s_1_interl.fq\n\n    ## Split\
  \ the interleaved reads into separate forward and reverse files\n\n    pairfq_lite.pl\
  \ splitpairs -i s_1_interl.fq -f s_1_1_trim_p.fq -r\n    s_1_2_trim_p.fq\n\nDescription:\n\
  \    Re-pair paired-end sequences that may have been separated by quality\n    trimming.\
  \ This script also writes the unpaired forward and reverse\n    sequences to separate\
  \ files so that they may be used for assembly or\n    mapping. The input may be\
  \ FastA or FastQ format in either Illumina 1.3+\n    or Illumina 1.8 format. The\
  \ input files may be compressed with gzip or\n    bzip2. Optionally, the script\
  \ can interleave paired files, separate\n    interleaved files into separate forward\
  \ and reverse files, and fix\n    paired-end files which have lost the pair information.\n\
  \nDependencies:\n    There are no external dependencies with the 'pairfq_lite.pl'\
  \ script. See\n    below for information on which Perls have been tested.\n\nLicense:\n\
  \    The MIT License can be found at:\n    http://opensource.org/licenses/mit-license.php\n\
  \n    Copyright (C) 2013-2016 S. Evan Staton Permission is hereby granted,\n   \
  \ free of charge, to any person obtaining a copy of this software and\n    associated\
  \ documentation files (the \"Software\"), to deal in the Software\n    without restriction,\
  \ including without limitation the rights to use,\n    copy, modify, merge, publish,\
  \ distribute, sublicense, and/or sell copies\n    of the Software, and to permit\
  \ persons to whom the Software is furnished\n    to do so, subject to the following\
  \ conditions:\n\n    The above copyright notice and this permission notice shall\
  \ be included\n    in all copies or substantial portions of the Software.\n\n  \
  \  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n \
  \   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY,\
  \ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n    IN NO EVENT SHALL THE\
  \ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n    CLAIM, DAMAGES OR OTHER LIABILITY,\
  \ WHETHER IN AN ACTION OF CONTRACT,\n    TORT OR OTHERWISE, ARISING FROM, OUT OF\
  \ OR IN CONNECTION WITH THE\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\
  \nTested With:\n    *   Perl 5.6.2 (Ubuntu 12.04.3 LTS)\n\n    *   Perl 5.8.9 (Ubuntu\
  \ 12.04.3 LTS)\n\n    *   Perl 5.14.1 (Red Hat Enterprise Linux Server release 5.7\
  \ (Tikanga))\n\n    *   Perl 5.14.2 (Red Hat Enterprise Linux Desktop release 6.2\n\
  \        (Santiago); Fedora 17)\n\n    *   Perl 5.16.0 (Red Hat Enterprise Linux\
  \ Server release 5.9 (Tikanga))\n\n    *   Perl 5.18.0 (Red Hat Enterprise Linux\
  \ Server release 5.9 (Tikanga))\n\n    *   Perl 5.20.1 (Red Hat Enterprise Linux\
  \ Server release 5.9 (Tikanga))\n\nAuthor:\n    S. Evan Staton\n\nContact:\n   \
  \ statonse at gmail dot com\n\nRequired Arguments:\n    The method to perform. Must\
  \ be one of: 'addinfo', 'makepairs',\n    'joinpairs', or 'splitpairs'.\n      \
  \  addinfo    | Add the pair info back to the FASTA/Q header.\n        makepairs\
  \  | Pair the forward and reverse reads and write singletons for both forward and\
  \ reverse reads to separate files.\n        joinpairs  | Interleave the paired forward\
  \ and reverse files.\n        splitpairs | Split the interleaved file into separate\
  \ files for the forward and reverse reads.\n\nOptions:\n    -i, --infile\n     \
  \   For the 'addinfo' method, this would be any FASTA/Q file (or STDIN). For the\
  \ 'splitpairs' method,\n        this would be either the forward or reverse file\
  \ from a paired-end sequencing run. For the\n        'makepairs' method, this would\
  \ be the interleaved file of forward and reverse reads that\n        has been trimmed.\n\
  \n    -o, --outfile\n        The outfile for the 'addinfo' or 'joinpairs' methods\
  \ (may be STDOUT instead of a file).\n\n    -f, --forward\n        The file of forward\
  \ sequences from an Illumina paired-end sequencing run.\n\n    -r, --reverse\n \
  \       The file of reverse sequences from an Illumina paired-end sequencing run.\n\
  \n    -fp, --forw_paired\n        The output file to place the paired forward reads.\n\
  \n    -rp, --rev_paired\n        The output file to place the paired reverse reads.\n\
  \n    -fs, --forw_unpaired\n        The output file to place the unpaired forward\
  \ reads.\n\n    -rs, --rev_unpaired\n        The output file to place the unpaired\
  \ reverse reads.\n\n    -p, --pairnum\n        The pair number to add to the file\
  \ with the 'addinfo' method. Should be either '1' or '2' and other arguments\n \
  \       with generate an exception.\n\n    -uc, --uppercase\n       For the 'addinfo'\
  \ method, uppercase the sequence.\n\n    -s, --stats\n       For the 'makepairs'\
  \ method, print (to STDOUT) statistics for paired/unpaired forward and reverse reads.\
  \ This is useful for\n       record keeping and debugging. The reason this is not\
  \ the default is that people may want to run multiple instances of this\n      \
  \ command and redirect the output to the same file or to another program.\n\n  \
  \  --version\n       Get the program version and exit.\n\n    -h, --help\n     \
  \   Print a usage statement.\n\n"
generated_using:
- --help
