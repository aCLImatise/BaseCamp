from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, String, Boolean

Count_Pl_V0_1_0 = CommandToolBuilder(tool="count.pl", base_command=["count.pl"], inputs=[ToolInput(tag="in_n_gram", input_type=Int(optional=True), prefix="--ngram", doc=InputDocumentation(doc="Creates n-grams of N tokens each. N = 2 by")), ToolInput(tag="in_token", input_type=File(optional=True), prefix="--token", doc=InputDocumentation(doc="Uses regular expressions in FILE to create\ntokens. By default two regular expressions\nare provided (see README).")), ToolInput(tag="in_non_token", input_type=File(optional=True), prefix="--nontoken", doc=InputDocumentation(doc="Removes all characters sequences that match\nPerl regular expressions specified in FILE.")), ToolInput(tag="in_set_freq_combo", input_type=File(optional=True), prefix="--set_freq_combo", doc=InputDocumentation(doc="Uses the frequency combinations in FILE to\ndecide which combinations of tokens to\ncount in a given n-gram. By default, all\ncombinations are counted.")), ToolInput(tag="in_get_freq_combo", input_type=File(optional=True), prefix="--get_freq_combo", doc=InputDocumentation(doc="Prints out the frequency combinations used\nto FILE. If frequency combinations have been\nprovided through --set_freq_combo switch above\nthese are output; otherwise the default\ncombinations being used are output.")), ToolInput(tag="in_stop", input_type=File(optional=True), prefix="--stop", doc=InputDocumentation(doc="Removes n-grams containing at least one (in\nOR mode) or all stop words (in AND mode).\nStop words should be declared as Perl Regular\nexpressions in FILE.")), ToolInput(tag="in_frequency", input_type=String(optional=True), prefix="--frequency", doc=InputDocumentation(doc="Does not display n-grams that occur less\nthan N times.")), ToolInput(tag="in_u_frequency", input_type=Int(optional=True), prefix="--ufrequency", doc=InputDocumentation(doc="Does not display n-grams that occur more\nthan N times. Default value is 100,000,000")), ToolInput(tag="in_remove", input_type=String(optional=True), prefix="--remove", doc=InputDocumentation(doc="Ignores n-grams that occur less than N\ntimes. Ignored n-grams are not counted and\nso do not affect counts and frequencies.")), ToolInput(tag="in_u_remove", input_type=Int(optional=True), prefix="--uremove", doc=InputDocumentation(doc="Ignores n-grams that occur more than N\ntimes. Ignored n-grams are not counted and\nso do not affect counts and frequencies.\nDefault value is 100,000,000.")), ToolInput(tag="in_new_line", input_type=Boolean(optional=True), prefix="--newLine", doc=InputDocumentation(doc="Prevents n-grams from spanning across the\nnew-line character.")), ToolInput(tag="in_token_list", input_type=File(optional=True), prefix="--tokenlist", doc=InputDocumentation(doc="Prints out all n-grams to the output file.")), ToolInput(tag="in_histogram", input_type=File(optional=True), prefix="--histogram", doc=InputDocumentation(doc="Outputs histogram to FILE. Tabulates how\nmany times n-grams of a given frequency\nhave occurred.")), ToolInput(tag="in_recurse", input_type=Boolean(optional=True), prefix="--recurse", doc=InputDocumentation(doc="If SOURCE is a directory, uses all files\nin SOURCE as well as all subdirectories of\nSOURCE recursively as input.")), ToolInput(tag="in_extended", input_type=Boolean(optional=True), prefix="--extended", doc=InputDocumentation(doc="Outputs values of the above switches, if\ndefault values are not used.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Outputs to stderr information about\ncurrent program status.")), ToolInput(tag="in_default_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--window N         Sets window size to N. Defaults to n-gram"))], outputs=[ToolOutput(tag="out_get_freq_combo", output_type=File(optional=True), selector=InputSelector(input_to_select="in_get_freq_combo", type_hint=File()), doc=OutputDocumentation(doc="Prints out the frequency combinations used\nto FILE. If frequency combinations have been\nprovided through --set_freq_combo switch above\nthese are output; otherwise the default\ncombinations being used are output.")), ToolOutput(tag="out_token_list", output_type=File(optional=True), selector=InputSelector(input_to_select="in_token_list", type_hint=File()), doc=OutputDocumentation(doc="Prints out all n-grams to the output file."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Count_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

