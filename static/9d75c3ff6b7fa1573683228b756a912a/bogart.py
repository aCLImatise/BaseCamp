from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Float

Bogart_V0_1_0 = CommandToolBuilder(tool="bogart", base_command=["bogart"], inputs=[ToolInput(tag="in_mandatory_path_existing_seqstore", input_type=File(optional=True), prefix="-S", doc=InputDocumentation(doc="Mandatory path to an existing seqStore.")), ToolInput(tag="in_mandatory_path_existing_ovlstore", input_type=File(optional=True), prefix="-O", doc=InputDocumentation(doc="Mandatory path to an existing ovlStore.")), ToolInput(tag="in_mandatory_path_tigstore", input_type=File(optional=True), prefix="-T", doc=InputDocumentation(doc="Mandatory path to an output tigStore (can exist or not).")), ToolInput(tag="in_mandatory_prefix_output", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="Mandatory prefix for the output files.")), ToolInput(tag="in_threads", input_type=String(optional=True), prefix="-threads", doc=InputDocumentation(doc="Use at most T compute threads.")), ToolInput(tag="in_use_most_gigabytes", input_type=String(optional=True), prefix="-M", doc=InputDocumentation(doc="Use at most 'gb' gigabytes of memory.")), ToolInput(tag="in_save", input_type=Boolean(optional=True), prefix="-save", doc=InputDocumentation(doc="Save the overlap graph to disk, and continue (not implemented).")), ToolInput(tag="in_gs", input_type=Boolean(optional=True), prefix="-gs", doc=InputDocumentation(doc="Genome size in bases.")), ToolInput(tag="in_mr", input_type=String(optional=True), prefix="-mr", doc=InputDocumentation(doc="Force reads below 'len' bases to be singletons.")), ToolInput(tag="in_mo", input_type=String(optional=True), prefix="-mo", doc=InputDocumentation(doc="Ignore overlaps shorter than 'len' bases.")), ToolInput(tag="in_mi", input_type=String(optional=True), prefix="-mi", doc=InputDocumentation(doc="Create unitigs from contig intersections of at least 'len' bases.")), ToolInput(tag="in_mp", input_type=Int(optional=True), prefix="-mp", doc=InputDocumentation(doc="Create unitigs from contig intersections with at most 'num' placements.")), ToolInput(tag="in_no_filter", input_type=Boolean(optional=True), prefix="-nofilter", doc=InputDocumentation(doc="[coverageGap],[highError],[lopsided],[spur]\nDisable filtering of:\ncoverageGap - reads that have a suspicious lack of overlaps in the middle\nhighError   - overlaps that have error rates well outside the observed\nlopsided    - reads that have unusually asymmetric best overlaps\nspur        - reads that have no overlaps on one end\nThe value supplied to -nofilter must be one word, case, order and punctuation\ndo not matter.  The following examples behave the same:\n'-nofilter coverageGap,higherror'\n'-nofilter coveragegap-and-HIGHERROR'")), ToolInput(tag="in_eg", input_type=String(optional=True), prefix="-eg", doc=InputDocumentation(doc="Do not use overlaps more than F fraction error when when finding initial best edges.")), ToolInput(tag="in_em", input_type=String(optional=True), prefix="-eM", doc=InputDocumentation(doc="Do not load overlaps more then F fraction error (useful only for -save).")), ToolInput(tag="in_ca", input_type=File(optional=True), prefix="-ca", doc=InputDocumentation(doc="Split a contig if there is an alternate path from an overlap of at least L bases.\nDefault: 2100.")), ToolInput(tag="in_cp", input_type=Int(optional=True), prefix="-cp", doc=InputDocumentation(doc="Split a contig if there is an alternate path from an overlap at most P percent\ndifferent from the length of the best overlap.  Default: 200.")), ToolInput(tag="in_dg", input_type=Float(optional=True), prefix="-dg", doc=InputDocumentation(doc="Use overlaps upto D standard deviations from the mean when building the best\noverlap graph.  Default 6.0.")), ToolInput(tag="in_db", input_type=Float(optional=True), prefix="-db", doc=InputDocumentation(doc="Like -dg, but for merging bubbles into primary contigs.  Default 6.0.")), ToolInput(tag="in_dr", input_type=Float(optional=True), prefix="-dr", doc=InputDocumentation(doc="Like -dg, but for breaking repeats.  Default 3.0.")), ToolInput(tag="in_cov_gap_olap", input_type=String(optional=True), prefix="-covgapolap", doc=InputDocumentation(doc="Require overlaps to overlap by at least n bases.")), ToolInput(tag="in_lopsided", input_type=String(optional=True), prefix="-lopsided", doc=InputDocumentation(doc="n      Set how lopsided reads are detected and/or treated.\nm = off        - don't detect at all (omit n parameter)\nm = noseed n   - detect, n% difference, allow edges to but don't seed overlaps with them\nm = nobest n   - detect, n% difference, exclude from bog graph completely")), ToolInput(tag="in_min_olap_percent", input_type=Int(optional=True), prefix="-minolappercent", doc=InputDocumentation(doc="Set a minimum overlap length, per overlap, as f*min(readAlen, readBlen)")), ToolInput(tag="in_enable_loggingdebugging_specific", input_type=String(optional=True), prefix="-D", doc=InputDocumentation(doc="enable logging/debugging for a specific component.")), ToolInput(tag="in_disable_loggingdebugging_specific", input_type=String(optional=True), prefix="-d", doc=InputDocumentation(doc="disable logging/debugging for a specific component.")), ToolInput(tag="in_overlap_scoring", input_type=String(), position=0, doc=InputDocumentation(doc="bestOverlaps")), ToolInput(tag="in_error_profiles", input_type=String(), position=1, doc=InputDocumentation(doc="optimizePositions")), ToolInput(tag="in_chunk_graph", input_type=String(), position=2, doc=InputDocumentation(doc="buildUnitig")), ToolInput(tag="in_place_unplaced", input_type=String(), position=3, doc=InputDocumentation(doc="orphans")), ToolInput(tag="in_split_discontinuous", input_type=String(), position=4, doc=InputDocumentation(doc="intermediateTigs")), ToolInput(tag="in_setparent_and_hang", input_type=String(), position=5, doc=InputDocumentation(doc="stderr"))], outputs=[ToolOutput(tag="out_mandatory_path_tigstore", output_type=File(optional=True), selector=InputSelector(input_to_select="in_mandatory_path_tigstore", type_hint=File()), doc=OutputDocumentation(doc="Mandatory path to an output tigStore (can exist or not)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bogart_V0_1_0().translate("wdl", allow_empty_container=True)

