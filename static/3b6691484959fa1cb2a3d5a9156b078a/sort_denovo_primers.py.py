from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Directory, Float, File, String, Int

Sort_Denovo_Primers_Py_V0_1_0 = CommandToolBuilder(tool="sort_denovo_primers.py", base_command=["sort_denovo_primers.py"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Print information during execution -- useful for\ndebugging [default: False]")), ToolInput(tag="in_output_dir", input_type=Directory(optional=True), prefix="--output_dir", doc=InputDocumentation(doc="Output directory")), ToolInput(tag="in_variable_pos_freq", input_type=Float(optional=True), prefix="--variable_pos_freq", doc=InputDocumentation(doc="Percentage at which a variable base is considered for\ndegenerate primer design. [default: 0.2]")), ToolInput(tag="in_known_primers_file_path", input_type=File(optional=True), prefix="--known_primers_filepath", doc=InputDocumentation(doc="Optional primers filepath to compare with the de novo\nprimers.  Comparisons will be used to separate the de\nnovo primers into unique, partially overlapping, or\noverlapping primers with the known primers supplied.\n[default: none]")), ToolInput(tag="in_sort_method", input_type=String(optional=True), prefix="--sort_method", doc=InputDocumentation(doc="Sorting method for reverse and forward primers output\nfiles, pass either S, O, or P for [S]ensitivity,\n[O]verall shannon entropy, s[P]ecificity.[default: S]")), ToolInput(tag="in_primer_name", input_type=File(optional=True), prefix="--primer_name", doc=InputDocumentation(doc="Root name for primers in the formatted_primers.txt\noutput file. [default: ]")), ToolInput(tag="in_match_len", input_type=Int(optional=True), prefix="--match_len", doc=InputDocumentation(doc="Number of base pairs in overlapping sequences to be\nconsidered as a significant overlap. [default: 10]")), ToolInput(tag="in_truncate_len", input_type=Int(optional=True), prefix="--truncate_len", doc=InputDocumentation(doc="Number of bases to truncate for the 3' end of the\nprimer comparison to the universal primer set.\n[default: 10]")), ToolInput(tag="in_amplicon_len", input_type=Int(optional=True), prefix="--amplicon_len", doc=InputDocumentation(doc="Generate primer pair output file that will yield\namplicons with an estimated size within the given\nrange.  Requires that the standard alignment option\n(-a) was used with generate_primers_denovo.py.  Pass\nthe min and max amplicon size separated by a colon,\nfor example -a 250:500 [default: False]")), ToolInput(tag="in_hits_file", input_type=File(optional=True), prefix="--hits_file", doc=InputDocumentation(doc="Conserved Xmers file, output file from\ngenerate_primers_denovo.py module. [REQUIRED]\n"))], outputs=[ToolOutput(tag="out_output_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory")), ToolOutput(tag="out_primer_name", output_type=File(optional=True), selector=InputSelector(input_to_select="in_primer_name", type_hint=File()), doc=OutputDocumentation(doc="Root name for primers in the formatted_primers.txt\noutput file. [default: ]")), ToolOutput(tag="out_hits_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_hits_file", type_hint=File()), doc=OutputDocumentation(doc="Conserved Xmers file, output file from\ngenerate_primers_denovo.py module. [REQUIRED]\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sort_Denovo_Primers_Py_V0_1_0().translate("wdl", allow_empty_container=True)

