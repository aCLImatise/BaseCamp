from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean

Src_Counter_V0_1_0 = CommandToolBuilder(tool="SRC_counter", base_command=["SRC_counter"], inputs=[ToolInput(tag="in_nb_cores", input_type=Boolean(optional=True), prefix="-nb-cores", doc=InputDocumentation(doc="(1 arg) :    number of cores  [default '0']")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-verbose", doc=InputDocumentation(doc="(1 arg) :    verbosity level  [default '1']")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="(0 arg) :    version")), ToolInput(tag="in_graph", input_type=Boolean(optional=True), prefix="-graph", doc=InputDocumentation(doc="(1 arg) :    graph input")), ToolInput(tag="in_bank", input_type=Boolean(optional=True), prefix="-bank", doc=InputDocumentation(doc="(1 arg) :    bank input")), ToolInput(tag="in_query", input_type=Boolean(optional=True), prefix="-query", doc=InputDocumentation(doc="(1 arg) :    query input")), ToolInput(tag="in_out", input_type=Boolean(optional=True), prefix="-out", doc=InputDocumentation(doc="(1 arg) :    output_file")), ToolInput(tag="in_keep_low_complexity", input_type=Boolean(optional=True), prefix="-keep_low_complexity", doc=InputDocumentation(doc="(0 arg) :    Conserve low complexity sequences during indexing and querying")), ToolInput(tag="in_gamma", input_type=Boolean(optional=True), prefix="-gamma", doc=InputDocumentation(doc="(1 arg) :    gamma value  [default '2']")), ToolInput(tag="in_fingerprint_size", input_type=Boolean(optional=True), prefix="-fingerprint_size", doc=InputDocumentation(doc="(1 arg) :    fingerprint size  [default '8']")), ToolInput(tag="in_core", input_type=Boolean(optional=True), prefix="-core", doc=InputDocumentation(doc="(1 arg) :    Number of thread  [default '1']")), ToolInput(tag="in_coverage_threshold", input_type=Boolean(optional=True), prefix="-coverage_threshold", doc=InputDocumentation(doc="(1 arg) :    Minimal percentage of shared kmer span for considering a query read as similar to a read set.  The kmer span is the number of bases from the read query covered by a kmer shared with the target bank read set. If a read of length 80 has a kmer-span of 60 with the bank, then the percentage of shared kmer span is 75%. If a least a windows (of size 'windows_size' contains at least kmer_threshold percent of positionf covered by shared kmers, the read is output in the boolean vector).  [default '50']")), ToolInput(tag="in_windows_size", input_type=Boolean(optional=True), prefix="-windows_size", doc=InputDocumentation(doc="(1 arg) :    size of the window. If the windows size is zero (default value), then the full read is considered  [default '0']"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Src_Counter_V0_1_0().translate("wdl", allow_empty_container=True)

