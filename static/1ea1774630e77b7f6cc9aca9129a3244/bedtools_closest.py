from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Bedtools_Closest_V0_1_0 = CommandToolBuilder(tool="bedtools_closest", base_command=["bedtools", "closest"], inputs=[ToolInput(tag="in_addition_closest_feature", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="In addition to the closest feature in B,\nreport its distance to A as an extra column.\n- The reported distance for overlapping features will be 0.")), ToolInput(tag="in_d_report_feature", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="Like -d, report the closest feature in B, and its distance to A\nas an extra column. Unlike -d, use negative distances to report\nupstream features.\nThe options for defining which orientation is 'upstream' are:\n- 'ref'   Report distance with respect to the reference genome.\nB features with a lower (start, stop) are upstream\n- 'a'     Report distance with respect to A.\nWhen A is on the - strand, 'upstream' means B has a\nhigher (start,stop).\n- 'b'     Report distance with respect to B.\nWhen B is on the - strand, 'upstream' means A has a\nhigher (start,stop).")), ToolInput(tag="in_io", input_type=Boolean(optional=True), prefix="-io", doc=InputDocumentation(doc="Ignore features in B that overlap A.  That is, we want close,\nyet not touching features only.")), ToolInput(tag="in_iu", input_type=Boolean(optional=True), prefix="-iu", doc=InputDocumentation(doc="Ignore features in B that are upstream of features in A.\nThis option requires -D and follows its orientation\nrules for determining what is 'upstream'.")), ToolInput(tag="in_id", input_type=Boolean(optional=True), prefix="-id", doc=InputDocumentation(doc="Ignore features in B that are downstream of features in A.\nThis option requires -D and follows its orientation\nrules for determining what is 'downstream'.")), ToolInput(tag="in_fu", input_type=Boolean(optional=True), prefix="-fu", doc=InputDocumentation(doc="Choose first from features in B that are upstream of features in A.\nThis option requires -D and follows its orientation\nrules for determining what is 'upstream'.")), ToolInput(tag="in_fd", input_type=Boolean(optional=True), prefix="-fd", doc=InputDocumentation(doc="Choose first from features in B that are downstream of features in A.\nThis option requires -D and follows its orientation\nrules for determining what is 'downstream'.")), ToolInput(tag="in_how_ties_closest", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="How ties for closest feature are handled.  This occurs when two\nfeatures in B have exactly the same 'closeness' with A.\nBy default, all such features in B are reported.\nHere are all the options:\n- 'all'    Report all ties (default).\n- 'first'  Report the first tie that occurred in the B file.\n- 'last'   Report the last tie that occurred in the B file.")), ToolInput(tag="in_mdb", input_type=Boolean(optional=True), prefix="-mdb", doc=InputDocumentation(doc="How multiple databases are resolved.\n- 'each'    Report closest records for each database (default).\n- 'all'  Report closest records among all databases.")), ToolInput(tag="in_report_closest_hits", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="Report the k closest hits. Default is 1. If tieMode = 'all',\n- all ties will still be reported.")), ToolInput(tag="in_require_query_have", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="Require that the query and the closest hit have different names.\nFor BED, the 4th column is compared.")), ToolInput(tag="in_require_same_strandedness", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Require same strandedness.  That is, only report hits in B\nthat overlap A on the _same_ strand.\n- By default, overlaps are reported without respect to strand.")), ToolInput(tag="in_require_different_strandedness", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="Require different strandedness.  That is, only report hits in B\nthat overlap A on the _opposite_ strand.\n- By default, overlaps are reported without respect to strand.")), ToolInput(tag="in_minimum_overlap_a", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Minimum overlap required as a fraction of A.\n- Default is 1E-9 (i.e., 1bp).\n- FLOAT (e.g. 0.50)")), ToolInput(tag="in_minimum_overlap_b", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="Minimum overlap required as a fraction of B.\n- Default is 1E-9 (i.e., 1bp).\n- FLOAT (e.g. 0.50)")), ToolInput(tag="in_require_overlap_be", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="Require that the fraction overlap be reciprocal for A AND B.\n- In other words, if -f is 0.90 and -r is used, this requires\nthat B overlap 90% of A and A _also_ overlaps 90% of B.")), ToolInput(tag="in_require_fraction_be", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="Require that the minimum fraction be satisfied for A OR B.\n- In other words, if -e is used with -f 0.90 and -F 0.10 this requires\nthat either 90% of A is covered OR 10% of  B is covered.\nWithout -e, both fractions would have to be satisfied.")), ToolInput(tag="in_split", input_type=Boolean(optional=True), prefix="-split", doc=InputDocumentation(doc="Treat 'split' BAM or BED12 entries as distinct BED intervals.")), ToolInput(tag="in_provide_genome_file", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="Provide a genome file to enforce consistent chromosome sort order\nacross input files. Only applies when used with -sorted option.")), ToolInput(tag="in_no_name_check", input_type=Boolean(optional=True), prefix="-nonamecheck", doc=InputDocumentation(doc="For sorted data, don't throw an error if the file has different naming conventions\nfor the same chromosome. ex. 'chr1' vs 'chr01'.")), ToolInput(tag="in_names", input_type=Boolean(optional=True), prefix="-names", doc=InputDocumentation(doc="When using multiple databases, provide an alias for each that\nwill appear instead of a fileId when also printing the DB record.")), ToolInput(tag="in_filenames", input_type=Boolean(optional=True), prefix="-filenames", doc=InputDocumentation(doc="When using multiple databases, show each complete filename\ninstead of a fileId when also printing the DB record.")), ToolInput(tag="in_sort_out", input_type=Boolean(optional=True), prefix="-sortout", doc=InputDocumentation(doc="When using multiple databases, sort the output DB hits\nfor each record.")), ToolInput(tag="in_bed", input_type=Boolean(optional=True), prefix="-bed", doc=InputDocumentation(doc="If using BAM input, write output as BED.")), ToolInput(tag="in_header", input_type=File(optional=True), prefix="-header", doc=InputDocumentation(doc="the header from the A file prior to results.")), ToolInput(tag="in_no_buf", input_type=Boolean(optional=True), prefix="-nobuf", doc=InputDocumentation(doc="Disable buffered output. Using this option will cause each line\nof output to be printed as it is generated, rather than saved\nin a buffer. This will make printing large output files\nnoticeably slower, but can be useful in conjunction with\nother software tools and scripts that need to process one\nline of bedtools output at a time.")), ToolInput(tag="in_i_obuf", input_type=Boolean(optional=True), prefix="-iobuf", doc=InputDocumentation(doc="Specify amount of memory to use for input buffer.\nTakes an integer argument. Optional suffixes K/M/G supported.\nNote: currently has no effect with compressed files.")), ToolInput(tag="in_b", input_type=String(optional=True), prefix="-b", doc=InputDocumentation(doc="")), ToolInput(tag="in_a", input_type=String(optional=True), prefix="-a", doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bedtools_Closest_V0_1_0().translate("wdl", allow_empty_container=True)

