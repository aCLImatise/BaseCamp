!Command
command:
- cmfinder04.pl
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -c
  description: The maximum number of candidates in each sequence. Default 40. No bigger
    than 100.
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -m
  description: The minimum length of candidates. Default 30
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -M
  description: The maximum length of candidates. Default 100
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -f
  description: The fraction of the sequences expected to contain the motif. Default
    0.80
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -s1
  description: The max number of output single stem-loop motifs
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -s2
  description: The max number of output double stem-loop motifs
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -minspan1
  description: minimum span of a candidate sub-sequence in the heuristics to come
    up with an initial alignment for single-hairpin (h1) motifs
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -maxspan1
  description: like -minspan1, but maximum
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -minspan2
  description: like -minspan1, but for double-hairpin (h2) motifs
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -maxspan2
  description: like -minspan2, but maximal
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -combine
  description: Combine the output motifs. Default False
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -motifList
  description: Produce a list of motifs generated, one motif per line.
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -o
  description: Minimum overlap for combining motifs
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -n
  description: Minimum number of sequences (weighted) for combining motifs
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -emSeq
  description: Use the sequences in this fasta file for the expectation maximization
    step (i.e., the C executable cmfinder), but not for the earlier steps related
    to finding candidate motifs.  The reason for this distinction is that it is somewhat
    easier to add weighting to the cmfinder program, than the various canda, candf,
    cands and align programs.
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -likeold
  description: Behave as much as possible like the old CMfinder, e.g., passing --enone,
    --p56 and --degen-rand to cmfinder_inf11.  It's not possible to produce identical
    results to CMfinder 0.3, but these flags make it more similar.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -fragmentary
  description: Pass --fragmentary for cmfinder
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -amaa
  description: Pass --amaa to cmfinder (align max align accuracy)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -useOldCmfinder
  description: Run the old cmfinder executable, mainly to test whether we get different
    results because of this perl script, or the cmfinder_inf11 executable.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -skipClustalw
  description: Do not run clustalw, like older installations lacking this program.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -justGetCmfinderCommand
  description: Print the command to run for the cmfinder executable, with appropriate
    partial flags.  This can be used to realign an existing .sto file, for example.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -copyCmfinderRunsFromLog
  description: For debugging.  Reads a log file that contains cmfinder commands, and
    re-runs them with new CMfinder.
  args: !SimpleFlagArg
    name: log-file
- !Flag
  optional: true
  synonyms:
  - -commaSepEmFlags
  description: "<flags>\nList of flags and arguments to pass to the EM-step cmfinder\
    \ exe.  There's an 'x' at the beginning of the flags, so that perl doesn't interpret\
    \ the flags as flags for it.  It's comma-separated where on the command line it\
    \ would be space separated.  I think commas are safe, and mean that I don't have\
    \ to worry about quoting stuff.  e.g., -commaSepEmFlags x--fragmentary,--filter-non-frag,--filter-non-frag-pad,10\
    \ would pass this to the cmfinder program: \"--fragmentary --filter-non-frag --filter-non-frag-pad\
    \ 10\", i.e., just replace commas with spaces."
  args: !SimpleFlagArg
    name: x
- !Flag
  optional: true
  synonyms:
  - -commaSepSummarizeFlags
  description: "<flags>\nFlags to pass to the --summarize command.  Same syntax as\
    \ for --commaSepEmFlags"
  args: !SimpleFlagArg
    name: x
- !Flag
  optional: true
  synonyms:
  - -commaSepCandfFlags
  description: "<flags>\nFlags to pass to the candf command.  Same syntax as for --commaSepEmFlags"
  args: !SimpleFlagArg
    name: x
- !Flag
  optional: true
  synonyms:
  - -minCandScoreInFinal
  description: "Pass --min-cand-score-in-final <number> to cmfinder.  WARNING: there's\
    \ a difference between using this flag (where even intermediate motifs will avoid\
    \ these hits) and taking the low-scoring instances out of the final alignments\
    \ (which might be combinations of motifs in which the sequence would have been\
    \ lower-scoring)."
  args: !SimpleFlagArg
    name: number
- !Flag
  optional: true
  synonyms:
  - -filterNonFrag
  description: Pass --filter-non-frag to cmfinder
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -columnOnlyBasePairProbs
  description: Pass --column-only-base-pair-probs to cmfinder
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -saveTimer
  description: create tab-delimited <file> containing timing stats on various sub-processes
    of this script.  the first tab-delimited field is the description of the sub-process,
    the second field is the total CPU time (user+sys) and the third field is the wall-clock
    time.  Sub-processes can occur in multiple lines if they are run multiple timers,
    so the caller should add them.  Due to my laziness, the time of the clustalw program
    (if used) is not counted.
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -cpu
  description: use <num> CPUs for functionality that can use multi-CPUs (currently
    only the internal cmsearch commands in cmfinder04)
  args: !SimpleFlagArg
    name: num
- !Flag
  optional: true
  synonyms:
  - -allCpus
  description: equivalent to -cpu X , where X is the number of available processors.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -candsParallel
  description: run the two cands jobs in parallel, even if -cpu 1
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -outFileSuffix
  description: add <string> to the output file names.  this is useful if you want
    to run the script in multiple ways in the same directory.
  args: !SimpleFlagArg
    name: string
- !Flag
  optional: true
  synonyms:
  - -version
  description: "Show package version\n"
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  description: Show this list
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "Unknown option: help\nInvalid options\nbin_path=/usr/local/bin\nCMFINDER\
  \ [options] SEQ\nOptions:\n    -c <number>      \n     The maximum number of candidates\
  \ in each sequence. Default 40. No bigger than 100.\n    -m <number>      \n   \
  \  The minimum length of candidates. Default 30\n    -M <number>      \n     The\
  \ maximum length of candidates. Default 100\n    -f <number>      \n     The fraction\
  \ of the sequences expected to contain the motif. Default 0.80\n    -s1 <number>\
  \     \n     The max number of output single stem-loop motifs\n    -s2 <number>\
  \    \n     The max number of output double stem-loop motifs    \n    -minspan1\
  \ <number>\n     minimum span of a candidate sub-sequence in the heuristics to come\
  \ up with an initial alignment for single-hairpin (h1) motifs\n    -maxspan1 <number>\n\
  \     like -minspan1, but maximum\n    -minspan2 <number>\n     like -minspan1,\
  \ but for double-hairpin (h2) motifs\n    -maxspan2 <number>\n     like -minspan2,\
  \ but maximal\n    -combine         \n     Combine the output motifs. Default False\n\
  \    -motifList <file> \n     Produce a list of motifs generated, one motif per\
  \ line.\n    -o <number>\n     Minimum overlap for combining motifs\n    -n <number>\
  \      \n     Minimum number of sequences (weighted) for combining motifs\n    -emSeq\
  \ <file>\n     Use the sequences in this fasta file for the expectation maximization\
  \ step (i.e., the C executable cmfinder), but not for the earlier steps related\
  \ to finding candidate motifs.  The reason for this distinction is that it is somewhat\
  \ easier to add weighting to the cmfinder program, than the various canda, candf,\
  \ cands and align programs.\n    -likeold         \n     Behave as much as possible\
  \ like the old CMfinder, e.g., passing --enone, --p56 and --degen-rand to cmfinder_inf11.\
  \  It's not possible to produce identical results to CMfinder 0.3, but these flags\
  \ make it more similar.\n    -fragmentary\n     Pass --fragmentary for cmfinder\n\
  \    -amaa            \n     Pass --amaa to cmfinder (align max align accuracy)\n\
  \    -useOldCmfinder  \n     Run the old cmfinder executable, mainly to test whether\
  \ we get different results because of this perl script, or the cmfinder_inf11 executable.\n\
  \    -skipClustalw    \n     Do not run clustalw, like older installations lacking\
  \ this program.\n    -justGetCmfinderCommand    \n     Print the command to run\
  \ for the cmfinder executable, with appropriate partial flags.  This can be used\
  \ to realign an existing .sto file, for example.\n    -copyCmfinderRunsFromLog <log-file>\
  \ \n     For debugging.  Reads a log file that contains cmfinder commands, and re-runs\
  \ them with new CMfinder.\n    -commaSepEmFlags x<flags>\n     List of flags and\
  \ arguments to pass to the EM-step cmfinder exe.  There's an 'x' at the beginning\
  \ of the flags, so that perl doesn't interpret the flags as flags for it.  It's\
  \ comma-separated where on the command line it would be space separated.  I think\
  \ commas are safe, and mean that I don't have to worry about quoting stuff.  e.g.,\
  \ -commaSepEmFlags x--fragmentary,--filter-non-frag,--filter-non-frag-pad,10 would\
  \ pass this to the cmfinder program: \"--fragmentary --filter-non-frag --filter-non-frag-pad\
  \ 10\", i.e., just replace commas with spaces.\n    -commaSepSummarizeFlags x<flags>\n\
  \     Flags to pass to the --summarize command.  Same syntax as for --commaSepEmFlags\n\
  \    -commaSepCandfFlags x<flags>\n     Flags to pass to the candf command.  Same\
  \ syntax as for --commaSepEmFlags\n    -minCandScoreInFinal <number>    \n     Pass\
  \ --min-cand-score-in-final <number> to cmfinder.  WARNING: there's a difference\
  \ between using this flag (where even intermediate motifs will avoid these hits)\
  \ and taking the low-scoring instances out of the final alignments (which might\
  \ be combinations of motifs in which the sequence would have been lower-scoring).\n\
  \    -filterNonFrag\n     Pass --filter-non-frag to cmfinder\n    -columnOnlyBasePairProbs\n\
  \     Pass --column-only-base-pair-probs to cmfinder\n    -saveTimer <file>\n  \
  \   create tab-delimited <file> containing timing stats on various sub-processes\
  \ of this script.  the first tab-delimited field is the description of the sub-process,\
  \ the second field is the total CPU time (user+sys) and the third field is the wall-clock\
  \ time.  Sub-processes can occur in multiple lines if they are run multiple timers,\
  \ so the caller should add them.  Due to my laziness, the time of the clustalw program\
  \ (if used) is not counted.\n    -cpu <num>\n     use <num> CPUs for functionality\
  \ that can use multi-CPUs (currently only the internal cmsearch commands in cmfinder04)\n\
  \    -allCpus\n     equivalent to -cpu X , where X is the number of available processors.\n\
  \    -candsParallel\n     run the two cands jobs in parallel, even if -cpu 1\n \
  \   -outFileSuffix <string>\n     add <string> to the output file names.  this is\
  \ useful if you want to run the script in multiple ways in the same directory.\n\
  \    -h               \n     Show this list\n    -version\n     Show package version\n"
generated_using:
- --help
docker_image:
