from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Chira_Map_Py_V0_1_0 = CommandToolBuilder(tool="chira_map.py", base_command=["chira_map.py"], inputs=[ToolInput(tag="in_aligner", input_type=Boolean(optional=True), prefix="--aligner", doc=InputDocumentation(doc="Alignment program to use, bwa or clan (default: bwa)")), ToolInput(tag="in_query_fast_a", input_type=Boolean(optional=True), prefix="--query_fasta", doc=InputDocumentation(doc="Path to query fasta file (default: None)")), ToolInput(tag="in_outdir", input_type=File(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory path for the analysis (default: None)")), ToolInput(tag="in_index_one", input_type=Boolean(optional=True), prefix="--index1", doc=InputDocumentation(doc="first prioroty index file (default: None)")), ToolInput(tag="in_index_two", input_type=Boolean(optional=True), prefix="--index2", doc=InputDocumentation(doc="second priority index file (default: None)")), ToolInput(tag="in_ref_fast_a_one", input_type=Boolean(optional=True), prefix="--ref_fasta1", doc=InputDocumentation(doc="First prioroty fasta file (default: None)")), ToolInput(tag="in_ref_fast_a_two", input_type=Boolean(optional=True), prefix="--ref_fasta2", doc=InputDocumentation(doc="second priority fasta file (default: None)")), ToolInput(tag="in_build", input_type=Boolean(optional=True), prefix="--build", doc=InputDocumentation(doc="Build indices from reference fasta files (default:\nFalse)")), ToolInput(tag="in_processes", input_type=Boolean(optional=True), prefix="--processes", doc=InputDocumentation(doc="Number of processes to use (default: 1)")), ToolInput(tag="in_stranded", input_type=Boolean(optional=True), prefix="--stranded", doc=InputDocumentation(doc="Strand-specificity of input samples. fw = map to\ntranscript strand; rc = map to reverse compliment of\ntranscript strand; both = try to map on both strnads\n(default: fw)")), ToolInput(tag="in_seed_length_one", input_type=Boolean(optional=True), prefix="--seed_length1", doc=InputDocumentation(doc="Seed length for 1st mapping iteration. bwa-mem\nparameter '-k' (default: 12)")), ToolInput(tag="in_seed_length_two", input_type=Boolean(optional=True), prefix="--seed_length2", doc=InputDocumentation(doc="Seed length for 2nd mapping iteration. bwa-mem\nparameter '-k' (default: 16)")), ToolInput(tag="in_align_score_one", input_type=Boolean(optional=True), prefix="--align_score1", doc=InputDocumentation(doc="Minimum alignment score in 1st mapping iteration. bwa-\nmem parameter '-T' and clan_search parameter '-l'\n(default: 18)")), ToolInput(tag="in_align_score_two", input_type=Boolean(optional=True), prefix="--align_score2", doc=InputDocumentation(doc="Minimum alignment score in 2nd mapping iteration. It\nmust be smaller than --align_score1 parameter. bwa-mem\nparameter '-T' and clan_search parameter '-l'\n(default: 16)")), ToolInput(tag="in_match_one", input_type=Boolean(optional=True), prefix="--match1", doc=InputDocumentation(doc="Matching score for 1st mapping iteration. (default: 1)")), ToolInput(tag="in_mismatch_one", input_type=Boolean(optional=True), prefix="--mismatch1", doc=InputDocumentation(doc="Mismatch penalty for 1st mapping iteration. (default:\n4)")), ToolInput(tag="in_match_two", input_type=Boolean(optional=True), prefix="--match2", doc=InputDocumentation(doc="Matching score for 2nd mapping iteration. (default: 1)")), ToolInput(tag="in_mismatch_two", input_type=Boolean(optional=True), prefix="--mismatch2", doc=InputDocumentation(doc="Mismatch penalty for 2nd mapping iteration. (default:\n6)")), ToolInput(tag="in_gap_open_one", input_type=Boolean(optional=True), prefix="--gapopen1", doc=InputDocumentation(doc="Gap opening penalty for 1st mapping iteration.\n(default: 6)")), ToolInput(tag="in_gap_ext_one", input_type=Boolean(optional=True), prefix="--gapext1", doc=InputDocumentation(doc="Gap extension penalty for 1st mapping iteration.\n(default: 1)")), ToolInput(tag="in_gap_open_two", input_type=Boolean(optional=True), prefix="--gapopen2", doc=InputDocumentation(doc="Gap opening penalty for 2nd mapping iteration.\n(default: 100)")), ToolInput(tag="in_gap_ext_two", input_type=Boolean(optional=True), prefix="--gapext2", doc=InputDocumentation(doc="Gap extension penalty for 2nd mapping iteration.\n(default: 100)")), ToolInput(tag="in_n_hits_one", input_type=Boolean(optional=True), prefix="--nhits1", doc=InputDocumentation(doc="Number of allowed multi hits per read (default: 50)")), ToolInput(tag="in_nh_its_two", input_type=Boolean(optional=True), prefix="--nhits2", doc=InputDocumentation(doc="Number of allowed multi hits per read in 2nd iteration\n(default: 100)")), ToolInput(tag="in_chimeric_overlap", input_type=Boolean(optional=True), prefix="--chimeric_overlap", doc=InputDocumentation(doc="Maximum number of bases allowed between the chimeric\nsegments of a read (default: 2)"))], outputs=[ToolOutput(tag="out_outdir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory path for the analysis (default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Chira_Map_Py_V0_1_0().translate("wdl", allow_empty_container=True)

