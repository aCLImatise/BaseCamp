from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, File, Float

Ctseq_Analyze_V0_1_0 = CommandToolBuilder(tool="ctseq_analyze", base_command=["ctseq", "analyze"], inputs=[ToolInput(tag="in_umi_type", input_type=String(optional=True), prefix="--umiType", doc=InputDocumentation(doc="Choose 'separate' if the UMIs for the reads are\ncontained in a separate fastq file where the line\nafter the read name is the UMI. Choose 'inline' if the\nUMIs are already included in the forward/reverse read\nfastq files in the following format: '@M01806:488:0000\n00000-J36GT:1:1101:15963:1363:GTAGGTAAAGTG\n1:N:0:CGAGTAAT' where 'GTAGGTAAAGTG' is the UMI")), ToolInput(tag="in_umi_length", input_type=Int(optional=True), prefix="--umiLength", doc=InputDocumentation(doc="Length of UMI sequence, e.g. 12 (required)")), ToolInput(tag="in_dir", input_type=File(optional=True), prefix="--dir", doc=InputDocumentation(doc="Path to directory where you have your fastq files. If\nno '--dir' is specified, ctseq will look in your\ncurrent directory.")), ToolInput(tag="in_ref_dir", input_type=File(optional=True), prefix="--refDir", doc=InputDocumentation(doc="Full path to directory where you have already built\nyour methylation reference files. If no '--refDir' is\nspecified, ctseq will look in your current directory.")), ToolInput(tag="in_forward_ext", input_type=String(optional=True), prefix="--forwardExt", doc=InputDocumentation(doc="Unique extension of fastq files containing FORWARD\nreads. Make sure to include '.gz' if your files are\ncompressed (required)")), ToolInput(tag="in_reverse_ext", input_type=String(optional=True), prefix="--reverseExt", doc=InputDocumentation(doc="Unique extension of fastq files containing REVERSE\nreads. Make sure to include '.gz' if your files are\ncompressed (required)")), ToolInput(tag="in_umi_ext", input_type=File(optional=True), prefix="--umiExt", doc=InputDocumentation(doc="Unique extension of fastq files containing the UMIs\n(This flag is REQUIRED if UMIs are contained in\nseparate fastq file). Make sure to include '.gz' if\nyour files are compressed.")), ToolInput(tag="in_forward_adapter", input_type=String(optional=True), prefix="--forwardAdapter", doc=InputDocumentation(doc="adapter sequence to remove from FORWARD reads\n(default=AGTGTGGGAGGGTAGTTGGTGTT)")), ToolInput(tag="in_reverse_adapter", input_type=String(optional=True), prefix="--reverseAdapter", doc=InputDocumentation(doc="adapter sequence to remove from REVERSE reads\n(default=ACTCCCCACCTTCCTCATTCTCTAAGACGGTGT)")), ToolInput(tag="in_cut_adapt_cores", input_type=Int(optional=True), prefix="--cutadaptCores", doc=InputDocumentation(doc="number of cores to use with Cutadapt. Default=1.\nHighly recommended to run with more than 1 core, try\nstarting with 18 cores")), ToolInput(tag="in_bismark_cores", input_type=Int(optional=True), prefix="--bismarkCores", doc=InputDocumentation(doc="number of cores to use to align with Bismark.\nDefault=1. Highly recommended to run with more than 1\ncore, try starting with 6 cores")), ToolInput(tag="in_reads_per_file", input_type=File(optional=True), prefix="--readsPerFile", doc=InputDocumentation(doc="number of reads to analyze per fastq file (should only\nadjust this if you think you are too big of a file\nthrough bismark). Default=5000000 (5 million)")), ToolInput(tag="in_consensus", input_type=Float(optional=True), prefix="--consensus", doc=InputDocumentation(doc="consensus threshold to make consensus methylation call\nfrom all the reads with the same UMI (default=0.9)")), ToolInput(tag="in_processes", input_type=Int(optional=True), prefix="--processes", doc=InputDocumentation(doc="number of processes (default=1; default settings could\ntake a long time to run)")), ToolInput(tag="in_umi_threshold", input_type=Int(optional=True), prefix="--umiThreshold", doc=InputDocumentation(doc="UMIs with this edit distance will be collapsed\ntogether, default=0 (don't collapse)")), ToolInput(tag="in_umi_collapse_alg", input_type=String(optional=True), prefix="--umiCollapseAlg", doc=InputDocumentation(doc="algorithm used to collapse UMIs, options:\ndefault=directional")), ToolInput(tag="in_name_run", input_type=Int(optional=True), prefix="--nameRun", doc=InputDocumentation(doc="number of reads needed to be counted as a unique\nmolecule (required)")), ToolInput(tag="in_cisc_g", input_type=Float(optional=True), prefix="--cisCG", doc=InputDocumentation(doc="cis-CG threshold to determine if a molecule is\nmethylated (default=0.75)")), ToolInput(tag="in_molecule_threshold", input_type=Int(optional=True), prefix="--moleculeThreshold", doc=InputDocumentation(doc="number of reads needed to be counted as a unique\nmolecule (default=5)\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ctseq_Analyze_V0_1_0().translate("wdl", allow_empty_container=True)

