from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int

Random_Forest_Py_V0_1_0 = CommandToolBuilder(tool="random_forest.py", base_command=["random_forest.py"], inputs=[ToolInput(tag="in_input", input_type=String(optional=True), prefix="--input", doc=InputDocumentation(doc="Input dataset in wide format.")), ToolInput(tag="in_design", input_type=File(optional=True), prefix="--design", doc=InputDocumentation(doc="Design file.")), ToolInput(tag="in_id", input_type=File(optional=True), prefix="--ID", doc=InputDocumentation(doc="Name of the column with unique identifiers on wide\nfile.")), ToolInput(tag="in_group", input_type=File(optional=True), prefix="--group", doc=InputDocumentation(doc="Group/treatment identifier in design file.")), ToolInput(tag="in_levels", input_type=String(optional=True), prefix="--levels", doc=InputDocumentation(doc="Different groups to sort by separeted by commas.")), ToolInput(tag="in_snum", input_type=Int(optional=True), prefix="--snum", doc=InputDocumentation(doc="Number of estimators.")), ToolInput(tag="in_num", input_type=Int(optional=True), prefix="--num", doc=InputDocumentation(doc="Number of varibles toplot ont Variable Importance Plot")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Output file name.")), ToolInput(tag="in_out_two", input_type=File(optional=True), prefix="--out2", doc=InputDocumentation(doc="Output file name.")), ToolInput(tag="in_figure", input_type=File(optional=True), prefix="--figure", doc=InputDocumentation(doc="Name of output file to store feature importance plots\nfor the model")), ToolInput(tag="in_palette", input_type=String(optional=True), prefix="--palette", doc=InputDocumentation(doc="Name of the palette to use.")), ToolInput(tag="in_color", input_type=String(optional=True), prefix="--color", doc=InputDocumentation(doc="Name of a valid color scheme on the selected palette\n"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output file name.")), ToolOutput(tag="out_out_two", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_two", type_hint=File()), doc=OutputDocumentation(doc="Output file name.")), ToolOutput(tag="out_figure", output_type=File(optional=True), selector=InputSelector(input_to_select="in_figure", type_hint=File()), doc=OutputDocumentation(doc="Name of output file to store feature importance plots\nfor the model"))], container="quay.io/biocontainers/secimtools:21.3.4.2--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Random_Forest_Py_V0_1_0().translate("wdl")

