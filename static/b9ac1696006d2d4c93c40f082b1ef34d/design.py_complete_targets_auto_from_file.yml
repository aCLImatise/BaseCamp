!Command
command:
- design.py
- complete-targets
- auto-from-file
positional:
- !Positional
  optional: false
  position: 0
  name: in_tsv
  description: "Path to input TSV. Each row gives the following\ncolumns, in order:\
    \ (1) label for the row (used for\nnaming output files; must be unique); (2) taxonomic\n\
    (e.g., species) ID from NCBI; (3) label of segment\n(e.g., 'S') if there is one,\
    \ or 'None' if unsegmented;\n(4) accessions of reference sequences to use for\n\
    curation (comma-separated)"
- !Positional
  optional: false
  position: 1
  name: out_tsv_dir
  description: "Path to directory in which to place output TSVs; each\noutput TSV\
    \ corresponds to a cluster for the taxon in a\nrow in the input"
named:
- !Flag
  optional: true
  synonyms:
  - -gl
  - --guide-length
  description: Length of guide to construct
  args: !SimpleFlagArg
    name: GUIDE_LENGTH
- !Flag
  optional: true
  synonyms:
  - --obj
  description: "Objective function to solve. 'maximize-activity'\nmaximizes the expected\
    \ activity of the guide set of\nthe target genomes subject to soft and hard\n\
    constraints on the size of the guide set. 'minimize-\nguides' minimizes the number\
    \ of guides in the guide\nset subject to coverage constraints across the target\n\
    genomes."
  args: !ChoiceFlagArg
    choices: !!set
      maximize-activity:
      minimize-guides:
- !Flag
  optional: true
  synonyms:
  - -gm
  - --guide-mismatches
  description: "Allow for this number of mismatches when determining\nwhether a guide\
    \ covers a sequence"
  args: !SimpleFlagArg
    name: GUIDE_MISMATCHES
- !Flag
  optional: true
  synonyms:
  - -gp
  - --guide-cover-frac
  description: "The fraction of all sequences that must be covered by\nthe guides."
  args: !SimpleFlagArg
    name: GUIDE_COVER_FRAC
- !Flag
  optional: true
  synonyms:
  - -sgc
  - --soft-guide-constraint
  description: "Soft constraint on the number of guides. There is no\npenalty for\
    \ a number of guides <=\nSOFT_GUIDE_CONSTRAINT, and having a number of guides\n\
    beyond this is penalized. See --penalty-strength. This\nvalue must be <= HARD_GUIDE_CONSTRAINT."
  args: !SimpleFlagArg
    name: SOFT_GUIDE_CONSTRAINT
- !Flag
  optional: true
  synonyms:
  - -hgc
  - --hard-guide-constraint
  description: "Hard constraint on the number of guides. The number of\nguides designed\
    \ for a target will be <=\nHARD_GUIDE_CONSTRAINT."
  args: !SimpleFlagArg
    name: HARD_GUIDE_CONSTRAINT
- !Flag
  optional: true
  synonyms:
  - --penalty-strength
  description: "Importance of the penalty when the number of guides\nexceeds the soft\
    \ guide constraint. Namely, for a guide\nset G, if the penalty strength is L and\
    \ the soft guide\nconstraint is h, then the penalty in the objective\nfunction\
    \ is L*max(0, |G|-h). Must be >= 0. The value\ndepends on the output of activity\
    \ model and reflects a\ntolerance for more guides; for the default activity\n\
    model reasonable values are in the range [0.1, 0.5]."
  args: !SimpleFlagArg
    name: PENALTY_STRENGTH
- !Flag
  optional: true
  synonyms:
  - --maximization-algorithm
  description: "Algorithm to use for solving submodular maximization\nproblem. 'greedy'\
    \ is the canonical deterministic\ngreedy algorithm (Nemhauser 1978) for constrained\n\
    monotone submodular maximization, which may perform\nwell in practice but has\
    \ poor theoretical guarantees\nhere because the function is not monotone (unless\n\
    --penalty-strength is 0). 'random-greedy' is the\nrandomized greedy algorithm\
    \ (Buchbinder 2014) for\nconstrained non-monotone submodular maximization that\n\
    has good worst-case theoretical guarantees."
  args: !ChoiceFlagArg
    choices: !!set
      random-greedy:
      greedy:
- !Flag
  optional: true
  synonyms:
  - --missing-thres
  description: "MISSING_THRES MISSING_THRES\n<A> <B> <C>; parameters governing the\
    \ threshold on\nwhich sites to ignore due to too much missing data.\nThe 3 values\
    \ specify not to attempt to design guides\noverlapping sites where the fraction\
    \ of sequences with\nmissing data is > min(A, max(B, C*m)) where m is the\nmedian\
    \ fraction of sequences with missing data over\nthe alignment. Set a=1 and b=1\
    \ to not ignore sites due\nto missing data."
  args: !SimpleFlagArg
    name: MISSING_THRES
- !Flag
  optional: true
  synonyms:
  - --id-m
  description: "Allow for this number of mismatches when determining\nwhether a guide\
    \ 'hits' a sequence in a group/taxon\nother than the for which it is being designed;\
    \ higher\nvalues correspond to more specificity."
  args: !SimpleFlagArg
    name: DIFF_ID_MISMATCHES
- !Flag
  optional: true
  synonyms:
  - --id-frac
  description: "Decide that a guide 'hits' a group/taxon if it 'hits'\na fraction\
    \ of sequences in that group/taxon that\nexceeds this value; lower values correspond\
    \ to more\nspecificity."
  args: !SimpleFlagArg
    name: DIFF_ID_FRAC
- !Flag
  optional: true
  synonyms:
  - --id-method
  description: "Choice of method to query for specificity. 'lshnn' for\nLSH near-neighbor\
    \ approach. 'shard' for approach that\nshards k-mers across small tries."
  args: !ChoiceFlagArg
    choices: !!set
      shard:
      lshnn:
- !Flag
  optional: true
  synonyms:
  - --specific-against-fastas
  description: "Path to one or more FASTA files giving sequences, such\nthat guides\
    \ are designed to be specific against (i.e.,\nnot hit) these sequences, according\
    \ to --id-m and\n--id-frac. This is equivalent to specifying the FASTAs\nin the\
    \ main input (as positional inputs), except that,\nwhen provided here, guides\
    \ are not designed for them\nand they do not need to be aligned."
  args: !RepeatFlagArg
    name: SPECIFIC_AGAINST_FASTAS
- !Flag
  optional: true
  synonyms:
  - --specific-against-taxa
  description: "Path to TSV file giving giving taxonomies from which\nto download\
    \ all genomes and ensure guides are specific\nagainst (i.e., not hit) these. The\
    \ TSV file has 2\ncolumns: (1) a taxonomic ID; (2) segment label, or\n'None' if\
    \ unsegmented"
  args: !SimpleFlagArg
    name: SPECIFIC_AGAINST_TAXA
- !Flag
  optional: true
  synonyms:
  - --do-not-allow-gu-pairing
  description: "When determining whether a guide binds to a region of\ntarget sequence,\
    \ do not count G-U (wobble) base pairs\nas matching. Default is to tolerate G-U\
    \ pairing:\nnamely, A in an output guide sequence matches G in the\ntarget and\
    \ C in an output guide sequence matches T in\nthe target (since the synthesized\
    \ guide is the reverse\ncomplement of the output guide sequence)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --required-guides
  description: "Path to a file that gives guide sequences that will be\nincluded in\
    \ the guide cover and output for the windows\nin which they belong, e.g., if certain\
    \ guide sequences\nare shown experimentally to perform well. The file\nmust have\
    \ 3 columns: col 1 gives an identifier for the\nalignment that the guide covers,\
    \ such that i\nrepresents the i'th FASTA given as input (0-based);\ncol 2 gives\
    \ a guide sequence; col 3 gives the start\nposition of the guide (0-based) in\
    \ the alignment"
  args: !SimpleFlagArg
    name: REQUIRED_GUIDES
- !Flag
  optional: true
  synonyms:
  - --blacklisted-ranges
  description: "Path to a file that gives ranges in alignments from\nwhich guides\
    \ will not be constructed. The file must\nhave 3 columns: col 1 gives an identifier\
    \ for the\nalignment that the range corresponds to, such that i\nrepresents the\
    \ i'th FASTA given as input (0-based);\ncol 2 gives the start position of the\
    \ range\n(inclusive); col 3 gives the end position of the range\n(exclusive)"
  args: !SimpleFlagArg
    name: BLACKLISTED_RANGES
- !Flag
  optional: true
  synonyms:
  - --blacklisted-kmers
  description: "Path to a FASTA file that gives k-mers to blacklisted\nfrom guide\
    \ sequences. No guide sequences will be\nconstructed that contain these k-mers.\
    \ The k-mers make\nup the sequences in the FASTA file; the sequence names\nare\
    \ ignored. k-mers should be long enough so that not\ntoo many guide sequences\
    \ are deemed to be unsuitable,\nand should be at most the length of the guide"
  args: !SimpleFlagArg
    name: BLACKLISTED_KMERS
- !Flag
  optional: true
  synonyms:
  - --require-flanking5
  description: "Require the given sequence on the 5' protospacer\nflanking site (PFS)\
    \ of each designed guide; this\ntolerates ambiguity in the sequence (e.g., 'H'\n\
    requires 'A', 'C', or 'T', or, equivalently, avoids\nguides flanked by 'G'). Note\
    \ that this is the 5' end\nin the target sequence (not the spacer sequence)."
  args: !SimpleFlagArg
    name: REQUIRE_FLANKING5
- !Flag
  optional: true
  synonyms:
  - --require-flanking3
  description: "Require the given sequence on the 3' protospacer\nflanking site (PFS)\
    \ of each designed guide; this\ntolerates ambiguity in the sequence (e.g., 'H'\n\
    requires 'A', 'C', or 'T', or, equivalently, avoids\nguides flanked by 'G'). Note\
    \ that this is the 3' end\nin the target sequence (not the spacer sequence)."
  args: !SimpleFlagArg
    name: REQUIRE_FLANKING3
- !Flag
  optional: true
  synonyms:
  - --seed
  description: "SEED will set the random seed, guaranteeing the same\noutput given\
    \ the same inputs. If SEED is not set to\nthe same value, output may vary across\
    \ different runs."
  args: !SimpleFlagArg
    name: SEED
- !Flag
  optional: true
  synonyms:
  - --predict-activity-model-path
  description: "PREDICT_ACTIVITY_MODEL_PATH\nPaths to directories containing serialized\
    \ models in\nTensorFlow's SavedModel format for predicting guide-\ntarget activity.\
    \ There are two arguments: (1)\nclassification model to determine which guides\
    \ are\nactive; (2) regression model, which is used to\ndetermine which guides\
    \ (among active ones) are highly\nactive. The models/ directory contains example\
    \ models.\nIf not set, ADAPT does not predict activities to use\nduring design."
  args: !SimpleFlagArg
    name: PREDICT_ACTIVITY_MODEL_PATH
- !Flag
  optional: true
  synonyms:
  - --predict-activity-thres
  description: "PREDICT_ACTIVITY_THRES\nThresholds to use for decisions on output\
    \ of\npredictive models. There are two arguments: (1)\nclassification threshold\
    \ for deciding which guide-\ntarget pairs are active (in [0,1], where higher values\n\
    have higher precision but less recall); (2) regression\nthreshold for deciding\
    \ which guide-target pairs are\nhighly active (>= 0, where higher values limit\
    \ the\nnumber determined to be highly active). If not set but\n--predict-activity-model-path\
    \ is set, then ADAPT uses\ndefault thresholds stored with the models."
  args: !SimpleFlagArg
    name: PREDICT_ACTIVITY_THRES
- !Flag
  optional: true
  synonyms:
  - --use-simple-binary-activity-prediction
  description: "If set, predict activity using a simple binary\nprediction between\
    \ guide and target according to their\ndistance, with the threshold determined\
    \ based on\n--guide-mismatches. This is only applicable when OBJ\nis 'maxmimize-activity'.\
    \ This does not use a\nserialized model for predicting activity, so\n--predict-activity-model-path\
    \ should not be set when\nthis is set."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --do-not-memoize-guide-computations
  description: "If set, do not memoize computations during the search,\nincluding\
    \ of guides identified at each site and of\nspecificity queries. This can be helpful\
    \ for\nbenchmarking the improvement of memoization, or if\nthere is reason to\
    \ believe memoization will slow the\nsearch (e.g., if possible amplicons rarely\
    \ overlap).\nNote that activity predictions are still memoized."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debug
  description: Debug output
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --verbose
  description: Verbose output
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -pl
  - --primer-length
  description: Length of primer in nt
  args: !SimpleFlagArg
    name: PRIMER_LENGTH
- !Flag
  optional: true
  synonyms:
  - -pp
  - --primer-cover-frac
  description: "Same as --cover-frac, except for the design of primers\n-- i.e., the\
    \ fraction of sequences that must be\ncovered by the primers, independently on\
    \ each end"
  args: !SimpleFlagArg
    name: PRIMER_COVER_FRAC
- !Flag
  optional: true
  synonyms:
  - -pm
  - --primer-mismatches
  description: "Allow for this number of mismatches when determining\nwhether a primer\
    \ hybridizes to a sequence"
  args: !SimpleFlagArg
    name: PRIMER_MISMATCHES
- !Flag
  optional: true
  synonyms:
  - --max-primers-at-site
  description: "Only use primer sites that contain at most this number\nof primers;\
    \ if not set, there is no limit"
  args: !SimpleFlagArg
    name: MAX_PRIMERS_AT_SITE
- !Flag
  optional: true
  synonyms:
  - --primer-gc-content-bounds
  description: "PRIMER_GC_CONTENT_BOUNDS\nOnly use primer sites where all primers\
    \ are within the\ngiven GC content bounds. This consists of two values L\nand\
    \ H, each fractions in [0,1], such that primer GC\ncontent must be in [L, H].\
    \ If not set, there are no\nbounds."
  args: !SimpleFlagArg
    name: PRIMER_GC_CONTENT_BOUNDS
- !Flag
  optional: true
  synonyms:
  - --max-target-length
  description: "Only allow amplicons (incl. primers) to be at most\nthis number of\
    \ nucleotides long; if not set, there is\nno limit"
  args: !SimpleFlagArg
    name: MAX_TARGET_LENGTH
- !Flag
  optional: true
  synonyms:
  - --obj-fn-weights
  description: "OBJ_FN_WEIGHTS\nSpecify custom weights to use in the objective\nfunction\
    \ for a target. These specify weights for\npenalties on primers and amplicons\
    \ relative to the\nguide objective. There are 2 weights (A B), where the\ntarget\
    \ objective function is [(guide objective value)\n+/- (A*(total number of primers)\
    \ + B*log2(amplicon\nlength)]. It is + when --obj is minimize-guides and -\nwhen\
    \ --obj is maximize-activity."
  args: !SimpleFlagArg
    name: OBJ_FN_WEIGHTS
- !Flag
  optional: true
  synonyms:
  - --best-n-targets
  description: "Only compute and output up to this number of targets.\nNote that runtime\
    \ will generally be longer for higher\nvalues"
  args: !SimpleFlagArg
    name: BEST_N_TARGETS
- !Flag
  optional: true
  synonyms:
  - --halt-search-early
  description: "If set, stop the target search as soon as\nBEST_N_TARGETS have been\
    \ identified. The targets will\nmeet the given constraints but may not be optimal\
    \ over\nthe whole genome. They will likely be from the\nbeginning of the genome."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --only-account-for-amplified-seqs
  description: "If set, design guides to cover GUIDE_COVER_FRAC of\njust the sequences\
    \ covered by the primers. This\nchanges the behavior of -gp/--guide-cover-frac.\
    \ This\nis only applicable when --obj is 'minimize-guides' as\nit is not implemented\
    \ for 'maximize-activity'. In\ntotal, >= (GUIDE_COVER_FRAC * (2 * PRIMER_COVER_FRAC\
    \ -\n1)) sequences will be covered. Using this may worsen\nruntime because the\
    \ sequences to consider for guide\ndesign will change more often across amplicons\
    \ and\ntherefore designs can be less easily memoized."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --mafft-path
  description: "Path to mafft executable, used for generating\nalignments"
  args: !SimpleFlagArg
    name: MAFFT_PATH
- !Flag
  optional: true
  synonyms:
  - --prep-memoize-dir
  description: "Path to directory in which to memoize alignments and\nstatistics on\
    \ them. If set to \"s3://BUCKET/PATH\", it\nwill save to the S3 bucket if boto3\
    \ and botocore are\ninstalled and access key information exists via\nAWS_ACCESS_KEY_ID\
    \ and AWS_SECRET_ACCESS_KEY or via AWS\nCLI. If not set, this does not memoize\
    \ this\ninformation."
  args: !SimpleFlagArg
    name: PREP_MEMOIZE_DIR
- !Flag
  optional: true
  synonyms:
  - --sample-seqs
  description: "After fetching accessions, randomly select SAMPLE_SEQS\nof them with\
    \ replacement from each taxonomy any move\nforward in the design with these. This\
    \ is useful for\ntesting and measuring output growth as input size\ngrows, as\
    \ well as assessing the dispersion in output\nassociated with some input sample."
  args: !SimpleFlagArg
    name: SAMPLE_SEQS
- !Flag
  optional: true
  synonyms:
  - --prep-influenza
  description: "If set, fetch sequences using the NCBI Influenza\ndatabase; should\
    \ only be used for Influenza A or B\nvirus taxonomies"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --cover-by-year-decay
  description: "COVER_BY_YEAR_DECAY\n<A> <B>; if set, group input sequences by year\
    \ and set\na desired partial cover for each year (fraction of\nsequences that\
    \ must be covered by guides) as follows:\nAll years >= A receive a desired cover\
    \ fraction of\nGUIDE_COVER_FRAC for guides (and PRIMER_COVER_FRAC for\nprimers).\
    \ Each preceding year receives a desired cover\nfraction that decays by B -- i.e.,\
    \ year n is given\nB*(desired cover fraction of year n+1)."
  args: !SimpleFlagArg
    name: COVER_BY_YEAR_DECAY
- !Flag
  optional: true
  synonyms:
  - --cluster-threshold
  description: "Maximum inter-cluster distance to use when clustering\ninput sequences\
    \ prior to alignment. Expressed as\naverage nucleotide dissimilarity (1-ANI, where\
    \ ANI is\naverage nucleotide identity); higher values result in\nfewer clusters"
  args: !SimpleFlagArg
    name: CLUSTER_THRESHOLD
- !Flag
  optional: true
  synonyms:
  - --use-accessions
  description: "If set, use specified accessions instead of fetching\nneighbors for\
    \ the given taxonomic ID(s). This provides\na path to a TSV file with 3 columns:\
    \ (1) a taxonomic\nID; (2) segment label, or 'None' if unsegmented; (3)\naccession.\
    \ Each row specifies an accession to use in\nthe input, and values for columns\
    \ 1 and 2 can appear\nin multiple rows."
  args: !SimpleFlagArg
    name: USE_ACCESSIONS
- !Flag
  optional: true
  synonyms:
  - --use-fasta
  description: "If set, use sequences in fasta instead of fetching\nneighbors for\
    \ the given taxonomic ID(s). This provides\na path to a TSV file with 3 columns:\
    \ (1) a taxonomic\nID; (2) segment label, or 'None' if unsegmented; (3)\npath\
    \ to FASTA."
  args: !SimpleFlagArg
    name: USE_FASTA
- !Flag
  optional: true
  synonyms:
  - --only-design-for
  description: "If set, only design for given taxonomies. This\nprovides a path to\
    \ a TSV file with 2 columns: (1) a\ntaxonomic ID; (2) segment label, or 'None'\
    \ if\nunsegmented"
  args: !SimpleFlagArg
    name: ONLY_DESIGN_FOR
- !Flag
  optional: true
  synonyms:
  - --taxa-to-ignore-for-specificity
  description: "If set, specify which taxa should be ignored when\nenforcing specificity\
    \ while designing for other taxa.\nThis provides a path to a TSV file with 2 columns:\
    \ (1)\na taxonomic ID A; (2) a taxonomic ID B such that B\nshould be ignored when\
    \ determining specificity for A.\nWhen designing for A, this masks taxonomy B\
    \ from all\nspecificity queries. This is useful, e.g., if B is a\nsubset of A."
  args: !SimpleFlagArg
    name: TAXA_TO_IGNORE_FOR_SPECIFICITY
- !Flag
  optional: true
  synonyms:
  - --ncbi-api-key
  description: "API key to use for NCBI e-utils. Using this increases\nthe limit on\
    \ requests/second and may prevent an IP\naddress from being blocked due to too\
    \ many requests"
  args: !SimpleFlagArg
    name: NCBI_API_KEY
- !Flag
  optional: true
  synonyms:
  - --aws-access-key-id
  description: "User Account Access Key for AWS. This is only\nnecessary if using\
    \ S3 for memoization via\nPREP_MEMOIZE_DIR and AWS CLI is not installed and\n\
    configured."
  args: !SimpleFlagArg
    name: AWS_ACCESS_KEY_ID
- !Flag
  optional: true
  synonyms:
  - --aws-secret-access-key
  description: "User Account Secret Access Key for AWS. This is only\nnecessary if\
    \ using S3 for memoization via\nPREP_MEMOIZE_DIR and AWS CLI is not installed\
    \ and\nconfigured."
  args: !SimpleFlagArg
    name: AWS_SECRET_ACCESS_KEY
- !Flag
  optional: true
  synonyms:
  - --write-input-seqs
  description: "If set, write the sequences (accession.version) being\nused as input\
    \ for design to a file in OUT_TSV_DIR; the\nfilename is determined based on the\
    \ label for each\ntaxonomy"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --write-input-aln
  description: "If set, write the alignments being used as input for\ndesign to a\
    \ file in OUT_TSV_DIR; the filename is\ndetermined based on the label for each\
    \ taxonomy (they\nare '[label].[cluster-number].fasta'\n"
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: design.py complete-targets auto-from-file [-h] [-gl GUIDE_LENGTH]\n\
  \                                                 [--obj {maximize-activity,minimize-guides}]\n\
  \                                                 [-gm GUIDE_MISMATCHES]\n     \
  \                                            [-gp GUIDE_COVER_FRAC]\n          \
  \                                       [-sgc SOFT_GUIDE_CONSTRAINT]\n         \
  \                                        [-hgc HARD_GUIDE_CONSTRAINT]\n        \
  \                                         [--penalty-strength PENALTY_STRENGTH]\n\
  \                                                 [--maximization-algorithm {greedy,random-greedy}]\n\
  \                                                 [--missing-thres MISSING_THRES\
  \ MISSING_THRES MISSING_THRES]\n                                               \
  \  [--id-m DIFF_ID_MISMATCHES]\n                                               \
  \  [--id-frac DIFF_ID_FRAC]\n                                                 [--id-method\
  \ {lshnn,shard}]\n                                                 [--specific-against-fastas\
  \ SPECIFIC_AGAINST_FASTAS [SPECIFIC_AGAINST_FASTAS ...]]\n                     \
  \                            [--specific-against-taxa SPECIFIC_AGAINST_TAXA]\n \
  \                                                [--do-not-allow-gu-pairing]\n \
  \                                                [--required-guides REQUIRED_GUIDES]\n\
  \                                                 [--blacklisted-ranges BLACKLISTED_RANGES]\n\
  \                                                 [--blacklisted-kmers BLACKLISTED_KMERS]\n\
  \                                                 [--require-flanking5 REQUIRE_FLANKING5]\n\
  \                                                 [--require-flanking3 REQUIRE_FLANKING3]\n\
  \                                                 [--seed SEED]\n              \
  \                                   [--predict-activity-model-path PREDICT_ACTIVITY_MODEL_PATH\
  \ PREDICT_ACTIVITY_MODEL_PATH]\n                                               \
  \  [--predict-activity-thres PREDICT_ACTIVITY_THRES PREDICT_ACTIVITY_THRES]\n  \
  \                                               [--use-simple-binary-activity-prediction]\n\
  \                                                 [--do-not-memoize-guide-computations]\n\
  \                                                 [--debug] [--verbose]\n      \
  \                                           [-pl PRIMER_LENGTH]\n              \
  \                                   [-pp PRIMER_COVER_FRAC]\n                  \
  \                               [-pm PRIMER_MISMATCHES]\n                      \
  \                           [--max-primers-at-site MAX_PRIMERS_AT_SITE]\n      \
  \                                           [--primer-gc-content-bounds PRIMER_GC_CONTENT_BOUNDS\
  \ PRIMER_GC_CONTENT_BOUNDS]\n                                                 [--max-target-length\
  \ MAX_TARGET_LENGTH]\n                                                 [--obj-fn-weights\
  \ OBJ_FN_WEIGHTS OBJ_FN_WEIGHTS]\n                                             \
  \    [--best-n-targets BEST_N_TARGETS]\n                                       \
  \          [--halt-search-early]\n                                             \
  \    [--only-account-for-amplified-seqs]\n                                     \
  \            --mafft-path MAFFT_PATH\n                                         \
  \        [--prep-memoize-dir PREP_MEMOIZE_DIR]\n                               \
  \                  [--sample-seqs SAMPLE_SEQS]\n                               \
  \                  [--prep-influenza]\n                                        \
  \         [--cover-by-year-decay COVER_BY_YEAR_DECAY COVER_BY_YEAR_DECAY]\n    \
  \                                             [--cluster-threshold CLUSTER_THRESHOLD]\n\
  \                                                 [--use-accessions USE_ACCESSIONS]\n\
  \                                                 [--use-fasta USE_FASTA]\n    \
  \                                             [--only-design-for ONLY_DESIGN_FOR]\n\
  \                                                 [--taxa-to-ignore-for-specificity\
  \ TAXA_TO_IGNORE_FOR_SPECIFICITY]\n                                            \
  \     [--ncbi-api-key NCBI_API_KEY]\n                                          \
  \       [--aws-access-key-id AWS_ACCESS_KEY_ID]\n                              \
  \                   [--aws-secret-access-key AWS_SECRET_ACCESS_KEY]\n          \
  \                                       [--write-input-seqs]\n                 \
  \                                [--write-input-aln]\n                         \
  \                        in_tsv out_tsv_dir\n\npositional arguments:\n  in_tsv \
  \               Path to input TSV. Each row gives the following\n              \
  \          columns, in order: (1) label for the row (used for\n                \
  \        naming output files; must be unique); (2) taxonomic\n                 \
  \       (e.g., species) ID from NCBI; (3) label of segment\n                   \
  \     (e.g., 'S') if there is one, or 'None' if unsegmented;\n                 \
  \       (4) accessions of reference sequences to use for\n                     \
  \   curation (comma-separated)\n  out_tsv_dir           Path to directory in which\
  \ to place output TSVs; each\n                        output TSV corresponds to\
  \ a cluster for the taxon in a\n                        row in the input\n\noptional\
  \ arguments:\n  -h, --help            show this help message and exit\n  -gl GUIDE_LENGTH,\
  \ --guide-length GUIDE_LENGTH\n                        Length of guide to construct\n\
  \  --obj {maximize-activity,minimize-guides}\n                        Objective\
  \ function to solve. 'maximize-activity'\n                        maximizes the\
  \ expected activity of the guide set of\n                        the target genomes\
  \ subject to soft and hard\n                        constraints on the size of the\
  \ guide set. 'minimize-\n                        guides' minimizes the number of\
  \ guides in the guide\n                        set subject to coverage constraints\
  \ across the target\n                        genomes.\n  -gm GUIDE_MISMATCHES, --guide-mismatches\
  \ GUIDE_MISMATCHES\n                        Allow for this number of mismatches\
  \ when determining\n                        whether a guide covers a sequence\n\
  \  -gp GUIDE_COVER_FRAC, --guide-cover-frac GUIDE_COVER_FRAC\n                 \
  \       The fraction of all sequences that must be covered by\n                \
  \        the guides.\n  -sgc SOFT_GUIDE_CONSTRAINT, --soft-guide-constraint SOFT_GUIDE_CONSTRAINT\n\
  \                        Soft constraint on the number of guides. There is no\n\
  \                        penalty for a number of guides <=\n                   \
  \     SOFT_GUIDE_CONSTRAINT, and having a number of guides\n                   \
  \     beyond this is penalized. See --penalty-strength. This\n                 \
  \       value must be <= HARD_GUIDE_CONSTRAINT.\n  -hgc HARD_GUIDE_CONSTRAINT, --hard-guide-constraint\
  \ HARD_GUIDE_CONSTRAINT\n                        Hard constraint on the number of\
  \ guides. The number of\n                        guides designed for a target will\
  \ be <=\n                        HARD_GUIDE_CONSTRAINT.\n  --penalty-strength PENALTY_STRENGTH\n\
  \                        Importance of the penalty when the number of guides\n \
  \                       exceeds the soft guide constraint. Namely, for a guide\n\
  \                        set G, if the penalty strength is L and the soft guide\n\
  \                        constraint is h, then the penalty in the objective\n  \
  \                      function is L*max(0, |G|-h). Must be >= 0. The value\n  \
  \                      depends on the output of activity model and reflects a\n\
  \                        tolerance for more guides; for the default activity\n \
  \                       model reasonable values are in the range [0.1, 0.5].\n \
  \ --maximization-algorithm {greedy,random-greedy}\n                        Algorithm\
  \ to use for solving submodular maximization\n                        problem. 'greedy'\
  \ is the canonical deterministic\n                        greedy algorithm (Nemhauser\
  \ 1978) for constrained\n                        monotone submodular maximization,\
  \ which may perform\n                        well in practice but has poor theoretical\
  \ guarantees\n                        here because the function is not monotone\
  \ (unless\n                        --penalty-strength is 0). 'random-greedy' is\
  \ the\n                        randomized greedy algorithm (Buchbinder 2014) for\n\
  \                        constrained non-monotone submodular maximization that\n\
  \                        has good worst-case theoretical guarantees.\n  --missing-thres\
  \ MISSING_THRES MISSING_THRES MISSING_THRES\n                        <A> <B> <C>;\
  \ parameters governing the threshold on\n                        which sites to\
  \ ignore due to too much missing data.\n                        The 3 values specify\
  \ not to attempt to design guides\n                        overlapping sites where\
  \ the fraction of sequences with\n                        missing data is > min(A,\
  \ max(B, C*m)) where m is the\n                        median fraction of sequences\
  \ with missing data over\n                        the alignment. Set a=1 and b=1\
  \ to not ignore sites due\n                        to missing data.\n  --id-m DIFF_ID_MISMATCHES\n\
  \                        Allow for this number of mismatches when determining\n\
  \                        whether a guide 'hits' a sequence in a group/taxon\n  \
  \                      other than the for which it is being designed; higher\n \
  \                       values correspond to more specificity.\n  --id-frac DIFF_ID_FRAC\n\
  \                        Decide that a guide 'hits' a group/taxon if it 'hits'\n\
  \                        a fraction of sequences in that group/taxon that\n    \
  \                    exceeds this value; lower values correspond to more\n     \
  \                   specificity.\n  --id-method {lshnn,shard}\n                \
  \        Choice of method to query for specificity. 'lshnn' for\n              \
  \          LSH near-neighbor approach. 'shard' for approach that\n             \
  \           shards k-mers across small tries.\n  --specific-against-fastas SPECIFIC_AGAINST_FASTAS\
  \ [SPECIFIC_AGAINST_FASTAS ...]\n                        Path to one or more FASTA\
  \ files giving sequences, such\n                        that guides are designed\
  \ to be specific against (i.e.,\n                        not hit) these sequences,\
  \ according to --id-m and\n                        --id-frac. This is equivalent\
  \ to specifying the FASTAs\n                        in the main input (as positional\
  \ inputs), except that,\n                        when provided here, guides are\
  \ not designed for them\n                        and they do not need to be aligned.\n\
  \  --specific-against-taxa SPECIFIC_AGAINST_TAXA\n                        Path to\
  \ TSV file giving giving taxonomies from which\n                        to download\
  \ all genomes and ensure guides are specific\n                        against (i.e.,\
  \ not hit) these. The TSV file has 2\n                        columns: (1) a taxonomic\
  \ ID; (2) segment label, or\n                        'None' if unsegmented\n  --do-not-allow-gu-pairing\n\
  \                        When determining whether a guide binds to a region of\n\
  \                        target sequence, do not count G-U (wobble) base pairs\n\
  \                        as matching. Default is to tolerate G-U pairing:\n    \
  \                    namely, A in an output guide sequence matches G in the\n  \
  \                      target and C in an output guide sequence matches T in\n \
  \                       the target (since the synthesized guide is the reverse\n\
  \                        complement of the output guide sequence)\n  --required-guides\
  \ REQUIRED_GUIDES\n                        Path to a file that gives guide sequences\
  \ that will be\n                        included in the guide cover and output for\
  \ the windows\n                        in which they belong, e.g., if certain guide\
  \ sequences\n                        are shown experimentally to perform well. The\
  \ file\n                        must have 3 columns: col 1 gives an identifier for\
  \ the\n                        alignment that the guide covers, such that i\n  \
  \                      represents the i'th FASTA given as input (0-based);\n   \
  \                     col 2 gives a guide sequence; col 3 gives the start\n    \
  \                    position of the guide (0-based) in the alignment\n  --blacklisted-ranges\
  \ BLACKLISTED_RANGES\n                        Path to a file that gives ranges in\
  \ alignments from\n                        which guides will not be constructed.\
  \ The file must\n                        have 3 columns: col 1 gives an identifier\
  \ for the\n                        alignment that the range corresponds to, such\
  \ that i\n                        represents the i'th FASTA given as input (0-based);\n\
  \                        col 2 gives the start position of the range\n         \
  \               (inclusive); col 3 gives the end position of the range\n       \
  \                 (exclusive)\n  --blacklisted-kmers BLACKLISTED_KMERS\n       \
  \                 Path to a FASTA file that gives k-mers to blacklisted\n      \
  \                  from guide sequences. No guide sequences will be\n          \
  \              constructed that contain these k-mers. The k-mers make\n        \
  \                up the sequences in the FASTA file; the sequence names\n      \
  \                  are ignored. k-mers should be long enough so that not\n     \
  \                   too many guide sequences are deemed to be unsuitable,\n    \
  \                    and should be at most the length of the guide\n  --require-flanking5\
  \ REQUIRE_FLANKING5\n                        Require the given sequence on the 5'\
  \ protospacer\n                        flanking site (PFS) of each designed guide;\
  \ this\n                        tolerates ambiguity in the sequence (e.g., 'H'\n\
  \                        requires 'A', 'C', or 'T', or, equivalently, avoids\n \
  \                       guides flanked by 'G'). Note that this is the 5' end\n \
  \                       in the target sequence (not the spacer sequence).\n  --require-flanking3\
  \ REQUIRE_FLANKING3\n                        Require the given sequence on the 3'\
  \ protospacer\n                        flanking site (PFS) of each designed guide;\
  \ this\n                        tolerates ambiguity in the sequence (e.g., 'H'\n\
  \                        requires 'A', 'C', or 'T', or, equivalently, avoids\n \
  \                       guides flanked by 'G'). Note that this is the 3' end\n \
  \                       in the target sequence (not the spacer sequence).\n  --seed\
  \ SEED           SEED will set the random seed, guaranteeing the same\n        \
  \                output given the same inputs. If SEED is not set to\n         \
  \               the same value, output may vary across different runs.\n  --predict-activity-model-path\
  \ PREDICT_ACTIVITY_MODEL_PATH PREDICT_ACTIVITY_MODEL_PATH\n                    \
  \    Paths to directories containing serialized models in\n                    \
  \    TensorFlow's SavedModel format for predicting guide-\n                    \
  \    target activity. There are two arguments: (1)\n                        classification\
  \ model to determine which guides are\n                        active; (2) regression\
  \ model, which is used to\n                        determine which guides (among\
  \ active ones) are highly\n                        active. The models/ directory\
  \ contains example models.\n                        If not set, ADAPT does not predict\
  \ activities to use\n                        during design.\n  --predict-activity-thres\
  \ PREDICT_ACTIVITY_THRES PREDICT_ACTIVITY_THRES\n                        Thresholds\
  \ to use for decisions on output of\n                        predictive models.\
  \ There are two arguments: (1)\n                        classification threshold\
  \ for deciding which guide-\n                        target pairs are active (in\
  \ [0,1], where higher values\n                        have higher precision but\
  \ less recall); (2) regression\n                        threshold for deciding which\
  \ guide-target pairs are\n                        highly active (>= 0, where higher\
  \ values limit the\n                        number determined to be highly active).\
  \ If not set but\n                        --predict-activity-model-path is set,\
  \ then ADAPT uses\n                        default thresholds stored with the models.\n\
  \  --use-simple-binary-activity-prediction\n                        If set, predict\
  \ activity using a simple binary\n                        prediction between guide\
  \ and target according to their\n                        distance, with the threshold\
  \ determined based on\n                        --guide-mismatches. This is only\
  \ applicable when OBJ\n                        is 'maxmimize-activity'. This does\
  \ not use a\n                        serialized model for predicting activity, so\n\
  \                        --predict-activity-model-path should not be set when\n\
  \                        this is set.\n  --do-not-memoize-guide-computations\n \
  \                       If set, do not memoize computations during the search,\n\
  \                        including of guides identified at each site and of\n  \
  \                      specificity queries. This can be helpful for\n          \
  \              benchmarking the improvement of memoization, or if\n            \
  \            there is reason to believe memoization will slow the\n            \
  \            search (e.g., if possible amplicons rarely overlap).\n            \
  \            Note that activity predictions are still memoized.\n  --debug     \
  \          Debug output\n  --verbose             Verbose output\n  -pl PRIMER_LENGTH,\
  \ --primer-length PRIMER_LENGTH\n                        Length of primer in nt\n\
  \  -pp PRIMER_COVER_FRAC, --primer-cover-frac PRIMER_COVER_FRAC\n              \
  \          Same as --cover-frac, except for the design of primers\n            \
  \            -- i.e., the fraction of sequences that must be\n                 \
  \       covered by the primers, independently on each end\n  -pm PRIMER_MISMATCHES,\
  \ --primer-mismatches PRIMER_MISMATCHES\n                        Allow for this\
  \ number of mismatches when determining\n                        whether a primer\
  \ hybridizes to a sequence\n  --max-primers-at-site MAX_PRIMERS_AT_SITE\n      \
  \                  Only use primer sites that contain at most this number\n    \
  \                    of primers; if not set, there is no limit\n  --primer-gc-content-bounds\
  \ PRIMER_GC_CONTENT_BOUNDS PRIMER_GC_CONTENT_BOUNDS\n                        Only\
  \ use primer sites where all primers are within the\n                        given\
  \ GC content bounds. This consists of two values L\n                        and\
  \ H, each fractions in [0,1], such that primer GC\n                        content\
  \ must be in [L, H]. If not set, there are no\n                        bounds.\n\
  \  --max-target-length MAX_TARGET_LENGTH\n                        Only allow amplicons\
  \ (incl. primers) to be at most\n                        this number of nucleotides\
  \ long; if not set, there is\n                        no limit\n  --obj-fn-weights\
  \ OBJ_FN_WEIGHTS OBJ_FN_WEIGHTS\n                        Specify custom weights\
  \ to use in the objective\n                        function for a target. These\
  \ specify weights for\n                        penalties on primers and amplicons\
  \ relative to the\n                        guide objective. There are 2 weights\
  \ (A B), where the\n                        target objective function is [(guide\
  \ objective value)\n                        +/- (A*(total number of primers) + B*log2(amplicon\n\
  \                        length)]. It is + when --obj is minimize-guides and -\n\
  \                        when --obj is maximize-activity.\n  --best-n-targets BEST_N_TARGETS\n\
  \                        Only compute and output up to this number of targets.\n\
  \                        Note that runtime will generally be longer for higher\n\
  \                        values\n  --halt-search-early   If set, stop the target\
  \ search as soon as\n                        BEST_N_TARGETS have been identified.\
  \ The targets will\n                        meet the given constraints but may not\
  \ be optimal over\n                        the whole genome. They will likely be\
  \ from the\n                        beginning of the genome.\n  --only-account-for-amplified-seqs\n\
  \                        If set, design guides to cover GUIDE_COVER_FRAC of\n  \
  \                      just the sequences covered by the primers. This\n       \
  \                 changes the behavior of -gp/--guide-cover-frac. This\n       \
  \                 is only applicable when --obj is 'minimize-guides' as\n      \
  \                  it is not implemented for 'maximize-activity'. In\n         \
  \               total, >= (GUIDE_COVER_FRAC * (2 * PRIMER_COVER_FRAC -\n       \
  \                 1)) sequences will be covered. Using this may worsen\n       \
  \                 runtime because the sequences to consider for guide\n        \
  \                design will change more often across amplicons and\n          \
  \              therefore designs can be less easily memoized.\n  --mafft-path MAFFT_PATH\n\
  \                        Path to mafft executable, used for generating\n       \
  \                 alignments\n  --prep-memoize-dir PREP_MEMOIZE_DIR\n          \
  \              Path to directory in which to memoize alignments and\n          \
  \              statistics on them. If set to \"s3://BUCKET/PATH\", it\n        \
  \                will save to the S3 bucket if boto3 and botocore are\n        \
  \                installed and access key information exists via\n             \
  \           AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY or via AWS\n           \
  \             CLI. If not set, this does not memoize this\n                    \
  \    information.\n  --sample-seqs SAMPLE_SEQS\n                        After fetching\
  \ accessions, randomly select SAMPLE_SEQS\n                        of them with\
  \ replacement from each taxonomy any move\n                        forward in the\
  \ design with these. This is useful for\n                        testing and measuring\
  \ output growth as input size\n                        grows, as well as assessing\
  \ the dispersion in output\n                        associated with some input sample.\n\
  \  --prep-influenza      If set, fetch sequences using the NCBI Influenza\n    \
  \                    database; should only be used for Influenza A or B\n      \
  \                  virus taxonomies\n  --cover-by-year-decay COVER_BY_YEAR_DECAY\
  \ COVER_BY_YEAR_DECAY\n                        <A> <B>; if set, group input sequences\
  \ by year and set\n                        a desired partial cover for each year\
  \ (fraction of\n                        sequences that must be covered by guides)\
  \ as follows:\n                        All years >= A receive a desired cover fraction\
  \ of\n                        GUIDE_COVER_FRAC for guides (and PRIMER_COVER_FRAC\
  \ for\n                        primers). Each preceding year receives a desired\
  \ cover\n                        fraction that decays by B -- i.e., year n is given\n\
  \                        B*(desired cover fraction of year n+1).\n  --cluster-threshold\
  \ CLUSTER_THRESHOLD\n                        Maximum inter-cluster distance to use\
  \ when clustering\n                        input sequences prior to alignment. Expressed\
  \ as\n                        average nucleotide dissimilarity (1-ANI, where ANI\
  \ is\n                        average nucleotide identity); higher values result\
  \ in\n                        fewer clusters\n  --use-accessions USE_ACCESSIONS\n\
  \                        If set, use specified accessions instead of fetching\n\
  \                        neighbors for the given taxonomic ID(s). This provides\n\
  \                        a path to a TSV file with 3 columns: (1) a taxonomic\n\
  \                        ID; (2) segment label, or 'None' if unsegmented; (3)\n\
  \                        accession. Each row specifies an accession to use in\n\
  \                        the input, and values for columns 1 and 2 can appear\n\
  \                        in multiple rows.\n  --use-fasta USE_FASTA\n          \
  \              If set, use sequences in fasta instead of fetching\n            \
  \            neighbors for the given taxonomic ID(s). This provides\n          \
  \              a path to a TSV file with 3 columns: (1) a taxonomic\n          \
  \              ID; (2) segment label, or 'None' if unsegmented; (3)\n          \
  \              path to FASTA.\n  --only-design-for ONLY_DESIGN_FOR\n           \
  \             If set, only design for given taxonomies. This\n                 \
  \       provides a path to a TSV file with 2 columns: (1) a\n                  \
  \      taxonomic ID; (2) segment label, or 'None' if\n                        unsegmented\n\
  \  --taxa-to-ignore-for-specificity TAXA_TO_IGNORE_FOR_SPECIFICITY\n           \
  \             If set, specify which taxa should be ignored when\n              \
  \          enforcing specificity while designing for other taxa.\n             \
  \           This provides a path to a TSV file with 2 columns: (1)\n           \
  \             a taxonomic ID A; (2) a taxonomic ID B such that B\n             \
  \           should be ignored when determining specificity for A.\n            \
  \            When designing for A, this masks taxonomy B from all\n            \
  \            specificity queries. This is useful, e.g., if B is a\n            \
  \            subset of A.\n  --ncbi-api-key NCBI_API_KEY\n                     \
  \   API key to use for NCBI e-utils. Using this increases\n                    \
  \    the limit on requests/second and may prevent an IP\n                      \
  \  address from being blocked due to too many requests\n  --aws-access-key-id AWS_ACCESS_KEY_ID\n\
  \                        User Account Access Key for AWS. This is only\n       \
  \                 necessary if using S3 for memoization via\n                  \
  \      PREP_MEMOIZE_DIR and AWS CLI is not installed and\n                     \
  \   configured.\n  --aws-secret-access-key AWS_SECRET_ACCESS_KEY\n             \
  \           User Account Secret Access Key for AWS. This is only\n             \
  \           necessary if using S3 for memoization via\n                        PREP_MEMOIZE_DIR\
  \ and AWS CLI is not installed and\n                        configured.\n  --write-input-seqs\
  \    If set, write the sequences (accession.version) being\n                   \
  \     used as input for design to a file in OUT_TSV_DIR; the\n                 \
  \       filename is determined based on the label for each\n                   \
  \     taxonomy\n  --write-input-aln     If set, write the alignments being used\
  \ as input for\n                        design to a file in OUT_TSV_DIR; the filename\
  \ is\n                        determined based on the label for each taxonomy (they\n\
  \                        are '[label].[cluster-number].fasta'\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/adapt:1.2.0--py_0
