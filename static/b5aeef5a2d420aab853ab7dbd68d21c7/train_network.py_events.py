from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, Boolean, Int, Directory, String

Train_Network_Py_Events_V0_1_0 = CommandToolBuilder(tool="train_network.py_events", base_command=["train_network.py", "events"], inputs=[ToolInput(tag="in_adam", input_type=Float(optional=True), prefix="--adam", doc=InputDocumentation(doc="decay1 decay2\nParameters for Exponential Decay Adaptive Momementum\n(default: Values(rate=0.001, decay1=0.9,\ndecay2=0.999))")), ToolInput(tag="in_no_bad", input_type=Boolean(optional=True), prefix="--no-bad", doc=InputDocumentation(doc="Force blocks marked as bad to be stays (Default:")), ToolInput(tag="in_batch_size", input_type=Int(optional=True), prefix="--batch_size", doc=InputDocumentation(doc="Number of chunks to run in parallel (default: 100)")), ToolInput(tag="in_chunk_len_range", input_type=Int(optional=True), prefix="--chunk_len_range", doc=InputDocumentation(doc="max\nRandomly sample chunk sizes between min and max\n(fraction of chunk size in input file) (default: (0.5,\n1.0))")), ToolInput(tag="in_no_ilf", input_type=Boolean(optional=True), prefix="--no-ilf", doc=InputDocumentation(doc="Weight objective function by Inverse Label Frequency\n(Default: --no-ilf) (default: False)")), ToolInput(tag="in_l_two", input_type=Int(optional=True), prefix="--l2", doc=InputDocumentation(doc="L2 penalty on parameters (default: 0.0)")), ToolInput(tag="in_lr_decay", input_type=Float(optional=True), prefix="--lrdecay", doc=InputDocumentation(doc="Learning rate for batch i is adam.rate / (1.0 + i / n)\n(default: 5000)")), ToolInput(tag="in_min_prob", input_type=Float(optional=True), prefix="--min_prob", doc=InputDocumentation(doc="Minimum probability allowed for training (default:\n1e-30)")), ToolInput(tag="in_n_iteration", input_type=Int(optional=True), prefix="--niteration", doc=InputDocumentation(doc="Maximum number of batches to train for (default:\n50000)")), ToolInput(tag="in_no_overwrite", input_type=Directory(optional=True), prefix="--no-overwrite", doc=InputDocumentation(doc="Overwrite output directory (Default: --no-overwrite)\n(default: False)")), ToolInput(tag="in_re_weight", input_type=String(optional=True), prefix="--reweight", doc=InputDocumentation(doc="Select chunk according to weights in 'group' (default:\nweights)")), ToolInput(tag="in_save_every", input_type=Int(optional=True), prefix="--save_every", doc=InputDocumentation(doc="Save model every x batches (default: 5000)")), ToolInput(tag="in_sd", input_type=Float(optional=True), prefix="--sd", doc=InputDocumentation(doc="Standard deviation to initialise with (default: 0.5)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Set random number seed (default: None)")), ToolInput(tag="in_smooth", input_type=Float(optional=True), prefix="--smooth", doc=InputDocumentation(doc="Smoothing factor for reporting progress (default:\n0.45)")), ToolInput(tag="in_no_transducer", input_type=Boolean(optional=True), prefix="--no-transducer", doc=InputDocumentation(doc="Train a transducer based model (Default: --transducer)\n(default: True)")), ToolInput(tag="in_drop", input_type=Int(optional=True), prefix="--drop", doc=InputDocumentation(doc="Number of events to drop from start and end of chunk\nbefore evaluating loss (default: 20)")), ToolInput(tag="in_win_len", input_type=Int(optional=True), prefix="--winlen", doc=InputDocumentation(doc="Length of window over data (default: 3)")), ToolInput(tag="in_model", input_type=String(), position=0, doc=InputDocumentation(doc="File to read python model description from")), ToolInput(tag="in_output", input_type=String(), position=1, doc=InputDocumentation(doc="Prefix for output files")), ToolInput(tag="in_input", input_type=String(), position=2, doc=InputDocumentation(doc="HDF5 file containing chunks"))], outputs=[ToolOutput(tag="out_no_overwrite", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_no_overwrite", type_hint=File()), doc=OutputDocumentation(doc="Overwrite output directory (Default: --no-overwrite)\n(default: False)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Train_Network_Py_Events_V0_1_0().translate("wdl", allow_empty_container=True)

