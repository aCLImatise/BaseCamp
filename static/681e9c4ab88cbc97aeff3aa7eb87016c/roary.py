from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Directory, Boolean, Float, String

Roary_V0_1_0 = CommandToolBuilder(tool="roary", base_command=["roary"], inputs=[ToolInput(tag="in_number_of_threads", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="number of threads [1]")), ToolInput(tag="in_clusters_output_filename", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="clusters output filename [clustered_proteins]")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="-f", doc=InputDocumentation(doc="output directory [.]")), ToolInput(tag="in_create_multifasta_alignment", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="create a multiFASTA alignment of core genes using PRANK")), ToolInput(tag="in_fast_core_gene", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="fast core gene alignment with MAFFT, use with -e")), ToolInput(tag="in_minimum_percentage_identity", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="minimum percentage identity for blastp [95]")), ToolInput(tag="in_cd", input_type=Float(optional=True), prefix="-cd", doc=InputDocumentation(doc="percentage of isolates a gene must be in to be core [99]")), ToolInput(tag="in_qc", input_type=Boolean(optional=True), prefix="-qc", doc=InputDocumentation(doc="generate QC report with Kraken")), ToolInput(tag="in_path_kraken_qc", input_type=File(optional=True), prefix="-k", doc=InputDocumentation(doc="path to Kraken database for QC, use with -qc")), ToolInput(tag="in_check_dependancies_versions", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="check dependancies and print versions")), ToolInput(tag="in_blastp_executable", input_type=String(optional=True), prefix="-b", doc=InputDocumentation(doc="blastp executable [blastp]")), ToolInput(tag="in_mcl_executable", input_type=String(optional=True), prefix="-c", doc=InputDocumentation(doc="mcl executable [mcl]")), ToolInput(tag="in_mcxdeblast_executable", input_type=String(optional=True), prefix="-d", doc=InputDocumentation(doc="mcxdeblast executable [mcxdeblast]")), ToolInput(tag="in_maximum_number_clusters", input_type=Int(optional=True), prefix="-g", doc=InputDocumentation(doc="maximum number of clusters [50000]")), ToolInput(tag="in_makeblastdb_executable", input_type=String(optional=True), prefix="-m", doc=InputDocumentation(doc="makeblastdb executable [makeblastdb]")), ToolInput(tag="in_create_plots_requires", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="create R plots, requires R and ggplot2")), ToolInput(tag="in_do_split_paralogs", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="dont split paralogs")), ToolInput(tag="in_translation_table", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="translation table [11]")), ToolInput(tag="in_ap", input_type=Boolean(optional=True), prefix="-ap", doc=InputDocumentation(doc="allow paralogs in core alignment")), ToolInput(tag="in_delete_intermediate_files", input_type=Boolean(optional=True), prefix="-z", doc=InputDocumentation(doc="dont delete intermediate files")), ToolInput(tag="in_verbose_output_stdout", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="verbose output to STDOUT")), ToolInput(tag="in_print_version_exit", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="print version and exit")), ToolInput(tag="in_add_inference_information", input_type=Boolean(optional=True), prefix="-y", doc=InputDocumentation(doc="add gene inference information to spreadsheet, doesnt work with -e")), ToolInput(tag="in_iv", input_type=Float(optional=True), prefix="-iv", doc=InputDocumentation(doc="Change the MCL inflation value [1.5]"))], outputs=[ToolOutput(tag="out_clusters_output_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_clusters_output_filename", type_hint=File()), doc=OutputDocumentation(doc="clusters output filename [clustered_proteins]")), ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="output directory [.]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Roary_V0_1_0().translate("wdl", allow_empty_container=True)

