from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, Int, Float, Boolean

Methylpy_Dmrfind_V0_1_0 = CommandToolBuilder(tool="methylpy_DMRfind", base_command=["methylpy", "DMRfind"], inputs=[ToolInput(tag="in_all_c_files", input_type=Array(t=String(), optional=True), prefix="--allc-files", doc=InputDocumentation(doc="List of allc files. (default: None)")), ToolInput(tag="in_output_prefix", input_type=String(optional=True), prefix="--output-prefix", doc=InputDocumentation(doc="String indicating the prefix for output files\n(default: None)")), ToolInput(tag="in_samples", input_type=Array(t=String(), optional=True), prefix="--samples", doc=InputDocumentation(doc="List of space separated samples matching allc files.\nBy default sample names will be inferred from allc\nfilenames (default: None)")), ToolInput(tag="in_chrom_s", input_type=Array(t=String(), optional=True), prefix="--chroms", doc=InputDocumentation(doc="Space separated listing of chromosomes where DMRs will\nbe called. If not specified, DMRs will be called\nacross the chromosomes/contigs that contained any data\nin all allc files. (default: None)")), ToolInput(tag="in_mc_type", input_type=Array(t=String(), optional=True), prefix="--mc-type", doc=InputDocumentation(doc="List of space separated mc nucleotide contexts for\nwhich you want to look for DMRs. These classifications\nmay use the wildcards H (indicating anything but a G)\nand N (indicating any nucleotide). (default: ['CGN'])")), ToolInput(tag="in_num_procs", input_type=Int(optional=True), prefix="--num-procs", doc=InputDocumentation(doc="Number of processors you wish to use to parallelize\nthis function (default: 1)")), ToolInput(tag="in_min_cov", input_type=Int(optional=True), prefix="--min-cov", doc=InputDocumentation(doc="Minimum number of reads that must cover a site for it\nto be considered. (default: 0)")), ToolInput(tag="in_dmr_max_dist", input_type=Int(optional=True), prefix="--dmr-max-dist", doc=InputDocumentation(doc="Maximum distance two significant sites can be to be\nincluded in the same block. (default: 250)")), ToolInput(tag="in_sig_cut_off", input_type=Float(optional=True), prefix="--sig-cutoff", doc=InputDocumentation(doc="Float indicating at what FDR you want to consider a\nresult significant. (default: 0.01)")), ToolInput(tag="in_num_sims", input_type=Int(optional=True), prefix="--num-sims", doc=InputDocumentation(doc="Number of permutation tests you would like to run to\nestimate the p-values of the differential methylation\ntests (default: 3000)")), ToolInput(tag="in_min_tests", input_type=Int(optional=True), prefix="--min-tests", doc=InputDocumentation(doc="Minimum number of permuation tests you\ would d like\nto run for each mC (default: 100)")), ToolInput(tag="in_min_num_dms", input_type=Int(optional=True), prefix="--min-num-dms", doc=InputDocumentation(doc="The minimum number of differentially methylated sites\nthat a differentially methylated region needs to\ncontain to be reported (default: 0)")), ToolInput(tag="in_sample_category", input_type=Array(t=String(), optional=True), prefix="--sample-category", doc=InputDocumentation(doc="A list of categories that each respective sample\nbelongs to; the categories must begin at 0 and\nincrease by 1 for each category added. ex: samples\n[A,B,C] categories [0,1,2] or categories [0, 1, 0]\n(default: False)")), ToolInput(tag="in_mc_max_dist", input_type=Int(optional=True), prefix="--mc-max-dist", doc=InputDocumentation(doc="Integer indicating the maximum distance two sites can\nbe from one another for their methylation counts to be\ncombined. This option helps with low coverage\nexperiments where you may want to leverage the\ncorrelation of methylation between sites to get more\nstatistical power. (default: 0)")), ToolInput(tag="in_resid_cut_off", input_type=Float(optional=True), prefix="--resid-cutoff", doc=InputDocumentation(doc="Results will have to show deviations in the\ncontingency table in the same direction as the rest of\nthe window (default: 0.01)")), ToolInput(tag="in_keep_temp_files", input_type=Boolean(optional=True), prefix="--keep-temp-files", doc=InputDocumentation(doc="Boolean indicating that you would like to keep the\nintermediate files generated by this function. This\ncan be useful for debugging, but in general should be\nleft False. (default: False)")), ToolInput(tag="in_min_cluster", input_type=Int(optional=True), prefix="--min-cluster", doc=InputDocumentation(doc="The minimum number of each sample category that must\nbe present in every block that is output. (default: 2)")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="A seed to provide to the random number generator for\npermutation testing. Only change this if you are\ndebugging and want to make sure the permutation output\nis consistent (default: -1)\n"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Methylpy_Dmrfind_V0_1_0().translate("wdl", allow_empty_container=True)

