from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String

Jmod_V0_1_0 = CommandToolBuilder(tool="jmod", base_command=["jmod"], inputs=[ToolInput(tag="in_class_path", input_type=File(optional=True), prefix="--class-path", doc=InputDocumentation(doc="Application jar files|dir containing")), ToolInput(tag="in_config", input_type=File(optional=True), prefix="--config", doc=InputDocumentation(doc="Location of user-editable config files")), ToolInput(tag="in_dir", input_type=File(optional=True), prefix="--dir", doc=InputDocumentation(doc="Target directory for extract")), ToolInput(tag="in_dry_run", input_type=Boolean(optional=True), prefix="--dry-run", doc=InputDocumentation(doc="Dry run of hash mode")), ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="Exclude files matching the supplied\ncomma separated pattern list, each\nelement using one the following\nforms: <glob-pattern>, glob:<glob-\npattern> or regex:<regex-pattern>")), ToolInput(tag="in_hash_modules", input_type=File(optional=True), prefix="--hash-modules", doc=InputDocumentation(doc="Compute and record hashes to tie a\npackaged module with modules\nmatching the given <regex-pattern>\nand depending upon it directly or\nindirectly. The hashes are recorded\nin the JMOD file being created, or a\nJMOD file or modular JAR on the\nmodule path specified the jmod hash\ncommand.")), ToolInput(tag="in_header_files", input_type=File(optional=True), prefix="--header-files", doc=InputDocumentation(doc="Location of header files")), ToolInput(tag="in_help_extra", input_type=Boolean(optional=True), prefix="--help-extra", doc=InputDocumentation(doc="Print help on extra options")), ToolInput(tag="in_legal_notices", input_type=File(optional=True), prefix="--legal-notices", doc=InputDocumentation(doc="Location of legal notices")), ToolInput(tag="in_libs", input_type=File(optional=True), prefix="--libs", doc=InputDocumentation(doc="Location of native libraries")), ToolInput(tag="in_main_class", input_type=Boolean(optional=True), prefix="--main-class", doc=InputDocumentation(doc="<String: class-name>   Main class")), ToolInput(tag="in_man_pages", input_type=File(optional=True), prefix="--man-pages", doc=InputDocumentation(doc="Location of man pages")), ToolInput(tag="in_module_version", input_type=String(optional=True), prefix="--module-version", doc=InputDocumentation(doc="Module version")), ToolInput(tag="in_module_path", input_type=File(optional=True), prefix="--module-path", doc=InputDocumentation(doc="Module path")), ToolInput(tag="in_target_platform", input_type=Boolean(optional=True), prefix="--target-platform", doc=InputDocumentation(doc="<String: target-  Target platform\nplatform>")), ToolInput(tag="in_create", input_type=String(), position=0, doc=InputDocumentation(doc="- Creates a new jmod archive")), ToolInput(tag="in_extract", input_type=String(), position=1, doc=InputDocumentation(doc="- Extracts all the files from the archive")), ToolInput(tag="in_list", input_type=String(), position=2, doc=InputDocumentation(doc="- Prints the names of all the entries")), ToolInput(tag="in_describe", input_type=String(), position=3, doc=InputDocumentation(doc="- Prints the module details")), ToolInput(tag="in_hash", input_type=String(), position=4, doc=InputDocumentation(doc="- Records hashes of tied modules.")), ToolInput(tag="in_option", input_type=String(), position=5, doc=InputDocumentation(doc="Description                           ")), ToolInput(tag="in_classes", input_type=String(), position=0, doc=InputDocumentation(doc="--cmds <path>                       Location of native commands           "))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Jmod_V0_1_0().translate("wdl", allow_empty_container=True)

