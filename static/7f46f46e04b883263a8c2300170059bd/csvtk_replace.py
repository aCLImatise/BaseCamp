from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, String, File

Csvtk_Replace_V0_1_0 = CommandToolBuilder(tool="csvtk_replace", base_command=["csvtk", "replace"], inputs=[ToolInput(tag="in_fields", input_type=Int(optional=True), prefix="--fields", doc=InputDocumentation(doc="select only these fields. e.g -f 1,2 or -f columnA,columnB (default '1')")), ToolInput(tag="in_fuzzy_fields", input_type=Boolean(optional=True), prefix="--fuzzy-fields", doc=InputDocumentation(doc="using fuzzy fields, e.g., -F -f '*name' or -F -f 'id123*'")), ToolInput(tag="in_ignore_case", input_type=Boolean(optional=True), prefix="--ignore-case", doc=InputDocumentation(doc="ignore case")), ToolInput(tag="in_keep_key", input_type=Boolean(optional=True), prefix="--keep-key", doc=InputDocumentation(doc="keep the key as value when no value found for the key")), ToolInput(tag="in_key_capt_idx", input_type=Int(optional=True), prefix="--key-capt-idx", doc=InputDocumentation(doc="capture variable index of key (1-based) (default 1)")), ToolInput(tag="in_key_miss_repl", input_type=String(optional=True), prefix="--key-miss-repl", doc=InputDocumentation(doc="replacement for key with no corresponding value")), ToolInput(tag="in_kv_file", input_type=File(optional=True), prefix="--kv-file", doc=InputDocumentation(doc="tab-delimited key-value file for replacing key with value when using '{kv}' in -r (--replacement)")), ToolInput(tag="in_kv_file_all_left_columns_as_value", input_type=Boolean(optional=True), prefix="--kv-file-all-left-columns-as-value", doc=InputDocumentation(doc="treat all columns except 1th one as value for kv-file with more than 2 columns")), ToolInput(tag="in_nr_width", input_type=Int(optional=True), prefix="--nr-width", doc=InputDocumentation(doc="minimum width for {nr} in flag -r/--replacement. e.g., formating '1' to '001' by --nr-width 3 (default 1)")), ToolInput(tag="in_pattern", input_type=String(optional=True), prefix="--pattern", doc=InputDocumentation(doc="search regular expression")), ToolInput(tag="in_replacement", input_type=Int(optional=True), prefix="--replacement", doc=InputDocumentation(doc="replacement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: for *nix OS, use SINGLE quote NOT double quotes or use the \ escape character. Record number is also supported by '{nr}'.use ${1} instead of $1 when {kv} given!")), ToolInput(tag="in_chunk_size", input_type=Int(optional=True), prefix="--chunk-size", doc=InputDocumentation(doc="chunk size of CSV reader (default 50)")), ToolInput(tag="in_comment_char", input_type=String(optional=True), prefix="--comment-char", doc=InputDocumentation(doc="lines starting with commment-character will be ignored. if your header row starts with '#', please assign '-C' another rare symbol, e.g. '$' (default '#')")), ToolInput(tag="in_delimiter", input_type=File(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="delimiting character of the input CSV file (default ',')")), ToolInput(tag="in_ignore_empty_row", input_type=Boolean(optional=True), prefix="--ignore-empty-row", doc=InputDocumentation(doc="ignore empty rows")), ToolInput(tag="in_ignore_illegal_row", input_type=Boolean(optional=True), prefix="--ignore-illegal-row", doc=InputDocumentation(doc="ignore illegal rows")), ToolInput(tag="in_in_file_list", input_type=File(optional=True), prefix="--infile-list", doc=InputDocumentation(doc="file of input files list (one file per line), if given, they are appended to files from cli arguments")), ToolInput(tag="in_lazy_quotes", input_type=Boolean(optional=True), prefix="--lazy-quotes", doc=InputDocumentation(doc="if given, a quote may appear in an unquoted field and a non-doubled quote may appear in a quoted field")), ToolInput(tag="in_no_header_row", input_type=Boolean(optional=True), prefix="--no-header-row", doc=InputDocumentation(doc="specifies that the input CSV file does not have header row")), ToolInput(tag="in_num_cpus", input_type=Int(optional=True), prefix="--num-cpus", doc=InputDocumentation(doc="number of CPUs to use (default value depends on your computer) (default 8)")), ToolInput(tag="in_out_delimiter", input_type=File(optional=True), prefix="--out-delimiter", doc=InputDocumentation(doc="delimiting character of the output CSV file, e.g., -D $'\t' for tab (default ',')")), ToolInput(tag="in_out_file", input_type=File(optional=True), prefix="--out-file", doc=InputDocumentation(doc="out file ('-' for stdout, suffix .gz for gzipped out) (default '-')")), ToolInput(tag="in_out_tabs", input_type=Boolean(optional=True), prefix="--out-tabs", doc=InputDocumentation(doc="specifies that the output is delimited with tabs. Overrides '-D'")), ToolInput(tag="in_tabs", input_type=Boolean(optional=True), prefix="--tabs", doc=InputDocumentation(doc="specifies that the input CSV file is delimited with tabs. Overrides '-d'"))], outputs=[ToolOutput(tag="out_out_delimiter", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_delimiter", type_hint=File()), doc=OutputDocumentation(doc="delimiting character of the output CSV file, e.g., -D $'\t' for tab (default ',')")), ToolOutput(tag="out_out_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_file", type_hint=File()), doc=OutputDocumentation(doc="out file ('-' for stdout, suffix .gz for gzipped out) (default '-')"))], container="quay.io/biocontainers/csvtk:0.22.0--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Csvtk_Replace_V0_1_0().translate("wdl")

