from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String

Domclust_V0_1_0 = CommandToolBuilder(tool="domclust", base_command=["domclust"], inputs=[ToolInput(tag="in_use_similarity_measure", input_type=Boolean(optional=True), prefix="-S", doc=InputDocumentation(doc="use similarity as a measure of relatedness [on]")), ToolInput(tag="in_use_distance_disimilarity", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="use distance (or disimilarity) as a measure of relatedness")), ToolInput(tag="in_cutoff_scoredistance_also", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="#    cutoff score/distance (can also be spcified as -S# or -d#) [60]")), ToolInput(tag="in_ci", input_type=Boolean(optional=True), prefix="-ci", doc=InputDocumentation(doc="#   cutoff score/distance among ingroup organisms")), ToolInput(tag="in_scoredistance_missing_relationships", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="#    score/distance for missing relationships (m<c)")), ToolInput(tag="in_mr", input_type=Boolean(optional=True), prefix="-mr", doc=InputDocumentation(doc="#   specify a missing score as a ratio to c (0<mr<1) [0.95]")), ToolInput(tag="in_cutoff_score_cc", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="#    cutoff score for domain split (c<=C)")), ToolInput(tag="in_alignment_coverage_v", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="#    alignment coverage for domain split (0<=V<=1)")), ToolInput(tag="in_minimum_organisms_clusters", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="#    minimum # of organisms in clusters to be output [2]")), ToolInput(tag="in_ne", input_type=Boolean(optional=True), prefix="-ne", doc=InputDocumentation(doc="#   minimum # of entries in clusters to be output [2]")), ToolInput(tag="in_ratio_phylogenetic_pattern", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="#    ratio of phylogenetic pattern overlap for tree cutting [0.5]")), ToolInput(tag="in_homology_clustering_ie", input_type=Boolean(optional=True), prefix="-H", doc=InputDocumentation(doc="homology clustering (i.e. skip the tree cutting)")), ToolInput(tag="in_ho", input_type=Boolean(optional=True), prefix="-HO", doc=InputDocumentation(doc="hierachical combination of homology/orthology clustering")), ToolInput(tag="in_a_i", input_type=Boolean(optional=True), prefix="-ai", doc=InputDocumentation(doc="#   member overlap for absorbing adjacent small clusters (0<=ai<=1)")), ToolInput(tag="in_ao", input_type=Boolean(optional=True), prefix="-ao", doc=InputDocumentation(doc="#   member overlap for merging adjacent clusters (0<=ao<=ai)")), ToolInput(tag="in_fn_use_file", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="<fn> use a tree file for weighting related genomes")), ToolInput(tag="in_fn_restore_dump", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="<fn> restore from dump file")), ToolInput(tag="in_output_format_default", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="#    output format (default: 0:SimpleList)\n1:Tree, 2:Newick, 3:Newick with length (when -d is specified),\n4:Hierarchical, 5:ClusterTable, 6:Graph, 9:Table, 10:Dump")), ToolInput(tag="in_o_out_group", input_type=Int(optional=True), prefix="-Ooutgroup", doc=InputDocumentation(doc=",sp2,..  treat sp1,sp2,.. as outgroup")), ToolInput(tag="in_o_horiz_weight", input_type=Boolean(optional=True), prefix="-Ohorizweight", doc=InputDocumentation(doc="=#        relative weight for horiz. transfer (0<=x<=1)")), ToolInput(tag="in_o_output_score", input_type=Boolean(optional=True), prefix="-OoutputScore", doc=InputDocumentation(doc="=#        output score/distance at the root of each cluster")), ToolInput(tag="in_o_meta", input_type=Int(optional=True), prefix="-Ometa", doc=InputDocumentation(doc=",..          the specified genomes are treated as metagenomes")), ToolInput(tag="in_o_tax_map_out", input_type=Boolean(optional=True), prefix="-OtaxMapOut", doc=InputDocumentation(doc="=#          output taxonomy mapping of metagenomic data")), ToolInput(tag="in_o_tax_map_spec", input_type=Int(optional=True), prefix="-OtaxMapSpec", doc=InputDocumentation(doc=",..    target species for taxonomy mapping [=meta]")), ToolInput(tag="in_hom_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_gene_tab", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Domclust_V0_1_0().translate("wdl", allow_empty_container=True)

