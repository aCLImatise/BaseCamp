from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Boolean

Taxsbp_V0_1_0 = CommandToolBuilder(tool="taxsbp", base_command=["taxsbp"], inputs=[ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--input-file", doc=InputDocumentation(doc="Tab-separated with the fields: sequence id <tab>\nsequence length <tab> taxonomic id [<tab>\nspecialization]")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="Path to the output tab-separated file. Fields:\nsequence id <tab> sequence start <tab> sequence end\n<tab> sequence length <tab> taxonomic id <tab> bin id\n[<tab> specialization]. Default: STDOUT")), ToolInput(tag="in_nodes_file", input_type=File(optional=True), prefix="--nodes-file", doc=InputDocumentation(doc="nodes.dmp from NCBI Taxonomy")), ToolInput(tag="in_merged_file", input_type=File(optional=True), prefix="--merged-file", doc=InputDocumentation(doc="merged.dmp from NCBI Taxonomy")), ToolInput(tag="in_bin_len", input_type=Int(optional=True), prefix="--bin-len", doc=InputDocumentation(doc="Maximum bin length (in bp). Use this parameter insted\nof -b to define the number of bins. Default: length of\nthe biggest group [Mutually exclusive -b]")), ToolInput(tag="in_bins", input_type=Int(optional=True), prefix="--bins", doc=InputDocumentation(doc="Approximate number of bins (estimated by total\nlength/bin number). [Mutually exclusive -l]")), ToolInput(tag="in_fragment_len", input_type=String(optional=True), prefix="--fragment-len", doc=InputDocumentation(doc="Fragment sequences into pieces")), ToolInput(tag="in_overlap_len", input_type=Int(optional=True), prefix="--overlap-len", doc=InputDocumentation(doc="Overlap length between fragments [Only valid with -a]")), ToolInput(tag="in_pre_cluster", input_type=String(optional=True), prefix="--pre-cluster", doc=InputDocumentation(doc="Pre-cluster sequences into any existing rank, leaves\nor specialization. Entries will not be divided in bins\n['leaves',specialization name,rank name]")), ToolInput(tag="in_bin_exclusive", input_type=String(optional=True), prefix="--bin-exclusive", doc=InputDocumentation(doc="Make bins rank, leaves or specialization exclusive.\nBins will not have mixed entries. When the chosen rank\nis not present on a sequence lineage, this sequence\nwill be leaf/specialization exclusive.\n['leaves',specialization name,rank name]")), ToolInput(tag="in_specialization", input_type=String(optional=True), prefix="--specialization", doc=InputDocumentation(doc="Specialization name (e.g. assembly, strain). If given,\nTaxSBP will cluster entries on a specialized level\nafter the leaf. The specialization identifier should\nbe provided as an extra collumn in the input_file and\nshould respect the taxonomic hiercharchy: One leaf can\nhave multiple specializations but a specialization is\npresent in only one leaf")), ToolInput(tag="in_update_file", input_type=File(optional=True), prefix="--update-file", doc=InputDocumentation(doc="Previously generated clusters to be updated. Output\nonly new sequences")), ToolInput(tag="in_allow_merge", input_type=Boolean(optional=True), prefix="--allow-merge", doc=InputDocumentation(doc="When updating, allow merging of existing bins. Will\noutput the whole set, not only new bins")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="--silent", doc=InputDocumentation(doc="Do not print warning to STDERR"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="Path to the output tab-separated file. Fields:\nsequence id <tab> sequence start <tab> sequence end\n<tab> sequence length <tab> taxonomic id <tab> bin id\n[<tab> specialization]. Default: STDOUT"))], container="quay.io/biocontainers/taxsbp:1.1.1--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Taxsbp_V0_1_0().translate("wdl")

