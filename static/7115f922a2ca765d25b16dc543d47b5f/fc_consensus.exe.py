from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Fc_Consensus_Exe_V0_1_0 = CommandToolBuilder(tool="fc_consensus.exe", base_command=["fc_consensus.exe"], inputs=[ToolInput(tag="in__mincov_coverage", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="=, --min_cov=         int     6       minimum coverage to break the")), ToolInput(tag="in_max_cov_aln", input_type=Boolean(optional=True), prefix="--max_cov_aln", doc=InputDocumentation(doc="=          int     0       maximum coverage of alignment data; a\nseed read with more than MAX_COV_ALN\naverage depth of coverage of the\nlongest alignments will be capped,\nexcess shorter alignments will be\nignored")), ToolInput(tag="in_min_len_aln", input_type=Boolean(optional=True), prefix="--min_len_aln", doc=InputDocumentation(doc="=          int     0       minimum length of a sequence in an\nalignment to be used in consensus; any\nshorter sequence will be completely\nignored")), ToolInput(tag="in_min_n_read", input_type=Boolean(optional=True), prefix="--min_n_read", doc=InputDocumentation(doc="=           int     10      1 + minimum number of reads used in\ngenerating the consensus; a seed read\nwith fewer alignments will be\ncompletely ignored")), ToolInput(tag="in_max_n_read", input_type=Boolean(optional=True), prefix="--max_n_read", doc=InputDocumentation(doc="=           int     500     1 + maximum number of reads used in\ngenerating the consensus")), ToolInput(tag="in_trim", input_type=Boolean(optional=True), prefix="--trim", doc=InputDocumentation(doc="bool    false   trim the input sequence with k-mer\nspare dynamic programming to find the\nmapped range")), ToolInput(tag="in_output_full", input_type=Boolean(optional=True), prefix="--output_full", doc=InputDocumentation(doc="bool    false   output uncorrected regions too")), ToolInput(tag="in_output_multi", input_type=Boolean(optional=True), prefix="--output_multi", doc=InputDocumentation(doc="bool    false   output multiple correct regions")), ToolInput(tag="in_min_idt", input_type=Boolean(optional=True), prefix="--min_idt", doc=InputDocumentation(doc="=              string  '0.70'  minimum identity of the alignments\nused for correction (32-bit float)")), ToolInput(tag="in__edgetolerance_int", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="=, --edge_tolerance=  int     1000    for trimming, the there is unaligned\nedge leng > edge_tolerance, ignore the\nread")), ToolInput(tag="in_trim_size", input_type=Boolean(optional=True), prefix="--trim_size", doc=InputDocumentation(doc="=            int     50      the size for triming both ends from\ninitial sparse aligned region")), ToolInput(tag="in__ncore_int", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="=, --n_core=          int     24      number of processes used for\ngenerating consensus (not sure this\nlimit works yet); 0 for main process\nonly\n")), ToolInput(tag="in_consensus", input_type=String(), position=0, doc=InputDocumentation(doc="--min_cov_aln=          int     10      minimum coverage of alignment data; a"))], outputs=[], container="quay.io/biocontainers/nim-falcon:3.0.2--h1341992_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fc_Consensus_Exe_V0_1_0().translate("wdl")

