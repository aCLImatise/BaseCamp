version 1.0

task PhiSpypy {
  input {
    Directory? output_dir
    Int? make_training_data
    String? training_set
    Boolean? list
    File? file_prefix
    Boolean? run_evaluation_mode
    Int? number
    Int? min_contig_size
    Int? window_size
    Int? non_prophage_gene_gaps
    Int? phage_genes
    Array[String] metrics
    Int? random_forest_trees
    Boolean? expand_slope
    String? km_ers_type
    String? ph_mms
    File? color
    Int? threads
    File? output_choice
    Boolean? include_all_repeats
    Int? extra_dna
    Int? min_repeat_len
    File? log
    Boolean? quiet
    Boolean? delete_temp_files
  }
  command <<<
    PhiSpy_py \
      ~{if defined(output_dir) then ("--output_dir " +  '"' + output_dir + '"') else ""} \
      ~{if defined(make_training_data) then ("--make_training_data " +  '"' + make_training_data + '"') else ""} \
      ~{if defined(training_set) then ("--training_set " +  '"' + training_set + '"') else ""} \
      ~{if (list) then "--list" else ""} \
      ~{if defined(file_prefix) then ("--file_prefix " +  '"' + file_prefix + '"') else ""} \
      ~{if (run_evaluation_mode) then "-e" else ""} \
      ~{if defined(number) then ("--number " +  '"' + number + '"') else ""} \
      ~{if defined(min_contig_size) then ("--min_contig_size " +  '"' + min_contig_size + '"') else ""} \
      ~{if defined(window_size) then ("--window_size " +  '"' + window_size + '"') else ""} \
      ~{if defined(non_prophage_gene_gaps) then ("--nonprophage_genegaps " +  '"' + non_prophage_gene_gaps + '"') else ""} \
      ~{if defined(phage_genes) then ("--phage_genes " +  '"' + phage_genes + '"') else ""} \
      ~{if defined(metrics) then ("--metrics " +  '"' + metrics + '"') else ""} \
      ~{if defined(random_forest_trees) then ("--randomforest_trees " +  '"' + random_forest_trees + '"') else ""} \
      ~{if (expand_slope) then "--expand_slope" else ""} \
      ~{if defined(km_ers_type) then ("--kmers_type " +  '"' + km_ers_type + '"') else ""} \
      ~{if defined(ph_mms) then ("--phmms " +  '"' + ph_mms + '"') else ""} \
      ~{if (color) then "--color" else ""} \
      ~{if defined(threads) then ("--threads " +  '"' + threads + '"') else ""} \
      ~{if defined(output_choice) then ("--output_choice " +  '"' + output_choice + '"') else ""} \
      ~{if (include_all_repeats) then "--include_all_repeats" else ""} \
      ~{if defined(extra_dna) then ("--extra_dna " +  '"' + extra_dna + '"') else ""} \
      ~{if defined(min_repeat_len) then ("--min_repeat_len " +  '"' + min_repeat_len + '"') else ""} \
      ~{if defined(log) then ("--log " +  '"' + log + '"') else ""} \
      ~{if (quiet) then "--quiet" else ""} \
      ~{if (delete_temp_files) then "-k" else ""}
  >>>
  parameter_meta {
    output_dir: "The output directory to write the results"
    make_training_data: "Create training data from a set of annotated genome\\nfiles. Requires is_phage=1 qualifier in prophage's\\nCDSs"
    training_set: "Choose the most closely related set to your genome.\\n[Default data/trainSet_genericAll.txt]"
    list: "List the available training sets and exit"
    file_prefix: "An optional prefix to prepend to all of the output\\nfiles"
    run_evaluation_mode: "[EVALUATE], --evaluate [EVALUATE]\\nRun in evaluation mode -- does not generate new data,\\nbut reruns the evaluation"
    number: "Number of consecutive genes in a region of window size\\nthat must be prophage genes to be called. [Default: 5]"
    min_contig_size: "Minimum contig size (in bp) to be included in the\\nanalysis. Smaller contigs will be dropped. [Default:\\n30]"
    window_size: "Window size of consecutive genes to look through to\\nfind phages. [Default: 30]"
    non_prophage_gene_gaps: "The number of non phage genes betweeen prophages.\\n[Default: 10]"
    phage_genes: "The minimum number of genes that must be identified as\\nbelonging to a phage for the region to be included.\\nThe default is 2 or more genes."
    metrics: "The set of metrics to consider during classification.\\nIf not set, all metrics (orf_length_med,\\nshannon_slope, at_skew, gc_skew, max_direction) will\\nbe considered."
    random_forest_trees: "Number of trees generated by Random Forest classifier.\\n[Default: 500]"
    expand_slope: "Use the product of the slope of the Shannon scores in\\nmaking test sets"
    km_ers_type: "Type of kmers used for calculating Shannon scores.\\n[Default: all]"
    ph_mms: "Phage HMM profile database (like pVOGs) will be mapped\\nagainst the genome of interest and used as additional\\nfeature to identify prophages. Note that this is\\nexperimental at the moment"
    color: "If set, within the output GenBank file CDSs with phmms\\nhits will be colored (for viewing in Artemis)."
    threads: "Number of threads to use while searching with phmms\\nand the random forest. [default: 2]"
    output_choice: "Sum of codes for files to output. For more details see\\nthe README.md file at\\nhttps://github.com/linsalrob/PhiSpy#choosing-which-\\noutput-files-are-created. [default: 3]"
    include_all_repeats: "include all repeats in the genbank output"
    extra_dna: "additional DNA flanking the predicted prophage to test\\nfor repeats [Default 2000]"
    min_repeat_len: "minimum repeat length to search for [Default: 10]"
    log: "Name of the log file to write details to [Default:\\nphispy.log]"
    quiet: "Run in quiet mode"
    delete_temp_files: "[KEEP], --keep [KEEP]\\nDo not delete temp files"
  }
  output {
    File out_stdout = stdout()
    Directory out_output_dir = "${in_output_dir}"
    File out_color = "${in_color}"
    File out_output_choice = "${in_output_choice}"
  }
}