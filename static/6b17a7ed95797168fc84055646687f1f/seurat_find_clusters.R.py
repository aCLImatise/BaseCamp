from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Seurat_Find_Clusters_R_V0_1_0 = CommandToolBuilder(tool="seurat_find_clusters.R", base_command=["seurat-find-clusters.R"], inputs=[ToolInput(tag="in_input_object_file", input_type=File(optional=True), prefix="--input-object-file", doc=InputDocumentation(doc="File name in which a serialized R matrix object may be found.")), ToolInput(tag="in_input_format", input_type=String(optional=True), prefix="--input-format", doc=InputDocumentation(doc="Either loom, seurat, anndata or singlecellexperiment for the input format to read.")), ToolInput(tag="in_output_format", input_type=String(optional=True), prefix="--output-format", doc=InputDocumentation(doc="Either loom, seurat, anndata or singlecellexperiment for the output format.")), ToolInput(tag="in_resolution", input_type=Int(optional=True), prefix="--resolution", doc=InputDocumentation(doc="Value of the resolution parameter, use a value above (below) 1.0 if you want to obtain a larger (smaller) number of communities.")), ToolInput(tag="in_algorithm", input_type=Int(optional=True), prefix="--algorithm", doc=InputDocumentation(doc="Algorithm for modularity optimization (1 = original Louvain algorithm; 2 = Louvain algorithm with multilevel refinement; 3 = SLM algorithm; 4 Leiden).")), ToolInput(tag="in_tmp_file_location", input_type=File(optional=True), prefix="--tmp-file-location", doc=InputDocumentation(doc="Directory where intermediate files will be written. Specify the ABSOLUTE path.")), ToolInput(tag="in_modularity_fxn", input_type=Int(optional=True), prefix="--modularity-fxn", doc=InputDocumentation(doc="Modularity function: 1 standard, 2 alternative.")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="Method for leiden  (defaults to matrix which is fast for small datasets). Enable method = 'igraph' to avoid casting large data to a dense matrix.")), ToolInput(tag="in_output_object_file", input_type=File(optional=True), prefix="--output-object-file", doc=InputDocumentation(doc="File name in which to store serialized R object of type 'Seurat'.'")), ToolInput(tag="in_output_text_file", input_type=File(optional=True), prefix="--output-text-file", doc=InputDocumentation(doc="File name in which to store text format set of clusters.")), ToolInput(tag="in_graph_name", input_type=String(optional=True), prefix="--graph-name", doc=InputDocumentation(doc="Name of graph to use for the clustering algorithm.")), ToolInput(tag="in_n_random_starts", input_type=Int(optional=True), prefix="--nrandom-starts", doc=InputDocumentation(doc="Number of random starts")), ToolInput(tag="in_n_iterations", input_type=Int(optional=True), prefix="--n-iterations", doc=InputDocumentation(doc="Maximal number of iterations per random start")), ToolInput(tag="in_group_singletons", input_type=Boolean(optional=True), prefix="--group-singletons", doc=InputDocumentation(doc="Group singletons into nearest cluster. If FALSE, assign all singletons to a 'singleton' group")), ToolInput(tag="in_random_seed", input_type=Int(optional=True), prefix="--random-seed", doc=InputDocumentation(doc="Seed of the random number generator"))], outputs=[ToolOutput(tag="out_output_object_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_object_file", type_hint=File()), doc=OutputDocumentation(doc="File name in which to store serialized R object of type 'Seurat'.'")), ToolOutput(tag="out_output_text_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_text_file", type_hint=File()), doc=OutputDocumentation(doc="File name in which to store text format set of clusters."))], container="quay.io/biocontainers/seurat-scripts:0.0.9--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Seurat_Find_Clusters_R_V0_1_0().translate("wdl")

