!Command
command:
- bl-exclude
positional:
- !Positional
  optional: false
  position: 0
  name: exclude
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - -x
  description: "each line in EXCLUDE_FILE is truncated by a space or tab and\nstored\
    \ as an id to exclude"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -k
  description: invert exclude file to keep entries
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -i
  description: specify multiple INPUT files
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  description: specify multiple OUTPUT files
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\nusage: exclude -x EXCLUDE_FILE [-k] [...] [-i INPUT ...] [-o OUTPUT\
  \ ...]\n\nFilters all the reads in the input files (FASTA or FASTQ is automatically\n\
  detected) and excludes those with ids found in any of the EXCLUDE_FILEs.\n\nIf no\
  \ inputs are specified, input is read from stdin. If no outputs are\nspecified,\
  \ stdout is used.\n\nIf multiple input files are specified, these are treated as\
  \ paired files.\nSo if a sequence in one input is excluded, its pair is also excluded\
  \ from\nthe same position in all other input files.\n\n  -x  each line in EXCLUDE_FILE\
  \ is truncated by a space or tab and\n      stored as an id to exclude\n  -k  invert\
  \ exclude file to keep entries\n  -i  specify multiple INPUT files\n  -o  specify\
  \ multiple OUTPUT files\n\nExample usage:\nexclude -x ids.txt -i 1.fastq -i 2.fastq\
  \ -o 1.filtered.fastq -o 2.filtered.fastq\n\n"
generated_using:
- --help
docker_image:
