from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Fascodon_V0_1_0 = CommandToolBuilder(tool="fascodon", base_command=["fascodon"], inputs=[ToolInput(tag="in_rs_cu", input_type=Boolean(optional=True), prefix="--rscu", doc=InputDocumentation(doc="Output Relative Synonymous Codon Usage (RSCU) values rather than\nraw frequencies (default).")), ToolInput(tag="in_use_ncbi_code", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="[int] --code=[int]\nUse NCBI genetic code tableID <int> for translating sequences.")), ToolInput(tag="in_codes", input_type=String(optional=True), prefix="--codes", doc=InputDocumentation(doc="a list of NCBI genetic code tableIDs and exit.")), ToolInput(tag="in_use_bases_order", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="[string] --base-order=[string]\nUse bases in [string] order to enumerate codons. Default is\n'TCAG.'")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc=",\nIssue warnings to STDERR about sequences with premature stop\ncodons, that do not end in stop codons, sequences that are not\ndivisible by 3, etc.")), ToolInput(tag="in_amino_order", input_type=Boolean(optional=True), prefix="--amino-order", doc=InputDocumentation(doc="[string] --amino-order=[string]\nEnumerate codons by the amino acids they encode. If no option\nargument is given, codons are enumerated in the default order\n'ARNDCQEGHILKMFPSTWYV*'. If option argument is given, it\ndetermines which amino acids (codon families) will be analyzed\nand in what order.")), ToolInput(tag="in_use_string_join", input_type=Boolean(optional=True), prefix="-j", doc=InputDocumentation(doc="[string] --join=[string]\nUse <string> to join tagged value output in sequence record\ndescriptions. Use with argument '\t' to indicate a\ntab-character.")), ToolInput(tag="in_table", input_type=Boolean(optional=True), prefix="--table", doc=InputDocumentation(doc="Print output in a table to STDOUT.")), ToolInput(tag="in_man", input_type=Boolean(optional=True), prefix="--man", doc=InputDocumentation(doc="Print the manual page and exit.")), ToolInput(tag="in_log", input_type=Boolean(optional=True), prefix="--log", doc=InputDocumentation(doc="Creates, or appends to, a generic FAST logfile in the current\nworking directory. The logfile records date/time of execution,\nfull command with options and arguments, and an optional\ncomment.")), ToolInput(tag="in_use_name_default", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="[string], --logname=[string]\nUse [string] as the name of the logfile. Default is\n'FAST.log.txt'.")), ToolInput(tag="in_include_comment_logfile", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="[string], --comment=[string]\nInclude comment [string] in logfile. No comment is saved by\ndefault.")), ToolInput(tag="in_format", input_type=Boolean(optional=True), prefix="--format", doc=InputDocumentation(doc="=[format]\nUse alternative format for input. See man page for 'fasconvert'\nfor allowed formats. This is for convenience; the FAST tools are\ndesigned to exchange data in Fasta format, and 'fasta' is the\ndefault format for this tool.")), ToolInput(tag="in_specify_type_sequence", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="[dna|rna|protein], --moltype=[dna|rna|protein]\nSpecify the type of sequence on input (should not be needed in\nmost cases, but sometimes Bioperl cannot guess and complains\nwhen processing data).")), ToolInput(tag="in_fast_q", input_type=Boolean(optional=True), prefix="--fastq", doc=InputDocumentation(doc="use fastq format as input and output.\n"))], outputs=[], container="quay.io/biocontainers/perl-fast:1.06--pl526_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fascodon_V0_1_0().translate("wdl")

