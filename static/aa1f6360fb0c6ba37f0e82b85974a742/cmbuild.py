from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Float, String, Int

Cmbuild_V0_1_0 = CommandToolBuilder(tool="cmbuild", base_command=["cmbuild"], inputs=[ToolInput(tag="in_name_cms_s", input_type=File(optional=True), prefix="-n", doc=InputDocumentation(doc=": name the CM(s) <s>, (only if single aln in file)")), ToolInput(tag="in_force_allow_overwriting", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc=": force; allow overwriting of <cmfile_out>")), ToolInput(tag="in_direct_summary_output", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc=": direct summary output to file <f>, not stdout")), ToolInput(tag="in_resave_consensusinsert_column", input_type=File(optional=True), prefix="-O", doc=InputDocumentation(doc=": resave consensus/insert column annotated MSA to file <f>")), ToolInput(tag="in_devhelp", input_type=Boolean(optional=True), prefix="--devhelp", doc=InputDocumentation(doc=": show list of otherwise hidden developer/expert options")), ToolInput(tag="in_fast", input_type=Boolean(optional=True), prefix="--fast", doc=InputDocumentation(doc=": assign cols w/ >= symfrac residues as consensus")), ToolInput(tag="in_hand", input_type=Boolean(optional=True), prefix="--hand", doc=InputDocumentation(doc=": use reference coordinate annotation to specify consensus")), ToolInput(tag="in_sym_frac", input_type=Float(optional=True), prefix="--symfrac", doc=InputDocumentation(doc=": fraction of non-gaps to require in a consensus column [0..1]")), ToolInput(tag="in_noss", input_type=Boolean(optional=True), prefix="--noss", doc=InputDocumentation(doc=": ignore secondary structure annotation in input alignment")), ToolInput(tag="in_r_search", input_type=File(optional=True), prefix="--rsearch", doc=InputDocumentation(doc=": use RSEARCH parameterization with RIBOSUM matrix file <f>")), ToolInput(tag="in_null", input_type=File(optional=True), prefix="--null", doc=InputDocumentation(doc=": read null (random sequence) model from file <f>")), ToolInput(tag="in_prior", input_type=File(optional=True), prefix="--prior", doc=InputDocumentation(doc=": read priors from file <f>")), ToolInput(tag="in_wpb", input_type=Boolean(optional=True), prefix="--wpb", doc=InputDocumentation(doc=": Henikoff position-based weights  [default]")), ToolInput(tag="in_wgs_c", input_type=Boolean(optional=True), prefix="--wgsc", doc=InputDocumentation(doc=": Gerstein/Sonnhammer/Chothia tree weights")), ToolInput(tag="in_w_none", input_type=Boolean(optional=True), prefix="--wnone", doc=InputDocumentation(doc=": don't do any relative weighting; set all to 1")), ToolInput(tag="in_w_given", input_type=Boolean(optional=True), prefix="--wgiven", doc=InputDocumentation(doc=": use weights as given in MSA file")), ToolInput(tag="in_w_blosum", input_type=Boolean(optional=True), prefix="--wblosum", doc=InputDocumentation(doc=": Henikoff simple filter weights")), ToolInput(tag="in_wid", input_type=Float(optional=True), prefix="--wid", doc=InputDocumentation(doc=": for --wblosum: set identity cutoff  [0.62]  (0<=x<=1)")), ToolInput(tag="in_e_ent", input_type=Boolean(optional=True), prefix="--eent", doc=InputDocumentation(doc=": adjust eff seq # to achieve relative entropy target  [default]")), ToolInput(tag="in_en_one", input_type=Boolean(optional=True), prefix="--enone", doc=InputDocumentation(doc=": no effective seq # weighting: just use nseq")), ToolInput(tag="in_ere", input_type=String(optional=True), prefix="--ere", doc=InputDocumentation(doc=": for --eent: set CM target relative entropy to <x>")), ToolInput(tag="in_e_set", input_type=String(optional=True), prefix="--eset", doc=InputDocumentation(doc=": set eff seq # for all models to <x>")), ToolInput(tag="in_emin_seq", input_type=Int(optional=True), prefix="--eminseq", doc=InputDocumentation(doc=": for --eent: set minimum effective sequence number to <x>  [0.1]")), ToolInput(tag="in_emax_seq", input_type=Int(optional=True), prefix="--emaxseq", doc=InputDocumentation(doc=": for --eent: set maximum effective sequence number to <x>")), ToolInput(tag="in_e_hmm_re", input_type=String(optional=True), prefix="--ehmmre", doc=InputDocumentation(doc=": for --eent: set minimum HMM relative entropy to <x>")), ToolInput(tag="in_e_sigma", input_type=Float(optional=True), prefix="--esigma", doc=InputDocumentation(doc=": for --eent: set sigma param to <x>  [45.0]")), ToolInput(tag="in_pse_venere", input_type=Int(optional=True), prefix="--p7ere", doc=InputDocumentation(doc=": for the filter p7 HMM, set minimum rel entropy/posn to <x>")), ToolInput(tag="in_p_seven_ml", input_type=Boolean(optional=True), prefix="--p7ml", doc=InputDocumentation(doc=": define the filter p7 HMM as the ML p7 HMM")), ToolInput(tag="in_emn", input_type=Int(optional=True), prefix="--EmN", doc=InputDocumentation(doc=": number of sampled seqs to use for p7 local MSV calibration  [200]")), ToolInput(tag="in_evn", input_type=Int(optional=True), prefix="--EvN", doc=InputDocumentation(doc=": number of sampled seqs to use for p7 local Vit calibration  [200]")), ToolInput(tag="in_elf_n", input_type=Int(optional=True), prefix="--ElfN", doc=InputDocumentation(doc=": number of sampled seqs to use for p7 local Fwd calibration  [200]")), ToolInput(tag="in_eg_fn", input_type=Int(optional=True), prefix="--EgfN", doc=InputDocumentation(doc=": number of sampled seqs to use for p7 glocal Fwd calibration  [200]")), ToolInput(tag="in_refine", input_type=String(optional=True), prefix="--refine", doc=InputDocumentation(doc=": refine input aln w/Expectation-Maximization, save to <f>")), ToolInput(tag="in_wrefine_configure_model", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc=": w/--refine, configure model for local alignment [default: global]")), ToolInput(tag="in_gibbs", input_type=Boolean(optional=True), prefix="--gibbs", doc=InputDocumentation(doc=": w/--refine, use Gibbs sampling instead of EM")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc=": w/--gibbs, set RNG seed to <n> (if 0: one-time arbitrary seed)")), ToolInput(tag="in_cy_k", input_type=Boolean(optional=True), prefix="--cyk", doc=InputDocumentation(doc=": w/--refine, use CYK instead of optimal accuracy")), ToolInput(tag="in_not_run_c", input_type=Boolean(optional=True), prefix="--notrunc", doc=InputDocumentation(doc=": w/--refine, do not use truncated alignment algorithm")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc="")), ToolInput(tag="in_cm_file_out", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_msa_file", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_direct_summary_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_direct_summary_output", type_hint=File()), doc=OutputDocumentation(doc=": direct summary output to file <f>, not stdout"))], container="quay.io/biocontainers/infernal:1.1.4--h779adbc_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cmbuild_V0_1_0().translate("wdl")

