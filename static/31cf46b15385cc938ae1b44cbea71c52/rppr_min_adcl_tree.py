from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Rppr_Min_Adcl_Tree_V0_1_0 = CommandToolBuilder(tool="rppr_min_adcl_tree", base_command=["rppr", "min_adcl_tree"], inputs=[ToolInput(tag="in_specify_filename_write", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="Specify the filename to write to.")), ToolInput(tag="in_out_dir", input_type=Boolean(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="Specify the directory to write files to.")), ToolInput(tag="in_prefix", input_type=Boolean(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Specify a string to be prepended to filenames.")), ToolInput(tag="in_no_csv", input_type=Boolean(optional=True), prefix="--no-csv", doc=InputDocumentation(doc="Output the results as a padded matrix instead of csv.")), ToolInput(tag="in_node_numbers", input_type=Boolean(optional=True), prefix="--node-numbers", doc=InputDocumentation(doc="Put the node numbers in where the bootstraps usually go.")), ToolInput(tag="in_seed", input_type=Boolean(optional=True), prefix="--seed", doc=InputDocumentation(doc="Set the random seed, an integer > 0. Default is 1.")), ToolInput(tag="in_specified_write_output", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="If specified, write progress output to stderr.")), ToolInput(tag="in_specified_path_write", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="If specified, the path to write the trimmed tree to.")), ToolInput(tag="in_leaves", input_type=Boolean(optional=True), prefix="--leaves", doc=InputDocumentation(doc="The maximum number of leaves to keep in the tree.")), ToolInput(tag="in_max_a_dcl", input_type=Boolean(optional=True), prefix="--max-adcl", doc=InputDocumentation(doc="The maximum ADCL that a solution can have.")), ToolInput(tag="in_algorithm", input_type=Boolean(optional=True), prefix="--algorithm", doc=InputDocumentation(doc="Which algorithm to use to prune leaves. Choices are 'greedy', 'full', 'force', and 'pam'. Default full.")), ToolInput(tag="in_all_ad_cls_file", input_type=File(optional=True), prefix="--all-adcls-file", doc=InputDocumentation(doc="If specified, write out a csv file containing every intermediate computed ADCL.")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="If specified with the full algorithm, write out a csv file containing solutions at every internal node.")), ToolInput(tag="in_always_include", input_type=Boolean(optional=True), prefix="--always-include", doc=InputDocumentation(doc="If specified, the leaf names read from the provided file will not be trimmed.")), ToolInput(tag="in_query_seqs", input_type=Boolean(optional=True), prefix="--query-seqs", doc=InputDocumentation(doc="A comma-separated list of leaves to turn into query sequences.")), ToolInput(tag="in_help", input_type=Boolean(optional=True), prefix="--help", doc=InputDocumentation(doc="Display this list of options")), ToolInput(tag="in_min_a_dcl_tree", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_newick_dot_tre", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_all_ad_cls_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_all_ad_cls_file", type_hint=File()), doc=OutputDocumentation(doc="If specified, write out a csv file containing every intermediate computed ADCL.")), ToolOutput(tag="out_log", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log", type_hint=File()), doc=OutputDocumentation(doc="If specified with the full algorithm, write out a csv file containing solutions at every internal node."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rppr_Min_Adcl_Tree_V0_1_0().translate("wdl", allow_empty_container=True)

