!Command
command:
- cvgChop
positional: []
named:
- !Flag
  description: '- summarize the coverages'
  synonyms:
  - -sum
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '- build map of coverage areas'
  synonyms:
  - -map
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "- create multi-fasta file of regions\nin genome with > <min_cvg> coverage.\
    \ (Default: 2)"
  synonyms:
  - -cvg
  args: !SimpleFlagArg
    name: min_cvg
  optional: true
- !Flag
  description: "- the contigs are reported in the order and orientation implied by\n\
    the scaffolds.  Option requires -a."
  synonyms:
  - -byscf
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '- splits the contigs into chunks that have > 0 coverage over all length'
  synonyms:
  - -split
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: " \ncvgchop (-a <asm_file> | -c <contig_file>) [-sum] [-map] [-cvg <min_cvg>]\
  \ \n        [-byscf] [-split]\n\n-sum - summarize the coverages\n-map - build map\
  \ of coverage areas\n-cvg <min_cvg> - create multi-fasta file of regions\n     \
  \            in genome with > <min_cvg> coverage. (Default: 2) \n-byscf - the contigs\
  \ are reported in the order and orientation implied by\n    the scaffolds.  Option\
  \ requires -a.\n-split - splits the contigs into chunks that have > 0 coverage over\
  \ all length\n                 \nIf no option or just -cvg is passed to the program\
  \ the output file will be\nnamed <asm_file>.<min_cvg>x  or <contig_file>.<min_cvg>x\
  \ depending on the\ntype of input.\n\nIf -sum or -map is passed, the output will\
  \ be reported to STDOUT.\n"
generated_using:
- --help
