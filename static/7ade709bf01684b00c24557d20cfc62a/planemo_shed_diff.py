from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Directory, Int, File

Planemo_Shed_Diff_V0_1_0 = CommandToolBuilder(tool="planemo_shed_diff", base_command=["planemo", "shed_diff"], inputs=[ToolInput(tag="in_recursive", input_type=Boolean(optional=True), prefix="--recursive", doc=InputDocumentation(doc="Recursively perform command for nested repository")), ToolInput(tag="in_owner", input_type=String(optional=True), prefix="--owner", doc=InputDocumentation(doc="Tool Shed repository owner (username).")), ToolInput(tag="in_name", input_type=Directory(optional=True), prefix="--name", doc=InputDocumentation(doc="Tool Shed repository name (defaults to the\ninferred tool directory name).")), ToolInput(tag="in_shed_email", input_type=String(optional=True), prefix="--shed_email", doc=InputDocumentation(doc="E-mail for Tool Shed auth (required unless\nshed_key is specified).")), ToolInput(tag="in_shed_key", input_type=String(optional=True), prefix="--shed_key", doc=InputDocumentation(doc="API key for Tool Shed access. An API key is\nrequired unless e-mail and password is specified.\nThis key can be specified with either --shed_key\nor --shed_key_from_env.")), ToolInput(tag="in_shed_key_from_env", input_type=String(optional=True), prefix="--shed_key_from_env", doc=InputDocumentation(doc="Environment variable to read API key for Tool\nShed access from.")), ToolInput(tag="in_shed_password", input_type=String(optional=True), prefix="--shed_password", doc=InputDocumentation(doc="Password for Tool Shed auth (required unless\nshed_key is specified).")), ToolInput(tag="in_shed_target", input_type=Int(optional=True), prefix="--shed_target", doc=InputDocumentation(doc="Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local' (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined ~/.planemo.yml.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Send diff output to specified file.")), ToolInput(tag="in_shed_target_source", input_type=String(optional=True), prefix="--shed_target_source", doc=InputDocumentation(doc="Source Tool Shed to diff against (will ignore\nlocal project info specified). To compare the\nmain Tool Shed against the test, set this to\ntesttoolshed.")), ToolInput(tag="in_raw", input_type=Boolean(optional=True), prefix="--raw", doc=InputDocumentation(doc="Do not attempt smart diff of XML to filter out\nattributes populated by the Tool Shed.")), ToolInput(tag="in_report_x_unit", input_type=File(optional=True), prefix="--report_xunit", doc=InputDocumentation(doc="Output an XUnit report, useful for CI testing")), ToolInput(tag="in_directories_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--fail_fast                If multiple repositories are specified and an"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Send diff output to specified file."))], container="quay.io/biocontainers/planemo:0.74.3--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Planemo_Shed_Diff_V0_1_0().translate("wdl")

