from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Sqt_Fastxmod_V0_1_0 = CommandToolBuilder(tool="sqt_fastxmod", base_command=["sqt", "fastxmod"], inputs=[ToolInput(tag="in_names", input_type=File(optional=True), prefix="--names", doc=InputDocumentation(doc="Keep only records whose name occurs in FILE (one per\nline)")), ToolInput(tag="in_not_names", input_type=File(optional=True), prefix="--not-names", doc=InputDocumentation(doc="Discard records whose name occurs in FILE (one per\nline)")), ToolInput(tag="in_cut_off", input_type=String(optional=True), prefix="--cutoff", doc=InputDocumentation(doc="Quality cutoff. Only when input format is FASTQ")), ToolInput(tag="in_substitute", input_type=Int(optional=True), prefix="--substitute", doc=InputDocumentation(doc="Randomly substitute bases at probability PROB.\nDefault: 0")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="--length", doc=InputDocumentation(doc="Shorten records to LENGTH (default: do not shorten)")), ToolInput(tag="in_minimum_length", input_type=Int(optional=True), prefix="--minimum-length", doc=InputDocumentation(doc="Discard reads shorter than LENGTH")), ToolInput(tag="in_max_errors", input_type=Int(optional=True), prefix="--max-errors", doc=InputDocumentation(doc="Discard reads whose expected number of errors\n(computed from quality values) exceeds ERRORS.")), ToolInput(tag="in_allowed_characters", input_type=String(optional=True), prefix="--allowed-characters", doc=InputDocumentation(doc="Discard reads that contain characters other than those\nin CHARS. CHARS is case-sensitive. Example: -c\nACGTacgt.")), ToolInput(tag="in_reverse_complement", input_type=Boolean(optional=True), prefix="--reverse-complement", doc=InputDocumentation(doc="Reverse-complement each sequence")), ToolInput(tag="in_upper", input_type=Boolean(optional=True), prefix="--upper", doc=InputDocumentation(doc="Convert sequence characters to uppercase")), ToolInput(tag="in_lower", input_type=Boolean(optional=True), prefix="--lower", doc=InputDocumentation(doc="Convert sequence characters to lowercase")), ToolInput(tag="in_constant_quality", input_type=String(optional=True), prefix="--constant-quality", doc=InputDocumentation(doc="Set all quality values to QUALITY. Use this to convert\nfrom FASTA to FASTQ.")), ToolInput(tag="in_fast_a", input_type=Boolean(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Always output FASTA (drop qualities if input is FASTQ)")), ToolInput(tag="in_unique_names", input_type=Boolean(optional=True), prefix="--unique-names", doc=InputDocumentation(doc="Make record names unique by appending _1, _2 etc. when")), ToolInput(tag="in_width", input_type=Int(optional=True), prefix="--width", doc=InputDocumentation(doc="Characters per line in output FASTA (default: 80). Set\nto 0 to disallow line breaks entirely. This is ignored\nfor FASTQ files.")), ToolInput(tag="in_seed", input_type=String(optional=True), prefix="--seed", doc=InputDocumentation(doc="Set random seed for reproducible runs. Relevant when")), ToolInput(tag="in_substitution_rate", input_type=String(optional=True), prefix="--substitution-rate", doc=InputDocumentation(doc="used.(default: use different")), ToolInput(tag="in_necessary", input_type=String(), position=0, doc=InputDocumentation(doc="--limit N, -n N       Pick only the first N sequences (default: all)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sqt_Fastxmod_V0_1_0().translate("wdl", allow_empty_container=True)

