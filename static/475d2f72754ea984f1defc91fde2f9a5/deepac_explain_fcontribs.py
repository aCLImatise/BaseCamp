from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Directory, Int

Deepac_Explain_Fcontribs_V0_1_0 = CommandToolBuilder(tool="deepac_explain_fcontribs", base_command=["deepac", "explain", "fcontribs"], inputs=[ToolInput(tag="in_model", input_type=File(optional=True), prefix="--model", doc=InputDocumentation(doc="Model file (.h5)")), ToolInput(tag="in_w_norm", input_type=Boolean(optional=True), prefix="--w-norm", doc=InputDocumentation(doc="Set flag if filter weight matrices should be mean-")), ToolInput(tag="in_non_patho_test", input_type=String(optional=True), prefix="--nonpatho-test", doc=InputDocumentation(doc="Nonpathogenic reads of the test data set (.fasta)")), ToolInput(tag="in_patho_test", input_type=String(optional=True), prefix="--patho-test", doc=InputDocumentation(doc="Pathogenic reads of the test data set (.fasta)")), ToolInput(tag="in_out_dir", input_type=Directory(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="Output directory")), ToolInput(tag="in_ref_mode", input_type=String(optional=True), prefix="--ref-mode", doc=InputDocumentation(doc="Modus to calculate reference sequences")), ToolInput(tag="in_train_data", input_type=String(optional=True), prefix="--train-data", doc=InputDocumentation(doc="Train data (.npy), necessary to calculate reference\nsequences if ref_mode is 'GC'")), ToolInput(tag="in_ref_seqs", input_type=String(optional=True), prefix="--ref-seqs", doc=InputDocumentation(doc="User provided reference sequences (.fasta) if ref_mode\nis 'own_ref_file'")), ToolInput(tag="in_perform_calculations_only", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="[INTER_NEURON [INTER_NEURON ...]], --inter-neuron [INTER_NEURON [INTER_NEURON ...]]\nPerform calculations for this intermediate neuron only")), ToolInput(tag="in_inter_layer", input_type=String(optional=True), prefix="--inter-layer", doc=InputDocumentation(doc="Perform calculations for this intermediate layer")), ToolInput(tag="in_seq_chunk", input_type=Int(optional=True), prefix="--seq-chunk", doc=InputDocumentation(doc="Sequence chunk size. Decrease for lower memory usage.")), ToolInput(tag="in_all_occurrences", input_type=Boolean(optional=True), prefix="--all-occurrences", doc=InputDocumentation(doc="Extract contributions for all occurrences of a filter\nper read (Default: max only)")), ToolInput(tag="in_recurrent", input_type=Boolean(optional=True), prefix="--recurrent", doc=InputDocumentation(doc="Interpret elements of the LSTM output")), ToolInput(tag="in_partial", input_type=Boolean(optional=True), prefix="--partial", doc=InputDocumentation(doc="Calculate partial nucleotide contributions per filter.")), ToolInput(tag="in_easy_partial", input_type=Boolean(optional=True), prefix="--easy-partial", doc=InputDocumentation(doc="Calculate easy partial nucleotide contributions per\nfilter. Works for the first convolutional layer only;\ndisables all-occurences mode.\n")), ToolInput(tag="in_t", input_type=String(optional=True), prefix="-t", doc=InputDocumentation(doc="")), ToolInput(tag="in_centered", input_type=String(), position=0, doc=InputDocumentation(doc="-t TEST_DATA, --test_data TEST_DATA"))], outputs=[ToolOutput(tag="out_out_dir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Deepac_Explain_Fcontribs_V0_1_0().translate("wdl", allow_empty_container=True)

