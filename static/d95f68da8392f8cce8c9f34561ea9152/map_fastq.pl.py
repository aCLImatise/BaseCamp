from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Map_Fastq_Pl_V0_1_0 = CommandToolBuilder(tool="map_fastq.pl", base_command=["map-fastq.pl"], inputs=[ToolInput(tag="in_number_cpus_instance", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="<#> (Number of cpus per instance, default: 1)")), ToolInput(tag="in_path_index_use", input_type=File(optional=True), prefix="-x", doc=InputDocumentation(doc="(path to index to use for mapping)")), ToolInput(tag="in_pe", input_type=Boolean(optional=True), prefix="-pe", doc=InputDocumentation(doc="(if only 1st read file is specified, this will look for 2nd read and do PE alignment)")), ToolInput(tag="in_suffix", input_type=Boolean(optional=True), prefix="-suffix", doc=InputDocumentation(doc="<suffix to apply to mapped files, default genome/program>")), ToolInput(tag="in_bowtie_two", input_type=Boolean(optional=True), prefix="-bowtie2", doc=InputDocumentation(doc="(map with bowtie2)")), ToolInput(tag="in_bowtie", input_type=Boolean(optional=True), prefix="-bowtie", doc=InputDocumentation(doc="(map with bowtie, add '-C' if using colorspace)")), ToolInput(tag="in_bwa", input_type=Boolean(optional=True), prefix="-bwa", doc=InputDocumentation(doc="(map with bwa mem)")), ToolInput(tag="in_his_at_two", input_type=Boolean(optional=True), prefix="-hisat2", doc=InputDocumentation(doc="(map with hisat2)")), ToolInput(tag="in_star", input_type=Boolean(optional=True), prefix="-star", doc=InputDocumentation(doc="(map with STAR)")), ToolInput(tag="in_path", input_type=File(optional=True), prefix="-path", doc=InputDocumentation(doc="(executable file to run if not in path/diff name)")), ToolInput(tag="in_un", input_type=Boolean(optional=True), prefix="-un", doc=InputDocumentation(doc="(will output unaligned reads)")), ToolInput(tag="in_bam", input_type=Boolean(optional=True), prefix="-bam", doc=InputDocumentation(doc="(convert output files from sam to bam)")), ToolInput(tag="in_local", input_type=Boolean(optional=True), prefix="--local", doc=InputDocumentation(doc="(local alignment, default: global/end-to-end)")), ToolInput(tag="in_no_shared_memory", input_type=Boolean(optional=True), prefix="-NoSharedMemory", doc=InputDocumentation(doc="(Do not used shared memory for genome [slower])")), ToolInput(tag="in_two_pass", input_type=Int(optional=True), prefix="-2pass", doc=InputDocumentation(doc="(Perform 2-pass alignment using --twopass1readsN option)")), ToolInput(tag="in_input_fasta_files", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="(Input is FASTA files, default expects FASTQ)")), ToolInput(tag="in_pass", input_type=Boolean(optional=True), prefix="-pass", doc=InputDocumentation(doc="'...' (need to include quotes)")), ToolInput(tag="in_show_errors", input_type=Boolean(optional=True), prefix="-showErrors", doc=InputDocumentation(doc="(don't dump subprogram stderr to /dev/null)")), ToolInput(tag="in_fast_q_file_one", input_type=Int(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_fast_q", input_type=String(optional=True), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_file_two", input_type=Int(optional=True), position=2, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Map_Fastq_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

