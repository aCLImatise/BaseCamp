!Command
command:
- go-show-paths-to-root.pl
positional:
- !Positional
  optional: false
  position: 0
  name: top
  description: "SYNOPSIS\ngo-show-paths-to-root.pl -id GO:0008021 ontology/gene_ontology.obo\n\
    go-show-paths-to-root.pl -names -id GO:0008021 ontology/gene_ontology.obo"
- !Positional
  optional: false
  position: 0
  name: time
  description: Subsequent parses can be speeded up using the use_cache option
named:
- !Flag
  optional: true
  synonyms:
  - -e
  description: "writes parse errors in XML - defaults to STDERR (there should be no\n\
    parse errors in well formed files)"
  args: !SimpleFlagArg
    name: ERRFILE
- !Flag
  optional: true
  synonyms:
  - -p
  description: "determines which parser to use; if left unspecified, will make a guess\n\
    based on file suffix. See below for formats"
  args: !SimpleFlagArg
    name: FORMAT
- !Flag
  optional: true
  synonyms:
  - -use_cache
  description: "If this switch is specified, then caching mode is turned on.\nWith\
    \ caching mode, the first time you parse a file, then an additional\nfile will\
    \ be exported in a special format that is fast to parse. This\nfile will have\
    \ the same filename as the original file, except it will\nhave the \".cache\"\
    \ suffix.\nThe next time you parse the file, this program will automatically check\n\
    for the existence of the \".cache\" file. If it exists, and is more recent\nthan\
    \ the file you specified, this is parsed instead. If it does not\nexist, it is\
    \ rebuilt."
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    go-show-paths-to-root.pl - shows all possible paths from a term\
  \ to the\n    top\n\nSYNOPSIS\n      go-show-paths-to-root.pl -id GO:0008021 ontology/gene_ontology.obo\n\
  \      go-show-paths-to-root.pl -names -id GO:0008021 ontology/gene_ontology.obo\n\
  \nDESCRIPTION\n    traverses DAG showing all paths (terms and intervening relationships)\
  \ to\n    the root\n\n    This script is purely file based; it needs to parse the\
  \ ontology each\n    time\n\n    Subsequent parses can be speeded up using the use_cache\
  \ option\n\n    If you wish to use the GO MySQL db, see the script\n    go-db-show-paths-to-root.pl\
  \ in the go-db-perl distribution\n\nARGUMENTS\n   -e ERRFILE\n    writes parse errors\
  \ in XML - defaults to STDERR (there should be no\n    parse errors in well formed\
  \ files)\n\n   -p FORMAT\n    determines which parser to use; if left unspecified,\
  \ will make a guess\n    based on file suffix. See below for formats\n\n  -use_cache\n\
  \    If this switch is specified, then caching mode is turned on.\n\n    With caching\
  \ mode, the first time you parse a file, then an additional\n    file will be exported\
  \ in a special format that is fast to parse. This\n    file will have the same filename\
  \ as the original file, except it will\n    have the \".cache\" suffix.\n\n    The\
  \ next time you parse the file, this program will automatically check\n    for the\
  \ existence of the \".cache\" file. If it exists, and is more recent\n    than the\
  \ file you specified, this is parsed instead. If it does not\n    exist, it is rebuilt.\n\
  \n  DOCUMENTATION\n    <http://www.godatabase.org/dev>\n\n"
generated_using:
- --help
docker_image:
