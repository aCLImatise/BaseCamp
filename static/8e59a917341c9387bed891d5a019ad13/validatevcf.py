from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, String, Int

Validatevcf_V0_1_0 = CommandToolBuilder(tool="validatevcf", base_command=["validatevcf"], inputs=[ToolInput(tag="in_input_vcf", input_type=File(optional=True), prefix="--input-vcf", doc=InputDocumentation(doc="VCF file to validate.")), ToolInput(tag="in_arg_output_failure", input_type=File(optional=True), prefix="-e", doc=InputDocumentation(doc="[ --output-errors ] arg    Output failure information in a bed file.")), ToolInput(tag="in_arg_reference_fasta", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="[ --reference ] arg        The reference fasta file.")), ToolInput(tag="in_arg_location_start", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[ --location ] arg         The location to start at.")), ToolInput(tag="in_arg_use_regionstraversal", input_type=Boolean(optional=True), prefix="-R", doc=InputDocumentation(doc="[ --regions ] arg          Use a bed file for getting a subset of regions\n(traversal via tabix).")), ToolInput(tag="in_targetsstreaming_whole_file", input_type=Boolean(optional=True), prefix="-T", doc=InputDocumentation(doc="[ --targets ] arg          Use a bed file for getting a subset of targets\n(streaming the whole file, ignoring things\noutside the bed regions).")), ToolInput(tag="in_progress", input_type=String(optional=True), prefix="--progress", doc=InputDocumentation(doc="Set to true to output progress information.")), ToolInput(tag="in_progress_seconds", input_type=String(optional=True), prefix="--progress-seconds", doc=InputDocumentation(doc="Output progress information every n seconds.")), ToolInput(tag="in_arg_overlap_window", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="[ --window ] arg           Overlap window to create haplotype blocks.")), ToolInput(tag="in_arg_maximum_number", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="[ --max-n-haplotypes ] arg Maximum number of haplotypes to enumerate.")), ToolInput(tag="in_expand_hap_blocks", input_type=Int(optional=True), prefix="--expand-hapblocks", doc=InputDocumentation(doc="Number of bases to expand around each haplotype")), ToolInput(tag="in_apply_filters", input_type=String(optional=True), prefix="--apply-filters", doc=InputDocumentation(doc="Apply filtering in VCF (on by default).")), ToolInput(tag="in_block_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--limit arg                   Maximum number of haplotype blocks to process."))], outputs=[ToolOutput(tag="out_arg_output_failure", output_type=File(optional=True), selector=InputSelector(input_to_select="in_arg_output_failure", type_hint=File()), doc=OutputDocumentation(doc="[ --output-errors ] arg    Output failure information in a bed file."))], container="quay.io/biocontainers/hap.py:0.3.13--py27h5c5a3ab_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Validatevcf_V0_1_0().translate("wdl")

