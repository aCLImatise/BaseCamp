from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Boolean

Tripaille_Analysis_Load_Fasta_V0_1_0 = CommandToolBuilder(tool="tripaille_analysis_load_fasta", base_command=["tripaille", "analysis", "load_fasta"], inputs=[ToolInput(tag="in_organism", input_type=String(optional=True), prefix="--organism", doc=InputDocumentation(doc="Organism common name or abbreviation")), ToolInput(tag="in_organism_id", input_type=Int(optional=True), prefix="--organism_id", doc=InputDocumentation(doc="Organism ID")), ToolInput(tag="in_analysis", input_type=String(optional=True), prefix="--analysis", doc=InputDocumentation(doc="Analysis name")), ToolInput(tag="in_analysis_id", input_type=Int(optional=True), prefix="--analysis_id", doc=InputDocumentation(doc="Analysis ID")), ToolInput(tag="in_sequence_type", input_type=String(optional=True), prefix="--sequence_type", doc=InputDocumentation(doc="Sequence type  [default: contig]")), ToolInput(tag="in_re_name", input_type=String(optional=True), prefix="--re_name", doc=InputDocumentation(doc="Regular expression for the name")), ToolInput(tag="in_re_unique_name", input_type=String(optional=True), prefix="--re_uniquename", doc=InputDocumentation(doc="Regular expression for the unique name")), ToolInput(tag="in_db_ext_id", input_type=String(optional=True), prefix="--db_ext_id", doc=InputDocumentation(doc="External DB ID")), ToolInput(tag="in_re_accession", input_type=String(optional=True), prefix="--re_accession", doc=InputDocumentation(doc="Regular expression for the accession from external")), ToolInput(tag="in_rel_subject_re", input_type=String(optional=True), prefix="--rel_subject_re", doc=InputDocumentation(doc="Relation subject regular expression (used to\nextract id of related entity)")), ToolInput(tag="in_rel_subject_type", input_type=String(optional=True), prefix="--rel_subject_type", doc=InputDocumentation(doc="Relation subject type (must match already loaded\ndata, e.g. mRNA)")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="Insertion method (insert, update or insup,\ndefault=insup (Insert and Update))  [default:\ninsup]")), ToolInput(tag="in_match_type", input_type=String(optional=True), prefix="--match_type", doc=InputDocumentation(doc="Match type for already loaded features (name or\nuniquename; default=uniquename; used for 'Update\nonly' or 'Insert and update' methods)'  [default:\nuniquename]")), ToolInput(tag="in_job_name", input_type=String(optional=True), prefix="--job_name", doc=InputDocumentation(doc="Name of the job")), ToolInput(tag="in_no_wait", input_type=Boolean(optional=True), prefix="--no_wait", doc=InputDocumentation(doc="Do not wait for job to complete")), ToolInput(tag="in_db", input_type=String(), position=0, doc=InputDocumentation(doc="--rel_type TEXT          Relation type (part_of or derives_from)"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tripaille_Analysis_Load_Fasta_V0_1_0().translate("wdl", allow_empty_container=True)

