from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, String

Cath_Map_Clusters_V0_1_0 = CommandToolBuilder(tool="cath_map_clusters", base_command=["cath-map-clusters"], inputs=[ToolInput(tag="in_output_version_information", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="[ --version ]                      Output version information")), ToolInput(tag="in_map_from_clust_memb_file", input_type=File(optional=True), prefix="--map-from-clustmemb-file", doc=InputDocumentation(doc="Map numbers from previous clusters specified in <file> to their equivalents in the working clusters where possible and\nif all the cluster names in <file> are positive integers, renumber leftover new clusters from one plus the largest\nor if not, rename with new_cmc_cluster_1, new_cmc_cluster_2, ...\n(of, if unspecified, renumber all working clusters from 1 upwards)")), ToolInput(tag="in_read_batches_from_input", input_type=Boolean(optional=True), prefix="--read-batches-from-input", doc=InputDocumentation(doc="Read batches of work from the input file with lines of format: `batch_id working_clust_memb_file prev_clust_memb_file` where:\n* batch_id             is a unique label for the batch (with no whitespace)\n* prev_clust_memb_file is optional")), ToolInput(tag="in_min_equiv_dom_ol", input_type=Int(optional=True), prefix="--min_equiv_dom_ol", doc=InputDocumentation(doc="(=60)    Define domain equivalence as: sharing more than <percent>% of residues (over the longest domain)\n(where <percent> must be ≥ 50)")), ToolInput(tag="in_min_equiv_clust_ol", input_type=Int(optional=True), prefix="--min_equiv_clust_ol", doc=InputDocumentation(doc="(=60)  Define cluster equivalence as: more than <percent>% of the map-from cluster's members having equivalents in the working cluster\n[and them being equivalent to > 20% of the working cluster's entries and > 50% of those that have an equivalence]\n(where <percent> must be ≥ 50%)")), ToolInput(tag="in_append_batch_id", input_type=File(optional=True), prefix="--append-batch-id", doc=InputDocumentation(doc="Append batch ID <id> as an extra column in the results output (equivalent to the first column in a --multi-batch-file input file)")), ToolInput(tag="in_output_to_file", input_type=File(optional=True), prefix="--output-to-file", doc=InputDocumentation(doc="Write output to file <file> (or, if unspecified, to stdout)")), ToolInput(tag="in_summarise_to_file", input_type=File(optional=True), prefix="--summarise-to-file", doc=InputDocumentation(doc="Print a summary of the renumbering to file <file>")), ToolInput(tag="in_print_entry_results", input_type=Boolean(optional=True), prefix="--print-entry-results", doc=InputDocumentation(doc="Output the entry (domain)-level mapping results")), ToolInput(tag="in_sorting_help", input_type=Boolean(optional=True), prefix="--sorting-help", doc=InputDocumentation(doc="Show the criteria for sorting unmapped clusters")), ToolInput(tag="in_input_file", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_to_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_to_file", type_hint=File()), doc=OutputDocumentation(doc="Write output to file <file> (or, if unspecified, to stdout)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cath_Map_Clusters_V0_1_0().translate("wdl", allow_empty_container=True)

