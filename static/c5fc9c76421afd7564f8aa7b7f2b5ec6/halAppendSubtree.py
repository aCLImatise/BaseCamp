from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String, Boolean

Halappendsubtree_V0_1_0 = CommandToolBuilder(tool="halAppendSubtree", base_command=["halAppendSubtree"], inputs=[ToolInput(tag="in_branch_length", input_type=Int(optional=True), prefix="--branchLength", doc=InputDocumentation(doc=":      branch length between appended and appendee nodes\n[default = 0]")), ToolInput(tag="in_bridge_file", input_type=String(optional=True), prefix="--bridgeFile", doc=InputDocumentation(doc=":        alignment containing parent, subtree root, and its\nfuture siblings, if any (required if not merging\nappended and appendee nodes) [default = ]")), ToolInput(tag="in_cache_bytes", input_type=Int(optional=True), prefix="--cacheBytes", doc=InputDocumentation(doc=":        maximum size in bytes of regular hdf5 cache [default =\n15728640]")), ToolInput(tag="in_cache_mdc", input_type=Int(optional=True), prefix="--cacheMDC", doc=InputDocumentation(doc=":          number of metadata slots in hdf5 cache [default = 113]")), ToolInput(tag="in_cacher_dc", input_type=Int(optional=True), prefix="--cacheRDC", doc=InputDocumentation(doc=":          number of regular slots in hdf5 cache.  should be a\nprime number ~= 10 * DefaultCacheRDCBytes / chunk\n[default = 599999]")), ToolInput(tag="in_cache_w_zero", input_type=Int(optional=True), prefix="--cacheW0", doc=InputDocumentation(doc=":           w0 parameter fro hdf5 cache [default = 0.75]")), ToolInput(tag="in_chunk", input_type=Int(optional=True), prefix="--chunk", doc=InputDocumentation(doc=":             hdf5 chunk size [default = 1000]")), ToolInput(tag="in_deflate", input_type=Int(optional=True), prefix="--deflate", doc=InputDocumentation(doc=":           hdf5 compression factor [0:none - 9:max] [default = 2]")), ToolInput(tag="in_in_memory", input_type=Boolean(optional=True), prefix="--inMemory", doc=InputDocumentation(doc=":                  load all data in memory (and disable hdf5 cache)\n[default = 0]")), ToolInput(tag="in_merge", input_type=Boolean(optional=True), prefix="--merge", doc=InputDocumentation(doc=":                     merge appended root and node that is appended to\n[default = 0]")), ToolInput(tag="in_no_mark_ancestors", input_type=Boolean(optional=True), prefix="--noMarkAncestors", doc=InputDocumentation(doc=":           don't mark ancestors for update [default = 0]")), ToolInput(tag="in_main_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_append_file", input_type=String(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_parent_name", input_type=String(), position=2, doc=InputDocumentation(doc="")), ToolInput(tag="in_root_name", input_type=String(), position=3, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Halappendsubtree_V0_1_0().translate("wdl", allow_empty_container=True)

