from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean

Targetedfileconverter_V0_1_0 = CommandToolBuilder(tool="TargetedFileConverter", base_command=["TargetedFileConverter"], inputs=[ToolInput(tag="in_in", input_type=File(optional=True), prefix="-in", doc=InputDocumentation(doc="*        Input file to convert.\nSee http://www.openms.de/current_doxygen/html/UTILS_TargetedFileConverter.html for format of OpenSWATH transition TSV file or SpectraST MRM file. (valid formats: 'tsv', 'mrm', 'pqp', 'TraML')")), ToolInput(tag="in_in_type", input_type=File(optional=True), prefix="-in_type", doc=InputDocumentation(doc="Input file type -- default: determined from file extension or content\n(valid: 'tsv', 'mrm', 'pqp', 'TraML')")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="-out", doc=InputDocumentation(doc="*       Output file (valid formats: 'tsv', 'pqp', 'TraML')")), ToolInput(tag="in_out_type", input_type=File(optional=True), prefix="-out_type", doc=InputDocumentation(doc="Output file type -- default: determined from file extension or content\nNote: that not all conversion paths work or make sense. (valid: 'tsv', 'pqp', 'TraML')")), ToolInput(tag="in_ini", input_type=File(optional=True), prefix="-ini", doc=InputDocumentation(doc="Use the given TOPP INI file")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="-threads", doc=InputDocumentation(doc="Sets the number of threads allowed to be used by the TOPP tool (default: '1')")), ToolInput(tag="in_write_ini", input_type=File(optional=True), prefix="-write_ini", doc=InputDocumentation(doc="Writes the default configuration file")), ToolInput(tag="in_helphelp", input_type=Boolean(optional=True), prefix="--helphelp", doc=InputDocumentation(doc="Shows all options (including advanced)"))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="*       Output file (valid formats: 'tsv', 'pqp', 'TraML')")), ToolOutput(tag="out_out_type", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_type", type_hint=File()), doc=OutputDocumentation(doc="Output file type -- default: determined from file extension or content\nNote: that not all conversion paths work or make sense. (valid: 'tsv', 'pqp', 'TraML')"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Targetedfileconverter_V0_1_0().translate("wdl", allow_empty_container=True)

