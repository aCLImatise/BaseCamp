from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Boolean, String, Int

Ppanggolin_Annotate_V0_1_0 = CommandToolBuilder(tool="ppanggolin_annotate", base_command=["ppanggolin", "annotate"], inputs=[ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="A tab-separated file listing the organism names, and\nthe fasta filepath of its genomic sequence(s) (the\nfastas can be compressed with gzip). One line per\norganism. (default: None)")), ToolInput(tag="in_an_no", input_type=File(optional=True), prefix="--anno", doc=InputDocumentation(doc="A tab-separated file listing the organism names, and\nthe gff/gbff filepath of its annotations (the files\ncan be compressed with gzip). One line per organism.\nIf this is provided, those annotations will be used.\n(default: None)")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory (default:\nppanggolin_output_DATE2021-02-28_HOUR18.03.15_PID2320)")), ToolInput(tag="in_overlap", input_type=Boolean(optional=True), prefix="--overlap", doc=InputDocumentation(doc="Use to not remove genes overlapping with RNA features.\n(default: True)")), ToolInput(tag="in_no_rna", input_type=Boolean(optional=True), prefix="--norna", doc=InputDocumentation(doc="Use to avoid annotating RNA features. (default: False)")), ToolInput(tag="in_kingdom", input_type=String(optional=True), prefix="--kingdom", doc=InputDocumentation(doc="Kingdom to which the prokaryota belongs to, to know\nwhich models to use for rRNA annotation. (default:\nbacteria)")), ToolInput(tag="in_translation_table", input_type=Int(optional=True), prefix="--translation_table", doc=InputDocumentation(doc="Translation table (genetic code) to use. (default: 11)")), ToolInput(tag="in_basename", input_type=File(optional=True), prefix="--basename", doc=InputDocumentation(doc="basename for the output file (default: pangenome)")), ToolInput(tag="in_use_pseudo", input_type=Boolean(optional=True), prefix="--use_pseudo", doc=InputDocumentation(doc="In the context of provided annotation, use this option\nto read pseudogenes. (Default behavior is to ignore\nthem) (default: False)")), ToolInput(tag="in_tmpdir", input_type=Directory(optional=True), prefix="--tmpdir", doc=InputDocumentation(doc="directory for storing temporary files (default: /tmp)")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Indicate verbose level (0 for warning and errors only,\n1 for info, 2 for debug) (default: 1)")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="log output file (default: stdout)")), ToolInput(tag="in_disable_prog_bar", input_type=Boolean(optional=True), prefix="--disable_prog_bar", doc=InputDocumentation(doc="disables the progress bars (default: False)")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Number of available cpus (default: 1)")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="--force", doc=InputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory (default:\nppanggolin_output_DATE2021-02-28_HOUR18.03.15_PID2320)")), ToolOutput(tag="out_basename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_basename", type_hint=File()), doc=OutputDocumentation(doc="basename for the output file (default: pangenome)")), ToolOutput(tag="out_log", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log", type_hint=File()), doc=OutputDocumentation(doc="log output file (default: stdout)")), ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], container="quay.io/biocontainers/ppanggolin:1.1.131--py37hf01694f_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ppanggolin_Annotate_V0_1_0().translate("wdl")

