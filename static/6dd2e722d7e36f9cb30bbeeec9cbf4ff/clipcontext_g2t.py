from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Float, Boolean, Int, String, File, Directory

Clipcontext_G2T_V0_1_0 = CommandToolBuilder(tool="clipcontext_g2t", base_command=["clipcontext", "g2t"], inputs=[ToolInput(tag="in_thr", input_type=Float(optional=True), prefix="--thr", doc=InputDocumentation(doc="Site score threshold for filtering --in BED file\n(default: None)")), ToolInput(tag="in_rev_filter", input_type=Boolean(optional=True), prefix="--rev-filter", doc=InputDocumentation(doc="Reverse filtering (keep values <= threshold and prefer\nsites with smaller values) (default: False)")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--min-len", doc=InputDocumentation(doc="Minimum input site length for filtering --in BED file\n(default: False)")), ToolInput(tag="in_max_len", input_type=Int(optional=True), prefix="--max-len", doc=InputDocumentation(doc="Maximum input site length for filtering --in BED file\n(default: False)")), ToolInput(tag="in_min_exon_ol", input_type=Float(optional=True), prefix="--min-exon-ol", doc=InputDocumentation(doc="Minimum exon overlap of a site to be reported as\ntranscript hit (intersectBed -f parameter) (default:\n0.9)")), ToolInput(tag="in_merge_mode", input_type=String(optional=True), prefix="--merge-mode", doc=InputDocumentation(doc="Defines how to merge overlapping transcript sites\n(overlap controlled by --merge-ext). (1) only merge\nsites overlapping at exon borders, (2) merge all\noverlapping sites, (3) do NOT merge overlapping sites\n(default: 1)")), ToolInput(tag="in_merge_ext", input_type=Int(optional=True), prefix="--merge-ext", doc=InputDocumentation(doc="Extend regions mapped to transcripts by --merge-ext\nbefore running mergeBed to merge overlapping regions\n(default: 10)")), ToolInput(tag="in_add_out", input_type=Boolean(optional=True), prefix="--add-out", doc=InputDocumentation(doc="Output centered and extended sites and sequences for\nall transcript matches (unique + non-unique) (default:\nFalse)")), ToolInput(tag="in_seq_ext", input_type=Int(optional=True), prefix="--seq-ext", doc=InputDocumentation(doc="Up- and downstream extension of centered sites for\ncontext sequence extraction (default: 30)")), ToolInput(tag="in_all_gen_out", input_type=Boolean(optional=True), prefix="--all-gen-out", doc=InputDocumentation(doc="Output all centered and extended genomic regions,\ninstead of only the ones with unique transcript\nmatches (default: False)")), ToolInput(tag="in_gen_uniq_ids", input_type=Boolean(optional=True), prefix="--gen-uniq-ids", doc=InputDocumentation(doc="Generate unique column 4 IDs for --in BED file entries\n(default: False)")), ToolInput(tag="in_report", input_type=Boolean(optional=True), prefix="--report", doc=InputDocumentation(doc="Output an .html report with statistics and plots\ncomparing transcript and genomic sequences (default:\nFalse)")), ToolInput(tag="in_in", input_type=File(optional=True), prefix="--in", doc=InputDocumentation(doc="Genomic regions (hg38) BED file (6-column format)")), ToolInput(tag="in_out", input_type=Directory(optional=True), prefix="--out", doc=InputDocumentation(doc="Output results folder")), ToolInput(tag="in_tr", input_type=File(optional=True), prefix="--tr", doc=InputDocumentation(doc="Transcript sequence IDs list file to define\ntranscripts to map on")), ToolInput(tag="in_gtf", input_type=File(optional=True), prefix="--gtf", doc=InputDocumentation(doc="Genomic annotations (hg38) GTF file (.gtf or .gtf.gz)")), ToolInput(tag="in_gen", input_type=File(optional=True), prefix="--gen", doc=InputDocumentation(doc="Genomic sequences (hg38) .2bit file"))], outputs=[ToolOutput(tag="out_out", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output results folder"))], container="quay.io/biocontainers/clipcontext:0.7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Clipcontext_G2T_V0_1_0().translate("wdl")

