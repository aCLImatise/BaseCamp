from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int, Float

Tobias_Scorebigwig_V0_1_0 = CommandToolBuilder(tool="TOBIAS_ScoreBigwig", base_command=["TOBIAS", "ScoreBigwig"], inputs=[ToolInput(tag="in_signal", input_type=File(optional=True), prefix="--signal", doc=InputDocumentation(doc="A .bw file of ATAC-seq cutsite signal")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Full path to output bigwig")), ToolInput(tag="in_regions", input_type=String(optional=True), prefix="--regions", doc=InputDocumentation(doc="Genomic regions to run footprinting within")), ToolInput(tag="in_score", input_type=String(optional=True), prefix="--score", doc=InputDocumentation(doc="Type of scoring to perform on cutsites\n(footprint/sum/mean/none) (default: footprint)")), ToolInput(tag="in_absolute", input_type=Boolean(optional=True), prefix="--absolute", doc=InputDocumentation(doc="Convert bigwig signal to absolute values before\ncalculating score")), ToolInput(tag="in_extend", input_type=Int(optional=True), prefix="--extend", doc=InputDocumentation(doc="Extend input regions with bp (default: 100)")), ToolInput(tag="in_smooth", input_type=Int(optional=True), prefix="--smooth", doc=InputDocumentation(doc="Smooth output signal by mean in <bp> windows (default:\nno smoothing)")), ToolInput(tag="in_min_limit", input_type=Float(optional=True), prefix="--min-limit", doc=InputDocumentation(doc="Limit input bigwig value range (default: no lower limit)")), ToolInput(tag="in_max_limit", input_type=Float(optional=True), prefix="--max-limit", doc=InputDocumentation(doc="Limit input bigwig value range (default: no upper limit)")), ToolInput(tag="in_fp_min", input_type=Int(optional=True), prefix="--fp-min", doc=InputDocumentation(doc="Minimum footprint width (default: 20)")), ToolInput(tag="in_fp_max", input_type=Int(optional=True), prefix="--fp-max", doc=InputDocumentation(doc="Maximum footprint width (default: 50)")), ToolInput(tag="in_flank_min", input_type=Int(optional=True), prefix="--flank-min", doc=InputDocumentation(doc="Minimum range of flanking regions (default: 10)")), ToolInput(tag="in_flank_max", input_type=Int(optional=True), prefix="--flank-max", doc=InputDocumentation(doc="Maximum range of flanking regions (default: 30)")), ToolInput(tag="in_window", input_type=Int(optional=True), prefix="--window", doc=InputDocumentation(doc="The window for calculation of sum (default: 100)")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Number of cores to use for computation (default: 1)")), ToolInput(tag="in_split", input_type=Int(optional=True), prefix="--split", doc=InputDocumentation(doc="Split of multiprocessing jobs (default: 100)")), ToolInput(tag="in_verbosity", input_type=Int(optional=True), prefix="--verbosity", doc=InputDocumentation(doc="Level of output logging (0: silent, 1: errors/warnings,\n2: info, 3: stats, 4: debug, 5: spam) (default: 3)\n")), ToolInput(tag="in_score_bigwig", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Full path to output bigwig"))], container="quay.io/biocontainers/tobias:0.12.9--py36h29c9776_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tobias_Scorebigwig_V0_1_0().translate("wdl")

