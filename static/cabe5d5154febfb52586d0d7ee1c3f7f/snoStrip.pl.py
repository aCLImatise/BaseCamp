from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, Boolean, String

Snostrip_Pl_V0_1_0 = CommandToolBuilder(tool="snoStrip.pl", base_command=["snoStrip.pl"], inputs=[ToolInput(tag="in_dir_output_directory", input_type=Directory(optional=True), prefix="-d", doc=InputDocumentation(doc="|dir             Output directory where all retrieved information will\nbe stored.\n[REQUIRED]")), ToolInput(tag="in_kingdom_specify_kingdom", input_type=Boolean(optional=True), prefix="-k", doc=InputDocumentation(doc="|kingdom         Specify the kingdom which shall be analyzed.\n'pro' ... Protostomia\n'deu' ... Deuterostomia\n'fun' ... Fungi\n'pla' ... Plants\n[REQUIRED]")), ToolInput(tag="in_info_file_containing", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="|info            File containing information of the organisms to be analyzed\nfile format: genome  Genus epithet   3-letter abbreviation (tab-separated)\nEspecially useful in case more than one organism shall be searched.")), ToolInput(tag="in_genome_genome_source", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="|genome          Genome source to search for potential snoRNAs.")), ToolInput(tag="in_name_name_organism", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="|name            Name of the organism: 'Genus epithet'.")), ToolInput(tag="in_infernal_incorporate_infernal", input_type=Boolean(optional=True), prefix="-j", doc=InputDocumentation(doc="|infernal        Incorporate infernal in the homology-based\nsearch procedure.")), ToolInput(tag="in_quiet_suppress_unnecessary", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="|quiet           Suppress unnecessary output.")), ToolInput(tag="in_force_force_search", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="|force           Force to search for novel snoRNA candidates in every\norganism, even though there are already species-specific\nsequences in the current family.")), ToolInput(tag="in_targets", input_type=Boolean(optional=True), prefix="--targets", doc=InputDocumentation(doc="Enable target prediction and make use of the target RNAs\nthat were shipped with snoStrip.\nLocation: /")), ToolInput(tag="in_sequences__directory", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="|sequences       Directory of targetRNAs.")), ToolInput(tag="in_alignments_directory_targetrna", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="|alignments      Directory of targetRNA alignments.")), ToolInput(tag="in_profiles_directory_targetrna", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="|profiles        Directory of targetRNA profiles.")), ToolInput(tag="in_perl", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_dir_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_dir_output_directory", type_hint=File()), doc=OutputDocumentation(doc="|dir             Output directory where all retrieved information will\nbe stored.\n[REQUIRED]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Snostrip_Pl_V0_1_0().translate("wdl", allow_empty_container=True)

