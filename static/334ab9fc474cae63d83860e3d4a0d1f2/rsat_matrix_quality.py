from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, String

Rsat_Matrix_Quality_V0_1_0 = CommandToolBuilder(tool="rsat_matrix_quality", base_command=["rsat", "matrix-quality"], inputs=[ToolInput(tag="in_perm", input_type=Int(optional=True), prefix="-perm", doc=InputDocumentation(doc="0 -bgfile my_background.txt \")), ToolInput(tag="in_plot", input_type=String(optional=True), prefix="-plot", doc=InputDocumentation(doc="")), ToolInput(tag="in_matrix_quality", input_type=String(), position=0, doc=InputDocumentation(doc="[1mDESCRIPTION[0m")), ToolInput(tag="in_interest_dot", input_type=String(), position=0, doc=InputDocumentation(doc="[1mMatrix sites[0m")), ToolInput(tag="in_set_dot", input_type=String(), position=0, doc=InputDocumentation(doc="If the left-out sequence has one or more 'twin' (identical site) in the")), ToolInput(tag="in_approach_however_pose", input_type=String(), position=0, doc=InputDocumentation(doc="This approach may however pose problem in the specific case of")), ToolInput(tag="in_computed_dot", input_type=String(), position=0, doc=InputDocumentation(doc="[1mComparing the scores of the matrix sites to the theoretical")), ToolInput(tag="in_beware_score_distribution", input_type=String(), position=0, doc=InputDocumentation(doc="Beware: the score distribution of matrix sites is fake. Indeed, those")), ToolInput(tag="in_theory", input_type=String(), position=0, doc=InputDocumentation(doc="The theoretical distribution of scores, computing according to the\nbackground model;")), ToolInput(tag="in_matrix_sites", input_type=String(), position=1, doc=InputDocumentation(doc="The score distribution of the matrix sites (which is biased by the\nfact that these sites were used to build the matrix).")), ToolInput(tag="in_matrix_sites_cv", input_type=String(), position=2, doc=InputDocumentation(doc="This is the distribution of scores for the matrix sites, evaluated\nwith the LOO procedure.")), ToolInput(tag="in_sequences", input_type=String(), position=0, doc=InputDocumentation(doc="pattern matching")), ToolInput(tag="in_pssm", input_type=String(), position=1, doc=InputDocumentation(doc="evaluation")), ToolInput(tag="in_one_dot", input_type=String(), position=0, doc=InputDocumentation(doc="[1m-top top_matrices[0m")), ToolInput(tag="in_sequences_dot", input_type=String(), position=0, doc=InputDocumentation(doc="[1m-kfold k[0m")), ToolInput(tag="in_steps_dot", input_type=String(), position=0, doc=InputDocumentation(doc="[1m-nograph[0m")), ToolInput(tag="in_convert_background_model_dot", input_type=String(), position=0, doc=InputDocumentation(doc="[1m-decimals #[0m")), ToolInput(tag="in_sequence_type", input_type=String(), position=0, doc=InputDocumentation(doc="Calculate the OCC proba.")), ToolInput(tag="in_statistics_dot", input_type=String(), position=0, doc=InputDocumentation(doc="If the option '-bgfile' is specified, the specified background model"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rsat_Matrix_Quality_V0_1_0().translate("wdl", allow_empty_container=True)

