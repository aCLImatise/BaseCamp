from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String, Float

Scanpy_Filter_Cells_V0_1_0 = CommandToolBuilder(tool="scanpy_filter_cells", base_command=["scanpy-filter-cells"], inputs=[ToolInput(tag="in_input_format", input_type=Boolean(optional=True), prefix="--input-format", doc=InputDocumentation(doc="[anndata|loom]\nInput object format.  [default: anndata]")), ToolInput(tag="in_output_format", input_type=Boolean(optional=True), prefix="--output-format", doc=InputDocumentation(doc="[anndata|loom|zarr]\nOutput object format.  [default: anndata]")), ToolInput(tag="in_zarr_chunk_size", input_type=Int(optional=True), prefix="--zarr-chunk-size", doc=InputDocumentation(doc="Chunk size for writing output in zarr")), ToolInput(tag="in_export_mtx", input_type=File(optional=True), prefix="--export-mtx", doc=InputDocumentation(doc="When specified, using it as prefix for\nexporting mtx files. If not empty and not\nending with '/' or '_', a '_' will be\nappended.")), ToolInput(tag="in_show_obj", input_type=Boolean(optional=True), prefix="--show-obj", doc=InputDocumentation(doc="[stdout|stderr]      Print output object summary info to\nspecified stream.")), ToolInput(tag="in_gene_name", input_type=String(optional=True), prefix="--gene-name", doc=InputDocumentation(doc="Name of the variable that contains gene\nnames, used for flagging mitochondria genes\nwhen column 'mito' is absent from `.var`.\n[default: index]")), ToolInput(tag="in_list_attr", input_type=Boolean(optional=True), prefix="--list-attr", doc=InputDocumentation(doc="When set, list attributes that can be\nfiltered on.")), ToolInput(tag="in_param", input_type=Float(optional=True), prefix="--param", doc=InputDocumentation(doc="...\nNumerical parameters used to filter the\ndata, in the format of '-p name min max'.\nMultiple -p entries allowed.")), ToolInput(tag="in_category", input_type=Boolean(optional=True), prefix="--category", doc=InputDocumentation(doc="<TEXT TEXT[,TEXT...]>...\nCategorical attributes used to filter the\ndata, in the format of '-c <name> <values>',\nwhere entries with attribute <name> with\nvalue in <values> are kept. If <values> is\npreceded by '!', entries with value in\n<values> are removed. Multiple -c entries\nallowed.")), ToolInput(tag="in_subset", input_type=File(optional=True), prefix="--subset", doc=InputDocumentation(doc="...\nSimilar to --category in the format of '-s\n<name> <file>', but the <file> to be a one-\ncolumn table that provides the values.\nMultiple -s entries allowed.")), ToolInput(tag="in_force_recalc", input_type=Boolean(optional=True), prefix="--force-recalc", doc=InputDocumentation(doc="When set, re-calculate\n`pct_counts_<qc_variable>` and\n`pct_counts_in_top_<n>_genes` even if they\nexist.")), ToolInput(tag="in_input_obj", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_output_obj", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Scanpy_Filter_Cells_V0_1_0().translate("wdl", allow_empty_container=True)

