class: CommandLineTool
id: finddgref.py.cwl
inputs:
- id: in_author
  doc: show the program's author information and exit
  type: boolean?
  inputBinding:
    prefix: --author
- id: in_md_exec
  doc: "Path to the AMBER executable file. Example:\n$AMBERHOME/bin/pmemd"
  type: File?
  inputBinding:
    prefix: -mdexec
- id: in_target
  doc: "Value of pH or Redox Potential (in Volts) that we\nexpect to obtain a converged\
    \ fraction of protonated or\nreduced species close to 50%. This is the target\
    \ value\nof the pKa or Standard Redox Potential (Eo) of the\nsystem at the end\
    \ of the execution. Default: None"
  type: double?
  inputBinding:
    prefix: -target
- id: in_do_parallel
  doc: "Command preciding mdexec for parallel execution. Used\nonly with Replica Exchange.\
    \ Default: mpirun -np [-ng]"
  type: string?
  inputBinding:
    prefix: -do_parallel
- id: in_log
  doc: "When set, prints the log of the program execution to\nan external file (-log\
    \ FILENAME). If not set, print it\nat the screen. Default: None"
  type: File?
  inputBinding:
    prefix: -log
- id: in_res_num
  doc: "Number of the residue in which the fraction of\nprotonated or reduced species\
    \ will be monitored.\n(REQUIRED if the number of pH or Redox titratable\nresidues\
    \ is larger than 1)"
  type: long?
  inputBinding:
    prefix: -resnum
- id: in_dg_re_fest
  doc: "Estimated value of Delta G reference. When this flag\nis given, the program\
    \ starts in the last phase of\nexecution, that is, on the phase of making more\n\
    accurate estimatives of Delta G reference. Note: if\nthe value of -dgrefest is\
    \ not close enough to the true\nvalue of Delta G reference, the execution will\
    \ fail.\nDefault: None"
  type: double?
  inputBinding:
    prefix: -dgrefest
- id: in_dg_ref_range
  doc: "FLOAT\nRange of values for Delta G reference. The desired\nDelta G reference\
    \ value has to be inside this range.\nIf -dgrefest and -dgrefrange are not given,\
    \ the\nprogram will try to find a range automatically.\nSuggestion: choose one\
    \ value in which the fraction of\nprotonated or reduced species is ~ 0 and the\
    \ other\nvalue in which it is ~ 1. Default: None"
  type: double?
  inputBinding:
    prefix: -dgrefrange
- id: in_dg_interval
  doc: "When the values of the argument -dgrefrange are to be\nfound automatically,\
    \ dginterval is the interval of\ntrial values. Default: 100.0 kcal/mol"
  type: double?
  inputBinding:
    prefix: -dginterval
- id: in_max_steps
  doc: 'Maximum number of AMBER executions. Default: 100'
  type: long?
  inputBinding:
    prefix: -maxsteps
- id: in_frac_threshold
  doc: "Fraction threshold. The fraction convergence criterium\nis: 0.5-fracthreshold/2\
    \ >= frac >=\n0.5+fracthreshold/2. Default: 0.03"
  type: double?
  inputBinding:
    prefix: -fracthreshold
- id: in_no_equi
  doc: "If stated, the equilibration simulation for a new\nDELTAGREF value will not\
    \ be performed. Equilibration\nruns for 10% the number of steps of the production\n\
    simulation. Default: False"
  type: boolean?
  inputBinding:
    prefix: -noequi
- id: in_rm_outs
  doc: "If stated, at the end of the execution of the program,\nerases all output\
    \ files generated by AMBER (all files\nnot stated as REQUIRED at \"AMBER Arguments\"\
    \ below).\nDefault: False"
  type: boolean?
  inputBinding:
    prefix: -rmouts
- id: in_bin_path
  doc: "Path to the AMBER bin directory. Used to locate\ncphstats, cestats or fitpkaeo.py\
    \ (Example:\n$AMBERHOME/bin ; Default: not set)."
  type: File?
  inputBinding:
    prefix: -bin-path
- id: in_amber_mdin_file
  doc: AMBER mdin file (REQUIRED)
  type: File?
  inputBinding:
    prefix: -i
- id: in_amber_parmtop_file
  doc: AMBER parmtop file (REQUIRED)
  type: File?
  inputBinding:
    prefix: -p
- id: in_amber_inpcrd_input
  doc: AMBER inpcrd (input coordinates) file (REQUIRED)
  type: File?
  inputBinding:
    prefix: -c
- id: in_amber_mdcrd_output
  doc: AMBER mdcrd (output coordinates) file
  type: File?
  inputBinding:
    prefix: -x
- id: in_inf
  doc: AMBER mdinfo file
  type: File?
  inputBinding:
    prefix: -inf
- id: in_amber_mdout_log
  doc: AMBER mdout (log) file
  type: File?
  inputBinding:
    prefix: -o
- id: in_amber_mdout_file
  doc: AMBER mdout file
  type: File?
  inputBinding:
    prefix: -r
- id: in_cp_in
  doc: AMBER cpin file (REQUIRED if cein file is not given)
  type: File?
  inputBinding:
    prefix: -cpin
- id: in_cp_out
  doc: AMBER cpout file
  type: File?
  inputBinding:
    prefix: -cpout
- id: in_cpre_strt
  doc: AMBER cprestrt file
  type: File?
  inputBinding:
    prefix: -cprestrt
- id: in_ce_in
  doc: AMBER cein file (REQUIRED if cpin file is not given)
  type: File?
  inputBinding:
    prefix: -cein
- id: in_ce_out
  doc: AMBER ceout file
  type: File?
  inputBinding:
    prefix: -ceout
- id: in_ceres_trt
  doc: AMBER cerestrt file
  type: File?
  inputBinding:
    prefix: -cerestrt
- id: in_ref
  doc: AMBER ref file
  type: File?
  inputBinding:
    prefix: -ref
- id: in_group_file
  doc: AMBER groupfile file (REQUIRED)
  type: File?
  inputBinding:
    prefix: -groupfile
- id: in_md_exec_dot
  doc: -ng INT               Number of groups/replicas (REQUIRED)
  type: string
  inputBinding:
    position: 0
outputs:
- id: out_stdout
  doc: Standard output stream
  type: stdout
- id: out_amber_mdcrd_output
  doc: AMBER mdcrd (output coordinates) file
  type: File?
  outputBinding:
    glob: $(inputs.in_amber_mdcrd_output)
hints: []
cwlVersion: v1.1
baseCommand:
- finddgref.py
