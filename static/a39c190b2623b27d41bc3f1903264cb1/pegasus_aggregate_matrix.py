from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Pegasus_Aggregate_Matrix_V0_1_0 = CommandToolBuilder(tool="pegasus_aggregate_matrix", base_command=["pegasus", "aggregate_matrix"], inputs=[ToolInput(tag="in_restriction", input_type=String(optional=True), prefix="--restriction", doc=InputDocumentation(doc="...           Select data that satisfy all restrictions. Each restriction takes the format of name:value,...,value or name:~value,..,value, where ~ refers to not. You can specifiy multiple restrictions by setting this option multiple times.")), ToolInput(tag="in_attributes", input_type=File(optional=True), prefix="--attributes", doc=InputDocumentation(doc="Specify a comma-separated list of outputted attributes. These attributes should be column names in the csv file.")), ToolInput(tag="in_default_reference", input_type=Int(optional=True), prefix="--default-reference", doc=InputDocumentation(doc="If sample count matrix is in either DGE, mtx, csv, tsv or loom format and there is no Reference column in the csv_file, use <reference> as the reference. This option can also be used for replacing genome names. For example, if <reference> is 'hg19:GRCh38,GRCh38', we will change any genome with name 'hg19' to 'GRCh38' and if no genome is provided, 'GRCh38' is the default.")), ToolInput(tag="in_select_only_singlets", input_type=Boolean(optional=True), prefix="--select-only-singlets", doc=InputDocumentation(doc="If we have demultiplexed data, turning on this option will make pegasus only include barcodes that are predicted as singlets.")), ToolInput(tag="in_remap_singlets", input_type=String(optional=True), prefix="--remap-singlets", doc=InputDocumentation(doc="Remap singlet names using <remap_string>, where <remap_string> takes the format 'new_name_i:old_name_1,old_name_2;new_name_ii:old_name_3;...'. For example, if we hashed 5 libraries from 3 samples sample1_lib1, sample1_lib2, sample2_lib1, sample2_lib2 and sample3, we can remap them to 3 samples using this string: 'sample1:sample1_lib1,sample1_lib2;sample2:sample2_lib1,sample2_lib2'. In this way, the new singlet names will be in metadata field with key 'assignment', while the old names will be kept in metadata field with key 'assignment.orig'.")), ToolInput(tag="in_subset_singlets", input_type=Int(optional=True), prefix="--subset-singlets", doc=InputDocumentation(doc="If select singlets, only select singlets in the <subset_string>, which takes the format 'name1,name2,...'. Note that if --remap-singlets is specified, subsetting happens after remapping. For example, we can only select singlets from sampe 1 and 3 using 'sample1,sample3'.")), ToolInput(tag="in_min_genes", input_type=Int(optional=True), prefix="--min-genes", doc=InputDocumentation(doc="Only keep cells with at least <number> of genes.")), ToolInput(tag="in_max_genes", input_type=Int(optional=True), prefix="--max-genes", doc=InputDocumentation(doc="Only keep cells with less than <number> of genes.")), ToolInput(tag="in_min_um_is", input_type=Int(optional=True), prefix="--min-umis", doc=InputDocumentation(doc="Only keep cells with at least <number> of UMIs.")), ToolInput(tag="in_max_um_is", input_type=Int(optional=True), prefix="--max-umis", doc=InputDocumentation(doc="Only keep cells with less than <number> of UMIs.")), ToolInput(tag="in_mi_to_prefix", input_type=String(optional=True), prefix="--mito-prefix", doc=InputDocumentation(doc="Prefix for mitochondrial genes. If multiple prefixes are provided, separate them by comma (e.g. 'MT-,mt-').")), ToolInput(tag="in_percent_mi_to", input_type=String(optional=True), prefix="--percent-mito", doc=InputDocumentation(doc="Only keep cells with mitochondrial percent less than <percent>%. Only when both mito_prefix and percent_mito set, the mitochondrial filter will be triggered.")), ToolInput(tag="in_no_append_sample_name", input_type=Boolean(optional=True), prefix="--no-append-sample-name", doc=InputDocumentation(doc="Turn this option on if you do not want to append sample name in front of each sample's barcode (concatenated using '-').")), ToolInput(tag="in_csv_file", input_type=String(), position=0, doc=InputDocumentation(doc="This function takes as input a csv_file, which contains at least 2 columns â€” Sample, sample name; Location, file that contains the count matrices (e.g. filtered_gene_bc_matrices_h5.h5), and merges matrices from the same genome together. If multi-modality exists, a third Modality column might be required.")), ToolInput(tag="in_output_name", input_type=String(), position=1, doc=InputDocumentation(doc="The output file name.")), ToolInput(tag="in_output_name_dot_zarr_dot_zip", input_type=String(), position=0, doc=InputDocumentation(doc="A zipped Zarr file containing aggregated data."))], outputs=[], container="quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pegasus_Aggregate_Matrix_V0_1_0().translate("wdl")

