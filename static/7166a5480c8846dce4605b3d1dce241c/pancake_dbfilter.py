from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Pancake_Dbfilter_V0_1_0 = CommandToolBuilder(tool="pancake_dbfilter", base_command=["pancake", "dbfilter"], inputs=[ToolInput(tag="in_sampling", input_type=Boolean(optional=True), prefix="--sampling", doc=InputDocumentation(doc="STR    Select sampling type: none, linear, random. Valid choices: (none, linear, random). [none]")), ToolInput(tag="in_sample_bases", input_type=Boolean(optional=True), prefix="--sample-bases", doc=InputDocumentation(doc="INT    Number of bases to sample. [0]")), ToolInput(tag="in_block_size", input_type=Boolean(optional=True), prefix="--block-size", doc=InputDocumentation(doc="FLOAT  Block size in megabases. Value 0 means one sequnece per block, value < 0 all sequences in\none block. [1000]")), ToolInput(tag="in_random_seed", input_type=Boolean(optional=True), prefix="--random-seed", doc=InputDocumentation(doc="INT    Random seed for sampling. [-1]")), ToolInput(tag="in_filter_list", input_type=Boolean(optional=True), prefix="--filter-list", doc=InputDocumentation(doc="STR    A text file containing headers of blacklisted sequences, one per line.")), ToolInput(tag="in_filter_type", input_type=Boolean(optional=True), prefix="--filter-type", doc=InputDocumentation(doc="STR    Select from: whitelist, blacklist, none. Valid choices: (none, whitelist, blacklist). [none]")), ToolInput(tag="in_consolidate", input_type=Boolean(optional=True), prefix="--consolidate", doc=InputDocumentation(doc="Create the new data files in addition to filtering the DB.")), ToolInput(tag="in_compression", input_type=Boolean(optional=True), prefix="--compression", doc=InputDocumentation(doc="INT    Compression level for output sequences. [1]")), ToolInput(tag="in_buffer_size", input_type=Boolean(optional=True), prefix="--buffer-size", doc=InputDocumentation(doc="FLOAT  Sequence buffer size in megabytes. Has to be >= 0.0. [1000]")), ToolInput(tag="in_split_blocks", input_type=Boolean(optional=True), prefix="--split-blocks", doc=InputDocumentation(doc="Write seeds for each block into a separate file.")), ToolInput(tag="in_num_threads", input_type=Boolean(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="INT    Number of threads to use, 0 means autodetection. [0]")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="STR    Set log level. Valid choices: (TRACE, DEBUG, INFO, WARN, FATAL). [WARN]")), ToolInput(tag="in_log_file", input_type=Boolean(optional=True), prefix="--log-file", doc=InputDocumentation(doc="FILE   Log to a file, instead of stderr.")), ToolInput(tag="in_in_prefix", input_type=String(), position=0, doc=InputDocumentation(doc="STR    The prefix of the input DB files.")), ToolInput(tag="in_out_prefix", input_type=String(), position=1, doc=InputDocumentation(doc="STR    The prefix of the output DB files."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pancake_Dbfilter_V0_1_0().translate("wdl", allow_empty_container=True)

