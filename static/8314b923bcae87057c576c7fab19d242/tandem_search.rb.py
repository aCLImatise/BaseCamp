from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, String, Float, Boolean

Tandem_Search_Rb_V0_1_0 = CommandToolBuilder(tool="tandem_search.rb", base_command=["tandem_search.rb"], inputs=[ToolInput(tag="in_replace_output", input_type=File(optional=True), prefix="--replace-output", doc=InputDocumentation(doc="Dont skip analyses for which the output file already exists [false]")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="An explicitly named output file.")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of processing threads to use. Set to 0 to autodetect an appropriate value [1]")), ToolInput(tag="in_database", input_type=File(optional=True), prefix="--database", doc=InputDocumentation(doc="Specify the database to use for this search. Can be a named protk database or the path to a fasta file [sphuman]")), ToolInput(tag="in_enzyme", input_type=String(optional=True), prefix="--enzyme", doc=InputDocumentation(doc="Enzyme [Trypsin]")), ToolInput(tag="in_var_mods", input_type=String(optional=True), prefix="--var-mods", doc=InputDocumentation(doc="Variable modifications. These should be provided in a comma separated list")), ToolInput(tag="in_fix_mods", input_type=String(optional=True), prefix="--fix-mods", doc=InputDocumentation(doc="Fixed modifications. These should be provided in a comma separated list")), ToolInput(tag="in_fragment_ion_to_l_units", input_type=String(optional=True), prefix="--fragment-ion-tol-units", doc=InputDocumentation(doc="Fragment ion mass tolerance units (Da or mmu). [Da]")), ToolInput(tag="in_precursor_ion_to_l_units", input_type=String(optional=True), prefix="--precursor-ion-tol-units", doc=InputDocumentation(doc="Precursor ion mass tolerance units (ppm or Da). [ppm]")), ToolInput(tag="in_fragment_ion_to_l", input_type=Float(optional=True), prefix="--fragment-ion-tol", doc=InputDocumentation(doc="Fragment ion mass tolerance (unit dependent). [0.65]")), ToolInput(tag="in_precursor_ion_to_l", input_type=Int(optional=True), prefix="--precursor-ion-tol", doc=InputDocumentation(doc="Precursor ion mass tolerance. [200]")), ToolInput(tag="in_num_missed_cleavages", input_type=Int(optional=True), prefix="--num-missed-cleavages", doc=InputDocumentation(doc="Number of missed cleavages allowed [2]")), ToolInput(tag="in_cleavage_semi", input_type=Boolean(optional=True), prefix="--cleavage-semi", doc=InputDocumentation(doc="Search for peptides with up to 1 non-enzymatic cleavage site [false]")), ToolInput(tag="in_multi_isotope_search", input_type=Boolean(optional=True), prefix="--multi-isotope-search", doc=InputDocumentation(doc="Expand parent mass window to include windows around neighbouring isotopic peaks [false]")), ToolInput(tag="in_glyco", input_type=Boolean(optional=True), prefix="--glyco", doc=InputDocumentation(doc="Expect N-Glycosylation modifications as variable mod in a search or as a parameter when building statistical models [false]")), ToolInput(tag="in_acetyl_n_term", input_type=Boolean(optional=True), prefix="--acetyl-nterm", doc=InputDocumentation(doc="Expect N-terminal acetylation as a variable mod in a search or as a parameter when building statistical models [false]")), ToolInput(tag="in_methionine_o", input_type=Boolean(optional=True), prefix="--methionineo", doc=InputDocumentation(doc="Expect Oxidised Methionine modifications as variable mod in a search [false]")), ToolInput(tag="in_tandem_params", input_type=File(optional=True), prefix="--tandem-params", doc=InputDocumentation(doc="Either the full path to an xml file containing a complete set of default parameters, or one of the following (isb_native,isb_kscore,gpm). Default is isb_native [isb_native]")), ToolInput(tag="in_keep_params_files", input_type=Boolean(optional=True), prefix="--keep-params-files", doc=InputDocumentation(doc="Keep X!Tandem parameter files [false]")), ToolInput(tag="in_output_spectra", input_type=File(optional=True), prefix="--output-spectra", doc=InputDocumentation(doc="Include spectra in the output file [false]")), ToolInput(tag="in_file_two_dot_mzm_l", input_type=Int(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_replace_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_replace_output", type_hint=File()), doc=OutputDocumentation(doc="Dont skip analyses for which the output file already exists [false]")), ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="An explicitly named output file.")), ToolOutput(tag="out_output_spectra", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_spectra", type_hint=File()), doc=OutputDocumentation(doc="Include spectra in the output file [false]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Tandem_Search_Rb_V0_1_0().translate("wdl", allow_empty_container=True)

