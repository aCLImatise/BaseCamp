!Command
command:
- tadpole.sh
positional:
- !Positional
  optional: false
  position: 0
  name: counts.
  description: Much faster but counts will be lower, by up to
named:
- !Flag
  optional: true
  synonyms:
  - -Xmx
  description: "This will set Java's memory usage, overriding autodetection.\n-Xmx20g\
    \ will specify 20 gigs of RAM, and -Xmx200m will specify 200 megs.\nThe max is\
    \ typically 85% of physical memory."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -eoom
  description: "This flag will cause the process to exit if an\nout-of-memory exception\
    \ occurs.  Requires Java 8u92+."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -da
  description: Disable assertions.
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\nWritten by Brian Bushnell\nLast modified February 3, 2021\n\nDescription:\
  \  Uses kmer counts to assemble contigs, extend sequences, \nor error-correct reads.\
  \  Tadpole has no upper bound for kmer length,\nbut some values are not supported.\
  \  Specifically, it allows 1-31,\nmultiples of 2 from 32-62, multiples of 3 from\
  \ 63-93, etc.\nPlease read bbmap/docs/guides/TadpoleGuide.txt for more information.\n\
  \nUsage:\nAssembly:     tadpole.sh in=<reads> out=<contigs>\nExtension:    tadpole.sh\
  \ in=<reads> out=<extended> mode=extend\nCorrection:   tadpole.sh in=<reads> out=<corrected>\
  \ mode=correct\n\nRecommended parameters for optimal assembly:\ntadpole.sh in=<reads>\
  \ out=<contigs> shave rinse pop k=<50-70% of read length>\n\nExtension and correction\
  \ may be done simultaneously.  Error correction on \nmultiple files may be done\
  \ like this:\n\ntadpole.sh in=libA_r1.fq,libA_merged.fq in2=libA_r2.fq,null extra=libB_r1.fq\
  \ out=ecc_libA_r1.fq,ecc_libA_merged.fq out2=ecc_libA_r2.fq,null mode=correct\n\n\
  Extending contigs with reads could be done like this:\n\ntadpole.sh in=contigs.fa\
  \ out=extended.fa el=100 er=100 mode=extend extra=reads.fq k=62\n\n\nInput parameters:\n\
  in=<file>           Primary input file for reads to use as kmer data.\nin2=<file>\
  \          Second input file for paired data.\nextra=<file>        Extra files for\
  \ use as kmer data, but not for error-\n                    correction or extension.\n\
  reads=-1            Only process this number of reads, then quit (-1 means all).\n\
  NOTE: in, in2, and extra may also be comma-delimited lists of files.\n\nOutput parameters:\n\
  out=<file>          Write contigs (in contig mode) or corrected/extended \n    \
  \                reads (in other modes).\nout2=<file>         Second output file\
  \ for paired output.\noutd=<file>         Write discarded reads, if using junk-removal\
  \ flags.\ndot=<file>          Write a contigs connectivity graph (partially implemented)\n\
  dump=<file>         Write kmers and their counts.\nfastadump=t         Write kmers\
  \ and counts as fasta versus 2-column tsv.\nmincounttodump=1    Only dump kmers\
  \ with at least this depth.\nshowstats=t         Print assembly statistics after\
  \ writing contigs.\n\nPrefiltering parameters:\nprefilter=0         If set to a\
  \ positive integer, use a countmin sketch\n                    to ignore kmers with\
  \ depth of that value or lower.\nprehashes=2         Number of hashes for prefilter.\n\
  prefiltersize=0.2   (pff) Fraction of memory to use for prefilter.\nminprobprefilter=t\
  \  (mpp) Use minprob for the prefilter.\nprepasses=1         Use this many prefiltering\
  \ passes; higher be more thorough\n                    if the filter is very full.\
  \  Set to 'auto' to iteratively \n                    prefilter until the remaining\
  \ kmers will fit in memory.\nonepass=f           If true, prefilter will be generated\
  \ in same pass as kmer\n                    counts.  Much faster but counts will\
  \ be lower, by up to\n                    prefilter's depth limit.\nfiltermem=0\
  \         Allows manually specifying prefilter memory in bytes, for\n          \
  \          deterministic runs.  0 will set it automatically.\n\nHashing parameters:\n\
  k=31                Kmer length (1 to infinity).  Memory use increases with K.\n\
  prealloc=t          Pre-allocate memory rather than dynamically growing; \n    \
  \                faster and more memory-efficient.  A float fraction (0-1)\n   \
  \                 may be specified; default is 1.\nminprob=0.5         Ignore kmers\
  \ with overall probability of correctness below this.\nminprobmain=t       (mpm)\
  \ Use minprob for the primary kmer counts.\nthreads=X           Spawn X worker threads;\
  \ default is number of logical processors.\nbuildthreads=X      Spawn X contig-building\
  \ threads. If not set, defaults to the same\n                    as threads.  Setting\
  \ this to 1 will make contigs deterministic.\nrcomp=t             Store and count\
  \ each kmer together and its reverse-complement.\ncoremask=t          All kmer extensions\
  \ share the same hashcode.\nfillfast=t          Speed up kmer extension lookups.\n\
  \nAssembly parameters:\nmincountseed=3      (mcs) Minimum kmer count to seed a new\
  \ contig or begin extension.\nmincountextend=2    (mce) Minimum kmer count continue\
  \ extension of a read or contig.\n                    It is recommended that mce=1\
  \ for low-depth metagenomes.\nmincountretain=0    (mincr) Discard kmers with count\
  \ below this.\nmaxcountretain=INF  (maxcr) Discard kmers with count above this.\n\
  branchmult1=20      (bm1) Min ratio of 1st to 2nd-greatest path depth at high depth.\n\
  branchmult2=3       (bm2) Min ratio of 1st to 2nd-greatest path depth at low depth.\n\
  branchlower=3       (blc) Max value of 2nd-greatest path depth to be considered\
  \ low.\nminextension=2      (mine) Do not keep contigs that did not extend at least\
  \ this much.\nmincontig=auto      (minc) Do not write contigs shorter than this.\n\
  mincoverage=1       (mincov) Do not write contigs with average coverage below this.\n\
  maxcoverage=inf     (maxcov) Do not write contigs with average coverage above this.\n\
  trimends=0          (trim) Trim contig ends by this much.  Trimming by K/2 \n  \
  \                  may yield more accurate genome size estimation.\ntrimcircular=t\
  \      Trim one end of contigs ending in LOOP/LOOP by K-1,\n                   \
  \ to eliminate the overlapping portion.\ncontigpasses=16     Build contigs with\
  \ decreasing seed depth for this many iterations.\ncontigpassmult=1.7  Ratio between\
  \ seed depth of two iterations.\nownership=auto      For concurrency; do not touch.\n\
  processcontigs=f    Explore the contig connectivity graph.\npopbubbles=t       \
  \ (pop) Pop bubbles; increases contiguity.  Requires \n                    additional\
  \ time and memory and forces processcontigs=t.\n\nProcessing modes:\nmode=contig\
  \         contig: Make contigs from kmers.\n                    extend: Extend sequences\
  \ to be longer, and optionally\n                            perform error correction.\n\
  \                    correct: Error correct only.\n                    insert: Measure\
  \ insert sizes.\n                    discard: Discard low-depth reads, without error\
  \ correction.\n\nExtension parameters:\nextendleft=100      (el) Extend to the left\
  \ by at most this many bases.\nextendright=100     (er) Extend to the right by at\
  \ most this many bases.\nibb=t               (ignorebackbranches) Do not stop at\
  \ backward branches.\nextendrollback=3    Trim a random number of bases, up to this\
  \ many, on reads\n                    that extend only partially.  This prevents\
  \ the creation\n                    of sharp coverage discontinuities at branches.\n\
  \nError-correction parameters:\necc=f               Error correct via kmer counts.\n\
  reassemble=t        If ecc is enabled, use the reassemble algorithm.\npincer=f \
  \           If ecc is enabled, use the pincer algorithm.\ntail=f              If\
  \ ecc is enabled, use the tail algorithm.\neccfull=f           If ecc is enabled,\
  \ use tail over the entire read.\naggressive=f        (aecc) Use aggressive error\
  \ correction settings.\n                    Overrides some other flags like errormult1\
  \ and deadzone.\nconservative=f      (cecc) Use conservative error correction settings.\n\
  \                    Overrides some other flags like errormult1 and deadzone.\n\
  rollback=t          Undo changes to reads that have lower coverage for\n       \
  \             any kmer after correction.\nmarkbadbases=0      (mbb) Any base fully\
  \ covered by kmers with count below \n                    this will have its quality\
  \ reduced.\nmarkdeltaonly=t     (mdo) Only mark bad bases adjacent to good bases.\n\
  meo=t               (markerrorreadsonly) Only mark bad bases in reads \n       \
  \             containing errors.\nmarkquality=0       (mq) Set quality scores for\
  \ marked bases to this.\n                    A level of 0 will also convert the\
  \ base to an N.\nerrormult1=16       (em1) Min ratio between kmer depths to call\
  \ an error.\nerrormult2=2.6      (em2) Alternate ratio between low-depth kmers.\n\
  errorlowerconst=3   (elc) Use mult2 when the lower kmer is at most this deep.\n\
  mincountcorrect=3   (mcc) Don't correct to kmers with count under this.\npathsimilarityfraction=0.45(psf)\
  \ Max difference ratio considered similar.\n                           Controls\
  \ whether a path appears to be continuous.\npathsimilarityconstant=3   (psc) Absolute\
  \ differences below this are ignored.\nerrorextensionreassemble=5 (eer) Verify this\
  \ many kmers before the error as\n                           having similar depth,\
  \ for reassemble.\nerrorextensionpincer=5     (eep) Verify this many additional\
  \ bases after the\n                           error as matching current bases, for\
  \ pincer.\nerrorextensiontail=9       (eet) Verify additional bases before and after\
  \ \n                           the error as matching current bases, for tail.\n\
  deadzone=0          (dz) Do not try to correct bases within this distance of\n \
  \                   read ends.\nwindow=12           (w) Length of window to use\
  \ in reassemble mode.\nwindowcount=6       (wc) If more than this many errors are\
  \ found within a\n                    a window, halt correction in that direction.\n\
  qualsum=80          (qs) If the sum of the qualities of corrected bases within\n\
  \                    a window exceeds this, halt correction in that direction.\n\
  rbi=t               (requirebidirectional) Require agreement from both \n      \
  \              directions when correcting errors in the middle part of \n      \
  \              the read using the reassemble algorithm.\nerrorpath=1         (ep)\
  \ For debugging purposes.\n\nJunk-removal parameters (to only remove junk, set mode=discard):\n\
  tossjunk=f          Remove reads that cannot be used for assembly.\n           \
  \         This means they have no kmers above depth 1 (2 for paired\n          \
  \          reads) and the outermost kmers cannot be extended.\n                \
  \    Pairs are removed only if both reads fail.\ntossdepth=-1        Remove reads\
  \ containing kmers at or below this depth.\n                    Pairs are removed\
  \ if either read fails.\nlowdepthfraction=0  (ldf) Require at least this fraction\
  \ of kmers to be\n                    low-depth to discard a read; range 0-1. 0\
  \ still\n                    requires at least 1 low-depth kmer.\nrequirebothbad=f\
  \    (rbb) Only discard pairs if both reads are low-depth.\ntossuncorrectable  \
  \ (tu) Discard reads containing uncorrectable errors.\n                    Requires\
  \ error-correction to be enabled.\n\nShaving parameters:\nshave=t             Remove\
  \ dead ends (aka hair).\nrinse=t             Remove bubbles.\nwash=            \
  \   Set shave and rinse at the same time.\nmaxshavedepth=1     (msd) Shave or rinse\
  \ kmers at most this deep.\nexploredist=300     (sed) Quit after exploring this\
  \ far.\ndiscardlength=150   (sdl) Discard shavings up to this long.\nNote: Shave\
  \ and rinse can produce substantially better assemblies\nfor low-depth data, but\
  \ they are very slow for large metagenomes.\n\nOverlap parameters (for overlapping\
  \ paired-end reads only):\nmerge=f             Attempt to merge overlapping reads\
  \ prior to \n                    kmer-counting, and again prior to correction. \
  \ Output\n                    will still be unmerged pairs.\necco=f            \
  \  Error correct via overlap, but do not merge reads.\ntestmerge=t         Test\
  \ kmer counts around the read merge junctions.  If\n                    it appears\
  \ that the merge created new errors, undo it.\n\nJava Parameters:\n-Xmx        \
  \        This will set Java's memory usage, overriding autodetection.\n        \
  \            -Xmx20g will specify 20 gigs of RAM, and -Xmx200m will specify 200\
  \ megs.\n                    The max is typically 85% of physical memory.\n-eoom\
  \               This flag will cause the process to exit if an\n               \
  \     out-of-memory exception occurs.  Requires Java 8u92+.\n-da               \
  \  Disable assertions.\n\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/bbmap:38.90--h1296035_0
