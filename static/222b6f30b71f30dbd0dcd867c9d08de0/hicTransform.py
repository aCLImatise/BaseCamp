from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Array

Hictransform_V0_1_0 = CommandToolBuilder(tool="hicTransform", base_command=["hicTransform"], inputs=[ToolInput(tag="in_matrix", input_type=File(optional=True), prefix="--matrix", doc=InputDocumentation(doc="input file. The computation is done per chromosome.\n(default: None)")), ToolInput(tag="in_out_filename", input_type=File(optional=True), prefix="--outFileName", doc=InputDocumentation(doc="File name to save the exported matrix. (default: None)")), ToolInput(tag="in_method", input_type=String(optional=True), prefix="--method", doc=InputDocumentation(doc="Transformation methods to use for input matrix.\nTransformation is computed per chromosome.obs_exp\ncomputes the expected matrix as the sum per genomic\ndistance j divided by maximal possible contacts:\nsum(diagonal(j) / number of elements in diagonal(j)\nobs_exp_lieberman computes the expected matrix as the\nsum per genomic distance j divided by the :\nsum(diagonal(j) / (length of chromosome -\nj))obs_exp_non_zero computes the expected matrix as\nthe sum per genomic distance j divided by sum of non-\nzero contacts: sum(diagonal(j) / number of non-zero\nelements in diagonal(j)Optionally,\n``--ligation_factor` can be used for this method as\nhas been used by HOMER software. If --ligation_factor,\nthen exp_i,j = exp_i,j * sum(row(i)) * sum(row(j)) /\nsum(matrix)pearson computes the Pearson correlation of\nthe input matrix: Pearson_i,j = C_i,j / sqrt(C_i,i *\nC_j,j) and C is the covariance matrixcovariance\ncomputes the Covariance of the input matrix: Cov_i,j =\nE[M_i, M_j] - my_i * my_j where M is the input matrix\nand my the mean. (default: obs_exp)")), ToolInput(tag="in_ligation_factor", input_type=Boolean(optional=True), prefix="--ligation_factor", doc=InputDocumentation(doc="Setting this flag, multiplies a scaling factor to each\nentry of the expected matrix to take care of the\nproximity ligation as has been explained in Homer\nsoftware. This flag is only affective with\nobs_exp_non_zero method and will be ignored if any\nother obs/exp method is chosen. (default: False)")), ToolInput(tag="in_chromosomes", input_type=Array(t=String(), optional=True), prefix="--chromosomes", doc=InputDocumentation(doc="List of chromosomes to be included in the computation.\n(default: None)")), ToolInput(tag="in_per_chromosome", input_type=Boolean(optional=True), prefix="--perChromosome", doc=InputDocumentation(doc="Each chromosome is processed individually, inter-\nchromosomal interactions are ignored. Option not valid\nfor obs_exp_lieberman. (default: False)"))], outputs=[ToolOutput(tag="out_out_filename", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_filename", type_hint=File()), doc=OutputDocumentation(doc="File name to save the exported matrix. (default: None)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hictransform_V0_1_0().translate("wdl", allow_empty_container=True)

