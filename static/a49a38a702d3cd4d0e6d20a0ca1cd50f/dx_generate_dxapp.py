from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Array, Int

Dx_Generate_Dxapp_V0_1_0 = CommandToolBuilder(tool="dx_generate_dxapp", base_command=["dx-generate-dxapp"], inputs=[ToolInput(tag="in_target_module", input_type=String(optional=True), prefix="--target-module", doc=InputDocumentation(doc="The fully-qualified module that contains the target\nmethod.")), ToolInput(tag="in_target_function", input_type=String(optional=True), prefix="--target-function", doc=InputDocumentation(doc="The main function that is called by the target\nexecutable. This should bewhere the ArgumentParser is\nconfigured.")), ToolInput(tag="in_target_executable", input_type=String(optional=True), prefix="--target-executable", doc=InputDocumentation(doc="The name of the executable. This is used in the\ndxapp.json runSpec.")), ToolInput(tag="in_subcommand", input_type=String(optional=True), prefix="--subcommand", doc=InputDocumentation(doc="Subcommand to pass to the target method, if required.")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="The output dxapp.json file. If not specified, output\nwill go to stdout.")), ToolInput(tag="in_output_params", input_type=Array(t=String(), optional=True), prefix="--output-params", doc=InputDocumentation(doc="Names of output parameters (in case they can't be\nautodetected).")), ToolInput(tag="in_output_param_regexp", input_type=String(optional=True), prefix="--output-param-regexp", doc=InputDocumentation(doc="Regular expression that identifies output parameter\nnames.")), ToolInput(tag="in_interpreter", input_type=String(optional=True), prefix="--interpreter", doc=InputDocumentation(doc="Type of script that will wrap the executable.")), ToolInput(tag="in_instance_type", input_type=String(optional=True), prefix="--instance-type", doc=InputDocumentation(doc="AWS instance type to use.")), ToolInput(tag="in_timeout", input_type=Int(optional=True), prefix="--timeout", doc=InputDocumentation(doc="Max runtime of this app (in hours).")), ToolInput(tag="in_distribution", input_type=String(optional=True), prefix="--distribution", doc=InputDocumentation(doc="Distribution to use for the machine image.")), ToolInput(tag="in_release", input_type=String(optional=True), prefix="--release", doc=InputDocumentation(doc="Distribution release to use for the machine image.")), ToolInput(tag="in_run_spec_version", input_type=String(optional=True), prefix="--runspec-version", doc=InputDocumentation(doc="Version of the application execution environment\ninside the runSpec block.\n"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="The output dxapp.json file. If not specified, output\nwill go to stdout."))], container="quay.io/biocontainers/dxpy:0.306.0--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Dx_Generate_Dxapp_V0_1_0().translate("wdl")

