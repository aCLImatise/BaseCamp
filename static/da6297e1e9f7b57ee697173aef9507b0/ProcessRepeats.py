from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean

Processrepeats_V0_1_0 = CommandToolBuilder(tool="ProcessRepeats", base_command=["ProcessRepeats"], inputs=[ToolInput(tag="in_species", input_type=String(optional=True), prefix="-species", doc=InputDocumentation(doc="Post process RepeatMasker results run on sequence from this species.\nDefault is human.")), ToolInput(tag="in_lib", input_type=File(optional=True), prefix="-lib", doc=InputDocumentation(doc="Skips most processing, does not produce a .tbl file unless the\ncustome library is in the '>name#class' format.")), ToolInput(tag="in_no_low", input_type=Boolean(optional=True), prefix="-nolow", doc=InputDocumentation(doc="Does not display simple repeats or low_complexity DNA in the\nannotation.")), ToolInput(tag="in_no_int", input_type=Boolean(optional=True), prefix="-noint", doc=InputDocumentation(doc="Skips steps specific to interspersed repeats, saving lots of time.")), ToolInput(tag="in_l_cam_big", input_type=Boolean(optional=True), prefix="-lcambig", doc=InputDocumentation(doc="Outputs ambiguous DNA transposon fragments using a lower case name.\nAll other repeats are listed in upper case. Ambiguous fragments\nmatch multiple repeat elements and can only be called based on\nflanking repeat information.")), ToolInput(tag="in_creates_untouched_file", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="Creates an untouched annotation file besides the manipulated file.")), ToolInput(tag="in_xm", input_type=File(optional=True), prefix="-xm", doc=InputDocumentation(doc="an additional output file in cross_match format (for\nparsing).")), ToolInput(tag="in_ace", input_type=File(optional=True), prefix="-ace", doc=InputDocumentation(doc="Creates an additional output file in ACeDB format.")), ToolInput(tag="in_gff", input_type=Boolean(optional=True), prefix="-gff", doc=InputDocumentation(doc="Creates an additional Gene Feature Finding format.")), ToolInput(tag="in_poly", input_type=File(optional=True), prefix="-poly", doc=InputDocumentation(doc="Creates an output file listing only potentially polymorphic simple\nrepeats.")), ToolInput(tag="in_no_id", input_type=Boolean(optional=True), prefix="-no_id", doc=InputDocumentation(doc="Leaves out final column with unique number for each element (was\ndefault).")), ToolInput(tag="in_excl_n", input_type=Boolean(optional=True), prefix="-excln", doc=InputDocumentation(doc="Calculates repeat densities excluding long stretches of Ns in the\nquery.")), ToolInput(tag="in_orf_two", input_type=Boolean(optional=True), prefix="-orf2", doc=InputDocumentation(doc="Results in sometimes negative coordinates for L1 elements; all L1\nsubfamilies are aligned over the ORF2 region, sometimes improving\ninterpretation of data.")), ToolInput(tag="in_shows_alignments_align", input_type=File(optional=True), prefix="-a", doc=InputDocumentation(doc="Shows the alignments in a .align output file.")), ToolInput(tag="in_mask_source", input_type=File(optional=True), prefix="-maskSource", doc=InputDocumentation(doc="Instructs ProcessRepeats to mask the sequence file using the\nannotation.")), ToolInput(tag="in_mask_repeats_lower", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="Mask repeats with a lower case 'x'.")), ToolInput(tag="in_xsmall", input_type=Boolean(optional=True), prefix="-xsmall", doc=InputDocumentation(doc="Mask repeats by making the sequence lowercase.")), ToolInput(tag="in_biology", input_type=String(), position=0, doc=InputDocumentation(doc="AUTHORS"))], outputs=[ToolOutput(tag="out_xm", output_type=File(optional=True), selector=InputSelector(input_to_select="in_xm", type_hint=File()), doc=OutputDocumentation(doc="an additional output file in cross_match format (for\nparsing).")), ToolOutput(tag="out_ace", output_type=File(optional=True), selector=InputSelector(input_to_select="in_ace", type_hint=File()), doc=OutputDocumentation(doc="Creates an additional output file in ACeDB format.")), ToolOutput(tag="out_poly", output_type=File(optional=True), selector=InputSelector(input_to_select="in_poly", type_hint=File()), doc=OutputDocumentation(doc="Creates an output file listing only potentially polymorphic simple\nrepeats.")), ToolOutput(tag="out_shows_alignments_align", output_type=File(optional=True), selector=InputSelector(input_to_select="in_shows_alignments_align", type_hint=File()), doc=OutputDocumentation(doc="Shows the alignments in a .align output file."))], container="quay.io/biocontainers/repeatmasker:4.1.1--pl526_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Processrepeats_V0_1_0().translate("wdl")

