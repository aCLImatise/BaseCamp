from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Float

Rtg_Mendelian_V0_1_0 = CommandToolBuilder(tool="rtg_mendelian", base_command=["rtg", "mendelian"], inputs=[ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="VCF file containing multi-sample variant\ncalls. Use '-' to read from standard input")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="if set, output annotated calls to this VCF\nfile. Use '-' to write to standard output")), ToolInput(tag="in_output_consistent", input_type=File(optional=True), prefix="--output-consistent", doc=InputDocumentation(doc="if set, output only consistent calls to this\nVCF file")), ToolInput(tag="in_output_inconsistent", input_type=File(optional=True), prefix="--output-inconsistent", doc=InputDocumentation(doc="if set, output only non-Mendelian calls to\nthis VCF file")), ToolInput(tag="in_template", input_type=String(optional=True), prefix="--template", doc=InputDocumentation(doc="SDF containing the reference genome")), ToolInput(tag="in_all_records", input_type=Boolean(optional=True), prefix="--all-records", doc=InputDocumentation(doc="use all records, regardless of filters\n(Default is to only process records where\nFILTER is '.' or 'PASS')")), ToolInput(tag="in_lenient", input_type=Boolean(optional=True), prefix="--lenient", doc=InputDocumentation(doc="allow homozygous diploid calls in place of\nhaploid calls and assume missing values are\nequal to the reference")), ToolInput(tag="in_min_concordance", input_type=Float(optional=True), prefix="--min-concordance", doc=InputDocumentation(doc="percentage concordance required for consistent\nparentage (Default is 99.0)")), ToolInput(tag="in_pedigree", input_type=File(optional=True), prefix="--pedigree", doc=InputDocumentation(doc="genome relationships PED file (Default is to\nextract pedigree information from VCF header\nfields)")), ToolInput(tag="in_no_gzip", input_type=Boolean(optional=True), prefix="--no-gzip", doc=InputDocumentation(doc="do not gzip the output"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="if set, output annotated calls to this VCF\nfile. Use '-' to write to standard output")), ToolOutput(tag="out_output_consistent", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_consistent", type_hint=File()), doc=OutputDocumentation(doc="if set, output only consistent calls to this\nVCF file")), ToolOutput(tag="out_output_inconsistent", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_inconsistent", type_hint=File()), doc=OutputDocumentation(doc="if set, output only non-Mendelian calls to\nthis VCF file"))], container="quay.io/biocontainers/rtg-tools:3.12--0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rtg_Mendelian_V0_1_0().translate("wdl")

