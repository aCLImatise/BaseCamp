from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Arv_Get_V0_1_0 = CommandToolBuilder(tool="arv_get", base_command=["arv-get"], inputs=[ToolInput(tag="in_retries", input_type=Int(optional=True), prefix="--retries", doc=InputDocumentation(doc="Maximum number of times to retry server requests that\nencounter temporary failures (e.g., server down). Default\n3.")), ToolInput(tag="in_progress", input_type=Boolean(optional=True), prefix="--progress", doc=InputDocumentation(doc="Display human-readable progress on stderr (bytes and, if\npossible, percentage of total data size). This is the\ndefault behavior when it is not expected to interfere\nwith the output: specifically, stderr is a tty _and_\neither stdout is not a tty, or output is being written to\nnamed files rather than stdout.")), ToolInput(tag="in_no_progress", input_type=Boolean(optional=True), prefix="--no-progress", doc=InputDocumentation(doc="Do not display human-readable progress on stderr.")), ToolInput(tag="in_batch_progress", input_type=Boolean(optional=True), prefix="--batch-progress", doc=InputDocumentation(doc="Display machine-readable progress on stderr (bytes and,\nif known, total data size).")), ToolInput(tag="in_hash", input_type=File(optional=True), prefix="--hash", doc=InputDocumentation(doc="Display the hash of each file as it is read from Keep,\nusing the given hash algorithm. Supported algorithms\ninclude md5, sha1, sha224, sha256, sha384, and sha512.")), ToolInput(tag="in_md_five_sum", input_type=Boolean(optional=True), prefix="--md5sum", doc=InputDocumentation(doc="Display the MD5 hash of each file as it is read from")), ToolInput(tag="in_retrieve_files_specified", input_type=Boolean(optional=True), prefix="-r", doc=InputDocumentation(doc="Retrieve all files in the specified collection/prefix.\nThis is the default behavior if the 'locator' argument\nends with a forward slash.")), ToolInput(tag="in_overwrite_existing_files", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="Overwrite existing files while writing. The default\nbehavior is to refuse to write *anything* if any of the\noutput files already exist. As a special case, -f is not\nneeded to write to stdout.")), ToolInput(tag="in_once_verbose_mode", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Once for verbose mode, twice for debug mode.")), ToolInput(tag="in_skip_existing", input_type=Boolean(optional=True), prefix="--skip-existing", doc=InputDocumentation(doc="Skip files that already exist. The default behavior is to\nrefuse to write *anything* if any files exist that would\nhave to be overwritten. This option causes even devices,\nsockets, and fifos to be skipped.")), ToolInput(tag="in_strip_manifest", input_type=Boolean(optional=True), prefix="--strip-manifest", doc=InputDocumentation(doc="When getting a collection manifest, strip its access\ntokens before writing it.\n")), ToolInput(tag="in_locator", input_type=String(), position=0, doc=InputDocumentation(doc="Collection locator, optionally with a file path or")), ToolInput(tag="in_prefix_dot", input_type=String(), position=1, doc=InputDocumentation(doc="destination        Local file or directory where the data is to be written.")), ToolInput(tag="in_stdout_dot", input_type=String(), position=0, doc=InputDocumentation(doc="optional arguments:")), ToolInput(tag="in_keep_dot", input_type=String(), position=1, doc=InputDocumentation(doc="-n                 Do not write any data -- just read from Keep, and report"))], outputs=[], container="quay.io/biocontainers/arvados-python-client:2.1.1--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Arv_Get_V0_1_0().translate("wdl")

