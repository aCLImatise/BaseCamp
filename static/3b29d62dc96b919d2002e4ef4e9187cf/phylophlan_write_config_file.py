from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean

Phylophlan_Write_Config_File_V0_1_0 = CommandToolBuilder(tool="phylophlan_write_config_file", base_command=["phylophlan_write_config_file"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Specify the output file where to write the\nconfigurations (default: None)")), ToolInput(tag="in_db_type", input_type=String(optional=True), prefix="--db_type", doc=InputDocumentation(doc="Specify the type of the database, where 'n' stands for\nnucleotides and 'a' for amino acids (default: None)")), ToolInput(tag="in_db_dna", input_type=String(optional=True), prefix="--db_dna", doc=InputDocumentation(doc="Add the 'db_dna' section of the selected software that\nwill be used for building the indexed database\n(default: None)")), ToolInput(tag="in_db_aa", input_type=String(optional=True), prefix="--db_aa", doc=InputDocumentation(doc="Add the 'db_aa' section of the selected software that\nwill be used for building the indexed database\n(default: None)")), ToolInput(tag="in_map_dna", input_type=String(optional=True), prefix="--map_dna", doc=InputDocumentation(doc="Add the 'map_dna' section of the selected software\nthat will be used for mapping the database against the\ninput genomes (default: None)")), ToolInput(tag="in_map_aa", input_type=String(optional=True), prefix="--map_aa", doc=InputDocumentation(doc="Add the 'map_aa' section of the selected software that\nwill be used for mapping the database against the\ninput proteomes (default: None)")), ToolInput(tag="in_msa", input_type=String(optional=True), prefix="--msa", doc=InputDocumentation(doc="Add the 'msa' section of the selected software that\nwill be used for producing the MSAs (default: None)")), ToolInput(tag="in_trim", input_type=String(optional=True), prefix="--trim", doc=InputDocumentation(doc="Add the 'trim' section of the selected software that\nwill be used for the gappy regions removal of the MSAs\n(default: None)")), ToolInput(tag="in_gene_tree_one", input_type=String(optional=True), prefix="--gene_tree1", doc=InputDocumentation(doc="Add the 'gene_tree1' section of the selected software\nthat will be used for building the phylogenies for the\nmarkers in the database (default: None)")), ToolInput(tag="in_gene_tree_two", input_type=String(optional=True), prefix="--gene_tree2", doc=InputDocumentation(doc="Add the 'gene_tree2' section of the selected software\nthat will be used for refining the phylogenies\npreviously built with what specified in the\n'gene_tree1' section (default: None)")), ToolInput(tag="in_tree_one", input_type=String(optional=True), prefix="--tree1", doc=InputDocumentation(doc="Add the 'tree1' section of the selected software that\nwill be used for building the first phylogeny\n(default: None)")), ToolInput(tag="in_tree_two", input_type=String(optional=True), prefix="--tree2", doc=InputDocumentation(doc="Add the 'tree2' section of the selected software that\nwill be used for refining the phylogeny previously\nbuilt with what specified in the 'tree1' section\n(default: None)")), ToolInput(tag="in_absolute_path", input_type=Boolean(optional=True), prefix="--absolute_path", doc=InputDocumentation(doc="Write the absolute path to the executable instead of\nthe executable name as found in the system path\nenvironment (default: False)")), ToolInput(tag="in_force_nucleotides", input_type=Boolean(optional=True), prefix="--force_nucleotides", doc=InputDocumentation(doc="If specified sets parameters for phylogenetic analysis\nsoftware so that they use nucleotide sequences, even\nin the case of a database of amino acids (default:\nNone)")), ToolInput(tag="in_overwrite", input_type=File(optional=True), prefix="--overwrite", doc=InputDocumentation(doc="Overwrite output file if it exists (default: False)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Prints more stuff (default: False)"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Specify the output file where to write the\nconfigurations (default: None)")), ToolOutput(tag="out_overwrite", output_type=File(optional=True), selector=InputSelector(input_to_select="in_overwrite", type_hint=File()), doc=OutputDocumentation(doc="Overwrite output file if it exists (default: False)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Phylophlan_Write_Config_File_V0_1_0().translate("wdl", allow_empty_container=True)

