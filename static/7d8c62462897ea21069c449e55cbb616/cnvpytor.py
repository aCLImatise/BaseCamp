from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, Boolean, File, Int, Float, Directory

Cnvpytor_V0_1_0 = CommandToolBuilder(tool="cnvpytor", base_command=["cnvpytor"], inputs=[ToolInput(tag="in_root", input_type=Array(t=String(), optional=True), prefix="--root", doc=InputDocumentation(doc="CNVnator hd5 file: data storage for all calculations")), ToolInput(tag="in_download_resources", input_type=Boolean(optional=True), prefix="--download_resources", doc=InputDocumentation(doc="download resource files")), ToolInput(tag="in_chrom", input_type=Array(t=String(), optional=True), prefix="--chrom", doc=InputDocumentation(doc="list of chromosomes to apply calculation")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="verbose level: debug, info (default), warning, error")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log_file", doc=InputDocumentation(doc="log file")), ToolInput(tag="in_max_cores", input_type=Int(optional=True), prefix="--max_cores", doc=InputDocumentation(doc="maximal number of cores to use in calculation")), ToolInput(tag="in_rd", input_type=Array(t=String(), optional=True), prefix="--rd", doc=InputDocumentation(doc="read bam/sam/cram and store read depth information")), ToolInput(tag="in_reference_filename", input_type=File(optional=True), prefix="--reference_filename", doc=InputDocumentation(doc="reference fasta for CRAM")), ToolInput(tag="in_gc", input_type=File(optional=True), prefix="--gc", doc=InputDocumentation(doc="read fasta file and store GC/AT content")), ToolInput(tag="in_copy_gc", input_type=File(optional=True), prefix="--copy_gc", doc=InputDocumentation(doc="copy GC/AT content from another cnvnator file")), ToolInput(tag="in_his", input_type=Array(t=String(), optional=True), prefix="--his", doc=InputDocumentation(doc="create histograms for specified bin size (multiple bin\nsizes separate by space)")), ToolInput(tag="in_stat", input_type=Array(t=String(), optional=True), prefix="--stat", doc=InputDocumentation(doc="calculate statistics for specified bin size (multiple\nbin sizes separate by space)")), ToolInput(tag="in_partition", input_type=Array(t=String(), optional=True), prefix="--partition", doc=InputDocumentation(doc="calculate segmentation for specified bin size\n(multiple bin sizes separate by space)")), ToolInput(tag="in_call", input_type=Array(t=String(), optional=True), prefix="--call", doc=InputDocumentation(doc="CNV caller: [baf] bin_size [bin_size2 ...] (multiple\nbin sizes separate by space)")), ToolInput(tag="in_vcf", input_type=Array(t=String(), optional=True), prefix="--vcf", doc=InputDocumentation(doc="read SNP data from vcf files")), ToolInput(tag="in_somatic_snv", input_type=Array(t=String(), optional=True), prefix="--somatic_snv", doc=InputDocumentation(doc="read SNP data from vcf files")), ToolInput(tag="in_min_count", input_type=Int(optional=True), prefix="--min_count", doc=InputDocumentation(doc="minimal count of haterozygous SNPs")), ToolInput(tag="in_rd_from_vcf", input_type=String(optional=True), prefix="--rd_from_vcf", doc=InputDocumentation(doc="read SNP data from vcf files")), ToolInput(tag="in_no_snp_counts", input_type=Boolean(optional=True), prefix="--no_snp_counts", doc=InputDocumentation(doc="read positions of snps, not counts (AD tag)")), ToolInput(tag="in_ad_tag", input_type=String(optional=True), prefix="--ad_tag", doc=InputDocumentation(doc="counts tag (default: AD)")), ToolInput(tag="in_gt_tag", input_type=String(optional=True), prefix="--gt_tag", doc=InputDocumentation(doc="genotype tag (default: GT)")), ToolInput(tag="in_dp_tag", input_type=String(optional=True), prefix="--dp_tag", doc=InputDocumentation(doc="read depth tag (default: DP)")), ToolInput(tag="in_call_set", input_type=String(optional=True), prefix="--callset", doc=InputDocumentation(doc="name for somatic VCF signal")), ToolInput(tag="in_max_copy_number", input_type=Int(optional=True), prefix="--max_copy_number", doc=InputDocumentation(doc="maximal copy number")), ToolInput(tag="in_min_cell_fraction", input_type=Int(optional=True), prefix="--min_cell_fraction", doc=InputDocumentation(doc="minimal cell fraction")), ToolInput(tag="in_pile_up_bam", input_type=Array(t=String(), optional=True), prefix="--pileup_bam", doc=InputDocumentation(doc="calculate SNP counts from bam files")), ToolInput(tag="in_rd_from_snp", input_type=Boolean(optional=True), prefix="--rd_from_snp", doc=InputDocumentation(doc="calculate RD from SNP counts")), ToolInput(tag="in_mask", input_type=File(optional=True), prefix="--mask", doc=InputDocumentation(doc="read fasta mask file and flag SNPs in P region")), ToolInput(tag="in_mask_snps", input_type=Boolean(optional=True), prefix="--mask_snps", doc=InputDocumentation(doc="flag SNPs in P region")), ToolInput(tag="in_mask_sn_vs", input_type=String(optional=True), prefix="--mask_snvs", doc=InputDocumentation(doc="flag SNVs in P region")), ToolInput(tag="in_id_var", input_type=File(optional=True), prefix="--idvar", doc=InputDocumentation(doc="read vcf file and flag SNPs that exist in database\nfile")), ToolInput(tag="in_baf", input_type=Array(t=String(), optional=True), prefix="--baf", doc=InputDocumentation(doc="create BAF histograms for specified bin size (multiple\nbin sizes separate by space)")), ToolInput(tag="in_no_mask", input_type=Boolean(optional=True), prefix="--no_mask", doc=InputDocumentation(doc="do not use P mask in BAF histograms")), ToolInput(tag="in_use_id", input_type=Boolean(optional=True), prefix="--use_id", doc=InputDocumentation(doc="use id flag filtering in SNP histograms")), ToolInput(tag="in_use_hom", input_type=Boolean(optional=True), prefix="--use_hom", doc=InputDocumentation(doc="use hom")), ToolInput(tag="in_use_phase", input_type=Boolean(optional=True), prefix="--use_phase", doc=InputDocumentation(doc="use information about phase while processing SNP data")), ToolInput(tag="in_reduce_noise", input_type=Boolean(optional=True), prefix="--reduce_noise", doc=InputDocumentation(doc="reduce noise in processing SNP data")), ToolInput(tag="in_baf_likelihood_width", input_type=Float(optional=True), prefix="--baf_likelihood_width", doc=InputDocumentation(doc="likelihood width used in processing SNP data\n(default=0.8)")), ToolInput(tag="in_force_agg", input_type=Boolean(optional=True), prefix="--force_agg", doc=InputDocumentation(doc="Force Agg matplotlib backend")), ToolInput(tag="in_panels", input_type=String(optional=True), prefix="-panels", doc=InputDocumentation(doc="[{rd,baf,likelihood} ...], --panels {rd,baf,likelihood} [{rd,baf,likelihood} ...]\nplot panels (with -plot regions)")), ToolInput(tag="in_style", input_type=Boolean(optional=True), prefix="-style", doc=InputDocumentation(doc="{Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}, --plot_style {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\navailable plot styles: Solarize_Light2,\n_classic_test_patch, bmh, classic, dark_background,\nfast, fivethirtyeight, ggplot, grayscale, seaborn,\nseaborn-bright, seaborn-colorblind, seaborn-dark,\nseaborn-dark-palette, seaborn-darkgrid, seaborn-deep,\nseaborn-muted, seaborn-notebook, seaborn-paper,\nseaborn-pastel, seaborn-poster, seaborn-talk, seaborn-\nticks, seaborn-white, seaborn-whitegrid, tableau-\ncolorblind10")), ToolInput(tag="in_plot_output_file", input_type=File(optional=True), prefix="--plot_output_file", doc=InputDocumentation(doc="output filename prefix and extension")), ToolInput(tag="in_animation", input_type=Directory(optional=True), prefix="--animation", doc=InputDocumentation(doc="animation folder/prefix")), ToolInput(tag="in_make_gc_genome_file", input_type=Boolean(optional=True), prefix="--make_gc_genome_file", doc=InputDocumentation(doc="used with -gc will create genome gc file")), ToolInput(tag="in_make_mask_genome_file", input_type=Boolean(optional=True), prefix="--make_mask_genome_file", doc=InputDocumentation(doc="used with -mask will create genome mask file")), ToolInput(tag="in_use_mask_with_rd", input_type=Boolean(optional=True), prefix="--use_mask_with_rd", doc=InputDocumentation(doc="used P mask in RD histograms")), ToolInput(tag="in_no_gc_corr", input_type=Boolean(optional=True), prefix="--no_gc_corr", doc=InputDocumentation(doc="do not use GC correction in RD histograms")), ToolInput(tag="in_reference_genome", input_type=String(optional=True), prefix="--reference_genome", doc=InputDocumentation(doc="Manually set reference genome")), ToolInput(tag="in_vcf_sample", input_type=File(optional=True), prefix="--vcf_sample", doc=InputDocumentation(doc="Sample name in vcf file")), ToolInput(tag="in_reference_genomes_conf", input_type=String(optional=True), prefix="--reference_genomes_conf", doc=InputDocumentation(doc="Configuration with reference genomes")), ToolInput(tag="in_ls", input_type=Boolean(optional=True), prefix="--ls", doc=InputDocumentation(doc="list pytor file(s) content")), ToolInput(tag="in_info", input_type=Boolean(optional=True), prefix="-info", doc=InputDocumentation(doc="[INFO [INFO ...]], --info [INFO [INFO ...]]\nprint statistics for pythor file(s)")), ToolInput(tag="in_comp", input_type=Boolean(optional=True), prefix="-comp", doc=InputDocumentation(doc="[COMPARE [COMPARE ...]], --compare [COMPARE [COMPARE ...]]\ncompere two regions: -comp reg1 reg2 [n_bins]")), ToolInput(tag="in_genotype", input_type=Boolean(optional=True), prefix="-genotype", doc=InputDocumentation(doc="[GENOTYPE [GENOTYPE ...]], --genotype [GENOTYPE [GENOTYPE ...]]")), ToolInput(tag="in_metadata", input_type=Boolean(optional=True), prefix="--metadata", doc=InputDocumentation(doc="list Metadata")), ToolInput(tag="in_export", input_type=Boolean(optional=True), prefix="-export", doc=InputDocumentation(doc="[EXPORT [EXPORT ...]], --export [EXPORT [EXPORT ...]]\nExport to jbrowse and cnvnator\n")), ToolInput(tag="in_version", input_type=Boolean(optional=True), prefix="-version", doc=InputDocumentation(doc="")), ToolInput(tag="in_plotting", input_type=String(), position=0, doc=InputDocumentation(doc="-view VIEW, --view VIEW"))], outputs=[ToolOutput(tag="out_plot_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_plot_output_file", type_hint=File()), doc=OutputDocumentation(doc="output filename prefix and extension"))], container="quay.io/biocontainers/cnvpytor:1.0--py38h3252c3a_1", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cnvpytor_V0_1_0().translate("wdl")

