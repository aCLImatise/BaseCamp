from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Float, Int, String, Boolean

Mapgl_Py_V0_1_0 = CommandToolBuilder(tool="mapGL.py", base_command=["mapGL.py"], inputs=[ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file. Default stdout. (default: stdout)")), ToolInput(tag="in_threshold", input_type=Float(optional=True), prefix="--threshold", doc=InputDocumentation(doc="Mapping threshold i.e., |elem| * threshold <=\n|mapped_elem|. Default = 0.0 -- equivalent to\naccepting a single-base overlap. On the other end of\nthe spectrum, setting this value to 1 is equivalent to\nonly accepting full-length overlaps. (default: 0.0)")), ToolInput(tag="in_gap", input_type=Int(optional=True), prefix="--gap", doc=InputDocumentation(doc="Ignore elements with an insertion/deletion of this or\nbigger size. Using the default value (-1) will allow\ngaps of any size. (default: -1)")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Verbosity level (default: info)")), ToolInput(tag="in_drop_split", input_type=Boolean(optional=True), prefix="--drop_split", doc=InputDocumentation(doc="If elements span multiple chains, report them as non-\nmapping. These will then be reported as gains or\nlosses, according to the maximum-parsimony\npredictions. This is the default mapping behavior for\nbnMapper. By default, mapGL.pys will follow the\nmapping convention used by liftOver, whereas the\nlongest mapped alignment is reported for split\nelements. (default: False)")), ToolInput(tag="in_in_format", input_type=String(optional=True), prefix="--in_format", doc=InputDocumentation(doc="Input file format. (Default: BED) (default: BED)")), ToolInput(tag="in_full_labels", input_type=Boolean(optional=True), prefix="--full_labels", doc=InputDocumentation(doc="Attempt to predict gain/loss events on all branches of\nthe tree, not just query/target branches. Output will\ninclude a comma-delimited list of gain/loss events\nfrom any/all affected branches. (default: False)")), ToolInput(tag="in_no_prune", input_type=Boolean(optional=True), prefix="--no_prune", doc=InputDocumentation(doc="Do not attempt to disambiguate the root state to\nresolve ambiguous gain/loss predictions. Instead,\nlabel affected features as 'ambiguous'. (default:\nFalse)")), ToolInput(tag="in_priority", input_type=String(optional=True), prefix="--priority", doc=InputDocumentation(doc="When resolving ambiguous trees, prioritize sequence\ngain or sequence loss. This can be thought of as\nassigning a lower cost to sequence insertions relative\nto deletions, or vice-versa. When priority='gain',\nambiguity is resolved by assigning 0 state to the root\nnode, such that sequence presence on a descendant\nbranch will be interpreted as a gain. When\npriority='loss', ambiguity is resolved by asssigning\nstate 1 to the root node, such that sequence absence\nin a descendant node is interpreted as a sequence\nloss. Default=gain (default: gain)")), ToolInput(tag="in_input", input_type=String(), position=0, doc=InputDocumentation(doc="Input regions to process. Should be in standard bed\nformat. Only the first four bed fields will be used.")), ToolInput(tag="in_tree", input_type=String(), position=1, doc=InputDocumentation(doc="Tree, in standard Newick format, with or without\nbranch lengths, describing relationships of query and\ntarget species to outgroups. May be given as a string\nor file.")), ToolInput(tag="in_qname", input_type=String(), position=2, doc=InputDocumentation(doc="Name of the query species. Regions from this species\nwill be mapped to target species coordinates.")), ToolInput(tag="in_t_name", input_type=String(), position=3, doc=InputDocumentation(doc="Name of the target species. Regions from the query\nspecies will be mapped to coordinates from this\nspecies.")), ToolInput(tag="in_alignments", input_type=String(), position=4, doc=InputDocumentation(doc="Alignment files (.chain or .pkl): One for the target\nspecies and one per outgroup species. Files should be\nnamed according to the convention:\nqname.tname[...].chain.gz, where qname is the query\nspecies name and tname is the name of the\ntarget/outgroup species. Names used for qname and\ntname must match names used in the newick tree."))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file. Default stdout. (default: stdout)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mapgl_Py_V0_1_0().translate("wdl", allow_empty_container=True)

