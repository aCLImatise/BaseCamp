from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, Float

Pyclone_Vi_Fit_V0_1_0 = CommandToolBuilder(tool="pyclone_vi_fit", base_command=["pyclone-vi", "fit"], inputs=[ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--in-file", doc=InputDocumentation(doc="Path to TSV format file with copy number and\nallele count information for all samples.See\nthe examples directory in the GitHub\nrepository for format.  [required]")), ToolInput(tag="in_out_file", input_type=File(optional=True), prefix="--out-file", doc=InputDocumentation(doc="Path to where results will be written in\nHDF5 format.  [required]")), ToolInput(tag="in_num_annealing_steps", input_type=Int(optional=True), prefix="--num-annealing-steps", doc=InputDocumentation(doc="Number of simulated annealing steps to\nuse.Default is one step i.e. not to use\nsimulated annealing.")), ToolInput(tag="in_num_clusters", input_type=Int(optional=True), prefix="--num-clusters", doc=InputDocumentation(doc="Number of clusters to use in variational\napproximation distribution.Note that not all\nclusters may not be assigned data points, so\nthe final number of clusters could be\nlower.Default is 10.")), ToolInput(tag="in_density", input_type=Boolean(optional=True), prefix="--density", doc=InputDocumentation(doc="[beta-binomial|binomial]\nAllele count density in the PyClone\nmodel.Use beta-binomial for high coverage\nsequencing.Default binomial.")), ToolInput(tag="in_num_grid_points", input_type=Int(optional=True), prefix="--num-grid-points", doc=InputDocumentation(doc="Number of points used to approximate CCF\nvalues.Default is 100.")), ToolInput(tag="in_num_restarts", input_type=Int(optional=True), prefix="--num-restarts", doc=InputDocumentation(doc="Number random restarts of Variational\ninference.Default is 1.")), ToolInput(tag="in_annealing_power", input_type=Float(optional=True), prefix="--annealing-power", doc=InputDocumentation(doc="Exponent of entries in the annealing\nladder.Default is 1.0.")), ToolInput(tag="in_convergence_threshold", input_type=Float(optional=True), prefix="--convergence-threshold", doc=InputDocumentation(doc="Maximum relative ELBO difference between\niterations to decide on convergence.Default\nis 10^-6.")), ToolInput(tag="in_max_iters", input_type=Int(optional=True), prefix="--max-iters", doc=InputDocumentation(doc="Maximum number of ELBO optimization\niterations.Default is 10,0000.")), ToolInput(tag="in_mix_weight_prior", input_type=Float(optional=True), prefix="--mix-weight-prior", doc=InputDocumentation(doc="Parameter value of symmetric Dirichlet prior\ndistribution on mixture weights.Higher\nvalues will produce more clusters.Default is\n1.0 which is the uniform prior.")), ToolInput(tag="in_precision", input_type=Float(optional=True), prefix="--precision", doc=InputDocumentation(doc="Precision for Beta-Binomial density.Has no\neffect when using Binomial.Default is 200.")), ToolInput(tag="in_print_freq", input_type=Int(optional=True), prefix="--print-freq", doc=InputDocumentation(doc="How often to print information about\noptimization.Default is every 100 iteration.")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Set random seed so results can be\nreproduced. By default a random seed is\nchosen."))], outputs=[ToolOutput(tag="out_out_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_file", type_hint=File()), doc=OutputDocumentation(doc="Path to where results will be written in\nHDF5 format.  [required]"))], container="quay.io/biocontainers/pyclone-vi:0.1.1--pyh7b7c402_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pyclone_Vi_Fit_V0_1_0().translate("wdl")

