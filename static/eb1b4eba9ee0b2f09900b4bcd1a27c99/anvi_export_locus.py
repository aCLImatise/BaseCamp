from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Int

Anvi_Export_Locus_V0_1_0 = CommandToolBuilder(tool="anvi_export_locus", base_command=["anvi-export-locus"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs'")), ToolInput(tag="in_search_term", input_type=String(optional=True), prefix="--search-term", doc=InputDocumentation(doc="search term.")), ToolInput(tag="in_gene_caller_ids", input_type=String(optional=True), prefix="--gene-caller-ids", doc=InputDocumentation(doc="Gene caller ids. Multiple of them can be declared\nseparated by a delimiter (the default is a comma). In\nanvi-gen-variability-profile, if you declare nothing\nyou will get all genes matching your other filtering\ncriteria. In other programs, you may get everything,\nnothing, or an error. It really depends on the\nsituation. Fortunately, mistakes are cheap, so it's\nworth a try.")), ToolInput(tag="in_delimiter", input_type=String(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="The delimiter to parse multiple input terms. The\ndefault is ','.")), ToolInput(tag="in_output_dir", input_type=File(optional=True), prefix="--output-dir", doc=InputDocumentation(doc="Directory path for output files")), ToolInput(tag="in_output_file_prefix", input_type=File(optional=True), prefix="--output-file-prefix", doc=InputDocumentation(doc="A prefix to be used while naming the output files (no\nfile type extensions please; just a prefix).")), ToolInput(tag="in_flank_mode", input_type=Boolean(optional=True), prefix="--flank-mode", doc=InputDocumentation(doc="If in --flank-mode, anvi-export-locus will extract a\nlocus based on the coordinates of flanking genes. You\nMUST provide 2 flanking genes in the form of TWO\n--search-term, --gene-caller-ids, or --hmm-sources.\nThe --flank-mode option is appropriate for extracting\nloci of variable gene number lengths, but are\nconsistently located between the same flanking genes\nin the genome(s) of interest.")), ToolInput(tag="in_num_genes", input_type=Int(optional=True), prefix="--num-genes", doc=InputDocumentation(doc="Required for DEFAULT mode. For each match (to the\nfunction, or HMM that was searched) a sequence which\nincludes a block of genes will be saved. The block\ncould include either genes only in the forward\ndirection of the gene (defined according to the\ndirection of transcription of the gene) or reverse or\nboth. If you wish to get both direction use a comma\n(no spaces) to define the block For example, '-n 4,5'\nwill give you four genes before and five genes after.\nWhereas, '-n 5' will give you five genes after (in\naddition to the gene that matched). To get only genes\npreceding the match use '-n 5,0'. If the number of\ngenes requested exceeds the length of the contig, then\nthe output will include the sequence until the end of\nthe contig.")), ToolInput(tag="in_use_hmm", input_type=Boolean(optional=True), prefix="--use-hmm", doc=InputDocumentation(doc="Use HMM hits instead of functional annotations. In\nother words, --search-term will be queried against HMM\nsource annotations, NOT functional annotations. If you\nchoose this option, you must also say which HMM source\nto use.")), ToolInput(tag="in_hmm_sources", input_type=Int(optional=True), prefix="--hmm-sources", doc=InputDocumentation(doc="NAME\nGet sequences for a specific list of HMM sources. You\ncan list one or more sources by separating them from\neach other with a comma character (i.e., '--hmm-\nsources source_1,source_2,source_3'). If you would\nlike to see a list of available sources in the contigs\ndatabase, run this program with '--list-hmm-sources'\nflag.")), ToolInput(tag="in_list_hmm_sources", input_type=Boolean(optional=True), prefix="--list-hmm-sources", doc=InputDocumentation(doc="List available HMM sources in the contigs database and\nquit.")), ToolInput(tag="in_annotation_sources", input_type=Int(optional=True), prefix="--annotation-sources", doc=InputDocumentation(doc="NAME[S]\nGet functional annotations for a specific list of\nannotation sources. You can specify one or more\nsources by separating them from each other with a\ncomma character (i.e., '--annotation-sources\nsource_1,source_2,source_3'). The default behavior is\nto return everything")), ToolInput(tag="in_overwrite_output_destinations", input_type=Boolean(optional=True), prefix="--overwrite-output-destinations", doc=InputDocumentation(doc="Overwrite if the output files and/or directories\nexist.")), ToolInput(tag="in_remove_partial_hits", input_type=Boolean(optional=True), prefix="--remove-partial-hits", doc=InputDocumentation(doc="By default anvi'o will return hits even if they are\npartial. Declaring this flag will make anvi'o filter\nall hits that are partial. Partial hits are hits in\nwhich you asked for n1 genes before and n2 genes after\nthe gene that matched the search criteria but the\nsearch hits the end of the contig before finding the\nnumber of genes that you asked.")), ToolInput(tag="in_never_reverse_complement", input_type=Boolean(optional=True), prefix="--never-reverse-complement", doc=InputDocumentation(doc="By default, if a gene that is found by the search\ncriteria is reverse in it's direction, then the\nsequence of the entire locus is reversed before it is\nsaved to the output. If you wish to prevent this\nbehavior then use the flag --never-reverse-complement.\n"))], outputs=[ToolOutput(tag="out_output_dir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_dir", type_hint=File()), doc=OutputDocumentation(doc="Directory path for output files")), ToolOutput(tag="out_output_file_prefix", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file_prefix", type_hint=File()), doc=OutputDocumentation(doc="A prefix to be used while naming the output files (no\nfile type extensions please; just a prefix)."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Export_Locus_V0_1_0().translate("wdl", allow_empty_container=True)

