!Command
positional:
- !Positional
  description: ''
  position: 0
  name: java
  optional: false
- !Positional
  description: ''
  position: 1
  name: mainclass
  optional: false
- !Positional
  description: ''
  position: 2
  name: args...
  optional: true
named:
- !Flag
  description: prevent further argument file expansion
  synonyms:
  - -disable-@files
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: allow classes to depend on preview features of this release
  synonyms:
  - --enable-preview
  args: !EmptyFlagArg {}
  optional: true
command:
- qsignature
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "Usage: java [options] <mainclass> [args...]\n           (to execute a\
  \ class)\n   or  java [options] -jar <jarfile> [args...]\n           (to execute\
  \ a jar file)\n   or  java [options] -m <module>[/<mainclass>] [args...]\n     \
  \  java [options] --module <module>[/<mainclass>] [args...]\n           (to execute\
  \ the main class in a module)\n   or  java [options] <sourcefile> [args]\n     \
  \      (to execute a single source-file program)\n\n Arguments following the main\
  \ class, source file, -jar <jarfile>,\n -m or --module <module>/<mainclass> are\
  \ passed as the arguments to\n main class.\n\n where options include:\n\n    -cp\
  \ <class search path of directories and zip/jar files>\n    -classpath <class search\
  \ path of directories and zip/jar files>\n    --class-path <class search path of\
  \ directories and zip/jar files>\n                  A : separated list of directories,\
  \ JAR archives,\n                  and ZIP archives to search for class files.\n\
  \    -p <module path>\n    --module-path <module path>...\n                  A :\
  \ separated list of directories, each directory\n                  is a directory\
  \ of modules.\n    --upgrade-module-path <module path>...\n                  A :\
  \ separated list of directories, each directory\n                  is a directory\
  \ of modules that replace upgradeable\n                  modules in the runtime\
  \ image\n    --add-modules <module name>[,<module name>...]\n                  root\
  \ modules to resolve in addition to the initial module.\n                  <module\
  \ name> can also be ALL-DEFAULT, ALL-SYSTEM,\n                  ALL-MODULE-PATH.\n\
  \    --list-modules\n                  list observable modules and exit\n    -d\
  \ <module name>\n    --describe-module <module name>\n                  describe\
  \ a module and exit\n    --dry-run     create VM and load main class but do not\
  \ execute main method.\n                  The --dry-run option may be useful for\
  \ validating the\n                  command-line options such as the module system\
  \ configuration.\n    --validate-modules\n                  validate all modules\
  \ and exit\n                  The --validate-modules option may be useful for finding\n\
  \                  conflicts and other errors with modules on the module path.\n\
  \    -D<name>=<value>\n                  set a system property\n    -verbose:[class|module|gc|jni]\n\
  \                  enable verbose output\n    -version      print product version\
  \ to the error stream and exit\n    --version     print product version to the output\
  \ stream and exit\n    -showversion  print product version to the error stream and\
  \ continue\n    --show-version\n                  print product version to the output\
  \ stream and continue\n    --show-module-resolution\n                  show module\
  \ resolution output during startup\n    -? -h -help\n                  print this\
  \ help message to the error stream\n    --help        print this help message to\
  \ the output stream\n    -X            print help on extra options to the error\
  \ stream\n    --help-extra  print help on extra options to the output stream\n \
  \   -ea[:<packagename>...|:<classname>]\n    -enableassertions[:<packagename>...|:<classname>]\n\
  \                  enable assertions with specified granularity\n    -da[:<packagename>...|:<classname>]\n\
  \    -disableassertions[:<packagename>...|:<classname>]\n                  disable\
  \ assertions with specified granularity\n    -esa | -enablesystemassertions\n  \
  \                enable system assertions\n    -dsa | -disablesystemassertions\n\
  \                  disable system assertions\n    -agentlib:<libname>[=<options>]\n\
  \                  load native agent library <libname>, e.g. -agentlib:jdwp\n  \
  \                see also -agentlib:jdwp=help\n    -agentpath:<pathname>[=<options>]\n\
  \                  load native agent library by full pathname\n    -javaagent:<jarpath>[=<options>]\n\
  \                  load Java programming language agent, see java.lang.instrument\n\
  \    -splash:<imagepath>\n                  show splash screen with specified image\n\
  \                  HiDPI scaled images are automatically supported and used\n  \
  \                if available. The unscaled image filename, e.g. image.ext,\n  \
  \                should always be passed as the argument to the -splash option.\n\
  \                  The most appropriate scaled image provided will be picked up\n\
  \                  automatically.\n                  See the SplashScreen API documentation\
  \ for more information\n    @argument files\n                  one or more argument\
  \ files containing options\n    -disable-@files\n                  prevent further\
  \ argument file expansion\n    --enable-preview\n                  allow classes\
  \ to depend on preview features of this release\nTo specify an argument for a long\
  \ option, you can use --<name>=<value> or\n--<name> <value>.\n\n"
generated_using:
- --help
