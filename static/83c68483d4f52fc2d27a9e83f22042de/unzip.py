from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Unzip_V0_1_0 = CommandToolBuilder(tool="unzip", base_command=["unzip"], inputs=[ToolInput(tag="in_extract_files_pipe", input_type=Boolean(optional=True), prefix="-p", doc=InputDocumentation(doc="extract files to pipe, no messages     -l  list files (short format)")), ToolInput(tag="in_freshen_existing_files", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="freshen existing files, create none    -t  test compressed archive data")), ToolInput(tag="in_update_files_create", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="update files, create if necessary      -z  display archive comment only")), ToolInput(tag="in_list_verboselyshow_info", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="list verbosely/show version info       -T  timestamp archive to latest")), ToolInput(tag="in_exclude_files_follow", input_type=Boolean(optional=True), prefix="-x", doc=InputDocumentation(doc="exclude files that follow (in xlist)   -d  extract files into exdir")), ToolInput(tag="in_never_overwrite_files", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="never overwrite existing files         -q  quiet mode (-qq => quieter)")), ToolInput(tag="in_overwrite_files_files", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="overwrite files WITHOUT prompting      -a  auto-convert any text files")), ToolInput(tag="in_junk_paths_make", input_type=Boolean(optional=True), prefix="-j", doc=InputDocumentation(doc="junk paths (do not make directories)   -aa treat ALL files as text")), ToolInput(tag="in_match_filenames_caseinsensitively", input_type=Boolean(optional=True), prefix="-C", doc=InputDocumentation(doc="match filenames case-insensitively     -L  make (some) names lowercase")), ToolInput(tag="in_restore_uidgid_info", input_type=Boolean(optional=True), prefix="-X", doc=InputDocumentation(doc="restore UID/GID info                   -V  retain VMS version numbers")), ToolInput(tag="in_keep_permissions_pipe", input_type=Boolean(optional=True), prefix="-K", doc=InputDocumentation(doc="keep setuid/setgid/tacky permissions   -M  pipe through 'more' pager")), ToolInput(tag="in_opts", input_type=Boolean(optional=True), prefix="-opts", doc=InputDocumentation(doc="")), ToolInput(tag="in_z", input_type=Boolean(optional=True), prefix="-Z", doc=InputDocumentation(doc="")), ToolInput(tag="in_modifiers", input_type=String(optional=True), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_file", input_type=File(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/unzip:6.0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Unzip_V0_1_0().translate("wdl")

