from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Rust_Overlaps_V0_1_0 = CommandToolBuilder(tool="rust_overlaps", base_command=["rust-overlaps"], inputs=[ToolInput(tag="in_edit_distance", input_type=Boolean(optional=True), prefix="--edit_distance", doc=InputDocumentation(doc="Uses Levenshtein / edit distance instead of Hamming distance")), ToolInput(tag="in_format_line", input_type=File(optional=True), prefix="--format_line", doc=InputDocumentation(doc="The first line of the output file will contain a TSV header line.")), ToolInput(tag="in_greedy_output", input_type=Boolean(optional=True), prefix="--greedy_output", doc=InputDocumentation(doc="Threads print solutions to output greedily instead of storing them. Limited duplication may")), ToolInput(tag="in_inclusions", input_type=Boolean(optional=True), prefix="--inclusions", doc=InputDocumentation(doc="Enables finding of inclusion overlaps (one string within another)")), ToolInput(tag="in_no_n", input_type=Boolean(optional=True), prefix="--no_n", doc=InputDocumentation(doc="Omits N symbol from alphabet saving time. Will remove N symbols from input file (with a\nwarning)")), ToolInput(tag="in_print", input_type=Boolean(optional=True), prefix="--print", doc=InputDocumentation(doc="For each solution printed to file, also prints a rough visualization to stdout (mostly for\ndebugging purposes)")), ToolInput(tag="in_reversals", input_type=Boolean(optional=True), prefix="--reversals", doc=InputDocumentation(doc="Enables reversals of input strings")), ToolInput(tag="in_track_progress", input_type=Boolean(optional=True), prefix="--track_progress", doc=InputDocumentation(doc="Prints progress bar for completed tasks and ETA to stdout")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Prints completed steps of the run process")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Uses the filtering scheme mode given options {valimaki, kucherov}. Modes\ncan also be supplied string arguments i.e. 'kucherov_2'. (Default :\nkucherov_2")), ToolInput(tag="in_worker_threads", input_type=Int(optional=True), prefix="--worker_threads", doc=InputDocumentation(doc="Number of worker threads used. Defaults to number of logical cpu cores")), ToolInput(tag="in_arise", input_type=String(), position=0, doc=InputDocumentation(doc="-h, --help              Prints help information"))], outputs=[ToolOutput(tag="out_format_line", output_type=File(optional=True), selector=InputSelector(input_to_select="in_format_line", type_hint=File()), doc=OutputDocumentation(doc="The first line of the output file will contain a TSV header line."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rust_Overlaps_V0_1_0().translate("wdl", allow_empty_container=True)

