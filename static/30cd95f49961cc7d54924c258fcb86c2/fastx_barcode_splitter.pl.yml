!Command
command:
- fastx_barcode_splitter.pl
positional:
- !Positional
  optional: false
  position: 0
  name: ATTTACTATGTAAAGATAGAAGGAATAAGGTGAAG
  description: GATCT (4 mismatches)
named:
- !Flag
  optional: true
  synonyms:
  - --bcfile
  description: '- Barcodes file name. (see explanation below.)'
  args: !SimpleFlagArg
    name: FILE
- !Flag
  optional: true
  synonyms:
  - --prefix
  description: "- File prefix. will be added to the output files. Can be used\nto\
    \ specify output directories."
  args: !SimpleFlagArg
    name: PREFIX
- !Flag
  optional: true
  synonyms:
  - --suffix
  description: "- File suffix (optional). Can be used to specify file\nextensions."
  args: !SimpleFlagArg
    name: SUFFIX
- !Flag
  optional: true
  synonyms:
  - --bol
  description: "- Try to match barcodes at the BEGINNING of sequences.\n(What biologists\
    \ would call the 5' end, and programmers\nwould call index 0.)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --eol
  description: "- Try to match barcodes at the END of sequences.\n(What biologists\
    \ would call the 3' end, and programmers\nwould call the end of the string.)\n\
    NOTE: one of --bol, --eol must be specified, but not both."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --mismatches
  description: '- Max. number of mismatches allowed. default is 1.'
  args: !SimpleFlagArg
    name: N
- !Flag
  optional: true
  synonyms:
  - --exact
  description: "- Same as '--mismatches 0'. If both --exact and --mismatches\nare\
    \ specified, '--exact' takes precedence."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --partial
  description: "- Allow partial overlap of barcodes. (see explanation below.)\n(Default\
    \ is not partial matching)"
  args: !SimpleFlagArg
    name: N
- !Flag
  optional: true
  synonyms:
  - --quiet
  description: "- Don't print counts and summary at the end of the run.\n(Default\
    \ is to print.)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debug
  description: '- Print lots of useless debug information to STDERR.'
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - --help
  description: '- This helpful help screen.'
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "Barcode Splitter, by Assaf Gordon (gordon@cshl.edu), 11sep2008\n\nThis\
  \ program reads FASTA/FASTQ file and splits it into several smaller files,\nBased\
  \ on barcode matching.\nFASTA/FASTQ data is read from STDIN (format is auto-detected.)\n\
  Output files will be writen to disk.\nSummary will be printed to STDOUT.\n\nusage:\
  \ /usr/local/bin/fastx_barcode_splitter.pl --bcfile FILE --prefix PREFIX [--suffix\
  \ SUFFIX] [--bol|--eol] \n         [--mismatches N] [--exact] [--partial N] [--help]\
  \ [--quiet] [--debug]\n\nArguments:\n\n--bcfile FILE\t- Barcodes file name. (see\
  \ explanation below.)\n--prefix PREFIX\t- File prefix. will be added to the output\
  \ files. Can be used\n\t\t  to specify output directories.\n--suffix SUFFIX\t- File\
  \ suffix (optional). Can be used to specify file\n\t\t  extensions.\n--bol\t\t-\
  \ Try to match barcodes at the BEGINNING of sequences.\n\t\t  (What biologists would\
  \ call the 5' end, and programmers\n\t\t  would call index 0.)\n--eol\t\t- Try to\
  \ match barcodes at the END of sequences.\n\t\t  (What biologists would call the\
  \ 3' end, and programmers\n\t\t  would call the end of the string.)\n\t\t  NOTE:\
  \ one of --bol, --eol must be specified, but not both.\n--mismatches N\t- Max. number\
  \ of mismatches allowed. default is 1.\n--exact\t\t- Same as '--mismatches 0'. If\
  \ both --exact and --mismatches \n\t\t  are specified, '--exact' takes precedence.\n\
  --partial N\t- Allow partial overlap of barcodes. (see explanation below.)\n\t\t\
  \  (Default is not partial matching)\n--quiet\t\t- Don't print counts and summary\
  \ at the end of the run.\n\t\t  (Default is to print.)\n--debug\t\t- Print lots\
  \ of useless debug information to STDERR.\n--help\t\t- This helpful help screen.\n\
  \nExample (Assuming 's_2_100.txt' is a FASTQ file, 'mybarcodes.txt' is \nthe barcodes\
  \ file):\n\n   $ cat s_2_100.txt | /usr/local/bin/fastx_barcode_splitter.pl --bcfile\
  \ mybarcodes.txt --bol --mismatches 2 \\\n   \t--prefix /tmp/bla_ --suffix \".txt\"\
  \n\nBarcode file format\n-------------------\nBarcode files are simple text files.\
  \ Each line should contain an identifier \n(descriptive name for the barcode), and\
  \ the barcode itself (A/C/G/T), \nseparated by a TAB character. Example:\n\n   \
  \ #This line is a comment (starts with a 'number' sign)\n    BC1 GATCT\n    BC2\
  \ ATCGT\n    BC3 GTGAT\n    BC4 TGTCT\n\nFor each barcode, a new FASTQ file will\
  \ be created (with the barcode's \nidentifier as part of the file name). Sequences\
  \ matching the barcode \nwill be stored in the appropriate file.\n\nRunning the\
  \ above example (assuming \"mybarcodes.txt\" contains the above \nbarcodes), will\
  \ create the following files:\n\t/tmp/bla_BC1.txt\n\t/tmp/bla_BC2.txt\n\t/tmp/bla_BC3.txt\n\
  \t/tmp/bla_BC4.txt\n\t/tmp/bla_unmatched.txt\nThe 'unmatched' file will contain\
  \ all sequences that didn't match any barcode.\n\nBarcode matching\n----------------\n\
  \n** Without partial matching:\n\nCount mismatches between the FASTA/Q sequences\
  \ and the barcodes.\nThe barcode which matched with the lowest mismatches count\
  \ (providing the\ncount is small or equal to '--mismatches N') 'gets' the sequences.\n\
  \nExample (using the above barcodes):\nInput Sequence:\n    GATTTACTATGTAAAGATAGAAGGAATAAGGTGAAG\n\
  \nMatching with '--bol --mismatches 1':\n   GATTTACTATGTAAAGATAGAAGGAATAAGGTGAAG\n\
  \   GATCT (1 mismatch, BC1)\n   ATCGT (4 mismatches, BC2)\n   GTGAT (3 mismatches,\
  \ BC3)\n   TGTCT (3 mismatches, BC4)\n\nThis sequence will be classified as 'BC1'\
  \ (it has the lowest mismatch count).\nIf '--exact' or '--mismatches 0' were specified,\
  \ this sequence would be \nclassified as 'unmatched' (because, although BC1 had\
  \ the lowest mismatch count,\nit is above the maximum allowed mismatches).\n\nMatching\
  \ with '--eol' (end of line) does the same, but from the other side\nof the sequence.\n\
  \n** With partial matching (very similar to indels):\n\nSame as above, with the\
  \ following addition: barcodes are also checked for\npartial overlap (number of\
  \ allowed non-overlapping bases is '--partial N').\n\nExample:\nInput sequence is\
  \ ATTTACTATGTAAAGATAGAAGGAATAAGGTGAAG\n(Same as above, but note the missing 'G'\
  \ at the beginning.)\n\nMatching (without partial overlapping) against BC1 yields\
  \ 4 mismatches:\n   ATTTACTATGTAAAGATAGAAGGAATAAGGTGAAG\n   GATCT (4 mismatches)\n\
  \nPartial overlapping would also try the following match:\n   -ATTTACTATGTAAAGATAGAAGGAATAAGGTGAAG\n\
  \   GATCT (1 mismatch)\n\nNote: scoring counts a missing base as a mismatch, so\
  \ the final\nmismatch count is 2 (1 'real' mismatch, 1 'missing base' mismatch).\n\
  If running with '--mismatches 2' (meaning allowing upto 2 mismatches) - this \n\
  seqeunce will be classified as BC1.\n\n"
generated_using:
- --help
docker_image:
