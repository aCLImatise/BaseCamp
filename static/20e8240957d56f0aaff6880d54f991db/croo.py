from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Int, Boolean, String

Croo_V0_1_0 = CommandToolBuilder(tool="croo", base_command=["croo"], inputs=[ToolInput(tag="in_out_def_json", input_type=File(optional=True), prefix="--out-def-json", doc=InputDocumentation(doc="Output definition JSON file for a WDL file\ncorresponding to the specified metadata.json file")), ToolInput(tag="in_method", input_type=Directory(optional=True), prefix="--method", doc=InputDocumentation(doc="Method to localize files on output directory/bucket.\n'link' means a soft-linking and it's for local\ndirectory only. Original output files will be kept in\nCromwell's output directory. 'copy' makes copies of\nCromwell's original outputs")), ToolInput(tag="in_ucsc_genome_db", input_type=Int(optional=True), prefix="--ucsc-genome-db", doc=InputDocumentation(doc="UCSC genome browser's 'db=' parameter. (e.g. hg38 for\nGRCh38 and mm10 for mm10)")), ToolInput(tag="in_ucsc_genome_pos", input_type=Int(optional=True), prefix="--ucsc-genome-pos", doc=InputDocumentation(doc="UCSC genome browser's 'position=' parameter. (e.g.\nchr1:35000-40000)")), ToolInput(tag="in_public_gcs", input_type=Boolean(optional=True), prefix="--public-gcs", doc=InputDocumentation(doc="Your GCS (gs://) bucket is public.")), ToolInput(tag="in_use_pre_signed_url_s_three", input_type=Boolean(optional=True), prefix="--use-presigned-url-s3", doc=InputDocumentation(doc="Generate presigned URLS for files on s3://.")), ToolInput(tag="in_use_pre_signed_url_gcs", input_type=Boolean(optional=True), prefix="--use-presigned-url-gcs", doc=InputDocumentation(doc="Generate presigned URLS for files on gs://. --gcp-\nprivate-key must be provided.")), ToolInput(tag="in_gcp_private_key", input_type=File(optional=True), prefix="--gcp-private-key", doc=InputDocumentation(doc="Private key file (JSON/PKCS12) of a service account on\nGoogle Cloud Platform (GCP). This key will be used to\nmake presigned URLs on files on gs://.")), ToolInput(tag="in_duration_pre_signed_url_s_three", input_type=Int(optional=True), prefix="--duration-presigned-url-s3", doc=InputDocumentation(doc="Duration for presigned URLs for files on s3:// in\nseconds.")), ToolInput(tag="in_duration_pre_signed_url_gcs", input_type=String(optional=True), prefix="--duration-presigned-url-gcs", doc=InputDocumentation(doc="Duration for presigned URLs for files on gs:// in\nseconds.")), ToolInput(tag="in_tsv_mapping_path_to_url", input_type=File(optional=True), prefix="--tsv-mapping-path-to-url", doc=InputDocumentation(doc="A 2-column TSV file with local path prefix and\ncorresponding URL prefix. For example, using 1-line\n2-col TSV file with /var/www[TAB]http://my.server.com\nwill replace a local path /var/www/here/a.txt to a URL\nhttp://my.server.com/here/a.txt.")), ToolInput(tag="in_out_dir", input_type=File(optional=True), prefix="--out-dir", doc=InputDocumentation(doc="Output directory/bucket (LOCAL OR REMOTE). This can be\na local path, gs:// or s3://.")), ToolInput(tag="in_tmp_dir", input_type=Directory(optional=True), prefix="--tmp-dir", doc=InputDocumentation(doc="LOCAL temporary cache directory. All temporary files\nfor auto-inter-storage transfer will be stored here.\nYou can clean it up but will lose all cached files so\nthat remote files will be re-downloaded.")), ToolInput(tag="in_use_gs_util_for_s_three", input_type=Boolean(optional=True), prefix="--use-gsutil-for-s3", doc=InputDocumentation(doc="Use gsutil for direct tranfer between GCS and S3\nbuckets. Make sure that you have 'gsutil' installed\nand configured to have access to credentials for GCS\nand S3 (e.g. ~/.boto or ~/.aws/credientials)")), ToolInput(tag="in_no_checksum", input_type=File(optional=True), prefix="--no-checksum", doc=InputDocumentation(doc="Always overwrite on output directory/bucket (--out-\ndir) even if md5-identical files (or soft links)\nalready exist there. Md5 hash/filename/filesize\nchecking will be skipped.")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Prints all logs >= DEBUG level"))], outputs=[ToolOutput(tag="out_out_def_json", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_def_json", type_hint=File()), doc=OutputDocumentation(doc="Output definition JSON file for a WDL file\ncorresponding to the specified metadata.json file")), ToolOutput(tag="out_method", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_method", type_hint=File()), doc=OutputDocumentation(doc="Method to localize files on output directory/bucket.\n'link' means a soft-linking and it's for local\ndirectory only. Original output files will be kept in\nCromwell's output directory. 'copy' makes copies of\nCromwell's original outputs")), ToolOutput(tag="out_out_dir", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_dir", type_hint=File()), doc=OutputDocumentation(doc="Output directory/bucket (LOCAL OR REMOTE). This can be\na local path, gs:// or s3://.")), ToolOutput(tag="out_no_checksum", output_type=File(optional=True), selector=InputSelector(input_to_select="in_no_checksum", type_hint=File()), doc=OutputDocumentation(doc="Always overwrite on output directory/bucket (--out-\ndir) even if md5-identical files (or soft links)\nalready exist there. Md5 hash/filename/filesize\nchecking will be skipped."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Croo_V0_1_0().translate("wdl", allow_empty_container=True)

