from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, Directory, String

Bam_Cov_Py_V0_1_0 = CommandToolBuilder(tool="bam_cov.py", base_command=["bam_cov.py"], inputs=[ToolInput(tag="in_normalize_coverage_cutting", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="Normalize coverage for a cutting bias model for k-mers\n[Default: none]")), ToolInput(tag="in_shift_event_fragment", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Shift the event to the fragment center, learning the\ndistribution for single end reads [Default: False]")), ToolInput(tag="in_clip_max", input_type=Int(optional=True), prefix="--clip_max", doc=InputDocumentation(doc="Clip coverage using adaptively-determined thresholds\nto this maximum [Default: none]")), ToolInput(tag="in_clip_multi", input_type=Int(optional=True), prefix="--clip_multi", doc=InputDocumentation(doc="Maximum coverage at a single position from multi-\nmapping reads [Default: none]")), ToolInput(tag="in_fasta_obtain_sequence", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="FASTA to obtain sequence to control for GC% [Default:\nnone]")), ToolInput(tag="in_control_local_gc", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="Control for local GC% [Default: False]")), ToolInput(tag="in_iterations_em_distribute", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Iterations of EM to distribute multi-mapping reads\n[Default: 0]")), ToolInput(tag="in_output_directory", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc="Output directory [Default: bam_cov]")), ToolInput(tag="in_filter_alignments_mapq", input_type=Int(optional=True), prefix="-q", doc=InputDocumentation(doc="Filter alignments for MAPQ >= threshold [Default: 2]")), ToolInput(tag="in_gaussian_standard_deviation", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc="Gaussian standard deviation to smooth coverage\nestimates with [Default: 32]")), ToolInput(tag="in_strand", input_type=Boolean(optional=True), prefix="--strand", doc=InputDocumentation(doc="Stranded sequencing, output forward and reverse\ncoverage tracks [Default: False]")), ToolInput(tag="in_alignments_are_unsorted", input_type=Boolean(optional=True), prefix="-u", doc=InputDocumentation(doc="Alignments are unsorted [Default: False]")), ToolInput(tag="in_fragment_shift_forward", input_type=Int(optional=True), prefix="-v", doc=InputDocumentation(doc="Fragment shift for forward end read [Default: 0]")), ToolInput(tag="in_fragment_shift_reverse", input_type=Int(optional=True), prefix="-w", doc=InputDocumentation(doc="Fragment shift for reverse end read [Default: 0]")), ToolInput(tag="in_bam_file", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_output_file", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output_directory", type_hint=File()), doc=OutputDocumentation(doc="Output directory [Default: bam_cov]"))], container="quay.io/biocontainers/basenji:0.5.1--pyhdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bam_Cov_Py_V0_1_0().translate("wdl")

