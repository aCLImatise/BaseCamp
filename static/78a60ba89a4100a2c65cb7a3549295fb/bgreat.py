from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int

Bgreat_V0_1_0 = CommandToolBuilder(tool="bgreat", base_command=["bgreat"], inputs=[ToolInput(tag="in_file_unpaired", input_type=File(optional=True), prefix="-u", doc=InputDocumentation(doc="file (unpaired)")), ToolInput(tag="in_file_paired", input_type=File(optional=True), prefix="-x", doc=InputDocumentation(doc="file (paired)")), ToolInput(tag="in_value_used_graph", input_type=String(optional=True), prefix="-k", doc=InputDocumentation(doc="value used for graph")), ToolInput(tag="in_file_unitigfa", input_type=File(optional=True), prefix="-g", doc=InputDocumentation(doc="file (unitig.fa)")), ToolInput(tag="in_file_paths", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="file (paths)")), ToolInput(tag="in_read_file_fastq", input_type=File(optional=True), prefix="-q", doc=InputDocumentation(doc="read file are FASTQ")), ToolInput(tag="in_keep_order_reads", input_type=String(optional=True), prefix="-O", doc=InputDocumentation(doc="keep order of the reads")), ToolInput(tag="in_length", input_type=Int(optional=True), prefix="-a", doc=InputDocumentation(doc="length (31)")), ToolInput(tag="in_of_missmatch_allowed", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="of missmatch allowed (5)")), ToolInput(tag="in_of_threads_used", input_type=Int(optional=True), prefix="-t", doc=InputDocumentation(doc="of threads used (1)")), ToolInput(tag="in_output_corrected_reads", input_type=String(optional=True), prefix="-c", doc=InputDocumentation(doc="output corrected reads")), ToolInput(tag="in_compress_output_file", input_type=File(optional=True), prefix="-z", doc=InputDocumentation(doc="compress output file")), ToolInput(tag="in_fraction_indexed_default", input_type=Int(optional=True), prefix="-i", doc=InputDocumentation(doc="fraction to be indexed (default 1=all, 5 for one out of 5)")), ToolInput(tag="in_output_compressed_reads", input_type=String(optional=True), prefix="-C", doc=InputDocumentation(doc="output compressed reads")), ToolInput(tag="in_more_precise_output", input_type=String(optional=True), prefix="-p", doc=InputDocumentation(doc="more precise output")), ToolInput(tag="in_print_the_alignments", input_type=String(optional=True), prefix="-P", doc=InputDocumentation(doc="print the alignments")), ToolInput(tag="in_output_all_possible_mapping", input_type=String(optional=True), prefix="-A", doc=InputDocumentation(doc="output all possible mapping")), ToolInput(tag="in_output_possible_optimal_mapping", input_type=String(optional=True), prefix="-B", doc=InputDocumentation(doc="output all possible optimal mapping")), ToolInput(tag="in_occurence_of_anchor", input_type=Int(optional=True), prefix="-o", doc=InputDocumentation(doc="occurence of an anchor (1)")), ToolInput(tag="in_put_in_mapping", input_type=Int(optional=True), prefix="-e", doc=InputDocumentation(doc="put in mapping (1000)")), ToolInput(tag="in_output_optimal_mapping", input_type=String(optional=True), prefix="-F", doc=InputDocumentation(doc="output any optimal mapping"))], outputs=[ToolOutput(tag="out_compress_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_compress_output_file", type_hint=File()), doc=OutputDocumentation(doc="compress output file"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bgreat_V0_1_0().translate("wdl", allow_empty_container=True)

