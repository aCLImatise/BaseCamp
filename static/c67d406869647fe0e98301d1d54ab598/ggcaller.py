from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int

Ggcaller_V0_1_0 = CommandToolBuilder(tool="ggcaller", base_command=["ggcaller"], inputs=[ToolInput(tag="in_graph", input_type=File(optional=True), prefix="--graph", doc=InputDocumentation(doc="Bifrost GFA file generated by Bifrost build.")), ToolInput(tag="in_colours", input_type=File(optional=True), prefix="--colours", doc=InputDocumentation(doc="Bifrost colours file generated by Bifrost build.")), ToolInput(tag="in_not_ref", input_type=Boolean(optional=True), prefix="--not-ref", doc=InputDocumentation(doc="If using existing graph, was not graph built\nexclusively with assembled genomes. [Default = False]")), ToolInput(tag="in_refs", input_type=File(optional=True), prefix="--refs", doc=InputDocumentation(doc="List of reference genomes (one file path per line).")), ToolInput(tag="in_reads", input_type=File(optional=True), prefix="--reads", doc=InputDocumentation(doc="List of reference genomes (one file path per line).")), ToolInput(tag="in_codons", input_type=File(optional=True), prefix="--codons", doc=InputDocumentation(doc="JSON file containing start and stop codon sequences.")), ToolInput(tag="in_km_er", input_type=Int(optional=True), prefix="--kmer", doc=InputDocumentation(doc="K-mer size used in Bifrost build (bp). [Default = 31]")), ToolInput(tag="in_path", input_type=File(optional=True), prefix="--path", doc=InputDocumentation(doc="Maximum path length during traversal (bp). [Default =\n10000]")), ToolInput(tag="in_orf", input_type=Int(optional=True), prefix="--orf", doc=InputDocumentation(doc="Minimum ORF length to return (bp). [Default = 90]")), ToolInput(tag="in_max_overlap", input_type=Int(optional=True), prefix="--maxoverlap", doc=InputDocumentation(doc="Maximum overlap allowed between overlapping ORFs.\n[Default = 60]")), ToolInput(tag="in_min_path_score", input_type=Int(optional=True), prefix="--min-path-score", doc=InputDocumentation(doc="Minimum total score for a path of ORFs to be returned.\n[Default = 100]")), ToolInput(tag="in_min_orf_score", input_type=Int(optional=True), prefix="--min-orf-score", doc=InputDocumentation(doc="Minimum individual score for an ORF to be returned.\n[Default = 100]")), ToolInput(tag="in_no_filter", input_type=Boolean(optional=True), prefix="--no-filter", doc=InputDocumentation(doc="Do not filter ORF calls using Balrog. Will return all\nORF calls. [Default = False]")), ToolInput(tag="in_no_write_idx", input_type=Boolean(optional=True), prefix="--no-write-idx", doc=InputDocumentation(doc="Do not write FMIndexes to file. [Default = False]")), ToolInput(tag="in_no_write_graph", input_type=Boolean(optional=True), prefix="--no-write-graph", doc=InputDocumentation(doc="Do not write Bifrost GFA and colours to file. [Default\n= False]")), ToolInput(tag="in_repeat", input_type=Boolean(optional=True), prefix="--repeat", doc=InputDocumentation(doc="Enable traversal of nodes mulitple times. [Default =\nFalse]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads for FMIndexing [Default = 1]")), ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="Output FASTA file containing ORF sequences."))], outputs=[ToolOutput(tag="out_out", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out", type_hint=File()), doc=OutputDocumentation(doc="Output FASTA file containing ORF sequences."))], container="quay.io/biocontainers/ggcaller:1.2.2--py39h2d02072_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ggcaller_V0_1_0().translate("wdl")

