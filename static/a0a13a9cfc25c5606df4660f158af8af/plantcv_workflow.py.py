from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, File, Int, Boolean, String

Plantcv_Workflow_Py_V0_1_0 = CommandToolBuilder(tool="plantcv_workflow.py", base_command=["plantcv-workflow.py"], inputs=[ToolInput(tag="in_dir", input_type=Directory(optional=True), prefix="--dir", doc=InputDocumentation(doc="Input directory containing images or snapshots.\n(default: None)")), ToolInput(tag="in_adaptor", input_type=File(optional=True), prefix="--adaptor", doc=InputDocumentation(doc="Image metadata reader adaptor. PhenoFront metadata is\nstored in a CSV file and the image file name. For the\nfilename option, all metadata is stored in the image\nfile name. Current adaptors: phenofront, filename\n(default: phenofront)")), ToolInput(tag="in_workflow", input_type=File(optional=True), prefix="--workflow", doc=InputDocumentation(doc="Workflow script file. (default: None)")), ToolInput(tag="in_json", input_type=File(optional=True), prefix="--json", doc=InputDocumentation(doc="Output database file name. (default: None)")), ToolInput(tag="in_meta", input_type=File(optional=True), prefix="--meta", doc=InputDocumentation(doc="Image filename metadata structure. Comma-separated\nlist of valid metadata terms. Valid metadata fields\nare: camera, imgtype, zoom, exposure, gain, frame,\nlifter, timestamp, id, plantbarcode, treatment,\ncartag, measurementlabel, other (default: None)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory for images. Not required by all\nworkflows. (default: .)")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Number of CPU processes to use. (default: 1)")), ToolInput(tag="in_create", input_type=Boolean(optional=True), prefix="--create", doc=InputDocumentation(doc="will overwrite an existing databaseWarning: activating\nthis option will delete an existing database!\n(default: False)")), ToolInput(tag="in_dates", input_type=String(optional=True), prefix="--dates", doc=InputDocumentation(doc="Date range. Format: YYYY-MM-DD-hh-mm-ss_YYYY-MM-DD-hh-\nmm-ss. If the second date is excluded then the current\ndate is assumed. (default: None)")), ToolInput(tag="in_type", input_type=String(optional=True), prefix="--type", doc=InputDocumentation(doc="Image format type (extension). (default: png)")), ToolInput(tag="in_delimiter", input_type=File(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="Image file name metadata delimiter\ncharacter.Alternatively, a regular expression for\nparsing filename metadata. (default: _)")), ToolInput(tag="in_match", input_type=Int(optional=True), prefix="--match", doc=InputDocumentation(doc="Restrict analysis to images with metadata matching\ninput criteria. Input a metadata:value comma-separated\nlist. This is an exact match search. E.g.\nimgtype:VIS,camera:SV,zoom:z500 (default: None)")), ToolInput(tag="in_co_process", input_type=String(optional=True), prefix="--coprocess", doc=InputDocumentation(doc="Coprocess the specified imgtype with the imgtype\nspecified in --match (e.g. coprocess NIR images with\nVIS). (default: None)")), ToolInput(tag="in_timestamp_format", input_type=String(optional=True), prefix="--timestampformat", doc=InputDocumentation(doc="a date format code compatible with strptime C library,\ne.g. '%Y-%m-%d %H_%M_%S', except '%' symbols must be\nescaped on Windows with '%' e.g. '%%Y-%%m-%%d\n%%H_%%M_%%S'default format code is '%Y-%m-%d\n%H:%M:%S.%f' (default: %Y-%m-%d %H:%M:%S.%f)")), ToolInput(tag="in_write_img", input_type=Boolean(optional=True), prefix="--writeimg", doc=InputDocumentation(doc="Include analysis images in output. (default: False)")), ToolInput(tag="in_other_args", input_type=String(optional=True), prefix="--other_args", doc=InputDocumentation(doc="Other arguments to pass to the workflow script.\n(default: None)\n"))], outputs=[ToolOutput(tag="out_json", output_type=File(optional=True), selector=InputSelector(input_to_select="in_json", type_hint=File()), doc=OutputDocumentation(doc="Output database file name. (default: None)")), ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory for images. Not required by all\nworkflows. (default: .)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Plantcv_Workflow_Py_V0_1_0().translate("wdl", allow_empty_container=True)

