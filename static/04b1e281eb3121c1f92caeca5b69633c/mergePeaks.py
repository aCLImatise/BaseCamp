from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String

Mergepeaks_V0_1_0 = CommandToolBuilder(tool="mergePeaks", base_command=["mergePeaks"], inputs=[ToolInput(tag="in_strand", input_type=Boolean(optional=True), prefix="-strand", doc=InputDocumentation(doc="(Only merge/consider peaks on the same strand, default: either strand)")), ToolInput(tag="in_given_maximum_distance", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="<#|given> (Maximum distance between peak centers to merge, default: given)\nUsing '-d given' looks for literal overlaps in peak regions - DEFAULT since v4.4\nUse '-d given' when features have vastly different sizes (i.e. peaks vs. introns)")), ToolInput(tag="in_file", input_type=File(optional=True), prefix="-file", doc=InputDocumentation(doc="(file listing peak files to compare - for lots of peak files)")), ToolInput(tag="in_g_size", input_type=Boolean(optional=True), prefix="-gsize", doc=InputDocumentation(doc="<#> (Genome size for significance calculations, default: 2e9)")), ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="-prefix", doc=InputDocumentation(doc="(Generates separate files for overlapping and unique peaks)\nBy default all peaks are sent to stdout")), ToolInput(tag="in_matrix", input_type=File(optional=True), prefix="-matrix", doc=InputDocumentation(doc="(Generates files with pairwise comparison statistics)\nfilename.logPvalue.matrix.txt - ln p-values for overlap, +values for divergence\nfilename.logRatio.matrix.txt - ln ratio of observed/expected overlaps\nfilename.count.matrix.txt - peak overlap counts")), ToolInput(tag="in_venn", input_type=File(optional=True), prefix="-venn", doc=InputDocumentation(doc="(output venn diagram numbers to file, default: to stderr)")), ToolInput(tag="in_code", input_type=Boolean(optional=True), prefix="-code", doc=InputDocumentation(doc="(report peak membership as binary instead of by file names)")), ToolInput(tag="in_co_bound", input_type=Boolean(optional=True), prefix="-cobound", doc=InputDocumentation(doc="<#> (Maximum number of co-bound peaks to consider)\nWill output sets of peaks that are co-bound by various numbers of factors\nto files coBoundBy0.txt, coBoundBy1.txt, coboundBy2.txt, ...\nOr <prefix>.coBoundBy0.txt, <prefix>.coBoundBy1.txt, ...")), ToolInput(tag="in_filter", input_type=String(optional=True), prefix="-filter", doc=InputDocumentation(doc=":XXX-YYY (only analyze peaks within range)")), ToolInput(tag="in_coverage", input_type=File(optional=True), prefix="-coverage", doc=InputDocumentation(doc="(returns the total bp covered by each peak file - use '-d given'")), ToolInput(tag="in_primary_peak_file", input_type=File(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_venn", output_type=File(optional=True), selector=InputSelector(input_to_select="in_venn", type_hint=File()), doc=OutputDocumentation(doc="(output venn diagram numbers to file, default: to stderr)")), ToolOutput(tag="out_coverage", output_type=File(optional=True), selector=InputSelector(input_to_select="in_coverage", type_hint=File()), doc=OutputDocumentation(doc="(returns the total bp covered by each peak file - use '-d given'"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mergepeaks_V0_1_0().translate("wdl", allow_empty_container=True)

