from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String, Float, Directory

Ppanggolin_Cluster_V0_1_0 = CommandToolBuilder(tool="ppanggolin_cluster", base_command=["ppanggolin", "cluster"], inputs=[ToolInput(tag="in_pan_genome", input_type=File(optional=True), prefix="--pangenome", doc=InputDocumentation(doc="The pangenome .h5 file (default: None)")), ToolInput(tag="in_defrag", input_type=Boolean(optional=True), prefix="--defrag", doc=InputDocumentation(doc="Use the defragmentation strategy to associated\npotential fragments with their original gene family.\n(default: False)")), ToolInput(tag="in_translation_table", input_type=Int(optional=True), prefix="--translation_table", doc=InputDocumentation(doc="Translation table (genetic code) to use. (default: 11)")), ToolInput(tag="in_clusters", input_type=String(optional=True), prefix="--clusters", doc=InputDocumentation(doc="A tab-separated list containing the result of a\nclustering. One line per gene. First column is cluster\nID, and second is gene ID (default: None)")), ToolInput(tag="in_infer_singletons", input_type=Boolean(optional=True), prefix="--infer_singletons", doc=InputDocumentation(doc="When reading a clustering result with --clusters, if a\ngene is not in the provided file it will be placed in\na cluster where the gene is the only member. (default:\nFalse)")), ToolInput(tag="in_coverage", input_type=Float(optional=True), prefix="--coverage", doc=InputDocumentation(doc="Minimal coverage of the alignment for two proteins to\nbe in the same cluster (default: 0.8)")), ToolInput(tag="in_identity", input_type=Float(optional=True), prefix="--identity", doc=InputDocumentation(doc="Minimal identity percent for two proteins to be in the\nsame cluster (default: 0.8)")), ToolInput(tag="in_tmpdir", input_type=Directory(optional=True), prefix="--tmpdir", doc=InputDocumentation(doc="directory for storing temporary files (default: /tmp)")), ToolInput(tag="in_verbose", input_type=String(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Indicate verbose level (0 for warning and errors only,\n1 for info, 2 for debug) (default: 1)")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="log output file (default: stdout)")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Number of available cpus (default: 1)")), ToolInput(tag="in_force", input_type=File(optional=True), prefix="--force", doc=InputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], outputs=[ToolOutput(tag="out_log", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log", type_hint=File()), doc=OutputDocumentation(doc="log output file (default: stdout)")), ToolOutput(tag="out_force", output_type=File(optional=True), selector=InputSelector(input_to_select="in_force", type_hint=File()), doc=OutputDocumentation(doc="Force writing in output directory and in pangenome\noutput file. (default: False)\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ppanggolin_Cluster_V0_1_0().translate("wdl", allow_empty_container=True)

