from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Directory, File, Int

Ansible_Pull_V0_1_0 = CommandToolBuilder(tool="ansible_pull", base_command=["ansible-pull"], inputs=[ToolInput(tag="in_accept_host_key", input_type=Boolean(optional=True), prefix="--accept-host-key", doc=InputDocumentation(doc="adds the hostkey for the repo url if not already added")), ToolInput(tag="in_ask_sudo_pass", input_type=Boolean(optional=True), prefix="--ask-sudo-pass", doc=InputDocumentation(doc="ask for sudo password")), ToolInput(tag="in_checkout", input_type=String(optional=True), prefix="--checkout", doc=InputDocumentation(doc="branch/tag/commit to checkout.  Defaults to behavior\nof repository module.")), ToolInput(tag="in_directory", input_type=Directory(optional=True), prefix="--directory", doc=InputDocumentation(doc="directory to checkout repository to")), ToolInput(tag="in_extra_vars", input_type=String(optional=True), prefix="--extra-vars", doc=InputDocumentation(doc="set additional variables as key=value or YAML/JSON")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="run the playbook even if the repository could not be")), ToolInput(tag="in_inventory_file", input_type=File(optional=True), prefix="--inventory-file", doc=InputDocumentation(doc="location of the inventory host file")), ToolInput(tag="in_key_file", input_type=File(optional=True), prefix="--key-file", doc=InputDocumentation(doc="Pass '-i <key_file>' to the SSH arguments used by git.")), ToolInput(tag="in_module_name", input_type=String(optional=True), prefix="--module-name", doc=InputDocumentation(doc="Module name used to check out repository.  Default is\ngit.")), ToolInput(tag="in_only_if_changed", input_type=Boolean(optional=True), prefix="--only-if-changed", doc=InputDocumentation(doc="only run the playbook if the repository has been\nupdated")), ToolInput(tag="in_purge", input_type=Boolean(optional=True), prefix="--purge", doc=InputDocumentation(doc="purge checkout after playbook run")), ToolInput(tag="in_sleep", input_type=Int(optional=True), prefix="--sleep", doc=InputDocumentation(doc="sleep for random interval (between 0 and n number of\nseconds) before starting. this is a useful way to\ndisperse git requests")), ToolInput(tag="in_tags", input_type=String(optional=True), prefix="--tags", doc=InputDocumentation(doc="only run plays and tasks tagged with these values")), ToolInput(tag="in_track_submodules", input_type=Boolean(optional=True), prefix="--track-submodules", doc=InputDocumentation(doc="submodules will track the latest commit on their\nmaster branch (or other branch specified in\n.gitmodules). This is equivalent to specifying the\n--remote flag to git submodule update")), ToolInput(tag="in_url", input_type=String(optional=True), prefix="--url", doc=InputDocumentation(doc="URL of the playbook repository")), ToolInput(tag="in_vault_password_file", input_type=File(optional=True), prefix="--vault-password-file", doc=InputDocumentation(doc="vault password file")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Pass -vvvv to ansible-playbook")), ToolInput(tag="in_updated", input_type=String(), position=0, doc=InputDocumentation(doc="--git-force           modified files in the working git repository will be")), ToolInput(tag="in_discarded", input_type=String(), position=1, doc=InputDocumentation(doc="-h, --help            show this help message and exit"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ansible_Pull_V0_1_0().translate("wdl", allow_empty_container=True)

