from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean, Float

Trumicount_V0_1_0 = CommandToolBuilder(tool="trumicount", base_command=["trumicount"], inputs=[ToolInput(tag="in_input_bam", input_type=File(optional=True), prefix="--input-bam", doc=InputDocumentation(doc="read UMIs from FILE (uses `umi_tools group`)")), ToolInput(tag="in_input_umi_tools_group_out", input_type=File(optional=True), prefix="--input-umitools-group-out", doc=InputDocumentation(doc="read UMIs from FILE produced by `umi_tools group`")), ToolInput(tag="in_input_um_is", input_type=File(optional=True), prefix="--input-umis", doc=InputDocumentation(doc="read UMIs from FILE (previously produced by --output-umis)")), ToolInput(tag="in_output_counts", input_type=File(optional=True), prefix="--output-counts", doc=InputDocumentation(doc="write bias-corrected per-group counts and models to FILE")), ToolInput(tag="in_output_um_is", input_type=File(optional=True), prefix="--output-umis", doc=InputDocumentation(doc="write UMIs reported by `umi_tools group` to FILE")), ToolInput(tag="in_output_final_um_is", input_type=File(optional=True), prefix="--output-final-umis", doc=InputDocumentation(doc="write strand-combined and filtered UMIs to FILE")), ToolInput(tag="in_output_read_dist", input_type=File(optional=True), prefix="--output-readdist", doc=InputDocumentation(doc="write global reads/UMI distribution (before and after filtering) to FILE")), ToolInput(tag="in_output_plots", input_type=String(optional=True), prefix="--output-plots", doc=InputDocumentation(doc="write diagnostic plots in PDF format to PLOT")), ToolInput(tag="in_output_groupwise_fits", input_type=File(optional=True), prefix="--output-groupwise-fits", doc=InputDocumentation(doc="write group-wise model details to FILE")), ToolInput(tag="in_output_genewise_fits", input_type=File(optional=True), prefix="--output-genewise-fits", doc=InputDocumentation(doc="obsolete name for --output-groupwise-fits")), ToolInput(tag="in_umi_tools", input_type=String(optional=True), prefix="--umitools", doc=InputDocumentation(doc="use executable UMITOOLS to run `umi_tools group` [Default: umi_tools]")), ToolInput(tag="in_umi_tools_option", input_type=String(optional=True), prefix="--umitools-option", doc=InputDocumentation(doc="pass UMITOOLSOPT to `umi_tools group` (see `umi_tools group --help`)")), ToolInput(tag="in_umi_sep", input_type=String(optional=True), prefix="--umi-sep", doc=InputDocumentation(doc="assume UMISEP separates read name and UMI (passed to umi_tools) [Default: _]")), ToolInput(tag="in_umi_pair_sep", input_type=Int(optional=True), prefix="--umipair-sep", doc=InputDocumentation(doc="assume UMIPAIRSEP separates read1 and read2 UMI (see Strand UMIs) [Default: ]")), ToolInput(tag="in_paired", input_type=Boolean(optional=True), prefix="--paired", doc=InputDocumentation(doc="assume BAM file contains paired reads (passed to umi_tools) [Default: FALSE]")), ToolInput(tag="in_mapping_quality", input_type=Int(optional=True), prefix="--mapping-quality", doc=InputDocumentation(doc="ignored read with mapping quality below MAPQ (passed to umi_tools) [Default: 20]")), ToolInput(tag="in_filter_strand_um_is", input_type=Boolean(optional=True), prefix="--filter-strand-umis", doc=InputDocumentation(doc="filtes UMIs where only one strands was observed [Default: FALSE]")), ToolInput(tag="in_combine_strand_um_is", input_type=Boolean(optional=True), prefix="--combine-strand-umis", doc=InputDocumentation(doc="combine UMIs strand pairs (implies --filter-strand-umis) [Default: FALSE]")), ToolInput(tag="in_threshold", input_type=String(optional=True), prefix="--threshold", doc=InputDocumentation(doc="remove UMIs with fewer than THRESHOLD reads")), ToolInput(tag="in_threshold_quantile", input_type=Float(optional=True), prefix="--threshold-quantile", doc=InputDocumentation(doc="use quantile Q of the raw read-count distribution for THRESHOLD [Default: 0.2]")), ToolInput(tag="in_molecules", input_type=Int(optional=True), prefix="--molecules", doc=InputDocumentation(doc="assume UMIs are initially represented by MOLECULES copies (strands) [Default: 2]")), ToolInput(tag="in_group_per", input_type=Int(optional=True), prefix="--group-per", doc=InputDocumentation(doc=",KEY2,...       counts UMIs per distinct key(s), can be 'cell' and/or 'gene',\n'cell' implies --umitools-option --per-cell [Default: gene]")), ToolInput(tag="in_skip_groupwise_fits", input_type=Boolean(optional=True), prefix="--skip-groupwise-fits", doc=InputDocumentation(doc="skip group-wise model fitting, stop after plotting the global fit")), ToolInput(tag="in_include_filter_statistics", input_type=Boolean(optional=True), prefix="--include-filter-statistics", doc=InputDocumentation(doc="add filtered and unfiltered read and UMI counts to count table [Default: FALSE]")), ToolInput(tag="in_groupwise_min_um_is", input_type=Int(optional=True), prefix="--groupwise-min-umis", doc=InputDocumentation(doc="use global estimates for groups with fewer than MINUMIS (strand) UMIs [Default: 5]")), ToolInput(tag="in_genewise_min_um_is", input_type=Int(optional=True), prefix="--genewise-min-umis", doc=InputDocumentation(doc="obsolete name for --groupwise-min-umis")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="spread group-wise model fitting over CORES cpus [Default: 1]")), ToolInput(tag="in_variance_estimator", input_type=String(optional=True), prefix="--variance-estimator", doc=InputDocumentation(doc="use VAREST to estimate variances, can be 'lsq' or 'mle' [Default: lsq]")), ToolInput(tag="in_digits", input_type=Int(optional=True), prefix="--digits", doc=InputDocumentation(doc="number of digits to output [Default: 3]")), ToolInput(tag="in_plot_hist_bin", input_type=String(optional=True), prefix="--plot-hist-bin", doc=InputDocumentation(doc="make read count histogram bins PLOTXBIN wide")), ToolInput(tag="in_plot_hist_xmax", input_type=String(optional=True), prefix="--plot-hist-xmax", doc=InputDocumentation(doc="limit read count histogram plot to at most PLOTXMAX reads per UMI")), ToolInput(tag="in_plot_skip_phantoms", input_type=Boolean(optional=True), prefix="--plot-skip-phantoms", doc=InputDocumentation(doc="do not show phantom UMIs in histogram plot [Default: FALSE]")), ToolInput(tag="in_plot_var_bins", input_type=Int(optional=True), prefix="--plot-var-bins", doc=InputDocumentation(doc="plot PLOTVARBINS separate emprirical variances [Default: 10]")), ToolInput(tag="in_plot_var_logy", input_type=Boolean(optional=True), prefix="--plot-var-logy", doc=InputDocumentation(doc="use log scale for the variance (y) axis [Default: FALSE]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="enable verbose output"))], outputs=[ToolOutput(tag="out_input_um_is", output_type=File(optional=True), selector=InputSelector(input_to_select="in_input_um_is", type_hint=File()), doc=OutputDocumentation(doc="read UMIs from FILE (previously produced by --output-umis)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Trumicount_V0_1_0().translate("wdl", allow_empty_container=True)

