from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Int, Float, Boolean, File

Framebot_Framebot_V0_1_0 = CommandToolBuilder(tool="FrameBot_framebot", base_command=["FrameBot", "framebot"], inputs=[ToolInput(tag="in_alignment_mode", input_type=String(optional=True), prefix="--alignment-mode", doc=InputDocumentation(doc="Alignment mode: glocal, local or global (default = glocal)")), ToolInput(tag="in_de_novo_abund_cut_off", input_type=Int(optional=True), prefix="--denovo-abund-cutoff", doc=InputDocumentation(doc="minimum abundance for de-novo mode. default = 10")), ToolInput(tag="in_de_novo_id_cut_off", input_type=Float(optional=True), prefix="--denovo-id-cutoff", doc=InputDocumentation(doc="maxmimum aa identity cutoff for query to be added to refset for de-novo mode. default\n= 0.7")), ToolInput(tag="in_gap_ext_penalty", input_type=Int(optional=True), prefix="--gap-ext-penalty", doc=InputDocumentation(doc="gap extension penalty for no-metric-search ONLY. Default is -1")), ToolInput(tag="in_frameshift_penalty", input_type=Int(optional=True), prefix="--frameshift-penalty", doc=InputDocumentation(doc="frameshift penalty for no-metric-search ONLY. Default is -10")), ToolInput(tag="in_gap_open_penalty", input_type=Int(optional=True), prefix="--gap-open-penalty", doc=InputDocumentation(doc="gap opening penalty for no-metric-search ONLY. Default is -10")), ToolInput(tag="in_identity_cut_off", input_type=Float(optional=True), prefix="--identity-cutoff", doc=InputDocumentation(doc="Percent identity cutoff [0-1] (default = .4)")), ToolInput(tag="in_knn", input_type=Int(optional=True), prefix="--knn", doc=InputDocumentation(doc="The top k closest targets from kmer prefilter step. Set k=0 to disable this step.\n(default = 10)")), ToolInput(tag="in_length_cut_off", input_type=Int(optional=True), prefix="--length-cutoff", doc=InputDocumentation(doc="Length cutoff in number of amino acids (default = 80)")), ToolInput(tag="in_max_radius", input_type=Int(optional=True), prefix="--max-radius", doc=InputDocumentation(doc="maximum radius for metric-search ONLY, range [1-2147483647], default uses the\nmaxRadius specified in the index file")), ToolInput(tag="in_no_metric_search", input_type=Boolean(optional=True), prefix="--no-metric-search", doc=InputDocumentation(doc="Disable metric search (provide fasta file of seeds instead of index file)")), ToolInput(tag="in_result_stem", input_type=File(optional=True), prefix="--result-stem", doc=InputDocumentation(doc="Result file name stem (default=stem of query nucl file)")), ToolInput(tag="in_quality_file", input_type=File(optional=True), prefix="--quality-file", doc=InputDocumentation(doc="Sequence quality data")), ToolInput(tag="in_transl_table", input_type=Int(optional=True), prefix="--transl-table", doc=InputDocumentation(doc="Protein translation table to use (integer based on ncbi's translation tables,\ndefault=11 bacteria/archaea)")), ToolInput(tag="in_word_size", input_type=Int(optional=True), prefix="--word-size", doc=InputDocumentation(doc="The word size used to find closest protein targets. (default = 4, recommended range [3\n- 6])")), ToolInput(tag="in_scoring_matrix", input_type=Int(optional=True), prefix="--scoring-matrix", doc=InputDocumentation(doc="the protein scoring matrix for no-metric-search ONLY. Default is Blosum62")), ToolInput(tag="in_de_novo", input_type=Boolean(optional=True), prefix="--de-novo", doc=InputDocumentation(doc="Enable de novo mode to add abundant query seqs to refset. Only works for\nno-metric-search")), ToolInput(tag="in_frame_bot_main", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_seed_or_index_file", input_type=File(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_query_file", input_type=File(), position=2, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Framebot_Framebot_V0_1_0().translate("wdl", allow_empty_container=True)

