from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, String

Otu_Filters_Py_V0_1_0 = CommandToolBuilder(tool="otu_filters.py", base_command=["otu_filters.py"], inputs=[ToolInput(tag="in_nb_cpus", input_type=Int(optional=True), prefix="--nb-cpus", doc=InputDocumentation(doc="The maximum number of CPUs used. [Default: 1]")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Keep temporary files to debug program.")), ToolInput(tag="in_nb_biggest_otu", input_type=Int(optional=True), prefix="--nb-biggest-otu", doc=InputDocumentation(doc="Number of most abundant OTUs you want to keep.")), ToolInput(tag="in_min_sample_presence", input_type=Int(optional=True), prefix="--min-sample-presence", doc=InputDocumentation(doc="Keep OTU present in at least this number of samples.")), ToolInput(tag="in_min_abundance", input_type=Int(optional=True), prefix="--min-abundance", doc=InputDocumentation(doc="Minimum percentage/number of sequences, comparing to\nthe total number of sequences, of an OTU (between 0\nand 1 if percentage desired).")), ToolInput(tag="in_input_biom", input_type=File(optional=True), prefix="--input-biom", doc=InputDocumentation(doc="The input BIOM file. (format: BIOM)")), ToolInput(tag="in_input_fast_a", input_type=File(optional=True), prefix="--input-fasta", doc=InputDocumentation(doc="The input FASTA file. (format: FASTA)")), ToolInput(tag="in_contaminant", input_type=String(optional=True), prefix="--contaminant", doc=InputDocumentation(doc="Use this databank to filter sequence before\naffiliation. (format: FASTA)")), ToolInput(tag="in_output_biom", input_type=File(optional=True), prefix="--output-biom", doc=InputDocumentation(doc="The BIOM file output. (format: BIOM) [Default:\notu_filters_abundance.biom]")), ToolInput(tag="in_output_fast_a", input_type=File(optional=True), prefix="--output-fasta", doc=InputDocumentation(doc="The FASTA output file. (format: FASTA) [Default:\notu_filters.fasta]")), ToolInput(tag="in_summary", input_type=File(optional=True), prefix="--summary", doc=InputDocumentation(doc="The HTML file containing the graphs. [Default:\notu_filters.html]")), ToolInput(tag="in_excluded", input_type=File(optional=True), prefix="--excluded", doc=InputDocumentation(doc="The TSV file that summarizes all the clusters\ndiscarded. (format: TSV) [Default:\notu_filters_excluded.tsv]")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="This output file will contain several information on\nexecuted commands.\n")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_output_biom", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_biom", type_hint=File()), doc=OutputDocumentation(doc="The BIOM file output. (format: BIOM) [Default:\notu_filters_abundance.biom]")), ToolOutput(tag="out_output_fast_a", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_fast_a", type_hint=File()), doc=OutputDocumentation(doc="The FASTA output file. (format: FASTA) [Default:\notu_filters.fasta]")), ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="This output file will contain several information on\nexecuted commands.\n"))], container="quay.io/biocontainers/frogs:3.2.2--py37_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Otu_Filters_Py_V0_1_0().translate("wdl")

