from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, Directory, Array, String

Coconet_Preprocess_V0_1_0 = CommandToolBuilder(tool="coconet_preprocess", base_command=["coconet", "preprocess"], inputs=[ToolInput(tag="in_fast_a", input_type=File(optional=True), prefix="--fasta", doc=InputDocumentation(doc="Path to your assembly file (fasta formatted) (default:\nNone)")), ToolInput(tag="in_h_five", input_type=Int(optional=True), prefix="--h5", doc=InputDocumentation(doc="Experimental: coverage in hdf5 format (keys are\ncontigs, values are (sample, contig_len) ndarrays\n(default: None)")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Path to output directory (default: output)")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads (default: 5)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Print debugging statements (default: 20)")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Less verbose (default: None)")), ToolInput(tag="in_silent", input_type=Boolean(optional=True), prefix="--silent", doc=InputDocumentation(doc="Only error messages (default: None)")), ToolInput(tag="in_continue", input_type=Directory(optional=True), prefix="--continue", doc=InputDocumentation(doc="Start from last checkpoint. The output directory needs\nto be the same. (default: False)")), ToolInput(tag="in_bam", input_type=Array(t=String(), optional=True), prefix="--bam", doc=InputDocumentation(doc="List of paths to your coverage files (bam formatted)\n(default: None)")), ToolInput(tag="in_min_ctg_len", input_type=Int(optional=True), prefix="--min-ctg-len", doc=InputDocumentation(doc="Minimum contig length (default: 2048)")), ToolInput(tag="in_min_prevalence", input_type=Int(optional=True), prefix="--min-prevalence", doc=InputDocumentation(doc="Minimum contig prevalence for binning. Contig with\nless that value are filtered out. (default: 2)")), ToolInput(tag="in_min_mapping_quality", input_type=Int(optional=True), prefix="--min-mapping-quality", doc=InputDocumentation(doc="Minimum alignment quality (default: 30)")), ToolInput(tag="in_min_aln_coverage", input_type=Int(optional=True), prefix="--min-aln-coverage", doc=InputDocumentation(doc="Discard alignments with less than 50% aligned\nnucleotides")), ToolInput(tag="in_flag", input_type=Int(optional=True), prefix="--flag", doc=InputDocumentation(doc="SAM flag for filtering (same as samtools '-F' option)\n(default: 3596)")), ToolInput(tag="in_tlen_range", input_type=String(optional=True), prefix="--tlen-range", doc=InputDocumentation(doc="TLEN_RANGE\nOnly allow for paired alignments with spacing within\nthis range (default: None)")), ToolInput(tag="in_min_dtr_size", input_type=Int(optional=True), prefix="--min-dtr-size", doc=InputDocumentation(doc="Minimum size of DTR to flag complete contigs (default:\n10)\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Path to output directory (default: output)")), ToolOutput(tag="out_continue", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_continue", type_hint=File()), doc=OutputDocumentation(doc="Start from last checkpoint. The output directory needs\nto be the same. (default: False)"))], container="quay.io/biocontainers/coconet-binning:1.1.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Coconet_Preprocess_V0_1_0().translate("wdl")

