from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Int, Float, String

Sga_Scaffold_V0_1_0 = CommandToolBuilder(tool="sga_scaffold", base_command=["sga", "scaffold"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="display verbose output")), ToolInput(tag="in_pe", input_type=File(optional=True), prefix="--pe", doc=InputDocumentation(doc="load links derived from paired-end (short insert) libraries from FILE")), ToolInput(tag="in_mate_pair", input_type=File(optional=True), prefix="--mate-pair", doc=InputDocumentation(doc="load links derived from mate-pair (long insert) libraries from FILE")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min-length", doc=InputDocumentation(doc="only use contigs at least N bp in length to build scaffolds (default: no minimun).")), ToolInput(tag="in_as_qg_file", input_type=File(optional=True), prefix="--asqg-file", doc=InputDocumentation(doc="optionally load the sequence graph from FILE")), ToolInput(tag="in_a_statistic_file", input_type=File(optional=True), prefix="--astatistic-file", doc=InputDocumentation(doc="load Myers' A-statistic values from FILE. This is used to\ndetermine unique and repetitive contigs with the -u/--unique-astat\nand -r/--repeat-astat parameters (required)")), ToolInput(tag="in_unique_a_stat", input_type=Float(optional=True), prefix="--unique-astat", doc=InputDocumentation(doc="Contigs with an a-statitic value about FLOAT will be considered unique (default: 20.0)")), ToolInput(tag="in_min_copy_number", input_type=Float(optional=True), prefix="--min-copy-number", doc=InputDocumentation(doc="remove vertices with estimated copy number less than FLOAT (default: 0.5f)")), ToolInput(tag="in_max_sv_size", input_type=Int(optional=True), prefix="--max-sv-size", doc=InputDocumentation(doc="collapse heterozygous structural variation if the event size is less than N (default: 0)")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc="write the scaffolds to FILE (default: CONTIGSFILE.scaf")), ToolInput(tag="in_remove_conflicting", input_type=Boolean(optional=True), prefix="--remove-conflicting", doc=InputDocumentation(doc="if two contigs have multiple distance estimates between them and they do not agree, break the scaffold\nat this point")), ToolInput(tag="in_strict", input_type=Boolean(optional=True), prefix="--strict", doc=InputDocumentation(doc="perform strict consistency checks on the scaffold links. If a vertex X has multiple edges, a path will\nbe searched for that contains every vertex linked to X. If no such path can be found, the edge of X are removed.\nThis builds very conservative scaffolds that should be highly accurate.")), ToolInput(tag="in_scaffold", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Sga_Scaffold_V0_1_0().translate("wdl", allow_empty_container=True)

