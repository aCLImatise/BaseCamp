!Command
command:
- gcloud
- topic
- filters
positional:
- !Positional
  description: "Expressions containing both AND and OR must be parenthesized to\n\
    disambiguate precedence.\nNOT term-1\nTrue if term-1 is False, otherwise False.\n\
    term-1 AND term-2\nTrue if both term-1 and term-2 are true.\nterm-1 OR term-2\n\
    True if at least one of term-1 or term-2 is true.\nterm-1 term-2\nTrue if both\
    \ term-1 and term-2 are true. Implicit conjunction has\nlower precedence than\
    \ OR."
  position: 0
  name: LogicOperator
  optional: false
- !Positional
  description: "A term is a key operator value tuple, where key is a dotted name that\n\
    evaluates to the value of a resource attribute, and value may be:\nnumber\ninteger\
    \ or floating point numeric constant\nunquoted literal\ncharacter sequence terminated\
    \ by space, ( or )\nquoted literal\n\"...\" or '...' Most filter expressions need\
    \ to be quoted in shell\ncommands. If you use '...' shell quotes then use \"...\"\
    \ filter\nstring literal quotes and vice versa."
  position: 1
  name: Terms
  optional: false
- !Positional
  description: EXAMPLES
  position: 0
  name: value.
  optional: false
named:
- !Flag
  description: '[ATTRIBUTES](PROJECTION) and --filter=EXPRESSION flags along'
  synonyms:
  - --format
  args: !SimpleFlagArg
    name: NAME
  optional: true
- !Flag
  description: ="createTime.date('%Y-%m-%d', Z)='2016-05-11'"
  synonyms:
  - --filter
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    gcloud topic filters - resource filters supplementary help\n\
  \nDESCRIPTION\n    Most gcloud commands return a list of resources on success. By\
  \ default they\n    are pretty-printed on the standard output. The\n    --format=NAME[ATTRIBUTES](PROJECTION)\
  \ and --filter=EXPRESSION flags along\n    with projections can be used to format\
  \ and change the default output to a\n    more meaningful result.\n\n    To change\
  \ the default output format of a command, use the --format flag.\n    For details\
  \ run $ gcloud topic formats.\n\n    To select resources to be listed, use the --filter\
  \ flag. Resource filters\n    are described in detail below.\n\n    To reach resource\
  \ items through a unique path of names from the root, use\n    resource-keys. For\
  \ details run $ gcloud topic resource-keys.\n\n    To list a subset of resource\
  \ keys in a resource, use projections. For\n    details run $ gcloud topic projections.\n\
  \n  Filter Expressions\n    A filter expression is a Boolean function that selects\
  \ the resources to\n    print from a list of resources. Expressions are composed\
  \ of terms connected\n    by logic operators.\n\n     LogicOperator\n        Expressions\
  \ containing both AND and OR must be parenthesized to\n        disambiguate precedence.\n\
  \n         NOT term-1\n            True if term-1 is False, otherwise False.\n\n\
  \         term-1 AND term-2\n            True if both term-1 and term-2 are true.\n\
  \n         term-1 OR term-2\n            True if at least one of term-1 or term-2\
  \ is true.\n\n         term-1 term-2\n            True if both term-1 and term-2\
  \ are true. Implicit conjunction has\n            lower precedence than OR.\n\n\
  \     Terms\n        A term is a key operator value tuple, where key is a dotted\
  \ name that\n        evaluates to the value of a resource attribute, and value may\
  \ be:\n\n         number\n            integer or floating point numeric constant\n\
  \         unquoted literal\n            character sequence terminated by space,\
  \ ( or )\n         quoted literal\n            \"...\" or '...' Most filter expressions\
  \ need to be quoted in shell\n            commands. If you use '...' shell quotes\
  \ then use \"...\" filter\n            string literal quotes and vice versa.\n\n\
  \     Operator Terms\n         key = value\n            True if key is equal to\
  \ value.\n\n         key =( value ... )\n            True if key is equal to any\
  \ value in the (space, tab, newline, ,)\n            separated list.\n\n       \
  \  key != value\n            True if key is not value. Equivalent to -key=value\
  \ and NOT\n            key=value.\n\n         key < value\n            True if key\
  \ is less than value. If both key and value are numeric\n            then numeric\
  \ comparison is used, otherwise lexicographic string\n            comparison is\
  \ used.\n\n         key <= value\n            True if key is less than or equal\
  \ to value. If both key and value\n            are numeric then numeric comparison\
  \ is used, otherwise\n            lexicographic string comparison is used.\n\n \
  \        key >= value\n            True if key is greater than or equal to value.\
  \ If both key and\n            value are numeric then numeric comparison is used,\
  \ otherwise\n            lexicographic string comparison is used.\n\n         key\
  \ > value\n            True if key is greater than value. If both key and value\
  \ are\n            numeric then numeric comparison is used, otherwise lexicographic\n\
  \            string comparison is used.\n\n         key : simple-pattern\n     \
  \       True if key matches simple-pattern. The match is anchored (all\n       \
  \     characters must match), case insensitive, and allows one * operator\n    \
  \        that matches any sequence of 0 or more characters. The pattern abc\n  \
  \          matches abc, the pattern abc* matches abc and abcxyz, the pattern\n \
  \           *xyz matches xyz and abcxyz, and the pattern * matches any\n       \
  \     non-empty string. Use key:* to test if key is defined and -key:* to\n    \
  \        test if key is undefined.\n\n         key :( simple-pattern ... )\n   \
  \         True if key matches any simple-pattern in the (space, tab, newline,\n\
  \            comma) separated list.\n\n         key ~ value\n            True if\
  \ key matches the RE (regular expression) pattern value.\n\n         key !~ value\n\
  \            True if key does not match the RE (regular expression) pattern\n  \
  \          value.\n\nEXAMPLES\n    List all instances resources:\n\n        $ gcloud\
  \ compute instances list\n\n    List instances resources that have machineType f1-micro:\n\
  \n        $ gcloud compute instances list --filter='machineType:f1-micro'\n\n  \
  \  List resources with zone prefix us and not MachineType f1-micro:\n\n        $\
  \ gcloud compute instances list \\\n            --filter='zone ~ ^us AND -machineType:f1-micro'\n\
  \n    List in JSON format those projects where the labels match specific values\n\
  \    (e.g. label.env is 'test' and label.version is alpha):\n\n        $ gcloud\
  \ projects list --format=\"json\" \\\n            --filter=\"labels.env=test AND\
  \ labels.version=alpha\"\n\n    List projects that were created after a specific\
  \ date:\n\n        $ gcloud projects list \\\n            --format=\"table(projectNumber,projectId,createTime)\"\
  \ \\\n            --filter=\"createTime.date('%Y-%m-%d', Z)='2016-05-11'\"\n\n \
  \   Note that in the last example, a projection on the key was used. The filter\n\
  \    is applied on the createTime key after the date formatting is set.\n"
generated_using:
- --help
