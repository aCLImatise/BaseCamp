from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean, Float

Pyseer_V0_1_0 = CommandToolBuilder(tool="pyseer", base_command=["pyseer"], inputs=[ToolInput(tag="in_phenotypes", input_type=File(optional=True), prefix="--phenotypes", doc=InputDocumentation(doc="Phenotypes file (whitespace separated)")), ToolInput(tag="in_phenotype_column", input_type=File(optional=True), prefix="--phenotype-column", doc=InputDocumentation(doc="Phenotype file column to use [Default: last column]")), ToolInput(tag="in_km_ers", input_type=File(optional=True), prefix="--kmers", doc=InputDocumentation(doc="Kmers file")), ToolInput(tag="in_vcf", input_type=File(optional=True), prefix="--vcf", doc=InputDocumentation(doc="VCF file. Will filter any non 'PASS' sites")), ToolInput(tag="in_pres", input_type=String(optional=True), prefix="--pres", doc=InputDocumentation(doc="Presence/absence .Rtab matrix as produced by roary and")), ToolInput(tag="in_distances", input_type=String(optional=True), prefix="--distances", doc=InputDocumentation(doc="Strains distance square matrix (fixed or lineage\neffects)")), ToolInput(tag="in_load_m", input_type=String(optional=True), prefix="--load-m", doc=InputDocumentation(doc="Load an existing matrix decomposition")), ToolInput(tag="in_similarity", input_type=String(optional=True), prefix="--similarity", doc=InputDocumentation(doc="Strains similarity square matrix (for --lmm)")), ToolInput(tag="in_load_lmm", input_type=String(optional=True), prefix="--load-lmm", doc=InputDocumentation(doc="Load an existing lmm cache")), ToolInput(tag="in_save_m", input_type=String(optional=True), prefix="--save-m", doc=InputDocumentation(doc="Prefix for saving matrix decomposition")), ToolInput(tag="in_save_lmm", input_type=String(optional=True), prefix="--save-lmm", doc=InputDocumentation(doc="Prefix for saving LMM cache")), ToolInput(tag="in_mds", input_type=String(optional=True), prefix="--mds", doc=InputDocumentation(doc="Type of multidimensional scaling [Default: classic]")), ToolInput(tag="in_max_dimensions", input_type=Int(optional=True), prefix="--max-dimensions", doc=InputDocumentation(doc="Maximum number of dimensions to consider after MDS\n[Default: 10]")), ToolInput(tag="in_no_distances", input_type=Boolean(optional=True), prefix="--no-distances", doc=InputDocumentation(doc="Allow run without a distance matrix")), ToolInput(tag="in_continuous", input_type=Boolean(optional=True), prefix="--continuous", doc=InputDocumentation(doc="Force continuous phenotype [Default: binary auto-\ndetect]")), ToolInput(tag="in_lmm", input_type=Boolean(optional=True), prefix="--lmm", doc=InputDocumentation(doc="Use random instead of fixed effects to correct for\npopulation structure. Requires a similarity matrix")), ToolInput(tag="in_wg", input_type=String(optional=True), prefix="--wg", doc=InputDocumentation(doc="Use a whole genome model for association and\nprediction. Population structure correction is\nimplicit.")), ToolInput(tag="in_lineage", input_type=Boolean(optional=True), prefix="--lineage", doc=InputDocumentation(doc="Report lineage effects")), ToolInput(tag="in_lineage_clusters", input_type=String(optional=True), prefix="--lineage-clusters", doc=InputDocumentation(doc="Custom clusters to use as lineages [Default: MDS\ncomponents]")), ToolInput(tag="in_lineage_file", input_type=File(optional=True), prefix="--lineage-file", doc=InputDocumentation(doc="File to write lineage association to [Default:\nlineage_effects.txt]")), ToolInput(tag="in_sequence_reweighting", input_type=Boolean(optional=True), prefix="--sequence-reweighting", doc=InputDocumentation(doc="Use --lineage-clusters to downweight sequences.")), ToolInput(tag="in_save_vars", input_type=String(optional=True), prefix="--save-vars", doc=InputDocumentation(doc="Prefix for saving variants")), ToolInput(tag="in_load_vars", input_type=String(optional=True), prefix="--load-vars", doc=InputDocumentation(doc="Prefix for loading variants")), ToolInput(tag="in_save_model", input_type=String(optional=True), prefix="--save-model", doc=InputDocumentation(doc="Prefix for saving model")), ToolInput(tag="in_alpha", input_type=Float(optional=True), prefix="--alpha", doc=InputDocumentation(doc="Set the mixing between l1 and l2 penalties [Default:\n0.0069]")), ToolInput(tag="in_n_folds", input_type=Int(optional=True), prefix="--n-folds", doc=InputDocumentation(doc="Number of folds cross-validation to perform [Default:\n10]")), ToolInput(tag="in_min_af", input_type=Int(optional=True), prefix="--min-af", doc=InputDocumentation(doc="Minimum AF [Default: 0.01]")), ToolInput(tag="in_max_af", input_type=Int(optional=True), prefix="--max-af", doc=InputDocumentation(doc="Maximum AF [Default: 0.99]")), ToolInput(tag="in_max_missing", input_type=Int(optional=True), prefix="--max-missing", doc=InputDocumentation(doc="Maximum missing (vcf/Rtab) [Default: 0.05]")), ToolInput(tag="in_filter_p_value", input_type=Int(optional=True), prefix="--filter-pvalue", doc=InputDocumentation(doc="Prefiltering t-test pvalue threshold [Default: 1]")), ToolInput(tag="in_lrt_p_value", input_type=Int(optional=True), prefix="--lrt-pvalue", doc=InputDocumentation(doc="Likelihood ratio test pvalue threshold [Default: 1]")), ToolInput(tag="in_cor_filter", input_type=Float(optional=True), prefix="--cor-filter", doc=InputDocumentation(doc="Correlation filter for elastic net (phenotype/variant\ncorrelation quantile at which to start keeping\nvariants) [Default: 0.25]")), ToolInput(tag="in_covariates", input_type=File(optional=True), prefix="--covariates", doc=InputDocumentation(doc="User-defined covariates file (tab-delimited, no\nheader, first column contains sample names)")), ToolInput(tag="in_use_covariates", input_type=Boolean(optional=True), prefix="--use-covariates", doc=InputDocumentation(doc="[USE_COVARIATES [USE_COVARIATES ...]]\nCovariates to use. Format is '2 3q 4' (q for\nquantitative) [Default: load covariates but don't use\nthem]")), ToolInput(tag="in_print_samples", input_type=Boolean(optional=True), prefix="--print-samples", doc=InputDocumentation(doc="Print sample lists [Default: hide samples]")), ToolInput(tag="in_print_filtered", input_type=Boolean(optional=True), prefix="--print-filtered", doc=InputDocumentation(doc="Print filtered variants (i.e. fitting errors)\n[Default: hide them]")), ToolInput(tag="in_output_patterns", input_type=File(optional=True), prefix="--output-patterns", doc=InputDocumentation(doc="File to print patterns to, useful for finding pvalue\nthreshold")), ToolInput(tag="in_uncompressed", input_type=Boolean(optional=True), prefix="--uncompressed", doc=InputDocumentation(doc="Uncompressed kmers file [Default: gzipped]")), ToolInput(tag="in_cpu", input_type=Int(optional=True), prefix="--cpu", doc=InputDocumentation(doc="Processes [Default: 1]")), ToolInput(tag="in_block_size", input_type=Int(optional=True), prefix="--block_size", doc=InputDocumentation(doc="Number of variants per core [Default: 3000]")), ToolInput(tag="in_piggy", input_type=String(), position=0, doc=InputDocumentation(doc="--burden BURDEN       VCF regions to group variants by for burden testing"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pyseer_V0_1_0().translate("wdl", allow_empty_container=True)

