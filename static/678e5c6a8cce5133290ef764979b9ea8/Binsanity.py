from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Directory, Int, Float, String

Binsanity_V0_1_0 = CommandToolBuilder(tool="Binsanity", base_command=["Binsanity"], inputs=[ToolInput(tag="in_specify_coverage_file", input_type=File(optional=True), prefix="-c", doc=InputDocumentation(doc="Specify a Coverage File")), ToolInput(tag="in_specify_directorycontaining_contigs", input_type=Directory(optional=True), prefix="-f", doc=InputDocumentation(doc="Specify directory\ncontaining your contigs")), ToolInput(tag="in_specify_preference_default", input_type=Int(optional=True), prefix="-p", doc=InputDocumentation(doc="Specify a preference (default is -3)\nNote: decreasing the preference leads to more lumping,\nincreasing will lead to more splitting. If your range\nof coverages are low you will want to decrease the preference,\nif you have 10 or less replicates increasing the preference could\nbenefit you.")), ToolInput(tag="in_specify_max_number", input_type=Int(optional=True), prefix="-m", doc=InputDocumentation(doc="Specify a max number of iterations [default is 2000]")), ToolInput(tag="in_specify_number_default", input_type=Int(optional=True), prefix="-v", doc=InputDocumentation(doc="Specify the convergence iteration number (default is 200)\ne.g Number of iterations with no change in the number\nof estimated clusters that stops the convergence.")), ToolInput(tag="in_specify_damping_factor", input_type=Float(optional=True), prefix="-d", doc=InputDocumentation(doc="Specify a damping factor between 0.5 and 1, default is 0.9")), ToolInput(tag="in_specify_fasta_file", input_type=File(optional=True), prefix="-l", doc=InputDocumentation(doc="Specify the fasta file containing contigs you want to cluster")), ToolInput(tag="in_specify_contig_size", input_type=Int(optional=True), prefix="-x", doc=InputDocumentation(doc="Specify the contig size cut-off [Default 1000 bp]")), ToolInput(tag="in_give_name_directory", input_type=Directory(optional=True), prefix="-o", doc=InputDocumentation(doc="Give a name to the directory BinSanity results will be output in\n[Default is 'BINSANITY-RESULTS']")), ToolInput(tag="in_out_prefix", input_type=String(optional=True), prefix="--outPrefix", doc=InputDocumentation(doc="Sepcify what prefix you want appended to final Bins {optional}")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="specify a name for the log file [Default is 'binsanity-logfile.txt']"))], outputs=[ToolOutput(tag="out_give_name_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_give_name_directory", type_hint=File()), doc=OutputDocumentation(doc="Give a name to the directory BinSanity results will be output in\n[Default is 'BINSANITY-RESULTS']"))], container="quay.io/biocontainers/binsanity:0.5.3--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Binsanity_V0_1_0().translate("wdl")

