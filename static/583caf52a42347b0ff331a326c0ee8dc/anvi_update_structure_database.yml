!Command
command:
- anvi-update-structure-database
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -c
  - --contigs-db
  description: "Anvi'o contigs database generated by 'anvi-gen-\ncontigs'"
  args: !SimpleFlagArg
    name: CONTIGS_DB
- !Flag
  optional: true
  synonyms:
  - -s
  - --structure-db
  description: Anvi'o structure database.
  args: !SimpleFlagArg
    name: STRUCTURE_DB
- !Flag
  optional: true
  synonyms:
  - --genes-of-interest
  description: "A file with anvi'o gene caller IDs. There should be\nonly one column\
    \ in the file, and each line should\ncorrespond to a unique gene caller id (without\
    \ a\ncolumn header)."
  args: !SimpleFlagArg
    name: FILE
- !Flag
  optional: true
  synonyms:
  - --gene-caller-ids
  description: "Gene caller ids. Multiple of them can be declared\nseparated by a\
    \ delimiter (the default is a comma). In\nanvi-gen-variability-profile, if you\
    \ declare nothing\nyou will get all genes matching your other filtering\ncriteria.\
    \ In other programs, you may get everything,\nnothing, or an error. It really\
    \ depends on the\nsituation. Fortunately, mistakes are cheap, so it's\nworth a\
    \ try."
  args: !SimpleFlagArg
    name: GENE_CALLER_IDS
- !Flag
  optional: true
  synonyms:
  - --dump-dir
  description: "Modeling and annotating structures requires a lot of\nmoving parts,\
    \ each which have their own outputs. The\noutput of this program is a structure\
    \ database\ncontaining the pertinent results of this computation,\nhowever a lot\
    \ of stuff doesn't make the cut. By\nproviding a directory for this parameter\
    \ you will get,\nin addition to the structure database, a directory\ncontaining\
    \ the raw output for everything."
  args: !SimpleFlagArg
    name: DUMP_DIR
- !Flag
  optional: true
  synonyms:
  - --list-modeller-params
  description: "Since you are updating an existing DB, modeller params\nare set in\
    \ place. You can have this program list them\nby providing this flag"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --rerun-genes
  description: "Supply if you would like to rerun structural modelling\nfor your genes\
    \ of interest if they are already present\nin your DB"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --modeller-executable
  description: "The MODELLER program to use. For example, `mod9.19`.\nAnvi'o will\
    \ try and find it if not provided."
  args: !SimpleFlagArg
    name: MODELLER_EXECUTABLE
- !Flag
  optional: true
  synonyms:
  - -T
  - --num-threads
  description: "Maximum number of threads to use for multithreading\nwhenever possible.\
    \ Very conservatively, the default is\n1. It is a good idea to not exceed the\
    \ number of CPUs\n/ cores on your system. Plus, please be careful with\nthis option\
    \ if you are running your commands on a SGE\n--if you are clusterizing your runs,\
    \ and asking for\nmultiple threads to use, you may deplete your\nresources very\
    \ fast."
  args: !SimpleFlagArg
    name: NUM_THREADS
- !Flag
  optional: true
  synonyms:
  - --write-buffer-size-per-thread
  description: "How many items should be kept in memory before they\nare written do\
    \ the disk. The default is 25 per thread.\nSo a single-threaded job would have\
    \ a write buffer\nsize of 25, whereas a job with 4 threads would have a\nwrite\
    \ buffer size of 4*25. The larger the buffer size,\nthe less frequent the program\
    \ will access to the disk,\nyet the more memory will be consumed since the\nprocessed\
    \ items will be cleared off the memory only\nafter they are written to the disk.\
    \ The default buffer\nsize will likely work for most cases. Please keep an\neye\
    \ on the memory usage output to make sure the memory\nuse never exceeds the size\
    \ of the physical memory. If\n--num-threads is 1, this parameter is ignored because\n\
    the DB is written to after each gene\n"
  args: !SimpleFlagArg
    name: INT
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: anvi-update-structure-database [-h] -c CONTIGS_DB -s STRUCTURE_DB\n\
  \                                      [--genes-of-interest FILE]\n            \
  \                          [--gene-caller-ids GENE_CALLER_IDS]\n               \
  \                       [--dump-dir DUMP_DIR]\n                                \
  \      [--list-modeller-params] [--rerun-genes]\n                              \
  \        [--modeller-executable MODELLER_EXECUTABLE]\n                         \
  \             [-T NUM_THREADS]\n                                      [--write-buffer-size-per-thread\
  \ INT]\n\nAdd or re-run genes from an already existing structure database. All settings\n\
  used to generate your database will be used in this program.\n\noptional arguments:\n\
  \  -h, --help            show this help message and exit\n\nDATABASES:\n  Declaring\
  \ relevant anvi'o databases. First things first.\n\n  -c CONTIGS_DB, --contigs-db\
  \ CONTIGS_DB\n                        Anvi'o contigs database generated by 'anvi-gen-\n\
  \                        contigs'\n  -s STRUCTURE_DB, --structure-db STRUCTURE_DB\n\
  \                        Anvi'o structure database.\n\nGENES:\n  Specify which genes\
  \ you want to be modelled. If a gene already exists in\n  the DB, it will be overwritten\
  \ if --overwrite is set. Otherwise, an error\n  will be raised.\n\n  --genes-of-interest\
  \ FILE\n                        A file with anvi'o gene caller IDs. There should\
  \ be\n                        only one column in the file, and each line should\n\
  \                        correspond to a unique gene caller id (without a\n    \
  \                    column header).\n  --gene-caller-ids GENE_CALLER_IDS\n    \
  \                    Gene caller ids. Multiple of them can be declared\n       \
  \                 separated by a delimiter (the default is a comma). In\n      \
  \                  anvi-gen-variability-profile, if you declare nothing\n      \
  \                  you will get all genes matching your other filtering\n      \
  \                  criteria. In other programs, you may get everything,\n      \
  \                  nothing, or an error. It really depends on the\n            \
  \            situation. Fortunately, mistakes are cheap, so it's\n             \
  \           worth a try.\n\nOUTPUT:\n  Output file and output style.\n\n  --dump-dir\
  \ DUMP_DIR   Modeling and annotating structures requires a lot of\n            \
  \            moving parts, each which have their own outputs. The\n            \
  \            output of this program is a structure database\n                  \
  \      containing the pertinent results of this computation,\n                 \
  \       however a lot of stuff doesn't make the cut. By\n                      \
  \  providing a directory for this parameter you will get,\n                    \
  \    in addition to the structure database, a directory\n                      \
  \  containing the raw output for everything.\n\nMODELLER PARAMS:\n  Parameters for\
  \ MODELLER's homology modeling.\n\n  --list-modeller-params\n                  \
  \      Since you are updating an existing DB, modeller params\n                \
  \        are set in place. You can have this program list them\n               \
  \         by providing this flag\n\nEXTRA:\n  Everything else.\n\n  --rerun-genes\
  \         Supply if you would like to rerun structural modelling\n             \
  \           for your genes of interest if they are already present\n           \
  \             in your DB\n  --modeller-executable MODELLER_EXECUTABLE\n        \
  \                The MODELLER program to use. For example, `mod9.19`.\n        \
  \                Anvi'o will try and find it if not provided.\n  -T NUM_THREADS,\
  \ --num-threads NUM_THREADS\n                        Maximum number of threads to\
  \ use for multithreading\n                        whenever possible. Very conservatively,\
  \ the default is\n                        1. It is a good idea to not exceed the\
  \ number of CPUs\n                        / cores on your system. Plus, please be\
  \ careful with\n                        this option if you are running your commands\
  \ on a SGE\n                        --if you are clusterizing your runs, and asking\
  \ for\n                        multiple threads to use, you may deplete your\n \
  \                       resources very fast.\n  --write-buffer-size-per-thread INT\n\
  \                        How many items should be kept in memory before they\n \
  \                       are written do the disk. The default is 25 per thread.\n\
  \                        So a single-threaded job would have a write buffer\n  \
  \                      size of 25, whereas a job with 4 threads would have a\n \
  \                       write buffer size of 4*25. The larger the buffer size,\n\
  \                        the less frequent the program will access to the disk,\n\
  \                        yet the more memory will be consumed since the\n      \
  \                  processed items will be cleared off the memory only\n       \
  \                 after they are written to the disk. The default buffer\n     \
  \                   size will likely work for most cases. Please keep an\n     \
  \                   eye on the memory usage output to make sure the memory\n   \
  \                     use never exceeds the size of the physical memory. If\n  \
  \                      --num-threads is 1, this parameter is ignored because\n \
  \                       the DB is written to after each gene\n"
generated_using:
- --help
docker_image:
