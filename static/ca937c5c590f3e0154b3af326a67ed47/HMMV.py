from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Int, Boolean

Hmmv_V0_1_0 = CommandToolBuilder(tool="HMMV", base_command=["HMMV"], inputs=[ToolInput(tag="in_model_file", input_type=File(optional=True), prefix="--modelfile", doc=InputDocumentation(doc="Path to hidden Markov model file")), ToolInput(tag="in_alignment_file", input_type=File(optional=True), prefix="--alignmentfile", doc=InputDocumentation(doc="Path to stockholm alignment file")), ToolInput(tag="in_model_detail", input_type=String(optional=True), prefix="--modeldetail", doc=InputDocumentation(doc="Set verbosity of drawn models: minimal,\nsimple, detailed")), ToolInput(tag="in_emission_layout", input_type=String(optional=True), prefix="--emissionlayout", doc=InputDocumentation(doc="Set layout of drawn models: score,\nprobability, box (Default: box)")), ToolInput(tag="in_alignment_entries", input_type=Int(optional=True), prefix="--alignmententries", doc=InputDocumentation(doc="Set cutoff for included stockholm alignment\nentries (Default: 50)")), ToolInput(tag="in_maxwidth", input_type=Int(optional=True), prefix="--maxwidth", doc=InputDocumentation(doc="Set maximal width of result figure (Default:\n55)")), ToolInput(tag="in_scaling_factor", input_type=Int(optional=True), prefix="--scalingfactor", doc=InputDocumentation(doc="Set uniform scaling factor for image size\n(Default: 2)")), ToolInput(tag="in_transition_cut_off", input_type=Int(optional=True), prefix="--transitioncutoff", doc=InputDocumentation(doc="Minimal value for a transition probability\nto be displayed (Default: 0.01)")), ToolInput(tag="in_output_format", input_type=String(optional=True), prefix="--outputformat", doc=InputDocumentation(doc="Output image format: pdf, svg, png, ps\n(Default: pdf)")), ToolInput(tag="in_output_directory_path", input_type=File(optional=True), prefix="--outputdirectorypath", doc=InputDocumentation(doc="Output directory path (Default: none)")), ToolInput(tag="in_model_name_toggle", input_type=Boolean(optional=True), prefix="--modelnametoggle", doc=InputDocumentation(doc="Write all comma separted model names to\nmodelNames file (Default: False)")), ToolInput(tag="in_numeric_version", input_type=Boolean(optional=True), prefix="--numeric-version", doc=InputDocumentation(doc="Print just the version number")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Loud verbosity")), ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Quiet verbosity"))], outputs=[ToolOutput(tag="out_output_directory_path", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_directory_path", type_hint=File()), doc=OutputDocumentation(doc="Output directory path (Default: none)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Hmmv_V0_1_0().translate("wdl", allow_empty_container=True)

