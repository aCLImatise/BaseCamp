from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int

Gefast_V0_1_0 = CommandToolBuilder(tool="GeFaST", base_command=["GeFaST"], inputs=[ToolInput(tag="in_alphabet", input_type=String(optional=True), prefix="--alphabet", doc=InputDocumentation(doc="discard sequences with other characters (default: ACGT)")), ToolInput(tag="in_output_internal", input_type=File(optional=True), prefix="--output_internal", doc=InputDocumentation(doc="output links underlying the cluster to file (default: not created)")), ToolInput(tag="in_output_otus", input_type=File(optional=True), prefix="--output_otus", doc=InputDocumentation(doc="output clusters to file (default: not created)")), ToolInput(tag="in_output_statistics", input_type=File(optional=True), prefix="--output_statistics", doc=InputDocumentation(doc="output statistics to file (defaut: not created)")), ToolInput(tag="in_output_seeds", input_type=File(optional=True), prefix="--output_seeds", doc=InputDocumentation(doc="output seeds to file (default: not created)")), ToolInput(tag="in_output_uc_lust", input_type=File(optional=True), prefix="--output_uclust", doc=InputDocumentation(doc="create UCLUST-like output file (default: not created)")), ToolInput(tag="in_sep_abundance", input_type=String(optional=True), prefix="--sep_abundance", doc=InputDocumentation(doc="change separator symbol between identifier and abundance (default: _)")), ToolInput(tag="in_min_length", input_type=Int(optional=True), prefix="--min_length", doc=InputDocumentation(doc="discard shorter sequences (default: deactivated)")), ToolInput(tag="in_max_length", input_type=Int(optional=True), prefix="--max_length", doc=InputDocumentation(doc="discard longer sequences (default: deactivated)")), ToolInput(tag="in_min_abundance", input_type=Int(optional=True), prefix="--min_abundance", doc=InputDocumentation(doc="discard less abundant sequences (default: deactivated)")), ToolInput(tag="in_max_abundance", input_type=Int(optional=True), prefix="--max_abundance", doc=InputDocumentation(doc="discard more abundant sequences (default: deactivated)")), ToolInput(tag="in_mo_thur", input_type=File(optional=True), prefix="--mothur", doc=InputDocumentation(doc="output clusters in mothur list file format")), ToolInput(tag="in_quality_encoding", input_type=String(optional=True), prefix="--quality_encoding", doc=InputDocumentation(doc="change expected quality encoding (FASTQ inputs, default: sanger)")), ToolInput(tag="in_list_file", input_type=File(optional=True), prefix="--list_file", doc=InputDocumentation(doc="consider <input> option as path to file containing list of actual input files (one path per line)")), ToolInput(tag="in_threshold", input_type=String(optional=True), prefix="--threshold", doc=InputDocumentation(doc="distance threshold in clustering phase (default: mode-dependent)")), ToolInput(tag="in_refinement_threshold", input_type=Int(optional=True), prefix="--refinement_threshold", doc=InputDocumentation(doc="distance threshold in refinement phase (default: 0, i.e. no refinement)")), ToolInput(tag="in_boundary", input_type=Int(optional=True), prefix="--boundary", doc=InputDocumentation(doc="mass boundary distinguishing between light and heavy clusters during refinement (default: 3)")), ToolInput(tag="in_break_swarms", input_type=Int(optional=True), prefix="--break_swarms", doc=InputDocumentation(doc="do not extend cluster when the new amplicon has a larger abundance than the current subseed (default: 1)")), ToolInput(tag="in_match_reward", input_type=Int(optional=True), prefix="--match_reward", doc=InputDocumentation(doc="reward for nucleotide match during pairwise global alignment computation (default: 5)")), ToolInput(tag="in_mismatch_penalty", input_type=Int(optional=True), prefix="--mismatch_penalty", doc=InputDocumentation(doc="penalty for nucleotide mismatch during pairwise global alignment computation (default: -4)")), ToolInput(tag="in_gap_opening_penalty", input_type=Int(optional=True), prefix="--gap_opening_penalty", doc=InputDocumentation(doc="penalty for opening a gap during pairwise global alignment computation (default: -12)")), ToolInput(tag="in_gap_extension_penalty", input_type=Int(optional=True), prefix="--gap_extension_penalty", doc=InputDocumentation(doc="penalty for extending a gap during pairwise global alignment computation (default: -4)")), ToolInput(tag="in_preprocessor", input_type=String(optional=True), prefix="--preprocessor", doc=InputDocumentation(doc="use the specified component to perform the preprocessing (default: mode-dependent)")), ToolInput(tag="in_cluster_er", input_type=String(optional=True), prefix="--clusterer", doc=InputDocumentation(doc="use the specified component to cluster the amplicons (default: mode-dependent)")), ToolInput(tag="in_refiner", input_type=String(optional=True), prefix="--refiner", doc=InputDocumentation(doc="use the specified component to refine the clusters (default: mode-dependent)")), ToolInput(tag="in_output_generator", input_type=String(optional=True), prefix="--output_generator", doc=InputDocumentation(doc="use the specified component to generate the requested outputs (default: mode-dependent)")), ToolInput(tag="in_lev", input_type=String(), position=0, doc=InputDocumentation(doc="Cluster amplicons based on the number of edit operations in optimal pairwise alignments.")), ToolInput(tag="in_as", input_type=String(), position=1, doc=InputDocumentation(doc="Cluster amplicons based on the score of optimal pairwise alignments.")), ToolInput(tag="in_q_lev", input_type=String(), position=2, doc=InputDocumentation(doc="Cluster amplicons based on the number of edit operations in optimal pairwise alignments considering the quality scores associated with the sequences.")), ToolInput(tag="in_q_as", input_type=String(), position=3, doc=InputDocumentation(doc="Cluster amplicons based on the score of optimal pairwise alignments considering the quality scores associated with the sequences")), ToolInput(tag="in_cons", input_type=String(), position=4, doc=InputDocumentation(doc="Cluster amplicons using a notion of consistency considering the quality and abundance of amplicons.")), ToolInput(tag="in_de_rep", input_type=String(), position=5, doc=InputDocumentation(doc="Group amplicons based on exact sequence equality"))], outputs=[ToolOutput(tag="out_output_internal", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_internal", type_hint=File()), doc=OutputDocumentation(doc="output links underlying the cluster to file (default: not created)")), ToolOutput(tag="out_output_otus", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_otus", type_hint=File()), doc=OutputDocumentation(doc="output clusters to file (default: not created)")), ToolOutput(tag="out_output_statistics", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_statistics", type_hint=File()), doc=OutputDocumentation(doc="output statistics to file (defaut: not created)")), ToolOutput(tag="out_output_seeds", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_seeds", type_hint=File()), doc=OutputDocumentation(doc="output seeds to file (default: not created)")), ToolOutput(tag="out_output_uc_lust", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_uc_lust", type_hint=File()), doc=OutputDocumentation(doc="create UCLUST-like output file (default: not created)")), ToolOutput(tag="out_mo_thur", output_type=File(optional=True), selector=InputSelector(input_to_select="in_mo_thur", type_hint=File()), doc=OutputDocumentation(doc="output clusters in mothur list file format"))], container="quay.io/biocontainers/gefast:2.0.1--h7d875b9_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Gefast_V0_1_0().translate("wdl")

