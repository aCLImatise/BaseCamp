from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Float, String, Int

Ariba_Micplot_V0_1_0 = CommandToolBuilder(tool="ariba_micplot", base_command=["ariba", "micplot"], inputs=[ToolInput(tag="in_out_format", input_type=File(optional=True), prefix="--out_format", doc=InputDocumentation(doc="Output format of image file. Use anything that\nmatplotlib can save to, eg pdf or png [pdf]")), ToolInput(tag="in_main_title", input_type=Boolean(optional=True), prefix="--main_title", doc=InputDocumentation(doc="'title in quotes'\nMain title of plot. Default is to use the antibiotic\nname")), ToolInput(tag="in_plot_height", input_type=Float(optional=True), prefix="--plot_height", doc=InputDocumentation(doc="Height of plot in inches [7]")), ToolInput(tag="in_plot_width", input_type=Float(optional=True), prefix="--plot_width", doc=InputDocumentation(doc="Width of plot in inches [7]")), ToolInput(tag="in_use_he_ts", input_type=String(optional=True), prefix="--use_hets", doc=InputDocumentation(doc="How to deal with HET snps. Choose from yes,no,exclude.\nyes: count a het SNP as present. no: do not count a\nhet SNP as present. exclude: completely remove any\nsample with any het SNP [yes]")), ToolInput(tag="in_interrupted", input_type=Boolean(optional=True), prefix="--interrupted", doc=InputDocumentation(doc="Include interrupted genes (as in the assembled column\nof the ariba summary files)")), ToolInput(tag="in_min_samples", input_type=Int(optional=True), prefix="--min_samples", doc=InputDocumentation(doc="Minimum number of samples in each column required to\ninclude in plot [1]")), ToolInput(tag="in_no_combinations", input_type=Boolean(optional=True), prefix="--no_combinations", doc=InputDocumentation(doc="Do not show combinations of variants. Instead separate\nout into one box/violin plot per variant.")), ToolInput(tag="in_panel_heights", input_type=Int(optional=True), prefix="--panel_heights", doc=InputDocumentation(doc=",height2\nTwo integers that determine relative height of top and\nbottom plots. eg 5,1 means ratio of 5:1 between top\nand bottom panel heights [9,2]")), ToolInput(tag="in_panel_widths", input_type=Int(optional=True), prefix="--panel_widths", doc=InputDocumentation(doc=",width2\nTwo integers that determine relative width of plots\nand space used by counts legend. eg 5,1 means ratio of\n5:1 between top and bottom panel widths. Only applies\nwhen plotting points and --point_size 0 [5,1]")), ToolInput(tag="in_count_legend_x", input_type=Float(optional=True), prefix="--count_legend_x", doc=InputDocumentation(doc="Control x position of counts legend when plotting\npoints and --point_size 0 [-2]")), ToolInput(tag="in_p_cut_off", input_type=Float(optional=True), prefix="--p_cutoff", doc=InputDocumentation(doc="p-value cutoff for Mann-Whitney tests [0.05]")), ToolInput(tag="in_xk_cd", input_type=Boolean(optional=True), prefix="--xkcd", doc=InputDocumentation(doc="Best used with xkcd font installed ;)")), ToolInput(tag="in_colour_map", input_type=String(optional=True), prefix="--colourmap", doc=InputDocumentation(doc="name\nColours to use. See\nhttp://matplotlib.org/users/colormaps.html [Accent]")), ToolInput(tag="in_number_of_colours", input_type=Int(optional=True), prefix="--number_of_colours", doc=InputDocumentation(doc="Number of colours in plot. 0:same number as columns in\nthe plot. 1:all black. >1: take the first N colours\nfrom the colourmap specified by --colourmap and cycle\nthem [0]")), ToolInput(tag="in_colour_skip", input_type=Int(optional=True), prefix="--colour_skip", doc=InputDocumentation(doc=",FLOAT2\nIf using a continuous colourmap, --colour_skip a,b\n(where 0 <= a < b <= 1) will skip the range between a\nand b. Useful for excluding near-white colours")), ToolInput(tag="in_plot_types", input_type=Int(optional=True), prefix="--plot_types", doc=InputDocumentation(doc=",type2,...\nTypes of plots to make, separated by commas. Choose\nfrom violin,point [violin,point]")), ToolInput(tag="in_h_lines", input_type=Int(optional=True), prefix="--hlines", doc=InputDocumentation(doc=",float2,...\nComma-separated list of positions at which to draw\nhorizontal lines. Default is to draw no lines.")), ToolInput(tag="in_jitter_width", input_type=Float(optional=True), prefix="--jitter_width", doc=InputDocumentation(doc="Jitter width option when plotting points [0.1]")), ToolInput(tag="in_log_y", input_type=Float(optional=True), prefix="--log_y", doc=InputDocumentation(doc="Base of log applied to y values. Set to zero to not\nlog [2]")), ToolInput(tag="in_point_size", input_type=Float(optional=True), prefix="--point_size", doc=InputDocumentation(doc="Size of points when --plot_types includes point. If\nzero, will group points and size them proportional to\nthe group size [4]")), ToolInput(tag="in_point_scale", input_type=Float(optional=True), prefix="--point_scale", doc=InputDocumentation(doc="Scale point sizes when --point_size 0. All point sizes\nare multiplied by this number. Useful if you have\nlarge data set [1]")), ToolInput(tag="in_violin_width", input_type=Float(optional=True), prefix="--violin_width", doc=InputDocumentation(doc="Width of violins [0.75]")), ToolInput(tag="in_dot_size", input_type=Float(optional=True), prefix="--dot_size", doc=InputDocumentation(doc="Size of dots in lower part of plot [100]")), ToolInput(tag="in_dot_outline", input_type=Boolean(optional=True), prefix="--dot_outline", doc=InputDocumentation(doc="Black outline around all dots (whether coloured or\nnot) in lower part of plots")), ToolInput(tag="in_dot_y_text_size", input_type=Int(optional=True), prefix="--dot_y_text_size", doc=InputDocumentation(doc="Text size of labels [7]\n")), ToolInput(tag="in_prepare_ref_dir", input_type=String(), position=0, doc=InputDocumentation(doc="Name of output directory when 'ariba prepareref' was")), ToolInput(tag="in_run", input_type=String(), position=1, doc=InputDocumentation(doc="antibiotic            Antibiotic name. Must exactly match a column from the")), ToolInput(tag="in_mic_file", input_type=String(), position=0, doc=InputDocumentation(doc="File containing MIC data for each sample and one or\nmore antibiotics")), ToolInput(tag="in_summary_file", input_type=String(), position=1, doc=InputDocumentation(doc="File made by running 'ariba summary'")), ToolInput(tag="in_out_prefix", input_type=String(), position=2, doc=InputDocumentation(doc="Prefix of output files"))], outputs=[ToolOutput(tag="out_out_format", output_type=File(optional=True), selector=InputSelector(input_to_select="in_out_format", type_hint=File()), doc=OutputDocumentation(doc="Output format of image file. Use anything that\nmatplotlib can save to, eg pdf or png [pdf]"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ariba_Micplot_V0_1_0().translate("wdl", allow_empty_container=True)

