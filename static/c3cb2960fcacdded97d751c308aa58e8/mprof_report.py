from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean, Int, String

Mprof_Report_V0_1_0 = CommandToolBuilder(tool="mprof_report", base_command=["mprof-report"], inputs=[ToolInput(tag="in_out", input_type=File(optional=True), prefix="--out", doc=InputDocumentation(doc="write to FILE instead of stdout")), ToolInput(tag="in_traces", input_type=Boolean(optional=True), prefix="--traces", doc=InputDocumentation(doc="collect and show backtraces")), ToolInput(tag="in_max_frames", input_type=Int(optional=True), prefix="--maxframes", doc=InputDocumentation(doc="limit backtraces to NUM entries")), ToolInput(tag="in_reports", input_type=Int(), prefix="--reports", doc=InputDocumentation(doc="print the specified reports. Defaults are:\nheader,jit,gc,sample,alloc,call,metadata,exception,monitor,thread,heapshot,counters,coverage")), ToolInput(tag="in_method_sort", input_type=String(optional=True), prefix="--method-sort", doc=InputDocumentation(doc="sort methods according to MODE: total, self, calls")), ToolInput(tag="in_alloc_sort", input_type=String(optional=True), prefix="--alloc-sort", doc=InputDocumentation(doc="sort allocations according to MODE: bytes, count")), ToolInput(tag="in_counters_sort", input_type=String(optional=True), prefix="--counters-sort", doc=InputDocumentation(doc="sort counters according to MODE: time, category\nonly accessible in verbose mode")), ToolInput(tag="in_track", input_type=Int(), prefix="--track", doc=InputDocumentation(doc="track what happens to objects OBJ1, O2 etc.")), ToolInput(tag="in_find", input_type=String(optional=True), prefix="--find", doc=InputDocumentation(doc="find and track objects matching FINFSPEC, where FINDSPEC is:\nS:minimum_size or T:partial_name")), ToolInput(tag="in_thread", input_type=String(optional=True), prefix="--thread", doc=InputDocumentation(doc="consider just the data for thread THREADID")), ToolInput(tag="in_time", input_type=String(optional=True), prefix="--time", doc=InputDocumentation(doc="consider data FROM seconds from startup up to TO seconds")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="increase verbosity level")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="display decoding debug info for mprof-report devs")), ToolInput(tag="in_coverage_out", input_type=File(optional=True), prefix="--coverage-out", doc=InputDocumentation(doc="write the coverage info to FILE as XML")), ToolInput(tag="in_filename", input_type=File(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mprof_Report_V0_1_0().translate("wdl", allow_empty_container=True)

