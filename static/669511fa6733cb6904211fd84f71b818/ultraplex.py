from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Directory, Boolean

Ultraplex_V0_1_0 = CommandToolBuilder(tool="ultraplex", base_command=["ultraplex"], inputs=[ToolInput(tag="in_input_fast_q", input_type=File(optional=True), prefix="--inputfastq", doc=InputDocumentation(doc="fastq file to be demultiplexed")), ToolInput(tag="in_barcodes", input_type=String(optional=True), prefix="--barcodes", doc=InputDocumentation(doc="barcodes for demultiplexing in csv format")), ToolInput(tag="in_optional_output_directory", input_type=Directory(optional=True), prefix="-d", doc=InputDocumentation(doc="[DIRECTORY], --directory [DIRECTORY]\noptional output directory")), ToolInput(tag="in_m_five", input_type=Boolean(optional=True), prefix="-m5", doc=InputDocumentation(doc="[FIVEPRIMEMISMATCHES], --fiveprimemismatches [FIVEPRIMEMISMATCHES]\nnumber of mismatches allowed for 5prime barcode\n[DEFAULT 1]")), ToolInput(tag="in_m_three", input_type=Boolean(optional=True), prefix="-m3", doc=InputDocumentation(doc="[THREEPRIMEMISMATCHES], --threeprimemismatches [THREEPRIMEMISMATCHES]\nnumber of mismatches allowed for 3prime barcode\n[DEFAULT 0]")), ToolInput(tag="in_phred_quality_score", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="[PHREDQUALITY], --phredquality [PHREDQUALITY]\nphred quality score for 3prime end trimming")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="[THREADS], --threads [THREADS]\nthreads [DEFAULT 4]")), ToolInput(tag="in_sequencing_adapter_trim", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc="[ADAPTER], --adapter [ADAPTER]\nsequencing adapter to trim [DEFAULT Illumina\nAGATCGGAAGAGCGGTTCAG]")), ToolInput(tag="in_prefix_output_sequences", input_type=Boolean(optional=True), prefix="-o", doc=InputDocumentation(doc="[OUTPUTPREFIX], --outputprefix [OUTPUTPREFIX]\nprefix for output sequences [DEFAULT demux]")), ToolInput(tag="in_s_batch_compression", input_type=Boolean(optional=True), prefix="--sbatchcompression", doc=InputDocumentation(doc="whether to compress output fastq using SLURM sbatch")), ToolInput(tag="in_ultra", input_type=Boolean(optional=True), prefix="--ultra", doc=InputDocumentation(doc="whether to use ultra mode, which is faster but makes\nvery large temporary files")), ToolInput(tag="in_ignore_space_warning", input_type=Boolean(optional=True), prefix="--ignore_space_warning", doc=InputDocumentation(doc="whether to ignore warnings that there is not enough\nfree space")), ToolInput(tag="in_minimum_length_final", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="[FINAL_MIN_LENGTH], --final_min_length [FINAL_MIN_LENGTH]\nminimum length of the final outputted reads")), ToolInput(tag="in_q_five", input_type=Boolean(optional=True), prefix="-q5", doc=InputDocumentation(doc="[PHREDQUALITY_5_PRIME], --phredquality_5_prime [PHREDQUALITY_5_PRIME]\nquality trimming minimum score from 5' end - use with\ncaution!")), ToolInput(tag="in_i_two", input_type=Boolean(optional=True), prefix="-i2", doc=InputDocumentation(doc="[INPUT_2], --input_2 [INPUT_2]\nOptional second fastq.gz input for paired end data")), ToolInput(tag="in_a_two", input_type=Boolean(optional=True), prefix="-a2", doc=InputDocumentation(doc="[ADAPTER2], --adapter2 [ADAPTER2]\nsequencing adaptor to trim for the reverse read\n[Default AGATCGGAAGAGCGTCGTG]")), ToolInput(tag="in_mt", input_type=Boolean(optional=True), prefix="-mt", doc=InputDocumentation(doc="[MIN_TRIM], --min_trim [MIN_TRIM]\nWhen using single end reads for 3' demultiplexing,\nthis is the minimum adapter trimming amount for a\n3'barcode to be detected. Default = 3")), ToolInput(tag="in_ignore_no_match", input_type=Boolean(optional=True), prefix="--ignore_no_match", doc=InputDocumentation(doc="Do not write reads for which there is no match.\n")), ToolInput(tag="in_directory", input_type=Directory(optional=True), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_optional_output_directory", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_optional_output_directory", type_hint=File()), doc=OutputDocumentation(doc="[DIRECTORY], --directory [DIRECTORY]\noptional output directory"))], container="quay.io/biocontainers/ultraplex:1.1.4--py38h0213d0e_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ultraplex_V0_1_0().translate("wdl")

