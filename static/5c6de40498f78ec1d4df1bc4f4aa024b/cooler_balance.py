from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, File, Float, Boolean, String

Cooler_Balance_V0_1_0 = CommandToolBuilder(tool="cooler_balance", base_command=["cooler", "balance"], inputs=[ToolInput(tag="in_nproc", input_type=Int(optional=True), prefix="--nproc", doc=InputDocumentation(doc="Number of processes to split the work")), ToolInput(tag="in_chunksize", input_type=Int(optional=True), prefix="--chunksize", doc=InputDocumentation(doc="Control the number of pixels handled by each\nworker process at a time.  [default:\n10000000]")), ToolInput(tag="in_mad_max", input_type=Int(optional=True), prefix="--mad-max", doc=InputDocumentation(doc="Ignore bins from the contact matrix using\nthe 'MAD-max' filter: bins whose log\nmarginal sum is less than ``mad-max`` median\nabsolute deviations below the median log\nmarginal sum of all the bins in the same\nchromosome.  [default: 5]")), ToolInput(tag="in_min_nnz", input_type=Int(optional=True), prefix="--min-nnz", doc=InputDocumentation(doc="Ignore bins from the contact matrix whose\nmarginal number of nonzeros is less than\nthis number.  [default: 10]")), ToolInput(tag="in_min_count", input_type=Int(optional=True), prefix="--min-count", doc=InputDocumentation(doc="Ignore bins from the contact matrix whose\nmarginal count is less than this number.\n[default: 0]")), ToolInput(tag="in_blacklist", input_type=File(optional=True), prefix="--blacklist", doc=InputDocumentation(doc="Path to a 3-column BED file containing\ngenomic regions to mask out during the\nbalancing procedure, e.g. sequence gaps or\nregions of poor mappability.")), ToolInput(tag="in_ignore_diags", input_type=Int(optional=True), prefix="--ignore-diags", doc=InputDocumentation(doc="Number of diagonals of the contact matrix to\nignore, including the main diagonal.\nExamples: 0 ignores nothing, 1 ignores the\nmain diagonal, 2 ignores diagonals (-1, 0,\n1), etc.  [default: 2]")), ToolInput(tag="in_ignore_dist", input_type=Int(optional=True), prefix="--ignore-dist", doc=InputDocumentation(doc="Distance in bp to ignore.")), ToolInput(tag="in_to_l", input_type=Float(optional=True), prefix="--tol", doc=InputDocumentation(doc="Threshold value of variance of the marginals\nfor the algorithm to converge.  [default:\n1e-05]")), ToolInput(tag="in_max_iters", input_type=Int(optional=True), prefix="--max-iters", doc=InputDocumentation(doc="Maximum number of iterations to perform if\nconvergence is not achieved.  [default: 200]")), ToolInput(tag="in_cis_only", input_type=Boolean(optional=True), prefix="--cis-only", doc=InputDocumentation(doc="Calculate weights against intra-chromosomal\ndata only instead of genome-wide.")), ToolInput(tag="in_trans_only", input_type=Boolean(optional=True), prefix="--trans-only", doc=InputDocumentation(doc="Calculate weights against inter-chromosomal\ndata only instead of genome-wide.")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="--name", doc=InputDocumentation(doc="Name of column to write to.  [default:\nweight]")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite the target dataset, 'weight', if\nit already exists.")), ToolInput(tag="in_check", input_type=Boolean(optional=True), prefix="--check", doc=InputDocumentation(doc="Check whether a data column 'weight' already")), ToolInput(tag="in_convergence_policy", input_type=Boolean(optional=True), prefix="--convergence-policy", doc=InputDocumentation(doc="[store_final|store_nan|discard|error]\nWhat to do with weights when balancing\ndoesn't converge in max_iters.\n'store_final': Store the final result,\nregardless of whether the iterations\nconverge to the specified tolerance;\n'store_nan': Store a vector of NaN values to\nindicate that the matrix failed to converge;\n'discard': Store nothing and exit\ngracefully; 'error': Abort with non-zero\nexit status.  [default: store_final]")), ToolInput(tag="in_exists_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--stdout                        Print weight column to stdout instead of"))], outputs=[ToolOutput(tag="out_blacklist", output_type=File(optional=True), selector=InputSelector(input_to_select="in_blacklist", type_hint=File()), doc=OutputDocumentation(doc="Path to a 3-column BED file containing\ngenomic regions to mask out during the\nbalancing procedure, e.g. sequence gaps or\nregions of poor mappability."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Cooler_Balance_V0_1_0().translate("wdl", allow_empty_container=True)

