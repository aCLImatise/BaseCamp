from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Float, Boolean, Int

Easypqp_Convert_V0_1_0 = CommandToolBuilder(tool="easypqp_convert", base_command=["easypqp", "convert"], inputs=[ToolInput(tag="in_pep_xml", input_type=File(optional=True), prefix="--pepxml", doc=InputDocumentation(doc="The input MSFragger TSV file.  [required]")), ToolInput(tag="in_spectra", input_type=File(optional=True), prefix="--spectra", doc=InputDocumentation(doc="The input mzXML or MGF (timsTOF only) file.\n[required]")), ToolInput(tag="in_uni_mod", input_type=File(optional=True), prefix="--unimod", doc=InputDocumentation(doc="The input UniMod XML file.")), ToolInput(tag="in_psms", input_type=File(optional=True), prefix="--psms", doc=InputDocumentation(doc="Output PSMs file.")), ToolInput(tag="in_peaks", input_type=File(optional=True), prefix="--peaks", doc=InputDocumentation(doc="Output peaks file.")), ToolInput(tag="in_exclude_range", input_type=String(optional=True), prefix="--exclude-range", doc=InputDocumentation(doc="massdiff in this range will not be mapped to")), ToolInput(tag="in_max_delta_uni_mod", input_type=Float(optional=True), prefix="--max_delta_unimod", doc=InputDocumentation(doc="Maximum delta mass (Dalton) for UniMod")), ToolInput(tag="in_max_delta_ppm", input_type=Float(optional=True), prefix="--max_delta_ppm", doc=InputDocumentation(doc="Maximum delta mass (PPM) for annotation.\n[default: 15]")), ToolInput(tag="in_no_enable_unannotated", input_type=Boolean(optional=True), prefix="--no-enable_unannotated", doc=InputDocumentation(doc="Enable mapping uf unannotated delta masses.\n[default: False]")), ToolInput(tag="in_no_enable_mass_diff", input_type=Boolean(optional=True), prefix="--no-enable_massdiff", doc=InputDocumentation(doc="Enable mapping uf mass differences reported\nby legacy search engines.  [default: False]")), ToolInput(tag="in_fragment_types", input_type=String(optional=True), prefix="--fragment_types", doc=InputDocumentation(doc="Allowed fragment ion types (a,b,c,x,y,z).\n[default: b, y]")), ToolInput(tag="in_fragment_charges", input_type=Int(optional=True), prefix="--fragment_charges", doc=InputDocumentation(doc="Allowed fragment ion charges.  [default: 1,\n2, 3, 4]")), ToolInput(tag="in_no_enable_specific_losses", input_type=Boolean(optional=True), prefix="--no-enable_specific_losses", doc=InputDocumentation(doc="Enable specific fragment ion losses.\n[default: False]")), ToolInput(tag="in_no_enable_unspecific_losses", input_type=Boolean(optional=True), prefix="--no-enable_unspecific_losses", doc=InputDocumentation(doc="Enable unspecific fragment ion losses.\n[default: False]")), ToolInput(tag="in_subsample_fraction", input_type=Float(optional=True), prefix="--subsample_fraction", doc=InputDocumentation(doc="Data fraction used for subsampling.\n[default: 1.0]"))], outputs=[ToolOutput(tag="out_psms", output_type=File(optional=True), selector=InputSelector(input_to_select="in_psms", type_hint=File()), doc=OutputDocumentation(doc="Output PSMs file.")), ToolOutput(tag="out_peaks", output_type=File(optional=True), selector=InputSelector(input_to_select="in_peaks", type_hint=File()), doc=OutputDocumentation(doc="Output peaks file."))], container="quay.io/biocontainers/easypqp:0.1.11--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Easypqp_Convert_V0_1_0().translate("wdl")

