from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Int, Boolean, File, Float, String

Ssu_Cmscore_V0_1_0 = CommandToolBuilder(tool="ssu_cmscore", base_command=["ssu-cmscore"], inputs=[ToolInput(tag="in__generate_sequences", input_type=Int(optional=True), prefix="-n", doc=InputDocumentation(doc=": generate <n> sequences  [10]")), ToolInput(tag="in_align_locally_model", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc=": align locally w.r.t. the model")), ToolInput(tag="in_set_rng_seed", input_type=Int(optional=True), prefix="-s", doc=InputDocumentation(doc=": set RNG seed to <n> (if 0: one-time arbitrary seed)  [181]")), ToolInput(tag="in_print_individual_timings", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc=": print individual timings & scores, not just a summary")), ToolInput(tag="in_sub", input_type=Boolean(optional=True), prefix="--sub", doc=InputDocumentation(doc=": build sub CM for columns b/t HMM predicted start/end points")), ToolInput(tag="in_mx_size", input_type=Int(optional=True), prefix="--mxsize", doc=InputDocumentation(doc=": set maximum allowable DP matrix size to <x> Mb  [2048.0]")), ToolInput(tag="in_devhelp", input_type=Boolean(optional=True), prefix="--devhelp", doc=InputDocumentation(doc=": show list of undocumented developer options")), ToolInput(tag="in_emit", input_type=Boolean(optional=True), prefix="--emit", doc=InputDocumentation(doc=": emit <n> sequences from each CM  [default]")), ToolInput(tag="in_random", input_type=Boolean(optional=True), prefix="--random", doc=InputDocumentation(doc=": emit <n> random seq from cm->null model")), ToolInput(tag="in_in_file", input_type=File(optional=True), prefix="--infile", doc=InputDocumentation(doc=": read sequences to align from file <s>")), ToolInput(tag="in_outfile", input_type=File(optional=True), prefix="--outfile", doc=InputDocumentation(doc=": save seqs to file <s> in FASTA format")), ToolInput(tag="in_lm_in", input_type=Int(optional=True), prefix="--Lmin", doc=InputDocumentation(doc=": with --random, specify minimum length of random sequences as <n>")), ToolInput(tag="in_lmax", input_type=Int(optional=True), prefix="--Lmax", doc=InputDocumentation(doc=": with --random, specify maximum length of random sequences as <n>")), ToolInput(tag="in_pad", input_type=Boolean(optional=True), prefix="--pad", doc=InputDocumentation(doc=": with --emit, pad (W-L) residues on each side of emitted seqs")), ToolInput(tag="in_h_banded", input_type=Boolean(optional=True), prefix="--hbanded", doc=InputDocumentation(doc=": compare d&c optimal CYK versus HMM banded CYK  [default]")), ToolInput(tag="in_tau", input_type=Float(optional=True), prefix="--tau", doc=InputDocumentation(doc=": set tail loss prob for --hbanded to <x>  [1E-7]  (0<x<1)")), ToolInput(tag="in_aln_two_bands", input_type=Boolean(optional=True), prefix="--aln2bands", doc=InputDocumentation(doc=": w/--hbanded derive HMM bands w/o scanning Forward/Backward")), ToolInput(tag="in_h_safe", input_type=Boolean(optional=True), prefix="--hsafe", doc=InputDocumentation(doc=": realign (non-banded) seqs with HMM banded CYK score < 0 bits")), ToolInput(tag="in_non_banded", input_type=Boolean(optional=True), prefix="--nonbanded", doc=InputDocumentation(doc=": compare divide and conquer (d&c) versus standard non-banded CYK")), ToolInput(tag="in_score_only", input_type=Boolean(optional=True), prefix="--scoreonly", doc=InputDocumentation(doc=": with --nonbanded, do only score, save memory")), ToolInput(tag="in_viterbi", input_type=Boolean(optional=True), prefix="--viterbi", doc=InputDocumentation(doc=": align to a CM Plan 9 HMM with the Viterbi algorithm")), ToolInput(tag="in_search", input_type=Boolean(optional=True), prefix="--search", doc=InputDocumentation(doc=": run algorithms in scanning search mode")), ToolInput(tag="in_inside", input_type=Boolean(optional=True), prefix="--inside", doc=InputDocumentation(doc=": with --search, use Inside instead of CYK")), ToolInput(tag="in_forward", input_type=Boolean(optional=True), prefix="--forward", doc=InputDocumentation(doc=": with --search, use HMM  Forward instead of CYK")), ToolInput(tag="in_taus", input_type=Int(optional=True), prefix="--taus", doc=InputDocumentation(doc=": set initial (stage 2) tail loss prob to 1E-<x> for HMM banding")), ToolInput(tag="in_tau_e", input_type=Int(optional=True), prefix="--taue", doc=InputDocumentation(doc=": set final   (stage N) tail loss prob to 1E-<x> for HMM banding")), ToolInput(tag="in_t_file", input_type=File(optional=True), prefix="--tfile", doc=InputDocumentation(doc=": dump parsetrees to file <f>")), ToolInput(tag="in_options", input_type=Boolean(optional=True), prefix="-options", doc=InputDocumentation(doc="")), ToolInput(tag="in_cm_file", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ssu_Cmscore_V0_1_0().translate("wdl", allow_empty_container=True)

