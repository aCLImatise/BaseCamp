from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory, Int

Abritamr_V0_1_0 = CommandToolBuilder(tool="abritamr", base_command=["abritamr"], inputs=[ToolInput(tag="in_mdu_qc", input_type=Boolean(optional=True), prefix="--mduqc", doc=InputDocumentation(doc="Set if running on MDU QC data. If set please provide\nthe MDU QC .csv as further input and an additional\noutput suitable for lims input will be provided.\n(default: False)")), ToolInput(tag="in_qc", input_type=File(optional=True), prefix="--qc", doc=InputDocumentation(doc="Name of checked MDU QC file. (default:\nmdu_qc_checked.csv)")), ToolInput(tag="in_positive_control", input_type=File(optional=True), prefix="--positive_control", doc=InputDocumentation(doc="Path to positive control sequence - must be set if\nusing -m (default: )")), ToolInput(tag="in_singularity", input_type=Boolean(optional=True), prefix="--Singularity", doc=InputDocumentation(doc="If using singularity container for AMRfinderplus\n(default: False)")), ToolInput(tag="in_singularity_path", input_type=File(optional=True), prefix="--singularity_path", doc=InputDocumentation(doc="Path to the singularity container for AMRfinderplus,\nif empty will defualt to shub://phgenomics-\nsingularity/amrfinderplus (default: )")), ToolInput(tag="in_contigs", input_type=File(optional=True), prefix="--contigs", doc=InputDocumentation(doc="Tab-delimited file with sample ID as column 1 and path\nto assemblies as column 2 OR path to a contig file\n(used if only doing a single sample - should provide\nvalue for -pfx). (default: )")), ToolInput(tag="in_amr_finder_output", input_type=File(optional=True), prefix="--amrfinder_output", doc=InputDocumentation(doc="Tab-delimited file with sample ID as column 1 and path\nto amr_finder output files as column 2 OR path to a\namrfinder ouptu file (used if only doing a single\nsample - should provide value for -pfx). (default: )")), ToolInput(tag="in_prefix", input_type=File(optional=True), prefix="--prefix", doc=InputDocumentation(doc="If using abriTAMR on single file please provide a\nprefix (default: )")), ToolInput(tag="in_workdir", input_type=Directory(optional=True), prefix="--workdir", doc=InputDocumentation(doc="Working directory, default is current directory\n(default: /)")), ToolInput(tag="in_resources", input_type=Directory(optional=True), prefix="--resources", doc=InputDocumentation(doc="Directory where templates are stored (default:\n/usr/local/lib/python3.7/site-packages/abritamr)")), ToolInput(tag="in_species_detect", input_type=Boolean(optional=True), prefix="--species_detect", doc=InputDocumentation(doc="Set if you would like to use point mutations.\n(default: False)")), ToolInput(tag="in_jobs", input_type=Int(optional=True), prefix="--jobs", doc=InputDocumentation(doc="Number of AMR finder jobs to run in parallel.\n(default: 16)")), ToolInput(tag="in_keep", input_type=Boolean(optional=True), prefix="--keep", doc=InputDocumentation(doc="If you would like to keep intermediate files and\nsnakemake log. Default is to remove (default: False)\n")), ToolInput(tag="in_v", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_amr_finder_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_amr_finder_output", type_hint=File()), doc=OutputDocumentation(doc="Tab-delimited file with sample ID as column 1 and path\nto amr_finder output files as column 2 OR path to a\namrfinder ouptu file (used if only doing a single\nsample - should provide value for -pfx). (default: )"))], container="quay.io/biocontainers/abritamr:0.2.2--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Abritamr_V0_1_0().translate("wdl")

