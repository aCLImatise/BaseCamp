from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean

Flowcraft_Build_V0_1_0 = CommandToolBuilder(tool="flowcraft_build", base_command=["flowcraft", "build"], inputs=[ToolInput(tag="in_tasks", input_type=String(optional=True), prefix="--tasks", doc=InputDocumentation(doc="Space separated tasks of the pipeline")), ToolInput(tag="in_recipe", input_type=String(optional=True), prefix="--recipe", doc=InputDocumentation(doc="Use one of the available recipes")), ToolInput(tag="in_name_pipeline_file", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Name of the pipeline file")), ToolInput(tag="in_provide_name_your", input_type=String(optional=True), prefix="-n", doc=InputDocumentation(doc="Provide a name for your pipeline.")), ToolInput(tag="in_merge_params", input_type=Boolean(optional=True), prefix="--merge-params", doc=InputDocumentation(doc="Merges identical parameters from multiple components\ninto the same one. Otherwise, the parameters will be\nseparated and unique to each component.")), ToolInput(tag="in_pipeline_only", input_type=Boolean(optional=True), prefix="--pipeline-only", doc=InputDocumentation(doc="Write only the pipeline files and not the templates,\nbin, and lib folders.")), ToolInput(tag="in_no_depend_ecy", input_type=Boolean(optional=True), prefix="--no-dependecy", doc=InputDocumentation(doc="Do not automatically add dependencies to the pipeline.")), ToolInput(tag="in_check_pipeline", input_type=Boolean(optional=True), prefix="--check-pipeline", doc=InputDocumentation(doc="Check only the validity of the pipeline string and")), ToolInput(tag="in_component_list_short", input_type=Boolean(optional=True), prefix="--component-list-short", doc=InputDocumentation(doc="Print a short list of the currently available\nprocesses.")), ToolInput(tag="in_recipe_list", input_type=Boolean(optional=True), prefix="--recipe-list", doc=InputDocumentation(doc="Print a short list of the currently available recipes.")), ToolInput(tag="in_recipe_list_short", input_type=Boolean(optional=True), prefix="--recipe-list-short", doc=InputDocumentation(doc="Print a condensed list of the currently available")), ToolInput(tag="in_export_directives", input_type=Boolean(optional=True), prefix="--export-directives", doc=InputDocumentation(doc="Only export the directives for the provided components\n(via -t option) in JSON format to stdout. No pipeline\nwill be generated with this option.")), ToolInput(tag="in_fetch_tags", input_type=Boolean(optional=True), prefix="--fetch-tags", doc=InputDocumentation(doc="Allows to fetch all docker tags for the components\nlisted with the -t flag.\n")), ToolInput(tag="in_exit_dot", input_type=String(), position=0, doc=InputDocumentation(doc="-L, --component-list  Print a detailed description for all the currently")), ToolInput(tag="in_recipes", input_type=String(), position=0, doc=InputDocumentation(doc="-cr, --check-recipe   Check tasks that the recipe contain and their flow.")), ToolInput(tag="in_option_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--export-params       Only export the parameters for the provided components"))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Flowcraft_Build_V0_1_0().translate("wdl", allow_empty_container=True)

