from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String, Directory, File

Analyze_V0_1_0 = CommandToolBuilder(tool="analyze", base_command=["analyze"], inputs=[ToolInput(tag="in_no_cuda", input_type=Boolean(optional=True), prefix="--no-cuda", doc=InputDocumentation(doc="Disables CUDA for use off GPU, if this is not\nspecified the utility will check availability of\ntorch.cuda")), ToolInput(tag="in_model", input_type=Int(optional=True), prefix="--model", doc=InputDocumentation(doc="name of the saved model weights to load (default:\nmodel/mimsi_mskcc_impact_200.model)")), ToolInput(tag="in_save", input_type=Boolean(optional=True), prefix="--save", doc=InputDocumentation(doc="save the results of the evaluation to a numpy array or\na tsv text file")), ToolInput(tag="in_save_format", input_type=String(optional=True), prefix="--save-format", doc=InputDocumentation(doc="save the results of the evaluation to a numpy array or\nas summary in a tsv text file or both")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Random Seed (default: 2)")), ToolInput(tag="in_microsatellites_list", input_type=String(optional=True), prefix="--microsatellites-list", doc=InputDocumentation(doc="The list of microsatellites to check in the\ntumor/normal pair (default:\nutils/microsatellites.list)")), ToolInput(tag="in_save_location", input_type=Directory(optional=True), prefix="--save-location", doc=InputDocumentation(doc="The location on the filesystem to save the converted\nvectors and final results (default:\nCurrent_working_directory/mimsi_results/). WARNING:\nExisitng files in this directory in the formats\n*_locations.npy and *_data.npy will be deleted!")), ToolInput(tag="in_cores", input_type=Int(optional=True), prefix="--cores", doc=InputDocumentation(doc="Number of cores to utilize in parallel (default: 16)")), ToolInput(tag="in_coverage", input_type=String(optional=True), prefix="--coverage", doc=InputDocumentation(doc="Required coverage for both the tumor and the normal.\nAny coverage in excess of this limit will be randomly\ndownsampled")), ToolInput(tag="in_confidence_interval", input_type=File(optional=True), prefix="--confidence-interval", doc=InputDocumentation(doc="Confidence interval for the estimated MSI Score\nreported in the tsv output file (default: 0.95)")), ToolInput(tag="in_use_attention", input_type=Boolean(optional=True), prefix="--use-attention", doc=InputDocumentation(doc="Use attention pooling rather than average pooling to\naggregate sample embeddings (default: False)")), ToolInput(tag="in_tumor_bam", input_type=File(optional=True), prefix="--tumor-bam", doc=InputDocumentation(doc="Tumor bam file for conversion")), ToolInput(tag="in_normal_bam", input_type=File(optional=True), prefix="--normal-bam", doc=InputDocumentation(doc="Matched normal bam file for conversion")), ToolInput(tag="in_case_id", input_type=File(optional=True), prefix="--case-id", doc=InputDocumentation(doc="Unique identifier for the single sample/case\nsubmitted. This will be the filename for any saved\nresults (default: TestCase)")), ToolInput(tag="in_norm_case_id", input_type=String(optional=True), prefix="--norm-case-id", doc=InputDocumentation(doc="Normal case name (default: None)")), ToolInput(tag="in_case_list", input_type=File(optional=True), prefix="--case-list", doc=InputDocumentation(doc="Case List for generating sample vectors in bulk, if\nspecified all other input file args will be ignored")), ToolInput(tag="in_name", input_type=File(optional=True), prefix="--name", doc=InputDocumentation(doc="name of the run submitted using --case-list, this will\nbe the filename for any saved results in the tsv\nformat (default: BATCH)\n"))], outputs=[ToolOutput(tag="out_confidence_interval", output_type=File(optional=True), selector=InputSelector(input_to_select="in_confidence_interval", type_hint=File()), doc=OutputDocumentation(doc="Confidence interval for the estimated MSI Score\nreported in the tsv output file (default: 0.95)"))], container="quay.io/biocontainers/mimsi:0.4.3--pyhdfd78af_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Analyze_V0_1_0().translate("wdl")

