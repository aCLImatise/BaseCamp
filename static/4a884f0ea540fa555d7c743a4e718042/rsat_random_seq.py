from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Rsat_Random_Seq_V0_1_0 = CommandToolBuilder(tool="rsat_random_seq", base_command=["rsat", "random-seq"], inputs=[ToolInput(tag="in_sequence_length", input_type=Boolean(optional=True), prefix="-l", doc=InputDocumentation(doc="sequence length")), ToolInput(tag="in_number_sequencesgenerate_set", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="Number of sequences.\nGenerate a set of n sequences, each of length l.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="verbose.")), ToolInput(tag="in_specified_standard_output", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="if not specified, the standard output is used.\nThis allows to place the comand within a pipe.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="-prefix", doc=InputDocumentation(doc="for sequence identifiers (default: rand).")), ToolInput(tag="in_format", input_type=String(optional=True), prefix="-format", doc=InputDocumentation(doc="format.\nTwo options are available:\nIG      IG suite from IntelliGenetics\nraw     (default)")), ToolInput(tag="in_lw", input_type=Boolean(optional=True), prefix="-lw", doc=InputDocumentation(doc="##  Line width. A newline character will be inserted in the\nsequence every ## bases. Default is 70.\n-lw 0 will prevent newline insertion.")), ToolInput(tag="in_type", input_type=Boolean(optional=True), prefix="-type", doc=InputDocumentation(doc="protein|DNA|other")), ToolInput(tag="in_seed", input_type=Boolean(optional=True), prefix="-seed", doc=InputDocumentation(doc="# seed for the random generator")), ToolInput(tag="in_generate_random_sequences", input_type=File(optional=True), prefix="-i", doc=InputDocumentation(doc="Generate random sequences with lengths specified in a template\nfile.\nVarious template types are supported (option -template_format):\nsequences (in fasta), genomic coordinates (in bed), sequence\nlengths.\nThis option is incompatible with options -l and -n.")), ToolInput(tag="in_template_format", input_type=Int(optional=True), prefix="-template_format", doc=InputDocumentation(doc="Format for the template set (specified with the option -i).\nSupported formats:\nfasta (default)\nTemplates are provided as a fasta-formatted sequence file. The\nprogram random-genome-fragments calls sequence-lengths to define\nthe template lengths.\nbed\nTemplates are provided as a bed-formatted file of genomic\ncoordinates. The program random-genome-fragments calls\nsequence-lengths -format bed to define the lengths of the bed\nfeatures.\nBed file must contain at least 3 columns, indicating, for each\nfeature:\n1. id (ignored)\n2. start coordinate\n3. end coordinate\nlen\nTemplates are provided as a tab-delimited file indicating the\nlength of each template sequence (this file can be produced by\nsequence-lengths).")), ToolInput(tag="in_lf", input_type=Int(optional=True), prefix="-lf", doc=InputDocumentation(doc="file\nDeprecated. Replaced by -i template_file -template_format len.\nMaintained for backward compatibility.\nGenerate random sequences with the same lengths as a set of template\nsequences. The sequence length file can be obtained with the command\nsequence-lengths.\nThis option is incompatible with options -l and -n.\nThe length file contains two columns :\n-sequence ID (ignored)\n-sequence length")), ToolInput(tag="in_exp_freq", input_type=Boolean(optional=True), prefix="-expfreq", doc=InputDocumentation(doc="Specifyt a file describing the background model. This\nfile must be in oligo format, i.e. a table with\nexpected oligomer frequencies. See\nI<convert-background-model> for conversion of other\nbackground model formats into oligomer frequency\ntables.\nWhen this option is used, the sequences are generated\naccording to a Markov chain. For instance if the\nfrequency file contains tetramers, each base will be\nselected randomly with a probability depending on the\n3 preceding bases:\np(Wj-3,j)\np(Bj=B) = -----------\np(Wj-3,j-1)\nwhere   Bj      is the base at position j\nB       is a residue, ie A, C, G or T\nWj-3,j-1\nis a word found in the sequence between\npositions j-3 and j-1\nWj-3,j  is the same word with the character B\nconcatenated at its end")), ToolInput(tag="in_bg", input_type=Boolean(optional=True), prefix="-bg", doc=InputDocumentation(doc="background model\nAutomatically load a pre-calibrated exected frequency\nfile from the RSAT genome distribution. When this\noption is used, the options -org and -ol are also\nrequired, to indicate the organism and the\noligonucleotide length, respectively.\nWhen the option -bg is used, it is necessary to\ndefine the order of the markov chain, either with the\noption -markov, or with the option -ol (oligo length).\nThis option is incompatible with the option -expfreq.\nType of sequences used as background model for\nestimating expected oligonucleotide frequencies.\nSupported models:\n-bg equi\nequiprobable residue frequencies (default)\n-bg upstream-noorf\nall upstream sequences, preventing overlap with\nupstream open reading frames (ORFs). Requires to\nspeciy a model organism.\n-bg upstream\nall upstream sequences, allowing overlap with\nupstream ORFs. Requires to speciy a model\norganism.\n-bg intergenic\nintergenic frequencies Whole set of intergenic\nregions, including upstream and downstream\nsequences. Requires to speciy a model organism.\n-bg protein\ngenerate random peptidic sequences using a Markov\nchain calibrated on all peptidic sequences of the\nselected organism.")), ToolInput(tag="in_org", input_type=Boolean(optional=True), prefix="-org", doc=InputDocumentation(doc="organism\nThis is necessary with the option -bg, to determine\nwhich frequency file has to be sued for expected\nfrequency calibration.")), ToolInput(tag="in_markov", input_type=String(optional=True), prefix="-markov", doc=InputDocumentation(doc="order for the background model\nNote: options -markov and -ol are mutually exclusive.")), ToolInput(tag="in_ol", input_type=Boolean(optional=True), prefix="-ol", doc=InputDocumentation(doc="oligo-length\nOligonucleotide length used to train the Markov\nbackground model. If the oligo length is k, the markov\norder is m = k-1.")), ToolInput(tag="in_rep", input_type=Boolean(optional=True), prefix="-rep", doc=InputDocumentation(doc="Number of repetitions\nThe list if sequence lengths is repeated rep times.\nThis option only serves when a length file is used to\nspecify sequence-sise lengths.\nThis option is incompatible with the options -l and\n-n.")), ToolInput(tag="in_random_seq", input_type=String(), position=0, doc=InputDocumentation(doc="USAGE")), ToolInput(tag="in_sequences", input_type=String(), position=0, doc=InputDocumentation(doc="OPTIONS")), ToolInput(tag="in_probabilities", input_type=String(), position=0, doc=InputDocumentation(doc="-a      alphabet\nmust be followed by residue frequencies expressed precisely\nthis way:\n-a a:t # c:g #\nex:\n-a a:t 0.3 c:g 0.2\nThe option\n-a yeast\nwill automatically use the residue frequencies from yeast\ngenome."))], outputs=[ToolOutput(tag="out_specified_standard_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_specified_standard_output", type_hint=File()), doc=OutputDocumentation(doc="if not specified, the standard output is used.\nThis allows to place the comand within a pipe."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rsat_Random_Seq_V0_1_0().translate("wdl", allow_empty_container=True)

