from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, Int, File

Snpsift_Annotate_V0_1_0 = CommandToolBuilder(tool="SnpSift_annotate", base_command=["SnpSift", "annotate"], inputs=[ToolInput(tag="in_dbsnp", input_type=Boolean(optional=True), prefix="-dbsnp", doc=InputDocumentation(doc=": Use DbSnp database.")), ToolInput(tag="in_clin_var", input_type=Boolean(optional=True), prefix="-clinvar", doc=InputDocumentation(doc=": Use ClinVar database.")), ToolInput(tag="in_annotate_fields_has", input_type=Boolean(optional=True), prefix="-a", doc=InputDocumentation(doc=": Annotate fields, even if the database has an empty value (annotates using '.' for empty).")), ToolInput(tag="in_exists", input_type=String(optional=True), prefix="-exists", doc=InputDocumentation(doc=": Annotate whether the variant exists or not in the database (using 'tag' as an INFO field FLAG).")), ToolInput(tag="in_id", input_type=Boolean(optional=True), prefix="-id", doc=InputDocumentation(doc=": Only annotate ID field (do not add INFO field). Default: true")), ToolInput(tag="in_info", input_type=String(optional=True), prefix="-info", doc=InputDocumentation(doc=": Annotate using a list of info fields (list is a comma separated list of fields). Default: ALL.")), ToolInput(tag="in_name", input_type=String(optional=True), prefix="-name", doc=InputDocumentation(doc=": Prepend 'str' to all annotated INFO fields. Default: ''.")), ToolInput(tag="in_max_block_size", input_type=Int(optional=True), prefix="-maxBlockSize", doc=InputDocumentation(doc=": Use 'max block size' when creating index ('-sorted' command line option). Default: 16384")), ToolInput(tag="in_no_alt", input_type=Boolean(optional=True), prefix="-noAlt", doc=InputDocumentation(doc=": Do not use REF and ALT fields when comparing database.vcf entries to file.vcf entries. Default: false")), ToolInput(tag="in_no_id", input_type=Boolean(optional=True), prefix="-noId", doc=InputDocumentation(doc=": Do not annotate ID field. Default: false")), ToolInput(tag="in_no_info", input_type=Boolean(optional=True), prefix="-noInfo", doc=InputDocumentation(doc=": Do not annotate INFO fields. Default: false")), ToolInput(tag="in_sorted", input_type=Boolean(optional=True), prefix="-sorted", doc=InputDocumentation(doc=": VCF database is sorted and uncompressed. Default: false")), ToolInput(tag="in_tab_ix", input_type=Boolean(optional=True), prefix="-tabix", doc=InputDocumentation(doc=": VCF database is tabix-indexed. Default: false")), ToolInput(tag="in_config", input_type=File(optional=True), prefix="-config", doc=InputDocumentation(doc=": Specify config file")), ToolInput(tag="in__debug", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc=": Debug.")), ToolInput(tag="in_db", input_type=File(optional=True), prefix="-db", doc=InputDocumentation(doc=": Database file name (for commands that require databases).")), ToolInput(tag="in_download", input_type=Boolean(optional=True), prefix="-download", doc=InputDocumentation(doc=": Download database, if not available locally. Default: true.")), ToolInput(tag="in_no_download", input_type=Boolean(optional=True), prefix="-noDownload", doc=InputDocumentation(doc=": Do not download a database, if not available locally.")), ToolInput(tag="in_no_log", input_type=Boolean(optional=True), prefix="-noLog", doc=InputDocumentation(doc=": Do not report usage statistics to server.")), ToolInput(tag="in__verbose", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc=": Verbose.")), ToolInput(tag="in_jar", input_type=String(optional=True), prefix="-jar", doc=InputDocumentation(doc="")), ToolInput(tag="in_database_dot_vcf", input_type=String(), position=0, doc=InputDocumentation(doc=": Use 'database.vcf' file as annotations database. Note: The VCF file can be bgzipped and tabix-indexed."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Snpsift_Annotate_V0_1_0().translate("wdl", allow_empty_container=True)

