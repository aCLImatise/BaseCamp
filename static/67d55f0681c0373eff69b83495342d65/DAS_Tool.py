from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Boolean

Das_Tool_V0_1_0 = CommandToolBuilder(tool="DAS_Tool", base_command=["DAS_Tool"], inputs=[ToolInput(tag="in_methodn_c_contigsfa", input_type=String(optional=True), prefix="-l", doc=InputDocumentation(doc=",...,methodN -c contigs.fa -o myOutput")), ToolInput(tag="in_bins", input_type=Boolean(optional=True), prefix="--bins", doc=InputDocumentation(doc="Comma separated list of tab separated scaffolds to bin tables.")), ToolInput(tag="in_contigs", input_type=Boolean(optional=True), prefix="--contigs", doc=InputDocumentation(doc="Contigs in fasta format.")), ToolInput(tag="in_output_basename", input_type=Boolean(optional=True), prefix="--outputbasename", doc=InputDocumentation(doc="Basename of output files.")), ToolInput(tag="in_labels", input_type=Boolean(optional=True), prefix="--labels", doc=InputDocumentation(doc="Comma separated list of binning prediction names. (optional)")), ToolInput(tag="in_search_engine", input_type=Boolean(optional=True), prefix="--search_engine", doc=InputDocumentation(doc="Engine used for single copy gene identification [blast/diamond/usearch].\n(default: usearch)")), ToolInput(tag="in_write_bin_evals", input_type=Boolean(optional=True), prefix="--write_bin_evals", doc=InputDocumentation(doc="Write evaluation for each input bin set [0/1]. (default: 1)")), ToolInput(tag="in_create_plots", input_type=Boolean(optional=True), prefix="--create_plots", doc=InputDocumentation(doc="Create binning performance plots [0/1]. (default: 1)")), ToolInput(tag="in_write_bins", input_type=Boolean(optional=True), prefix="--write_bins", doc=InputDocumentation(doc="Export bins as fasta files  [0/1]. (default: 0)")), ToolInput(tag="in_write_unbinned", input_type=Boolean(optional=True), prefix="--write_unbinned", doc=InputDocumentation(doc="Report unbinned contigs. To export as fasta file also set write_bins==1 [0/1]. (default: 0)")), ToolInput(tag="in_proteins", input_type=Boolean(optional=True), prefix="--proteins", doc=InputDocumentation(doc="Predicted proteins in prodigal fasta format (>scaffoldID_geneNo).\nGene prediction step will be skipped if given. (optional)")), ToolInput(tag="in_threads", input_type=Boolean(optional=True), prefix="--threads", doc=InputDocumentation(doc="Number of threads to use. (default: 1)")), ToolInput(tag="in_score_threshold", input_type=Boolean(optional=True), prefix="--score_threshold", doc=InputDocumentation(doc="Score threshold until selection algorithm will keep selecting bins [0..1].\n(default: 0.5)")), ToolInput(tag="in_duplicate_penalty", input_type=Boolean(optional=True), prefix="--duplicate_penalty", doc=InputDocumentation(doc="Penalty for duplicate single copy genes per bin (weight b).\nOnly change if you know what you're doing. [0..3]\n(default: 0.6)")), ToolInput(tag="in_mega_bin_penalty", input_type=Boolean(optional=True), prefix="--megabin_penalty", doc=InputDocumentation(doc="Penalty for megabins (weight c). Only change if you know what you're doing. [0..3]\n(default: 0.5)")), ToolInput(tag="in_db_directory", input_type=Boolean(optional=True), prefix="--db_directory", doc=InputDocumentation(doc="Directory of single copy gene database. (default: install_dir/db)")), ToolInput(tag="in_resume", input_type=Boolean(optional=True), prefix="--resume", doc=InputDocumentation(doc="Use existing predicted single copy gene files from a previous run [0/1]. (default: 0)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Write debug information to log file."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Das_Tool_V0_1_0().translate("wdl", allow_empty_container=True)

