from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Boolean

Idfetch_V0_1_0 = CommandToolBuilder(tool="idfetch", base_command=["idfetch"], inputs=[ToolInput(tag="in_filename_default_stdout", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Filename for output  [File Out]\ndefault = stdout")), ToolInput(tag="in_output_type_text", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="Output type:      1=text asn.1\n2=Binary asn.1\n3=Genbank (Seq-entry only)\n4=genpept (Seq-entry only)\n5=fasta (table for history)\n6=quality scores (Seq-entry only)\n7=Entrez DocSums\n8=fasta reverse complement")), ToolInput(tag="in_database_use_meaning", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="Database to use (special meaning for -q flag: n - nucleotide, p - protein) [String]  Optional")), ToolInput(tag="in_entity_number_retrieval", input_type=Boolean(optional=True), prefix="-e", doc=InputDocumentation(doc="Entity number (retrieval number) to dump [Integer]  Optional\ndefault = 0")), ToolInput(tag="in_type_get_get", input_type=Boolean(optional=True), prefix="-i", doc=InputDocumentation(doc="Type of lookup:   0 - get Seq-entry\n1 - get gi state (output to stderr)\n2 - get SeqIds\n3 - get gi historyn (sequence change only)\n4 - get gi revision history (any change to asn.1)")), ToolInput(tag="in_gi_d_dump", input_type=Boolean(optional=True), prefix="-g", doc=InputDocumentation(doc="GI id for single Entity to dump [Integer]  Optional\ndefault = 0")), ToolInput(tag="in_file_dump_optional", input_type=Boolean(optional=True), prefix="-G", doc=InputDocumentation(doc="File with list of gi's, accessions, accession.version's, fasta seqid's to dump [File In]  Optional")), ToolInput(tag="in_max_complexity_get", input_type=Boolean(optional=True), prefix="-c", doc=InputDocumentation(doc="Max complexity:   0 - get the whole blob\n1 - get the bioseq of interest\n2 - get the minimal bioseq-set containing the bioseq of interest\n3 - get the minimal nuc-prot containing the bioseq of interest\n4 - get the minimal pub-set containing the bioseq of interest")), ToolInput(tag="in_flattened_seqid_ortypenumber", input_type=Boolean(optional=True), prefix="-f", doc=InputDocumentation(doc="flaTtened SeqId, format:\n'type(name,accession,release,version)'\nas '5(HUMHBB)' or\ntype=accession, or\ntype:number  [String]  Optional")), ToolInput(tag="in_fasta_style_seqid", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="Fasta style SeqId ENCLOSED IN QUOTES:\nlcl|int or str bbs|int bbm|int gb|acc|loc\nemb|acc|loc pir|acc|name sp|acc|name\npat|country|patent|seq gi|int dbj|acc|loc\nprf|acc|name pdb|entry|chain [String]  Optional")), ToolInput(tag="in_log_file_optional", input_type=File(optional=True), prefix="-l", doc=InputDocumentation(doc="Log file [File Out]  Optional")), ToolInput(tag="in_var_11", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="Generate gi list by entrez query [String]  Optional")), ToolInput(tag="in_var_12", input_type=Boolean(optional=True), prefix="-Q", doc=InputDocumentation(doc="Generate gi list by entrez query [File In]  Optional")), ToolInput(tag="in_output_only_list", input_type=Boolean(optional=True), prefix="-n", doc=InputDocumentation(doc="Output only the list of gis, used with -q [T/F]  Optional")), ToolInput(tag="in_add_features_delimited", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="Add features delimited by ','. Allowed values are: 'CDD', 'SNP', 'SNP_graph', 'MGC', 'HPRD', 'STS','tRNA','microRNA'. [String]  Optional"))], outputs=[ToolOutput(tag="out_filename_default_stdout", output_type=File(optional=True), selector=InputSelector(input_to_select="in_filename_default_stdout", type_hint=File()), doc=OutputDocumentation(doc="Filename for output  [File Out]\ndefault = stdout")), ToolOutput(tag="out_log_file_optional", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file_optional", type_hint=File()), doc=OutputDocumentation(doc="Log file [File Out]  Optional"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Idfetch_V0_1_0().translate("wdl", allow_empty_container=True)

