from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Int, Boolean

Anvi_Search_Functions_V0_1_0 = CommandToolBuilder(tool="anvi_search_functions", base_command=["anvi-search-functions"], inputs=[ToolInput(tag="in_contigs_db", input_type=String(optional=True), prefix="--contigs-db", doc=InputDocumentation(doc="Anvi'o contigs database generated by 'anvi-gen-\ncontigs-database' (default: None)")), ToolInput(tag="in_pan_db", input_type=String(optional=True), prefix="--pan-db", doc=InputDocumentation(doc="Anvi'o pan database (default: None)")), ToolInput(tag="in_genomes_storage", input_type=File(optional=True), prefix="--genomes-storage", doc=InputDocumentation(doc="Anvi'o genomes storage file (default: None)")), ToolInput(tag="in_search_terms", input_type=String(optional=True), prefix="--search-terms", doc=InputDocumentation(doc="Search terms. Multiple of them can be declared\nseparated by a delimiter (the default is a comma).\n(default: None)")), ToolInput(tag="in_delimiter", input_type=String(optional=True), prefix="--delimiter", doc=InputDocumentation(doc="The delimiter to parse multiple input terms. The\ndefault is ','.")), ToolInput(tag="in_annotation_sources", input_type=Int(optional=True), prefix="--annotation-sources", doc=InputDocumentation(doc="NAME[S]\nGet functional annotations for a specific list of\nannotation sources. You can specify one or more\nsources by separating them from each other with a\ncomma character (i.e., '--annotation-sources\nsource_1,source_2,source_3'). The default behavior is\nto return everything (default: None)")), ToolInput(tag="in_list_annotation_sources", input_type=Boolean(optional=True), prefix="--list-annotation-sources", doc=InputDocumentation(doc="List available functional annotation sources.\n(default: False)")), ToolInput(tag="in_output_file", input_type=File(optional=True), prefix="--output-file", doc=InputDocumentation(doc="File path to store results. (default: None)")), ToolInput(tag="in_full_report", input_type=File(optional=True), prefix="--full-report", doc=InputDocumentation(doc="Optional output file with a fuller description of\nfindings. (default: None)")), ToolInput(tag="in_include_sequences", input_type=Boolean(optional=True), prefix="--include-sequences", doc=InputDocumentation(doc="Include sequences in the report. (default: False)")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Be verbose, print more messages whenever possible.\n(default: False)")), ToolInput(tag="in_functions_txt", input_type=String(), position=0, doc=InputDocumentation(doc="üç∫ More on `anvi-search-functions`:"))], outputs=[ToolOutput(tag="out_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output_file", type_hint=File()), doc=OutputDocumentation(doc="File path to store results. (default: None)")), ToolOutput(tag="out_full_report", output_type=File(optional=True), selector=InputSelector(input_to_select="in_full_report", type_hint=File()), doc=OutputDocumentation(doc="Optional output file with a fuller description of\nfindings. (default: None)"))], container="quay.io/biocontainers/anvio-minimal:7--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Anvi_Search_Functions_V0_1_0().translate("wdl")

