!Command
positional:
- !Positional
  description: ''
  position: 0
  name: input_file
  optional: false
- !Positional
  description: ''
  position: 1
  name: output_file
  optional: false
- !Positional
  description: ''
  position: 2
  name: filter_file
  optional: true
named: []
command:
- decoyFASTA
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "decoyFASTA: a tool for creating decoy search databases.  In its default\
  \ operation, opens a FASTA formatted database file and writes it to a new file with\
  \ the addition of a  decoy reverse sequence entry for each protein.\nusage: decoyFASTA\
  \ [options] <input_file> <output_file> [<filter_file>]\noptional filter file is\
  \ a FASTA file, only entries found in both filter and input are processed (actually\
  \ it can just be file of FASTA headers, it looks for the leading > and ignores anything\
  \ else)\noptions:\n-no_orig\n   do not copy the original proteins from the input\
  \ file to the output file\n-no_reverse\n   do not reverse the sequences of the new\
  \ decoy proteins being written to the output file\n[-t[freq] <decoy_tag> [-t[freq]\
  \ <2nd_decoy_tag> [-t[freq] <3rd...>]...]]\n   By default, decoy sequences have\
  \ the tag \"decoy_\" added to the protein name, this can be customized with the\
  \ -t switch.\nUse multiple -t switches to have decoy names randomly assigned from\
  \ the provided tags.\nUse the [freq] option on -t to dictate relative frequency\
  \ of decoy names.\nA negative [freq] value can be used to cause a portion of the\
  \ input file to be skipped, which is useful for adjusting the ratio of decoys to\
  \ actual proteins in your output database.\nexample: decoyFASTA -t5 decoy1_ -t3\
  \ decoy2_ -t-1 mydb.fasta decoydb.fasta\n will convert 5/9 (5+3+1=9) of the inputs\
  \ to decoy1_, 3/9 to decoy2_, and skip 1/9.\n"
generated_using: []
