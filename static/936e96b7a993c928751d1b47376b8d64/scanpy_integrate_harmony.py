from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, File, String, Float

Scanpy_Integrate_Harmony_V0_1_0 = CommandToolBuilder(tool="scanpy_integrate_harmony", base_command=["scanpy-integrate", "harmony"], inputs=[ToolInput(tag="in_input_format", input_type=Boolean(optional=True), prefix="--input-format", doc=InputDocumentation(doc="[anndata|loom]\nInput object format.  [default: anndata]")), ToolInput(tag="in_output_format", input_type=Boolean(optional=True), prefix="--output-format", doc=InputDocumentation(doc="[anndata|loom|zarr]\nOutput object format.  [default: anndata]")), ToolInput(tag="in_zarr_chunk_size", input_type=Int(optional=True), prefix="--zarr-chunk-size", doc=InputDocumentation(doc="Chunk size for writing output in zarr")), ToolInput(tag="in_loom_write_obs_m_var_m", input_type=Boolean(optional=True), prefix="--loom-write-obsm-varm", doc=InputDocumentation(doc="Write obsm and varm to the Loom file?\n[default: False]")), ToolInput(tag="in_export_mtx", input_type=File(optional=True), prefix="--export-mtx", doc=InputDocumentation(doc="When specified, using it as prefix for\nexporting mtx files. If not empty and not\nending with '/' or '_', a '_' will be\nappended.")), ToolInput(tag="in_show_obj", input_type=Boolean(optional=True), prefix="--show-obj", doc=InputDocumentation(doc="[stdout|stderr]      Print output object summary info to\nspecified stream.")), ToolInput(tag="in_batch_key", input_type=String(optional=True), prefix="--batch-key", doc=InputDocumentation(doc="The name of the column in adata.obs that\ndifferentiates among experiments/batches.\n[required]")), ToolInput(tag="in_basis", input_type=String(optional=True), prefix="--basis", doc=InputDocumentation(doc="The name of the field in adata.obsm where\nthe PCA table is stored. Defaults to\n'X_pca', which is the default for\nsc.tl.pca().  [default: X_pca]")), ToolInput(tag="in_adjusted_basis", input_type=String(optional=True), prefix="--adjusted-basis", doc=InputDocumentation(doc="The name of the field in adata.obsm where\nthe adjusted PCA table will be stored after\nrunning this function.  [default:\nX_pca_harmony]")), ToolInput(tag="in_theta", input_type=Float(optional=True), prefix="--theta", doc=InputDocumentation(doc="Diversity clustering penalty parameter.\ntheta=0 does not encourage any diversity.\nLarger values of theta result in more\ndiverse clusters.  [default: 2]")), ToolInput(tag="in_lambda", input_type=Float(optional=True), prefix="--lambda", doc=InputDocumentation(doc="Ridge regression penalty parameter. Lambda\nmust be strictly positive.  Smaller values\nresult in more aggressive correction.\n[default: 1]")), ToolInput(tag="in_sigma", input_type=Float(optional=True), prefix="--sigma", doc=InputDocumentation(doc="Width of soft kmeans clusters. Sigma scales\nthe distance from a cell to cluster\ncentroids. Larger values of sigma result in\ncells assigned to more clusters. Smaller\nvalues of sigma make soft kmeans cluster\napproach hard clustering.  [default: 0.1]")), ToolInput(tag="in_n_clust", input_type=Int(optional=True), prefix="--n-clust", doc=InputDocumentation(doc="Number of clusters in model. nclust=1\nequivalent to simple linear regression.")), ToolInput(tag="in_tau", input_type=Int(optional=True), prefix="--tau", doc=InputDocumentation(doc="Protection against overclustering small\ndatasets with large ones. tau is the\nexpected number of cells per cluster.\n[default: 0]")), ToolInput(tag="in_block_size", input_type=Float(optional=True), prefix="--block-size", doc=InputDocumentation(doc="What proportion of cells to update during\nclustering. Between 0 to 1, default 0.05.\nLarger values may be faster but less\naccurate.  [default: 0.05]")), ToolInput(tag="in_max_iter_cluster", input_type=Int(optional=True), prefix="--max-iter-cluster", doc=InputDocumentation(doc="Maximum number of rounds to run clustering\nat each round of Harmony.  [default: 20]")), ToolInput(tag="in_max_iter_harmony", input_type=Int(optional=True), prefix="--max-iter-harmony", doc=InputDocumentation(doc="Maximum number of rounds to run Harmony. One\nround of Harmony involves one clustering and\none correction step.  [default: 10]")), ToolInput(tag="in_epsilon_cluster", input_type=Float(optional=True), prefix="--epsilon-cluster", doc=InputDocumentation(doc="Convergence tolerance for clustering round\nof Harmony Set to -Inf to never stop early.\n[default: 1e-05]")), ToolInput(tag="in_epsilon_harmony", input_type=Float(optional=True), prefix="--epsilon-harmony", doc=InputDocumentation(doc="Convergence tolerance for clustering round\nof Harmony Set to -Inf to never stop early.\n[default: 1e-05]")), ToolInput(tag="in_random_state", input_type=Int(optional=True), prefix="--random-state", doc=InputDocumentation(doc="Seed for random number generator.  [default:\n0]")), ToolInput(tag="in_input_obj", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_output_obj", input_type=String(), position=1, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/scanpy-scripts:0.3.3--pyhdfd78af_2", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Scanpy_Integrate_Harmony_V0_1_0().translate("wdl")

