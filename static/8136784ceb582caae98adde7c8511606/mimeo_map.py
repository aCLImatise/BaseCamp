from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Directory, String, Boolean, File, Int

Mimeo_Map_V0_1_0 = CommandToolBuilder(tool="mimeo_map", base_command=["mimeo-map"], inputs=[ToolInput(tag="in_a_dir", input_type=Directory(optional=True), prefix="--adir", doc=InputDocumentation(doc="Name of directory containing sequences from A genome.")), ToolInput(tag="in_b_dir", input_type=Directory(optional=True), prefix="--bdir", doc=InputDocumentation(doc="Name of directory containing sequences from B genome.")), ToolInput(tag="in_a_fast_a", input_type=String(optional=True), prefix="--afasta", doc=InputDocumentation(doc="A genome as multifasta.")), ToolInput(tag="in_b_fast_a", input_type=String(optional=True), prefix="--bfasta", doc=InputDocumentation(doc="B genome as multifasta.")), ToolInput(tag="in_recycle", input_type=Boolean(optional=True), prefix="--recycle", doc=InputDocumentation(doc="Use existing alignment '--outfile' if found.")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Write output files to this directory. (Default: cwd)")), ToolInput(tag="in_gff_out", input_type=File(optional=True), prefix="--gffout", doc=InputDocumentation(doc="Name of GFF3 annotation file. If not set, suppress")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="If set report LASTZ progress.")), ToolInput(tag="in_label", input_type=String(optional=True), prefix="--label", doc=InputDocumentation(doc="Set annotation TYPE field in gff.")), ToolInput(tag="in_prefix", input_type=String(optional=True), prefix="--prefix", doc=InputDocumentation(doc="ID prefix for B-genome hits annotated in A-genome.")), ToolInput(tag="in_keep_temp", input_type=Boolean(optional=True), prefix="--keeptemp", doc=InputDocumentation(doc="If set do not remove temp files.")), ToolInput(tag="in_lz_path", input_type=File(optional=True), prefix="--lzpath", doc=InputDocumentation(doc="Custom path to LASTZ executable if not in $PATH.")), ToolInput(tag="in_mini_dt", input_type=String(optional=True), prefix="--minIdt", doc=InputDocumentation(doc="Minimum alignment identity to report.")), ToolInput(tag="in_min_len", input_type=Int(optional=True), prefix="--minLen", doc=InputDocumentation(doc="Minimum alignment length to report.")), ToolInput(tag="in_hsp_thresh", input_type=Int(optional=True), prefix="--hspthresh", doc=InputDocumentation(doc="Set HSP min score threshold for LASTZ.")), ToolInput(tag="in_trf_path", input_type=File(optional=True), prefix="--TRFpath", doc=InputDocumentation(doc="Custom path to TRF executable if not in $PATH.")), ToolInput(tag="in_t_match", input_type=String(optional=True), prefix="--tmatch", doc=InputDocumentation(doc="TRF matching weight")), ToolInput(tag="in_t_mismatch", input_type=String(optional=True), prefix="--tmismatch", doc=InputDocumentation(doc="TRF mismatching penalty")), ToolInput(tag="in_t_delta", input_type=String(optional=True), prefix="--tdelta", doc=InputDocumentation(doc="TRF indel penalty")), ToolInput(tag="in_tpm", input_type=String(optional=True), prefix="--tPM", doc=InputDocumentation(doc="TRF match probability")), ToolInput(tag="in_tpi", input_type=String(optional=True), prefix="--tPI", doc=InputDocumentation(doc="TRF indel probability")), ToolInput(tag="in_tm_in_score", input_type=String(optional=True), prefix="--tminscore", doc=InputDocumentation(doc="TRF minimum alignment score to report")), ToolInput(tag="in_tmax_period", input_type=Int(optional=True), prefix="--tmaxperiod", doc=InputDocumentation(doc="TRF maximum period size to report")), ToolInput(tag="in_max_tandem", input_type=Int(optional=True), prefix="--maxtandem", doc=InputDocumentation(doc="Max percentage of an A-genome alignment which may be\nmasked by TRF. If exceeded, alignment will be\ndiscarded.")), ToolInput(tag="in_write_trf", input_type=Boolean(optional=True), prefix="--writeTRF", doc=InputDocumentation(doc="If set write TRF filtered alignment file for use with\nother mimeo modules.\n")), ToolInput(tag="in_output_dot", input_type=String(), position=0, doc=InputDocumentation(doc="--outfile OUTFILE     Name of alignment result file."))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Write output files to this directory. (Default: cwd)"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Mimeo_Map_V0_1_0().translate("wdl", allow_empty_container=True)

