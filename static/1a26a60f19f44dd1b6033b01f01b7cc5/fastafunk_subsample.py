from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, String, Int

Fastafunk_Subsample_V0_1_0 = CommandToolBuilder(tool="fastafunk_subsample", base_command=["fastafunk", "subsample"], inputs=[ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Run with high verbosity (debug level logging)")), ToolInput(tag="in_log_file", input_type=File(optional=True), prefix="--log-file", doc=InputDocumentation(doc="Log file to use (otherwise uses stdout, or stderr if\nout-fasta to stdout)")), ToolInput(tag="in_in_fast_a", input_type=File(optional=True), prefix="--in-fasta", doc=InputDocumentation(doc="[<filename> ...]\nOne or more FASTA files of sequences (else reads from\nstdin)")), ToolInput(tag="in_in_metadata", input_type=File(optional=True), prefix="--in-metadata", doc=InputDocumentation(doc="[<filename> ...]\nOne or more CSV or TSV tables of metadata")), ToolInput(tag="in_index_field", input_type=String(optional=True), prefix="--index-field", doc=InputDocumentation(doc="[<field> ...]\nField(s) in the fasta header to match the metadata\n(else matches column names)")), ToolInput(tag="in_index_column", input_type=File(optional=True), prefix="--index-column", doc=InputDocumentation(doc="Column in the metadata file to use to match to the\nsequence")), ToolInput(tag="in_group_column", input_type=File(optional=True), prefix="--group-column", doc=InputDocumentation(doc="[<column> ...]\nColumn(s) in the metadata file to define groupings")), ToolInput(tag="in_where_field", input_type=String(optional=True), prefix="--where-field", doc=InputDocumentation(doc="=<regex>\nAdditional matches to header fields")), ToolInput(tag="in_out_fast_a", input_type=File(optional=True), prefix="--out-fasta", doc=InputDocumentation(doc="A FASTA file (else writes to stdout)")), ToolInput(tag="in_out_metadata", input_type=File(optional=True), prefix="--out-metadata", doc=InputDocumentation(doc="A metadata file")), ToolInput(tag="in_target_file", input_type=File(optional=True), prefix="--target-file", doc=InputDocumentation(doc="CSV file of target numbers per group e.g. an edited\nversion of the count output")), ToolInput(tag="in_select_by_max_column", input_type=Int(optional=True), prefix="--select-by-max-column", doc=InputDocumentation(doc="Column in the metadata file maximize over when\nsubsetting")), ToolInput(tag="in_select_by_min_column", input_type=Int(optional=True), prefix="--select-by-min-column", doc=InputDocumentation(doc="Column in the metadata file minimize over when\nsubsetting")), ToolInput(tag="in_sample_size", input_type=Int(optional=True), prefix="--sample-size", doc=InputDocumentation(doc="The number of samples per group to select if not\nspecified by target file")), ToolInput(tag="in_exclude_uk", input_type=Boolean(optional=True), prefix="--exclude-uk", doc=InputDocumentation(doc="Includes all UK samples in subsample, and additionally\nkeeps the target number of non-UK samples per group\n"))], outputs=[ToolOutput(tag="out_log_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_log_file", type_hint=File()), doc=OutputDocumentation(doc="Log file to use (otherwise uses stdout, or stderr if\nout-fasta to stdout)")), ToolOutput(tag="out_target_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_target_file", type_hint=File()), doc=OutputDocumentation(doc="CSV file of target numbers per group e.g. an edited\nversion of the count output"))], container="quay.io/biocontainers/fastafunk:0.0.9--pyh3252c3a_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Fastafunk_Subsample_V0_1_0().translate("wdl")

