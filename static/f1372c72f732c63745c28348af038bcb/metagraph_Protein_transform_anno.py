from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String

Metagraph_Protein_Transform_Anno_V0_1_0 = CommandToolBuilder(tool="metagraph_Protein_transform_anno", base_command=["metagraph_Protein", "transform_anno"], inputs=[ToolInput(tag="in_intersect_columns", input_type=Boolean(optional=True), prefix="--intersect-columns", doc=InputDocumentation(doc="compute intersection of the annotation columns [off]")), ToolInput(tag="in_intersect_ratio", input_type=Boolean(optional=True), prefix="--intersect-ratio", doc=InputDocumentation(doc="[FLOAT]    include k-mer if it appears in this ratio of columns [1.0]")), ToolInput(tag="in_rename_cols", input_type=Boolean(optional=True), prefix="--rename-cols", doc=InputDocumentation(doc="[STR]  file with rules for renaming annotation labels []\nexample: 'L_1 L_1_renamed\nL_2 L_2_renamed\nL_2 L_2_renamed\n... ...........'")), ToolInput(tag="in_an_no_type", input_type=Boolean(optional=True), prefix="--anno-type", doc=InputDocumentation(doc="[STR]    target annotation format [column]\n( column, brwt, rb_brwt,\nrow_diff, row_diff_brwt, row_diff_sparse,\nrow, flat, rbfish, bin_rel_wt, bin_rel_wt_sdsl )")), ToolInput(tag="in_arity", input_type=Boolean(optional=True), prefix="--arity", doc=InputDocumentation(doc="arity in the brwt tree [2]")), ToolInput(tag="in_greedy", input_type=Boolean(optional=True), prefix="--greedy", doc=InputDocumentation(doc="use greedy column partitioning in brwt construction [off]")), ToolInput(tag="in_linkage", input_type=Boolean(optional=True), prefix="--linkage", doc=InputDocumentation(doc="cluster columns and construct linkage matrix [off]")), ToolInput(tag="in_linkage_file", input_type=Boolean(optional=True), prefix="--linkage-file", doc=InputDocumentation(doc="[STR] linkage matrix specifying brwt tree structure []\nexample: '0 1 <dist> 4\n2 3 <dist> 5\n4 5 <dist> 6'")), ToolInput(tag="in_fast", input_type=Boolean(optional=True), prefix="--fast", doc=InputDocumentation(doc="transform annotation in memory without streaming / sparse subsampling [off]")), ToolInput(tag="in_subsample", input_type=Boolean(optional=True), prefix="--subsample", doc=InputDocumentation(doc="[INT]    number of rows subsampled for distance estimation in column clustering [1000000]")), ToolInput(tag="in_dump_text_an_no", input_type=Boolean(optional=True), prefix="--dump-text-anno", doc=InputDocumentation(doc="dump the columns of the annotator as separate text files [off]")), ToolInput(tag="in_row_diff_stage", input_type=Boolean(optional=True), prefix="--row-diff-stage", doc=InputDocumentation(doc="[0|1|2]     stage of the row_diff construction [0]")), ToolInput(tag="in_max_path_length", input_type=Boolean(optional=True), prefix="--max-path-length", doc=InputDocumentation(doc="[INT]      maximum path length in row_diff annotation [100]")), ToolInput(tag="in_in_file_base", input_type=Boolean(optional=True), prefix="--infile-base", doc=InputDocumentation(doc="[STR]          graph for generating succ/pred/anchors (for row_diff types) []")), ToolInput(tag="in_parallel_nodes", input_type=Boolean(optional=True), prefix="--parallel-nodes", doc=InputDocumentation(doc="[INT]       number of nodes processed in parallel in brwt tree [n_threads]")), ToolInput(tag="in_disk_swap", input_type=Boolean(optional=True), prefix="--disk-swap", doc=InputDocumentation(doc="[STR]    directory for temporary files [OUT_BASEDIR]")), ToolInput(tag="in_parallel", input_type=Boolean(optional=True), prefix="--parallel", doc=InputDocumentation(doc="[INT]     use multiple threads for computation [1]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="switch on verbose output [off]")), ToolInput(tag="in_o", input_type=String(optional=True), prefix="-o", doc=InputDocumentation(doc="")), ToolInput(tag="in_annotator", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[], container="quay.io/biocontainers/metagraph:0.2.0--h74b8f77_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Metagraph_Protein_Transform_Anno_V0_1_0().translate("wdl")

