from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Array, String, Float, File, Int

Multi_Parallel_Pick_Otus_Py_V0_1_0 = CommandToolBuilder(tool="multi_parallel_pick_otus.py", base_command=["multi_parallel_pick_otus.py"], inputs=[ToolInput(tag="in_input_fna", input_type=Array(t=String(), optional=True), prefix="--input_fna", doc=InputDocumentation(doc="The names of the sequence files that will be have job\nscripts generated to process them. The expected input\nis from the split_sequence_data.py script (e.g. 0.fna,\n1.fna, ..., n.fna).")), ToolInput(tag="in_similarity", input_type=Float(optional=True), prefix="--similarity", doc=InputDocumentation(doc="Sequence similarity threshold [default: 0.97]")), ToolInput(tag="in_job_script_template", input_type=File(optional=True), prefix="--job_script_template", doc=InputDocumentation(doc="A file template containing placeholders for variables\nthat this script will fill in when creating a new job\nscript for each input FASTA query file. An example\nfile for PBS systems is included with phylotoast.")), ToolInput(tag="in_database", input_type=File(optional=True), prefix="--database", doc=InputDocumentation(doc="The path to the sequence database file to run the\nBLAST against.")), ToolInput(tag="in_wall_time", input_type=Int(optional=True), prefix="--walltime", doc=InputDocumentation(doc="The maximum running time in hours for each script.\nDefault is 10 hours.")), ToolInput(tag="in_job_name", input_type=Int(optional=True), prefix="--job_name", doc=InputDocumentation(doc="A descriptive name for the job script that will appear\nwhen checking the job status. Max length is 15\ncharacters, but '_#' will be appended to the name you\nprovide to differentiate among all the jobs, so this\nparameter will be truncated if necessary to\naccommodate for the number of input files.")), ToolInput(tag="in_verbose", input_type=File(optional=True), prefix="--verbose", doc=InputDocumentation(doc="This will cause the program to print the full path for\neach output file to the command line. This can be used\nfor informational purposes or to pipe (|) to the PBS\nmulti-submission script to automate job submission as\nsoon as the scripts are created.\n"))], outputs=[ToolOutput(tag="out_verbose", output_type=File(optional=True), selector=InputSelector(input_to_select="in_verbose", type_hint=File()), doc=OutputDocumentation(doc="This will cause the program to print the full path for\neach output file to the command line. This can be used\nfor informational purposes or to pipe (|) to the PBS\nmulti-submission script to automate job submission as\nsoon as the scripts are created.\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Multi_Parallel_Pick_Otus_Py_V0_1_0().translate("wdl", allow_empty_container=True)

