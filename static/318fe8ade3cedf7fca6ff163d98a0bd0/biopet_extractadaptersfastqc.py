from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, File, Boolean, Float

Biopet_Extractadaptersfastqc_V0_1_0 = CommandToolBuilder(tool="biopet_extractadaptersfastqc", base_command=["biopet-extractadaptersfastqc"], inputs=[ToolInput(tag="in_log_level", input_type=String(optional=True), prefix="--log_level", doc=InputDocumentation(doc="Level of log information printed. Possible levels: 'debug', 'info', 'warn', 'error'")), ToolInput(tag="in_input_file", input_type=File(optional=True), prefix="--inputFile", doc=InputDocumentation(doc="Fastqc data file (i.e., fastqc_data.txt file in the FastQC output)")), ToolInput(tag="in_adapter_output_file", input_type=File(optional=True), prefix="--adapterOutputFile", doc=InputDocumentation(doc="Output file for adapters, if not supplied output will go to stdout")), ToolInput(tag="in_contam_soutputfile", input_type=File(optional=True), prefix="--contamsOutputFile", doc=InputDocumentation(doc="Output file for adapters, if not supplied output will go to stdout")), ToolInput(tag="in_skip_contam_s", input_type=Boolean(optional=True), prefix="--skipContams", doc=InputDocumentation(doc="If this is set only the adapters block is used, other wise contaminations is also used")), ToolInput(tag="in_known_contam_file", input_type=File(optional=True), prefix="--knownContamFile", doc=InputDocumentation(doc="This file should contain the known contaminations from fastqc")), ToolInput(tag="in_known_adapter_file", input_type=File(optional=True), prefix="--knownAdapterFile", doc=InputDocumentation(doc="This file should contain the known adapters from fastqc")), ToolInput(tag="in_adapter_cut_off", input_type=Float(optional=True), prefix="--adapterCutoff", doc=InputDocumentation(doc="The fraction of the adapters in a read should be above this fraction, default is 0.001")), ToolInput(tag="in_output_as_fast_a", input_type=Boolean(optional=True), prefix="--outputAsFasta", doc=InputDocumentation(doc="Output in fasta format, default only sequences")), ToolInput(tag="in_extract_adapters_fast_qc", input_type=String(), position=0, doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_input_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_input_file", type_hint=File()), doc=OutputDocumentation(doc="Fastqc data file (i.e., fastqc_data.txt file in the FastQC output)")), ToolOutput(tag="out_adapter_output_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_adapter_output_file", type_hint=File()), doc=OutputDocumentation(doc="Output file for adapters, if not supplied output will go to stdout")), ToolOutput(tag="out_contam_soutputfile", output_type=File(optional=True), selector=InputSelector(input_to_select="in_contam_soutputfile", type_hint=File()), doc=OutputDocumentation(doc="Output file for adapters, if not supplied output will go to stdout"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Biopet_Extractadaptersfastqc_V0_1_0().translate("wdl", allow_empty_container=True)

