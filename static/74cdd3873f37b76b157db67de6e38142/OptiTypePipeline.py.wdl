version 1.0

task OptiTypePipelinepy {
  input {
    Array[String] files_fished_raw
    Boolean? rna
    Boolean? dna
    Float? beta
    Int? enumerate
    Directory? outdir
    String? prefix
    Boolean? verbose
    File? config
    String opti_type
  }
  command <<<
    OptiTypePipeline_py \
      ~{opti_type} \
      ~{if defined(files_fished_raw) then ("--input " +  '"' + files_fished_raw + '"') else ""} \
      ~{if (rna) then "--rna" else ""} \
      ~{if (dna) then "--dna" else ""} \
      ~{if defined(beta) then ("--beta " +  '"' + beta + '"') else ""} \
      ~{if defined(enumerate) then ("--enumerate " +  '"' + enumerate + '"') else ""} \
      ~{if defined(outdir) then ("--outdir " +  '"' + outdir + '"') else ""} \
      ~{if defined(prefix) then ("--prefix " +  '"' + prefix + '"') else ""} \
      ~{if (verbose) then "--verbose" else ""} \
      ~{if defined(config) then ("--config " +  '"' + config + '"') else ""}
  >>>
  runtime {
    docker: "quay.io/biocontainers/optitype:1.3.5--0"
  }
  parameter_meta {
    files_fished_raw: ".fastq file(s) (fished or raw) or .bam files stored\\nfor re-use, generated by an earlier OptiType run. One\\nfile: single-end mode, two files: paired-end mode."
    rna: "Use with RNA sequencing data."
    dna: "Use with DNA sequencing data."
    beta: "The beta value for for homozygosity detection (see\\npaper). Default: 0.009. Handle with care."
    enumerate: "Number of enumerations. OptiType will output the\\noptimal solution and the top N-1 suboptimal solutions\\nin the results CSV. Default: 1"
    outdir: "Specifies the out directory to which all files should\\nbe written."
    prefix: "Specifies prefix of output files"
    verbose: "Set verbose mode on."
    config: "Path to config file. Default: config.ini in the same\\ndirectory as this script\\n"
    opti_type: ""
  }
  output {
    File out_stdout = stdout()
    Directory out_outdir = "${in_outdir}"
  }
}