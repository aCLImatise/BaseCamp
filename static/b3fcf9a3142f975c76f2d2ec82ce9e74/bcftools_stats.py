from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, String, Boolean, Int

Bcftools_Stats_V0_1_0 = CommandToolBuilder(tool="bcftools_stats", base_command=["bcftools", "stats"], inputs=[ToolInput(tag="in_af_bins", input_type=File(optional=True), prefix="--af-bins", doc=InputDocumentation(doc="allele frequency bins, a list (0.1,0.5,1) or a file (0.1\n0.5\n1)")), ToolInput(tag="in_af_tag", input_type=String(optional=True), prefix="--af-tag", doc=InputDocumentation(doc="allele frequency tag to use, by default estimated from AN,AC or GT")), ToolInput(tag="in_on_est_allele_only", input_type=Boolean(optional=True), prefix="--1st-allele-only", doc=InputDocumentation(doc="include only 1st allele at multiallelic sites")), ToolInput(tag="in_collapse", input_type=String(optional=True), prefix="--collapse", doc=InputDocumentation(doc="treat as identical records with <snps|indels|both|all|some|none>, see man page for details [none]")), ToolInput(tag="in_depth", input_type=Boolean(optional=True), prefix="--depth", doc=InputDocumentation(doc="<int,int,int>          depth distribution: min,max,bin size [0,500,1]")), ToolInput(tag="in_exclude", input_type=String(optional=True), prefix="--exclude", doc=InputDocumentation(doc="exclude sites for which the expression is true (see man page for details)")), ToolInput(tag="in_exons", input_type=File(optional=True), prefix="--exons", doc=InputDocumentation(doc="tab-delimited file with exons for indel frameshifts (chr,from,to; 1-based, inclusive, bgzip compressed)")), ToolInput(tag="in_apply_filters", input_type=String(optional=True), prefix="--apply-filters", doc=InputDocumentation(doc="require at least one of the listed FILTER strings (e.g. 'PASS,.')")), ToolInput(tag="in_fast_a_ref", input_type=File(optional=True), prefix="--fasta-ref", doc=InputDocumentation(doc="faidx indexed reference sequence file to determine INDEL context")), ToolInput(tag="in_include", input_type=String(optional=True), prefix="--include", doc=InputDocumentation(doc="select sites for which the expression is true (see man page for details)")), ToolInput(tag="in_split_by_id", input_type=Boolean(optional=True), prefix="--split-by-ID", doc=InputDocumentation(doc="collect stats for sites with ID separately (known vs novel)")), ToolInput(tag="in_regions", input_type=String(optional=True), prefix="--regions", doc=InputDocumentation(doc="restrict to comma-separated list of regions")), ToolInput(tag="in_regions_file", input_type=File(optional=True), prefix="--regions-file", doc=InputDocumentation(doc="restrict to regions listed in a file")), ToolInput(tag="in_samples", input_type=String(optional=True), prefix="--samples", doc=InputDocumentation(doc="list of samples for sample stats, '-' to include all samples")), ToolInput(tag="in_samples_file", input_type=File(optional=True), prefix="--samples-file", doc=InputDocumentation(doc="file of samples to include")), ToolInput(tag="in_targets", input_type=String(optional=True), prefix="--targets", doc=InputDocumentation(doc="similar to -r but streams rather than index-jumps")), ToolInput(tag="in_targets_file", input_type=File(optional=True), prefix="--targets-file", doc=InputDocumentation(doc="similar to -R but streams rather than index-jumps")), ToolInput(tag="in_user_ts_tv", input_type=Boolean(optional=True), prefix="--user-tstv", doc=InputDocumentation(doc="<TAG[:min:max:n]>  collect Ts/Tv stats for any tag using the given binning [0:1:100]")), ToolInput(tag="in_threads", input_type=Int(optional=True), prefix="--threads", doc=InputDocumentation(doc="use multithreading with <int> worker threads [0]")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="produce verbose per-site and per-sample output")), ToolInput(tag="in_a_dot_vcf_do_tgz", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_bdotvcfdotgz", input_type=String(optional=True), position=1, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Bcftools_Stats_V0_1_0().translate("wdl", allow_empty_container=True)

