from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, Int, String, File

Iss_Generate_V0_1_0 = CommandToolBuilder(tool="iss_generate", base_command=["iss", "generate"], inputs=[ToolInput(tag="in_quiet", input_type=Boolean(optional=True), prefix="--quiet", doc=InputDocumentation(doc="Disable info logging. (default: False).")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Enable debug logging. (default: False).")), ToolInput(tag="in_seed", input_type=Int(optional=True), prefix="--seed", doc=InputDocumentation(doc="Seed all the random number generators")), ToolInput(tag="in_cpus", input_type=Int(optional=True), prefix="--cpus", doc=InputDocumentation(doc="number of cpus to use. (default: 2).")), ToolInput(tag="in_genomes", input_type=String(optional=True), prefix="--genomes", doc=InputDocumentation(doc="[<genomes.fasta> ...], -g <genomes.fasta> [<genomes.fasta> ...]\nInput genome(s) from where the reads will originate")), ToolInput(tag="in_draft", input_type=String(optional=True), prefix="--draft", doc=InputDocumentation(doc="[<draft.fasta> ...]\nInput draft genome(s) from where the reads will\noriginate")), ToolInput(tag="in_n_genomes", input_type=Int(optional=True), prefix="--n_genomes", doc=InputDocumentation(doc="How many genomes will be used for the simulation. is\nset with --genomes/-g or/and --draft to take random\ngenomes from the input multifasta")), ToolInput(tag="in_ncbi", input_type=Boolean(optional=True), prefix="--ncbi", doc=InputDocumentation(doc="[<str> [<str> ...]], -k [<str> [<str> ...]]\nDownload input genomes from NCBI. Requires\n--n_genomes/-u option. Can be bacteria, viruses,\narchaea or a combination of the three (space-\nseparated)")), ToolInput(tag="in_n_genomes_ncbi", input_type=Boolean(optional=True), prefix="--n_genomes_ncbi", doc=InputDocumentation(doc="[<int> [<int> ...]], -U [<int> [<int> ...]]\nHow many genomes will be downloaded from NCBI.\nRequired if --ncbi/-k is set. If more than one kingdom\nis set with --ncbi, multiple values are necessary\n(space-separated).")), ToolInput(tag="in_abundance", input_type=String(optional=True), prefix="--abundance", doc=InputDocumentation(doc="abundance distribution (default: lognormal). Can be\nuniform, halfnormal, exponential, lognormal or zero-\ninflated-lognormal.")), ToolInput(tag="in_abundance_file", input_type=File(optional=True), prefix="--abundance_file", doc=InputDocumentation(doc="abundance file for coverage calculations (default:\nNone).")), ToolInput(tag="in_coverage", input_type=File(optional=True), prefix="--coverage", doc=InputDocumentation(doc="file containing coverage information (default: None).")), ToolInput(tag="in_n_reads", input_type=Int(optional=True), prefix="--n_reads", doc=InputDocumentation(doc="Number of reads to generate (default: 1000000). Allows\nsuffixes k, K, m, M, g and G (ex 0.5M for 500000).")), ToolInput(tag="in_mode", input_type=String(optional=True), prefix="--mode", doc=InputDocumentation(doc="Error model. If not specified, using kernel density\nestimation (default: kde). Can be kde, basic or\nperfect")), ToolInput(tag="in_model", input_type=File(optional=True), prefix="--model", doc=InputDocumentation(doc="Error model file. (default: None). Use HiSeq, NovaSeq\nor MiSeq for a pre-computed error model provided with\nthe software, or a file generated with iss model. If\nyou do not wish to use a model, use --mode basic or\n--mode perfect. The name of the built-in models are\ncase insensitive.")), ToolInput(tag="in_gc_bias", input_type=Boolean(optional=True), prefix="--gc_bias", doc=InputDocumentation(doc="If set, may fail to sequence reads with abnormal GC\ncontent. (default: False)")), ToolInput(tag="in_compress", input_type=Boolean(optional=True), prefix="--compress", doc=InputDocumentation(doc="Compress the output in gzip format (default: False).")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Output file prefix (Required)\n"))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output file prefix (Required)\n"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Iss_Generate_V0_1_0().translate("wdl", allow_empty_container=True)

