from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File

Asntool_V0_1_0 = CommandToolBuilder(tool="asntool", base_command=["asntool"], inputs=[ToolInput(tag="in_asn_module_file", input_type=Boolean(optional=True), prefix="-m", doc=InputDocumentation(doc="ASN.1 Module File [File In]")), ToolInput(tag="in_asn_module_file_optional", input_type=File(optional=True), prefix="-f", doc=InputDocumentation(doc="ASN.1 Module File [File Out]  Optional")), ToolInput(tag="in_xml_dtd_file", input_type=File(optional=True), prefix="-X", doc=InputDocumentation(doc="XML DTD File\n('m' to print each module to a separate file) [File Out]  Optional")), ToolInput(tag="in_asn_tree_dump", input_type=File(optional=True), prefix="-T", doc=InputDocumentation(doc="ASN.1 Tree Dump File [File Out]  Optional")), ToolInput(tag="in_var_4", input_type=Boolean(optional=True), prefix="-v", doc=InputDocumentation(doc="Print Value File [File In]  Optional")), ToolInput(tag="in_var_5", input_type=File(optional=True), prefix="-p", doc=InputDocumentation(doc="Print Value File [File Out]  Optional")), ToolInput(tag="in_xml_data_file", input_type=File(optional=True), prefix="-x", doc=InputDocumentation(doc="XML Data File [File Out]  Optional")), ToolInput(tag="in_binary_value_file_type", input_type=Boolean(optional=True), prefix="-d", doc=InputDocumentation(doc="Binary Value File (type required) [File In]  Optional")), ToolInput(tag="in_binary_value_type", input_type=Boolean(optional=True), prefix="-t", doc=InputDocumentation(doc="Binary Value Type [String]  Optional")), ToolInput(tag="in_binary_value_file_optional", input_type=File(optional=True), prefix="-e", doc=InputDocumentation(doc="Binary Value File [File Out]  Optional")), ToolInput(tag="in_header_file_optional", input_type=File(optional=True), prefix="-o", doc=InputDocumentation(doc="Header File [File Out]  Optional")), ToolInput(tag="in_loader_file_optional", input_type=File(optional=True), prefix="-l", doc=InputDocumentation(doc="Loader File [File Out]  Optional")), ToolInput(tag="in_buffer_size_optionaldefault", input_type=Boolean(optional=True), prefix="-b", doc=InputDocumentation(doc="Buffer Size [Integer]  Optional\ndefault = 1024\nrange from 512 to 10000")), ToolInput(tag="in_word_length_maximum", input_type=Boolean(optional=True), prefix="-w", doc=InputDocumentation(doc="Word length maximum for #defines [Integer]  Optional\ndefault = 31\nrange from 31 to 128")), ToolInput(tag="in_fix_nonprinting_characters", input_type=Boolean(optional=True), prefix="-F", doc=InputDocumentation(doc="Fix Non-Printing Characters\n0 - Replace with #, post ERROR\n1 - Replace with # silently\n2 - Pass through silently\n3 - Replace with #, post FATAL")), ToolInput(tag="in_utf_input_conversion", input_type=Boolean(optional=True), prefix="-N", doc=InputDocumentation(doc="UTF8 Input Conversion\n0 - Convert silently\n1 - Convert, post WARNING first time\n2 - Convert, post WARNING each time\n3 - Do not convert")), ToolInput(tag="in_utf_output_conversion", input_type=Boolean(optional=True), prefix="-U", doc=InputDocumentation(doc="UTF8 Output Conversion\n0 - Convert silently\n1 - Convert, post WARNING first time\n2 - Convert, post WARNING each time\n3 - Do not convert")), ToolInput(tag="in_generate_object_loader", input_type=Boolean(optional=True), prefix="-G", doc=InputDocumentation(doc="Generate object loader .c and .h files,\nif used, see below parameters: [T/F]  Optional\ndefault = F")), ToolInput(tag="in_asn_module_filenames", input_type=Boolean(optional=True), prefix="-M", doc=InputDocumentation(doc="ASN.1 module filenames, comma separated used for external refs from the 'm',\nbut no other action taken [File In]  Optional")), ToolInput(tag="in_base_filename_optional", input_type=File(optional=True), prefix="-B", doc=InputDocumentation(doc="Base for filename, without extensions, for generated objects and code [File Out]  Optional")), ToolInput(tag="in_code_generation_debugging", input_type=Boolean(optional=True), prefix="-D", doc=InputDocumentation(doc="During code generation, debugging level\n0 - No debugging\n1 - Shallow debugging\n2 - Deep")), ToolInput(tag="in_debugging_filename_optionaldefault", input_type=File(optional=True), prefix="-S", doc=InputDocumentation(doc="Debugging filename [File Out]  Optional\ndefault = stderr")), ToolInput(tag="in_generated_c_add", input_type=Boolean(optional=True), prefix="-I", doc=InputDocumentation(doc="In generated .c, add #include to this filename [String]  Optional")), ToolInput(tag="in_bit_twiddle_optionaldefault", input_type=Boolean(optional=True), prefix="-Z", doc=InputDocumentation(doc="Bit twiddle for optional zero value base slots [T/F]  Optional\ndefault = F")), ToolInput(tag="in_generated_forces_name", input_type=Boolean(optional=True), prefix="-K", doc=InputDocumentation(doc="In generated .c, forces name of #included asn header [String]  Optional")), ToolInput(tag="in_register_type_optional", input_type=Boolean(optional=True), prefix="-J", doc=InputDocumentation(doc="Register type with object manager [String]  Optional")), ToolInput(tag="in_label_registered_optional", input_type=Boolean(optional=True), prefix="-L", doc=InputDocumentation(doc="Label for registered type [String]  Optional")), ToolInput(tag="in_xml_module_prefix", input_type=Boolean(optional=True), prefix="-P", doc=InputDocumentation(doc="XML module prefix for DOCTYPE [String]  Optional\ndefault =")), ToolInput(tag="in_force_choice_use", input_type=Boolean(optional=True), prefix="-V", doc=InputDocumentation(doc="Force choice to use structure instead of ValNodePtr [T/F]  Optional\ndefault = F")), ToolInput(tag="in_use_quoted_form", input_type=Boolean(optional=True), prefix="-Q", doc=InputDocumentation(doc="Use quoted syntax form for generated include files [T/F]  Optional\ndefault = F\n"))], outputs=[ToolOutput(tag="out_asn_module_file_optional", output_type=File(optional=True), selector=InputSelector(input_to_select="in_asn_module_file_optional", type_hint=File()), doc=OutputDocumentation(doc="ASN.1 Module File [File Out]  Optional")), ToolOutput(tag="out_xml_dtd_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_xml_dtd_file", type_hint=File()), doc=OutputDocumentation(doc="XML DTD File\n('m' to print each module to a separate file) [File Out]  Optional")), ToolOutput(tag="out_asn_tree_dump", output_type=File(optional=True), selector=InputSelector(input_to_select="in_asn_tree_dump", type_hint=File()), doc=OutputDocumentation(doc="ASN.1 Tree Dump File [File Out]  Optional")), ToolOutput(tag="out_var_5", output_type=File(optional=True), selector=InputSelector(input_to_select="in_var_5", type_hint=File()), doc=OutputDocumentation(doc="Print Value File [File Out]  Optional")), ToolOutput(tag="out_xml_data_file", output_type=File(optional=True), selector=InputSelector(input_to_select="in_xml_data_file", type_hint=File()), doc=OutputDocumentation(doc="XML Data File [File Out]  Optional")), ToolOutput(tag="out_binary_value_file_optional", output_type=File(optional=True), selector=InputSelector(input_to_select="in_binary_value_file_optional", type_hint=File()), doc=OutputDocumentation(doc="Binary Value File [File Out]  Optional")), ToolOutput(tag="out_header_file_optional", output_type=File(optional=True), selector=InputSelector(input_to_select="in_header_file_optional", type_hint=File()), doc=OutputDocumentation(doc="Header File [File Out]  Optional")), ToolOutput(tag="out_loader_file_optional", output_type=File(optional=True), selector=InputSelector(input_to_select="in_loader_file_optional", type_hint=File()), doc=OutputDocumentation(doc="Loader File [File Out]  Optional")), ToolOutput(tag="out_base_filename_optional", output_type=File(optional=True), selector=InputSelector(input_to_select="in_base_filename_optional", type_hint=File()), doc=OutputDocumentation(doc="Base for filename, without extensions, for generated objects and code [File Out]  Optional")), ToolOutput(tag="out_debugging_filename_optionaldefault", output_type=File(optional=True), selector=InputSelector(input_to_select="in_debugging_filename_optionaldefault", type_hint=File()), doc=OutputDocumentation(doc="Debugging filename [File Out]  Optional\ndefault = stderr"))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Asntool_V0_1_0().translate("wdl", allow_empty_container=True)

