from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Rnaconvert_Py_V0_1_0 = CommandToolBuilder(tool="rnaConvert.py", base_command=["rnaConvert.py"], inputs=[ToolInput(tag="in_keep_length_one_stems", input_type=Boolean(optional=True), prefix="--keep-length-one-stems", doc=InputDocumentation(doc="For all input formats except forgi bg/cg files, this\ncontrolls whether stems of length one are dissolved to\nunpaired regions (default) or kept (if this option is\npresent). In the case of input in forgi-format, the\nRNA from the file is not modified.")), ToolInput(tag="in_target_type", input_type=String(optional=True), prefix="--target-type", doc=InputDocumentation(doc="The target file-type to convert into.")), ToolInput(tag="in_to_file", input_type=Boolean(optional=True), prefix="--to-file", doc=InputDocumentation(doc="Store the converted RNA in files instead of printing\nthem to stdout. The file-name will be the RNA's name\n(if present), otherwise 'rna001' etc.")), ToolInput(tag="in_filename", input_type=File(optional=True), prefix="--filename", doc=InputDocumentation(doc="If this is present, --to-file will automatically be\ntrue.A target filename (or path) without extention. If\nit is a filename, use the given filename instead of\nthe RNA's name. If more than one input-RNA is present,\nappends automatically a increasing number.If it is a\ndirectory, create files in this directory.")), ToolInput(tag="in_force", input_type=Boolean(optional=True), prefix="--force", doc=InputDocumentation(doc="Overwrite files, if they already exist. Note: In case\nof race conditions, files could be overwritten even if\nthis flag is not provided.")), ToolInput(tag="in_pseudo_knots", input_type=Boolean(optional=True), prefix="--pseudoknots", doc=InputDocumentation(doc="Allow pseudoknots when extracting the structure from\nPDB files.")), ToolInput(tag="in_chains", input_type=String(optional=True), prefix="--chains", doc=InputDocumentation(doc="When reading pdb-files: Only extract the given\nchain(s). Comma-seperated")), ToolInput(tag="in_pdb_secondary_structure", input_type=String(optional=True), prefix="--pdb-secondary-structure", doc=InputDocumentation(doc="When reading a single chain from a pdb-files: Enforce\nthe secondary structure given as dotbracket string.\n(This only works, if --chain is given!)")), ToolInput(tag="in_pdb_annotation_tool", input_type=File(optional=True), prefix="--pdb-annotation-tool", doc=InputDocumentation(doc="What program to use for detecting basepairs in PDB/\nMMCIF structures. This commandline option overrides\nthe value in the config file (if present).If this is\nnot present and no config-file is given, we try to\ndetect the installed programs.")), ToolInput(tag="in_pdb_allow_www_query", input_type=Boolean(optional=True), prefix="--pdb-allow-www-query", doc=InputDocumentation(doc="Usually, if modified residues/ ligand with an unknown\n3-letter code are encountered in PDB files, they are\nremoved from the chain and a log message of severity\nINFO is issued. With this option, we first try to\nquery the PDBeChem database for the 3-letter code, to\nsee whether or not it is a modified residue that can\nbe converted to its standard parent and should be part\nof the chain.")), ToolInput(tag="in_verbose", input_type=Boolean(optional=True), prefix="--verbose", doc=InputDocumentation(doc="Show verbose output (Output logged at level\nlogging.INFO)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="[DEBUG]       A comma-seperated list of logger names for which debug\noutput will be activated.WARNING: If you misspell the\nlogger name, this argument will be ignored")), ToolInput(tag="in_commaseperated_list_logger", input_type=Boolean(optional=True), prefix="-q", doc=InputDocumentation(doc="[QUIET], --quiet [QUIET]\nA comma-seperated list of logger names for which only\nmessages logged at the level 'CRITICAL' will be\nshown.Use this without arguments if everything should\nbe quiet.\n")), ToolInput(tag="in_rna", input_type=String(), position=0, doc=InputDocumentation(doc="One or more files containing one or more RNAs each.\nSupported Filetypes are: pdb files, forgi cg files,\nforgi bg files, fasta files,\ndotbracketfilesAlternatively you can supply a\ndotbracket-string (containing only the characters\n'.()[]{}&') from the commandline."))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Rnaconvert_Py_V0_1_0().translate("wdl", allow_empty_container=True)

