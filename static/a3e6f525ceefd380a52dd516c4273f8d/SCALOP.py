from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import String, Directory, Int, Boolean

Scalop_V0_1_0 = CommandToolBuilder(tool="SCALOP", base_command=["SCALOP"], inputs=[ToolInput(tag="in_numbering_scheme", input_type=String(optional=True), prefix="--numbering_scheme", doc=InputDocumentation(doc="Antibody chain numbering scheme")), ToolInput(tag="in_cdr_definition", input_type=String(optional=True), prefix="--cdr_definition", doc=InputDocumentation(doc="CDR region definition")), ToolInput(tag="in_assign", input_type=String(optional=True), prefix="--assign", doc=InputDocumentation(doc="Input sequence(s)")), ToolInput(tag="in_output", input_type=Directory(optional=True), prefix="--output", doc=InputDocumentation(doc="Output directory (default = console output)")), ToolInput(tag="in_output_ext", input_type=String(optional=True), prefix="--output_ext", doc=InputDocumentation(doc="Output format")), ToolInput(tag="in_db_version", input_type=Int(optional=True), prefix="--db_version", doc=InputDocumentation(doc="Database version in YYYY-MM (e.g. '2017-07') or YYYY\nfor data included by the end of the year")), ToolInput(tag="in_structure", input_type=String(optional=True), prefix="--structure", doc=InputDocumentation(doc="Input framework structure")), ToolInput(tag="in_loop_db", input_type=Directory(optional=True), prefix="--loopdb", doc=InputDocumentation(doc="Loop structures directory")), ToolInput(tag="in_hc", input_type=String(optional=True), prefix="--hc", doc=InputDocumentation(doc="Heavy Chain ID")), ToolInput(tag="in_lc", input_type=String(optional=True), prefix="--lc", doc=InputDocumentation(doc="Light Chain ID")), ToolInput(tag="in_update", input_type=Boolean(optional=True), prefix="--update", doc=InputDocumentation(doc="Perform an update to a copy of the database that you\nhave write permissions for")), ToolInput(tag="in_db_dir", input_type=Directory(optional=True), prefix="--dbdir", doc=InputDocumentation(doc="[for updater] Loop database directory")), ToolInput(tag="in_struc_cut_off", input_type=String(optional=True), prefix="--struc_cutoff", doc=InputDocumentation(doc="[for updater] Resolution of structures to be clustered")), ToolInput(tag="in_b_factor_cut_off", input_type=String(optional=True), prefix="--bfactor_cutoff", doc=InputDocumentation(doc="[for updater] Maximum B factor of backbone atoms in\nthe loop")), ToolInput(tag="in_armadillo_include", input_type=String(optional=True), prefix="--armadillo_include", doc=InputDocumentation(doc="[for updater] Resolution of structures to be clustered")), ToolInput(tag="in_sab_dab_script", input_type=String(optional=True), prefix="--sabdabscript", doc=InputDocumentation(doc="[for updater] Location of SAbDab bin script (e.g.\n~/bin/)")), ToolInput(tag="in_sabdabpydir", input_type=String(optional=True), prefix="--sabdabpydir", doc=InputDocumentation(doc="[for updater] Location of ABDB python module (e.g.\n~/bin/Python/ABDB)")), ToolInput(tag="in_s_abd_abu", input_type=String(optional=True), prefix="--sabdabu", doc=InputDocumentation(doc="[for updater] Whether or not to update SAbDab\n([yes]/no)")), ToolInput(tag="in_scalo_p", input_type=String(), position=0, doc=InputDocumentation(doc="Sequence-based antibody Canonical LOoP structure annotation")), ToolInput(tag="in_wing_ki_wong", input_type=Int(), position=0, doc=InputDocumentation(doc="Wing Ki Wong"))], outputs=[ToolOutput(tag="out_output", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Output directory (default = console output)"))], container="quay.io/biocontainers/scalop:2021.01.27--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Scalop_V0_1_0().translate("wdl")

