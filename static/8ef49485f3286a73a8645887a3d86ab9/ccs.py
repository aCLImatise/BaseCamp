from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, String, File

Ccs_V0_1_0 = CommandToolBuilder(tool="ccs", base_command=["ccs"], inputs=[ToolInput(tag="in_min_passes", input_type=Boolean(optional=True), prefix="--min-passes", doc=InputDocumentation(doc="INT    Minimum number of full-length subreads\nrequired to generate CCS for a ZMW. [3]")), ToolInput(tag="in_min_snr", input_type=Boolean(optional=True), prefix="--min-snr", doc=InputDocumentation(doc="FLOAT  Minimum SNR of subreads to use for\ngenerating CCS [2.5]")), ToolInput(tag="in_min_length", input_type=Boolean(optional=True), prefix="--min-length", doc=InputDocumentation(doc="INT    Minimum draft length before polishing.\n[10]")), ToolInput(tag="in_max_length", input_type=Boolean(optional=True), prefix="--max-length", doc=InputDocumentation(doc="INT    Maximum draft length before polishing.\n[50000]")), ToolInput(tag="in_chunk", input_type=Boolean(optional=True), prefix="--chunk", doc=InputDocumentation(doc="STR    Operate on a single chunk. Format i/N,\nwhere i in [1,N]. Examples: 3/24 or 9/9")), ToolInput(tag="in_max_chunks", input_type=Boolean(optional=True), prefix="--max-chunks", doc=InputDocumentation(doc="Determine maximum number of chunks.")), ToolInput(tag="in_model_path", input_type=Boolean(optional=True), prefix="--model-path", doc=InputDocumentation(doc="STR    Path to a chemistry model file or\ndirectory containing model files.")), ToolInput(tag="in_model_spec", input_type=Boolean(optional=True), prefix="--model-spec", doc=InputDocumentation(doc="STR    Name of chemistry or model to use,\noverriding default selection.")), ToolInput(tag="in_by_strand", input_type=Boolean(optional=True), prefix="--by-strand", doc=InputDocumentation(doc="Generate a consensus for each strand.")), ToolInput(tag="in_skip_polish", input_type=Boolean(optional=True), prefix="--skip-polish", doc=InputDocumentation(doc="Only output the initial draft template\n(faster, less accurate).")), ToolInput(tag="in_min_rq", input_type=Boolean(optional=True), prefix="--min-rq", doc=InputDocumentation(doc="FLOAT  Minimum predicted accuracy in [0, 1].\n[0.99]")), ToolInput(tag="in_report_file", input_type=Boolean(optional=True), prefix="--report-file", doc=InputDocumentation(doc="FILE   Where to write the results report.\n[ccs_report.txt]")), ToolInput(tag="in_num_threads", input_type=Boolean(optional=True), prefix="--num-threads", doc=InputDocumentation(doc="INT    Number of threads to use, 0 means\nautodetection. [0]")), ToolInput(tag="in_log_level", input_type=Boolean(optional=True), prefix="--log-level", doc=InputDocumentation(doc="STR    Set log level. Valid choices: (TRACE,\nDEBUG, INFO, WARN, FATAL). [WARN]")), ToolInput(tag="in_log_file", input_type=Boolean(optional=True), prefix="--log-file", doc=InputDocumentation(doc="FILE   Log to a file, instead of stderr.")), ToolInput(tag="in_in_dot_sub_reads_dot_bam_vertical_line_xml", input_type=String(), position=0, doc=InputDocumentation(doc="")), ToolInput(tag="in_file", input_type=File(), position=1, doc=InputDocumentation(doc="")), ToolInput(tag="in_sub_reads", input_type=String(), position=2, doc=InputDocumentation(doc=""))], outputs=[], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Ccs_V0_1_0().translate("wdl", allow_empty_container=True)

