from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Boolean, String

Pileuppy_V0_1_0 = CommandToolBuilder(tool="pileuppy", base_command=["pileuppy"], inputs=[ToolInput(tag="in_fast_a_ref", input_type=File(optional=True), prefix="--fasta-ref", doc=InputDocumentation(doc="Optional: Input reference indexed FASTA file.")), ToolInput(tag="in_output", input_type=File(optional=True), prefix="--output", doc=InputDocumentation(doc="Optional: Output file [stdout]. Disables colors.")), ToolInput(tag="in_region", input_type=Int(optional=True), prefix="--region", doc=InputDocumentation(doc="Required: pileup region in one of the following formats:\nchrom:pos - pileup of a single position,\nchrom:start-end - closed interval, 1-based positions,\nchrom:pos^size - same as chrom:[pos - size]-[pos + size].")), ToolInput(tag="in_display", input_type=Int(optional=True), prefix="--display", doc=InputDocumentation(doc="Display additional INT positions around the region.\nOnly displays reads that cover <region>.")), ToolInput(tag="in_size", input_type=Int(optional=True), prefix="--size", doc=InputDocumentation(doc="|none       Split region longer than INT [150].")), ToolInput(tag="in_min_mapq", input_type=Int(optional=True), prefix="--min-mapq", doc=InputDocumentation(doc="Skip alignments with mapQ less than INT [0].")), ToolInput(tag="in_min_bq", input_type=Int(optional=True), prefix="--min-bq", doc=InputDocumentation(doc="Print ? instead of base pairs with quality less than INT [0].")), ToolInput(tag="in_req_flags", input_type=Int(optional=True), prefix="--req-flags", doc=InputDocumentation(doc="Required flags: skip reads with mask bits unset [0].")), ToolInput(tag="in_filt_flags", input_type=Int(optional=True), prefix="--filt-flags", doc=InputDocumentation(doc="Filter flags: skip reads with mask bits set [1796].")), ToolInput(tag="in_only_use_reads", input_type=Boolean(optional=True), prefix="-s", doc=InputDocumentation(doc="[STR [STR ...]], --samples [STR [STR ...]]\nOnly use reads with matching samples. You can use multiple regex patterns\nor exact sample names. Pattern must match the sample name from start to end.")), ToolInput(tag="in_join_samples", input_type=Boolean(optional=True), prefix="--join-samples", doc=InputDocumentation(doc="Do not split single BAM/CRAM file into multiple columns with different samples.")), ToolInput(tag="in_skip_bq", input_type=Boolean(optional=True), prefix="--skip-bq", doc=InputDocumentation(doc="Do not print base qualities.")), ToolInput(tag="in_show_names", input_type=Boolean(optional=True), prefix="--show-names", doc=InputDocumentation(doc="Print read names in the header.")), ToolInput(tag="in_header", input_type=String(optional=True), prefix="--header", doc=InputDocumentation(doc="|comment|plain\nHow to write headers. If comment, every header line will start with '#'.")), ToolInput(tag="in_skip_legend", input_type=Boolean(optional=True), prefix="--skip-legend", doc=InputDocumentation(doc="Do not write legend.")), ToolInput(tag="in_skip_empty", input_type=Boolean(optional=True), prefix="--skip-empty", doc=InputDocumentation(doc="Skip lines with zero coverage")), ToolInput(tag="in_skip_chrom", input_type=Boolean(optional=True), prefix="--skip-chrom", doc=InputDocumentation(doc="Do not show chromosome name")), ToolInput(tag="in_ansiwhiteblack__scheme", input_type=File(optional=True), prefix="-S", doc=InputDocumentation(doc="|ansi|white|black, --scheme none|ansi|white|black\nPossible color schemes:\nnone - no colors (default if -o FILE),\nansi - 16 colors,\nwhite - 256 colors with white background,\nblack - 256 colors with black background (default unless -o FILE).")), ToolInput(tag="in_no_logo", input_type=Boolean(optional=True), prefix="--no-logo", doc=InputDocumentation(doc="Do not use logo colors for nucleotides.")), ToolInput(tag="in_no_columns", input_type=Boolean(optional=True), prefix="--no-columns", doc=InputDocumentation(doc="Do not highlight columns with a different color.")), ToolInput(tag="in_file", input_type=File(), position=0, doc=InputDocumentation(doc="Required: Input indexed BAM/CRAM files. Allows format name=path,\nin that case name will be displayed in pileup instead of filename."))], outputs=[ToolOutput(tag="out_output", output_type=File(optional=True), selector=InputSelector(input_to_select="in_output", type_hint=File()), doc=OutputDocumentation(doc="Optional: Output file [stdout]. Disables colors."))], container="quay.io/biocontainers/pileuppy:1.1.1--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Pileuppy_V0_1_0().translate("wdl")

