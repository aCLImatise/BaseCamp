from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import Boolean, File, Directory, String

Uropa_V0_1_0 = CommandToolBuilder(tool="uropa", base_command=["uropa"], inputs=[ToolInput(tag="in_bed", input_type=Boolean(optional=True), prefix="--bed", doc=InputDocumentation(doc="Filename of .bed-file to annotate")), ToolInput(tag="in_gtf", input_type=Boolean(optional=True), prefix="--gtf", doc=InputDocumentation(doc="Filename of .gtf-file with features")), ToolInput(tag="in_feature", input_type=Boolean(optional=True), prefix="--feature", doc=InputDocumentation(doc="[ [ ...]]              Feature for annotation")), ToolInput(tag="in_feature_anchor", input_type=Boolean(optional=True), prefix="--feature-anchor", doc=InputDocumentation(doc="[ [ ...]]       Specific feature anchor to annotate to")), ToolInput(tag="in_distance", input_type=Boolean(optional=True), prefix="--distance", doc=InputDocumentation(doc="[ [ ...]]             Maximum permitted distance from feature (1 or 2\narguments)")), ToolInput(tag="in_strand", input_type=Boolean(optional=True), prefix="--strand", doc=InputDocumentation(doc="Desired strand of annotated feature relative to peak")), ToolInput(tag="in_relative_location", input_type=Boolean(optional=True), prefix="--relative-location", doc=InputDocumentation(doc="[ [ ...]]    Peak location relative to feature location")), ToolInput(tag="in_internals", input_type=Boolean(optional=True), prefix="--internals", doc=InputDocumentation(doc="Set minimum overlap fraction for internal feature\nannotations. 0 equates to internals=False and 1 equates\nto internals=True. Default is False.")), ToolInput(tag="in_filter_attribute", input_type=Boolean(optional=True), prefix="--filter-attribute", doc=InputDocumentation(doc="Filter on 9th column of GTF")), ToolInput(tag="in_attribute_values", input_type=Boolean(optional=True), prefix="--attribute-values", doc=InputDocumentation(doc="[ [ ...]]     Value(s) of attribute corresponding to --filter-")), ToolInput(tag="in_input", input_type=File(optional=True), prefix="--input", doc=InputDocumentation(doc="Filename of configuration file (keys in this file\noverwrite command-line arguments about query)")), ToolInput(tag="in_prefix", input_type=Boolean(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix for result file names (defaults to basename of\n.bed-file)")), ToolInput(tag="in_outdir", input_type=Directory(optional=True), prefix="--outdir", doc=InputDocumentation(doc="Output directory for output files (default: current\ndir)")), ToolInput(tag="in_output_by_query", input_type=Boolean(optional=True), prefix="--output-by-query", doc=InputDocumentation(doc="Additionally create output files for each named query")), ToolInput(tag="in_log", input_type=File(optional=True), prefix="--log", doc=InputDocumentation(doc="Log file name for messages and warnings (default: log\nis written to stdout)")), ToolInput(tag="in_debug", input_type=Boolean(optional=True), prefix="--debug", doc=InputDocumentation(doc="Print verbose messages (for debugging)")), ToolInput(tag="in_chunk", input_type=Boolean(optional=True), prefix="--chunk", doc=InputDocumentation(doc="Number of lines per chunk for multiprocessing (default:\n1000)")), ToolInput(tag="in_attribute", input_type=String(), position=0, doc=InputDocumentation(doc="--show-attributes [ [ ...]]      A list of attributes to show in output (default: all)")), ToolInput(tag="in_seperately", input_type=String(), position=0, doc=InputDocumentation(doc="-s, --summary                    Create additional visualisation of results in graphical")), ToolInput(tag="in_format", input_type=String(), position=1, doc=InputDocumentation(doc="-t n, --threads n                Multiprocessed run: n = number of threads to run"))], outputs=[ToolOutput(tag="out_outdir", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_outdir", type_hint=File()), doc=OutputDocumentation(doc="Output directory for output files (default: current\ndir)"))], container="quay.io/biocontainers/uropa:4.0.0--py_0", version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Uropa_V0_1_0().translate("wdl")

