from datetime import datetime
from typing import List, Optional, Dict, Any

from janis_core import *
from janis_core.types.common_data_types import File, Int, Directory, String

Svbenchmark_V0_1_0 = CommandToolBuilder(tool="SVbenchmark", base_command=["SVbenchmark"], inputs=[ToolInput(tag="in_ref", input_type=File(optional=True), prefix="--ref", doc=InputDocumentation(doc="The fasta file that was used as the reference for the two VCF files\nbeing compared.")), ToolInput(tag="in_test", input_type=File(optional=True), prefix="--test", doc=InputDocumentation(doc="The file of variants to be compared to the variants in the truth\nfile.")), ToolInput(tag="in_truth", input_type=File(optional=True), prefix="--truth", doc=InputDocumentation(doc="The file of variants to which the test variants will be compared.")), ToolInput(tag="in_max_dist", input_type=Int(optional=True), prefix="--maxdist", doc=InputDocumentation(doc="Maximum number of base pairs separating the POS values for two\nvariants to be compared. Variants farther than this distance apart\nwill be considered not to be matching.")), ToolInput(tag="in_minsize", input_type=Int(optional=True), prefix="--minsize", doc=InputDocumentation(doc="Minimum size of a variant to be included in a benchmarking\ncomparison. In calculations of recall/sensitivity, this minimum is\napplied to the size of the 'true' variant. In calculations of\nprecision, this minimum is applied to the size of the test variant.")), ToolInput(tag="in_prefix", input_type=Directory(optional=True), prefix="--prefix", doc=InputDocumentation(doc="Prefix to be used in the naming of all output files. A directory\nname can be included (e.g., 'myresults/sampleA') so long as the\ndirectory already exists.")), ToolInput(tag="in_include_bed", input_type=File(optional=True), prefix="--includebed", doc=InputDocumentation(doc="File of regions from which to include variants. Used to filter both\ntest and truth variants.")), ToolInput(tag="in_test_filter", input_type=String(optional=True), prefix="--testfilter", doc=InputDocumentation(doc="String specifying the value in the test VCF record's 'FILTER' field\nin order for a variant to be included in the comparison.")), ToolInput(tag="in_truth_filter", input_type=String(optional=True), prefix="--truthfilter", doc=InputDocumentation(doc="String specifying the value in the truth VCF record's 'FILTER' field\nin order for a variant to be included in the comparison.")), ToolInput(tag="in_norm_shift", input_type=String(optional=True), prefix="--normshift", doc=InputDocumentation(doc="Maximum allowable normalized shift between matching test and true\nvariants.")), ToolInput(tag="in_norm_size_diff", input_type=Int(optional=True), prefix="--normsizediff", doc=InputDocumentation(doc="Maximum allowable normalized size difference between matching test\nand true variants.")), ToolInput(tag="in_norm_size_dist", input_type=String(optional=True), prefix="--normsizedist", doc=InputDocumentation(doc="Maximum allowable normalized edit distance between matching test and\ntrue variants.")), ToolInput(tag="in_distance_file", input_type=File(optional=True), prefix="--distance_file", doc=InputDocumentation(doc=""))], outputs=[ToolOutput(tag="out_prefix", output_type=Directory(optional=True), selector=InputSelector(input_to_select="in_prefix", type_hint=File()), doc=OutputDocumentation(doc="Prefix to be used in the naming of all output files. A directory\nname can be included (e.g., 'myresults/sampleA') so long as the\ndirectory already exists."))], container=None, version="v0.1.0")


if __name__ == "__main__":
    # or "cwl"
    Svbenchmark_V0_1_0().translate("wdl", allow_empty_container=True)

