!Command
positional:
- !Positional
  description: ': Weight of the landmarks'
  position: 0
  name: Landmark_weight
  optional: false
- !Positional
  description: ': Landmark file'
  position: 1
  name: Landmark_file
  optional: false
- !Positional
  description: ': Initial source affine matrix transformation'
  position: 0
  name: Affine_file_1
  optional: false
- !Positional
  description: ': Initial target affine matrix transformation'
  position: 1
  name: Affine_file_2
  optional: false
named: []
command:
- bunwarpj
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "Purpose: Consistent and elastic registration of two images.\n \nUsage:\
  \ bUnwarpj_ \n  -help                       : SHOW THIS MESSAGE\n\n  -align    \
  \                  : ALIGN TWO IMAGES\n          target_image        : In any image\
  \ format\n          target_mask         : In any image format\n          source_image\
  \        : In any image format\n          source_mask         : In any image format\n\
  \          min_scale_def       : Scale of the coarsest deformation\n           \
  \                     0 is the coarsest possible\n          max_scale_def      \
  \ : Scale of the finest deformation\n          max_subsamp_fact    : Maximum subsampling\
  \ factor (power of 2: [0, 1, 2 ... 7]\n          Div_weight          : Weight of\
  \ the divergence term\n          Curl_weight         : Weight of the curl term\n\
  \          Image_weight        : Weight of the image term\n          Consistency_weight\
  \  : Weight of the deformation consistency\n          Output image 1      : Output\
  \ result 1 in TIFF\n          Output image 2      : Output result 2 in TIFF\n  \
  \        Optional parameters :\n             -landmarks        \n              \
  \     Landmark_weight  : Weight of the landmarks\n                   Landmark_file\
  \    : Landmark file\n             OR -affine        \n                   Affine_file_1\
  \    : Initial source affine matrix transformation\n                   Affine_file_2\
  \    : Initial target affine matrix transformation\n             OR -mono    : Unidirectional\
  \ registration (source to target)\n             OR -save_transformation    : Save\
  \ calculated transformation to file\n\n  -elastic_transform          : TRANSFORM\
  \ A SOURCE IMAGE WITH A GIVEN ELASTIC DEFORMATION\n          target_image      \
  \  : In any image format\n          source_image        : In any image format\n\
  \          transformation_file : As saved by bUnwarpJ in elastic format\n      \
  \    Output image        : Output result in TIFF\n\n  -raw_transform           \
  \   : TRANSFORM A SOURCE IMAGE WITH A GIVEN RAW DEFORMATION\n          target_image\
  \        : In any image format\n          source_image        : In any image format\n\
  \          transformation_file : As saved by bUnwarpJ in raw format\n          Output\
  \ image        : Output result in TIFF\n\n  -compare_elastic                   :\
  \ COMPARE 2 OPPOSITE ELASTIC DEFORMATIONS (BY WARPING INDEX)\n          target_image\
  \               : In any image format\n          source_image               : In\
  \ any image format\n          target_transformation_file : As saved by bUnwarpJ\n\
  \          source_transformation_file : As saved by bUnwarpJ\n\n  -compare_elastic_raw\
  \                : COMPARE AN ELASTIC DEFORMATION WITH A RAW DEFORMATION (BY WARPING\
  \ INDEX)\n          target_image                : In any image format\n        \
  \  source_image                : In any image format\n          Elastic Transformation\
  \ File : As saved by bUnwarpJ in elastic format\n          Raw Transformation File\
  \     : As saved by bUnwarpJ in raw format\n\n  -compare_raw                   \
  \    : COMPARE 2 ELASTIC DEFORMATIONS (BY WARPING INDEX)\n          target_image\
  \               : In any image format\n          source_image               : In\
  \ any image format\n          Raw Transformation File 1  : As saved by bUnwarpJ\
  \ in raw format\n          Raw Transformation File 2  : As saved by bUnwarpJ in\
  \ raw format\n\n  -convert_to_raw                           : CONVERT AN ELASTIC\
  \ DEFORMATION INTO RAW FORMAT\n          target_image                      : In\
  \ any image format\n          source_image                      : In any image format\n\
  \          Input Elastic Transformation File : As saved by bUnwarpJ in elastic format\n\
  \          Output Raw Transformation File    : As saved by bUnwarpJ in raw format\n\
  \n  -compose_elastic                          : COMPOSE TWO ELASTIC DEFORMATIONS\n\
  \          target_image                      : In any image format\n          source_image\
  \                      : In any image format\n          Elastic Transformation File\
  \ 1     : As saved by bUnwarpJ in elastic format\n          Elastic Transformation\
  \ File 2     : As saved by bUnwarpJ in elastic format\n          Output Raw Transformation\
  \ File    : As saved by bUnwarpJ in raw format\n\n  -compose_raw               \
  \               : COMPOSE TWO RAW DEFORMATIONS\n          target_image         \
  \             : In any image format\n          source_image                    \
  \  : In any image format\n          Raw Transformation File 1         : As saved\
  \ by bUnwarpJ in raw format\n          Raw Transformation File 2         : As saved\
  \ by bUnwarpJ in raw format\n          Output Raw Transformation File    : As saved\
  \ by bUnwarpJ in raw format\n\n  -compose_raw_elastic                      : COMPOSE\
  \ A RAW DEFORMATION WITH AN ELASTIC DEFORMATION\n          target_image        \
  \              : In any image format\n          source_image                   \
  \   : In any image format\n          Raw Transformation File           : As saved\
  \ by bUnwarpJ in raw format\n          Elastic Transformation File       : As saved\
  \ by bUnwarpJ in elastic format\n          Output Raw Transformation File    : As\
  \ saved by bUnwarpJ in raw format\n\n  -adapt_transform                        \
  \   : ADAPT AN ELASTIC DEFORMATION GIVEN A NEW IMAGE SIZE\n          target_image\
  \                       : In any image format\n          source_image          \
  \             : In any image format\n          Input Elastic Transformation File\
  \  : As saved by bUnwarpJ in elastic format\n          Output Elastic Transformation\
  \ File : As saved by bUnwarpJ in elastic format\n          Image Size Factor   \
  \               : Integer (2, 4, 8...)\n\nExamples:\nAlign two images without landmarks\
  \ and without mask (no subsampling)\n   bUnwarpj_ -align target.jpg NULL source.jpg\
  \ NULL 0 2 0 0.1 0.1 1 10 output_1.tif output_2.tif\nAlign two images with landmarks\
  \ and mask (no subsampling)\n   bUnwarpj_ -align target.tif target_mask.tif source.tif\
  \ source_mask.tif 0 2 0 0.1 0.1 1 10 output_1.tif output_2.tif -landmarks 1 landmarks.txt\n\
  Align two images with landmarks and initial affine transformations (no subsampling)\n\
  \   bUnwarpj_ -align target.tif target_mask.tif source.tif source_mask.tif 0 2 0\
  \ 0.1 0.1 1 10 output_1.tif output_2.tif -affine affine_mat1.txt affine_mat2.txt\n\
  Align two images using only landmarks (no subsampling)\n   bUnwarpj_ -align target.jpg\
  \ NULL source.jpg NULL 0 2 0 0.1 0.1 0 0 output.tif_1 output_2.tif -landmarks 1\
  \ landmarks.txt\nTransform the source image with a previously computed elastic transformation\n\
  \   bUnwarpj_ -elastic_transform target.jpg source.jpg elastic_transformation.txt\
  \ output.tif\nTransform the source image with a previously computed raw transformation\n\
  \   bUnwarpj_ -raw_transform target.jpg source.jpg raw_transformation.txt output.tif\n\
  Calculate the warping index of two opposite elastic transformations\n   bUnwarpj_\
  \ -compare_elastic target.jpg source.jpg source_transformation.txt target_transformation.txt\n\
  Calculate the warping index between an elastic transformation and a raw transformation\n\
  \   bUnwarpj_ -compare_elastic_raw target.jpg source.jpg elastic_transformation.txt\
  \ raw_transformation.txt\nCalculate the warping index between two raw transformations\n\
  \   bUnwarpj_ -compare_raw target.jpg source.jpg raw_transformation_1.txt raw_transformation_2.txt\n\
  Convert an elastic transformation into raw format\n   bUnwarpj_ -convert_to_raw\
  \ target.jpg source.jpg elastic_transformation.txt output_raw_transformation.txt\n\
  Compose two elastic transformations \n   bUnwarpj_ -compose_elastic target.jpg source.jpg\
  \ elastic_transformation_1.txt elastic_transformation_2.txt output_raw_transformation.txt\n\
  Compose two raw transformations \n   bUnwarpj_ -compose_raw target.jpg source.jpg\
  \ raw_transformation_1.txt raw_transformation_2.txt output_raw_transformation.txt\n\
  Compose a raw transformation with an elastic transformation \n   bUnwarpj_ -compose_raw_elastic\
  \ target.jpg source.jpg raw_transformation.txt elastic_transformation.txt output_raw_transformation.txt\n\
  Adapt an elastic transformation to a new image size \n   bUnwarpj_ -adapt_transform\
  \ target.jpg source.jpg input_transformation.txt output_transformation.txt 2\n"
generated_using:
- --help
