!Command
positional: []
named: []
command:
- ImageJ
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "Usage: ImageJ [<Java options>.. --] [<ImageJ options>..] [<files>..]\n\
  \nImageJ launcher 4.0.5 (build 1260)\nJava options are passed to the Java Runtime,\
  \ ImageJ\noptions to ImageJ (or Jython, JRuby, ...).\n\nIn addition, the following\
  \ options are supported by ImageJ:\nGeneral options:\n--help, -h\n\tshow this help\n\
  --dry-run\n\tshow the command line, but do not run anything\n--info\n\tinformational\
  \ output\n--debug\n\tverbose output\n--system\n\tdo not try to run bundled Java\n\
  --java-home <path>\n\tspecify JAVA_HOME explicitly\n--print-java-home\n\tprint ImageJ's\
  \ idea of JAVA_HOME\n--print-ij-dir\n\tprint where ImageJ thinks it is located\n\
  --headless\n\trun in text mode\n--ij-dir <path>\n\tset the ImageJ directory to <path>\
  \ (used to find\n\t jars/, plugins/ and macros/)\n--heap, --mem, --memory <amount>\n\
  \tset Java's heap size to <amount> (e.g. 512M)\n--class-path, --classpath, -classpath,\
  \ --cp, -cp <path>\n\tappend <path> to the class path\n--jar-path, --jarpath, -jarpath\
  \ <path>\n\tappend .jar files in <path> to the class path\n--pass-classpath\n\t\
  pass -classpath <classpath> to the main() method\n--full-classpath\n\tcall the main\
  \ class with the full ImageJ class path\n--dont-patch-ij1\n\tdo not try to runtime-patch\
  \ ImageJ1\n--ext <path>\n\tset Java's extension directory to <path>\n--default-gc\n\
  \tdo not use advanced garbage collector settings by default\n\t(-Xincgc -XX:PermSize=128m)\n\
  --gc-g1\n\tuse the G1 garbage collector\n--debug-gc\n\tshow debug info about the\
  \ garbage collector on stderr\n--debugger=<port>[,suspend]\n\tstart the JVM in a\
  \ mode so Eclipse's debugger can attach to it\n--no-splash\n\tsuppress showing a\
  \ splash screen upon startup\n\nOptions for ImageJ:\n--ij2\n\tstart ImageJ2 instead\
  \ of ImageJ1\n--ij1\n\tstart ImageJ1\n--allow-multiple\n\tdo not reuse existing\
  \ ImageJ instance\n--plugins <dir>\n\tuse <dir> to discover plugins\n--run <plugin>\
  \ [<arg>]\n\trun <plugin> in ImageJ, optionally with arguments\n--compile-and-run\
  \ <path-to-.java-file>\n\tcompile and run <plugin> in ImageJ\n--edit [<file>...]\n\
  \tedit the given file in the script editor\n\nOptions to run programs other than\
  \ ImageJ:\n--update\n\tstart the command-line version of the ImageJ updater\n--clojure\n\
  \tstart Clojure instead of ImageJ (this is the \n\tdefault when called with a file\
  \ ending in .clj)\n--beanshell\n--bsh\n\tstart BeanShell instead of ImageJ (this\
  \ is the\n\tdefault when called with a file ending in .bs or .bsh\n--javascript\n\
  --js\n\tstart Javascript (the Rhino engine) instead of\n\tImageJ (this is the default\
  \ when called with a\n\tfile ending in .js)\n--main-class <class name> (this is\
  \ the\n\tdefault when called with a file ending in .class)\n\tstart the given class\
  \ instead of ImageJ\n--retrotranslator\n\tuse Retrotranslator to support Java <\
  \ 1.6\n\n\n"
generated_using:
- --help
