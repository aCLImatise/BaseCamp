!Command
command:
- stag-filter.pl
positional:
- !Positional
  description: "SYNOPSIS\nstag-filter person -q name=fred file1.xml\nstag-filter person\
    \ 'sub {shift->get_name =~ /^A*/}' file1.xml\nstag-filter -p My::Foo -w sxpr record\
    \ 'sub{..}' file2"
  position: 0
  name: interest
  optional: false
- !Positional
  description: if the subroutine passes, the node will be passed to the writer for
  position: 0
  name: subroutine.
  optional: false
- !Positional
  description: NODE
  position: 1
  name: display
  optional: false
- !Positional
  description: "the file to be parser. If no parser option is supplied, this is\n\
    assumed to a be a stag compatible syntax (xml, sxpr or itext);\notherwise you\
    \ should parse in a parser name or a parser module that\nthrows stag events"
  position: 0
  name: FILE
  optional: false
named:
- !Flag
  description: "|parser FORMAT\nFORMAT is one of xml, sxpr or itext, or the name of\
    \ a perl module\nxml assumed as default"
  synonyms:
  - -p
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "|writer FORMAT\nFORMAT is one of xml, sxpr or itext, or the name of\
    \ a perl module"
  synonyms:
  - -w
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "|count\nprints the number of nodes that pass the test"
  synonyms:
  - -c
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "|f\na file containing a perl subroutine (in place of the SUB argument)"
  synonyms:
  - -filterfile
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "|query TAG1=VAL1 -q|query TAG2=VAL2 ... -q|query TAGN=VALN\nfilters\
    \ based on the field TAG\nother operators can be used too - eg <, <=, etc\nmultiple\
    \ q arguments can be passed in\nfor more complex operations, pass in your own\
    \ subroutine, see below"
  synonyms:
  - -q
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    stag-filter - filters a stag file (xml, itext, sxpr) for nodes\
  \ of\n    interest\n\nSYNOPSIS\n      stag-filter person -q name=fred file1.xml\n\
  \n      stag-filter person 'sub {shift->get_name =~ /^A*/}' file1.xml\n\n      stag-filter\
  \ -p My::Foo -w sxpr record 'sub{..}' file2\n\nUSAGE\n      stag-filter [-p|parser\
  \ PARSER] [-w|writer WRITER] NODE -q tag=val FILE\n\n      stag-filter [-p|parser\
  \ PARSER] [-w|writer WRITER] NODE SUB FILE\n\n      stag-filter [-p|parser PARSER]\
  \ [-w|writer WRITER]  NODE -f PERLFILE FILE\n\nDESCRIPTION\n    parsers an input\
  \ file using the specified parser (which may be a built\n    in stag parser, such\
  \ as xml) and filters the resulting stag tree\n    according to a user-supplied\
  \ subroutine, writing out only the\n    nodes/elements that pass the test.\n\n \
  \   the parser is event based, so it should be able to handle large files\n    (although\
  \ if the node you parse is large, it will take up more memory)\n\nARGUMENTS\n  \
  \  -p|parser FORMAT\n        FORMAT is one of xml, sxpr or itext, or the name of\
  \ a perl module\n\n        xml assumed as default\n\n    -w|writer FORMAT\n    \
  \    FORMAT is one of xml, sxpr or itext, or the name of a perl module\n\n    -c|count\n\
  \        prints the number of nodes that pass the test\n\n    -filterfile|f\n  \
  \      a file containing a perl subroutine (in place of the SUB argument)\n\n  \
  \  -q|query TAG1=VAL1 -q|query TAG2=VAL2 ... -q|query TAGN=VALN\n        filters\
  \ based on the field TAG\n\n        other operators can be used too - eg <, <=,\
  \ etc\n\n        multiple q arguments can be passed in\n\n        for more complex\
  \ operations, pass in your own subroutine, see below\n\n    SUB a perl subroutine.\
  \ this subroutine is evaluated evry time NODE is\n        encountered - the stag\
  \ object for NODE is passed into the\n        subroutine.\n\n        if the subroutine\
  \ passes, the node will be passed to the writer for\n        display\n\n    NODE\n\
  \        the name of the node/element we are filtering on\n\n    FILE\n        the\
  \ file to be parser. If no parser option is supplied, this is\n        assumed to\
  \ a be a stag compatible syntax (xml, sxpr or itext);\n        otherwise you should\
  \ parse in a parser name or a parser module that\n        throws stag events\n\n\
  SEE ALSO\n    Data::Stag\n\n"
generated_using:
- --help
