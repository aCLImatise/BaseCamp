!Command
command:
- stag-diff.pl
positional:
- !Positional
  description: "If a mismatch is reported, a report is generated displaying the subpart\n\
    of the tree that could not be matched. This will look like this:\nREASON: no_matching_node:\
    \ annotation no_matching_node: feature_set\nno_matching_node: feature_span no_matching_node:\
    \ evidence\nno_matching_node: evidence-id data_mismatch(:15077290 ne :15077291):\n\
    evidence-id AND evidence-id\nDue to the nature of tree matching, it can be difficult\
    \ to specify\nexactly how trees do not match. To investigate this, you may need\
    \ to use\nthe -r and -v options. For the above output, I would recommend using\n\
    stag-diff -r feature_span -v"
  position: 0
  name: OUTPUT
  optional: false
- !Positional
  description: Both trees are recursively traversed... see the actual code for how
    this
  position: 1
  name: ALGORITHM
  optional: false
- !Positional
  description: "The order of elements is not important; eg\n<foo>\n<bar>\n<baz>1</baz>\n\
    </bar>\n<bar>\n<baz>2</baz>\n</bar>\n</foo>"
  position: 2
  name: works
  optional: false
- !Positional
  description: "<foo>\n<bar>\n<baz>2</baz>\n</bar>\n<bar>\n<baz>1</baz>\n</bar>\n\
    </foo>"
  position: 3
  name: matches
  optional: false
- !Positional
  description: Chris Mungall cjm at fruitfly dot org
  position: 0
  name: AUTHOR
  optional: false
named:
- !Flag
  description: "|i ELEMENT\nthese nodes are ignored for the purposes of comparison.\
    \ Note that\nattributes are treated as elements, prefixed by the containing\n\
    element id. For example, if you have\n<foo ID=\"wibble\">\nAnd you wish to ignore\
    \ the ID attribute, then you would use the\nswitch\n-ignore foo-ID\nYou can specify\
    \ multiple elements to ignore like this\n-i foo -i bar -i baz\nYou can also specify\
    \ paths\n-i foo/bar/bar-id"
  synonyms:
  - -ignore
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "|p FORMAT\nwhich parser to use. The default is XML. This can also\
    \ be\nautodetected by the file suffix. Other alternatives are sxpr and\nitext.\
    \ See Data::Stag for details."
  synonyms:
  - -parser
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "|r ELEMENT\nreport mismatches as they occur on each element of type\
    \ ELEMENT\nmultiple elements can be specified"
  synonyms:
  - -report
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "|v\nused in conjunction with the -report switch\nshows the tree of\
    \ the mismatching element"
  synonyms:
  - -verbose
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: "|h\nshows this document"
  synonyms:
  - -help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "NAME\n    stag-diff - finds the difference between two stag files\n\n\
  SYNOPSIS\n      stag-diff -ignore foo-id -ignore bar-id file1.xml file2.xml\n\n\
  DESCRIPTION\n    Compares two data trees and reports whether they match. If they\
  \ do not\n    match, the mismatch is reported.\n\n    -help|h\n        shows this\
  \ document\n\n    -ignore|i ELEMENT\n        these nodes are ignored for the purposes\
  \ of comparison. Note that\n        attributes are treated as elements, prefixed\
  \ by the containing\n        element id. For example, if you have\n\n          <foo\
  \ ID=\"wibble\">\n\n        And you wish to ignore the ID attribute, then you would\
  \ use the\n        switch\n\n          -ignore foo-ID\n\n        You can specify\
  \ multiple elements to ignore like this\n\n          -i foo -i bar -i baz\n\n  \
  \      You can also specify paths\n\n          -i foo/bar/bar-id\n\n    -parser|p\
  \ FORMAT\n        which parser to use. The default is XML. This can also be\n  \
  \      autodetected by the file suffix. Other alternatives are sxpr and\n      \
  \  itext. See Data::Stag for details.\n\n    -report|r ELEMENT\n        report mismatches\
  \ as they occur on each element of type ELEMENT\n\n        multiple elements can\
  \ be specified\n\n    -verbose|v\n        used in conjunction with the -report switch\n\
  \n        shows the tree of the mismatching element\n\n  OUTPUT\n    If a mismatch\
  \ is reported, a report is generated displaying the subpart\n    of the tree that\
  \ could not be matched. This will look like this:\n\n    REASON: no_matching_node:\
  \ annotation no_matching_node: feature_set\n    no_matching_node: feature_span no_matching_node:\
  \ evidence\n    no_matching_node: evidence-id data_mismatch(:15077290 ne :15077291):\n\
  \    evidence-id AND evidence-id\n\n    Due to the nature of tree matching, it can\
  \ be difficult to specify\n    exactly how trees do not match. To investigate this,\
  \ you may need to use\n    the -r and -v options. For the above output, I would\
  \ recommend using\n\n      stag-diff -r feature_span -v\n\n  ALGORITHM\n    Both\
  \ trees are recursively traversed... see the actual code for how this\n    works\n\
  \n    The order of elements is not important; eg\n\n      <foo>\n        <bar>\n\
  \          <baz>1</baz>\n        </bar>\n        <bar>\n          <baz>2</baz>\n\
  \        </bar>\n      </foo>\n\n    matches\n\n      <foo>\n        <bar>\n   \
  \       <baz>2</baz>\n        </bar>\n        <bar>\n          <baz>1</baz>\n  \
  \      </bar>\n      </foo>\n\n    The recursive nature of this algorithm means\
  \ that certain tree\n    comparisons will explode wrt time and memory. I think this\
  \ will only\n    happen with very deep trees where nodes high up in the tree can\
  \ only be\n    differentiated by nodes low down in the tree.\n\n    Both trees are\
  \ loaded into memory to begin with, so it may thrash with\n    very large documents\n\
  \n  AUTHOR\n    Chris Mungall cjm at fruitfly dot org\n\nSEE ALSO\n    Data::Stag\n\
  \nPOD ERRORS\n    Hey! The above document had some coding errors, which are explained\n\
  \    below:\n\n    Around line 189:\n        =over should be: '=over' or '=over\
  \ positive_number'\n\n"
generated_using:
- --help
