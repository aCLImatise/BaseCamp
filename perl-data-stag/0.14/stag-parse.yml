!Command
positional: []
named:
- !Flag
  description: '|parser FORMAT FORMAT is one of xml, sxpr or itext, or the name of
    a perl module this is the class that parsers the input file(s) and generates stag
    events xml assumed as default'
  synonyms:
  - -p
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|writer FORMAT FORMAT is one of xml, sxpr or itext, or the name of
    a perl module this is the class that catches the events thrown by the parser;
    it can be any class, but the class is typically a writer xml assumed as default'
  synonyms:
  - -w
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|out FILE the writer will use this file (defaults to STDOUT)'
  synonyms:
  - -o
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '|errf FILE file to store parse error handler output'
  synonyms:
  - -e
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: FORMAT is one of xml, sxpr or itext, or the name of a perl module all
    parse error events go to this module
  synonyms:
  - -errhandler
  args: !SimpleFlagArg
    name: FORMAT/MODULE
  optional: true
- !Flag
  description: '|root NODE_NAME if this is specified, NODE_NAME becomes the root of
    the stag tree, and anything that was previously the root is placed below this.
    this happens automatically if more than one file is parsed (because there can
    only be one tree root)'
  synonyms:
  - -r
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Works only if the output handler is able to provide ASCII-colors (currently
    supported for itext and xml)
  synonyms:
  - -color
  args: !EmptyFlagArg {}
  optional: true
command:
- stag-parse.pl
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\e[1mNAME\e[0m\n    stag-parse - parses a file and fires events (e.g.\
  \ sxpr to xml)\n\n\e[1mSYNOPSIS\e[0m\n      # convert XML to IText\n      stag-parse\
  \ -p xml -w itext file1.xml file2.xml\n\n      # use a custom parser/generator and\
  \ a custom writer/generator\n      stag-parse -p MyMod::MyParser -w MyMod::MyWriter\
  \ file.txt\n\n\e[1mDESCRIPTION\e[0m\n    script wrapper for the Data::Stag modules\n\
  \n    feeds in files into a parser object that generates nestarray events, and\n\
  \    feeds the events into a handler/writer class\n\n\e[1mARGUMENTS\e[0m\n    -p|parser\
  \ FORMAT\n        FORMAT is one of xml, sxpr or itext, or the name of a perl module\n\
  \n        this is the class that parsers the input file(s) and generates stag\n\
  \        events\n\n        xml assumed as default\n\n    -w|writer FORMAT\n    \
  \    FORMAT is one of xml, sxpr or itext, or the name of a perl module\n\n     \
  \   this is the class that catches the events thrown by the parser; it can\n   \
  \     be any class, but the class is typically a writer\n\n        xml assumed as\
  \ default\n\n    -o|out FILE\n        the writer will use this file (defaults to\
  \ STDOUT)\n\n    -e|errf FILE\n        file to store parse error handler output\n\
  \n    -errhandler FORMAT/MODULE\n        FORMAT is one of xml, sxpr or itext, or\
  \ the name of a perl module\n\n        all parse error events go to this module\n\
  \n\n    -r|root NODE_NAME\n        if this is specified, NODE_NAME becomes the root\
  \ of the stag tree, and\n        anything that was previously the root is placed\
  \ below this.\n\n        this happens automatically if more than one file is parsed\
  \ (because\n        there can only be one tree root)\n\n    -color\n        Works\
  \ only if the output handler is able to provide ASCII-colors\n        (currently\
  \ supported for itext and xml)\n\n\e[1mSEE ALSO\e[0m\n    Data::Stag\n\n    This\
  \ script is a wrapper for the method\n\n      Data::Stag->parse()\n\n\e[1mPOD ERRORS\e\
  [0m\n    Hey! \e[1mThe above document had some coding errors, which are explained\n\
  \    below:\e[0m\n\n    Around line 152:\n        Expected text after =item, not\
  \ a bullet\n\n"
generated_using:
- --help
