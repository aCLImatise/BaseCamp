!Command
command:
- mcxrand
positional: []
named:
- !Flag
  description: print this help
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: output matrix to <fname>
  synonyms:
  - -o
  args: !SimpleFlagArg
    name: fname
  optional: true
- !Flag
  description: write binary format
  synonyms:
  - --write-binary
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: input matrix
  synonyms:
  - -imx
  args: !SimpleFlagArg
    name: fname
  optional: true
- !Flag
  description: input clustering (shuffled version will be output)
  synonyms:
  - -icl
  args: !SimpleFlagArg
    name: fname
  optional: true
- !Flag
  description: node count
  synonyms:
  - -gen
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: add <num> edges not yet present
  synonyms:
  - -add
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: shuffle edge, repeat <num> times
  synonyms:
  - -shuffle
  args: !SimpleFlagArg
    name: num
  optional: true
- !Flag
  description: /<m>          create graph with V nodes using preferential attachment,
    m edges per step
  synonyms:
  - -pa
  args: !SimpleFlagArg
    name: V
  optional: true
- !Flag
  description: remove <num> edges
  synonyms:
  - -remove
  args: !SimpleFlagArg
    name: num
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: print this help
  synonyms:
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: print version information
  synonyms:
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "Usage: mcxrand [options] -imx <mx-file>\n\n--help               print\
  \ this help\n-h                   print this help\n--version            print version\
  \ information\n-o <fname>           output matrix to <fname>\n--write-binary   \
  \    write binary format\n-imx <fname>         input matrix\n-icl <fname>      \
  \   input clustering (shuffled version will be output)\n-gen <num>           node\
  \ count\n-add <num>           add <num> edges not yet present\n\n-shuffle <num>\
  \       shuffle edge, repeat <num> times\n-pa <V>/<m>          create graph with\
  \ V nodes using preferential attachment, m edges per step\n-remove <num>       \
  \ remove <num> edges\n"
generated_using:
- --help
