!Command
positional:
- !Positional
  description: ''
  position: 0
  name: For
  optional: false
- !Positional
  description: ''
  position: 1
  name: use
  optional: false
- !Positional
  description: ''
  position: 2
  name: as
  optional: false
- !Positional
  description: ''
  position: 3
  name: a
  optional: false
- !Positional
  description: ''
  position: 4
  name: post
  optional: false
- !Positional
  description: ''
  position: 5
  name: process
  optional: false
- !Positional
  description: ''
  position: 6
  name: on
  optional: false
- !Positional
  description: ''
  position: 7
  name: an
  optional: false
- !Positional
  description: ''
  position: 8
  name: aligner
  optional: false
named:
- !Flag
  description: Add MC and MQ tags to all output paired-end SAM lines.
  synonyms:
  - --addMateTags
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Suppress abort on unmated alignments. Use only when sure input is read-id
    grouped, and either paired-end alignments have been filtered or the input file
    contains singleton reads.
  synonyms:
  - --ignoreUnmated
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: INT Maximum allowed length of the SEQ/QUAL string in the input file.
    [500] Primarily useful for marking duplicates in files containing singleton long
    reads.
  synonyms:
  - --maxReadLength
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: INT Maximum number of split alignments for a read to be included in
    splitter file. [2]
  synonyms:
  - --maxSplitCount
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Maximum number of un-aligned bases between two alignments to be included
    in splitter file. [50]
  synonyms:
  - --maxUnmappedBases
  args: !SimpleFlagArg
    name: INT
  optional: true
- !Flag
  description: INT Minimum structural variant feature size for split alignments to
    be included in splitter file. [50]
  synonyms:
  - --minIndelSize
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: INT Minimum non-overlaping base pairs between two alignments for a
    read to be included in splitter file. [20]
  synonyms:
  - --minNonOverlap
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: INT Minumum number of bases a mapped read must be clipped to be included
    in unmapped file. [20]
  synonyms:
  - --minClipSize
  args: !EmptyFlagArg {}
  optional: true
command:
- samblaster
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "samblaster: Version 0.1.26\nAuthor: Greg Faust (gf4ea@virginia.edu)\n\
  Tool to mark duplicates and optionally output split reads and/or discordant pairs.\n\
  Input sam file must contain sequence header and be grouped by read ids (QNAME).\n\
  Input typicallly contains paired-end data, although singleton data is allowed with\
  \ --ignoreUnmated option.\nOutput will be all alignments in the same order as input,\
  \ with duplicates marked with FLAG 0x400.\n\nUsage:\nFor use as a post process on\
  \ an aligner (eg. bwa mem):\n     bwa mem <idxbase> samp.r1.fq samp.r2.fq | samblaster\
  \ [-e] [-d samp.disc.sam] [-s samp.split.sam] | samtools view -Sb - > samp.out.bam\n\
  \     bwa mem -M <idxbase> samp.r1.fq samp.r2.fq | samblaster -M [-e] [-d samp.disc.sam]\
  \ [-s samp.split.sam] | samtools view -Sb - > samp.out.bam\nFor use with a pre-existing\
  \ bam file to pull split, discordant and/or unmapped reads without marking duplicates:\n\
  \     samtools view -h samp.bam | samblaster -a [-e] [-d samp.disc.sam] [-s samp.split.sam]\
  \ [-u samp.umc.fasta] -o /dev/null\nFor use with a bam file of singleton long reads\
  \ to pull split and/or unmapped reads with/without marking duplicates:\n     samtools\
  \ view -h samp.bam | samblaster --ignoreUnmated [-e] --maxReadLength 100000 [-s\
  \ samp.split.sam] [-u samp.umc.fasta] | samtools view -Sb - > samp.out.bam\n   \
  \  samtools view -h samp.bam | samblaster --ignoreUnmated -a [-e] [-s samp.split.sam]\
  \ [-u samp.umc.fasta] -o /dev/null\nInput/Output Options:\n-i --input          \
  \ FILE Input sam file [stdin].\n-o --output          FILE Output sam file for all\
  \ input alignments [stdout].\n-d --discordantFile  FILE Output discordant read pairs\
  \ to this file. [no discordant file output]\n-s --splitterFile    FILE Output split\
  \ reads to this file abiding by paramaters below. [no splitter file output]\n-u\
  \ --unmappedFile    FILE Output unmapped/clipped reads as FASTQ to this file abiding\
  \ by parameters below. [no unmapped file output].\n                          Requires\
  \ soft clipping in input file.  Will output FASTQ if QUAL information available,\
  \ otherwise FASTA.\n\nOther Options:\n-a --acceptDupMarks       Accept duplicate\
  \ marks already in input file instead of looking for duplicates in the input.\n\
  -e --excludeDups          Exclude reads marked as duplicates from discordant, splitter,\
  \ and/or unmapped file.\n-r --removeDups           Remove duplicates reads from\
  \ all output files. (Implies --excludeDups).\n   --addMateTags          Add MC and\
  \ MQ tags to all output paired-end SAM lines.\n   --ignoreUnmated        Suppress\
  \ abort on unmated alignments. Use only when sure input is read-id grouped,\n  \
  \                        and either paired-end alignments have been filtered or\
  \ the input file contains singleton reads.\n-M                        Run in compatibility\
  \ mode; both 0x100 and 0x800 are considered chimeric. Similar to BWA MEM -M option.\n\
  \   --maxReadLength    INT Maximum allowed length of the SEQ/QUAL string in the\
  \ input file. [500]\n                          Primarily useful for marking duplicates\
  \ in files containing singleton long reads.\n   --maxSplitCount    INT Maximum number\
  \ of split alignments for a read to be included in splitter file. [2]\n   --maxUnmappedBases\
  \ INT Maximum number of un-aligned bases between two alignments to be included in\
  \ splitter file. [50]\n   --minIndelSize     INT Minimum structural variant feature\
  \ size for split alignments to be included in splitter file. [50]\n   --minNonOverlap\
  \    INT Minimum non-overlaping base pairs between two alignments for a read to\
  \ be included in splitter file. [20]\n   --minClipSize      INT Minumum number of\
  \ bases a mapped read must be clipped to be included in unmapped file. [20]\n-q\
  \ --quiet                Output fewer statistics.\n"
generated_using:
- --help
