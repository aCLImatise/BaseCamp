!Command
command:
- jmztab-m
positional:
- !Positional
  description: "-c,--check <arg>           Example: -c /path/to/file.mztab. Check\
    \ and\nvalidate the provided a mzTab file."
  position: 0
  name: jmztabm-cli
  optional: false
named:
- !Flag
  description: "Example: --fromJson. Will parse inFile as JSON\nand write mzTab representation\
    \ to disk.\nRequires validation to be successful!"
  synonyms:
  - --fromJson
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Choose validation level (Info, Warn, Error),\ndefault level is Info!"
  synonyms:
  - -l
  - --level
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: "Example: -m 1002. Print validation message\ndetail information based\
    \ on error code."
  synonyms:
  - -m
  - --message
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Example: -o \"output.txt\". Record validation\nmessages into outfile.\
    \ If not set, print\nvalidation messages to stdout/stderr."
  synonyms:
  - -o
  - --outFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: "Example: -s /path/to/mappingFile.xml. Use the\nprovided mapping file\
    \ for semantic validation.\nIf no mapping file is provided, the default\none will\
    \ be used. Requires an active internet\nconnection!"
  synonyms:
  - -s
  - --checkSemantic
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: "Example: --toJson. Will write a json\nrepresentation of inFile to\
    \ disk. Requires\nvalidation to be successful!"
  synonyms:
  - --toJson
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: Print help message.
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: Print version information.
  synonyms:
  - -v
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "usage: jmztabm-cli\n -c,--check <arg>           Example: -c /path/to/file.mztab.\
  \ Check and\n                            validate the provided a mzTab file.\n \
  \   --fromJson              Example: --fromJson. Will parse inFile as JSON\n   \
  \                         and write mzTab representation to disk.\n            \
  \                Requires validation to be successful!\n -h,--help             \
  \     Print help message.\n -l,--level <arg>           Choose validation level (Info,\
  \ Warn, Error),\n                            default level is Info!\n -m,--message\
  \               Example: -m 1002. Print validation message\n                   \
  \         detail information based on error code.\n -o,--outFile <arg>         Example:\
  \ -o \"output.txt\". Record validation\n                            messages into\
  \ outfile. If not set, print\n                            validation messages to\
  \ stdout/stderr.\n -s,--checkSemantic <arg>   Example: -s /path/to/mappingFile.xml.\
  \ Use the\n                            provided mapping file for semantic validation.\n\
  \                            If no mapping file is provided, the default\n     \
  \                       one will be used. Requires an active internet\n        \
  \                    connection!\n    --toJson                Example: --toJson.\
  \ Will write a json\n                            representation of inFile to disk.\
  \ Requires\n                            validation to be successful!\n -v,--version\
  \               Print version information.\n"
generated_using:
- --help
