!Command
positional: []
named: []
command:
- bind.pl.bak
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "syntax: EXE_BASE_DIR/lib/bind.pl [OPTIONS] TEMPLATE [ASSIGNMENT_FILE1\
  \ ...] [VAR1=VAL1 VAR2=VAL2 ...]\n\nFills in the variables in the template file\
  \ with the bound variables supplied.  Any variables\nnamed $(VAR1) (i.e within $())\
  \ in the template file are set to VAL1 and the result printed\nto standard output.\n\
  \nTEMPLATE - File containing a variables of the form $(VARIABLE).  If '-' is supplied,\n\
  \           reads the template from standard input.\n\nASSIGNMENT_FILEi - If supplied\
  \ lists variable=value pairs.  If '-' is supplied,\n                   the script\
  \ reads variable=value pairs from standard input.  Multiple\n                  \
  \ assignment files are allowed.\n\nVARi=VALi - Replace the variable VARi with the\
  \ value VALi in the template file.\n\nOPTIONS are:\n\n-def DEFAULT_FILE: Unbound\
  \ variables in the template will be filled in by the values in\n               \
  \    the default file DEFAULT_FILE.\n\n-depth DEPTH: Set the maximum recursion depth\
  \ to DEPTH (default is infinite).  Setting to -1\n              tells the script\
  \ to perform infinite-depth recursion.\n\n                ** -detect not implemented\
  \ yet **\n-detect: Tell the script to \"detect\" variables in the template file.\n\
  \n-exe COMMAND: Execute the command COMMAND on the resulting bound file.  When this\n\
  \              option is used a temporary file is created and the file is passed\n\
  \              into the COMMAND as one of its arguments.  The default prints the\n\
  \              resulting bound file to standard output.  Multiple -exe options can\n\
  \              be supplied.  The commands are executed in the order given.\n\n-fill\
  \ FILLER: If any variables are unbound in the final document then set them all to\
  \ FILLER.\n\n-nodef: Tell the script to ignore variable assignments in any default\
  \ file.\n        Use this option when a default file for the template exists and\
  \ you do not wish to\n        fill in the default values.\n\n-noenv: Ignore environment\
  \ variables (default uses them).\n\n-noexe: Removes any previous -exe and -pipe\
  \ option(s).\n\n-nr: Non-recursive (default is recursive).  Do not expand values\
  \ of attributes that are also\n     attribute names.\n\n-pipe COMMAND: Same as the\
  \ -exe option only the resulting file with bound variables is\n               passed\
  \ to the commands standard input.\n\n-print: Print the resulting template to standard\
  \ output even if -exe or -pipe was\n        supplied.\n\n-q: Quiet mode (suppress\
  \ warnings and information).\n\n-s: Use case-sensitive matching on variable names\
  \ (default is case-insensitive).\n\n-r: Recursively apply bindings (default).  I.e.\
  \ if variable names are the result of one\n    application of the values then it\
  \ will be replaced by the value assigned to a variable\n    of that name in the\
  \ next round of substitution.  For example if the variable $($(FOO))\n    exists\
  \ in the template file and FOO=BAR and BAR=10 then the result of recursive binding\n\
  \    will replace $($(FOO)) with 10 while non-recursive would yield $(BAR).\n\n\
  -xml: Tell the script the document is XML so can print more pretty output.\n\n\n"
generated_using:
- --help
