!Command
command:
- cfm-train
positional:
- !Positional
  description: ''
  position: 0
  name: input_filename
  optional: false
- !Positional
  description: ''
  position: 1
  name: feature_filename
  optional: false
- !Positional
  description: ''
  position: 2
  name: config_filename
  optional: false
- !Positional
  description: ''
  position: 3
  name: peakfile_dir
  optional: false
- !Positional
  description: ''
  position: 4
  name: group
  optional: false
- !Positional
  description: ''
  position: 5
  name: status_filename
  optional: false
- !Positional
  description: ''
  position: 6
  name: no_train
  optional: false
- !Positional
  description: ''
  position: 7
  name: start_energy
  optional: false
named: []
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\n\n\nUsage: cfm-train.exe <input_filename> <feature_filename> <config_filename>\
  \ <peakfile_dir> <group> <status_filename> <no_train> <start_energy>\n\n\n\ninput_filename:\n\
  Text file with number of mols on first line, then \nid smiles_or_inchi cross_validation_group\n\
  on each line after that.\n\nfeature_filename:\nText file with list of feature names\
  \ to include, line separated:\nBreakAtomPair\nIonRootPairs...etc\n\nconfig_filename:\n\
  Text file listing configuration parameters. Line separated 'name value'.\n\npeakfile_dir_or_msp:\n\
  Input MSP file, with ID fields corresponding to id fields in input_file (the MSP\
  \ filename not including the .msp extension) OR Directory containing files with\
  \ spectra. Each file should be called <id>.txt, where <id> is the id specified in\
  \ the input file, and contains a list of peaks 'mass intensity' on each line, with\
  \ either 'low','med' and 'high' lines beginning spectra of different energy levels,\
  \ or 'energy0', 'energy1', etc. e.g.\nenergy0\n65.02 40.0\n86.11 60.0\nenergy1\n\
  65.02 100.0 ... etc\n\ngroup (opt):\nCross validation group to run. Otherwise will\
  \ assume 10 groups and run all of them.\n\nstatus_filename (opt):\nName of file\
  \ to write logging information as the program runs. If not specified will write\
  \ to status.log<group>, or status.log if no group is specified\n\nno_train (opt):\n\
  Set to 1 if the training part should be skipped (useful in debugging - default 0)\n\
  \nstart_energy (opt - se only)\nSet to starting energy if want to start training\
  \ part way through (single energy only -default 0)\n\nstart_repeat (opt)\nSet to\
  \ starting repeat if want to start training part way through (default 0)\n\n"
generated_using:
- --help
