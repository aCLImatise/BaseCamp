class: CommandLineTool
id: ../../../np_likeness.cwl
inputs:
- id: in_in
  doc: Input structure file to score or to
  type: File
  inputBinding:
    prefix: -in
- id: in_in_type
  doc: 'Input file type: Enter sdf/smi'
  type: File
  inputBinding:
    prefix: -intype
- id: in_np_trainer
  doc: "Serialized NP atomSignatures file generated\nby this program"
  type: File
  inputBinding:
    prefix: -npTrainer
- id: in_out
  doc: Output structure from scoring
  type: string
  inputBinding:
    prefix: -out
- id: in_out_fragments
  doc: "Output .txt file for reconstructed\nfragments. Specify this option only if\
    \ 'reconstructFragments' is true.\nAlternatively, this option can also be specified\
    \ along with\n'generateSignatures' as a output file"
  type: File
  inputBinding:
    prefix: -outFragments
- id: in_out_type
  doc: 'Output file type: Enter sdf/smi'
  type: File
  inputBinding:
    prefix: -outtype
- id: in_reconstruct_fragments
  doc: "Optional boolean argument {true/false} to\nreconstruct fragments. If true\
    \ individual fragments with scores are\nwritten out in SMILES format"
  type: boolean
  inputBinding:
    prefix: -reconstructFragments
- id: in_serialize_signatures
  doc: "Use this function to serialize .txt\nsignatures file generated by this program\
    \ using 'generateSignatures'\noption.The input for this function is taken via\
    \ option 'inSignaturesFile'.\nAlternatively, this function can be used alongside\
    \ 'generateSignatures'\nfunction to directly serialize and store the generated\
    \ signatures."
  type: boolean
  inputBinding:
    prefix: -serializeSignatures
- id: in_signature_height
  doc: "Signature height to be generated; Use this\nalong 'generateSignatures'; Default\
    \ size: 2"
  type: long
  inputBinding:
    prefix: -signatureHeight
- id: in_sm_trainer
  doc: "Serialized SM atomSignatures file generated\nby this program"
  type: File
  inputBinding:
    prefix: -smTrainer
- id: in_application_infofor_input
  doc: "Application info\nFor input and output file please specify the type using\
    \ -intype and -outtype repectively.\nCurrently the types can be either sdf/smi.\n\
    If my mistake you input a sdf file but give it a different format type,\nthe program\
    \ will not complain but will finish without any output. If output file options\
    \ (out/outFragments) are unspecified,\nauto generated output files (based on Input\
    \ format) will be written to the directory of the input file.\n"
  type: boolean
  inputBinding:
    prefix: -v
- id: in_in_signatures_file
  doc: ''
  type: string
  inputBinding:
    prefix: -inSignaturesFile
- id: in_var_12
  doc: ''
  type: boolean
  inputBinding:
    prefix: -generateSignatures
- id: in_below_dot
  doc: "-generateSignatures           Given input sdf/smi file use this function\n\
    to generate atomSignatures for training molecules."
  type: string
  inputBinding:
    position: 0
- id: in_insignaturesfile_arg_specify
  doc: -inSignaturesFile <arg>       To specify atomSignatures .txt file
  type: string
  inputBinding:
    position: 1
outputs:
- id: out_stdout
  doc: Standard output stream
  type: stdout
- id: out_out_fragments
  doc: "Output .txt file for reconstructed\nfragments. Specify this option only if\
    \ 'reconstructFragments' is true.\nAlternatively, this option can also be specified\
    \ along with\n'generateSignatures' as a output file"
  type: File
  outputBinding:
    glob: $(inputs.in_out_fragments)
- id: out_out_type
  doc: 'Output file type: Enter sdf/smi'
  type: File
  outputBinding:
    glob: $(inputs.in_out_type)
cwlVersion: v1.1
baseCommand:
- np-likeness
