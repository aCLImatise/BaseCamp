!Command
positional: []
named:
- !Flag
  description: For functions that can report data for every sequence (nt_count), use
    this flag to report only summary data for all sequences combined.
  synonyms:
  - --summary
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Break up a single fasta file into the given number of chunks
  synonyms:
  - --chunks
  args: !SimpleFlagArg
    name: integer
  optional: true
- !Flag
  description: Split a multi-fasta into individual files.  One for each fasta.
  synonyms:
  - --split
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Run the given code on ($seq_obj, $sequence or $header).  If the code
    block returns a positive value then the sequence is printed.  This can be used
    to build complex and custom filters.
  synonyms:
  - --eval_code
  args: !SimpleFlagArg
    name: code
  optional: true
- !Flag
  description: Run the given code on ($seq_obj, $sequence or $header).  Prints all
    sequences regardless of the return value of the evaled code.  This can but used
    to perform operations (e.g. soft to hard masking with s/[a-z]/N/g, but still print
    every sequence even if it's unaltered.
  synonyms:
  - --eval_all
  args: !SimpleFlagArg
    name: code
  optional: true
- !Flag
  description: Extract all of the sequences who's IDs are found in the given file.
  synonyms:
  - --extract_ids
  args: !SimpleFlagArg
    name: id_file.txt
  optional: true
- !Flag
  description: Grep through a multi fasta file and print out only the fasta sequences
    that have a match in the header. Use grepv_header for negation.
  synonyms:
  - --grep_header
  args: !SimpleFlagArg
    name: pattern
  optional: true
- !Flag
  description: Grep throught a multi fasta file and print out only the fasta sequences
    that have a match in the sequence. Use grepv_seq for negation.
  synonyms:
  - --grep_seq
  args: !SimpleFlagArg
    name: pattern
  optional: true
- !Flag
  description: Wrap the sequence output to a given number of columns.
  synonyms:
  - --wrap
  args: !SimpleFlagArg
    name: integer
  optional: true
- !Flag
  description: Translate a given nucleotide sequence to protein sequence. accepts
    0-2 or 'maker' if you want to use the frame from MAKER produced headers
  synonyms:
  - --translate
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: Prints MAKER produced transcipts without the leading and trailing UTR
    sequence
  synonyms:
  - --trim_maker_utr
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Print only the sequence (without the header) to STDOUT.  This can also
    be accomplished with grep -v '>' fasta_file.
  synonyms:
  - --seq_only
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Print the number and percentage of every nt/aa found in the sequence.
  synonyms:
  - --nt_count
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Print the length of each sequence.
  synonyms:
  - --length
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Print the total length of all sequences.
  synonyms:
  - --total_length
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Calculate the N-50 (http://en.wikipedia.org/wiki/N50_statistic) of
    the sequences in the file.
  synonyms:
  - --n50
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Print the header and sequence on the same line separated by a tab.
  synonyms:
  - --tab
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Print in table format rather than fasta format.
  synonyms:
  - --table
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Print the sequence.  Use in conjuction with 'wrap' or other formatting
    commands to reformat the sequence.
  synonyms:
  - --print
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Reverse the order of the sequences in a fasta file.
  synonyms:
  - --reverse
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Reverse the order of the nt/aa in each sequence.
  synonyms:
  - --rev_seq
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Complement the nucleotide sequence.
  synonyms:
  - --comp_seq
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Reverse compliment a sequence.  Same as --rev_seq && --comp_seq together.
  synonyms:
  - --rev_comp
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Randomize the order of sequences in a multi-fasta file.
  synonyms:
  - --shuffle_order
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Randomize the order of the nt/aa in each sequence.
  synonyms:
  - --shuffle_seq
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Randomize the order of the codons in a nucleotide sequence.
  synonyms:
  - --shuffle_codon
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Pick a given number of sequences from a multi-fasta file.
  synonyms:
  - --shuffle_pick
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Pass in a file with IDs and return sequences with these IDs.
  synonyms:
  - --select
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Pass in a file with IDs and remove sequences with these IDs.
  synonyms:
  - --remove
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Pass in a file with two columns of IDs and map the IDs in the fasta
    headers from the first column of the ID file to the second column of the ID file.  If
    an ID in the fasta header is not found in the first column of the ID file then
    issue a warning, but leave the ID unmapped.
  synonyms:
  - --swap_ids
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Fix protein fasta files for use as blast database.  Removes spaces
    and '*' and replaces any non amino acid codes with C.
  synonyms:
  - --prot_fix
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Grab a sub-sequence from a fasta file based on coordinates.  The requested
    coordinates are in the form seqid:start-end;
  synonyms:
  - --subseq
  args: !EmptyFlagArg {}
  optional: true
command:
- fasta_tool
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\n\nfasta_tool [-options] fasta_file\n\nDescription:\nThe script takes\
  \ a fasta file and can search it, reformat it, and manipulate it\nin a large variety\
  \ of ways that can prove very very usful.  For options that\nprovide the ability\
  \ to evaluate code, use Perl.\n\nOptions:\n  --summary\n      For functions that\
  \ can report data for every sequence (nt_count),\n      use this flag to report\
  \ only summary data for all sequences combined.\n\n  --chunks <integer>\n      Break\
  \ up a single fasta file into the given number of chunks\n\n  --split\n      Split\
  \ a multi-fasta into individual files.  One for each fasta.\n\n  --eval_code <code>\n\
  \      Run the given code on ($seq_obj, $sequence or $header).  If the code\n  \
  \    block returns a positive value then the sequence is printed.  This can be\n\
  \      used to build complex and custom filters.\n\n  --eval_all <code>\n      Run\
  \ the given code on ($seq_obj, $sequence or $header).  Prints all\n      sequences\
  \ regardless of the return value of the evaled code.  This can\n      but used to\
  \ perform operations (e.g. soft to hard masking with\n      s/[a-z]/N/g, but still\
  \ print every sequence even if it's unaltered.\n\n  --extract_ids <id_file.txt>\n\
  \      Extract all of the sequences who's IDs are found in the given file.\n\n \
  \ --grep_header <pattern>\n      Grep through a multi fasta file and print out only\
  \ the fasta\n      sequences that have a match in the header. Use grepv_header for\n\
  \      negation.\n\n  --grep_seq <pattern>\n      Grep throught a multi fasta file\
  \ and print out only the fasta\n      sequences that have a match in the sequence.\
  \ Use grepv_seq for\n      negation.\n\n  --wrap <integer>\n      Wrap the sequence\
  \ output to a given number of columns.\n\n  --translate <string>\n      Translate\
  \ a given nucleotide sequence to protein sequence.\n      accepts 0-2 or 'maker'\
  \ if you want to use the frame from MAKER\n      produced headers\n\n  --trim_maker_utr\n\
  \      Prints MAKER produced transcipts without the leading and trailing\n     \
  \ UTR sequence\n\n  --seq_only\n      Print only the sequence (without the header)\
  \ to STDOUT.  This\n      can also be accomplished with grep -v '>' fasta_file.\n\
  \n  --nt_count\n      Print the number and percentage of every nt/aa found in the\n\
  \      sequence.\n\n  --length\n      Print the length of each sequence.\n\n  --total_length\n\
  \      Print the total length of all sequences.\n\n  --n50\n      Calculate the\
  \ N-50 (http://en.wikipedia.org/wiki/N50_statistic)\n      of the sequences in the\
  \ file.\n\n  --tab\n      Print the header and sequence on the same line separated\
  \ by a tab.\n\n  --table\n      Print in table format rather than fasta format.\n\
  \n  --print\n      Print the sequence.  Use in conjuction with 'wrap' or other formatting\n\
  \      commands to reformat the sequence.\n\n  --reverse\n      Reverse the order\
  \ of the sequences in a fasta file.\n\n  --rev_seq\n      Reverse the order of the\
  \ nt/aa in each sequence.\n\n  --comp_seq\n      Complement the nucleotide sequence.\n\
  \n  --rev_comp\n      Reverse compliment a sequence.  Same as --rev_seq && --comp_seq\
  \ together.\n\n  --shuffle_order\n      Randomize the order of sequences in a multi-fasta\
  \ file.\n\n  --shuffle_seq\n      Randomize the order of the nt/aa in each sequence.\n\
  \n  --shuffle_codon\n      Randomize the order of the codons in a nucleotide sequence.\n\
  \n  --shuffle_pick\n      Pick a given number of sequences from a multi-fasta file.\n\
  \n  --select\n      Pass in a file with IDs and return sequences with these IDs.\n\
  \n  --remove\n      Pass in a file with IDs and remove sequences with these IDs.\n\
  \n  --swap_ids\n      Pass in a file with two columns of IDs and map the IDs in\
  \ the\n      fasta headers from the first column of the ID file to the second\n\
  \      column of the ID file.  If an ID in the fasta header is not found\n     \
  \ in the first column of the ID file then issue a warning, but leave\n      the\
  \ ID unmapped.\n\n  --prot_fix\n    Fix protein fasta files for use as blast database.\
  \  Removes spaces\n    and '*' and replaces any non amino acid codes with C.\n\n\
  \  --subseq\n    Grab a sub-sequence from a fasta file based on coordinates.  The\n\
  \    requested coordinates are in the form seqid:start-end;\n\n\n"
generated_using:
- --help
