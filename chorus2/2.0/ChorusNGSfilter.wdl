version 1.0

task ChorusNGSfilter {
  input {
    String? jellyfish
    String? genome
    String? fastq_format_input
    String? gzipped
    String? threads
    String? km_er
    String? probe
    String? output_bed_format
  }
  command <<<
    ChorusNGSfilter \
      ~{if defined(jellyfish) then ("--jellyfish " +  '"' + jellyfish + '"') else ""} \
      ~{if defined(genome) then ("--genome " +  '"' + genome + '"') else ""} \
      ~{if defined(fastq_format_input) then ("--input " +  '"' + fastq_format_input + '"') else ""} \
      ~{if defined(gzipped) then ("--gzipped " +  '"' + gzipped + '"') else ""} \
      ~{if defined(threads) then ("--threads " +  '"' + threads + '"') else ""} \
      ~{if defined(km_er) then ("--kmer " +  '"' + km_er + '"') else ""} \
      ~{if defined(probe) then ("--probe " +  '"' + probe + '"') else ""} \
      ~{if defined(output_bed_format) then ("--output " +  '"' + output_bed_format + '"') else ""}
  >>>
  parameter_meta {
    jellyfish: "The path where Jellyfish software installed"
    genome: "Fasta format genome file, should include all sequences from genome"
    fastq_format_input: "Fastq format input files contain reads from whole genome shotgun sequencing, files can be gzipped. Multiple files separate with \",\". For example: 1.fq.gz,2.fq.gz"
    gzipped: "Input fastq file is gzipped(gz) or uncompressed(text). (Default: gz)"
    threads: "Number of threads or CPUs to use. (Default: 1)"
    km_er: "Length of k-mer used for counting k-mers in input fastq files. (Default: 17)"
    probe: "The bed format probe file generated by Chorus"
    output_bed_format: "Output bed format probe file with k-mer score. (Default: output.bed)"
  }
}