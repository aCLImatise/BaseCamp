!Command
positional: []
named:
- !Flag
  description: 'Input merged BED file (default: None)'
  synonyms:
  - -infile
  - --input-file
  args: !SimpleFlagArg
    name: INPUT_FILE
  optional: true
- !Flag
  description: '1 (default: 1)'
  synonyms:
  - -num
  - --num-of-files
  args: !SimpleFlagArg
    name: NUM_OF_FILES
  optional: true
- !Flag
  description: "Output BED file (default: <_io.TextIOWrapper name='<stdout>' mode='w'\
    \ encoding='UTF-8'>)"
  synonyms:
  - -outfiles
  - --output-files
  args: !SimpleFlagArg
    name: OUTPUT_FILES
  optional: true
command:
- split_Bed_into_equal_regions.py
parent:
subcommands: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "usage: split_Bed_into_equal_regions.py [-h] -infile INPUT_FILE\n     \
  \                                  [-num NUM_OF_FILES]\n                       \
  \                [-outfiles OUTPUT_FILES]\n\nGiven an input bed file, this program\
  \ will output a number of bed files, each\nwill have same number of total base pairs.\
  \ This routine is used to parallelize\nSomaticSeq tasks. One limitation, however,\
  \ is that some regions of the genome\nhave much higher coverage than others. This\
  \ is the reason some regions run\nmuch slower than others.\n\noptional arguments:\n\
  \  -h, --help            show this help message and exit\n  -infile INPUT_FILE,\
  \ --input-file INPUT_FILE\n                        Input merged BED file (default:\
  \ None)\n  -num NUM_OF_FILES, --num-of-files NUM_OF_FILES\n                    \
  \    1 (default: 1)\n  -outfiles OUTPUT_FILES, --output-files OUTPUT_FILES\n   \
  \                     Output BED file (default: <_io.TextIOWrapper\n           \
  \             name='<stdout>' mode='w' encoding='UTF-8'>)\n"
generated_using:
- --help
