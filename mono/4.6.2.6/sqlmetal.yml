!Command
command:
- sqlmetal
positional:
- !Positional
  description: '--language=NAME        Language NAME for source code: C#, C#2 or VB '
  position: 0
  name: option.
  optional: false
named:
- !Flag
  description: "STRING\nDatabase CONNECTION STRING. Cannot be used with\n/server,\
    \ /user or /password options."
  synonyms:
  - -c
  - --conn
  args: !SimpleFlagArg
    name: CONNECTION
  optional: true
- !Flag
  description: Login user NAME.
  synonyms:
  - -u
  - --user
  args: !SimpleFlagArg
    name: NAME
  optional: true
- !Flag
  description: Login PASSWORD.
  synonyms:
  - -p
  - --password
  args: !SimpleFlagArg
    name: PASSWORD
  optional: true
- !Flag
  description: Database server NAME.
  synonyms:
  - -s
  - --server
  args: !SimpleFlagArg
    name: NAME
  optional: true
- !Flag
  description: Database catalog NAME on server.
  synonyms:
  - -d
  - --database
  args: !SimpleFlagArg
    name: NAME
  optional: true
- !Flag
  description: "Specify PROVIDER. May be Ingres, MySql, Oracle,\nOracleODP, PostgreSql\
    \ or Sqlite."
  synonyms:
  - --provider
  args: !SimpleFlagArg
    name: PROVIDER
  optional: true
- !Flag
  description: ISchemaLoader implementation TYPE.
  synonyms:
  - --with-schema-loader
  args: !SimpleFlagArg
    name: TYPE
  optional: true
- !Flag
  description: IDbConnection implementation TYPE.
  synonyms:
  - --with-dbconnection
  args: !SimpleFlagArg
    name: TYPE
  optional: true
- !Flag
  description: IVendor implementation TYPE.
  synonyms:
  - --with-sql-dialect
  args: !SimpleFlagArg
    name: TYPE
  optional: true
- !Flag
  description: "Output as source code to FILE. Cannot be used\nwith /dbml option."
  synonyms:
  - --code
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: Output as dbml to FILE. Cannot be used with /map
  synonyms:
  - --dbml
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: Use mapping FILE.
  synonyms:
  - --aliases
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: 'Generate schema in code files (default: enabled).'
  synonyms:
  - --schema
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Namespace NAME of generated code (default: no\nnamespace)."
  synonyms:
  - --namespace
  args: !SimpleFlagArg
    name: NAME
  optional: true
- !Flag
  description: "Base TYPE of entity classes in the generated\ncode (default: entities\
    \ have no base class)."
  synonyms:
  - --entitybase
  args: !SimpleFlagArg
    name: TYPE
  optional: true
- !Flag
  description: "ATTRIBUTE for entity members in the generated\ncode, can be specified\
    \ multiple times."
  synonyms:
  - --member-attribute
  args: !SimpleFlagArg
    name: ATTRIBUTE
  optional: true
- !Flag
  description: "Generate only the TYPE selected, can be\nspecified multiple times\
    \ and does not prevent\nreferences from being generated (default:\ngenerate a\
    \ DataContex subclass and all the\nentities in the schema)."
  synonyms:
  - --generate-type
  args: !SimpleFlagArg
    name: TYPE
  optional: true
- !Flag
  description: "overrides for Equals() and\nGetHashCode() methods."
  synonyms:
  - --generate-equals-hash
  args: !SimpleFlagArg
    name: Generates
  optional: true
- !Flag
  description: Extract stored procedures.
  synonyms:
  - --sprocs
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Automatically pluralize or singularize class and\nmember names using\
    \ specified culture rules."
  synonyms:
  - --pluralize
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Specify CULTURE for word recognition and\npluralization (default:\
    \ \"en\")."
  synonyms:
  - --culture
  args: !SimpleFlagArg
    name: CULTURE
  optional: true
- !Flag
  description: "Transform names with the indicated STYLE\n(default: net; may be: leave,\
    \ pascal, camel,\nnet)."
  synonyms:
  - --case
  args: !SimpleFlagArg
    name: STYLE
  optional: true
- !Flag
  description: "Generate timestampes in the generated code\n(default: enabled)."
  synonyms:
  - --generate-timestamps
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Wait for a key to be pressed after processing.
  synonyms:
  - --readline
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Enables additional information to help with\ndebugging, such as full\
    \ stack traces in error\nmessages."
  synonyms:
  - --debug
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: ', -?, --help             Show this help'
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "DbLinq Database mapping generator 2008 version 0.20\nfor Microsoft (R)\
  \ .NET Framework version 3.5\nDistributed under the MIT licence (http://linq.to/db/license)\n\
  \nsqlmetal [OPTIONS] [<DBML INPUT FILE>]\n\n  Generates code and mapping for DbLinq.\
  \ SqlMetal can:\n  - Generate source code and mapping attributes or a mapping file\
  \ from a database.\n  - Generate an intermediate dbml file for customization from\
  \ the database.\n  - Generate code and mapping attributes or mapping file from a\
  \ dbml file.\n\n  -c, --conn=CONNECTION STRING\n                             Database\
  \ CONNECTION STRING. Cannot be used with \n                               /server,\
  \ /user or /password options.\n  -u, --user=NAME            Login user NAME.\n \
  \ -p, --password=PASSWORD    Login PASSWORD.\n  -s, --server=NAME          Database\
  \ server NAME.\n  -d, --database=NAME        Database catalog NAME on server.\n\
  \      --provider=PROVIDER    Specify PROVIDER. May be Ingres, MySql, Oracle, \n\
  \                               OracleODP, PostgreSql or Sqlite.\n      --with-schema-loader=TYPE\n\
  \                             ISchemaLoader implementation TYPE.\n      --with-dbconnection=TYPE\n\
  \                             IDbConnection implementation TYPE.\n      --with-sql-dialect=TYPE\n\
  \                             IVendor implementation TYPE.\n      --code=FILE  \
  \          Output as source code to FILE. Cannot be used \n                    \
  \           with /dbml option.\n      --dbml=FILE            Output as dbml to FILE.\
  \ Cannot be used with /map \n                               option.\n      --language=NAME\
  \        Language NAME for source code: C#, C#2 or VB \n                       \
  \        (default: derived from extension on code file \n                      \
  \         name).\n      --aliases=FILE         Use mapping FILE.\n      --schema\
  \               Generate schema in code files (default: enabled).\n      --namespace=NAME\
  \       Namespace NAME of generated code (default: no \n                       \
  \        namespace).\n      --entitybase=TYPE      Base TYPE of entity classes in\
  \ the generated \n                               code (default: entities have no\
  \ base class).\n      --member-attribute=ATTRIBUTE\n                           \
  \  ATTRIBUTE for entity members in the generated \n                            \
  \   code, can be specified multiple times.\n      --generate-type=TYPE   Generate\
  \ only the TYPE selected, can be \n                               specified multiple\
  \ times and does not prevent \n                               references from being\
  \ generated (default: \n                               generate a DataContex subclass\
  \ and all the \n                               entities in the schema).\n      --generate-equals-hash\
  \ Generates overrides for Equals() and \n                               GetHashCode()\
  \ methods.\n      --sprocs               Extract stored procedures.\n      --pluralize\
  \            Automatically pluralize or singularize class and \n               \
  \                member names using specified culture rules.\n      --culture=CULTURE\
  \      Specify CULTURE for word recognition and \n                             \
  \  pluralization (default: \"en\").\n      --case=STYLE           Transform names\
  \ with the indicated STYLE \n                               (default: net; may be:\
  \ leave, pascal, camel, \n                               net).\n      --generate-timestamps\
  \  Generate timestampes in the generated code \n                               (default:\
  \ enabled).\n      --readline             Wait for a key to be pressed after processing.\n\
  \      --debug                Enables additional information to help with \n   \
  \                            debugging, such as full stack traces in error \n  \
  \                             messages.\n  -h, -?, --help             Show this\
  \ help\n\n"
generated_using:
- --help
