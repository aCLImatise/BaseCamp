!Command
positional:
- !Positional
  description: ''
  position: 0
  name: file.dtdx
  optional: false
- !Positional
  description: ''
  position: 1
  name: root
  optional: false
named:
- !Flag
  description: what to name text between start/end tags. Default 'text'
  synonyms:
  - -textField
  args: !SimpleFlagArg
    name: xxx
  optional: true
- !Flag
  description: Comment to appear at top of generated code files
  synonyms:
  - -comment
  args: !SimpleFlagArg
    name: xxx
  optional: true
- !Flag
  description: Generate parser that rejects stuff it doesn't understand
  synonyms:
  - -picky
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Put in a main routine that's a test harness
  synonyms:
  - -main
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Prefix to add to structure names. By default same as root
  synonyms:
  - -prefix
  args: !SimpleFlagArg
    name: xxx
  optional: true
- !Flag
  description: "'t write out optional attributes with negative values"
  synonyms:
  - -positive
  args: !SimpleFlagArg
    name: Don
  optional: true
command:
- autoXml
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "autoXml - Generate structures code and parser for XML file from DTD-like\
  \ spec\nusage:\n   autoXml file.dtdx root\nThis will generate root.c, root.h\noptions:\n\
  \   -textField=xxx what to name text between start/end tags. Default 'text'\n  \
  \ -comment=xxx Comment to appear at top of generated code files\n   -picky  Generate\
  \ parser that rejects stuff it doesn't understand\n   -main   Put in a main routine\
  \ that's a test harness\n   -prefix=xxx Prefix to add to structure names. By default\
  \ same as root\n   -positive Don't write out optional attributes with negative values\n\
  \n"
generated_using:
- --help
