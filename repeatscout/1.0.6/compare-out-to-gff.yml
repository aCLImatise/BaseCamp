!Command
positional: []
named:
- !Flag
  description: A GFF-formatted file of features. More than one file may be specified
    with multiple --gff options.
  synonyms:
  - --gff
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: A fasta formatted file. If this is given, then sequences that are under
    (over) the overlap threshold will be in the output. This is a sequence filter.
  synonyms:
  - --f
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: The maximum (minimum) amount of overlap tolerated by any one type of
    repeat.
  synonyms:
  - --threshold
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Determines if the threshold is a minimum or a maximum (defaults to
    maximum; including --over makes it a minimum)
  synonyms:
  - --over
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'Determines how the overlap calculation is done. If this is not specified,
    the overlap is calculated by bases: if 40 bases of a repeat element overlaps a
    feature in one of the GFF files, it is counted as 40 bases. The sum is taken over
    all features and all repeats of a given type and divided by the total length of
    the repeat. If --instances is specified, the "overlap" is considered to be the
    number of instances of a given type that overlap any feature, divided by the total
    number of instances of that type.'
  synonyms:
  - --instances
  args: !EmptyFlagArg {}
  optional: true
command:
- compare-out-to-gff.prl
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\e[1mNAME\e[0m\n    compare-out-to-gff.prl --- Compares RepeatMasker output\
  \ to a set of GFF\n    feature files.\n\n\e[1mSYNOPSIS\e[0m\n    compare-out-to-gff.prl\
  \ --gff=file1.gff --gff=file2.gff\n    --cat=repeatmasker.out --f=file.fa > lib.ref\n\
  \n\e[1mDESCRIPTION\e[0m\n    When discovering repeat families with a de novo method,\
  \ it is sometimes\n    useful to take the masked instances from RepeatMasker and\
  \ deterine to what\n    extent they overlap other features. For example, you might\
  \ want to see if\n    the repeat instances predominantly overlap exons, or segmental\n\
  \    duplications. Or, for that matter, instances of known repeats from\n    human-curated\
  \ libraries. This program does that.\n\n\e[1mOPTIONS\e[0m\n    There are two required\
  \ options: --cat and one or more --gff.\n\n   --cat\n    RepeatMasker instances\
  \ in either .cat format or .out format (prefer .out)\n\n   --gff\n    A GFF-formatted\
  \ file of features. More than one file may be specified with\n    multiple --gff\
  \ options.\n\n   --f\n    A fasta formatted file. If this is given, then sequences\
  \ that are under\n    (over) the overlap threshold will be in the output. This is\
  \ a sequence\n    filter.\n\n   --threshold\n    The maximum (minimum) amount of\
  \ overlap tolerated by any one type of\n    repeat.\n\n   --over\n    Determines\
  \ if the threshold is a minimum or a maximum (defaults to\n    maximum; including\
  \ --over makes it a minimum)\n\n   --instances\n    Determines how the overlap calculation\
  \ is done. If this is not specified,\n    the overlap is calculated by bases: if\
  \ 40 bases of a repeat element\n    overlaps a feature in one of the GFF files,\
  \ it is counted as 40 bases. The\n    sum is taken over all features and all repeats\
  \ of a given type and divided\n    by the total length of the repeat. If --instances\
  \ is specified, the\n    \"overlap\" is considered to be the number of instances\
  \ of a given type that\n    overlap any feature, divided by the total number of\
  \ instances of that\n    type.\n\n  \e[1mBUGS\e[0m\n    None known. This program\
  \ is remarkably slow, though, and could be sped up\n    significantly with a very\
  \ easy fix.\n\n"
generated_using:
- --help
