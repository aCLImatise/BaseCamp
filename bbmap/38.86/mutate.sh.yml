!Command
command:
- mutate.sh
positional:
- !Positional
  description: It does not fully solve the problem, but greatly
  position: 0
  name: purposes.
  optional: false
named:
- !Flag
  description: "This will set Java's memory usage, overriding autodetection.\n-Xmx20g\
    \ will specify 20 gigs of RAM, and -Xmx200m will\nspecify 200 megs. The max is\
    \ typically 85% of physical memory."
  synonyms:
  - -Xmx
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "This flag will cause the process to exit if an out-of-memory\nexception\
    \ occurs.  Requires Java 8u92+."
  synonyms:
  - -eoom
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Disable assertions.
  synonyms:
  - -da
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\nWritten by Brian Bushnell\nLast modified August 6, 2019\n\nDescription:\
  \  Creates a mutant version of a genome.\n\nUsage:  mutate.sh in=<input file> out=<output\
  \ file> id=<identity>\n\nI/O parameters:\nin=<file>       Input genome.\nout=<file>\
  \      Output mutant genome.\nvcf=<file>      Output VCF file showing variations\
  \ added.\noverwrite=f     (ow) Set to false to force the program to abort rather\
  \ than\n                overwrite an existing file.\nziplevel=2      (zl) Set to\
  \ 1 (lowest) through 9 (max) to change compression\n                level; lower\
  \ compression is faster.\n\nProcessing parameters:\nsubrate=0       Substitution\
  \ rate, 0 to 1.     \nindelrate=0     Indel rate, 0 to 1.\nmaxindel=1      Max indel\
  \ length.\nindelspacing=10 Minimum distance between subsequent indels.\nid=1   \
  \         Target identity, 0 to 1; 1 means 100%.\n                If this is used\
  \ it will override subrate and indelrate;\n                99% of the mutations\
  \ will be substitutions, and 1% indels.\nfraction=1      Genome fraction, 0 to 1;\
  \ 1 means 100%.  A lower fraction\n                will randomly select that fraction\
  \ on a per-sequence basis,\n                possibly incurring one chimeric junction\
  \ per sequence.\n                Not compatible with VCF output.\nperiod=-1    \
  \   If positive, place exactly one mutation every X bases.\nprefix=         Set\
  \ this flag to rename the new contigs with this prefix\n                and a number.\n\
  amino=f         Treat the input as amino acid sequence.\nploidy=1        Set the\
  \ ploidy.  ploidy>1 allows heterozygous mutations.\n                This will create\
  \ one copy of each input sequence per ploidy.\nhetrate=0.5     If polyploid, fraction\
  \ of mutations that are heterozygous.\nnohomopolymers=f  If true, prevent indels\
  \ in homopolymers that lead to\n                ambiguous variant calls.  For example,\
  \ inserting A between\n                AC or deleting T from TTTT.  This is mainly\
  \ for grading \n                purposes.  It does not fully solve the problem,\
  \ but greatly\n                improves concordance (reducing disagreements by 70%).\n\
  \nJava Parameters:\n-Xmx            This will set Java's memory usage, overriding\
  \ autodetection.\n                -Xmx20g will specify 20 gigs of RAM, and -Xmx200m\
  \ will\n                specify 200 megs. The max is typically 85% of physical memory.\n\
  -eoom           This flag will cause the process to exit if an out-of-memory\n \
  \               exception occurs.  Requires Java 8u92+.\n-da             Disable\
  \ assertions.\n\nPlease contact Brian Bushnell at bbushnell@lbl.gov if you encounter\
  \ any problems.\n\n"
generated_using:
- --help
