&id004 !Command
positional:
- !Positional
  description: ''
  position: 0
  name: ids
  optional: false
named: []
command:
- rbt
- fastq-filter
parent: &id001 !Command
  positional: []
  named:
  - !Flag
    description: Verbose output.
    synonyms:
    - -v
    - --verbose
    args: !EmptyFlagArg {}
    optional: true
  command:
  - rbt
  parent:
  subcommands:
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: bam-path
      optional: false
    named:
    - !Flag
      description: Skip reads with mask bits set [UNMAP, SECONDARY, QCFAIL, DUP].
      synonyms:
      - -e
      - --excl-flags
      args: !SimpleFlagArg
        name: INT
      optional: true
    - !Flag
      description: Skip reads with mask bits unset [].
      synonyms:
      - -i
      - --incl-flags
      args: !SimpleFlagArg
        name: INT
      optional: true
    - !Flag
      description: 'Maximum read length to consider. This affects the speed of the
        involved pileup. Reads longer than this length can be missed when calculating
        the depth. [default: 1000]'
      synonyms:
      - -m
      args: !SimpleFlagArg
        name: INT
      optional: true
    - !Flag
      description: 'Minimum mapping quality. [default: 0]'
      synonyms:
      - -q
      - --min-mapq
      args: !SimpleFlagArg
        name: INT
      optional: true
    command:
    - rbt
    - bam-depth
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: Prints help information
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: Prints version information
      synonyms:
      - -V
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "rbt-bam-depth \nJohannes Köster <johannes.koester@tu-dortmund.de>\n\
      Print depth of BAM or CRAM file at given positions from STDIN (tab separated:\
      \ chrom, pos).\n\nUsage:\n$ rbt bam-depth test.bam < pos.txt > depth.txt\n\n\
      The positions file contains the name of one reference sequence and one position\
      \ per line (tab separated).\nExample:\n\n16\t1\n17\t38\n17\t39\n\nDepths are\
      \ written to stdout as tab-separated lines, similar to the positions input.\n\
      Example:\n\n16\t1\t0\n17\t38\t14\n17\t39\t13\n\n\n\nUSAGE:\n    rbt bam-depth\
      \ [OPTIONS] <bam-path>\n\nFLAGS:\n    -h, --help       Prints help information\n\
      \    -V, --version    Prints version information\n\nOPTIONS:\n    -e, --excl-flags\
      \ <INT>    Skip reads with mask bits set [UNMAP, SECONDARY, QCFAIL, DUP].\n\
      \    -i, --incl-flags <INT>    Skip reads with mask bits unset [].\n    -m <INT>\
      \                  Maximum read length to consider. This affects the speed of\
      \ the involved pileup. Reads\n                              longer than this\
      \ length can be missed when calculating the depth. [default: 1000]\n    -q,\
      \ --min-mapq <INT>      Minimum mapping quality. [default: 0]\n\nARGS:\n   \
      \ <bam-path>    Path to indexed BAM file.\n"
    generated_using: &id003
    - --help
  - &id002 !Command
    positional: []
    named: []
    command:
    - rbt
    - collapse-reads-to-fragments
    parent: *id001
    subcommands:
    - !Command
      positional:
      - !Positional
        description: ''
        position: 0
        name: FLAGS
        optional: true
      - !Positional
        description: ''
        position: 1
        name: bam
        optional: false
      - !Positional
        description: ''
        position: 2
        name: consensus-bam
        optional: false
      named:
      - !Flag
        description: Add list of reads that were merged for each consensus read. Note
          that this can yield very long FASTQ name lines which cannot be handled by
          some tools.
        synonyms:
        - --verbose-read-names
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: 'Maximum hamming distance between the sequences of any pair of
          reads in the same cluster. [default: 2]  [possible values: 1, 2, 3, 4, 5,
          6, 7, 8]'
        synonyms:
        - -D
        - --max-seq-dist
        args: !SimpleFlagArg
          name: max-seq-dist
        optional: true
      command:
      - rbt
      - collapse-reads-to-fragments
      - bam
      parent: *id002
      subcommands: []
      help_flag: !Flag
        description: Prints help information
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag: !Flag
        description: Prints version information
        synonyms:
        - -V
        - --version
        args: !EmptyFlagArg {}
        optional: true
      help_text: "rbt-collapse-reads-to-fragments-bam \nFelix Mölder <felix.moelder@uni-due.de>\n\
        Tool to merge sets of PCR duplicate reads from a BAM file into one maximum\
        \ likelihood fragment sequence each with\naccordingly improved base quality\
        \ scores.\n\nTakes a BAM file and returns a BAM file in which all PCR duplicates\
        \ have been merged into a consensus read.\nDuplicates must be marked by Picard\
        \ Tools using the TAG_DUPLICATE_SET_MEMBERS option.\n\nAssumptions:\n  - Reads\
        \ are of equal length\n  - Reads are marked by Picard Tools\n\n\n\nUSAGE:\n\
        \    rbt collapse-reads-to-fragments bam [FLAGS] [OPTIONS] <bam> <consensus-bam>\n\
        \nFLAGS:\n    -h, --help                  Prints help information\n    -V,\
        \ --version               Prints version information\n        --verbose-read-names\
        \    Add list of reads that were merged for each consensus read. Note that\
        \ this can yield\n                                very long FASTQ name lines\
        \ which cannot be handled by some tools.\n\nOPTIONS:\n    -D, --max-seq-dist\
        \ <max-seq-dist>    Maximum hamming distance between the sequences of any\
        \ pair of reads in the same\n                                         cluster.\
        \ [default: 2]  [possible values: 1, 2, 3, 4, 5, 6, 7, 8]\n\nARGS:\n    <bam>\
        \              Input BAM file with marked duplicates\n    <consensus-bam>\
        \    Output BAM file with unaligned consensus reads\n"
      generated_using: *id003
    - !Command
      positional:
      - !Positional
        description: ''
        position: 0
        name: FLAGS
        optional: true
      - !Positional
        description: ''
        position: 1
        name: fq1
        optional: false
      - !Positional
        description: ''
        position: 2
        name: fq2
        optional: false
      - !Positional
        description: ''
        position: 3
        name: consensus-fq1
        optional: false
      - !Positional
        description: ''
        position: 4
        name: consensus-fq2
        optional: false
      - !Positional
        description: ''
        position: 5
        name: consensus-fq3
        optional: true
      named:
      - !Flag
        description: '\                    # length of UMI'
        synonyms:
        - -l
        args: !SimpleFlagArg
          name: '13'
        optional: true
      - !Flag
        description: '\                     # max hamming distance of UMIs within
          a cluster'
        synonyms:
        - -d
        args: !SimpleFlagArg
          name: '1'
        optional: true
      - !Flag
        description: '\                     # max hamming distance of sequences within
          a cluster'
        synonyms:
        - -D
        args: !SimpleFlagArg
          name: '2'
        optional: true
      - !Flag
        description: Set if UMI is on reverse read
        synonyms:
        - -u
        - --umi-on-reverse
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: Add list of reads that were merged for each consensus read. Note
          that this can yield very long FASTQ name lines which cannot be handled by
          some tools.
        synonyms:
        - --verbose-read-names
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: Expected insert size of sequenced fragment (Required for calculating
          overlapping consensus only)
        synonyms:
        - -i
        - --insert-size
        args: !SimpleFlagArg
          name: insert-size
        optional: true
      - !Flag
        description: 'Maximum hamming distance between the sequences of any pair of
          reads in the same cluster. [default: 2]  [possible values: 1, 2, 3, 4, 5,
          6, 7, 8]'
        synonyms:
        - -D
        - --max-seq-dist
        args: !SimpleFlagArg
          name: max-seq-dist
        optional: true
      - !Flag
        description: 'Maximum hamming distance between the UMIs of any pair of reads
          in the same cluster. [default: 1]'
        synonyms:
        - -d
        - --max-umi-dist
        args: !SimpleFlagArg
          name: max-umi-dist
        optional: true
      - !Flag
        description: Standard deviation of expected insert size. Defines search space
          of the most likely overlap. (Required for calculating overlapping consensus
          only)
        synonyms:
        - -s
        - --std-dev
        args: !SimpleFlagArg
          name: std-dev
        optional: true
      - !Flag
        description: 'Length of UMI in read. [default: 8]'
        synonyms:
        - -l
        - --umi-len
        args: !SimpleFlagArg
          name: umi-len
        optional: true
      command:
      - rbt
      - collapse-reads-to-fragments
      - fastq
      parent: *id002
      subcommands: []
      help_flag: !Flag
        description: Prints help information
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag: !Flag
        description: Prints version information
        synonyms:
        - -V
        - --version
        args: !EmptyFlagArg {}
        optional: true
      help_text: "rbt-collapse-reads-to-fragments-fastq \nJohannes Köster <johannes.koester@uni-due.de>,\
        \ Henning Timm <henning.timm@tu-dortmund.de>, Felix Mölder\n<felix.moelder@uni-due.de>\n\
        Tool to merge sets of reads from paired FASTQ files that share the UMI and\
        \ have similar read sequence. The result is a\nmaximum likelihood fragment\
        \ sequence per set with base quality scores improved accordingly.\n\nTakes\
        \ two FASTQ files (forward and reverse) and returns two FASTQ files in which\
        \ all PCR duplicates have been merged\ninto a consensus read.\nDuplicates\
        \ are identified by a Unique Molecular Identifier (UMI).\n\nAssumptions:\n\
        \  - Reads are of equal length\n  - UMI is the prefix of the reads\n\nExample:\n\
        rbt collapse-reads-to-fragments fastq \\\n  reads_1.fq reads_2.fq \\    #\
        \ input files\n  merged_1.fq merged_2.fq \\  # output files\n  -l 13 \\  \
        \                  # length of UMI\n  -d 1 \\                     # max hamming\
        \ distance of UMIs within a cluster\n  -D 2 \\                     # max hamming\
        \ distance of sequences within a cluster\n  --umi-on-reverse           # UMI\
        \ is the prefix of the reverse read\n\n\n\nUSAGE:\n    rbt collapse-reads-to-fragments\
        \ fastq [FLAGS] [OPTIONS] <fq1> <fq2> <consensus-fq1> <consensus-fq2> [consensus-fq3]\n\
        \nFLAGS:\n    -h, --help                  Prints help information\n    -u,\
        \ --umi-on-reverse        Set if UMI is on reverse read\n    -V, --version\
        \               Prints version information\n        --verbose-read-names \
        \   Add list of reads that were merged for each consensus read. Note that\
        \ this can yield\n                                very long FASTQ name lines\
        \ which cannot be handled by some tools.\n\nOPTIONS:\n    -i, --insert-size\
        \ <insert-size>      Expected insert size of sequenced fragment (Required\
        \ for calculating\n                                         overlapping consensus\
        \ only)\n    -D, --max-seq-dist <max-seq-dist>    Maximum hamming distance\
        \ between the sequences of any pair of reads in the same\n               \
        \                          cluster. [default: 2]  [possible values: 1, 2,\
        \ 3, 4, 5, 6, 7, 8]\n    -d, --max-umi-dist <max-umi-dist>    Maximum hamming\
        \ distance between the UMIs of any pair of reads in the same\n           \
        \                              cluster. [default: 1]\n    -s, --std-dev <std-dev>\
        \              Standard deviation of expected insert size. Defines search\
        \ space of the most\n                                         likely overlap.\
        \ (Required for calculating overlapping consensus only)\n    -l, --umi-len\
        \ <umi-len>              Length of UMI in read. [default: 8]\n\nARGS:\n  \
        \  <fq1>              Input FASTQ file with forward reads.\n    <fq2>    \
        \          Input FASTQ file with reverse reads.\n    <consensus-fq1>    Output\
        \ FASTQ file with forward reads.\n    <consensus-fq2>    Output FASTQ file\
        \ with reverse reads.\n    <consensus-fq3>    Output FASTQ file for overlapping\
        \ consensus reads  (Required for calculating overlapping\n               \
        \        consensus only)\n"
      generated_using: *id003
    - !Command
      positional:
      - !Positional
        description: ''
        position: 0
        name: For
        optional: false
      - !Positional
        description: ''
        position: 1
        name: more
        optional: false
      - !Positional
        description: ''
        position: 2
        name: information
        optional: false
      - !Positional
        description: ''
        position: 3
        name: try
        optional: false
      named: []
      command:
      - rbt
      - collapse-reads-to-fragments
      - help
      parent: *id002
      subcommands: []
      help_flag: !Flag
        description: ''
        synonyms:
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "error: The subcommand '--help' wasn't recognized\n\nUSAGE:\n\trbt\
        \ collapse-reads-to-fragments help <subcommands>...\n\nFor more information\
        \ try --help\n"
      generated_using: *id003
    help_flag: !Flag
      description: Prints help information
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: Prints version information
      synonyms:
      - -V
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "rbt-collapse-reads-to-fragments \nJohannes Köster <johannes.koester@uni-due.de>,\
      \ Henning Timm <henning.timm@tu-dortmund.de>, Felix Mölder\n<felix.moelder@uni-due.de>\n\
      Tool to predict maximum likelihood fragment sequence from FASTQ or BAM files.\n\
      \nRequirements:\n  - starcode\n\n\n\nUSAGE:\n    rbt collapse-reads-to-fragments\
      \ [SUBCOMMAND]\n\nFLAGS:\n    -h, --help       Prints help information\n   \
      \ -V, --version    Prints version information\n\nSUBCOMMANDS:\n    bam     \
      \ Tool to merge sets of PCR duplicate reads from a BAM file into one maximum\
      \ likelihood fragment sequence\n             each with accordingly improved\
      \ base quality scores.\n             \n             Takes a BAM file and returns\
      \ a BAM file in which all PCR duplicates have been merged into a consensus\n\
      \             read.\n             Duplicates must be marked by Picard Tools\
      \ using the TAG_DUPLICATE_SET_MEMBERS option.\n             \n             Assumptions:\n\
      \               - Reads are of equal length\n               - Reads are marked\
      \ by Picard Tools\n             \n    fastq    Tool to merge sets of reads from\
      \ paired FASTQ files that share the UMI and have similar read sequence.\n  \
      \           The result is a maximum likelihood fragment sequence per set with\
      \ base quality scores improved\n             accordingly.\n             \n \
      \            Takes two FASTQ files (forward and reverse) and returns two FASTQ\
      \ files in which all PCR duplicates\n             have been merged into a consensus\
      \ read.\n             Duplicates are identified by a Unique Molecular Identifier\
      \ (UMI).\n             \n             Assumptions:\n               - Reads are\
      \ of equal length\n               - UMI is the prefix of the reads\n       \
      \      \n             Example:\n             rbt collapse-reads-to-fragments\
      \ fastq \\\n               reads_1.fq reads_2.fq \\    # input files\n     \
      \          merged_1.fq merged_2.fq \\  # output files\n               -l 13\
      \ \\                    # length of UMI\n               -d 1 \\            \
      \         # max hamming distance of UMIs within a cluster\n               -D\
      \ 2 \\                     # max hamming distance of sequences within a cluster\n\
      \               --umi-on-reverse           # UMI is the prefix of the reverse\
      \ read\n             \n    help     Prints this message or the help of the given\
      \ subcommand(s)\n"
    generated_using: *id003
  - *id004
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: chunks
      optional: true
    named: []
    command:
    - rbt
    - fastq-split
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: Prints help information
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: Prints version information
      synonyms:
      - -V
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "rbt-fastq-split \nJohannes Köster <johannes.koester@tu-dortmund.de>\n\
      Split FASTQ file from STDIN into N chunks.\n\nExample:\nrbt fastq-split A.fastq\
      \ B.fastq < test.fastq\n\n\n\nUSAGE:\n    rbt fastq-split [chunks]...\n\nFLAGS:\n\
      \    -h, --help       Prints help information\n    -V, --version    Prints version\
      \ information\n\nARGS:\n    <chunks>...    File name(s) for the chunks to create.\n"
    generated_using: *id003
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: vcf
      optional: false
    named:
    - !Flag
      description: 'url prefix for requesting interaction drugs by gene names. [default:
        http://dgidb.org/api/v2/interactions.json?genes=]'
      synonyms:
      - -p
      - --api-path
      args: !SimpleFlagArg
        name: api-path
      optional: true
    - !Flag
      description: 'Info field name to be used for annotation. [default: dgiDB_drugs]'
      synonyms:
      - -f
      - --field
      args: !SimpleFlagArg
        name: field
      optional: true
    - !Flag
      description: 'Number of genes to submit per api request. A lower value increases
        the number of api requests in return.  Too many requests could be rejected
        by the DGIdb server. [default: 500]'
      synonyms:
      - -g
      - --genes-per-request
      args: !SimpleFlagArg
        name: genes-per-request
      optional: true
    command:
    - rbt
    - vcf-annotate-dgidb
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: Prints help information
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: Prints version information
      synonyms:
      - -V
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "rbt-vcf-annotate-dgidb \nFelix Mölder <felix.moelder@uni-due.de>\n\
      Looks for interacting drugs in DGIdb and annotates them for every gene in every\
      \ record.\n\nExample:\n    rbt vcf-annotate-dgidb input.vcf > output.vcf\n\n\
      USAGE:\n    rbt vcf-annotate-dgidb [OPTIONS] <vcf>\n\nFLAGS:\n    -h, --help\
      \       Prints help information\n    -V, --version    Prints version information\n\
      \nOPTIONS:\n    -p, --api-path <api-path>\n            url prefix for requesting\
      \ interaction drugs by gene names. [default:\n            http://dgidb.org/api/v2/interactions.json?genes=]\n\
      \    -f, --field <field>                            Info field name to be used\
      \ for annotation. [default: dgiDB_drugs]\n    -g, --genes-per-request <genes-per-request>\n\
      \            Number of genes to submit per api request. A lower value increases\
      \ the number of api requests in return. \n            Too many requests could\
      \ be rejected by the DGIdb server.\n             [default: 500]\n\nARGS:\n \
      \   <vcf>    VCF/BCF file to be extended by dgidb drug entries\n"
    generated_using: *id003
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: vcf
      optional: false
    named:
    - !Flag
      description: 'Maximum distance between centres of two indels considered to match.
        [default: 20]'
      synonyms:
      - -d
      - --max-dist
      args: !SimpleFlagArg
        name: INT
      optional: true
    - !Flag
      description: 'Maximum difference between lengths of two indels. [default: 10]'
      synonyms:
      - -l
      - --max-len-diff
      args: !SimpleFlagArg
        name: INT
      optional: true
    command:
    - rbt
    - vcf-match
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: Prints help information
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: Prints version information
      synonyms:
      - -V
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "rbt-vcf-match \nJohannes Köster <johannes.koester@tu-dortmund.de>\n\
      Annotate for each variant in a VCF/BCF at STDIN whether it is contained in a\n\
      given second VCF/BCF. The matching is fuzzy for indels and exact for SNVs.\n\
      Results are printed as BCF to STDOUT, with an additional INFO tag MATCHING.\n\
      The two vcfs do not have to be sorted.\n\nExample:\nrbt vcf-match dbsnp.vcf\
      \ < calls.vcf | bcftools view\n\n\n\nUSAGE:\n    rbt vcf-match [OPTIONS] <vcf>\n\
      \nFLAGS:\n    -h, --help       Prints help information\n    -V, --version  \
      \  Prints version information\n\nOPTIONS:\n    -d, --max-dist <INT>        Maximum\
      \ distance between centres of two indels considered to match. [default: 20]\n\
      \    -l, --max-len-diff <INT>    Maximum difference between lengths of two indels.\
      \ [default: 10]\n\nARGS:\n    <vcf>    VCF/BCF file to match against.\n"
    generated_using: *id003
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: FLAGS
      optional: true
    named:
    - !Flag
      description: Display genotypes.
      synonyms:
      - -g
      - --genotypes
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '...     Select FORMAT tags.'
      synonyms:
      - -f
      - --fmt
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: '...    Select INFO tags.'
      synonyms:
      - -i
      - --info
      args: !SimpleFlagArg
        name: NAME
      optional: true
    command:
    - rbt
    - vcf-to-txt
    parent: *id001
    subcommands: []
    help_flag: !Flag
      description: Prints help information
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: Prints version information
      synonyms:
      - -V
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "rbt-vcf-to-txt \nJohannes Köster <johannes.koester@tu-dortmund.de>\n\
      Convert VCF/BCF file from STDIN to tab-separated TXT file at STDOUT.\nINFO and\
      \ FORMAT tags have to be selected explicitly.\n\nExample:\nrbt vcf-to-txt --genotypes\
      \ --fmt S --info T X SOMATIC < test.vcf > variant-table.txt\n\nThe resulting\
      \ table can be e.g. parsed with PANDAS in Python:\n\npd.read_table(\"variants.txt\"\
      , header=[0, 1])\n\n\n\nUSAGE:\n    rbt vcf-to-txt [FLAGS] [OPTIONS]\n\nFLAGS:\n\
      \    -g, --genotypes    Display genotypes.\n    -h, --help         Prints help\
      \ information\n    -V, --version      Prints version information\n\nOPTIONS:\n\
      \    -f, --fmt <NAME>...     Select FORMAT tags.\n    -i, --info <NAME>... \
      \   Select INFO tags.\n"
    generated_using: *id003
  help_flag: !Flag
    description: Prints help information
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag: !Flag
    description: Prints version information
    synonyms:
    - -V
    - --version
    args: !EmptyFlagArg {}
    optional: true
  help_text: "Rust-Bio-Tools 0.10.2\nJohannes Köster <johannes.koester@tu-dortmund.de>\n\
    A set of ultra-fast command line utilities for bioinformatics tasks based on Rust-Bio.\n\
    \nUSAGE:\n    rbt [FLAGS] <SUBCOMMAND>\n\nFLAGS:\n    -h, --help       Prints\
    \ help information\n    -V, --version    Prints version information\n    -v, --verbose\
    \    Verbose output.\n\nSUBCOMMANDS:\n    bam-depth                      Print\
    \ depth of BAM or CRAM file at given positions from STDIN (tab separated:\n  \
    \                                 chrom, pos).\n                             \
    \      \n                                   Usage:\n                         \
    \          $ rbt bam-depth test.bam < pos.txt > depth.txt\n                  \
    \                 \n                                   The positions file contains\
    \ the name of one reference sequence and one position\n                      \
    \             per line (tab separated).\n                                   Example:\n\
    \                                   \n                                   16\t\
    1\n                                   17\t38\n                               \
    \    17\t39\n                                   \n                           \
    \        Depths are written to stdout as tab-separated lines, similar to the positions\n\
    \                                   input.\n                                 \
    \  Example:\n                                   \n                           \
    \        16\t1\t0\n                                   17\t38\t14\n           \
    \                        17\t39\t13\n                                   \n   \
    \ collapse-reads-to-fragments    Tool to predict maximum likelihood fragment sequence\
    \ from FASTQ or BAM files.\n                                   \n            \
    \                       Requirements:\n                                     -\
    \ starcode\n                                   \n    fastq-filter            \
    \       Remove records from a FASTQ file (from STDIN), output to STDOUT.\n   \
    \                                \n                                   Example:\n\
    \                                   rbt fastq-filter ids.txt < test.fastq > filtered.fastq\n\
    \                                   \n    fastq-split                    Split\
    \ FASTQ file from STDIN into N chunks.\n                                   \n\
    \                                   Example:\n                               \
    \    rbt fastq-split A.fastq B.fastq < test.fastq\n                          \
    \         \n    help                           Prints this message or the help\
    \ of the given subcommand(s)\n    oncoprint                      Creates oncoprint\
    \ from given VCF/BCF files.\n                                   \n           \
    \                        Example:\n                                     rbt oncoprint\
    \ a=a.bcf b=b.bcf c=c.bcf > oncoprint.html\n    vcf-annotate-dgidb           \
    \  Looks for interacting drugs in DGIdb and annotates them for every gene in every\n\
    \                                   record.\n                                \
    \   \n                                   Example:\n                          \
    \             rbt vcf-annotate-dgidb input.vcf > output.vcf\n    vcf-baf     \
    \                   Annotate b-allele frequency for each single nucleotide variant\
    \ and sample.\n                                   \n                         \
    \          Example:\n                                   rbt vcf-baf < calls.bcf\
    \ > annotated.bcf\n                                   \n    vcf-fix-iupac-alleles\
    \          Convert any IUPAC codes in alleles into Ns (in order to comply with\
    \ VCF 4 specs).\n                                   Reads VCF/BCF from STDIN and\
    \ writes BCF to STDOUT.\n                                   \n               \
    \                    Example:\n                                   rbt vcf-fix-iupac-alleles\
    \ < test.vcf > fixed.bcf\n    vcf-match                      Annotate for each\
    \ variant in a VCF/BCF at STDIN whether it is contained in a\n               \
    \                    given second VCF/BCF. The matching is fuzzy for indels and\
    \ exact for SNVs.\n                                   Results are printed as BCF\
    \ to STDOUT, with an additional INFO tag MATCHING.\n                         \
    \          The two vcfs do not have to be sorted.\n                          \
    \         \n                                   Example:\n                    \
    \               rbt vcf-match dbsnp.vcf < calls.vcf | bcftools view\n        \
    \                           \n    vcf-to-txt                     Convert VCF/BCF\
    \ file from STDIN to tab-separated TXT file at STDOUT.\n                     \
    \              INFO and FORMAT tags have to be selected explicitly.\n        \
    \                           \n                                   Example:\n  \
    \                                 rbt vcf-to-txt --genotypes --fmt S --info T\
    \ X SOMATIC < test.vcf > variant-\n                                   table.txt\n\
    \                                   \n                                   The resulting\
    \ table can be e.g. parsed with PANDAS in Python:\n                          \
    \         \n                                   pd.read_table(\"variants.txt\"\
    , header=[0, 1])\n                                   \n"
  generated_using: *id003
subcommands: []
help_flag: !Flag
  description: Prints help information
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: Prints version information
  synonyms:
  - -V
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "rbt-fastq-filter \nErik Clarke <ecl@pennmedicine.upenn.edu>\nRemove records\
  \ from a FASTQ file (from STDIN), output to STDOUT.\n\nExample:\nrbt fastq-filter\
  \ ids.txt < test.fastq > filtered.fastq\n\n\n\nUSAGE:\n    rbt fastq-filter <ids>\n\
  \nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints\
  \ version information\n\nARGS:\n    <ids>    File with list of record IDs to remove,\
  \ one per line.\n"
generated_using: *id003
