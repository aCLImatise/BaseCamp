&id003 !Command
command:
- validateFiles
- rcc
positional: []
named:
- !Flag
  description: not a valid option
  synonyms:
  - -h
  args: !SimpleFlagArg
    name: is
  optional: true
parent: &id001 !Command
  command:
  - validateFiles
  positional: []
  named:
  - !Flag
    description: '='
    synonyms:
    - -type
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "If you have extra \"bedPlus\" fields, it's great to put a definition\n\
      of each field in a row in AutoSql format here. Applies to bed-related types."
    synonyms:
    - -as
    args: !SimpleFlagArg
      name: fields.as
    optional: true
  - !Flag
    description: "If set, expect fields to be tab separated, normally\nexpects white\
      \ space separator. Applies to bed-related types."
    synonyms:
    - -tab
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Specify DB containing chromInfo table to validate chrom names\n\
      and sizes"
    synonyms:
    - -chromDb
    args: !SimpleFlagArg
      name: db
    optional: true
  - !Flag
    description: Specify chromInfo file to validate chrom names and sizes
    synonyms:
    - -chromInfo
    args: !SimpleFlagArg
      name: file.txt
    optional: true
  - !Flag
    description: "Sequences include colorspace values [0-3] (can be used\nwith formats\
      \ such as tagAlign and pairedTagAlign)"
    synonyms:
    - -colorSpace
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Input is sorted by chrom, only affects types tagAlign and pairedTagAlign
    synonyms:
    - -isSorted
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Output report in filename.report
    synonyms:
    - -doReport
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Print version
    synonyms:
    - -version
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "REQUIRED to validate sequence mappings match the genome specified\n\
      in the .2bit file. (BAM, tagAlign, pairedTagAlign)"
    synonyms:
    - -genome
    args: !SimpleFlagArg
      name: path/to/hg18.2bit
    optional: true
  - !Flag
    description: N's do not count as a mismatch
    synonyms:
    - -nMatch
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Only check the first N bases of the sequence
    synonyms:
    - -matchFirst
    args: !SimpleFlagArg
      name: n
    optional: true
  - !Flag
    description: Maximum number of mismatches in sequence (or read pair)
    synonyms:
    - -mismatches
    args: !SimpleFlagArg
      name: n
    optional: true
  - !Flag
    description: Maximum total quality score at mismatching positions
    synonyms:
    - -mismatchTotalQuality
    args: !SimpleFlagArg
      name: n
    optional: true
  - !Flag
    description: "Check either pair dont exceed mismatch count if validating\npairedTagAlign\
      \ files (default is the total for the pair)"
    synonyms:
    - -mmPerPair
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Check mismatches in only one in 'n' lines (default=1, all)
    synonyms:
    - -mmCheckOneInN
    args: !SimpleFlagArg
      name: n
    optional: true
  - !Flag
    description: Allow chromosomes that aren't native in BAM's
    synonyms:
    - -allowOther
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Allow chromosomes that have the wrong length in BAM
    synonyms:
    - -allowBadLength
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Complement the query sequence on the minus strand (for testing BAM)
    synonyms:
    - -complementMinus
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Percentage of BAM alignments that must be compliant
    synonyms:
    - -bamPercent
    args: !SimpleFlagArg
      name: N.N
    optional: true
  - !Flag
    description: Private data so empty sequence is tolerated
    synonyms:
    - -privateData
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -options
    args: !EmptyFlagArg {}
    optional: true
  parent:
  subcommands:
  - !Command
    command:
    - validateFiles
    - csfasta
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: &id002
    - -h
  - !Command
    command:
    - validateFiles
    - csqual
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  - !Command
    command:
    - validateFiles
    - fasta
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  - !Command
    command:
    - validateFiles
    - gappedPeak
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  - !Command
    command:
    - validateFiles
    - bedGraph
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  - *id003
  - !Command
    command:
    - validateFiles
    - narrowPeak
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  - !Command
    command:
    - validateFiles
    - tagAlign
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  - !Command
    command:
    - validateFiles
    - idat
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  - !Command
    command:
    - validateFiles
    - fastq
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  - !Command
    command:
    - validateFiles
    - bigWig
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  - !Command
    command:
    - validateFiles
    - pairedTagAlign
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  - !Command
    command:
    - validateFiles
    - bam
    positional: []
    named:
    - !Flag
      description: not a valid option
      synonyms:
      - -h
      args: !SimpleFlagArg
        name: is
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "-h is not a valid option\n"
    generated_using: *id002
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "validateFiles - Validates the format of different genomic files.\n \
    \               Exits with a zero status for no errors detected and non-zero for\
    \ errors.\n                Uses filename 'stdin' to read from stdin.\n       \
    \         Automatically decompresses Files in .gz, .bz2, .zip, .Z format.\n  \
    \              Accepts multiple input files of the same type.\n              \
    \  Writes Error messages to stderr\nusage:\n   validateFiles -chromInfo=FILE -options\
    \ -type=FILE_TYPE file1 [file2 [...]]\n\n   -type=\n       fasta        : Fasta\
    \ files (only one line of sequence, and no quality scores)\n       fastq     \
    \   : Fasta with quality scores (see http://maq.sourceforge.net/fastq.shtml)\n\
    \       csfasta      : Colorspace fasta (implies -colorSpace)\n       csqual \
    \      : Colorspace quality (see link below)\n                      See http://marketing.appliedbiosystems.com/mk/submit/SOLID_KNOWLEDGE_RD?_JS=T&rd=dm\n\
    \       bam          : Binary Alignment/Map\n                      See http://samtools.sourceforge.net/SAM1.pdf\n\
    \       bigWig       : Big Wig\n                      See http://genome.ucsc.edu/goldenPath/help/bigWig.html\n\
    \       bedN[+P]     : BED N or BED N+ or BED N+P\n                      where\
    \ N is a number between 3 and 15 of standard BED columns,\n                  \
    \    optional + indicates the presence of additional columns\n               \
    \       and P is the number of addtional columns\n                      Examples:\
    \ -type=bed6 or -type=bed6+ or -type=bed6+3 \n                      See http://genome.ucsc.edu/FAQ/FAQformat.html#format1\n\
    \       bigBedN[+P]  : bigBED N  or bigBED N+ or bigBED N+P, similar to BED\n\
    \                      See http://genome.ucsc.edu/goldenPath/help/bigBed.html\n\
    \       tagAlign     : Alignment files, replaced with BAM\n       pairedTagAlign\
    \  \n       broadPeak    : ENCODE Peak formats\n       narrowPeak     These are\
    \ specialized bedN+P formats.\n       gappedPeak     See http://genomewiki.soe.ucsc.edu/EncodeDCC/index.php/File_Formats\n\
    \       bedGraph    :  BED Graph\n       rcc         :  NanoString RCC\n     \
    \  idat        :  Illumina IDAT\n\n   -as=fields.as                If you have\
    \ extra \"bedPlus\" fields, it's great to put a definition\n                 \
    \               of each field in a row in AutoSql format here. Applies to bed-related\
    \ types.\n   -tab                         If set, expect fields to be tab separated,\
    \ normally\n                                expects white space separator. Applies\
    \ to bed-related types.\n   -chromDb=db                  Specify DB containing\
    \ chromInfo table to validate chrom names\n                                and\
    \ sizes\n   -chromInfo=file.txt          Specify chromInfo file to validate chrom\
    \ names and sizes\n   -colorSpace                  Sequences include colorspace\
    \ values [0-3] (can be used \n                                with formats such\
    \ as tagAlign and pairedTagAlign)\n   -isSorted                    Input is sorted\
    \ by chrom, only affects types tagAlign and pairedTagAlign\n   -doReport     \
    \               Output report in filename.report\n   -version                \
    \     Print version\n\nFor Alignment validations\n   -genome=path/to/hg18.2bit\
    \    REQUIRED to validate sequence mappings match the genome specified\n     \
    \                           in the .2bit file. (BAM, tagAlign, pairedTagAlign)\n\
    \   -nMatch                      N's do not count as a mismatch\n   -matchFirst=n\
    \                Only check the first N bases of the sequence\n   -mismatches=n\
    \                Maximum number of mismatches in sequence (or read pair) \n  \
    \ -mismatchTotalQuality=n      Maximum total quality score at mismatching positions\n\
    \   -mmPerPair                   Check either pair dont exceed mismatch count\
    \ if validating\n                                  pairedTagAlign files (default\
    \ is the total for the pair)\n   -mmCheckOneInN=n             Check mismatches\
    \ in only one in 'n' lines (default=1, all)\n   -allowOther                  Allow\
    \ chromosomes that aren't native in BAM's\n   -allowBadLength              Allow\
    \ chromosomes that have the wrong length in BAM\n   -complementMinus         \
    \    Complement the query sequence on the minus strand (for testing BAM)\n   -bamPercent=N.N\
    \              Percentage of BAM alignments that must be compliant\n   -privateData\
    \                 Private data so empty sequence is tolerated\n\n\n"
  generated_using: []
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "-h is not a valid option\n"
generated_using: *id002
