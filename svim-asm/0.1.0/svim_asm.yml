&id001 !Command
command:
- svim-asm
positional: []
named: []
parent:
subcommands:
- !Command
  command:
  - svim-asm
  - haploid
  positional:
  - !Positional
    description: "Working and output directory. Existing files in the\ndirectory are\
      \ overwritten. If the directory does not\nexist, it is created."
    position: 0
    name: working_dir
    optional: false
  - !Positional
    description: "SAM/BAM file with alignment of query assembly to\nreference assembly\
      \ (needs to be coordinate-sorted)"
    position: 1
    name: bam_file
    optional: false
  - !Positional
    description: "Reference genome file that the assembly was aligned to\n(FASTA)"
    position: 2
    name: genome
    optional: false
  named:
  - !Flag
    description: "Minimum mapping quality of alignments to consider\n(default: 20).\
      \ Alignments with a lower mapping quality\nare ignored."
    synonyms:
    - --min_mapq
    args: !SimpleFlagArg
      name: MIN_MAPQ
    optional: true
  - !Flag
    description: "Minimum SV size to detect (default: 40). SVIM can\npotentially detect\
      \ events of any size but is limited\nby the signal-to-noise ratio in the input\
      \ alignments.\nThat means that more accurate assemblies and\nalignments enable\
      \ the detection of smaller events."
    synonyms:
    - --min_sv_size
    args: !SimpleFlagArg
      name: MIN_SV_SIZE
    optional: true
  - !Flag
    description: "Maximum SV size to detect (default: 100000). This\nparameter is\
      \ used to distinguish long deletions (and\ninversions) from translocations which\
      \ cannot be\ndistinguished from the alignment alone. Split read\nsegments mapping\
      \ far apart on the reference could\neither indicate a very long deletion (inversion)\
      \ or a\ntranslocation breakpoint. SVIM calls a translocation\nbreakpoint if\
      \ the mapping distance is larger than this\nparameter and a deletion (or inversion)\
      \ if it is\nsmaller or equal."
    synonyms:
    - --max_sv_size
    args: !SimpleFlagArg
      name: MAX_SV_SIZE
    optional: true
  - !Flag
    description: "Maximum tolerated gap between adjacent alignment\nsegments on the\
      \ query (default: 50). Example:\nDeletions are detected from two subsequent\
      \ segments of\na split query sequence that are mapped far apart from\neach other\
      \ on the reference. The query gap tolerance\ndetermines the maximum tolerated\
      \ length of the query\ngap between both segments. If there is an unaligned\n\
      query segment larger than this value between the two\nsegments, no deletion\
      \ is called."
    synonyms:
    - --query_gap_tolerance
    args: !SimpleFlagArg
      name: QUERY_GAP_TOLERANCE
    optional: true
  - !Flag
    description: "Maximum tolerated overlap between adjacent alignment\nsegments on\
      \ the query (default: 50). Example:\nDeletions are detected from two subsequent\
      \ segments of\na split query sequence that are mapped far apart from\neach other\
      \ on the reference. The query overlap\ntolerance determines the maximum tolerated\
      \ length of\nan overlap between both segments in the query. If the\noverlap\
      \ between the two segments in the query is\nlarger than this value, no deletion\
      \ is called."
    synonyms:
    - --query_overlap_tolerance
    args: !SimpleFlagArg
      name: QUERY_OVERLAP_TOLERANCE
    optional: true
  - !Flag
    description: "Maximum tolerated gap between adjacent alignment\nsegments on the\
      \ reference (default: 50). Example:\nInsertions are detected from two segments\
      \ of a split\nquery sequence that are mapped right next to each\nother on the\
      \ reference but with unaligned sequence\nbetween them on the query. The reference\
      \ gap tolerance\ndetermines the maximum tolerated length of the\nreference gap\
      \ between both segments. If there is a\nreference gap larger than this value\
      \ between the two\nsegments, no insertion is called."
    synonyms:
    - --reference_gap_tolerance
    args: !SimpleFlagArg
      name: REFERENCE_GAP_TOLERANCE
    optional: true
  - !Flag
    description: "Maximum tolerated overlap between adjacent alignment\nsegments on\
      \ the reference (default: 50). Example:\nInsertions are detected from two segments\
      \ of a split\nquery sequence that are mapped right next to each\nother on the\
      \ reference but with unaligned sequence\nbetween them on the query. The reference\
      \ overlap\ntolerance determines the maximum tolerated length of\nan overlap\
      \ between both segments on the reference. If\nthere is a reference gap larger\
      \ than this value\nbetween the two segments, no insertion is called."
    synonyms:
    - --reference_overlap_tolerance
    args: !SimpleFlagArg
      name: REFERENCE_OVERLAP_TOLERANCE
    optional: true
  - !Flag
    description: "Sample ID to include in output vcf file (default:\nSample)"
    synonyms:
    - --sample
    args: !SimpleFlagArg
      name: SAMPLE
    optional: true
  - !Flag
    description: "SV types to include in output VCF (default:\nDEL,INS,INV,DUP_TAN,DUP_INT,BND).\
      \ Give a comma-\nseparated list of SV types. The possible SV types are:\nDEL\
      \ (deletions), INS (novel insertions), INV\n(inversions), DUP_TAN (tandem duplications),\
      \ DUP_INT\n(interspersed duplications), BND (breakends)."
    synonyms:
    - --types
    args: !SimpleFlagArg
      name: TYPES
    optional: true
  - !Flag
    description: "Use symbolic alleles, such as <DEL> or <INV> in the\nVCF output\
      \ (default: False). By default, deletions,\ninsertions, and inversions are represented\
      \ by their\nnucleotide sequence in the output VCF."
    synonyms:
    - --symbolic_alleles
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Represent tandem and interspersed duplications as\ninsertions in\
      \ output VCF (default: False). By default,\nduplications are represented by\
      \ the SVTYPE=DUP and the\ngenomic source is given by the POS and END tags. When\n\
      enabling this option, duplications are instead\nrepresented by the SVTYPE=INS\
      \ and POS and END both\ngive the insertion point of the duplication."
    synonyms:
    - --duplications_as_insertions
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Output names of supporting query sequences in INFO tag\nof VCF (default:\
      \ False). If enabled, the INFO/READS\ntag contains the list of names of the\
      \ supporting query\nsequences.\n"
    synonyms:
    - --query_names
    args: !EmptyFlagArg {}
    optional: true
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: svim-asm haploid [-h] [--min_mapq MIN_MAPQ] [--min_sv_size MIN_SV_SIZE]\n\
    \                        [--max_sv_size MAX_SV_SIZE]\n                       \
    \ [--query_gap_tolerance QUERY_GAP_TOLERANCE]\n                        [--query_overlap_tolerance\
    \ QUERY_OVERLAP_TOLERANCE]\n                        [--reference_gap_tolerance\
    \ REFERENCE_GAP_TOLERANCE]\n                        [--reference_overlap_tolerance\
    \ REFERENCE_OVERLAP_TOLERANCE]\n                        [--sample SAMPLE] [--types\
    \ TYPES] [--symbolic_alleles]\n                        [--duplications_as_insertions]\
    \ [--query_names]\n                        working_dir bam_file genome\n\npositional\
    \ arguments:\n  working_dir           Working and output directory. Existing files\
    \ in the\n                        directory are overwritten. If the directory\
    \ does not\n                        exist, it is created.\n  bam_file        \
    \      SAM/BAM file with alignment of query assembly to\n                    \
    \    reference assembly (needs to be coordinate-sorted)\n  genome            \
    \    Reference genome file that the assembly was aligned to\n                \
    \        (FASTA)\n\noptional arguments:\n  -h, --help            show this help\
    \ message and exit\n\nCOLLECT:\n  --min_mapq MIN_MAPQ   Minimum mapping quality\
    \ of alignments to consider\n                        (default: 20). Alignments\
    \ with a lower mapping quality\n                        are ignored.\n  --min_sv_size\
    \ MIN_SV_SIZE\n                        Minimum SV size to detect (default: 40).\
    \ SVIM can\n                        potentially detect events of any size but\
    \ is limited\n                        by the signal-to-noise ratio in the input\
    \ alignments.\n                        That means that more accurate assemblies\
    \ and\n                        alignments enable the detection of smaller events.\n\
    \  --max_sv_size MAX_SV_SIZE\n                        Maximum SV size to detect\
    \ (default: 100000). This\n                        parameter is used to distinguish\
    \ long deletions (and\n                        inversions) from translocations\
    \ which cannot be\n                        distinguished from the alignment alone.\
    \ Split read\n                        segments mapping far apart on the reference\
    \ could\n                        either indicate a very long deletion (inversion)\
    \ or a\n                        translocation breakpoint. SVIM calls a translocation\n\
    \                        breakpoint if the mapping distance is larger than this\n\
    \                        parameter and a deletion (or inversion) if it is\n  \
    \                      smaller or equal.\n  --query_gap_tolerance QUERY_GAP_TOLERANCE\n\
    \                        Maximum tolerated gap between adjacent alignment\n  \
    \                      segments on the query (default: 50). Example:\n       \
    \                 Deletions are detected from two subsequent segments of\n   \
    \                     a split query sequence that are mapped far apart from\n\
    \                        each other on the reference. The query gap tolerance\n\
    \                        determines the maximum tolerated length of the query\n\
    \                        gap between both segments. If there is an unaligned\n\
    \                        query segment larger than this value between the two\n\
    \                        segments, no deletion is called.\n  --query_overlap_tolerance\
    \ QUERY_OVERLAP_TOLERANCE\n                        Maximum tolerated overlap between\
    \ adjacent alignment\n                        segments on the query (default:\
    \ 50). Example:\n                        Deletions are detected from two subsequent\
    \ segments of\n                        a split query sequence that are mapped\
    \ far apart from\n                        each other on the reference. The query\
    \ overlap\n                        tolerance determines the maximum tolerated\
    \ length of\n                        an overlap between both segments in the query.\
    \ If the\n                        overlap between the two segments in the query\
    \ is\n                        larger than this value, no deletion is called.\n\
    \  --reference_gap_tolerance REFERENCE_GAP_TOLERANCE\n                       \
    \ Maximum tolerated gap between adjacent alignment\n                        segments\
    \ on the reference (default: 50). Example:\n                        Insertions\
    \ are detected from two segments of a split\n                        query sequence\
    \ that are mapped right next to each\n                        other on the reference\
    \ but with unaligned sequence\n                        between them on the query.\
    \ The reference gap tolerance\n                        determines the maximum\
    \ tolerated length of the\n                        reference gap between both\
    \ segments. If there is a\n                        reference gap larger than this\
    \ value between the two\n                        segments, no insertion is called.\n\
    \  --reference_overlap_tolerance REFERENCE_OVERLAP_TOLERANCE\n               \
    \         Maximum tolerated overlap between adjacent alignment\n             \
    \           segments on the reference (default: 50). Example:\n              \
    \          Insertions are detected from two segments of a split\n            \
    \            query sequence that are mapped right next to each\n             \
    \           other on the reference but with unaligned sequence\n             \
    \           between them on the query. The reference overlap\n               \
    \         tolerance determines the maximum tolerated length of\n             \
    \           an overlap between both segments on the reference. If\n          \
    \              there is a reference gap larger than this value\n             \
    \           between the two segments, no insertion is called.\n\nOUTPUT:\n  --sample\
    \ SAMPLE       Sample ID to include in output vcf file (default:\n           \
    \             Sample)\n  --types TYPES         SV types to include in output VCF\
    \ (default:\n                        DEL,INS,INV,DUP_TAN,DUP_INT,BND). Give a\
    \ comma-\n                        separated list of SV types. The possible SV\
    \ types are:\n                        DEL (deletions), INS (novel insertions),\
    \ INV\n                        (inversions), DUP_TAN (tandem duplications), DUP_INT\n\
    \                        (interspersed duplications), BND (breakends).\n  --symbolic_alleles\
    \    Use symbolic alleles, such as <DEL> or <INV> in the\n                   \
    \     VCF output (default: False). By default, deletions,\n                  \
    \      insertions, and inversions are represented by their\n                 \
    \       nucleotide sequence in the output VCF.\n  --duplications_as_insertions\n\
    \                        Represent tandem and interspersed duplications as\n \
    \                       insertions in output VCF (default: False). By default,\n\
    \                        duplications are represented by the SVTYPE=DUP and the\n\
    \                        genomic source is given by the POS and END tags. When\n\
    \                        enabling this option, duplications are instead\n    \
    \                    represented by the SVTYPE=INS and POS and END both\n    \
    \                    give the insertion point of the duplication.\n  --query_names\
    \         Output names of supporting query sequences in INFO tag\n           \
    \             of VCF (default: False). If enabled, the INFO/READS\n          \
    \              tag contains the list of names of the supporting query\n      \
    \                  sequences.\n"
  generated_using: &id002
  - --help
- !Command
  command:
  - svim-asm
  - diploid
  positional:
  - !Positional
    description: "Working and output directory. Existing files in the\ndirectory are\
      \ overwritten. If the directory does not\nexist, it is created."
    position: 0
    name: working_dir
    optional: false
  - !Positional
    description: "SAM/BAM file with alignment of query assembly's first\nhaplotype\
      \ to reference assembly (needs to be\ncoordinate-sorted)"
    position: 1
    name: bam_file1
    optional: false
  - !Positional
    description: "SAM/BAM file with alignment of query assembly's second\nhaplotype\
      \ to reference assembly (needs to be\ncoordinate-sorted)"
    position: 2
    name: bam_file2
    optional: false
  - !Positional
    description: "Reference genome file that the assembly was aligned to\n(FASTA)"
    position: 3
    name: genome
    optional: false
  named:
  - !Flag
    description: "Minimum mapping quality of alignments to consider\n(default: 20).\
      \ Alignments with a lower mapping quality\nare ignored."
    synonyms:
    - --min_mapq
    args: !SimpleFlagArg
      name: MIN_MAPQ
    optional: true
  - !Flag
    description: "Minimum SV size to detect (default: 40). SVIM can\npotentially detect\
      \ events of any size but is limited\nby the signal-to-noise ratio in the input\
      \ alignments.\nThat means that more accurate assemblies and\nalignments enable\
      \ the detection of smaller events."
    synonyms:
    - --min_sv_size
    args: !SimpleFlagArg
      name: MIN_SV_SIZE
    optional: true
  - !Flag
    description: "Maximum SV size to detect (default: 100000). This\nparameter is\
      \ used to distinguish long deletions (and\ninversions) from translocations which\
      \ cannot be\ndistinguished from the alignment alone. Split read\nsegments mapping\
      \ far apart on the reference could\neither indicate a very long deletion (inversion)\
      \ or a\ntranslocation breakpoint. SVIM calls a translocation\nbreakpoint if\
      \ the mapping distance is larger than this\nparameter and a deletion (or inversion)\
      \ if it is\nsmaller or equal."
    synonyms:
    - --max_sv_size
    args: !SimpleFlagArg
      name: MAX_SV_SIZE
    optional: true
  - !Flag
    description: "Maximum tolerated gap between adjacent alignment\nsegments on the\
      \ query (default: 50). Example:\nDeletions are detected from two subsequent\
      \ segments of\na split query sequence that are mapped far apart from\neach other\
      \ on the reference. The query gap tolerance\ndetermines the maximum tolerated\
      \ length of the query\ngap between both segments. If there is an unaligned\n\
      query segment larger than this value between the two\nsegments, no deletion\
      \ is called."
    synonyms:
    - --query_gap_tolerance
    args: !SimpleFlagArg
      name: QUERY_GAP_TOLERANCE
    optional: true
  - !Flag
    description: "Maximum tolerated overlap between adjacent alignment\nsegments on\
      \ the query (default: 50). Example:\nDeletions are detected from two subsequent\
      \ segments of\na split query sequence that are mapped far apart from\neach other\
      \ on the reference. The query overlap\ntolerance determines the maximum tolerated\
      \ length of\nan overlap between both segments in the query. If the\noverlap\
      \ between the two segments in the query is\nlarger than this value, no deletion\
      \ is called."
    synonyms:
    - --query_overlap_tolerance
    args: !SimpleFlagArg
      name: QUERY_OVERLAP_TOLERANCE
    optional: true
  - !Flag
    description: "Maximum tolerated gap between adjacent alignment\nsegments on the\
      \ reference (default: 50). Example:\nInsertions are detected from two segments\
      \ of a split\nquery sequence that are mapped right next to each\nother on the\
      \ reference but with unaligned sequence\nbetween them on the query. The reference\
      \ gap tolerance\ndetermines the maximum tolerated length of the\nreference gap\
      \ between both segments. If there is a\nreference gap larger than this value\
      \ between the two\nsegments, no insertion is called."
    synonyms:
    - --reference_gap_tolerance
    args: !SimpleFlagArg
      name: REFERENCE_GAP_TOLERANCE
    optional: true
  - !Flag
    description: "Maximum tolerated overlap between adjacent alignment\nsegments on\
      \ the reference (default: 50). Example:\nInsertions are detected from two segments\
      \ of a split\nquery sequence that are mapped right next to each\nother on the\
      \ reference but with unaligned sequence\nbetween them on the query. The reference\
      \ overlap\ntolerance determines the maximum tolerated length of\nan overlap\
      \ between both segments on the reference. If\nthere is a reference gap larger\
      \ than this value\nbetween the two segments, no insertion is called."
    synonyms:
    - --reference_overlap_tolerance
    args: !SimpleFlagArg
      name: REFERENCE_OVERLAP_TOLERANCE
    optional: true
  - !Flag
    description: "Maximum edit distance between both alleles to be\npaired up into\
      \ a homozygous call (default: 200)."
    synonyms:
    - --max_edit_distance
    args: !SimpleFlagArg
      name: MAX_EDIT_DISTANCE
    optional: true
  - !Flag
    description: "Sample ID to include in output vcf file (default:\nSample)"
    synonyms:
    - --sample
    args: !SimpleFlagArg
      name: SAMPLE
    optional: true
  - !Flag
    description: "SV types to include in output VCF (default:\nDEL,INS,INV,DUP_TAN,DUP_INT,BND).\
      \ Give a comma-\nseparated list of SV types. The possible SV types are:\nDEL\
      \ (deletions), INS (novel insertions), INV\n(inversions), DUP_TAN (tandem duplications),\
      \ DUP_INT\n(interspersed duplications), BND (breakends)."
    synonyms:
    - --types
    args: !SimpleFlagArg
      name: TYPES
    optional: true
  - !Flag
    description: "Use symbolic alleles, such as <DEL> or <INV> in the\nVCF output\
      \ (default: False). By default, deletions,\ninsertions, and inversions are represented\
      \ by their\nnucleotide sequence in the output VCF."
    synonyms:
    - --symbolic_alleles
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Represent tandem and interspersed duplications as\ninsertions in\
      \ output VCF (default: False). By default,\nduplications are represented by\
      \ the SVTYPE=DUP and the\ngenomic source is given by the POS and END tags. When\n\
      enabling this option, duplications are instead\nrepresented by the SVTYPE=INS\
      \ and POS and END both\ngive the insertion point of the duplication."
    synonyms:
    - --duplications_as_insertions
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Output names of supporting query sequences in INFO tag\nof VCF (default:\
      \ False). If enabled, the INFO/READS\ntag contains the list of names of the\
      \ supporting query\nsequences.\n"
    synonyms:
    - --query_names
    args: !EmptyFlagArg {}
    optional: true
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: svim-asm diploid [-h] [--min_mapq MIN_MAPQ] [--min_sv_size MIN_SV_SIZE]\n\
    \                        [--max_sv_size MAX_SV_SIZE]\n                       \
    \ [--query_gap_tolerance QUERY_GAP_TOLERANCE]\n                        [--query_overlap_tolerance\
    \ QUERY_OVERLAP_TOLERANCE]\n                        [--reference_gap_tolerance\
    \ REFERENCE_GAP_TOLERANCE]\n                        [--reference_overlap_tolerance\
    \ REFERENCE_OVERLAP_TOLERANCE]\n                        [--max_edit_distance MAX_EDIT_DISTANCE]\n\
    \                        [--sample SAMPLE] [--types TYPES] [--symbolic_alleles]\n\
    \                        [--duplications_as_insertions] [--query_names]\n    \
    \                    working_dir bam_file1 bam_file2 genome\n\npositional arguments:\n\
    \  working_dir           Working and output directory. Existing files in the\n\
    \                        directory are overwritten. If the directory does not\n\
    \                        exist, it is created.\n  bam_file1             SAM/BAM\
    \ file with alignment of query assembly's first\n                        haplotype\
    \ to reference assembly (needs to be\n                        coordinate-sorted)\n\
    \  bam_file2             SAM/BAM file with alignment of query assembly's second\n\
    \                        haplotype to reference assembly (needs to be\n      \
    \                  coordinate-sorted)\n  genome                Reference genome\
    \ file that the assembly was aligned to\n                        (FASTA)\n\noptional\
    \ arguments:\n  -h, --help            show this help message and exit\n\nCOLLECT:\n\
    \  --min_mapq MIN_MAPQ   Minimum mapping quality of alignments to consider\n \
    \                       (default: 20). Alignments with a lower mapping quality\n\
    \                        are ignored.\n  --min_sv_size MIN_SV_SIZE\n         \
    \               Minimum SV size to detect (default: 40). SVIM can\n          \
    \              potentially detect events of any size but is limited\n        \
    \                by the signal-to-noise ratio in the input alignments.\n     \
    \                   That means that more accurate assemblies and\n           \
    \             alignments enable the detection of smaller events.\n  --max_sv_size\
    \ MAX_SV_SIZE\n                        Maximum SV size to detect (default: 100000).\
    \ This\n                        parameter is used to distinguish long deletions\
    \ (and\n                        inversions) from translocations which cannot be\n\
    \                        distinguished from the alignment alone. Split read\n\
    \                        segments mapping far apart on the reference could\n \
    \                       either indicate a very long deletion (inversion) or a\n\
    \                        translocation breakpoint. SVIM calls a translocation\n\
    \                        breakpoint if the mapping distance is larger than this\n\
    \                        parameter and a deletion (or inversion) if it is\n  \
    \                      smaller or equal.\n  --query_gap_tolerance QUERY_GAP_TOLERANCE\n\
    \                        Maximum tolerated gap between adjacent alignment\n  \
    \                      segments on the query (default: 50). Example:\n       \
    \                 Deletions are detected from two subsequent segments of\n   \
    \                     a split query sequence that are mapped far apart from\n\
    \                        each other on the reference. The query gap tolerance\n\
    \                        determines the maximum tolerated length of the query\n\
    \                        gap between both segments. If there is an unaligned\n\
    \                        query segment larger than this value between the two\n\
    \                        segments, no deletion is called.\n  --query_overlap_tolerance\
    \ QUERY_OVERLAP_TOLERANCE\n                        Maximum tolerated overlap between\
    \ adjacent alignment\n                        segments on the query (default:\
    \ 50). Example:\n                        Deletions are detected from two subsequent\
    \ segments of\n                        a split query sequence that are mapped\
    \ far apart from\n                        each other on the reference. The query\
    \ overlap\n                        tolerance determines the maximum tolerated\
    \ length of\n                        an overlap between both segments in the query.\
    \ If the\n                        overlap between the two segments in the query\
    \ is\n                        larger than this value, no deletion is called.\n\
    \  --reference_gap_tolerance REFERENCE_GAP_TOLERANCE\n                       \
    \ Maximum tolerated gap between adjacent alignment\n                        segments\
    \ on the reference (default: 50). Example:\n                        Insertions\
    \ are detected from two segments of a split\n                        query sequence\
    \ that are mapped right next to each\n                        other on the reference\
    \ but with unaligned sequence\n                        between them on the query.\
    \ The reference gap tolerance\n                        determines the maximum\
    \ tolerated length of the\n                        reference gap between both\
    \ segments. If there is a\n                        reference gap larger than this\
    \ value between the two\n                        segments, no insertion is called.\n\
    \  --reference_overlap_tolerance REFERENCE_OVERLAP_TOLERANCE\n               \
    \         Maximum tolerated overlap between adjacent alignment\n             \
    \           segments on the reference (default: 50). Example:\n              \
    \          Insertions are detected from two segments of a split\n            \
    \            query sequence that are mapped right next to each\n             \
    \           other on the reference but with unaligned sequence\n             \
    \           between them on the query. The reference overlap\n               \
    \         tolerance determines the maximum tolerated length of\n             \
    \           an overlap between both segments on the reference. If\n          \
    \              there is a reference gap larger than this value\n             \
    \           between the two segments, no insertion is called.\n\nPAIR:\n  --max_edit_distance\
    \ MAX_EDIT_DISTANCE\n                        Maximum edit distance between both\
    \ alleles to be\n                        paired up into a homozygous call (default:\
    \ 200).\n\nOUTPUT:\n  --sample SAMPLE       Sample ID to include in output vcf\
    \ file (default:\n                        Sample)\n  --types TYPES         SV\
    \ types to include in output VCF (default:\n                        DEL,INS,INV,DUP_TAN,DUP_INT,BND).\
    \ Give a comma-\n                        separated list of SV types. The possible\
    \ SV types are:\n                        DEL (deletions), INS (novel insertions),\
    \ INV\n                        (inversions), DUP_TAN (tandem duplications), DUP_INT\n\
    \                        (interspersed duplications), BND (breakends).\n  --symbolic_alleles\
    \    Use symbolic alleles, such as <DEL> or <INV> in the\n                   \
    \     VCF output (default: False). By default, deletions,\n                  \
    \      insertions, and inversions are represented by their\n                 \
    \       nucleotide sequence in the output VCF.\n  --duplications_as_insertions\n\
    \                        Represent tandem and interspersed duplications as\n \
    \                       insertions in output VCF (default: False). By default,\n\
    \                        duplications are represented by the SVTYPE=DUP and the\n\
    \                        genomic source is given by the POS and END tags. When\n\
    \                        enabling this option, duplications are instead\n    \
    \                    represented by the SVTYPE=INS and POS and END both\n    \
    \                    give the insertion point of the duplication.\n  --query_names\
    \         Output names of supporting query sequences in INFO tag\n           \
    \             of VCF (default: False). If enabled, the INFO/READS\n          \
    \              tag contains the list of names of the supporting query\n      \
    \                  sequences.\n"
  generated_using: *id002
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: show program's version number and exit
  synonyms:
  - --version
  - -v
  args: !EmptyFlagArg {}
  optional: true
help_text: "usage: svim-asm [-h] [--version] {haploid,diploid} ...\n\nSVIM-asm (pronounced\
  \ SWIM-assem) is a structural variant caller for genome-genome alignments. \nIt\
  \ discriminates five different variant classes: deletions, insertions, tandem and\
  \ interspersed duplications and inversions.\nSVIM-asm analyzes alignments between\
  \ a haploid or diploid query assembly and a reference assembly in SAM/BAM format.\
  \ \nWe recommend to produce the alignments using minimap2.\n\nSVIM-asm has an haploid\
  \ and a diploid mode depending on the input assembly and performs the following\
  \ steps:\n- COLLECT detects SVs from genome-genome alignments in BAM format\n- PAIR\
  \ merges the SV calls from the two haplotypes of a diploid assembly (diploid mode\
  \ only)\n- OUTPUT prints the found SVs in VCF format\n\npositional arguments:\n\
  \  {haploid,diploid}  modes\n    haploid          Detect SVs from the alignment\
  \ of an haploid query\n                     assembly to a reference assembly\n \
  \   diploid          Detect SVs from the alignment of a diploid query assembly\n\
  \                     to a reference assembly\n\noptional arguments:\n  -h, --help\
  \         show this help message and exit\n  --version, -v      show program's version\
  \ number and exit\n"
generated_using: *id002
