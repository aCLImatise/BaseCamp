version 1.0

task HpBuildTreeNG {
  input {
    String? seqs
    File? in_type
    String? output_name
    Directory? outdir
    File? model
    Boolean? all
    Int? branch_length
    String? con_sense
    String? rand_tree
    String? pars_tree
    File? user_tree
    Boolean? search
    Boolean? search_one_random
    String? constraint_tree
    String? out_group
    Boolean? bs_converge
    Boolean? bs_msa
    Int? bs_trees
    String? bs_tree_cut_off
    String? bs_metric
    Boolean? bootstrap
    Boolean? check
    String? log
    Boolean? log_lh
    Boolean? terrace
    Int? seed
    Boolean? redo
    Boolean? keep_tmp
    Boolean? quiet
    File? log_file
    Int? n_cpu
    Boolean? debug
  }
  command <<<
    hp_build_tree_NG \
      ~{if defined(seqs) then ("--seqs " +  '"' + seqs + '"') else ""} \
      ~{if defined(in_type) then ("--in_type " +  '"' + in_type + '"') else ""} \
      ~{if defined(output_name) then ("--output_name " +  '"' + output_name + '"') else ""} \
      ~{if defined(outdir) then ("--outdir " +  '"' + outdir + '"') else ""} \
      ~{if defined(model) then ("--model " +  '"' + model + '"') else ""} \
      ~{if (all) then "--all" else ""} \
      ~{if defined(branch_length) then ("--branch_length " +  '"' + branch_length + '"') else ""} \
      ~{if defined(con_sense) then ("--consense " +  '"' + con_sense + '"') else ""} \
      ~{if defined(rand_tree) then ("--rand_tree " +  '"' + rand_tree + '"') else ""} \
      ~{if defined(pars_tree) then ("--pars_tree " +  '"' + pars_tree + '"') else ""} \
      ~{if defined(user_tree) then ("--user_tree " +  '"' + user_tree + '"') else ""} \
      ~{if (search) then "--search" else ""} \
      ~{if (search_one_random) then "--search_1random" else ""} \
      ~{if defined(constraint_tree) then ("--constraint_tree " +  '"' + constraint_tree + '"') else ""} \
      ~{if defined(out_group) then ("--outgroup " +  '"' + out_group + '"') else ""} \
      ~{if (bs_converge) then "--bsconverge" else ""} \
      ~{if (bs_msa) then "--bs_msa" else ""} \
      ~{if defined(bs_trees) then ("--bs_trees " +  '"' + bs_trees + '"') else ""} \
      ~{if defined(bs_tree_cut_off) then ("--bs_tree_cutoff " +  '"' + bs_tree_cut_off + '"') else ""} \
      ~{if defined(bs_metric) then ("--bs_metric " +  '"' + bs_metric + '"') else ""} \
      ~{if (bootstrap) then "--bootstrap" else ""} \
      ~{if (check) then "--check" else ""} \
      ~{if defined(log) then ("--log " +  '"' + log + '"') else ""} \
      ~{if (log_lh) then "--loglh" else ""} \
      ~{if (terrace) then "--terrace" else ""} \
      ~{if defined(seed) then ("--seed " +  '"' + seed + '"') else ""} \
      ~{if (redo) then "--redo" else ""} \
      ~{if (keep_tmp) then "--keep_tmp" else ""} \
      ~{if (quiet) then "--quiet" else ""} \
      ~{if defined(log_file) then ("--logfile " +  '"' + log_file + '"') else ""} \
      ~{if defined(n_cpu) then ("--ncpu " +  '"' + n_cpu + '"') else ""} \
      ~{if (debug) then "--debug" else ""}
  >>>
  parameter_meta {
    seqs: "Input alignment in FASTA or PHYLIP format"
    in_type: "File format: FASTA or PHYLIP (Default is FASTA)"
    output_name: "Run name for trees"
    outdir: "Output directory (default: .)"
    model: "Substitution model OR path to partition file"
    all: "Run bootstrap search and find best ML tree (default:\\nFalse)"
    branch_length: "Branch length estimation mode: linked, scaled,\\nunlinked (partitioned analysis only)"
    con_sense: "Consensus tree building options: STRICT, MR, or MRE"
    rand_tree: "Start from a random topology"
    pars_tree: "Start from a tree generated by the parsimony-based\\nrandomized stepwise addition algorithm"
    user_tree: "Load a custom starting tree from the NEWICK file"
    search: "Find best scoring ML tree (default) (default: False)"
    search_one_random: "Find best scoring ML tree with 1 random tree (default:\\nFalse)"
    constraint_tree: "Specify a constraint tree to e.g. enforce monophyly of\\ncertain groups"
    out_group: "Outgroup(s) for tree"
    bs_converge: "A posteriori bootstrap convergence test (default:\\nFalse)"
    bs_msa: "Generate bootstrap replicate alignments (default:\\nFalse)"
    bs_trees: "Number of bootstrap trees OR autoMRE"
    bs_tree_cut_off: "Change the bootstopping cutoff value to make the test\\nmore or less stringent"
    bs_metric: "Options: tbe or fbp,tbe"
    bootstrap: "Run non-parametric bootstrap analysis (default: False)"
    check: "Check alignment file and remove any columns consisting\\nentirely of gaps (default: False)"
    log: "Options for output verbosity: ERROR, WARNING, RESULT,\\nINFO, PROGRESS, VERBOSE, or DEBUG"
    log_lh: "Compute log-likelihood of a given tree without any\\noptimization (default: False)"
    terrace: "Check whether a tree lies on a phylogenetic terrace\\n(default: False)"
    seed: "Seed for random numbers (default: 12345)"
    redo: "Run even if there are existing files with the same\\nname (use with caution!) (default: False)"
    keep_tmp: "Keep temporary directory (default: False)"
    quiet: "Do not write output to console (silence stdout and\\nstderr) (default: False)"
    log_file: "Append console output to this file"
    n_cpu: "Number of CPU to use (default: 1)"
    debug: "Print commands but do not run (default: False)"
  }
  output {
    File out_stdout = stdout()
    Directory out_outdir = "${in_outdir}"
    File out_log_file = "${in_log_file}"
  }
}