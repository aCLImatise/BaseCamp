&id001 !Command
positional: []
named: []
command:
- seedRand.py
parent:
subcommands:
- !Command
  positional:
  - !Positional
    description: ''
    position: 0
    name: n
    optional: false
  named: []
  command:
  - seedRand.py
  - seed
  parent: *id001
  subcommands: []
  help_flag: !Flag
    description: ''
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: seedRand.py [-h] seed n\nseedRand.py: error: argument seed: invalid\
    \ int value: 'seed'\n"
  generated_using: &id002
  - --help
- !Command
  positional:
  - !Positional
    description: ''
    position: 0
    name: seedRand.py
    optional: false
  - !Positional
    description: ''
    position: 1
    name: seed
    optional: false
  - !Positional
    description: ''
    position: 2
    name: n
    optional: false
  named: []
  command:
  - seedRand.py
  - n
  parent: *id001
  subcommands: []
  help_flag: !Flag
    description: ''
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: seedRand.py [-h] seed n\nseedRand.py: error: argument seed: invalid\
    \ int value: 'n'\n"
  generated_using: *id002
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "usage: seedRand.py [-h] seed n\n\nGiven a seed, return a pseudrando integer\
  \ between 1 and 9999, separated by\nnewlines, to stdout. usage : `seedRand.py 27\
  \ 10` would return 10 random\nnumbers seeded with 27\n\npositional arguments:\n\
  \  seed        seed\n  n           number of random numbers to return, must be >\
  \ 0\n\noptional arguments:\n  -h, --help  show this help message and exit\n"
generated_using: *id002
