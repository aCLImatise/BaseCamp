!Command
positional:
- !Positional
  description: ''
  position: 0
  name: FILE
  optional: false
named:
- !Flag
  description: 'Type of statistics to print, one of: alignment_binned, baseq, baseq_ext,
    baseq_ext_strand, baseq_strand, coverage, coverage_binned, coverage_ext, coverage_ext_binned,
    coverage_ext_strand, coverage_gc, coverage_strand, mapq, mapq_binned, mapq_strand,
    tlen, tlen_binned, tlen_strand, variation, variation_strand.'
  synonyms:
  - -t
  - --type
  args: !SimpleFlagArg
    name: TYPE
  optional: true
- !Flag
  description: Chromosome name.
  synonyms:
  - -c
  - --chromosome
  args: !SimpleFlagArg
    name: CHROMOSOME
  optional: true
- !Flag
  description: Start position (1-based).
  synonyms:
  - -s
  - --start
  args: !SimpleFlagArg
    name: START
  optional: true
- !Flag
  description: End position (1-based).
  synonyms:
  - -e
  - --end
  args: !SimpleFlagArg
    name: END
  optional: true
- !Flag
  description: Use zero-based coordinates (default is false, i.e., use one-based coords).
  synonyms:
  - -z
  - --zero-based
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Truncate pileup-based stats so no records are emitted outside the specified
    range.
  synonyms:
  - -u
  - --truncate
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'Stepper to provide to underlying pysam call. Options are:"all" (default):
    all reads are returned, except where flags BAM_FUNMAP, BAM_FSECONDARY, BAM_FQCFAIL,
    BAM_FDUP set; "nofilter" applies no filter to returned reads; "samtools": filter
    & read processing as in _csamtools_ pileup. This requires a fasta file. For complete
    details see the pysam documentation.'
  synonyms:
  - -S
  - --stepper
  args: !SimpleFlagArg
    name: STEPPER
  optional: true
- !Flag
  description: Pad pileup-based stats so a record is emitted for every position (default
    is only covered positions).
  synonyms:
  - -d
  - --pad
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Maximum read depth permitted in pileup-based statistics. The default
    limit is 8000.
  synonyms:
  - -D
  - --max-depth
  args: !SimpleFlagArg
    name: MAX_DEPTH
  optional: true
- !Flag
  description: Reference sequence file, only required for some statistics.
  synonyms:
  - -f
  - --fasta
  args: !SimpleFlagArg
    name: FASTA
  optional: true
- !Flag
  description: Omit header row from output.
  synonyms:
  - -o
  - --omit-header
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Report progress every N rows.
  synonyms:
  - -p
  - --progress
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: Size of window for binned statistics (default is 300).
  synonyms:
  - --window-size
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: Window offset to use for deciding which genome position to report binned
    statistics against. The default is 150, i.e., the middle of 300bp window.
  synonyms:
  - --window-offset
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: Output format, one of {tsv, csv, hdf5} (defaults to tsv). N.B., hdf5
    requires PyTables to be installed.
  synonyms:
  - --format
  args: !SimpleFlagArg
    name: FORMAT
  optional: true
- !Flag
  description: Path to output file. If not provided, write to stdout.
  synonyms:
  - --output
  args: !SimpleFlagArg
    name: OUTPUT
  optional: true
- !Flag
  description: Comma-separated list of fields to output (defaults to all fields).
  synonyms:
  - --fields
  args: !SimpleFlagArg
    name: FIELDS
  optional: true
- !Flag
  description: Name of HDF5 group to write to (defaults to the root group).
  synonyms:
  - --hdf5-group
  args: !SimpleFlagArg
    name: HDF5_GROUP
  optional: true
- !Flag
  description: Name of HDF5 dataset to create (defaults to "data").
  synonyms:
  - --hdf5-dataset
  args: !SimpleFlagArg
    name: HDF5_DATASET
  optional: true
- !Flag
  description: HDF5 compression library (defaults to zlib).
  synonyms:
  - --hdf5-complib
  args: !SimpleFlagArg
    name: HDF5_COMPLIB
  optional: true
- !Flag
  description: HDF5 compression level (defaults to 5).
  synonyms:
  - --hdf5-complevel
  args: !SimpleFlagArg
    name: HDF5_COMPLEVEL
  optional: true
- !Flag
  description: Size of chunks in number of bytes (defaults to 2**20).
  synonyms:
  - --hdf5-chunksize
  args: !SimpleFlagArg
    name: HDF5_CHUNKSIZE
  optional: true
- !Flag
  description: Only reads with mapping quality equal to or greater than this value
    will be counted (0 by default).
  synonyms:
  - --min-mapq
  args: !SimpleFlagArg
    name: MIN_MAPQ
  optional: true
- !Flag
  description: Only reads with base quality equal to or greater than this value will
    be counted (0 by default). Only applies to pileup-based statistics.
  synonyms:
  - --min-baseq
  args: !SimpleFlagArg
    name: MIN_BASEQ
  optional: true
- !Flag
  description: Don't count reads flagged as duplicate.
  synonyms:
  - --no-dup
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Don't count reads aligned with a deletion at the given position. Only
    applies to pileup-based statistics.
  synonyms:
  - --no-del
  args: !EmptyFlagArg {}
  optional: true
command:
- pysamstats
parent:
subcommands: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "Usage: pysamstats [options] FILE\n\nCalculate statistics against genome\
  \ positions based on sequence alignments\nfrom a SAM or BAM file and print them\
  \ to stdout.\n\nOptions:\n  -h, --help            show this help message and exit\n\
  \  -t TYPE, --type=TYPE  Type of statistics to print, one of: alignment_binned,\n\
  \                        baseq, baseq_ext, baseq_ext_strand, baseq_strand,\n   \
  \                     coverage, coverage_binned, coverage_ext,\n               \
  \         coverage_ext_binned, coverage_ext_strand, coverage_gc,\n             \
  \           coverage_strand, mapq, mapq_binned, mapq_strand, tlen,\n           \
  \             tlen_binned, tlen_strand, variation, variation_strand.\n  -c CHROMOSOME,\
  \ --chromosome=CHROMOSOME\n                        Chromosome name.\n  -s START,\
  \ --start=START\n                        Start position (1-based).\n  -e END, --end=END\
  \     End position (1-based).\n  -z, --zero-based      Use zero-based coordinates\
  \ (default is false, i.e.,\n                        use one-based coords).\n  -u,\
  \ --truncate        Truncate pileup-based stats so no records are emitted\n    \
  \                    outside the specified range.\n  -S STEPPER, --stepper=STEPPER\n\
  \                        Stepper to provide to underlying pysam call. Options\n\
  \                        are:\"all\" (default): all reads are returned, except\n\
  \                        where flags BAM_FUNMAP, BAM_FSECONDARY, BAM_FQCFAIL,\n\
  \                        BAM_FDUP set; \"nofilter\" applies no filter to returned\n\
  \                        reads; \"samtools\": filter & read processing as in\n \
  \                       _csamtools_ pileup. This requires a fasta file. For\n  \
  \                      complete details see the pysam documentation.\n  -d, --pad\
  \             Pad pileup-based stats so a record is emitted for\n              \
  \          every position (default is only covered positions).\n  -D MAX_DEPTH,\
  \ --max-depth=MAX_DEPTH\n                        Maximum read depth permitted in\
  \ pileup-based\n                        statistics. The default limit is 8000.\n\
  \  -f FASTA, --fasta=FASTA\n                        Reference sequence file, only\
  \ required for some\n                        statistics.\n  -o, --omit-header  \
  \   Omit header row from output.\n  -p N, --progress=N    Report progress every\
  \ N rows.\n  --window-size=N       Size of window for binned statistics (default\
  \ is 300).\n  --window-offset=N     Window offset to use for deciding which genome\n\
  \                        position to report binned statistics against. The\n   \
  \                     default is 150, i.e., the middle of 300bp window.\n  --format=FORMAT\
  \       Output format, one of {tsv, csv, hdf5} (defaults to\n                  \
  \      tsv). N.B., hdf5 requires PyTables to be installed.\n  --output=OUTPUT  \
  \     Path to output file. If not provided, write to stdout.\n  --fields=FIELDS\
  \       Comma-separated list of fields to output (defaults to\n                \
  \        all fields).\n  --hdf5-group=HDF5_GROUP\n                        Name of\
  \ HDF5 group to write to (defaults to the root\n                        group).\n\
  \  --hdf5-dataset=HDF5_DATASET\n                        Name of HDF5 dataset to\
  \ create (defaults to \"data\").\n  --hdf5-complib=HDF5_COMPLIB\n              \
  \          HDF5 compression library (defaults to zlib).\n  --hdf5-complevel=HDF5_COMPLEVEL\n\
  \                        HDF5 compression level (defaults to 5).\n  --hdf5-chunksize=HDF5_CHUNKSIZE\n\
  \                        Size of chunks in number of bytes (defaults to 2**20).\n\
  \  --min-mapq=MIN_MAPQ   Only reads with mapping quality equal to or greater\n \
  \                       than this value will be counted (0 by default).\n  --min-baseq=MIN_BASEQ\n\
  \                        Only reads with base quality equal to or greater than\n\
  \                        this value will be counted (0 by default). Only\n     \
  \                   applies to pileup-based statistics.\n  --no-dup            \
  \  Don't count reads flagged as duplicate.\n  --no-del              Don't count\
  \ reads aligned with a deletion at the given\n                        position.\
  \ Only applies to pileup-based statistics.\n\nPileup-based statistics types (each\
  \ row has statistics over reads in a pileup column):\n\n    * coverage         \
  \   - Number of reads aligned to each genome position\n                        \
  \    (total and properly paired).\n    * coverage_strand     - As coverage but with\
  \ forward/reverse strand counts.\n    * coverage_ext        - Various additional\
  \ coverage metrics, including\n                            coverage for reads not\
  \ properly paired (mate\n                            unmapped, mate on other chromosome,\
  \ ...).\n    * coverage_ext_strand - As coverage_ext but with forward/reverse strand\
  \ counts.\n    * coverage_gc         - As coverage but also includes a column for\
  \ %GC.\n    * variation           - Numbers of matches, mismatches, deletions,\n\
  \                            insertions, etc.\n    * variation_strand    - As variation\
  \ but with forward/reverse strand counts.\n    * tlen                - Insert size\
  \ statistics.\n    * tlen_strand         - As tlen but with statistics by forward/reverse\
  \ strand.\n    * mapq                - Mapping quality statistics.\n    * mapq_strand\
  \         - As mapq but with statistics by forward/reverse strand.\n    * baseq\
  \               - Base quality statistics.\n    * baseq_strand        - As baseq\
  \ but with statistics by forward/reverse strand.\n    * baseq_ext           - Extended\
  \ base quality statistics, including qualities\n                            of bases\
  \ matching and mismatching reference.\n    * baseq_ext_strand    - As baseq_ext\
  \ but with statistics by forward/reverse strand.\n\nBinned statistics types (each\
  \ row has statistics over reads aligned starting within a genome window):\n\n  \
  \  * coverage_binned     - As coverage but binned.\n    * coverage_ext_binned -\
  \ As coverage_ext but binned.\n    * mapq_binned         - Similar to mapq but binned.\n\
  \    * alignment_binned    - Aggregated counts from cigar strings.\n    * tlen_binned\
  \         - As tlen but binned.\n\nExamples:\n\n    pysamstats --type coverage example.bam\
  \ > example.coverage.txt\n    pysamstats --type coverage --chromosome Pf3D7_v3_01\
  \ --start 100000 --end 200000 example.bam > example.coverage.txt\n\nVersion: 1.1.2\
  \ (pysam 0.15.4)\n\n"
generated_using:
- --help
