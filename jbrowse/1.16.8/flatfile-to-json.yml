!Command
positional:
- !Positional
  description: ( --gff <GFF3 file> | --bed <BED file> | --gbk <GenBank file> )         \
    --trackLabel <track identifier>                                         \ [ --trackType
    <JS Class> ]                                              \ [ --out <output directory>
    ]                                            \ [ --key <human-readable track name>
    ]                                   \ [ --className <CSS class name for displaying
    features> ]                \ [ --urltemplate "http://example.com/idlookup?id={id}"
    ]                 \ [ --arrowheadClass <CSS class> ]                                        \
    [ --noSubfeatures ]                                                     \ [ --subfeatureClasses
    '{ JSON-format subfeature class map }' ]          \ [ --clientConfig '{ JSON-format
    style configuration for this track }' ] \ [ --config '{ JSON-format extra configuration
    for this track }' ]       \ [ --thinType <BAM -thin_type> ]                                         \
    [ --thicktype <BAM -thick_type>]                                        \ [ --type
    <feature types to process> ]                                   \ [ --nclChunk
    <chunk size for generated NCLs> ]                          \ [ --compress ]                                                          \
    [ --sortMem <memory in bytes to use for sorting> ]                      \ [ --maxLookback
    <maximum number of features to buffer in gff3 files> ]  \ [ --nameAttributes "name,alias,id"
    ]                                    \
  position: 0
  name: flatfile-to-json.pl
  optional: false
named:
- !Flag
  description: Process a GFF3, BED, or GenBank file containing annotation data. This
    script does not support GFF version 2 or GTF (GFF 2.5) input. GenBank input is
    limited to handling records for single genes.
  synonyms:
  - --gbk
  args: !SimpleFlagArg
    name: GenBank file
  optional: true
- !Flag
  description: Unique identifier for this track. Required.
  synonyms:
  - --trackLabel
  args: !SimpleFlagArg
    name: track identifier
  optional: true
- !Flag
  description: "'{\"CDS\": \"transcript-CDS\", \"exon\": \"transcript-exon\"}'"
  synonyms:
  - --subfeatureClasses
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "'{\"featureCss\": \"background-color: #668; height: 8px;\", \"histScale\"\
    : 2}'"
  synonyms:
  - --clientConfig
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "'{ \"glyph\": \"ProcessedTranscript\" }'"
  synonyms:
  - --config
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'NCList chunk size; if you get "json text or perl structure exceeds
    maximum nesting level" errors, try setting this lower (default: 50,000).'
  synonyms:
  - --nclChunk
  args: !SimpleFlagArg
    name: chunk size for generated NCLs
  optional: true
- !Flag
  description: Compress the output, making .jsonz (gzipped) JSON files. This can save
    a lot of disk space, but note that web servers require some additional configuration
    to serve these correctly.
  synonyms:
  - --compress
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Bytes of RAM to use for sorting features. Default 512MB. The JSON NCList
    generation has to sort the features by reference sequence, start coordinate, and
    end coordinate. This is how much RAM in bytes the sorting process is allowed to
    use.
  synonyms:
  - --sortMem
  args: !SimpleFlagArg
    name: bytes
  optional: true
- !Flag
  description: Maximum number of features to keep in memory when parsing GFF3 files.
    Defaults to 10000. If you receive "orphan features" errors when parsing a GFF3
    file that doesn't contain enough '###' directives (which are important for parsing),
    you can try setting this higher if your machine has enough memory.
  synonyms:
  - --maxLookback
  args: !SimpleFlagArg
    name: integer
  optional: true
- !Flag
  description: Correspond to "<-thin_type"> and "<-thick_type"> in Bio::FeatureIO::bed.
    Do "<perldoc Bio::FeatureIO::bed"> for details.
  synonyms:
  - --thickType
  args: !SimpleFlagArg
    name: type
  optional: true
command:
- flatfile-to-json.pl
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\e[1mNAME\e[0m\n    flatfile-to-json.pl - format data into JBrowse JSON\
  \ format from an\n    annotation file\n\n\e[1mUSAGE\e[0m\n      flatfile-to-json.pl\
  \                                                         \\\n          ( --gff\
  \ <GFF3 file> | --bed <BED file> | --gbk <GenBank file> )         \\\n         \
  \ --trackLabel <track identifier>                                         \\\n \
  \         [ --trackType <JS Class> ]                                           \
  \   \\\n          [ --out <output directory> ]                                 \
  \           \\\n          [ --key <human-readable track name> ]                \
  \                   \\\n          [ --className <CSS class name for displaying features>\
  \ ]                \\\n          [ --urltemplate \"http://example.com/idlookup?id={id}\"\
  \ ]                 \\\n          [ --arrowheadClass <CSS class> ]             \
  \                           \\\n          [ --noSubfeatures ]                  \
  \                                   \\\n          [ --subfeatureClasses '{ JSON-format\
  \ subfeature class map }' ]          \\\n          [ --clientConfig '{ JSON-format\
  \ style configuration for this track }' ] \\\n          [ --config '{ JSON-format\
  \ extra configuration for this track }' ]       \\\n          [ --thinType <BAM\
  \ -thin_type> ]                                         \\\n          [ --thicktype\
  \ <BAM -thick_type>]                                        \\\n          [ --type\
  \ <feature types to process> ]                                   \\\n          [\
  \ --nclChunk <chunk size for generated NCLs> ]                          \\\n   \
  \       [ --compress ]                                                         \
  \ \\\n          [ --sortMem <memory in bytes to use for sorting> ]             \
  \         \\\n          [ --maxLookback <maximum number of features to buffer in\
  \ gff3 files> ]  \\\n          [ --nameAttributes \"name,alias,id\" ]          \
  \                          \\\n\n\e[1mARGUMENTS\e[0m\n  \e[1mRequired\e[0m\n   \
  \ --gff <GFF3 file>\n    --bed <BED file>\n    --gbk <GenBank file>\n        Process\
  \ a GFF3, BED, or GenBank file containing annotation data.\n\n        This script\
  \ does not support GFF version 2 or GTF (GFF 2.5) input.\n        GenBank input\
  \ is limited to handling records for single genes.\n\n    --trackLabel <track identifier>\n\
  \        Unique identifier for this track. Required.\n\n  \e[1mOptional\e[0m\n \
  \   --help | -h | -?\n        Display an extended help screen.\n\n    --key '<text>'\n\
  \        Human-readable track name.\n\n    --out <output directory>\n        Output\
  \ directory to write to. Defaults to \"data/\".\n\n    --trackType JBrowse/View/Track/HTMLFeatures\n\
  \        Optional JavaScript class to use to display this track. For backward\n\
  \        compatibility, this defaults to \"HTMLFeatures\".\n\n        Unless you\
  \ have some reason to use HTMLFeatures tracks, though, it's\n        recommended\
  \ to set this to \"CanvasFeatures\" to use the newer\n        canvas-based feature\
  \ track type.\n\n    --className <CSS class name for displaying features>\n    \
  \    CSS class for features. Defaults to \"feature\". Only used by\n        HTMLFeatures\
  \ tracks.\n\n    --urltemplate \"http://example.com/idlookup?id={id}\"\n       \
  \ Template for a URL to be visited when features are clicked on.\n\n    --noSubfeatures\n\
  \        Do not format subfeature data. Only include top-level features.\n\n   \
  \ --arrowheadClass <CSS class>\n        CSS class for arrowheads. Only used by HTMLFeatures\
  \ tracks.\n\n    --subfeatureClasses '{ JSON-format subfeature class map }'\n  \
  \      CSS classes for each subfeature type, in JSON syntax. Example:\n\n      \
  \    --subfeatureClasses '{\"CDS\": \"transcript-CDS\", \"exon\": \"transcript-exon\"\
  }'\n\n        Only used by HTMLFeatures tracks.\n\n    --clientConfig '{ JSON-format\
  \ style configuration for this track }'\n        Extra configuration for the client,\
  \ in JSON syntax. Example:\n\n          --clientConfig '{\"featureCss\": \"background-color:\
  \ #668; height: 8px;\", \"histScale\": 2}'\n\n        For historical reasons, this\
  \ is only merged into the \"style\" section\n        of the new track's configuration.\n\
  \n    --config '{ JSON-format extra configuration for this track }'\n        Additional\
  \ top-level configuration for the client, in JSON syntax.\n        Example:\n\n\
  \          --config '{ \"glyph\": \"ProcessedTranscript\" }'\n\n        Unlike \"\
  --clientConfig\", this is merged into the top level of the new\n        track configuration.\n\
  \n    --metadata '{ JSON metadata }'\n        Metadata about this track. Example:\n\
  \n          --metadata '{\"description\": \"Genes from XYZ pipeline.\", \"category\"\
  : \"Transcripts\" }'\n\n    --type <feature types to process>\n        Only process\
  \ features of the given type. Can take either single type\n        names, e.g. \"\
  mRNA\", or type names qualified by \"source\" name, for\n        whatever definition\
  \ of \"source\" your data file might have. For\n        example, \"mRNA:exonerate\"\
  \ will filter for only mRNA features that have\n        a source of \"exonerate\"\
  .\n\n        Multiple type names can be specified by separating the type names with\n\
  \        commas, e.g. \"--type mRNA:exonerate,ncRNA\".\n\n    --nameAttributes \"\
  name,alias,id\"\n        Comma-separated list of feature attributes (a.k.a. tags)\
  \ that should\n        be treated as names for this features. Case insensitive.\
  \ Defaults to\n        \"name,alias,id\".\n\n    --nclChunk <chunk size for generated\
  \ NCLs>\n        NCList chunk size; if you get \"json text or perl structure exceeds\n\
  \        maximum nesting level\" errors, try setting this lower (default:\n    \
  \    50,000).\n\n    --compress\n        Compress the output, making .jsonz (gzipped)\
  \ JSON files. This can save\n        a lot of disk space, but note that web servers\
  \ require some additional\n        configuration to serve these correctly.\n\n \
  \   --sortMem <bytes>\n        Bytes of RAM to use for sorting features. Default\
  \ 512MB.\n\n        The JSON NCList generation has to sort the features by reference\n\
  \        sequence, start coordinate, and end coordinate. This is how much RAM\n\
  \        in bytes the sorting process is allowed to use.\n\n  \e[1mGFF3-specific\e\
  [0m\n    --maxLookback <integer>\n        Maximum number of features to keep in\
  \ memory when parsing GFF3 files.\n        Defaults to 10000.\n\n        If you\
  \ receive \"orphan features\" errors when parsing a GFF3 file that\n        doesn't\
  \ contain enough '###' directives (which are important for\n        parsing), you\
  \ can try setting this higher if your machine has enough\n        memory.\n\n  \e\
  [1mBED-specific\e[0m\n    --thinType <type>\n    --thickType <type>\n        Correspond\
  \ to \"<-thin_type\"> and \"<-thick_type\"> in\n        Bio::FeatureIO::bed. Do\
  \ \"<perldoc Bio::FeatureIO::bed\"> for details.\n\n\e[1mMEMORY USAGE\e[0m\n   \
  \ For efficient memory usage, it is very important that large GFF3 files\n    have\
  \ \"###\" lines in them periodically. For details of what \"###\" is and\n    how\
  \ it is used, see the GFF3 specification at\n    <http://www.sequenceontology.org/gff3.shtml>.\n\
  \n"
generated_using:
- --help
