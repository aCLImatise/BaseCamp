!Command
positional:
- !Positional
  description: A simple file with a gene name (usually Hugo Symbol) on each line
  position: 0
  name: input_gene_list_file
  optional: false
- !Positional
  description: Path to transcript datasource config file.
  position: 1
  name: transcript_ds_config
  optional: false
- !Positional
  description: output path. Must be writable. Will overwrite existing files.
  position: 2
  name: outputFilename
  optional: false
named:
- !Flag
  description: ''
  synonyms:
  - --includeNonCoding
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ''
  synonyms:
  - --padding
  args: !SimpleFlagArg
    name: PADDING
  optional: true
command:
- get_exons
parent:
subcommands: []
help_flag: !Flag
  description: ''
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "usage: get_exons [-h] [--includeNonCoding] [--padding PADDING]\n     \
  \            input_gene_list_file transcript_ds_config outputFilename\n\n List all\
  \ exons (non-coding can be included) in a transcript datasource. \n\npositional\
  \ arguments:\n  input_gene_list_file  A simple file with a gene name (usually Hugo\
  \ Symbol)\n                        on each line\n  transcript_ds_config  Path to\
  \ transcript datasource config file.\n  outputFilename        output path. Must\
  \ be writable. Will overwrite existing\n                        files.\n\noptional\
  \ arguments:\n  -h, --help            show this help message and exit\n  --includeNonCoding\
  \    Whether non-coding regions should be included.\n  --padding PADDING     Pad\
  \ each exon by a number of bases on both sides.\n                        Default:\
  \ 0\n\n    Error file will be [outputFilename].err.\n\n    Transcript datasource\
  \ is the full path to the directory housing the datasource.\n\n    This script is\
  \ experimental and has minimal error checking.\n\n    To create a gene list from\
  \ GENCODE (and probably ENSEMBL) gtfs:\n        egrep \"basic\" gencode.v18.annotation.gtf\
  \ | sed -r \"s/.+gene_name\\ \"([A-Za-z0-9]+)\".+/\x01/g\" | sort | uniq >gene_list.txt\n\
  \n    To append genes from another GENCODE/ENSEMBL gtf:\n        egrep \"basic\"\
  \ gencode.v18.long_noncoding_RNAs.gtf | sed -r \"s/.+gene_name\\ \"([A-Za-z0-9]+)\"\
  .+/\x01/g\" | sort | uniq >> gene_list.txt\n\n    To get the output of this file\
  \ into a BED format, for example, with a given gene list and gencode datasource\
  \ :\n        get_exons gene_list.txt /my_db_dir/gencode_out2/hg19/gencode_out2.config\
  \ gencode_basic_exons.txt\n        awk '{print $2 \"\t\" $3 \"\t\" $4 \"\t\" $1}'\
  \ gencode_basic_exons.txt | sort -k1,1 -k2,2n  > gencode_basic_exons.bed.txt\n\n\
  \    Then to merge the exons using bedtools, if you would like:\n        mergeBed\
  \ -nms -i gencode_basic_exons.bed.txt > gencode_basic_exons.merged.txt\n\n    \n"
generated_using:
- --help
