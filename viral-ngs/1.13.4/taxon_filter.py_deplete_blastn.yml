&id003 !Command
command:
- taxon_filter.py
- deplete_blastn
positional:
- !Positional
  description: Input fastq file.
  position: 0
  name: inFastq
  optional: false
- !Positional
  description: Output fastq file with matching reads removed.
  position: 1
  name: outFastq
  optional: false
- !Positional
  description: One or more reference databases for blast.
  position: 2
  name: refDbs
  optional: false
named:
- !Flag
  description: The number of threads to use in running blastn.
  synonyms:
  - --threads
  args: !SimpleFlagArg
    name: THREADS
  optional: true
- !Flag
  description: 'Verboseness of output. [default: DEBUG]'
  synonyms:
  - --loglevel
  args: !ChoiceFlagArg
    choices: !!set
      ? ERROR
      ? EXCEPTION
      ? INFO
      ? DEBUG
      ? WARNING
      ? CRITICAL
  optional: true
- !Flag
  description: 'Base directory for temp files. [default: /tmp]'
  synonyms:
  - --tmp_dir
  args: !SimpleFlagArg
    name: TMP_DIR
  optional: true
- !Flag
  description: "Keep the tmp_dir if an exception occurs while running.\nDefault is\
    \ to delete all temp files at the end, even\nif there's a failure.\n"
  synonyms:
  - --tmp_dirKeep
  args: !EmptyFlagArg {}
  optional: true
parent: &id001 !Command
  command:
  - taxon_filter.py
  positional: []
  named: []
  parent:
  subcommands:
  - !Command
    command:
    - taxon_filter.py
    - file
    positional:
    - !Positional
      description: ''
      position: 0
      name: taxon_filter.py
      optional: false
    - !Positional
      description: ''
      position: 1
      name: subcommand
      optional: false
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "usage: taxon_filter.py subcommand\ntaxon_filter.py: error: argument\
      \ \e[F: invalid choice: 'file' (choose from 'deplete_human', 'trim_trimmomatic',\
      \ 'filter_lastal_bam', 'filter_lastal', 'partition_bmtagger', 'deplete_bam_bmtagger',\
      \ 'deplete_blastn', 'deplete_blastn_paired', 'deplete_blastn_bam', 'lastal_build_db',\
      \ 'blastn_build_db', 'bmtagger_build_db')\n"
    generated_using: &id002
    - --help
  - !Command
    command:
    - taxon_filter.py
    - filter_lastal_bam
    positional:
    - !Positional
      description: Input reads
      position: 0
      name: inBam
      optional: false
    - !Positional
      description: Database of taxa we keep
      position: 1
      name: db
      optional: false
    - !Positional
      description: Output reads, filtered to refDb
      position: 2
      name: outBam
      optional: false
    named:
    - !Flag
      description: "maximum gapless alignments per query position\n(default: 1)"
      synonyms:
      - -n
      args: !SimpleFlagArg
        name: MAX_GAPLESS_ALIGNMENTS_PER_POSITION
      optional: true
    - !Flag
      description: 'minimum length for initial matches (default: 5)'
      synonyms:
      - -l
      args: !SimpleFlagArg
        name: MIN_LENGTH_FOR_INITIAL_MATCHES
      optional: true
    - !Flag
      description: 'maximum length for initial matches (default: 50)'
      synonyms:
      - -L
      args: !SimpleFlagArg
        name: MAX_LENGTH_FOR_INITIAL_MATCHES
      optional: true
    - !Flag
      description: "maximum initial matches per query position (default:\n100)"
      synonyms:
      - -m
      args: !SimpleFlagArg
        name: MAX_INITIAL_MATCHES_PER_POSITION
      optional: true
    - !Flag
      description: 'JVM virtual memory size (default: 4g)'
      synonyms:
      - --JVMmemory
      args: !SimpleFlagArg
        name: JVMMEMORY
      optional: true
    - !Flag
      description: 'Verboseness of output. [default: DEBUG]'
      synonyms:
      - --loglevel
      args: !ChoiceFlagArg
        choices: !!set
          ? ERROR
          ? EXCEPTION
          ? INFO
          ? DEBUG
          ? WARNING
          ? CRITICAL
      optional: true
    - !Flag
      description: 'Base directory for temp files. [default: /tmp]'
      synonyms:
      - --tmp_dir
      args: !SimpleFlagArg
        name: TMP_DIR
      optional: true
    - !Flag
      description: "Keep the tmp_dir if an exception occurs while running.\nDefault\
        \ is to delete all temp files at the end, even\nif there's a failure.\n"
      synonyms:
      - --tmp_dirKeep
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: show program's version number and exit
      synonyms:
      - --version
      - -V
      args: !EmptyFlagArg {}
      optional: true
    help_text: "usage: taxon_filter.py subcommand filter_lastal_bam [-h]\n       \
      \                                             [-n MAX_GAPLESS_ALIGNMENTS_PER_POSITION]\n\
      \                                                    [-l MIN_LENGTH_FOR_INITIAL_MATCHES]\n\
      \                                                    [-L MAX_LENGTH_FOR_INITIAL_MATCHES]\n\
      \                                                    [-m MAX_INITIAL_MATCHES_PER_POSITION]\n\
      \                                                    [--JVMmemory JVMMEMORY]\n\
      \                                                    [--loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}]\n\
      \                                                    [--version]\n         \
      \                                           [--tmp_dir TMP_DIR]\n          \
      \                                          [--tmp_dirKeep]\n               \
      \                                     inBam db outBam\n\nRestrict input reads\
      \ to those that align to the given reference database using\nLASTAL.\n\npositional\
      \ arguments:\n  inBam                 Input reads\n  db                    Database\
      \ of taxa we keep\n  outBam                Output reads, filtered to refDb\n\
      \noptional arguments:\n  -h, --help            show this help message and exit\n\
      \  -n MAX_GAPLESS_ALIGNMENTS_PER_POSITION\n                        maximum gapless\
      \ alignments per query position\n                        (default: 1)\n  -l\
      \ MIN_LENGTH_FOR_INITIAL_MATCHES\n                        minimum length for\
      \ initial matches (default: 5)\n  -L MAX_LENGTH_FOR_INITIAL_MATCHES\n      \
      \                  maximum length for initial matches (default: 50)\n  -m MAX_INITIAL_MATCHES_PER_POSITION\n\
      \                        maximum initial matches per query position (default:\n\
      \                        100)\n  --JVMmemory JVMMEMORY\n                   \
      \     JVM virtual memory size (default: 4g)\n  --loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}\n\
      \                        Verboseness of output. [default: DEBUG]\n  --version,\
      \ -V         show program's version number and exit\n  --tmp_dir TMP_DIR   \
      \  Base directory for temp files. [default: /tmp]\n  --tmp_dirKeep         Keep\
      \ the tmp_dir if an exception occurs while running.\n                      \
      \  Default is to delete all temp files at the end, even\n                  \
      \      if there's a failure.\n"
    generated_using: *id002
  - !Command
    command:
    - taxon_filter.py
    - interest.
    positional:
    - !Positional
      description: ''
      position: 0
      name: taxon_filter.py
      optional: false
    - !Positional
      description: ''
      position: 1
      name: subcommand
      optional: false
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "usage: taxon_filter.py subcommand\ntaxon_filter.py: error: argument\
      \ \e[F: invalid choice: 'interest.' (choose from 'deplete_human', 'trim_trimmomatic',\
      \ 'filter_lastal_bam', 'filter_lastal', 'partition_bmtagger', 'deplete_bam_bmtagger',\
      \ 'deplete_blastn', 'deplete_blastn_paired', 'deplete_blastn_bam', 'lastal_build_db',\
      \ 'blastn_build_db', 'bmtagger_build_db')\n"
    generated_using: *id002
  - *id003
  - !Command
    command:
    - taxon_filter.py
    - deplete_blastn_bam
    positional:
    - !Positional
      description: Use blastn to remove reads that match at least one of the specified
        databases.
      position: 0
      name: outBam
      optional: false
    - !Positional
      description: Input BAM file.
      position: 0
      name: inBam
      optional: false
    - !Positional
      description: One or more reference databases for blast.
      position: 1
      name: refDbs
      optional: false
    - !Positional
      description: Output BAM file with matching reads removed.
      position: 2
      name: outBam
      optional: false
    named:
    - !Flag
      description: The number of threads to use in running blastn.
      synonyms:
      - --threads
      args: !SimpleFlagArg
        name: THREADS
      optional: true
    - !Flag
      description: 'FASTA chunk size (default: 1000000)'
      synonyms:
      - --chunkSize
      args: !SimpleFlagArg
        name: CHUNKSIZE
      optional: true
    - !Flag
      description: 'JVM virtual memory size (default: 4g)'
      synonyms:
      - --JVMmemory
      args: !SimpleFlagArg
        name: JVMMEMORY
      optional: true
    - !Flag
      description: 'Verboseness of output. [default: DEBUG]'
      synonyms:
      - --loglevel
      args: !ChoiceFlagArg
        choices: !!set
          ? ERROR
          ? EXCEPTION
          ? INFO
          ? DEBUG
          ? WARNING
          ? CRITICAL
      optional: true
    - !Flag
      description: 'Base directory for temp files. [default: /tmp]'
      synonyms:
      - --tmp_dir
      args: !SimpleFlagArg
        name: TMP_DIR
      optional: true
    - !Flag
      description: "Keep the tmp_dir if an exception occurs while running.\nDefault\
        \ is to delete all temp files at the end, even\nif there's a failure.\n"
      synonyms:
      - --tmp_dirKeep
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: show program's version number and exit
      synonyms:
      - --version
      - -V
      args: !EmptyFlagArg {}
      optional: true
    help_text: "usage: taxon_filter.py subcommand deplete_blastn_bam [-h] [--threads\
      \ THREADS]\n                                                     [--chunkSize\
      \ CHUNKSIZE]\n                                                     [--JVMmemory\
      \ JVMMEMORY]\n                                                     [--loglevel\
      \ {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}]\n                         \
      \                            [--version]\n                                 \
      \                    [--tmp_dir TMP_DIR]\n                                 \
      \                    [--tmp_dirKeep]\n                                     \
      \                inBam refDbs [refDbs ...]\n                               \
      \                      outBam\n\nUse blastn to remove reads that match at least\
      \ one of the specified databases.\n\npositional arguments:\n  inBam        \
      \         Input BAM file.\n  refDbs                One or more reference databases\
      \ for blast.\n  outBam                Output BAM file with matching reads removed.\n\
      \noptional arguments:\n  -h, --help            show this help message and exit\n\
      \  --threads THREADS     The number of threads to use in running blastn.\n \
      \ --chunkSize CHUNKSIZE\n                        FASTA chunk size (default:\
      \ 1000000)\n  --JVMmemory JVMMEMORY\n                        JVM virtual memory\
      \ size (default: 4g)\n  --loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}\n\
      \                        Verboseness of output. [default: DEBUG]\n  --version,\
      \ -V         show program's version number and exit\n  --tmp_dir TMP_DIR   \
      \  Base directory for temp files. [default: /tmp]\n  --tmp_dirKeep         Keep\
      \ the tmp_dir if an exception occurs while running.\n                      \
      \  Default is to delete all temp files at the end, even\n                  \
      \      if there's a failure.\n"
    generated_using: *id002
  - !Command
    command:
    - taxon_filter.py
    - deplete_human
    positional:
    - !Positional
      description: Input BAM file.
      position: 0
      name: inBam
      optional: false
    - !Positional
      description: 'Output BAM: read markup reverted with Picard.'
      position: 1
      name: revertBam
      optional: false
    - !Positional
      description: 'Output BAM: depleted of human reads with BMTagger.'
      position: 2
      name: bmtaggerBam
      optional: false
    - !Positional
      description: 'Output BAM: bmtaggerBam run through M-Vicuna duplicate'
      position: 3
      name: rmdupBam
      optional: false
    - !Positional
      description: 'blastnBam             Output BAM: rmdupBam run through another
        depletion of'
      position: 4
      name: removal.
      optional: false
    named:
    - !Flag
      description: ''
      synonyms:
      - --bmtaggerDbs
      - --blastDbs
      args: !RepeatFlagArg
        name: BMTAGGERDBS
      optional: true
    - !Flag
      description: "Output BAM: blastnBam run through taxonomic selection\nvia LASTAL."
      synonyms:
      - --taxfiltBam
      args: !SimpleFlagArg
        name: TAXFILTBAM
      optional: true
    - !Flag
      description: One reference database for last (required if
      synonyms:
      - --lastDb
      args: !SimpleFlagArg
        name: LASTDB
      optional: true
    - !Flag
      description: The number of threads to use in running blastn.
      synonyms:
      - --threads
      args: !SimpleFlagArg
        name: THREADS
      optional: true
    - !Flag
      description: "JVM virtual memory size for Picard FilterSamReads\n(default: 4g)"
      synonyms:
      - --JVMmemory
      args: !SimpleFlagArg
        name: JVMMEMORY
      optional: true
    - !Flag
      description: 'Verboseness of output. [default: DEBUG]'
      synonyms:
      - --loglevel
      args: !ChoiceFlagArg
        choices: !!set
          ? ERROR
          ? EXCEPTION
          ? INFO
          ? DEBUG
          ? WARNING
          ? CRITICAL
      optional: true
    - !Flag
      description: 'Base directory for temp files. [default: /tmp]'
      synonyms:
      - --tmp_dir
      args: !SimpleFlagArg
        name: TMP_DIR
      optional: true
    - !Flag
      description: "Keep the tmp_dir if an exception occurs while running.\nDefault\
        \ is to delete all temp files at the end, even\nif there's a failure.\n"
      synonyms:
      - --tmp_dirKeep
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: show program's version number and exit
      synonyms:
      - --version
      - -V
      args: !EmptyFlagArg {}
      optional: true
    help_text: "usage: taxon_filter.py subcommand deplete_human [-h] [--taxfiltBam\
      \ TAXFILTBAM]\n                                                --bmtaggerDbs\
      \ BMTAGGERDBS\n                                                [BMTAGGERDBS\
      \ ...] --blastDbs\n                                                BLASTDBS\
      \ [BLASTDBS ...]\n                                                [--lastDb\
      \ LASTDB]\n                                                [--threads THREADS]\n\
      \                                                [--JVMmemory JVMMEMORY]\n \
      \                                               [--loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}]\n\
      \                                                [--version]\n             \
      \                                   [--tmp_dir TMP_DIR]\n                  \
      \                              [--tmp_dirKeep]\n                           \
      \                     inBam [revertBam] bmtaggerBam\n                      \
      \                          rmdupBam blastnBam\n\nRun the entire depletion pipeline:\
      \ bmtagger, mvicuna, blastn. Optionally, use\nlastal to select a specific taxon\
      \ of interest.\n\npositional arguments:\n  inBam                 Input BAM file.\n\
      \  revertBam             Output BAM: read markup reverted with Picard.\n  bmtaggerBam\
      \           Output BAM: depleted of human reads with BMTagger.\n  rmdupBam \
      \             Output BAM: bmtaggerBam run through M-Vicuna duplicate\n     \
      \                   removal.\n  blastnBam             Output BAM: rmdupBam run\
      \ through another depletion of\n                        human reads with BLASTN.\n\
      \noptional arguments:\n  -h, --help            show this help message and exit\n\
      \  --taxfiltBam TAXFILTBAM\n                        Output BAM: blastnBam run\
      \ through taxonomic selection\n                        via LASTAL.\n  --bmtaggerDbs\
      \ BMTAGGERDBS [BMTAGGERDBS ...]\n                        Reference databases\
      \ (one or more) to deplete from\n                        input. For each db,\
      \ requires prior creation of\n                        db.bitmask by bmtool,\
      \ and db.srprism.idx,\n                        db.srprism.map, etc. by srprism\
      \ mkindex.\n  --blastDbs BLASTDBS [BLASTDBS ...]\n                        One\
      \ or more reference databases for blast to deplete\n                       \
      \ from input.\n  --lastDb LASTDB       One reference database for last (required\
      \ if\n                        --taxfiltBam is specified).\n  --threads THREADS\
      \     The number of threads to use in running blastn.\n  --JVMmemory JVMMEMORY\n\
      \                        JVM virtual memory size for Picard FilterSamReads\n\
      \                        (default: 4g)\n  --loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}\n\
      \                        Verboseness of output. [default: DEBUG]\n  --version,\
      \ -V         show program's version number and exit\n  --tmp_dir TMP_DIR   \
      \  Base directory for temp files. [default: /tmp]\n  --tmp_dirKeep         Keep\
      \ the tmp_dir if an exception occurs while running.\n                      \
      \  Default is to delete all temp files at the end, even\n                  \
      \      if there's a failure.\n"
    generated_using: *id002
  - !Command
    command:
    - taxon_filter.py
    - file.
    positional:
    - !Positional
      description: ''
      position: 0
      name: taxon_filter.py
      optional: false
    - !Positional
      description: ''
      position: 1
      name: subcommand
      optional: false
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "usage: taxon_filter.py subcommand\ntaxon_filter.py: error: argument\
      \ \e[F: invalid choice: 'file.' (choose from 'deplete_human', 'trim_trimmomatic',\
      \ 'filter_lastal_bam', 'filter_lastal', 'partition_bmtagger', 'deplete_bam_bmtagger',\
      \ 'deplete_blastn', 'deplete_blastn_paired', 'deplete_blastn_bam', 'lastal_build_db',\
      \ 'blastn_build_db', 'bmtagger_build_db')\n"
    generated_using: *id002
  - !Command
    command:
    - taxon_filter.py
    - partition_bmtagger
    positional:
    - !Positional
      description: Input fastq file; 1st end of paired-end reads.
      position: 0
      name: inFastq1
      optional: false
    - !Positional
      description: "Input fastq file; 2nd end of paired-end reads. Must\nhave same\
        \ names as inFastq1"
      position: 1
      name: inFastq2
      optional: false
    - !Positional
      description: "Reference databases (one or more) to deplete from\ninput. For\
        \ each db, requires prior creation of\ndb.bitmask by bmtool, and db.srprism.idx,\n\
        db.srprism.map, etc. by srprism mkindex."
      position: 2
      name: refDbs
      optional: false
    named:
    - !Flag
      description: "OUTMATCH\nFilenames for fastq output of matching reads."
      synonyms:
      - --outMatch
      args: !SimpleFlagArg
        name: OUTMATCH
      optional: true
    - !Flag
      description: "OUTNOMATCH\nFilenames for fastq output of unmatched reads."
      synonyms:
      - --outNoMatch
      args: !SimpleFlagArg
        name: OUTNOMATCH
      optional: true
    - !Flag
      description: 'Verboseness of output. [default: DEBUG]'
      synonyms:
      - --loglevel
      args: !ChoiceFlagArg
        choices: !!set
          ? ERROR
          ? EXCEPTION
          ? INFO
          ? DEBUG
          ? WARNING
          ? CRITICAL
      optional: true
    - !Flag
      description: 'Base directory for temp files. [default: /tmp]'
      synonyms:
      - --tmp_dir
      args: !SimpleFlagArg
        name: TMP_DIR
      optional: true
    - !Flag
      description: "Keep the tmp_dir if an exception occurs while running.\nDefault\
        \ is to delete all temp files at the end, even\nif there's a failure.\n"
      synonyms:
      - --tmp_dirKeep
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: show program's version number and exit
      synonyms:
      - --version
      - -V
      args: !EmptyFlagArg {}
      optional: true
    help_text: "usage: taxon_filter.py subcommand partition_bmtagger [-h]\n      \
      \                                               [--outMatch OUTMATCH OUTMATCH]\n\
      \                                                     [--outNoMatch OUTNOMATCH\
      \ OUTNOMATCH]\n                                                     [--loglevel\
      \ {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}]\n                         \
      \                            [--version]\n                                 \
      \                    [--tmp_dir TMP_DIR]\n                                 \
      \                    [--tmp_dirKeep]\n                                     \
      \                inFastq1 inFastq2 refDbs\n                                \
      \                     [refDbs ...]\n\nUse bmtagger to partition input reads\
      \ into ones that match at least one of\nseveral databases and ones that don't\
      \ match any of the databases.\n\npositional arguments:\n  inFastq1         \
      \     Input fastq file; 1st end of paired-end reads.\n  inFastq2           \
      \   Input fastq file; 2nd end of paired-end reads. Must\n                  \
      \      have same names as inFastq1\n  refDbs                Reference databases\
      \ (one or more) to deplete from\n                        input. For each db,\
      \ requires prior creation of\n                        db.bitmask by bmtool,\
      \ and db.srprism.idx,\n                        db.srprism.map, etc. by srprism\
      \ mkindex.\n\noptional arguments:\n  -h, --help            show this help message\
      \ and exit\n  --outMatch OUTMATCH OUTMATCH\n                        Filenames\
      \ for fastq output of matching reads.\n  --outNoMatch OUTNOMATCH OUTNOMATCH\n\
      \                        Filenames for fastq output of unmatched reads.\n  --loglevel\
      \ {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}\n                        Verboseness\
      \ of output. [default: DEBUG]\n  --version, -V         show program's version\
      \ number and exit\n  --tmp_dir TMP_DIR     Base directory for temp files. [default:\
      \ /tmp]\n  --tmp_dirKeep         Keep the tmp_dir if an exception occurs while\
      \ running.\n                        Default is to delete all temp files at the\
      \ end, even\n                        if there's a failure.\n"
    generated_using: *id002
  - !Command
    command:
    - taxon_filter.py
    - blastn_build_db
    positional:
    - !Positional
      description: Location of the input FASTA file
      position: 0
      name: inputFasta
      optional: false
    - !Positional
      description: Location for the output files
      position: 1
      name: outputDirectory
      optional: false
    named:
    - !Flag
      description: "Prefix for the output file name (default: inputFasta\nname, sans\
        \ \".fasta\" extension)"
      synonyms:
      - --outputFilePrefix
      args: !SimpleFlagArg
        name: OUTPUTFILEPREFIX
      optional: true
    - !Flag
      description: 'Verboseness of output. [default: DEBUG]'
      synonyms:
      - --loglevel
      args: !ChoiceFlagArg
        choices: !!set
          ? ERROR
          ? EXCEPTION
          ? INFO
          ? DEBUG
          ? WARNING
          ? CRITICAL
      optional: true
    - !Flag
      description: 'Base directory for temp files. [default: /tmp]'
      synonyms:
      - --tmp_dir
      args: !SimpleFlagArg
        name: TMP_DIR
      optional: true
    - !Flag
      description: "Keep the tmp_dir if an exception occurs while running.\nDefault\
        \ is to delete all temp files at the end, even\nif there's a failure.\n"
      synonyms:
      - --tmp_dirKeep
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: show program's version number and exit
      synonyms:
      - --version
      - -V
      args: !EmptyFlagArg {}
      optional: true
    help_text: "usage: taxon_filter.py subcommand blastn_build_db [-h]\n         \
      \                                         [--outputFilePrefix OUTPUTFILEPREFIX]\n\
      \                                                  [--loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}]\n\
      \                                                  [--version]\n           \
      \                                       [--tmp_dir TMP_DIR]\n              \
      \                                    [--tmp_dirKeep]\n                     \
      \                             inputFasta outputDirectory\n\nCreate a database\
      \ for use with blastn from an input reference FASTA file\n\npositional arguments:\n\
      \  inputFasta            Location of the input FASTA file\n  outputDirectory\
      \       Location for the output files\n\noptional arguments:\n  -h, --help \
      \           show this help message and exit\n  --outputFilePrefix OUTPUTFILEPREFIX\n\
      \                        Prefix for the output file name (default: inputFasta\n\
      \                        name, sans \".fasta\" extension)\n  --loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}\n\
      \                        Verboseness of output. [default: DEBUG]\n  --version,\
      \ -V         show program's version number and exit\n  --tmp_dir TMP_DIR   \
      \  Base directory for temp files. [default: /tmp]\n  --tmp_dirKeep         Keep\
      \ the tmp_dir if an exception occurs while running.\n                      \
      \  Default is to delete all temp files at the end, even\n                  \
      \      if there's a failure.\n"
    generated_using: *id002
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "\nEnter a subcommand to view additional information:\n\n     taxon_filter.py\
    \ \e[1mdeplete_human\e[0m [...]\n          Run the entire depletion pipeline:\
    \ bmtagger, mvicuna,\n          blastn. Optionally, use lastal to select a specific\
    \ taxon of\n          interest.\n\n     taxon_filter.py \e[1mtrim_trimmomatic\e\
    [0m [...]\n          Trim read sequences with Trimmomatic.\n\n     taxon_filter.py\
    \ \e[1mfilter_lastal_bam\e[0m [...]\n          Restrict input reads to those that\
    \ align to the\n          givenreference database using LASTAL.\n\n     taxon_filter.py\
    \ \e[1mfilter_lastal\e[0m [...]\n          Restrict input reads to those that\
    \ align to the\n          givenreference database using LASTAL. Also, remove\n\
    \          duplicates with prinseq.\n\n     taxon_filter.py \e[1mpartition_bmtagger\e\
    [0m [...]\n          Use bmtagger to partition input reads into ones thatmatch\
    \ at\n          least one of several databases and ones that don't matchany\n\
    \          of the databases.\n\n     taxon_filter.py \e[1mdeplete_bam_bmtagger\e\
    [0m [...]\n          Use bmtagger to deplete input reads against several\n   \
    \       databases.\n\n     taxon_filter.py \e[1mdeplete_blastn\e[0m [...]\n  \
    \        Use blastn to remove reads that match at least one of the\n         \
    \ databases.\n\n     taxon_filter.py \e[1mdeplete_blastn_paired\e[0m [...]\n \
    \         Use blastn to remove reads that match at least one of the\n        \
    \  databases.\n\n     taxon_filter.py \e[1mdeplete_blastn_bam\e[0m [...]\n   \
    \       Use blastn to remove reads that match at least one of the\n          specified\
    \ databases.\n\n     taxon_filter.py \e[1mlastal_build_db\e[0m [...]\n       \
    \   build a database for use with last based on an input fasta\n          file\n\
    \n     taxon_filter.py \e[1mblastn_build_db\e[0m [...]\n          Create a database\
    \ for use with blastn from an input\n          reference FASTA file\n\n     taxon_filter.py\
    \ \e[1mbmtagger_build_db\e[0m [...]\n          Create a database for use with\
    \ Bmtagger from an input FASTA\n          file.\n\nusage: taxon_filter.py subcommand\n\
    \nThis script contains a number of utilities for filtering NGS reads based on\n\
    membership or non-membership in a species / genus / taxonomic grouping.\n\nsubcommands:\n\
    \  \e[F\n    deplete_human\n    trim_trimmomatic\n    filter_lastal_bam\n    filter_lastal\n\
    \    partition_bmtagger\n    deplete_bam_bmtagger\n    deplete_blastn\n    deplete_blastn_paired\n\
    \    deplete_blastn_bam\n    lastal_build_db\n    blastn_build_db\n    bmtagger_build_db\n"
  generated_using: *id002
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: show program's version number and exit
  synonyms:
  - --version
  - -V
  args: !EmptyFlagArg {}
  optional: true
help_text: "usage: taxon_filter.py subcommand deplete_blastn [-h] [--threads THREADS]\n\
  \                                                 [--loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}]\n\
  \                                                 [--version]\n                \
  \                                 [--tmp_dir TMP_DIR]\n                        \
  \                         [--tmp_dirKeep]\n                                    \
  \             inFastq outFastq refDbs\n                                        \
  \         [refDbs ...]\n\nUse blastn to remove reads that match at least one of\
  \ the databases.\n\npositional arguments:\n  inFastq               Input fastq file.\n\
  \  outFastq              Output fastq file with matching reads removed.\n  refDbs\
  \                One or more reference databases for blast.\n\noptional arguments:\n\
  \  -h, --help            show this help message and exit\n  --threads THREADS  \
  \   The number of threads to use in running blastn.\n  --loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,EXCEPTION}\n\
  \                        Verboseness of output. [default: DEBUG]\n  --version, -V\
  \         show program's version number and exit\n  --tmp_dir TMP_DIR     Base directory\
  \ for temp files. [default: /tmp]\n  --tmp_dirKeep         Keep the tmp_dir if an\
  \ exception occurs while running.\n                        Default is to delete\
  \ all temp files at the end, even\n                        if there's a failure.\n"
generated_using: *id002
