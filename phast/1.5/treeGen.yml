!Command
command:
- treeGen
positional:
- !Positional
  description: treeGen '*speciesFile' ['*groupFile'] > outfile
  position: 0
  name: OR
  optional: false
- !Positional
  description: The integers should appear in the same order as the
  position: 0
  name: assignment.
  optional: false
named: []
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: "Print this help message.\n"
  synonyms:
  - --help
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "\nPROGRAM: treeGen\n\nDESCRIPTION: Enumerate rooted tree topologies, subject\
  \ to constraints on\nmonophyletic groups.  An outgroup is assumed to be specified.\n\
  \nUSAGE: treeGen spec1,spec2,spec3,... [group1,group2,...] > outfile\n         \
  \   OR\n       treeGen '*speciesFile' ['*groupFile'] > outfile\n\n       (where\
  \ speciesFile/groupFile contain whitespace-delimited names) \n\n       The last\
  \ species listed is assumed to be the outgroup.\n\n       The optional \"groups\"\
  \ classification can be used to define\n       monophyletic groups.  Each species\
  \ may be assigned a nonnegative\n       integer indicating its group, with 0 indicating\
  \ no group\n       assignment.  The integers should appear in the same order as\
  \ the\n       species names.  For example,\n\n            treeGen human,chimp,macaque,mouse,rat,dog,horse,fugu\
  \ 1,1,1,2,2,0,0,0\n\n       could be used to generate all topologies of the specified\
  \ vertebrate\n       species such that the primates (human, chimp, and macaque)\
  \ and the\n       rodents (mouse and rat) appear as monophyletic groups.  The outgroup\n\
  \       should always be assigned a group of 0 (a nonzero value will be\n      \
  \ ignored).\n\nOPTIONS:\n    --help, -h\n        Print this help message.\n"
generated_using:
- --help
