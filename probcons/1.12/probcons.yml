!Command
positional:
- !Positional
  description: ''
  position: 0
  name: OPTION
  optional: true
named:
- !Flag
  description: use CLUSTALW output format instead of MFA
  synonyms:
  - -clustalw
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'use 0 <= REPS <= 5 (default: 2) passes of consistency transformation'
  synonyms:
  - -c
  - --consistency
  args: !SimpleFlagArg
    name: REPS
  optional: true
- !Flag
  description: 'use 0 <= REPS <= 1000 (default: 100) passes of iterative-refinement'
  synonyms:
  - -ir
  - --iterative-refinement
  args: !SimpleFlagArg
    name: REPS
  optional: true
- !Flag
  description: 'use 0 <= REPS <= 20 (default: 0) rounds of pretraining'
  synonyms:
  - -pre
  - --pre-training
  args: !SimpleFlagArg
    name: REPS
  optional: true
- !Flag
  description: generate all-pairs pairwise alignments
  synonyms:
  - -pairs
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: use Viterbi algorithm to generate all pairs (automatically enables
    -pairs)
  synonyms:
  - -viterbi
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'report progress while aligning (default: off)'
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: write annotation for multiple alignment to FILENAME
  synonyms:
  - -annot
  args: !SimpleFlagArg
    name: FILENAME
  optional: true
- !Flag
  description: 'compute EM transition probabilities, store in FILENAME (default: no
    training)'
  synonyms:
  - -t
  - --train
  args: !SimpleFlagArg
    name: FILENAME
  optional: true
- !Flag
  description: 'also reestimate emission probabilities (default: off)'
  synonyms:
  - -e
  - --emissions
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'read parameters from FILENAME (default: )'
  synonyms:
  - -p
  - --paramfile
  args: !SimpleFlagArg
    name: FILENAME
  optional: true
- !Flag
  description: 'print sequences in alignment order rather than input order (default:
    off)'
  synonyms:
  - -a
  - --alignment-order
  args: !EmptyFlagArg {}
  optional: true
command:
- probcons
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\nPROBCONS version 1.12 - align multiple protein sequences and print to\
  \ standard output\nWritten by Chuong Do\n\nPROBCONS comes with ABSOLUTELY NO WARRANTY.\
  \  This is free software, and\nyou are welcome to redistribute it under certain\
  \ conditions.  See the\nfile COPYING.txt for details.\n\nUsage:\n       probcons\
  \ [OPTION]... [MFAFILE]...\n\nDescription:\n       Align sequences in MFAFILE(s)\
  \ and print result to standard output\n\n       -clustalw\n              use CLUSTALW\
  \ output format instead of MFA\n\n       -c, --consistency REPS\n              use\
  \ 0 <= REPS <= 5 (default: 2) passes of consistency transformation\n\n       -ir,\
  \ --iterative-refinement REPS\n              use 0 <= REPS <= 1000 (default: 100)\
  \ passes of iterative-refinement\n\n       -pre, --pre-training REPS\n         \
  \     use 0 <= REPS <= 20 (default: 0) rounds of pretraining\n\n       -pairs\n\
  \              generate all-pairs pairwise alignments\n\n       -viterbi\n     \
  \         use Viterbi algorithm to generate all pairs (automatically enables -pairs)\n\
  \n       -v, --verbose\n              report progress while aligning (default: off)\n\
  \n       -annot FILENAME\n              write annotation for multiple alignment\
  \ to FILENAME\n\n       -t, --train FILENAME\n              compute EM transition\
  \ probabilities, store in FILENAME (default: no training)\n\n       -e, --emissions\n\
  \              also reestimate emission probabilities (default: off)\n\n       -p,\
  \ --paramfile FILENAME\n              read parameters from FILENAME (default: )\n\
  \n       -a, --alignment-order\n              print sequences in alignment order\
  \ rather than input order (default: off)\n\n"
generated_using: []
