!Command
positional:
- !Positional
  description: ''
  position: 0
  name: file
  optional: false
named:
- !Flag
  description: '[ --env ]                       Print environment information'
  synonyms:
  - -e
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --auth-token ] arg            Specify the authentication token'
  synonyms:
  - -a
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --project ] arg               Name or ID of the destination project'
  synonyms:
  - -p
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --folder ] arg (=/)           Name of the destination folder'
  synonyms:
  - -f
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --name ] arg                  Name of the remote file (Note: Extension  ".gz"
    will be appended if the file is  compressed before uploading)'
  synonyms:
  - -n
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (=visible)        Use "--visibility hidden" to set the  file's visibility
    as hidden.
  synonyms:
  - --visibility
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: Key-value pair to add as a property;  repeat as necessary, e.g. "--property  key1=val1
    --property key2=val2"
  synonyms:
  - --property
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: Type of the data object; repeat as  necessary, e.g. "--type type1 --type  type2"
  synonyms:
  - --type
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: Tag of the data object; repeat as  necessary, e.g. "--tag tag1 --tag
    tag2"
  synonyms:
  - --tag
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: JSON to store as details
  synonyms:
  - --details
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: Recursively upload the directories
  synonyms:
  - --recursive
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (=2)            Number of parallel disk read threads
  synonyms:
  - --read-threads
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: '[ --compress-threads ] arg (=7) Number of parallel compression threads'
  synonyms:
  - -c
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --upload-threads ] arg (=8)   Number of parallel upload threads'
  synonyms:
  - -u
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[ --chunk-size ] arg (=75M)     Size of chunks in which the file should\
    \ be uploaded. Specify an integer size in bytes or append optional units (B, K,\
    \ M, G).  E.g., '50M' sets chunk size to 50  megabytes."
  synonyms:
  - -s
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Limit maximum upload speed. Specify an  integer to set speed in bytes/second
    or  append optional units (B, K, M, G). E.g.,  '3M' limits upload speed to 3  megabytes/second.
    If not set, uploads are  not throttled.
  synonyms:
  - --throttle
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: '[ --tries ] arg (=3)            Number of tries to upload each chunk'
  synonyms:
  - -r
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Do not compress file(s) before upload
  synonyms:
  - --do-not-compress
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --progress ]                  Report upload progress'
  synonyms:
  - -g
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --verbose ]                   Verbose logging'
  synonyms:
  - -v
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Wait for file objects to be closed before  exiting
  synonyms:
  - --wait-on-close
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Do not attempt to resume any incomplete  uploads
  synonyms:
  - --do-not-resume
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Test upload agent settings
  synonyms:
  - --test
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --read-from-stdin ]           Read file content from stdin'
  synonyms:
  - -i
  args: !EmptyFlagArg {}
  optional: true
command:
- dxua
parent:
subcommands: []
help_flag: !Flag
  description: '[ --help ]                      Produce a help message'
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: Print the version
  synonyms:
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "Usage: dxua [options] <file> [...]\n\nAvailable options:\n  -h [ --help\
  \ ]                      Produce a help message\n  --version                   \
  \       Print the version\n  -e [ --env ]                       Print environment\
  \ information\n  -a [ --auth-token ] arg            Specify the authentication token\n\
  \  -p [ --project ] arg               Name or ID of the destination project\n  -f\
  \ [ --folder ] arg (=/)           Name of the destination folder\n  -n [ --name\
  \ ] arg                  Name of the remote file (Note: Extension \n           \
  \                          \".gz\" will be appended if the file is \n          \
  \                           compressed before uploading)\n  --visibility arg (=visible)\
  \        Use \"--visibility hidden\" to set the \n                             \
  \        file's visibility as hidden.\n  --property arg                     Key-value\
  \ pair to add as a property; \n                                     repeat as necessary,\
  \ e.g. \"--property \n                                     key1=val1 --property\
  \ key2=val2\"\n  --type arg                         Type of the data object; repeat\
  \ as \n                                     necessary, e.g. \"--type type1 --type\
  \ \n                                     type2\"\n  --tag arg                  \
  \        Tag of the data object; repeat as \n                                  \
  \   necessary, e.g. \"--tag tag1 --tag tag2\"\n  --details arg                 \
  \     JSON to store as details\n  --recursive                        Recursively\
  \ upload the directories\n  --read-threads arg (=2)            Number of parallel\
  \ disk read threads\n  -c [ --compress-threads ] arg (=7) Number of parallel compression\
  \ threads\n  -u [ --upload-threads ] arg (=8)   Number of parallel upload threads\n\
  \  -s [ --chunk-size ] arg (=75M)     Size of chunks in which the file should be\n\
  \                                     uploaded. Specify an integer size in bytes\n\
  \                                     or append optional units (B, K, M, G). \n\
  \                                     E.g., '50M' sets chunk size to 50 \n     \
  \                                megabytes.\n  --throttle arg                  \
  \   Limit maximum upload speed. Specify an \n                                  \
  \   integer to set speed in bytes/second or \n                                 \
  \    append optional units (B, K, M, G). E.g., \n                              \
  \       '3M' limits upload speed to 3 \n                                     megabytes/second.\
  \ If not set, uploads are \n                                     not throttled.\n\
  \  -r [ --tries ] arg (=3)            Number of tries to upload each chunk\n  --do-not-compress\
  \                  Do not compress file(s) before upload\n  -g [ --progress ]  \
  \                Report upload progress\n  -v [ --verbose ]                   Verbose\
  \ logging\n  --wait-on-close                    Wait for file objects to be closed\
  \ before \n                                     exiting\n  --do-not-resume     \
  \               Do not attempt to resume any incomplete \n                     \
  \                uploads\n  --test                             Test upload agent\
  \ settings\n  -i [ --read-from-stdin ]           Read file content from stdin\n\n\
  \n"
generated_using:
- --help
