&id010 !Command
command:
- tripaille
- analysis
positional: []
named: []
parent: &id001 !Command
  command:
  - tripaille
  positional: []
  named:
  - !Flag
    description: Enables verbose mode.
    synonyms:
    - -v
    - --verbose
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Name of instance in /root/.tripaille.yml. This\nparameter can also\
      \ be set via the environment variable\nTRIPAILLE_INSTANCE  [default: __default;\
      \ required]"
    synonyms:
    - -i
    - --instance
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: config file path
    synonyms:
    - -f
    - --path
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  parent:
  subcommands:
  - &id002 !Command
    command:
    - tripaille
    - phylogeny
    positional: []
    named: []
    parent: *id001
    subcommands:
    - !Command
      command:
      - tripaille
      - phylogeny
      - COMMAND
      positional:
      - !Positional
        description: ''
        position: 0
        name: ARGS
        optional: true
      named: []
      parent: *id002
      subcommands: []
      usage: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille phylogeny [OPTIONS] COMMAND [ARGS]...\nTry \"tripaille\
        \ phylogeny -h\" for help.\n\nError: No such command \"COMMAND\".\n"
      generated_using: &id003
      - --help
    - !Command
      command:
      - tripaille
      - phylogeny
      - ARGS
      positional:
      - !Positional
        description: ''
        position: 0
        name: tripaille
        optional: false
      - !Positional
        description: ''
        position: 1
        name: phylogeny
        optional: false
      - !Positional
        description: ''
        position: 2
        name: COMMAND
        optional: false
      - !Positional
        description: ''
        position: 3
        name: ARGS
        optional: true
      named: []
      parent: *id002
      subcommands: []
      usage: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille phylogeny [OPTIONS] COMMAND [ARGS]...\nTry \"tripaille\
        \ phylogeny -h\" for help.\n\nError: No such command \"ARGS\".\n"
      generated_using: *id003
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage: tripaille phylogeny [OPTIONS] COMMAND [ARGS]...\nTry \"tripaille\
      \ phylogeny -h\" for help.\n\nError: no such option: --usage\n"
    generated_using:
    - --usage
  - &id004 !Command
    command:
    - tripaille
    - db
    positional: []
    named: []
    parent: *id001
    subcommands:
    - !Command
      command:
      - tripaille
      - db
      - get_dbs
      positional: []
      named:
      - !Flag
        description: A db ID
        synonyms:
        - --db_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: filter on db name
        synonyms:
        - --name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      parent: *id004
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille db get_dbs [OPTIONS]\n\n  Get all dbs\n\n  Output:\n\
        \n      Dbs information\n\nOptions:\n  --db_id TEXT  A db ID\n  --name TEXT\
        \   filter on db name\n  -h, --help    Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - db
      - get_mviews
      positional: []
      named:
      - !Flag
        description: filter on mview name
        synonyms:
        - --name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      parent: *id004
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille db get_mviews [OPTIONS]\n\n  Get all materialized\
        \ views\n\n  Output:\n\n      materialized views information\n\nOptions:\n\
        \  --name TEXT  filter on mview name\n  -h, --help   Show this message and\
        \ exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - db
      - index
      positional: []
      named:
      - !Flag
        description: "Indexing mode: 'website' to index the website ,\n'nodes' for\
          \ the website nodes, 'entities' for the\nwebsite entities (Tripal 3), 'table'\
          \ to index a single\ntable, 'gene' to build a Gene search index (Tripal\
          \ 3\nonly) (default: website) ('website' default to 'nodes'\nfor Tripal\
          \ 2, 'entities' for Tripal 3)  [default:\nwebsite]"
        synonyms:
        - --mode
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Table to index (only in 'table' mode)
        synonyms:
        - --table
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Index name (only in 'table' mode)
        synonyms:
        - --index_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "Number of indexing task queues (Tripal 2 only)\n[default: 10]"
        synonyms:
        - --queues
        args: !SimpleFlagArg
          name: INTEGER
        optional: true
      - !Flag
        description: "Fields to index (only in 'table' mode), syntax:\n<field_name>|<field_type>,\
          \ field_type should be one of\n'string' (Tripal2), 'text' (Tripal3), 'keyword',\n\
          'date', 'long', 'double', 'boolean', 'ip', 'object',\n'nested', 'geo_point',\
          \ 'geo_shape', or 'completion'"
        synonyms:
        - --fields
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "List of links to show to users, syntax: <column-where-\nto-show-the-link>|</your/url/[any-column-name]>\n\
          (Tripal 2 only)"
        synonyms:
        - --links
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "Tokenizer to use (only in 'table' mode) (one of\n'standard',\
          \ 'letter', 'lowercase', 'whitespace',\n'uax_url_email', 'classic', 'ngram',\
          \ 'edge_ngram',\n'keywordx', 'pattern', or 'path_hierarchy';\ndefault='standard')\
          \  [default: standard]"
        synonyms:
        - --tokenizer
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "Token filters (Tripal 3 only) (only in 'table' mode)\n(available\
          \ filters are 'standard', 'asciifolding',\n'length', 'lowercase', 'uppercase')\
          \ (Default to\n['standard', 'lowercase'])"
        synonyms:
        - --token_filters
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: '"Expose the index (read-only) to other websites'
        synonyms:
        - --exposed
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "In order for other sites to link back to your results\npage,\
          \ you must specify a path where the form for this\nindex can be reached"
        synonyms:
        - --index_url
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Name of the job
        synonyms:
        - --job_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Do not wait for job to complete
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id004
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille db index [OPTIONS]\n\n  Schedule database indexing\
        \ using elasticsearch\n\n  Output:\n\n      Indexing information\n\nOptions:\n\
        \  --mode TEXT           Indexing mode: 'website' to index the website ,\n\
        \                        'nodes' for the website nodes, 'entities' for the\n\
        \                        website entities (Tripal 3), 'table' to index a single\n\
        \                        table, 'gene' to build a Gene search index (Tripal\
        \ 3\n                        only) (default: website) ('website' default to\
        \ 'nodes'\n                        for Tripal 2, 'entities' for Tripal 3)\
        \  [default:\n                        website]\n  --table TEXT          Table\
        \ to index (only in 'table' mode)\n  --index_name TEXT     Index name (only\
        \ in 'table' mode)\n  --queues INTEGER      Number of indexing task queues\
        \ (Tripal 2 only)\n                        [default: 10]\n  --fields TEXT\
        \         Fields to index (only in 'table' mode), syntax:\n              \
        \          <field_name>|<field_type>, field_type should be one of\n      \
        \                  'string' (Tripal2), 'text' (Tripal3), 'keyword',\n    \
        \                    'date', 'long', 'double', 'boolean', 'ip', 'object',\n\
        \                        'nested', 'geo_point', 'geo_shape', or 'completion'\n\
        \  --links TEXT          List of links to show to users, syntax: <column-where-\n\
        \                        to-show-the-link>|</your/url/[any-column-name]>\n\
        \                        (Tripal 2 only)\n  --tokenizer TEXT      Tokenizer\
        \ to use (only in 'table' mode) (one of\n                        'standard',\
        \ 'letter', 'lowercase', 'whitespace',\n                        'uax_url_email',\
        \ 'classic', 'ngram', 'edge_ngram',\n                        'keywordx', 'pattern',\
        \ or 'path_hierarchy';\n                        default='standard')  [default:\
        \ standard]\n  --token_filters TEXT  Token filters (Tripal 3 only) (only in\
        \ 'table' mode)\n                        (available filters are 'standard',\
        \ 'asciifolding',\n                        'length', 'lowercase', 'uppercase')\
        \ (Default to\n                        ['standard', 'lowercase'])\n  --exposed\
        \             \"Expose the index (read-only) to other websites\n  --index_url\
        \ TEXT      In order for other sites to link back to your results\n      \
        \                  page, you must specify a path where the form for this\n\
        \                        index can be reached\n  --job_name TEXT       Name\
        \ of the job\n  --no_wait             Do not wait for job to complete\n  -h,\
        \ --help            Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - db
      - populate_mviews
      positional: []
      named:
      - !Flag
        description: filter on mview name
        synonyms:
        - --name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Do not wait for job to complete
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id004
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille db populate_mviews [OPTIONS]\n\n  Populate materialized\
        \ views\n\n  Output:\n\n      Loading information\n\nOptions:\n  --name TEXT\
        \  filter on mview name\n  --no_wait    Do not wait for job to complete\n\
        \  -h, --help   Show this message and exit.\n"
      generated_using: *id003
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: tripaille db [OPTIONS] COMMAND [ARGS]...\n\n  Access Tripal/Chado\
      \ database\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n\
      \  get_dbs          Get all dbs Output: Dbs information\n  get_mviews      \
      \ Get all materialized views Output: materialized views...\n  index        \
      \    Schedule database indexing using elasticsearch Output:...\n  populate_mviews\
      \  Populate materialized views Output: Loading information\n  tune         \
      \    Setup default entity index priority for whole website...\n"
    generated_using: *id003
  - &id005 !Command
    command:
    - tripaille
    - job
    positional: []
    named: []
    parent: *id001
    subcommands:
    - !Command
      command:
      - tripaille
      - job
      - run_jobs
      positional: []
      named:
      - !Flag
        description: 'Wait for job completion  [default: True]'
        synonyms:
        - --wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id005
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille job run_jobs [OPTIONS]\n\n  Run jobs in queue.\
        \ There is no way to trigger a single job execution.\n\n  Output:\n\n    \
        \  Job information\n\nOptions:\n  --wait      Wait for job completion  [default:\
        \ True]\n  -h, --help  Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - job
      - get_logs
      positional:
      - !Positional
        description: ''
        position: 0
        name: STDOUT
        optional: false
      - !Positional
        description: ''
        position: 1
        name: STDERR
        optional: false
      named: []
      parent: *id005
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille job get_logs [OPTIONS] STDOUT STDERR\n\n  Get job\
        \ output\n\n  Output:\n\n      Output information\n\nOptions:\n  -h, --help\
        \  Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - job
      - add_job
      positional:
      - !Positional
        description: ''
        position: 0
        name: NAME
        optional: false
      - !Positional
        description: ''
        position: 1
        name: MODULE
        optional: false
      - !Positional
        description: ''
        position: 2
        name: CALLBACK
        optional: false
      - !Positional
        description: ''
        position: 3
        name: ARGUMENTS
        optional: false
      named:
      - !Flag
        description: 'An integer score to prioritize the job  [default: 10]'
        synonyms:
        - --priority
        args: !SimpleFlagArg
          name: INTEGER
        optional: true
      parent: *id005
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille job add_job [OPTIONS] NAME MODULE CALLBACK ARGUMENTS\n\
        \n  Schedule a new job\n\n  Output:\n\n      Job information\n\nOptions:\n\
        \  --priority INTEGER  An integer score to prioritize the job  [default: 10]\n\
        \  -h, --help          Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - job
      - add_import_job
      positional:
      - !Positional
        description: ''
        position: 0
        name: NAME
        optional: false
      - !Positional
        description: ''
        position: 1
        name: IMPORTER
        optional: false
      - !Positional
        description: ''
        position: 2
        name: INPUT_FILE
        optional: false
      named: []
      parent: *id005
      subcommands: []
      usage: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille job add_import_job [OPTIONS] NAME IMPORTER INPUT_FILE\n\
        \                                    ARGUMENTS\nTry \"tripaille job add_import_job\
        \ -h\" for help.\n\nError: Missing argument \"NAME\".\n"
      generated_using: []
    - !Command
      command:
      - tripaille
      - job
      - get_jobs
      positional: []
      named:
      - !Flag
        description: job id
        synonyms:
        - --job_id
        args: !SimpleFlagArg
          name: INTEGER
        optional: true
      parent: *id005
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille job get_jobs [OPTIONS]\n\n  Get all jobs\n\n  Output:\n\
        \n      Jobs information\n\nOptions:\n  --job_id INTEGER  job id\n  -h, --help\
        \        Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - job
      - wait
      positional:
      - !Positional
        description: ''
        position: 0
        name: JOB_ID
        optional: false
      named: []
      parent: *id005
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille job wait [OPTIONS] JOB_ID\n\n  Wait for a job completion\n\
        \n  Output:\n\n      Job information\n\nOptions:\n  -h, --help  Show this\
        \ message and exit.\n"
      generated_using: *id003
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: tripaille job [OPTIONS] COMMAND [ARGS]...\n\n  Manage Tripal\
      \ jobs\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n\
      \  add_import_job  Schedule a new import job Output: Job information\n  add_job\
      \         Schedule a new job Output: Job information\n  get_jobs        Get\
      \ all jobs Output: Jobs information\n  get_logs        Get job output Output:\
      \ Output information\n  run_jobs        Run jobs in queue.\n  wait         \
      \   Wait for a job completion Output: Job information\n"
    generated_using: *id003
  - &id006 !Command
    command:
    - tripaille
    - organism
    positional: []
    named: []
    parent: *id001
    subcommands:
    - !Command
      command:
      - tripaille
      - organism
      - add_organism
      positional:
      - !Positional
        description: ''
        position: 0
        name: GENUS
        optional: false
      - !Positional
        description: ''
        position: 1
        name: SPECIES
        optional: false
      named:
      - !Flag
        description: The common name of the organism
        synonyms:
        - --common
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: The abbreviation of the organism
        synonyms:
        - --abbr
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: A comment / description
        synonyms:
        - --comment
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "The type name of infraspecific name for any taxon\nbelow the\
          \ rank of species. Must be one of\n['subspecies', 'varietas', 'subvariety',\
          \ 'forma',\n'subforma']"
        synonyms:
        - --infraspecific_rank
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: The infraspecific name for this organism.
        synonyms:
        - --infraspecific_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      parent: *id006
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille organism add_organism [OPTIONS] GENUS SPECIES\n\
        \n  Add a new organism to the database\n\n  Output:\n\n      Organism information\n\
        \nOptions:\n  --common TEXT              The common name of the organism\n\
        \  --abbr TEXT                The abbreviation of the organism\n  --comment\
        \ TEXT             A comment / description\n  --infraspecific_rank TEXT  The\
        \ type name of infraspecific name for any taxon\n                        \
        \     below the rank of species. Must be one of\n                        \
        \     ['subspecies', 'varietas', 'subvariety', 'forma',\n                \
        \             'subforma']\n  --infraspecific_name TEXT  The infraspecific\
        \ name for this organism.\n  -h, --help                 Show this message\
        \ and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - organism
      - get_organisms_tripal
      positional: []
      named:
      - !Flag
        description: An organism entity ID
        synonyms:
        - --organism_id
        args: !SimpleFlagArg
          name: INTEGER
        optional: true
      parent: *id006
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille organism get_organisms_tripal [OPTIONS]\n\n  Get\
        \ organism entities\n\n  Output:\n\n      Organism entity information\n\n\
        Options:\n  --organism_id INTEGER  An organism entity ID\n  -h, --help   \
        \          Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - organism
      - sync
      positional:
      - !Positional
        description: 'Options:'
        position: 0
        name: status
        optional: false
      named:
      - !Flag
        description: Common name of the organism to sync
        synonyms:
        - --organism
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: ID of the organism to sync
        synonyms:
        - --organism_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Name of the job
        synonyms:
        - --job_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Return immediately without waiting for job completion
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id006
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille organism sync [OPTIONS]\n\n  Synchronize an organism\n\
        \n  Output:\n\n      status\n\nOptions:\n  --organism TEXT     Common name\
        \ of the organism to sync\n  --organism_id TEXT  ID of the organism to sync\n\
        \  --job_name TEXT     Name of the job\n  --no_wait           Return immediately\
        \ without waiting for job completion\n  -h, --help          Show this message\
        \ and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - organism
      - get_organisms
      positional: []
      named:
      - !Flag
        description: An organism ID
        synonyms:
        - --organism_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: The genus of the organism
        synonyms:
        - --genus
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: The species of the organism
        synonyms:
        - --species
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: The common name of the organism
        synonyms:
        - --common
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: The abbreviation of the organism
        synonyms:
        - --abbr
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: A comment / description
        synonyms:
        - --comment
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      parent: *id006
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille organism get_organisms [OPTIONS]\n\n  Get organisms\
        \ from chado table\n\n  Output:\n\n      Organism information\n\nOptions:\n\
        \  --organism_id TEXT  An organism ID\n  --genus TEXT        The genus of\
        \ the organism\n  --species TEXT      The species of the organism\n  --common\
        \ TEXT       The common name of the organism\n  --abbr TEXT         The abbreviation\
        \ of the organism\n  --comment TEXT      A comment / description\n  -h, --help\
        \          Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - organism
      - delete_orphans
      positional:
      - !Positional
        description: 'Options:'
        position: 0
        name: status
        optional: false
      named:
      - !Flag
        description: Name of the job
        synonyms:
        - --job_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Return immediately without waiting for job completion
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id006
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille organism delete_orphans [OPTIONS]\n\n  Delete orphans\
        \ Drupal organism nodes\n\n  Output:\n\n      status\n\nOptions:\n  --job_name\
        \ TEXT  Name of the job\n  --no_wait        Return immediately without waiting\
        \ for job completion\n  -h, --help       Show this message and exit.\n"
      generated_using: *id003
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: tripaille organism [OPTIONS] COMMAND [ARGS]...\n\n  Manage\
      \ Tripal organisms\n\nOptions:\n  -h, --help  Show this message and exit.\n\n\
      Commands:\n  add_organism          Add a new organism to the database Output:\
      \ Organism...\n  delete_orphans        Delete orphans Drupal organism nodes\
      \ Output: status\n  get_organisms         Get organisms from chado table Output:\
      \ Organism...\n  get_organisms_tripal  Get organism entities Output: Organism\
      \ entity...\n  get_taxonomic_ranks   Get taxonomic ranks Output: Taxonomic ranks\n\
      \  sync                  Synchronize an organism Output: status\n"
    generated_using: *id003
  - &id007 !Command
    command:
    - tripaille
    - entity
    positional: []
    named: []
    parent: *id001
    subcommands:
    - !Command
      command:
      - tripaille
      - entity
      - publish
      positional:
      - !Positional
        description: 'Options:'
        position: 0
        name: status
        optional: false
      named:
      - !Flag
        description: "List of entity types to be published (e.g. Gene mRNA,\ndefault:\
          \ all)"
        synonyms:
        - --types
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Name of the job
        synonyms:
        - --job_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Return immediately without waiting for job completion
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id007
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille entity publish [OPTIONS]\n\n  Publish entities\
        \ (Tripal 3 only)\n\n  Output:\n\n      status\n\nOptions:\n  --types TEXT\
        \     List of entity types to be published (e.g. Gene mRNA,\n            \
        \       default: all)\n  --job_name TEXT  Name of the job\n  --no_wait   \
        \     Return immediately without waiting for job completion\n  -h, --help\
        \       Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - entity
      - get_fields
      positional:
      - !Positional
        description: ''
        position: 0
        name: ENTITY
        optional: false
      named: []
      parent: *id007
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille entity get_fields [OPTIONS] ENTITY\n\n  Get the\
        \ list of available fields for an entity\n\n  Output:\n\n      Fields information\n\
        \nOptions:\n  -h, --help  Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - entity
      - add_entity
      positional:
      - !Positional
        description: ''
        position: 0
        name: ENTITY
        optional: false
      named:
      - !Flag
        description: Values to populate the entity fields
        synonyms:
        - --params
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      parent: *id007
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille entity add_entity [OPTIONS] ENTITY\n\n  Add a new\
        \ entity to the database\n\n  Output:\n\n      Entity information\n\nOptions:\n\
        \  --params TEXT  Values to populate the entity fields\n  -h, --help     Show\
        \ this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - entity
      - get_entities
      positional: []
      named:
      - !Flag
        description: Name of the entity type (e.g. Organism)
        synonyms:
        - --entity
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: ID of an entity
        synonyms:
        - --entity_id
        args: !SimpleFlagArg
          name: INTEGER
        optional: true
      parent: *id007
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille entity get_entities [OPTIONS]\n\n  Get entities\n\
        \n  Output:\n\n      Entity information\n\nOptions:\n  --entity TEXT     \
        \   Name of the entity type (e.g. Organism)\n  --entity_id INTEGER  ID of\
        \ an entity\n  -h, --help           Show this message and exit.\n"
      generated_using: *id003
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: tripaille entity [OPTIONS] COMMAND [ARGS]...\n\n  Manage any\
      \ type of Tripal entities\n\nOptions:\n  -h, --help  Show this message and exit.\n\
      \nCommands:\n  add_entity    Add a new entity to the database Output: Entity\
      \ information\n  get_bundles   Get the list of tripal bundles Output: Bundles\
      \ information\n  get_entities  Get entities Output: Entity information\n  get_fields\
      \    Get the list of available fields for an entity Output:...\n  publish  \
      \     Publish entities (Tripal 3 only) Output: status\n"
    generated_using: *id003
  - &id008 !Command
    command:
    - tripaille
    - feature
    positional: []
    named: []
    parent: *id001
    subcommands:
    - !Command
      command:
      - tripaille
      - feature
      - get_features
      positional: []
      named:
      - !Flag
        description: A feature entity/node ID
        synonyms:
        - --feature_id
        args: !SimpleFlagArg
          name: INTEGER
        optional: true
      parent: *id008
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille feature get_features [OPTIONS]\n\n  Get features\
        \ entities\n\n  Output:\n\n      Feature entity/node information\n\nOptions:\n\
        \  --feature_id INTEGER  A feature entity/node ID\n  -h, --help          \
        \  Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - feature
      - delete_orphans
      positional:
      - !Positional
        description: 'Options:'
        position: 0
        name: status
        optional: false
      named:
      - !Flag
        description: Name of the job
        synonyms:
        - --job_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Return immediately without waiting for job completion
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id008
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille feature delete_orphans [OPTIONS]\n\n  Delete orphans\
        \ Drupal feature nodes\n\n  Output:\n\n      status\n\nOptions:\n  --job_name\
        \ TEXT  Name of the job\n  --no_wait        Return immediately without waiting\
        \ for job completion\n  -h, --help       Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - feature
      - sync
      positional:
      - !Positional
        description: 'Options:'
        position: 0
        name: status
        optional: false
      named:
      - !Flag
        description: Common name of the organism to sync
        synonyms:
        - --organism
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: ID of the organism to sync
        synonyms:
        - --organism_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: 'Maximum number of features to sync (default: all)'
        synonyms:
        - --max_sync
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "List of types of records to be synced (e.g. gene mRNA,\ndefault:\
          \ all)"
        synonyms:
        - --types
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "List of names of records to be synced (e.g. gene0001,\ndefault:\
          \ all)"
        synonyms:
        - --ids
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Name of the job
        synonyms:
        - --job_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Return immediately without waiting for job completion
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id008
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille feature sync [OPTIONS]\n\n  Synchronize some features\
        \ (Tripal 2 only)\n\n  Output:\n\n      status\n\nOptions:\n  --organism TEXT\
        \     Common name of the organism to sync\n  --organism_id TEXT  ID of the\
        \ organism to sync\n  --max_sync TEXT     Maximum number of features to sync\
        \ (default: all)\n  --types TEXT        List of types of records to be synced\
        \ (e.g. gene mRNA,\n                      default: all)\n  --ids TEXT    \
        \      List of names of records to be synced (e.g. gene0001,\n           \
        \           default: all)\n  --job_name TEXT     Name of the job\n  --no_wait\
        \           Return immediately without waiting for job completion\n  -h, --help\
        \          Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - feature
      - get_features_tripal
      positional: []
      named:
      - !Flag
        description: A feature entity/node ID
        synonyms:
        - --feature_id
        args: !SimpleFlagArg
          name: INTEGER
        optional: true
      parent: *id008
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille feature get_features_tripal [OPTIONS]\n\n  Get\
        \ features entities\n\n  Output:\n\n      Feature entity/node information\n\
        \nOptions:\n  --feature_id INTEGER  A feature entity/node ID\n  -h, --help\
        \            Show this message and exit.\n"
      generated_using: *id003
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: tripaille feature [OPTIONS] COMMAND [ARGS]...\n\n  Manage Tripal\
      \ features\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n\
      \  delete_orphans       Delete orphans Drupal feature nodes Output: status\n\
      \  get_features         Get features entities Output: Feature entity/node...\n\
      \  get_features_tripal  Get features entities Output: Feature entity/node...\n\
      \  sync                 Synchronize some features (Tripal 2 only) Output:...\n"
    generated_using: *id003
  - &id009 !Command
    command:
    - tripaille
    - expression
    positional: []
    named: []
    parent: *id001
    subcommands:
    - !Command
      command:
      - tripaille
      - expression
      - delete_biomaterials
      positional:
      - !Positional
        description: 'Options:'
        position: 0
        name: status
        optional: false
      named:
      - !Flag
        description: JSON list of biomaterial names to delete. (optional)
        synonyms:
        - --names
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Organism id from which to delete biomaterials (optional)
        synonyms:
        - --organism_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Analysis id from which to delete biomaterials (optional)
        synonyms:
        - --analysis_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Name of the job (optional)
        synonyms:
        - --job_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Return immediately without waiting for job completion
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id009
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille expression delete_biomaterials [OPTIONS]\n\n  Delete\
        \ some biomaterials\n\n  Output:\n\n      status\n\nOptions:\n  --names TEXT\
        \        JSON list of biomaterial names to delete. (optional)\n  --organism_id\
        \ TEXT  Organism id from which to delete biomaterials (optional)\n  --analysis_id\
        \ TEXT  Analysis id from which to delete biomaterials (optional)\n  --job_name\
        \ TEXT     Name of the job (optional)\n  --no_wait           Return immediately\
        \ without waiting for job completion\n  -h, --help          Show this message\
        \ and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - expression
      - add_biomaterial
      positional:
      - !Positional
        description: Add a new biomaterial file to the database
        position: 0
        name: FILE_TYPE
        optional: false
      named:
      - !Flag
        description: The id of the associated analysis. Required for TripalV3
        synonyms:
        - --analysis_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Do not wait for job to complete
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id009
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille expression add_biomaterial [OPTIONS] ORGANISM_ID\
        \ FILE_PATH\n                                            FILE_TYPE\n\n  Add\
        \ a new biomaterial file to the database\n\n  Output:\n\n      Job information\n\
        \nOptions:\n  --analysis_id TEXT  The id of the associated analysis. Required\
        \ for TripalV3\n  --no_wait           Do not wait for job to complete\n  -h,\
        \ --help          Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - expression
      - sync_biomaterials
      positional:
      - !Positional
        description: 'Options:'
        position: 0
        name: status
        optional: false
      named:
      - !Flag
        description: "JSON list of ids of biomaterials to be synced (default:\nall)\
          \  [default: []]"
        synonyms:
        - --ids
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: 'Maximum number of features to sync (default: all)'
        synonyms:
        - --max_sync
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Name of the job
        synonyms:
        - --job_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Return immediately without waiting for job completion
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id009
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille expression sync_biomaterials [OPTIONS]\n\n  Synchronize\
        \ some biomaterials\n\n  Output:\n\n      status\n\nOptions:\n  --ids TEXT\
        \       JSON list of ids of biomaterials to be synced (default:\n        \
        \           all)  [default: []]\n  --max_sync TEXT  Maximum number of features\
        \ to sync (default: all)\n  --job_name TEXT  Name of the job\n  --no_wait\
        \        Return immediately without waiting for job completion\n  -h, --help\
        \       Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - expression
      - add_expression
      positional:
      - !Positional
        description: Add an expression file to tripal
        position: 0
        name: FILE_PATH
        optional: false
      named:
      - !Flag
        description: "Match to features using either name or\nuniquename. Default\
          \ to uniquename  [default:\nuniquename]"
        synonyms:
        - --match_type
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "The array design ID associated with this\nanalysis. (Non functional\
          \ in Tripal2)"
        synonyms:
        - --array_design_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "The units associated with the loaded values\n(ie, FPKM, RPKM,\
          \ raw counts)."
        synonyms:
        - --quantification_units
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "File extension for the file(s) to be loaded\ninto Chado. Do\
          \ not include the \".\". Not\nrequired for matrix files."
        synonyms:
        - --file_extension
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "A regular expression to describe the line that\noccurs before\
          \ the start of the expression data.\nIf the file has no header, this is\
          \ not needed."
        synonyms:
        - --start_regex
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "A regular expression to describe the line that\noccurs after\
          \ the end of the expression data. If\nthe file has no footer text, this\
          \ is not\nneeded."
        synonyms:
        - --stop_regex
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: "Specify the feature type to associate the data\nwith. (Tripal3\
          \ only)"
        synonyms:
        - --seq_type
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Set if the expression file is a column file
        synonyms:
        - --use_column
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: Do not wait for job to complete
        synonyms:
        - --no_wait
        args: !EmptyFlagArg {}
        optional: true
      parent: *id009
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille expression add_expression [OPTIONS] ORGANISM_ID\
        \ ANALYSIS_ID\n                                           FILE_PATH\n\n  Add\
        \ an expression file to tripal\n\n  Output:\n\n      Loading information\n\
        \nOptions:\n  --match_type TEXT            Match to features using either\
        \ name or\n                               uniquename. Default to uniquename\
        \  [default:\n                               uniquename]\n  --array_design_id\
        \ TEXT       The array design ID associated with this\n                  \
        \             analysis. (Non functional in Tripal2)\n  --quantification_units\
        \ TEXT  The units associated with the loaded values\n                    \
        \           (ie, FPKM, RPKM, raw counts).\n  --file_extension TEXT       \
        \ File extension for the file(s) to be loaded\n                          \
        \     into Chado. Do not include the \".\". Not\n                        \
        \       required for matrix files.\n  --start_regex TEXT           A regular\
        \ expression to describe the line that\n                               occurs\
        \ before the start of the expression data.\n                             \
        \  If the file has no header, this is not needed.\n  --stop_regex TEXT   \
        \         A regular expression to describe the line that\n               \
        \                occurs after the end of the expression data. If\n       \
        \                        the file has no footer text, this is not\n      \
        \                         needed.\n  --seq_type TEXT              Specify\
        \ the feature type to associate the data\n                               with.\
        \ (Tripal3 only)\n  --use_column                 Set if the expression file\
        \ is a column file\n  --no_wait                    Do not wait for job to\
        \ complete\n  -h, --help                   Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - expression
      - get_biomaterials_tripal
      positional: []
      named:
      - !Flag
        description: A biomaterial entity ID
        synonyms:
        - --biomaterial_id
        args: !SimpleFlagArg
          name: INTEGER
        optional: true
      parent: *id009
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille expression get_biomaterials_tripal [OPTIONS]\n\n\
        \  Get Biomaterial entities\n\n  Output:\n\n      Organism entity information\n\
        \nOptions:\n  --biomaterial_id INTEGER  A biomaterial entity ID\n  -h, --help\
        \                Show this message and exit.\n"
      generated_using: *id003
    - !Command
      command:
      - tripaille
      - expression
      - get_biomaterials
      positional: []
      named:
      - !Flag
        description: Limit query to the selected biomaterial
        synonyms:
        - --biomaterial_name
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Limit query to the selected provider
        synonyms:
        - --provider_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Limit query to the selected biomaterial
        synonyms:
        - --biomaterial_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Limit query to the selected organism
        synonyms:
        - --organism_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      - !Flag
        description: Limit query to the selected ref
        synonyms:
        - --dbxref_id
        args: !SimpleFlagArg
          name: TEXT
        optional: true
      parent: *id009
      subcommands: []
      usage: []
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille expression get_biomaterials [OPTIONS]\n\n  List\
        \ biomaterials in the database\n\n  Output:\n\n      Biomaterial list\n\n\
        Options:\n  --biomaterial_name TEXT  Limit query to the selected biomaterial\n\
        \  --provider_id TEXT       Limit query to the selected provider\n  --biomaterial_id\
        \ TEXT    Limit query to the selected biomaterial\n  --organism_id TEXT  \
        \     Limit query to the selected organism\n  --dbxref_id TEXT         Limit\
        \ query to the selected ref\n  -h, --help               Show this message\
        \ and exit.\n"
      generated_using: *id003
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: tripaille expression [OPTIONS] COMMAND [ARGS]...\n\n  Manage\
      \ Tripal expressions\n\nOptions:\n  -h, --help  Show this message and exit.\n\
      \nCommands:\n  add_biomaterial          Add a new biomaterial file to the database...\n\
      \  add_expression           Add an expression file to tripal Output: Loading...\n\
      \  delete_biomaterials      Delete some biomaterials Output: status\n  get_biomaterials\
      \         List biomaterials in the database Output:...\n  get_biomaterials_tripal\
      \  Get Biomaterial entities Output: Organism entity...\n  sync_biomaterials\
      \        Synchronize some biomaterials Output: status\n"
    generated_using: *id003
  - *id010
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag: !Flag
    description: Show the version and exit.
    synonyms:
    - --version
    args: !EmptyFlagArg {}
    optional: true
  help_text: "Usage: tripaille [OPTIONS] COMMAND [ARGS]...\n\n  Command line wrappers\
    \ around Python-Tripal functions.\n\nOptions:\n  --version            Show the\
    \ version and exit.\n  -v, --verbose        Enables verbose mode.\n  -i, --instance\
    \ TEXT  Name of instance in /root/.tripaille.yml. This\n                     \
    \  parameter can also be set via the environment variable\n                  \
    \     TRIPAILLE_INSTANCE  [default: __default; required]\n  -f, --path TEXT  \
    \    config file path\n  -h, --help           Show this message and exit.\n\n\
    Commands:\n  init        Help initialize global configuration (in home directory)\n\
    \  analysis    Manage Tripal analyses\n  db          Access Tripal/Chado database\n\
    \  entity      Manage any type of Tripal entities\n  feature     Manage Tripal\
    \ features\n  job         Manage Tripal jobs\n  organism    Manage Tripal organisms\n\
    \  phylogeny   Manage Tripal phylogeny\n  expression  Manage Tripal expressions\n"
  generated_using: *id003
subcommands:
- !Command
  command:
  - tripaille
  - analysis
  - load_blast
  positional:
  - !Positional
    description: ''
    position: 0
    name: NAME
    optional: false
  - !Positional
    description: ''
    position: 1
    name: PROGRAM
    optional: false
  - !Positional
    description: ''
    position: 2
    name: PROGRAMVERSION
    optional: false
  named:
  - !Flag
    description: "If looking for files in a directory, extension of\nthe blast result\
      \ files"
    synonyms:
    - --blast_ext
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Name of the database blasted against (must be in\nthe Chado db table)"
    synonyms:
    - --blastdb
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "ID of the database blasted against (must be in the\nChado db table)"
    synonyms:
    - --blastdb_id
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Blast parameters used to produce these results
    synonyms:
    - --blast_parameters
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "The regular expression that can uniquely identify\nthe query name.\
      \ This parameters is required if the\nfeature name is not the first word in\
      \ the blast\nquery name."
    synonyms:
    - --query_re
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "The feature type (e.g. 'gene', 'mRNA', 'contig') of\nthe query.\
      \ It must be a valid Sequence Ontology\nterm."
    synonyms:
    - --query_type
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Use this if the --query-re regular expression\nmatches unique names\
      \ instead of names in the\ndatabase."
    synonyms:
    - --query_uniquename
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "If the blast result file is simply a list of\nconcatenated blast\
      \ results."
    synonyms:
    - --is_concat
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Extract keywords for Tripal search
    synonyms:
    - --search_keywords
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Maximum number of hits to parse per feature.\nDefault=all  [default:\
      \ all]"
    synonyms:
    - --no_parsed
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Do not wait for job to complete
    synonyms:
    - --no_wait
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: analysis algorithm
    synonyms:
    - --algorithm
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourceversion
    synonyms:
    - --sourceversion
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourceuri
    synonyms:
    - --sourceuri
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis description
    synonyms:
    - --description
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis date_executed (yyyy-mm-dd)
    synonyms:
    - --date_executed
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  parent: *id010
  subcommands: []
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille analysis load_blast [OPTIONS] NAME PROGRAM PROGRAMVERSION\n\
    \                                     SOURCENAME BLAST_OUTPUT\n\n  Create a Blast\
    \ analysis\n\n  Output:\n\n      Loading information\n\nOptions:\n  --blast_ext\
    \ TEXT         If looking for files in a directory, extension of\n           \
    \                the blast result files\n  --blastdb TEXT           Name of the\
    \ database blasted against (must be in\n                           the Chado db\
    \ table)\n  --blastdb_id TEXT        ID of the database blasted against (must\
    \ be in the\n                           Chado db table)\n  --blast_parameters\
    \ TEXT  Blast parameters used to produce these results\n  --query_re TEXT    \
    \      The regular expression that can uniquely identify\n                   \
    \        the query name. This parameters is required if the\n                \
    \           feature name is not the first word in the blast\n                \
    \           query name.\n  --query_type TEXT        The feature type (e.g. 'gene',\
    \ 'mRNA', 'contig') of\n                           the query. It must be a valid\
    \ Sequence Ontology\n                           term.\n  --query_uniquename  \
    \     Use this if the --query-re regular expression\n                        \
    \   matches unique names instead of names in the\n                           database.\n\
    \  --is_concat              If the blast result file is simply a list of\n   \
    \                        concatenated blast results.\n  --search_keywords    \
    \    Extract keywords for Tripal search\n  --no_parsed TEXT         Maximum number\
    \ of hits to parse per feature.\n                           Default=all  [default:\
    \ all]\n  --no_wait                Do not wait for job to complete\n  --algorithm\
    \ TEXT         analysis algorithm\n  --sourceversion TEXT     analysis sourceversion\n\
    \  --sourceuri TEXT         analysis sourceuri\n  --description TEXT       analysis\
    \ description\n  --date_executed TEXT     analysis date_executed (yyyy-mm-dd)\n\
    \  -h, --help               Show this message and exit.\n"
  generated_using: *id003
- !Command
  command:
  - tripaille
  - analysis
  - get_analyses
  positional: []
  named:
  - !Flag
    description: An analysis ID
    synonyms:
    - --analysis_id
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis name
    synonyms:
    - --name
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis program
    synonyms:
    - --program
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis programversion
    synonyms:
    - --programversion
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis algorithm
    synonyms:
    - --algorithm
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourcename
    synonyms:
    - --sourcename
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourceversion
    synonyms:
    - --sourceversion
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourceuri
    synonyms:
    - --sourceuri
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis date_executed (yyyy-mm-dd)
    synonyms:
    - --date_executed
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  parent: *id010
  subcommands: []
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille analysis get_analyses [OPTIONS]\n\n  Get analyses\n\
    \n  Output:\n\n      Analysis information\n\nOptions:\n  --analysis_id TEXT  \
    \   An analysis ID\n  --name TEXT            analysis name\n  --program TEXT \
    \        analysis program\n  --programversion TEXT  analysis programversion\n\
    \  --algorithm TEXT       analysis algorithm\n  --sourcename TEXT      analysis\
    \ sourcename\n  --sourceversion TEXT   analysis sourceversion\n  --sourceuri TEXT\
    \       analysis sourceuri\n  --date_executed TEXT   analysis date_executed (yyyy-mm-dd)\n\
    \  -h, --help             Show this message and exit.\n"
  generated_using: *id003
- !Command
  command:
  - tripaille
  - analysis
  - get_analyses_tripal
  positional: []
  named:
  - !Flag
    description: An analysis entity/node ID
    synonyms:
    - --analysis_id
    args: !SimpleFlagArg
      name: INTEGER
    optional: true
  parent: *id010
  subcommands: []
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille analysis get_analyses_tripal [OPTIONS]\n\n  Get analysis\
    \ entities\n\n  Output:\n\n      Analysis entity/node information\n\nOptions:\n\
    \  --analysis_id INTEGER  An analysis entity/node ID\n  -h, --help           \
    \  Show this message and exit.\n"
  generated_using: *id003
- !Command
  command:
  - tripaille
  - analysis
  - add_analysis
  positional:
  - !Positional
    description: Create an analysis
    position: 0
    name: SOURCENAME
    optional: false
  named:
  - !Flag
    description: analysis algorithm
    synonyms:
    - --algorithm
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourceversion
    synonyms:
    - --sourceversion
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourceuri
    synonyms:
    - --sourceuri
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis description
    synonyms:
    - --description
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis date_executed (yyyy-mm-dd)
    synonyms:
    - --date_executed
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  parent: *id010
  subcommands: []
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille analysis add_analysis [OPTIONS] NAME PROGRAM PROGRAMVERSION\n\
    \                                       SOURCENAME\n\n  Create an analysis\n\n\
    \  Output:\n\n      Analysis information\n\nOptions:\n  --algorithm TEXT     \
    \ analysis algorithm\n  --sourceversion TEXT  analysis sourceversion\n  --sourceuri\
    \ TEXT      analysis sourceuri\n  --description TEXT    analysis description\n\
    \  --date_executed TEXT  analysis date_executed (yyyy-mm-dd)\n  -h, --help   \
    \         Show this message and exit.\n"
  generated_using: *id003
- !Command
  command:
  - tripaille
  - analysis
  - load_gff3
  positional:
  - !Positional
    description: ''
    position: 0
    name: GFF
    optional: false
  named:
  - !Flag
    description: Organism common name or abbreviation
    synonyms:
    - --organism
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Organism ID
    synonyms:
    - --organism_id
    args: !SimpleFlagArg
      name: INTEGER
    optional: true
  - !Flag
    description: Analysis name
    synonyms:
    - --analysis
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Analysis ID
    synonyms:
    - --analysis_id
    args: !SimpleFlagArg
      name: INTEGER
    optional: true
  - !Flag
    description: "Import mode (add_only=existing features won't\nbe touched, update=existing\
      \ features will be\nupdated and obsolete attributes kept)')\n[default: update]"
    synonyms:
    - --import_mode
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "In case of Target attribute in the GFF3,\nchoose the organism abbreviation\
      \ or common\nname to which target sequences belong. Select\nthis only if target\
      \ sequences belong to a\ndifferent organism than the one specified with\n--organism-id.\
      \ And only choose an organism\nhere if all of the target sequences belong to\n\
      the same species. If the targets in the GFF\nfile belong to multiple different\
      \ species then\nthe organism must be specified using the\n'target_organism=genus:species'\
      \ attribute in\nthe GFF file.')"
    synonyms:
    - --target_organism
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "In case of Target attribute in the GFF3,\nchoose the organism ID\
      \ to which target\nsequences belong. Select this only if target\nsequences belong\
      \ to a different organism than\nthe one specified with --organism-id. And only\n\
      choose an organism here if all of the target\nsequences belong to the same species.\
      \ If the\ntargets in the GFF file belong to multiple\ndifferent species then\
      \ the organism must be\nspecified using the\n'target_organism=genus:species'\
      \ attribute in\nthe GFF file.')"
    synonyms:
    - --target_organism_id
    args: !SimpleFlagArg
      name: INTEGER
    optional: true
  - !Flag
    description: "In case of Target attribute in the GFF3, if\nthe unique name for\
      \ a target sequence is not\nunique (e.g. a protein and an mRNA have the\nsame\
      \ name) then you must specify the type for\nall targets in the GFF file. If\
      \ the targets\nare of different types then the type must be\nspecified using\
      \ the 'target_type=type'\nattribute in the GFF file. This must be a\nvalid Sequence\
      \ Ontology (SO) term.')"
    synonyms:
    - --target_type
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "In case of Target attribute in the GFF3, if\nthe target feature\
      \ cannot be found, create one\nusing the organism and type specified above,\n\
      or using the 'target_organism' and\n'target_type' fields specified in the GFF\n\
      file. Values specified in the GFF file take\nprecedence over those specified\
      \ above.')"
    synonyms:
    - --target_create
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "The line in the GFF file where importing\nshould start"
    synonyms:
    - --start_line
    args: !SimpleFlagArg
      name: INTEGER
    optional: true
  - !Flag
    description: "A Sequence Ontology type for the landmark\nsequences in the GFF\
      \ fie (e.g. 'chromosome')."
    synonyms:
    - --landmark_type
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "When ID attribute is absent, specify which\nother attribute can\
      \ uniquely identify the\nfeature."
    synonyms:
    - --alt_id_attr
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Create organisms when encountering organism\nattribute (these lines\
      \ will be skip otherwise)"
    synonyms:
    - --create_organism
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Regular expression for the mRNA name
    synonyms:
    - --re_mrna
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Replacement string for the protein name
    synonyms:
    - --re_protein
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Name of the job
    synonyms:
    - --job_name
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Do not wait for job to complete
    synonyms:
    - --no_wait
    args: !EmptyFlagArg {}
    optional: true
  parent: *id010
  subcommands: []
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille analysis load_gff3 [OPTIONS] GFF\n\n  Load GFF3 file\n\
    \n  Output:\n\n      Loading information\n\nOptions:\n  --organism TEXT      \
    \         Organism common name or abbreviation\n  --organism_id INTEGER      \
    \   Organism ID\n  --analysis TEXT               Analysis name\n  --analysis_id\
    \ INTEGER         Analysis ID\n  --import_mode TEXT            Import mode (add_only=existing\
    \ features won't\n                                be touched, update=existing\
    \ features will be\n                                updated and obsolete attributes\
    \ kept)')\n                                [default: update]\n  --target_organism\
    \ TEXT        In case of Target attribute in the GFF3,\n                     \
    \           choose the organism abbreviation or common\n                     \
    \           name to which target sequences belong. Select\n                  \
    \              this only if target sequences belong to a\n                   \
    \             different organism than the one specified with\n               \
    \                 --organism-id. And only choose an organism\n               \
    \                 here if all of the target sequences belong to\n            \
    \                    the same species. If the targets in the GFF\n           \
    \                     file belong to multiple different species then\n       \
    \                         the organism must be specified using the\n         \
    \                       'target_organism=genus:species' attribute in\n       \
    \                         the GFF file.')\n  --target_organism_id INTEGER  In\
    \ case of Target attribute in the GFF3,\n                                choose\
    \ the organism ID to which target\n                                sequences belong.\
    \ Select this only if target\n                                sequences belong\
    \ to a different organism than\n                                the one specified\
    \ with --organism-id. And only\n                                choose an organism\
    \ here if all of the target\n                                sequences belong\
    \ to the same species. If the\n                                targets in the\
    \ GFF file belong to multiple\n                                different species\
    \ then the organism must be\n                                specified using the\n\
    \                                'target_organism=genus:species' attribute in\n\
    \                                the GFF file.')\n  --target_type TEXT       \
    \     In case of Target attribute in the GFF3, if\n                          \
    \      the unique name for a target sequence is not\n                        \
    \        unique (e.g. a protein and an mRNA have the\n                       \
    \         same name) then you must specify the type for\n                    \
    \            all targets in the GFF file. If the targets\n                   \
    \             are of different types then the type must be\n                 \
    \               specified using the 'target_type=type'\n                     \
    \           attribute in the GFF file. This must be a\n                      \
    \          valid Sequence Ontology (SO) term.')\n  --target_create           \
    \    In case of Target attribute in the GFF3, if\n                           \
    \     the target feature cannot be found, create one\n                       \
    \         using the organism and type specified above,\n                     \
    \           or using the 'target_organism' and\n                             \
    \   'target_type' fields specified in the GFF\n                              \
    \  file. Values specified in the GFF file take\n                             \
    \   precedence over those specified above.')\n  --start_line INTEGER         \
    \ The line in the GFF file where importing\n                                should\
    \ start\n  --landmark_type TEXT          A Sequence Ontology type for the landmark\n\
    \                                sequences in the GFF fie (e.g. 'chromosome').\n\
    \  --alt_id_attr TEXT            When ID attribute is absent, specify which\n\
    \                                other attribute can uniquely identify the\n \
    \                               feature.\n  --create_organism             Create\
    \ organisms when encountering organism\n                                attribute\
    \ (these lines will be skip otherwise)\n  --re_mrna TEXT                Regular\
    \ expression for the mRNA name\n  --re_protein TEXT             Replacement string\
    \ for the protein name\n  --job_name TEXT               Name of the job\n  --no_wait\
    \                     Do not wait for job to complete\n  -h, --help          \
    \          Show this message and exit.\n"
  generated_using: *id003
- !Command
  command:
  - tripaille
  - analysis
  - load_go
  positional:
  - !Positional
    description: ''
    position: 0
    name: NAME
    optional: false
  - !Positional
    description: ''
    position: 1
    name: PROGRAM
    optional: false
  - !Positional
    description: ''
    position: 2
    name: PROGRAMVERSION
    optional: false
  named:
  - !Flag
    description: Organism common name or abbreviation
    synonyms:
    - --organism
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Organism ID
    synonyms:
    - --organism_id
    args: !SimpleFlagArg
      name: INTEGER
    optional: true
  - !Flag
    description: "If looking for files in a directory, extension of the\nGAF files"
    synonyms:
    - --gaf_ext
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "The feature type (e.g. 'gene', 'mRNA', 'contig') of\nthe query.\
      \ It must be a valid Sequence Ontology term."
    synonyms:
    - --query_type
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Method to match identifiers to features in the\ndatabase. ('name',\
      \ 'uniquename' or 'dbxref')\n[default: uniquename]"
    synonyms:
    - --query_matching
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Import method ('add' or 'remove')  [default: add]"
    synonyms:
    - --method
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Column containing the feature identifiers (2, 3, 10\nor 11; default=2).\
      \  [default: 2]"
    synonyms:
    - --name_column
    args: !SimpleFlagArg
      name: INTEGER
    optional: true
  - !Flag
    description: "Regular expression to extract the feature name from\nGAF file."
    synonyms:
    - --re_name
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Do not wait for job to complete
    synonyms:
    - --no_wait
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: analysis algorithm
    synonyms:
    - --algorithm
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourceversion
    synonyms:
    - --sourceversion
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourceuri
    synonyms:
    - --sourceuri
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis description
    synonyms:
    - --description
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis date_executed (yyyy-mm-dd)
    synonyms:
    - --date_executed
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  parent: *id010
  subcommands: []
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille analysis load_go [OPTIONS] NAME PROGRAM PROGRAMVERSION\n\
    \                                  SOURCENAME GAF_OUTPUT\n\n  Create a GO analysis\n\
    \n  Output:\n\n      Loading information\n\nOptions:\n  --organism TEXT      \
    \  Organism common name or abbreviation\n  --organism_id INTEGER  Organism ID\n\
    \  --gaf_ext TEXT         If looking for files in a directory, extension of the\n\
    \                         GAF files\n  --query_type TEXT      The feature type\
    \ (e.g. 'gene', 'mRNA', 'contig') of\n                         the query. It must\
    \ be a valid Sequence Ontology term.\n  --query_matching TEXT  Method to match\
    \ identifiers to features in the\n                         database. ('name',\
    \ 'uniquename' or 'dbxref')\n                         [default: uniquename]\n\
    \  --method TEXT          Import method ('add' or 'remove')  [default: add]\n\
    \  --name_column INTEGER  Column containing the feature identifiers (2, 3, 10\n\
    \                         or 11; default=2).  [default: 2]\n  --re_name TEXT \
    \        Regular expression to extract the feature name from\n               \
    \          GAF file.\n  --no_wait              Do not wait for job to complete\n\
    \  --algorithm TEXT       analysis algorithm\n  --sourceversion TEXT   analysis\
    \ sourceversion\n  --sourceuri TEXT       analysis sourceuri\n  --description\
    \ TEXT     analysis description\n  --date_executed TEXT   analysis date_executed\
    \ (yyyy-mm-dd)\n  -h, --help             Show this message and exit.\n"
  generated_using: *id003
- !Command
  command:
  - tripaille
  - analysis
  - sync
  positional:
  - !Positional
    description: 'Options:'
    position: 0
    name: status
    optional: false
  named:
  - !Flag
    description: Analysis name
    synonyms:
    - --analysis
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: ID of the analysis to sync
    synonyms:
    - --analysis_id
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Name of the job
    synonyms:
    - --job_name
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Return immediately without waiting for job completion
    synonyms:
    - --no_wait
    args: !EmptyFlagArg {}
    optional: true
  parent: *id010
  subcommands: []
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille analysis sync [OPTIONS]\n\n  Synchronize an analysis\n\
    \n  Output:\n\n      status\n\nOptions:\n  --analysis TEXT     Analysis name\n\
    \  --analysis_id TEXT  ID of the analysis to sync\n  --job_name TEXT     Name\
    \ of the job\n  --no_wait           Return immediately without waiting for job\
    \ completion\n  -h, --help          Show this message and exit.\n"
  generated_using: *id003
- !Command
  command:
  - tripaille
  - analysis
  - load_interpro
  positional:
  - !Positional
    description: --query_re TEXT             The regular expression that can uniquely
    position: 0
    name: results
    optional: false
  named:
  - !Flag
    description: InterProScan parameters used to produce these
    synonyms:
    - --interpro_parameters
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "The feature type (e.g. 'gene', 'mRNA', 'contig')\nof the query.\
      \ It must be a valid Sequence\nOntology term."
    synonyms:
    - --query_type
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Use this if the query_re regular expression\nmatches unique names\
      \ instead of names in the\ndatabase."
    synonyms:
    - --query_uniquename
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Load GO annotation to the database
    synonyms:
    - --parse_go
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Do not wait for job to complete
    synonyms:
    - --no_wait
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: analysis algorithm
    synonyms:
    - --algorithm
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourceversion
    synonyms:
    - --sourceversion
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis sourceuri
    synonyms:
    - --sourceuri
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis description
    synonyms:
    - --description
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: analysis date_executed (yyyy-mm-dd)
    synonyms:
    - --date_executed
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  parent: *id010
  subcommands: []
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille analysis load_interpro [OPTIONS] NAME PROGRAM PROGRAMVERSION\n\
    \                                        SOURCENAME INTERPRO_OUTPUT\n\n  Create\
    \ an Interpro analysis\n\n  Output:\n\n      Loading information\n\nOptions:\n\
    \  --interpro_parameters TEXT  InterProScan parameters used to produce these\n\
    \                              results\n  --query_re TEXT             The regular\
    \ expression that can uniquely\n                              identify the query\
    \ name. This parameters is\n                              required if the feature\
    \ name is not the first\n                              word in the blast query\
    \ name.\n  --query_type TEXT           The feature type (e.g. 'gene', 'mRNA',\
    \ 'contig')\n                              of the query. It must be a valid Sequence\n\
    \                              Ontology term.\n  --query_uniquename          Use\
    \ this if the query_re regular expression\n                              matches\
    \ unique names instead of names in the\n                              database.\n\
    \  --parse_go                  Load GO annotation to the database\n  --no_wait\
    \                   Do not wait for job to complete\n  --algorithm TEXT      \
    \      analysis algorithm\n  --sourceversion TEXT        analysis sourceversion\n\
    \  --sourceuri TEXT            analysis sourceuri\n  --description TEXT      \
    \    analysis description\n  --date_executed TEXT        analysis date_executed\
    \ (yyyy-mm-dd)\n  -h, --help                  Show this message and exit.\n"
  generated_using: *id003
- !Command
  command:
  - tripaille
  - analysis
  - load_fasta
  positional:
  - !Positional
    description: --rel_type TEXT          Relation type (part_of or derives_from)
    position: 0
    name: DB
    optional: false
  named:
  - !Flag
    description: Organism common name or abbreviation
    synonyms:
    - --organism
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Organism ID
    synonyms:
    - --organism_id
    args: !SimpleFlagArg
      name: INTEGER
    optional: true
  - !Flag
    description: Analysis name
    synonyms:
    - --analysis
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Analysis ID
    synonyms:
    - --analysis_id
    args: !SimpleFlagArg
      name: INTEGER
    optional: true
  - !Flag
    description: 'Sequence type  [default: contig]'
    synonyms:
    - --sequence_type
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Regular expression for the name
    synonyms:
    - --re_name
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Regular expression for the unique name
    synonyms:
    - --re_uniquename
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: External DB ID
    synonyms:
    - --db_ext_id
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Regular expression for the accession from external
    synonyms:
    - --re_accession
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Relation subject regular expression (used to\nextract id of related\
      \ entity)"
    synonyms:
    - --rel_subject_re
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Relation subject type (must match already loaded\ndata, e.g. mRNA)"
    synonyms:
    - --rel_subject_type
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Insertion method (insert, update or insup,\ndefault=insup (Insert\
      \ and Update))  [default:\ninsup]"
    synonyms:
    - --method
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: "Match type for already loaded features (name or\nuniquename; default=uniquename;\
      \ used for \"Update\nonly\" or \"Insert and update\" methods)'  [default:\n\
      uniquename]"
    synonyms:
    - --match_type
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Name of the job
    synonyms:
    - --job_name
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Do not wait for job to complete
    synonyms:
    - --no_wait
    args: !EmptyFlagArg {}
    optional: true
  parent: *id010
  subcommands: []
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille analysis load_fasta [OPTIONS] FASTA\n\n  Load fasta\
    \ sequences\n\n  Output:\n\n      Loading information\n\nOptions:\n  --organism\
    \ TEXT          Organism common name or abbreviation\n  --organism_id INTEGER\
    \    Organism ID\n  --analysis TEXT          Analysis name\n  --analysis_id INTEGER\
    \    Analysis ID\n  --sequence_type TEXT     Sequence type  [default: contig]\n\
    \  --re_name TEXT           Regular expression for the name\n  --re_uniquename\
    \ TEXT     Regular expression for the unique name\n  --db_ext_id TEXT        \
    \ External DB ID\n  --re_accession TEXT      Regular expression for the accession\
    \ from external\n                           DB\n  --rel_type TEXT          Relation\
    \ type (part_of or derives_from)\n  --rel_subject_re TEXT    Relation subject\
    \ regular expression (used to\n                           extract id of related\
    \ entity)\n  --rel_subject_type TEXT  Relation subject type (must match already\
    \ loaded\n                           data, e.g. mRNA)\n  --method TEXT       \
    \     Insertion method (insert, update or insup,\n                           default=insup\
    \ (Insert and Update))  [default:\n                           insup]\n  --match_type\
    \ TEXT        Match type for already loaded features (name or\n              \
    \             uniquename; default=uniquename; used for \"Update\n            \
    \               only\" or \"Insert and update\" methods)'  [default:\n       \
    \                    uniquename]\n  --job_name TEXT          Name of the job\n\
    \  --no_wait                Do not wait for job to complete\n  -h, --help    \
    \           Show this message and exit.\n"
  generated_using: *id003
- !Command
  command:
  - tripaille
  - analysis
  - delete_orphans
  positional:
  - !Positional
    description: 'Options:'
    position: 0
    name: status
    optional: false
  named:
  - !Flag
    description: Name of the job
    synonyms:
    - --job_name
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Return immediately without waiting for job completion
    synonyms:
    - --no_wait
    args: !EmptyFlagArg {}
    optional: true
  parent: *id010
  subcommands: []
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille analysis delete_orphans [OPTIONS]\n\n  Delete orphans\
    \ Drupal analysis nodes\n\n  Output:\n\n      status\n\nOptions:\n  --job_name\
    \ TEXT  Name of the job\n  --no_wait        Return immediately without waiting\
    \ for job completion\n  -h, --help       Show this message and exit.\n"
  generated_using: *id003
usage: []
help_flag: !Flag
  description: Show this message and exit.
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "Usage: tripaille analysis [OPTIONS] COMMAND [ARGS]...\n\n  Manage Tripal\
  \ analyses\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n\
  \  add_analysis         Create an analysis Output: Analysis information\n  delete_orphans\
  \       Delete orphans Drupal analysis nodes Output: status\n  get_analyses    \
  \     Get analyses Output: Analysis information\n  get_analyses_tripal  Get analysis\
  \ entities Output: Analysis entity/node...\n  load_blast           Create a Blast\
  \ analysis Output: Loading information\n  load_fasta           Load fasta sequences\
  \ Output: Loading information\n  load_gff3            Load GFF3 file Output: Loading\
  \ information\n  load_go              Create a GO analysis Output: Loading information\n\
  \  load_interpro        Create an Interpro analysis Output: Loading...\n  sync \
  \                Synchronize an analysis Output: status\n"
generated_using: *id003
