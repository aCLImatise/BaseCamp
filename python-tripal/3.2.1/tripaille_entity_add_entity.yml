&id011 !Command
positional:
- !Positional
  description: ''
  position: 0
  name: ENTITY
  optional: false
named:
- !Flag
  description: Values to populate the entity fields
  synonyms:
  - --params
  args: !SimpleFlagArg
    name: TEXT
  optional: true
command:
- tripaille
- entity
- add_entity
parent: &id005 !Command
  positional: []
  named: []
  command:
  - tripaille
  - entity
  parent: &id001 !Command
    positional: []
    named:
    - !Flag
      description: Enables verbose mode.
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'Name of instance in /home/ubuntu/.tripaille.yml. This parameter
        can also be set via the environment variable TRIPAILLE_INSTANCE  [default:
        __default; required]'
      synonyms:
      - -i
      - --instance
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: config file path
      synonyms:
      - -f
      - --path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    command:
    - tripaille
    parent:
    subcommands:
    - &id002 !Command
      positional: []
      named: []
      command:
      - tripaille
      - analysis
      parent: *id001
      subcommands:
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: NAME
          optional: false
        - !Positional
          description: ''
          position: 1
          name: PROGRAM
          optional: false
        - !Positional
          description: ''
          position: 2
          name: PROGRAMVERSION
          optional: false
        named:
        - !Flag
          description: analysis algorithm
          synonyms:
          - --algorithm
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourceversion
          synonyms:
          - --sourceversion
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourceuri
          synonyms:
          - --sourceuri
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis description
          synonyms:
          - --description
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis date_executed (yyyy-mm-dd)
          synonyms:
          - --date_executed
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        command:
        - tripaille
        - analysis
        - add_analysis
        parent: *id002
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille analysis add_analysis [OPTIONS] NAME PROGRAM\
          \ PROGRAMVERSION\n                                       SOURCENAME\n\n\
          \  Create an analysis\n\n  Output:\n\n      Analysis information\n\nOptions:\n\
          \  --algorithm TEXT      analysis algorithm\n  --sourceversion TEXT  analysis\
          \ sourceversion\n  --sourceuri TEXT      analysis sourceuri\n  --description\
          \ TEXT    analysis description\n  --date_executed TEXT  analysis date_executed\
          \ (yyyy-mm-dd)\n  -h, --help            Show this message and exit.\n"
        generated_using: &id003
        - --help
      - !Command
        positional: []
        named:
        - !Flag
          description: Name of the job
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Return immediately without waiting for job completion
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - analysis
        - delete_orphans
        parent: *id002
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille analysis delete_orphans [OPTIONS]\n\n  Delete\
          \ orphans Drupal analysis nodes\n\n  Output:\n\n      status\n\nOptions:\n\
          \  --job_name TEXT  Name of the job\n  --no_wait        Return immediately\
          \ without waiting for job completion\n  -h, --help       Show this message\
          \ and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: An analysis ID
          synonyms:
          - --analysis_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis name
          synonyms:
          - --name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis program
          synonyms:
          - --program
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis programversion
          synonyms:
          - --programversion
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis algorithm
          synonyms:
          - --algorithm
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourcename
          synonyms:
          - --sourcename
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourceversion
          synonyms:
          - --sourceversion
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourceuri
          synonyms:
          - --sourceuri
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis date_executed (yyyy-mm-dd)
          synonyms:
          - --date_executed
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        command:
        - tripaille
        - analysis
        - get_analyses
        parent: *id002
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille analysis get_analyses [OPTIONS]\n\n  Get analyses\n\
          \n  Output:\n\n      Analysis information\n\nOptions:\n  --analysis_id TEXT\
          \     An analysis ID\n  --name TEXT            analysis name\n  --program\
          \ TEXT         analysis program\n  --programversion TEXT  analysis programversion\n\
          \  --algorithm TEXT       analysis algorithm\n  --sourcename TEXT      analysis\
          \ sourcename\n  --sourceversion TEXT   analysis sourceversion\n  --sourceuri\
          \ TEXT       analysis sourceuri\n  --date_executed TEXT   analysis date_executed\
          \ (yyyy-mm-dd)\n  -h, --help             Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: An analysis entity/node ID
          synonyms:
          - --analysis_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        command:
        - tripaille
        - analysis
        - get_analyses_tripal
        parent: *id002
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille analysis get_analyses_tripal [OPTIONS]\n\n  Get\
          \ analysis entities\n\n  Output:\n\n      Analysis entity/node information\n\
          \nOptions:\n  --analysis_id INTEGER  An analysis entity/node ID\n  -h, --help\
          \             Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: NAME
          optional: false
        - !Positional
          description: ''
          position: 1
          name: PROGRAM
          optional: false
        - !Positional
          description: ''
          position: 2
          name: PROGRAMVERSION
          optional: false
        named:
        - !Flag
          description: If looking for files in a directory, extension of the blast
            result files
          synonyms:
          - --blast_ext
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Name of the database blasted against (must be in the Chado
            db table)
          synonyms:
          - --blastdb
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: ID of the database blasted against (must be in the Chado db
            table)
          synonyms:
          - --blastdb_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Blast parameters used to produce these results
          synonyms:
          - --blast_parameters
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The regular expression that can uniquely identify the query
            name. This parameters is required if the feature name is not the first
            word in the blast query name.
          synonyms:
          - --query_re
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The feature type (e.g. 'gene', 'mRNA', 'contig') of the query.
            It must be a valid Sequence Ontology term.
          synonyms:
          - --query_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Use this if the --query-re regular expression matches unique
            names instead of names in the database.
          synonyms:
          - --query_uniquename
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: If the blast result file is simply a list of concatenated blast
            results.
          synonyms:
          - --is_concat
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: Extract keywords for Tripal search
          synonyms:
          - --search_keywords
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: 'Maximum number of hits to parse per feature. Default=all  [default:
            all]'
          synonyms:
          - --no_parsed
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Do not wait for job to complete
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: analysis algorithm
          synonyms:
          - --algorithm
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourceversion
          synonyms:
          - --sourceversion
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourceuri
          synonyms:
          - --sourceuri
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis description
          synonyms:
          - --description
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis date_executed (yyyy-mm-dd)
          synonyms:
          - --date_executed
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        command:
        - tripaille
        - analysis
        - load_blast
        parent: *id002
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille analysis load_blast [OPTIONS] NAME PROGRAM PROGRAMVERSION\n\
          \                                     SOURCENAME BLAST_OUTPUT\n\n  Create\
          \ a Blast analysis\n\n  Output:\n\n      Loading information\n\nOptions:\n\
          \  --blast_ext TEXT         If looking for files in a directory, extension\
          \ of\n                           the blast result files\n\n  --blastdb TEXT\
          \           Name of the database blasted against (must be in\n         \
          \                  the Chado db table)\n\n  --blastdb_id TEXT        ID\
          \ of the database blasted against (must be in the\n                    \
          \       Chado db table)\n\n  --blast_parameters TEXT  Blast parameters used\
          \ to produce these results\n  --query_re TEXT          The regular expression\
          \ that can uniquely identify\n                           the query name.\
          \ This parameters is required if the\n                           feature\
          \ name is not the first word in the blast\n                           query\
          \ name.\n\n  --query_type TEXT        The feature type (e.g. 'gene', 'mRNA',\
          \ 'contig') of\n                           the query. It must be a valid\
          \ Sequence Ontology\n                           term.\n\n  --query_uniquename\
          \       Use this if the --query-re regular expression\n                \
          \           matches unique names instead of names in the\n             \
          \              database.\n\n  --is_concat              If the blast result\
          \ file is simply a list of\n                           concatenated blast\
          \ results.\n\n  --search_keywords        Extract keywords for Tripal search\n\
          \  --no_parsed TEXT         Maximum number of hits to parse per feature.\n\
          \                           Default=all  [default: all]\n\n  --no_wait \
          \               Do not wait for job to complete\n  --algorithm TEXT    \
          \     analysis algorithm\n  --sourceversion TEXT     analysis sourceversion\n\
          \  --sourceuri TEXT         analysis sourceuri\n  --description TEXT   \
          \    analysis description\n  --date_executed TEXT     analysis date_executed\
          \ (yyyy-mm-dd)\n  -h, --help               Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: FASTA
          optional: false
        named:
        - !Flag
          description: Organism common name or abbreviation
          synonyms:
          - --organism
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Organism ID
          synonyms:
          - --organism_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        - !Flag
          description: Analysis name
          synonyms:
          - --analysis
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Analysis ID
          synonyms:
          - --analysis_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        - !Flag
          description: 'Sequence type  [default: contig]'
          synonyms:
          - --sequence_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Regular expression for the name
          synonyms:
          - --re_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Regular expression for the unique name
          synonyms:
          - --re_uniquename
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: External DB ID
          synonyms:
          - --db_ext_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Regular expression for the accession from external DB
          synonyms:
          - --re_accession
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Relation type (part_of or derives_from)
          synonyms:
          - --rel_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Relation subject regular expression (used to extract id of
            related entity)
          synonyms:
          - --rel_subject_re
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Relation subject type (must match already loaded data, e.g.
            mRNA)
          synonyms:
          - --rel_subject_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: 'Insertion method (insert, update or insup, default=insup (Insert
            and Update))  [default: insup]'
          synonyms:
          - --method
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: "Match type for already loaded features (name or uniquename;\
            \ default=uniquename; used for \"Update only\" or \"Insert and update\"\
            \ methods)'  [default: uniquename]"
          synonyms:
          - --match_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Name of the job
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Do not wait for job to complete
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - analysis
        - load_fasta
        parent: *id002
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille analysis load_fasta [OPTIONS] FASTA\n\n  Load\
          \ fasta sequences\n\n  Output:\n\n      Loading information\n\nOptions:\n\
          \  --organism TEXT          Organism common name or abbreviation\n  --organism_id\
          \ INTEGER    Organism ID\n  --analysis TEXT          Analysis name\n  --analysis_id\
          \ INTEGER    Analysis ID\n  --sequence_type TEXT     Sequence type  [default:\
          \ contig]\n  --re_name TEXT           Regular expression for the name\n\
          \  --re_uniquename TEXT     Regular expression for the unique name\n  --db_ext_id\
          \ TEXT         External DB ID\n  --re_accession TEXT      Regular expression\
          \ for the accession from external\n                           DB\n\n  --rel_type\
          \ TEXT          Relation type (part_of or derives_from)\n  --rel_subject_re\
          \ TEXT    Relation subject regular expression (used to\n               \
          \            extract id of related entity)\n\n  --rel_subject_type TEXT\
          \  Relation subject type (must match already loaded\n                  \
          \         data, e.g. mRNA)\n\n  --method TEXT            Insertion method\
          \ (insert, update or insup,\n                           default=insup (Insert\
          \ and Update))  [default:\n                           insup]\n\n  --match_type\
          \ TEXT        Match type for already loaded features (name or\n        \
          \                   uniquename; default=uniquename; used for \"Update\n\
          \                           only\" or \"Insert and update\" methods)'  [default:\n\
          \                           uniquename]\n\n  --job_name TEXT          Name\
          \ of the job\n  --no_wait                Do not wait for job to complete\n\
          \  -h, --help               Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: GFF
          optional: false
        named:
        - !Flag
          description: Organism common name or abbreviation
          synonyms:
          - --organism
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Organism ID
          synonyms:
          - --organism_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        - !Flag
          description: Analysis name
          synonyms:
          - --analysis
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Analysis ID
          synonyms:
          - --analysis_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        - !Flag
          description: "Import mode (add_only=existing features won't be touched,\
            \ update=existing features will be updated and obsolete attributes kept)')\
            \ [default: update]"
          synonyms:
          - --import_mode
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: In case of Target attribute in the GFF3, choose the organism
            abbreviation or common name to which target sequences belong. Select this
            only if target sequences belong to a different organism than the one specified
            with --organism-id. And only choose an organism here if all of the target
            sequences belong to the same species. If the targets in the GFF file belong
            to multiple different species then the organism must be specified using
            the 'target_organism=genus:species' attribute in the GFF file.')
          synonyms:
          - --target_organism
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: In case of Target attribute in the GFF3, choose the organism
            ID to which target sequences belong. Select this only if target sequences
            belong to a different organism than the one specified with --organism-id.
            And only choose an organism here if all of the target sequences belong
            to the same species. If the targets in the GFF file belong to multiple
            different species then the organism must be specified using the 'target_organism=genus:species'
            attribute in the GFF file.')
          synonyms:
          - --target_organism_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        - !Flag
          description: In case of Target attribute in the GFF3, if the unique name
            for a target sequence is not unique (e.g. a protein and an mRNA have the
            same name) then you must specify the type for all targets in the GFF file.
            If the targets are of different types then the type must be specified
            using the 'target_type=type' attribute in the GFF file. This must be a
            valid Sequence Ontology (SO) term.')
          synonyms:
          - --target_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: In case of Target attribute in the GFF3, if the target feature
            cannot be found, create one using the organism and type specified above,
            or using the 'target_organism' and 'target_type' fields specified in the
            GFF file. Values specified in the GFF file take precedence over those
            specified above.')
          synonyms:
          - --target_create
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: The line in the GFF file where importing should start
          synonyms:
          - --start_line
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        - !Flag
          description: A Sequence Ontology type for the landmark sequences in the
            GFF fie (e.g. 'chromosome').
          synonyms:
          - --landmark_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: When ID attribute is absent, specify which other attribute
            can uniquely identify the feature.
          synonyms:
          - --alt_id_attr
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Create organisms when encountering organism attribute (these
            lines will be skip otherwise)
          synonyms:
          - --create_organism
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: Regular expression for the mRNA name
          synonyms:
          - --re_mrna
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Replacement string for the protein name
          synonyms:
          - --re_protein
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Name of the job
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Do not wait for job to complete
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - analysis
        - load_gff3
        parent: *id002
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille analysis load_gff3 [OPTIONS] GFF\n\n  Load GFF3\
          \ file\n\n  Output:\n\n      Loading information\n\nOptions:\n  --organism\
          \ TEXT               Organism common name or abbreviation\n  --organism_id\
          \ INTEGER         Organism ID\n  --analysis TEXT               Analysis\
          \ name\n  --analysis_id INTEGER         Analysis ID\n  --import_mode TEXT\
          \            Import mode (add_only=existing features won't\n           \
          \                     be touched, update=existing features will be\n   \
          \                             updated and obsolete attributes kept)')\n\
          \                                [default: update]\n\n  --target_organism\
          \ TEXT        In case of Target attribute in the GFF3,\n               \
          \                 choose the organism abbreviation or common\n         \
          \                       name to which target sequences belong. Select\n\
          \                                this only if target sequences belong to\
          \ a\n                                different organism than the one specified\
          \ with\n                                --organism-id. And only choose an\
          \ organism\n                                here if all of the target sequences\
          \ belong to\n                                the same species. If the targets\
          \ in the GFF\n                                file belong to multiple different\
          \ species then\n                                the organism must be specified\
          \ using the\n                                'target_organism=genus:species'\
          \ attribute in\n                                the GFF file.')\n\n  --target_organism_id\
          \ INTEGER  In case of Target attribute in the GFF3,\n                  \
          \              choose the organism ID to which target\n                \
          \                sequences belong. Select this only if target\n        \
          \                        sequences belong to a different organism than\n\
          \                                the one specified with --organism-id. And\
          \ only\n                                choose an organism here if all of\
          \ the target\n                                sequences belong to the same\
          \ species. If the\n                                targets in the GFF file\
          \ belong to multiple\n                                different species\
          \ then the organism must be\n                                specified using\
          \ the\n                                'target_organism=genus:species' attribute\
          \ in\n                                the GFF file.')\n\n  --target_type\
          \ TEXT            In case of Target attribute in the GFF3, if\n        \
          \                        the unique name for a target sequence is not\n\
          \                                unique (e.g. a protein and an mRNA have\
          \ the\n                                same name) then you must specify\
          \ the type for\n                                all targets in the GFF file.\
          \ If the targets\n                                are of different types\
          \ then the type must be\n                                specified using\
          \ the 'target_type=type'\n                                attribute in the\
          \ GFF file. This must be a\n                                valid Sequence\
          \ Ontology (SO) term.')\n\n  --target_create               In case of Target\
          \ attribute in the GFF3, if\n                                the target\
          \ feature cannot be found, create one\n                                using\
          \ the organism and type specified above,\n                             \
          \   or using the 'target_organism' and\n                               \
          \ 'target_type' fields specified in the GFF\n                          \
          \      file. Values specified in the GFF file take\n                   \
          \             precedence over those specified above.')\n\n  --start_line\
          \ INTEGER          The line in the GFF file where importing\n          \
          \                      should start\n\n  --landmark_type TEXT          A\
          \ Sequence Ontology type for the landmark\n                            \
          \    sequences in the GFF fie (e.g. 'chromosome').\n\n  --alt_id_attr TEXT\
          \            When ID attribute is absent, specify which\n              \
          \                  other attribute can uniquely identify the\n         \
          \                       feature.\n\n  --create_organism             Create\
          \ organisms when encountering organism\n                               \
          \ attribute (these lines will be skip otherwise)\n\n  --re_mrna TEXT   \
          \             Regular expression for the mRNA name\n  --re_protein TEXT\
          \             Replacement string for the protein name\n  --job_name TEXT\
          \               Name of the job\n  --no_wait                     Do not\
          \ wait for job to complete\n  -h, --help                    Show this message\
          \ and exit.\n"
        generated_using: *id003
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: NAME
          optional: false
        - !Positional
          description: ''
          position: 1
          name: PROGRAM
          optional: false
        - !Positional
          description: ''
          position: 2
          name: PROGRAMVERSION
          optional: false
        named:
        - !Flag
          description: Organism common name or abbreviation
          synonyms:
          - --organism
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Organism ID
          synonyms:
          - --organism_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        - !Flag
          description: If looking for files in a directory, extension of the GAF files
          synonyms:
          - --gaf_ext
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The feature type (e.g. 'gene', 'mRNA', 'contig') of the query.
            It must be a valid Sequence Ontology term.
          synonyms:
          - --query_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: "Method to match identifiers to features in the database. ('name',\
            \ 'uniquename' or 'dbxref') [default: uniquename]"
          synonyms:
          - --query_matching
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: "Import method ('add' or 'remove')  [default: add]"
          synonyms:
          - --method
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: 'Column containing the feature identifiers (2, 3, 10 or 11;
            default=2).  [default: 2]'
          synonyms:
          - --name_column
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        - !Flag
          description: Regular expression to extract the feature name from GAF file.
          synonyms:
          - --re_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Do not wait for job to complete
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: analysis algorithm
          synonyms:
          - --algorithm
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourceversion
          synonyms:
          - --sourceversion
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourceuri
          synonyms:
          - --sourceuri
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis description
          synonyms:
          - --description
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis date_executed (yyyy-mm-dd)
          synonyms:
          - --date_executed
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        command:
        - tripaille
        - analysis
        - load_go
        parent: *id002
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille analysis load_go [OPTIONS] NAME PROGRAM PROGRAMVERSION\n\
          \                                  SOURCENAME GAF_OUTPUT\n\n  Create a GO\
          \ analysis\n\n  Output:\n\n      Loading information\n\nOptions:\n  --organism\
          \ TEXT        Organism common name or abbreviation\n  --organism_id INTEGER\
          \  Organism ID\n  --gaf_ext TEXT         If looking for files in a directory,\
          \ extension of the\n                         GAF files\n\n  --query_type\
          \ TEXT      The feature type (e.g. 'gene', 'mRNA', 'contig') of\n      \
          \                   the query. It must be a valid Sequence Ontology term.\n\
          \n  --query_matching TEXT  Method to match identifiers to features in the\n\
          \                         database. ('name', 'uniquename' or 'dbxref')\n\
          \                         [default: uniquename]\n\n  --method TEXT     \
          \     Import method ('add' or 'remove')  [default: add]\n  --name_column\
          \ INTEGER  Column containing the feature identifiers (2, 3, 10\n       \
          \                  or 11; default=2).  [default: 2]\n\n  --re_name TEXT\
          \         Regular expression to extract the feature name from\n        \
          \                 GAF file.\n\n  --no_wait              Do not wait for\
          \ job to complete\n  --algorithm TEXT       analysis algorithm\n  --sourceversion\
          \ TEXT   analysis sourceversion\n  --sourceuri TEXT       analysis sourceuri\n\
          \  --description TEXT     analysis description\n  --date_executed TEXT \
          \  analysis date_executed (yyyy-mm-dd)\n  -h, --help             Show this\
          \ message and exit.\n"
        generated_using: *id003
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: NAME
          optional: false
        - !Positional
          description: ''
          position: 1
          name: PROGRAM
          optional: false
        - !Positional
          description: ''
          position: 2
          name: PROGRAMVERSION
          optional: false
        named:
        - !Flag
          description: InterProScan parameters used to produce these results
          synonyms:
          - --interpro_parameters
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The regular expression that can uniquely identify the query
            name. This parameters is required if the feature name is not the first
            word in the blast query name.
          synonyms:
          - --query_re
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The feature type (e.g. 'gene', 'mRNA', 'contig') of the query.
            It must be a valid Sequence Ontology term.
          synonyms:
          - --query_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Use this if the query_re regular expression matches unique
            names instead of names in the database.
          synonyms:
          - --query_uniquename
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: Load GO annotation to the database
          synonyms:
          - --parse_go
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: Do not wait for job to complete
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: analysis algorithm
          synonyms:
          - --algorithm
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourceversion
          synonyms:
          - --sourceversion
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis sourceuri
          synonyms:
          - --sourceuri
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis description
          synonyms:
          - --description
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: analysis date_executed (yyyy-mm-dd)
          synonyms:
          - --date_executed
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        command:
        - tripaille
        - analysis
        - load_interpro
        parent: *id002
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille analysis load_interpro [OPTIONS] NAME PROGRAM\
          \ PROGRAMVERSION\n                                        SOURCENAME INTERPRO_OUTPUT\n\
          \n  Create an Interpro analysis\n\n  Output:\n\n      Loading information\n\
          \nOptions:\n  --interpro_parameters TEXT  InterProScan parameters used to\
          \ produce these\n                              results\n\n  --query_re TEXT\
          \             The regular expression that can uniquely\n               \
          \               identify the query name. This parameters is\n          \
          \                    required if the feature name is not the first\n   \
          \                           word in the blast query name.\n\n  --query_type\
          \ TEXT           The feature type (e.g. 'gene', 'mRNA', 'contig')\n    \
          \                          of the query. It must be a valid Sequence\n \
          \                             Ontology term.\n\n  --query_uniquename   \
          \       Use this if the query_re regular expression\n                  \
          \            matches unique names instead of names in the\n            \
          \                  database.\n\n  --parse_go                  Load GO annotation\
          \ to the database\n  --no_wait                   Do not wait for job to\
          \ complete\n  --algorithm TEXT            analysis algorithm\n  --sourceversion\
          \ TEXT        analysis sourceversion\n  --sourceuri TEXT            analysis\
          \ sourceuri\n  --description TEXT          analysis description\n  --date_executed\
          \ TEXT        analysis date_executed (yyyy-mm-dd)\n  -h, --help        \
          \          Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: Analysis name
          synonyms:
          - --analysis
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: ID of the analysis to sync
          synonyms:
          - --analysis_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Name of the job
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Return immediately without waiting for job completion
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - analysis
        - sync
        parent: *id002
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille analysis sync [OPTIONS]\n\n  Synchronize an analysis\n\
          \n  Output:\n\n      status\n\nOptions:\n  --analysis TEXT     Analysis\
          \ name\n  --analysis_id TEXT  ID of the analysis to sync\n  --job_name TEXT\
          \     Name of the job\n  --no_wait           Return immediately without\
          \ waiting for job completion\n  -h, --help          Show this message and\
          \ exit.\n"
        generated_using: *id003
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille analysis [OPTIONS] COMMAND [ARGS]...\n\n  Manage\
        \ Tripal analyses\n\nOptions:\n  -h, --help  Show this message and exit.\n\
        \nCommands:\n  add_analysis         Create an analysis Output: Analysis information\n\
        \  delete_orphans       Delete orphans Drupal analysis nodes Output: status\n\
        \  get_analyses         Get analyses Output: Analysis information\n  get_analyses_tripal\
        \  Get analysis entities Output: Analysis entity/node...\n  load_blast   \
        \        Create a Blast analysis Output: Loading information\n  load_fasta\
        \           Load fasta sequences Output: Loading information\n  load_gff3\
        \            Load GFF3 file Output: Loading information\n  load_go       \
        \       Create a GO analysis Output: Loading information\n  load_interpro\
        \        Create an Interpro analysis Output: Loading...\n  sync          \
        \       Synchronize an analysis Output: status\n"
      generated_using: *id003
    - &id004 !Command
      positional: []
      named: []
      command:
      - tripaille
      - db
      parent: *id001
      subcommands:
      - !Command
        positional: []
        named:
        - !Flag
          description: A db ID
          synonyms:
          - --db_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: filter on db name
          synonyms:
          - --name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        command:
        - tripaille
        - db
        - get_dbs
        parent: *id004
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille db get_dbs [OPTIONS]\n\n  Get all dbs\n\n  Output:\n\
          \n      Dbs information\n\nOptions:\n  --db_id TEXT  A db ID\n  --name TEXT\
          \   filter on db name\n  -h, --help    Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: filter on mview name
          synonyms:
          - --name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        command:
        - tripaille
        - db
        - get_mviews
        parent: *id004
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille db get_mviews [OPTIONS]\n\n  Get all materialized\
          \ views\n\n  Output:\n\n      materialized views information\n\nOptions:\n\
          \  --name TEXT  filter on mview name\n  -h, --help   Show this message and\
          \ exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: "Indexing mode: 'website' to index the website , 'nodes' for\
            \ the website nodes, 'entities' for the website entities (Tripal 3), 'table'\
            \ to index a single table, 'gene' to build a Gene search index (Tripal\
            \ 3 only) (default: website) ('website' default to 'nodes' for Tripal\
            \ 2, 'entities' for Tripal 3)  [default: website]"
          synonyms:
          - --mode
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Table to index (only in 'table' mode)
          synonyms:
          - --table
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Index name (only in 'table' mode)
          synonyms:
          - --index_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: 'Number of indexing task queues (Tripal 2 only) [default: 10]'
          synonyms:
          - --queues
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        - !Flag
          description: "Fields to index (only in 'table' mode), syntax: <field_name>|<field_type>,\
            \ field_type should be one of 'string' (Tripal2), 'text' (Tripal3), 'keyword',\
            \ 'date', 'long', 'double', 'boolean', 'ip', 'object', 'nested', 'geo_point',\
            \ 'geo_shape', or 'completion'"
          synonyms:
          - --fields
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: 'List of links to show to users, syntax: <column-where- to-show-the-link>|</your/url/[any-column-name]>
            (Tripal 2 only)'
          synonyms:
          - --links
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: "Tokenizer to use (only in 'table' mode) (one of 'standard',\
            \ 'letter', 'lowercase', 'whitespace', 'uax_url_email', 'classic', 'ngram',\
            \ 'edge_ngram', 'keywordx', 'pattern', or 'path_hierarchy'; default='standard')\
            \  [default: standard]"
          synonyms:
          - --tokenizer
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Token filters (Tripal 3 only) (only in 'table' mode) (available
            filters are 'standard', 'asciifolding', 'length', 'lowercase', 'uppercase')
            (Default to ['standard', 'lowercase'])
          synonyms:
          - --token_filters
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: '"Expose the index (read-only) to other websites'
          synonyms:
          - --exposed
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: In order for other sites to link back to your results page,
            you must specify a path where the form for this index can be reached
          synonyms:
          - --index_url
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Name of the job
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Do not wait for job to complete
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - db
        - index
        parent: *id004
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille db index [OPTIONS]\n\n  Schedule database indexing\
          \ using elasticsearch\n\n  Output:\n\n      Indexing information\n\nOptions:\n\
          \  --mode TEXT           Indexing mode: 'website' to index the website ,\n\
          \                        'nodes' for the website nodes, 'entities' for the\n\
          \                        website entities (Tripal 3), 'table' to index a\
          \ single\n                        table, 'gene' to build a Gene search index\
          \ (Tripal 3\n                        only) (default: website) ('website'\
          \ default to 'nodes'\n                        for Tripal 2, 'entities' for\
          \ Tripal 3)  [default:\n                        website]\n\n  --table TEXT\
          \          Table to index (only in 'table' mode)\n  --index_name TEXT  \
          \   Index name (only in 'table' mode)\n  --queues INTEGER      Number of\
          \ indexing task queues (Tripal 2 only)\n                        [default:\
          \ 10]\n\n  --fields TEXT         Fields to index (only in 'table' mode),\
          \ syntax:\n                        <field_name>|<field_type>, field_type\
          \ should be one of\n                        'string' (Tripal2), 'text' (Tripal3),\
          \ 'keyword',\n                        'date', 'long', 'double', 'boolean',\
          \ 'ip', 'object',\n                        'nested', 'geo_point', 'geo_shape',\
          \ or 'completion'\n\n  --links TEXT          List of links to show to users,\
          \ syntax: <column-where-\n                        to-show-the-link>|</your/url/[any-column-name]>\n\
          \                        (Tripal 2 only)\n\n  --tokenizer TEXT      Tokenizer\
          \ to use (only in 'table' mode) (one of\n                        'standard',\
          \ 'letter', 'lowercase', 'whitespace',\n                        'uax_url_email',\
          \ 'classic', 'ngram', 'edge_ngram',\n                        'keywordx',\
          \ 'pattern', or 'path_hierarchy';\n                        default='standard')\
          \  [default: standard]\n\n  --token_filters TEXT  Token filters (Tripal\
          \ 3 only) (only in 'table' mode)\n                        (available filters\
          \ are 'standard', 'asciifolding',\n                        'length', 'lowercase',\
          \ 'uppercase') (Default to\n                        ['standard', 'lowercase'])\n\
          \n  --exposed             \"Expose the index (read-only) to other websites\n\
          \  --index_url TEXT      In order for other sites to link back to your results\n\
          \                        page, you must specify a path where the form for\
          \ this\n                        index can be reached\n\n  --job_name TEXT\
          \       Name of the job\n  --no_wait             Do not wait for job to\
          \ complete\n  -h, --help            Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: filter on mview name
          synonyms:
          - --name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Do not wait for job to complete
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - db
        - populate_mviews
        parent: *id004
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille db populate_mviews [OPTIONS]\n\n  Populate materialized\
          \ views\n\n  Output:\n\n      Loading information\n\nOptions:\n  --name\
          \ TEXT  filter on mview name\n  --no_wait    Do not wait for job to complete\n\
          \  -h, --help   Show this message and exit.\n"
        generated_using: *id003
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille db [OPTIONS] COMMAND [ARGS]...\n\n  Access Tripal/Chado\
        \ database\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n\
        \  get_dbs          Get all dbs Output: Dbs information\n  get_mviews    \
        \   Get all materialized views Output: materialized views...\n  index    \
        \        Schedule database indexing using elasticsearch Output:...\n  populate_mviews\
        \  Populate materialized views Output: Loading information\n  tune       \
        \      Setup default entity index priority for whole website...\n"
      generated_using: *id003
    - *id005
    - &id006 !Command
      positional: []
      named: []
      command:
      - tripaille
      - feature
      parent: *id001
      subcommands:
      - !Command
        positional: []
        named:
        - !Flag
          description: Name of the job
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Return immediately without waiting for job completion
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - feature
        - delete_orphans
        parent: *id006
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille feature delete_orphans [OPTIONS]\n\n  Delete\
          \ orphans Drupal feature nodes\n\n  Output:\n\n      status\n\nOptions:\n\
          \  --job_name TEXT  Name of the job\n  --no_wait        Return immediately\
          \ without waiting for job completion\n  -h, --help       Show this message\
          \ and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: A feature entity/node ID
          synonyms:
          - --feature_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        command:
        - tripaille
        - feature
        - get_features
        parent: *id006
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille feature get_features [OPTIONS]\n\n  Get features\
          \ entities\n\n  Output:\n\n      Feature entity/node information\n\nOptions:\n\
          \  --feature_id INTEGER  A feature entity/node ID\n  -h, --help        \
          \    Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: A feature entity/node ID
          synonyms:
          - --feature_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        command:
        - tripaille
        - feature
        - get_features_tripal
        parent: *id006
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille feature get_features_tripal [OPTIONS]\n\n  Get\
          \ features entities\n\n  Output:\n\n      Feature entity/node information\n\
          \nOptions:\n  --feature_id INTEGER  A feature entity/node ID\n  -h, --help\
          \            Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: Common name of the organism to sync
          synonyms:
          - --organism
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: ID of the organism to sync
          synonyms:
          - --organism_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: 'Maximum number of features to sync (default: all)'
          synonyms:
          - --max_sync
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: 'List of types of records to be synced (e.g. gene mRNA, default:
            all)'
          synonyms:
          - --types
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: 'List of names of records to be synced (e.g. gene0001, default:
            all)'
          synonyms:
          - --ids
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Name of the job
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Return immediately without waiting for job completion
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - feature
        - sync
        parent: *id006
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille feature sync [OPTIONS]\n\n  Synchronize some\
          \ features (Tripal 2 only)\n\n  Output:\n\n      status\n\nOptions:\n  --organism\
          \ TEXT     Common name of the organism to sync\n  --organism_id TEXT  ID\
          \ of the organism to sync\n  --max_sync TEXT     Maximum number of features\
          \ to sync (default: all)\n  --types TEXT        List of types of records\
          \ to be synced (e.g. gene mRNA,\n                      default: all)\n\n\
          \  --ids TEXT          List of names of records to be synced (e.g. gene0001,\n\
          \                      default: all)\n\n  --job_name TEXT     Name of the\
          \ job\n  --no_wait           Return immediately without waiting for job\
          \ completion\n  -h, --help          Show this message and exit.\n"
        generated_using: *id003
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille feature [OPTIONS] COMMAND [ARGS]...\n\n  Manage\
        \ Tripal features\n\nOptions:\n  -h, --help  Show this message and exit.\n\
        \nCommands:\n  delete_orphans       Delete orphans Drupal feature nodes Output:\
        \ status\n  get_features         Get features entities Output: Feature entity/node...\n\
        \  get_features_tripal  Get features entities Output: Feature entity/node...\n\
        \  sync                 Synchronize some features (Tripal 2 only) Output:...\n"
      generated_using: *id003
    - &id007 !Command
      positional: []
      named: []
      command:
      - tripaille
      - job
      parent: *id001
      subcommands:
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: NAME
          optional: false
        - !Positional
          description: ''
          position: 1
          name: IMPORTER
          optional: false
        - !Positional
          description: ''
          position: 2
          name: INPUT_FILE
          optional: false
        named:
        - !Flag
          description: 'An integer score to prioritize the job  [default: 10]'
          synonyms:
          - --priority
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        command:
        - tripaille
        - job
        - add_import_job
        parent: *id007
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille job add_import_job [OPTIONS] NAME IMPORTER INPUT_FILE\n\
          \                                    ARGUMENTS\n\n  Schedule a new import\
          \ job\n\n  Output:\n\n      Job information\n\nOptions:\n  --priority INTEGER\
          \  An integer score to prioritize the job  [default: 10]\n  -h, --help \
          \         Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: NAME
          optional: false
        - !Positional
          description: ''
          position: 1
          name: MODULE
          optional: false
        - !Positional
          description: ''
          position: 2
          name: CALLBACK
          optional: false
        - !Positional
          description: ''
          position: 3
          name: ARGUMENTS
          optional: false
        named:
        - !Flag
          description: 'An integer score to prioritize the job  [default: 10]'
          synonyms:
          - --priority
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        command:
        - tripaille
        - job
        - add_job
        parent: *id007
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille job add_job [OPTIONS] NAME MODULE CALLBACK ARGUMENTS\n\
          \n  Schedule a new job\n\n  Output:\n\n      Job information\n\nOptions:\n\
          \  --priority INTEGER  An integer score to prioritize the job  [default:\
          \ 10]\n  -h, --help          Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: job id
          synonyms:
          - --job_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        command:
        - tripaille
        - job
        - get_jobs
        parent: *id007
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille job get_jobs [OPTIONS]\n\n  Get all jobs\n\n\
          \  Output:\n\n      Jobs information\n\nOptions:\n  --job_id INTEGER  job\
          \ id\n  -h, --help        Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: STDOUT
          optional: false
        - !Positional
          description: ''
          position: 1
          name: STDERR
          optional: false
        named: []
        command:
        - tripaille
        - job
        - get_logs
        parent: *id007
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille job get_logs [OPTIONS] STDOUT STDERR\n\n  Get\
          \ job output\n\n  Output:\n\n      Output information\n\nOptions:\n  -h,\
          \ --help  Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: 'Wait for job completion  [default: True]'
          synonyms:
          - --wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - job
        - run_jobs
        parent: *id007
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille job run_jobs [OPTIONS]\n\n  Run jobs in queue.\
          \ There is no way to trigger a single job execution.\n\n  Output:\n\n  \
          \    Job information\n\nOptions:\n  --wait      Wait for job completion\
          \  [default: True]\n  -h, --help  Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: JOB_ID
          optional: false
        named: []
        command:
        - tripaille
        - job
        - wait
        parent: *id007
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille job wait [OPTIONS] JOB_ID\n\n  Wait for a job\
          \ completion\n\n  Output:\n\n      Job information\n\nOptions:\n  -h, --help\
          \  Show this message and exit.\n"
        generated_using: *id003
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille job [OPTIONS] COMMAND [ARGS]...\n\n  Manage Tripal\
        \ jobs\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n\
        \  add_import_job  Schedule a new import job Output: Job information\n  add_job\
        \         Schedule a new job Output: Job information\n  get_jobs        Get\
        \ all jobs Output: Jobs information\n  get_logs        Get job output Output:\
        \ Output information\n  run_jobs        Run jobs in queue.\n  wait       \
        \     Wait for a job completion Output: Job information\n"
      generated_using: *id003
    - &id008 !Command
      positional: []
      named: []
      command:
      - tripaille
      - organism
      parent: *id001
      subcommands:
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: GENUS
          optional: false
        - !Positional
          description: ''
          position: 1
          name: SPECIES
          optional: false
        named:
        - !Flag
          description: The common name of the organism
          synonyms:
          - --common
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The abbreviation of the organism
          synonyms:
          - --abbr
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: A comment / description
          synonyms:
          - --comment
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The type name of infraspecific name for any taxon below the
            rank of species. Must be one of ['subspecies', 'varietas', 'subvariety',
            'forma', 'subforma']
          synonyms:
          - --infraspecific_rank
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The infraspecific name for this organism.
          synonyms:
          - --infraspecific_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        command:
        - tripaille
        - organism
        - add_organism
        parent: *id008
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille organism add_organism [OPTIONS] GENUS SPECIES\n\
          \n  Add a new organism to the database\n\n  Output:\n\n      Organism information\n\
          \nOptions:\n  --common TEXT              The common name of the organism\n\
          \  --abbr TEXT                The abbreviation of the organism\n  --comment\
          \ TEXT             A comment / description\n  --infraspecific_rank TEXT\
          \  The type name of infraspecific name for any taxon\n                 \
          \            below the rank of species. Must be one of\n               \
          \              ['subspecies', 'varietas', 'subvariety', 'forma',\n     \
          \                        'subforma']\n\n  --infraspecific_name TEXT  The\
          \ infraspecific name for this organism.\n  -h, --help                 Show\
          \ this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: Name of the job
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Return immediately without waiting for job completion
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - organism
        - delete_orphans
        parent: *id008
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille organism delete_orphans [OPTIONS]\n\n  Delete\
          \ orphans Drupal organism nodes\n\n  Output:\n\n      status\n\nOptions:\n\
          \  --job_name TEXT  Name of the job\n  --no_wait        Return immediately\
          \ without waiting for job completion\n  -h, --help       Show this message\
          \ and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: An organism ID
          synonyms:
          - --organism_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The genus of the organism
          synonyms:
          - --genus
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The species of the organism
          synonyms:
          - --species
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The common name of the organism
          synonyms:
          - --common
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The abbreviation of the organism
          synonyms:
          - --abbr
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: A comment / description
          synonyms:
          - --comment
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        command:
        - tripaille
        - organism
        - get_organisms
        parent: *id008
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille organism get_organisms [OPTIONS]\n\n  Get organisms\
          \ from chado table\n\n  Output:\n\n      Organism information\n\nOptions:\n\
          \  --organism_id TEXT  An organism ID\n  --genus TEXT        The genus of\
          \ the organism\n  --species TEXT      The species of the organism\n  --common\
          \ TEXT       The common name of the organism\n  --abbr TEXT         The\
          \ abbreviation of the organism\n  --comment TEXT      A comment / description\n\
          \  -h, --help          Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: An organism entity ID
          synonyms:
          - --organism_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        command:
        - tripaille
        - organism
        - get_organisms_tripal
        parent: *id008
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille organism get_organisms_tripal [OPTIONS]\n\n \
          \ Get organism entities\n\n  Output:\n\n      Organism entity information\n\
          \nOptions:\n  --organism_id INTEGER  An organism entity ID\n  -h, --help\
          \             Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: Common name of the organism to sync
          synonyms:
          - --organism
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: ID of the organism to sync
          synonyms:
          - --organism_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Name of the job
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Return immediately without waiting for job completion
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - organism
        - sync
        parent: *id008
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille organism sync [OPTIONS]\n\n  Synchronize an organism\n\
          \n  Output:\n\n      status\n\nOptions:\n  --organism TEXT     Common name\
          \ of the organism to sync\n  --organism_id TEXT  ID of the organism to sync\n\
          \  --job_name TEXT     Name of the job\n  --no_wait           Return immediately\
          \ without waiting for job completion\n  -h, --help          Show this message\
          \ and exit.\n"
        generated_using: *id003
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille organism [OPTIONS] COMMAND [ARGS]...\n\n  Manage\
        \ Tripal organisms\n\nOptions:\n  -h, --help  Show this message and exit.\n\
        \nCommands:\n  add_organism          Add a new organism to the database Output:\
        \ Organism...\n  delete_orphans        Delete orphans Drupal organism nodes\
        \ Output: status\n  get_organisms         Get organisms from chado table Output:\
        \ Organism...\n  get_organisms_tripal  Get organism entities Output: Organism\
        \ entity...\n  get_taxonomic_ranks   Get taxonomic ranks Output: Taxonomic\
        \ ranks\n  sync                  Synchronize an organism Output: status\n"
      generated_using: *id003
    - &id009 !Command
      positional: []
      named: []
      command:
      - tripaille
      - phylogeny
      parent: *id001
      subcommands:
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: ARGS
          optional: true
        named: []
        command:
        - tripaille
        - phylogeny
        - COMMAND
        parent: *id009
        subcommands: []
        help_flag:
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille phylogeny [OPTIONS] COMMAND [ARGS]...\nTry 'tripaille\
          \ phylogeny -h' for help.\n\nError: No such command 'COMMAND'.\n"
        generated_using: *id003
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: tripaille
          optional: false
        - !Positional
          description: ''
          position: 1
          name: phylogeny
          optional: false
        - !Positional
          description: ''
          position: 2
          name: COMMAND
          optional: false
        - !Positional
          description: ''
          position: 3
          name: ARGS
          optional: true
        named: []
        command:
        - tripaille
        - phylogeny
        - ARGS
        parent: *id009
        subcommands: []
        help_flag:
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille phylogeny [OPTIONS] COMMAND [ARGS]...\nTry 'tripaille\
          \ phylogeny -h' for help.\n\nError: No such command 'ARGS'.\n"
        generated_using: *id003
      help_flag:
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille phylogeny [OPTIONS] COMMAND [ARGS]...\nTry 'tripaille\
        \ phylogeny -h' for help.\n\nError: no such option: --usage\n"
      generated_using:
      - --usage
    - &id010 !Command
      positional: []
      named: []
      command:
      - tripaille
      - expression
      parent: *id001
      subcommands:
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: ORGANISM_ID
          optional: false
        - !Positional
          description: ''
          position: 1
          name: FILE_PATH
          optional: false
        named:
        - !Flag
          description: The id of the associated analysis. Required for TripalV3
          synonyms:
          - --analysis_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Do not wait for job to complete
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - expression
        - add_biomaterial
        parent: *id010
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille expression add_biomaterial [OPTIONS] ORGANISM_ID\
          \ FILE_PATH\n                                            FILE_TYPE\n\n \
          \ Add a new biomaterial file to the database\n\n  Output:\n\n      Job information\n\
          \nOptions:\n  --analysis_id TEXT  The id of the associated analysis. Required\
          \ for TripalV3\n  --no_wait           Do not wait for job to complete\n\
          \  -h, --help          Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional:
        - !Positional
          description: ''
          position: 0
          name: ORGANISM_ID
          optional: false
        - !Positional
          description: ''
          position: 1
          name: ANALYSIS_ID
          optional: false
        named:
        - !Flag
          description: 'Match to features using either name or uniquename. Default
            to uniquename  [default: uniquename]'
          synonyms:
          - --match_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The array design ID associated with this analysis. (Non functional
            in Tripal2)
          synonyms:
          - --array_design_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: The units associated with the loaded values (ie, FPKM, RPKM,
            raw counts).
          synonyms:
          - --quantification_units
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: File extension for the file(s) to be loaded into Chado. Do
            not include the ".". Not required for matrix files.
          synonyms:
          - --file_extension
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: A regular expression to describe the line that occurs before
            the start of the expression data. If the file has no header, this is not
            needed.
          synonyms:
          - --start_regex
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: A regular expression to describe the line that occurs after
            the end of the expression data. If the file has no footer text, this is
            not needed.
          synonyms:
          - --stop_regex
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Specify the feature type to associate the data with. (Tripal3
            only)
          synonyms:
          - --seq_type
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Set if the expression file is a column file
          synonyms:
          - --use_column
          args: !EmptyFlagArg {}
          optional: true
        - !Flag
          description: Do not wait for job to complete
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - expression
        - add_expression
        parent: *id010
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille expression add_expression [OPTIONS] ORGANISM_ID\
          \ ANALYSIS_ID\n                                           FILE_PATH\n\n\
          \  Add an expression file to tripal\n\n  Output:\n\n      Loading information\n\
          \nOptions:\n  --match_type TEXT            Match to features using either\
          \ name or\n                               uniquename. Default to uniquename\
          \  [default:\n                               uniquename]\n\n  --array_design_id\
          \ TEXT       The array design ID associated with this\n                \
          \               analysis. (Non functional in Tripal2)\n\n  --quantification_units\
          \ TEXT  The units associated with the loaded values\n                  \
          \             (ie, FPKM, RPKM, raw counts).\n\n  --file_extension TEXT \
          \       File extension for the file(s) to be loaded\n                  \
          \             into Chado. Do not include the \".\". Not\n              \
          \                 required for matrix files.\n\n  --start_regex TEXT   \
          \        A regular expression to describe the line that\n              \
          \                 occurs before the start of the expression data.\n    \
          \                           If the file has no header, this is not needed.\n\
          \n  --stop_regex TEXT            A regular expression to describe the line\
          \ that\n                               occurs after the end of the expression\
          \ data. If\n                               the file has no footer text,\
          \ this is not\n                               needed.\n\n  --seq_type TEXT\
          \              Specify the feature type to associate the data\n        \
          \                       with. (Tripal3 only)\n\n  --use_column         \
          \        Set if the expression file is a column file\n  --no_wait      \
          \              Do not wait for job to complete\n  -h, --help           \
          \        Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: JSON list of biomaterial names to delete. (optional)
          synonyms:
          - --names
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Organism id from which to delete biomaterials (optional)
          synonyms:
          - --organism_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Analysis id from which to delete biomaterials (optional)
          synonyms:
          - --analysis_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Name of the job (optional)
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Return immediately without waiting for job completion
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - expression
        - delete_biomaterials
        parent: *id010
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille expression delete_biomaterials [OPTIONS]\n\n\
          \  Delete some biomaterials\n\n  Output:\n\n      status\n\nOptions:\n \
          \ --names TEXT        JSON list of biomaterial names to delete. (optional)\n\
          \  --organism_id TEXT  Organism id from which to delete biomaterials (optional)\n\
          \  --analysis_id TEXT  Analysis id from which to delete biomaterials (optional)\n\
          \  --job_name TEXT     Name of the job (optional)\n  --no_wait         \
          \  Return immediately without waiting for job completion\n  -h, --help \
          \         Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: Limit query to the selected biomaterial
          synonyms:
          - --biomaterial_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Limit query to the selected provider
          synonyms:
          - --provider_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Limit query to the selected biomaterial
          synonyms:
          - --biomaterial_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Limit query to the selected organism
          synonyms:
          - --organism_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Limit query to the selected ref
          synonyms:
          - --dbxref_id
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        command:
        - tripaille
        - expression
        - get_biomaterials
        parent: *id010
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille expression get_biomaterials [OPTIONS]\n\n  List\
          \ biomaterials in the database\n\n  Output:\n\n      Biomaterial list\n\n\
          Options:\n  --biomaterial_name TEXT  Limit query to the selected biomaterial\n\
          \  --provider_id TEXT       Limit query to the selected provider\n  --biomaterial_id\
          \ TEXT    Limit query to the selected biomaterial\n  --organism_id TEXT\
          \       Limit query to the selected organism\n  --dbxref_id TEXT       \
          \  Limit query to the selected ref\n  -h, --help               Show this\
          \ message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: A biomaterial entity ID
          synonyms:
          - --biomaterial_id
          args: !SimpleFlagArg
            name: INTEGER
          optional: true
        command:
        - tripaille
        - expression
        - get_biomaterials_tripal
        parent: *id010
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille expression get_biomaterials_tripal [OPTIONS]\n\
          \n  Get Biomaterial entities\n\n  Output:\n\n      Organism entity information\n\
          \nOptions:\n  --biomaterial_id INTEGER  A biomaterial entity ID\n  -h, --help\
          \                Show this message and exit.\n"
        generated_using: *id003
      - !Command
        positional: []
        named:
        - !Flag
          description: 'JSON list of ids of biomaterials to be synced (default: all)  [default:
            []]'
          synonyms:
          - --ids
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: 'Maximum number of features to sync (default: all)'
          synonyms:
          - --max_sync
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Name of the job
          synonyms:
          - --job_name
          args: !SimpleFlagArg
            name: TEXT
          optional: true
        - !Flag
          description: Return immediately without waiting for job completion
          synonyms:
          - --no_wait
          args: !EmptyFlagArg {}
          optional: true
        command:
        - tripaille
        - expression
        - sync_biomaterials
        parent: *id010
        subcommands: []
        help_flag: !Flag
          description: Show this message and exit.
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "Usage: tripaille expression sync_biomaterials [OPTIONS]\n\n  Synchronize\
          \ some biomaterials\n\n  Output:\n\n      status\n\nOptions:\n  --ids TEXT\
          \       JSON list of ids of biomaterials to be synced (default:\n      \
          \             all)  [default: []]\n\n  --max_sync TEXT  Maximum number of\
          \ features to sync (default: all)\n  --job_name TEXT  Name of the job\n\
          \  --no_wait        Return immediately without waiting for job completion\n\
          \  -h, --help       Show this message and exit.\n"
        generated_using: *id003
      help_flag: !Flag
        description: Show this message and exit.
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Usage: tripaille expression [OPTIONS] COMMAND [ARGS]...\n\n  Manage\
        \ Tripal expressions\n\nOptions:\n  -h, --help  Show this message and exit.\n\
        \nCommands:\n  add_biomaterial          Add a new biomaterial file to the\
        \ database...\n  add_expression           Add an expression file to tripal\
        \ Output: Loading...\n  delete_biomaterials      Delete some biomaterials\
        \ Output: status\n  get_biomaterials         List biomaterials in the database\
        \ Output:...\n  get_biomaterials_tripal  Get Biomaterial entities Output:\
        \ Organism entity...\n  sync_biomaterials        Synchronize some biomaterials\
        \ Output: status\n"
      generated_using: *id003
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: Show the version and exit.
      synonyms:
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "Usage: tripaille [OPTIONS] COMMAND [ARGS]...\n\n  Command line wrappers\
      \ around Python-Tripal functions.\n\nOptions:\n  --version            Show the\
      \ version and exit.\n  -v, --verbose        Enables verbose mode.\n  -i, --instance\
      \ TEXT  Name of instance in /home/ubuntu/.tripaille.yml. This\n            \
      \           parameter can also be set via the environment variable\n       \
      \                TRIPAILLE_INSTANCE  [default: __default; required]\n\n  -f,\
      \ --path TEXT      config file path\n  -h, --help           Show this message\
      \ and exit.\n\nCommands:\n  init        Help initialize global configuration\
      \ (in home directory)\n  analysis    Manage Tripal analyses\n  db          Access\
      \ Tripal/Chado database\n  entity      Manage any type of Tripal entities\n\
      \  feature     Manage Tripal features\n  job         Manage Tripal jobs\n  organism\
      \    Manage Tripal organisms\n  phylogeny   Manage Tripal phylogeny\n  expression\
      \  Manage Tripal expressions\n"
    generated_using: *id003
  subcommands:
  - *id011
  - !Command
    positional: []
    named:
    - !Flag
      description: Name of the entity type (e.g. Organism)
      synonyms:
      - --entity
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: ID of an entity
      synonyms:
      - --entity_id
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    command:
    - tripaille
    - entity
    - get_entities
    parent: *id005
    subcommands: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: tripaille entity get_entities [OPTIONS]\n\n  Get entities\n\
      \n  Output:\n\n      Entity information\n\nOptions:\n  --entity TEXT       \
      \ Name of the entity type (e.g. Organism)\n  --entity_id INTEGER  ID of an entity\n\
      \  -h, --help           Show this message and exit.\n"
    generated_using: *id003
  - !Command
    positional:
    - !Positional
      description: ''
      position: 0
      name: ENTITY
      optional: false
    named: []
    command:
    - tripaille
    - entity
    - get_fields
    parent: *id005
    subcommands: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: tripaille entity get_fields [OPTIONS] ENTITY\n\n  Get the list\
      \ of available fields for an entity\n\n  Output:\n\n      Fields information\n\
      \nOptions:\n  -h, --help  Show this message and exit.\n"
    generated_using: *id003
  - !Command
    positional: []
    named:
    - !Flag
      description: 'List of entity types to be published (e.g. Gene mRNA, default:
        all)'
      synonyms:
      - --types
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Name of the job
      synonyms:
      - --job_name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Return immediately without waiting for job completion
      synonyms:
      - --no_wait
      args: !EmptyFlagArg {}
      optional: true
    command:
    - tripaille
    - entity
    - publish
    parent: *id005
    subcommands: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: tripaille entity publish [OPTIONS]\n\n  Publish entities (Tripal\
      \ 3 only)\n\n  Output:\n\n      status\n\nOptions:\n  --types TEXT     List\
      \ of entity types to be published (e.g. Gene mRNA,\n                   default:\
      \ all)\n\n  --job_name TEXT  Name of the job\n  --no_wait        Return immediately\
      \ without waiting for job completion\n  -h, --help       Show this message and\
      \ exit.\n"
    generated_using: *id003
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Usage: tripaille entity [OPTIONS] COMMAND [ARGS]...\n\n  Manage any\
    \ type of Tripal entities\n\nOptions:\n  -h, --help  Show this message and exit.\n\
    \nCommands:\n  add_entity    Add a new entity to the database Output: Entity information\n\
    \  get_bundles   Get the list of tripal bundles Output: Bundles information\n\
    \  get_entities  Get entities Output: Entity information\n  get_fields    Get\
    \ the list of available fields for an entity Output:...\n  publish       Publish\
    \ entities (Tripal 3 only) Output: status\n"
  generated_using: *id003
subcommands: []
help_flag: !Flag
  description: Show this message and exit.
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "Usage: tripaille entity add_entity [OPTIONS] ENTITY\n\n  Add a new entity\
  \ to the database\n\n  Output:\n\n      Entity information\n\nOptions:\n  --params\
  \ TEXT  Values to populate the entity fields\n  -h, --help     Show this message\
  \ and exit.\n"
generated_using: *id003
