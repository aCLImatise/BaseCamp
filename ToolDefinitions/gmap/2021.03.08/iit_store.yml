!Command
command:
- iit_store
positional:
- !Positional
  optional: true
  position: 0
  name: OPTIONS...
  description: ''
- !Positional
  optional: false
  position: 1
  name: inputfile
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - -o
  - --output
  description: Name of output iit file
  args: !SimpleFlagArg
    name: STRING
- !Flag
  optional: true
  synonyms:
  - '-1'
  - --oldformat
  description: "Old format for intervals:\n<start> <optional end> <optional div> <optional\
    \ type>"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --accession-only
  description: Process only the first word of each FASTA header, and ignore the rest
    of the line
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -F
  - --fields
  description: Annotation consists of separate fields
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -G
  - --gff
  description: Parse input file in gff3 format
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -l
  - --label
  description: For gff input, the feature attribute to use (default is ID)
  args: !SimpleFlagArg
    name: STRING
- !Flag
  optional: true
  synonyms:
  - -s
  - --sort
  description: "Sorting of divisions: none, alpha, numeric-alpha, or chrom (default)\n\
    numeric-alpha: chr1 chr1_random chr2 chr10 chr10_random chrM chrUn chrX chrY\n\
    chrom: chr1 chr2 chr10 chrX chrY chrM chr1_random chr10_random chrUn\nNote 1:\
    \ For sorting purposes, any initial 'chr' will be ignored\nNote 2: For chrom,\
    \ X, Y, M, MT (or chrX, chrY, and so on) are special"
  args: !SimpleFlagArg
    name: STRING
- !Flag
  optional: true
  synonyms:
  - -v
  - --iitversion
  description: "Desired iit version for output iit\n(default = 0, which means latest\
    \ version)"
  args: !SimpleFlagArg
    name: STRING
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - -V
  - --version
  description: Show version
  args: !EmptyFlagArg {}
help_text: "Usage: iit_store [OPTIONS...] -o outputfile inputfile, or\n       cat\
  \ inputfile | iit_store [OPTIONS...] -o outputfile\nwhere\n   outputfile is the\
  \ desired filename for the iit file\n       (.iit will be added as a suffix if necessary),\
  \ and\n   inputfile is in either FASTA or GFF3 format, as described below.\n\nOptions\n\
  \  -o, --output=STRING       Name of output iit file\n  -1, --oldformat        \
  \   Old format for intervals:\n                             <start> <optional end>\
  \ <optional div> <optional type>\n  --accession-only          Process only the first\
  \ word of each FASTA header, and ignore the rest of the line\n  -F, --fields   \
  \           Annotation consists of separate fields\n  -G, --gff                \
  \ Parse input file in gff3 format\n  -l, --label=STRING        For gff input, the\
  \ feature attribute to use (default is ID)\n\n  -s, --sort=STRING         Sorting\
  \ of divisions: none, alpha, numeric-alpha, or chrom (default)\n               \
  \ numeric-alpha: chr1 chr1_random chr2 chr10 chr10_random chrM chrUn chrX chrY\n\
  \                        chrom: chr1 chr2 chr10 chrX chrY chrM chr1_random chr10_random\
  \ chrUn\n\n                               Note 1: For sorting purposes, any initial\
  \ 'chr' will be ignored\n                               Note 2: For chrom, X, Y,\
  \ M, MT (or chrX, chrY, and so on) are special\n\n  -v, --iitversion=STRING   Desired\
  \ iit version for output iit\n                            (default = 0, which means\
  \ latest version)\n\n  -V, --version             Show version\n  -?, --help    \
  \            Show this help message\n\n\nDescription of input format:\n\nThe FASTA\
  \ format for input files should be\n\n    >label [interval [type]] [/value=value]\n\
  \    optional_annotation (which may be zero, one, or multiple lines)\n\nwhere intervals\
  \ have one of the following forms:\n   div:start..end\n   div:start\n   start..end\n\
  \   start\nand a given type, numeric value, or both is optional.  A numeric value\n\
  allows intervals to be searched by a range of values using iit_get.\nIf the interval\
  \ is omitted, then it is assumed to be label:1..n,\nwhere n is the length of the\
  \ sequence.  This allows for storage and retrieval\nof sequences in FASTA files.\
  \  If you specify --accession-only, then it is\nassumed that you are not providing\
  \ intervals, and all information in the FASTA\nheader other than the first word\
  \ (accession) will be ignored.\n\nIntervals may have directions.  To indicate a\
  \ forward direction,\nthe start coordinate should be less than the end coordinate.\n\
  To indicate a reverse direction, the start coordinate should be\ngreater than the\
  \ end coordinate. If they are the same, then no\ndirection is implied.  If no end\
  \ coordinate is given, the end\ncoordinate is assumed to be the same as the start\
  \ coordinate.\n\nFor example, the label may be a sequence accession, with the div\
  \ representing\na chromosome, and the type representing an additional piece of information\n\
  A header might therefore look like\n\n    >NM_004448 17:35138441..35109780 refseq\n\
  \nwhich indicates an interval on chromosome 17 in the reverse direction,\nand of\
  \ type refseq.\n\nIf the -F flag is provided, IIT files may store annotation for\
  \ each interval\nas separate fields.  The input must contain the names of the fields,\
  \ one per\nline, before the first interval header.  Each interval then contains\
  \ annotation\ncorresponding to each field, one value per line.\n\nThe GFF3 format\
  \ requires the -G flag and optionally the -l flag.\nThe iit_store program will parse\
  \ the chromosome from column 1, the start\ncoordinate from column 4, the end coordinate\
  \ from column 5, the strand\nfrom column 7, an if possible, the label from column\
  \ 9.  The -l flag\nwill indicate which feature from column 9 to retrieve, such as\
  \ ID, Name,\nor Parent.  Appropriate choice of label may be helpful later on, because\n\
  the iit_get program can retrieve information by label, as well as by\ncoordinates.\n\
  \nLimitations: Start and end coordinates must be non-negative integers, and are\n\
  limited to the domain of a 64-bit quantity, which means coordinates must be\nless\
  \ than 2^64.  If your machine is a 32-bit machine, coordinates must be less\nthan\
  \ 2^32 = 4294967295.\n\nSee also: iit_get, iit_dump\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/gmap:2021.03.08--pl5262h36cd882_0
