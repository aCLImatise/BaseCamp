!Command
command:
- gcloud
- topic
- escaping
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - --list-flag
  description: ',value2,value3'
  args: !SimpleFlagArg
    name: value1
- !Flag
  optional: true
  synonyms:
  - --dict-flag
  description: =value1,key2=value2
  args: !SimpleFlagArg
    name: key1
- !Flag
  optional: true
  synonyms:
  - --addresses
  description: ^:^123.456.789.198:22.333.146.189:789.312.645      \
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --metadata
  description: \
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    gcloud topic escaping - list/dictionary-type argument escaping\n\
  \        supplementary help\n\nDESCRIPTION\n    List/dictionary-type argument escaping\
  \ supplementary help.\n\n    gcloud supports list-type and dictionary-type flags\
  \ that take one argument\n    which is a list of one or more comma-separated items:\n\
  \n        --list-flag=value1,value2,value3\n\n        --dict-flag=key1=value1,key2=value2\n\
  \n    In the case of a dict-type flag, each item is a key-value pair separated by\n\
  \    '='. If more than one '=' is present, the first is used.\n\n    In order to\
  \ include commas in your arguments, specify an alternate\n    delimiter using the\
  \ following syntax:\n\n        ^DELIM^flag value, with comma\n\n    where DELIM\
  \ is a sequence of one or more characters that may not appear in\n    any value\
  \ in the list.\n\n    NOTE: In cmd.exe and PowerShell on Windows, ^ is a special\
  \ character and\n    you must escape it by repeating it. In the following examples,\
  \ every time\n    you see ^, replace it with ^^^^.\n\nEXAMPLES\n    In these examples,\
  \ a list-type or dictionary-type flag is given, along with\n    a shell comment\
  \ explaining how it is parsed. The parsed flags are shown\n    here using Python-style\
  \ list or dict formats (in other languages, what\n    Python calls \"dicts\" are\
  \ often called \"associative arrays,\" \"maps,\" or\n    \"hashes\").\n\n    Basic\
  \ example:\n\n        --list-flag=^:^a,b:c,d # => ['a,b', 'c,d']\n\n    Multi-character\
  \ delimiters are allowed:\n\n        --list-flag=^--^a-,b--c # => ['a-,b', 'c']\n\
  \n    Just one '^' has no special meaning:\n\n        --list-flag=^a,b,c # => ['^a',\
  \ 'b', 'c']\n\n    This is an alternative way of starting with '^':\n\n        --list-flag=^,^^a,b,c\
  \ # => ['^a', 'b', 'c']\n\n    A '^' anywhere but the start has no special meaning:\n\
  \n        --list-flag=a^:^,b,c # => ['a^:^', 'b', 'c']\n\n    Dictionary-type arguments\
  \ work exactly the same as list-type arguments:\n\n        --dict-flag=^:^a=b,c:d=f,g\
  \ # => {'a': 'b,c', 'd': 'f,g'}\n\n    To reserve ephemeral IP addresses, passed\
  \ in as a list, which are being\n    used by virtual machine instances in the us-central1\
  \ region, run:\n\n        $ gcloud compute addresses create               \\\n \
  \         --addresses ^:^123.456.789.198:22.333.146.189:789.312.645      \\\n  \
  \                 --region us-central1\n\n    To create a Google Compute Engine\
  \ virtual machine instance with metadata as\n    a list ({'key1': '\"value1\"',\
  \ 'key2': 'value2', 'key3':\n    'value3Index1,value3Index2', 'key4': 'value4'),\
  \ run:\n\n        $ gcloud compute instances create example-instance1          \
  \     \\\n          --metadata \\\n          ^:^key1=\"value1\":key2=value2:key3=value3Index1,value3Index2,\\\
  \n        valueIndex3:key4=value4\n"
generated_using:
- --help
docker_image:
