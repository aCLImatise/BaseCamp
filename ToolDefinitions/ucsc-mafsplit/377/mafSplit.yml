!Command
command:
- mafSplit
positional:
- !Positional
  description: ''
  position: 0
  name: splits.bed
  optional: false
- !Positional
  description: ''
  position: 1
  name: outRoot
  optional: false
- !Positional
  description: ''
  position: 2
  name: file
  optional: false
named:
- !Flag
  description: "Make one file per target sequence.  (splits.bed input\nis ignored)."
  synonyms:
  - -byTarget
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "For use only with -byTarget.\nCreate N levels of output directory\
    \ under current dir.\nThis helps prevent NFS problems with a large number of\n\
    file in a directory.  Using -outDirDepth=3 would\nproduce ./1/2/3/outRoot123.maf."
  synonyms:
  - -outDirDepth
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: "For use only with -byTarget.\nInstead of auto-incrementing an integer\
    \ to determine\noutput filename, expect each target sequence name to\nend with\
    \ a unique number and use that number as the\ninteger to tack onto outRoot."
  synonyms:
  - -useSequenceName
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "For use only with -byTarget.\nInstead of auto-incrementing an integer\
    \ to determine\noutput filename, use the target sequence name\nto tack onto outRoot."
  synonyms:
  - -useFullSequenceName
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "For use only with -byTarget.\nInstead of auto-incrementing an integer\
    \ or requiring\na unique number in the sequence name, use a hash\nfunction on\
    \ the sequence name to compute an N-bit\nnumber.  This limits the max #filenames\
    \ to 2^N and\nensures that even if different subsets of sequences\nappear in different\
    \ pairwise mafs, the split file\nnames will be consistent (due to hash function).\n\
    This option is useful when a \"scaffold-based\"\nassembly has more than one sequence\
    \ name pattern,\ne.g. both chroms and scaffolds.\n"
  synonyms:
  - -useHashedName
  args: !SimpleFlagArg
    name: N
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "mafSplit - Split multiple alignment files\nusage:\n   mafSplit splits.bed\
  \ outRoot file(s).maf\noptions:\n   -byTarget       Make one file per target sequence.\
  \  (splits.bed input\n                   is ignored).\n   -outDirDepth=N  For use\
  \ only with -byTarget.\n                   Create N levels of output directory under\
  \ current dir.\n                   This helps prevent NFS problems with a large\
  \ number of\n                   file in a directory.  Using -outDirDepth=3 would\n\
  \                   produce ./1/2/3/outRoot123.maf.\n   -useSequenceName  For use\
  \ only with -byTarget.\n                     Instead of auto-incrementing an integer\
  \ to determine\n                     output filename, expect each target sequence\
  \ name to\n                     end with a unique number and use that number as\
  \ the\n                     integer to tack onto outRoot.\n   -useFullSequenceName\
  \  For use only with -byTarget.\n                     Instead of auto-incrementing\
  \ an integer to determine\n                     output filename, use the target\
  \ sequence name\n                     to tack onto outRoot.\n   -useHashedName=N\
  \  For use only with -byTarget.\n                     Instead of auto-incrementing\
  \ an integer or requiring\n                     a unique number in the sequence\
  \ name, use a hash\n                     function on the sequence name to compute\
  \ an N-bit\n                     number.  This limits the max #filenames to 2^N\
  \ and\n                     ensures that even if different subsets of sequences\n\
  \                     appear in different pairwise mafs, the split file\n      \
  \               names will be consistent (due to hash function).\n             \
  \        This option is useful when a \"scaffold-based\"\n                     assembly\
  \ has more than one sequence name pattern,\n                     e.g. both chroms\
  \ and scaffolds.\n\n\n"
generated_using: []
