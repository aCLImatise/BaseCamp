!Command
command: &id001
- jdeps
positional: []
named: []
parent:
subcommands:
- !Command
  command: &id002
  - jdeps
  - filtering.
  positional:
  - !Positional
    optional: false
    position: 0
    name: jdeps
    description: ''
  - !Positional
    optional: false
    position: 1
    name: options
    description: ''
  - !Positional
    optional: false
    position: 2
    name: path ...
    description: ''
  named: []
  parent: !Command
    command: *id001
    positional: []
    named: []
    parent:
    subcommands:
    - !Command
      command: *id002
      positional:
      - !Positional
        optional: false
        position: 0
        name: jdeps
        description: ''
      - !Positional
        optional: false
        position: 1
        name: options
        description: ''
      - !Positional
        optional: false
        position: 2
        name: path ...
        description: ''
      named: []
      parent: !Command
        command: *id001
        positional: []
        named: []
        parent:
        subcommands:
        - !Command
          command: *id002
          positional:
          - !Positional
            optional: false
            position: 0
            name: jdeps
            description: ''
          - !Positional
            optional: false
            position: 1
            name: options
            description: ''
          - !Positional
            optional: false
            position: 2
            name: path ...
            description: ''
          named: []
          parent: !Command
            command: *id001
            positional: []
            named: []
            parent:
            subcommands:
            - !Command
              command: *id002
              positional:
              - !Positional
                optional: false
                position: 0
                name: jdeps
                description: ''
              - !Positional
                optional: false
                position: 1
                name: options
                description: ''
              - !Positional
                optional: false
                position: 2
                name: path ...
                description: ''
              named: []
              parent: !Command
                command: *id001
                positional: []
                named: []
                parent:
                subcommands:
                - !Command
                  command: *id002
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: jdeps
                    description: ''
                  - !Positional
                    optional: false
                    position: 1
                    name: options
                    description: ''
                  - !Positional
                    optional: false
                    position: 2
                    name: path ...
                    description: ''
                  named: []
                  parent: &id003 !Command
                    command: *id001
                    positional: []
                    named:
                    - !Flag
                      optional: true
                      synonyms:
                      - -dotoutput
                      description: ''
                      args: !SimpleFlagArg
                        name: dir
                    - !Flag
                      optional: true
                      synonyms:
                      - --dot-output
                      description: Destination directory for DOT file output
                      args: !SimpleFlagArg
                        name: dir
                    - !Flag
                      optional: true
                      synonyms:
                      - -s
                      description: -summary             Print dependency summary only.
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - -v
                      description: "-verbose             Print all class level dependences\n\
                        Equivalent to -verbose:class -filter:none."
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - -apionly
                      description: ''
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - --api-only
                      description: "Restrict analysis to APIs i.e. dependences\nfrom\
                        \ the signature of public and protected\nmembers of public\
                        \ classes including field\ntype, method parameter types, returned\
                        \ type,\nchecked exception types etc."
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - -jdkinternals
                      description: ''
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - --jdk-internals
                      description: "Finds class-level dependences on JDK internal\n\
                        APIs. By default, it analyzes all classes\non --class-path\
                        \ and input files unless -include\noption is specified. This\
                        \ option cannot be\nused with -p, -e and -s options.\nWARNING:\
                        \ JDK internal APIs are inaccessible."
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - -cp
                      description: ''
                      args: !SimpleFlagArg
                        name: path
                    - !Flag
                      optional: true
                      synonyms:
                      - -classpath
                      description: ''
                      args: !SimpleFlagArg
                        name: path
                    - !Flag
                      optional: true
                      synonyms:
                      - --class-path
                      description: Specify where to find class files
                      args: !SimpleFlagArg
                        name: path
                    - !Flag
                      optional: true
                      synonyms:
                      - --module-path
                      description: Specify module path
                      args: !SimpleFlagArg
                        name: module path
                    - !Flag
                      optional: true
                      synonyms:
                      - --upgrade-module-path
                      description: Specify upgrade module path
                      args: !SimpleFlagArg
                        name: module path
                    - !Flag
                      optional: true
                      synonyms:
                      - --system
                      description: Specify an alternate system module path
                      args: !SimpleFlagArg
                        name: java-home
                    - !Flag
                      optional: true
                      synonyms:
                      - --add-modules
                      description: "[,<module-name>...]\nAdds modules to the root\
                        \ set for analysis"
                      args: !SimpleFlagArg
                        name: module-name
                    - !Flag
                      optional: true
                      synonyms:
                      - --multi-release
                      description: "Specifies the version when processing\nmulti-release\
                        \ jar files.  <version> should\nbe integer >= 9 or base."
                      args: !SimpleFlagArg
                        name: version
                    - !Flag
                      optional: true
                      synonyms:
                      - -q
                      description: -quiet               Suppress warning messages
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - -m
                      description: ''
                      args: !SimpleFlagArg
                        name: module-name
                    - !Flag
                      optional: true
                      synonyms:
                      - --module
                      description: Specify the root module for analysis
                      args: !SimpleFlagArg
                        name: module-name
                    - !Flag
                      optional: true
                      synonyms:
                      - --generate-module-info
                      description: "Generate module-info.java under the specified\n\
                        directory. The specified JAR files will be\nanalyzed. This\
                        \ option cannot be used with\n--dot-output or --class-path.\
                        \ Use\n--generate-open-module option for open modules."
                      args: !SimpleFlagArg
                        name: dir
                    - !Flag
                      optional: true
                      synonyms:
                      - --generate-open-module
                      description: "Generate module-info.java for the specified\n\
                        JAR files under the specified directory as\nopen modules.\
                        \ This option cannot be used with\n--dot-output or --class-path."
                      args: !SimpleFlagArg
                        name: dir
                    - !Flag
                      optional: true
                      synonyms:
                      - --check
                      description: "[,<module-name>...\nAnalyze the dependence of\
                        \ the specified modules\nIt prints the module descriptor,\
                        \ the resulting\nmodule dependences after analysis and the\n\
                        graph after transition reduction.  It also\nidentifies any\
                        \ unused qualified exports."
                      args: !SimpleFlagArg
                        name: module-name
                    - !Flag
                      optional: true
                      synonyms:
                      - --list-deps
                      description: "Lists the module dependences.  It also prints\n\
                        any JDK internal API packages if referenced.\nThis option\
                        \ does not show dependences on the\nclass path or not found."
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - --list-reduced-deps
                      description: "Same as --list-deps with not listing\nthe implied\
                        \ reads edges from the module graph.\nIf module M1 reads M2,\
                        \ and M2 requires\ntransitive on M3, then M1 reading M3 is\
                        \ implied\nand is not shown in the graph."
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - --print-module-deps
                      description: "Same as --list-reduced-deps with printing\na comma-separated\
                        \ list of module dependences.\nThis output can be used by\
                        \ jlink --add-modules\nin order to create a custom image containing\n\
                        those modules and their transitive dependences."
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - -p
                      description: ''
                      args: !SimpleFlagArg
                        name: pkg
                    - !Flag
                      optional: true
                      synonyms:
                      - -package
                      description: ''
                      args: !SimpleFlagArg
                        name: pkg
                    - !Flag
                      optional: true
                      synonyms:
                      - -e
                      description: ''
                      args: !SimpleFlagArg
                        name: regex
                    - !Flag
                      optional: true
                      synonyms:
                      - -regex
                      description: ''
                      args: !SimpleFlagArg
                        name: regex
                    - !Flag
                      optional: true
                      synonyms:
                      - --require
                      description: "Finds dependences matching the given module\n\
                        name (may be given multiple times). --package,\n--regex, --require\
                        \ are mutual exclusive."
                      args: !SimpleFlagArg
                        name: module-name
                    - !Flag
                      optional: true
                      synonyms:
                      - -include
                      description: "Restrict analysis to classes matching pattern\n\
                        This option filters the list of classes to\nbe analyzed. \
                        \ It can be used together with\n-p and -e which apply pattern\
                        \ to the dependences"
                      args: !SimpleFlagArg
                        name: regex
                    - !Flag
                      optional: true
                      synonyms:
                      - -P
                      description: -profile             Show profile containing a
                        package
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - -R
                      description: "-recursive           Recursively traverse all\
                        \ run-time dependences.\nThe -R option implies -filter:none.\
                        \  If -p,\n-e, -f option is specified, only the matching\n\
                        dependences are analyzed."
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - -I
                      description: "--inverse            Analyzes the dependences\
                        \ per other given options\nand then find all artifacts that\
                        \ directly\nand indirectly depend on the matching nodes.\n\
                        This is equivalent to the inverse of\ncompile-time view analysis\
                        \ and print\ndependency summary.  This option must use\nwith\
                        \ --require, --package or --regex option."
                      args: !EmptyFlagArg {}
                    - !Flag
                      optional: true
                      synonyms:
                      - --compile-time
                      description: "Compile-time view of transitive dependences\n\
                        i.e. compile-time view of -R option.\nAnalyzes the dependences\
                        \ per other given options\nIf a dependence is found from a\
                        \ directory,\na JAR file or a module, all classes in that\n\
                        containing archive are analyzed.\n"
                      args: !EmptyFlagArg {}
                    parent:
                    subcommands:
                    - !Command
                      command: *id002
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: jdeps
                        description: ''
                      - !Positional
                        optional: false
                        position: 1
                        name: options
                        description: ''
                      - !Positional
                        optional: false
                        position: 2
                        name: path ...
                        description: ''
                      named: []
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag:
                      usage_flag:
                      version_flag:
                      help_text: "Error: option must be specified before classes:\
                        \ --help\nUsage: jdeps <options> <path ...>]\nuse --help for\
                        \ a list of possible options\n"
                      generated_using: &id004
                      - --help
                      docker_image:
                    usage: []
                    help_flag: !Flag
                      optional: true
                      synonyms:
                      - -h
                      description: -? --help                  Print this help message
                      args: !EmptyFlagArg {}
                    usage_flag:
                    version_flag: !Flag
                      optional: true
                      synonyms:
                      - -version
                      - --version
                      description: Version information
                      args: !EmptyFlagArg {}
                    help_text: "Usage: jdeps <options> <path ...>]\n<path> can be\
                      \ a pathname to a .class file, a directory, a JAR file.\n\n\
                      Possible options include:\n  -h -? --help                  Print\
                      \ this help message\n  -dotoutput <dir>\n  --dot-output <dir>\
                      \            Destination directory for DOT file output\n  -s\
                      \       -summary             Print dependency summary only.\n\
                      \  -v       -verbose             Print all class level dependences\n\
                      \                                Equivalent to -verbose:class\
                      \ -filter:none.\n  -verbose:package              Print package-level\
                      \ dependences excluding\n                                dependences\
                      \ within the same package by default\n  -verbose:class     \
                      \           Print class-level dependences excluding\n      \
                      \                          dependences within the same package\
                      \ by default\n  -apionly\n  --api-only                    Restrict\
                      \ analysis to APIs i.e. dependences\n                      \
                      \          from the signature of public and protected\n    \
                      \                            members of public classes including\
                      \ field\n                                type, method parameter\
                      \ types, returned type,\n                                checked\
                      \ exception types etc.\n  -jdkinternals\n  --jdk-internals \
                      \              Finds class-level dependences on JDK internal\n\
                      \                                APIs. By default, it analyzes\
                      \ all classes\n                                on --class-path\
                      \ and input files unless -include\n                        \
                      \        option is specified. This option cannot be\n      \
                      \                          used with -p, -e and -s options.\n\
                      \                                WARNING: JDK internal APIs\
                      \ are inaccessible.\n  -cp <path>\n  -classpath <path>\n  --class-path\
                      \ <path>           Specify where to find class files\n  --module-path\
                      \ <module path>   Specify module path\n  --upgrade-module-path\
                      \ <module path>  Specify upgrade module path\n  --system <java-home>\
                      \          Specify an alternate system module path\n  --add-modules\
                      \ <module-name>[,<module-name>...]\n                       \
                      \         Adds modules to the root set for analysis\n  --multi-release\
                      \ <version>     Specifies the version when processing\n    \
                      \                            multi-release jar files.  <version>\
                      \ should\n                                be integer >= 9 or\
                      \ base.\n  -q       -quiet               Suppress warning messages\n\
                      \  -version --version            Version information\n\nModule\
                      \ dependence analysis options:\n  -m <module-name>\n  --module\
                      \ <module-name>        Specify the root module for analysis\n\
                      \  --generate-module-info <dir>  Generate module-info.java under\
                      \ the specified\n                                directory.\
                      \ The specified JAR files will be\n                        \
                      \        analyzed. This option cannot be used with\n       \
                      \                         --dot-output or --class-path. Use\
                      \ \n                                --generate-open-module option\
                      \ for open modules.\n  --generate-open-module <dir>  Generate\
                      \ module-info.java for the specified\n                     \
                      \           JAR files under the specified directory as\n   \
                      \                             open modules. This option cannot\
                      \ be used with\n                                --dot-output\
                      \ or --class-path.\n  --check <module-name>[,<module-name>...\n\
                      \                                Analyze the dependence of the\
                      \ specified modules\n                                It prints\
                      \ the module descriptor, the resulting\n                   \
                      \             module dependences after analysis and the\n  \
                      \                              graph after transition reduction.\
                      \  It also\n                                identifies any unused\
                      \ qualified exports.\n  --list-deps                   Lists\
                      \ the module dependences.  It also prints\n                \
                      \                any JDK internal API packages if referenced.\n\
                      \                                This option does not show dependences\
                      \ on the\n                                class path or not\
                      \ found.\n  --list-reduced-deps           Same as --list-deps\
                      \ with not listing\n                                the implied\
                      \ reads edges from the module graph.\n                     \
                      \           If module M1 reads M2, and M2 requires\n       \
                      \                         transitive on M3, then M1 reading\
                      \ M3 is implied\n                                and is not\
                      \ shown in the graph.\n  --print-module-deps           Same\
                      \ as --list-reduced-deps with printing\n                   \
                      \             a comma-separated list of module dependences.\n\
                      \                                This output can be used by\
                      \ jlink --add-modules\n                                in order\
                      \ to create a custom image containing\n                    \
                      \            those modules and their transitive dependences.\n\
                      \nOptions to filter dependences:\n  -p <pkg>\n  -package <pkg>\n\
                      \  --package <pkg>               Finds dependences matching\
                      \ the given package\n                                name (may\
                      \ be given multiple times).\n  -e <regex>\n  -regex <regex>\n\
                      \  --regex <regex>               Finds dependences matching\
                      \ the given pattern.\n  --require <module-name>       Finds\
                      \ dependences matching the given module\n                  \
                      \              name (may be given multiple times). --package,\n\
                      \                                --regex, --require are mutual\
                      \ exclusive.\n  -f <regex> -filter <regex>    Filter dependences\
                      \ matching the given\n                                pattern.\
                      \ If given multiple times, the last\n                      \
                      \          one will be used.\n  -filter:package            \
                      \   Filter dependences within the same package.\n          \
                      \                      This is the default.\n  -filter:archive\
                      \               Filter dependences within the same archive.\n\
                      \  -filter:module                Filter dependences within the\
                      \ same module.\n  -filter:none                  No -filter:package\
                      \ and -filter:archive\n                                filtering.\
                      \  Filtering specified via the\n                           \
                      \     -filter option still applies.\n\n\nOptions to filter classes\
                      \ to be analyzed:\n  -include <regex>              Restrict\
                      \ analysis to classes matching pattern\n                   \
                      \             This option filters the list of classes to\n \
                      \                               be analyzed.  It can be used\
                      \ together with\n                                -p and -e which\
                      \ apply pattern to the dependences\n  -P       -profile    \
                      \         Show profile containing a package\n  -R       -recursive\
                      \           Recursively traverse all run-time dependences.\n\
                      \                                The -R option implies -filter:none.\
                      \  If -p,\n                                -e, -f option is\
                      \ specified, only the matching\n                           \
                      \     dependences are analyzed.\n  -I       --inverse      \
                      \      Analyzes the dependences per other given options\n  \
                      \                              and then find all artifacts that\
                      \ directly\n                                and indirectly depend\
                      \ on the matching nodes.\n                                This\
                      \ is equivalent to the inverse of\n                        \
                      \        compile-time view analysis and print\n            \
                      \                    dependency summary.  This option must use\n\
                      \                                with --require, --package or\
                      \ --regex option.\n  --compile-time                Compile-time\
                      \ view of transitive dependences\n                         \
                      \       i.e. compile-time view of -R option.\n             \
                      \                   Analyzes the dependences per other given\
                      \ options\n                                If a dependence is\
                      \ found from a directory,\n                                a\
                      \ JAR file or a module, all classes in that \n             \
                      \                   containing archive are analyzed.\n"
                    generated_using: *id004
                    docker_image:
                  subcommands: []
                  usage: []
                  help_flag:
                  usage_flag:
                  version_flag:
                  help_text: "Error: option must be specified before classes: --help\n\
                    Usage: jdeps <options> <path ...>]\nuse --help for a list of possible\
                    \ options\n"
                  generated_using: *id004
                  docker_image:
                usage: []
                help_flag:
                usage_flag:
                version_flag:
                help_text: "Usage: jdeps <options> <path ...>]\n<path> can be a pathname\
                  \ to a .class file, a directory, a JAR file.\n\nPossible options\
                  \ include:\n  -h -? --help                  Print this help message\n\
                  \  -dotoutput <dir>\n  --dot-output <dir>            Destination\
                  \ directory for DOT file output\n  -s       -summary           \
                  \  Print dependency summary only.\n  -v       -verbose         \
                  \    Print all class level dependences\n                       \
                  \         Equivalent to -verbose:class -filter:none.\n  -verbose:package\
                  \              Print package-level dependences excluding\n     \
                  \                           dependences within the same package\
                  \ by default\n  -verbose:class                Print class-level\
                  \ dependences excluding\n                                dependences\
                  \ within the same package by default\n  -apionly\n  --api-only \
                  \                   Restrict analysis to APIs i.e. dependences\n\
                  \                                from the signature of public and\
                  \ protected\n                                members of public classes\
                  \ including field\n                                type, method\
                  \ parameter types, returned type,\n                            \
                  \    checked exception types etc.\n  -jdkinternals\n  --jdk-internals\
                  \               Finds class-level dependences on JDK internal\n\
                  \                                APIs. By default, it analyzes all\
                  \ classes\n                                on --class-path and input\
                  \ files unless -include\n                                option\
                  \ is specified. This option cannot be\n                        \
                  \        used with -p, -e and -s options.\n                    \
                  \            WARNING: JDK internal APIs are inaccessible.\n  -cp\
                  \ <path>\n  -classpath <path>\n  --class-path <path>           Specify\
                  \ where to find class files\n  --module-path <module path>   Specify\
                  \ module path\n  --upgrade-module-path <module path>  Specify upgrade\
                  \ module path\n  --system <java-home>          Specify an alternate\
                  \ system module path\n  --add-modules <module-name>[,<module-name>...]\n\
                  \                                Adds modules to the root set for\
                  \ analysis\n  --multi-release <version>     Specifies the version\
                  \ when processing\n                                multi-release\
                  \ jar files.  <version> should\n                               \
                  \ be integer >= 9 or base.\n  -q       -quiet               Suppress\
                  \ warning messages\n  -version --version            Version information\n\
                  \nModule dependence analysis options:\n  -m <module-name>\n  --module\
                  \ <module-name>        Specify the root module for analysis\n  --generate-module-info\
                  \ <dir>  Generate module-info.java under the specified\n       \
                  \                         directory. The specified JAR files will\
                  \ be\n                                analyzed. This option cannot\
                  \ be used with\n                                --dot-output or\
                  \ --class-path. Use \n                                --generate-open-module\
                  \ option for open modules.\n  --generate-open-module <dir>  Generate\
                  \ module-info.java for the specified\n                         \
                  \       JAR files under the specified directory as\n           \
                  \                     open modules. This option cannot be used with\n\
                  \                                --dot-output or --class-path.\n\
                  \  --check <module-name>[,<module-name>...\n                   \
                  \             Analyze the dependence of the specified modules\n\
                  \                                It prints the module descriptor,\
                  \ the resulting\n                                module dependences\
                  \ after analysis and the\n                                graph\
                  \ after transition reduction.  It also\n                       \
                  \         identifies any unused qualified exports.\n  --list-deps\
                  \                   Lists the module dependences.  It also prints\n\
                  \                                any JDK internal API packages if\
                  \ referenced.\n                                This option does\
                  \ not show dependences on the\n                                class\
                  \ path or not found.\n  --list-reduced-deps           Same as --list-deps\
                  \ with not listing\n                                the implied\
                  \ reads edges from the module graph.\n                         \
                  \       If module M1 reads M2, and M2 requires\n               \
                  \                 transitive on M3, then M1 reading M3 is implied\n\
                  \                                and is not shown in the graph.\n\
                  \  --print-module-deps           Same as --list-reduced-deps with\
                  \ printing\n                                a comma-separated list\
                  \ of module dependences.\n                                This output\
                  \ can be used by jlink --add-modules\n                         \
                  \       in order to create a custom image containing\n         \
                  \                       those modules and their transitive dependences.\n\
                  \nOptions to filter dependences:\n  -p <pkg>\n  -package <pkg>\n\
                  \  --package <pkg>               Finds dependences matching the\
                  \ given package\n                                name (may be given\
                  \ multiple times).\n  -e <regex>\n  -regex <regex>\n  --regex <regex>\
                  \               Finds dependences matching the given pattern.\n\
                  \  --require <module-name>       Finds dependences matching the\
                  \ given module\n                                name (may be given\
                  \ multiple times). --package,\n                                --regex,\
                  \ --require are mutual exclusive.\n  -f <regex> -filter <regex>\
                  \    Filter dependences matching the given\n                   \
                  \             pattern. If given multiple times, the last\n     \
                  \                           one will be used.\n  -filter:package\
                  \               Filter dependences within the same package.\n  \
                  \                              This is the default.\n  -filter:archive\
                  \               Filter dependences within the same archive.\n  -filter:module\
                  \                Filter dependences within the same module.\n  -filter:none\
                  \                  No -filter:package and -filter:archive\n    \
                  \                            filtering.  Filtering specified via\
                  \ the\n                                -filter option still applies.\n\
                  \n\nOptions to filter classes to be analyzed:\n  -include <regex>\
                  \              Restrict analysis to classes matching pattern\n \
                  \                               This option filters the list of\
                  \ classes to\n                                be analyzed.  It can\
                  \ be used together with\n                                -p and\
                  \ -e which apply pattern to the dependences\n  -P       -profile\
                  \             Show profile containing a package\n  -R       -recursive\
                  \           Recursively traverse all run-time dependences.\n   \
                  \                             The -R option implies -filter:none.\
                  \  If -p,\n                                -e, -f option is specified,\
                  \ only the matching\n                                dependences\
                  \ are analyzed.\n  -I       --inverse            Analyzes the dependences\
                  \ per other given options\n                                and then\
                  \ find all artifacts that directly\n                           \
                  \     and indirectly depend on the matching nodes.\n           \
                  \                     This is equivalent to the inverse of\n   \
                  \                             compile-time view analysis and print\n\
                  \                                dependency summary.  This option\
                  \ must use\n                                with --require, --package\
                  \ or --regex option.\n  --compile-time                Compile-time\
                  \ view of transitive dependences\n                             \
                  \   i.e. compile-time view of -R option.\n                     \
                  \           Analyzes the dependences per other given options\n \
                  \                               If a dependence is found from a\
                  \ directory,\n                                a JAR file or a module,\
                  \ all classes in that \n                                containing\
                  \ archive are analyzed.\n"
                generated_using: *id004
                docker_image:
              subcommands: []
              usage: []
              help_flag:
              usage_flag:
              version_flag:
              help_text: "Error: option must be specified before classes: --help\n\
                Usage: jdeps <options> <path ...>]\nuse --help for a list of possible\
                \ options\n"
              generated_using: *id004
              docker_image:
            usage: []
            help_flag:
            usage_flag:
            version_flag:
            help_text: "Usage: jdeps <options> <path ...>]\n<path> can be a pathname\
              \ to a .class file, a directory, a JAR file.\n\nPossible options include:\n\
              \  -h -? --help                  Print this help message\n  -dotoutput\
              \ <dir>\n  --dot-output <dir>            Destination directory for DOT\
              \ file output\n  -s       -summary             Print dependency summary\
              \ only.\n  -v       -verbose             Print all class level dependences\n\
              \                                Equivalent to -verbose:class -filter:none.\n\
              \  -verbose:package              Print package-level dependences excluding\n\
              \                                dependences within the same package\
              \ by default\n  -verbose:class                Print class-level dependences\
              \ excluding\n                                dependences within the\
              \ same package by default\n  -apionly\n  --api-only                \
              \    Restrict analysis to APIs i.e. dependences\n                  \
              \              from the signature of public and protected\n        \
              \                        members of public classes including field\n\
              \                                type, method parameter types, returned\
              \ type,\n                                checked exception types etc.\n\
              \  -jdkinternals\n  --jdk-internals               Finds class-level\
              \ dependences on JDK internal\n                                APIs.\
              \ By default, it analyzes all classes\n                            \
              \    on --class-path and input files unless -include\n             \
              \                   option is specified. This option cannot be\n   \
              \                             used with -p, -e and -s options.\n   \
              \                             WARNING: JDK internal APIs are inaccessible.\n\
              \  -cp <path>\n  -classpath <path>\n  --class-path <path>          \
              \ Specify where to find class files\n  --module-path <module path> \
              \  Specify module path\n  --upgrade-module-path <module path>  Specify\
              \ upgrade module path\n  --system <java-home>          Specify an alternate\
              \ system module path\n  --add-modules <module-name>[,<module-name>...]\n\
              \                                Adds modules to the root set for analysis\n\
              \  --multi-release <version>     Specifies the version when processing\n\
              \                                multi-release jar files.  <version>\
              \ should\n                                be integer >= 9 or base.\n\
              \  -q       -quiet               Suppress warning messages\n  -version\
              \ --version            Version information\n\nModule dependence analysis\
              \ options:\n  -m <module-name>\n  --module <module-name>        Specify\
              \ the root module for analysis\n  --generate-module-info <dir>  Generate\
              \ module-info.java under the specified\n                           \
              \     directory. The specified JAR files will be\n                 \
              \               analyzed. This option cannot be used with\n        \
              \                        --dot-output or --class-path. Use \n      \
              \                          --generate-open-module option for open modules.\n\
              \  --generate-open-module <dir>  Generate module-info.java for the specified\n\
              \                                JAR files under the specified directory\
              \ as\n                                open modules. This option cannot\
              \ be used with\n                                --dot-output or --class-path.\n\
              \  --check <module-name>[,<module-name>...\n                       \
              \         Analyze the dependence of the specified modules\n        \
              \                        It prints the module descriptor, the resulting\n\
              \                                module dependences after analysis and\
              \ the\n                                graph after transition reduction.\
              \  It also\n                                identifies any unused qualified\
              \ exports.\n  --list-deps                   Lists the module dependences.\
              \  It also prints\n                                any JDK internal\
              \ API packages if referenced.\n                                This\
              \ option does not show dependences on the\n                        \
              \        class path or not found.\n  --list-reduced-deps           Same\
              \ as --list-deps with not listing\n                                the\
              \ implied reads edges from the module graph.\n                     \
              \           If module M1 reads M2, and M2 requires\n               \
              \                 transitive on M3, then M1 reading M3 is implied\n\
              \                                and is not shown in the graph.\n  --print-module-deps\
              \           Same as --list-reduced-deps with printing\n            \
              \                    a comma-separated list of module dependences.\n\
              \                                This output can be used by jlink --add-modules\n\
              \                                in order to create a custom image containing\n\
              \                                those modules and their transitive\
              \ dependences.\n\nOptions to filter dependences:\n  -p <pkg>\n  -package\
              \ <pkg>\n  --package <pkg>               Finds dependences matching\
              \ the given package\n                                name (may be given\
              \ multiple times).\n  -e <regex>\n  -regex <regex>\n  --regex <regex>\
              \               Finds dependences matching the given pattern.\n  --require\
              \ <module-name>       Finds dependences matching the given module\n\
              \                                name (may be given multiple times).\
              \ --package,\n                                --regex, --require are\
              \ mutual exclusive.\n  -f <regex> -filter <regex>    Filter dependences\
              \ matching the given\n                                pattern. If given\
              \ multiple times, the last\n                                one will\
              \ be used.\n  -filter:package               Filter dependences within\
              \ the same package.\n                                This is the default.\n\
              \  -filter:archive               Filter dependences within the same\
              \ archive.\n  -filter:module                Filter dependences within\
              \ the same module.\n  -filter:none                  No -filter:package\
              \ and -filter:archive\n                                filtering.  Filtering\
              \ specified via the\n                                -filter option\
              \ still applies.\n\n\nOptions to filter classes to be analyzed:\n  -include\
              \ <regex>              Restrict analysis to classes matching pattern\n\
              \                                This option filters the list of classes\
              \ to\n                                be analyzed.  It can be used together\
              \ with\n                                -p and -e which apply pattern\
              \ to the dependences\n  -P       -profile             Show profile containing\
              \ a package\n  -R       -recursive           Recursively traverse all\
              \ run-time dependences.\n                                The -R option\
              \ implies -filter:none.  If -p,\n                                -e,\
              \ -f option is specified, only the matching\n                      \
              \          dependences are analyzed.\n  -I       --inverse         \
              \   Analyzes the dependences per other given options\n             \
              \                   and then find all artifacts that directly\n    \
              \                            and indirectly depend on the matching nodes.\n\
              \                                This is equivalent to the inverse of\n\
              \                                compile-time view analysis and print\n\
              \                                dependency summary.  This option must\
              \ use\n                                with --require, --package or\
              \ --regex option.\n  --compile-time                Compile-time view\
              \ of transitive dependences\n                                i.e. compile-time\
              \ view of -R option.\n                                Analyzes the dependences\
              \ per other given options\n                                If a dependence\
              \ is found from a directory,\n                                a JAR\
              \ file or a module, all classes in that \n                         \
              \       containing archive are analyzed.\n"
            generated_using: *id004
            docker_image:
          subcommands: []
          usage: []
          help_flag:
          usage_flag:
          version_flag:
          help_text: "Error: option must be specified before classes: --help\nUsage:\
            \ jdeps <options> <path ...>]\nuse --help for a list of possible options\n"
          generated_using: *id004
          docker_image:
        usage: []
        help_flag:
        usage_flag:
        version_flag:
        help_text: "Usage: jdeps <options> <path ...>]\n<path> can be a pathname to\
          \ a .class file, a directory, a JAR file.\n\nPossible options include:\n\
          \  -h -? --help                  Print this help message\n  -dotoutput <dir>\n\
          \  --dot-output <dir>            Destination directory for DOT file output\n\
          \  -s       -summary             Print dependency summary only.\n  -v  \
          \     -verbose             Print all class level dependences\n         \
          \                       Equivalent to -verbose:class -filter:none.\n  -verbose:package\
          \              Print package-level dependences excluding\n             \
          \                   dependences within the same package by default\n  -verbose:class\
          \                Print class-level dependences excluding\n             \
          \                   dependences within the same package by default\n  -apionly\n\
          \  --api-only                    Restrict analysis to APIs i.e. dependences\n\
          \                                from the signature of public and protected\n\
          \                                members of public classes including field\n\
          \                                type, method parameter types, returned\
          \ type,\n                                checked exception types etc.\n\
          \  -jdkinternals\n  --jdk-internals               Finds class-level dependences\
          \ on JDK internal\n                                APIs. By default, it\
          \ analyzes all classes\n                                on --class-path\
          \ and input files unless -include\n                                option\
          \ is specified. This option cannot be\n                                used\
          \ with -p, -e and -s options.\n                                WARNING:\
          \ JDK internal APIs are inaccessible.\n  -cp <path>\n  -classpath <path>\n\
          \  --class-path <path>           Specify where to find class files\n  --module-path\
          \ <module path>   Specify module path\n  --upgrade-module-path <module path>\
          \  Specify upgrade module path\n  --system <java-home>          Specify\
          \ an alternate system module path\n  --add-modules <module-name>[,<module-name>...]\n\
          \                                Adds modules to the root set for analysis\n\
          \  --multi-release <version>     Specifies the version when processing\n\
          \                                multi-release jar files.  <version> should\n\
          \                                be integer >= 9 or base.\n  -q       -quiet\
          \               Suppress warning messages\n  -version --version        \
          \    Version information\n\nModule dependence analysis options:\n  -m <module-name>\n\
          \  --module <module-name>        Specify the root module for analysis\n\
          \  --generate-module-info <dir>  Generate module-info.java under the specified\n\
          \                                directory. The specified JAR files will\
          \ be\n                                analyzed. This option cannot be used\
          \ with\n                                --dot-output or --class-path. Use\
          \ \n                                --generate-open-module option for open\
          \ modules.\n  --generate-open-module <dir>  Generate module-info.java for\
          \ the specified\n                                JAR files under the specified\
          \ directory as\n                                open modules. This option\
          \ cannot be used with\n                                --dot-output or --class-path.\n\
          \  --check <module-name>[,<module-name>...\n                           \
          \     Analyze the dependence of the specified modules\n                \
          \                It prints the module descriptor, the resulting\n      \
          \                          module dependences after analysis and the\n \
          \                               graph after transition reduction.  It also\n\
          \                                identifies any unused qualified exports.\n\
          \  --list-deps                   Lists the module dependences.  It also\
          \ prints\n                                any JDK internal API packages\
          \ if referenced.\n                                This option does not show\
          \ dependences on the\n                                class path or not\
          \ found.\n  --list-reduced-deps           Same as --list-deps with not listing\n\
          \                                the implied reads edges from the module\
          \ graph.\n                                If module M1 reads M2, and M2\
          \ requires\n                                transitive on M3, then M1 reading\
          \ M3 is implied\n                                and is not shown in the\
          \ graph.\n  --print-module-deps           Same as --list-reduced-deps with\
          \ printing\n                                a comma-separated list of module\
          \ dependences.\n                                This output can be used\
          \ by jlink --add-modules\n                                in order to create\
          \ a custom image containing\n                                those modules\
          \ and their transitive dependences.\n\nOptions to filter dependences:\n\
          \  -p <pkg>\n  -package <pkg>\n  --package <pkg>               Finds dependences\
          \ matching the given package\n                                name (may\
          \ be given multiple times).\n  -e <regex>\n  -regex <regex>\n  --regex <regex>\
          \               Finds dependences matching the given pattern.\n  --require\
          \ <module-name>       Finds dependences matching the given module\n    \
          \                            name (may be given multiple times). --package,\n\
          \                                --regex, --require are mutual exclusive.\n\
          \  -f <regex> -filter <regex>    Filter dependences matching the given\n\
          \                                pattern. If given multiple times, the last\n\
          \                                one will be used.\n  -filter:package  \
          \             Filter dependences within the same package.\n            \
          \                    This is the default.\n  -filter:archive           \
          \    Filter dependences within the same archive.\n  -filter:module     \
          \           Filter dependences within the same module.\n  -filter:none \
          \                 No -filter:package and -filter:archive\n             \
          \                   filtering.  Filtering specified via the\n          \
          \                      -filter option still applies.\n\n\nOptions to filter\
          \ classes to be analyzed:\n  -include <regex>              Restrict analysis\
          \ to classes matching pattern\n                                This option\
          \ filters the list of classes to\n                                be analyzed.\
          \  It can be used together with\n                                -p and\
          \ -e which apply pattern to the dependences\n  -P       -profile       \
          \      Show profile containing a package\n  -R       -recursive        \
          \   Recursively traverse all run-time dependences.\n                   \
          \             The -R option implies -filter:none.  If -p,\n            \
          \                    -e, -f option is specified, only the matching\n   \
          \                             dependences are analyzed.\n  -I       --inverse\
          \            Analyzes the dependences per other given options\n        \
          \                        and then find all artifacts that directly\n   \
          \                             and indirectly depend on the matching nodes.\n\
          \                                This is equivalent to the inverse of\n\
          \                                compile-time view analysis and print\n\
          \                                dependency summary.  This option must use\n\
          \                                with --require, --package or --regex option.\n\
          \  --compile-time                Compile-time view of transitive dependences\n\
          \                                i.e. compile-time view of -R option.\n\
          \                                Analyzes the dependences per other given\
          \ options\n                                If a dependence is found from\
          \ a directory,\n                                a JAR file or a module,\
          \ all classes in that \n                                containing archive\
          \ are analyzed.\n"
        generated_using: *id004
        docker_image:
      subcommands: []
      usage: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "Error: option must be specified before classes: --help\nUsage: jdeps\
        \ <options> <path ...>]\nuse --help for a list of possible options\n"
      generated_using: *id004
      docker_image:
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage: jdeps <options> <path ...>]\n<path> can be a pathname to a\
      \ .class file, a directory, a JAR file.\n\nPossible options include:\n  -h -?\
      \ --help                  Print this help message\n  -dotoutput <dir>\n  --dot-output\
      \ <dir>            Destination directory for DOT file output\n  -s       -summary\
      \             Print dependency summary only.\n  -v       -verbose          \
      \   Print all class level dependences\n                                Equivalent\
      \ to -verbose:class -filter:none.\n  -verbose:package              Print package-level\
      \ dependences excluding\n                                dependences within\
      \ the same package by default\n  -verbose:class                Print class-level\
      \ dependences excluding\n                                dependences within\
      \ the same package by default\n  -apionly\n  --api-only                    Restrict\
      \ analysis to APIs i.e. dependences\n                                from the\
      \ signature of public and protected\n                                members\
      \ of public classes including field\n                                type, method\
      \ parameter types, returned type,\n                                checked exception\
      \ types etc.\n  -jdkinternals\n  --jdk-internals               Finds class-level\
      \ dependences on JDK internal\n                                APIs. By default,\
      \ it analyzes all classes\n                                on --class-path and\
      \ input files unless -include\n                                option is specified.\
      \ This option cannot be\n                                used with -p, -e and\
      \ -s options.\n                                WARNING: JDK internal APIs are\
      \ inaccessible.\n  -cp <path>\n  -classpath <path>\n  --class-path <path>  \
      \         Specify where to find class files\n  --module-path <module path> \
      \  Specify module path\n  --upgrade-module-path <module path>  Specify upgrade\
      \ module path\n  --system <java-home>          Specify an alternate system module\
      \ path\n  --add-modules <module-name>[,<module-name>...]\n                 \
      \               Adds modules to the root set for analysis\n  --multi-release\
      \ <version>     Specifies the version when processing\n                    \
      \            multi-release jar files.  <version> should\n                  \
      \              be integer >= 9 or base.\n  -q       -quiet               Suppress\
      \ warning messages\n  -version --version            Version information\n\n\
      Module dependence analysis options:\n  -m <module-name>\n  --module <module-name>\
      \        Specify the root module for analysis\n  --generate-module-info <dir>\
      \  Generate module-info.java under the specified\n                         \
      \       directory. The specified JAR files will be\n                       \
      \         analyzed. This option cannot be used with\n                      \
      \          --dot-output or --class-path. Use \n                            \
      \    --generate-open-module option for open modules.\n  --generate-open-module\
      \ <dir>  Generate module-info.java for the specified\n                     \
      \           JAR files under the specified directory as\n                   \
      \             open modules. This option cannot be used with\n              \
      \                  --dot-output or --class-path.\n  --check <module-name>[,<module-name>...\n\
      \                                Analyze the dependence of the specified modules\n\
      \                                It prints the module descriptor, the resulting\n\
      \                                module dependences after analysis and the\n\
      \                                graph after transition reduction.  It also\n\
      \                                identifies any unused qualified exports.\n\
      \  --list-deps                   Lists the module dependences.  It also prints\n\
      \                                any JDK internal API packages if referenced.\n\
      \                                This option does not show dependences on the\n\
      \                                class path or not found.\n  --list-reduced-deps\
      \           Same as --list-deps with not listing\n                         \
      \       the implied reads edges from the module graph.\n                   \
      \             If module M1 reads M2, and M2 requires\n                     \
      \           transitive on M3, then M1 reading M3 is implied\n              \
      \                  and is not shown in the graph.\n  --print-module-deps   \
      \        Same as --list-reduced-deps with printing\n                       \
      \         a comma-separated list of module dependences.\n                  \
      \              This output can be used by jlink --add-modules\n            \
      \                    in order to create a custom image containing\n        \
      \                        those modules and their transitive dependences.\n\n\
      Options to filter dependences:\n  -p <pkg>\n  -package <pkg>\n  --package <pkg>\
      \               Finds dependences matching the given package\n             \
      \                   name (may be given multiple times).\n  -e <regex>\n  -regex\
      \ <regex>\n  --regex <regex>               Finds dependences matching the given\
      \ pattern.\n  --require <module-name>       Finds dependences matching the given\
      \ module\n                                name (may be given multiple times).\
      \ --package,\n                                --regex, --require are mutual\
      \ exclusive.\n  -f <regex> -filter <regex>    Filter dependences matching the\
      \ given\n                                pattern. If given multiple times, the\
      \ last\n                                one will be used.\n  -filter:package\
      \               Filter dependences within the same package.\n              \
      \                  This is the default.\n  -filter:archive               Filter\
      \ dependences within the same archive.\n  -filter:module                Filter\
      \ dependences within the same module.\n  -filter:none                  No -filter:package\
      \ and -filter:archive\n                                filtering.  Filtering\
      \ specified via the\n                                -filter option still applies.\n\
      \n\nOptions to filter classes to be analyzed:\n  -include <regex>          \
      \    Restrict analysis to classes matching pattern\n                       \
      \         This option filters the list of classes to\n                     \
      \           be analyzed.  It can be used together with\n                   \
      \             -p and -e which apply pattern to the dependences\n  -P       -profile\
      \             Show profile containing a package\n  -R       -recursive     \
      \      Recursively traverse all run-time dependences.\n                    \
      \            The -R option implies -filter:none.  If -p,\n                 \
      \               -e, -f option is specified, only the matching\n            \
      \                    dependences are analyzed.\n  -I       --inverse       \
      \     Analyzes the dependences per other given options\n                   \
      \             and then find all artifacts that directly\n                  \
      \              and indirectly depend on the matching nodes.\n              \
      \                  This is equivalent to the inverse of\n                  \
      \              compile-time view analysis and print\n                      \
      \          dependency summary.  This option must use\n                     \
      \           with --require, --package or --regex option.\n  --compile-time \
      \               Compile-time view of transitive dependences\n              \
      \                  i.e. compile-time view of -R option.\n                  \
      \              Analyzes the dependences per other given options\n          \
      \                      If a dependence is found from a directory,\n        \
      \                        a JAR file or a module, all classes in that \n    \
      \                            containing archive are analyzed.\n"
    generated_using: *id004
    docker_image:
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "Error: option must be specified before classes: --help\nUsage: jdeps\
    \ <options> <path ...>]\nuse --help for a list of possible options\n"
  generated_using: *id004
  docker_image:
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "Usage: jdeps <options> <path ...>]\n<path> can be a pathname to a .class\
  \ file, a directory, a JAR file.\n\nPossible options include:\n  -h -? --help  \
  \                Print this help message\n  -dotoutput <dir>\n  --dot-output <dir>\
  \            Destination directory for DOT file output\n  -s       -summary    \
  \         Print dependency summary only.\n  -v       -verbose             Print\
  \ all class level dependences\n                                Equivalent to -verbose:class\
  \ -filter:none.\n  -verbose:package              Print package-level dependences\
  \ excluding\n                                dependences within the same package\
  \ by default\n  -verbose:class                Print class-level dependences excluding\n\
  \                                dependences within the same package by default\n\
  \  -apionly\n  --api-only                    Restrict analysis to APIs i.e. dependences\n\
  \                                from the signature of public and protected\n  \
  \                              members of public classes including field\n     \
  \                           type, method parameter types, returned type,\n     \
  \                           checked exception types etc.\n  -jdkinternals\n  --jdk-internals\
  \               Finds class-level dependences on JDK internal\n                \
  \                APIs. By default, it analyzes all classes\n                   \
  \             on --class-path and input files unless -include\n                \
  \                option is specified. This option cannot be\n                  \
  \              used with -p, -e and -s options.\n                              \
  \  WARNING: JDK internal APIs are inaccessible.\n  -cp <path>\n  -classpath <path>\n\
  \  --class-path <path>           Specify where to find class files\n  --module-path\
  \ <module path>   Specify module path\n  --upgrade-module-path <module path>  Specify\
  \ upgrade module path\n  --system <java-home>          Specify an alternate system\
  \ module path\n  --add-modules <module-name>[,<module-name>...]\n              \
  \                  Adds modules to the root set for analysis\n  --multi-release\
  \ <version>     Specifies the version when processing\n                        \
  \        multi-release jar files.  <version> should\n                          \
  \      be integer >= 9 or base.\n  -q       -quiet               Suppress warning\
  \ messages\n  -version --version            Version information\n\nModule dependence\
  \ analysis options:\n  -m <module-name>\n  --module <module-name>        Specify\
  \ the root module for analysis\n  --generate-module-info <dir>  Generate module-info.java\
  \ under the specified\n                                directory. The specified\
  \ JAR files will be\n                                analyzed. This option cannot\
  \ be used with\n                                --dot-output or --class-path. Use\
  \ \n                                --generate-open-module option for open modules.\n\
  \  --generate-open-module <dir>  Generate module-info.java for the specified\n \
  \                               JAR files under the specified directory as\n   \
  \                             open modules. This option cannot be used with\n  \
  \                              --dot-output or --class-path.\n  --check <module-name>[,<module-name>...\n\
  \                                Analyze the dependence of the specified modules\n\
  \                                It prints the module descriptor, the resulting\n\
  \                                module dependences after analysis and the\n   \
  \                             graph after transition reduction.  It also\n     \
  \                           identifies any unused qualified exports.\n  --list-deps\
  \                   Lists the module dependences.  It also prints\n            \
  \                    any JDK internal API packages if referenced.\n            \
  \                    This option does not show dependences on the\n            \
  \                    class path or not found.\n  --list-reduced-deps           Same\
  \ as --list-deps with not listing\n                                the implied reads\
  \ edges from the module graph.\n                                If module M1 reads\
  \ M2, and M2 requires\n                                transitive on M3, then M1\
  \ reading M3 is implied\n                                and is not shown in the\
  \ graph.\n  --print-module-deps           Same as --list-reduced-deps with printing\n\
  \                                a comma-separated list of module dependences.\n\
  \                                This output can be used by jlink --add-modules\n\
  \                                in order to create a custom image containing\n\
  \                                those modules and their transitive dependences.\n\
  \nOptions to filter dependences:\n  -p <pkg>\n  -package <pkg>\n  --package <pkg>\
  \               Finds dependences matching the given package\n                 \
  \               name (may be given multiple times).\n  -e <regex>\n  -regex <regex>\n\
  \  --regex <regex>               Finds dependences matching the given pattern.\n\
  \  --require <module-name>       Finds dependences matching the given module\n \
  \                               name (may be given multiple times). --package,\n\
  \                                --regex, --require are mutual exclusive.\n  -f\
  \ <regex> -filter <regex>    Filter dependences matching the given\n           \
  \                     pattern. If given multiple times, the last\n             \
  \                   one will be used.\n  -filter:package               Filter dependences\
  \ within the same package.\n                                This is the default.\n\
  \  -filter:archive               Filter dependences within the same archive.\n \
  \ -filter:module                Filter dependences within the same module.\n  -filter:none\
  \                  No -filter:package and -filter:archive\n                    \
  \            filtering.  Filtering specified via the\n                         \
  \       -filter option still applies.\n\n\nOptions to filter classes to be analyzed:\n\
  \  -include <regex>              Restrict analysis to classes matching pattern\n\
  \                                This option filters the list of classes to\n  \
  \                              be analyzed.  It can be used together with\n    \
  \                            -p and -e which apply pattern to the dependences\n\
  \  -P       -profile             Show profile containing a package\n  -R       -recursive\
  \           Recursively traverse all run-time dependences.\n                   \
  \             The -R option implies -filter:none.  If -p,\n                    \
  \            -e, -f option is specified, only the matching\n                   \
  \             dependences are analyzed.\n  -I       --inverse            Analyzes\
  \ the dependences per other given options\n                                and then\
  \ find all artifacts that directly\n                                and indirectly\
  \ depend on the matching nodes.\n                                This is equivalent\
  \ to the inverse of\n                                compile-time view analysis\
  \ and print\n                                dependency summary.  This option must\
  \ use\n                                with --require, --package or --regex option.\n\
  \  --compile-time                Compile-time view of transitive dependences\n \
  \                               i.e. compile-time view of -R option.\n         \
  \                       Analyzes the dependences per other given options\n     \
  \                           If a dependence is found from a directory,\n       \
  \                         a JAR file or a module, all classes in that \n       \
  \                         containing archive are analyzed.\n"
generated_using: *id004
docker_image:
