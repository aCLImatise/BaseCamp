&id001 !Command
command:
- mapula
positional: []
named: []
parent:
subcommands:
- !Command
  command:
  - mapula
  - count
  positional:
  - !Positional
    optional: false
    position: 0
    name: mapula
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    description: '[ [ ...]]  Reference .fasta file(s). Format name=path_to_ref.'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -c
    description: "[ [ ...]]  Expected counts CSV(s). Format name=path_to_counts. Expected\n\
      columns: reference,expected_count."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -o
    description: "Outputs a sam file from the parsed alignments. Use - for\npiping\
      \ out. (Default: None)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -f
    description: "Sets the format(s) in which to output results. [Choices: csv,\n\
      json, all] (Default: csv)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -s
    description: "[ ...]    Split by these criteria, space separated. [Choices: group\n\
      run_id barcode read_group reference] (Default: group run_id\nbarcode)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -n
    description: Prefix of the output files, if there are any.
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: mapula [-h] -r [[...]] [-c [[...]]] [-o] [-f] [-s  [...]] [-n]\
    \ [[...]]\n\nCount mapping stats from a SAM/BAM file\n\npositional arguments:\n\
    \                Input alignments in SAM format. (Default: [stdin]).\n\noptional\
    \ arguments:\n  -h, --help    show this help message and exit\n  -r [ [ ...]]\
    \  Reference .fasta file(s). Format name=path_to_ref.\n  -c [ [ ...]]  Expected\
    \ counts CSV(s). Format name=path_to_counts. Expected\n                columns:\
    \ reference,expected_count.\n  -o            Outputs a sam file from the parsed\
    \ alignments. Use - for\n                piping out. (Default: None).\n  -f  \
    \          Sets the format(s) in which to output results. [Choices: csv,\n   \
    \             json, all] (Default: csv).\n  -s  [ ...]    Split by these criteria,\
    \ space separated. [Choices: group\n                run_id barcode read_group\
    \ reference] (Default: group run_id\n                barcode).\n  -n         \
    \   Prefix of the output files, if there are any.\n"
  generated_using: &id002
  - --help
  docker_image: quay.io/biocontainers/mapula:1.1.0--py_0
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: mapping-stats <command> [<args>]\n\nAvailable subcommands are:\n\
  \   count        Count mapping stats from a SAM/BAM file\n\nCollects stats from\
  \ SAM/BAM files\n\npositional arguments:\n  command     Subcommand to run\n\noptional\
  \ arguments:\n  -h, --help  show this help message and exit\n"
generated_using: *id002
docker_image: quay.io/biocontainers/mapula:1.1.0--py_0
