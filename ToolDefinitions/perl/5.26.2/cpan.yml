!Command
command:
- cpan
positional:
- !Positional
  description: '# without arguments, but some switches'
  position: 0
  name: cpan
  optional: false
- !Positional
  description: "Assume no one is paying attention and skips prompts for\ndistributions\
    \ that do that correctly. cpan(1) sets this to 1 unless\nit already has a value\
    \ (even if that value is false)."
  position: 0
  name: NONINTERACTIVE_TESTING
  optional: false
- !Positional
  description: "Use the default answer for a prompted questions. cpan(1) sets this\n\
    to 1 unless it already has a value (even if that value is false)."
  position: 1
  name: PERL_MM_USE_DEFAULT
  optional: false
- !Positional
  description: "As with \"PERL5OPTS\", a string of additional cpan(1) options to add\n\
    to those you specify on the command line."
  position: 2
  name: CPAN_OPTS
  optional: false
- !Positional
  description: "The log level to use, with either the embedded, minimal logger or\n\
    Log::Log4perl if it is installed. Possible values are the same as\nthe \"Log::Log4perl\"\
    \ levels: \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\",\n\"ERROR\", and \"FATAL\"\
    . The default is \"INFO\"."
  position: 3
  name: CPANSCRIPT_LOGLEVEL
  optional: false
- !Positional
  description: "The path to the \"git\" binary to use for the Git features. The\n\
    default is \"/usr/local/bin/git\"."
  position: 4
  name: GIT_COMMAND
  optional: false
named:
- !Flag
  description: "Creates a CPAN.pm autobundle with CPAN::Shell->autobundle.\n-A module\
    \ [ module ... ]\nShows the primary maintainers for the specified modules.\n-c\
    \ module\nRuns a `make clean` in the specified module's directories.\n-C module\
    \ [ module ... ]\nShow the Changes files for the specified modules\n-D module\
    \ [ module ... ]\nShow the module details. This prints one line for each out-of-date\n\
    module (meaning, modules locally installed but have newer versions\non CPAN).\
    \ Each line has three columns: module name, local version,\nand CPAN version.\n\
    -f  Force the specified action, when it normally would have failed. Use\nthis\
    \ to install a module even if its tests fail. When you use this\noption, -i is\
    \ not optional for installing a module when you need to\nforce it:\n% cpan -f\
    \ -i Module::Foo\n-F  Turn off CPAN.pm's attempts to lock anything. You should\
    \ be careful\nwith this since you might end up with multiple scripts trying to\n\
    muck in the same directory. This isn't so much of a concern if\nyou're loading\
    \ a special config with \"-j\", and that config sets up\nits own work directories.\n\
    -g module [ module ... ]\nDownloads to the current directory the latest distribution\
    \ of the\nmodule.\n-G module [ module ... ]\nUNIMPLEMENTED\nDownload to the current\
    \ directory the latest distribution of the\nmodules, unpack each distribution,\
    \ and create a git repository for\neach distribution.\nIf you want this feature,\
    \ check out Yanick Champoux's\n\"Git::CPAN::Patch\" distribution.\n-h  Print a\
    \ help message and exit. When you specify \"-h\", it ignores all\nof the other\
    \ options and arguments.\n-i module [ module ... ]\nInstall the specified modules.\
    \ With no other switches, this switch\nis implied.\n-I  Load \"local::lib\" (think\
    \ like \"-I\" for loading lib paths). Too bad\n\"-l\" was already taken.\n-j Config.pm\n\
    Load the file that has the CPAN configuration data. This should have\nthe same\
    \ format as the standard CPAN/Config.pm file, which defines\n$CPAN::Config as\
    \ an anonymous hash.\n-J  Dump the configuration in the same format that CPAN.pm\
    \ uses. This is\nuseful for checking the configuration as well as using the dump\
    \ as a\nstarting point for a new, custom configuration.\n-l  List all installed\
    \ modules with their versions\n-L author [ author ... ]\nList the modules by the\
    \ specified authors.\n-m  Make the specified modules.\n-M mirror1,mirror2,...\n\
    A comma-separated list of mirrors to use for just this run. The \"-P\"\noption\
    \ can find them for you automatically.\n-n  Do a dry run, but don't actually install\
    \ anything. (unimplemented)\n-O  Show the out-of-date modules.\n-p  Ping the configured\
    \ mirrors and print a report\n-P  Find the best mirrors you could be using and\
    \ use them for the\ncurrent session.\n-r  Recompiles dynamically loaded modules\
    \ with CPAN::Shell->recompile.\n-s  Drop in the CPAN.pm shell. This command does\
    \ this automatically if\nyou don't specify any arguments.\n-t module [ module\
    \ ... ]\nRun a `make test` on the specified modules.\n-T  Do not test modules.\
    \ Simply install them.\n-u  Upgrade all installed modules. Blindly doing this\
    \ can really break\nthings, so keep a backup.\n-v  Print the script version and\
    \ CPAN.pm version then exit.\n-V  Print detailed information about the cpan client.\n\
    -w  UNIMPLEMENTED\nTurn on cpan warnings. This checks various things, like directory\n\
    permissions, and tells you about problems you might have.\n-x module [ module\
    \ ... ]\nFind close matches to the named modules that you think you might\nhave\
    \ mistyped. This requires the optional installation of\nText::Levenshtein or Text::Levenshtein::Damerau.\n\
    -X  Dump all the namespaces to standard output."
  synonyms:
  - -a
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    cpan - easily interact with CPAN from the command line\n\nSYNOPSIS\n\
  \            # with arguments and no switches, installs specified modules\n    \
  \        cpan module_name [ module_name ... ]\n\n            # with switches, installs\
  \ modules with extra behavior\n            cpan [-cfFimtTw] module_name [ module_name\
  \ ... ]\n\n            # use local::lib\n            cpan -I module_name [ module_name\
  \ ... ]\n\n            # one time mirror override for faster mirrors\n         \
  \   cpan -p ...\n\n            # with just the dot, install from the distribution\
  \ in the\n            # current directory\n            cpan .\n\n            # without\
  \ arguments, starts CPAN.pm shell\n            cpan\n\n            # without arguments,\
  \ but some switches\n            cpan [-ahpruvACDLOPX]\n\nDESCRIPTION\n    This\
  \ script provides a command interface (not a shell) to CPAN. At the\n    moment\
  \ it uses CPAN.pm to do the work, but it is not a one-shot command\n    runner for\
  \ CPAN.pm.\n\n  Options\n    -a  Creates a CPAN.pm autobundle with CPAN::Shell->autobundle.\n\
  \n    -A module [ module ... ]\n        Shows the primary maintainers for the specified\
  \ modules.\n\n    -c module\n        Runs a `make clean` in the specified module's\
  \ directories.\n\n    -C module [ module ... ]\n        Show the Changes files for\
  \ the specified modules\n\n    -D module [ module ... ]\n        Show the module\
  \ details. This prints one line for each out-of-date\n        module (meaning, modules\
  \ locally installed but have newer versions\n        on CPAN). Each line has three\
  \ columns: module name, local version,\n        and CPAN version.\n\n    -f  Force\
  \ the specified action, when it normally would have failed. Use\n        this to\
  \ install a module even if its tests fail. When you use this\n        option, -i\
  \ is not optional for installing a module when you need to\n        force it:\n\n\
  \                % cpan -f -i Module::Foo\n\n    -F  Turn off CPAN.pm's attempts\
  \ to lock anything. You should be careful\n        with this since you might end\
  \ up with multiple scripts trying to\n        muck in the same directory. This isn't\
  \ so much of a concern if\n        you're loading a special config with \"-j\",\
  \ and that config sets up\n        its own work directories.\n\n    -g module [\
  \ module ... ]\n        Downloads to the current directory the latest distribution\
  \ of the\n        module.\n\n    -G module [ module ... ]\n        UNIMPLEMENTED\n\
  \n        Download to the current directory the latest distribution of the\n   \
  \     modules, unpack each distribution, and create a git repository for\n     \
  \   each distribution.\n\n        If you want this feature, check out Yanick Champoux's\n\
  \        \"Git::CPAN::Patch\" distribution.\n\n    -h  Print a help message and\
  \ exit. When you specify \"-h\", it ignores all\n        of the other options and\
  \ arguments.\n\n    -i module [ module ... ]\n        Install the specified modules.\
  \ With no other switches, this switch\n        is implied.\n\n    -I  Load \"local::lib\"\
  \ (think like \"-I\" for loading lib paths). Too bad\n        \"-l\" was already\
  \ taken.\n\n    -j Config.pm\n        Load the file that has the CPAN configuration\
  \ data. This should have\n        the same format as the standard CPAN/Config.pm\
  \ file, which defines\n        $CPAN::Config as an anonymous hash.\n\n    -J  Dump\
  \ the configuration in the same format that CPAN.pm uses. This is\n        useful\
  \ for checking the configuration as well as using the dump as a\n        starting\
  \ point for a new, custom configuration.\n\n    -l  List all installed modules with\
  \ their versions\n\n    -L author [ author ... ]\n        List the modules by the\
  \ specified authors.\n\n    -m  Make the specified modules.\n\n    -M mirror1,mirror2,...\n\
  \        A comma-separated list of mirrors to use for just this run. The \"-P\"\n\
  \        option can find them for you automatically.\n\n    -n  Do a dry run, but\
  \ don't actually install anything. (unimplemented)\n\n    -O  Show the out-of-date\
  \ modules.\n\n    -p  Ping the configured mirrors and print a report\n\n    -P \
  \ Find the best mirrors you could be using and use them for the\n        current\
  \ session.\n\n    -r  Recompiles dynamically loaded modules with CPAN::Shell->recompile.\n\
  \n    -s  Drop in the CPAN.pm shell. This command does this automatically if\n \
  \       you don't specify any arguments.\n\n    -t module [ module ... ]\n     \
  \   Run a `make test` on the specified modules.\n\n    -T  Do not test modules.\
  \ Simply install them.\n\n    -u  Upgrade all installed modules. Blindly doing this\
  \ can really break\n        things, so keep a backup.\n\n    -v  Print the script\
  \ version and CPAN.pm version then exit.\n\n    -V  Print detailed information about\
  \ the cpan client.\n\n    -w  UNIMPLEMENTED\n\n        Turn on cpan warnings. This\
  \ checks various things, like directory\n        permissions, and tells you about\
  \ problems you might have.\n\n    -x module [ module ... ]\n        Find close matches\
  \ to the named modules that you think you might\n        have mistyped. This requires\
  \ the optional installation of\n        Text::Levenshtein or Text::Levenshtein::Damerau.\n\
  \n    -X  Dump all the namespaces to standard output.\n\n  Examples\n          \
  \  # print a help message\n            cpan -h\n\n            # print the version\
  \ numbers\n            cpan -v\n\n            # create an autobundle\n         \
  \   cpan -a\n\n            # recompile modules\n            cpan -r\n\n        \
  \    # upgrade all installed modules\n            cpan -u\n\n            # install\
  \ modules ( sole -i is optional )\n            cpan -i Netscape::Booksmarks Business::ISBN\n\
  \n            # force install modules ( must use -i )\n            cpan -fi CGI::Minimal\
  \ URI\n\n            # install modules but without testing them\n            cpan\
  \ -Ti CGI::Minimal URI\n\n  Environment variables\n    There are several components\
  \ in CPAN.pm that use environment variables.\n    The build tools, ExtUtils::MakeMaker\
  \ and Module::Build use some, while\n    others matter to the levels above them.\
  \ Some of these are specified by\n    the Perl Toolchain Gang:\n\n    Lancaster\
  \ Concensus:\n    <https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lanca\n\
  \    ster-consensus.md>\n\n    Oslo Concensus:\n    <https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/oslo-\n\
  \    consensus.md>\n\n    NONINTERACTIVE_TESTING\n        Assume no one is paying\
  \ attention and skips prompts for\n        distributions that do that correctly.\
  \ cpan(1) sets this to 1 unless\n        it already has a value (even if that value\
  \ is false).\n\n    PERL_MM_USE_DEFAULT\n        Use the default answer for a prompted\
  \ questions. cpan(1) sets this\n        to 1 unless it already has a value (even\
  \ if that value is false).\n\n    CPAN_OPTS\n        As with \"PERL5OPTS\", a string\
  \ of additional cpan(1) options to add\n        to those you specify on the command\
  \ line.\n\n    CPANSCRIPT_LOGLEVEL\n        The log level to use, with either the\
  \ embedded, minimal logger or\n        Log::Log4perl if it is installed. Possible\
  \ values are the same as\n        the \"Log::Log4perl\" levels: \"TRACE\", \"DEBUG\"\
  , \"INFO\", \"WARN\",\n        \"ERROR\", and \"FATAL\". The default is \"INFO\"\
  .\n\n    GIT_COMMAND\n        The path to the \"git\" binary to use for the Git\
  \ features. The\n        default is \"/usr/local/bin/git\".\n\nEXIT VALUES\n   \
  \ The script exits with zero if it thinks that everything worked, or a\n    positive\
  \ number if it thinks that something failed. Note, however, that\n    in some cases\
  \ it has to divine a failure by the output of things it does\n    not control. For\
  \ now, the exit codes are vague:\n\n            1       An unknown error\n\n   \
  \         2       The was an external problem\n\n            4       There was an\
  \ internal problem with the script\n\n            8       A module failed to install\n\
  \nTO DO\n    * one shot configuration values from the command line\n\nBUGS\n   \
  \ * none noted\n\nSEE ALSO\n    Most behaviour, including environment variables\
  \ and configuration, comes\n    directly from CPAN.pm.\n\nSOURCE AVAILABILITY\n\
  \    This code is in Github in the CPAN.pm repository:\n\n            https://github.com/andk/cpanpm\n\
  \n    The source used to be tracked separately in another GitHub repo, but the\n\
  \    canonical source is now in the above repo.\n\nCREDITS\n    Japheth Cleaver\
  \ added the bits to allow a forced install (-f).\n\n    Jim Brandt suggest and provided\
  \ the initial implementation for the\n    up-to-date and Changes features.\n\n \
  \   Adam Kennedy pointed out that exit() causes problems on Windows where\n    this\
  \ script ends up with a .bat extension\n\nAUTHOR\n    brian d foy, \"<bdfoy@cpan.org>\"\
  \n\nCOPYRIGHT\n    Copyright (c) 2001-2015, brian d foy, All Rights Reserved.\n\n\
  \    You may redistribute this under the same terms as Perl itself.\n\n"
generated_using:
- -h
