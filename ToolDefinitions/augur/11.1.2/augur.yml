&id001 !Command
command:
- augur
positional: []
named: []
parent:
subcommands:
- !Command
  command:
  - augur
  - align
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --sequences
    - -s
    description: 'sequences to align (default: None)'
    args: !RepeatFlagArg
      name: FASTA
  - !Flag
    optional: true
    synonyms:
    - --output
    - -o
    description: 'output file (default: alignment.fasta)'
    args: !SimpleFlagArg
      name: OUTPUT
  - !Flag
    optional: true
    synonyms:
    - --nthreads
    description: "number of threads to use; specifying the value 'auto'\nwill cause\
      \ the number of available CPU cores on your\nsystem, if determinable, to be\
      \ used (default: 1)"
    args: !SimpleFlagArg
      name: NTHREADS
  - !Flag
    optional: true
    synonyms:
    - --method
    description: 'alignment program to use (default: mafft)'
    args: !ChoiceFlagArg
      choices: !!set
        mafft:
  - !Flag
    optional: true
    synonyms:
    - --reference-name
    description: "strip insertions relative to reference sequence; use\nif the reference\
      \ is already in the input sequences\n(default: None)"
    args: !SimpleFlagArg
      name: NAME
  - !Flag
    optional: true
    synonyms:
    - --reference-sequence
    description: "Add this reference sequence to the dataset & strip\ninsertions relative\
      \ to this. Use if the reference is\nNOT already in the input sequences (default:\
      \ None)"
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --remove-reference
    description: "remove reference sequence from the alignment (default:\nFalse)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --fill-gaps
    description: "If gaps represent missing data rather than true\nindels, replace\
      \ by N after aligning. (default: False)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --existing-alignment
    description: "An existing alignment to which the sequences will be\nadded. The\
      \ ouput alignment will be the same length as\nthis existing alignment. (default:\
      \ False)"
    args: !SimpleFlagArg
      name: FASTA
  - !Flag
    optional: true
    synonyms:
    - --debug
    description: "Produce extra files (e.g. pre- and post-aligner files)\nwhich can\
      \ help with debugging poor alignments.\n(default: False)\n"
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur align [-h] --sequences FASTA [FASTA ...] [--output OUTPUT]\n\
    \                   [--nthreads NTHREADS] [--method {mafft}]\n               \
    \    [--reference-name NAME] [--reference-sequence PATH]\n                   [--remove-reference]\
    \ [--fill-gaps]\n                   [--existing-alignment FASTA] [--debug]\n\n\
    Align multiple sequences from FASTA.\n\noptional arguments:\n  -h, --help    \
    \        show this help message and exit\n  --sequences FASTA [FASTA ...], -s\
    \ FASTA [FASTA ...]\n                        sequences to align (default: None)\n\
    \  --output OUTPUT, -o OUTPUT\n                        output file (default: alignment.fasta)\n\
    \  --nthreads NTHREADS   number of threads to use; specifying the value 'auto'\n\
    \                        will cause the number of available CPU cores on your\n\
    \                        system, if determinable, to be used (default: 1)\n  --method\
    \ {mafft}      alignment program to use (default: mafft)\n  --reference-name NAME\n\
    \                        strip insertions relative to reference sequence; use\n\
    \                        if the reference is already in the input sequences\n\
    \                        (default: None)\n  --reference-sequence PATH\n      \
    \                  Add this reference sequence to the dataset & strip\n      \
    \                  insertions relative to this. Use if the reference is\n    \
    \                    NOT already in the input sequences (default: None)\n  --remove-reference\
    \    remove reference sequence from the alignment (default:\n                \
    \        False)\n  --fill-gaps           If gaps represent missing data rather\
    \ than true\n                        indels, replace by N after aligning. (default:\
    \ False)\n  --existing-alignment FASTA\n                        An existing alignment\
    \ to which the sequences will be\n                        added. The ouput alignment\
    \ will be the same length as\n                        this existing alignment.\
    \ (default: False)\n  --debug               Produce extra files (e.g. pre- and\
    \ post-aligner files)\n                        which can help with debugging poor\
    \ alignments.\n                        (default: False)\n"
  generated_using: &id002
  - --help
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - translate
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --tree
    description: "prebuilt Newick -- no tree will be built if provided\n(default:\
      \ None)"
    args: !SimpleFlagArg
      name: TREE
  - !Flag
    optional: true
    synonyms:
    - --ancestral-sequences
    description: "JSON (fasta input) or VCF (VCF input) containing\nancestral and\
      \ tip sequences (default: None)"
    args: !SimpleFlagArg
      name: ANCESTRAL_SEQUENCES
  - !Flag
    optional: true
    synonyms:
    - --reference-sequence
    description: "GenBank or GFF file containing the annotation\n(default: None)"
    args: !SimpleFlagArg
      name: REFERENCE_SEQUENCE
  - !Flag
    optional: true
    synonyms:
    - --genes
    description: "genes to translate (list or file containing list)\n(default: None)"
    args: !RepeatFlagArg
      name: GENES
  - !Flag
    optional: true
    synonyms:
    - --output-node-data
    description: "name of JSON file to save aa-mutations to (default:\nNone)"
    args: !SimpleFlagArg
      name: OUTPUT_NODE_DATA
  - !Flag
    optional: true
    synonyms:
    - --alignment-output
    description: "write out translated gene alignments. If a VCF-input,\na .vcf or\
      \ .vcf.gz will be output here (depending on\nfile ending). If fasta-input, specify\
      \ the file name\nlike so: 'my_alignment_%GENE.fasta', where '%GENE'\nwill be\
      \ replaced by the name of the gene (default:\nNone)"
    args: !SimpleFlagArg
      name: ALIGNMENT_OUTPUT
  - !Flag
    optional: true
    synonyms:
    - --vcf-reference-output
    description: "fasta file where reference sequence translations for\nVCF input\
      \ will be written (default: None)"
    args: !SimpleFlagArg
      name: VCF_REFERENCE_OUTPUT
  - !Flag
    optional: true
    synonyms:
    - --vcf-reference
    description: "fasta file of the sequence the VCF was mapped to\n(default: None)\n"
    args: !SimpleFlagArg
      name: VCF_REFERENCE
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur translate [-h] [--tree TREE]\n                       [--ancestral-sequences\
    \ ANCESTRAL_SEQUENCES]\n                       --reference-sequence REFERENCE_SEQUENCE\n\
    \                       [--genes GENES [GENES ...]]\n                       [--output-node-data\
    \ OUTPUT_NODE_DATA]\n                       [--alignment-output ALIGNMENT_OUTPUT]\n\
    \                       [--vcf-reference-output VCF_REFERENCE_OUTPUT]\n      \
    \                 [--vcf-reference VCF_REFERENCE]\n\nTranslate gene regions from\
    \ nucleotides to amino acids.\n\noptional arguments:\n  -h, --help           \
    \ show this help message and exit\n  --tree TREE           prebuilt Newick --\
    \ no tree will be built if provided\n                        (default: None)\n\
    \  --ancestral-sequences ANCESTRAL_SEQUENCES\n                        JSON (fasta\
    \ input) or VCF (VCF input) containing\n                        ancestral and\
    \ tip sequences (default: None)\n  --reference-sequence REFERENCE_SEQUENCE\n \
    \                       GenBank or GFF file containing the annotation\n      \
    \                  (default: None)\n  --genes GENES [GENES ...]\n            \
    \            genes to translate (list or file containing list)\n             \
    \           (default: None)\n  --output-node-data OUTPUT_NODE_DATA\n         \
    \               name of JSON file to save aa-mutations to (default:\n        \
    \                None)\n  --alignment-output ALIGNMENT_OUTPUT\n              \
    \          write out translated gene alignments. If a VCF-input,\n           \
    \             a .vcf or .vcf.gz will be output here (depending on\n          \
    \              file ending). If fasta-input, specify the file name\n         \
    \               like so: 'my_alignment_%GENE.fasta', where '%GENE'\n         \
    \               will be replaced by the name of the gene (default:\n         \
    \               None)\n  --vcf-reference-output VCF_REFERENCE_OUTPUT\n       \
    \                 fasta file where reference sequence translations for\n     \
    \                   VCF input will be written (default: None)\n  --vcf-reference\
    \ VCF_REFERENCE\n                        fasta file of the sequence the VCF was\
    \ mapped to\n                        (default: None)\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - mask
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --sequences
    - -s
    description: 'sequences in VCF or FASTA format (default: None)'
    args: !SimpleFlagArg
      name: SEQUENCES
  - !Flag
    optional: true
    synonyms:
    - --mask
    description: "locations to be masked in either BED file format, DRM\nformat, or\
      \ one 1-indexed site per line. (default:\nNone)"
    args: !SimpleFlagArg
      name: MASK_FILE
  - !Flag
    optional: true
    synonyms:
    - --mask-from-beginning
    description: "FASTA Only: Number of sites to mask from beginning\n(default: 0)"
    args: !SimpleFlagArg
      name: MASK_FROM_BEGINNING
  - !Flag
    optional: true
    synonyms:
    - --mask-from-end
    description: "FASTA Only: Number of sites to mask from end (default:\n0)"
    args: !SimpleFlagArg
      name: MASK_FROM_END
  - !Flag
    optional: true
    synonyms:
    - --mask-invalid
    description: 'FASTA Only: Mask invalid nucleotides (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --mask-sites
    description: '1-indexed list of sites to mask (default: None)'
    args: !RepeatFlagArg
      name: MASK_SITES
  - !Flag
    optional: true
    synonyms:
    - --output
    - -o
    description: 'output file (default: None)'
    args: !SimpleFlagArg
      name: OUTPUT
  - !Flag
    optional: true
    synonyms:
    - --no-cleanup
    description: "Leave intermediate files around. May be useful for\ndebugging (default:\
      \ True)\n"
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur mask [-h] --sequences SEQUENCES [--mask MASK_FILE]\n  \
    \                [--mask-from-beginning MASK_FROM_BEGINNING]\n               \
    \   [--mask-from-end MASK_FROM_END] [--mask-invalid]\n                  [--mask-sites\
    \ MASK_SITES [MASK_SITES ...]] [--output OUTPUT]\n                  [--no-cleanup]\n\
    \nMask specified sites from a VCF or FASTA file.\n\noptional arguments:\n  -h,\
    \ --help            show this help message and exit\n  --sequences SEQUENCES,\
    \ -s SEQUENCES\n                        sequences in VCF or FASTA format (default:\
    \ None)\n  --mask MASK_FILE      locations to be masked in either BED file format,\
    \ DRM\n                        format, or one 1-indexed site per line. (default:\n\
    \                        None)\n  --mask-from-beginning MASK_FROM_BEGINNING\n\
    \                        FASTA Only: Number of sites to mask from beginning\n\
    \                        (default: 0)\n  --mask-from-end MASK_FROM_END\n     \
    \                   FASTA Only: Number of sites to mask from end (default:\n \
    \                       0)\n  --mask-invalid        FASTA Only: Mask invalid nucleotides\
    \ (default: False)\n  --mask-sites MASK_SITES [MASK_SITES ...]\n             \
    \           1-indexed list of sites to mask (default: None)\n  --output OUTPUT,\
    \ -o OUTPUT\n                        output file (default: None)\n  --no-cleanup\
    \          Leave intermediate files around. May be useful for\n              \
    \          debugging (default: True)\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - sequence-traits
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --ancestral-sequences
    description: "nucleotide alignment (VCF) to search for sequence\ntraits in (can\
      \ be generated from 'ancestral' using '--\noutput-vcf') (default: None)"
    args: !SimpleFlagArg
      name: ANCESTRAL_SEQUENCES
  - !Flag
    optional: true
    synonyms:
    - --translations
    description: "AA alignment to search for sequence traits in (can\ninclude ancestral\
      \ sequences) (default: None)"
    args: !SimpleFlagArg
      name: TRANSLATIONS
  - !Flag
    optional: true
    synonyms:
    - --vcf-reference
    description: "fasta file of the sequence the nucleotide VCF was\nmapped to (default:\
      \ None)"
    args: !SimpleFlagArg
      name: VCF_REFERENCE
  - !Flag
    optional: true
    synonyms:
    - --vcf-translate-reference
    description: "fasta file of the sequence the translated VCF was\nmapped to (default:\
      \ None)"
    args: !SimpleFlagArg
      name: VCF_TRANSLATE_REFERENCE
  - !Flag
    optional: true
    synonyms:
    - --features
    description: "file that specifies sites defining the features in a\ntab-delimited\
      \ format: \"GENE SITE ALT DISPLAY_NAME\nFEATURE\". For nucleotide sites, GENE\
      \ can be \"nuc\" (or\ncolumn excluded entirely for all-nuc sites).\n\"DISPLAY_NAME\"\
      \ can be blank or excluded entirely.\n(default: None)"
    args: !SimpleFlagArg
      name: FEATURES
  - !Flag
    optional: true
    synonyms:
    - --count
    description: "Whether to count traits (ex: # drugs resistant to) or\nmutations\
      \ (default: traits)"
    args: !ChoiceFlagArg
      choices: !!set
        traits:
        mutations:
  - !Flag
    optional: true
    synonyms:
    - --label
    description: "How to label the counts (ex: Drug_Resistance)\n(default: # Traits)"
    args: !SimpleFlagArg
      name: LABEL
  - !Flag
    optional: true
    synonyms:
    - --output-node-data
    description: "name of JSON file to save sequence features to\n(default: None)\n"
    args: !SimpleFlagArg
      name: OUTPUT_NODE_DATA
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur sequence-traits [-h] [--ancestral-sequences ANCESTRAL_SEQUENCES]\n\
    \                             [--translations TRANSLATIONS]\n                \
    \             [--vcf-reference VCF_REFERENCE]\n                             [--vcf-translate-reference\
    \ VCF_TRANSLATE_REFERENCE]\n                             [--features FEATURES]\n\
    \                             [--count {traits,mutations}] [--label LABEL]\n \
    \                            [--output-node-data OUTPUT_NODE_DATA]\n\nAnnotate\
    \ sequences based on amino-acid or nucleotide signatures.\n\noptional arguments:\n\
    \  -h, --help            show this help message and exit\n  --ancestral-sequences\
    \ ANCESTRAL_SEQUENCES\n                        nucleotide alignment (VCF) to search\
    \ for sequence\n                        traits in (can be generated from 'ancestral'\
    \ using '--\n                        output-vcf') (default: None)\n  --translations\
    \ TRANSLATIONS\n                        AA alignment to search for sequence traits\
    \ in (can\n                        include ancestral sequences) (default: None)\n\
    \  --vcf-reference VCF_REFERENCE\n                        fasta file of the sequence\
    \ the nucleotide VCF was\n                        mapped to (default: None)\n\
    \  --vcf-translate-reference VCF_TRANSLATE_REFERENCE\n                       \
    \ fasta file of the sequence the translated VCF was\n                        mapped\
    \ to (default: None)\n  --features FEATURES   file that specifies sites defining\
    \ the features in a\n                        tab-delimited format: \"GENE SITE\
    \ ALT DISPLAY_NAME\n                        FEATURE\". For nucleotide sites, GENE\
    \ can be \"nuc\" (or\n                        column excluded entirely for all-nuc\
    \ sites).\n                        \"DISPLAY_NAME\" can be blank or excluded entirely.\n\
    \                        (default: None)\n  --count {traits,mutations}\n     \
    \                   Whether to count traits (ex: # drugs resistant to) or\n  \
    \                      mutations (default: traits)\n  --label LABEL         How\
    \ to label the counts (ex: Drug_Resistance)\n                        (default:\
    \ # Traits)\n  --output-node-data OUTPUT_NODE_DATA\n                        name\
    \ of JSON file to save sequence features to\n                        (default:\
    \ None)\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - parse
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --sequences
    - -s
    description: 'sequences in fasta or VCF format (default: None)'
    args: !SimpleFlagArg
      name: SEQUENCES
  - !Flag
    optional: true
    synonyms:
    - --output-sequences
    description: 'output sequences file (default: None)'
    args: !SimpleFlagArg
      name: OUTPUT_SEQUENCES
  - !Flag
    optional: true
    synonyms:
    - --output-metadata
    description: 'output metadata file (default: None)'
    args: !SimpleFlagArg
      name: OUTPUT_METADATA
  - !Flag
    optional: true
    synonyms:
    - --fields
    description: 'fields in fasta header (default: None)'
    args: !RepeatFlagArg
      name: FIELDS
  - !Flag
    optional: true
    synonyms:
    - --prettify-fields
    description: "apply string prettifying operations (underscores to\nspaces, capitalization,\
      \ etc) to specified metadata\nfields (default: None)"
    args: !RepeatFlagArg
      name: PRETTIFY_FIELDS
  - !Flag
    optional: true
    synonyms:
    - --separator
    description: 'separator of fasta header (default: |)'
    args: !SimpleFlagArg
      name: SEPARATOR
  - !Flag
    optional: true
    synonyms:
    - --fix-dates
    description: "attempt to parse non-standard dates and output them in\nstandard\
      \ YYYY-MM-DD format (default: None)\n"
    args: !ChoiceFlagArg
      choices: !!set
        dayfirst:
        monthfirst:
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur parse [-h] --sequences SEQUENCES\n                   [--output-sequences\
    \ OUTPUT_SEQUENCES]\n                   [--output-metadata OUTPUT_METADATA]\n\
    \                   [--fields FIELDS [FIELDS ...]]\n                   [--prettify-fields\
    \ PRETTIFY_FIELDS [PRETTIFY_FIELDS ...]]\n                   [--separator SEPARATOR]\
    \ [--fix-dates {dayfirst,monthfirst}]\n\nParse delimited fields from FASTA sequence\
    \ names into a TSV and FASTA file.\n\noptional arguments:\n  -h, --help      \
    \      show this help message and exit\n  --sequences SEQUENCES, -s SEQUENCES\n\
    \                        sequences in fasta or VCF format (default: None)\n  --output-sequences\
    \ OUTPUT_SEQUENCES\n                        output sequences file (default: None)\n\
    \  --output-metadata OUTPUT_METADATA\n                        output metadata\
    \ file (default: None)\n  --fields FIELDS [FIELDS ...]\n                     \
    \   fields in fasta header (default: None)\n  --prettify-fields PRETTIFY_FIELDS\
    \ [PRETTIFY_FIELDS ...]\n                        apply string prettifying operations\
    \ (underscores to\n                        spaces, capitalization, etc) to specified\
    \ metadata\n                        fields (default: None)\n  --separator SEPARATOR\n\
    \                        separator of fasta header (default: |)\n  --fix-dates\
    \ {dayfirst,monthfirst}\n                        attempt to parse non-standard\
    \ dates and output them in\n                        standard YYYY-MM-DD format\
    \ (default: None)\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - auspice.
  positional:
  - !Positional
    optional: false
    position: 0
    name: augur
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    description: ''
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur [-h]\n             {parse,index,filter,mask,align,tree,refine,ancestral,translate,reconstruct-sequences,clades,traits,sequence-traits,lbi,distance,titers,frequencies,export,validate,version,import}\n\
    \             ...\naugur: error: invalid choice: 'auspice.' (choose from 'parse',\
    \ 'index', 'filter', 'mask', 'align', 'tree', 'refine', 'ancestral', 'translate',\
    \ 'reconstruct-sequences', 'clades', 'traits', 'sequence-traits', 'lbi', 'distance',\
    \ 'titers', 'frequencies', 'export', 'validate', 'version', 'import')\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - signatures.
  positional:
  - !Positional
    optional: false
    position: 0
    name: augur
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    description: ''
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur [-h]\n             {parse,index,filter,mask,align,tree,refine,ancestral,translate,reconstruct-sequences,clades,traits,sequence-traits,lbi,distance,titers,frequencies,export,validate,version,import}\n\
    \             ...\naugur: error: invalid choice: 'signatures.' (choose from 'parse',\
    \ 'index', 'filter', 'mask', 'align', 'tree', 'refine', 'ancestral', 'translate',\
    \ 'reconstruct-sequences', 'clades', 'traits', 'sequence-traits', 'lbi', 'distance',\
    \ 'titers', 'frequencies', 'export', 'validate', 'version', 'import')\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - parameters.
  positional:
  - !Positional
    optional: false
    position: 0
    name: augur
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    description: ''
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur [-h]\n             {parse,index,filter,mask,align,tree,refine,ancestral,translate,reconstruct-sequences,clades,traits,sequence-traits,lbi,distance,titers,frequencies,export,validate,version,import}\n\
    \             ...\naugur: error: invalid choice: 'parameters.' (choose from 'parse',\
    \ 'index', 'filter', 'mask', 'align', 'tree', 'refine', 'ancestral', 'translate',\
    \ 'reconstruct-sequences', 'clades', 'traits', 'sequence-traits', 'lbi', 'distance',\
    \ 'titers', 'frequencies', 'export', 'validate', 'version', 'import')\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - traits
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --tree
    - -t
    description: "tree to perform trait reconstruction on (default:\nNone)"
    args: !SimpleFlagArg
      name: TREE
  - !Flag
    optional: true
    synonyms:
    - --metadata
    description: 'table with metadata, as CSV or TSV (default: None)'
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --weights
    description: "tsv/csv table with equilibrium probabilities of\ndiscrete states\
      \ (default: None)"
    args: !SimpleFlagArg
      name: WEIGHTS
  - !Flag
    optional: true
    synonyms:
    - --columns
    description: "metadata fields to perform discrete reconstruction on\n(default:\
      \ None)"
    args: !RepeatFlagArg
      name: COLUMNS
  - !Flag
    optional: true
    synonyms:
    - --confidence
    description: "record the distribution of subleading mugration states\n(default:\
      \ False)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --sampling-bias-correction
    description: "a rough estimate of how many more events would have\nbeen observed\
      \ if sequences represented an even sample.\nThis should be roughly the (1-sum_i\
      \ p_i^2)/(1-sum_i\nt_i^2), where p_i are the equilibrium frequencies and\nt_i\
      \ are apparent ones.(or rather the time spent in a\nparticular state on the\
      \ tree) (default: None)"
    args: !SimpleFlagArg
      name: SAMPLING_BIAS_CORRECTION
  - !Flag
    optional: true
    synonyms:
    - --output-node-data
    description: "name of JSON file to save trait inferences to\n(default: None)"
    args: !SimpleFlagArg
      name: OUTPUT_NODE_DATA
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur traits [-h] --tree TREE --metadata FILE [--weights WEIGHTS]\n\
    \                    --columns COLUMNS [COLUMNS ...] [--confidence]\n        \
    \            [--sampling-bias-correction SAMPLING_BIAS_CORRECTION]\n         \
    \           [--output-node-data OUTPUT_NODE_DATA]\n\nInfer ancestral traits based\
    \ on a tree.\n\noptional arguments:\n  -h, --help            show this help message\
    \ and exit\n  --tree TREE, -t TREE  tree to perform trait reconstruction on (default:\n\
    \                        None)\n  --metadata FILE       table with metadata, as\
    \ CSV or TSV (default: None)\n  --weights WEIGHTS     tsv/csv table with equilibrium\
    \ probabilities of\n                        discrete states (default: None)\n\
    \  --columns COLUMNS [COLUMNS ...]\n                        metadata fields to\
    \ perform discrete reconstruction on\n                        (default: None)\n\
    \  --confidence          record the distribution of subleading mugration states\n\
    \                        (default: False)\n  --sampling-bias-correction SAMPLING_BIAS_CORRECTION\n\
    \                        a rough estimate of how many more events would have\n\
    \                        been observed if sequences represented an even sample.\n\
    \                        This should be roughly the (1-sum_i p_i^2)/(1-sum_i\n\
    \                        t_i^2), where p_i are the equilibrium frequencies and\n\
    \                        t_i are apparent ones.(or rather the time spent in a\n\
    \                        particular state on the tree) (default: None)\n  --output-node-data\
    \ OUTPUT_NODE_DATA\n                        name of JSON file to save trait inferences\
    \ to\n                        (default: None)\n\nNote that missing data must be\
    \ represented by a `?` character. Missing data\nwill currently be inferred.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- &id003 !Command
  command:
  - augur
  - titers
  positional: []
  named: []
  parent: *id001
  subcommands:
  - !Command
    command:
    - augur
    - titers
    - sub
    positional: []
    named:
    - !Flag
      optional: true
      synonyms:
      - --titers
      description: file with titer measurements
      args: !RepeatFlagArg
        name: TITERS
    - !Flag
      optional: true
      synonyms:
      - --alignment
      description: "sequence to be used in the substitution model,\nsupplied as fasta\
        \ files"
      args: !RepeatFlagArg
        name: ALIGNMENT
    - !Flag
      optional: true
      synonyms:
      - --gene-names
      description: "names of the sequences in the alignment, same order\nassumed"
      args: !RepeatFlagArg
        name: GENE_NAMES
    - !Flag
      optional: true
      synonyms:
      - --tree
      - -t
      description: optional tree to annotate fit titer model to
      args: !SimpleFlagArg
        name: TREE
    - !Flag
      optional: true
      synonyms:
      - --allow-empty-model
      description: allow model to be empty
      args: !EmptyFlagArg {}
    - !Flag
      optional: true
      synonyms:
      - --output
      - -o
      description: "JSON file to save titer model\n"
      args: !SimpleFlagArg
        name: OUTPUT
    parent: *id003
    subcommands: []
    usage: []
    help_flag: !Flag
      optional: true
      synonyms:
      - -h
      - --help
      description: show this help message and exit
      args: !EmptyFlagArg {}
    usage_flag:
    version_flag:
    help_text: "usage: augur titers sub [-h] --titers TITERS [TITERS ...] --alignment\n\
      \                        ALIGNMENT [ALIGNMENT ...] --gene-names GENE_NAMES\n\
      \                        [GENE_NAMES ...] [--tree TREE] [--allow-empty-model]\n\
      \                        --output OUTPUT\n\noptional arguments:\n  -h, --help\
      \            show this help message and exit\n  --titers TITERS [TITERS ...]\n\
      \                        file with titer measurements\n  --alignment ALIGNMENT\
      \ [ALIGNMENT ...]\n                        sequence to be used in the substitution\
      \ model,\n                        supplied as fasta files\n  --gene-names GENE_NAMES\
      \ [GENE_NAMES ...]\n                        names of the sequences in the alignment,\
      \ same order\n                        assumed\n  --tree TREE, -t TREE  optional\
      \ tree to annotate fit titer model to\n  --allow-empty-model   allow model to\
      \ be empty\n  --output OUTPUT, -o OUTPUT\n                        JSON file\
      \ to save titer model\n"
    generated_using: *id002
    docker_image: quay.io/biocontainers/augur:11.1.2--py_1
  - !Command
    command:
    - augur
    - titers
    - tree
    positional: []
    named:
    - !Flag
      optional: true
      synonyms:
      - --titers
      description: file with titer measurements
      args: !RepeatFlagArg
        name: TITERS
    - !Flag
      optional: true
      synonyms:
      - --tree
      - -t
      description: tree to perform fit titer model to
      args: !SimpleFlagArg
        name: TREE
    - !Flag
      optional: true
      synonyms:
      - --allow-empty-model
      description: allow model to be empty
      args: !EmptyFlagArg {}
    - !Flag
      optional: true
      synonyms:
      - --output
      - -o
      description: "JSON file to save titer model\n"
      args: !SimpleFlagArg
        name: OUTPUT
    parent: *id003
    subcommands: []
    usage: []
    help_flag: !Flag
      optional: true
      synonyms:
      - -h
      - --help
      description: show this help message and exit
      args: !EmptyFlagArg {}
    usage_flag:
    version_flag:
    help_text: "usage: augur titers tree [-h] --titers TITERS [TITERS ...] --tree\
      \ TREE\n                         [--allow-empty-model] --output OUTPUT\n\noptional\
      \ arguments:\n  -h, --help            show this help message and exit\n  --titers\
      \ TITERS [TITERS ...]\n                        file with titer measurements\n\
      \  --tree TREE, -t TREE  tree to perform fit titer model to\n  --allow-empty-model\
      \   allow model to be empty\n  --output OUTPUT, -o OUTPUT\n                \
      \        JSON file to save titer model\n"
    generated_using: *id002
    docker_image: quay.io/biocontainers/augur:11.1.2--py_1
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur titers [-h] {tree,sub} ...\n\nAnnotate a tree with actual\
    \ and inferred titer measurements.\n\npositional arguments:\n  {tree,sub}\n  \
    \  tree      tree model\n    sub       substitution model\n\noptional arguments:\n\
    \  -h, --help  show this help message and exit\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - ancestral
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --tree
    - -t
    description: 'prebuilt Newick (default: None)'
    args: !SimpleFlagArg
      name: TREE
  - !Flag
    optional: true
    synonyms:
    - --alignment
    - -a
    description: 'alignment in fasta or VCF format (default: None)'
    args: !SimpleFlagArg
      name: ALIGNMENT
  - !Flag
    optional: true
    synonyms:
    - --output-node-data
    description: "name of JSON file to save mutations and ancestral\nsequences to\
      \ (default: None)"
    args: !SimpleFlagArg
      name: OUTPUT_NODE_DATA
  - !Flag
    optional: true
    synonyms:
    - --output-sequences
    description: "name of FASTA file to save ancestral sequences to\n(FASTA alignments\
      \ only) (default: None)"
    args: !SimpleFlagArg
      name: OUTPUT_SEQUENCES
  - !Flag
    optional: true
    synonyms:
    - --inference
    description: "calculate joint or marginal maximum likelihood\nancestral sequence\
      \ states (default: joint)"
    args: !ChoiceFlagArg
      choices: !!set
        marginal:
        joint:
  - !Flag
    optional: true
    synonyms:
    - --vcf-reference
    description: "fasta file of the sequence the VCF was mapped to\n(default: None)"
    args: !SimpleFlagArg
      name: VCF_REFERENCE
  - !Flag
    optional: true
    synonyms:
    - --output-vcf
    description: "name of output VCF file which will include ancestral\nseqs (default:\
      \ None)"
    args: !SimpleFlagArg
      name: OUTPUT_VCF
  - !Flag
    optional: true
    synonyms:
    - --keep-ambiguous
    description: "do not infer nucleotides at ambiguous (N) sites on tip\nsequences\
      \ (leave as N). (default: False)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --infer-ambiguous
    description: "infer nucleotides at ambiguous (N,W,R,..) sites on tip\nsequences\
      \ and replace with most likely state.\n(default: True)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --keep-overhangs
    description: "do not infer nucleotides for gaps (-) on either side\nof the alignment\
      \ (default: False)\n"
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur ancestral [-h] --tree TREE [--alignment ALIGNMENT]\n  \
    \                     [--output-node-data OUTPUT_NODE_DATA]\n                \
    \       [--output-sequences OUTPUT_SEQUENCES]\n                       [--inference\
    \ {joint,marginal}]\n                       [--vcf-reference VCF_REFERENCE]\n\
    \                       [--output-vcf OUTPUT_VCF]\n                       [--keep-ambiguous\
    \ | --infer-ambiguous]\n                       [--keep-overhangs]\n\nInfer ancestral\
    \ sequences based on a tree.\n\noptional arguments:\n  -h, --help            show\
    \ this help message and exit\n  --tree TREE, -t TREE  prebuilt Newick (default:\
    \ None)\n  --alignment ALIGNMENT, -a ALIGNMENT\n                        alignment\
    \ in fasta or VCF format (default: None)\n  --output-node-data OUTPUT_NODE_DATA\n\
    \                        name of JSON file to save mutations and ancestral\n \
    \                       sequences to (default: None)\n  --output-sequences OUTPUT_SEQUENCES\n\
    \                        name of FASTA file to save ancestral sequences to\n \
    \                       (FASTA alignments only) (default: None)\n  --inference\
    \ {joint,marginal}\n                        calculate joint or marginal maximum\
    \ likelihood\n                        ancestral sequence states (default: joint)\n\
    \  --vcf-reference VCF_REFERENCE\n                        fasta file of the sequence\
    \ the VCF was mapped to\n                        (default: None)\n  --output-vcf\
    \ OUTPUT_VCF\n                        name of output VCF file which will include\
    \ ancestral\n                        seqs (default: None)\n  --keep-ambiguous\
    \      do not infer nucleotides at ambiguous (N) sites on tip\n              \
    \          sequences (leave as N). (default: False)\n  --infer-ambiguous     infer\
    \ nucleotides at ambiguous (N,W,R,..) sites on tip\n                        sequences\
    \ and replace with most likely state.\n                        (default: True)\n\
    \  --keep-overhangs      do not infer nucleotides for gaps (-) on either side\n\
    \                        of the alignment (default: False)\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - measurements.
  positional:
  - !Positional
    optional: false
    position: 0
    name: augur
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    description: ''
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur [-h]\n             {parse,index,filter,mask,align,tree,refine,ancestral,translate,reconstruct-sequences,clades,traits,sequence-traits,lbi,distance,titers,frequencies,export,validate,version,import}\n\
    \             ...\naugur: error: invalid choice: 'measurements.' (choose from\
    \ 'parse', 'index', 'filter', 'mask', 'align', 'tree', 'refine', 'ancestral',\
    \ 'translate', 'reconstruct-sequences', 'clades', 'traits', 'sequence-traits',\
    \ 'lbi', 'distance', 'titers', 'frequencies', 'export', 'validate', 'version',\
    \ 'import')\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- &id004 !Command
  command:
  - augur
  - export
  positional: []
  named: []
  parent: *id001
  subcommands:
  - !Command
    command:
    - augur
    - export
    - v2
    positional:
    - !Positional
      optional: false
      position: 0
      name: TSV
      description: --colors FILE         Custom color definitions, one per line in
        the format
    named:
    - !Flag
      optional: true
      synonyms:
      - --tree
      - -t
      description: Phylogenetic tree, usually output from `augur refine`
      args: !SimpleFlagArg
        name: newick
    - !Flag
      optional: true
      synonyms:
      - --node-data
      description: JSON files containing metadata for nodes in the tree
      args: !RepeatFlagArg
        name: JSON
    - !Flag
      optional: true
      synonyms:
      - --output
      description: Ouput file (typically for visualisation in auspice)
      args: !SimpleFlagArg
        name: JSON
    - !Flag
      optional: true
      synonyms:
      - --auspice-config
      description: Auspice configuration file
      args: !SimpleFlagArg
        name: JSON
    - !Flag
      optional: true
      synonyms:
      - --title
      description: Title to be displayed by auspice
      args: !SimpleFlagArg
        name: title
    - !Flag
      optional: true
      synonyms:
      - --maintainers
      description: "Analysis maintained by, in format 'Name <URL>' 'Name2\n<URL>',\
        \ ..."
      args: !RepeatFlagArg
        name: name
    - !Flag
      optional: true
      synonyms:
      - --build-url
      description: Build URL/repository to be displayed by Auspice
      args: !SimpleFlagArg
        name: url
    - !Flag
      optional: true
      synonyms:
      - --description
      description: "Markdown file with description of build and/or\nacknowledgements\
        \ to be displayed by Auspice"
      args: !SimpleFlagArg
        name: description.md
    - !Flag
      optional: true
      synonyms:
      - --geo-resolutions
      description: Geographic traits to be displayed on map
      args: !RepeatFlagArg
        name: trait
    - !Flag
      optional: true
      synonyms:
      - --color-by-metadata
      description: Metadata columns to include as coloring options
      args: !RepeatFlagArg
        name: trait
    - !Flag
      optional: true
      synonyms:
      - --panels
      description: "Restrict panel display in auspice. Options are tree,\nmap, entropy,\
        \ frequencies. Ignore this option to\ndisplay all available panels."
      args: !RepeatFlagArg
        name: panels
    - !Flag
      optional: true
      synonyms:
      - --metadata
      description: Additional metadata for strains in the tree, as CSV or
      args: !SimpleFlagArg
        name: FILE
    - !Flag
      optional: true
      synonyms:
      - --lat-longs
      description: "Latitudes and longitudes for geography traits\n(overrides built\
        \ in mappings)"
      args: !SimpleFlagArg
        name: TSV
    - !Flag
      optional: true
      synonyms:
      - --minify-json
      description: export JSONs without indentation or line returns
      args: !EmptyFlagArg {}
    - !Flag
      optional: true
      synonyms:
      - --include-root-sequence
      description: "Export an additional JSON containing the root sequence\n(reference\
        \ sequence for vcf) used to identify\nmutations. The filename will follow\
        \ the pattern of\n<OUTPUT>_root-sequence.json for a main auspice JSON of\n\
        <OUTPUT>.json\n"
      args: !EmptyFlagArg {}
    parent: *id004
    subcommands: []
    usage: []
    help_flag: !Flag
      optional: true
      synonyms:
      - -h
      - --help
      description: show this help message and exit
      args: !EmptyFlagArg {}
    usage_flag:
    version_flag:
    help_text: "usage: augur export v2 [-h] --tree newick --node-data JSON [JSON ...]\
      \ --output\n                       JSON [--auspice-config JSON] [--title title]\n\
      \                       [--maintainers name [name ...]] [--build-url url]\n\
      \                       [--description description.md]\n                   \
      \    [--geo-resolutions trait [trait ...]]\n                       [--color-by-metadata\
      \ trait [trait ...]]\n                       [--panels panels [panels ...]]\
      \ [--metadata FILE]\n                       [--colors FILE] [--lat-longs TSV]\
      \ [--minify-json]\n                       [--include-root-sequence]\n\noptional\
      \ arguments:\n  -h, --help            show this help message and exit\n\nREQUIRED:\n\
      \  --tree newick, -t newick\n                        Phylogenetic tree, usually\
      \ output from `augur refine`\n  --node-data JSON [JSON ...]\n              \
      \          JSON files containing metadata for nodes in the tree\n  --output\
      \ JSON         Ouput file (typically for visualisation in auspice)\n\nDISPLAY\
      \ CONFIGURATION:\n  These control the display settings for auspice. You can\
      \ supply a config\n  JSON (which has all available options) or command line\
      \ arguments (which\n  are more limited but great to get started). Supplying\
      \ both is fine too,\n  command line args will overrule what is set in the config\
      \ file!\n\n  --auspice-config JSON\n                        Auspice configuration\
      \ file\n  --title title         Title to be displayed by auspice\n  --maintainers\
      \ name [name ...]\n                        Analysis maintained by, in format\
      \ 'Name <URL>' 'Name2\n                        <URL>', ...\n  --build-url url\
      \       Build URL/repository to be displayed by Auspice\n  --description description.md\n\
      \                        Markdown file with description of build and/or\n  \
      \                      acknowledgements to be displayed by Auspice\n  --geo-resolutions\
      \ trait [trait ...]\n                        Geographic traits to be displayed\
      \ on map\n  --color-by-metadata trait [trait ...]\n                        Metadata\
      \ columns to include as coloring options\n  --panels panels [panels ...]\n \
      \                       Restrict panel display in auspice. Options are tree,\n\
      \                        map, entropy, frequencies. Ignore this option to\n\
      \                        display all available panels.\n\nOPTIONAL INPUT FILES:\n\
      \  --metadata FILE       Additional metadata for strains in the tree, as CSV\
      \ or\n                        TSV\n  --colors FILE         Custom color definitions,\
      \ one per line in the format\n                        `TRAIT_TYPE\\tTRAIT_VALUE\\\
      tHEX_CODE`\n  --lat-longs TSV       Latitudes and longitudes for geography traits\n\
      \                        (overrides built in mappings)\n\nOPTIONAL SETTINGS:\n\
      \  --minify-json         export JSONs without indentation or line returns\n\
      \  --include-root-sequence\n                        Export an additional JSON\
      \ containing the root sequence\n                        (reference sequence\
      \ for vcf) used to identify\n                        mutations. The filename\
      \ will follow the pattern of\n                        <OUTPUT>_root-sequence.json\
      \ for a main auspice JSON of\n                        <OUTPUT>.json\n"
    generated_using: *id002
    docker_image: quay.io/biocontainers/augur:11.1.2--py_1
  - !Command
    command:
    - augur
    - export
    - v1
    positional: []
    named:
    - !Flag
      optional: true
      synonyms:
      - --tree
      - -t
      description: tree to perform trait reconstruction on
      args: !SimpleFlagArg
        name: TREE
    - !Flag
      optional: true
      synonyms:
      - --metadata
      description: sequence metadata, as CSV or TSV
      args: !SimpleFlagArg
        name: FILE
    - !Flag
      optional: true
      synonyms:
      - --node-data
      description: JSON files with meta data for each node
      args: !RepeatFlagArg
        name: NODE_DATA
    - !Flag
      optional: true
      synonyms:
      - --output-tree
      description: "JSON file name that is passed on to auspice (e.g.,\nzika_tree.json)."
      args: !SimpleFlagArg
        name: OUTPUT_TREE
    - !Flag
      optional: true
      synonyms:
      - --output-meta
      description: "JSON file name that is passed on to auspice (e.g.,\nzika_meta.json)."
      args: !SimpleFlagArg
        name: OUTPUT_META
    - !Flag
      optional: true
      synonyms:
      - --auspice-config
      description: file with auspice configuration
      args: !SimpleFlagArg
        name: AUSPICE_CONFIG
    - !Flag
      optional: true
      synonyms:
      - --colors
      description: "Custom color definitions, one per line in the format\n`TRAIT_TYPE\\\
        tTRAIT_VALUE\\tHEX_CODE`"
      args: !SimpleFlagArg
        name: FILE
    - !Flag
      optional: true
      synonyms:
      - --lat-longs
      description: "file latitudes and longitudes, overrides built in\nmappings"
      args: !SimpleFlagArg
        name: LAT_LONGS
    - !Flag
      optional: true
      synonyms:
      - --tree-name
      description: Tree name (needed for tangle tree functionality)
      args: !SimpleFlagArg
        name: TREE_NAME
    - !Flag
      optional: true
      synonyms:
      - --minify-json
      description: export JSONs without indentation or line returns
      args: !EmptyFlagArg {}
    - !Flag
      optional: true
      synonyms:
      - --output-sequence
      description: "JSON file name that is passed on to auspice (e.g.,\nzika_seq.json)."
      args: !SimpleFlagArg
        name: OUTPUT_SEQUENCE
    - !Flag
      optional: true
      synonyms:
      - --reference
      description: reference sequence for export to browser, only vcf
      args: !SimpleFlagArg
        name: REFERENCE
    - !Flag
      optional: true
      synonyms:
      - --reference-translations
      description: "reference translations for export to browser, only vcf\n"
      args: !SimpleFlagArg
        name: REFERENCE_TRANSLATIONS
    parent: *id004
    subcommands: []
    usage: []
    help_flag: !Flag
      optional: true
      synonyms:
      - -h
      - --help
      description: show this help message and exit
      args: !EmptyFlagArg {}
    usage_flag:
    version_flag:
    help_text: "usage: augur export v1 [-h] --tree TREE --metadata FILE --node-data\
      \ NODE_DATA\n                       [NODE_DATA ...] [--output-tree OUTPUT_TREE]\n\
      \                       [--output-meta OUTPUT_META]\n                      \
      \ [--auspice-config AUSPICE_CONFIG] [--colors FILE]\n                      \
      \ [--lat-longs LAT_LONGS] [--tree-name TREE_NAME]\n                       [--minify-json]\
      \ [--output-sequence OUTPUT_SEQUENCE]\n                       [--reference REFERENCE]\n\
      \                       [--reference-translations REFERENCE_TRANSLATIONS]\n\n\
      optional arguments:\n  -h, --help            show this help message and exit\n\
      \nREQUIRED:\n  --tree TREE, -t TREE  tree to perform trait reconstruction on\n\
      \  --metadata FILE       sequence metadata, as CSV or TSV\n  --node-data NODE_DATA\
      \ [NODE_DATA ...]\n                        JSON files with meta data for each\
      \ node\n  --output-tree OUTPUT_TREE\n                        JSON file name\
      \ that is passed on to auspice (e.g.,\n                        zika_tree.json).\n\
      \  --output-meta OUTPUT_META\n                        JSON file name that is\
      \ passed on to auspice (e.g.,\n                        zika_meta.json).\n  --auspice-config\
      \ AUSPICE_CONFIG\n                        file with auspice configuration\n\n\
      OPTIONS:\n  --colors FILE         Custom color definitions, one per line in\
      \ the format\n                        `TRAIT_TYPE\\tTRAIT_VALUE\\tHEX_CODE`\n\
      \  --lat-longs LAT_LONGS\n                        file latitudes and longitudes,\
      \ overrides built in\n                        mappings\n  --tree-name TREE_NAME\n\
      \                        Tree name (needed for tangle tree functionality)\n\
      \  --minify-json         export JSONs without indentation or line returns\n\
      \  --output-sequence OUTPUT_SEQUENCE\n                        JSON file name\
      \ that is passed on to auspice (e.g.,\n                        zika_seq.json).\n\
      \  --reference REFERENCE\n                        reference sequence for export\
      \ to browser, only vcf\n  --reference-translations REFERENCE_TRANSLATIONS\n\
      \                        reference translations for export to browser, only\
      \ vcf\n"
    generated_using: *id002
    docker_image: quay.io/biocontainers/augur:11.1.2--py_1
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur export [-h]\n                    Augur export now needs\
    \ you to define the JSON version you\n                    want, e.g. `augur export\
    \ v2`. ...\n\nExport JSON files suitable for visualization with auspice.\n\noptional\
    \ arguments:\n  -h, --help            show this help message and exit\n\nJSON\
    \ SCHEMA:\n  Augur export now needs you to define the JSON version you want, e.g.\
    \ `augur export v2`.\n    v2                  Export version 2 JSON schema\n \
    \   v1                  Export version 1 JSON schema (separate meta and tree\n\
    \                        JSONs)\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - acids.
  positional:
  - !Positional
    optional: false
    position: 0
    name: augur
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    description: ''
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur [-h]\n             {parse,index,filter,mask,align,tree,refine,ancestral,translate,reconstruct-sequences,clades,traits,sequence-traits,lbi,distance,titers,frequencies,export,validate,version,import}\n\
    \             ...\naugur: error: invalid choice: 'acids.' (choose from 'parse',\
    \ 'index', 'filter', 'mask', 'align', 'tree', 'refine', 'ancestral', 'translate',\
    \ 'reconstruct-sequences', 'clades', 'traits', 'sequence-traits', 'lbi', 'distance',\
    \ 'titers', 'frequencies', 'export', 'validate', 'version', 'import')\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - version
  positional:
  - !Positional
    optional: false
    position: 0
    name: augur
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    description: ''
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur [-h]\n             {parse,index,filter,mask,align,tree,refine,ancestral,translate,reconstruct-sequences,clades,traits,sequence-traits,lbi,distance,titers,frequencies,export,validate,version,import}\n\
    \             ...\naugur: error: unrecognized arguments: --usage\n"
  generated_using:
  - --usage
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - index
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --sequences
    - -s
    description: 'sequences in fasta format (default: None)'
    args: !SimpleFlagArg
      name: SEQUENCES
  - !Flag
    optional: true
    synonyms:
    - --output
    - -o
    description: "tab-delimited file containing the number of bases per\nsequence\
      \ in the given file. Output columns include\nstrain, length, and counts for\
      \ A, C, G, T, N, other\nvalid IUPAC characters, ambiguous characters ('?' and\n\
      '-'), and other invalid characters. (default: None)"
    args: !SimpleFlagArg
      name: OUTPUT
  - !Flag
    optional: true
    synonyms:
    - --verbose
    - -v
    description: 'print index statistics to stdout (default: False)'
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur index [-h] --sequences SEQUENCES --output OUTPUT [--verbose]\n\
    \nCount occurrence of bases in a set of sequences.\n\noptional arguments:\n  -h,\
    \ --help            show this help message and exit\n  --sequences SEQUENCES,\
    \ -s SEQUENCES\n                        sequences in fasta format (default: None)\n\
    \  --output OUTPUT, -o OUTPUT\n                        tab-delimited file containing\
    \ the number of bases per\n                        sequence in the given file.\
    \ Output columns include\n                        strain, length, and counts for\
    \ A, C, G, T, N, other\n                        valid IUPAC characters, ambiguous\
    \ characters ('?' and\n                        '-'), and other invalid characters.\
    \ (default: None)\n  --verbose, -v         print index statistics to stdout (default:\
    \ False)\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- &id005 !Command
  command:
  - augur
  - import
  positional: []
  named: []
  parent: *id001
  subcommands:
  - !Command
    command:
    - augur
    - import
    - beast
    positional:
    - !Positional
      optional: false
      position: 0
      name: OUTPUT_NODE_DATA
      description: 'optional arguments:'
    named:
    - !Flag
      optional: true
      synonyms:
      - --mcc
      description: BEAST MCC tree
      args: !SimpleFlagArg
        name: MCC
    - !Flag
      optional: true
      synonyms:
      - --most-recent-tip-date
      description: "Numeric date of most recent tip in tree (--tip-date-\nregex, --tip-date-format\
        \ and --tip-date-delimeter are\nignored if this is set)"
      args: !SimpleFlagArg
        name: MOST_RECENT_TIP_DATE
    - !Flag
      optional: true
      synonyms:
      - --tip-date-regex
      description: regex to extract dates from tip names
      args: !SimpleFlagArg
        name: TIP_DATE_REGEX
    - !Flag
      optional: true
      synonyms:
      - --tip-date-format
      description: Format of date (if extracted by regex)
      args: !SimpleFlagArg
        name: TIP_DATE_FORMAT
    - !Flag
      optional: true
      synonyms:
      - --tip-date-delimeter
      description: "delimeter used in tip-date-format. Used to match\npartial dates."
      args: !SimpleFlagArg
        name: TIP_DATE_DELIMETER
    - !Flag
      optional: true
      synonyms:
      - --verbose
      description: Display verbose output. Only useful for debugging.
      args: !EmptyFlagArg {}
    - !Flag
      optional: true
      synonyms:
      - --recursion-limit
      description: Set a custom recursion limit (dangerous!)
      args: !SimpleFlagArg
        name: RECURSION_LIMIT
    - !Flag
      optional: true
      synonyms:
      - --output-tree
      description: file name to write tree to
      args: !SimpleFlagArg
        name: OUTPUT_TREE
    - !Flag
      optional: true
      synonyms:
      - --output-node-data
      description: "file name to write (temporal) branch lengths & BEAST\ntraits as\
        \ node data\n"
      args: !SimpleFlagArg
        name: OUTPUT_NODE_DATA
    parent: *id005
    subcommands: []
    usage: []
    help_flag: !Flag
      optional: true
      synonyms:
      - -h
      - --help
      description: show this help message and exit
      args: !EmptyFlagArg {}
    usage_flag:
    version_flag:
    help_text: "usage: augur import beast [-h] --mcc MCC\n                       \
      \   [--most-recent-tip-date MOST_RECENT_TIP_DATE]\n                        \
      \  [--tip-date-regex TIP_DATE_REGEX]\n                          [--tip-date-format\
      \ TIP_DATE_FORMAT]\n                          [--tip-date-delimeter TIP_DATE_DELIMETER]\n\
      \                          [--verbose] [--recursion-limit RECURSION_LIMIT]\n\
      \                          --output-tree OUTPUT_TREE --output-node-data\n  \
      \                        OUTPUT_NODE_DATA\n\noptional arguments:\n  -h, --help\
      \            show this help message and exit\n  --mcc MCC             BEAST\
      \ MCC tree\n  --most-recent-tip-date MOST_RECENT_TIP_DATE\n                \
      \        Numeric date of most recent tip in tree (--tip-date-\n            \
      \            regex, --tip-date-format and --tip-date-delimeter are\n       \
      \                 ignored if this is set)\n  --tip-date-regex TIP_DATE_REGEX\n\
      \                        regex to extract dates from tip names\n  --tip-date-format\
      \ TIP_DATE_FORMAT\n                        Format of date (if extracted by regex)\n\
      \  --tip-date-delimeter TIP_DATE_DELIMETER\n                        delimeter\
      \ used in tip-date-format. Used to match\n                        partial dates.\n\
      \  --verbose             Display verbose output. Only useful for debugging.\n\
      \  --recursion-limit RECURSION_LIMIT\n                        Set a custom recursion\
      \ limit (dangerous!)\n  --output-tree OUTPUT_TREE\n                        file\
      \ name to write tree to\n  --output-node-data OUTPUT_NODE_DATA\n           \
      \             file name to write (temporal) branch lengths & BEAST\n       \
      \                 traits as node data\n"
    generated_using: *id002
    docker_image: quay.io/biocontainers/augur:11.1.2--py_1
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur import [-h]\n                    Import analyses into augur\
    \ pipeline from other systems ...\n\nImport analyses into augur pipeline from\
    \ other systems\n\noptional arguments:\n  -h, --help            show this help\
    \ message and exit\n\nTYPE:\n  Import analyses into augur pipeline from other\
    \ systems\n    beast               Import beast analysis\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - tree
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --alignment
    - -a
    description: 'alignment in fasta or VCF format (default: None)'
    args: !SimpleFlagArg
      name: ALIGNMENT
  - !Flag
    optional: true
    synonyms:
    - --method
    description: 'tree builder to use (default: iqtree)'
    args: !ChoiceFlagArg
      choices: !!set
        iqtree:
        raxml:
        fasttree:
  - !Flag
    optional: true
    synonyms:
    - --output
    - -o
    description: 'file name to write tree to (default: None)'
    args: !SimpleFlagArg
      name: OUTPUT
  - !Flag
    optional: true
    synonyms:
    - --substitution-model
    description: "{HKY,GTR,HKY+G,GTR+G,GTR+R10}\nsubstitution model to use. Specify\
      \ 'none' to run\nModelTest. Currently, only available for IQTREE.\n(default:\
      \ GTR)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --nthreads
    description: "number of threads to use; specifying the value 'auto'\nwill cause\
      \ the number of available CPU cores on your\nsystem, if determinable, to be\
      \ used (default: 1)"
    args: !SimpleFlagArg
      name: NTHREADS
  - !Flag
    optional: true
    synonyms:
    - --vcf-reference
    description: "fasta file of the sequence the VCF was mapped to\n(default: None)"
    args: !SimpleFlagArg
      name: VCF_REFERENCE
  - !Flag
    optional: true
    synonyms:
    - --exclude-sites
    description: "file name of one-based sites to exclude for raw tree\nbuilding (BED\
      \ format in .bed files, DRM format in tab-\ndelimited files, or one position\
      \ per line) (default:\nNone)"
    args: !SimpleFlagArg
      name: EXCLUDE_SITES
  - !Flag
    optional: true
    synonyms:
    - --tree-builder-args
    description: "extra arguments to be passed directly to the\nexecutable of the\
      \ requested tree method (e.g., --tree-\nbuilder-args=\"-czb\") (default: )\n"
    args: !SimpleFlagArg
      name: TREE_BUILDER_ARGS
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur tree [-h] --alignment ALIGNMENT\n                  [--method\
    \ {fasttree,raxml,iqtree}] [--output OUTPUT]\n                  [--substitution-model\
    \ {HKY,GTR,HKY+G,GTR+G,GTR+R10}]\n                  [--nthreads NTHREADS] [--vcf-reference\
    \ VCF_REFERENCE]\n                  [--exclude-sites EXCLUDE_SITES]\n        \
    \          [--tree-builder-args TREE_BUILDER_ARGS]\n\nBuild a tree using a variety\
    \ of methods.\n\noptional arguments:\n  -h, --help            show this help message\
    \ and exit\n  --alignment ALIGNMENT, -a ALIGNMENT\n                        alignment\
    \ in fasta or VCF format (default: None)\n  --method {fasttree,raxml,iqtree}\n\
    \                        tree builder to use (default: iqtree)\n  --output OUTPUT,\
    \ -o OUTPUT\n                        file name to write tree to (default: None)\n\
    \  --substitution-model {HKY,GTR,HKY+G,GTR+G,GTR+R10}\n                      \
    \  substitution model to use. Specify 'none' to run\n                        ModelTest.\
    \ Currently, only available for IQTREE.\n                        (default: GTR)\n\
    \  --nthreads NTHREADS   number of threads to use; specifying the value 'auto'\n\
    \                        will cause the number of available CPU cores on your\n\
    \                        system, if determinable, to be used (default: 1)\n  --vcf-reference\
    \ VCF_REFERENCE\n                        fasta file of the sequence the VCF was\
    \ mapped to\n                        (default: None)\n  --exclude-sites EXCLUDE_SITES\n\
    \                        file name of one-based sites to exclude for raw tree\n\
    \                        building (BED format in .bed files, DRM format in tab-\n\
    \                        delimited files, or one position per line) (default:\n\
    \                        None)\n  --tree-builder-args TREE_BUILDER_ARGS\n    \
    \                    extra arguments to be passed directly to the\n          \
    \              executable of the requested tree method (e.g., --tree-\n      \
    \                  builder-args=\"-czb\") (default: )\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - refine
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --alignment
    - -a
    description: 'alignment in fasta or VCF format (default: None)'
    args: !SimpleFlagArg
      name: ALIGNMENT
  - !Flag
    optional: true
    synonyms:
    - --tree
    - -t
    description: 'prebuilt Newick (default: None)'
    args: !SimpleFlagArg
      name: TREE
  - !Flag
    optional: true
    synonyms:
    - --metadata
    description: 'sequence metadata, as CSV or TSV (default: None)'
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --output-tree
    description: 'file name to write tree to (default: None)'
    args: !SimpleFlagArg
      name: OUTPUT_TREE
  - !Flag
    optional: true
    synonyms:
    - --output-node-data
    description: "file name to write branch lengths as node data\n(default: None)"
    args: !SimpleFlagArg
      name: OUTPUT_NODE_DATA
  - !Flag
    optional: true
    synonyms:
    - --timetree
    description: 'produce timetree using treetime (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --coalescent
    description: "coalescent time scale in units of inverse clock rate\n(float), optimize\
      \ as scalar ('opt'), or skyline\n('skyline') (default: None)"
    args: !SimpleFlagArg
      name: COALESCENT
  - !Flag
    optional: true
    synonyms:
    - --gen-per-year
    description: "number of generations per year, relevant for skyline\noutput('skyline')\
      \ (default: 50)"
    args: !SimpleFlagArg
      name: GEN_PER_YEAR
  - !Flag
    optional: true
    synonyms:
    - --clock-rate
    description: 'fixed clock rate (default: None)'
    args: !SimpleFlagArg
      name: CLOCK_RATE
  - !Flag
    optional: true
    synonyms:
    - --clock-std-dev
    description: "standard deviation of the fixed clock_rate estimate\n(default: None)"
    args: !SimpleFlagArg
      name: CLOCK_STD_DEV
  - !Flag
    optional: true
    synonyms:
    - --root
    description: "rooting mechanism ('best', least-squares', 'min_dev',\n'oldest')\
      \ OR node to root by OR two nodes indicating a\nmonophyletic group to root by.\
      \ Run treetime -h for\ndefinitions of rooting methods. (default: best)"
    args: !RepeatFlagArg
      name: ROOT
  - !Flag
    optional: true
    synonyms:
    - --keep-root
    description: "do not reroot the tree; use it as-is. Overrides\nanything specified\
      \ by --root. (default: False)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --covariance
    description: "Account for covariation when estimating rates and/or\nrerooting.\
      \ Use --no-covariance to turn off. (default:\nTrue)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no-covariance
    - --keep-polytomies
    description: 'Do not attempt to resolve polytomies (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --precision
    description: "precision used by TreeTime to determine the number of\ngrid points\
      \ that are used for the evaluation of the\nbranch length interpolation objects.\
      \ Values range from\n0 (rough) to 3 (ultra fine) and default to 'auto'.\n(default:\
      \ None)"
    args: !ChoiceFlagArg
      choices: !!set
        '3':
        '2':
        '1':
        '0':
  - !Flag
    optional: true
    synonyms:
    - --date-format
    description: 'date format (default: %Y-%m-%d)'
    args: !SimpleFlagArg
      name: DATE_FORMAT
  - !Flag
    optional: true
    synonyms:
    - --date-confidence
    description: "calculate confidence intervals for node dates\n(default: False)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --date-inference
    description: "assign internal nodes to their marginally most likely\ndates, not\
      \ jointly most likely (default: joint)"
    args: !ChoiceFlagArg
      choices: !!set
        marginal:
        joint:
  - !Flag
    optional: true
    synonyms:
    - --branch-length-inference
    description: 'branch length mode of treetime to use (default: auto)'
    args: !ChoiceFlagArg
      choices: !!set
        input:
        marginal:
        joint:
        auto:
  - !Flag
    optional: true
    synonyms:
    - --clock-filter-iqd
    description: "clock-filter: remove tips that deviate more than n_iqd\ninterquartile\
      \ ranges from the root-to-tip vs time\nregression (default: None)"
    args: !SimpleFlagArg
      name: CLOCK_FILTER_IQD
  - !Flag
    optional: true
    synonyms:
    - --vcf-reference
    description: "fasta file of the sequence the VCF was mapped to\n(default: None)"
    args: !SimpleFlagArg
      name: VCF_REFERENCE
  - !Flag
    optional: true
    synonyms:
    - --year-bounds
    description: "specify min or max & min prediction bounds for samples\nwith XX\
      \ in year (default: None)"
    args: !RepeatFlagArg
      name: YEAR_BOUNDS
  - !Flag
    optional: true
    synonyms:
    - --divergence-units
    description: "Units in which sequence divergences is exported.\n(default: mutations-per-site)"
    args: !ChoiceFlagArg
      choices: !!set
        mutations-per-site:
        mutations:
  - !Flag
    optional: true
    synonyms:
    - --seed
    description: 'seed for random number generation (default: None)'
    args: !SimpleFlagArg
      name: SEED
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur refine [-h] [--alignment ALIGNMENT] --tree TREE [--metadata\
    \ FILE]\n                    [--output-tree OUTPUT_TREE]\n                   \
    \ [--output-node-data OUTPUT_NODE_DATA] [--timetree]\n                    [--coalescent\
    \ COALESCENT] [--gen-per-year GEN_PER_YEAR]\n                    [--clock-rate\
    \ CLOCK_RATE] [--clock-std-dev CLOCK_STD_DEV]\n                    [--root ROOT\
    \ [ROOT ...]] [--keep-root] [--covariance]\n                    [--no-covariance]\
    \ [--keep-polytomies]\n                    [--precision {0,1,2,3}] [--date-format\
    \ DATE_FORMAT]\n                    [--date-confidence] [--date-inference {joint,marginal}]\n\
    \                    [--branch-length-inference {auto,joint,marginal,input}]\n\
    \                    [--clock-filter-iqd CLOCK_FILTER_IQD]\n                 \
    \   [--vcf-reference VCF_REFERENCE]\n                    [--year-bounds YEAR_BOUNDS\
    \ [YEAR_BOUNDS ...]]\n                    [--divergence-units {mutations,mutations-per-site}]\n\
    \                    [--seed SEED]\n\nRefine an initial tree using sequence metadata.\n\
    \noptional arguments:\n  -h, --help            show this help message and exit\n\
    \  --alignment ALIGNMENT, -a ALIGNMENT\n                        alignment in fasta\
    \ or VCF format (default: None)\n  --tree TREE, -t TREE  prebuilt Newick (default:\
    \ None)\n  --metadata FILE       sequence metadata, as CSV or TSV (default: None)\n\
    \  --output-tree OUTPUT_TREE\n                        file name to write tree\
    \ to (default: None)\n  --output-node-data OUTPUT_NODE_DATA\n                \
    \        file name to write branch lengths as node data\n                    \
    \    (default: None)\n  --timetree            produce timetree using treetime\
    \ (default: False)\n  --coalescent COALESCENT\n                        coalescent\
    \ time scale in units of inverse clock rate\n                        (float),\
    \ optimize as scalar ('opt'), or skyline\n                        ('skyline')\
    \ (default: None)\n  --gen-per-year GEN_PER_YEAR\n                        number\
    \ of generations per year, relevant for skyline\n                        output('skyline')\
    \ (default: 50)\n  --clock-rate CLOCK_RATE\n                        fixed clock\
    \ rate (default: None)\n  --clock-std-dev CLOCK_STD_DEV\n                    \
    \    standard deviation of the fixed clock_rate estimate\n                   \
    \     (default: None)\n  --root ROOT [ROOT ...]\n                        rooting\
    \ mechanism ('best', least-squares', 'min_dev',\n                        'oldest')\
    \ OR node to root by OR two nodes indicating a\n                        monophyletic\
    \ group to root by. Run treetime -h for\n                        definitions of\
    \ rooting methods. (default: best)\n  --keep-root           do not reroot the\
    \ tree; use it as-is. Overrides\n                        anything specified by\
    \ --root. (default: False)\n  --covariance          Account for covariation when\
    \ estimating rates and/or\n                        rerooting. Use --no-covariance\
    \ to turn off. (default:\n                        True)\n  --no-covariance\n \
    \ --keep-polytomies     Do not attempt to resolve polytomies (default: False)\n\
    \  --precision {0,1,2,3}\n                        precision used by TreeTime to\
    \ determine the number of\n                        grid points that are used for\
    \ the evaluation of the\n                        branch length interpolation objects.\
    \ Values range from\n                        0 (rough) to 3 (ultra fine) and default\
    \ to 'auto'.\n                        (default: None)\n  --date-format DATE_FORMAT\n\
    \                        date format (default: %Y-%m-%d)\n  --date-confidence\
    \     calculate confidence intervals for node dates\n                        (default:\
    \ False)\n  --date-inference {joint,marginal}\n                        assign\
    \ internal nodes to their marginally most likely\n                        dates,\
    \ not jointly most likely (default: joint)\n  --branch-length-inference {auto,joint,marginal,input}\n\
    \                        branch length mode of treetime to use (default: auto)\n\
    \  --clock-filter-iqd CLOCK_FILTER_IQD\n                        clock-filter:\
    \ remove tips that deviate more than n_iqd\n                        interquartile\
    \ ranges from the root-to-tip vs time\n                        regression (default:\
    \ None)\n  --vcf-reference VCF_REFERENCE\n                        fasta file of\
    \ the sequence the VCF was mapped to\n                        (default: None)\n\
    \  --year-bounds YEAR_BOUNDS [YEAR_BOUNDS ...]\n                        specify\
    \ min or max & min prediction bounds for samples\n                        with\
    \ XX in year (default: None)\n  --divergence-units {mutations,mutations-per-site}\n\
    \                        Units in which sequence divergences is exported.\n  \
    \                      (default: mutations-per-site)\n  --seed SEED          \
    \ seed for random number generation (default: None)\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
- !Command
  command:
  - augur
  - filter
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --sequences
    - -s
    description: 'sequences in fasta or VCF format (default: None)'
    args: !SimpleFlagArg
      name: SEQUENCES
  - !Flag
    optional: true
    synonyms:
    - --metadata
    description: 'sequence metadata, as CSV or TSV (default: None)'
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --sequence-index
    description: "sequence composition report generated by augur index.\nIf not provided,\
      \ an index will be created on the fly.\n(default: None)"
    args: !SimpleFlagArg
      name: SEQUENCE_INDEX
  - !Flag
    optional: true
    synonyms:
    - --min-date
    description: "minimal cutoff for date; may be specified as an Augur-\nstyle numeric\
      \ date (with the year as the integer part)\nor YYYY-MM-DD (default: None)"
    args: !SimpleFlagArg
      name: MIN_DATE
  - !Flag
    optional: true
    synonyms:
    - --max-date
    description: "maximal cutoff for date; may be specified as an Augur-\nstyle numeric\
      \ date (with the year as the integer part)\nor YYYY-MM-DD (default: None)"
    args: !SimpleFlagArg
      name: MAX_DATE
  - !Flag
    optional: true
    synonyms:
    - --min-length
    description: 'minimal length of the sequences (default: None)'
    args: !SimpleFlagArg
      name: MIN_LENGTH
  - !Flag
    optional: true
    synonyms:
    - --non-nucleotide
    description: "exclude sequences that contain illegal characters\n(default: False)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --exclude
    description: "file with list of strains that are to be excluded\n(default: None)"
    args: !SimpleFlagArg
      name: EXCLUDE
  - !Flag
    optional: true
    synonyms:
    - --include
    description: "file with list of strains that are to be included\nregardless of\
      \ priorities or subsampling (default:\nNone)"
    args: !SimpleFlagArg
      name: INCLUDE
  - !Flag
    optional: true
    synonyms:
    - --priority
    description: "file with list of priority scores for sequences\n(strain priority)\
      \ (default: None)"
    args: !SimpleFlagArg
      name: PRIORITY
  - !Flag
    optional: true
    synonyms:
    - --sequences-per-group
    description: "subsample to no more than this number of sequences per\ncategory\
      \ (default: None)"
    args: !SimpleFlagArg
      name: SEQUENCES_PER_GROUP
  - !Flag
    optional: true
    synonyms:
    - --subsample-max-sequences
    description: "subsample to no more than this number of sequences\n(default: None)"
    args: !SimpleFlagArg
      name: SUBSAMPLE_MAX_SEQUENCES
  - !Flag
    optional: true
    synonyms:
    - --group-by
    description: "categories with respect to subsample; two virtual\nfields, \"month\"\
      \ and \"year\", are supported if they\ndon't already exist as real fields but\
      \ a \"date\" field\ndoes exist (default: None)"
    args: !RepeatFlagArg
      name: GROUP_BY
  - !Flag
    optional: true
    synonyms:
    - --probabilistic-sampling
    description: "Enable probabilistic sampling during subsampling. This\nis useful\
      \ when there are more groups than requested\nsequences. This option only applies\
      \ when `--subsample-\nmax-sequences` is provided. (default: True)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no-probabilistic-sampling
    - --subsample-seed
    description: "random number generator seed to allow reproducible\nsub-sampling\
      \ (with same input data). Can be number or\nstring. (default: None)"
    args: !SimpleFlagArg
      name: SUBSAMPLE_SEED
  - !Flag
    optional: true
    synonyms:
    - --exclude-where
    description: "Exclude samples matching these conditions. Ex:\n\"host=rat\" or\
      \ \"host!=rat\". Multiple values are\nprocessed as OR (matching any of those\
      \ specified will\nbe excluded), not AND (default: None)"
    args: !RepeatFlagArg
      name: EXCLUDE_WHERE
  - !Flag
    optional: true
    synonyms:
    - --include-where
    description: "Include samples with these values. ex: host=rat.\nMultiple values\
      \ are processed as OR (having any of\nthose specified will be included), not\
      \ AND. This rule\nis applied last and ensures any sequences matching\nthese\
      \ rules will be included. (default: None)"
    args: !RepeatFlagArg
      name: INCLUDE_WHERE
  - !Flag
    optional: true
    synonyms:
    - --exclude-ambiguous-dates-by
    description: "Exclude ambiguous dates by day (e.g., 2020-09-XX),\nmonth (e.g.,\
      \ 2020-XX-XX), year (e.g., 200X-10-01), or\nany date fields. An ambiguous year\
      \ makes the\ncorresponding month and day ambiguous, too, even if\nthose fields\
      \ have unambiguous values (e.g.,\n\"201X-10-01\"). Similarly, an ambiguous month\
      \ makes the\ncorresponding day ambiguous (e.g., \"2010-XX-01\").\n(default:\
      \ None)"
    args: !ChoiceFlagArg
      choices: !!set
        day:
        year:
        month:
        any:
  - !Flag
    optional: true
    synonyms:
    - --query
    description: "Filter samples by attribute. Uses Pandas Dataframe\nquerying, see\
      \ https://pandas.pydata.org/pandas-\ndocs/stable/user_guide/indexing.html#indexing-query\n\
      for syntax. (default: None)"
    args: !SimpleFlagArg
      name: QUERY
  - !Flag
    optional: true
    synonyms:
    - --output
    - -o
    description: "output file (default: None)\n"
    args: !SimpleFlagArg
      name: OUTPUT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: augur filter [-h] --sequences SEQUENCES --metadata FILE\n   \
    \                 [--sequence-index SEQUENCE_INDEX] [--min-date MIN_DATE]\n  \
    \                  [--max-date MAX_DATE] [--min-length MIN_LENGTH]\n         \
    \           [--non-nucleotide] [--exclude EXCLUDE] [--include INCLUDE]\n     \
    \               [--priority PRIORITY]\n                    [--sequences-per-group\
    \ SEQUENCES_PER_GROUP | --subsample-max-sequences SUBSAMPLE_MAX_SEQUENCES]\n \
    \                   [--group-by GROUP_BY [GROUP_BY ...]]\n                   \
    \ [--probabilistic-sampling | --no-probabilistic-sampling]\n                 \
    \   [--subsample-seed SUBSAMPLE_SEED]\n                    [--exclude-where EXCLUDE_WHERE\
    \ [EXCLUDE_WHERE ...]]\n                    [--include-where INCLUDE_WHERE [INCLUDE_WHERE\
    \ ...]]\n                    [--exclude-ambiguous-dates-by {any,day,month,year}]\n\
    \                    [--query QUERY] --output OUTPUT\n\nFilter and subsample a\
    \ sequence set.\n\noptional arguments:\n  -h, --help            show this help\
    \ message and exit\n  --sequences SEQUENCES, -s SEQUENCES\n                  \
    \      sequences in fasta or VCF format (default: None)\n  --metadata FILE   \
    \    sequence metadata, as CSV or TSV (default: None)\n  --sequence-index SEQUENCE_INDEX\n\
    \                        sequence composition report generated by augur index.\n\
    \                        If not provided, an index will be created on the fly.\n\
    \                        (default: None)\n  --min-date MIN_DATE   minimal cutoff\
    \ for date; may be specified as an Augur-\n                        style numeric\
    \ date (with the year as the integer part)\n                        or YYYY-MM-DD\
    \ (default: None)\n  --max-date MAX_DATE   maximal cutoff for date; may be specified\
    \ as an Augur-\n                        style numeric date (with the year as the\
    \ integer part)\n                        or YYYY-MM-DD (default: None)\n  --min-length\
    \ MIN_LENGTH\n                        minimal length of the sequences (default:\
    \ None)\n  --non-nucleotide      exclude sequences that contain illegal characters\n\
    \                        (default: False)\n  --exclude EXCLUDE     file with list\
    \ of strains that are to be excluded\n                        (default: None)\n\
    \  --include INCLUDE     file with list of strains that are to be included\n \
    \                       regardless of priorities or subsampling (default:\n  \
    \                      None)\n  --priority PRIORITY   file with list of priority\
    \ scores for sequences\n                        (strain priority) (default: None)\n\
    \  --sequences-per-group SEQUENCES_PER_GROUP\n                        subsample\
    \ to no more than this number of sequences per\n                        category\
    \ (default: None)\n  --subsample-max-sequences SUBSAMPLE_MAX_SEQUENCES\n     \
    \                   subsample to no more than this number of sequences\n     \
    \                   (default: None)\n  --group-by GROUP_BY [GROUP_BY ...]\n  \
    \                      categories with respect to subsample; two virtual\n   \
    \                     fields, \"month\" and \"year\", are supported if they\n\
    \                        don't already exist as real fields but a \"date\" field\n\
    \                        does exist (default: None)\n  --probabilistic-sampling\n\
    \                        Enable probabilistic sampling during subsampling. This\n\
    \                        is useful when there are more groups than requested\n\
    \                        sequences. This option only applies when `--subsample-\n\
    \                        max-sequences` is provided. (default: True)\n  --no-probabilistic-sampling\n\
    \  --subsample-seed SUBSAMPLE_SEED\n                        random number generator\
    \ seed to allow reproducible\n                        sub-sampling (with same\
    \ input data). Can be number or\n                        string. (default: None)\n\
    \  --exclude-where EXCLUDE_WHERE [EXCLUDE_WHERE ...]\n                       \
    \ Exclude samples matching these conditions. Ex:\n                        \"host=rat\"\
    \ or \"host!=rat\". Multiple values are\n                        processed as\
    \ OR (matching any of those specified will\n                        be excluded),\
    \ not AND (default: None)\n  --include-where INCLUDE_WHERE [INCLUDE_WHERE ...]\n\
    \                        Include samples with these values. ex: host=rat.\n  \
    \                      Multiple values are processed as OR (having any of\n  \
    \                      those specified will be included), not AND. This rule\n\
    \                        is applied last and ensures any sequences matching\n\
    \                        these rules will be included. (default: None)\n  --exclude-ambiguous-dates-by\
    \ {any,day,month,year}\n                        Exclude ambiguous dates by day\
    \ (e.g., 2020-09-XX),\n                        month (e.g., 2020-XX-XX), year\
    \ (e.g., 200X-10-01), or\n                        any date fields. An ambiguous\
    \ year makes the\n                        corresponding month and day ambiguous,\
    \ too, even if\n                        those fields have unambiguous values (e.g.,\n\
    \                        \"201X-10-01\"). Similarly, an ambiguous month makes\
    \ the\n                        corresponding day ambiguous (e.g., \"2010-XX-01\"\
    ).\n                        (default: None)\n  --query QUERY         Filter samples\
    \ by attribute. Uses Pandas Dataframe\n                        querying, see https://pandas.pydata.org/pandas-\n\
    \                        docs/stable/user_guide/indexing.html#indexing-query\n\
    \                        for syntax. (default: None)\n  --output OUTPUT, -o OUTPUT\n\
    \                        output file (default: None)\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/augur:11.1.2--py_1
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: augur [-h]\n             {parse,index,filter,mask,align,tree,refine,ancestral,translate,reconstruct-sequences,clades,traits,sequence-traits,lbi,distance,titers,frequencies,export,validate,version,import}\n\
  \             ...\n\nAugur: A bioinformatics toolkit for phylogenetic analysis.\n\
  \npositional arguments:\n  {parse,index,filter,mask,align,tree,refine,ancestral,translate,reconstruct-sequences,clades,traits,sequence-traits,lbi,distance,titers,frequencies,export,validate,version,import}\n\
  \    parse               Parse delimited fields from FASTA sequence names into\n\
  \                        a TSV and FASTA file.\n    index               Count occurrence\
  \ of bases in a set of sequences.\n    filter              Filter and subsample\
  \ a sequence set.\n    mask                Mask specified sites from a VCF or FASTA\
  \ file.\n    align               Align multiple sequences from FASTA.\n    tree\
  \                Build a tree using a variety of methods.\n    refine          \
  \    Refine an initial tree using sequence metadata.\n    ancestral           Infer\
  \ ancestral sequences based on a tree.\n    translate           Translate gene regions\
  \ from nucleotides to amino\n                        acids.\n    reconstruct-sequences\n\
  \                        Reconstruct alignments from mutations inferred on the\n\
  \                        tree\n    clades              Assign clades to nodes in\
  \ a tree based on amino-acid\n                        or nucleotide signatures.\n\
  \    traits              Infer ancestral traits based on a tree.\n    sequence-traits\
  \     Annotate sequences based on amino-acid or nucleotide\n                   \
  \     signatures.\n    lbi                 Calculate LBI for a given tree and one\
  \ or more sets of\n                        parameters.\n    distance           \
  \ Calculate the distance between sequences across entire\n                     \
  \   genes or at a predefined subset of sites.\n    titers              Annotate\
  \ a tree with actual and inferred titer\n                        measurements.\n\
  \    frequencies         infer frequencies of mutations or clades\n    export  \
  \            Export JSON files suitable for visualization with\n               \
  \         auspice.\n    validate            Validate files related to augur consumption\
  \ or export.\n    version             Print the version of augur.\n    import  \
  \            Import analyses into augur pipeline from other systems\n\noptional\
  \ arguments:\n  -h, --help            show this help message and exit\n"
generated_using: *id002
docker_image: quay.io/biocontainers/augur:11.1.2--py_1
