!Command
command:
- runCA-overlapStoreBuild
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -d
  description: path to location where store should be created
  args: !SimpleFlagArg
    name: wrk
- !Flag
  optional: true
  synonyms:
  - -p
  description: prefix of store
  args: !SimpleFlagArg
    name: asm
- !Flag
  optional: true
  synonyms:
  - -t
  description: 'type of store: obt dup mer ovl'
  args: !SimpleFlagArg
    name: typ
- !Flag
  optional: true
  synonyms:
  - -g
  description: path to gkpStore
  args: !SimpleFlagArg
    name: gkp
- !Flag
  optional: true
  synonyms:
  - -i
  description: path to input files
  args: !SimpleFlagArg
    name: inp
- !Flag
  optional: true
  synonyms:
  - -jobs
  description: create 'j' sorting jobs
  args: !SimpleFlagArg
    name: j
- !Flag
  optional: true
  synonyms:
  - -memory
  description: request 'm' gigabytes memory from SGE for sorting
  args: !SimpleFlagArg
    name: m
- !Flag
  optional: true
  synonyms:
  - -deleteearly
  description: delete intermediate files as soon as possible (unsafe)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -nodelete
  description: do not delete intermediate files
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -maxerror
  description: discard overlaps with more than 'e' fraction error (no filtering by
    default)
  args: !SimpleFlagArg
    name: e
- !Flag
  optional: true
  synonyms:
  - -submit
  description: automatically submit to SGE
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "ERROR:  Work directory '' (-d option) not supplied or not found.\nERROR:\
  \  Assembly prefix (-p option) not supplied.\nERROR:  Store type (-t option) not\
  \ supplied.\nERROR:  Store type (-t option) not valid - must be 'obt', 'dup', 'mer'\
  \ or 'ovl'.\nERROR:  Gatekeeper path '' (-g option) not supplied or not found.\n\
  ERROR:  Input path '' (-i option) not supplied or not found.\n\nusage: /usr/local/bin/runCA-overlapStoreBuild\
  \ -d output-directory -p prefix -t type -g gkpStore -i input-directory [options]]\n\
  \nMandatory parameters:\n  -d wrk          path to location where store should be\
  \ created\n  -p asm          prefix of store\n  -t typ          type of store: obt\
  \ dup mer ovl\n  -g gkp          path to gkpStore\n  -i inp          path to input\
  \ files\n\nOptions:\n  -jobs j         create 'j' sorting jobs\n  -memory m    \
  \   request 'm' gigabytes memory from SGE for sorting\n  -deleteearly    delete\
  \ intermediate files as soon as possible (unsafe)\n  -nodelete       do not delete\
  \ intermediate files\n  -maxerror e     discard overlaps with more than 'e' fraction\
  \ error (no filtering by default)\n  -submit         automatically submit to SGE\n\
  \nThis will create an overlap store in three phases.\n\nThe first phase will read\
  \ overlapper outputs found in the '-i inp' directory and write them to the\nstore\
  \ directory.  The store directory is in 'wrk/asm.typStore'.  Overlaps are organized\
  \ into\n'buckets' with 'slices'.  A bucket corresponds to a single overlapper output,\
  \ while a slice is a\nrange of overlaps (based on fragment ID).  There will be one\
  \ job for each overlap output file.\n\nThe '-jobs j' parameter tells how many slices\
  \ to make.  More slices means more sort jobs, but each\njob needs less memory. \
  \ The maximum number of jobs is dictated by the operating system, as the\nnumber\
  \ of open files per process.\n\nThe second phase will read a single slice (from\
  \ multiple buckets) into memory, sort them completely,\nand write the overlaps into\
  \ the store.  The '-memory m' parameter does NOT control how much memory\nis used,\
  \ but ONLY tells SGE how much memory each job requires.  There is NO control over\
  \ how much\nmemory is needed, however, if a job needs more memory than requested,\
  \ it will exit doing nothing.\n\nThe third phase will check that all sort jobs in\
  \ the second phase finished successfully, and create\na master index for the store.\
  \  It is sequential, low memory and generally quick.\n\nExample:\n\n/usr/local/bin/runCA-overlapStoreBuild\
  \ \\\n  -d /work/assembly/godzilla-v1 \\\n  -p godzilla \\\n  -t ovl \\\n  -g /work/assembly/godzilla-v1/godzilla.gkpStore\
  \ \\\n  -i /scratch/godzillaovl/ \\\n  -jobs 100\n\nThis will load overlaps in /scratch/godzillaovl/001,\
  \ /002, /003, etc into\nstore /work/assembly/godzilla-v1/godzilla.ovlStore.\n\n"
generated_using: []
docker_image:
