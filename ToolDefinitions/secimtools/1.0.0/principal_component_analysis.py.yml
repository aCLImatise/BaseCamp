!Command
command:
- principal_component_analysis.py
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -i
  - --input
  description: Input dataset in wide format.
  args: !SimpleFlagArg
    name: INPUT
- !Flag
  optional: true
  synonyms:
  - -d
  - --design
  description: Design file.
  args: !SimpleFlagArg
    name: DESIGN
- !Flag
  optional: true
  synonyms:
  - -id
  - --ID
  description: Name of the column with unique identifiers.
  args: !SimpleFlagArg
    name: UNIQID
- !Flag
  optional: true
  synonyms:
  - -g
  - --group
  description: Name of the column with groups.
  args: !SimpleFlagArg
    name: GROUP
- !Flag
  optional: true
  synonyms:
  - -l
  - --levels
  description: Different groups to sort by separeted by commas.
  args: !SimpleFlagArg
    name: LEVELS
- !Flag
  optional: true
  synonyms:
  - -lo
  - --load_out
  description: Name of output file to store loadings. TSV format.
  args: !SimpleFlagArg
    name: LOAD_OUT
- !Flag
  optional: true
  synonyms:
  - -so
  - --score_out
  description: Name of output file to store scores. TSV format.
  args: !SimpleFlagArg
    name: SCORE_OUT
- !Flag
  optional: true
  synonyms:
  - -su
  - --summary_out
  description: "Name of output file to store summaries of the\ncomponents. TSV format."
  args: !SimpleFlagArg
    name: SUMMARY_OUT
- !Flag
  optional: true
  synonyms:
  - -f
  - --figure
  description: "Name of output file to storescatter plots for 3\nprincipal components."
  args: !SimpleFlagArg
    name: FIGURE
- !Flag
  optional: true
  synonyms:
  - -pal
  - --palette
  description: Name of the palette to use.
  args: !SimpleFlagArg
    name: PALETTE
- !Flag
  optional: true
  synonyms:
  - -col
  - --color
  description: "Name of a valid color scheme on the selected palette\n"
  args: !SimpleFlagArg
    name: COLOR
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: principal_component_analysis.py [-h] -i INPUT -d DESIGN -id UNIQID\n\
  \                                       [-g GROUP] [-l LEVELS] -lo LOAD_OUT -so\n\
  \                                       SCORE_OUT -su SUMMARY_OUT -f FIGURE\n  \
  \                                     [-pal PALETTE] [-col COLOR]\n\n  \n    This\
  \ script runs a Principal Component Analysis (PCA)\n\n    \n\noptional arguments:\n\
  \  -h, --help            show this help message and exit\n\nStandard input:\n  Standard\
  \ input for SECIM tools.\n\n  -i INPUT, --input INPUT\n                        Input\
  \ dataset in wide format.\n  -d DESIGN, --design DESIGN\n                      \
  \  Design file.\n  -id UNIQID, --ID UNIQID\n                        Name of the\
  \ column with unique identifiers.\n  -g GROUP, --group GROUP\n                 \
  \       Name of the column with groups.\n  -l LEVELS, --levels LEVELS\n        \
  \                Different groups to sort by separeted by commas.\n\nRequired output:\n\
  \  -lo LOAD_OUT, --load_out LOAD_OUT\n                        Name of output file\
  \ to store loadings. TSV format.\n  -so SCORE_OUT, --score_out SCORE_OUT\n     \
  \                   Name of output file to store scores. TSV format.\n  -su SUMMARY_OUT,\
  \ --summary_out SUMMARY_OUT\n                        Name of output file to store\
  \ summaries of the\n                        components. TSV format.\n  -f FIGURE,\
  \ --figure FIGURE\n                        Name of output file to storescatter plots\
  \ for 3\n                        principal components.\n\nPlot options:\n  -pal\
  \ PALETTE, --palette PALETTE\n                        Name of the palette to use.\n\
  \  -col COLOR, --color COLOR\n                        Name of a valid color scheme\
  \ on the selected palette\n"
generated_using:
- --help
docker_image:
