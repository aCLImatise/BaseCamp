&id003 !Command
command:
- h5import
- GZIP
positional:
- !Positional
  description: ''
  position: 0
  name: h5import
  optional: false
- !Positional
  description: ''
  position: 1
  name: elp
  optional: true
named: []
parent: &id001 !Command
  command:
  - h5import
  positional: []
  named:
  - !Flag
    description: "[config] <configfile>:\nEvery input file should be associated with\
      \ a\nconfiguration file and this is done by the -c option.\n<configfile> is\
      \ the name of the configuration file.\n(See Section \"CONFIGURATION FILE\")"
    synonyms:
    - -c
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "[utfile] <outfile>:\nName of the HDF5 output file. Data from one\
      \ or more\ninput files are stored as one or more data sets in\n<outfile>. The\
      \ output file may be an existing file or\nit maybe new in which case it will\
      \ be created."
    synonyms:
    - -o
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: any dimension implies UNLIMITED
    synonyms:
    - '-1'
    args: !SimpleFlagArg
      name: for
    optional: true
  parent:
  subcommands:
  - !Command
    command:
    - h5import
    - LE
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: &id002
    - --help
  - !Command
    command:
    - h5import
    - MIPS
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - INPUT-SIZE
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - COMPRESSION-PARAM
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - STD
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - *id003
  - !Command
    command:
    - h5import
    - OUTPUT-CLASS
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - UNIX
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - MAXIMUM-DIMENSIONS
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - CHUNKED-DIMENSION-SIZES
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - INTEL
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - compression.
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - forms.
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - OUTPUT-ARCHITECTURE
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - PATH
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - line.
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  - !Command
    command:
    - h5import
    - RANK
    positional:
    - !Positional
      description: ''
      position: 0
      name: h5import
      optional: false
    - !Positional
      description: ''
      position: 1
      name: elp
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
      \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
    generated_using: *id002
  usage: []
  help_flag: !Flag
    description: "[elp]:\nPrints this summary of usage, and exits."
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Name:\n\n\th5import\n\n\t  TOOL NAME:\n\t   h5import\n\t   SYNTAX:\n\
    \t   h5import -h[elp], OR\n\t   h5import <infile> -c[onfig] <configfile> [<infile>\
    \ -c[config] <configfile>...]\t\t\t\t      -o[utfile] <outfile>\n\n\t   PURPOSE:\n\
    \t   To convert data stored in one or more ASCII or binary files\n\t  into one\
    \ or more datasets (in accordance with the \n\t  user-specified type and storage\
    \ properties) in an existing \n\t  or new HDF5 file.\n\n\t   DESCRIPTION:\n\t\
    \  The primary objective of the utility is to convert floating\n\t  point or integer\
    \ data stored in ASCII text or binary form \n\t  into a data-set according to\
    \ the type and storage properties\n\t  specified by the user. The utility can\
    \ also accept ASCII\n\t  text files and store the contents in a compact form as\
    \ an\n\t  array of one-dimensional strings.\n\n\t  The input data to be written\
    \ as a data-set can be provided\n\t  to the utility in one of the following forms:\n\
    \t  1. ASCII text file with numeric data (floating point or \n\t  integer data).\
    \ \n\t  2. Binary file with native floating point data (32-bit or \n\t  64-bit)\
    \ \n\t  3. Binary file with native integer (signed or unsigned)\n\t  data (8-bit\
    \ or 16-bit or 32-bit or 64-bit). \n\t  4. ASCII text file containing strings\
    \ (text data).\n\t    \n\t  Every input file is associated with a configuration\
    \ file \n\t  also provided as an input to the utility. (See Section \n\t  \"CONFIGURATION\
    \ FILE\" to know how it is to be organized).\n\t  The class, size and dimensions\
    \ of the input data is \n\t  specified in this configuration file. A point to\
    \ note is\n\t  that the floating point data in the ASCII text file may be\n\t\
    \  organized in the fixed floating form (for example 323.56)\n\t  or in a scientific\
    \ notation (for example 3.23E+02). A \n\t  different input-class specification\
    \ is to be used for both\n\t  forms.\n\n\t  The utility extracts the input data\
    \ from the input file \n\t  according to the specified parameters and saves it\
    \ into \n\t  an H5 dataset. \n\n\t  The user can specify output type and storage\
    \ properties in \n\t  the configuration file. The user is required to specify\
    \ the \n\t  path of the dataset. If the groups in the path leading to \n\t  the\
    \ data-set do not exist, the groups will be created by the\n\t  utility. If no\
    \ group is specified, the dataset will be\n\t  created under the root group.\n\
    \n\t  In addition to the name, the user is also required to \n\t  provide the\
    \ class and size of output data to be written to \n\t  the dataset and may optionally\
    \ specify the output-architecture,\n\t  and the output-byte-order. If output-architecture\
    \ is not \n\t  specified the default is NATIVE. Output-byte-orders are fixed\n\
    \t  for some architectures and may be specified only if output-\n\t  architecture\
    \ is IEEE, UNIX or STD.\n\n\t   Also, layout and other storage properties such\
    \ as \n\t  compression, external storage and extendible data-sets may be\n\t \
    \ optionally specified.  The layout and storage properties \n\t  denote how raw\
    \ data is to be organized on the disk. If these \n\t  options are not specified\
    \ the default is Contiguous layout \n\t  and storage.\n\n\t  The dataset can be\
    \ organized in any of the following ways:\n\t  1. Contiguous.\n\t  2. Chunked.\n\
    \t  3. External Storage File    (has to be contiguous)\n\t  4. Extendible data\
    \ sets     (has to be chunked)\n\t  5. Compressed.        (has to be chunked)\n\
    \t  6. Compressed & Extendible  (has to be chunked)\n\n\t  If the user wants to\
    \ store raw data in a non-HDF file then \n\t  the external storage file option\
    \ is to be used and the name \n\t  of the file is to be specified. \n\n\t  If\
    \ the user wants the dimensions of the data-set to be\n\t  unlimited, the extendible\
    \ data set option can be chosen. \n\n\t  The user may also specify the type of\
    \ compression and the \n\t  level to which the data set must be compresses by\
    \ setting \n\t  the compressed option.\n\n\t   SYNOPSIS:\n\t  h5import -h[elp],\
    \ OR\n\t  h5import <infile> -c[onfig] <configfile>                     [<infile>\
    \ -c[config] <confile2>...] -o[utfile] <outfile>\n\n\t   -h[elp]:\n\t        \
    \   Prints this summary of usage, and exits.\n\n\t   <infile(s)>:\n\t        \
    \   Name of the Input file(s), containing a \n\t    single n-dimensional floating\
    \ point or integer array \n\t    in either ASCII text, native floating point(32-bit\
    \ \n\t    or 64-bit) or native integer(8-bit or 16-bit or \n\t    32-bit or 64-bit).\
    \ Data to be specified in the order\n\t    of fastest changing dimensions first.\n\
    \n\t  -c[config] <configfile>:\n\t    Every input file should be associated with\
    \ a \n\t    configuration file and this is done by the -c option.\n\t    <configfile>\
    \ is the name of the configuration file.\n\t    (See Section \"CONFIGURATION FILE\"\
    )\n\n\t   -o[utfile] <outfile>:\n\t           Name of the HDF5 output file. Data\
    \ from one or more \n\t    input files are stored as one or more data sets in\
    \ \n\t    <outfile>. The output file may be an existing file or \n\t    it maybe\
    \ new in which case it will be created.\n\n\n\t   CONFIGURATION FILE:\n\t  The\
    \ configuration file is an ASCII text file and must be \n\t  the ddl formatted\
    \ file (without data values) produced by h5dump \n\t  when used with the options\
    \ '-o outfilename -b' of a single dataset (-d) \n\t  OR organized as \"CONFIG-KEYWORD\
    \ VALUE\" pairs, one pair on each \n\t  line.\n\n\t   The configuration file may\
    \ have the following keywords each \n\t   followed by an acceptable value.\n\n\
    \t  Required KEYWORDS:\n\t    PATH\n\t    INPUT-CLASS\n\t    INPUT-SIZE\n\t  \
    \  INPUT-BYTE-ORDER\n\t    RANK\n\t    DIMENSION-SIZES\n\t    OUTPUT-CLASS\n\t\
    \    OUTPUT-SIZE\n\n\t  Optional KEYWORDS:\n\t    OUTPUT-ARCHITECTURE\n\t    OUTPUT-BYTE-ORDER\n\
    \t    CHUNKED-DIMENSION-SIZES\n\t    COMPRESSION-TYPE\n\t    COMPRESSION-PARAM\n\
    \t    EXTERNAL-STORAGE\n\t    MAXIMUM-DIMENSIONS\n\n\n\t    Values for keywords:\n\
    \t    PATH:\n\t      Strings separated by spaces to represent\n\t      the path\
    \ of the data-set. If the groups in\n\t      the path do not exist, they will\
    \ be created. \n\t      For example,\n\t        PATH grp1/grp2/dataset1\n\t  \
    \      PATH: keyword\n\t        grp1: group under the root. If\n\t           \
    \   non-existent will be created.\n\t        grp2: group under grp1. If \n\t \
    \             non-existent will be created \n\t              under grp1.\n\t \
    \       dataset1: the name of the data-set \n\t            to be created.\n\n\t\
    \               INPUT-CLASS:\n\t      String denoting the type of input data.\n\
    \t      (\"TEXTIN\", \"TEXTFP\", \"FP\", \"IN\", \n\t      \"STR\", \"TEXTUIN\"\
    , \"UIN\"). \n\t      INPUT-CLASS \"TEXTIN\" denotes an ASCII text \n\t      file\
    \ with signed integer data in ASCII form,\n\t      INPUT-CLASS \"TEXTUIN\" denotes\
    \ an ASCII text \n\t      file with unsigned integer data in ASCII form,\n\t \
    \     \"TEXTFP\" denotes an ASCII text file containing\n\t      floating point\
    \ data in the fixed notation\n\t      (325.34),\n\t      \"FP\" denotes a floating\
    \ point binary file,\n\t      \"IN\" denotes a signed integer binary file,\n\t\
    \      \"UIN\" denotes an unsigned integer binary file,\n\t       & \"STR\" denotes\
    \ an ASCII text file the \n\t      contents of which should be stored as an 1-D\
    \ \n\t      array of strings.\n\t      If INPUT-CLASS is \"STR\", then RANK, \n\
    \t      DIMENSION-SIZES, OUTPUT-CLASS, OUTPUT-SIZE, \n\t      OUTPUT-ARCHITECTURE\
    \ and OUTPUT-BYTE-ORDER \n\t      will be ignored.\n\n\n\t    INPUT-SIZE:\n\t\
    \      Integer denoting the size of the input data \n\t      (8, 16, 32, 64).\
    \ \n\n\t      For floating point,\n\t      INPUT-SIZE can be 32 or 64.\n\t   \
    \   For integers (signed and unsigned)\n\t      INPUT-SIZE can be 8, 16, 32 or\
    \ 64.\n\n\t    RANK:\n\t      Integer denoting the number of dimensions.\n\n\t\
    \    DIMENSION-SIZES:\n\t            Integers separated by spaces to denote the\
    \ \n\t      dimension sizes for the no. of dimensions \n\t      determined by\
    \ rank.\n\n\t    OUTPUT-CLASS:\n\t      String dentoting data type of the dataset\
    \ to \n\t      be written (\"IN\",\"FP\", \"UIN\")\n\n\t    OUTPUT-SIZE:\n\t \
    \     Integer denoting the size of the data in the \n\t      output dataset to\
    \ be written.\n\t      If OUTPUT-CLASS is \"FP\", OUTPUT-SIZE can be \n\t    \
    \  32 or 64.\n\t      If OUTPUT-CLASS is \"IN\" or \"UIN\", OUTPUT-SIZE\n\t  \
    \    can be 8, 16, 32 or 64.\n\n\t    OUTPUT-ARCHITECTURE:\n\t      STRING denoting\
    \ the type of output \n\t      architecture. Can accept the following values\n\
    \t      STD\n\t      IEEE\n\t      INTEL\n\t      CRAY\n\t      MIPS\n\t     \
    \ ALPHA\n\t      NATIVE (default)\n\t      UNIX\n\n\t    OUTPUT-BYTE-ORDER:\n\t\
    \      String denoting the output-byte-order. Ignored\n\t      if the OUTPUT-ARCHITECTURE\
    \ is not specified or\n\t      if it is IEEE, UNIX or STD. Can accept the \n\t\
    \      following values.\n\t      BE (default)\n\t      LE\n\n\t    CHUNKED-DIMENSION-SIZES:\n\
    \t      Integers separated by spaces to denote the \n\t      dimension sizes of\
    \ the chunk for the no. of \n\t      dimensions determined by rank. Required field\n\
    \t      to denote that the dataset will be stored with\n\t      chunked storage.\
    \ If this field is absent the\n\t      dataset will be stored with contiguous\
    \ storage.\n\n\t    COMPRESSION-TYPE:\n\t      String denoting the type of compression\
    \ to be\n\t      used with the chunked storage. Requires the\n\t      CHUNKED-DIMENSION-SIZES\
    \ to be specified. The only \n\t      currently supported compression method is\
    \ GZIP. \n\t      Will accept the following value\n\t      GZIP\n\n\t    COMPRESSION-PARAM:\n\
    \t      Integer used to denote compression level and \n\t      this option is\
    \ to be always specified when \n\t      the COMPRESSION-TYPE option is specified.\
    \ The\n\t      values are applicable only to GZIP \n\t      compression.\n\t \
    \     Value 1-9: The level of Compression. \n\t        1 will result in the fastest\
    \ \n\t        compression while 9 will result in \n\t        the best compression\
    \ ratio. The default\n\t        level of compression is 6.\n\n\t    EXTERNAL-STORAGE:\n\
    \t      String to denote the name of the non-HDF5 file \n\t      to store data\
    \ to. Cannot be used if CHUNKED-\n\t      DIMENSIONS or COMPRESSION-TYPE or EXTENDIBLE-\n\
    \t      DATASET is specified.\n\t      Value <external-filename>: the name of\
    \ the \n\t      external file as a string to be used.\n\n\t    MAXIMUM-DIMENSIONS:\n\
    \t      Integers separated by spaces to denote the \n\t      maximum dimension\
    \ sizes of all the \n\t      dimensions determined by rank. Requires the\n\t \
    \     CHUNKED-DIMENSION-SIZES to be specified. A value of \n\t      -1 for any\
    \ dimension implies UNLIMITED \n\t      DIMENSION size for that particular dimension.\n\
    \n\t   EXAMPLES:\n\t  1. Configuration File may look like:\n\n\t    PATH work\
    \ h5 pkamat First-set\n\t    INPUT-CLASS TEXTFP\n\t    RANK 3\n\t    DIMENSION-SIZES\
    \ 5 2 4\n\t    OUTPUT-CLASS FP\n\t    OUTPUT-SIZE 64\n\t    OUTPUT-ARCHITECTURE\
    \ IEEE\n\t    OUTPUT-BYTE-ORDER LE\n\t      CHUNKED-DIMENSION-SIZES 2 2 2 \n\n\
    \t  The above configuration will accept a floating point array \n\t  (5 x 2 x\
    \ 4)  in an ASCII file with the rank and dimension sizes \n\t  specified and will\
    \ save it in a chunked data-set (of pattern \n\t  2 X 2 X 2) of 64-bit floating\
    \ point in the little-endian order \n\t  and IEEE architecture. The dataset will\
    \ be stored at\n\t  \"/work/h5/pkamat/First-set\"\n\n\t  2. Another configuration\
    \ could be:\n\n\t    PATH Second-set\n\t    INPUT-CLASS IN  \n\t    RANK 5\n\t\
    \    DIMENSION-SIZES 6 3 5 2 4\n\t    OUTPUT-CLASS IN\n\t    OUTPUT-SIZE 32\n\t\
    \      CHUNKED-DIMENSION-SIZES 2 2 2 2 2\n\t    EXTENDIBLE-DATASET 1 3 \n\t  \
    \  COMPRESSION-TYPE GZIP\n\t    COMPRESSION-PARAM 7\n\n\n\t  The above configuration\
    \ will accept an integer array \n\t  (6 X 3 X 5 x 2 x 4)  in a binary file with\
    \ the rank and \n\t  dimension sizes specified and will save it in a chunked data-set\n\
    \t  (of pattern 2 X 2 X 2 X 2 X 2) of 32-bit floating point in \n\t  native format\
    \ (as output-architecture is not specified). The \n\t  first and the third dimension\
    \ will be defined as unlimited. The \n\t  data-set will be compressed using GZIP\
    \ and a compression level \n\t  of 7.\n\t  The dataset will be stored at \"/Second-set\"\
    \n\n"
  generated_using:
  - -h
subcommands: []
usage: []
help_flag: !Flag
  description: ''
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "\nUsage:\th5import -h[elp], OR\n\th5import <infile> -c[onfig] <configfile>\
  \   [<infile> -c[config] <configfile>...] -o[utfile] <outfile> \n\n"
generated_using: *id002
