!Command
command: &id001
- gqt
positional: []
named: []
parent:
subcommands:
- !Command
  command: &id002
  - gqt
  - calpha
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - -d
    description: \
    args: !SimpleFlagArg
      name: ped database file
  - !Flag
    optional: true
    synonyms:
    - -t
    description: direcory name for remote files (default ./)
    args: !SimpleFlagArg
      name: tmp
  - !Flag
    optional: true
    synonyms:
    - -f
    description: (requried for pca-shared)\
    args: !SimpleFlagArg
      name: label db field name
  - !Flag
    optional: true
    synonyms:
    - -l
    description: (requried for pca-shared)\
    args: !SimpleFlagArg
      name: label output file
  - !Flag
    optional: true
    synonyms:
    - -i
    description: ''
    args: !SimpleFlagArg
      name: gqt file
  parent: &id012 !Command
    command: *id001
    positional: []
    named: []
    parent:
    subcommands:
    - !Command
      command: *id002
      positional: []
      named:
      - !Flag
        optional: true
        synonyms:
        - -t
        description: direcory name for remote files (default ./)
        args: !SimpleFlagArg
          name: tmp
      - !Flag
        optional: true
        synonyms:
        - -f
        description: (requried for pca-shared)\
        args: !SimpleFlagArg
          name: label db field name
      - !Flag
        optional: true
        synonyms:
        - -l
        description: (requried for pca-shared)\
        args: !SimpleFlagArg
          name: label output file
      - !Flag
        optional: true
        synonyms:
        - -i
        description: ''
        args: !SimpleFlagArg
          name: gqt file
      parent: &id011 !Command
        command: *id001
        positional: []
        named: []
        parent:
        subcommands:
        - !Command
          command: *id002
          positional: []
          named:
          - !Flag
            optional: true
            synonyms:
            - -t
            description: direcory name for remote files (default ./)
            args: !SimpleFlagArg
              name: tmp
          - !Flag
            optional: true
            synonyms:
            - -f
            description: (requried for pca-shared)\
            args: !SimpleFlagArg
              name: label db field name
          - !Flag
            optional: true
            synonyms:
            - -l
            description: (requried for pca-shared)\
            args: !SimpleFlagArg
              name: label output file
          - !Flag
            optional: true
            synonyms:
            - -i
            description: ''
            args: !SimpleFlagArg
              name: gqt file
          parent: &id010 !Command
            command: *id001
            positional: []
            named: []
            parent:
            subcommands:
            - !Command
              command: *id002
              positional: []
              named:
              - !Flag
                optional: true
                synonyms:
                - -t
                description: direcory name for remote files (default ./)
                args: !SimpleFlagArg
                  name: tmp
              - !Flag
                optional: true
                synonyms:
                - -f
                description: (requried for pca-shared)\
                args: !SimpleFlagArg
                  name: label db field name
              - !Flag
                optional: true
                synonyms:
                - -l
                description: (requried for pca-shared)\
                args: !SimpleFlagArg
                  name: label output file
              - !Flag
                optional: true
                synonyms:
                - -i
                description: ''
                args: !SimpleFlagArg
                  name: gqt file
              parent: &id009 !Command
                command: *id001
                positional: []
                named: []
                parent:
                subcommands:
                - !Command
                  command: *id002
                  positional: []
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -t
                    description: direcory name for remote files (default ./)
                    args: !SimpleFlagArg
                      name: tmp
                  - !Flag
                    optional: true
                    synonyms:
                    - -f
                    description: (requried for pca-shared)\
                    args: !SimpleFlagArg
                      name: label db field name
                  - !Flag
                    optional: true
                    synonyms:
                    - -l
                    description: (requried for pca-shared)\
                    args: !SimpleFlagArg
                      name: label output file
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    description: ''
                    args: !SimpleFlagArg
                      name: gqt file
                  parent: &id003 !Command
                    command: *id001
                    positional: []
                    named: []
                    parent:
                    subcommands:
                    - !Command
                      command: *id002
                      positional: []
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        description: \
                        args: !SimpleFlagArg
                          name: ped database file
                      - !Flag
                        optional: true
                        synonyms:
                        - -t
                        description: direcory name for remote files (default ./)
                        args: !SimpleFlagArg
                          name: tmp
                      - !Flag
                        optional: true
                        synonyms:
                        - -f
                        description: (requried for pca-shared)\
                        args: !SimpleFlagArg
                          name: label db field name
                      - !Flag
                        optional: true
                        synonyms:
                        - -l
                        description: (requried for pca-shared)\
                        args: !SimpleFlagArg
                          name: label output file
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        description: ''
                        args: !SimpleFlagArg
                          name: gqt file
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag:
                      usage_flag:
                      version_flag:
                      help_text: "calpha: invalid option -- '-'\nUnknown option `--'.\n\
                        gqt 1.1.3\nusage:   gqt calpha -i <gqt file> \\\n        \
                        \           -d <ped database file> \\\n                  \
                        \ -t tmp direcory name for remote files (default ./)\n   \
                        \                -f <label db field name> (requried for pca-shared)\\\
                        \n                   -l <label output file> (requried for\
                        \ pca-shared)\\\n                   -p <population query 1>\
                        \ \\\n                   -p <population query 2> \\\n    \
                        \               ... \\\n                   -p <population\
                        \ query N> \n\nEach population query defines one subpopulation.\n\
                        For example, to find compare the GBR and YRI subpopulations:\n\
                        \t-p \"Population = 'GBR'\"\n\t-p \"Population = 'YRI'\"\n\
                        \nPopulation queries are based on the PED file that is associated\
                        \ with the\ngenotypes, and any column in that PED file can\
                        \ be part of the query.  For\nexample, a PED file that includes\
                        \ the \"Paternal_ID\" and \"Gender\" fields\n(where male =\
                        \ 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID\
                        \ = 'NA12878' AND Gender = 2\"\n\nNOTE: gst and fst assume\
                        \ that variants are biallelic.  If your data\ncontains multiallelic\
                        \ sites, we recommend decomposing your VCF \n(see A. Tan,\
                        \ Bioinformatics 2015) prior to indexing.\n"
                      generated_using: &id004
                      - --help
                      docker_image:
                    - !Command
                      command: &id005
                      - gqt
                      - fst
                      positional: []
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        description: \
                        args: !SimpleFlagArg
                          name: ped database file
                      - !Flag
                        optional: true
                        synonyms:
                        - -t
                        description: direcory name for remote files (default ./)
                        args: !SimpleFlagArg
                          name: tmp
                      - !Flag
                        optional: true
                        synonyms:
                        - -f
                        description: (requried for pca-shared)\
                        args: !SimpleFlagArg
                          name: label db field name
                      - !Flag
                        optional: true
                        synonyms:
                        - -l
                        description: (requried for pca-shared)\
                        args: !SimpleFlagArg
                          name: label output file
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        description: ''
                        args: !SimpleFlagArg
                          name: gqt file
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag:
                      usage_flag:
                      version_flag:
                      help_text: "fst: invalid option -- '-'\nUnknown option `--'.\n\
                        gqt 1.1.3\nusage:   gqt fst -i <gqt file> \\\n           \
                        \        -d <ped database file> \\\n                   -t\
                        \ tmp direcory name for remote files (default ./)\n      \
                        \             -f <label db field name> (requried for pca-shared)\\\
                        \n                   -l <label output file> (requried for\
                        \ pca-shared)\\\n                   -p <population query 1>\
                        \ \\\n                   -p <population query 2> \\\n    \
                        \               ... \\\n                   -p <population\
                        \ query N> \n\nEach population query defines one subpopulation.\n\
                        For example, to find compare the GBR and YRI subpopulations:\n\
                        \t-p \"Population = 'GBR'\"\n\t-p \"Population = 'YRI'\"\n\
                        \nPopulation queries are based on the PED file that is associated\
                        \ with the\ngenotypes, and any column in that PED file can\
                        \ be part of the query.  For\nexample, a PED file that includes\
                        \ the \"Paternal_ID\" and \"Gender\" fields\n(where male =\
                        \ 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID\
                        \ = 'NA12878' AND Gender = 2\"\n\nNOTE: gst and fst assume\
                        \ that variants are biallelic.  If your data\ncontains multiallelic\
                        \ sites, we recommend decomposing your VCF \n(see A. Tan,\
                        \ Bioinformatics 2015) prior to indexing.\n"
                      generated_using: *id004
                      docker_image:
                    - !Command
                      command: &id006
                      - gqt
                      - gst
                      positional: []
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        description: \
                        args: !SimpleFlagArg
                          name: ped database file
                      - !Flag
                        optional: true
                        synonyms:
                        - -t
                        description: direcory name for remote files (default ./)
                        args: !SimpleFlagArg
                          name: tmp
                      - !Flag
                        optional: true
                        synonyms:
                        - -f
                        description: (requried for pca-shared)\
                        args: !SimpleFlagArg
                          name: label db field name
                      - !Flag
                        optional: true
                        synonyms:
                        - -l
                        description: (requried for pca-shared)\
                        args: !SimpleFlagArg
                          name: label output file
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        description: ''
                        args: !SimpleFlagArg
                          name: gqt file
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag:
                      usage_flag:
                      version_flag:
                      help_text: "gst: invalid option -- '-'\nUnknown option `--'.\n\
                        gqt 1.1.3\nusage:   gqt gst -i <gqt file> \\\n           \
                        \        -d <ped database file> \\\n                   -t\
                        \ tmp direcory name for remote files (default ./)\n      \
                        \             -f <label db field name> (requried for pca-shared)\\\
                        \n                   -l <label output file> (requried for\
                        \ pca-shared)\\\n                   -p <population query 1>\
                        \ \\\n                   -p <population query 2> \\\n    \
                        \               ... \\\n                   -p <population\
                        \ query N> \n\nEach population query defines one subpopulation.\n\
                        For example, to find compare the GBR and YRI subpopulations:\n\
                        \t-p \"Population = 'GBR'\"\n\t-p \"Population = 'YRI'\"\n\
                        \nPopulation queries are based on the PED file that is associated\
                        \ with the\ngenotypes, and any column in that PED file can\
                        \ be part of the query.  For\nexample, a PED file that includes\
                        \ the \"Paternal_ID\" and \"Gender\" fields\n(where male =\
                        \ 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID\
                        \ = 'NA12878' AND Gender = 2\"\n\nNOTE: gst and fst assume\
                        \ that variants are biallelic.  If your data\ncontains multiallelic\
                        \ sites, we recommend decomposing your VCF \n(see A. Tan,\
                        \ Bioinformatics 2015) prior to indexing.\n"
                      generated_using: *id004
                      docker_image:
                    - !Command
                      command: &id007
                      - gqt
                      - query
                      positional: []
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        description: \
                        args: !SimpleFlagArg
                          name: ped database file
                      - !Flag
                        optional: true
                        synonyms:
                        - -c
                        description: print number of resulting variants \
                        args: !SimpleFlagArg
                          name: only
                      - !Flag
                        optional: true
                        synonyms:
                        - -v
                        description: genotypes (from the source bcf/vcf)\
                        args: !SimpleFlagArg
                          name: print
                      - !Flag
                        optional: true
                        synonyms:
                        - -t
                        description: direcory name for remote files (default ./)
                        args: !SimpleFlagArg
                          name: tmp
                      - !Flag
                        optional: true
                        synonyms:
                        - -B
                        description: (opt.)\
                        args: !SimpleFlagArg
                          name: bim file
                      - !Flag
                        optional: true
                        synonyms:
                        - -O
                        description: (opt.)\
                        args: !SimpleFlagArg
                          name: off file
                      - !Flag
                        optional: true
                        synonyms:
                        - -V
                        description: (opt.)\
                        args: !SimpleFlagArg
                          name: vid file
                      - !Flag
                        optional: true
                        synonyms:
                        - -G
                        description: (opt.)\
                        args: !SimpleFlagArg
                          name: gqt file
                      - !Flag
                        optional: true
                        synonyms:
                        - -p
                        description: \
                        args: !SimpleFlagArg
                          name: population query 1
                      - !Flag
                        optional: true
                        synonyms:
                        - -g
                        description: \
                        args: !SimpleFlagArg
                          name: genotype query 1
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        description: ''
                        args: !SimpleFlagArg
                          name: bcf/vcf or gqt file
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag:
                      usage_flag:
                      version_flag:
                      help_text: "query: invalid option -- '-'\nUnknown option `--'.\n\
                        gqt v1.1.3\nusage:   gqt query -i <bcf/vcf or gqt file> \\\
                        \n                   -d <ped database file> \\\n         \
                        \          -c only print number of resulting variants \\\n\
                        \                   -v print genotypes (from the source bcf/vcf)\\\
                        \n                   -t tmp direcory name for remote files\
                        \ (default ./)\n                   -B <bim file> (opt.)\\\n\
                        \                   -O <off file> (opt.)\\\n             \
                        \      -V <vid file> (opt.)\\\n                   -G <gqt\
                        \ file> (opt.)\\\n                   -p <population query\
                        \ 1> \\\n                   -g <genotype query 1> \\\n   \
                        \                -p <population query 2> \\\n            \
                        \       -g <genotype query 2> \\\n\nA GQT query returns a\
                        \ set of variants that meet some number of population \nand\
                        \ genotype conditions.  Conditions are specified by a population\
                        \ query \nand genotype query pair, where the population query\
                        \ defines the set of\nindividuals to consider and the genotype\
                        \ query defines a filter on that\npopulation.  The result\
                        \ is the set of variants within that sub-population\nthat\
                        \ meet the given conditions.  For example, to find the variants\
                        \ that are\nheterozygous in the GBR population the query pair\
                        \ would be:\n\n\t-p \"Population = 'GBR'\" -g \"HET\"\n\n\
                        Any number of query pairs can be included, to further refine\
                        \ that set of\nvariants.  For example, to find the variants\
                        \ that are heterozygous in at \nleast 10 individuals from\
                        \ the GBR population, and are homozygous reference \nin the\
                        \ TSI population the two query pairs would be:\n\n\t-p \"\
                        Population = 'GBR'\" -g \"count(HET) >= 10\" \\\n\t-p \"Population\
                        \ = 'GBR'\" -g \"HOM_REF\"\n\nPopulation queries are based\
                        \ on the PED file that is associated with the\ngenotypes,\
                        \ and any column in that PED file can be part of the query.\
                        \  For\nexample, a PED file that includes the \"Paternal_ID\"\
                        \ and \"Gender\" fields\n(where male = 1 and female = 2) could\
                        \ be queried by:\n\n\t-p \"Paternal_ID = 'NA12878' AND Gender\
                        \ = 2\"\n\nGenotype queries can either be direct genotype\
                        \ filters or count-based \nfilters.  To get the variants that\
                        \ are heterozygous in every member of the\npopulation the\
                        \ query would be:\n\n\t-g \"HET\"\n\nOr to get the variants\
                        \ that are either heterozygous or homozygous alternate\nin\
                        \ every member the query would be:\n\n\t-g \"HET HOM_ALT\"\
                        \n\nCount based filters used the \"count()\" operator that\
                        \ takes a genotype \nlist as a parameter followed by some\
                        \ condition.  For example, to find the\nvariants that are\
                        \ either heterozygous or homozygous alternate in no more\n\
                        than 10 individuals the query would be\n\n\t-g \"count(HET\
                        \ HOM_ALT) < 10\"\n"
                      generated_using: *id004
                      docker_image:
                    - !Command
                      command: &id008
                      - gqt
                      - convert
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: bcf
                        description: create a GQT index
                      - !Positional
                        optional: false
                        position: 1
                        name: ped
                        description: create sample phenotype database
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -p
                        description: PED file name (opt.)
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -c
                        description: Sample name column in PED (Default 2)
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -G
                        description: GQT output file name (opt.)
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -V
                        description: VID output file name (opt.)
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -O
                        description: OFF output file name (opt.)
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -B
                        description: BIM output file name (opt.)
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -D
                        description: PED DB output file name (opt.)
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -r
                        description: Number of variants (opt. with index)
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -f
                        description: Number of samples (opt. with index)
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -t
                        description: Tmp working directory(./ by defualt)
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        description: ''
                        args: !SimpleFlagArg
                          name: input VCF/VCF.GZ/BCF file
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag:
                      usage_flag:
                      version_flag:
                      help_text: "gqt v1.1.3\nusage:   gqt convert <type> -i <input\
                        \ VCF/VCF.GZ/BCF file>\n     types:\n         bcf        \
                        \ create a GQT index\n         ped         create sample phenotype\
                        \ database\n\n     options:\n         -p           PED file\
                        \ name (opt.)\n         -c           Sample name column in\
                        \ PED (Default 2)\n         -G           GQT output file name\
                        \ (opt.)\n         -V           VID output file name (opt.)\n\
                        \         -O           OFF output file name (opt.)\n     \
                        \    -B           BIM output file name (opt.)\n         -D\
                        \           PED DB output file name (opt.)\n         -r  \
                        \         Number of variants (opt. with index)\n         -f\
                        \           Number of samples (opt. with index)\n        \
                        \ -t           Tmp working directory(./ by defualt)\n"
                      generated_using: *id004
                      docker_image:
                    usage: []
                    help_flag:
                    usage_flag:
                    version_flag:
                    help_text: "Unknown command\ngqt, v1.1.3\nusage:   gqt <command>\
                      \ [options]\n         convert    Convert between file types\n\
                      \         query      Query the index\n         pca-shared Compute\
                      \ the similarity matrix for PCA base\n                    on\
                      \ the number of shared non-reference loci.\n         calpha\
                      \     Calculate C-alpha paramters (Neal 2011)\n         gst\
                      \        Calculate Gst statistic (Neil 1973)\n         fst \
                      \       Calculate Fst statistic (Weir and Cockerham 1984)\n"
                    generated_using: *id004
                    docker_image:
                  subcommands: []
                  usage: []
                  help_flag:
                  usage_flag:
                  version_flag:
                  help_text: "calpha: invalid option -- '-'\nUnknown option `--'.\n\
                    gqt 1.1.3\nusage:   gqt calpha -i <gqt file> \\\n            \
                    \       -d <ped database file> \\\n                   -t tmp direcory\
                    \ name for remote files (default ./)\n                   -f <label\
                    \ db field name> (requried for pca-shared)\\\n               \
                    \    -l <label output file> (requried for pca-shared)\\\n    \
                    \               -p <population query 1> \\\n                 \
                    \  -p <population query 2> \\\n                   ... \\\n   \
                    \                -p <population query N> \n\nEach population query\
                    \ defines one subpopulation.\nFor example, to find compare the\
                    \ GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\n\t\
                    -p \"Population = 'YRI'\"\n\nPopulation queries are based on the\
                    \ PED file that is associated with the\ngenotypes, and any column\
                    \ in that PED file can be part of the query.  For\nexample, a\
                    \ PED file that includes the \"Paternal_ID\" and \"Gender\" fields\n\
                    (where male = 1 and female = 2) could be queried by:\n\n\t-p \"\
                    Paternal_ID = 'NA12878' AND Gender = 2\"\n\nNOTE: gst and fst\
                    \ assume that variants are biallelic.  If your data\ncontains\
                    \ multiallelic sites, we recommend decomposing your VCF \n(see\
                    \ A. Tan, Bioinformatics 2015) prior to indexing.\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id005
                  positional: []
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -t
                    description: direcory name for remote files (default ./)
                    args: !SimpleFlagArg
                      name: tmp
                  - !Flag
                    optional: true
                    synonyms:
                    - -f
                    description: (requried for pca-shared)\
                    args: !SimpleFlagArg
                      name: label db field name
                  - !Flag
                    optional: true
                    synonyms:
                    - -l
                    description: (requried for pca-shared)\
                    args: !SimpleFlagArg
                      name: label output file
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    description: ''
                    args: !SimpleFlagArg
                      name: gqt file
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag:
                  usage_flag:
                  version_flag:
                  help_text: "fst: invalid option -- '-'\nUnknown option `--'.\ngqt\
                    \ 1.1.3\nusage:   gqt fst -i <gqt file> \\\n                 \
                    \  -d <ped database file> \\\n                   -t tmp direcory\
                    \ name for remote files (default ./)\n                   -f <label\
                    \ db field name> (requried for pca-shared)\\\n               \
                    \    -l <label output file> (requried for pca-shared)\\\n    \
                    \               -p <population query 1> \\\n                 \
                    \  -p <population query 2> \\\n                   ... \\\n   \
                    \                -p <population query N> \n\nEach population query\
                    \ defines one subpopulation.\nFor example, to find compare the\
                    \ GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\n\t\
                    -p \"Population = 'YRI'\"\n\nPopulation queries are based on the\
                    \ PED file that is associated with the\ngenotypes, and any column\
                    \ in that PED file can be part of the query.  For\nexample, a\
                    \ PED file that includes the \"Paternal_ID\" and \"Gender\" fields\n\
                    (where male = 1 and female = 2) could be queried by:\n\n\t-p \"\
                    Paternal_ID = 'NA12878' AND Gender = 2\"\n\nNOTE: gst and fst\
                    \ assume that variants are biallelic.  If your data\ncontains\
                    \ multiallelic sites, we recommend decomposing your VCF \n(see\
                    \ A. Tan, Bioinformatics 2015) prior to indexing.\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id006
                  positional: []
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -t
                    description: direcory name for remote files (default ./)
                    args: !SimpleFlagArg
                      name: tmp
                  - !Flag
                    optional: true
                    synonyms:
                    - -f
                    description: (requried for pca-shared)\
                    args: !SimpleFlagArg
                      name: label db field name
                  - !Flag
                    optional: true
                    synonyms:
                    - -l
                    description: (requried for pca-shared)\
                    args: !SimpleFlagArg
                      name: label output file
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    description: ''
                    args: !SimpleFlagArg
                      name: gqt file
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag:
                  usage_flag:
                  version_flag:
                  help_text: "gst: invalid option -- '-'\nUnknown option `--'.\ngqt\
                    \ 1.1.3\nusage:   gqt gst -i <gqt file> \\\n                 \
                    \  -d <ped database file> \\\n                   -t tmp direcory\
                    \ name for remote files (default ./)\n                   -f <label\
                    \ db field name> (requried for pca-shared)\\\n               \
                    \    -l <label output file> (requried for pca-shared)\\\n    \
                    \               -p <population query 1> \\\n                 \
                    \  -p <population query 2> \\\n                   ... \\\n   \
                    \                -p <population query N> \n\nEach population query\
                    \ defines one subpopulation.\nFor example, to find compare the\
                    \ GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\n\t\
                    -p \"Population = 'YRI'\"\n\nPopulation queries are based on the\
                    \ PED file that is associated with the\ngenotypes, and any column\
                    \ in that PED file can be part of the query.  For\nexample, a\
                    \ PED file that includes the \"Paternal_ID\" and \"Gender\" fields\n\
                    (where male = 1 and female = 2) could be queried by:\n\n\t-p \"\
                    Paternal_ID = 'NA12878' AND Gender = 2\"\n\nNOTE: gst and fst\
                    \ assume that variants are biallelic.  If your data\ncontains\
                    \ multiallelic sites, we recommend decomposing your VCF \n(see\
                    \ A. Tan, Bioinformatics 2015) prior to indexing.\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id007
                  positional: []
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -c
                    description: print number of resulting variants \
                    args: !SimpleFlagArg
                      name: only
                  - !Flag
                    optional: true
                    synonyms:
                    - -v
                    description: genotypes (from the source bcf/vcf)\
                    args: !SimpleFlagArg
                      name: print
                  - !Flag
                    optional: true
                    synonyms:
                    - -t
                    description: direcory name for remote files (default ./)
                    args: !SimpleFlagArg
                      name: tmp
                  - !Flag
                    optional: true
                    synonyms:
                    - -B
                    description: (opt.)\
                    args: !SimpleFlagArg
                      name: bim file
                  - !Flag
                    optional: true
                    synonyms:
                    - -O
                    description: (opt.)\
                    args: !SimpleFlagArg
                      name: off file
                  - !Flag
                    optional: true
                    synonyms:
                    - -V
                    description: (opt.)\
                    args: !SimpleFlagArg
                      name: vid file
                  - !Flag
                    optional: true
                    synonyms:
                    - -G
                    description: (opt.)\
                    args: !SimpleFlagArg
                      name: gqt file
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    description: ''
                    args: !SimpleFlagArg
                      name: bcf/vcf or gqt file
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag:
                  usage_flag:
                  version_flag:
                  help_text: "query: invalid option -- '-'\nUnknown option `--'.\n\
                    gqt v1.1.3\nusage:   gqt query -i <bcf/vcf or gqt file> \\\n \
                    \                  -d <ped database file> \\\n               \
                    \    -c only print number of resulting variants \\\n         \
                    \          -v print genotypes (from the source bcf/vcf)\\\n  \
                    \                 -t tmp direcory name for remote files (default\
                    \ ./)\n                   -B <bim file> (opt.)\\\n           \
                    \        -O <off file> (opt.)\\\n                   -V <vid file>\
                    \ (opt.)\\\n                   -G <gqt file> (opt.)\\\n      \
                    \             -p <population query 1> \\\n                   -g\
                    \ <genotype query 1> \\\n                   -p <population query\
                    \ 2> \\\n                   -g <genotype query 2> \\\n\nA GQT\
                    \ query returns a set of variants that meet some number of population\
                    \ \nand genotype conditions.  Conditions are specified by a population\
                    \ query \nand genotype query pair, where the population query\
                    \ defines the set of\nindividuals to consider and the genotype\
                    \ query defines a filter on that\npopulation.  The result is the\
                    \ set of variants within that sub-population\nthat meet the given\
                    \ conditions.  For example, to find the variants that are\nheterozygous\
                    \ in the GBR population the query pair would be:\n\n\t-p \"Population\
                    \ = 'GBR'\" -g \"HET\"\n\nAny number of query pairs can be included,\
                    \ to further refine that set of\nvariants.  For example, to find\
                    \ the variants that are heterozygous in at \nleast 10 individuals\
                    \ from the GBR population, and are homozygous reference \nin the\
                    \ TSI population the two query pairs would be:\n\n\t-p \"Population\
                    \ = 'GBR'\" -g \"count(HET) >= 10\" \\\n\t-p \"Population = 'GBR'\"\
                    \ -g \"HOM_REF\"\n\nPopulation queries are based on the PED file\
                    \ that is associated with the\ngenotypes, and any column in that\
                    \ PED file can be part of the query.  For\nexample, a PED file\
                    \ that includes the \"Paternal_ID\" and \"Gender\" fields\n(where\
                    \ male = 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID\
                    \ = 'NA12878' AND Gender = 2\"\n\nGenotype queries can either\
                    \ be direct genotype filters or count-based \nfilters.  To get\
                    \ the variants that are heterozygous in every member of the\n\
                    population the query would be:\n\n\t-g \"HET\"\n\nOr to get the\
                    \ variants that are either heterozygous or homozygous alternate\n\
                    in every member the query would be:\n\n\t-g \"HET HOM_ALT\"\n\n\
                    Count based filters used the \"count()\" operator that takes a\
                    \ genotype \nlist as a parameter followed by some condition. \
                    \ For example, to find the\nvariants that are either heterozygous\
                    \ or homozygous alternate in no more\nthan 10 individuals the\
                    \ query would be\n\n\t-g \"count(HET HOM_ALT) < 10\"\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id008
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: bcf
                    description: create a GQT index
                  - !Positional
                    optional: false
                    position: 1
                    name: ped
                    description: create sample phenotype database
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -p
                    description: PED file name (opt.)
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -c
                    description: Sample name column in PED (Default 2)
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -G
                    description: GQT output file name (opt.)
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -V
                    description: VID output file name (opt.)
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -O
                    description: OFF output file name (opt.)
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -B
                    description: BIM output file name (opt.)
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -D
                    description: PED DB output file name (opt.)
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -r
                    description: Number of variants (opt. with index)
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -f
                    description: Number of samples (opt. with index)
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -t
                    description: Tmp working directory(./ by defualt)
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    description: ''
                    args: !SimpleFlagArg
                      name: input VCF/VCF.GZ/BCF file
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag:
                  usage_flag:
                  version_flag:
                  help_text: "gqt v1.1.3\nusage:   gqt convert <type> -i <input VCF/VCF.GZ/BCF\
                    \ file>\n     types:\n         bcf         create a GQT index\n\
                    \         ped         create sample phenotype database\n\n   \
                    \  options:\n         -p           PED file name (opt.)\n    \
                    \     -c           Sample name column in PED (Default 2)\n   \
                    \      -G           GQT output file name (opt.)\n         -V \
                    \          VID output file name (opt.)\n         -O          \
                    \ OFF output file name (opt.)\n         -B           BIM output\
                    \ file name (opt.)\n         -D           PED DB output file name\
                    \ (opt.)\n         -r           Number of variants (opt. with\
                    \ index)\n         -f           Number of samples (opt. with index)\n\
                    \         -t           Tmp working directory(./ by defualt)\n"
                  generated_using: *id004
                  docker_image:
                usage: []
                help_flag:
                usage_flag:
                version_flag:
                help_text: "Unknown command\ngqt, v1.1.3\nusage:   gqt <command> [options]\n\
                  \         convert    Convert between file types\n         query\
                  \      Query the index\n         pca-shared Compute the similarity\
                  \ matrix for PCA base\n                    on the number of shared\
                  \ non-reference loci.\n         calpha     Calculate C-alpha paramters\
                  \ (Neal 2011)\n         gst        Calculate Gst statistic (Neil\
                  \ 1973)\n         fst        Calculate Fst statistic (Weir and Cockerham\
                  \ 1984)\n"
                generated_using: *id004
                docker_image:
              subcommands: []
              usage: []
              help_flag:
              usage_flag:
              version_flag:
              help_text: "calpha: invalid option -- '-'\nUnknown option `--'.\ngqt\
                \ 1.1.3\nusage:   gqt calpha -i <gqt file> \\\n                  \
                \ -d <ped database file> \\\n                   -t tmp direcory name\
                \ for remote files (default ./)\n                   -f <label db field\
                \ name> (requried for pca-shared)\\\n                   -l <label\
                \ output file> (requried for pca-shared)\\\n                   -p\
                \ <population query 1> \\\n                   -p <population query\
                \ 2> \\\n                   ... \\\n                   -p <population\
                \ query N> \n\nEach population query defines one subpopulation.\n\
                For example, to find compare the GBR and YRI subpopulations:\n\t-p\
                \ \"Population = 'GBR'\"\n\t-p \"Population = 'YRI'\"\n\nPopulation\
                \ queries are based on the PED file that is associated with the\n\
                genotypes, and any column in that PED file can be part of the query.\
                \  For\nexample, a PED file that includes the \"Paternal_ID\" and\
                \ \"Gender\" fields\n(where male = 1 and female = 2) could be queried\
                \ by:\n\n\t-p \"Paternal_ID = 'NA12878' AND Gender = 2\"\n\nNOTE:\
                \ gst and fst assume that variants are biallelic.  If your data\n\
                contains multiallelic sites, we recommend decomposing your VCF \n\
                (see A. Tan, Bioinformatics 2015) prior to indexing.\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id005
              positional: []
              named:
              - !Flag
                optional: true
                synonyms:
                - -t
                description: direcory name for remote files (default ./)
                args: !SimpleFlagArg
                  name: tmp
              - !Flag
                optional: true
                synonyms:
                - -f
                description: (requried for pca-shared)\
                args: !SimpleFlagArg
                  name: label db field name
              - !Flag
                optional: true
                synonyms:
                - -l
                description: (requried for pca-shared)\
                args: !SimpleFlagArg
                  name: label output file
              - !Flag
                optional: true
                synonyms:
                - -i
                description: ''
                args: !SimpleFlagArg
                  name: gqt file
              parent: *id009
              subcommands: []
              usage: []
              help_flag:
              usage_flag:
              version_flag:
              help_text: "fst: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\n\
                usage:   gqt fst -i <gqt file> \\\n                   -d <ped database\
                \ file> \\\n                   -t tmp direcory name for remote files\
                \ (default ./)\n                   -f <label db field name> (requried\
                \ for pca-shared)\\\n                   -l <label output file> (requried\
                \ for pca-shared)\\\n                   -p <population query 1> \\\
                \n                   -p <population query 2> \\\n                \
                \   ... \\\n                   -p <population query N> \n\nEach population\
                \ query defines one subpopulation.\nFor example, to find compare the\
                \ GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\n\t-p \"\
                Population = 'YRI'\"\n\nPopulation queries are based on the PED file\
                \ that is associated with the\ngenotypes, and any column in that PED\
                \ file can be part of the query.  For\nexample, a PED file that includes\
                \ the \"Paternal_ID\" and \"Gender\" fields\n(where male = 1 and female\
                \ = 2) could be queried by:\n\n\t-p \"Paternal_ID = 'NA12878' AND\
                \ Gender = 2\"\n\nNOTE: gst and fst assume that variants are biallelic.\
                \  If your data\ncontains multiallelic sites, we recommend decomposing\
                \ your VCF \n(see A. Tan, Bioinformatics 2015) prior to indexing.\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id006
              positional: []
              named:
              - !Flag
                optional: true
                synonyms:
                - -t
                description: direcory name for remote files (default ./)
                args: !SimpleFlagArg
                  name: tmp
              - !Flag
                optional: true
                synonyms:
                - -f
                description: (requried for pca-shared)\
                args: !SimpleFlagArg
                  name: label db field name
              - !Flag
                optional: true
                synonyms:
                - -l
                description: (requried for pca-shared)\
                args: !SimpleFlagArg
                  name: label output file
              - !Flag
                optional: true
                synonyms:
                - -i
                description: ''
                args: !SimpleFlagArg
                  name: gqt file
              parent: *id009
              subcommands: []
              usage: []
              help_flag:
              usage_flag:
              version_flag:
              help_text: "gst: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\n\
                usage:   gqt gst -i <gqt file> \\\n                   -d <ped database\
                \ file> \\\n                   -t tmp direcory name for remote files\
                \ (default ./)\n                   -f <label db field name> (requried\
                \ for pca-shared)\\\n                   -l <label output file> (requried\
                \ for pca-shared)\\\n                   -p <population query 1> \\\
                \n                   -p <population query 2> \\\n                \
                \   ... \\\n                   -p <population query N> \n\nEach population\
                \ query defines one subpopulation.\nFor example, to find compare the\
                \ GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\n\t-p \"\
                Population = 'YRI'\"\n\nPopulation queries are based on the PED file\
                \ that is associated with the\ngenotypes, and any column in that PED\
                \ file can be part of the query.  For\nexample, a PED file that includes\
                \ the \"Paternal_ID\" and \"Gender\" fields\n(where male = 1 and female\
                \ = 2) could be queried by:\n\n\t-p \"Paternal_ID = 'NA12878' AND\
                \ Gender = 2\"\n\nNOTE: gst and fst assume that variants are biallelic.\
                \  If your data\ncontains multiallelic sites, we recommend decomposing\
                \ your VCF \n(see A. Tan, Bioinformatics 2015) prior to indexing.\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id007
              positional: []
              named:
              - !Flag
                optional: true
                synonyms:
                - -c
                description: print number of resulting variants \
                args: !SimpleFlagArg
                  name: only
              - !Flag
                optional: true
                synonyms:
                - -v
                description: genotypes (from the source bcf/vcf)\
                args: !SimpleFlagArg
                  name: print
              - !Flag
                optional: true
                synonyms:
                - -t
                description: direcory name for remote files (default ./)
                args: !SimpleFlagArg
                  name: tmp
              - !Flag
                optional: true
                synonyms:
                - -B
                description: (opt.)\
                args: !SimpleFlagArg
                  name: bim file
              - !Flag
                optional: true
                synonyms:
                - -O
                description: (opt.)\
                args: !SimpleFlagArg
                  name: off file
              - !Flag
                optional: true
                synonyms:
                - -V
                description: (opt.)\
                args: !SimpleFlagArg
                  name: vid file
              - !Flag
                optional: true
                synonyms:
                - -G
                description: (opt.)\
                args: !SimpleFlagArg
                  name: gqt file
              - !Flag
                optional: true
                synonyms:
                - -i
                description: ''
                args: !SimpleFlagArg
                  name: bcf/vcf or gqt file
              parent: *id009
              subcommands: []
              usage: []
              help_flag:
              usage_flag:
              version_flag:
              help_text: "query: invalid option -- '-'\nUnknown option `--'.\ngqt\
                \ v1.1.3\nusage:   gqt query -i <bcf/vcf or gqt file> \\\n       \
                \            -d <ped database file> \\\n                   -c only\
                \ print number of resulting variants \\\n                   -v print\
                \ genotypes (from the source bcf/vcf)\\\n                   -t tmp\
                \ direcory name for remote files (default ./)\n                  \
                \ -B <bim file> (opt.)\\\n                   -O <off file> (opt.)\\\
                \n                   -V <vid file> (opt.)\\\n                   -G\
                \ <gqt file> (opt.)\\\n                   -p <population query 1>\
                \ \\\n                   -g <genotype query 1> \\\n              \
                \     -p <population query 2> \\\n                   -g <genotype\
                \ query 2> \\\n\nA GQT query returns a set of variants that meet some\
                \ number of population \nand genotype conditions.  Conditions are\
                \ specified by a population query \nand genotype query pair, where\
                \ the population query defines the set of\nindividuals to consider\
                \ and the genotype query defines a filter on that\npopulation.  The\
                \ result is the set of variants within that sub-population\nthat meet\
                \ the given conditions.  For example, to find the variants that are\n\
                heterozygous in the GBR population the query pair would be:\n\n\t\
                -p \"Population = 'GBR'\" -g \"HET\"\n\nAny number of query pairs\
                \ can be included, to further refine that set of\nvariants.  For example,\
                \ to find the variants that are heterozygous in at \nleast 10 individuals\
                \ from the GBR population, and are homozygous reference \nin the TSI\
                \ population the two query pairs would be:\n\n\t-p \"Population =\
                \ 'GBR'\" -g \"count(HET) >= 10\" \\\n\t-p \"Population = 'GBR'\"\
                \ -g \"HOM_REF\"\n\nPopulation queries are based on the PED file that\
                \ is associated with the\ngenotypes, and any column in that PED file\
                \ can be part of the query.  For\nexample, a PED file that includes\
                \ the \"Paternal_ID\" and \"Gender\" fields\n(where male = 1 and female\
                \ = 2) could be queried by:\n\n\t-p \"Paternal_ID = 'NA12878' AND\
                \ Gender = 2\"\n\nGenotype queries can either be direct genotype filters\
                \ or count-based \nfilters.  To get the variants that are heterozygous\
                \ in every member of the\npopulation the query would be:\n\n\t-g \"\
                HET\"\n\nOr to get the variants that are either heterozygous or homozygous\
                \ alternate\nin every member the query would be:\n\n\t-g \"HET HOM_ALT\"\
                \n\nCount based filters used the \"count()\" operator that takes a\
                \ genotype \nlist as a parameter followed by some condition.  For\
                \ example, to find the\nvariants that are either heterozygous or homozygous\
                \ alternate in no more\nthan 10 individuals the query would be\n\n\
                \t-g \"count(HET HOM_ALT) < 10\"\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id008
              positional:
              - !Positional
                optional: false
                position: 0
                name: bcf
                description: create a GQT index
              - !Positional
                optional: false
                position: 1
                name: ped
                description: create sample phenotype database
              named:
              - !Flag
                optional: true
                synonyms:
                - -p
                description: PED file name (opt.)
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -c
                description: Sample name column in PED (Default 2)
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -G
                description: GQT output file name (opt.)
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -V
                description: VID output file name (opt.)
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -O
                description: OFF output file name (opt.)
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -B
                description: BIM output file name (opt.)
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -D
                description: PED DB output file name (opt.)
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -r
                description: Number of variants (opt. with index)
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -f
                description: Number of samples (opt. with index)
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -t
                description: Tmp working directory(./ by defualt)
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -i
                description: ''
                args: !SimpleFlagArg
                  name: input VCF/VCF.GZ/BCF file
              parent: *id009
              subcommands: []
              usage: []
              help_flag:
              usage_flag:
              version_flag:
              help_text: "gqt v1.1.3\nusage:   gqt convert <type> -i <input VCF/VCF.GZ/BCF\
                \ file>\n     types:\n         bcf         create a GQT index\n  \
                \       ped         create sample phenotype database\n\n     options:\n\
                \         -p           PED file name (opt.)\n         -c         \
                \  Sample name column in PED (Default 2)\n         -G           GQT\
                \ output file name (opt.)\n         -V           VID output file name\
                \ (opt.)\n         -O           OFF output file name (opt.)\n    \
                \     -B           BIM output file name (opt.)\n         -D      \
                \     PED DB output file name (opt.)\n         -r           Number\
                \ of variants (opt. with index)\n         -f           Number of samples\
                \ (opt. with index)\n         -t           Tmp working directory(./\
                \ by defualt)\n"
              generated_using: *id004
              docker_image:
            usage: []
            help_flag:
            usage_flag:
            version_flag:
            help_text: "Unknown command\ngqt, v1.1.3\nusage:   gqt <command> [options]\n\
              \         convert    Convert between file types\n         query    \
              \  Query the index\n         pca-shared Compute the similarity matrix\
              \ for PCA base\n                    on the number of shared non-reference\
              \ loci.\n         calpha     Calculate C-alpha paramters (Neal 2011)\n\
              \         gst        Calculate Gst statistic (Neil 1973)\n         fst\
              \        Calculate Fst statistic (Weir and Cockerham 1984)\n"
            generated_using: *id004
            docker_image:
          subcommands: []
          usage: []
          help_flag:
          usage_flag:
          version_flag:
          help_text: "calpha: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\n\
            usage:   gqt calpha -i <gqt file> \\\n                   -d <ped database\
            \ file> \\\n                   -t tmp direcory name for remote files (default\
            \ ./)\n                   -f <label db field name> (requried for pca-shared)\\\
            \n                   -l <label output file> (requried for pca-shared)\\\
            \n                   -p <population query 1> \\\n                   -p\
            \ <population query 2> \\\n                   ... \\\n               \
            \    -p <population query N> \n\nEach population query defines one subpopulation.\n\
            For example, to find compare the GBR and YRI subpopulations:\n\t-p \"\
            Population = 'GBR'\"\n\t-p \"Population = 'YRI'\"\n\nPopulation queries\
            \ are based on the PED file that is associated with the\ngenotypes, and\
            \ any column in that PED file can be part of the query.  For\nexample,\
            \ a PED file that includes the \"Paternal_ID\" and \"Gender\" fields\n\
            (where male = 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID\
            \ = 'NA12878' AND Gender = 2\"\n\nNOTE: gst and fst assume that variants\
            \ are biallelic.  If your data\ncontains multiallelic sites, we recommend\
            \ decomposing your VCF \n(see A. Tan, Bioinformatics 2015) prior to indexing.\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id005
          positional: []
          named:
          - !Flag
            optional: true
            synonyms:
            - -t
            description: direcory name for remote files (default ./)
            args: !SimpleFlagArg
              name: tmp
          - !Flag
            optional: true
            synonyms:
            - -f
            description: (requried for pca-shared)\
            args: !SimpleFlagArg
              name: label db field name
          - !Flag
            optional: true
            synonyms:
            - -l
            description: (requried for pca-shared)\
            args: !SimpleFlagArg
              name: label output file
          - !Flag
            optional: true
            synonyms:
            - -i
            description: ''
            args: !SimpleFlagArg
              name: gqt file
          parent: *id010
          subcommands: []
          usage: []
          help_flag:
          usage_flag:
          version_flag:
          help_text: "fst: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\n\
            usage:   gqt fst -i <gqt file> \\\n                   -d <ped database\
            \ file> \\\n                   -t tmp direcory name for remote files (default\
            \ ./)\n                   -f <label db field name> (requried for pca-shared)\\\
            \n                   -l <label output file> (requried for pca-shared)\\\
            \n                   -p <population query 1> \\\n                   -p\
            \ <population query 2> \\\n                   ... \\\n               \
            \    -p <population query N> \n\nEach population query defines one subpopulation.\n\
            For example, to find compare the GBR and YRI subpopulations:\n\t-p \"\
            Population = 'GBR'\"\n\t-p \"Population = 'YRI'\"\n\nPopulation queries\
            \ are based on the PED file that is associated with the\ngenotypes, and\
            \ any column in that PED file can be part of the query.  For\nexample,\
            \ a PED file that includes the \"Paternal_ID\" and \"Gender\" fields\n\
            (where male = 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID\
            \ = 'NA12878' AND Gender = 2\"\n\nNOTE: gst and fst assume that variants\
            \ are biallelic.  If your data\ncontains multiallelic sites, we recommend\
            \ decomposing your VCF \n(see A. Tan, Bioinformatics 2015) prior to indexing.\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id006
          positional: []
          named:
          - !Flag
            optional: true
            synonyms:
            - -t
            description: direcory name for remote files (default ./)
            args: !SimpleFlagArg
              name: tmp
          - !Flag
            optional: true
            synonyms:
            - -f
            description: (requried for pca-shared)\
            args: !SimpleFlagArg
              name: label db field name
          - !Flag
            optional: true
            synonyms:
            - -l
            description: (requried for pca-shared)\
            args: !SimpleFlagArg
              name: label output file
          - !Flag
            optional: true
            synonyms:
            - -i
            description: ''
            args: !SimpleFlagArg
              name: gqt file
          parent: *id010
          subcommands: []
          usage: []
          help_flag:
          usage_flag:
          version_flag:
          help_text: "gst: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\n\
            usage:   gqt gst -i <gqt file> \\\n                   -d <ped database\
            \ file> \\\n                   -t tmp direcory name for remote files (default\
            \ ./)\n                   -f <label db field name> (requried for pca-shared)\\\
            \n                   -l <label output file> (requried for pca-shared)\\\
            \n                   -p <population query 1> \\\n                   -p\
            \ <population query 2> \\\n                   ... \\\n               \
            \    -p <population query N> \n\nEach population query defines one subpopulation.\n\
            For example, to find compare the GBR and YRI subpopulations:\n\t-p \"\
            Population = 'GBR'\"\n\t-p \"Population = 'YRI'\"\n\nPopulation queries\
            \ are based on the PED file that is associated with the\ngenotypes, and\
            \ any column in that PED file can be part of the query.  For\nexample,\
            \ a PED file that includes the \"Paternal_ID\" and \"Gender\" fields\n\
            (where male = 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID\
            \ = 'NA12878' AND Gender = 2\"\n\nNOTE: gst and fst assume that variants\
            \ are biallelic.  If your data\ncontains multiallelic sites, we recommend\
            \ decomposing your VCF \n(see A. Tan, Bioinformatics 2015) prior to indexing.\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id007
          positional: []
          named:
          - !Flag
            optional: true
            synonyms:
            - -c
            description: print number of resulting variants \
            args: !SimpleFlagArg
              name: only
          - !Flag
            optional: true
            synonyms:
            - -v
            description: genotypes (from the source bcf/vcf)\
            args: !SimpleFlagArg
              name: print
          - !Flag
            optional: true
            synonyms:
            - -t
            description: direcory name for remote files (default ./)
            args: !SimpleFlagArg
              name: tmp
          - !Flag
            optional: true
            synonyms:
            - -B
            description: (opt.)\
            args: !SimpleFlagArg
              name: bim file
          - !Flag
            optional: true
            synonyms:
            - -O
            description: (opt.)\
            args: !SimpleFlagArg
              name: off file
          - !Flag
            optional: true
            synonyms:
            - -V
            description: (opt.)\
            args: !SimpleFlagArg
              name: vid file
          - !Flag
            optional: true
            synonyms:
            - -G
            description: (opt.)\
            args: !SimpleFlagArg
              name: gqt file
          - !Flag
            optional: true
            synonyms:
            - -i
            description: ''
            args: !SimpleFlagArg
              name: bcf/vcf or gqt file
          parent: *id010
          subcommands: []
          usage: []
          help_flag:
          usage_flag:
          version_flag:
          help_text: "query: invalid option -- '-'\nUnknown option `--'.\ngqt v1.1.3\n\
            usage:   gqt query -i <bcf/vcf or gqt file> \\\n                   -d\
            \ <ped database file> \\\n                   -c only print number of resulting\
            \ variants \\\n                   -v print genotypes (from the source\
            \ bcf/vcf)\\\n                   -t tmp direcory name for remote files\
            \ (default ./)\n                   -B <bim file> (opt.)\\\n          \
            \         -O <off file> (opt.)\\\n                   -V <vid file> (opt.)\\\
            \n                   -G <gqt file> (opt.)\\\n                   -p <population\
            \ query 1> \\\n                   -g <genotype query 1> \\\n         \
            \          -p <population query 2> \\\n                   -g <genotype\
            \ query 2> \\\n\nA GQT query returns a set of variants that meet some\
            \ number of population \nand genotype conditions.  Conditions are specified\
            \ by a population query \nand genotype query pair, where the population\
            \ query defines the set of\nindividuals to consider and the genotype query\
            \ defines a filter on that\npopulation.  The result is the set of variants\
            \ within that sub-population\nthat meet the given conditions.  For example,\
            \ to find the variants that are\nheterozygous in the GBR population the\
            \ query pair would be:\n\n\t-p \"Population = 'GBR'\" -g \"HET\"\n\nAny\
            \ number of query pairs can be included, to further refine that set of\n\
            variants.  For example, to find the variants that are heterozygous in\
            \ at \nleast 10 individuals from the GBR population, and are homozygous\
            \ reference \nin the TSI population the two query pairs would be:\n\n\t\
            -p \"Population = 'GBR'\" -g \"count(HET) >= 10\" \\\n\t-p \"Population\
            \ = 'GBR'\" -g \"HOM_REF\"\n\nPopulation queries are based on the PED\
            \ file that is associated with the\ngenotypes, and any column in that\
            \ PED file can be part of the query.  For\nexample, a PED file that includes\
            \ the \"Paternal_ID\" and \"Gender\" fields\n(where male = 1 and female\
            \ = 2) could be queried by:\n\n\t-p \"Paternal_ID = 'NA12878' AND Gender\
            \ = 2\"\n\nGenotype queries can either be direct genotype filters or count-based\
            \ \nfilters.  To get the variants that are heterozygous in every member\
            \ of the\npopulation the query would be:\n\n\t-g \"HET\"\n\nOr to get\
            \ the variants that are either heterozygous or homozygous alternate\n\
            in every member the query would be:\n\n\t-g \"HET HOM_ALT\"\n\nCount based\
            \ filters used the \"count()\" operator that takes a genotype \nlist as\
            \ a parameter followed by some condition.  For example, to find the\n\
            variants that are either heterozygous or homozygous alternate in no more\n\
            than 10 individuals the query would be\n\n\t-g \"count(HET HOM_ALT) <\
            \ 10\"\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id008
          positional:
          - !Positional
            optional: false
            position: 0
            name: bcf
            description: create a GQT index
          - !Positional
            optional: false
            position: 1
            name: ped
            description: create sample phenotype database
          named:
          - !Flag
            optional: true
            synonyms:
            - -p
            description: PED file name (opt.)
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -c
            description: Sample name column in PED (Default 2)
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -G
            description: GQT output file name (opt.)
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -V
            description: VID output file name (opt.)
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -O
            description: OFF output file name (opt.)
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -B
            description: BIM output file name (opt.)
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -D
            description: PED DB output file name (opt.)
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -r
            description: Number of variants (opt. with index)
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -f
            description: Number of samples (opt. with index)
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -t
            description: Tmp working directory(./ by defualt)
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -i
            description: ''
            args: !SimpleFlagArg
              name: input VCF/VCF.GZ/BCF file
          parent: *id010
          subcommands: []
          usage: []
          help_flag:
          usage_flag:
          version_flag:
          help_text: "gqt v1.1.3\nusage:   gqt convert <type> -i <input VCF/VCF.GZ/BCF\
            \ file>\n     types:\n         bcf         create a GQT index\n      \
            \   ped         create sample phenotype database\n\n     options:\n  \
            \       -p           PED file name (opt.)\n         -c           Sample\
            \ name column in PED (Default 2)\n         -G           GQT output file\
            \ name (opt.)\n         -V           VID output file name (opt.)\n   \
            \      -O           OFF output file name (opt.)\n         -B         \
            \  BIM output file name (opt.)\n         -D           PED DB output file\
            \ name (opt.)\n         -r           Number of variants (opt. with index)\n\
            \         -f           Number of samples (opt. with index)\n         -t\
            \           Tmp working directory(./ by defualt)\n"
          generated_using: *id004
          docker_image:
        usage: []
        help_flag:
        usage_flag:
        version_flag:
        help_text: "Unknown command\ngqt, v1.1.3\nusage:   gqt <command> [options]\n\
          \         convert    Convert between file types\n         query      Query\
          \ the index\n         pca-shared Compute the similarity matrix for PCA base\n\
          \                    on the number of shared non-reference loci.\n     \
          \    calpha     Calculate C-alpha paramters (Neal 2011)\n         gst  \
          \      Calculate Gst statistic (Neil 1973)\n         fst        Calculate\
          \ Fst statistic (Weir and Cockerham 1984)\n"
        generated_using: *id004
        docker_image:
      subcommands: []
      usage: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "calpha: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\n\
        usage:   gqt calpha -i <gqt file> \\\n                   -d <ped database\
        \ file> \\\n                   -t tmp direcory name for remote files (default\
        \ ./)\n                   -f <label db field name> (requried for pca-shared)\\\
        \n                   -l <label output file> (requried for pca-shared)\\\n\
        \                   -p <population query 1> \\\n                   -p <population\
        \ query 2> \\\n                   ... \\\n                   -p <population\
        \ query N> \n\nEach population query defines one subpopulation.\nFor example,\
        \ to find compare the GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\
        \n\t-p \"Population = 'YRI'\"\n\nPopulation queries are based on the PED file\
        \ that is associated with the\ngenotypes, and any column in that PED file\
        \ can be part of the query.  For\nexample, a PED file that includes the \"\
        Paternal_ID\" and \"Gender\" fields\n(where male = 1 and female = 2) could\
        \ be queried by:\n\n\t-p \"Paternal_ID = 'NA12878' AND Gender = 2\"\n\nNOTE:\
        \ gst and fst assume that variants are biallelic.  If your data\ncontains\
        \ multiallelic sites, we recommend decomposing your VCF \n(see A. Tan, Bioinformatics\
        \ 2015) prior to indexing.\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id005
      positional: []
      named:
      - !Flag
        optional: true
        synonyms:
        - -t
        description: direcory name for remote files (default ./)
        args: !SimpleFlagArg
          name: tmp
      - !Flag
        optional: true
        synonyms:
        - -f
        description: (requried for pca-shared)\
        args: !SimpleFlagArg
          name: label db field name
      - !Flag
        optional: true
        synonyms:
        - -l
        description: (requried for pca-shared)\
        args: !SimpleFlagArg
          name: label output file
      - !Flag
        optional: true
        synonyms:
        - -i
        description: ''
        args: !SimpleFlagArg
          name: gqt file
      parent: *id011
      subcommands: []
      usage: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "fst: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\nusage:\
        \   gqt fst -i <gqt file> \\\n                   -d <ped database file> \\\
        \n                   -t tmp direcory name for remote files (default ./)\n\
        \                   -f <label db field name> (requried for pca-shared)\\\n\
        \                   -l <label output file> (requried for pca-shared)\\\n \
        \                  -p <population query 1> \\\n                   -p <population\
        \ query 2> \\\n                   ... \\\n                   -p <population\
        \ query N> \n\nEach population query defines one subpopulation.\nFor example,\
        \ to find compare the GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\
        \n\t-p \"Population = 'YRI'\"\n\nPopulation queries are based on the PED file\
        \ that is associated with the\ngenotypes, and any column in that PED file\
        \ can be part of the query.  For\nexample, a PED file that includes the \"\
        Paternal_ID\" and \"Gender\" fields\n(where male = 1 and female = 2) could\
        \ be queried by:\n\n\t-p \"Paternal_ID = 'NA12878' AND Gender = 2\"\n\nNOTE:\
        \ gst and fst assume that variants are biallelic.  If your data\ncontains\
        \ multiallelic sites, we recommend decomposing your VCF \n(see A. Tan, Bioinformatics\
        \ 2015) prior to indexing.\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id006
      positional: []
      named:
      - !Flag
        optional: true
        synonyms:
        - -t
        description: direcory name for remote files (default ./)
        args: !SimpleFlagArg
          name: tmp
      - !Flag
        optional: true
        synonyms:
        - -f
        description: (requried for pca-shared)\
        args: !SimpleFlagArg
          name: label db field name
      - !Flag
        optional: true
        synonyms:
        - -l
        description: (requried for pca-shared)\
        args: !SimpleFlagArg
          name: label output file
      - !Flag
        optional: true
        synonyms:
        - -i
        description: ''
        args: !SimpleFlagArg
          name: gqt file
      parent: *id011
      subcommands: []
      usage: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "gst: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\nusage:\
        \   gqt gst -i <gqt file> \\\n                   -d <ped database file> \\\
        \n                   -t tmp direcory name for remote files (default ./)\n\
        \                   -f <label db field name> (requried for pca-shared)\\\n\
        \                   -l <label output file> (requried for pca-shared)\\\n \
        \                  -p <population query 1> \\\n                   -p <population\
        \ query 2> \\\n                   ... \\\n                   -p <population\
        \ query N> \n\nEach population query defines one subpopulation.\nFor example,\
        \ to find compare the GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\
        \n\t-p \"Population = 'YRI'\"\n\nPopulation queries are based on the PED file\
        \ that is associated with the\ngenotypes, and any column in that PED file\
        \ can be part of the query.  For\nexample, a PED file that includes the \"\
        Paternal_ID\" and \"Gender\" fields\n(where male = 1 and female = 2) could\
        \ be queried by:\n\n\t-p \"Paternal_ID = 'NA12878' AND Gender = 2\"\n\nNOTE:\
        \ gst and fst assume that variants are biallelic.  If your data\ncontains\
        \ multiallelic sites, we recommend decomposing your VCF \n(see A. Tan, Bioinformatics\
        \ 2015) prior to indexing.\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id007
      positional: []
      named:
      - !Flag
        optional: true
        synonyms:
        - -c
        description: print number of resulting variants \
        args: !SimpleFlagArg
          name: only
      - !Flag
        optional: true
        synonyms:
        - -v
        description: genotypes (from the source bcf/vcf)\
        args: !SimpleFlagArg
          name: print
      - !Flag
        optional: true
        synonyms:
        - -t
        description: direcory name for remote files (default ./)
        args: !SimpleFlagArg
          name: tmp
      - !Flag
        optional: true
        synonyms:
        - -B
        description: (opt.)\
        args: !SimpleFlagArg
          name: bim file
      - !Flag
        optional: true
        synonyms:
        - -O
        description: (opt.)\
        args: !SimpleFlagArg
          name: off file
      - !Flag
        optional: true
        synonyms:
        - -V
        description: (opt.)\
        args: !SimpleFlagArg
          name: vid file
      - !Flag
        optional: true
        synonyms:
        - -G
        description: (opt.)\
        args: !SimpleFlagArg
          name: gqt file
      - !Flag
        optional: true
        synonyms:
        - -i
        description: ''
        args: !SimpleFlagArg
          name: bcf/vcf or gqt file
      parent: *id011
      subcommands: []
      usage: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "query: invalid option -- '-'\nUnknown option `--'.\ngqt v1.1.3\n\
        usage:   gqt query -i <bcf/vcf or gqt file> \\\n                   -d <ped\
        \ database file> \\\n                   -c only print number of resulting\
        \ variants \\\n                   -v print genotypes (from the source bcf/vcf)\\\
        \n                   -t tmp direcory name for remote files (default ./)\n\
        \                   -B <bim file> (opt.)\\\n                   -O <off file>\
        \ (opt.)\\\n                   -V <vid file> (opt.)\\\n                  \
        \ -G <gqt file> (opt.)\\\n                   -p <population query 1> \\\n\
        \                   -g <genotype query 1> \\\n                   -p <population\
        \ query 2> \\\n                   -g <genotype query 2> \\\n\nA GQT query\
        \ returns a set of variants that meet some number of population \nand genotype\
        \ conditions.  Conditions are specified by a population query \nand genotype\
        \ query pair, where the population query defines the set of\nindividuals to\
        \ consider and the genotype query defines a filter on that\npopulation.  The\
        \ result is the set of variants within that sub-population\nthat meet the\
        \ given conditions.  For example, to find the variants that are\nheterozygous\
        \ in the GBR population the query pair would be:\n\n\t-p \"Population = 'GBR'\"\
        \ -g \"HET\"\n\nAny number of query pairs can be included, to further refine\
        \ that set of\nvariants.  For example, to find the variants that are heterozygous\
        \ in at \nleast 10 individuals from the GBR population, and are homozygous\
        \ reference \nin the TSI population the two query pairs would be:\n\n\t-p\
        \ \"Population = 'GBR'\" -g \"count(HET) >= 10\" \\\n\t-p \"Population = 'GBR'\"\
        \ -g \"HOM_REF\"\n\nPopulation queries are based on the PED file that is associated\
        \ with the\ngenotypes, and any column in that PED file can be part of the\
        \ query.  For\nexample, a PED file that includes the \"Paternal_ID\" and \"\
        Gender\" fields\n(where male = 1 and female = 2) could be queried by:\n\n\t\
        -p \"Paternal_ID = 'NA12878' AND Gender = 2\"\n\nGenotype queries can either\
        \ be direct genotype filters or count-based \nfilters.  To get the variants\
        \ that are heterozygous in every member of the\npopulation the query would\
        \ be:\n\n\t-g \"HET\"\n\nOr to get the variants that are either heterozygous\
        \ or homozygous alternate\nin every member the query would be:\n\n\t-g \"\
        HET HOM_ALT\"\n\nCount based filters used the \"count()\" operator that takes\
        \ a genotype \nlist as a parameter followed by some condition.  For example,\
        \ to find the\nvariants that are either heterozygous or homozygous alternate\
        \ in no more\nthan 10 individuals the query would be\n\n\t-g \"count(HET HOM_ALT)\
        \ < 10\"\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id008
      positional:
      - !Positional
        optional: false
        position: 0
        name: bcf
        description: create a GQT index
      - !Positional
        optional: false
        position: 1
        name: ped
        description: create sample phenotype database
      named:
      - !Flag
        optional: true
        synonyms:
        - -p
        description: PED file name (opt.)
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -c
        description: Sample name column in PED (Default 2)
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -G
        description: GQT output file name (opt.)
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -V
        description: VID output file name (opt.)
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -O
        description: OFF output file name (opt.)
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -B
        description: BIM output file name (opt.)
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -D
        description: PED DB output file name (opt.)
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -r
        description: Number of variants (opt. with index)
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -f
        description: Number of samples (opt. with index)
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -t
        description: Tmp working directory(./ by defualt)
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -i
        description: ''
        args: !SimpleFlagArg
          name: input VCF/VCF.GZ/BCF file
      parent: *id011
      subcommands: []
      usage: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "gqt v1.1.3\nusage:   gqt convert <type> -i <input VCF/VCF.GZ/BCF\
        \ file>\n     types:\n         bcf         create a GQT index\n         ped\
        \         create sample phenotype database\n\n     options:\n         -p \
        \          PED file name (opt.)\n         -c           Sample name column\
        \ in PED (Default 2)\n         -G           GQT output file name (opt.)\n\
        \         -V           VID output file name (opt.)\n         -O          \
        \ OFF output file name (opt.)\n         -B           BIM output file name\
        \ (opt.)\n         -D           PED DB output file name (opt.)\n         -r\
        \           Number of variants (opt. with index)\n         -f           Number\
        \ of samples (opt. with index)\n         -t           Tmp working directory(./\
        \ by defualt)\n"
      generated_using: *id004
      docker_image:
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Unknown command\ngqt, v1.1.3\nusage:   gqt <command> [options]\n \
      \        convert    Convert between file types\n         query      Query the\
      \ index\n         pca-shared Compute the similarity matrix for PCA base\n  \
      \                  on the number of shared non-reference loci.\n         calpha\
      \     Calculate C-alpha paramters (Neal 2011)\n         gst        Calculate\
      \ Gst statistic (Neil 1973)\n         fst        Calculate Fst statistic (Weir\
      \ and Cockerham 1984)\n"
    generated_using: *id004
    docker_image:
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "calpha: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\nusage:\
    \   gqt calpha -i <gqt file> \\\n                   -d <ped database file> \\\n\
    \                   -t tmp direcory name for remote files (default ./)\n     \
    \              -f <label db field name> (requried for pca-shared)\\\n        \
    \           -l <label output file> (requried for pca-shared)\\\n             \
    \      -p <population query 1> \\\n                   -p <population query 2>\
    \ \\\n                   ... \\\n                   -p <population query N> \n\
    \nEach population query defines one subpopulation.\nFor example, to find compare\
    \ the GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\n\t-p \"Population\
    \ = 'YRI'\"\n\nPopulation queries are based on the PED file that is associated\
    \ with the\ngenotypes, and any column in that PED file can be part of the query.\
    \  For\nexample, a PED file that includes the \"Paternal_ID\" and \"Gender\" fields\n\
    (where male = 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID = 'NA12878'\
    \ AND Gender = 2\"\n\nNOTE: gst and fst assume that variants are biallelic.  If\
    \ your data\ncontains multiallelic sites, we recommend decomposing your VCF \n\
    (see A. Tan, Bioinformatics 2015) prior to indexing.\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id005
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - -d
    description: \
    args: !SimpleFlagArg
      name: ped database file
  - !Flag
    optional: true
    synonyms:
    - -t
    description: direcory name for remote files (default ./)
    args: !SimpleFlagArg
      name: tmp
  - !Flag
    optional: true
    synonyms:
    - -f
    description: (requried for pca-shared)\
    args: !SimpleFlagArg
      name: label db field name
  - !Flag
    optional: true
    synonyms:
    - -l
    description: (requried for pca-shared)\
    args: !SimpleFlagArg
      name: label output file
  - !Flag
    optional: true
    synonyms:
    - -i
    description: ''
    args: !SimpleFlagArg
      name: gqt file
  parent: *id012
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "fst: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\nusage:\
    \   gqt fst -i <gqt file> \\\n                   -d <ped database file> \\\n \
    \                  -t tmp direcory name for remote files (default ./)\n      \
    \             -f <label db field name> (requried for pca-shared)\\\n         \
    \          -l <label output file> (requried for pca-shared)\\\n              \
    \     -p <population query 1> \\\n                   -p <population query 2> \\\
    \n                   ... \\\n                   -p <population query N> \n\nEach\
    \ population query defines one subpopulation.\nFor example, to find compare the\
    \ GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\n\t-p \"Population\
    \ = 'YRI'\"\n\nPopulation queries are based on the PED file that is associated\
    \ with the\ngenotypes, and any column in that PED file can be part of the query.\
    \  For\nexample, a PED file that includes the \"Paternal_ID\" and \"Gender\" fields\n\
    (where male = 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID = 'NA12878'\
    \ AND Gender = 2\"\n\nNOTE: gst and fst assume that variants are biallelic.  If\
    \ your data\ncontains multiallelic sites, we recommend decomposing your VCF \n\
    (see A. Tan, Bioinformatics 2015) prior to indexing.\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id006
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - -d
    description: \
    args: !SimpleFlagArg
      name: ped database file
  - !Flag
    optional: true
    synonyms:
    - -t
    description: direcory name for remote files (default ./)
    args: !SimpleFlagArg
      name: tmp
  - !Flag
    optional: true
    synonyms:
    - -f
    description: (requried for pca-shared)\
    args: !SimpleFlagArg
      name: label db field name
  - !Flag
    optional: true
    synonyms:
    - -l
    description: (requried for pca-shared)\
    args: !SimpleFlagArg
      name: label output file
  - !Flag
    optional: true
    synonyms:
    - -i
    description: ''
    args: !SimpleFlagArg
      name: gqt file
  parent: *id012
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "gst: invalid option -- '-'\nUnknown option `--'.\ngqt 1.1.3\nusage:\
    \   gqt gst -i <gqt file> \\\n                   -d <ped database file> \\\n \
    \                  -t tmp direcory name for remote files (default ./)\n      \
    \             -f <label db field name> (requried for pca-shared)\\\n         \
    \          -l <label output file> (requried for pca-shared)\\\n              \
    \     -p <population query 1> \\\n                   -p <population query 2> \\\
    \n                   ... \\\n                   -p <population query N> \n\nEach\
    \ population query defines one subpopulation.\nFor example, to find compare the\
    \ GBR and YRI subpopulations:\n\t-p \"Population = 'GBR'\"\n\t-p \"Population\
    \ = 'YRI'\"\n\nPopulation queries are based on the PED file that is associated\
    \ with the\ngenotypes, and any column in that PED file can be part of the query.\
    \  For\nexample, a PED file that includes the \"Paternal_ID\" and \"Gender\" fields\n\
    (where male = 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID = 'NA12878'\
    \ AND Gender = 2\"\n\nNOTE: gst and fst assume that variants are biallelic.  If\
    \ your data\ncontains multiallelic sites, we recommend decomposing your VCF \n\
    (see A. Tan, Bioinformatics 2015) prior to indexing.\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id007
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - -d
    description: \
    args: !SimpleFlagArg
      name: ped database file
  - !Flag
    optional: true
    synonyms:
    - -c
    description: print number of resulting variants \
    args: !SimpleFlagArg
      name: only
  - !Flag
    optional: true
    synonyms:
    - -v
    description: genotypes (from the source bcf/vcf)\
    args: !SimpleFlagArg
      name: print
  - !Flag
    optional: true
    synonyms:
    - -t
    description: direcory name for remote files (default ./)
    args: !SimpleFlagArg
      name: tmp
  - !Flag
    optional: true
    synonyms:
    - -B
    description: (opt.)\
    args: !SimpleFlagArg
      name: bim file
  - !Flag
    optional: true
    synonyms:
    - -O
    description: (opt.)\
    args: !SimpleFlagArg
      name: off file
  - !Flag
    optional: true
    synonyms:
    - -V
    description: (opt.)\
    args: !SimpleFlagArg
      name: vid file
  - !Flag
    optional: true
    synonyms:
    - -G
    description: (opt.)\
    args: !SimpleFlagArg
      name: gqt file
  - !Flag
    optional: true
    synonyms:
    - -p
    description: \
    args: !SimpleFlagArg
      name: population query 1
  - !Flag
    optional: true
    synonyms:
    - -g
    description: \
    args: !SimpleFlagArg
      name: genotype query 1
  - !Flag
    optional: true
    synonyms:
    - -i
    description: ''
    args: !SimpleFlagArg
      name: bcf/vcf or gqt file
  parent: *id012
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "query: invalid option -- '-'\nUnknown option `--'.\ngqt v1.1.3\nusage:\
    \   gqt query -i <bcf/vcf or gqt file> \\\n                   -d <ped database\
    \ file> \\\n                   -c only print number of resulting variants \\\n\
    \                   -v print genotypes (from the source bcf/vcf)\\\n         \
    \          -t tmp direcory name for remote files (default ./)\n              \
    \     -B <bim file> (opt.)\\\n                   -O <off file> (opt.)\\\n    \
    \               -V <vid file> (opt.)\\\n                   -G <gqt file> (opt.)\\\
    \n                   -p <population query 1> \\\n                   -g <genotype\
    \ query 1> \\\n                   -p <population query 2> \\\n               \
    \    -g <genotype query 2> \\\n\nA GQT query returns a set of variants that meet\
    \ some number of population \nand genotype conditions.  Conditions are specified\
    \ by a population query \nand genotype query pair, where the population query\
    \ defines the set of\nindividuals to consider and the genotype query defines a\
    \ filter on that\npopulation.  The result is the set of variants within that sub-population\n\
    that meet the given conditions.  For example, to find the variants that are\n\
    heterozygous in the GBR population the query pair would be:\n\n\t-p \"Population\
    \ = 'GBR'\" -g \"HET\"\n\nAny number of query pairs can be included, to further\
    \ refine that set of\nvariants.  For example, to find the variants that are heterozygous\
    \ in at \nleast 10 individuals from the GBR population, and are homozygous reference\
    \ \nin the TSI population the two query pairs would be:\n\n\t-p \"Population =\
    \ 'GBR'\" -g \"count(HET) >= 10\" \\\n\t-p \"Population = 'GBR'\" -g \"HOM_REF\"\
    \n\nPopulation queries are based on the PED file that is associated with the\n\
    genotypes, and any column in that PED file can be part of the query.  For\nexample,\
    \ a PED file that includes the \"Paternal_ID\" and \"Gender\" fields\n(where male\
    \ = 1 and female = 2) could be queried by:\n\n\t-p \"Paternal_ID = 'NA12878' AND\
    \ Gender = 2\"\n\nGenotype queries can either be direct genotype filters or count-based\
    \ \nfilters.  To get the variants that are heterozygous in every member of the\n\
    population the query would be:\n\n\t-g \"HET\"\n\nOr to get the variants that\
    \ are either heterozygous or homozygous alternate\nin every member the query would\
    \ be:\n\n\t-g \"HET HOM_ALT\"\n\nCount based filters used the \"count()\" operator\
    \ that takes a genotype \nlist as a parameter followed by some condition.  For\
    \ example, to find the\nvariants that are either heterozygous or homozygous alternate\
    \ in no more\nthan 10 individuals the query would be\n\n\t-g \"count(HET HOM_ALT)\
    \ < 10\"\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id008
  positional:
  - !Positional
    optional: false
    position: 0
    name: bcf
    description: create a GQT index
  - !Positional
    optional: false
    position: 1
    name: ped
    description: create sample phenotype database
  named:
  - !Flag
    optional: true
    synonyms:
    - -p
    description: PED file name (opt.)
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -c
    description: Sample name column in PED (Default 2)
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -G
    description: GQT output file name (opt.)
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -V
    description: VID output file name (opt.)
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -O
    description: OFF output file name (opt.)
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -B
    description: BIM output file name (opt.)
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -D
    description: PED DB output file name (opt.)
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -r
    description: Number of variants (opt. with index)
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -f
    description: Number of samples (opt. with index)
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -t
    description: Tmp working directory(./ by defualt)
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -i
    description: ''
    args: !SimpleFlagArg
      name: input VCF/VCF.GZ/BCF file
  parent: *id012
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "gqt v1.1.3\nusage:   gqt convert <type> -i <input VCF/VCF.GZ/BCF file>\n\
    \     types:\n         bcf         create a GQT index\n         ped         create\
    \ sample phenotype database\n\n     options:\n         -p           PED file name\
    \ (opt.)\n         -c           Sample name column in PED (Default 2)\n      \
    \   -G           GQT output file name (opt.)\n         -V           VID output\
    \ file name (opt.)\n         -O           OFF output file name (opt.)\n      \
    \   -B           BIM output file name (opt.)\n         -D           PED DB output\
    \ file name (opt.)\n         -r           Number of variants (opt. with index)\n\
    \         -f           Number of samples (opt. with index)\n         -t      \
    \     Tmp working directory(./ by defualt)\n"
  generated_using: *id004
  docker_image:
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "Unknown command\ngqt, v1.1.3\nusage:   gqt <command> [options]\n     \
  \    convert    Convert between file types\n         query      Query the index\n\
  \         pca-shared Compute the similarity matrix for PCA base\n              \
  \      on the number of shared non-reference loci.\n         calpha     Calculate\
  \ C-alpha paramters (Neal 2011)\n         gst        Calculate Gst statistic (Neil\
  \ 1973)\n         fst        Calculate Fst statistic (Weir and Cockerham 1984)\n"
generated_using: *id004
docker_image:
