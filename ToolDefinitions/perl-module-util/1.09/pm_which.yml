!Command
command:
- pm_which
positional:
- !Positional
  optional: false
  position: 0
  name: Add
  description: ''
- !Positional
  optional: false
  position: 0
  name: Only
  description: ''
- !Positional
  optional: false
  position: 0
  name: Returns
  description: ''
- !Positional
  optional: false
  position: 0
  name: Show
  description: ''
- !Positional
  optional: false
  position: 0
  name: module
  description: ''
- !Positional
  optional: false
  position: 1
  name: a
  description: ''
- !Positional
  optional: false
  position: 1
  name: print
  description: ''
- !Positional
  optional: false
  position: 1
  name: the
  description: ''
- !Positional
  optional: false
  position: 2
  name: path
  description: ''
- !Positional
  optional: false
  position: 3
  name: names
  description: ''
- !Positional
  optional: false
  position: 3
  name: to
  description: ''
- !Positional
  optional: false
  position: 4
  name: search
  description: ''
- !Positional
  optional: false
  position: 5
  name: given
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - -q
  - --quiet
  description: Just print paths
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -p
  - --paths
  description: Just convert the module name into a relative path
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -a
  - --all
  description: Print all paths, not just the first one found
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -n
  - --namespace
  description: all modules in the given namespace
  args: !SimpleFlagArg
    name: Print
- !Flag
  optional: true
  synonyms:
  - -m
  description: Only print module names, not paths
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -V
  description: Show module version
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -I
  description: Add a path to search (like perl -I)
  args: !SimpleFlagArg
    name: libpath
- !Flag
  optional: true
  synonyms:
  - -d
  - --dump
  description: Dump paths that would be searched (@INC by default)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -v
  description: ''
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: Print this message
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - -v
  - --version
  description: Print version information
  args: !EmptyFlagArg {}
help_text: "Usage:\n        pm_which [ options ] module(s)\n\n        Returns the\
  \ path to the given module(s)\n\n  Options:\n        -q, --quiet     Just print\
  \ paths\n        -p, --paths     Just convert the module name into a relative path\n\
  \        -a, --all       Print all paths, not just the first one found\n       \
  \ -n, --namespace Print all modules in the given namespace\n        -m         \
  \     Only print module names, not paths\n        -V              Show module version\n\
  \        -I libpath      Add a path to search (like perl -I)\n        -d, --dump\
  \      Dump paths that would be searched (@INC by default)\n        -h, --help \
  \     Print this message\n        -v, --version   Print version information\n  \
  \      -               Read modules from stdin, one per line\n\n"
generated_using:
- --help
docker_image:
