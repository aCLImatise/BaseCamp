!Command
command:
- mono-api-info
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - --abi
  description: "Generate ABI, not API; contains only classes with\ninstance fields\
    \ which are not [NonSerialized]."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -f
  - --follow-forwarders
  description: Follow type forwarders.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -d
  - -L
  - --lib
  - --search-directory
  description: Check for assembly references in DIRECTORY.
  args: !SimpleFlagArg
    name: DIRECTORY
- !Flag
  optional: true
  synonyms:
  - -r
  description: "Read and register the file ASSEMBLY, and add the\ndirectory containing\
    \ ASSEMBLY to the search path."
  args: !SimpleFlagArg
    name: ASSEMBLY
- !Flag
  optional: true
  synonyms:
  - -o
  description: "The output file. If not specified the output will\nbe written to stdout."
  args: !SimpleFlagArg
    name: VALUE
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  description: ', -?, --help             Show this message and exit.'
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: mono-api-info [OPTIONS+] ASSEMBLY+\n\nExpose IL structure of CLR\
  \ assemblies as XML.\n\nAvailable Options:\n      --abi                  Generate\
  \ ABI, not API; contains only classes with\n                               instance\
  \ fields which are not [NonSerialized].\n  -f, --follow-forwarders    Follow type\
  \ forwarders.\n  -d, -L, --lib, --search-directory=DIRECTORY\n                 \
  \            Check for assembly references in DIRECTORY.\n  -r=ASSEMBLY        \
  \        Read and register the file ASSEMBLY, and add the\n                    \
  \           directory containing ASSEMBLY to the search path.\n  -o=VALUE      \
  \             The output file. If not specified the output will\n              \
  \                 be written to stdout.\n  -h, -?, --help             Show this\
  \ message and exit.\n\n"
generated_using:
- --help
docker_image:
