!Command
command:
- fassort
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -d
  - --description
  description: "Sort sequence records by their descriptions. If used in\ncombination\
    \ with the -x, --regex option, sort records by values\nof a regex capture applied\
    \ to their descriptions."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  - --sequence
  description: "Sort sequence records by their sequences. If used in combination\n\
    with the -x, --regex option, sort records by values of a regex\ncapture applied\
    \ to their sequences."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -f
  description: "[int], --field=[int]\nSort sequence records by values at a specific\
    \ field in sequence\ndescriptions. With this option, the description is split\
    \ into\nfields using strings of white space as field delimiters (the\ndefault\
    \ Perl behavior for splitting lines of data into fields).\nThis option takes a\
    \ mandatory positive integer option argument\ngiving the index for which field\
    \ the regex should query.\nOne-based indexing is used, so the first field after\
    \ the\nsequence identifier has index 1. As standard in Perl, negative\nindices\
    \ count backwards from the last field in the description;\nfield \"-1\" is the\
    \ last field, \"-2\" is the second-to-last etc.\nSequence records for which the\
    \ specified field does not exist\nwill sort on a null key."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -S
  description: "[regex], --split-on-regex=[regex]\nUse regex <regex> to split descriptions\
    \ for the -f option\ninstead of the perl default (which splits on one or more\n\
    whitespace characters). Special characters must be quoted to\nprotect them from\
    \ the shell."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -t
  description: "[string], --tag=[string]\nSort sequence records by values of a named\
    \ tag in the\ndescription. Name-value pairs in the description are expected to\n\
    have the format \"name:value\" as generated by FAST tools (such as\nfaslen) or\
    \ \"name=value\" as common in General Feature Format. The\n\"name\" must contain\
    \ only characters from the set [a-zA-Z0-9_-].\nThe \"value\" is any string of\
    \ non-whitespace characters. Sequence\nrecords for which the specified tag does\
    \ not exist will sort on\na null key."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -x
  description: "[regex], --regex=[regex]\nSort sequence records by values of a regex\
    \ capture applied to\nidentifers (by default), descriptions (in combination with\
    \ the\n-d option), or sequences (in combination with the -s option).\nThe format\
    \ of the regex is a perl regular expression that must\ncontain exactly one \"\
    capture buffer\" indicated by a pair or\nparentheses. The value captured in this\
    \ buffer is the sort key.\nSequence records that do not match the regex will sort\
    \ on a null\nkey."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -r
  - --reverse
  description: "Reverse the result of comparisons so that greater keys come\nfirst."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -n
  - --numeric
  description: Compare keys by their string numerical value.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --man
  description: Print the manual page and exit.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -l
  - --log
  description: "Creates, or appends to, a generic FAST logfile in the current\nworking\
    \ directory. The logfile records date/time of execution,\nfull command with options\
    \ and arguments, and an optional\ncomment."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -L
  description: "[string], --logname=[string]\nUse [string] as the name of the logfile.\
    \ Default is\n\"FAST.log.txt\"."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -C
  description: "[string], --comment=[string]\nInclude comment [string] in logfile.\
    \ No comment is saved by\ndefault."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --format
  description: "=[format]\nUse alternative format for input. See man page for \"fasconvert\"\
    \nfor allowed formats. This is for convenience; the FAST tools are\ndesigned to\
    \ exchange data in Fasta format, and \"fasta\" is the\ndefault format for this\
    \ tool."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -m
  description: "[dna|rna|protein], --moltype=[dna|rna|protein]\nSpecify the type of\
    \ sequence on input (should not be needed in\nmost cases, but sometimes Bioperl\
    \ cannot guess and complains\nwhen processing data)."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -q
  - --fastq
  description: "Use fastq format as input and output.\n"
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: Print a brief help message and exit.
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - --version
  description: Print version information and exit.
  args: !EmptyFlagArg {}
help_text: "Usage:\n    fassort [OPTION]... [MULTIFASTA-FILE]...\n\nOptions:\n   \
  \ -d, --description\n            Sort sequence records by their descriptions. If\
  \ used in\n            combination with the -x, --regex option, sort records by\
  \ values\n            of a regex capture applied to their descriptions.\n\n    -s,\
  \ --sequence\n            Sort sequence records by their sequences. If used in combination\n\
  \            with the -x, --regex option, sort records by values of a regex\n  \
  \          capture applied to their sequences.\n\n    -f [int], --field=[int]\n\
  \            Sort sequence records by values at a specific field in sequence\n \
  \           descriptions. With this option, the description is split into\n    \
  \        fields using strings of white space as field delimiters (the\n        \
  \    default Perl behavior for splitting lines of data into fields).\n\n       \
  \     This option takes a mandatory positive integer option argument\n         \
  \   giving the index for which field the regex should query.\n            One-based\
  \ indexing is used, so the first field after the\n            sequence identifier\
  \ has index 1. As standard in Perl, negative\n            indices count backwards\
  \ from the last field in the description;\n            field \"-1\" is the last\
  \ field, \"-2\" is the second-to-last etc.\n            Sequence records for which\
  \ the specified field does not exist\n            will sort on a null key.\n\n \
  \   -S [regex], --split-on-regex=[regex]\n            Use regex <regex> to split\
  \ descriptions for the -f option\n            instead of the perl default (which\
  \ splits on one or more\n            whitespace characters). Special characters\
  \ must be quoted to\n            protect them from the shell.\n\n    -t [string],\
  \ --tag=[string]\n            Sort sequence records by values of a named tag in\
  \ the\n            description. Name-value pairs in the description are expected\
  \ to\n            have the format \"name:value\" as generated by FAST tools (such\
  \ as\n            faslen) or \"name=value\" as common in General Feature Format.\
  \ The\n            \"name\" must contain only characters from the set [a-zA-Z0-9_-].\n\
  \            The \"value\" is any string of non-whitespace characters. Sequence\n\
  \            records for which the specified tag does not exist will sort on\n \
  \           a null key.\n\n    -x [regex], --regex=[regex]\n            Sort sequence\
  \ records by values of a regex capture applied to\n            identifers (by default),\
  \ descriptions (in combination with the\n            -d option), or sequences (in\
  \ combination with the -s option).\n            The format of the regex is a perl\
  \ regular expression that must\n            contain exactly one \"capture buffer\"\
  \ indicated by a pair or\n            parentheses. The value captured in this buffer\
  \ is the sort key.\n            Sequence records that do not match the regex will\
  \ sort on a null\n            key.\n\n    -r, --reverse\n            Reverse the\
  \ result of comparisons so that greater keys come\n            first.\n\n    -n,\
  \ --numeric\n            Compare keys by their string numerical value.\n\n    -h,\
  \ --help\n            Print a brief help message and exit.\n\n    --man   Print\
  \ the manual page and exit.\n\n    --version\n            Print version information\
  \ and exit.\n\n    -l, --log\n            Creates, or appends to, a generic FAST\
  \ logfile in the current\n            working directory. The logfile records date/time\
  \ of execution,\n            full command with options and arguments, and an optional\n\
  \            comment.\n\n    -L [string], --logname=[string]\n            Use [string]\
  \ as the name of the logfile. Default is\n            \"FAST.log.txt\".\n\n    -C\
  \ [string], --comment=[string]\n            Include comment [string] in logfile.\
  \ No comment is saved by\n            default.\n\n    --format=[format]\n      \
  \      Use alternative format for input. See man page for \"fasconvert\"\n     \
  \       for allowed formats. This is for convenience; the FAST tools are\n     \
  \       designed to exchange data in Fasta format, and \"fasta\" is the\n      \
  \      default format for this tool.\n\n    -m [dna|rna|protein], --moltype=[dna|rna|protein]\n\
  \            Specify the type of sequence on input (should not be needed in\n  \
  \          most cases, but sometimes Bioperl cannot guess and complains\n      \
  \      when processing data).\n\n    -q --fastq\n            Use fastq format as\
  \ input and output.\n\n"
generated_using:
- --help
docker_image: quay.io/biocontainers/perl-fast:1.06--pl526_0
