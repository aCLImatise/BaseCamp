!Command
command:
- compare-out-to-gff.prl
positional:
- !Positional
  optional: false
  position: 0
  name: BUGS
  description: "None known. This program is remarkably slow, though, and could be\
    \ sped\nup significantly with a very easy fix.\n"
named:
- !Flag
  optional: true
  synonyms:
  - --gff
  description: "A GFF-formatted file of features. More than one file may be specified\n\
    with multiple --gff options."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --f
  description: "A fasta formatted file. If this is given, then sequences that are\
    \ under\n(over) the overlap threshold will be in the output. This is a sequence\n\
    filter."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --threshold
  description: "The maximum (minimum) amount of overlap tolerated by any one type\
    \ of\nrepeat."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --over
  description: "Determines if the threshold is a minimum or a maximum (defaults to\n\
    maximum; including --over makes it a minimum)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --instances
  description: "Determines how the overlap calculation is done. If this is not\nspecified,\
    \ the overlap is calculated by bases: if 40 bases of a repeat\nelement overlaps\
    \ a feature in one of the GFF files, it is counted as 40\nbases. The sum is taken\
    \ over all features and all repeats of a given\ntype and divided by the total\
    \ length of the repeat. If --instances is\nspecified, the \"overlap\" is considered\
    \ to be the number of instances of\na given type that overlap any feature, divided\
    \ by the total number of\ninstances of that type."
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    compare-out-to-gff.prl --- Compares RepeatMasker output to a\
  \ set of GFF\n    feature files.\n\nSYNOPSIS\n    compare-out-to-gff.prl --gff=file1.gff\
  \ --gff=file2.gff\n    --cat=repeatmasker.out --f=file.fa > lib.ref\n\nDESCRIPTION\n\
  \    When discovering repeat families with a de novo method, it is sometimes\n \
  \   useful to take the masked instances from RepeatMasker and deterine to\n    what\
  \ extent they overlap other features. For example, you might want to\n    see if\
  \ the repeat instances predominantly overlap exons, or segmental\n    duplications.\
  \ Or, for that matter, instances of known repeats from\n    human-curated libraries.\
  \ This program does that.\n\nOPTIONS\n    There are two required options: --cat\
  \ and one or more --gff.\n\n   --cat\n    RepeatMasker instances in either .cat\
  \ format or .out format (prefer\n    .out)\n\n   --gff\n    A GFF-formatted file\
  \ of features. More than one file may be specified\n    with multiple --gff options.\n\
  \n   --f\n    A fasta formatted file. If this is given, then sequences that are\
  \ under\n    (over) the overlap threshold will be in the output. This is a sequence\n\
  \    filter.\n\n   --threshold\n    The maximum (minimum) amount of overlap tolerated\
  \ by any one type of\n    repeat.\n\n   --over\n    Determines if the threshold\
  \ is a minimum or a maximum (defaults to\n    maximum; including --over makes it\
  \ a minimum)\n\n   --instances\n    Determines how the overlap calculation is done.\
  \ If this is not\n    specified, the overlap is calculated by bases: if 40 bases\
  \ of a repeat\n    element overlaps a feature in one of the GFF files, it is counted\
  \ as 40\n    bases. The sum is taken over all features and all repeats of a given\n\
  \    type and divided by the total length of the repeat. If --instances is\n   \
  \ specified, the \"overlap\" is considered to be the number of instances of\n  \
  \  a given type that overlap any feature, divided by the total number of\n    instances\
  \ of that type.\n\n  BUGS\n    None known. This program is remarkably slow, though,\
  \ and could be sped\n    up significantly with a very easy fix.\n\n"
generated_using:
- --help
docker_image:
