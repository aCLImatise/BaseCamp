!Command
command:
- gensub2
positional:
- !Positional
  optional: false
  position: 0
  name: file list 1
  description: ''
- !Positional
  optional: false
  position: 1
  name: file list 2
  description: ''
- !Positional
  optional: false
  position: 2
  name: template file
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - -group1
  description: '- write elements in order Aa Ab Ac Ba Bb Bc Ca Cb Cc'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -group2
  description: '- write elements in order Aa Ba Ca Ab Bb Cb Ac Bc Cc'
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "gensub2 - version 12.18\nGenerate condor submission file from template\
  \ and two file lists.\nUsage:\n   gensub2 <file list 1> <file list 2> <template\
  \ file> <output file>\nThis will substitute each file in the file lists for $(path1)\
  \ and $(path2)\nin the template between #LOOP and #ENDLOOP, and write the results\
  \ to\nthe output.  Other substitution variables are:\n       $(path1)  - Full path\
  \ name of first file.\n       $(path2)  - Full path name of second file.\n     \
  \  $(dir1)   - First directory. Includes trailing slash if any.\n       $(dir2)\
  \   - Second directory.\n       $(lastDir1) - The last directory in the first path.\
  \ Includes trailing slash if any.\n       $(lastDir2) - The last directory in the\
  \ second path. Includes trailing slash if any.\n       $(lastDirs1=<n>) - The last\
  \ n directories in the first path.\n       $(lastDirs2=<n>) - The last n directories\
  \ in the second path.\n       $(root1)  - First file name without directory or extension.\n\
  \       $(root2)  - Second file name without directory or extension.\n       $(ext1)\
  \   - First file extension.\n       $(ext2)   - Second file extension.\n       $(file1)\
  \  - Name without dir of first file.\n       $(file2)  - Name without dir of second\
  \ file.\n       $(num1)   - Index of first file in list.\n       $(num2)   - Index\
  \ of second file in list.\nThe <file list 2> parameter can be 'single' if there\
  \ is only one file list and \n'selfPair' if there is a single list, but you want\
  \ all\npairs of single list with itself.  By default the order is diagonal, meaning\
  \ if \nthe first list is ABC and the second list is abc the combined \norder is\
  \ Aa Ba Ab Ca Bb Ac  Cb Bc Cc.  This tends to put the \nlargest jobs first if the\
  \ file lists are both sorted by size. \nThe following options can change this:\n\
  \    -group1 - write elements in order Aa Ab Ac Ba Bb Bc Ca Cb Cc\n    -group2 -\
  \ write elements in order Aa Ba Ca Ab Bb Cb Ac Bc Cc\ntemplate file syntax help\
  \ for check statement: {check 'when' 'what' <file>}\n where 'when' is either 'in'\
  \ or 'out'\n and 'what' is one of: 'exists' 'exists+' 'line' 'line+'\n 'exists'\
  \ means file exists, may be zero size\n 'exists+' means file exists and is non-zero\
  \ size\n 'line' means file may have 0 or more lines of ascii data and is properly\n\
  \        line-feed terminated\n 'line+' means file is 1 or more lines of ascii data\
  \ and is properly\n        line-feed terminated\n"
generated_using:
- --help
docker_image:
