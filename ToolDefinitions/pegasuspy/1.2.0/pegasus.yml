&id001 !Command
command:
- pegasus
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -v
  description: ''
  args: !EmptyFlagArg {}
parent:
subcommands:
- &id002 !Command
  command:
  - pegasus
  - annotate_cluster
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --markers
    description: "<str> is a comma-separated list. Each element in the list either\
      \ refers to a JSON file containing legacy markers, or 'human_immune'/'mouse_immune'/'human_brain'/'mouse_brain'/'human_lung'\
      \ for predefined markers. [default: human_immune]"
    args: !SimpleFlagArg
      name: str
  - !Flag
    optional: true
    synonyms:
    - --de-test
    description: 'DE test to use to infer cell types. [default: mwu]'
    args: !SimpleFlagArg
      name: test
  - !Flag
    optional: true
    synonyms:
    - --de-alpha
    description: 'False discovery rate to control family-wise error rate. [default:
      0.05]'
    args: !SimpleFlagArg
      name: alpha
  - !Flag
    optional: true
    synonyms:
    - --de-key
    description: 'Keyword where the DE results store in varm. [default: de_res]'
    args: !SimpleFlagArg
      name: key
  - !Flag
    optional: true
    synonyms:
    - --minimum-report-score
    description: 'Minimum cell type score to report a potential cell type. [default:
      0.5]'
    args: !SimpleFlagArg
      name: score
  - !Flag
    optional: true
    synonyms:
    - --do-not-use-non-de-genes
    description: Do not count non DE genes as down-regulated.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --annotation
    description: "Write cell type annotations in <annotation_string> into <input_data_file>.\
      \ <annotation_string> has this format: 'anno_name:clust_name:anno_1;anno_2;...;anno_n'.\
      \ 'anno_name' is the annotation attribute in the Zarr object, 'clust_name' is\
      \ the attribute with cluster ids, and anno_i is the annotation for cluster i."
    args: !SimpleFlagArg
      name: annotation_string
  parent: *id001
  subcommands:
  - !Command
    command:
    - pegasus
    - annotate_cluster
    - input_data_file
    positional:
    - !Positional
      optional: false
      position: 0
      name: pegasus
      description: ''
    - !Positional
      optional: false
      position: 1
      name: annotate_cluster
      description: ''
    named:
    - !Flag
      optional: true
      synonyms:
      - --annotation
      description: ''
      args: !SimpleFlagArg
        name: annotation_string
    - !Flag
      optional: true
      synonyms:
      - --do-not-use-non-de-genes
      description: ''
      args: !EmptyFlagArg {}
    - !Flag
      optional: true
      synonyms:
      - --minimum-report-score
      description: ''
      args: !SimpleFlagArg
        name: score
    - !Flag
      optional: true
      synonyms:
      - --de-key
      description: ''
      args: !SimpleFlagArg
        name: key
    - !Flag
      optional: true
      synonyms:
      - --de-alpha
      description: ''
      args: !SimpleFlagArg
        name: alpha
    - !Flag
      optional: true
      synonyms:
      - --de-test
      description: ''
      args: !SimpleFlagArg
        name: test
    - !Flag
      optional: true
      synonyms:
      - --markers
      description: ''
      args: !SimpleFlagArg
        name: str
    parent: *id002
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage:\n  pegasus annotate_cluster [--markers <str> --de-test <test>\
      \ --de-alpha <alpha> --de-key <key> --minimum-report-score <score> --do-not-use-non-de-genes]\
      \ <input_data_file> <output_file>\n  pegasus annotate_cluster --annotation <annotation_string>\
      \ <input_data_file>\n  pegasus annotate_cluster -h\n"
    generated_using: &id006 []
    docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: Print out help information.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Annotate potential cell types for each cluster. This command has two\
    \ forms: the first form generates putative annotations and the second form write\
    \ annotations into the data object.\n\nUsage:\n  pegasus annotate_cluster [--markers\
    \ <str> --de-test <test> --de-alpha <alpha> --de-key <key> --minimum-report-score\
    \ <score> --do-not-use-non-de-genes] <input_data_file> <output_file>\n  pegasus\
    \ annotate_cluster --annotation <annotation_string> <input_data_file>\n  pegasus\
    \ annotate_cluster -h\n\nArguments:\n  input_data_file        Single cell data\
    \ with DE analysis done by pegasus de_analysis.\n  output_file            Output\
    \ annotation file.\n\nOptions:\n  --markers <str>                         <str>\
    \ is a comma-separated list. Each element in the list either refers to a JSON\
    \ file containing legacy markers, or 'human_immune'/'mouse_immune'/'human_brain'/'mouse_brain'/'human_lung'\
    \ for predefined markers. [default: human_immune]\n  --de-test <test>        \
    \                DE test to use to infer cell types. [default: mwu]\n  --de-alpha\
    \ <alpha>                      False discovery rate to control family-wise error\
    \ rate. [default: 0.05]\n  --de-key <key>                          Keyword where\
    \ the DE results store in varm. [default: de_res]\n  --minimum-report-score <score>\
    \          Minimum cell type score to report a potential cell type. [default:\
    \ 0.5]\n  --do-not-use-non-de-genes               Do not count non DE genes as\
    \ down-regulated.\n\n  --annotation <annotation_string>        Write cell type\
    \ annotations in <annotation_string> into <input_data_file>. <annotation_string>\
    \ has this format: 'anno_name:clust_name:anno_1;anno_2;...;anno_n'. 'anno_name'\
    \ is the annotation attribute in the Zarr object, 'clust_name' is the attribute\
    \ with cluster ids, and anno_i is the annotation for cluster i.\n\n  -h, --help\
    \                              Print out help information.\n\nOutputs:\n  output_file\
    \        This is a text file. For each cluster, all its putative cell types are\
    \ listed in descending order of the cell type score. For each putative cell type,\
    \ all markers support this cell type are listed. If one putative cell type has\
    \ cell subtypes, all subtypes will be listed under this cell type.\n\nExamples:\n\
    \  pegasus annotate_cluster --markers human_immune manton_bm.zarr.zip manton_bm.anno.txt\n\
    \  pegasus annotate_cluster --markers human_immune,human_lung lung.zarr.zip lung.anno.txt\n\
    \  pegasus annotate_cluster --annotation \"anno:louvain_labels:T cells;B cells;NK\
    \ cells;Monocytes\" manton_bm.zarr.zip\n    \n"
  generated_using: &id003
  - --help
  docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
- !Command
  command:
  - pegasus
  - find_markers
  positional:
  - !Positional
    optional: false
    position: 0
    name: input_data_file
    description: Single cell data after running the de_analysis.
  named:
  - !Flag
    optional: true
    synonyms:
    - -p
    description: 'Use <threads> threads. [default: 1]'
    args: !SimpleFlagArg
      name: threads
  - !Flag
    optional: true
    synonyms:
    - --labels
    description: '<attr> used as cluster labels. [default: louvain_labels]'
    args: !SimpleFlagArg
      name: attr
  - !Flag
    optional: true
    synonyms:
    - --de-key
    description: "Key for storing DE results in 'varm' field. [default: de_res]"
    args: !SimpleFlagArg
      name: key
  - !Flag
    optional: true
    synonyms:
    - --remove-ribo
    description: Remove ribosomal genes with either RPL or RPS as prefixes.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --min-gain
    description: 'Only report genes with a feature importance score (in gain) of at
      least <gain>. [default: 1.0]'
    args: !SimpleFlagArg
      name: gain
  - !Flag
    optional: true
    synonyms:
    - --random-state
    description: 'Random state for initializing LightGBM and KMeans. [default: 0]'
    args: !SimpleFlagArg
      name: seed
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: Print out help information.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Find markers using gradient boosting.\n\nUsage:\n  pegasus find_markers\
    \ [options] <input_data_file> <output_spreadsheet>\n  pegasus find_markers -h\n\
    \nArguments:\n  input_data_file        Single cell data after running the de_analysis.\n\
    \  output_spreadsheet     Output spreadsheet with LightGBM detected markers.\n\
    \nOptions:\n  -p <threads>                 Use <threads> threads. [default: 1]\n\
    \  --labels <attr>              <attr> used as cluster labels. [default: louvain_labels]\n\
    \  --de-key <key>               Key for storing DE results in 'varm' field. [default:\
    \ de_res]\n  --remove-ribo                Remove ribosomal genes with either RPL\
    \ or RPS as prefixes.\n  --min-gain <gain>            Only report genes with a\
    \ feature importance score (in gain) of at least <gain>. [default: 1.0]\n  --random-state\
    \ <seed>        Random state for initializing LightGBM and KMeans. [default: 0]\n\
    \n  -h, --help                   Print out help information.\n\nOutputs:\n  output_spreadsheet\
    \     An excel spreadsheet containing detected markers. Each cluster has one tab\
    \ in the spreadsheet and each tab has six columns, listing markers that are strongly\
    \ up-regulated, weakly up-regulated, down-regulated and their associated LightGBM\
    \ gains.\n\nExamples:\n  pegasus find_markers --labels louvain_labels --remove-ribo\
    \ --min-gain 10.0 -p 10 manton_bm.zarr.zip manton_bm.markers.xlsx\n    \n"
  generated_using: *id003
  docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
- !Command
  command:
  - pegasus
  - plot
  positional:
  - !Positional
    optional: false
    position: 0
    name: plot_type
    description: Plot type, either 'scatter' for scatter plots or 'compo' for composition
      plots
  - !Positional
    optional: false
    position: 1
    name: input_file
    description: Single cell data in Zarr or H5ad format.
  - !Positional
    optional: false
    position: 2
    name: output_file
    description: Output image file.
  named:
  - !Flag
    optional: true
    synonyms:
    - --dpi
    description: 'DPI value for the figure. [default: 500]'
    args: !SimpleFlagArg
      name: dpi
  - !Flag
    optional: true
    synonyms:
    - --restriction
    description: "...     Set restriction if you only want to plot a subset of data.\
      \ Multiple <restriction> strings are allowed. There are two types of <restriction>s:\
      \ global restriction and attribute-specific restriction. Global restriction\
      \ appiles to all attributes in ``attrs`` and takes the format of 'key:value,value...',\
      \ or 'key:~value,value...'. This restriction selects cells with the ``data.obs[key]``\
      \ values belong to 'value,value...' (or not belong to if '~' shows). Attribute-specific\
      \ restriction takes the format of 'attr:key:value,value...', or 'attr:key:~value,value...'.\
      \ It only applies to one attribute 'attr'. If 'attr' and 'key' are the same,\
      \ one can use '.' to replace 'key' (e.g. ``cluster_labels:.:value1,value2``).Each\
      \ <restriction> takes the format of 'attr:value,value', or 'attr:~value,value...\"\
      \ which means excluding values. This option is used in both 'composition' and\
      \ 'scatter'."
    args: !SimpleFlagArg
      name: restriction
  - !Flag
    optional: true
    synonyms:
    - --attributes
    description: <attrs> is a comma-separated list of attributes to color the basis.
      This option is only used in 'scatter'.
    args: !SimpleFlagArg
      name: attrs
  - !Flag
    optional: true
    synonyms:
    - --basis
    description: "Basis for 2D plotting, chosen from 'umap', 'tsne', 'fitsne', 'fle',\
      \ 'net_umap', 'net_tsne', 'net_fitsne' or 'net_fle'. [default: umap]"
    args: !SimpleFlagArg
      name: basis
  - !Flag
    optional: true
    synonyms:
    - --alpha
    description: Point transparent parameter. Can be a single value or a list of values
      separated by comma used for each attribute in <attrs>.
    args: !SimpleFlagArg
      name: alpha
  - !Flag
    optional: true
    synonyms:
    - --legend-loc
    description: "Legend location, can be either \"right margin\" or \"on data\".\
      \ If a list is provided, set 'legend_loc' for each attribute in 'attrs' separately.\
      \ [default: right margin]"
    args: !SimpleFlagArg
      name: str
  - !Flag
    optional: true
    synonyms:
    - --palette
    description: Used for setting colors for every categories in categorical attributes.
      Multiple <palette> strings are allowed. Each string takes the format of 'attr:color1,color2,...,colorn'.
      'attr' is the categorical attribute and 'color1' - 'colorn' are the colors for
      each category in 'attr' (e.g. 'cluster_labels:black,blue,red,...,yellow'). If
      there is only one categorical attribute in 'attrs', ``palletes`` can be set
      as a single string and the 'attr' keyword can be omitted (e.g. "blue,yellow,red").
    args: !SimpleFlagArg
      name: str
  - !Flag
    optional: true
    synonyms:
    - --show-background
    description: Show points that are not selected as gray.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --nrows
    description: Number of rows in the figure. If not set, pegasus will figure it
      out automatically.
    args: !SimpleFlagArg
      name: nrows
  - !Flag
    optional: true
    synonyms:
    - --ncols
    description: Number of columns in the figure. If not set, pegasus will figure
      it out automatically.
    args: !SimpleFlagArg
      name: ncols
  - !Flag
    optional: true
    synonyms:
    - --panel-size
    description: Panel size in inches, w x h, separated by comma. Note that margins
      are not counted in the sizes. For composition, default is (6, 4). For scatter
      plots, default is (4, 4).
    args: !SimpleFlagArg
      name: sizes
  - !Flag
    optional: true
    synonyms:
    - --left
    description: Figure's left margin in fraction with respect to panel width.
    args: !SimpleFlagArg
      name: left
  - !Flag
    optional: true
    synonyms:
    - --bottom
    description: Figure's bottom margin in fraction with respect to panel height.
    args: !SimpleFlagArg
      name: bottom
  - !Flag
    optional: true
    synonyms:
    - --wspace
    description: Horizontal space between panels in fraction with respect to panel
      width.
    args: !SimpleFlagArg
      name: wspace
  - !Flag
    optional: true
    synonyms:
    - --hspace
    description: Vertical space between panels in fraction with respect to panel height.
    args: !SimpleFlagArg
      name: hspace
  - !Flag
    optional: true
    synonyms:
    - --groupby
    description: Use <attr> to categorize the cells for the composition plot, e.g.
      cell type.
    args: !SimpleFlagArg
      name: attr
  - !Flag
    optional: true
    synonyms:
    - --condition
    description: Use <attr> to calculate frequency within each category defined by
      '--groupby' for the composition plot, e.g. donor.
    args: !SimpleFlagArg
      name: attr
  - !Flag
    optional: true
    synonyms:
    - --style
    description: "Composition plot styles. Can be either 'frequency' or 'normalized'.\
      \ [default: normalized]"
    args: !SimpleFlagArg
      name: style
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: Print out help information.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Generate cluster composition plots.\n\nUsage:\n  pegasus plot [options]\
    \ [--restriction <restriction>...] [--palette <palette>...] <plot_type> <input_file>\
    \ <output_file>\n  pegasus plot -h\n\nArguments:\n  plot_type              Plot\
    \ type, either 'scatter' for scatter plots or 'compo' for composition plots\n\
    \  input_file             Single cell data in Zarr or H5ad format.\n  output_file\
    \            Output image file.\n\nOptions:\n  --dpi <dpi>                   \
    \     DPI value for the figure. [default: 500]\n  --restriction <restriction>...\
    \     Set restriction if you only want to plot a subset of data. Multiple <restriction>\
    \ strings are allowed. There are two types of <restriction>s: global restriction\
    \ and attribute-specific restriction. Global restriction appiles to all attributes\
    \ in ``attrs`` and takes the format of 'key:value,value...', or 'key:~value,value...'.\
    \ This restriction selects cells with the ``data.obs[key]`` values belong to 'value,value...'\
    \ (or not belong to if '~' shows). Attribute-specific restriction takes the format\
    \ of 'attr:key:value,value...', or 'attr:key:~value,value...'. It only applies\
    \ to one attribute 'attr'. If 'attr' and 'key' are the same, one can use '.' to\
    \ replace 'key' (e.g. ``cluster_labels:.:value1,value2``).Each <restriction> takes\
    \ the format of 'attr:value,value', or 'attr:~value,value...\" which means excluding\
    \ values. This option is used in both 'composition' and 'scatter'.\n  --attributes\
    \ <attrs>               <attrs> is a comma-separated list of attributes to color\
    \ the basis. This option is only used in 'scatter'.\n  --basis <basis>       \
    \             Basis for 2D plotting, chosen from 'umap', 'tsne', 'fitsne', 'fle',\
    \ 'net_umap', 'net_tsne', 'net_fitsne' or 'net_fle'. [default: umap]\n  --alpha\
    \ <alpha>                    Point transparent parameter. Can be a single value\
    \ or a list of values separated by comma used for each attribute in <attrs>.\n\
    \  --legend-loc <str>                 Legend location, can be either \"right margin\"\
    \ or \"on data\". If a list is provided, set 'legend_loc' for each attribute in\
    \ 'attrs' separately. [default: right margin]\n  --palette <str>             \
    \       Used for setting colors for every categories in categorical attributes.\
    \ Multiple <palette> strings are allowed. Each string takes the format of 'attr:color1,color2,...,colorn'.\
    \ 'attr' is the categorical attribute and 'color1' - 'colorn' are the colors for\
    \ each category in 'attr' (e.g. 'cluster_labels:black,blue,red,...,yellow'). If\
    \ there is only one categorical attribute in 'attrs', ``palletes`` can be set\
    \ as a single string and the 'attr' keyword can be omitted (e.g. \"blue,yellow,red\"\
    ).\n  --show-background                  Show points that are not selected as\
    \ gray.\n  --nrows <nrows>                    Number of rows in the figure. If\
    \ not set, pegasus will figure it out automatically.\n  --ncols <ncols>      \
    \              Number of columns in the figure. If not set, pegasus will figure\
    \ it out automatically.\n  --panel-size <sizes>               Panel size in inches,\
    \ w x h, separated by comma. Note that margins are not counted in the sizes. For\
    \ composition, default is (6, 4). For scatter plots, default is (4, 4).\n  --left\
    \ <left>                      Figure's left margin in fraction with respect to\
    \ panel width.\n  --bottom <bottom>                  Figure's bottom margin in\
    \ fraction with respect to panel height.\n  --wspace <wspace>                \
    \  Horizontal space between panels in fraction with respect to panel width.\n\
    \  --hspace <hspace>                  Vertical space between panels in fraction\
    \ with respect to panel height.\n  --groupby <attr>                   Use <attr>\
    \ to categorize the cells for the composition plot, e.g. cell type.\n  --condition\
    \ <attr>                 Use <attr> to calculate frequency within each category\
    \ defined by '--groupby' for the composition plot, e.g. donor.\n  --style <style>\
    \                    Composition plot styles. Can be either 'frequency' or 'normalized'.\
    \ [default: normalized]\n\n  -h, --help                         Print out help\
    \ information.\n\nExamples:\n  pegasus plot scatter --basis tsne --attributes\
    \ louvain_labels,Donor example.h5ad scatter.pdf\n  pegasus plot compo --groupby\
    \ louvain_labels --condition Donor example.zarr.zip compo.pdf\n    \n"
  generated_using: *id003
  docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
- !Command
  command:
  - pegasus
  - aggregate_matrix
  positional:
  - !Positional
    optional: false
    position: 0
    name: csv_file
    description: This function takes as input a csv_file, which contains at least
      2 columns — Sample, sample name; Location, file that contains the count matrices
      (e.g. filtered_gene_bc_matrices_h5.h5), and merges matrices from the same genome
      together. If multi-modality exists, a third Modality column might be required.
  - !Positional
    optional: false
    position: 1
    name: output_name
    description: The output file name.
  - !Positional
    optional: false
    position: 0
    name: output_name.zarr.zip
    description: A zipped Zarr file containing aggregated data.
  named:
  - !Flag
    optional: true
    synonyms:
    - --restriction
    description: '...           Select data that satisfy all restrictions. Each restriction
      takes the format of name:value,...,value or name:~value,..,value, where ~ refers
      to not. You can specifiy multiple restrictions by setting this option multiple
      times.'
    args: !SimpleFlagArg
      name: restriction
  - !Flag
    optional: true
    synonyms:
    - --attributes
    description: Specify a comma-separated list of outputted attributes. These attributes
      should be column names in the csv file.
    args: !SimpleFlagArg
      name: attributes
  - !Flag
    optional: true
    synonyms:
    - --default-reference
    description: If sample count matrix is in either DGE, mtx, csv, tsv or loom format
      and there is no Reference column in the csv_file, use <reference> as the reference.
      This option can also be used for replacing genome names. For example, if <reference>
      is 'hg19:GRCh38,GRCh38', we will change any genome with name 'hg19' to 'GRCh38'
      and if no genome is provided, 'GRCh38' is the default.
    args: !SimpleFlagArg
      name: reference
  - !Flag
    optional: true
    synonyms:
    - --select-only-singlets
    description: If we have demultiplexed data, turning on this option will make pegasus
      only include barcodes that are predicted as singlets.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --remap-singlets
    description: "Remap singlet names using <remap_string>, where <remap_string> takes\
      \ the format \"new_name_i:old_name_1,old_name_2;new_name_ii:old_name_3;...\"\
      . For example, if we hashed 5 libraries from 3 samples sample1_lib1, sample1_lib2,\
      \ sample2_lib1, sample2_lib2 and sample3, we can remap them to 3 samples using\
      \ this string: \"sample1:sample1_lib1,sample1_lib2;sample2:sample2_lib1,sample2_lib2\"\
      . In this way, the new singlet names will be in metadata field with key 'assignment',\
      \ while the old names will be kept in metadata field with key 'assignment.orig'."
    args: !SimpleFlagArg
      name: remap_string
  - !Flag
    optional: true
    synonyms:
    - --subset-singlets
    description: If select singlets, only select singlets in the <subset_string>,
      which takes the format "name1,name2,...". Note that if --remap-singlets is specified,
      subsetting happens after remapping. For example, we can only select singlets
      from sampe 1 and 3 using "sample1,sample3".
    args: !SimpleFlagArg
      name: subset_string
  - !Flag
    optional: true
    synonyms:
    - --min-genes
    description: Only keep cells with at least <number> of genes.
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --max-genes
    description: Only keep cells with less than <number> of genes.
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --min-umis
    description: Only keep cells with at least <number> of UMIs.
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --max-umis
    description: Only keep cells with less than <number> of UMIs.
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --mito-prefix
    description: Prefix for mitochondrial genes. If multiple prefixes are provided,
      separate them by comma (e.g. "MT-,mt-").
    args: !SimpleFlagArg
      name: prefix
  - !Flag
    optional: true
    synonyms:
    - --percent-mito
    description: Only keep cells with mitochondrial percent less than <percent>%.
      Only when both mito_prefix and percent_mito set, the mitochondrial filter will
      be triggered.
    args: !SimpleFlagArg
      name: percent
  - !Flag
    optional: true
    synonyms:
    - --no-append-sample-name
    description: Turn this option on if you do not want to append sample name in front
      of each sample's barcode (concatenated using '-').
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: Print out help information.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Aggregate multiple single-modality or multi-modality data into one big\
    \ MultimodalData object and write it back to disk as a zipped Zarr file.\n\nUsage:\n\
    \  pegasus aggregate_matrix <csv_file> <output_name> [--restriction <restriction>...\
    \ options]\n  pegasus aggregate_matrix -h\n\nArguments:\n  csv_file          \
    \ This function takes as input a csv_file, which contains at least 2 columns —\
    \ Sample, sample name; Location, file that contains the count matrices (e.g. filtered_gene_bc_matrices_h5.h5),\
    \ and merges matrices from the same genome together. If multi-modality exists,\
    \ a third Modality column might be required.\n  output_name        The output\
    \ file name.\n\nOptions:\n  --restriction <restriction>...           Select data\
    \ that satisfy all restrictions. Each restriction takes the format of name:value,...,value\
    \ or name:~value,..,value, where ~ refers to not. You can specifiy multiple restrictions\
    \ by setting this option multiple times.\n  --attributes <attributes>        \
    \        Specify a comma-separated list of outputted attributes. These attributes\
    \ should be column names in the csv file.\n  --default-reference <reference> \
    \         If sample count matrix is in either DGE, mtx, csv, tsv or loom format\
    \ and there is no Reference column in the csv_file, use <reference> as the reference.\
    \ This option can also be used for replacing genome names. For example, if <reference>\
    \ is 'hg19:GRCh38,GRCh38', we will change any genome with name 'hg19' to 'GRCh38'\
    \ and if no genome is provided, 'GRCh38' is the default.\n  --select-only-singlets\
    \                   If we have demultiplexed data, turning on this option will\
    \ make pegasus only include barcodes that are predicted as singlets.\n  --remap-singlets\
    \ <remap_string>          Remap singlet names using <remap_string>, where <remap_string>\
    \ takes the format \"new_name_i:old_name_1,old_name_2;new_name_ii:old_name_3;...\"\
    . For example, if we hashed 5 libraries from 3 samples sample1_lib1, sample1_lib2,\
    \ sample2_lib1, sample2_lib2 and sample3, we can remap them to 3 samples using\
    \ this string: \"sample1:sample1_lib1,sample1_lib2;sample2:sample2_lib1,sample2_lib2\"\
    . In this way, the new singlet names will be in metadata field with key 'assignment',\
    \ while the old names will be kept in metadata field with key 'assignment.orig'.\n\
    \  --subset-singlets <subset_string>        If select singlets, only select singlets\
    \ in the <subset_string>, which takes the format \"name1,name2,...\". Note that\
    \ if --remap-singlets is specified, subsetting happens after remapping. For example,\
    \ we can only select singlets from sampe 1 and 3 using \"sample1,sample3\".\n\
    \  --min-genes <number>                     Only keep cells with at least <number>\
    \ of genes.\n  --max-genes <number>                     Only keep cells with less\
    \ than <number> of genes. \n  --min-umis <number>                      Only keep\
    \ cells with at least <number> of UMIs.\n  --max-umis <number>               \
    \       Only keep cells with less than <number> of UMIs.\n  --mito-prefix <prefix>\
    \                   Prefix for mitochondrial genes. If multiple prefixes are provided,\
    \ separate them by comma (e.g. \"MT-,mt-\").\n  --percent-mito <percent>     \
    \            Only keep cells with mitochondrial percent less than <percent>%.\
    \ Only when both mito_prefix and percent_mito set, the mitochondrial filter will\
    \ be triggered.\n  --no-append-sample-name                  Turn this option on\
    \ if you do not want to append sample name in front of each sample's barcode (concatenated\
    \ using '-').\n  -h, --help                               Print out help information.\n\
    \nOutputs:\n  output_name.zarr.zip        A zipped Zarr file containing aggregated\
    \ data.\n\nExamples:\n  pegasus aggregate_matrix --restriction Source:BM,CB --restriction\
    \ Individual:1-8 --attributes Source,Platform count_matrix.csv aggr_data\n   \
    \ \n"
  generated_using: *id003
  docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
- &id004 !Command
  command:
  - pegasus
  - check_indexes
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --num-mismatch
    description: 'Number of mismatch allowed for each index sequence. [default: 1]'
    args: !SimpleFlagArg
      name: mismatch
  - !Flag
    optional: true
    synonyms:
    - --report
    description: 'Number of valid 10x GA indexes to report. Default is not to calculate
      valid GA indexes. [default: -1]'
    args: !SimpleFlagArg
      name: n_report
  parent: *id001
  subcommands:
  - !Command
    command:
    - pegasus
    - check_indexes
    - index_file
    positional:
    - !Positional
      optional: false
      position: 0
      name: pegasus
      description: ''
    - !Positional
      optional: false
      position: 1
      name: check_indexes
      description: ''
    named:
    - !Flag
      optional: true
      synonyms:
      - --report
      description: ''
      args: !SimpleFlagArg
        name: n_report
    - !Flag
      optional: true
      synonyms:
      - --num-mismatch
      description: ''
      args: !SimpleFlagArg
        name: mismatch
    parent: *id004
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage:\n  pegasus check_indexes [--num-mismatch <mismatch> --report\
      \ <n_report>] <index_file>\n  pegasus check_indexes -h\n"
    generated_using:
    - --usage
    docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: Print out help information.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Check for index collision between 10x scRNA-seq index sets and CITE-Seq/hashing\
    \ indexes. \n\nThis command can also be used to find the maximum number of mismatches\
    \ allowed among HTO/ADT barcodes.\n\nUsage:\n  pegasus check_indexes [--num-mismatch\
    \ <mismatch> --report <n_report>] <index_file>\n  pegasus check_indexes -h\n\n\
    Arguments:\n  index_file        Index file containing CITE-Seq/hashing index sequences.\
    \ One sequence per line. Multiple columns are allowed. But columns must be separated\
    \ by comma and the first column must be the index sequence.\n\nOptions:\n  --num-mismatch\
    \ <mismatch>        Number of mismatch allowed for each index sequence. [default:\
    \ 1]\n  --report <n_report>              Number of valid 10x GA indexes to report.\
    \ Default is not to calculate valid GA indexes. [default: -1]\n  -h, --help  \
    \                     Print out help information.\n\nOutputs:\n  If --report is\
    \ not set, <index_file> should include all scRNA-seq/CITE-seq/hashing indexes.\
    \ This program first report the minimum hamming distance between any pair of indexes\
    \ and also the maximum number of mismatches can be set [(hamming-dist - 1) //\
    \ 2]. If the maximum number of mismatches is smaller than <mismatch>, an index\
    \ collision error message will be generated.\n\n  If --report is set, assume <index_file>\
    \ only contain CITE-seq/hashing indexes. If there is no index collision within\
    \ <index_file>, up to <n_report> number of valid 10x scRNA-seq indexes will be\
    \ printed to the standard output.\n\nExamples:\n  pegasus check_indexes --num-report\
    \ 8 index_file.txt\n    \n"
  generated_using: *id003
  docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
- !Command
  command:
  - pegasus
  - enrichment
  positional:
  - !Positional
    optional: false
    position: 0
    name: markers_spreadsheet
    description: Output spreadsheet from de_analysis command.
  - !Positional
    optional: false
    position: 1
    name: output_spreadsheet
    description: File containing enrichment results.
  - !Positional
    optional: false
    position: 0
    name: output
    description: An xlsx file containing enrichment results.
  named:
  - !Flag
    optional: true
    synonyms:
    - --organism
    description: 'Organism. See https://biit.cs.ut.ee/gprofiler/page/organism-list
      for full list. [default: hsapiens]'
    args: !SimpleFlagArg
      name: value
  - !Flag
    optional: true
    synonyms:
    - --enrichment_threshold
    description: 'Include enrichment results with corrected p-value less than this
      threshold. [default: 0.05]'
    args: !SimpleFlagArg
      name: value
  - !Flag
    optional: true
    synonyms:
    - --max_genes
    description: 'Maximum number of genes to include in query. [default: 100]'
    args: !SimpleFlagArg
      name: value
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: Print out help information.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Perform enrichment analysis using gprofiler.\n\nUsage:\n  pegasus enrichment\
    \ [options] <markers_spreadsheet> <output_spreadsheet>\n  pegasus enrichment -h\n\
    \nArguments:\n  markers_spreadsheet        Output spreadsheet from de_analysis\
    \ command.\n  output_spreadsheet         File containing enrichment results.\n\
    \nOptions:\n  --organism <value>               Organism. See https://biit.cs.ut.ee/gprofiler/page/organism-list\
    \ for full list. [default: hsapiens]\n  --enrichment_threshold <value>   Include\
    \ enrichment results with corrected p-value less than this threshold. [default:\
    \ 0.05]\n  --max_genes <value>              Maximum number of genes to include\
    \ in query. [default: 100]\n  -h, --help                       Print out help\
    \ information.\n\nOutputs:\n  output     An xlsx file containing enrichment results.\n\
    \nExamples:\n  pegasus enrichment manton_bm.de.xlsx manton_bm_enrichment.xlsx\n\
    \    \n"
  generated_using: *id003
  docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
- !Command
  command:
  - pegasus
  - cluster
  positional:
  - !Positional
    optional: false
    position: 0
    name: input_file
    description: Input file in either 'zarr', 'h5ad', 'loom', '10x', 'mtx', 'csv',
      'tsv' or 'fcs' format. If first-pass analysis has been performed, but you want
      to run some additional analysis, you could also pass a zarr-formatted file.
  - !Positional
    optional: false
    position: 1
    name: output_name
    description: Output file name. All outputs will use it as the prefix.
  - !Positional
    optional: false
    position: 0
    name: output_name.zarr.zip
    description: Output file in Zarr format. To load this file in python, use ``import
      pegasus; data = pegasus.read_input('output_name.zarr.zip')``. The log-normalized
      expression matrix is stored in ``data.X`` as a CSR-format sparse matrix. The
      ``obs`` field contains cell related attributes, including clustering results.
      For example, ``data.obs_names`` records cell barcodes; ``data.obs['Channel']``
      records the channel each cell comes from; ``data.obs['n_genes']``, ``data.obs['n_counts']``,
      and ``data.obs['percent_mito']`` record the number of expressed genes, total
      UMI count, and mitochondrial rate for each cell respectively; ``data.obs['louvain_labels']``
      and ``data.obs['approx_louvain_labels']`` record each cell's cluster labels
      using different clustring algorithms; ``data.obs['pseudo_time']`` records the
      inferred pseudotime for each cell. The ``var`` field contains gene related attributes.
      For example, ``data.var_names`` records gene symbols, ``data.var['gene_ids']``
      records Ensembl gene IDs, and ``data.var['selected']`` records selected variable
      genes. The ``obsm`` field records embedding coordiates. For example, ``data.obsm['X_pca']``
      records PCA coordinates, ``data.obsm['X_tsne']`` records tSNE coordinates, ``data.obsm['X_umap']``
      records UMAP coordinates, ``data.obsm['X_diffmap']`` records diffusion map coordinates,
      ``data.obsm['X_diffmap_pca']`` records the first 3 PCs by projecting the diffusion
      components using PCA, and ``data.obsm['X_fle']`` records the force-directed
      layout coordinates from the diffusion components. The ``uns`` field stores other
      related information, such as reference genome (``data.uns['genome']``). This
      file can be loaded into R and converted into a Seurat object.
  named:
  - !Flag
    optional: true
    synonyms:
    - -p
    - --threads
    description: 'Number of threads. [default: 1]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --processed
    description: Input file is processed. Assume quality control, data normalization
      and log transformation, highly variable gene selection, batch correction/PCA
      and kNN graph building is done.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --channel
    description: Use <channel_attr> to create a 'Channel' column metadata field. All
      cells within a channel are assumed to come from a same batch.
    args: !SimpleFlagArg
      name: channel_attr
  - !Flag
    optional: true
    synonyms:
    - --black-list
    description: Cell barcode attributes in black list will be popped out. Format
      is "attr1,attr2,...,attrn".
    args: !SimpleFlagArg
      name: black_list
  - !Flag
    optional: true
    synonyms:
    - --select-singlets
    description: Only select DemuxEM-predicted singlets for analysis.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --remap-singlets
    description: "Remap singlet names using <remap_string>, where <remap_string> takes\
      \ the format \"new_name_i:old_name_1,old_name_2;new_name_ii:old_name_3;...\"\
      . For example, if we hashed 5 libraries from 3 samples sample1_lib1, sample1_lib2,\
      \ sample2_lib1, sample2_lib2 and sample3, we can remap them to 3 samples using\
      \ this string: \"sample1:sample1_lib1,sample1_lib2;sample2:sample2_lib1,sample2_lib2\"\
      . In this way, the new singlet names will be in metadata field with key 'assignment',\
      \ while the old names will be kept in metadata field with key 'assignment.orig'."
    args: !SimpleFlagArg
      name: remap_string
  - !Flag
    optional: true
    synonyms:
    - --subset-singlets
    description: If select singlets, only select singlets in the <subset_string>,
      which takes the format "name1,name2,...". Note that if --remap-singlets is specified,
      subsetting happens after remapping. For example, we can only select singlets
      from sampe 1 and 3 using "sample1,sample3".
    args: !SimpleFlagArg
      name: subset_string
  - !Flag
    optional: true
    synonyms:
    - --genome
    description: If sample count matrix is in either DGE, mtx, csv, tsv or loom format,
      use <genome_name> as the genome reference name.
    args: !SimpleFlagArg
      name: genome_name
  - !Flag
    optional: true
    synonyms:
    - --focus
    description: Focus analysis on Unimodal data with <keys>. <keys> is a comma-separated
      list of keys. If None, the self._selected will be the focused one.
    args: !SimpleFlagArg
      name: keys
  - !Flag
    optional: true
    synonyms:
    - --append
    description: Append Unimodal data <key> to any <keys> in --focus.
    args: !SimpleFlagArg
      name: key
  - !Flag
    optional: true
    synonyms:
    - --output-loom
    description: Output loom-formatted file.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --output-h5ad
    description: Output h5ad-formatted file.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --min-genes
    description: 'Only keep cells with at least <number> of genes. [default: 500]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --max-genes
    description: 'Only keep cells with less than <number> of genes. [default: 6000]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --min-umis
    description: Only keep cells with at least <number> of UMIs.
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --max-umis
    description: Only keep cells with less than <number> of UMIs.
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --mito-prefix
    description: 'Prefix for mitochondrial genes. Can provide multiple prefixes for
      multiple organisms (e.g. "MT-" means to use "MT-", "GRCh38:MT-,mm10:mt-,MT-"
      means to use "MT-" for GRCh38, "mt-" for mm10 and "MT-" for all other organisms).
      [default: GRCh38:MT-,mm10:mt-,MT-]'
    args: !SimpleFlagArg
      name: prefix
  - !Flag
    optional: true
    synonyms:
    - --percent-mito
    description: 'Only keep cells with mitochondrial percent less than <percent>%.
      [default: 20.0]'
    args: !SimpleFlagArg
      name: percent
  - !Flag
    optional: true
    synonyms:
    - --gene-percent-cells
    description: 'Only use genes that are expressed in at least <percent>% of cells
      to select variable genes. [default: 0.05]'
    args: !SimpleFlagArg
      name: percent
  - !Flag
    optional: true
    synonyms:
    - --output-filtration-results
    description: Output filtration results as a spreadsheet.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --plot-filtration-results
    description: Plot filtration results as PDF files.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --plot-filtration-figsize
    description: Figure size for filtration plots. <figsize> is a comma-separated
      list of two numbers, the width and height of the figure (e.g. 6,4).
    args: !SimpleFlagArg
      name: figsize
  - !Flag
    optional: true
    synonyms:
    - --min-genes-before-filtration
    description: 'If raw data matrix is input, empty barcodes will dominate pre-filtration
      statistics. To avoid this, for raw data matrix, only consider barcodes with
      at lease <number> genes for pre-filtration condition. [default: 100]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --counts-per-cell-after
    description: 'Total counts per cell after normalization. [default: 1e5]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --select-hvf-flavor
    description: "Highly variable feature selection method. <flavor> can be 'pegasus'\
      \ or 'Seurat'. [default: pegasus]"
    args: !SimpleFlagArg
      name: flavor
  - !Flag
    optional: true
    synonyms:
    - --select-hvf-ngenes
    description: "Select top <nfeatures> highly variable features. If <flavor> is\
      \ 'Seurat' and <nfeatures> is 'None', select HVGs with z-score cutoff at 0.5.\
      \ [default: 2000]"
    args: !SimpleFlagArg
      name: nfeatures
  - !Flag
    optional: true
    synonyms:
    - --no-select-hvf
    description: Do not select highly variable features.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --plot-hvf
    description: Plot highly variable feature selection.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --correct-batch-effect
    description: Correct for batch effects.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --correction-method
    description: "Batch correction method, can be either 'L/S' for location/scale\
      \ adjustment algorithm (Li and Wong. The analysis of Gene Expression Data 2003)\
      \ or 'harmony' for Harmony (Korsunsky et al. Nature Methods 2019) or 'scanorama'\
      \ for Scanorama (Hie et al. Nature Biotechnology 2019). [default: harmony]"
    args: !SimpleFlagArg
      name: method
  - !Flag
    optional: true
    synonyms:
    - --batch-group-by
    description: Only valid if correction method is L/S. Batch correction assumes
      the differences in gene expression between channels are due to batch effects.
      However, in many cases, we know that channels can be partitioned into several
      groups and each group is biologically different from others. In this case, we
      will only perform batch correction for channels within each group. This option
      defines the groups. If <expression> is None, we assume all channels are from
      one group. Otherwise, groups are defined according to <expression>. <expression>
      takes the form of either 'attr', or 'attr1+attr2+...+attrn', or 'attr=value11,...,value1n_1;value21,...,value2n_2;...;valuem1,...,valuemn_m'.
      In the first form, 'attr' should be an existing sample attribute, and groups
      are defined by 'attr'. In the second form, 'attr1',...,'attrn' are n existing
      sample attributes and groups are defined by the Cartesian product of these n
      attributes. In the last form, there will be m + 1 groups. A cell belongs to
      group i (i > 0) if and only if its sample attribute 'attr' has a value among
      valuei1,...,valuein_i. A cell belongs to group 0 if it does not belong to any
      other groups.
    args: !SimpleFlagArg
      name: expression
  - !Flag
    optional: true
    synonyms:
    - --harmony-nclusters
    description: Number of clusters used for Harmony batch correction.
    args: !SimpleFlagArg
      name: nclusters
  - !Flag
    optional: true
    synonyms:
    - --random-state
    description: 'Random number generator seed. [default: 0]'
    args: !SimpleFlagArg
      name: seed
  - !Flag
    optional: true
    synonyms:
    - --temp-folder
    description: Joblib temporary folder for memmapping numpy arrays.
    args: !SimpleFlagArg
      name: temp_folder
  - !Flag
    optional: true
    synonyms:
    - --calc-signature-scores
    description: Calculate signature scores for gene sets in <sig_list>. <sig_list>
      is a comma-separated list of strings. Each string should either be a <GMT_file>
      or one of 'cell_cycle_human', 'cell_cycle_mouse', 'gender_human', 'gender_mouse',
      'mitochondrial_genes_human', 'mitochondrial_genes_mouse', 'ribosomal_genes_human'
      and 'ribosomal_genes_mouse'.
    args: !SimpleFlagArg
      name: sig_list
  - !Flag
    optional: true
    synonyms:
    - --pca-n
    description: 'Number of principal components. [default: 50]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --pca-robust
    description: Use 'arpack' instead of 'randomized' as svd_solver for large sparse
      matrices. It will take longer time to compute PCs, but the results are more
      numerically stable.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --knn-K
    description: 'Number of nearest neighbors for building kNN graph. [default: 100]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --knn-full-speed
    description: For the sake of reproducibility, we only run one thread for building
      kNN indices. Turn on this option will allow multiple threads to be used for
      index building. However, it will also reduce reproducibility due to the racing
      between multiple threads.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --kBET
    description: Calculate kBET.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --kBET-batch
    description: 'kBET batch keyword. [default: Channel]'
    args: !SimpleFlagArg
      name: batch
  - !Flag
    optional: true
    synonyms:
    - --kBET-alpha
    description: 'kBET rejection alpha. [default: 0.05]'
    args: !SimpleFlagArg
      name: alpha
  - !Flag
    optional: true
    synonyms:
    - --kBET-K
    description: 'kBET K. [default: 25]'
    args: !SimpleFlagArg
      name: K
  - !Flag
    optional: true
    synonyms:
    - --diffmap
    description: Calculate diffusion maps.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --diffmap-ndc
    description: 'Number of diffusion components. [default: 100]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --diffmap-solver
    description: "Solver for eigen decomposition, either 'eigsh' or 'randomized'.\
      \ [default: eigsh]"
    args: !SimpleFlagArg
      name: solver
  - !Flag
    optional: true
    synonyms:
    - --diffmap-maxt
    description: 'Maximum time stamp to search for the knee point. [default: 5000]'
    args: !SimpleFlagArg
      name: max_t
  - !Flag
    optional: true
    synonyms:
    - --diffmap-to-3d
    description: If map diffusion map into 3D space using PCA.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --calculate-pseudotime
    description: Calculate diffusion-based pseudotimes based on <roots>. <roots> should
      be a comma-separated list of cell barcodes.
    args: !SimpleFlagArg
      name: roots
  - !Flag
    optional: true
    synonyms:
    - --louvain
    description: Run louvain clustering algorithm.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --louvain-resolution
    description: 'Resolution parameter for the louvain clustering algorithm. [default:
      1.3]'
    args: !SimpleFlagArg
      name: resolution
  - !Flag
    optional: true
    synonyms:
    - --louvain-class-label
    description: 'Louvain cluster label name in result. [default: louvain_labels]'
    args: !SimpleFlagArg
      name: label
  - !Flag
    optional: true
    synonyms:
    - --leiden
    description: Run leiden clustering algorithm.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --leiden-resolution
    description: 'Resolution parameter for the leiden clustering algorithm. [default:
      1.3]'
    args: !SimpleFlagArg
      name: resolution
  - !Flag
    optional: true
    synonyms:
    - --leiden-niter
    description: 'Number of iterations of running the Leiden algorithm. If <niter>
      is negative, run Leiden iteratively until no improvement. [default: -1]'
    args: !SimpleFlagArg
      name: niter
  - !Flag
    optional: true
    synonyms:
    - --leiden-class-label
    description: 'Leiden cluster label name in result. [default: leiden_labels]'
    args: !SimpleFlagArg
      name: label
  - !Flag
    optional: true
    synonyms:
    - --spectral-louvain
    description: Run spectral-louvain clustering algorithm.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --spectral-louvain-basis
    description: "Basis used for KMeans clustering. Can be 'pca' or 'diffmap'. If\
      \ 'diffmap' is not calculated, use 'pca' instead. [default: diffmap]"
    args: !SimpleFlagArg
      name: basis
  - !Flag
    optional: true
    synonyms:
    - --spectral-louvain-nclusters
    description: 'Number of first level clusters for Kmeans. [default: 30]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --spectral-louvain-nclusters2
    description: 'Number of second level clusters for Kmeans. [default: 50]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --spectral-louvain-ninit
    description: 'Number of Kmeans tries for first level clustering. Default is the
      same as scikit-learn Kmeans function. [default: 10]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --spectral-louvain-resolution
    description: 'Resolution parameter for louvain. [default: 1.3]'
    args: !SimpleFlagArg
      name: resolution
  - !Flag
    optional: true
    synonyms:
    - --spectral-louvain-class-label
    description: 'Spectral-louvain label name in result. [default: spectral_louvain_labels]'
    args: !SimpleFlagArg
      name: label
  - !Flag
    optional: true
    synonyms:
    - --spectral-leiden
    description: Run spectral-leiden clustering algorithm.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --spectral-leiden-basis
    description: "Basis used for KMeans clustering. Can be 'pca' or 'diffmap'. If\
      \ 'diffmap' is not calculated, use 'pca' instead. [default: diffmap]"
    args: !SimpleFlagArg
      name: basis
  - !Flag
    optional: true
    synonyms:
    - --spectral-leiden-nclusters
    description: 'Number of first level clusters for Kmeans. [default: 30]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --spectral-leiden-nclusters2
    description: 'Number of second level clusters for Kmeans. [default: 50]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --spectral-leiden-ninit
    description: 'Number of Kmeans tries for first level clustering. Default is the
      same as scikit-learn Kmeans function. [default: 10]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --spectral-leiden-resolution
    description: 'Resolution parameter for leiden. [default: 1.3]'
    args: !SimpleFlagArg
      name: resolution
  - !Flag
    optional: true
    synonyms:
    - --spectral-leiden-class-label
    description: 'Spectral-leiden label name in result. [default: spectral_leiden_labels]'
    args: !SimpleFlagArg
      name: label
  - !Flag
    optional: true
    synonyms:
    - --tsne
    description: Run FIt-SNE package to compute t-SNE embeddings for visualization.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --tsne-perplexity
    description: 't-SNE perplexity parameter. [default: 30]'
    args: !SimpleFlagArg
      name: perplexity
  - !Flag
    optional: true
    synonyms:
    - --tsne-initialization
    description: "<choice> can be either 'random' or 'pca'. 'random' refers to random\
      \ initialization. 'pca' refers to PCA initialization as described in (CITE Kobak\
      \ et al. 2019) [default: pca]"
    args: !SimpleFlagArg
      name: choice
  - !Flag
    optional: true
    synonyms:
    - --umap
    description: Run umap for visualization.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --umap-K
    description: 'K neighbors for umap. [default: 15]'
    args: !SimpleFlagArg
      name: K
  - !Flag
    optional: true
    synonyms:
    - --umap-min-dist
    description: 'Umap parameter. [default: 0.5]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --umap-spread
    description: 'Umap parameter. [default: 1.0]'
    args: !SimpleFlagArg
      name: spread
  - !Flag
    optional: true
    synonyms:
    - --fle
    description: Run force-directed layout embedding.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --fle-K
    description: 'K neighbors for building graph for FLE. [default: 50]'
    args: !SimpleFlagArg
      name: K
  - !Flag
    optional: true
    synonyms:
    - --fle-target-change-per-node
    description: 'Target change per node to stop forceAtlas2. [default: 2.0]'
    args: !SimpleFlagArg
      name: change
  - !Flag
    optional: true
    synonyms:
    - --fle-target-steps
    description: 'Maximum number of iterations before stopping the forceAtlas2 algoritm.
      [default: 5000]'
    args: !SimpleFlagArg
      name: steps
  - !Flag
    optional: true
    synonyms:
    - --fle-memory
    description: 'Memory size in GB for the Java FA2 component. [default: 8]'
    args: !SimpleFlagArg
      name: memory
  - !Flag
    optional: true
    synonyms:
    - --net-down-sample-fraction
    description: 'Down sampling fraction for net-related visualization. [default:
      0.1]'
    args: !SimpleFlagArg
      name: frac
  - !Flag
    optional: true
    synonyms:
    - --net-down-sample-K
    description: 'Use <K> neighbors to estimate local density for each data point
      for down sampling. [default: 25]'
    args: !SimpleFlagArg
      name: K
  - !Flag
    optional: true
    synonyms:
    - --net-down-sample-alpha
    description: 'Weighted down sample, proportional to radius^alpha. [default: 1.0]'
    args: !SimpleFlagArg
      name: alpha
  - !Flag
    optional: true
    synonyms:
    - --net-regressor-L2-penalty
    description: 'L2 penalty parameter for the deep net regressor. [default: 0.1]'
    args: !SimpleFlagArg
      name: value
  - !Flag
    optional: true
    synonyms:
    - --net-umap
    description: Run net umap for visualization.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --net-umap-polish-learning-rate
    description: 'After running the deep regressor to predict new coordinate, what
      is the learning rate to use to polish the coordinates for UMAP. [default: 1.0]'
    args: !SimpleFlagArg
      name: rate
  - !Flag
    optional: true
    synonyms:
    - --net-umap-polish-nepochs
    description: 'Number of iterations for polishing UMAP run. [default: 40]'
    args: !SimpleFlagArg
      name: nepochs
  - !Flag
    optional: true
    synonyms:
    - --net-umap-out-basis
    description: 'Output basis for net-UMAP. [default: net_umap]'
    args: !SimpleFlagArg
      name: basis
  - !Flag
    optional: true
    synonyms:
    - --net-fle
    description: Run net FLE.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --net-fle-polish-target-steps
    description: 'After running the deep regressor to predict new coordinate, what
      is the number of force atlas 2 iterations. [default: 1500]'
    args: !SimpleFlagArg
      name: steps
  - !Flag
    optional: true
    synonyms:
    - --net-fle-out-basis
    description: 'Output basis for net-FLE. [default: net_fle]'
    args: !SimpleFlagArg
      name: basis
  - !Flag
    optional: true
    synonyms:
    - --infer-doublets
    description: Infer doublets using the method described in https://github.com/klarman-cell-observatory/pegasus/raw/master/doublet_detection.pdf.
      Obs attribute 'doublet_score' stores Scrublet-like doublet scores and attribute
      'demux_type' stores 'doublet/singlet' assignments.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --expected-doublet-rate
    description: The expected doublet rate per sample. By default, calculate the expected
      rate based on number of cells from the 10x multiplet rate table.
    args: !SimpleFlagArg
      name: rate
  - !Flag
    optional: true
    synonyms:
    - --dbl-cluster-attr
    description: "<attr> refers to a cluster attribute containing cluster labels (e.g.\
      \ 'louvain_labels'). Doublet clusters will be marked based on <attr> with the\
      \ following criteria: passing the Fisher's exact test and having >= 50% of cells\
      \ identified as doublets. By default, the first computed cluster attribute in\
      \ the list of leiden, louvain, spectral_ledein and spectral_louvain is used."
    args: !SimpleFlagArg
      name: attr
  - !Flag
    optional: true
    synonyms:
    - --citeseq
    description: Input data contain both RNA and CITE-Seq modalities. This will set
      --focus to be the RNA modality and --append to be the CITE-Seq modality. In
      addition, 'ADT-' will be added in front of each antibody name to avoid name
      conflict with genes in the RNA modality.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --citeseq-umap
    description: For high quality cells kept in the RNA modality, generate a UMAP
      based on their antibody expression.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --citeseq-umap-exclude
    description: <list> is a comma-separated list of antibodies to be excluded from
      the UMAP calculation (e.g. Mouse-IgG1,Mouse-IgG2a).
    args: !SimpleFlagArg
      name: list
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: Print out help information.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Run pegasus.pipeline to obtain top-level clusters.\n\nUsage:\n  pegasus\
    \ cluster [options] <input_file> <output_name>\n  pegasus cluster -h\n\nArguments:\n\
    \  input_file       Input file in either 'zarr', 'h5ad', 'loom', '10x', 'mtx',\
    \ 'csv', 'tsv' or 'fcs' format. If first-pass analysis has been performed, but\
    \ you want to run some additional analysis, you could also pass a zarr-formatted\
    \ file.\n  output_name      Output file name. All outputs will use it as the prefix.\n\
    \nOptions:\n  -p <number>, --threads <number>                  Number of threads.\
    \ [default: 1]\n  --processed                                      Input file\
    \ is processed. Assume quality control, data normalization and log transformation,\
    \ highly variable gene selection, batch correction/PCA and kNN graph building\
    \ is done.\n\n  --channel <channel_attr>                         Use <channel_attr>\
    \ to create a 'Channel' column metadata field. All cells within a channel are\
    \ assumed to come from a same batch.\n  --black-list <black_list>            \
    \            Cell barcode attributes in black list will be popped out. Format\
    \ is \"attr1,attr2,...,attrn\".\n\n  --select-singlets                       \
    \         Only select DemuxEM-predicted singlets for analysis.\n  --remap-singlets\
    \ <remap_string>                  Remap singlet names using <remap_string>, where\
    \ <remap_string> takes the format \"new_name_i:old_name_1,old_name_2;new_name_ii:old_name_3;...\"\
    . For example, if we hashed 5 libraries from 3 samples sample1_lib1, sample1_lib2,\
    \ sample2_lib1, sample2_lib2 and sample3, we can remap them to 3 samples using\
    \ this string: \"sample1:sample1_lib1,sample1_lib2;sample2:sample2_lib1,sample2_lib2\"\
    . In this way, the new singlet names will be in metadata field with key 'assignment',\
    \ while the old names will be kept in metadata field with key 'assignment.orig'.\n\
    \  --subset-singlets <subset_string>                If select singlets, only select\
    \ singlets in the <subset_string>, which takes the format \"name1,name2,...\"\
    . Note that if --remap-singlets is specified, subsetting happens after remapping.\
    \ For example, we can only select singlets from sampe 1 and 3 using \"sample1,sample3\"\
    .\n\n  --genome <genome_name>                           If sample count matrix\
    \ is in either DGE, mtx, csv, tsv or loom format, use <genome_name> as the genome\
    \ reference name.\n  --focus <keys>                                   Focus analysis\
    \ on Unimodal data with <keys>. <keys> is a comma-separated list of keys. If None,\
    \ the self._selected will be the focused one.\n  --append <key>              \
    \                     Append Unimodal data <key> to any <keys> in --focus.\n\n\
    \  --output-loom                                    Output loom-formatted file.\n\
    \  --output-h5ad                                    Output h5ad-formatted file.\n\
    \n  --min-genes <number>                             Only keep cells with at least\
    \ <number> of genes. [default: 500]\n  --max-genes <number>                  \
    \           Only keep cells with less than <number> of genes. [default: 6000]\n\
    \  --min-umis <number>                              Only keep cells with at least\
    \ <number> of UMIs.\n  --max-umis <number>                              Only keep\
    \ cells with less than <number> of UMIs.\n  --mito-prefix <prefix>           \
    \                Prefix for mitochondrial genes. Can provide multiple prefixes\
    \ for multiple organisms (e.g. \"MT-\" means to use \"MT-\", \"GRCh38:MT-,mm10:mt-,MT-\"\
    \ means to use \"MT-\" for GRCh38, \"mt-\" for mm10 and \"MT-\" for all other\
    \ organisms). [default: GRCh38:MT-,mm10:mt-,MT-]\n  --percent-mito <percent> \
    \                        Only keep cells with mitochondrial percent less than\
    \ <percent>%. [default: 20.0]\n  --gene-percent-cells <percent>              \
    \     Only use genes that are expressed in at least <percent>% of cells to select\
    \ variable genes. [default: 0.05]\n\n  --output-filtration-results           \
    \           Output filtration results as a spreadsheet.\n  --plot-filtration-results\
    \                        Plot filtration results as PDF files.\n  --plot-filtration-figsize\
    \ <figsize>              Figure size for filtration plots. <figsize> is a comma-separated\
    \ list of two numbers, the width and height of the figure (e.g. 6,4).\n  --min-genes-before-filtration\
    \ <number>           If raw data matrix is input, empty barcodes will dominate\
    \ pre-filtration statistics. To avoid this, for raw data matrix, only consider\
    \ barcodes with at lease <number> genes for pre-filtration condition. [default:\
    \ 100]\n\n  --counts-per-cell-after <number>                 Total counts per\
    \ cell after normalization. [default: 1e5]\n\n  --select-hvf-flavor <flavor> \
    \                    Highly variable feature selection method. <flavor> can be\
    \ 'pegasus' or 'Seurat'. [default: pegasus]\n  --select-hvf-ngenes <nfeatures>\
    \                  Select top <nfeatures> highly variable features. If <flavor>\
    \ is 'Seurat' and <nfeatures> is 'None', select HVGs with z-score cutoff at 0.5.\
    \ [default: 2000]\n  --no-select-hvf                                  Do not select\
    \ highly variable features.\n  --plot-hvf                                    \
    \   Plot highly variable feature selection.\n\n  --correct-batch-effect      \
    \                     Correct for batch effects.\n  --correction-method <method>\
    \                     Batch correction method, can be either 'L/S' for location/scale\
    \ adjustment algorithm (Li and Wong. The analysis of Gene Expression Data 2003)\
    \ or 'harmony' for Harmony (Korsunsky et al. Nature Methods 2019) or 'scanorama'\
    \ for Scanorama (Hie et al. Nature Biotechnology 2019). [default: harmony]\n \
    \ --batch-group-by <expression>                    Only valid if correction method\
    \ is L/S. Batch correction assumes the differences in gene expression between\
    \ channels are due to batch effects. However, in many cases, we know that channels\
    \ can be partitioned into several groups and each group is biologically different\
    \ from others. In this case, we will only perform batch correction for channels\
    \ within each group. This option defines the groups. If <expression> is None,\
    \ we assume all channels are from one group. Otherwise, groups are defined according\
    \ to <expression>. <expression> takes the form of either 'attr', or 'attr1+attr2+...+attrn',\
    \ or 'attr=value11,...,value1n_1;value21,...,value2n_2;...;valuem1,...,valuemn_m'.\
    \ In the first form, 'attr' should be an existing sample attribute, and groups\
    \ are defined by 'attr'. In the second form, 'attr1',...,'attrn' are n existing\
    \ sample attributes and groups are defined by the Cartesian product of these n\
    \ attributes. In the last form, there will be m + 1 groups. A cell belongs to\
    \ group i (i > 0) if and only if its sample attribute 'attr' has a value among\
    \ valuei1,...,valuein_i. A cell belongs to group 0 if it does not belong to any\
    \ other groups.\n  --harmony-nclusters <nclusters>                  Number of\
    \ clusters used for Harmony batch correction.\n\n  --random-state <seed>     \
    \                       Random number generator seed. [default: 0]\n  --temp-folder\
    \ <temp_folder>                      Joblib temporary folder for memmapping numpy\
    \ arrays.\n\n  --calc-signature-scores <sig_list>               Calculate signature\
    \ scores for gene sets in <sig_list>. <sig_list> is a comma-separated list of\
    \ strings. Each string should either be a <GMT_file> or one of 'cell_cycle_human',\
    \ 'cell_cycle_mouse', 'gender_human', 'gender_mouse', 'mitochondrial_genes_human',\
    \ 'mitochondrial_genes_mouse', 'ribosomal_genes_human' and 'ribosomal_genes_mouse'.\n\
    \n  --pca-n <number>                                 Number of principal components.\
    \ [default: 50]\n  --pca-robust                                     Use 'arpack'\
    \ instead of 'randomized' as svd_solver for large sparse matrices. It will take\
    \ longer time to compute PCs, but the results are more numerically stable.\n\n\
    \  --knn-K <number>                                 Number of nearest neighbors\
    \ for building kNN graph. [default: 100]\n  --knn-full-speed                 \
    \                For the sake of reproducibility, we only run one thread for building\
    \ kNN indices. Turn on this option will allow multiple threads to be used for\
    \ index building. However, it will also reduce reproducibility due to the racing\
    \ between multiple threads.\n\n  --kBET                                      \
    \     Calculate kBET.\n  --kBET-batch <batch>                             kBET\
    \ batch keyword. [default: Channel]\n  --kBET-alpha <alpha>                  \
    \           kBET rejection alpha. [default: 0.05]\n  --kBET-K <K>            \
    \                         kBET K. [default: 25]\n\n  --diffmap               \
    \                         Calculate diffusion maps.\n  --diffmap-ndc <number>\
    \                           Number of diffusion components. [default: 100]\n \
    \ --diffmap-solver <solver>                        Solver for eigen decomposition,\
    \ either 'eigsh' or 'randomized'. [default: eigsh]\n  --diffmap-maxt <max_t> \
    \                          Maximum time stamp to search for the knee point. [default:\
    \ 5000]\n  --diffmap-to-3d                                  If map diffusion map\
    \ into 3D space using PCA.\n  --calculate-pseudotime <roots>                 \
    \  Calculate diffusion-based pseudotimes based on <roots>. <roots> should be a\
    \ comma-separated list of cell barcodes.\n\n  --louvain                      \
    \                  Run louvain clustering algorithm.\n  --louvain-resolution <resolution>\
    \                Resolution parameter for the louvain clustering algorithm. [default:\
    \ 1.3]\n  --louvain-class-label <label>                    Louvain cluster label\
    \ name in result. [default: louvain_labels]\n\n  --leiden                    \
    \                     Run leiden clustering algorithm.\n  --leiden-resolution\
    \ <resolution>                 Resolution parameter for the leiden clustering\
    \ algorithm. [default: 1.3]\n  --leiden-niter <niter>                        \
    \   Number of iterations of running the Leiden algorithm. If <niter> is negative,\
    \ run Leiden iteratively until no improvement. [default: -1]\n  --leiden-class-label\
    \ <label>                     Leiden cluster label name in result. [default: leiden_labels]\n\
    \n  --spectral-louvain                               Run spectral-louvain clustering\
    \ algorithm.\n  --spectral-louvain-basis <basis>                 Basis used for\
    \ KMeans clustering. Can be 'pca' or 'diffmap'. If 'diffmap' is not calculated,\
    \ use 'pca' instead. [default: diffmap]\n  --spectral-louvain-nclusters <number>\
    \            Number of first level clusters for Kmeans. [default: 30]\n  --spectral-louvain-nclusters2\
    \ <number>           Number of second level clusters for Kmeans. [default: 50]\n\
    \  --spectral-louvain-ninit <number>                Number of Kmeans tries for\
    \ first level clustering. Default is the same as scikit-learn Kmeans function.\
    \ [default: 10]\n  --spectral-louvain-resolution <resolution>       Resolution\
    \ parameter for louvain. [default: 1.3]\n  --spectral-louvain-class-label <label>\
    \           Spectral-louvain label name in result. [default: spectral_louvain_labels]\n\
    \n  --spectral-leiden                                Run spectral-leiden clustering\
    \ algorithm.\n  --spectral-leiden-basis <basis>                  Basis used for\
    \ KMeans clustering. Can be 'pca' or 'diffmap'. If 'diffmap' is not calculated,\
    \ use 'pca' instead. [default: diffmap]\n  --spectral-leiden-nclusters <number>\
    \             Number of first level clusters for Kmeans. [default: 30]\n  --spectral-leiden-nclusters2\
    \ <number>            Number of second level clusters for Kmeans. [default: 50]\n\
    \  --spectral-leiden-ninit <number>                 Number of Kmeans tries for\
    \ first level clustering. Default is the same as scikit-learn Kmeans function.\
    \ [default: 10]\n  --spectral-leiden-resolution <resolution>        Resolution\
    \ parameter for leiden. [default: 1.3]\n  --spectral-leiden-class-label <label>\
    \            Spectral-leiden label name in result. [default: spectral_leiden_labels]\n\
    \n  --tsne                                           Run FIt-SNE package to compute\
    \ t-SNE embeddings for visualization.\n  --tsne-perplexity <perplexity>      \
    \             t-SNE perplexity parameter. [default: 30]\n  --tsne-initialization\
    \ <choice>                   <choice> can be either 'random' or 'pca'. 'random'\
    \ refers to random initialization. 'pca' refers to PCA initialization as described\
    \ in (CITE Kobak et al. 2019) [default: pca]\n\n  --umap                     \
    \                      Run umap for visualization.\n  --umap-K <K>           \
    \                          K neighbors for umap. [default: 15]\n  --umap-min-dist\
    \ <number>                         Umap parameter. [default: 0.5]\n  --umap-spread\
    \ <spread>                           Umap parameter. [default: 1.0]\n\n  --fle\
    \                                            Run force-directed layout embedding.\n\
    \  --fle-K <K>                                      K neighbors for building graph\
    \ for FLE. [default: 50]\n  --fle-target-change-per-node <change>            Target\
    \ change per node to stop forceAtlas2. [default: 2.0]\n  --fle-target-steps <steps>\
    \                       Maximum number of iterations before stopping the forceAtlas2\
    \ algoritm. [default: 5000]\n  --fle-memory <memory>                         \
    \   Memory size in GB for the Java FA2 component. [default: 8]\n\n  --net-down-sample-fraction\
    \ <frac>                Down sampling fraction for net-related visualization.\
    \ [default: 0.1]\n  --net-down-sample-K <K>                          Use <K> neighbors\
    \ to estimate local density for each data point for down sampling. [default: 25]\n\
    \  --net-down-sample-alpha <alpha>                  Weighted down sample, proportional\
    \ to radius^alpha. [default: 1.0]\n\n  --net-regressor-L2-penalty <value>    \
    \           L2 penalty parameter for the deep net regressor. [default: 0.1]\n\n\
    \  --net-umap                                       Run net umap for visualization.\n\
    \  --net-umap-polish-learning-rate <rate>           After running the deep regressor\
    \ to predict new coordinate, what is the learning rate to use to polish the coordinates\
    \ for UMAP. [default: 1.0]\n  --net-umap-polish-nepochs <nepochs>            \
    \  Number of iterations for polishing UMAP run. [default: 40]\n  --net-umap-out-basis\
    \ <basis>                     Output basis for net-UMAP. [default: net_umap]\n\
    \n  --net-fle                                        Run net FLE.\n  --net-fle-polish-target-steps\
    \ <steps>            After running the deep regressor to predict new coordinate,\
    \ what is the number of force atlas 2 iterations. [default: 1500]\n  --net-fle-out-basis\
    \ <basis>                      Output basis for net-FLE. [default: net_fle]\n\n\
    \  --infer-doublets                                 Infer doublets using the method\
    \ described in https://github.com/klarman-cell-observatory/pegasus/raw/master/doublet_detection.pdf.\
    \ Obs attribute 'doublet_score' stores Scrublet-like doublet scores and attribute\
    \ 'demux_type' stores 'doublet/singlet' assignments.\n  --expected-doublet-rate\
    \ <rate>                   The expected doublet rate per sample. By default, calculate\
    \ the expected rate based on number of cells from the 10x multiplet rate table.\n\
    \  --dbl-cluster-attr <attr>                        <attr> refers to a cluster\
    \ attribute containing cluster labels (e.g. 'louvain_labels'). Doublet clusters\
    \ will be marked based on <attr> with the following criteria: passing the Fisher's\
    \ exact test and having >= 50% of cells identified as doublets. By default, the\
    \ first computed cluster attribute in the list of leiden, louvain, spectral_ledein\
    \ and spectral_louvain is used.\n\n  --citeseq                               \
    \         Input data contain both RNA and CITE-Seq modalities. This will set --focus\
    \ to be the RNA modality and --append to be the CITE-Seq modality. In addition,\
    \ 'ADT-' will be added in front of each antibody name to avoid name conflict with\
    \ genes in the RNA modality.\n  --citeseq-umap                               \
    \    For high quality cells kept in the RNA modality, generate a UMAP based on\
    \ their antibody expression. \n  --citeseq-umap-exclude <list>               \
    \     <list> is a comma-separated list of antibodies to be excluded from the UMAP\
    \ calculation (e.g. Mouse-IgG1,Mouse-IgG2a).\n\n  -h, --help                 \
    \                      Print out help information.\n\nOutputs:\n  output_name.zarr.zip\
    \                     Output file in Zarr format. To load this file in python,\
    \ use ``import pegasus; data = pegasus.read_input('output_name.zarr.zip')``. The\
    \ log-normalized expression matrix is stored in ``data.X`` as a CSR-format sparse\
    \ matrix. The ``obs`` field contains cell related attributes, including clustering\
    \ results. For example, ``data.obs_names`` records cell barcodes; ``data.obs['Channel']``\
    \ records the channel each cell comes from; ``data.obs['n_genes']``, ``data.obs['n_counts']``,\
    \ and ``data.obs['percent_mito']`` record the number of expressed genes, total\
    \ UMI count, and mitochondrial rate for each cell respectively; ``data.obs['louvain_labels']``\
    \ and ``data.obs['approx_louvain_labels']`` record each cell's cluster labels\
    \ using different clustring algorithms; ``data.obs['pseudo_time']`` records the\
    \ inferred pseudotime for each cell. The ``var`` field contains gene related attributes.\
    \ For example, ``data.var_names`` records gene symbols, ``data.var['gene_ids']``\
    \ records Ensembl gene IDs, and ``data.var['selected']`` records selected variable\
    \ genes. The ``obsm`` field records embedding coordiates. For example, ``data.obsm['X_pca']``\
    \ records PCA coordinates, ``data.obsm['X_tsne']`` records tSNE coordinates, ``data.obsm['X_umap']``\
    \ records UMAP coordinates, ``data.obsm['X_diffmap']`` records diffusion map coordinates,\
    \ ``data.obsm['X_diffmap_pca']`` records the first 3 PCs by projecting the diffusion\
    \ components using PCA, and ``data.obsm['X_fle']`` records the force-directed\
    \ layout coordinates from the diffusion components. The ``uns`` field stores other\
    \ related information, such as reference genome (``data.uns['genome']``). This\
    \ file can be loaded into R and converted into a Seurat object.\n  output_name.<group>.h5ad\
    \                 Optional output. Only exists if '--output-h5ad' is set. Results\
    \ in h5ad format per focused <group>. This file can be loaded into R and converted\
    \ into a Seurat object.\n  output_name.<group>.loom                 Optional output.\
    \ Only exists if '--output-loom' is set. Results in loom format per focused <group>.\n\
    \  output_name.<group>.filt.xlsx            Optional output. Only exists if '--output-filtration-results'\
    \ is set. Filtration statistics per focused <group>. This file has two sheets\
    \ --- Cell filtration stats and Gene filtration stats. The first sheet records\
    \ cell filtering results and it has 10 columns: Channel, channel name; kept, number\
    \ of cells kept; median_n_genes, median number of expressed genes in kept cells;\
    \ median_n_umis, median number of UMIs in kept cells; median_percent_mito, median\
    \ mitochondrial rate as UMIs between mitochondrial genes and all genes in kept\
    \ cells; filt, number of cells filtered out; total, total number of cells before\
    \ filtration, if the input contain all barcodes, this number is the cells left\
    \ after '--min-genes-on-raw' filtration; median_n_genes_before, median expressed\
    \ genes per cell before filtration; median_n_umis_before, median UMIs per cell\
    \ before filtration; median_percent_mito_before, median mitochondrial rate per\
    \ cell before filtration. The channels are sorted in ascending order with respect\
    \ to the number of kept cells per channel. The second sheet records genes that\
    \ failed to pass the filtering. This sheet has 3 columns: gene, gene name; n_cells,\
    \ number of cells this gene is expressed; percent_cells, the fraction of cells\
    \ this gene is expressed. Genes are ranked in ascending order according to number\
    \ of cells the gene is expressed. Note that only genes not expressed in any cell\
    \ are removed from the data. Other filtered genes are marked as non-robust and\
    \ not used for TPM-like normalization.\n  output_name.<group>.filt.gene.pdf  \
    \      Optional output. Only exists if '--plot-filtration-results' is set. This\
    \ file contains violin plots contrasting gene count distributions before and after\
    \ filtration per channel per focused <group>.\n  output_name.<group>.filt.UMI.pdf\
    \         Optional output. Only exists if '--plot-filtration-results' is set.\
    \ This file contains violin plots contrasting UMI count distributions before and\
    \ after filtration per channel per focused <group>.\n  output_name.<group>.filt.mito.pdf\
    \        Optional output. Only exists if '--plot-filtration-results' is set. This\
    \ file contains violin plots contrasting mitochondrial rate distributions before\
    \ and after filtration per channel per focused <group>.\n  output_name.<group>.hvf.pdf\
    \              Optional output. Only exists if '--plot-hvf' is set. This file\
    \ contains a scatter plot describing the highly variable gene selection procedure\
    \ per focused <group>.\n  output_name.<group>.<channel>.dbl.png    Optional output.\
    \ Only exists if '--infer-doublets' is set. Each figure consists of 4 panels showing\
    \ diagnostic plots for doublet inference. If there is only one channel in <group>,\
    \ file name becomes output_name.<group>.dbl.png.\n\nExamples:\n  pegasus cluster\
    \ -p 20 --correct-batch-effect --louvain --tsne manton_bm_10x.h5 manton_bm\n \
    \ pegasus cluster -p 20 --leiden --umap --net-fle example.zarr.zip example_out\n\
    \    \n"
  generated_using: *id003
  docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
- &id005 !Command
  command:
  - pegasus
  - scp_output
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --dense
    description: Output dense expression matrix instead.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --round-to
    description: 'Round expression to <ndigit> after the decimal point. [default:
      2]'
    args: !SimpleFlagArg
      name: ndigit
  parent: *id001
  subcommands:
  - !Command
    command:
    - pegasus
    - scp_output
    - output_name
    positional:
    - !Positional
      optional: false
      position: 0
      name: pegasus
      description: ''
    - !Positional
      optional: false
      position: 1
      name: scp_output
      description: ''
    - !Positional
      optional: false
      position: 2
      name: input_data_file
      description: ''
    named:
    - !Flag
      optional: true
      synonyms:
      - --round-to
      description: ''
      args: !SimpleFlagArg
        name: ndigit
    - !Flag
      optional: true
      synonyms:
      - --dense
      description: ''
      args: !EmptyFlagArg {}
    parent: *id005
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage:\n  pegasus scp_output [--dense --round-to <ndigit>] <input_data_file>\
      \ <output_name>\n  pegasus scp_output -h\n"
    generated_using: *id006
    docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: Print out help information.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Generate outputs for single cell portal.\n\nUsage:\n  pegasus scp_output\
    \ [--dense --round-to <ndigit>] <input_data_file> <output_name>\n  pegasus scp_output\
    \ -h\n\nArguments:\n  input_data_file        Analyzed single cell data in zarr\
    \ format.\n  output_name            Name prefix for all outputted files.\n\nOptions:\n\
    \  --dense                Output dense expression matrix instead.\n  --round-to\
    \ <ndigit>    Round expression to <ndigit> after the decimal point. [default:\
    \ 2]\n  -h, --help             Print out help information.\n\nOutputs:\n  output_name.scp.metadata.txt,\
    \ output_name.scp.barcodes.tsv, output_name.scp.genes.tsv, output_name.scp.matrix.mtx,\
    \ output_name.scp.*.coords.txt, output_name.scp.expr.txt         Files that single\
    \ cell portal needs.\n\nExamples:\n  pegasus scp_output manton_bm.zarr.zip manton_bm\n\
    \    \n"
  generated_using: *id003
  docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
- !Command
  command:
  - pegasus
  - demuxEM
  positional:
  - !Positional
    optional: false
    position: 0
    name: input_raw_gene_bc_matrices_h5
    description: Input raw RNA expression matrix in 10x hdf5 format.
  - !Positional
    optional: false
    position: 1
    name: input_hto_csv_file
    description: Input HTO (antibody tag) count matrix in CSV format.
  - !Positional
    optional: false
    position: 2
    name: output_name
    description: Output name. All outputs will use it as the prefix.
  - !Positional
    optional: false
    position: 0
    name: output_name_demux.zarr.zip
    description: RNA expression matrix with demultiplexed sample identities in Zarr
      format.
  - !Positional
    optional: false
    position: 1
    name: output_name.out.demuxEM.zarr.zip
    description: DemuxEM-calculated results in Zarr format, containing two datasets,
      one for HTO and one for RNA.
  - !Positional
    optional: false
    position: 2
    name: output_name.ambient_hashtag.hist.pdf
    description: Optional output. A histogram plot depicting hashtag distributions
      of empty droplets and non-empty droplets.
  - !Positional
    optional: false
    position: 3
    name: output_name.background_probabilities.bar.pdf
    description: Optional output. A bar plot visualizing the estimated hashtag background
      probability distribution.
  - !Positional
    optional: false
    position: 4
    name: output_name.real_content.hist.pdf
    description: Optional output. A histogram plot depicting hashtag distributions
      of not-real-cells and real-cells as defined by total number of expressed genes
      in the RNA assay.
  - !Positional
    optional: false
    position: 5
    name: output_name.rna_demux.hist.pdf
    description: Optional output. This figure consists of two plots. The first one
      is a horizontal bar plot depicting the percentage of RNA barcodes with at least
      one HTO count. The second plot is a histogram plot depicting RNA UMI distribution
      for singlets, doublets and unknown cells.
  - !Positional
    optional: false
    position: 6
    name: output_name.gene_name.violin.pdf
    description: Optional outputs. Violin plots depicting gender-specific gene expression
      across samples. We can have multiple plots if a gene list is provided in '--generate-gender-plot'
      option.
  named:
  - !Flag
    optional: true
    synonyms:
    - -p
    - --threads
    description: 'Number of threads. [default: 1]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --genome
    description: Reference genome name. If not provided, we will infer it from the
      expression matrix file.
    args: !SimpleFlagArg
      name: genome
  - !Flag
    optional: true
    synonyms:
    - --alpha-on-samples
    description: 'The Dirichlet prior concentration parameter (alpha) on samples.
      An alpha value < 1.0 will make the prior sparse. [default: 0.0]'
    args: !SimpleFlagArg
      name: alpha
  - !Flag
    optional: true
    synonyms:
    - --min-num-genes
    description: 'We only demultiplex cells/nuclei with at least <number> of expressed
      genes. [default: 100]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --min-num-umis
    description: 'We only demultiplex cells/nuclei with at least <number> of UMIs.
      [default: 100]'
    args: !SimpleFlagArg
      name: number
  - !Flag
    optional: true
    synonyms:
    - --min-signal-hashtag
    description: 'Any cell/nucleus with less than <count> hashtags from the signal
      will be marked as unknown. [default: 10.0]'
    args: !SimpleFlagArg
      name: count
  - !Flag
    optional: true
    synonyms:
    - --random-state
    description: 'The random seed used in the KMeans algorithm to separate empty ADT
      droplets from others. [default: 0]'
    args: !SimpleFlagArg
      name: seed
  - !Flag
    optional: true
    synonyms:
    - --generate-diagnostic-plots
    description: Generate a series of diagnostic plots, including the background/signal
      between HTO counts, estimated background probabilities, HTO distributions of
      cells and non-cells etc.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --generate-gender-plot
    description: Generate violin plots using gender-specific genes (e.g. Xist). <gene>
      is a comma-separated list of gene names.
    args: !SimpleFlagArg
      name: genes
  - !Flag
    optional: true
    synonyms:
    - -v
    description: ''
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: Print out help information.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag: !Flag
    optional: true
    synonyms:
    - -v
    - --version
    description: Show version.
    args: !EmptyFlagArg {}
  help_text: "Run the DemuxEM pipeline for cell-hashing/nucleus-hashing data.\n\n\
    Usage:\n  pegasus demuxEM [options] <input_raw_gene_bc_matrices_h5> <input_hto_csv_file>\
    \ <output_name>\n  pegasus demuxEM -h | --help\n  pegasus demuxEM -v | --version\n\
    \nArguments:\n  input_raw_gene_bc_matrices_h5           Input raw RNA expression\
    \ matrix in 10x hdf5 format.\n  input_hto_csv_file                      Input\
    \ HTO (antibody tag) count matrix in CSV format.\n  output_name              \
    \               Output name. All outputs will use it as the prefix.\n\nOptions:\n\
    \  -p <number>, --threads <number>            Number of threads. [default: 1]\n\
    \  --genome <genome>                          Reference genome name. If not provided,\
    \ we will infer it from the expression matrix file.\n  --alpha-on-samples <alpha>\
    \                 The Dirichlet prior concentration parameter (alpha) on samples.\
    \ An alpha value < 1.0 will make the prior sparse. [default: 0.0]\n\n  --min-num-genes\
    \ <number>                   We only demultiplex cells/nuclei with at least <number>\
    \ of expressed genes. [default: 100]\n  --min-num-umis <number>              \
    \      We only demultiplex cells/nuclei with at least <number> of UMIs. [default:\
    \ 100]\n  --min-signal-hashtag <count>               Any cell/nucleus with less\
    \ than <count> hashtags from the signal will be marked as unknown. [default: 10.0]\n\
    \  --random-state <seed>                      The random seed used in the KMeans\
    \ algorithm to separate empty ADT droplets from others. [default: 0]\n\n  --generate-diagnostic-plots\
    \                Generate a series of diagnostic plots, including the background/signal\
    \ between HTO counts, estimated background probabilities, HTO distributions of\
    \ cells and non-cells etc.\n  --generate-gender-plot <genes>             Generate\
    \ violin plots using gender-specific genes (e.g. Xist). <gene> is a comma-separated\
    \ list of gene names.\n\n  -v, --version                              Show version.\n\
    \  -h, --help                                 Print out help information.\n\n\
    Outputs:\n  output_name_demux.zarr.zip                             RNA expression\
    \ matrix with demultiplexed sample identities in Zarr format.\n  output_name.out.demuxEM.zarr.zip\
    \                       DemuxEM-calculated results in Zarr format, containing\
    \ two datasets, one for HTO and one for RNA.\n  output_name.ambient_hashtag.hist.pdf\
    \                   Optional output. A histogram plot depicting hashtag distributions\
    \ of empty droplets and non-empty droplets.\n  output_name.background_probabilities.bar.pdf\
    \           Optional output. A bar plot visualizing the estimated hashtag background\
    \ probability distribution.\n  output_name.real_content.hist.pdf             \
    \         Optional output. A histogram plot depicting hashtag distributions of\
    \ not-real-cells and real-cells as defined by total number of expressed genes\
    \ in the RNA assay.\n  output_name.rna_demux.hist.pdf                        \
    \ Optional output. This figure consists of two plots. The first one is a horizontal\
    \ bar plot depicting the percentage of RNA barcodes with at least one HTO count.\
    \ The second plot is a histogram plot depicting RNA UMI distribution for singlets,\
    \ doublets and unknown cells.\n  output_name.gene_name.violin.pdf            \
    \           Optional outputs. Violin plots depicting gender-specific gene expression\
    \ across samples. We can have multiple plots if a gene list is provided in '--generate-gender-plot'\
    \ option.\n\nExamples:\n  pegasus demuxEM -p 8 --generate-diagnostic-plots sample_raw_gene_bc_matrices.h5\
    \ sample_hto.csv sample_output\n    \n"
  generated_using: *id003
  docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
- !Command
  command:
  - pegasus
  - de_analysis
  positional:
  - !Positional
    optional: false
    position: 0
    name: input_data_file
    description: Single cell data with clustering calculated. DE results would be
      written back.
  - !Positional
    optional: false
    position: 1
    name: output_spreadsheet
    description: Output spreadsheet with DE results.
  - !Positional
    optional: false
    position: 0
    name: input_data_file
    description: DE results would be written back to the 'varm' field with name set
      by --de-key <key>.
  - !Positional
    optional: false
    position: 1
    name: output_spreadsheet
    description: 'An excel spreadsheet containing DE results. Each cluster has two
      tabs in the spreadsheet. One is for up-regulated genes and the other is for
      down-regulated genes. If DE was performed on conditions within each cluster.
      Each cluster will have number of conditions tabs and each condition tab contains
      two spreadsheet: up for up-regulated genes and down for down-regulated genes.'
  named:
  - !Flag
    optional: true
    synonyms:
    - --labels
    description: Use <attr> as cluster labels.
    args: !SimpleFlagArg
      name: attr
  - !Flag
    optional: true
    synonyms:
    - --condition
    description: Compute DE between conditions (one vs rest) in each cluster label
      if specified.
    args: !SimpleFlagArg
      name: attr
  - !Flag
    optional: true
    synonyms:
    - --de-key
    description: 'Store DE results into varm with key = <key>. [default: de_res]'
    args: !SimpleFlagArg
      name: key
  - !Flag
    optional: true
    synonyms:
    - -p
    description: 'Use <threads> threads. [default: 1]'
    args: !SimpleFlagArg
      name: threads
  - !Flag
    optional: true
    synonyms:
    - --t
    description: Calculate Welch's t-test.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --fisher
    description: Calculate Fisher's exact test.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --temp-folder
    description: Joblib temporary folder for memmapping numpy arrays.
    args: !SimpleFlagArg
      name: temp_folder
  - !Flag
    optional: true
    synonyms:
    - --alpha
    description: 'Control false discovery rate at <alpha>. [default: 0.05]'
    args: !SimpleFlagArg
      name: alpha
  - !Flag
    optional: true
    synonyms:
    - --ndigits
    description: 'Round non p-values and q-values to <ndigits> after decimal point
      in the excel. [default: 3]'
    args: !SimpleFlagArg
      name: ndigits
  - !Flag
    optional: true
    synonyms:
    - --quiet
    description: Do not show detailed intermediate outputs.
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: Print out help information.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Perform DE analysis. Calculate Mann-Whitney U test and AUROC values\
    \ by default.\n\nUsage:\n  pegasus de_analysis [options] (--labels <attr>) <input_data_file>\
    \ <output_spreadsheet>\n  pegasus de_analysis -h\n\nArguments:\n  input_data_file\
    \        Single cell data with clustering calculated. DE results would be written\
    \ back.\n  output_spreadsheet     Output spreadsheet with DE results.\n\nOptions:\n\
    \  --labels <attr>                  Use <attr> as cluster labels.\n  --condition\
    \ <attr>               Compute DE between conditions (one vs rest) in each cluster\
    \ label if specified.\n  --de-key <key>                   Store DE results into\
    \ varm with key = <key>. [default: de_res]\n  -p <threads>                   \
    \  Use <threads> threads. [default: 1]\n  --t                              Calculate\
    \ Welch's t-test.\n  --fisher                         Calculate Fisher's exact\
    \ test.\n  --temp-folder <temp_folder>      Joblib temporary folder for memmapping\
    \ numpy arrays.\n  --alpha <alpha>                  Control false discovery rate\
    \ at <alpha>. [default: 0.05]\n  --ndigits <ndigits>              Round non p-values\
    \ and q-values to <ndigits> after decimal point in the excel. [default: 3]\n\n\
    \  --quiet                          Do not show detailed intermediate outputs.\n\
    \  -h, --help                       Print out help information.\n\nOutputs:\n\
    \  input_data_file        DE results would be written back to the 'varm' field\
    \ with name set by --de-key <key>.\n  output_spreadsheet     An excel spreadsheet\
    \ containing DE results. Each cluster has two tabs in the spreadsheet. One is\
    \ for up-regulated genes and the other is for down-regulated genes. If DE was\
    \ performed on conditions within each cluster. Each cluster will have number of\
    \ conditions tabs and each condition tab contains two spreadsheet: up for up-regulated\
    \ genes and down for down-regulated genes.\n\nExamples:\n  pegasus de_analysis\
    \ -p 26 --labels louvain_labels --t --fisher manton_bm.zarr.zip manton_bm_de.xlsx\n\
    \    \n"
  generated_using: *id003
  docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: Show help information.
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - -v
  - --version
  description: Show version.
  args: !EmptyFlagArg {}
help_text: "Pegasus is a tool for analyzing transcriptomes of millions of single cells.\
  \ It is a command line tool, a python package and a base for Cloud-based analysis\
  \ workflows.\n\nUsage:\n  pegasus <command> [<args>...]\n  pegasus -h | --help\n\
  \  pegasus -v | --version\n\nSub-commands:\n  Preprocessing:\n    aggregate_matrix\
  \        Aggregate cellranger-outputted channel-specific count matrices into a single\
  \ count matrix. It also enables users to import metadata into the count matrix.\n\
  \  Demultiplexing:\n    demuxEM                 Demultiplex cells/nuclei based on\
  \ DNA barcodes for cell-hashing and nuclei-hashing data.\n  Analyzing:\n    cluster\
  \                 Perform first-pass analysis using the count matrix generated from\
  \ 'aggregate_matrix'. This subcommand could perform low quality cell filtration,\
  \ batch correction, variable gene selection, dimension reduction, diffusion map\
  \ calculation, graph-based clustering, visualization. The final results will be\
  \ written into zarr-formatted file, or h5ad file, which Seurat could load.\n   \
  \ de_analysis             Detect markers for each cluster by performing differential\
  \ expression analysis per cluster (within cluster vs. outside cluster). DE tests\
  \ include Welch's t-test, Fisher's exact test, Mann-Whitney U test. It can also\
  \ calculate AUROC values for each gene.\n    enrichment              Enrichment\
  \ analysis from marker lists generated by 'de_analysis'.\n    find_markers     \
  \       Find markers for each cluster by training classifiers using LightGBM.\n\
  \    annotate_cluster        This subcommand is used to automatically annotate cell\
  \ types for each cluster based on existing markers. Currently, it works for human/mouse\
  \ immune/brain cells, etc.\n  Plotting:\n    plot                    Make static\
  \ plots, which includes plotting tSNE, UMAP, and FLE embeddings by cluster labels\
  \ and different groups.\n  Web-based visualization:\n    scp_output            \
  \  Generate output files for single cell portal.\n  MISC:\n    check_indexes   \
  \        Check CITE-Seq/hashing indexes to avoid index collision.\n\nOptions:\n\
  \  -h, --help          Show help information.\n  -v, --version       Show version.\n\
  \nDescription:\n  This is a tool for analyzing millions of single cell RNA-Seq data.\n"
generated_using: *id003
docker_image: quay.io/biocontainers/pegasuspy:1.2.0--py38h0213d0e_1
