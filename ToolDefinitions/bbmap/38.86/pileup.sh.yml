!Command
command:
- pileup.sh
positional:
- !Positional
  description: ''
  position: 0
  name: in
  optional: false
named:
- !Flag
  description: "This will set Java's memory usage, overriding\nautodetection. -Xmx20g\
    \ will\nspecify 20 gigs of RAM, and -Xmx200m will specify 200 megs.\nThe max is\
    \ typically 85% of physical memory."
  synonyms:
  - -Xmx
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "This flag will cause the process to exit if an out-of-memory\nexception\
    \ occurs.  Requires Java 8u92+."
  synonyms:
  - -eoom
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Disable assertions.
  synonyms:
  - -da
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\nWritten by Brian Bushnell\nLast modified April 30, 2020\n\nDescription:\
  \  Calculates per-scaffold or per-base coverage information from an unsorted sam\
  \ or bam file.\nSupports SAM/BAM format for reads and FASTA for reference.\nSorting\
  \ is not needed, so output may be streamed directly from a mapping program.\nRequires\
  \ a minimum of 1 bit per reference base plus 100 bytes per scaffold (even if no\
  \ reference is specified).\nIf per-base coverage is needed (including for stdev\
  \ and median), at least 4 bytes per base is needed.\n\nUsage:        pileup.sh in=<input>\
  \ out=<output>\n\nInput Parameters:\nin=<file>           The input sam file; this\
  \ is the only required parameter.\nref=<file>          Scans a reference fasta for\
  \ per-scaffold GC counts, not otherwise needed.\nfastaorf=<file>     An optional\
  \ fasta file with ORF header information in PRODIGAL's output format.  Must also\
  \ specify 'outorf'.\nunpigz=t            Decompress with pigz for faster decompression.\n\
  addfromref=t        Allow ref scaffolds not present in sam header to be added from\
  \ the reference.\naddfromreads=f      Allow ref scaffolds not present in sam header\
  \ to be added from the reads.\n                    Note that in this case the ref\
  \ scaffold lengths will be inaccurate.\n\nOutput Parameters:\nout=<file>       \
  \   (covstats) Per-scaffold coverage info.\nrpkm=<file>         Per-scaffold RPKM/FPKM\
  \ counts.\ntwocolumn=f         Change to true to print only ID and Avg_fold instead\
  \ of all 6 columns.\ncountgc=t           Enable/disable counting of read GC content.\n\
  outorf=<file>       Per-orf coverage info to this file (only if 'fastaorf' is specified).\n\
  outsam=<file>       Print the input sam stream to this file (or stdout).  Useful\
  \ for piping data.\nhist=<file>         Histogram of # occurrences of each depth\
  \ level.\nbasecov=<file>      Coverage per base location.\nbincov=<file>       Binned\
  \ coverage per location (one line per X bases).\nbinsize=1000        Binsize for\
  \ binned coverage output.\nkeepshortbins=t     (ksb) Keep residual bins shorter\
  \ than binsize.\nnormcov=<file>      Normalized coverage by normalized location\
  \ (X lines per scaffold).\nnormcovo=<file>     Overall normalized coverage by normalized\
  \ location (X lines for the entire assembly).\nnormb=-1            If positive,\
  \ use a fixed number of bins per scaffold; affects 'normcov' and 'normcovo'.\nnormc=f\
  \             Normalize coverage to fraction of max per scaffold; affects 'normcov'\
  \ and 'normcovo'.\ndelta=f             Only print base coverage lines when the coverage\
  \ differs from the previous base.\nnzo=f               Only print scaffolds with\
  \ nonzero coverage.\nconcise=f           Write 'basecov' in a more concise format.\n\
  header=t            (hdr) Include headers in output files.\nheaderpound=t      \
  \ (#) Prepend header lines with '#' symbol.\nstdev=t             Calculate coverage\
  \ standard deviation.\ncovminscaf=0        (minscaf) Don't print coverage for scaffolds\
  \ shorter than this.\ncovwindow=0         Calculate how many bases are in windows\
  \ of this size with\n                    low average coverage.  Produces an extra\
  \ stats column.\ncovwindowavg=5      Average coverage below this will be classified\
  \ as low.\nk=0                 If positive, calculate kmer coverage statstics for\
  \ this kmer length.\nkeyvalue=f          Output statistics to screen as key=value\
  \ pairs.\nmincov=1            When calculating percent covered, ignore bases under\
  \ this depth.\n\nProcessing Parameters:\nstrandedcov=f       Track coverage for\
  \ plus and minus strand independently.\nstartcov=f          Only track start positions\
  \ of reads.\nstopcov=f           Only track stop positions of reads.\nsecondary=t\
  \         Use secondary alignments, if present.\nsoftclip=f          Include soft-clipped\
  \ bases in coverage.\nminmapq=0           (minq) Ignore alignments with mapq below\
  \ this.\nphysical=f          (physcov) Calculate physical coverage for paired reads.\
  \  This includes the unsequenced bases.\ntlen=t              Track physical coverage\
  \ from the tlen field rather than recalculating it.\narrays=auto         Set to\
  \ t/f to manually force the use of coverage arrays.  Arrays and bitsets are mutually\
  \ exclusive.\nbitsets=auto        Set to t/f to manually force the use of coverage\
  \ bitsets.\n32bit=f             Set to true if you need per-base coverage over 64k;\
  \ does not affect per-scaffold coverage precision.\n                    This option\
  \ will double RAM usage (when calculating per-base coverage).\ndelcoverage=t   \
  \    (delcov) Count bases covered by deletions or introns as covered.\n        \
  \            True is faster than false.\ndupecoverage=t      (dupes) Include reads\
  \ flagged as duplicates in coverage.\nsamstreamer=t       (ss) Load reads multithreaded\
  \ to increase speed.\n\nTrimming Parameters: \n** NOTE: These are applied before\
  \ adding coverage, to allow mimicking **\n** tools like CallVariants, which uses\
  \ 'qtrim=r trimq=10 border=5'    **\nqtrim=f             Quality-trim.  May be set\
  \ to:\n                       f (false): Don't quality-trim.\n                 \
  \      r (right): Trim right (3') end only.\n                       l (left): Trim\
  \ right (5') end only.\n                       rl (both): Trim both ends.\ntrimq=-1\
  \            If positive, quality-trim to this threshold.\nborder=0            Ignore\
  \ this many bases on the left and right end.\n\nOutput format (tab-delimited):\n\
  ID, Avg_fold, Length, Ref_GC, Covered_percent, Covered_bases, Plus_reads, Minus_reads,\
  \ Read_GC, Median_fold, Std_Dev\n\nID:                Scaffold ID\nLength:     \
  \       Scaffold length\nRef_GC:            GC ratio of reference\nAvg_fold:   \
  \       Average fold coverage of this scaffold\nCovered_percent:   Percent of scaffold\
  \ with any coverage (only if arrays or bitsets are used)\nCovered_bases:     Number\
  \ of bases with any coverage (only if arrays or bitsets are used)\nPlus_reads: \
  \       Number of reads mapped to plus strand\nMinus_reads:       Number of reads\
  \ mapped to minus strand\nRead_GC:           Average GC ratio of reads mapped to\
  \ this scaffold\nMedian_fold:       Median fold coverage of this scaffold (only\
  \ if arrays are used)\nStd_Dev:           Standard deviation of coverage (only if\
  \ arrays are used)\n\nJava Parameters:\n\n-Xmx               This will set Java's\
  \ memory usage, overriding \n                   autodetection. -Xmx20g will \n \
  \                  specify 20 gigs of RAM, and -Xmx200m will specify 200 megs. \
  \ \n                   The max is typically 85% of physical memory.\n-eoom     \
  \         This flag will cause the process to exit if an out-of-memory\n       \
  \            exception occurs.  Requires Java 8u92+.\n-da                Disable\
  \ assertions.\n\nPlease contact Brian Bushnell at bbushnell@lbl.gov if you encounter\
  \ any problems.\n\n"
generated_using:
- --help
