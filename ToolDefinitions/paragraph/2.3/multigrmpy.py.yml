!Command
command:
- multigrmpy.py
positional:
- !Positional
  description: --graph-sequence-matching GRAPH_SEQUENCE_MATCHING
  position: 0
  name: stderr
  optional: false
named:
- !Flag
  description: Input file of variants. Must be either JSON or VCF.
  synonyms:
  - -i
  - --input
  args: !SimpleFlagArg
    name: INPUT
  optional: true
- !Flag
  description: Manifest of samples with path and bam stats.
  synonyms:
  - -m
  - --manifest
  args: !SimpleFlagArg
    name: MANIFEST
  optional: true
- !Flag
  description: Output directory.
  synonyms:
  - -o
  - --output
  args: !SimpleFlagArg
    name: OUTPUT
  optional: true
- !Flag
  description: "Write alignment JSON files into the output folder\n(large!)."
  synonyms:
  - -A
  - --write-alignments
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Infer read haplotype paths
  synonyms:
  - --infer-read-haplotypes
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Reference genome fasta file.
  synonyms:
  - -r
  - --reference-sequence
  args: !SimpleFlagArg
    name: REFERENCE
  optional: true
- !Flag
  description: Number of events to process in parallel.
  synonyms:
  - --threads
  - -t
  args: !SimpleFlagArg
    name: THREADS
  optional: true
- !Flag
  description: Do not delete temp files.
  synonyms:
  - --keep-scratch
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Directory for temp files
  synonyms:
  - --scratch-dir
  args: !SimpleFlagArg
    name: SCRATCH_DIR
  optional: true
- !Flag
  description: Path to the grmpy executable
  synonyms:
  - --grmpy
  args: !SimpleFlagArg
    name: GRMPY
  optional: true
- !Flag
  description: Write logging information into file rather than to
  synonyms:
  - --logfile
  args: !SimpleFlagArg
    name: LOGFILE
  optional: true
- !Flag
  description: Use klib smith waterman aligner.
  synonyms:
  - --klib-sequence-matching
  args: !SimpleFlagArg
    name: KLIB_SEQUENCE_MATCHING
  optional: true
- !Flag
  description: Use kmer aligner.
  synonyms:
  - --kmer-sequence-matching
  args: !SimpleFlagArg
    name: KMER_SEQUENCE_MATCHING
  optional: true
- !Flag
  description: "Kmer length for uniqueness check during read\nfiltering."
  synonyms:
  - --bad-align-uniq-kmer-len
  args: !SimpleFlagArg
    name: BAD_ALIGN_UNIQ_KMER_LEN
  optional: true
- !Flag
  description: "Keep long insertion sequences in the graph rather than\ntrimming them\
    \ at the read / padding length."
  synonyms:
  - --no-alt-splitting
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Raise logging level from warning to info.
  synonyms:
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Set logging level to output errors only.
  synonyms:
  - --quiet
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Log debug level events.
  synonyms:
  - --debug
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: JSON string or file with genotyping model parameters.
  synonyms:
  - -G
  - --genotyping-parameters
  args: !SimpleFlagArg
    name: GENOTYPING_PARAMETERS
  optional: true
- !Flag
  description: Maximum number of reads to process for a single event.
  synonyms:
  - -M
  - --max-reads-per-event
  args: !SimpleFlagArg
    name: MAX_READS_PER_EVENT
  optional: true
- !Flag
  description: "Mode for splitting the input VCF: lines (default) --\none graph per\
    \ record ; full -- one graph for the whole\nVCF ; by_id -- use the VCF id column\
    \ to group adjacent\nrecords ; superloci -- split VCF into blocks where\nrecords\
    \ are separated by at least read-length\ncharacters"
  synonyms:
  - --vcf-split
  args: !ChoiceFlagArg
    choices: !!set
      full:
      superloci:
      by_id:
      lines:
  optional: true
- !Flag
  description: "Read length -- this is used to add reference padding\nwhen converting\
    \ VCF to graphs."
  synonyms:
  - -p
  - --read-length
  args: !SimpleFlagArg
    name: READ_LENGTH
  optional: true
- !Flag
  description: "Maximum length of reference nodes before they get\npadded and truncated."
  synonyms:
  - -l
  - --max-ref-node-length
  args: !SimpleFlagArg
    name: MAX_REF_NODE_LENGTH
  optional: true
- !Flag
  description: Retrieve reference sequence for REF nodes
  synonyms:
  - --retrieve-reference-sequence
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Type of complex graph to generate. Same as --graph-\ntype in vcf2paragraph."
  synonyms:
  - --graph-type
  args: !ChoiceFlagArg
    choices: !!set
      alleles:
      haplotypes:
  optional: true
- !Flag
  description: "Key in INFO field to indicate sequence of symbolic\n<INS>\n"
  synonyms:
  - --ins-info-key
  args: !SimpleFlagArg
    name: INS_INFO_KEY
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "usage: Multigrmpy.py [-h] -i INPUT -m MANIFEST -o OUTPUT [-A]\n      \
  \               [--infer-read-haplotypes] -r REFERENCE\n                     [--threads\
  \ THREADS] [--keep-scratch]\n                     [--scratch-dir SCRATCH_DIR] [--grmpy\
  \ GRMPY]\n                     [--logfile LOGFILE]\n                     [--graph-sequence-matching\
  \ GRAPH_SEQUENCE_MATCHING]\n                     [--klib-sequence-matching KLIB_SEQUENCE_MATCHING]\n\
  \                     [--kmer-sequence-matching KMER_SEQUENCE_MATCHING]\n      \
  \               [--bad-align-uniq-kmer-len BAD_ALIGN_UNIQ_KMER_LEN]\n          \
  \           [--no-alt-splitting] [--verbose | --quiet | --debug]\n             \
  \        [-G GENOTYPING_PARAMETERS | -M MAX_READS_PER_EVENT]\n                 \
  \    [--vcf-split {lines,full,by_id,superloci} | -p READ_LENGTH | -l MAX_REF_NODE_LENGTH\
  \ | --retrieve-reference-sequence | --graph-type {alleles,haplotypes} | --ins-info-key\
  \ INS_INFO_KEY]\n\noptional arguments:\n  -h, --help            show this help message\
  \ and exit\n  -i INPUT, --input INPUT\n                        Input file of variants.\
  \ Must be either JSON or VCF.\n  -m MANIFEST, --manifest MANIFEST\n            \
  \            Manifest of samples with path and bam stats.\n  -o OUTPUT, --output\
  \ OUTPUT\n                        Output directory.\n  -A, --write-alignments\n\
  \                        Write alignment JSON files into the output folder\n   \
  \                     (large!).\n  --infer-read-haplotypes\n                   \
  \     Infer read haplotype paths\n  -r REFERENCE, --reference-sequence REFERENCE\n\
  \                        Reference genome fasta file.\n  --threads THREADS, -t THREADS\n\
  \                        Number of events to process in parallel.\n  --keep-scratch\
  \        Do not delete temp files.\n  --scratch-dir SCRATCH_DIR\n              \
  \          Directory for temp files\n  --grmpy GRMPY         Path to the grmpy executable\n\
  \  --logfile LOGFILE     Write logging information into file rather than to\n  \
  \                      stderr\n  --graph-sequence-matching GRAPH_SEQUENCE_MATCHING\n\
  \                        Use graph aligner.\n  --klib-sequence-matching KLIB_SEQUENCE_MATCHING\n\
  \                        Use klib smith waterman aligner.\n  --kmer-sequence-matching\
  \ KMER_SEQUENCE_MATCHING\n                        Use kmer aligner.\n  --bad-align-uniq-kmer-len\
  \ BAD_ALIGN_UNIQ_KMER_LEN\n                        Kmer length for uniqueness check\
  \ during read\n                        filtering.\n  --no-alt-splitting    Keep\
  \ long insertion sequences in the graph rather than\n                        trimming\
  \ them at the read / padding length.\n  --verbose             Raise logging level\
  \ from warning to info.\n  --quiet               Set logging level to output errors\
  \ only.\n  --debug               Log debug level events.\n  -G GENOTYPING_PARAMETERS,\
  \ --genotyping-parameters GENOTYPING_PARAMETERS\n                        JSON string\
  \ or file with genotyping model parameters.\n  -M MAX_READS_PER_EVENT, --max-reads-per-event\
  \ MAX_READS_PER_EVENT\n                        Maximum number of reads to process\
  \ for a single event.\n  --vcf-split {lines,full,by_id,superloci}\n            \
  \            Mode for splitting the input VCF: lines (default) --\n            \
  \            one graph per record ; full -- one graph for the whole\n          \
  \              VCF ; by_id -- use the VCF id column to group adjacent\n        \
  \                records ; superloci -- split VCF into blocks where\n          \
  \              records are separated by at least read-length\n                 \
  \       characters\n  -p READ_LENGTH, --read-length READ_LENGTH\n              \
  \          Read length -- this is used to add reference padding\n              \
  \          when converting VCF to graphs.\n  -l MAX_REF_NODE_LENGTH, --max-ref-node-length\
  \ MAX_REF_NODE_LENGTH\n                        Maximum length of reference nodes\
  \ before they get\n                        padded and truncated.\n  --retrieve-reference-sequence\n\
  \                        Retrieve reference sequence for REF nodes\n  --graph-type\
  \ {alleles,haplotypes}\n                        Type of complex graph to generate.\
  \ Same as --graph-\n                        type in vcf2paragraph.\n  --ins-info-key\
  \ INS_INFO_KEY\n                        Key in INFO field to indicate sequence of\
  \ symbolic\n                        <INS>\n"
generated_using:
- --help
