!Command
command: &id001
- metagene
positional: []
named: []
parent:
subcommands:
- !Command
  command: &id002
  - metagene
  - count
  positional:
  - !Positional
    description: "Text file containing maximal spanning windows and\noffsets, generated\
      \ by the ``generate`` subprogram."
    position: 0
    name: roi_file
    optional: false
  - !Positional
    description: Basename for output files
    position: 1
    name: outbase
    optional: false
  named:
  - !Flag
    description: "Minimum counts required in normalization region to be\nincluded\
      \ in metagene average (Default: 10)"
    synonyms:
    - --min_counts
    args: !SimpleFlagArg
      name: N
    optional: true
  - !Flag
    description: "N  Portion of each window against which its individual\nraw count\
      \ profile will be normalized. Specify two\nintegers, in nucleotide distance\
      \ from landmark\n(negative for upstream, positive for downstream.\nSurround\
      \ negative numbers with quotes.). (Default: 20\n50)"
    synonyms:
    - --normalize_over
    args: !SimpleFlagArg
      name: N
    optional: true
  - !Flag
    description: "N     Deprecated. Use ``--normalize_over`` instead.\nFormerly, Portion\
      \ of each window against which its\nindividual raw count profile will be normalized.\n\
      Specify two integers, in nucleotide distance, from 5'\nend of window. (Default:\
      \ 70 100)"
    synonyms:
    - --norm_region
    args: !SimpleFlagArg
      name: N
    optional: true
  - !Flag
    description: Name of landmark at zero point, optional.
    synonyms:
    - --landmark
    args: !SimpleFlagArg
      name: LANDMARK
    optional: true
  - !Flag
    description: "If supplied, use columnwise mean to generate profile\n(Default:\
      \ use median)"
    synonyms:
    - --use_mean
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Save intermediate count files. Useful for additional\ncomputations\
      \ (Default: False)"
    synonyms:
    - --keep
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Suppress all warning messages. Cannot use with '-v'.
    synonyms:
    - -q
    - --quiet
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Increase verbosity. With '-v', show every warning.\nWith '-vv',\
      \ turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each\
      \ type of warning once)"
    synonyms:
    - -v
    - --verbose
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "One or more count or alignment file(s) from a single\nsample or\
      \ set of samples to be pooled."
    synonyms:
    - --count_files
    args: !RepeatFlagArg
      name: COUNT_FILES
    optional: true
  - !Flag
    description: "Format of file containing alignments or counts\n(Default: BAM)"
    synonyms:
    - --countfile_format
    args: !ChoiceFlagArg
      choices: !!set
        bigwig:
        BAM:
        bowtie:
        wiggle:
    optional: true
  - !Flag
    description: "Sum used in normalization of counts and RPKM/RPNT\ncalculations\
      \ (Default: total mapped reads/counts in\ndataset)"
    synonyms:
    - --sum
    args: !SimpleFlagArg
      name: SUM
    optional: true
  - !Flag
    description: "Minimum read length required to be included (BAM &\nbowtie files\
      \ only. Default: 25)"
    synonyms:
    - --min_length
    args: !SimpleFlagArg
      name: N
    optional: true
  - !Flag
    description: "Maximum read length permitted to be included (BAM &\nbowtie files\
      \ only. Default: 100)"
    synonyms:
    - --max_length
    args: !SimpleFlagArg
      name: N
    optional: true
  - !Flag
    description: "Maximum desired memory footprint in MB to devote to\nBigBed/BigWig\
      \ files. May be exceeded by large queries.\n(Default: 0, No maximum)"
    synonyms:
    - --maxmem
    args: !SimpleFlagArg
      name: MAXMEM
    optional: true
  - !Flag
    description: "Use slower but memory-efficient implementation for big\ngenomes\
      \ or for memory-limited computers. For wiggle &\nbowtie files only."
    synonyms:
    - --big_genome
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Map read alignment to a variable offset from 5'\nposition of read,\
      \ with offset determined by read\nlength. Requires `--offset` below"
    synonyms:
    - --fiveprime_variable
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Map read alignment to 5' position.
    synonyms:
    - --fiveprime
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Map read alignment to 3' position
    synonyms:
    - --threeprime
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Subtract N positions from each end of read, and add\n1/(length-N),\
      \ to each remaining position, where N is\nspecified by `--nibble`"
    synonyms:
    - --center
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "For `--fiveprime` or `--threeprime`, provide an\ninteger representing\
      \ the offset into the read,\nstarting from either the 5' or 3' end, at which\
      \ data\nshould be plotted. For `--fiveprime_variable`, provide\nthe filename\
      \ of a two-column tab-delimited text file,\nin which first column represents\
      \ read length or the\nspecial keyword `'default'`, and the second column\nrepresents\
      \ the offset from the five prime end of that\nread length at which the read\
      \ should be mapped.\n(Default: 0)"
    synonyms:
    - --offset
    args: !SimpleFlagArg
      name: OFFSET
    optional: true
  - !Flag
    description: "For use with `--center` only. nt to remove from each\nend of read\
      \ before mapping (Default: 0)"
    synonyms:
    - --nibble
    args: !SimpleFlagArg
      name: N
    optional: true
  - !Flag
    description: 'File format for figure(s); Default: png)'
    synonyms:
    - --figformat
    args: !ChoiceFlagArg
      choices: !!set
        eps:
        ps:
        png:
        raw:
        svg:
        svgz:
        pdf:
        pgf:
        rgba:
    optional: true
  - !Flag
    description: "N         Figure width and height, in inches. (Default: use\nmatplotlibrc\
      \ params)"
    synonyms:
    - --figsize
    args: !SimpleFlagArg
      name: N
    optional: true
  - !Flag
    description: Base title for plot(s).
    synonyms:
    - --title
    args: !SimpleFlagArg
      name: TITLE
    optional: true
  - !Flag
    description: "Matplotlib color map from which palette will be made\n(e.g. 'Blues','autumn','Set1';\
      \ default: use colors\nfrom ``--stylesheet`` if given, or color cycle in\nmatplotlibrc)"
    synonyms:
    - --cmap
    args: !SimpleFlagArg
      name: CMAP
    optional: true
  - !Flag
    description: 'Figure resolution (Default: 150)'
    synonyms:
    - --dpi
    args: !SimpleFlagArg
      name: DPI
    optional: true
  - !Flag
    description: "{Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\n\
      Use this matplotlib stylesheet instead of matplotlibrc\nparams\n"
    synonyms:
    - --stylesheet
    args: !EmptyFlagArg {}
    optional: true
  parent: &id003 !Command
    command: *id001
    positional: []
    named: []
    parent:
    subcommands:
    - !Command
      command: *id002
      positional:
      - !Positional
        description: "Text file containing maximal spanning windows and\noffsets,\
          \ generated by the ``generate`` subprogram."
        position: 0
        name: roi_file
        optional: false
      - !Positional
        description: Basename for output files
        position: 1
        name: outbase
        optional: false
      named:
      - !Flag
        description: "Minimum counts required in normalization region to be\nincluded\
          \ in metagene average (Default: 10)"
        synonyms:
        - --min_counts
        args: !SimpleFlagArg
          name: N
        optional: true
      - !Flag
        description: "N  Portion of each window against which its individual\nraw\
          \ count profile will be normalized. Specify two\nintegers, in nucleotide\
          \ distance from landmark\n(negative for upstream, positive for downstream.\n\
          Surround negative numbers with quotes.). (Default: 20\n50)"
        synonyms:
        - --normalize_over
        args: !SimpleFlagArg
          name: N
        optional: true
      - !Flag
        description: "N     Deprecated. Use ``--normalize_over`` instead.\nFormerly,\
          \ Portion of each window against which its\nindividual raw count profile\
          \ will be normalized.\nSpecify two integers, in nucleotide distance, from\
          \ 5'\nend of window. (Default: 70 100)"
        synonyms:
        - --norm_region
        args: !SimpleFlagArg
          name: N
        optional: true
      - !Flag
        description: Name of landmark at zero point, optional.
        synonyms:
        - --landmark
        args: !SimpleFlagArg
          name: LANDMARK
        optional: true
      - !Flag
        description: "If supplied, use columnwise mean to generate profile\n(Default:\
          \ use median)"
        synonyms:
        - --use_mean
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Save intermediate count files. Useful for additional\ncomputations\
          \ (Default: False)"
        synonyms:
        - --keep
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: Suppress all warning messages. Cannot use with '-v'.
        synonyms:
        - -q
        - --quiet
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Increase verbosity. With '-v', show every warning.\nWith '-vv',\
          \ turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each\
          \ type of warning once)"
        synonyms:
        - -v
        - --verbose
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "One or more count or alignment file(s) from a single\nsample\
          \ or set of samples to be pooled."
        synonyms:
        - --count_files
        args: !RepeatFlagArg
          name: COUNT_FILES
        optional: true
      - !Flag
        description: "Format of file containing alignments or counts\n(Default: BAM)"
        synonyms:
        - --countfile_format
        args: !ChoiceFlagArg
          choices: !!set
            ? wiggle
            ? bowtie
            ? BAM
            ? bigwig
        optional: true
      - !Flag
        description: "Sum used in normalization of counts and RPKM/RPNT\ncalculations\
          \ (Default: total mapped reads/counts in\ndataset)"
        synonyms:
        - --sum
        args: !SimpleFlagArg
          name: SUM
        optional: true
      - !Flag
        description: "Minimum read length required to be included (BAM &\nbowtie files\
          \ only. Default: 25)"
        synonyms:
        - --min_length
        args: !SimpleFlagArg
          name: N
        optional: true
      - !Flag
        description: "Maximum read length permitted to be included (BAM &\nbowtie\
          \ files only. Default: 100)"
        synonyms:
        - --max_length
        args: !SimpleFlagArg
          name: N
        optional: true
      - !Flag
        description: "Maximum desired memory footprint in MB to devote to\nBigBed/BigWig\
          \ files. May be exceeded by large queries.\n(Default: 0, No maximum)"
        synonyms:
        - --maxmem
        args: !SimpleFlagArg
          name: MAXMEM
        optional: true
      - !Flag
        description: "Use slower but memory-efficient implementation for big\ngenomes\
          \ or for memory-limited computers. For wiggle &\nbowtie files only."
        synonyms:
        - --big_genome
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Map read alignment to a variable offset from 5'\nposition of\
          \ read, with offset determined by read\nlength. Requires `--offset` below"
        synonyms:
        - --fiveprime_variable
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: Map read alignment to 5' position.
        synonyms:
        - --fiveprime
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: Map read alignment to 3' position
        synonyms:
        - --threeprime
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Subtract N positions from each end of read, and add\n1/(length-N),\
          \ to each remaining position, where N is\nspecified by `--nibble`"
        synonyms:
        - --center
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "For `--fiveprime` or `--threeprime`, provide an\ninteger representing\
          \ the offset into the read,\nstarting from either the 5' or 3' end, at which\
          \ data\nshould be plotted. For `--fiveprime_variable`, provide\nthe filename\
          \ of a two-column tab-delimited text file,\nin which first column represents\
          \ read length or the\nspecial keyword `'default'`, and the second column\n\
          represents the offset from the five prime end of that\nread length at which\
          \ the read should be mapped.\n(Default: 0)"
        synonyms:
        - --offset
        args: !SimpleFlagArg
          name: OFFSET
        optional: true
      - !Flag
        description: "For use with `--center` only. nt to remove from each\nend of\
          \ read before mapping (Default: 0)"
        synonyms:
        - --nibble
        args: !SimpleFlagArg
          name: N
        optional: true
      - !Flag
        description: 'File format for figure(s); Default: png)'
        synonyms:
        - --figformat
        args: !ChoiceFlagArg
          choices: !!set
            ? svg
            ? ps
            ? pgf
            ? raw
            ? eps
            ? png
            ? svgz
            ? pdf
            ? rgba
        optional: true
      - !Flag
        description: "N         Figure width and height, in inches. (Default: use\n\
          matplotlibrc params)"
        synonyms:
        - --figsize
        args: !SimpleFlagArg
          name: N
        optional: true
      - !Flag
        description: Base title for plot(s).
        synonyms:
        - --title
        args: !SimpleFlagArg
          name: TITLE
        optional: true
      - !Flag
        description: "Matplotlib color map from which palette will be made\n(e.g.\
          \ 'Blues','autumn','Set1'; default: use colors\nfrom ``--stylesheet`` if\
          \ given, or color cycle in\nmatplotlibrc)"
        synonyms:
        - --cmap
        args: !SimpleFlagArg
          name: CMAP
        optional: true
      - !Flag
        description: 'Figure resolution (Default: 150)'
        synonyms:
        - --dpi
        args: !SimpleFlagArg
          name: DPI
        optional: true
      - !Flag
        description: "{Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\n\
          Use this matplotlib stylesheet instead of matplotlibrc\nparams\n"
        synonyms:
        - --stylesheet
        args: !EmptyFlagArg {}
        optional: true
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: show this help message and exit
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: metagene count [-h] [-q] [-v]\n                      [--count_files\
        \ COUNT_FILES [COUNT_FILES ...]]\n                      [--countfile_format\
        \ {BAM,bigwig,bowtie,wiggle}]\n                      [--sum SUM] [--min_length\
        \ N] [--max_length N]\n                      [--maxmem MAXMEM] [--big_genome]\
        \ [--fiveprime_variable]\n                      [--fiveprime] [--threeprime]\
        \ [--center]\n                      [--offset OFFSET] [--nibble N]\n     \
        \                 [--figformat {eps,pdf,pgf,png,ps,raw,rgba,svg,svgz}]\n \
        \                     [--figsize N N] [--title TITLE] [--cmap CMAP]\n    \
        \                  [--dpi DPI]\n                      [--stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}]\n\
        \                      [--min_counts N] [--normalize_over N N]\n         \
        \             [--norm_region N N] [--landmark LANDMARK] [--use_mean]\n   \
        \                   [--keep]\n                      roi_file outbase\n\n------------------------------------------------------------------------------\n\
        \nCalculate a metagene average over maximal spanning windows specified in\
        \ `roi_table`, taking the following steps:\n\n     1. The **raw counts** at\
        \ each position in each maximal spanning window\n        (from the ``generate``\
        \ subprogram) are totaled to create a raw count vector\n        for the ROI.\n\
        \n     2. A **normalized count vector** is created fore each window by dividing\n\
        \        its raw count vector by the total number of counts occurring within\
        \ a\n        user-defined normalization window within the window.\n    \n\
        \     3. A **metagene average** is created by taking aligning all of the\n\
        \        normalized count vectors, and taking the median normalized counts\n\
        \        over all vectors at each nucleotide position. Count vectors deriving\n\
        \        from ROIs that don't meet a minimum count threshold (set via the\n\
        \        ``--norm_region`` option) are excluded.\n\n------------------------------------------------------------------------------\n\
        \npositional arguments:\n  roi_file              Text file containing maximal\
        \ spanning windows and\n                        offsets, generated by the\
        \ ``generate`` subprogram.\n  outbase               Basename for output files\n\
        \noptional arguments:\n  -h, --help            show this help message and\
        \ exit\n  --min_counts N        Minimum counts required in normalization region\
        \ to be\n                        included in metagene average (Default: 10)\n\
        \  --normalize_over N N  Portion of each window against which its individual\n\
        \                        raw count profile will be normalized. Specify two\n\
        \                        integers, in nucleotide distance from landmark\n\
        \                        (negative for upstream, positive for downstream.\n\
        \                        Surround negative numbers with quotes.). (Default:\
        \ 20\n                        50)\n  --norm_region N N     Deprecated. Use\
        \ ``--normalize_over`` instead.\n                        Formerly, Portion\
        \ of each window against which its\n                        individual raw\
        \ count profile will be normalized.\n                        Specify two integers,\
        \ in nucleotide distance, from 5'\n                        end of window.\
        \ (Default: 70 100)\n  --landmark LANDMARK   Name of landmark at zero point,\
        \ optional.\n  --use_mean            If supplied, use columnwise mean to generate\
        \ profile\n                        (Default: use median)\n  --keep       \
        \         Save intermediate count files. Useful for additional\n         \
        \               computations (Default: False)\n\nwarning/error options:\n\
        \  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.\n\
        \  -v, --verbose         Increase verbosity. With '-v', show every warning.\n\
        \                        With '-vv', turn warnings into exceptions. Cannot\
        \ use\n                        with '-q'. (Default: show each type of warning\
        \ once)\n\ncount & alignment file options:\n  Open alignment or count files\
        \ and optionally set mapping rules\n\n  --count_files COUNT_FILES [COUNT_FILES\
        \ ...]\n                        One or more count or alignment file(s) from\
        \ a single\n                        sample or set of samples to be pooled.\n\
        \  --countfile_format {BAM,bigwig,bowtie,wiggle}\n                       \
        \ Format of file containing alignments or counts\n                       \
        \ (Default: BAM)\n  --sum SUM             Sum used in normalization of counts\
        \ and RPKM/RPNT\n                        calculations (Default: total mapped\
        \ reads/counts in\n                        dataset)\n  --min_length N    \
        \    Minimum read length required to be included (BAM &\n                \
        \        bowtie files only. Default: 25)\n  --max_length N        Maximum\
        \ read length permitted to be included (BAM &\n                        bowtie\
        \ files only. Default: 100)\n  --maxmem MAXMEM       Maximum desired memory\
        \ footprint in MB to devote to\n                        BigBed/BigWig files.\
        \ May be exceeded by large queries.\n                        (Default: 0,\
        \ No maximum)\n  --big_genome          Use slower but memory-efficient implementation\
        \ for big\n                        genomes or for memory-limited computers.\
        \ For wiggle &\n                        bowtie files only.\n\nalignment mapping\
        \ functions (BAM & bowtie files only):\n  For BAM or bowtie files, one of\
        \ the mutually exclusive read mapping functions\n  is required:\n\n  --fiveprime_variable\
        \  Map read alignment to a variable offset from 5'\n                     \
        \   position of read, with offset determined by read\n                   \
        \     length. Requires `--offset` below\n  --fiveprime           Map read\
        \ alignment to 5' position.\n  --threeprime          Map read alignment to\
        \ 3' position\n  --center              Subtract N positions from each end\
        \ of read, and add\n                        1/(length-N), to each remaining\
        \ position, where N is\n                        specified by `--nibble`\n\n\
        filtering and alignment mapping options:\n  \n  The remaining arguments are\
        \ optional and affect the behavior of specific\n  mapping functions:\n\n \
        \ --offset OFFSET       For `--fiveprime` or `--threeprime`, provide an\n\
        \                        integer representing the offset into the read,\n\
        \                        starting from either the 5' or 3' end, at which data\n\
        \                        should be plotted. For `--fiveprime_variable`, provide\n\
        \                        the filename of a two-column tab-delimited text file,\n\
        \                        in which first column represents read length or the\n\
        \                        special keyword `'default'`, and the second column\n\
        \                        represents the offset from the five prime end of\
        \ that\n                        read length at which the read should be mapped.\n\
        \                        (Default: 0)\n  --nibble N            For use with\
        \ `--center` only. nt to remove from each\n                        end of\
        \ read before mapping (Default: 0)\n\nPlotting options:\n  --figformat {eps,pdf,pgf,png,ps,raw,rgba,svg,svgz}\n\
        \                        File format for figure(s); Default: png)\n  --figsize\
        \ N N         Figure width and height, in inches. (Default: use\n        \
        \                matplotlibrc params)\n  --title TITLE         Base title\
        \ for plot(s).\n  --cmap CMAP           Matplotlib color map from which palette\
        \ will be made\n                        (e.g. 'Blues','autumn','Set1'; default:\
        \ use colors\n                        from ``--stylesheet`` if given, or color\
        \ cycle in\n                        matplotlibrc)\n  --dpi DPI           \
        \  Figure resolution (Default: 150)\n  --stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\n\
        \                        Use this matplotlib stylesheet instead of matplotlibrc\n\
        \                        params\n"
      generated_using: &id004
      - --help
    - !Command
      command: &id005
      - metagene
      - OUTBASE_mask.txt
      positional:
      - !Positional
        description: ''
        position: 0
        name: metagene
        optional: false
      named: []
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error:\
        \ argument program: invalid choice: 'OUTBASE_mask.txt' (choose from 'generate',\
        \ 'count', 'chart')\n"
      generated_using: *id004
    - !Command
      command: &id006
      - metagene
      - OUTBASE_rawcounts.txt
      positional:
      - !Positional
        description: ''
        position: 0
        name: metagene
        optional: false
      named: []
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error:\
        \ argument program: invalid choice: 'OUTBASE_rawcounts.txt' (choose from 'generate',\
        \ 'count', 'chart')\n"
      generated_using: *id004
    - !Command
      command: &id007
      - metagene
      - chart
      positional:
      - !Positional
        description: Basename for output file.
        position: 0
        name: outbase
        optional: false
      - !Positional
        description: "One or more metagene profiles, generated by the\n``count`` subprogram,\
          \ which will be plotted together."
        position: 1
        name: infiles
        optional: false
      named:
      - !Flag
        description: Sample names for each metagene profile (optional).
        synonyms:
        - --labels
        args: !RepeatFlagArg
          name: LABELS
        optional: true
      - !Flag
        description: "Name of landmark at zero point (e.g. 'CDS start' or\n'CDS stop';\
          \ optional)"
        synonyms:
        - --landmark
        args: !SimpleFlagArg
          name: LANDMARK
        optional: true
      - !Flag
        description: Suppress all warning messages. Cannot use with '-v'.
        synonyms:
        - -q
        - --quiet
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Increase verbosity. With '-v', show every warning.\nWith '-vv',\
          \ turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each\
          \ type of warning once)"
        synonyms:
        - -v
        - --verbose
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: 'File format for figure(s); Default: png)'
        synonyms:
        - --figformat
        args: !ChoiceFlagArg
          choices: !!set
            ? svg
            ? ps
            ? pgf
            ? raw
            ? eps
            ? png
            ? svgz
            ? pdf
            ? rgba
        optional: true
      - !Flag
        description: "N         Figure width and height, in inches. (Default: use\n\
          matplotlibrc params)"
        synonyms:
        - --figsize
        args: !SimpleFlagArg
          name: N
        optional: true
      - !Flag
        description: Base title for plot(s).
        synonyms:
        - --title
        args: !SimpleFlagArg
          name: TITLE
        optional: true
      - !Flag
        description: "Matplotlib color map from which palette will be made\n(e.g.\
          \ 'Blues','autumn','Set1'; default: use colors\nfrom ``--stylesheet`` if\
          \ given, or color cycle in\nmatplotlibrc)"
        synonyms:
        - --cmap
        args: !SimpleFlagArg
          name: CMAP
        optional: true
      - !Flag
        description: 'Figure resolution (Default: 150)'
        synonyms:
        - --dpi
        args: !SimpleFlagArg
          name: DPI
        optional: true
      - !Flag
        description: "{Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\n\
          Use this matplotlib stylesheet instead of matplotlibrc\nparams\n"
        synonyms:
        - --stylesheet
        args: !EmptyFlagArg {}
        optional: true
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: show this help message and exit
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: metagene chart [-h] [-q] [-v]\n                      [--figformat\
        \ {eps,pdf,pgf,png,ps,raw,rgba,svg,svgz}]\n                      [--figsize\
        \ N N] [--title TITLE] [--cmap CMAP]\n                      [--dpi DPI]\n\
        \                      [--stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}]\n\
        \                      [--labels LABELS [LABELS ...]] [--landmark LANDMARK]\n\
        \                      outbase infiles [infiles ...]\n\n------------------------------------------------------------------------------\n\
        \nPlot metagene profiles against one another\n\n------------------------------------------------------------------------------\n\
        \npositional arguments:\n  outbase               Basename for output file.\n\
        \  infiles               One or more metagene profiles, generated by the\n\
        \                        ``count`` subprogram, which will be plotted together.\n\
        \noptional arguments:\n  -h, --help            show this help message and\
        \ exit\n  --labels LABELS [LABELS ...]\n                        Sample names\
        \ for each metagene profile (optional).\n  --landmark LANDMARK   Name of landmark\
        \ at zero point (e.g. 'CDS start' or\n                        'CDS stop';\
        \ optional)\n\nwarning/error options:\n  -q, --quiet           Suppress all\
        \ warning messages. Cannot use with '-v'.\n  -v, --verbose         Increase\
        \ verbosity. With '-v', show every warning.\n                        With\
        \ '-vv', turn warnings into exceptions. Cannot use\n                     \
        \   with '-q'. (Default: show each type of warning once)\n\nPlotting options:\n\
        \  --figformat {eps,pdf,pgf,png,ps,raw,rgba,svg,svgz}\n                  \
        \      File format for figure(s); Default: png)\n  --figsize N N         Figure\
        \ width and height, in inches. (Default: use\n                        matplotlibrc\
        \ params)\n  --title TITLE         Base title for plot(s).\n  --cmap CMAP\
        \           Matplotlib color map from which palette will be made\n       \
        \                 (e.g. 'Blues','autumn','Set1'; default: use colors\n   \
        \                     from ``--stylesheet`` if given, or color cycle in\n\
        \                        matplotlibrc)\n  --dpi DPI             Figure resolution\
        \ (Default: 150)\n  --stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\n\
        \                        Use this matplotlib stylesheet instead of matplotlibrc\n\
        \                        params\n"
      generated_using: *id004
    - !Command
      command: &id008
      - metagene
      - window.
      positional:
      - !Positional
        description: ''
        position: 0
        name: metagene
        optional: false
      named: []
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error:\
        \ argument program: invalid choice: 'window.' (choose from 'generate', 'count',\
        \ 'chart')\n"
      generated_using: *id004
    - !Command
      command: &id009
      - metagene
      - OUTBASE_normcounts.txt
      positional:
      - !Positional
        description: ''
        position: 0
        name: metagene
        optional: false
      named: []
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error:\
        \ argument program: invalid choice: 'OUTBASE_normcounts.txt' (choose from\
        \ 'generate', 'count', 'chart')\n"
      generated_using: *id004
    - !Command
      command: &id010
      - metagene
      - generate
      positional: []
      named:
      - !Flag
        description: "Landmark around which to build metagene profile\n(Default: cds_start)"
        synonyms:
        - --landmark
        args: !ChoiceFlagArg
          choices: !!set
            ? cds_stop
            ? cds_start
        optional: true
      - !Flag
        description: "Nucleotides to include upstream of landmark (Default:\n50)"
        synonyms:
        - --upstream
        args: !SimpleFlagArg
          name: UPSTREAM
        optional: true
      - !Flag
        description: "Nucleotides to include downstream of landmark\n(Default: 50)"
        synonyms:
        - --downstream
        args: !SimpleFlagArg
          name: DOWNSTREAM
        optional: true
      - !Flag
        description: "Attribute (e.g. in GTF2/GFF3 column 9) by which to\ngroup regions\
          \ before generating maximal spanning\nwindows (Default: group transcripts\
          \ by gene using\n'gene_id' attribute from GTF2, or 'Parent' attribute\n\
          in GFF3)"
        synonyms:
        - --group_by
        args: !SimpleFlagArg
          name: GROUP_BY
        optional: true
      - !Flag
        description: Suppress all warning messages. Cannot use with '-v'.
        synonyms:
        - -q
        - --quiet
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Increase verbosity. With '-v', show every warning.\nWith '-vv',\
          \ turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each\
          \ type of warning once)"
        synonyms:
        - -v
        - --verbose
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "[BED | BigBed | GTF2 | GFF3] [infile.[BED | BigBed | GTF2 |\
          \ GFF3] ...]\nZero or more annotation files (max 1 file if BigBed)"
        synonyms:
        - --annotation_files
        args: !SimpleFlagArg
          name: infile.
        optional: true
      - !Flag
        description: "Format of annotation_files (Default: GTF2). Note: GFF3\nassembly\
          \ assumes SO v.2.5.2 feature ontologies, which\nmay or may not match your\
          \ specific file."
        synonyms:
        - --annotation_format
        args: !ChoiceFlagArg
          choices: !!set
            ? BED
            ? BigBed
            ? GTF2
            ? GFF3
        optional: true
      - !Flag
        description: "If supplied, coding regions will be extended by 3\nnucleotides\
          \ at their 3' ends (except for GTF2 files\nthat explicitly include `stop_codon`\
          \ features). Use if\nyour annotation file excludes stop codons from CDS."
        synonyms:
        - --add_three
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "annotation_files are tabix-compressed and indexed\n(Default:\
          \ False). Ignored for BigBed files."
        synonyms:
        - --tabix
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "annotation_files are sorted by chromosomal position\n(Default:\
          \ False)"
        synonyms:
        - --sorted
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Number of extra columns in BED file (e.g. in custom\nENCODE\
          \ formats) or list of names for those columns.\n(Default: 0)."
        synonyms:
        - --bed_extra_columns
        args: !RepeatFlagArg
          name: BED_EXTRA_COLUMNS
        optional: true
      - !Flag
        description: "Number of extra columns in BED file (e.g. in custom\nENCODE\
          \ formats) or list of names for those columns.\n(Default: 0)."
        synonyms:
        - --mask_bed_extra_columns
        args: !RepeatFlagArg
          name: MASK_BED_EXTRA_COLUMNS
        optional: true
      - !Flag
        description: "Maximum desired memory footprint in MB to devote to\nBigBed/BigWig\
          \ files. May be exceeded by large queries.\n(Default: 0, No maximum)"
        synonyms:
        - --maxmem
        args: !SimpleFlagArg
          name: MAXMEM
        optional: true
      - !Flag
        description: "Maximum desired memory footprint in MB to devote to\nBigBed/BigWig\
          \ files. May be exceeded by large queries.\n(Default: 0, No maximum)"
        synonyms:
        - --mask_maxmem
        args: !SimpleFlagArg
          name: MASK_MAXMEM
        optional: true
      - !Flag
        description: "GFF3 feature types to include as transcripts, even if\nno exons\
          \ are present (for GFF3 only; default: use SO\nv2.5.3 specification)"
        synonyms:
        - --gff_transcript_types
        args: !RepeatFlagArg
          name: GFF_TRANSCRIPT_TYPES
        optional: true
      - !Flag
        description: "GFF3 feature types to include as exons (for GFF3 only;\ndefault:\
          \ use SO v2.5.3 specification)"
        synonyms:
        - --gff_exon_types
        args: !RepeatFlagArg
          name: GFF_EXON_TYPES
        optional: true
      - !Flag
        description: "GFF3 feature types to include as CDS (for GFF3 only;\ndefault:\
          \ use SO v2.5.3 specification)"
        synonyms:
        - --gff_cds_types
        args: !RepeatFlagArg
          name: GFF_CDS_TYPES
        optional: true
      - !Flag
        description: "GFF3 feature types to include as transcripts, even if\nno exons\
          \ are present (for GFF3 only; default: use SO\nv2.5.3 specification)"
        synonyms:
        - --mask_gff_transcript_types
        args: !RepeatFlagArg
          name: MASK_GFF_TRANSCRIPT_TYPES
        optional: true
      - !Flag
        description: "GFF3 feature types to include as exons (for GFF3 only;\ndefault:\
          \ use SO v2.5.3 specification)"
        synonyms:
        - --mask_gff_exon_types
        args: !RepeatFlagArg
          name: MASK_GFF_EXON_TYPES
        optional: true
      - !Flag
        description: "GFF3 feature types to include as CDS (for GFF3 only;\ndefault:\
          \ use SO v2.5.3 specification)"
        synonyms:
        - --mask_gff_cds_types
        args: !RepeatFlagArg
          name: MASK_GFF_CDS_TYPES
        optional: true
      - !Flag
        description: "[BED | BigBed | GTF2 | GFF3 | PSL] [infile.[BED | BigBed | GTF2\
          \ | GFF3 | PSL] ...]\nZero or more annotation files (max 1 file if BigBed)"
        synonyms:
        - --mask_annotation_files
        args: !SimpleFlagArg
          name: infile.
        optional: true
      - !Flag
        description: "Format of mask_annotation_files (Default: GTF2). Note:\nGFF3\
          \ assembly assumes SO v.2.5.2 feature ontologies,\nwhich may or may not\
          \ match your specific file."
        synonyms:
        - --mask_annotation_format
        args: !ChoiceFlagArg
          choices: !!set
            ? BED
            ? GTF2
            ? GFF3
            ? PSL
            ? BigBed
        optional: true
      - !Flag
        description: "If supplied, coding regions will be extended by 3\nnucleotides\
          \ at their 3' ends (except for GTF2 files\nthat explicitly include `stop_codon`\
          \ features). Use if\nyour annotation file excludes stop codons from CDS."
        synonyms:
        - --mask_add_three
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "mask_annotation_files are tabix-compressed and indexed\n(Default:\
          \ False). Ignored for BigBed files."
        synonyms:
        - --mask_tabix
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "mask_annotation_files are sorted by chromosomal\nposition (Default:\
          \ False)\n"
        synonyms:
        - --mask_sorted
        args: !EmptyFlagArg {}
        optional: true
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: show this help message and exit
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: metagene generate [-h] [-q] [-v]\n                      \
        \   [--annotation_files infile.[BED | BigBed | GTF2 | GFF3]\n            \
        \             [infile.[BED | BigBed | GTF2 | GFF3] ...]]\n               \
        \          [--annotation_format {BED,BigBed,GTF2,GFF3}]\n                \
        \         [--add_three] [--tabix] [--sorted]\n                         [--bed_extra_columns\
        \ BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]]\n                         [--maxmem\
        \ MAXMEM]\n                         [--gff_transcript_types GFF_TRANSCRIPT_TYPES\
        \ [GFF_TRANSCRIPT_TYPES ...]]\n                         [--gff_exon_types\
        \ GFF_EXON_TYPES [GFF_EXON_TYPES ...]]\n                         [--gff_cds_types\
        \ GFF_CDS_TYPES [GFF_CDS_TYPES ...]]\n                         [--mask_annotation_files\
        \ infile.[BED | BigBed | GTF2 | GFF3 | PSL]\n                         [infile.[BED\
        \ | BigBed | GTF2 | GFF3 | PSL] ...]]\n                         [--mask_annotation_format\
        \ {BED,BigBed,GTF2,GFF3,PSL}]\n                         [--mask_add_three]\
        \ [--mask_tabix] [--mask_sorted]\n                         [--mask_bed_extra_columns\
        \ MASK_BED_EXTRA_COLUMNS [MASK_BED_EXTRA_COLUMNS ...]]\n                 \
        \        [--mask_maxmem MASK_MAXMEM]\n                         [--mask_gff_transcript_types\
        \ MASK_GFF_TRANSCRIPT_TYPES [MASK_GFF_TRANSCRIPT_TYPES ...]]\n           \
        \              [--mask_gff_exon_types MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES\
        \ ...]]\n                         [--mask_gff_cds_types MASK_GFF_CDS_TYPES\
        \ [MASK_GFF_CDS_TYPES ...]]\n                         [--landmark {cds_start,cds_stop}]\n\
        \                         [--upstream UPSTREAM] [--downstream DOWNSTREAM]\n\
        \                         [--group_by GROUP_BY]\n                        \
        \ outbase\n\n------------------------------------------------------------------------------\n\
        \nGroup regions of interest by a shared attribute, and generate\n    maximal\
        \ spanning windows for them. Results are given in a table\n    suitable for\
        \ use in ``count`` subprogram. Windows are generated by\n    the following\
        \ algorithm:\n\n     1. Transcripts are grouped by `group_by` attribute (default:\
        \ by gene).\n        If all transcripts in a group share the same\n      \
        \  genomic coordinate for the landmark of interest (for example, if all \n\
        \        share the same start codon), then the set of transcripts is\n   \
        \     included in the analysis. If not, the set of transcripts and their\n\
        \        associated gene are excluded from further processing.\n    \n   \
        \  2. For each set of transcripts that pass step (1), the maximal spanning\n\
        \        window is created by aligning the set of transcripts at the landmark,\
        \ and\n        adding nucleotide positions in transcript coordinates to the\
        \ growing\n        window in both 5' and 3' directions until either:\n   \
        \     \n          - the next nucleotide position added is no longer corresponds\
        \ to \n            the same genomic position in all transcripts\n        \
        \    \n          - the window reaches the maximum user-specified size\n\n\
        ------------------------------------------------------------------------------\n\
        \npositional arguments:\n  outbase               Basename for output files\n\
        \noptional arguments:\n  -h, --help            show this help message and\
        \ exit\n  --landmark {cds_start,cds_stop}\n                        Landmark\
        \ around which to build metagene profile\n                        (Default:\
        \ cds_start)\n  --upstream UPSTREAM   Nucleotides to include upstream of landmark\
        \ (Default:\n                        50)\n  --downstream DOWNSTREAM\n    \
        \                    Nucleotides to include downstream of landmark\n     \
        \                   (Default: 50)\n  --group_by GROUP_BY   Attribute (e.g.\
        \ in GTF2/GFF3 column 9) by which to\n                        group regions\
        \ before generating maximal spanning\n                        windows (Default:\
        \ group transcripts by gene using\n                        'gene_id' attribute\
        \ from GTF2, or 'Parent' attribute\n                        in GFF3)\n\nwarning/error\
        \ options:\n  -q, --quiet           Suppress all warning messages. Cannot\
        \ use with '-v'.\n  -v, --verbose         Increase verbosity. With '-v', show\
        \ every warning.\n                        With '-vv', turn warnings into exceptions.\
        \ Cannot use\n                        with '-q'. (Default: show each type\
        \ of warning once)\n\nannotation file options (one or more annotation files\
        \ required):\n  Open one or more genome annotation files\n\n  --annotation_files\
        \ infile.[BED | BigBed | GTF2 | GFF3] [infile.[BED | BigBed | GTF2 | GFF3]\
        \ ...]\n                        Zero or more annotation files (max 1 file\
        \ if BigBed)\n  --annotation_format {BED,BigBed,GTF2,GFF3}\n             \
        \           Format of annotation_files (Default: GTF2). Note: GFF3\n     \
        \                   assembly assumes SO v.2.5.2 feature ontologies, which\n\
        \                        may or may not match your specific file.\n  --add_three\
        \           If supplied, coding regions will be extended by 3\n          \
        \              nucleotides at their 3' ends (except for GTF2 files\n     \
        \                   that explicitly include `stop_codon` features). Use if\n\
        \                        your annotation file excludes stop codons from CDS.\n\
        \  --tabix               annotation_files are tabix-compressed and indexed\n\
        \                        (Default: False). Ignored for BigBed files.\n  --sorted\
        \              annotation_files are sorted by chromosomal position\n     \
        \                   (Default: False)\n\nBED-specific options:\n  --bed_extra_columns\
        \ BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]\n                        Number\
        \ of extra columns in BED file (e.g. in custom\n                        ENCODE\
        \ formats) or list of names for those columns.\n                        (Default:\
        \ 0).\n  --mask_bed_extra_columns MASK_BED_EXTRA_COLUMNS [MASK_BED_EXTRA_COLUMNS\
        \ ...]\n                        Number of extra columns in BED file (e.g.\
        \ in custom\n                        ENCODE formats) or list of names for\
        \ those columns.\n                        (Default: 0).\n\nBigBed-specific\
        \ options:\n  --maxmem MAXMEM       Maximum desired memory footprint in MB\
        \ to devote to\n                        BigBed/BigWig files. May be exceeded\
        \ by large queries.\n                        (Default: 0, No maximum)\n  --mask_maxmem\
        \ MASK_MAXMEM\n                        Maximum desired memory footprint in\
        \ MB to devote to\n                        BigBed/BigWig files. May be exceeded\
        \ by large queries.\n                        (Default: 0, No maximum)\n\n\
        GFF3-specific options:\n  --gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES\
        \ ...]\n                        GFF3 feature types to include as transcripts,\
        \ even if\n                        no exons are present (for GFF3 only; default:\
        \ use SO\n                        v2.5.3 specification)\n  --gff_exon_types\
        \ GFF_EXON_TYPES [GFF_EXON_TYPES ...]\n                        GFF3 feature\
        \ types to include as exons (for GFF3 only;\n                        default:\
        \ use SO v2.5.3 specification)\n  --gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES\
        \ ...]\n                        GFF3 feature types to include as CDS (for\
        \ GFF3 only;\n                        default: use SO v2.5.3 specification)\n\
        \  --mask_gff_transcript_types MASK_GFF_TRANSCRIPT_TYPES [MASK_GFF_TRANSCRIPT_TYPES\
        \ ...]\n                        GFF3 feature types to include as transcripts,\
        \ even if\n                        no exons are present (for GFF3 only; default:\
        \ use SO\n                        v2.5.3 specification)\n  --mask_gff_exon_types\
        \ MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES ...]\n                        GFF3\
        \ feature types to include as exons (for GFF3 only;\n                    \
        \    default: use SO v2.5.3 specification)\n  --mask_gff_cds_types MASK_GFF_CDS_TYPES\
        \ [MASK_GFF_CDS_TYPES ...]\n                        GFF3 feature types to\
        \ include as CDS (for GFF3 only;\n                        default: use SO\
        \ v2.5.3 specification)\n\nmask file options (optional):\n  Add mask file(s)\
        \ that annotate regions that should be excluded from analyses\n  (e.g. repetitive\
        \ genomic regions).\n\n  --mask_annotation_files infile.[BED | BigBed | GTF2\
        \ | GFF3 | PSL] [infile.[BED | BigBed | GTF2 | GFF3 | PSL] ...]\n        \
        \                Zero or more annotation files (max 1 file if BigBed)\n  --mask_annotation_format\
        \ {BED,BigBed,GTF2,GFF3,PSL}\n                        Format of mask_annotation_files\
        \ (Default: GTF2). Note:\n                        GFF3 assembly assumes SO\
        \ v.2.5.2 feature ontologies,\n                        which may or may not\
        \ match your specific file.\n  --mask_add_three      If supplied, coding regions\
        \ will be extended by 3\n                        nucleotides at their 3' ends\
        \ (except for GTF2 files\n                        that explicitly include\
        \ `stop_codon` features). Use if\n                        your annotation\
        \ file excludes stop codons from CDS.\n  --mask_tabix          mask_annotation_files\
        \ are tabix-compressed and indexed\n                        (Default: False).\
        \ Ignored for BigBed files.\n  --mask_sorted         mask_annotation_files\
        \ are sorted by chromosomal\n                        position (Default: False)\n"
      generated_using: *id004
    - !Command
      command: &id011
      - metagene
      - OUTBASE_metagene_profile.txt
      positional:
      - !Positional
        description: ''
        position: 0
        name: metagene
        optional: false
      named: []
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error:\
        \ argument program: invalid choice: 'OUTBASE_metagene_profile.txt' (choose\
        \ from 'generate', 'count', 'chart')\n"
      generated_using: *id004
    - !Command
      command: &id012
      - metagene
      - OUTBASE_rois.txt
      positional:
      - !Positional
        description: ''
        position: 0
        name: metagene
        optional: false
      named: []
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error:\
        \ argument program: invalid choice: 'OUTBASE_rois.txt' (choose from 'generate',\
        \ 'count', 'chart')\n"
      generated_using: *id004
    - !Command
      command: &id013
      - metagene
      - OUTBASE_rois.bed
      positional:
      - !Positional
        description: ''
        position: 0
        name: metagene
        optional: false
      named: []
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error:\
        \ argument program: invalid choice: 'OUTBASE_rois.bed' (choose from 'generate',\
        \ 'count', 'chart')\n"
      generated_using: *id004
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: metagene [-h] {generate,count,chart} ...\n\n------------------------------------------------------------------------------\n\
      \nPerforms metagene analyses. The workflow is separated into the\nfollowing\
      \ subprograms:\n\nGenerate\n    A metagene profile is a position-wise average\
      \ over all genes\n    in the vicinity of an interesting landmark (e.g. a start\
      \ codon). Because\n    genes can have multiple transcript isoforms that may\
      \ cover different\n    genomic positions, which transcript positions (and therefore\
      \ which\n    genomic positions) to include in the average can be ambiguous when\n\
      \    the isoforms are not knnow.\n    \n    To handle this problem, we define\
      \ for each gene the maximal spanning window\n    over which every position at\
      \ a given distance from the landmark of interest\n    (e.g. a start or stop\
      \ codon) maps to the same genomic coordinates in all\n    transcript isoforms.\
      \ The windows are defined by the following algorithm: \n    \n     #. Transcripts\
      \ are grouped by gene.\n    \n     #. Landmarks are detected on each transcript\
      \ for each gene. For genes in\n        which all transcripts do not share the\
      \ same genomic coordinate for the\n        landmark of interest, no window can\
      \ be defined, and that gene is\n        excluded from further analysis.\n  \
      \  \n     #. For each set of transcripts that passes step (2), the maximal spanning\n\
      \        window is created by aligning the set of transcripts at the landmark,\
      \ and\n        bidirectionally growing the maximal spanning window until either:\n\
      \        \n           - the next nucleotide position added no longer corresponds\
      \ to \n             the same genomic position in all transcripts\n         \
      \   \n           - the window reaches the maximum user-specified size\n\n  \
      \  **Note**: if annotations are supplied as BED files, transcripts cannot be\n\
      \    grouped by gene, because BED files don't contain this information.\n  \
      \  In this case one ROI is generated per transcript.\n    \n    \n    .. Rubric\
      \ :: Output files\n    \n    OUTBASE_rois.txt\n        A tab-delimited text\
      \ file describing the maximal spanning window for\n        each gene, with columns\
      \ as follows:\n        \n        ================   ==================================================\n\
      \        **Column**         **Contains**\n        ----------------   --------------------------------------------------\n\
      \n        alignment_offset   Offset to align window to all other windows in\
      \ the\n                           file, if the window happens to be shorter\
      \ on the 5'\n                           end than specified in ``--flank_upstream``.\
      \ Typically\n                           this is `0`.\n\n        region_id  \
      \        ID of region (e.g. gene) from which window was made\n        \n   \
      \     region             maximal spanning window, formatted as\n           \
      \                `chromosome:start-end:(strand)`\n        \n        window_size\
      \        with of window\n        \n        zero_point         distance from\
      \ 5' end of window to landmark\n        ================   ==================================================\n\
      \        \n    \n    OUTBASE_rois.bed\n        Maximal spanning windows in BED\
      \ format for visualization in\n        a genome browser. The thickly-rendered\
      \ portion of a window\n        indicates its landmark\n\n    where `OUTBASE`\
      \ is supplied by the user.\n    \n    \nCount\n    This program generates metagene\
      \ profiles from a dataset of\n    counts or alignments, taking the following\
      \ steps:\n    \n     1. The **raw counts** at each position in each maximal\
      \ spanning window\n        (from the ``generate`` subprogram) fetched as a raw\
      \ count vector for the\n        window.\n\n     2. A **normalized count vector**\
      \ is created for each window by dividing\n        its raw count vector by the\
      \ total number of counts occurring within a\n        user-defined normalization\
      \ region within the window.\n    \n     3. A **metagene average** is created\
      \ by taking aligning all of the\n        normalized count vectors, and taking\
      \ the median normalized counts\n        over all vectors at each nucleotide\
      \ position. Count vectors deriving\n        from windows that don't meet a minimum\
      \ count threshold (set via the\n        ``--norm_region`` option) are excluded.\n\
      \    \n    \n    .. Rubric :: Output files\n\n    Raw count vectors, normalized\
      \ count vectors, and metagene profiles are all\n    saved as tab-delimited text\
      \ files, for subsequent plotting, filtering,\n    or reanalysis.\n    \n   \
      \ OUTBASE_metagene_profile.txt\n        Tab-delimited table of metagene profile,\
      \ containing the following\n        columns:\n\n        ================   ==================================================\n\
      \        **Column**         **Contains**\n        ----------------   --------------------------------------------------\n\
      \        x                  Distance in nucleotides from the landmark\n    \
      \    \n        metagene_average   Value of metagene average at that position\n\
      \        \n        regions_counted    Number of maximal spanning windows included\
      \ at\n                           that position in the average. i.e. windows\
      \ that\n                           both met the threshold set by ``--min_counts``\
      \ and\n                           were not masked at that position by a mask\
      \ file\n        ================   ==================================================\
      \        \n        \n    OUTBASE_rawcounts.txt\n        Saved if ``--keep``\
      \ is specified. Table of raw counts. Each row is a\n        maximal spanning\
      \ window for a gene, and each column a nucleotide position\n        in that\
      \ window. All windows are aligned at the landmark.\n    \n    OUTBASE_normcounts.txt\n\
      \        Saved if ``--keep`` is specified. Table of normalized counts, produced\n\
      \        by dividing each row in the raw count table by the of counts in that\n\
      \        row within the columns specified by ``--normalize_over``.\n\n    OUTBASE_mask.txt\n\
      \        Saved if ``--keep`` is specified. Matrix of masks indicating which\n\
      \        cells in ``normcounts`` were excluded from computations.\n\n    OUTBASE_metagene_overview.[png\
      \  svg  pdf | et c...]\n        Metagene average plotted above a heatmap of\
      \ normalized counts,\n        in which each row of pixels is a maximal spanning\
      \ window for a gene,\n        and rows are sorted by the column in which they\
      \ reach their\n        max value. To facilitate visualization, colors in the\
      \ heatmap are scaled\n        from 0 to the 95th percentile of non-zero numbers\
      \ in the normalized counts\n        \n    `OUTBASE` is supplied by the user.\n\
      \n    \nChart\n    One or more metagene profiles generated by the ``count``\
      \ subprogram,\n    for example, on different datasets, are plotted against each\
      \ other. \n\nSee command-line help for each subprogram for details on parameters\
      \ for each\n\n------------------------------------------------------------------------------\n\
      \noptional arguments:\n  -h, --help            show this help message and exit\n\
      \nsubcommands:\n  choose one of the following\n\n  {generate,count,chart}\n\
      \    generate            Create ROI file from genome annotation\n    count \
      \              Count reads falling into regions of interest,\n             \
      \           normalize, and average into a metagene profile\n    chart      \
      \         Plot metagene profiles\n"
    generated_using: *id004
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: metagene count [-h] [-q] [-v]\n                      [--count_files\
    \ COUNT_FILES [COUNT_FILES ...]]\n                      [--countfile_format {BAM,bigwig,bowtie,wiggle}]\n\
    \                      [--sum SUM] [--min_length N] [--max_length N]\n       \
    \               [--maxmem MAXMEM] [--big_genome] [--fiveprime_variable]\n    \
    \                  [--fiveprime] [--threeprime] [--center]\n                 \
    \     [--offset OFFSET] [--nibble N]\n                      [--figformat {eps,pdf,pgf,png,ps,raw,rgba,svg,svgz}]\n\
    \                      [--figsize N N] [--title TITLE] [--cmap CMAP]\n       \
    \               [--dpi DPI]\n                      [--stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}]\n\
    \                      [--min_counts N] [--normalize_over N N]\n             \
    \         [--norm_region N N] [--landmark LANDMARK] [--use_mean]\n           \
    \           [--keep]\n                      roi_file outbase\n\n------------------------------------------------------------------------------\n\
    \nCalculate a metagene average over maximal spanning windows specified in `roi_table`,\
    \ taking the following steps:\n\n     1. The **raw counts** at each position in\
    \ each maximal spanning window\n        (from the ``generate`` subprogram) are\
    \ totaled to create a raw count vector\n        for the ROI.\n\n     2. A **normalized\
    \ count vector** is created fore each window by dividing\n        its raw count\
    \ vector by the total number of counts occurring within a\n        user-defined\
    \ normalization window within the window.\n    \n     3. A **metagene average**\
    \ is created by taking aligning all of the\n        normalized count vectors,\
    \ and taking the median normalized counts\n        over all vectors at each nucleotide\
    \ position. Count vectors deriving\n        from ROIs that don't meet a minimum\
    \ count threshold (set via the\n        ``--norm_region`` option) are excluded.\n\
    \n------------------------------------------------------------------------------\n\
    \npositional arguments:\n  roi_file              Text file containing maximal\
    \ spanning windows and\n                        offsets, generated by the ``generate``\
    \ subprogram.\n  outbase               Basename for output files\n\noptional arguments:\n\
    \  -h, --help            show this help message and exit\n  --min_counts N   \
    \     Minimum counts required in normalization region to be\n                \
    \        included in metagene average (Default: 10)\n  --normalize_over N N  Portion\
    \ of each window against which its individual\n                        raw count\
    \ profile will be normalized. Specify two\n                        integers, in\
    \ nucleotide distance from landmark\n                        (negative for upstream,\
    \ positive for downstream.\n                        Surround negative numbers\
    \ with quotes.). (Default: 20\n                        50)\n  --norm_region N\
    \ N     Deprecated. Use ``--normalize_over`` instead.\n                      \
    \  Formerly, Portion of each window against which its\n                      \
    \  individual raw count profile will be normalized.\n                        Specify\
    \ two integers, in nucleotide distance, from 5'\n                        end of\
    \ window. (Default: 70 100)\n  --landmark LANDMARK   Name of landmark at zero\
    \ point, optional.\n  --use_mean            If supplied, use columnwise mean to\
    \ generate profile\n                        (Default: use median)\n  --keep  \
    \              Save intermediate count files. Useful for additional\n        \
    \                computations (Default: False)\n\nwarning/error options:\n  -q,\
    \ --quiet           Suppress all warning messages. Cannot use with '-v'.\n  -v,\
    \ --verbose         Increase verbosity. With '-v', show every warning.\n     \
    \                   With '-vv', turn warnings into exceptions. Cannot use\n  \
    \                      with '-q'. (Default: show each type of warning once)\n\n\
    count & alignment file options:\n  Open alignment or count files and optionally\
    \ set mapping rules\n\n  --count_files COUNT_FILES [COUNT_FILES ...]\n       \
    \                 One or more count or alignment file(s) from a single\n     \
    \                   sample or set of samples to be pooled.\n  --countfile_format\
    \ {BAM,bigwig,bowtie,wiggle}\n                        Format of file containing\
    \ alignments or counts\n                        (Default: BAM)\n  --sum SUM  \
    \           Sum used in normalization of counts and RPKM/RPNT\n              \
    \          calculations (Default: total mapped reads/counts in\n             \
    \           dataset)\n  --min_length N        Minimum read length required to\
    \ be included (BAM &\n                        bowtie files only. Default: 25)\n\
    \  --max_length N        Maximum read length permitted to be included (BAM &\n\
    \                        bowtie files only. Default: 100)\n  --maxmem MAXMEM \
    \      Maximum desired memory footprint in MB to devote to\n                 \
    \       BigBed/BigWig files. May be exceeded by large queries.\n             \
    \           (Default: 0, No maximum)\n  --big_genome          Use slower but memory-efficient\
    \ implementation for big\n                        genomes or for memory-limited\
    \ computers. For wiggle &\n                        bowtie files only.\n\nalignment\
    \ mapping functions (BAM & bowtie files only):\n  For BAM or bowtie files, one\
    \ of the mutually exclusive read mapping functions\n  is required:\n\n  --fiveprime_variable\
    \  Map read alignment to a variable offset from 5'\n                        position\
    \ of read, with offset determined by read\n                        length. Requires\
    \ `--offset` below\n  --fiveprime           Map read alignment to 5' position.\n\
    \  --threeprime          Map read alignment to 3' position\n  --center       \
    \       Subtract N positions from each end of read, and add\n                \
    \        1/(length-N), to each remaining position, where N is\n              \
    \          specified by `--nibble`\n\nfiltering and alignment mapping options:\n\
    \  \n  The remaining arguments are optional and affect the behavior of specific\n\
    \  mapping functions:\n\n  --offset OFFSET       For `--fiveprime` or `--threeprime`,\
    \ provide an\n                        integer representing the offset into the\
    \ read,\n                        starting from either the 5' or 3' end, at which\
    \ data\n                        should be plotted. For `--fiveprime_variable`,\
    \ provide\n                        the filename of a two-column tab-delimited\
    \ text file,\n                        in which first column represents read length\
    \ or the\n                        special keyword `'default'`, and the second\
    \ column\n                        represents the offset from the five prime end\
    \ of that\n                        read length at which the read should be mapped.\n\
    \                        (Default: 0)\n  --nibble N            For use with `--center`\
    \ only. nt to remove from each\n                        end of read before mapping\
    \ (Default: 0)\n\nPlotting options:\n  --figformat {eps,pdf,pgf,png,ps,raw,rgba,svg,svgz}\n\
    \                        File format for figure(s); Default: png)\n  --figsize\
    \ N N         Figure width and height, in inches. (Default: use\n            \
    \            matplotlibrc params)\n  --title TITLE         Base title for plot(s).\n\
    \  --cmap CMAP           Matplotlib color map from which palette will be made\n\
    \                        (e.g. 'Blues','autumn','Set1'; default: use colors\n\
    \                        from ``--stylesheet`` if given, or color cycle in\n \
    \                       matplotlibrc)\n  --dpi DPI             Figure resolution\
    \ (Default: 150)\n  --stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\n\
    \                        Use this matplotlib stylesheet instead of matplotlibrc\n\
    \                        params\n"
  generated_using: *id004
- !Command
  command: *id005
  positional:
  - !Positional
    description: ''
    position: 0
    name: metagene
    optional: false
  named: []
  parent: *id003
  subcommands: []
  usage: []
  help_flag: !Flag
    description: ''
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error: argument\
    \ program: invalid choice: 'OUTBASE_mask.txt' (choose from 'generate', 'count',\
    \ 'chart')\n"
  generated_using: *id004
- !Command
  command: *id006
  positional:
  - !Positional
    description: ''
    position: 0
    name: metagene
    optional: false
  named: []
  parent: *id003
  subcommands: []
  usage: []
  help_flag: !Flag
    description: ''
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error: argument\
    \ program: invalid choice: 'OUTBASE_rawcounts.txt' (choose from 'generate', 'count',\
    \ 'chart')\n"
  generated_using: *id004
- !Command
  command: *id007
  positional:
  - !Positional
    description: Basename for output file.
    position: 0
    name: outbase
    optional: false
  - !Positional
    description: "One or more metagene profiles, generated by the\n``count`` subprogram,\
      \ which will be plotted together."
    position: 1
    name: infiles
    optional: false
  named:
  - !Flag
    description: Sample names for each metagene profile (optional).
    synonyms:
    - --labels
    args: !RepeatFlagArg
      name: LABELS
    optional: true
  - !Flag
    description: "Name of landmark at zero point (e.g. 'CDS start' or\n'CDS stop';\
      \ optional)"
    synonyms:
    - --landmark
    args: !SimpleFlagArg
      name: LANDMARK
    optional: true
  - !Flag
    description: Suppress all warning messages. Cannot use with '-v'.
    synonyms:
    - -q
    - --quiet
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Increase verbosity. With '-v', show every warning.\nWith '-vv',\
      \ turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each\
      \ type of warning once)"
    synonyms:
    - -v
    - --verbose
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: 'File format for figure(s); Default: png)'
    synonyms:
    - --figformat
    args: !ChoiceFlagArg
      choices: !!set
        eps:
        ps:
        png:
        raw:
        svg:
        svgz:
        pdf:
        pgf:
        rgba:
    optional: true
  - !Flag
    description: "N         Figure width and height, in inches. (Default: use\nmatplotlibrc\
      \ params)"
    synonyms:
    - --figsize
    args: !SimpleFlagArg
      name: N
    optional: true
  - !Flag
    description: Base title for plot(s).
    synonyms:
    - --title
    args: !SimpleFlagArg
      name: TITLE
    optional: true
  - !Flag
    description: "Matplotlib color map from which palette will be made\n(e.g. 'Blues','autumn','Set1';\
      \ default: use colors\nfrom ``--stylesheet`` if given, or color cycle in\nmatplotlibrc)"
    synonyms:
    - --cmap
    args: !SimpleFlagArg
      name: CMAP
    optional: true
  - !Flag
    description: 'Figure resolution (Default: 150)'
    synonyms:
    - --dpi
    args: !SimpleFlagArg
      name: DPI
    optional: true
  - !Flag
    description: "{Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\n\
      Use this matplotlib stylesheet instead of matplotlibrc\nparams\n"
    synonyms:
    - --stylesheet
    args: !EmptyFlagArg {}
    optional: true
  parent: *id003
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: metagene chart [-h] [-q] [-v]\n                      [--figformat\
    \ {eps,pdf,pgf,png,ps,raw,rgba,svg,svgz}]\n                      [--figsize N\
    \ N] [--title TITLE] [--cmap CMAP]\n                      [--dpi DPI]\n      \
    \                [--stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}]\n\
    \                      [--labels LABELS [LABELS ...]] [--landmark LANDMARK]\n\
    \                      outbase infiles [infiles ...]\n\n------------------------------------------------------------------------------\n\
    \nPlot metagene profiles against one another\n\n------------------------------------------------------------------------------\n\
    \npositional arguments:\n  outbase               Basename for output file.\n \
    \ infiles               One or more metagene profiles, generated by the\n    \
    \                    ``count`` subprogram, which will be plotted together.\n\n\
    optional arguments:\n  -h, --help            show this help message and exit\n\
    \  --labels LABELS [LABELS ...]\n                        Sample names for each\
    \ metagene profile (optional).\n  --landmark LANDMARK   Name of landmark at zero\
    \ point (e.g. 'CDS start' or\n                        'CDS stop'; optional)\n\n\
    warning/error options:\n  -q, --quiet           Suppress all warning messages.\
    \ Cannot use with '-v'.\n  -v, --verbose         Increase verbosity. With '-v',\
    \ show every warning.\n                        With '-vv', turn warnings into\
    \ exceptions. Cannot use\n                        with '-q'. (Default: show each\
    \ type of warning once)\n\nPlotting options:\n  --figformat {eps,pdf,pgf,png,ps,raw,rgba,svg,svgz}\n\
    \                        File format for figure(s); Default: png)\n  --figsize\
    \ N N         Figure width and height, in inches. (Default: use\n            \
    \            matplotlibrc params)\n  --title TITLE         Base title for plot(s).\n\
    \  --cmap CMAP           Matplotlib color map from which palette will be made\n\
    \                        (e.g. 'Blues','autumn','Set1'; default: use colors\n\
    \                        from ``--stylesheet`` if given, or color cycle in\n \
    \                       matplotlibrc)\n  --dpi DPI             Figure resolution\
    \ (Default: 150)\n  --stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}\n\
    \                        Use this matplotlib stylesheet instead of matplotlibrc\n\
    \                        params\n"
  generated_using: *id004
- !Command
  command: *id008
  positional:
  - !Positional
    description: ''
    position: 0
    name: metagene
    optional: false
  named: []
  parent: *id003
  subcommands: []
  usage: []
  help_flag: !Flag
    description: ''
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error: argument\
    \ program: invalid choice: 'window.' (choose from 'generate', 'count', 'chart')\n"
  generated_using: *id004
- !Command
  command: *id009
  positional:
  - !Positional
    description: ''
    position: 0
    name: metagene
    optional: false
  named: []
  parent: *id003
  subcommands: []
  usage: []
  help_flag: !Flag
    description: ''
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error: argument\
    \ program: invalid choice: 'OUTBASE_normcounts.txt' (choose from 'generate', 'count',\
    \ 'chart')\n"
  generated_using: *id004
- !Command
  command: *id010
  positional:
  - !Positional
    description: Basename for output files
    position: 0
    name: outbase
    optional: false
  named:
  - !Flag
    description: "Landmark around which to build metagene profile\n(Default: cds_start)"
    synonyms:
    - --landmark
    args: !ChoiceFlagArg
      choices: !!set
        cds_start:
        cds_stop:
    optional: true
  - !Flag
    description: "Nucleotides to include upstream of landmark (Default:\n50)"
    synonyms:
    - --upstream
    args: !SimpleFlagArg
      name: UPSTREAM
    optional: true
  - !Flag
    description: "Nucleotides to include downstream of landmark\n(Default: 50)"
    synonyms:
    - --downstream
    args: !SimpleFlagArg
      name: DOWNSTREAM
    optional: true
  - !Flag
    description: "Attribute (e.g. in GTF2/GFF3 column 9) by which to\ngroup regions\
      \ before generating maximal spanning\nwindows (Default: group transcripts by\
      \ gene using\n'gene_id' attribute from GTF2, or 'Parent' attribute\nin GFF3)"
    synonyms:
    - --group_by
    args: !SimpleFlagArg
      name: GROUP_BY
    optional: true
  - !Flag
    description: Suppress all warning messages. Cannot use with '-v'.
    synonyms:
    - -q
    - --quiet
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Increase verbosity. With '-v', show every warning.\nWith '-vv',\
      \ turn warnings into exceptions. Cannot use\nwith '-q'. (Default: show each\
      \ type of warning once)"
    synonyms:
    - -v
    - --verbose
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "[BED | BigBed | GTF2 | GFF3] [infile.[BED | BigBed | GTF2 | GFF3]\
      \ ...]\nZero or more annotation files (max 1 file if BigBed)"
    synonyms:
    - --annotation_files
    args: !SimpleFlagArg
      name: infile.
    optional: true
  - !Flag
    description: "Format of annotation_files (Default: GTF2). Note: GFF3\nassembly\
      \ assumes SO v.2.5.2 feature ontologies, which\nmay or may not match your specific\
      \ file."
    synonyms:
    - --annotation_format
    args: !ChoiceFlagArg
      choices: !!set
        GTF2:
        BigBed:
        BED:
        GFF3:
    optional: true
  - !Flag
    description: "If supplied, coding regions will be extended by 3\nnucleotides at\
      \ their 3' ends (except for GTF2 files\nthat explicitly include `stop_codon`\
      \ features). Use if\nyour annotation file excludes stop codons from CDS."
    synonyms:
    - --add_three
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "annotation_files are tabix-compressed and indexed\n(Default: False).\
      \ Ignored for BigBed files."
    synonyms:
    - --tabix
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "annotation_files are sorted by chromosomal position\n(Default: False)"
    synonyms:
    - --sorted
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Number of extra columns in BED file (e.g. in custom\nENCODE formats)\
      \ or list of names for those columns.\n(Default: 0)."
    synonyms:
    - --bed_extra_columns
    args: !RepeatFlagArg
      name: BED_EXTRA_COLUMNS
    optional: true
  - !Flag
    description: "Number of extra columns in BED file (e.g. in custom\nENCODE formats)\
      \ or list of names for those columns.\n(Default: 0)."
    synonyms:
    - --mask_bed_extra_columns
    args: !RepeatFlagArg
      name: MASK_BED_EXTRA_COLUMNS
    optional: true
  - !Flag
    description: "Maximum desired memory footprint in MB to devote to\nBigBed/BigWig\
      \ files. May be exceeded by large queries.\n(Default: 0, No maximum)"
    synonyms:
    - --maxmem
    args: !SimpleFlagArg
      name: MAXMEM
    optional: true
  - !Flag
    description: "Maximum desired memory footprint in MB to devote to\nBigBed/BigWig\
      \ files. May be exceeded by large queries.\n(Default: 0, No maximum)"
    synonyms:
    - --mask_maxmem
    args: !SimpleFlagArg
      name: MASK_MAXMEM
    optional: true
  - !Flag
    description: "GFF3 feature types to include as transcripts, even if\nno exons\
      \ are present (for GFF3 only; default: use SO\nv2.5.3 specification)"
    synonyms:
    - --gff_transcript_types
    args: !RepeatFlagArg
      name: GFF_TRANSCRIPT_TYPES
    optional: true
  - !Flag
    description: "GFF3 feature types to include as exons (for GFF3 only;\ndefault:\
      \ use SO v2.5.3 specification)"
    synonyms:
    - --gff_exon_types
    args: !RepeatFlagArg
      name: GFF_EXON_TYPES
    optional: true
  - !Flag
    description: "GFF3 feature types to include as CDS (for GFF3 only;\ndefault: use\
      \ SO v2.5.3 specification)"
    synonyms:
    - --gff_cds_types
    args: !RepeatFlagArg
      name: GFF_CDS_TYPES
    optional: true
  - !Flag
    description: "GFF3 feature types to include as transcripts, even if\nno exons\
      \ are present (for GFF3 only; default: use SO\nv2.5.3 specification)"
    synonyms:
    - --mask_gff_transcript_types
    args: !RepeatFlagArg
      name: MASK_GFF_TRANSCRIPT_TYPES
    optional: true
  - !Flag
    description: "GFF3 feature types to include as exons (for GFF3 only;\ndefault:\
      \ use SO v2.5.3 specification)"
    synonyms:
    - --mask_gff_exon_types
    args: !RepeatFlagArg
      name: MASK_GFF_EXON_TYPES
    optional: true
  - !Flag
    description: "GFF3 feature types to include as CDS (for GFF3 only;\ndefault: use\
      \ SO v2.5.3 specification)"
    synonyms:
    - --mask_gff_cds_types
    args: !RepeatFlagArg
      name: MASK_GFF_CDS_TYPES
    optional: true
  - !Flag
    description: "[BED | BigBed | GTF2 | GFF3 | PSL] [infile.[BED | BigBed | GTF2\
      \ | GFF3 | PSL] ...]\nZero or more annotation files (max 1 file if BigBed)"
    synonyms:
    - --mask_annotation_files
    args: !SimpleFlagArg
      name: infile.
    optional: true
  - !Flag
    description: "Format of mask_annotation_files (Default: GTF2). Note:\nGFF3 assembly\
      \ assumes SO v.2.5.2 feature ontologies,\nwhich may or may not match your specific\
      \ file."
    synonyms:
    - --mask_annotation_format
    args: !ChoiceFlagArg
      choices: !!set
        PSL:
        BED:
        GFF3:
        BigBed:
        GTF2:
    optional: true
  - !Flag
    description: "If supplied, coding regions will be extended by 3\nnucleotides at\
      \ their 3' ends (except for GTF2 files\nthat explicitly include `stop_codon`\
      \ features). Use if\nyour annotation file excludes stop codons from CDS."
    synonyms:
    - --mask_add_three
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "mask_annotation_files are tabix-compressed and indexed\n(Default:\
      \ False). Ignored for BigBed files."
    synonyms:
    - --mask_tabix
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "mask_annotation_files are sorted by chromosomal\nposition (Default:\
      \ False)\n"
    synonyms:
    - --mask_sorted
    args: !EmptyFlagArg {}
    optional: true
  parent: *id003
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: metagene generate [-h] [-q] [-v]\n                         [--annotation_files\
    \ infile.[BED | BigBed | GTF2 | GFF3]\n                         [infile.[BED |\
    \ BigBed | GTF2 | GFF3] ...]]\n                         [--annotation_format {BED,BigBed,GTF2,GFF3}]\n\
    \                         [--add_three] [--tabix] [--sorted]\n               \
    \          [--bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]]\n \
    \                        [--maxmem MAXMEM]\n                         [--gff_transcript_types\
    \ GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]]\n                         [--gff_exon_types\
    \ GFF_EXON_TYPES [GFF_EXON_TYPES ...]]\n                         [--gff_cds_types\
    \ GFF_CDS_TYPES [GFF_CDS_TYPES ...]]\n                         [--mask_annotation_files\
    \ infile.[BED | BigBed | GTF2 | GFF3 | PSL]\n                         [infile.[BED\
    \ | BigBed | GTF2 | GFF3 | PSL] ...]]\n                         [--mask_annotation_format\
    \ {BED,BigBed,GTF2,GFF3,PSL}]\n                         [--mask_add_three] [--mask_tabix]\
    \ [--mask_sorted]\n                         [--mask_bed_extra_columns MASK_BED_EXTRA_COLUMNS\
    \ [MASK_BED_EXTRA_COLUMNS ...]]\n                         [--mask_maxmem MASK_MAXMEM]\n\
    \                         [--mask_gff_transcript_types MASK_GFF_TRANSCRIPT_TYPES\
    \ [MASK_GFF_TRANSCRIPT_TYPES ...]]\n                         [--mask_gff_exon_types\
    \ MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES ...]]\n                         [--mask_gff_cds_types\
    \ MASK_GFF_CDS_TYPES [MASK_GFF_CDS_TYPES ...]]\n                         [--landmark\
    \ {cds_start,cds_stop}]\n                         [--upstream UPSTREAM] [--downstream\
    \ DOWNSTREAM]\n                         [--group_by GROUP_BY]\n              \
    \           outbase\n\n------------------------------------------------------------------------------\n\
    \nGroup regions of interest by a shared attribute, and generate\n    maximal spanning\
    \ windows for them. Results are given in a table\n    suitable for use in ``count``\
    \ subprogram. Windows are generated by\n    the following algorithm:\n\n     1.\
    \ Transcripts are grouped by `group_by` attribute (default: by gene).\n      \
    \  If all transcripts in a group share the same\n        genomic coordinate for\
    \ the landmark of interest (for example, if all \n        share the same start\
    \ codon), then the set of transcripts is\n        included in the analysis. If\
    \ not, the set of transcripts and their\n        associated gene are excluded\
    \ from further processing.\n    \n     2. For each set of transcripts that pass\
    \ step (1), the maximal spanning\n        window is created by aligning the set\
    \ of transcripts at the landmark, and\n        adding nucleotide positions in\
    \ transcript coordinates to the growing\n        window in both 5' and 3' directions\
    \ until either:\n        \n          - the next nucleotide position added is no\
    \ longer corresponds to \n            the same genomic position in all transcripts\n\
    \            \n          - the window reaches the maximum user-specified size\n\
    \n------------------------------------------------------------------------------\n\
    \npositional arguments:\n  outbase               Basename for output files\n\n\
    optional arguments:\n  -h, --help            show this help message and exit\n\
    \  --landmark {cds_start,cds_stop}\n                        Landmark around which\
    \ to build metagene profile\n                        (Default: cds_start)\n  --upstream\
    \ UPSTREAM   Nucleotides to include upstream of landmark (Default:\n         \
    \               50)\n  --downstream DOWNSTREAM\n                        Nucleotides\
    \ to include downstream of landmark\n                        (Default: 50)\n \
    \ --group_by GROUP_BY   Attribute (e.g. in GTF2/GFF3 column 9) by which to\n \
    \                       group regions before generating maximal spanning\n   \
    \                     windows (Default: group transcripts by gene using\n    \
    \                    'gene_id' attribute from GTF2, or 'Parent' attribute\n  \
    \                      in GFF3)\n\nwarning/error options:\n  -q, --quiet     \
    \      Suppress all warning messages. Cannot use with '-v'.\n  -v, --verbose \
    \        Increase verbosity. With '-v', show every warning.\n                \
    \        With '-vv', turn warnings into exceptions. Cannot use\n             \
    \           with '-q'. (Default: show each type of warning once)\n\nannotation\
    \ file options (one or more annotation files required):\n  Open one or more genome\
    \ annotation files\n\n  --annotation_files infile.[BED | BigBed | GTF2 | GFF3]\
    \ [infile.[BED | BigBed | GTF2 | GFF3] ...]\n                        Zero or more\
    \ annotation files (max 1 file if BigBed)\n  --annotation_format {BED,BigBed,GTF2,GFF3}\n\
    \                        Format of annotation_files (Default: GTF2). Note: GFF3\n\
    \                        assembly assumes SO v.2.5.2 feature ontologies, which\n\
    \                        may or may not match your specific file.\n  --add_three\
    \           If supplied, coding regions will be extended by 3\n              \
    \          nucleotides at their 3' ends (except for GTF2 files\n             \
    \           that explicitly include `stop_codon` features). Use if\n         \
    \               your annotation file excludes stop codons from CDS.\n  --tabix\
    \               annotation_files are tabix-compressed and indexed\n          \
    \              (Default: False). Ignored for BigBed files.\n  --sorted       \
    \       annotation_files are sorted by chromosomal position\n                \
    \        (Default: False)\n\nBED-specific options:\n  --bed_extra_columns BED_EXTRA_COLUMNS\
    \ [BED_EXTRA_COLUMNS ...]\n                        Number of extra columns in\
    \ BED file (e.g. in custom\n                        ENCODE formats) or list of\
    \ names for those columns.\n                        (Default: 0).\n  --mask_bed_extra_columns\
    \ MASK_BED_EXTRA_COLUMNS [MASK_BED_EXTRA_COLUMNS ...]\n                      \
    \  Number of extra columns in BED file (e.g. in custom\n                     \
    \   ENCODE formats) or list of names for those columns.\n                    \
    \    (Default: 0).\n\nBigBed-specific options:\n  --maxmem MAXMEM       Maximum\
    \ desired memory footprint in MB to devote to\n                        BigBed/BigWig\
    \ files. May be exceeded by large queries.\n                        (Default:\
    \ 0, No maximum)\n  --mask_maxmem MASK_MAXMEM\n                        Maximum\
    \ desired memory footprint in MB to devote to\n                        BigBed/BigWig\
    \ files. May be exceeded by large queries.\n                        (Default:\
    \ 0, No maximum)\n\nGFF3-specific options:\n  --gff_transcript_types GFF_TRANSCRIPT_TYPES\
    \ [GFF_TRANSCRIPT_TYPES ...]\n                        GFF3 feature types to include\
    \ as transcripts, even if\n                        no exons are present (for GFF3\
    \ only; default: use SO\n                        v2.5.3 specification)\n  --gff_exon_types\
    \ GFF_EXON_TYPES [GFF_EXON_TYPES ...]\n                        GFF3 feature types\
    \ to include as exons (for GFF3 only;\n                        default: use SO\
    \ v2.5.3 specification)\n  --gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]\n\
    \                        GFF3 feature types to include as CDS (for GFF3 only;\n\
    \                        default: use SO v2.5.3 specification)\n  --mask_gff_transcript_types\
    \ MASK_GFF_TRANSCRIPT_TYPES [MASK_GFF_TRANSCRIPT_TYPES ...]\n                \
    \        GFF3 feature types to include as transcripts, even if\n             \
    \           no exons are present (for GFF3 only; default: use SO\n           \
    \             v2.5.3 specification)\n  --mask_gff_exon_types MASK_GFF_EXON_TYPES\
    \ [MASK_GFF_EXON_TYPES ...]\n                        GFF3 feature types to include\
    \ as exons (for GFF3 only;\n                        default: use SO v2.5.3 specification)\n\
    \  --mask_gff_cds_types MASK_GFF_CDS_TYPES [MASK_GFF_CDS_TYPES ...]\n        \
    \                GFF3 feature types to include as CDS (for GFF3 only;\n      \
    \                  default: use SO v2.5.3 specification)\n\nmask file options\
    \ (optional):\n  Add mask file(s) that annotate regions that should be excluded\
    \ from analyses\n  (e.g. repetitive genomic regions).\n\n  --mask_annotation_files\
    \ infile.[BED | BigBed | GTF2 | GFF3 | PSL] [infile.[BED | BigBed | GTF2 | GFF3\
    \ | PSL] ...]\n                        Zero or more annotation files (max 1 file\
    \ if BigBed)\n  --mask_annotation_format {BED,BigBed,GTF2,GFF3,PSL}\n        \
    \                Format of mask_annotation_files (Default: GTF2). Note:\n    \
    \                    GFF3 assembly assumes SO v.2.5.2 feature ontologies,\n  \
    \                      which may or may not match your specific file.\n  --mask_add_three\
    \      If supplied, coding regions will be extended by 3\n                   \
    \     nucleotides at their 3' ends (except for GTF2 files\n                  \
    \      that explicitly include `stop_codon` features). Use if\n              \
    \          your annotation file excludes stop codons from CDS.\n  --mask_tabix\
    \          mask_annotation_files are tabix-compressed and indexed\n          \
    \              (Default: False). Ignored for BigBed files.\n  --mask_sorted  \
    \       mask_annotation_files are sorted by chromosomal\n                    \
    \    position (Default: False)\n"
  generated_using: *id004
- !Command
  command: *id011
  positional:
  - !Positional
    description: ''
    position: 0
    name: metagene
    optional: false
  named: []
  parent: *id003
  subcommands: []
  usage: []
  help_flag: !Flag
    description: ''
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error: argument\
    \ program: invalid choice: 'OUTBASE_metagene_profile.txt' (choose from 'generate',\
    \ 'count', 'chart')\n"
  generated_using: *id004
- !Command
  command: *id012
  positional:
  - !Positional
    description: ''
    position: 0
    name: metagene
    optional: false
  named: []
  parent: *id003
  subcommands: []
  usage: []
  help_flag: !Flag
    description: ''
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error: argument\
    \ program: invalid choice: 'OUTBASE_rois.txt' (choose from 'generate', 'count',\
    \ 'chart')\n"
  generated_using: *id004
- !Command
  command: *id013
  positional:
  - !Positional
    description: ''
    position: 0
    name: metagene
    optional: false
  named: []
  parent: *id003
  subcommands: []
  usage: []
  help_flag: !Flag
    description: ''
    synonyms:
    - -h
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: metagene [-h] {generate,count,chart} ...\nmetagene: error: argument\
    \ program: invalid choice: 'OUTBASE_rois.bed' (choose from 'generate', 'count',\
    \ 'chart')\n"
  generated_using: *id004
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "usage: metagene [-h] {generate,count,chart} ...\n\n------------------------------------------------------------------------------\n\
  \nPerforms metagene analyses. The workflow is separated into the\nfollowing subprograms:\n\
  \nGenerate\n    A metagene profile is a position-wise average over all genes\n \
  \   in the vicinity of an interesting landmark (e.g. a start codon). Because\n \
  \   genes can have multiple transcript isoforms that may cover different\n    genomic\
  \ positions, which transcript positions (and therefore which\n    genomic positions)\
  \ to include in the average can be ambiguous when\n    the isoforms are not knnow.\n\
  \    \n    To handle this problem, we define for each gene the maximal spanning\
  \ window\n    over which every position at a given distance from the landmark of\
  \ interest\n    (e.g. a start or stop codon) maps to the same genomic coordinates\
  \ in all\n    transcript isoforms. The windows are defined by the following algorithm:\
  \ \n    \n     #. Transcripts are grouped by gene.\n    \n     #. Landmarks are\
  \ detected on each transcript for each gene. For genes in\n        which all transcripts\
  \ do not share the same genomic coordinate for the\n        landmark of interest,\
  \ no window can be defined, and that gene is\n        excluded from further analysis.\n\
  \    \n     #. For each set of transcripts that passes step (2), the maximal spanning\n\
  \        window is created by aligning the set of transcripts at the landmark, and\n\
  \        bidirectionally growing the maximal spanning window until either:\n   \
  \     \n           - the next nucleotide position added no longer corresponds to\
  \ \n             the same genomic position in all transcripts\n            \n  \
  \         - the window reaches the maximum user-specified size\n\n    **Note**:\
  \ if annotations are supplied as BED files, transcripts cannot be\n    grouped by\
  \ gene, because BED files don't contain this information.\n    In this case one\
  \ ROI is generated per transcript.\n    \n    \n    .. Rubric :: Output files\n\
  \    \n    OUTBASE_rois.txt\n        A tab-delimited text file describing the maximal\
  \ spanning window for\n        each gene, with columns as follows:\n        \n \
  \       ================   ==================================================\n\
  \        **Column**         **Contains**\n        ----------------   --------------------------------------------------\n\
  \n        alignment_offset   Offset to align window to all other windows in the\n\
  \                           file, if the window happens to be shorter on the 5'\n\
  \                           end than specified in ``--flank_upstream``. Typically\n\
  \                           this is `0`.\n\n        region_id          ID of region\
  \ (e.g. gene) from which window was made\n        \n        region             maximal\
  \ spanning window, formatted as\n                           `chromosome:start-end:(strand)`\n\
  \        \n        window_size        with of window\n        \n        zero_point\
  \         distance from 5' end of window to landmark\n        ================ \
  \  ==================================================\n        \n    \n    OUTBASE_rois.bed\n\
  \        Maximal spanning windows in BED format for visualization in\n        a\
  \ genome browser. The thickly-rendered portion of a window\n        indicates its\
  \ landmark\n\n    where `OUTBASE` is supplied by the user.\n    \n    \nCount\n\
  \    This program generates metagene profiles from a dataset of\n    counts or alignments,\
  \ taking the following steps:\n    \n     1. The **raw counts** at each position\
  \ in each maximal spanning window\n        (from the ``generate`` subprogram) fetched\
  \ as a raw count vector for the\n        window.\n\n     2. A **normalized count\
  \ vector** is created for each window by dividing\n        its raw count vector\
  \ by the total number of counts occurring within a\n        user-defined normalization\
  \ region within the window.\n    \n     3. A **metagene average** is created by\
  \ taking aligning all of the\n        normalized count vectors, and taking the median\
  \ normalized counts\n        over all vectors at each nucleotide position. Count\
  \ vectors deriving\n        from windows that don't meet a minimum count threshold\
  \ (set via the\n        ``--norm_region`` option) are excluded.\n    \n    \n  \
  \  .. Rubric :: Output files\n\n    Raw count vectors, normalized count vectors,\
  \ and metagene profiles are all\n    saved as tab-delimited text files, for subsequent\
  \ plotting, filtering,\n    or reanalysis.\n    \n    OUTBASE_metagene_profile.txt\n\
  \        Tab-delimited table of metagene profile, containing the following\n   \
  \     columns:\n\n        ================   ==================================================\n\
  \        **Column**         **Contains**\n        ----------------   --------------------------------------------------\n\
  \        x                  Distance in nucleotides from the landmark\n        \n\
  \        metagene_average   Value of metagene average at that position\n       \
  \ \n        regions_counted    Number of maximal spanning windows included at\n\
  \                           that position in the average. i.e. windows that\n  \
  \                         both met the threshold set by ``--min_counts`` and\n \
  \                          were not masked at that position by a mask file\n   \
  \     ================   ==================================================    \
  \    \n        \n    OUTBASE_rawcounts.txt\n        Saved if ``--keep`` is specified.\
  \ Table of raw counts. Each row is a\n        maximal spanning window for a gene,\
  \ and each column a nucleotide position\n        in that window. All windows are\
  \ aligned at the landmark.\n    \n    OUTBASE_normcounts.txt\n        Saved if ``--keep``\
  \ is specified. Table of normalized counts, produced\n        by dividing each row\
  \ in the raw count table by the of counts in that\n        row within the columns\
  \ specified by ``--normalize_over``.\n\n    OUTBASE_mask.txt\n        Saved if ``--keep``\
  \ is specified. Matrix of masks indicating which\n        cells in ``normcounts``\
  \ were excluded from computations.\n\n    OUTBASE_metagene_overview.[png  svg  pdf\
  \ | et c...]\n        Metagene average plotted above a heatmap of normalized counts,\n\
  \        in which each row of pixels is a maximal spanning window for a gene,\n\
  \        and rows are sorted by the column in which they reach their\n        max\
  \ value. To facilitate visualization, colors in the heatmap are scaled\n       \
  \ from 0 to the 95th percentile of non-zero numbers in the normalized counts\n \
  \       \n    `OUTBASE` is supplied by the user.\n\n    \nChart\n    One or more\
  \ metagene profiles generated by the ``count`` subprogram,\n    for example, on\
  \ different datasets, are plotted against each other. \n\nSee command-line help\
  \ for each subprogram for details on parameters for each\n\n------------------------------------------------------------------------------\n\
  \noptional arguments:\n  -h, --help            show this help message and exit\n\
  \nsubcommands:\n  choose one of the following\n\n  {generate,count,chart}\n    generate\
  \            Create ROI file from genome annotation\n    count               Count\
  \ reads falling into regions of interest,\n                        normalize, and\
  \ average into a metagene profile\n    chart               Plot metagene profiles\n"
generated_using: *id004
