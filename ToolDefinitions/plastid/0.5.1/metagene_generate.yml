!Command
command:
- metagene
- generate
positional:
- !Positional
  description: Basename for output files
  position: 0
  name: outbase
  optional: false
named:
- !Flag
  description: "Landmark around which to build metagene profile\n(Default: cds_start)"
  synonyms:
  - --landmark
  args: !ChoiceFlagArg
    choices: !!set
      cds_start:
      cds_stop:
  optional: true
- !Flag
  description: "Nucleotides to include upstream of landmark (Default:\n50)"
  synonyms:
  - --upstream
  args: !SimpleFlagArg
    name: UPSTREAM
  optional: true
- !Flag
  description: "Nucleotides to include downstream of landmark\n(Default: 50)"
  synonyms:
  - --downstream
  args: !SimpleFlagArg
    name: DOWNSTREAM
  optional: true
- !Flag
  description: "Attribute (e.g. in GTF2/GFF3 column 9) by which to\ngroup regions\
    \ before generating maximal spanning\nwindows (Default: group transcripts by gene\
    \ using\n'gene_id' attribute from GTF2, or 'Parent' attribute\nin GFF3)"
  synonyms:
  - --group_by
  args: !SimpleFlagArg
    name: GROUP_BY
  optional: true
- !Flag
  description: Suppress all warning messages. Cannot use with '-v'.
  synonyms:
  - -q
  - --quiet
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Increase verbosity. With '-v', show every warning.\nWith '-vv', turn\
    \ warnings into exceptions. Cannot use\nwith '-q'. (Default: show each type of\
    \ warning once)"
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "[BED | BigBed | GTF2 | GFF3] [infile.[BED | BigBed | GTF2 | GFF3]\
    \ ...]\nZero or more annotation files (max 1 file if BigBed)"
  synonyms:
  - --annotation_files
  args: !SimpleFlagArg
    name: infile.
  optional: true
- !Flag
  description: "Format of annotation_files (Default: GTF2). Note: GFF3\nassembly assumes\
    \ SO v.2.5.2 feature ontologies, which\nmay or may not match your specific file."
  synonyms:
  - --annotation_format
  args: !ChoiceFlagArg
    choices: !!set
      GTF2:
      BigBed:
      BED:
      GFF3:
  optional: true
- !Flag
  description: "If supplied, coding regions will be extended by 3\nnucleotides at\
    \ their 3' ends (except for GTF2 files\nthat explicitly include `stop_codon` features).\
    \ Use if\nyour annotation file excludes stop codons from CDS."
  synonyms:
  - --add_three
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "annotation_files are tabix-compressed and indexed\n(Default: False).\
    \ Ignored for BigBed files."
  synonyms:
  - --tabix
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "annotation_files are sorted by chromosomal position\n(Default: False)"
  synonyms:
  - --sorted
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Number of extra columns in BED file (e.g. in custom\nENCODE formats)\
    \ or list of names for those columns.\n(Default: 0)."
  synonyms:
  - --bed_extra_columns
  args: !RepeatFlagArg
    name: BED_EXTRA_COLUMNS
  optional: true
- !Flag
  description: "Number of extra columns in BED file (e.g. in custom\nENCODE formats)\
    \ or list of names for those columns.\n(Default: 0)."
  synonyms:
  - --mask_bed_extra_columns
  args: !RepeatFlagArg
    name: MASK_BED_EXTRA_COLUMNS
  optional: true
- !Flag
  description: "Maximum desired memory footprint in MB to devote to\nBigBed/BigWig\
    \ files. May be exceeded by large queries.\n(Default: 0, No maximum)"
  synonyms:
  - --maxmem
  args: !SimpleFlagArg
    name: MAXMEM
  optional: true
- !Flag
  description: "Maximum desired memory footprint in MB to devote to\nBigBed/BigWig\
    \ files. May be exceeded by large queries.\n(Default: 0, No maximum)"
  synonyms:
  - --mask_maxmem
  args: !SimpleFlagArg
    name: MASK_MAXMEM
  optional: true
- !Flag
  description: "GFF3 feature types to include as transcripts, even if\nno exons are\
    \ present (for GFF3 only; default: use SO\nv2.5.3 specification)"
  synonyms:
  - --gff_transcript_types
  args: !RepeatFlagArg
    name: GFF_TRANSCRIPT_TYPES
  optional: true
- !Flag
  description: "GFF3 feature types to include as exons (for GFF3 only;\ndefault: use\
    \ SO v2.5.3 specification)"
  synonyms:
  - --gff_exon_types
  args: !RepeatFlagArg
    name: GFF_EXON_TYPES
  optional: true
- !Flag
  description: "GFF3 feature types to include as CDS (for GFF3 only;\ndefault: use\
    \ SO v2.5.3 specification)"
  synonyms:
  - --gff_cds_types
  args: !RepeatFlagArg
    name: GFF_CDS_TYPES
  optional: true
- !Flag
  description: "GFF3 feature types to include as transcripts, even if\nno exons are\
    \ present (for GFF3 only; default: use SO\nv2.5.3 specification)"
  synonyms:
  - --mask_gff_transcript_types
  args: !RepeatFlagArg
    name: MASK_GFF_TRANSCRIPT_TYPES
  optional: true
- !Flag
  description: "GFF3 feature types to include as exons (for GFF3 only;\ndefault: use\
    \ SO v2.5.3 specification)"
  synonyms:
  - --mask_gff_exon_types
  args: !RepeatFlagArg
    name: MASK_GFF_EXON_TYPES
  optional: true
- !Flag
  description: "GFF3 feature types to include as CDS (for GFF3 only;\ndefault: use\
    \ SO v2.5.3 specification)"
  synonyms:
  - --mask_gff_cds_types
  args: !RepeatFlagArg
    name: MASK_GFF_CDS_TYPES
  optional: true
- !Flag
  description: "[BED | BigBed | GTF2 | GFF3 | PSL] [infile.[BED | BigBed | GTF2 |\
    \ GFF3 | PSL] ...]\nZero or more annotation files (max 1 file if BigBed)"
  synonyms:
  - --mask_annotation_files
  args: !SimpleFlagArg
    name: infile.
  optional: true
- !Flag
  description: "Format of mask_annotation_files (Default: GTF2). Note:\nGFF3 assembly\
    \ assumes SO v.2.5.2 feature ontologies,\nwhich may or may not match your specific\
    \ file."
  synonyms:
  - --mask_annotation_format
  args: !ChoiceFlagArg
    choices: !!set
      PSL:
      BED:
      GFF3:
      BigBed:
      GTF2:
  optional: true
- !Flag
  description: "If supplied, coding regions will be extended by 3\nnucleotides at\
    \ their 3' ends (except for GTF2 files\nthat explicitly include `stop_codon` features).\
    \ Use if\nyour annotation file excludes stop codons from CDS."
  synonyms:
  - --mask_add_three
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "mask_annotation_files are tabix-compressed and indexed\n(Default:\
    \ False). Ignored for BigBed files."
  synonyms:
  - --mask_tabix
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "mask_annotation_files are sorted by chromosomal\nposition (Default:\
    \ False)\n"
  synonyms:
  - --mask_sorted
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "usage: metagene generate [-h] [-q] [-v]\n                         [--annotation_files\
  \ infile.[BED | BigBed | GTF2 | GFF3]\n                         [infile.[BED | BigBed\
  \ | GTF2 | GFF3] ...]]\n                         [--annotation_format {BED,BigBed,GTF2,GFF3}]\n\
  \                         [--add_three] [--tabix] [--sorted]\n                 \
  \        [--bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]]\n     \
  \                    [--maxmem MAXMEM]\n                         [--gff_transcript_types\
  \ GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]]\n                         [--gff_exon_types\
  \ GFF_EXON_TYPES [GFF_EXON_TYPES ...]]\n                         [--gff_cds_types\
  \ GFF_CDS_TYPES [GFF_CDS_TYPES ...]]\n                         [--mask_annotation_files\
  \ infile.[BED | BigBed | GTF2 | GFF3 | PSL]\n                         [infile.[BED\
  \ | BigBed | GTF2 | GFF3 | PSL] ...]]\n                         [--mask_annotation_format\
  \ {BED,BigBed,GTF2,GFF3,PSL}]\n                         [--mask_add_three] [--mask_tabix]\
  \ [--mask_sorted]\n                         [--mask_bed_extra_columns MASK_BED_EXTRA_COLUMNS\
  \ [MASK_BED_EXTRA_COLUMNS ...]]\n                         [--mask_maxmem MASK_MAXMEM]\n\
  \                         [--mask_gff_transcript_types MASK_GFF_TRANSCRIPT_TYPES\
  \ [MASK_GFF_TRANSCRIPT_TYPES ...]]\n                         [--mask_gff_exon_types\
  \ MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES ...]]\n                         [--mask_gff_cds_types\
  \ MASK_GFF_CDS_TYPES [MASK_GFF_CDS_TYPES ...]]\n                         [--landmark\
  \ {cds_start,cds_stop}]\n                         [--upstream UPSTREAM] [--downstream\
  \ DOWNSTREAM]\n                         [--group_by GROUP_BY]\n                \
  \         outbase\n\n------------------------------------------------------------------------------\n\
  \nGroup regions of interest by a shared attribute, and generate\n    maximal spanning\
  \ windows for them. Results are given in a table\n    suitable for use in ``count``\
  \ subprogram. Windows are generated by\n    the following algorithm:\n\n     1.\
  \ Transcripts are grouped by `group_by` attribute (default: by gene).\n        If\
  \ all transcripts in a group share the same\n        genomic coordinate for the\
  \ landmark of interest (for example, if all \n        share the same start codon),\
  \ then the set of transcripts is\n        included in the analysis. If not, the\
  \ set of transcripts and their\n        associated gene are excluded from further\
  \ processing.\n    \n     2. For each set of transcripts that pass step (1), the\
  \ maximal spanning\n        window is created by aligning the set of transcripts\
  \ at the landmark, and\n        adding nucleotide positions in transcript coordinates\
  \ to the growing\n        window in both 5' and 3' directions until either:\n  \
  \      \n          - the next nucleotide position added is no longer corresponds\
  \ to \n            the same genomic position in all transcripts\n            \n\
  \          - the window reaches the maximum user-specified size\n\n------------------------------------------------------------------------------\n\
  \npositional arguments:\n  outbase               Basename for output files\n\noptional\
  \ arguments:\n  -h, --help            show this help message and exit\n  --landmark\
  \ {cds_start,cds_stop}\n                        Landmark around which to build metagene\
  \ profile\n                        (Default: cds_start)\n  --upstream UPSTREAM \
  \  Nucleotides to include upstream of landmark (Default:\n                     \
  \   50)\n  --downstream DOWNSTREAM\n                        Nucleotides to include\
  \ downstream of landmark\n                        (Default: 50)\n  --group_by GROUP_BY\
  \   Attribute (e.g. in GTF2/GFF3 column 9) by which to\n                       \
  \ group regions before generating maximal spanning\n                        windows\
  \ (Default: group transcripts by gene using\n                        'gene_id' attribute\
  \ from GTF2, or 'Parent' attribute\n                        in GFF3)\n\nwarning/error\
  \ options:\n  -q, --quiet           Suppress all warning messages. Cannot use with\
  \ '-v'.\n  -v, --verbose         Increase verbosity. With '-v', show every warning.\n\
  \                        With '-vv', turn warnings into exceptions. Cannot use\n\
  \                        with '-q'. (Default: show each type of warning once)\n\n\
  annotation file options (one or more annotation files required):\n  Open one or\
  \ more genome annotation files\n\n  --annotation_files infile.[BED | BigBed | GTF2\
  \ | GFF3] [infile.[BED | BigBed | GTF2 | GFF3] ...]\n                        Zero\
  \ or more annotation files (max 1 file if BigBed)\n  --annotation_format {BED,BigBed,GTF2,GFF3}\n\
  \                        Format of annotation_files (Default: GTF2). Note: GFF3\n\
  \                        assembly assumes SO v.2.5.2 feature ontologies, which\n\
  \                        may or may not match your specific file.\n  --add_three\
  \           If supplied, coding regions will be extended by 3\n                \
  \        nucleotides at their 3' ends (except for GTF2 files\n                 \
  \       that explicitly include `stop_codon` features). Use if\n               \
  \         your annotation file excludes stop codons from CDS.\n  --tabix       \
  \        annotation_files are tabix-compressed and indexed\n                   \
  \     (Default: False). Ignored for BigBed files.\n  --sorted              annotation_files\
  \ are sorted by chromosomal position\n                        (Default: False)\n\
  \nBED-specific options:\n  --bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS\
  \ ...]\n                        Number of extra columns in BED file (e.g. in custom\n\
  \                        ENCODE formats) or list of names for those columns.\n \
  \                       (Default: 0).\n  --mask_bed_extra_columns MASK_BED_EXTRA_COLUMNS\
  \ [MASK_BED_EXTRA_COLUMNS ...]\n                        Number of extra columns\
  \ in BED file (e.g. in custom\n                        ENCODE formats) or list of\
  \ names for those columns.\n                        (Default: 0).\n\nBigBed-specific\
  \ options:\n  --maxmem MAXMEM       Maximum desired memory footprint in MB to devote\
  \ to\n                        BigBed/BigWig files. May be exceeded by large queries.\n\
  \                        (Default: 0, No maximum)\n  --mask_maxmem MASK_MAXMEM\n\
  \                        Maximum desired memory footprint in MB to devote to\n \
  \                       BigBed/BigWig files. May be exceeded by large queries.\n\
  \                        (Default: 0, No maximum)\n\nGFF3-specific options:\n  --gff_transcript_types\
  \ GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]\n                        GFF3\
  \ feature types to include as transcripts, even if\n                        no exons\
  \ are present (for GFF3 only; default: use SO\n                        v2.5.3 specification)\n\
  \  --gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]\n                      \
  \  GFF3 feature types to include as exons (for GFF3 only;\n                    \
  \    default: use SO v2.5.3 specification)\n  --gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES\
  \ ...]\n                        GFF3 feature types to include as CDS (for GFF3 only;\n\
  \                        default: use SO v2.5.3 specification)\n  --mask_gff_transcript_types\
  \ MASK_GFF_TRANSCRIPT_TYPES [MASK_GFF_TRANSCRIPT_TYPES ...]\n                  \
  \      GFF3 feature types to include as transcripts, even if\n                 \
  \       no exons are present (for GFF3 only; default: use SO\n                 \
  \       v2.5.3 specification)\n  --mask_gff_exon_types MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES\
  \ ...]\n                        GFF3 feature types to include as exons (for GFF3\
  \ only;\n                        default: use SO v2.5.3 specification)\n  --mask_gff_cds_types\
  \ MASK_GFF_CDS_TYPES [MASK_GFF_CDS_TYPES ...]\n                        GFF3 feature\
  \ types to include as CDS (for GFF3 only;\n                        default: use\
  \ SO v2.5.3 specification)\n\nmask file options (optional):\n  Add mask file(s)\
  \ that annotate regions that should be excluded from analyses\n  (e.g. repetitive\
  \ genomic regions).\n\n  --mask_annotation_files infile.[BED | BigBed | GTF2 | GFF3\
  \ | PSL] [infile.[BED | BigBed | GTF2 | GFF3 | PSL] ...]\n                     \
  \   Zero or more annotation files (max 1 file if BigBed)\n  --mask_annotation_format\
  \ {BED,BigBed,GTF2,GFF3,PSL}\n                        Format of mask_annotation_files\
  \ (Default: GTF2). Note:\n                        GFF3 assembly assumes SO v.2.5.2\
  \ feature ontologies,\n                        which may or may not match your specific\
  \ file.\n  --mask_add_three      If supplied, coding regions will be extended by\
  \ 3\n                        nucleotides at their 3' ends (except for GTF2 files\n\
  \                        that explicitly include `stop_codon` features). Use if\n\
  \                        your annotation file excludes stop codons from CDS.\n \
  \ --mask_tabix          mask_annotation_files are tabix-compressed and indexed\n\
  \                        (Default: False). Ignored for BigBed files.\n  --mask_sorted\
  \         mask_annotation_files are sorted by chromosomal\n                    \
  \    position (Default: False)\n"
generated_using:
- --help
