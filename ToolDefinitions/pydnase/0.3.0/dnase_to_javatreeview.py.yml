!Command
command:
- dnase_to_javatreeview.py
positional:
- !Positional
  optional: false
  position: 0
  name: regions
  description: "BED file of the regions you want to generate the\nheatmap for"
- !Positional
  optional: false
  position: 1
  name: reads
  description: The BAM file containing the read data
- !Positional
  optional: false
  position: 2
  name: output
  description: filename to write the CSV output to
- !Positional
  optional: false
  position: 0
  name: counts
  description: -n                    Normalise the cut data for each region between
    0 and 1
named:
- !Flag
  optional: true
  synonyms:
  - -w
  - --window_size
  description: "Size of flanking area around centre of the regions to\nplot (default:\
    \ 100)"
  args: !SimpleFlagArg
    name: WINDOW_SIZE
- !Flag
  optional: true
  synonyms:
  - -i
  description: Ignores strand information in BED file
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -o
  description: "Orders output the same as the input (default: orders\nby FOS)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -a
  description: Write absolute cut counts instead strand imbalanced
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -c
  description: Disable memory caching (low RAM mode)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -b
  description: Normalise for cutting bias
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -A
  description: 'ATAC-seq mode (default: False)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -bf
  - --bias-file
  description: Location of the sorted, index
  args: !SimpleFlagArg
    name: BIAS_FILE
- !Flag
  optional: true
  synonyms:
  - -r
  description: Randomise the ordering of the output
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -n
  description: ''
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: dnase_to_javatreeview.py [-h] [-w WINDOW_SIZE] [-i] [-o] [-a] [-n]\
  \ [-c]\n                                [-b] [-A] [-bf BIAS_FILE] [-r]\n       \
  \                         regions reads output\n\nWrites a JavaTreeView file based\
  \ on the regions in reads BED file and the\nreads in reads BAM file\n\npositional\
  \ arguments:\n  regions               BED file of the regions you want to generate\
  \ the\n                        heatmap for\n  reads                 The BAM file\
  \ containing the read data\n  output                filename to write the CSV output\
  \ to\n\noptional arguments:\n  -h, --help            show this help message and\
  \ exit\n  -w WINDOW_SIZE, --window_size WINDOW_SIZE\n                        Size\
  \ of flanking area around centre of the regions to\n                        plot\
  \ (default: 100)\n  -i                    Ignores strand information in BED file\n\
  \  -o                    Orders output the same as the input (default: orders\n\
  \                        by FOS)\n  -a                    Write absolute cut counts\
  \ instead strand imbalanced\n                        counts\n  -n              \
  \      Normalise the cut data for each region between 0 and 1\n  -c            \
  \        Disable memory caching (low RAM mode)\n  -b                    Normalise\
  \ for cutting bias\n  -A                    ATAC-seq mode (default: False)\n  -bf\
  \ BIAS_FILE, --bias-file BIAS_FILE\n                        Location of the sorted,\
  \ index\n  -r                    Randomise the ordering of the output\n"
generated_using:
- --help
docker_image:
