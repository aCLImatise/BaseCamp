!Command
command:
- anvi-push
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - --user
  description: The user for an anvi'server.
  args: !SimpleFlagArg
    name: USERNAME
- !Flag
  optional: true
  synonyms:
  - --api-url
  description: Anvi'server url
  args: !SimpleFlagArg
    name: API_URL
- !Flag
  optional: true
  synonyms:
  - -n
  - --project-name
  description: "Name of the project. Please choose a short but\ndescriptive name (so\
    \ anvi'o can use it whenever she\nneeds to name an output file, or add a new table\
    \ in a\ndatabase, or name her first born)."
  args: !SimpleFlagArg
    name: PROJECT_NAME
- !Flag
  optional: true
  synonyms:
  - -t
  - --tree
  description: NEWICK formatted tree structure
  args: !SimpleFlagArg
    name: NEWICK
- !Flag
  optional: true
  synonyms:
  - --items-order
  description: "A flat file that contains the order of items you wish\nthe display\
    \ using the interactive interface. You may\nwant to use this if you have a specific\
    \ order of items\nin your mind, and do not want to display a tree in the\nmiddle\
    \ (or simply you don't have one). The file format\nis simple: each line should\
    \ have an item name, and\nthere should be no header."
  args: !SimpleFlagArg
    name: FLAT_FILE
- !Flag
  optional: true
  synonyms:
  - -f
  - --fasta-file
  description: A FASTA-formatted input file
  args: !SimpleFlagArg
    name: FASTA
- !Flag
  optional: true
  synonyms:
  - -d
  - --view-data
  description: A TAB-delimited file for view data
  args: !SimpleFlagArg
    name: VIEW_DATA
- !Flag
  optional: true
  synonyms:
  - -A
  - --additional-layers
  description: "A TAB-delimited file for additional layers for splits.\nThe first\
    \ column of this file must be split names, and\nthe remaining columns should be\
    \ unique attributes. The\nfile does not need to contain all split names, or\n\
    values for each split in every column. Anvi'o will try\nto deal with missing data\
    \ nicely. Each column in this\nfile will be visualized as a new layer in the tree."
  args: !SimpleFlagArg
    name: ADDITIONAL_LAYERS
- !Flag
  optional: true
  synonyms:
  - -s
  - --state
  description: "State file, you can export states from database using\nanvi-export-state\
    \ program"
  args: !SimpleFlagArg
    name: STATE
- !Flag
  optional: true
  synonyms:
  - --description
  description: "A plain text file that contains some description about\nthe project.\
    \ You can use Markdwon syntax. The\ndescription text will be rendered and shown\
    \ in all\nrelevant interfaces, including the anvi'o interactive\ninterface, or\
    \ anvi'o summary outputs."
  args: !SimpleFlagArg
    name: TEXT_FILE
- !Flag
  optional: true
  synonyms:
  - --bins
  description: "Tab-delimited file, first column contains tree leaves\n(gene clusters,\
    \ splits, contigs etc.) and second\ncolumn contains which Bin they belong."
  args: !SimpleFlagArg
    name: BINS_DATA
- !Flag
  optional: true
  synonyms:
  - --bins-info
  description: "Additional information for bins. The file must contain\nthree TAB-delimited\
    \ columns, where the first one must\nbe a unique bin name, the second should be\
    \ a 'source',\nand the last one should be a 7 character HTML color\ncode (i.e.,\
    \ '#424242'). Source column must contain\ninformation about the origin of the\
    \ bin. If these bins\nare automatically identified by a program like\nCONCOCT,\
    \ this column could contain the program name\nand version. The source information\
    \ will be associated\nwith the bin in various interfaces so in a sense it is\n\
    not *that* critical what it says there, but on the\nother hand it is, becuse we\
    \ should also think about\npeople who may end up having to work with what we put\n\
    together later."
  args: !SimpleFlagArg
    name: BINS_INFO
- !Flag
  optional: true
  synonyms:
  - --delete-if-exists
  description: Be bold (at your own risk), and delete if exists.
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: anvi-push [-h] --user USERNAME [--api-url API_URL] -n PROJECT_NAME\n\
  \                 [-t NEWICK] [--items-order FLAT_FILE] [-f FASTA]\n           \
  \      [-d VIEW_DATA] [-A ADDITIONAL_LAYERS] [-s STATE]\n                 [--description\
  \ TEXT_FILE] [--bins BINS_DATA]\n                 [--bins-info BINS_INFO] [--delete-if-exists]\n\
  \nPush stuff to an anvi'server\n\noptional arguments:\n  -h, --help            show\
  \ this help message and exit\n\nSERVER DETAILS:\n  Details of how to access to an\
  \ anvi'server instance.\n\n  --user USERNAME       The user for an anvi'server.\n\
  \  --api-url API_URL     Anvi'server url\n\nPROJECT DETAILS:\n  What to send to\
  \ the server\n\n  -n PROJECT_NAME, --project-name PROJECT_NAME\n               \
  \         Name of the project. Please choose a short but\n                     \
  \   descriptive name (so anvi'o can use it whenever she\n                      \
  \  needs to name an output file, or add a new table in a\n                     \
  \   database, or name her first born).\n  -t NEWICK, --tree NEWICK\n           \
  \             NEWICK formatted tree structure\n  --items-order FLAT_FILE\n     \
  \                   A flat file that contains the order of items you wish\n    \
  \                    the display using the interactive interface. You may\n    \
  \                    want to use this if you have a specific order of items\n  \
  \                      in your mind, and do not want to display a tree in the\n\
  \                        middle (or simply you don't have one). The file format\n\
  \                        is simple: each line should have an item name, and\n  \
  \                      there should be no header.\n  -f FASTA, --fasta-file FASTA\n\
  \                        A FASTA-formatted input file\n  -d VIEW_DATA, --view-data\
  \ VIEW_DATA\n                        A TAB-delimited file for view data\n  -A ADDITIONAL_LAYERS,\
  \ --additional-layers ADDITIONAL_LAYERS\n                        A TAB-delimited\
  \ file for additional layers for splits.\n                        The first column\
  \ of this file must be split names, and\n                        the remaining columns\
  \ should be unique attributes. The\n                        file does not need to\
  \ contain all split names, or\n                        values for each split in\
  \ every column. Anvi'o will try\n                        to deal with missing data\
  \ nicely. Each column in this\n                        file will be visualized as\
  \ a new layer in the tree.\n  -s STATE, --state STATE\n                        State\
  \ file, you can export states from database using\n                        anvi-export-state\
  \ program\n  --description TEXT_FILE\n                        A plain text file\
  \ that contains some description about\n                        the project. You\
  \ can use Markdwon syntax. The\n                        description text will be\
  \ rendered and shown in all\n                        relevant interfaces, including\
  \ the anvi'o interactive\n                        interface, or anvi'o summary outputs.\n\
  \  --bins BINS_DATA      Tab-delimited file, first column contains tree leaves\n\
  \                        (gene clusters, splits, contigs etc.) and second\n    \
  \                    column contains which Bin they belong.\n  --bins-info BINS_INFO\n\
  \                        Additional information for bins. The file must contain\n\
  \                        three TAB-delimited columns, where the first one must\n\
  \                        be a unique bin name, the second should be a 'source',\n\
  \                        and the last one should be a 7 character HTML color\n \
  \                       code (i.e., '#424242'). Source column must contain\n   \
  \                     information about the origin of the bin. If these bins\n \
  \                       are automatically identified by a program like\n       \
  \                 CONCOCT, this column could contain the program name\n        \
  \                and version. The source information will be associated\n      \
  \                  with the bin in various interfaces so in a sense it is\n    \
  \                    not *that* critical what it says there, but on the\n      \
  \                  other hand it is, becuse we should also think about\n       \
  \                 people who may end up having to work with what we put\n      \
  \                  together later.\n\nRISKY CLICKS:\n  As the name suggests!\n\n\
  \  --delete-if-exists    Be bold (at your own risk), and delete if exists.\n"
generated_using:
- --help
docker_image:
