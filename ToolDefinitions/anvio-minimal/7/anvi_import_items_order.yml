&id001 !Command
command:
- anvi-import-items-order
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -i
  - --input-order
  description: "One of the two important things you must provide: the\nfile that contains\
    \ the items order. The format of this\nfile is important. It can either contain\
    \ a proper\nnewick tree in it, or a complete list of 'items' in\nthe target database\
    \ where every line of the file is\nsimply an item name. If you are providing a\
    \ newick\ntree, the entire file should be a single line. I know\nit sounds hard,\
    \ but you seriously can do this.\n(default: None)"
  args: !SimpleFlagArg
    name: FILE
- !Flag
  optional: true
  synonyms:
  - -p
  description: "PATH, --db-path DB PATH\nAn appropriate anvi'o database to import\
    \ the items\norder. Currently it can be a profile, pan, or genes\ndatabase. But\
    \ you should try your chances with other\nkinds of databases for fun and games.\
    \ Basically, if\nthe database contains an items order table, then\nthings will\
    \ work. Otherwise, you will probably get\nangry errors back in the worst case\
    \ scenario.\n(default: None)"
  args: !SimpleFlagArg
    name: DB
- !Flag
  optional: true
  synonyms:
  - --name
  description: "NAME     What should we call this order? Give it a concise,\nsingle-word\
    \ name. (default: None)"
  args: !SimpleFlagArg
    name: ORDER
- !Flag
  optional: true
  synonyms:
  - --make-default
  description: "You have the option to make this order the default\norder in the database.\
    \ Which means, anvi'o will use\nthis one when someone runs the program anvi-\n\
    interactive and presses draw. Big responsibility. But\nif you have a 'default'\
    \ state, it will not work\nbecause the default items order in the state file\n\
    overwrites the one that comes from the database. So\nnot that big of a responsibility.\
    \ (default: False)"
  args: !EmptyFlagArg {}
parent:
subcommands:
- !Command
  command:
  - anvi-import-items-order
  - misc-data-items-order
  positional:
  - !Positional
    optional: false
    position: 0
    name: anvi-import-items-order
    description: ''
  - !Positional
    optional: true
    position: 1
    name: PATH
    description: ''
  - !Positional
    optional: true
    position: 2
    name: NAME
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --name
    description: ''
    args: !SimpleFlagArg
      name: ORDER
  - !Flag
    optional: true
    synonyms:
    - -p
    description: ''
    args: !SimpleFlagArg
      name: DB
  - !Flag
    optional: true
    synonyms:
    - -i
    description: ''
    args: !SimpleFlagArg
      name: FILE
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    description: ''
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: anvi-import-items-order [-h] [-i FILE] [-p DB PATH] [--name ORDER\
    \ NAME]\n                               [--make-default] [--version] [--debug]\n\
    \                               [--force] [--fix-sad-tables] [--quiet]\n     \
    \                          [--no-progress] [--as-markdown]\nanvi-import-items-order:\
    \ error: unrecognized arguments: misc-data-items-order\n"
  generated_using: []
  docker_image: quay.io/biocontainers/anvio-minimal:7--py_0
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: anvi-import-items-order [-h] [-i FILE] [-p DB PATH] [--name ORDER\
  \ NAME]\n                               [--make-default]\n\noptional arguments:\n\
  \  -h, --help            show this help message and exit\n\nCRITICAL INPUT:\n  Basically\
  \ the input file and the target database\n\n  -i FILE, --input-order FILE\n    \
  \                    One of the two important things you must provide: the\n   \
  \                     file that contains the items order. The format of this\n \
  \                       file is important. It can either contain a proper\n    \
  \                    newick tree in it, or a complete list of 'items' in\n     \
  \                   the target database where every line of the file is\n      \
  \                  simply an item name. If you are providing a newick\n        \
  \                tree, the entire file should be a single line. I know\n       \
  \                 it sounds hard, but you seriously can do this.\n             \
  \           (default: None)\n  -p DB PATH, --db-path DB PATH\n                 \
  \       An appropriate anvi'o database to import the items\n                   \
  \     order. Currently it can be a profile, pan, or genes\n                    \
  \    database. But you should try your chances with other\n                    \
  \    kinds of databases for fun and games. Basically, if\n                     \
  \   the database contains an items order table, then\n                        things\
  \ will work. Otherwise, you will probably get\n                        angry errors\
  \ back in the worst case scenario.\n                        (default: None)\n\n\
  NOT SO CRITICAL INPUT:\n  Because not all parameters are created equal\n\n  --name\
  \ ORDER NAME     What should we call this order? Give it a concise,\n          \
  \              single-word name. (default: None)\n  --make-default        You have\
  \ the option to make this order the default\n                        order in the\
  \ database. Which means, anvi'o will use\n                        this one when\
  \ someone runs the program anvi-\n                        interactive and presses\
  \ draw. Big responsibility. But\n                        if you have a 'default'\
  \ state, it will not work\n                        because the default items order\
  \ in the state file\n                        overwrites the one that comes from\
  \ the database. So\n                        not that big of a responsibility. (default:\
  \ False)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\
  \n\U0001F525 Program description:\n\n   Import a new items order into an anvi'o\
  \ database\n\n\U0001F9C0 Can consume: \n\n   pan-db / profile-db / misc-data-items-order-txt\
  \ / dendrogram / phylogeny\n   \n\U0001F355 Can provide: \n\n   misc-data-items-order\n\
  \   \n\U0001F37A More on `anvi-import-items-order`:\n\n   https://merenlab.org/software/anvio/help/7/programs/anvi-import-items-order\n\
  \n\U0001F37B All anvi'o programs and artifacts:\n\n   https://merenlab.org/software/anvio/help/7\n\
  \n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\
  \n"
generated_using:
- --help
docker_image: quay.io/biocontainers/anvio-minimal:7--py_0
