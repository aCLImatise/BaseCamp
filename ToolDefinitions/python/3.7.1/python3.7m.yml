!Command
command:
- python3.7m
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -b
  description: ": issue warnings about str(bytes_instance), str(bytearray_instance)\n\
    and comparing bytes/bytearray with str. (-bb: issue errors)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -B
  description: ": don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -c
  description: ': program passed in as string (terminates option list)'
  args: !SimpleFlagArg
    name: cmd
- !Flag
  optional: true
  synonyms:
  - -d
  description: ': debug output from parser; also PYTHONDEBUG=x'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -E
  description: ': ignore PYTHON* environment variables (such as PYTHONPATH)'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -i
  description: ": inspect interactively after running script; forces a prompt even\n\
    if stdin does not appear to be a terminal; also PYTHONINSPECT=x"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -I
  description: ": isolate Python from the user's environment (implies -E and -s)"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -m
  description: ': run library module as a script (terminates option list)'
  args: !SimpleFlagArg
    name: mod
- !Flag
  optional: true
  synonyms:
  - -O
  description: ": remove assert and __debug__-dependent statements; add .opt-1 before\n\
    .pyc extension; also PYTHONOPTIMIZE=x"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -OO
  description: ": do -O changes and also discard docstrings; add .opt-2 before\n.pyc\
    \ extension"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -q
  description: ": don't print version and copyright messages on interactive startup"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  description: ": don't add user site directory to sys.path; also PYTHONNOUSERSITE"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -S
  description: ": don't imply 'import site' on initialization"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -u
  description: ": force the stdout and stderr streams to be unbuffered;\nthis option\
    \ has no effect on stdin; also PYTHONUNBUFFERED=x"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -v
  description: ": verbose (trace import statements); also PYTHONVERBOSE=x\ncan be\
    \ supplied multiple times to increase verbosity"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -V
  description: ": print the Python version number and exit (also --version)\nwhen\
    \ given twice, print more information about the build"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -W
  description: ": warning control; arg is action:message:category:module:lineno\n\
    also PYTHONWARNINGS=arg"
  args: !SimpleFlagArg
    name: arg
- !Flag
  optional: true
  synonyms:
  - -x
  description: ': skip first line of source, allowing use of non-Unix forms of #!cmd'
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -X
  description: ': set implementation-specific option'
  args: !SimpleFlagArg
    name: opt
- !Flag
  optional: true
  synonyms:
  - --check-hash-based-pycs
  description: "|default|never:\ncontrol how Python invalidates hash-based .pyc files"
  args: !SimpleFlagArg
    name: always
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  description: ': print this help message and exit (also --help)'
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: python3.7m [option] ... [-c cmd | -m mod | file | -] [arg] ...\n\
  Options and arguments (and corresponding environment variables):\n-b     : issue\
  \ warnings about str(bytes_instance), str(bytearray_instance)\n         and comparing\
  \ bytes/bytearray with str. (-bb: issue errors)\n-B     : don't write .pyc files\
  \ on import; also PYTHONDONTWRITEBYTECODE=x\n-c cmd : program passed in as string\
  \ (terminates option list)\n-d     : debug output from parser; also PYTHONDEBUG=x\n\
  -E     : ignore PYTHON* environment variables (such as PYTHONPATH)\n-h     : print\
  \ this help message and exit (also --help)\n-i     : inspect interactively after\
  \ running script; forces a prompt even\n         if stdin does not appear to be\
  \ a terminal; also PYTHONINSPECT=x\n-I     : isolate Python from the user's environment\
  \ (implies -E and -s)\n-m mod : run library module as a script (terminates option\
  \ list)\n-O     : remove assert and __debug__-dependent statements; add .opt-1 before\n\
  \         .pyc extension; also PYTHONOPTIMIZE=x\n-OO    : do -O changes and also\
  \ discard docstrings; add .opt-2 before\n         .pyc extension\n-q     : don't\
  \ print version and copyright messages on interactive startup\n-s     : don't add\
  \ user site directory to sys.path; also PYTHONNOUSERSITE\n-S     : don't imply 'import\
  \ site' on initialization\n-u     : force the stdout and stderr streams to be unbuffered;\n\
  \         this option has no effect on stdin; also PYTHONUNBUFFERED=x\n-v     :\
  \ verbose (trace import statements); also PYTHONVERBOSE=x\n         can be supplied\
  \ multiple times to increase verbosity\n-V     : print the Python version number\
  \ and exit (also --version)\n         when given twice, print more information about\
  \ the build\n-W arg : warning control; arg is action:message:category:module:lineno\n\
  \         also PYTHONWARNINGS=arg\n-x     : skip first line of source, allowing\
  \ use of non-Unix forms of #!cmd\n-X opt : set implementation-specific option\n\
  --check-hash-based-pycs always|default|never:\n    control how Python invalidates\
  \ hash-based .pyc files\nfile   : program read from script file\n-      : program\
  \ read from stdin (default; interactive mode if a tty)\narg ...: arguments passed\
  \ to program in sys.argv[1:]\n\nOther environment variables:\nPYTHONSTARTUP: file\
  \ executed on interactive startup (no default)\nPYTHONPATH   : ':'-separated list\
  \ of directories prefixed to the\n               default module search path.  The\
  \ result is sys.path.\nPYTHONHOME   : alternate <prefix> directory (or <prefix>:<exec_prefix>).\n\
  \               The default module search path uses <prefix>/lib/pythonX.X.\nPYTHONCASEOK\
  \ : ignore case in 'import' statements (Windows).\nPYTHONIOENCODING: Encoding[:errors]\
  \ used for stdin/stdout/stderr.\nPYTHONFAULTHANDLER: dump the Python traceback on\
  \ fatal errors.\nPYTHONHASHSEED: if this variable is set to 'random', a random value\
  \ is used\n   to seed the hashes of str, bytes and datetime objects.  It can also\
  \ be\n   set to an integer in the range [0,4294967295] to get hash values with a\n\
  \   predictable seed.\nPYTHONMALLOC: set the Python memory allocators and/or install\
  \ debug hooks\n   on Python memory allocators. Use PYTHONMALLOC=debug to install\
  \ debug\n   hooks.\nPYTHONCOERCECLOCALE: if this variable is set to 0, it disables\
  \ the locale\n   coercion behavior. Use PYTHONCOERCECLOCALE=warn to request display\
  \ of\n   locale coercion and locale compatibility warnings on stderr.\nPYTHONBREAKPOINT:\
  \ if this variable is set to 0, it disables the default\n   debugger. It can be\
  \ set to the callable of your debugger of choice.\nPYTHONDEVMODE: enable the development\
  \ mode.\n"
generated_using:
- --help
docker_image:
