!Command
command:
- pydoc
positional:
- !Positional
  optional: false
  position: 0
  name: package.
  description: If <name> contains a '/', it is used as the path to a
- !Positional
  optional: false
  position: 0
  name: directory.
  description: If <name> contains a '/', it is treated as a filename; if
named: []
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "pydoc - the Python documentation tool\n\npydoc <name> ...\n    Show text\
  \ documentation on something.  <name> may be the name of a\n    Python keyword,\
  \ topic, function, module, or package, or a dotted\n    reference to a class or\
  \ function within a module or module in a\n    package.  If <name> contains a '/',\
  \ it is used as the path to a\n    Python source file to document. If name is 'keywords',\
  \ 'topics',\n    or 'modules', a listing of these things is displayed.\n\npydoc\
  \ -k <keyword>\n    Search for a keyword in the synopsis lines of all available\
  \ modules.\n\npydoc -n <hostname>\n    Start an HTTP server with the given hostname\
  \ (default: localhost).\n\npydoc -p <port>\n    Start an HTTP server on the given\
  \ port on the local machine.  Port\n    number 0 can be used to get an arbitrary\
  \ unused port.\n\npydoc -b\n    Start an HTTP server on an arbitrary unused port\
  \ and open a Web browser\n    to interactively browse documentation.  This option\
  \ can be used in\n    combination with -n and/or -p.\n\npydoc -w <name> ...\n  \
  \  Write out the HTML documentation for a module to a file in the current\n    directory.\
  \  If <name> contains a '/', it is treated as a filename; if\n    it names a directory,\
  \ documentation is written for all the contents.\n\n"
generated_using:
- --help
docker_image:
