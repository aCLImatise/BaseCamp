&id004 !Command
command:
- planemo
- shed_test
positional:
- !Positional
  description: --galaxy_email TEXT             E-mail address to use when launching
    single-
  position: 0
  name: Galaxy.
  optional: false
named:
- !Flag
  description: "Recursively perform command for nested\nrepository directories."
  synonyms:
  - -r
  - --recursive
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "If multiple repositories are specified and\nan error occurs stop immediately\
    \ instead of\nprocessing remaining repositories."
  synonyms:
  - --fail_fast
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Tool Shed repository owner (username).
  synonyms:
  - --owner
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "Tool Shed repository name (defaults to the\ninferred tool directory\
    \ name)."
  synonyms:
  - --name
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
  synonyms:
  - --shed_email
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
    \ and password is\nspecified. This key can be specified with\neither --shed_key\
    \ or --shed_key_from_env."
  synonyms:
  - --shed_key
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "Environment variable to read API key for\nTool Shed access from."
  synonyms:
  - --shed_key_from_env
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
  synonyms:
  - --shed_password
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local'\
    \ (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined ~/.planemo.yml."
  synonyms:
  - -t
  - --shed_target
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "Root of development galaxy directory to\nexecute command with."
  synonyms:
  - --galaxy_root
  args: !SimpleFlagArg
    name: DIRECTORY
  optional: true
- !Flag
  description: "[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under"
  synonyms:
  - --galaxy_python_version
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Extra tool sources to include in Galaxy's\ntool panel (file or directory).\
    \ These will\nnot be linted/tested/etc... but they will be\navailable to workflows\
    \ and for interactive\nuse."
  synonyms:
  - --extra_tools
  args: !SimpleFlagArg
    name: PATH
  optional: true
- !Flag
  description: "Download and configure a disposable copy of\nGalaxy from github."
  synonyms:
  - --install_galaxy
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
    \ isn't specified."
  synonyms:
  - --galaxy_branch
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
    \ github source if\na Galaxy root isn't specified."
  synonyms:
  - --galaxy_source
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "Do not create or source a virtualenv\nenvironment for Galaxy, this\
    \ should be used\nor instance to preserve an externally\nconfigured virtual environment\
    \ or conda\nenvironment."
  synonyms:
  - --skip_venv
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\n\
    Not caching this results in faster downloads\n(no git) - so is better on throw\
    \ away\ninstances such with TravisCI."
  synonyms:
  - --no_cache_galaxy
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Do not cleanup temp files created for and by
  synonyms:
  - --no_cleanup
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: / --no_docker          Run Galaxy tools in Docker if enabled.
  synonyms:
  - --docker
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Command used to launch docker (defaults to\ndocker)."
  synonyms:
  - --docker_cmd
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
  synonyms:
  - --docker_sudo
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Docker host to target when executing docker\ncommands (defaults to\
    \ localhost)."
  synonyms:
  - --docker_host
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "sudo command to use when --docker_sudo is\nenabled (defaults to sudo)."
  synonyms:
  - --docker_sudo_cmd
  args: !SimpleFlagArg
    name: TEXT
  optional: true
- !Flag
  description: "Test tools against mulled containers (forces\n--docker)."
  synonyms:
  - --mulled_containers
  - --biocontainers
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Job configuration file for Galaxy to target.
  synonyms:
  - --job_config_file
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: Tool dependency dir for Galaxy to target.
  synonyms:
  - --tool_dependency_dir
  args: !SimpleFlagArg
    name: DIRECTORY
  optional: true
- !Flag
  description: "Update test-data directory with job outputs\n(normally written to\
    \ directory\n--job_output_files if specified.)"
  synonyms:
  - --update_test_data
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "/ --no_paste_test_data_paths\nBy default Planemo will use or not use\n\
    Galaxy's path paste option to load test data\ninto a history based on the engine\
    \ type it\nis targeting. This can override the logic to\nexplicitly enable or\
    \ disable path pasting."
  synonyms:
  - --paste_test_data_paths
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Output test report (HTML - for humans)\ndefaults to tool_test_output.html."
  synonyms:
  - --test_output
  args: !SimpleFlagArg
    name: PATH
  optional: true
- !Flag
  description: "Output test report (Basic text - for display\nin CI)"
  synonyms:
  - --test_output_text
  args: !SimpleFlagArg
    name: PATH
  optional: true
- !Flag
  description: "Output test report (Markdown style - for\nhumans & computers)"
  synonyms:
  - --test_output_markdown
  args: !SimpleFlagArg
    name: PATH
  optional: true
- !Flag
  description: Output test report (xunit style - for CI
  synonyms:
  - --test_output_xunit
  args: !SimpleFlagArg
    name: PATH
  optional: true
- !Flag
  description: Write job outputs to specified directory.
  synonyms:
  - --job_output_files
  args: !SimpleFlagArg
    name: DIRECTORY
  optional: true
- !Flag
  description: "[none|minimal|compact]\nSummary style printed to planemo's standard\n\
    output (see output reports for more complete\nsummary). Set to 'none' to disable\n\
    completely."
  synonyms:
  - --summary
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Do not install shed dependencies as part of\nrepository installation."
  synonyms:
  - --skip_dependencies
  args: !EmptyFlagArg {}
  optional: true
parent: &id001 !Command
  command:
  - planemo
  positional: []
  named:
  - !Flag
    description: Enables verbose mode.
    synonyms:
    - -v
    - --verbose
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: Planemo configuration YAML file.
    synonyms:
    - --config
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  - !Flag
    description: Workspace for planemo.
    synonyms:
    - --directory
    args: !SimpleFlagArg
      name: TEXT
    optional: true
  parent:
  subcommands:
  - !Command
    command:
    - planemo
    - shed_create
    positional:
    - !Positional
      description: --fail_fast               If multiple repositories are specified
        and an
      position: 0
      name: directories.
      optional: false
    named:
    - !Flag
      description: Recursively perform command for nested repository
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Tool Shed repository owner (username).
      synonyms:
      - --owner
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed repository name (defaults to the\ninferred tool directory\
        \ name)."
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_email
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
        \ and password is specified.\nThis key can be specified with either --shed_key\n\
        or --shed_key_from_env."
      synonyms:
      - --shed_key
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Environment variable to read API key for Tool Shed\naccess from."
      synonyms:
      - --shed_key_from_env
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_password
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed',\
        \ 'local' (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings\
        \ defined ~/.planemo.yml."
      synonyms:
      - -t
      - --shed_target
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Commit message for tool shed upload.
      synonyms:
      - -m
      - --message
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Skip upload contents as part of operation, only\nupdate metadata."
      synonyms:
      - --skip_upload
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo shed_create [OPTIONS] PROJECT\n\n  Create a repository\
      \ in a Galaxy Tool Shed.\n\n  This will read the settings from the ``.shed.yml``\
      \ file.\n\nOptions:\n  -r, --recursive           Recursively perform command\
      \ for nested repository\n                            directories.\n  --fail_fast\
      \               If multiple repositories are specified and an\n            \
      \                error occurs stop immediately instead of\n                \
      \            processing remaining repositories.\n  --owner TEXT            \
      \  Tool Shed repository owner (username).\n  --name TEXT               Tool\
      \ Shed repository name (defaults to the\n                            inferred\
      \ tool directory name).\n  --shed_email TEXT         E-mail for Tool Shed auth\
      \ (required unless\n                            shed_key is specified).\n  --shed_key\
      \ TEXT           API key for Tool Shed access. An API key is\n             \
      \               required unless e-mail and password is specified.\n        \
      \                    This key can be specified with either --shed_key\n    \
      \                        or --shed_key_from_env.\n  --shed_key_from_env TEXT\
      \  Environment variable to read API key for Tool Shed\n                    \
      \        access from.\n  --shed_password TEXT      Password for Tool Shed auth\
      \ (required unless\n                            shed_key is specified).\n  -t,\
      \ --shed_target TEXT    Tool Shed to target (this can be 'toolshed',\n     \
      \                       'testtoolshed', 'local' (alias for\n               \
      \             http://localhost:9009/), an arbitrary url or\n               \
      \             mappings defined ~/.planemo.yml.\n  -m, --message TEXT       \
      \ Commit message for tool shed upload.\n  --skip_upload             Skip upload\
      \ contents as part of operation, only\n                            update metadata.\n\
      \  --help                    Show this message and exit.\n"
    generated_using: &id002
    - --help
  - !Command
    command:
    - planemo
    - test
    positional:
    - !Positional
      description: --galaxy_email TEXT             E-mail address to use when launching
        single-
      position: 0
      name: Galaxy.
      optional: false
    - !Positional
      description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
      position: 0
      name: resolvers.
      optional: false
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 1
      name: commands.
      optional: false
    - !Positional
      description: --shed_tool_conf TEXT           Location of shed tools conf file
        for Galaxy.
      position: 0
      name: Galaxy.
      optional: false
    - !Positional
      description: --galaxy_user_key TEXT          User key to use with external Galaxy
        engine.
      position: 0
      name: engine.
      optional: false
    named:
    - !Flag
      description: "Re-run only failed tests. This command will\nread tool_test_output.json\
        \ to determine\nwhich tests failed so this file must have\nbeen produced with\
        \ the same set of tool ids\npreviously."
      synonyms:
      - --failed
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Poll resources with an increasing interval\nbetween requests.\
        \ Useful when testing\nagainst remote and/or production instances\nto limit\
        \ generated traffic."
      synonyms:
      - --polling_backoff
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "Name for history (if a history is generated\nas part of testing.)"
      synonyms:
      - --history_name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Root of development galaxy directory to\nexecute command with."
      synonyms:
      - --galaxy_root
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under"
      synonyms:
      - --galaxy_python_version
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Extra tool sources to include in Galaxy's\ntool panel (file or\
        \ directory). These will\nnot be linted/tested/etc... but they will be\navailable\
        \ to workflows and for interactive\nuse."
      synonyms:
      - --extra_tools
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Download and configure a disposable copy of\nGalaxy from github."
      synonyms:
      - --install_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
        \ isn't specified."
      synonyms:
      - --galaxy_branch
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
        \ github source if\na Galaxy root isn't specified."
      synonyms:
      - --galaxy_source
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Do not create or source a virtualenv\nenvironment for Galaxy,\
        \ this should be used\nor instance to preserve an externally\nconfigured virtual\
        \ environment or conda\nenvironment."
      synonyms:
      - --skip_venv
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip caching of Galaxy source and\ndependencies obtained with\
        \ --install_galaxy.\nNot caching this results in faster downloads\n(no git)\
        \ - so is better on throw away\ninstances such with TravisCI."
      synonyms:
      - --no_cache_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not cleanup temp files created for and by
      synonyms:
      - --no_cleanup
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: / --no_docker          Run Galaxy tools in Docker if enabled.
      synonyms:
      - --docker
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Command used to launch docker (defaults to\ndocker)."
      synonyms:
      - --docker_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Test tools against mulled containers (forces\n--docker)."
      synonyms:
      - --mulled_containers
      - --biocontainers
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Job configuration file for Galaxy to target.
      synonyms:
      - --job_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Tool dependency dir for Galaxy to target.
      synonyms:
      - --tool_dependency_dir
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "test-data directory to for specified\ntool(s)."
      synonyms:
      - --test_data
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
      synonyms:
      - --tool_data_table
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Dependency resolver configuration for Galaxy\nto target."
      synonyms:
      - --dependency_resolvers_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: "Configure Galaxy to use plain brew\ndependency resolution."
      synonyms:
      - --brew_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
      synonyms:
      - --shed_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Configure Galaxy with no dependency
      synonyms:
      - --no_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use only conda for\ndependency resolution."
      synonyms:
      - --conda_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Conda dependency resolution for Galaxy will\ncopy dependencies\
        \ instead of attempting to\nlink them."
      synonyms:
      - --conda_copy_dependencies
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_install\nConda dependency resolution for Galaxy\
        \ will\nattempt to install requested but missing\npackages."
      synonyms:
      - --conda_auto_install
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_init\nConda dependency resolution for Galaxy\
        \ will\nauto install conda itself using miniconda if\nnot availabe on conda_prefix."
      synonyms:
      - --conda_auto_init
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name of profile (created with the\nprofile_create command) to\
        \ use with this\ncommand."
      synonyms:
      - --profile
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Database connection string to use for
      synonyms:
      - --database_connection
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Location of shed tools directory for Galaxy.
      synonyms:
      - --shed_tool_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_galaxy_single_user\nBy default Planemo will configure Galaxy\
        \ to\nrun in single-user mode where there is just\none user and this user\
        \ is automatically\nlogged it. Use --no_galaxy_single_user to\nprevent Galaxy\
        \ from running this way."
      synonyms:
      - --galaxy_single_user
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Update test-data directory with job outputs\n(normally written\
        \ to directory\n--job_output_files if specified.)"
      synonyms:
      - --update_test_data
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_paste_test_data_paths\nBy default Planemo will use or not\
        \ use\nGalaxy's path paste option to load test data\ninto a history based\
        \ on the engine type it\nis targeting. This can override the logic to\nexplicitly\
        \ enable or disable path pasting."
      synonyms:
      - --paste_test_data_paths
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Output test report (HTML - for humans)\ndefaults to tool_test_output.html."
      synonyms:
      - --test_output
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Output test report (Basic text - for display\nin CI)"
      synonyms:
      - --test_output_text
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Output test report (Markdown style - for\nhumans & computers)"
      synonyms:
      - --test_output_markdown
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: Output test report (xunit style - for CI
      synonyms:
      - --test_output_xunit
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: Write job outputs to specified directory.
      synonyms:
      - --job_output_files
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "[none|minimal|compact]\nSummary style printed to planemo's standard\n\
        output (see output reports for more complete\nsummary). Set to 'none' to disable\n\
        completely."
      synonyms:
      - --summary
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[galaxy|docker_galaxy|cwltool|toil|external_galaxy]\nSelect an\
        \ engine to run or test artifacts\nsuch as tools and workflows. Defaults to\
        \ a\nlocal Galaxy, but running Galaxy within a\nDocker container or the CWL\
        \ reference\nimplementation 'cwltool' and 'toil' be\nselected."
      synonyms:
      - --engine
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Disable strict validation of CWL.
      synonyms:
      - --non_strict_cwl
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "If cwltool engine is used, disable Docker\ncontainer usage."
      synonyms:
      - --no-container
      - --no_container
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
        \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
      synonyms:
      - --docker_galaxy_image
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Extra path to mount if --engine docker.
      synonyms:
      - --docker_extra_volume
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "When installing shed repositories for\nworkflows, ignore dependency\
        \ issues. These\nlikely indicate a problem but in some cases\nmay not prevent\
        \ a workflow from successfully\nexecuting."
      synonyms:
      - --ignore_dependency_problems
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_shed_install\nBy default Planemo will attempt to install\n\
        repositories needed for workflow testing.\nThis may not be appropriate for\
        \ production\nservers and so this can disabled by calling\nplanemo with --no_shed_install."
      synonyms:
      - --shed_install
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Remote Galaxy URL to use with external\nGalaxy engine."
      synonyms:
      - --galaxy_url
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Admin key to use with external Galaxy
      synonyms:
      - --galaxy_admin_key
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo test [OPTIONS] TOOL_PATH\n\n  Run specified tool's\
      \ tests within Galaxy.\n\n  All referenced tools (by default all the tools in\
      \ the current working\n  directory) will be tested and the results quickly summarized.\n\
      \n  To run these tests planemo needs a Galaxy instance to utilize, planemo\n\
      \  will search parent directories to see if any is a Galaxy instance - but\n\
      \  one can pick the Galaxy instance to use with the --galaxy_root option or\n\
      \  force planemo to download a disposable instance with the\n  ``--install_galaxy``\
      \ flag.\n\n  In additon to to quick summary printed to the console - various\
      \ detailed\n  output summaries can be configured. ``tool_test_output.html``\
      \ (settable\n  via ``--test_output``) will contain a human consumable HTML report\n\
      \  describing the test run. A JSON file (settable via ``--test_output_json``\n\
      \  and defaulting to ``tool_test_output.json``) will also be created. These\n\
      \  files can can be disabled by passing in empty arguments or globally by\n\
      \  setting the values ``default_test_output`` and/or\n  ``default_test_output_json``\
      \ in ``~/.planemo.yml`` to ``null``. For\n  continuous integration testing a\
      \ xUnit-style report can be confiured using\n  the ``--test_output_xunit``.\n\
      \n  planemo uses temporarily generated config files and environment variables\n\
      \  to attempt to shield this execution of Galaxy from manually launched runs\n\
      \  against that same Galaxy root - but this may not be bullet proof yet so\n\
      \  please careful and do not try this against production Galaxy instances.\n\
      \nOptions:\n  --failed                        Re-run only failed tests. This\
      \ command will\n                                  read tool_test_output.json\
      \ to determine\n                                  which tests failed so this\
      \ file must have\n                                  been produced with the same\
      \ set of tool ids\n                                  previously.\n  --polling_backoff\
      \ INTEGER       Poll resources with an increasing interval\n               \
      \                   between requests. Useful when testing\n                \
      \                  against remote and/or production instances\n            \
      \                      to limit generated traffic.\n  --history_name TEXT  \
      \           Name for history (if a history is generated\n                  \
      \                as part of testing.)\n  --galaxy_root DIRECTORY         Root\
      \ of development galaxy directory to\n                                  execute\
      \ command with.\n  --galaxy_python_version [2|2.7|3|3.5|3.6|3.7|3.8]\n     \
      \                             Python version to start Galaxy under\n  --extra_tools\
      \ PATH              Extra tool sources to include in Galaxy's\n            \
      \                      tool panel (file or directory). These will\n        \
      \                          not be linted/tested/etc... but they will be\n  \
      \                                available to workflows and for interactive\n\
      \                                  use.\n  --install_galaxy                Download\
      \ and configure a disposable copy of\n                                  Galaxy\
      \ from github.\n  --galaxy_branch TEXT            Branch of Galaxy to target\
      \ (defaults to\n                                  master) if a Galaxy root isn't\
      \ specified.\n  --galaxy_source TEXT            Git source of Galaxy to target\
      \ (defaults to\n                                  the official galaxyproject\
      \ github source if\n                                  a Galaxy root isn't specified.\n\
      \  --skip_venv                     Do not create or source a virtualenv\n  \
      \                                environment for Galaxy, this should be used\n\
      \                                  or instance to preserve an externally\n \
      \                                 configured virtual environment or conda\n\
      \                                  environment.\n  --no_cache_galaxy       \
      \        Skip caching of Galaxy source and\n                               \
      \   dependencies obtained with --install_galaxy.\n                         \
      \         Not caching this results in faster downloads\n                   \
      \               (no git) - so is better on throw away\n                    \
      \              instances such with TravisCI.\n  --no_cleanup               \
      \     Do not cleanup temp files created for and by\n                       \
      \           Galaxy.\n  --galaxy_email TEXT             E-mail address to use\
      \ when launching single-\n                                  user Galaxy server.\n\
      \  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n\
      \  --docker_cmd TEXT               Command used to launch docker (defaults to\n\
      \                                  docker).\n  --docker_sudo / --no_docker_sudo\n\
      \                                  Flag to use sudo when running docker.\n \
      \ --docker_host TEXT              Docker host to target when executing docker\n\
      \                                  commands (defaults to localhost).\n  --docker_sudo_cmd\
      \ TEXT          sudo command to use when --docker_sudo is\n                \
      \                  enabled (defaults to sudo).\n  --mulled_containers, --biocontainers\n\
      \                                  Test tools against mulled containers (forces\n\
      \                                  --docker).\n  --job_config_file FILE    \
      \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir\
      \ DIRECTORY\n                                  Tool dependency dir for Galaxy\
      \ to target.\n  --test_data DIRECTORY           test-data directory to for specified\n\
      \                                  tool(s).\n  --tool_data_table PATH      \
      \    tool_data_table_conf.xml file to for\n                                \
      \  specified tool(s).\n  --dependency_resolvers_config_file FILE\n         \
      \                         Dependency resolver configuration for Galaxy\n   \
      \                               to target.\n  --brew_dependency_resolution \
      \   Configure Galaxy to use plain brew\n                                  dependency\
      \ resolution.\n  --shed_dependency_resolution    Configure Galaxy to use brewed\
      \ Tool Shed\n                                  dependency resolution.\n  --no_dependency_resolution\
      \      Configure Galaxy with no dependency\n                               \
      \   resolvers.\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
      \ dependency\n                                  commands.\n  --conda_exec FILE\
      \               Location of conda executable.\n  --conda_debug             \
      \      Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --conda_dependency_resolution   Configure\
      \ Galaxy to use only conda for\n                                  dependency\
      \ resolution.\n  --conda_copy_dependencies       Conda dependency resolution\
      \ for Galaxy will\n                                  copy dependencies instead\
      \ of attempting to\n                                  link them.\n  --conda_auto_install\
      \ / --no_conda_auto_install\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  attempt to install\
      \ requested but missing\n                                  packages.\n  --conda_auto_init\
      \ / --no_conda_auto_init\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  auto install\
      \ conda itself using miniconda if\n                                  not availabe\
      \ on conda_prefix.\n  --profile TEXT                  Name of profile (created\
      \ with the\n                                  profile_create command) to use\
      \ with this\n                                  command.\n  --postgres      \
      \                Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --file_path\
      \ DIRECTORY           Location for files created by Galaxy (e.g.\n         \
      \                         database/files).\n  --database_connection TEXT   \
      \   Database connection string to use for\n                                \
      \  Galaxy.\n  --shed_tool_conf TEXT           Location of shed tools conf file\
      \ for Galaxy.\n  --shed_tool_path TEXT           Location of shed tools directory\
      \ for Galaxy.\n  --galaxy_single_user / --no_galaxy_single_user\n          \
      \                        By default Planemo will configure Galaxy to\n     \
      \                             run in single-user mode where there is just\n\
      \                                  one user and this user is automatically\n\
      \                                  logged it. Use --no_galaxy_single_user to\n\
      \                                  prevent Galaxy from running this way.\n \
      \ --update_test_data              Update test-data directory with job outputs\n\
      \                                  (normally written to directory\n        \
      \                          --job_output_files if specified.)\n  --paste_test_data_paths\
      \ / --no_paste_test_data_paths\n                                  By default\
      \ Planemo will use or not use\n                                  Galaxy's path\
      \ paste option to load test data\n                                  into a history\
      \ based on the engine type it\n                                  is targeting.\
      \ This can override the logic to\n                                  explicitly\
      \ enable or disable path pasting.\n  --test_output PATH              Output\
      \ test report (HTML - for humans)\n                                  defaults\
      \ to tool_test_output.html.\n  --test_output_text PATH         Output test report\
      \ (Basic text - for display\n                                  in CI)\n  --test_output_markdown\
      \ PATH     Output test report (Markdown style - for\n                      \
      \            humans & computers)\n  --test_output_xunit PATH        Output test\
      \ report (xunit style - for CI\n                                  systems\n\
      \  --test_output_junit PATH        Output test report (jUnit style - for CI\n\
      \                                  systems\n  --test_output_json PATH      \
      \   Output test report (planemo json) defaults\n                           \
      \       to tool_test_output.json.\n  --job_output_files DIRECTORY    Write job\
      \ outputs to specified directory.\n  --summary [none|minimal|compact]\n    \
      \                              Summary style printed to planemo's standard\n\
      \                                  output (see output reports for more complete\n\
      \                                  summary). Set to 'none' to disable\n    \
      \                              completely.\n  --engine [galaxy|docker_galaxy|cwltool|toil|external_galaxy]\n\
      \                                  Select an engine to run or test artifacts\n\
      \                                  such as tools and workflows. Defaults to\
      \ a\n                                  local Galaxy, but running Galaxy within\
      \ a\n                                  Docker container or the CWL reference\n\
      \                                  implementation 'cwltool' and 'toil' be\n\
      \                                  selected.\n  --non_strict_cwl           \
      \     Disable strict validation of CWL.\n  --no-container, --no_container  If\
      \ cwltool engine is used, disable Docker\n                                 \
      \ container usage.\n  --docker_galaxy_image TEXT      Docker image identifier\
      \ for docker-galaxy-\n                                  flavor used if engine\
      \ type is specified as\n                                  ``docker-galaxy``.\
      \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\
      \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n\
      \  --ignore_dependency_problems    When installing shed repositories for\n \
      \                                 workflows, ignore dependency issues. These\n\
      \                                  likely indicate a problem but in some cases\n\
      \                                  may not prevent a workflow from successfully\n\
      \                                  executing.\n  --shed_install / --no_shed_install\n\
      \                                  By default Planemo will attempt to install\n\
      \                                  repositories needed for workflow testing.\n\
      \                                  This may not be appropriate for production\n\
      \                                  servers and so this can disabled by calling\n\
      \                                  planemo with --no_shed_install.\n  --galaxy_url\
      \ TEXT               Remote Galaxy URL to use with external\n              \
      \                    Galaxy engine.\n  --galaxy_admin_key TEXT         Admin\
      \ key to use with external Galaxy\n                                  engine.\n\
      \  --galaxy_user_key TEXT          User key to use with external Galaxy engine.\n\
      \  --help                          Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - project_init
    positional:
    - !Positional
      description: ''
      position: 0
      name: PROJECT
      optional: false
    named:
    - !Flag
      description: ''
      synonyms:
      - --template
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo project_init [OPTIONS] PROJECT\n\n  (Experimental)\
      \ Initialize a new tool project.\n\n  This is only a proof-of-concept demo right\
      \ now.\n\nOptions:\n  --template TEXT\n  --help           Show this message\
      \ and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - profile_create
    positional:
    - !Positional
      description: --docker_cmd TEXT               Command used to launch docker (defaults
        to
      position: 0
      name: container.
      optional: false
    named:
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo profile_create [OPTIONS] PROFILE_NAME\n\n  Create a\
      \ profile.\n\nOptions:\n  --postgres                      Use postgres database\
      \ type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n        \
      \                          Type of database to use for profile -\n         \
      \                         'auto', 'sqlite', 'postgres', and\n              \
      \                    'postgres_docker' are available options. Use\n        \
      \                          postgres to use an existing postgres server\n   \
      \                               you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --engine\
      \ [galaxy|docker_galaxy|external_galaxy]\n                                 \
      \ Select an engine to serve artifacts such as\n                            \
      \      tools and workflows. Defaults to a local\n                          \
      \        Galaxy, but running Galaxy within a Docker\n                      \
      \            container.\n  --docker_cmd TEXT               Command used to launch\
      \ docker (defaults to\n                                  docker).\n  --docker_sudo\
      \ / --no_docker_sudo\n                                  Flag to use sudo when\
      \ running docker.\n  --docker_host TEXT              Docker host to target when\
      \ executing docker\n                                  commands (defaults to\
      \ localhost).\n  --docker_sudo_cmd TEXT          sudo command to use when --docker_sudo\
      \ is\n                                  enabled (defaults to sudo).\n  --help\
      \                          Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - shed_update
    positional:
    - !Positional
      description: '% planemo shed_update --shed_target testtoolshed path/to/repo'
      position: 0
      name: shed.
      optional: false
    - !Positional
      description: The lower-level ``shed_upload`` command should be used instead
        if the
      position: 0
      name: changes.
      optional: false
    named:
    - !Flag
      description: Output an XUnit report, useful for CI testing
      synonyms:
      - --report_xunit
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Recursively perform command for nested\nrepository directories."
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "If multiple repositories are specified and an\nerror occurs stop\
        \ immediately instead of\nprocessing remaining repositories."
      synonyms:
      - --fail_fast
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Tool Shed repository owner (username).
      synonyms:
      - --owner
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed repository name (defaults to the\ninferred tool directory\
        \ name)."
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_email
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
        \ and password is\nspecified. This key can be specified with\neither --shed_key\
        \ or --shed_key_from_env."
      synonyms:
      - --shed_key
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Environment variable to read API key for Tool\nShed access from."
      synonyms:
      - --shed_key_from_env
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_password
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed',\
        \ 'local' (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings\
        \ defined ~/.planemo.yml."
      synonyms:
      - -t
      - --shed_target
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Commit message for tool shed upload.
      synonyms:
      - -m
      - --message
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "If a repository cannot be found for the\nspecified user/repo name\
        \ pair, then\nautomatically create the repository in the\ntoolshed."
      synonyms:
      - --force_repository_creation
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip uploading if the shed_diff detects there\nwould be no 'difference'\
        \ (only attributes\npopulated by the shed would be updated.)"
      synonyms:
      - --check_diff
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip upload contents as part of operation, only\nupdate metadata."
      synonyms:
      - --skip_upload
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip metadata update as part of operation, only\nupload new contents."
      synonyms:
      - --skip_metadata
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo shed_update [OPTIONS] PROJECT\n\n  Update Tool Shed\
      \ repository.\n\n  By default this command will update both repository metadata\
      \ from\n  ``.shed.yml`` and upload new contents from the repository directory.\n\
      \n      % planemo shed_update\n\n  This will update the main tool shed with\
      \ the repository defined by a\n  ``.shed.yml`` file in the current working directory.\
      \ Both the location of\n  the ``.shed.yml`` and the tool shed to upload to can\
      \ be easily configured.\n  For instance, the following command can be used if\
      \ ``.shed.yml`` if\n  contained in ``path/to/repo`` and the desire is to update\
      \ the test tool\n  shed.\n\n      % planemo shed_update --shed_target testtoolshed\
      \ path/to/repo\n\n  Another important option is ``--check_diff`` - this doesn't\
      \ affect the\n  updating of shed metadata but it will check for differences\
      \ before\n  uploading new contents to the tool shed. This may important because\
      \ the\n  tool shed will automatically populate certain attributes in tool shed\n\
      \  artifact files (such as ``tool_dependencies.xml``) and this may cause\n \
      \ unwanted installable revisions to be created when there are no important\n\
      \  changes.\n\n  The lower-level ``shed_upload`` command should be used instead\
      \ if the\n  repository doesn't define complete metadata in a ``.shed.yml``.\n\
      \nOptions:\n  --report_xunit PATH          Output an XUnit report, useful for\
      \ CI testing\n  -r, --recursive              Recursively perform command for\
      \ nested\n                               repository directories.\n  --fail_fast\
      \                  If multiple repositories are specified and an\n         \
      \                      error occurs stop immediately instead of\n          \
      \                     processing remaining repositories.\n  --owner TEXT   \
      \              Tool Shed repository owner (username).\n  --name TEXT       \
      \           Tool Shed repository name (defaults to the\n                   \
      \            inferred tool directory name).\n  --shed_email TEXT           \
      \ E-mail for Tool Shed auth (required unless\n                             \
      \  shed_key is specified).\n  --shed_key TEXT              API key for Tool\
      \ Shed access. An API key is\n                               required unless\
      \ e-mail and password is\n                               specified. This key\
      \ can be specified with\n                               either --shed_key or\
      \ --shed_key_from_env.\n  --shed_key_from_env TEXT     Environment variable\
      \ to read API key for Tool\n                               Shed access from.\n\
      \  --shed_password TEXT         Password for Tool Shed auth (required unless\n\
      \                               shed_key is specified).\n  -t, --shed_target\
      \ TEXT       Tool Shed to target (this can be 'toolshed',\n                \
      \               'testtoolshed', 'local' (alias for\n                       \
      \        http://localhost:9009/), an arbitrary url or\n                    \
      \           mappings defined ~/.planemo.yml.\n  -m, --message TEXT         \
      \  Commit message for tool shed upload.\n  --force_repository_creation  If a\
      \ repository cannot be found for the\n                               specified\
      \ user/repo name pair, then\n                               automatically create\
      \ the repository in the\n                               toolshed.\n  --check_diff\
      \                 Skip uploading if the shed_diff detects there\n          \
      \                     would be no 'difference' (only attributes\n          \
      \                     populated by the shed would be updated.)\n  --skip_upload\
      \                Skip upload contents as part of operation, only\n         \
      \                      update metadata.\n  --skip_metadata              Skip\
      \ metadata update as part of operation, only\n                             \
      \  upload new contents.\n  --help                       Show this message and\
      \ exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - share_test
    positional:
    - !Positional
      description: ''
      position: 0
      name: FILE_PATH
      optional: false
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo share_test [OPTIONS] FILE_PATH\n\n  Publish JSON test\
      \ results as sharable Gist.\n\n  This will upload the JSON test results to Github\
      \ as a Gist and produce\n  sharable URL.\n\n  The sharable URL can be used to\
      \ share an HTML version of the report that\n  can be easily embedded in pull\
      \ requests or commit messages.\n\n  Requires a ~/.planemo.yml with Github 'username'\
      \ and 'password' defined in\n  a 'github' section of that configuration file.\n\
      \nOptions:\n  --help  Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - training_init
    positional:
    - !Positional
      description: --workflow_id TEXT              ID of the workflow on the Galaxy
        instance
      position: 0
      name: workflow
      optional: false
    - !Positional
      description: --galaxy_email TEXT             E-mail address to use when launching
        single-
      position: 1
      name: Galaxy.
      optional: false
    - !Positional
      description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
      position: 0
      name: resolvers.
      optional: false
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 1
      name: commands.
      optional: false
    - !Positional
      description: --shed_tool_conf TEXT           Location of shed tools conf file
        for Galaxy.
      position: 0
      name: Galaxy.
      optional: false
    named:
    - !Flag
      description: "Name (directory name) of the topic to create\nor in which a tutorial\
        \ should be created or\nupdates  [required]"
      synonyms:
      - --topic_name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Title of the topic to create
      synonyms:
      - --topic_title
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Summary of the topic
      synonyms:
      - --topic_summary
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "[use|admin-dev|instructors]\nTarget audience for the topic"
      synonyms:
      - --topic_target
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name (directory name) of the tutorial to\ncreate or to modify"
      synonyms:
      - --tutorial_name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Title of the tutorial
      synonyms:
      - --tutorial_title
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Add hands-on for the new tutorial
      synonyms:
      - --hands_on
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Add slides for the new tutorial
      synonyms:
      - --slides
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Workflow of the tutorial (locally)
      synonyms:
      - --workflow
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: URL of a Galaxy instance with the workflow
      synonyms:
      - --galaxy_url
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: API key on the Galaxy instance with the
      synonyms:
      - --galaxy_api_key
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Zenodo URL with the input data
      synonyms:
      - --zenodo_link
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "YAML file with the correspondance between\nZenodo extension and\
        \ Galaxy datatypes"
      synonyms:
      - --datatypes
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Root of development galaxy directory to\nexecute command with."
      synonyms:
      - --galaxy_root
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under"
      synonyms:
      - --galaxy_python_version
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Extra tool sources to include in Galaxy's\ntool panel (file or\
        \ directory). These will\nnot be linted/tested/etc... but they will be\navailable\
        \ to workflows and for interactive\nuse."
      synonyms:
      - --extra_tools
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Download and configure a disposable copy of\nGalaxy from github."
      synonyms:
      - --install_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
        \ isn't specified."
      synonyms:
      - --galaxy_branch
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
        \ github source if\na Galaxy root isn't specified."
      synonyms:
      - --galaxy_source
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Do not create or source a virtualenv\nenvironment for Galaxy,\
        \ this should be used\nor instance to preserve an externally\nconfigured virtual\
        \ environment or conda\nenvironment."
      synonyms:
      - --skip_venv
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip caching of Galaxy source and\ndependencies obtained with\
        \ --install_galaxy.\nNot caching this results in faster downloads\n(no git)\
        \ - so is better on throw away\ninstances such with TravisCI."
      synonyms:
      - --no_cache_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not cleanup temp files created for and by
      synonyms:
      - --no_cleanup
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: / --no_docker          Run Galaxy tools in Docker if enabled.
      synonyms:
      - --docker
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Command used to launch docker (defaults to\ndocker)."
      synonyms:
      - --docker_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Test tools against mulled containers (forces\n--docker)."
      synonyms:
      - --mulled_containers
      - --biocontainers
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Job configuration file for Galaxy to target.
      synonyms:
      - --job_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Tool dependency dir for Galaxy to target.
      synonyms:
      - --tool_dependency_dir
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: Port to serve Galaxy on (default is 9090).
      synonyms:
      - --port
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
        \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\n\
        Galaxy to all ports including potentially\npublicly accessible ones."
      synonyms:
      - --host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
        \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but\
        \ running Galaxy within a Docker\ncontainer."
      synonyms:
      - --engine
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Disable strict validation of CWL.
      synonyms:
      - --non_strict_cwl
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
        \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
      synonyms:
      - --docker_galaxy_image
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Extra path to mount if --engine docker.
      synonyms:
      - --docker_extra_volume
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "test-data directory to for specified\ntool(s)."
      synonyms:
      - --test_data
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
      synonyms:
      - --tool_data_table
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Dependency resolver configuration for Galaxy\nto target."
      synonyms:
      - --dependency_resolvers_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: "Configure Galaxy to use plain brew\ndependency resolution."
      synonyms:
      - --brew_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
      synonyms:
      - --shed_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Configure Galaxy with no dependency
      synonyms:
      - --no_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use only conda for\ndependency resolution."
      synonyms:
      - --conda_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Conda dependency resolution for Galaxy will\ncopy dependencies\
        \ instead of attempting to\nlink them."
      synonyms:
      - --conda_copy_dependencies
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_install\nConda dependency resolution for Galaxy\
        \ will\nattempt to install requested but missing\npackages."
      synonyms:
      - --conda_auto_install
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_init\nConda dependency resolution for Galaxy\
        \ will\nauto install conda itself using miniconda if\nnot availabe on conda_prefix."
      synonyms:
      - --conda_auto_init
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name of profile (created with the\nprofile_create command) to\
        \ use with this\ncommand."
      synonyms:
      - --profile
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Database connection string to use for
      synonyms:
      - --database_connection
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Location of shed tools directory for Galaxy.
      synonyms:
      - --shed_tool_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_galaxy_single_user\nBy default Planemo will configure Galaxy\
        \ to\nrun in single-user mode where there is just\none user and this user\
        \ is automatically\nlogged it. Use --no_galaxy_single_user to\nprevent Galaxy\
        \ from running this way."
      synonyms:
      - --galaxy_single_user
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Serve Galaxy process as a daemon.
      synonyms:
      - --daemon
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Location of pid file is executed with
      synonyms:
      - --pid_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --daemon.
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "When installing shed repositories for\nworkflows, ignore dependency\
        \ issues. These\nlikely indicate a problem but in some cases\nmay not prevent\
        \ a workflow from successfully\nexecuting."
      synonyms:
      - --ignore_dependency_problems
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_shed_install\nBy default Planemo will attempt to install\n\
        repositories needed for workflow testing.\nThis may not be appropriate for\
        \ production\nservers and so this can disabled by calling\nplanemo with --no_shed_install."
      synonyms:
      - --shed_install
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo training_init [OPTIONS] TOOL_PATH\n\n  Build training\
      \ template from workflow.\n\nOptions:\n  --topic_name TEXT               Name\
      \ (directory name) of the topic to create\n                                \
      \  or in which a tutorial should be created or\n                           \
      \       updates  [required]\n  --topic_title TEXT              Title of the\
      \ topic to create\n  --topic_summary TEXT            Summary of the topic\n\
      \  --topic_target [use|admin-dev|instructors]\n                            \
      \      Target audience for the topic\n  --tutorial_name TEXT            Name\
      \ (directory name) of the tutorial to\n                                  create\
      \ or to modify\n  --tutorial_title TEXT           Title of the tutorial\n  --hands_on\
      \                      Add hands-on for the new tutorial\n  --slides       \
      \                 Add slides for the new tutorial\n  --workflow PATH       \
      \          Workflow of the tutorial (locally)\n  --galaxy_url TEXT         \
      \      URL of a Galaxy instance with the workflow\n  --galaxy_api_key TEXT \
      \          API key on the Galaxy instance with the\n                       \
      \           workflow\n  --workflow_id TEXT              ID of the workflow on\
      \ the Galaxy instance\n  --zenodo_link TEXT              Zenodo URL with the\
      \ input data\n  --datatypes PATH                YAML file with the correspondance\
      \ between\n                                  Zenodo extension and Galaxy datatypes\n\
      \  --galaxy_root DIRECTORY         Root of development galaxy directory to\n\
      \                                  execute command with.\n  --galaxy_python_version\
      \ [2|2.7|3|3.5|3.6|3.7|3.8]\n                                  Python version\
      \ to start Galaxy under\n  --extra_tools PATH              Extra tool sources\
      \ to include in Galaxy's\n                                  tool panel (file\
      \ or directory). These will\n                                  not be linted/tested/etc...\
      \ but they will be\n                                  available to workflows\
      \ and for interactive\n                                  use.\n  --install_galaxy\
      \                Download and configure a disposable copy of\n             \
      \                     Galaxy from github.\n  --galaxy_branch TEXT          \
      \  Branch of Galaxy to target (defaults to\n                               \
      \   master) if a Galaxy root isn't specified.\n  --galaxy_source TEXT      \
      \      Git source of Galaxy to target (defaults to\n                       \
      \           the official galaxyproject github source if\n                  \
      \                a Galaxy root isn't specified.\n  --skip_venv             \
      \        Do not create or source a virtualenv\n                            \
      \      environment for Galaxy, this should be used\n                       \
      \           or instance to preserve an externally\n                        \
      \          configured virtual environment or conda\n                       \
      \           environment.\n  --no_cache_galaxy               Skip caching of\
      \ Galaxy source and\n                                  dependencies obtained\
      \ with --install_galaxy.\n                                  Not caching this\
      \ results in faster downloads\n                                  (no git) -\
      \ so is better on throw away\n                                  instances such\
      \ with TravisCI.\n  --no_cleanup                    Do not cleanup temp files\
      \ created for and by\n                                  Galaxy.\n  --galaxy_email\
      \ TEXT             E-mail address to use when launching single-\n          \
      \                        user Galaxy server.\n  --docker / --no_docker     \
      \     Run Galaxy tools in Docker if enabled.\n  --docker_cmd TEXT          \
      \     Command used to launch docker (defaults to\n                         \
      \         docker).\n  --docker_sudo / --no_docker_sudo\n                   \
      \               Flag to use sudo when running docker.\n  --docker_host TEXT\
      \              Docker host to target when executing docker\n               \
      \                   commands (defaults to localhost).\n  --docker_sudo_cmd TEXT\
      \          sudo command to use when --docker_sudo is\n                     \
      \             enabled (defaults to sudo).\n  --mulled_containers, --biocontainers\n\
      \                                  Test tools against mulled containers (forces\n\
      \                                  --docker).\n  --job_config_file FILE    \
      \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir\
      \ DIRECTORY\n                                  Tool dependency dir for Galaxy\
      \ to target.\n  --port INTEGER                  Port to serve Galaxy on (default\
      \ is 9090).\n  --host TEXT                     Host to bind Galaxy to. Default\
      \ is 127.0.0.1\n                                  that is restricted to localhost\
      \ connections\n                                  for security reasons set to\
      \ 0.0.0.0 to bind\n                                  Galaxy to all ports including\
      \ potentially\n                                  publicly accessible ones.\n\
      \  --engine [galaxy|docker_galaxy|external_galaxy]\n                       \
      \           Select an engine to serve artifacts such as\n                  \
      \                tools and workflows. Defaults to a local\n                \
      \                  Galaxy, but running Galaxy within a Docker\n            \
      \                      container.\n  --non_strict_cwl                Disable\
      \ strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker image\
      \ identifier for docker-galaxy-\n                                  flavor used\
      \ if engine type is specified as\n                                  ``docker-galaxy``.\
      \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\
      \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n\
      \  --test_data DIRECTORY           test-data directory to for specified\n  \
      \                                tool(s).\n  --tool_data_table PATH        \
      \  tool_data_table_conf.xml file to for\n                                  specified\
      \ tool(s).\n  --dependency_resolvers_config_file FILE\n                    \
      \              Dependency resolver configuration for Galaxy\n              \
      \                    to target.\n  --brew_dependency_resolution    Configure\
      \ Galaxy to use plain brew\n                                  dependency resolution.\n\
      \  --shed_dependency_resolution    Configure Galaxy to use brewed Tool Shed\n\
      \                                  dependency resolution.\n  --no_dependency_resolution\
      \      Configure Galaxy with no dependency\n                               \
      \   resolvers.\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
      \ dependency\n                                  commands.\n  --conda_exec FILE\
      \               Location of conda executable.\n  --conda_debug             \
      \      Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --conda_dependency_resolution   Configure\
      \ Galaxy to use only conda for\n                                  dependency\
      \ resolution.\n  --conda_copy_dependencies       Conda dependency resolution\
      \ for Galaxy will\n                                  copy dependencies instead\
      \ of attempting to\n                                  link them.\n  --conda_auto_install\
      \ / --no_conda_auto_install\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  attempt to install\
      \ requested but missing\n                                  packages.\n  --conda_auto_init\
      \ / --no_conda_auto_init\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  auto install\
      \ conda itself using miniconda if\n                                  not availabe\
      \ on conda_prefix.\n  --profile TEXT                  Name of profile (created\
      \ with the\n                                  profile_create command) to use\
      \ with this\n                                  command.\n  --postgres      \
      \                Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --file_path\
      \ DIRECTORY           Location for files created by Galaxy (e.g.\n         \
      \                         database/files).\n  --database_connection TEXT   \
      \   Database connection string to use for\n                                \
      \  Galaxy.\n  --shed_tool_conf TEXT           Location of shed tools conf file\
      \ for Galaxy.\n  --shed_tool_path TEXT           Location of shed tools directory\
      \ for Galaxy.\n  --galaxy_single_user / --no_galaxy_single_user\n          \
      \                        By default Planemo will configure Galaxy to\n     \
      \                             run in single-user mode where there is just\n\
      \                                  one user and this user is automatically\n\
      \                                  logged it. Use --no_galaxy_single_user to\n\
      \                                  prevent Galaxy from running this way.\n \
      \ --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
      \ FILE                 Location of pid file is executed with\n             \
      \                     --daemon.\n  --ignore_dependency_problems    When installing\
      \ shed repositories for\n                                  workflows, ignore\
      \ dependency issues. These\n                                  likely indicate\
      \ a problem but in some cases\n                                  may not prevent\
      \ a workflow from successfully\n                                  executing.\n\
      \  --shed_install / --no_shed_install\n                                  By\
      \ default Planemo will attempt to install\n                                \
      \  repositories needed for workflow testing.\n                             \
      \     This may not be appropriate for production\n                         \
      \         servers and so this can disabled by calling\n                    \
      \              planemo with --no_shed_install.\n  --help                   \
      \       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - conda_search
    positional:
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 0
      name: commands.
      optional: false
    named:
    - !Flag
      description: Conda prefix to use for conda dependency
      synonyms:
      - --conda_prefix
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo conda_search [OPTIONS] TERM\n\n  Perform conda search\
      \ with Planemo's conda.\n\n  Implicitly adds channels Planemo is configured\
      \ with.\n\nOptions:\n  --conda_prefix DIRECTORY        Conda prefix to use for\
      \ conda dependency\n                                  commands.\n  --conda_exec\
      \ FILE               Location of conda executable.\n  --conda_debug        \
      \           Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --help                          Show\
      \ this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - ci_find_tools
    positional:
    - !Positional
      description: ''
      position: 0
      name: PROJECT
      optional: false
    named:
    - !Flag
      description: Paths to exclude.
      synonyms:
      - --exclude
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: File of paths to exclude.
      synonyms:
      - --exclude_from
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Exclude paths unchanged in git commit range.
      synonyms:
      - --changed_in_commit_range
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Split output into chunks of this many item\nand print --chunk\
        \ such group."
      synonyms:
      - --chunk_count
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "When output is split into --chunk_count\ngroups, output the group\
        \ 0-indexedby this\noption."
      synonyms:
      - --chunk
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: File to output to, or - for standard output.
      synonyms:
      - --output
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo ci_find_tools [OPTIONS] PROJECT\n\n  Find all tools\
      \ in one or more directories.\n\n  Tools can be chunked up, filtered, etc...\
      \ to build lists of tools to\n  perform operations over for continuous integration\
      \ operations.\n\nOptions:\n  --exclude PATH                  Paths to exclude.\n\
      \  --exclude_from FILE             File of paths to exclude.\n  --changed_in_commit_range\
      \ TEXT  Exclude paths unchanged in git commit range.\n  --chunk_count INTEGER\
      \           Split output into chunks of this many item\n                   \
      \               and print --chunk such group.\n  --chunk INTEGER           \
      \      When output is split into --chunk_count\n                           \
      \       groups, output the group 0-indexedby this\n                        \
      \          option.\n  --output TEXT                   File to output to, or\
      \ - for standard output.\n  --help                          Show this message\
      \ and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - database_delete
    positional:
    - !Positional
      description: all   all                    trust
      position: 0
      name: local
      optional: false
    named:
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo database_delete [OPTIONS] IDENTIFIER\n\n  Delete a\
      \ *development* database.\n\n  Currently the only implementation is postgres\
      \ which will be managed with\n  ``psql``.\n\n  Planemo ``database_`` commands\
      \ make it very easy to create and destroy\n  databases, therefore it should\
      \ not be used for production data - and it\n  should not even be connnected\
      \ to a production database server. Planemo is\n  intended for development purposes\
      \ only.\n\n  Planemo will assume that it can manage and access postgres databases\n\
      \  without specifying a password. This can be accomplished by configuring\n\
      \  postgres to not required a password for the planemo user or by specifying\n\
      \  a password in a ``.pgpass`` file.\n\n  Planemo can be configured to not require\
      \ a password for the planemo user\n  in the postgres configuration file ``pg_hba.conf``\
      \ (on Ubuntu/Debian linux\n  distros this file is in /etc/postgresql/<postgres_version>/main/\n\
      \  directory). Adding the following lines to that file will allow planemo and\n\
      \  Galaxy to access the databases without a password.\n\n      # \"local\" is\
      \ for Unix domain socket connections only\n      local   all   all         \
      \           trust\n      # IPv4 local connections:\n      host    all   all\
      \    127.0.0.1/32    trust\n      # IPv6 local connections:\n      host    all\
      \   all    ::1/128         trust\n\n  More information on the ``pg_hda.conf``\
      \ configuration file can be found at\n  http://www.postgresql.org/docs/9.3/static/auth-pg-hba-conf.html.\n\
      \n  Information on ``.pgpass`` files can be found at at the following\n  location:\
      \ http://www.postgresql.org/docs/9.4/static/libpq-pgpass.html. In\n  Ubuntu\
      \ and Debian distros - a postgres user likely already exists and its\n  password\
      \ can be set by setting up a file ``~/.pgpass`` file with the\n  following contents.\n\
      \n      *:*:*:postgres:<postgres_password>\n\nOptions:\n  --postgres       \
      \               Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --docker_cmd\
      \ TEXT               Command used to launch docker (defaults to\n          \
      \                        docker).\n  --docker_sudo / --no_docker_sudo\n    \
      \                              Flag to use sudo when running docker.\n  --docker_host\
      \ TEXT              Docker host to target when executing docker\n          \
      \                        commands (defaults to localhost).\n  --docker_sudo_cmd\
      \ TEXT          sudo command to use when --docker_sudo is\n                \
      \                  enabled (defaults to sudo).\n  --help                   \
      \       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - workflow_edit
    positional:
    - !Positional
      description: --galaxy_email TEXT             E-mail address to use when launching
        single-
      position: 0
      name: Galaxy.
      optional: false
    - !Positional
      description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
      position: 0
      name: resolvers.
      optional: false
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 1
      name: commands.
      optional: false
    - !Positional
      description: --shed_tool_conf TEXT           Location of shed tools conf file
        for Galaxy.
      position: 0
      name: Galaxy.
      optional: false
    named:
    - !Flag
      description: "Root of development galaxy directory to\nexecute command with."
      synonyms:
      - --galaxy_root
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under"
      synonyms:
      - --galaxy_python_version
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Extra tool sources to include in Galaxy's\ntool panel (file or\
        \ directory). These will\nnot be linted/tested/etc... but they will be\navailable\
        \ to workflows and for interactive\nuse."
      synonyms:
      - --extra_tools
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Download and configure a disposable copy of\nGalaxy from github."
      synonyms:
      - --install_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
        \ isn't specified."
      synonyms:
      - --galaxy_branch
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
        \ github source if\na Galaxy root isn't specified."
      synonyms:
      - --galaxy_source
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Do not create or source a virtualenv\nenvironment for Galaxy,\
        \ this should be used\nor instance to preserve an externally\nconfigured virtual\
        \ environment or conda\nenvironment."
      synonyms:
      - --skip_venv
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip caching of Galaxy source and\ndependencies obtained with\
        \ --install_galaxy.\nNot caching this results in faster downloads\n(no git)\
        \ - so is better on throw away\ninstances such with TravisCI."
      synonyms:
      - --no_cache_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not cleanup temp files created for and by
      synonyms:
      - --no_cleanup
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: / --no_docker          Run Galaxy tools in Docker if enabled.
      synonyms:
      - --docker
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Command used to launch docker (defaults to\ndocker)."
      synonyms:
      - --docker_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Test tools against mulled containers (forces\n--docker)."
      synonyms:
      - --mulled_containers
      - --biocontainers
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Job configuration file for Galaxy to target.
      synonyms:
      - --job_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Tool dependency dir for Galaxy to target.
      synonyms:
      - --tool_dependency_dir
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: Port to serve Galaxy on (default is 9090).
      synonyms:
      - --port
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
        \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\n\
        Galaxy to all ports including potentially\npublicly accessible ones."
      synonyms:
      - --host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
        \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but\
        \ running Galaxy within a Docker\ncontainer."
      synonyms:
      - --engine
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Disable strict validation of CWL.
      synonyms:
      - --non_strict_cwl
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
        \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
      synonyms:
      - --docker_galaxy_image
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Extra path to mount if --engine docker.
      synonyms:
      - --docker_extra_volume
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "test-data directory to for specified\ntool(s)."
      synonyms:
      - --test_data
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
      synonyms:
      - --tool_data_table
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Dependency resolver configuration for Galaxy\nto target."
      synonyms:
      - --dependency_resolvers_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: "Configure Galaxy to use plain brew\ndependency resolution."
      synonyms:
      - --brew_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
      synonyms:
      - --shed_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Configure Galaxy with no dependency
      synonyms:
      - --no_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use only conda for\ndependency resolution."
      synonyms:
      - --conda_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Conda dependency resolution for Galaxy will\ncopy dependencies\
        \ instead of attempting to\nlink them."
      synonyms:
      - --conda_copy_dependencies
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_install\nConda dependency resolution for Galaxy\
        \ will\nattempt to install requested but missing\npackages."
      synonyms:
      - --conda_auto_install
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_init\nConda dependency resolution for Galaxy\
        \ will\nauto install conda itself using miniconda if\nnot availabe on conda_prefix."
      synonyms:
      - --conda_auto_init
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name of profile (created with the\nprofile_create command) to\
        \ use with this\ncommand."
      synonyms:
      - --profile
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Database connection string to use for
      synonyms:
      - --database_connection
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Location of shed tools directory for Galaxy.
      synonyms:
      - --shed_tool_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_galaxy_single_user\nBy default Planemo will configure Galaxy\
        \ to\nrun in single-user mode where there is just\none user and this user\
        \ is automatically\nlogged it. Use --no_galaxy_single_user to\nprevent Galaxy\
        \ from running this way."
      synonyms:
      - --galaxy_single_user
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Serve Galaxy process as a daemon.
      synonyms:
      - --daemon
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Location of pid file is executed with
      synonyms:
      - --pid_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --daemon.
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "When installing shed repositories for\nworkflows, ignore dependency\
        \ issues. These\nlikely indicate a problem but in some cases\nmay not prevent\
        \ a workflow from successfully\nexecuting."
      synonyms:
      - --ignore_dependency_problems
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_shed_install\nBy default Planemo will attempt to install\n\
        repositories needed for workflow testing.\nThis may not be appropriate for\
        \ production\nservers and so this can disabled by calling\nplanemo with --no_shed_install."
      synonyms:
      - --shed_install
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo workflow_edit [OPTIONS] WORKFLOW_PATH\n\n  Open a synchronized\
      \ Galaxy workflow editor.\n\nOptions:\n  --galaxy_root DIRECTORY         Root\
      \ of development galaxy directory to\n                                  execute\
      \ command with.\n  --galaxy_python_version [2|2.7|3|3.5|3.6|3.7|3.8]\n     \
      \                             Python version to start Galaxy under\n  --extra_tools\
      \ PATH              Extra tool sources to include in Galaxy's\n            \
      \                      tool panel (file or directory). These will\n        \
      \                          not be linted/tested/etc... but they will be\n  \
      \                                available to workflows and for interactive\n\
      \                                  use.\n  --install_galaxy                Download\
      \ and configure a disposable copy of\n                                  Galaxy\
      \ from github.\n  --galaxy_branch TEXT            Branch of Galaxy to target\
      \ (defaults to\n                                  master) if a Galaxy root isn't\
      \ specified.\n  --galaxy_source TEXT            Git source of Galaxy to target\
      \ (defaults to\n                                  the official galaxyproject\
      \ github source if\n                                  a Galaxy root isn't specified.\n\
      \  --skip_venv                     Do not create or source a virtualenv\n  \
      \                                environment for Galaxy, this should be used\n\
      \                                  or instance to preserve an externally\n \
      \                                 configured virtual environment or conda\n\
      \                                  environment.\n  --no_cache_galaxy       \
      \        Skip caching of Galaxy source and\n                               \
      \   dependencies obtained with --install_galaxy.\n                         \
      \         Not caching this results in faster downloads\n                   \
      \               (no git) - so is better on throw away\n                    \
      \              instances such with TravisCI.\n  --no_cleanup               \
      \     Do not cleanup temp files created for and by\n                       \
      \           Galaxy.\n  --galaxy_email TEXT             E-mail address to use\
      \ when launching single-\n                                  user Galaxy server.\n\
      \  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n\
      \  --docker_cmd TEXT               Command used to launch docker (defaults to\n\
      \                                  docker).\n  --docker_sudo / --no_docker_sudo\n\
      \                                  Flag to use sudo when running docker.\n \
      \ --docker_host TEXT              Docker host to target when executing docker\n\
      \                                  commands (defaults to localhost).\n  --docker_sudo_cmd\
      \ TEXT          sudo command to use when --docker_sudo is\n                \
      \                  enabled (defaults to sudo).\n  --mulled_containers, --biocontainers\n\
      \                                  Test tools against mulled containers (forces\n\
      \                                  --docker).\n  --job_config_file FILE    \
      \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir\
      \ DIRECTORY\n                                  Tool dependency dir for Galaxy\
      \ to target.\n  --port INTEGER                  Port to serve Galaxy on (default\
      \ is 9090).\n  --host TEXT                     Host to bind Galaxy to. Default\
      \ is 127.0.0.1\n                                  that is restricted to localhost\
      \ connections\n                                  for security reasons set to\
      \ 0.0.0.0 to bind\n                                  Galaxy to all ports including\
      \ potentially\n                                  publicly accessible ones.\n\
      \  --engine [galaxy|docker_galaxy|external_galaxy]\n                       \
      \           Select an engine to serve artifacts such as\n                  \
      \                tools and workflows. Defaults to a local\n                \
      \                  Galaxy, but running Galaxy within a Docker\n            \
      \                      container.\n  --non_strict_cwl                Disable\
      \ strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker image\
      \ identifier for docker-galaxy-\n                                  flavor used\
      \ if engine type is specified as\n                                  ``docker-galaxy``.\
      \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\
      \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n\
      \  --test_data DIRECTORY           test-data directory to for specified\n  \
      \                                tool(s).\n  --tool_data_table PATH        \
      \  tool_data_table_conf.xml file to for\n                                  specified\
      \ tool(s).\n  --dependency_resolvers_config_file FILE\n                    \
      \              Dependency resolver configuration for Galaxy\n              \
      \                    to target.\n  --brew_dependency_resolution    Configure\
      \ Galaxy to use plain brew\n                                  dependency resolution.\n\
      \  --shed_dependency_resolution    Configure Galaxy to use brewed Tool Shed\n\
      \                                  dependency resolution.\n  --no_dependency_resolution\
      \      Configure Galaxy with no dependency\n                               \
      \   resolvers.\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
      \ dependency\n                                  commands.\n  --conda_exec FILE\
      \               Location of conda executable.\n  --conda_debug             \
      \      Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --conda_dependency_resolution   Configure\
      \ Galaxy to use only conda for\n                                  dependency\
      \ resolution.\n  --conda_copy_dependencies       Conda dependency resolution\
      \ for Galaxy will\n                                  copy dependencies instead\
      \ of attempting to\n                                  link them.\n  --conda_auto_install\
      \ / --no_conda_auto_install\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  attempt to install\
      \ requested but missing\n                                  packages.\n  --conda_auto_init\
      \ / --no_conda_auto_init\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  auto install\
      \ conda itself using miniconda if\n                                  not availabe\
      \ on conda_prefix.\n  --profile TEXT                  Name of profile (created\
      \ with the\n                                  profile_create command) to use\
      \ with this\n                                  command.\n  --postgres      \
      \                Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --file_path\
      \ DIRECTORY           Location for files created by Galaxy (e.g.\n         \
      \                         database/files).\n  --database_connection TEXT   \
      \   Database connection string to use for\n                                \
      \  Galaxy.\n  --shed_tool_conf TEXT           Location of shed tools conf file\
      \ for Galaxy.\n  --shed_tool_path TEXT           Location of shed tools directory\
      \ for Galaxy.\n  --galaxy_single_user / --no_galaxy_single_user\n          \
      \                        By default Planemo will configure Galaxy to\n     \
      \                             run in single-user mode where there is just\n\
      \                                  one user and this user is automatically\n\
      \                                  logged it. Use --no_galaxy_single_user to\n\
      \                                  prevent Galaxy from running this way.\n \
      \ --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
      \ FILE                 Location of pid file is executed with\n             \
      \                     --daemon.\n  --ignore_dependency_problems    When installing\
      \ shed repositories for\n                                  workflows, ignore\
      \ dependency issues. These\n                                  likely indicate\
      \ a problem but in some cases\n                                  may not prevent\
      \ a workflow from successfully\n                                  executing.\n\
      \  --shed_install / --no_shed_install\n                                  By\
      \ default Planemo will attempt to install\n                                \
      \  repositories needed for workflow testing.\n                             \
      \     This may not be appropriate for production\n                         \
      \         servers and so this can disabled by calling\n                    \
      \              planemo with --no_shed_install.\n  --help                   \
      \       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - cwl_script
    positional:
    - !Positional
      description: 'Options:'
      position: 0
      name: script.
      optional: false
    named:
    - !Flag
      description: ''
      synonyms:
      - --no_container
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --output_dir
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --base_dir
      args: !SimpleFlagArg
        name: PATH
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo cwl_script [OPTIONS] TOOL_PATH JOB_PATH\n\n  Compile\
      \ simple CWL workflows to shell script.\n\n  Compiles simple common workflow\
      \ language (CWL) workflows to a shell\n  script.\n\nOptions:\n  --no_container\n\
      \  --output_dir PATH\n  --base_dir PATH\n  --help             Show this message\
      \ and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - database_create
    positional:
    - !Positional
      description: all   all                    trust
      position: 0
      name: local
      optional: false
    named:
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo database_create [OPTIONS] IDENTIFIER\n\n  Create a\
      \ *development* database.\n\n  Currently the only implementation is postgres\
      \ which will be managed with\n  ``psql``.\n\n  Planemo ``database_`` commands\
      \ make it very easy to create and destroy\n  databases, therefore it should\
      \ not be used for production data - and it\n  should not even be connnected\
      \ to a production database server. Planemo is\n  intended for development purposes\
      \ only.\n\n  Planemo will assume that it can manage and access postgres databases\n\
      \  without specifying a password. This can be accomplished by configuring\n\
      \  postgres to not required a password for the planemo user or by specifying\n\
      \  a password in a ``.pgpass`` file.\n\n  Planemo can be configured to not require\
      \ a password for the planemo user\n  in the postgres configuration file ``pg_hba.conf``\
      \ (on Ubuntu/Debian linux\n  distros this file is in /etc/postgresql/<postgres_version>/main/\n\
      \  directory). Adding the following lines to that file will allow planemo and\n\
      \  Galaxy to access the databases without a password.\n\n      # \"local\" is\
      \ for Unix domain socket connections only\n      local   all   all         \
      \           trust\n      # IPv4 local connections:\n      host    all   all\
      \    127.0.0.1/32    trust\n      # IPv6 local connections:\n      host    all\
      \   all    ::1/128         trust\n\n  More information on the ``pg_hda.conf``\
      \ configuration file can be found at\n  http://www.postgresql.org/docs/9.3/static/auth-pg-hba-conf.html.\n\
      \n  Information on ``.pgpass`` files can be found at at the following\n  location:\
      \ http://www.postgresql.org/docs/9.4/static/libpq-pgpass.html. In\n  Ubuntu\
      \ and Debian distros - a postgres user likely already exists and its\n  password\
      \ can be set by setting up a file ``~/.pgpass`` file with the\n  following contents.\n\
      \n      *:*:*:postgres:<postgres_password>\n\nOptions:\n  --postgres       \
      \               Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --docker_cmd\
      \ TEXT               Command used to launch docker (defaults to\n          \
      \                        docker).\n  --docker_sudo / --no_docker_sudo\n    \
      \                              Flag to use sudo when running docker.\n  --docker_host\
      \ TEXT              Docker host to target when executing docker\n          \
      \                        commands (defaults to localhost).\n  --docker_sudo_cmd\
      \ TEXT          sudo command to use when --docker_sudo is\n                \
      \                  enabled (defaults to sudo).\n  --help                   \
      \       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - database_list
    positional:
    - !Positional
      description: all   all                    trust
      position: 0
      name: local
      optional: false
    named:
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo database_list [OPTIONS]\n\n  List databases in configured\
      \ database source.\n\n  Currently the only implementation is postgres which\
      \ will be managed with\n  ``psql``.\n\n  Planemo ``database_`` commands make\
      \ it very easy to create and destroy\n  databases, therefore it should not be\
      \ used for production data - and it\n  should not even be connnected to a production\
      \ database server. Planemo is\n  intended for development purposes only.\n\n\
      \  Planemo will assume that it can manage and access postgres databases\n  without\
      \ specifying a password. This can be accomplished by configuring\n  postgres\
      \ to not required a password for the planemo user or by specifying\n  a password\
      \ in a ``.pgpass`` file.\n\n  Planemo can be configured to not require a password\
      \ for the planemo user\n  in the postgres configuration file ``pg_hba.conf``\
      \ (on Ubuntu/Debian linux\n  distros this file is in /etc/postgresql/<postgres_version>/main/\n\
      \  directory). Adding the following lines to that file will allow planemo and\n\
      \  Galaxy to access the databases without a password.\n\n      # \"local\" is\
      \ for Unix domain socket connections only\n      local   all   all         \
      \           trust\n      # IPv4 local connections:\n      host    all   all\
      \    127.0.0.1/32    trust\n      # IPv6 local connections:\n      host    all\
      \   all    ::1/128         trust\n\n  More information on the ``pg_hda.conf``\
      \ configuration file can be found at\n  http://www.postgresql.org/docs/9.3/static/auth-pg-hba-conf.html.\n\
      \n  Information on ``.pgpass`` files can be found at at the following\n  location:\
      \ http://www.postgresql.org/docs/9.4/static/libpq-pgpass.html. In\n  Ubuntu\
      \ and Debian distros - a postgres user likely already exists and its\n  password\
      \ can be set by setting up a file ``~/.pgpass`` file with the\n  following contents.\n\
      \n      *:*:*:postgres:<postgres_password>\n\nOptions:\n  --postgres       \
      \               Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --docker_cmd\
      \ TEXT               Command used to launch docker (defaults to\n          \
      \                        docker).\n  --docker_sudo / --no_docker_sudo\n    \
      \                              Flag to use sudo when running docker.\n  --docker_host\
      \ TEXT              Docker host to target when executing docker\n          \
      \                        commands (defaults to localhost).\n  --docker_sudo_cmd\
      \ TEXT          sudo command to use when --docker_sudo is\n                \
      \                  enabled (defaults to sudo).\n  --help                   \
      \       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - mull
    positional:
    - !Positional
      description: --mulled_conda_version TEXT     Install a specific version of Conda
        before
      position: 0
      name: subdirectories.
      optional: false
    named:
    - !Flag
      description: '`` on the target tool(s).'
      synonyms:
      - --conda_requirements
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Recursively perform command for
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Build a mulled image with the specified\nnamespace - defaults\
        \ to biocontainers.\nGalaxy currently only recognizes images with\nthe namespace\
        \ biocontainers."
      synonyms:
      - --mulled_namespace
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Mulled action to perform for targets - this\ndefaults to 'build-and-test'."
      synonyms:
      - --mulled_command
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo mull [OPTIONS] TOOL_PATH\n\n  Build containers for\
      \ specified tools.\n\n  Supplied tools will be inspected for referenced requirement\
      \ packages. For\n  each combination of requirements a \"mulled\" container will\
      \ be built.\n  Galaxy can automatically discover this container and subsequently\
      \ use it\n  to run or test the tool.\n\n  For this to work, the tool's requirements\
      \ will need to be present in a\n  known Conda channel such as bioconda (https://github.com/bioconda\n\
      \  /bioconda-recipes). This can be verified by running ``planemo lint\n  --conda_requirements``\
      \ on the target tool(s).\n\nOptions:\n  -r, --recursive                 Recursively\
      \ perform command for\n                                  subdirectories.\n \
      \ --mulled_conda_version TEXT     Install a specific version of Conda before\n\
      \                                  running the command, by default the version\n\
      \                                  that comes with the continuumio miniconda3\n\
      \                                  image will be used under Linux and under\
      \ Mac\n                                  OS X Conda will be upgraded to to work\n\
      \                                  around a bug in 4.2.\n  --mulled_namespace\
      \ TEXT         Build a mulled image with the specified\n                   \
      \               namespace - defaults to biocontainers.\n                   \
      \               Galaxy currently only recognizes images with\n             \
      \                     the namespace biocontainers.\n  --mulled_command TEXT\
      \           Mulled action to perform for targets - this\n                  \
      \                defaults to 'build-and-test'.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --help\
      \                          Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - shed_init
    positional:
    - !Positional
      description: ''
      position: 0
      name: PROJECT
      optional: false
    named:
    - !Flag
      description: "Attempt to generate repository dependencies\nfrom specified workflow."
      synonyms:
      - --from_workflow
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Specify repository description for\n.shed.yml."
      synonyms:
      - --description
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Specify repository long_description for\n.shed.yml."
      synonyms:
      - --long_description
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Specify repository remote_repository_url for\n.shed.yml."
      synonyms:
      - --remote_repository_url
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Specify repository homepage_url for\n.shed.yml."
      synonyms:
      - --homepage_url
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "[Assembly|ChIP-seq|Combinatorial Selections|Computational chemistry|Constructive\
        \ Solid Geometry|Convert Formats|Data Export|Data Managers|Data Source|Entomology|Epigenetics|Fasta\
        \ Manipulation|Fastq Manipulation|Flow Cytometry Analysis|Genome annotation|Genome\
        \ editing|Genome-Wide Association Study|Genomic Interval Operations|Graphics|Imaging|Machine\
        \ Learning|Metabolomics|Metagenomics|Micro-array Analysis|Molecular Dynamics|Next\
        \ Gen Mappers|NLP|Ontology Manipulation|Phylogenetics|Proteomics|RNA|SAM|Sequence\
        \ Analysis|Statistics|Systems Biology|Text Manipulation|Tool Dependency Packages|Tool\
        \ Generators|Transcriptomics|Variant Analysis|Visualization|Web Services]\n\
        Specify repository category for .shed.yml\n(may specify multiple)."
      synonyms:
      - --category
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Tool Shed repository owner (username).
      synonyms:
      - --owner
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed repository name (defaults to the\ninferred tool directory\
        \ name)."
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Overwrite existing files if present.
      synonyms:
      - -f
      - --force
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo shed_init [OPTIONS] PROJECT\n\n  Bootstrap new Tool\
      \ Shed .shed.yml file.\n\n  This Tool Shed configuration file is used by other\
      \ ``planemo`` commands\n  such as ``shed_lint``, ``shed_create``, ``shed_upload``,\
      \ and ``shed_diff``\n  to manage repositories in a Galaxy Tool Shed.\n\nOptions:\n\
      \  --from_workflow PATH            Attempt to generate repository dependencies\n\
      \                                  from specified workflow.\n  --description\
      \ TEXT              Specify repository description for\n                   \
      \               .shed.yml.\n  --long_description TEXT         Specify repository\
      \ long_description for\n                                  .shed.yml.\n  --remote_repository_url\
      \ TEXT    Specify repository remote_repository_url for\n                   \
      \               .shed.yml.\n  --homepage_url TEXT             Specify repository\
      \ homepage_url for\n                                  .shed.yml.\n  --category\
      \ [Assembly|ChIP-seq|Combinatorial Selections|Computational chemistry|Constructive\
      \ Solid Geometry|Convert Formats|Data Export|Data Managers|Data Source|Entomology|Epigenetics|Fasta\
      \ Manipulation|Fastq Manipulation|Flow Cytometry Analysis|Genome annotation|Genome\
      \ editing|Genome-Wide Association Study|Genomic Interval Operations|Graphics|Imaging|Machine\
      \ Learning|Metabolomics|Metagenomics|Micro-array Analysis|Molecular Dynamics|Next\
      \ Gen Mappers|NLP|Ontology Manipulation|Phylogenetics|Proteomics|RNA|SAM|Sequence\
      \ Analysis|Statistics|Systems Biology|Text Manipulation|Tool Dependency Packages|Tool\
      \ Generators|Transcriptomics|Variant Analysis|Visualization|Web Services]\n\
      \                                  Specify repository category for .shed.yml\n\
      \                                  (may specify multiple).\n  --owner TEXT \
      \                   Tool Shed repository owner (username).\n  --name TEXT  \
      \                   Tool Shed repository name (defaults to the\n           \
      \                       inferred tool directory name).\n  -f, --force      \
      \               Overwrite existing files if present.\n  --help             \
      \             Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - ci_find_repos
    positional:
    - !Positional
      description: 'Options:'
      position: 0
      name: file.
      optional: false
    named:
    - !Flag
      description: Paths to exclude.
      synonyms:
      - --exclude
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: File of paths to exclude.
      synonyms:
      - --exclude_from
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Exclude paths unchanged in git commit range.
      synonyms:
      - --changed_in_commit_range
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Split output into chunks of this many item\nand print --chunk\
        \ such group."
      synonyms:
      - --chunk_count
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "When output is split into --chunk_count\ngroups, output the group\
        \ 0-indexedby this\noption."
      synonyms:
      - --chunk
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: File to output to, or - for standard output.
      synonyms:
      - --output
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo ci_find_repos [OPTIONS] PROJECT\n\n  Find all shed\
      \ repositories in one or more directories.\n\n  Currently, a shed repository\
      \ is considered a directory with a .shed.yml\n  file.\n\nOptions:\n  --exclude\
      \ PATH                  Paths to exclude.\n  --exclude_from FILE           \
      \  File of paths to exclude.\n  --changed_in_commit_range TEXT  Exclude paths\
      \ unchanged in git commit range.\n  --chunk_count INTEGER           Split output\
      \ into chunks of this many item\n                                  and print\
      \ --chunk such group.\n  --chunk INTEGER                 When output is split\
      \ into --chunk_count\n                                  groups, output the group\
      \ 0-indexedby this\n                                  option.\n  --output TEXT\
      \                   File to output to, or - for standard output.\n  --help \
      \                         Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - profile_delete
    positional:
    - !Positional
      description: ''
      position: 0
      name: PROFILE_NAME
      optional: false
    named:
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo profile_delete [OPTIONS] PROFILE_NAME\n\n  Delete a\
      \ profile.\n\nOptions:\n  --postgres                      Use postgres database\
      \ type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n        \
      \                          Type of database to use for profile -\n         \
      \                         'auto', 'sqlite', 'postgres', and\n              \
      \                    'postgres_docker' are available options. Use\n        \
      \                          postgres to use an existing postgres server\n   \
      \                               you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --docker_cmd\
      \ TEXT               Command used to launch docker (defaults to\n          \
      \                        docker).\n  --docker_sudo / --no_docker_sudo\n    \
      \                              Flag to use sudo when running docker.\n  --docker_host\
      \ TEXT              Docker host to target when executing docker\n          \
      \                        commands (defaults to localhost).\n  --docker_sudo_cmd\
      \ TEXT          sudo command to use when --docker_sudo is\n                \
      \                  enabled (defaults to sudo).\n  --help                   \
      \       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - create_gist
    positional:
    - !Positional
      description: ''
      position: 0
      name: FILE_PATH
      optional: false
    named:
    - !Flag
      description: '[raw|html]  Link type to generate for the file.'
      synonyms:
      - --link_type
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo create_gist [OPTIONS] FILE_PATH\n\n  Upload file to\
      \ GitHub as a sharable gist.\n\nOptions:\n  --link_type [raw|html]  Link type\
      \ to generate for the file.\n  --help                  Show this message and\
      \ exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - test_reports
    positional:
    - !Positional
      description: ''
      position: 0
      name: FILE_PATH
      optional: false
    named:
    - !Flag
      description: "Output test report (HTML - for humans) defaults\nto tool_test_output.html."
      synonyms:
      - --test_output
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Output test report (Basic text - for display in\nCI)"
      synonyms:
      - --test_output_text
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Output test report (Markdown style - for humans\n& computers)"
      synonyms:
      - --test_output_markdown
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: Output test report (xunit style - for CI
      synonyms:
      - --test_output_xunit
      args: !SimpleFlagArg
        name: PATH
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage: planemo test_reports [OPTIONS] FILE_PATH\n\n  Generate human\
      \ readable tool test reports.\n\n  Creates reports in various formats  (HTML,\
      \ text, markdown) from the\n  structured test output (tool_test_output.json).\n\
      \nOptions:\n  --test_output PATH           Output test report (HTML - for humans)\
      \ defaults\n                               to tool_test_output.html.\n  --test_output_text\
      \ PATH      Output test report (Basic text - for display in\n              \
      \                 CI)\n  --test_output_markdown PATH  Output test report (Markdown\
      \ style - for humans\n                               & computers)\n  --test_output_xunit\
      \ PATH     Output test report (xunit style - for CI\n                      \
      \         systems\n  --test_output_junit PATH     Output test report (jUnit\
      \ style - for CI\n                               systems\n  --help         \
      \              Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - merge_test_reports
    positional:
    - !Positional
      description: ''
      position: 0
      name: INPUT_PATHS
      optional: false
    - !Positional
      description: ''
      position: 1
      name: FILE_PATH
      optional: false
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo merge_test_reports [OPTIONS] INPUT_PATHS FILE_PATH\n\
      \n  Merge tool_test_output.json files from multiple runs.\n\nOptions:\n  --help\
      \  Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - mulled_init
    positional: []
    named:
    - !Flag
      description: "Install a specific version of Conda before\nrunning the command,\
        \ by default the version\nthat comes with the continuumio miniconda3\nimage\
        \ will be used under Linux and under Mac OS\nX Conda will be upgraded to to\
        \ work around a\nbug in 4.2."
      synonyms:
      - --mulled_conda_version
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Build a mulled image with the specified\nnamespace - defaults\
        \ to biocontainers. Galaxy\ncurrently only recognizes images with the\nnamespace\
        \ biocontainers."
      synonyms:
      - --mulled_namespace
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Mulled action to perform for targets - this\ndefaults to 'build-and-test'."
      synonyms:
      - --mulled_command
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo mulled_init [OPTIONS]\n\n  Download and install involucro\
      \ for mull command.\n\n  This will happen automatically when using the mull\
      \ command, but this can\n  be pre-installed in an environment using this command.\n\
      \nOptions:\n  --mulled_conda_version TEXT  Install a specific version of Conda\
      \ before\n                               running the command, by default the\
      \ version\n                               that comes with the continuumio miniconda3\n\
      \                               image will be used under Linux and under Mac\
      \ OS\n                               X Conda will be upgraded to to work around\
      \ a\n                               bug in 4.2.\n  --mulled_namespace TEXT \
      \     Build a mulled image with the specified\n                            \
      \   namespace - defaults to biocontainers. Galaxy\n                        \
      \       currently only recognizes images with the\n                        \
      \       namespace biocontainers.\n  --mulled_command TEXT        Mulled action\
      \ to perform for targets - this\n                               defaults to\
      \ 'build-and-test'.\n  --help                       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - docker_shell
    positional:
    - !Positional
      description: ''
      position: 0
      name: TOOL_PATH
      optional: false
    named:
    - !Flag
      description: "Treat the tool's Docker container identifier\nas a locally cached\
        \ tag."
      synonyms:
      - --from_tag
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Shell to launch in container (defaults to\n/bin/bash)."
      synonyms:
      - --shell
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Command used to launch docker (defaults to\ndocker)."
      synonyms:
      - --docker_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo docker_shell [OPTIONS] TOOL_PATH\n\n  Launch shell\
      \ in Docker container for a tool.\n\n  Will launch a shell in the Docker container\
      \ referenced by the specified\n  tool. Prints a command to do this the way Galaxy\
      \ would in job files it\n  generates - so be sure to wrap this in $(...) to\
      \ launch the subshell.\n\n      $ $(planemo docker_shell bowtie2.xml)\n    \
      \  ...\n      root@b8754062f875:/#\n\nOptions:\n  --from_tag               \
      \       Treat the tool's Docker container identifier\n                     \
      \             as a locally cached tag.\n  --shell TEXT                    Shell\
      \ to launch in container (defaults to\n                                  /bin/bash).\n\
      \  --docker_cmd TEXT               Command used to launch docker (defaults to\n\
      \                                  docker).\n  --docker_sudo / --no_docker_sudo\n\
      \                                  Flag to use sudo when running docker.\n \
      \ --docker_sudo_cmd TEXT          sudo command to use when --docker_sudo is\n\
      \                                  enabled (defaults to sudo).\n  --docker_host\
      \ TEXT              Docker host to target when executing docker\n          \
      \                        commands (defaults to localhost).\n  --help       \
      \                   Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - normalize
    positional:
    - !Positional
      description: ''
      position: 0
      name: TOOL_PATH
      optional: false
    named:
    - !Flag
      description: "Expand macros while normalizing tool XML - useful to see\nhow\
        \ macros are evaluated."
      synonyms:
      - --expand_macros
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Planemo will reorder top-level tool blocks according to\ntool\
        \ development best practices as part of this command,\nthis flag will disable\
        \ that behavior."
      synonyms:
      - --skip_reorder
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Planemo will reindent the XML according to tool development\n\
        best practices as part of this command, this flag will\ndisable that behavior."
      synonyms:
      - --skip_reindent
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo normalize [OPTIONS] TOOL_PATH\n\n  Generate normalized\
      \ tool XML from input.\n\n  This will break the formatting of your tool and\
      \ is currently only intended\n  for viewing macro expansions for for use with\
      \ XSD validation (see\n  https://github.com/JeanFred/Galaxy-XSD for instance).\
      \ Please do not use\n  the output as is - it frequently makes tool less readable\
      \ not more.\n\n  The top-level blocks will be reordered and whitespace fixed\
      \ according to\n  the tool development best practices outlined on the Galaxy\
      \ wiki.\n\n      % # Print normalized version of tool.\n      % planemo normalize\
      \ tool.xml\n      <tool>\n      ...\n      % # Print a variant of tool with\
      \ all macros expanded out, useful for\n      % # debugging complex macros.\n\
      \      % planemo normalize --expand_macros tool.xml\n      <tool>\n      ...\n\
      \nOptions:\n  --expand_macros  Expand macros while normalizing tool XML - useful\
      \ to see\n                   how macros are evaluated.\n  --skip_reorder   Planemo\
      \ will reorder top-level tool blocks according to\n                   tool development\
      \ best practices as part of this command,\n                   this flag will\
      \ disable that behavior.\n  --skip_reindent  Planemo will reindent the XML according\
      \ to tool development\n                   best practices as part of this command,\
      \ this flag will\n                   disable that behavior.\n  --help      \
      \     Show this message and exit.\n"
    generated_using: *id002
  - &id003 !Command
    command:
    - planemo
    - travis_init
    positional: []
    named: []
    parent: *id001
    subcommands:
    - !Command
      command:
      - planemo
      - travis_init
      - testing.
      positional:
      - !Positional
        description: ''
        position: 0
        name: planemo
        optional: false
      - !Positional
        description: ''
        position: 1
        name: travis_init
        optional: false
      - !Positional
        description: ''
        position: 2
        name: PROJECT
        optional: false
      named: []
      parent: *id003
      subcommands: []
      usage: []
      help_flag:
      usage_flag:
      version_flag:
      help_text: "/usr/local/lib/python2.7/site-packages/cwltool/__init__.py:17: CWLToolDeprecationWarning:\
        \ \nDEPRECATION: Python 2.7 will reach the end of its life on January 1st,\
        \ 2020.\nPlease upgrade your Python as the Python 2.7 version of cwltool won't\
        \ be\nmaintained after that date.\n\n  \"\"\",  category=CWLToolDeprecationWarning)\n\
        Usage: planemo travis_init [OPTIONS] PROJECT\nTry \"planemo travis_init --help\"\
        \ for help.\n\nError: no such option: -h\n"
      generated_using:
      - -h
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo travis_init [OPTIONS] PROJECT\n\n  Create files to\
      \ use GitHub/TravisCI testing.\n\n  Setup files in a github tool repository\
      \ to enable continuous integration\n  testing.\n\n      % planemo travis_init\
      \ .\n      % # setup Ubuntu 12.04 w/ dependencies in\n      % vim .travis/setup_custom_dependencies.bash\n\
      \      % git add .travis.yml .travis\n      % git commit -m \"Add Travis CI\
      \ testing infrastructure for tools.\"\n      % git push # and register repository\
      \ @ http://travis-ci.org/\n\n  These tests were inspired by work original done\
      \ and documented by Peter\n  Cock here http://bit.ly/gxtravisci.\n\nOptions:\n\
      \  --help  Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - shed_diff
    positional:
    - !Positional
      description: --fail_fast                If multiple repositories are specified
        and an
      position: 0
      name: directories.
      optional: false
    named:
    - !Flag
      description: ''
      synonyms:
      - --shed_target_source
      args: !SimpleFlagArg
        name: testtoolshed
      optional: true
    - !Flag
      description: Recursively perform command for nested repository
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Tool Shed repository owner (username).
      synonyms:
      - --owner
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed repository name (defaults to the\ninferred tool directory\
        \ name)."
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_email
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
        \ and password is specified.\nThis key can be specified with either --shed_key\n\
        or --shed_key_from_env."
      synonyms:
      - --shed_key
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Environment variable to read API key for Tool\nShed access from."
      synonyms:
      - --shed_key_from_env
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_password
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed',\
        \ 'local' (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings\
        \ defined ~/.planemo.yml."
      synonyms:
      - -t
      - --shed_target
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Send diff output to specified file.
      synonyms:
      - -o
      - --output
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Do not attempt smart diff of XML to filter out\nattributes populated\
        \ by the Tool Shed."
      synonyms:
      - --raw
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Output an XUnit report, useful for CI testing
      synonyms:
      - --report_xunit
      args: !SimpleFlagArg
        name: PATH
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo shed_diff [OPTIONS] PROJECT\n\n  diff between local\
      \ repository and Tool Shed.\n\n  By default, this will produce a diff between\
      \ this repository and what\n  would be uploaded to the Tool Shed with the `shed_upload`\
      \ command - but\n  this command can be made to compare other combinations of\
      \ repositories.\n  Here are some examples\n\n      $ # diff for this repository\
      \ and the main Tool Shed\n      $ planemo shed_diff\n      $ # diff for this\
      \ repository and the test Tool Shed\n      $ planemo shed_diff --shed_target\
      \ testtoolshed\n      $ # diff for the test Tool Shed and main Tool Shed\n \
      \     $ planemo shed_diff --shed_target_source testtoolshed\n      $ # diff\
      \ for two an explicitly specified repositories (ignores\n      $ # current project's\
      \ shed YAML file.)\n      $ planemo shed_diff --owner peterjc --name blast_rbh\n\
      \          --shed_target_source testtoolshed\n\n  This command will return an\
      \ exit code of:\n\n  - 0 if there are no detected differences. - 1 if there\
      \ are differences. -\n  2 if the target repository doesn't exist. - >200 if\
      \ there are errors\n  attempting to perform a diff.\n\n  **Warning:** ``shed_diff``\
      \ doesn't inspect repository metadata, this\n  difference applies only to the\
      \ file contents of files that would actually\n  be uploaded to the repository.\n\
      \nOptions:\n  -r, --recursive            Recursively perform command for nested\
      \ repository\n                             directories.\n  --fail_fast     \
      \           If multiple repositories are specified and an\n                \
      \             error occurs stop immediately instead of\n                   \
      \          processing remaining repositories.\n  --owner TEXT              \
      \ Tool Shed repository owner (username).\n  --name TEXT                Tool\
      \ Shed repository name (defaults to the\n                             inferred\
      \ tool directory name).\n  --shed_email TEXT          E-mail for Tool Shed auth\
      \ (required unless\n                             shed_key is specified).\n \
      \ --shed_key TEXT            API key for Tool Shed access. An API key is\n \
      \                            required unless e-mail and password is specified.\n\
      \                             This key can be specified with either --shed_key\n\
      \                             or --shed_key_from_env.\n  --shed_key_from_env\
      \ TEXT   Environment variable to read API key for Tool\n                   \
      \          Shed access from.\n  --shed_password TEXT       Password for Tool\
      \ Shed auth (required unless\n                             shed_key is specified).\n\
      \  -t, --shed_target TEXT     Tool Shed to target (this can be 'toolshed',\n\
      \                             'testtoolshed', 'local' (alias for\n         \
      \                    http://localhost:9009/), an arbitrary url or\n        \
      \                     mappings defined ~/.planemo.yml.\n  -o, --output PATH\
      \          Send diff output to specified file.\n  --shed_target_source TEXT\
      \  Source Tool Shed to diff against (will ignore\n                         \
      \    local project info specified). To compare the\n                       \
      \      main Tool Shed against the test, set this to\n                      \
      \       testtoolshed.\n  --raw                      Do not attempt smart diff\
      \ of XML to filter out\n                             attributes populated by\
      \ the Tool Shed.\n  --report_xunit PATH        Output an XUnit report, useful\
      \ for CI testing\n  --help                     Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - shed_download
    positional:
    - !Positional
      description: --fail_fast               If multiple repositories are specified
        and an
      position: 0
      name: directories.
      optional: false
    named:
    - !Flag
      description: Recursively perform command for nested repository
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Tool Shed repository owner (username).
      synonyms:
      - --owner
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed repository name (defaults to the\ninferred tool directory\
        \ name)."
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_email
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
        \ and password is specified.\nThis key can be specified with either --shed_key\n\
        or --shed_key_from_env."
      synonyms:
      - --shed_key
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Environment variable to read API key for Tool Shed\naccess from."
      synonyms:
      - --shed_key_from_env
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_password
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed',\
        \ 'local' (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings\
        \ defined ~/.planemo.yml."
      synonyms:
      - -t
      - --shed_target
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Destination pattern of tarball(s) to download - if\nthis doesn't\
        \ end in 'gz' it will be treated as a\ndirectory to extract tool contents\
        \ into (defaults\nto shed_download.tar.gz). If multiple repositories\nare\
        \ discovered in a .shed.yml file these will be\ncreated as shed_download_<name>.tar.gz\
        \ by default\nfor instance, simpler repositories will just be\ndownloaded\
        \ to the specified file."
      synonyms:
      - --destination
      args: !SimpleFlagArg
        name: PATH
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo shed_download [OPTIONS] PROJECT\n\n  Download tool\
      \ from Tool Shed into directory.\n\n  Download a tool repository as a tarball\
      \ from the tool shed and extract to\n  the specified directory.\n\nOptions:\n\
      \  -r, --recursive           Recursively perform command for nested repository\n\
      \                            directories.\n  --fail_fast               If multiple\
      \ repositories are specified and an\n                            error occurs\
      \ stop immediately instead of\n                            processing remaining\
      \ repositories.\n  --owner TEXT              Tool Shed repository owner (username).\n\
      \  --name TEXT               Tool Shed repository name (defaults to the\n  \
      \                          inferred tool directory name).\n  --shed_email TEXT\
      \         E-mail for Tool Shed auth (required unless\n                     \
      \       shed_key is specified).\n  --shed_key TEXT           API key for Tool\
      \ Shed access. An API key is\n                            required unless e-mail\
      \ and password is specified.\n                            This key can be specified\
      \ with either --shed_key\n                            or --shed_key_from_env.\n\
      \  --shed_key_from_env TEXT  Environment variable to read API key for Tool Shed\n\
      \                            access from.\n  --shed_password TEXT      Password\
      \ for Tool Shed auth (required unless\n                            shed_key\
      \ is specified).\n  -t, --shed_target TEXT    Tool Shed to target (this can\
      \ be 'toolshed',\n                            'testtoolshed', 'local' (alias\
      \ for\n                            http://localhost:9009/), an arbitrary url\
      \ or\n                            mappings defined ~/.planemo.yml.\n  --destination\
      \ PATH        Destination pattern of tarball(s) to download - if\n         \
      \                   this doesn't end in 'gz' it will be treated as a\n     \
      \                       directory to extract tool contents into (defaults\n\
      \                            to shed_download.tar.gz). If multiple repositories\n\
      \                            are discovered in a .shed.yml file these will be\n\
      \                            created as shed_download_<name>.tar.gz by default\n\
      \                            for instance, simpler repositories will just be\n\
      \                            downloaded to the specified file.\n  --help   \
      \                 Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - Factory...
    positional:
    - !Positional
      description: ''
      position: 0
      name: planemo
      optional: false
    - !Positional
      description: ''
      position: 1
      name: COMMAND
      optional: false
    - !Positional
      description: ''
      position: 2
      name: ARGS
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "/usr/local/lib/python2.7/site-packages/cwltool/__init__.py:17: CWLToolDeprecationWarning:\
      \ \nDEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020.\n\
      Please upgrade your Python as the Python 2.7 version of cwltool won't be\nmaintained\
      \ after that date.\n\n  \"\"\",  category=CWLToolDeprecationWarning)\nProblem\
      \ loading command Factory..., exception No module named cmd_Factory...\nUsage:\
      \ planemo [OPTIONS] COMMAND [ARGS]...\nTry \"planemo --help\" for help.\n\n\
      Error: No such command \"Factory...\".\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - workflow_convert
    positional:
    - !Positional
      description: --galaxy_email TEXT             E-mail address to use when launching
        single-
      position: 0
      name: Galaxy.
      optional: false
    - !Positional
      description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
      position: 0
      name: resolvers.
      optional: false
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 1
      name: commands.
      optional: false
    - !Positional
      description: --shed_tool_conf TEXT           Location of shed tools conf file
        for Galaxy.
      position: 0
      name: Galaxy.
      optional: false
    named:
    - !Flag
      description: Overwrite existing files if present.
      synonyms:
      - -f
      - --force
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: ''
      synonyms:
      - -o
      - --output
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: "Root of development galaxy directory to\nexecute command with."
      synonyms:
      - --galaxy_root
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under"
      synonyms:
      - --galaxy_python_version
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Extra tool sources to include in Galaxy's\ntool panel (file or\
        \ directory). These will\nnot be linted/tested/etc... but they will be\navailable\
        \ to workflows and for interactive\nuse."
      synonyms:
      - --extra_tools
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Download and configure a disposable copy of\nGalaxy from github."
      synonyms:
      - --install_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
        \ isn't specified."
      synonyms:
      - --galaxy_branch
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
        \ github source if\na Galaxy root isn't specified."
      synonyms:
      - --galaxy_source
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Do not create or source a virtualenv\nenvironment for Galaxy,\
        \ this should be used\nor instance to preserve an externally\nconfigured virtual\
        \ environment or conda\nenvironment."
      synonyms:
      - --skip_venv
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip caching of Galaxy source and\ndependencies obtained with\
        \ --install_galaxy.\nNot caching this results in faster downloads\n(no git)\
        \ - so is better on throw away\ninstances such with TravisCI."
      synonyms:
      - --no_cache_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not cleanup temp files created for and by
      synonyms:
      - --no_cleanup
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: / --no_docker          Run Galaxy tools in Docker if enabled.
      synonyms:
      - --docker
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Command used to launch docker (defaults to\ndocker)."
      synonyms:
      - --docker_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Test tools against mulled containers (forces\n--docker)."
      synonyms:
      - --mulled_containers
      - --biocontainers
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Job configuration file for Galaxy to target.
      synonyms:
      - --job_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Tool dependency dir for Galaxy to target.
      synonyms:
      - --tool_dependency_dir
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: Port to serve Galaxy on (default is 9090).
      synonyms:
      - --port
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
        \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\n\
        Galaxy to all ports including potentially\npublicly accessible ones."
      synonyms:
      - --host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
        \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but\
        \ running Galaxy within a Docker\ncontainer."
      synonyms:
      - --engine
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Disable strict validation of CWL.
      synonyms:
      - --non_strict_cwl
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
        \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
      synonyms:
      - --docker_galaxy_image
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Extra path to mount if --engine docker.
      synonyms:
      - --docker_extra_volume
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "test-data directory to for specified\ntool(s)."
      synonyms:
      - --test_data
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
      synonyms:
      - --tool_data_table
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Dependency resolver configuration for Galaxy\nto target."
      synonyms:
      - --dependency_resolvers_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: "Configure Galaxy to use plain brew\ndependency resolution."
      synonyms:
      - --brew_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
      synonyms:
      - --shed_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Configure Galaxy with no dependency
      synonyms:
      - --no_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use only conda for\ndependency resolution."
      synonyms:
      - --conda_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Conda dependency resolution for Galaxy will\ncopy dependencies\
        \ instead of attempting to\nlink them."
      synonyms:
      - --conda_copy_dependencies
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_install\nConda dependency resolution for Galaxy\
        \ will\nattempt to install requested but missing\npackages."
      synonyms:
      - --conda_auto_install
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_init\nConda dependency resolution for Galaxy\
        \ will\nauto install conda itself using miniconda if\nnot availabe on conda_prefix."
      synonyms:
      - --conda_auto_init
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name of profile (created with the\nprofile_create command) to\
        \ use with this\ncommand."
      synonyms:
      - --profile
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Database connection string to use for
      synonyms:
      - --database_connection
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Location of shed tools directory for Galaxy.
      synonyms:
      - --shed_tool_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_galaxy_single_user\nBy default Planemo will configure Galaxy\
        \ to\nrun in single-user mode where there is just\none user and this user\
        \ is automatically\nlogged it. Use --no_galaxy_single_user to\nprevent Galaxy\
        \ from running this way."
      synonyms:
      - --galaxy_single_user
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Serve Galaxy process as a daemon.
      synonyms:
      - --daemon
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Location of pid file is executed with
      synonyms:
      - --pid_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --daemon.
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "When installing shed repositories for\nworkflows, ignore dependency\
        \ issues. These\nlikely indicate a problem but in some cases\nmay not prevent\
        \ a workflow from successfully\nexecuting."
      synonyms:
      - --ignore_dependency_problems
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_shed_install\nBy default Planemo will attempt to install\n\
        repositories needed for workflow testing.\nThis may not be appropriate for\
        \ production\nservers and so this can disabled by calling\nplanemo with --no_shed_install."
      synonyms:
      - --shed_install
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo workflow_convert [OPTIONS] WORKFLOW_PATH\n\n  Convert\
      \ Format 2 workflows to native Galaxy workflows, and vice-versa.\n\nOptions:\n\
      \  -f, --force                     Overwrite existing files if present.\n  -o,\
      \ --output FILE\n  --galaxy_root DIRECTORY         Root of development galaxy\
      \ directory to\n                                  execute command with.\n  --galaxy_python_version\
      \ [2|2.7|3|3.5|3.6|3.7|3.8]\n                                  Python version\
      \ to start Galaxy under\n  --extra_tools PATH              Extra tool sources\
      \ to include in Galaxy's\n                                  tool panel (file\
      \ or directory). These will\n                                  not be linted/tested/etc...\
      \ but they will be\n                                  available to workflows\
      \ and for interactive\n                                  use.\n  --install_galaxy\
      \                Download and configure a disposable copy of\n             \
      \                     Galaxy from github.\n  --galaxy_branch TEXT          \
      \  Branch of Galaxy to target (defaults to\n                               \
      \   master) if a Galaxy root isn't specified.\n  --galaxy_source TEXT      \
      \      Git source of Galaxy to target (defaults to\n                       \
      \           the official galaxyproject github source if\n                  \
      \                a Galaxy root isn't specified.\n  --skip_venv             \
      \        Do not create or source a virtualenv\n                            \
      \      environment for Galaxy, this should be used\n                       \
      \           or instance to preserve an externally\n                        \
      \          configured virtual environment or conda\n                       \
      \           environment.\n  --no_cache_galaxy               Skip caching of\
      \ Galaxy source and\n                                  dependencies obtained\
      \ with --install_galaxy.\n                                  Not caching this\
      \ results in faster downloads\n                                  (no git) -\
      \ so is better on throw away\n                                  instances such\
      \ with TravisCI.\n  --no_cleanup                    Do not cleanup temp files\
      \ created for and by\n                                  Galaxy.\n  --galaxy_email\
      \ TEXT             E-mail address to use when launching single-\n          \
      \                        user Galaxy server.\n  --docker / --no_docker     \
      \     Run Galaxy tools in Docker if enabled.\n  --docker_cmd TEXT          \
      \     Command used to launch docker (defaults to\n                         \
      \         docker).\n  --docker_sudo / --no_docker_sudo\n                   \
      \               Flag to use sudo when running docker.\n  --docker_host TEXT\
      \              Docker host to target when executing docker\n               \
      \                   commands (defaults to localhost).\n  --docker_sudo_cmd TEXT\
      \          sudo command to use when --docker_sudo is\n                     \
      \             enabled (defaults to sudo).\n  --mulled_containers, --biocontainers\n\
      \                                  Test tools against mulled containers (forces\n\
      \                                  --docker).\n  --job_config_file FILE    \
      \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir\
      \ DIRECTORY\n                                  Tool dependency dir for Galaxy\
      \ to target.\n  --port INTEGER                  Port to serve Galaxy on (default\
      \ is 9090).\n  --host TEXT                     Host to bind Galaxy to. Default\
      \ is 127.0.0.1\n                                  that is restricted to localhost\
      \ connections\n                                  for security reasons set to\
      \ 0.0.0.0 to bind\n                                  Galaxy to all ports including\
      \ potentially\n                                  publicly accessible ones.\n\
      \  --engine [galaxy|docker_galaxy|external_galaxy]\n                       \
      \           Select an engine to serve artifacts such as\n                  \
      \                tools and workflows. Defaults to a local\n                \
      \                  Galaxy, but running Galaxy within a Docker\n            \
      \                      container.\n  --non_strict_cwl                Disable\
      \ strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker image\
      \ identifier for docker-galaxy-\n                                  flavor used\
      \ if engine type is specified as\n                                  ``docker-galaxy``.\
      \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\
      \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n\
      \  --test_data DIRECTORY           test-data directory to for specified\n  \
      \                                tool(s).\n  --tool_data_table PATH        \
      \  tool_data_table_conf.xml file to for\n                                  specified\
      \ tool(s).\n  --dependency_resolvers_config_file FILE\n                    \
      \              Dependency resolver configuration for Galaxy\n              \
      \                    to target.\n  --brew_dependency_resolution    Configure\
      \ Galaxy to use plain brew\n                                  dependency resolution.\n\
      \  --shed_dependency_resolution    Configure Galaxy to use brewed Tool Shed\n\
      \                                  dependency resolution.\n  --no_dependency_resolution\
      \      Configure Galaxy with no dependency\n                               \
      \   resolvers.\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
      \ dependency\n                                  commands.\n  --conda_exec FILE\
      \               Location of conda executable.\n  --conda_debug             \
      \      Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --conda_dependency_resolution   Configure\
      \ Galaxy to use only conda for\n                                  dependency\
      \ resolution.\n  --conda_copy_dependencies       Conda dependency resolution\
      \ for Galaxy will\n                                  copy dependencies instead\
      \ of attempting to\n                                  link them.\n  --conda_auto_install\
      \ / --no_conda_auto_install\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  attempt to install\
      \ requested but missing\n                                  packages.\n  --conda_auto_init\
      \ / --no_conda_auto_init\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  auto install\
      \ conda itself using miniconda if\n                                  not availabe\
      \ on conda_prefix.\n  --profile TEXT                  Name of profile (created\
      \ with the\n                                  profile_create command) to use\
      \ with this\n                                  command.\n  --postgres      \
      \                Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --file_path\
      \ DIRECTORY           Location for files created by Galaxy (e.g.\n         \
      \                         database/files).\n  --database_connection TEXT   \
      \   Database connection string to use for\n                                \
      \  Galaxy.\n  --shed_tool_conf TEXT           Location of shed tools conf file\
      \ for Galaxy.\n  --shed_tool_path TEXT           Location of shed tools directory\
      \ for Galaxy.\n  --galaxy_single_user / --no_galaxy_single_user\n          \
      \                        By default Planemo will configure Galaxy to\n     \
      \                             run in single-user mode where there is just\n\
      \                                  one user and this user is automatically\n\
      \                                  logged it. Use --no_galaxy_single_user to\n\
      \                                  prevent Galaxy from running this way.\n \
      \ --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
      \ FILE                 Location of pid file is executed with\n             \
      \                     --daemon.\n  --ignore_dependency_problems    When installing\
      \ shed repositories for\n                                  workflows, ignore\
      \ dependency issues. These\n                                  likely indicate\
      \ a problem but in some cases\n                                  may not prevent\
      \ a workflow from successfully\n                                  executing.\n\
      \  --shed_install / --no_shed_install\n                                  By\
      \ default Planemo will attempt to install\n                                \
      \  repositories needed for workflow testing.\n                             \
      \     This may not be appropriate for production\n                         \
      \         servers and so this can disabled by calling\n                    \
      \              planemo with --no_shed_install.\n  --help                   \
      \       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - shed_build
    positional:
    - !Positional
      description: ''
      position: 0
      name: TOOL_PATH
      optional: false
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo shed_build [OPTIONS] TOOL_PATH\n\n  Create a Galaxy\
      \ tool tarball.\n\n  This will use the .shed.yml file to prepare a tarball (which\
      \ you could\n  upload to the Tool Shed manually).\n\nOptions:\n  --help  Show\
      \ this message and exit.\n"
    generated_using: *id002
  - *id004
  - !Command
    command:
    - planemo
    - lint
    positional:
    - !Positional
      description: --fail_level [warn|error]
      position: 0
      name: testing
      optional: false
    - !Positional
      description: -r, --recursive                 Recursively perform command for
      position: 1
      name: process.
      optional: false
    - !Positional
      description: --urls                          Check validity of URLs in XML files
      position: 2
      name: subdirectories.
      optional: false
    named:
    - !Flag
      description: '[all|warn|error]'
      synonyms:
      - --report_level
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Output an XUnit report, useful for CI
      synonyms:
      - --report_xunit
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Comma-separated list of lint tests to skip\n(e.g. passing --skip\
        \ 'citations,xml_order'\nwould skip linting of citations and best-\npractice\
        \ XML ordering."
      synonyms:
      - -s
      - --skip
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: / --no_xsd                Include tool XSD validation in linting
      synonyms:
      - --xsd
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Check validity of DOIs in XML files
      synonyms:
      - --doi
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Check tool requirements for availability in\nbest practice Conda\
        \ channels."
      synonyms:
      - --conda_requirements
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Check best practice BioContainer namespaces\nfor a container definition\
        \ applicable for\nthis tool."
      synonyms:
      - --biocontainer
      - --biocontainers
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo lint [OPTIONS] TOOL_PATH\n\n  Check for common errors\
      \ and best practices.\n\nOptions:\n  --report_level [all|warn|error]\n  --report_xunit\
      \ PATH             Output an XUnit report, useful for CI\n                 \
      \                 testing\n  --fail_level [warn|error]\n  -s, --skip TEXT  \
      \               Comma-separated list of lint tests to skip\n               \
      \                   (e.g. passing --skip 'citations,xml_order'\n           \
      \                       would skip linting of citations and best-\n        \
      \                          practice XML ordering.\n  --xsd / --no_xsd      \
      \          Include tool XSD validation in linting\n                        \
      \          process.\n  -r, --recursive                 Recursively perform command\
      \ for\n                                  subdirectories.\n  --urls         \
      \                 Check validity of URLs in XML files\n  --doi             \
      \              Check validity of DOIs in XML files\n  --conda_requirements \
      \           Check tool requirements for availability in\n                  \
      \                best practice Conda channels.\n  --biocontainer, --biocontainers\n\
      \                                  Check best practice BioContainer namespaces\n\
      \                                  for a container definition applicable for\n\
      \                                  this tool.\n  --help                    \
      \      Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - shed_serve
    positional:
    - !Positional
      description: --galaxy_email TEXT             E-mail address to use when launching
        single-
      position: 0
      name: Galaxy.
      optional: false
    - !Positional
      description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
      position: 0
      name: resolvers.
      optional: false
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 1
      name: commands.
      optional: false
    - !Positional
      description: --shed_tool_conf TEXT           Location of shed tools conf file
        for Galaxy.
      position: 0
      name: Galaxy.
      optional: false
    named:
    - !Flag
      description: "Recursively perform command for nested\nrepository directories."
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "If multiple repositories are specified and\nan error occurs stop\
        \ immediately instead of\nprocessing remaining repositories."
      synonyms:
      - --fail_fast
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Tool Shed repository owner (username).
      synonyms:
      - --owner
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed repository name (defaults to the\ninferred tool directory\
        \ name)."
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_email
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
        \ and password is\nspecified. This key can be specified with\neither --shed_key\
        \ or --shed_key_from_env."
      synonyms:
      - --shed_key
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Environment variable to read API key for\nTool Shed access from."
      synonyms:
      - --shed_key_from_env
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_password
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed',\
        \ 'local' (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings\
        \ defined ~/.planemo.yml."
      synonyms:
      - -t
      - --shed_target
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Root of development galaxy directory to\nexecute command with."
      synonyms:
      - --galaxy_root
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under"
      synonyms:
      - --galaxy_python_version
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Extra tool sources to include in Galaxy's\ntool panel (file or\
        \ directory). These will\nnot be linted/tested/etc... but they will be\navailable\
        \ to workflows and for interactive\nuse."
      synonyms:
      - --extra_tools
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Download and configure a disposable copy of\nGalaxy from github."
      synonyms:
      - --install_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
        \ isn't specified."
      synonyms:
      - --galaxy_branch
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
        \ github source if\na Galaxy root isn't specified."
      synonyms:
      - --galaxy_source
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Do not create or source a virtualenv\nenvironment for Galaxy,\
        \ this should be used\nor instance to preserve an externally\nconfigured virtual\
        \ environment or conda\nenvironment."
      synonyms:
      - --skip_venv
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip caching of Galaxy source and\ndependencies obtained with\
        \ --install_galaxy.\nNot caching this results in faster downloads\n(no git)\
        \ - so is better on throw away\ninstances such with TravisCI."
      synonyms:
      - --no_cache_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not cleanup temp files created for and by
      synonyms:
      - --no_cleanup
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: / --no_docker          Run Galaxy tools in Docker if enabled.
      synonyms:
      - --docker
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Command used to launch docker (defaults to\ndocker)."
      synonyms:
      - --docker_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Test tools against mulled containers (forces\n--docker)."
      synonyms:
      - --mulled_containers
      - --biocontainers
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Job configuration file for Galaxy to target.
      synonyms:
      - --job_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Tool dependency dir for Galaxy to target.
      synonyms:
      - --tool_dependency_dir
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: Port to serve Galaxy on (default is 9090).
      synonyms:
      - --port
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
        \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\n\
        Galaxy to all ports including potentially\npublicly accessible ones."
      synonyms:
      - --host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "test-data directory to for specified\ntool(s)."
      synonyms:
      - --test_data
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
      synonyms:
      - --tool_data_table
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Dependency resolver configuration for Galaxy\nto target."
      synonyms:
      - --dependency_resolvers_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: "Configure Galaxy to use plain brew\ndependency resolution."
      synonyms:
      - --brew_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
      synonyms:
      - --shed_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Configure Galaxy with no dependency
      synonyms:
      - --no_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use only conda for\ndependency resolution."
      synonyms:
      - --conda_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Conda dependency resolution for Galaxy will\ncopy dependencies\
        \ instead of attempting to\nlink them."
      synonyms:
      - --conda_copy_dependencies
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_install\nConda dependency resolution for Galaxy\
        \ will\nattempt to install requested but missing\npackages."
      synonyms:
      - --conda_auto_install
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_init\nConda dependency resolution for Galaxy\
        \ will\nauto install conda itself using miniconda if\nnot availabe on conda_prefix."
      synonyms:
      - --conda_auto_init
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name of profile (created with the\nprofile_create command) to\
        \ use with this\ncommand."
      synonyms:
      - --profile
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Database connection string to use for
      synonyms:
      - --database_connection
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Location of shed tools directory for Galaxy.
      synonyms:
      - --shed_tool_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_galaxy_single_user\nBy default Planemo will configure Galaxy\
        \ to\nrun in single-user mode where there is just\none user and this user\
        \ is automatically\nlogged it. Use --no_galaxy_single_user to\nprevent Galaxy\
        \ from running this way."
      synonyms:
      - --galaxy_single_user
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Location of pid file is executed with
      synonyms:
      - --pid_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --daemon.
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Serve Galaxy process as a daemon.
      synonyms:
      - --daemon
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Do not install shed dependencies as part of\nrepository installation."
      synonyms:
      - --skip_dependencies
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo shed_serve [OPTIONS] PROJECT\n\n  Launch Galaxy with\
      \ Tool Shed dependencies.\n\n  This command will start a Galaxy instance configured\
      \ to target the\n  specified shed, find published artifacts (tools and dependencies)\n\
      \  corresponding to command-line arguments and ``.shed.yml`` file(s), install\n\
      \  these artifacts, and serve a Galaxy instances that can be logged into and\n\
      \  explored interactively.\n\nOptions:\n  -r, --recursive                 Recursively\
      \ perform command for nested\n                                  repository directories.\n\
      \  --fail_fast                     If multiple repositories are specified and\n\
      \                                  an error occurs stop immediately instead\
      \ of\n                                  processing remaining repositories.\n\
      \  --owner TEXT                    Tool Shed repository owner (username).\n\
      \  --name TEXT                     Tool Shed repository name (defaults to the\n\
      \                                  inferred tool directory name).\n  --shed_email\
      \ TEXT               E-mail for Tool Shed auth (required unless\n          \
      \                        shed_key is specified).\n  --shed_key TEXT        \
      \         API key for Tool Shed access. An API key is\n                    \
      \              required unless e-mail and password is\n                    \
      \              specified. This key can be specified with\n                 \
      \                 either --shed_key or --shed_key_from_env.\n  --shed_key_from_env\
      \ TEXT        Environment variable to read API key for\n                   \
      \               Tool Shed access from.\n  --shed_password TEXT            Password\
      \ for Tool Shed auth (required unless\n                                  shed_key\
      \ is specified).\n  -t, --shed_target TEXT          Tool Shed to target (this\
      \ can be 'toolshed',\n                                  'testtoolshed', 'local'\
      \ (alias for\n                                  http://localhost:9009/), an\
      \ arbitrary url or\n                                  mappings defined ~/.planemo.yml.\n\
      \  --galaxy_root DIRECTORY         Root of development galaxy directory to\n\
      \                                  execute command with.\n  --galaxy_python_version\
      \ [2|2.7|3|3.5|3.6|3.7|3.8]\n                                  Python version\
      \ to start Galaxy under\n  --extra_tools PATH              Extra tool sources\
      \ to include in Galaxy's\n                                  tool panel (file\
      \ or directory). These will\n                                  not be linted/tested/etc...\
      \ but they will be\n                                  available to workflows\
      \ and for interactive\n                                  use.\n  --install_galaxy\
      \                Download and configure a disposable copy of\n             \
      \                     Galaxy from github.\n  --galaxy_branch TEXT          \
      \  Branch of Galaxy to target (defaults to\n                               \
      \   master) if a Galaxy root isn't specified.\n  --galaxy_source TEXT      \
      \      Git source of Galaxy to target (defaults to\n                       \
      \           the official galaxyproject github source if\n                  \
      \                a Galaxy root isn't specified.\n  --skip_venv             \
      \        Do not create or source a virtualenv\n                            \
      \      environment for Galaxy, this should be used\n                       \
      \           or instance to preserve an externally\n                        \
      \          configured virtual environment or conda\n                       \
      \           environment.\n  --no_cache_galaxy               Skip caching of\
      \ Galaxy source and\n                                  dependencies obtained\
      \ with --install_galaxy.\n                                  Not caching this\
      \ results in faster downloads\n                                  (no git) -\
      \ so is better on throw away\n                                  instances such\
      \ with TravisCI.\n  --no_cleanup                    Do not cleanup temp files\
      \ created for and by\n                                  Galaxy.\n  --galaxy_email\
      \ TEXT             E-mail address to use when launching single-\n          \
      \                        user Galaxy server.\n  --docker / --no_docker     \
      \     Run Galaxy tools in Docker if enabled.\n  --docker_cmd TEXT          \
      \     Command used to launch docker (defaults to\n                         \
      \         docker).\n  --docker_sudo / --no_docker_sudo\n                   \
      \               Flag to use sudo when running docker.\n  --docker_host TEXT\
      \              Docker host to target when executing docker\n               \
      \                   commands (defaults to localhost).\n  --docker_sudo_cmd TEXT\
      \          sudo command to use when --docker_sudo is\n                     \
      \             enabled (defaults to sudo).\n  --mulled_containers, --biocontainers\n\
      \                                  Test tools against mulled containers (forces\n\
      \                                  --docker).\n  --job_config_file FILE    \
      \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir\
      \ DIRECTORY\n                                  Tool dependency dir for Galaxy\
      \ to target.\n  --port INTEGER                  Port to serve Galaxy on (default\
      \ is 9090).\n  --host TEXT                     Host to bind Galaxy to. Default\
      \ is 127.0.0.1\n                                  that is restricted to localhost\
      \ connections\n                                  for security reasons set to\
      \ 0.0.0.0 to bind\n                                  Galaxy to all ports including\
      \ potentially\n                                  publicly accessible ones.\n\
      \  --test_data DIRECTORY           test-data directory to for specified\n  \
      \                                tool(s).\n  --tool_data_table PATH        \
      \  tool_data_table_conf.xml file to for\n                                  specified\
      \ tool(s).\n  --dependency_resolvers_config_file FILE\n                    \
      \              Dependency resolver configuration for Galaxy\n              \
      \                    to target.\n  --brew_dependency_resolution    Configure\
      \ Galaxy to use plain brew\n                                  dependency resolution.\n\
      \  --shed_dependency_resolution    Configure Galaxy to use brewed Tool Shed\n\
      \                                  dependency resolution.\n  --no_dependency_resolution\
      \      Configure Galaxy with no dependency\n                               \
      \   resolvers.\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
      \ dependency\n                                  commands.\n  --conda_exec FILE\
      \               Location of conda executable.\n  --conda_debug             \
      \      Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --conda_dependency_resolution   Configure\
      \ Galaxy to use only conda for\n                                  dependency\
      \ resolution.\n  --conda_copy_dependencies       Conda dependency resolution\
      \ for Galaxy will\n                                  copy dependencies instead\
      \ of attempting to\n                                  link them.\n  --conda_auto_install\
      \ / --no_conda_auto_install\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  attempt to install\
      \ requested but missing\n                                  packages.\n  --conda_auto_init\
      \ / --no_conda_auto_init\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  auto install\
      \ conda itself using miniconda if\n                                  not availabe\
      \ on conda_prefix.\n  --profile TEXT                  Name of profile (created\
      \ with the\n                                  profile_create command) to use\
      \ with this\n                                  command.\n  --postgres      \
      \                Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --file_path\
      \ DIRECTORY           Location for files created by Galaxy (e.g.\n         \
      \                         database/files).\n  --database_connection TEXT   \
      \   Database connection string to use for\n                                \
      \  Galaxy.\n  --shed_tool_conf TEXT           Location of shed tools conf file\
      \ for Galaxy.\n  --shed_tool_path TEXT           Location of shed tools directory\
      \ for Galaxy.\n  --galaxy_single_user / --no_galaxy_single_user\n          \
      \                        By default Planemo will configure Galaxy to\n     \
      \                             run in single-user mode where there is just\n\
      \                                  one user and this user is automatically\n\
      \                                  logged it. Use --no_galaxy_single_user to\n\
      \                                  prevent Galaxy from running this way.\n \
      \ --pid_file FILE                 Location of pid file is executed with\n  \
      \                                --daemon.\n  --daemon                     \
      \   Serve Galaxy process as a daemon.\n  --skip_dependencies             Do\
      \ not install shed dependencies as part of\n                               \
      \   repository installation.\n  --help                          Show this message\
      \ and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - conda_env
    positional:
    - !Positional
      description: "$ . <(planemo conda_env seqtk_seq.xml)\nDeactivate environment\
        \ with conda_env_deactivate\n(seqtk_seq_v6) $ which seqtk\n/home/planemo/miniconda2/envs/jobdepsDkzcjjfecc6d406196737781ff4456ec60975c137e04884e4f4b05dc68192f7cec4656/bin/seqtk\n\
        (seqtk_seq_v6) $ conda_env_deactivate\n$"
      position: 0
      name: tool.
      optional: false
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 0
      name: commands.
      optional: false
    named:
    - !Flag
      description: Conda prefix to use for conda dependency
      synonyms:
      - --conda_prefix
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo conda_env [OPTIONS] TOOL_PATH\n\n  Activate a conda\
      \ environment for tool.\n\n  Source the output of this command to activate a\
      \ conda environment for this\n  tool.\n\n      $ . <(planemo conda_env seqtk_seq.xml)\n\
      \      Deactivate environment with conda_env_deactivate\n      (seqtk_seq_v6)\
      \ $ which seqtk\n      /home/planemo/miniconda2/envs/jobdepsDkzcjjfecc6d406196737781ff4456ec60975c137e04884e4f4b05dc68192f7cec4656/bin/seqtk\n\
      \      (seqtk_seq_v6) $ conda_env_deactivate\n      $\n\nOptions:\n  --conda_prefix\
      \ DIRECTORY        Conda prefix to use for conda dependency\n              \
      \                    commands.\n  --conda_exec FILE               Location of\
      \ conda executable.\n  --conda_debug                   Enable more verbose conda\
      \ logging.\n  --conda_channels, --conda_ensure_channels TEXT\n             \
      \                     Ensure conda is configured with specified\n          \
      \                        comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --help                          Show\
      \ this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - serve
    positional:
    - !Positional
      description: planemo will search parent directories to see if any is a Galaxy
        instance
      position: 0
      name: tool.
      optional: false
    - !Positional
      description: --galaxy_email TEXT             E-mail address to use when launching
        single-
      position: 0
      name: Galaxy.
      optional: false
    - !Positional
      description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
      position: 0
      name: resolvers.
      optional: false
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 1
      name: commands.
      optional: false
    - !Positional
      description: --shed_tool_conf TEXT           Location of shed tools conf file
        for Galaxy.
      position: 0
      name: Galaxy.
      optional: false
    named:
    - !Flag
      description: "Root of development galaxy directory to\nexecute command with."
      synonyms:
      - --galaxy_root
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under"
      synonyms:
      - --galaxy_python_version
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Extra tool sources to include in Galaxy's\ntool panel (file or\
        \ directory). These will\nnot be linted/tested/etc... but they will be\navailable\
        \ to workflows and for interactive\nuse."
      synonyms:
      - --extra_tools
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Download and configure a disposable copy of\nGalaxy from github."
      synonyms:
      - --install_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
        \ isn't specified."
      synonyms:
      - --galaxy_branch
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
        \ github source if\na Galaxy root isn't specified."
      synonyms:
      - --galaxy_source
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Do not create or source a virtualenv\nenvironment for Galaxy,\
        \ this should be used\nor instance to preserve an externally\nconfigured virtual\
        \ environment or conda\nenvironment."
      synonyms:
      - --skip_venv
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip caching of Galaxy source and\ndependencies obtained with\
        \ --install_galaxy.\nNot caching this results in faster downloads\n(no git)\
        \ - so is better on throw away\ninstances such with TravisCI."
      synonyms:
      - --no_cache_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not cleanup temp files created for and by
      synonyms:
      - --no_cleanup
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: / --no_docker          Run Galaxy tools in Docker if enabled.
      synonyms:
      - --docker
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Command used to launch docker (defaults to\ndocker)."
      synonyms:
      - --docker_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Test tools against mulled containers (forces\n--docker)."
      synonyms:
      - --mulled_containers
      - --biocontainers
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Job configuration file for Galaxy to target.
      synonyms:
      - --job_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Tool dependency dir for Galaxy to target.
      synonyms:
      - --tool_dependency_dir
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: Port to serve Galaxy on (default is 9090).
      synonyms:
      - --port
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
        \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\n\
        Galaxy to all ports including potentially\npublicly accessible ones."
      synonyms:
      - --host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
        \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but\
        \ running Galaxy within a Docker\ncontainer."
      synonyms:
      - --engine
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Disable strict validation of CWL.
      synonyms:
      - --non_strict_cwl
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
        \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
      synonyms:
      - --docker_galaxy_image
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Extra path to mount if --engine docker.
      synonyms:
      - --docker_extra_volume
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "test-data directory to for specified\ntool(s)."
      synonyms:
      - --test_data
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
      synonyms:
      - --tool_data_table
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Dependency resolver configuration for Galaxy\nto target."
      synonyms:
      - --dependency_resolvers_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: "Configure Galaxy to use plain brew\ndependency resolution."
      synonyms:
      - --brew_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
      synonyms:
      - --shed_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Configure Galaxy with no dependency
      synonyms:
      - --no_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use only conda for\ndependency resolution."
      synonyms:
      - --conda_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Conda dependency resolution for Galaxy will\ncopy dependencies\
        \ instead of attempting to\nlink them."
      synonyms:
      - --conda_copy_dependencies
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_install\nConda dependency resolution for Galaxy\
        \ will\nattempt to install requested but missing\npackages."
      synonyms:
      - --conda_auto_install
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_init\nConda dependency resolution for Galaxy\
        \ will\nauto install conda itself using miniconda if\nnot availabe on conda_prefix."
      synonyms:
      - --conda_auto_init
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name of profile (created with the\nprofile_create command) to\
        \ use with this\ncommand."
      synonyms:
      - --profile
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Database connection string to use for
      synonyms:
      - --database_connection
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Location of shed tools directory for Galaxy.
      synonyms:
      - --shed_tool_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_galaxy_single_user\nBy default Planemo will configure Galaxy\
        \ to\nrun in single-user mode where there is just\none user and this user\
        \ is automatically\nlogged it. Use --no_galaxy_single_user to\nprevent Galaxy\
        \ from running this way."
      synonyms:
      - --galaxy_single_user
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Serve Galaxy process as a daemon.
      synonyms:
      - --daemon
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Location of pid file is executed with
      synonyms:
      - --pid_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --daemon.
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "When installing shed repositories for\nworkflows, ignore dependency\
        \ issues. These\nlikely indicate a problem but in some cases\nmay not prevent\
        \ a workflow from successfully\nexecuting."
      synonyms:
      - --ignore_dependency_problems
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_shed_install\nBy default Planemo will attempt to install\n\
        repositories needed for workflow testing.\nThis may not be appropriate for\
        \ production\nservers and so this can disabled by calling\nplanemo with --no_shed_install."
      synonyms:
      - --shed_install
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy for use with CWL tool.\n(this option is experimental\
        \ and will be\nreplaced when and if CWL support is merged\ninto Galaxy)."
      synonyms:
      - --cwl
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Root of development galaxy directory to\nexecute command with\
        \ (must be branch of\nGalaxy with CWL support, this option is\nexperimental\
        \ and will be replaced with\n--galaxy_root when and if CWL support is\nmerged\
        \ into Galaxy."
      synonyms:
      - --cwl_galaxy_root
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo serve [OPTIONS] TOOL_PATH\n\n  Launch Galaxy instance\
      \ with specified tools.\n\n  The Galaxy tool panel will include just the referenced\
      \ tool or tools (by\n  default all the tools in the current working directory)\
      \ and the upload\n  tool.\n\n  planemo will search parent directories to see\
      \ if any is a Galaxy instance\n  - but one can pick the Galaxy instance to use\
      \ with the ``--galaxy_root``\n  option or force planemo to download a disposable\
      \ instance with the\n  ``--install_galaxy`` flag.\n\n  ``planemo`` will run\
      \ the Galaxy instance in an existing virtualenv if one\n  exists in a ``.venv``\
      \ directory in the specified ``--galaxy_root``.\n  Otherwise, the Galaxy instance\
      \ will run in a clean virtualenv created in\n  ``/tmp``.\n\n  ``planemo`` uses\
      \ temporarily generated config files and environment\n  variables to attempt\
      \ to shield this execution of Galaxy from manually\n  launched runs against\
      \ that same Galaxy root - but this may not be bullet\n  proof yet, so please\
      \ be careful and do not try this against a production\n  Galaxy instance.\n\n\
      Options:\n  --galaxy_root DIRECTORY         Root of development galaxy directory\
      \ to\n                                  execute command with.\n  --galaxy_python_version\
      \ [2|2.7|3|3.5|3.6|3.7|3.8]\n                                  Python version\
      \ to start Galaxy under\n  --extra_tools PATH              Extra tool sources\
      \ to include in Galaxy's\n                                  tool panel (file\
      \ or directory). These will\n                                  not be linted/tested/etc...\
      \ but they will be\n                                  available to workflows\
      \ and for interactive\n                                  use.\n  --install_galaxy\
      \                Download and configure a disposable copy of\n             \
      \                     Galaxy from github.\n  --galaxy_branch TEXT          \
      \  Branch of Galaxy to target (defaults to\n                               \
      \   master) if a Galaxy root isn't specified.\n  --galaxy_source TEXT      \
      \      Git source of Galaxy to target (defaults to\n                       \
      \           the official galaxyproject github source if\n                  \
      \                a Galaxy root isn't specified.\n  --skip_venv             \
      \        Do not create or source a virtualenv\n                            \
      \      environment for Galaxy, this should be used\n                       \
      \           or instance to preserve an externally\n                        \
      \          configured virtual environment or conda\n                       \
      \           environment.\n  --no_cache_galaxy               Skip caching of\
      \ Galaxy source and\n                                  dependencies obtained\
      \ with --install_galaxy.\n                                  Not caching this\
      \ results in faster downloads\n                                  (no git) -\
      \ so is better on throw away\n                                  instances such\
      \ with TravisCI.\n  --no_cleanup                    Do not cleanup temp files\
      \ created for and by\n                                  Galaxy.\n  --galaxy_email\
      \ TEXT             E-mail address to use when launching single-\n          \
      \                        user Galaxy server.\n  --docker / --no_docker     \
      \     Run Galaxy tools in Docker if enabled.\n  --docker_cmd TEXT          \
      \     Command used to launch docker (defaults to\n                         \
      \         docker).\n  --docker_sudo / --no_docker_sudo\n                   \
      \               Flag to use sudo when running docker.\n  --docker_host TEXT\
      \              Docker host to target when executing docker\n               \
      \                   commands (defaults to localhost).\n  --docker_sudo_cmd TEXT\
      \          sudo command to use when --docker_sudo is\n                     \
      \             enabled (defaults to sudo).\n  --mulled_containers, --biocontainers\n\
      \                                  Test tools against mulled containers (forces\n\
      \                                  --docker).\n  --job_config_file FILE    \
      \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir\
      \ DIRECTORY\n                                  Tool dependency dir for Galaxy\
      \ to target.\n  --port INTEGER                  Port to serve Galaxy on (default\
      \ is 9090).\n  --host TEXT                     Host to bind Galaxy to. Default\
      \ is 127.0.0.1\n                                  that is restricted to localhost\
      \ connections\n                                  for security reasons set to\
      \ 0.0.0.0 to bind\n                                  Galaxy to all ports including\
      \ potentially\n                                  publicly accessible ones.\n\
      \  --engine [galaxy|docker_galaxy|external_galaxy]\n                       \
      \           Select an engine to serve artifacts such as\n                  \
      \                tools and workflows. Defaults to a local\n                \
      \                  Galaxy, but running Galaxy within a Docker\n            \
      \                      container.\n  --non_strict_cwl                Disable\
      \ strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker image\
      \ identifier for docker-galaxy-\n                                  flavor used\
      \ if engine type is specified as\n                                  ``docker-galaxy``.\
      \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\
      \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n\
      \  --test_data DIRECTORY           test-data directory to for specified\n  \
      \                                tool(s).\n  --tool_data_table PATH        \
      \  tool_data_table_conf.xml file to for\n                                  specified\
      \ tool(s).\n  --dependency_resolvers_config_file FILE\n                    \
      \              Dependency resolver configuration for Galaxy\n              \
      \                    to target.\n  --brew_dependency_resolution    Configure\
      \ Galaxy to use plain brew\n                                  dependency resolution.\n\
      \  --shed_dependency_resolution    Configure Galaxy to use brewed Tool Shed\n\
      \                                  dependency resolution.\n  --no_dependency_resolution\
      \      Configure Galaxy with no dependency\n                               \
      \   resolvers.\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
      \ dependency\n                                  commands.\n  --conda_exec FILE\
      \               Location of conda executable.\n  --conda_debug             \
      \      Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --conda_dependency_resolution   Configure\
      \ Galaxy to use only conda for\n                                  dependency\
      \ resolution.\n  --conda_copy_dependencies       Conda dependency resolution\
      \ for Galaxy will\n                                  copy dependencies instead\
      \ of attempting to\n                                  link them.\n  --conda_auto_install\
      \ / --no_conda_auto_install\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  attempt to install\
      \ requested but missing\n                                  packages.\n  --conda_auto_init\
      \ / --no_conda_auto_init\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  auto install\
      \ conda itself using miniconda if\n                                  not availabe\
      \ on conda_prefix.\n  --profile TEXT                  Name of profile (created\
      \ with the\n                                  profile_create command) to use\
      \ with this\n                                  command.\n  --postgres      \
      \                Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --file_path\
      \ DIRECTORY           Location for files created by Galaxy (e.g.\n         \
      \                         database/files).\n  --database_connection TEXT   \
      \   Database connection string to use for\n                                \
      \  Galaxy.\n  --shed_tool_conf TEXT           Location of shed tools conf file\
      \ for Galaxy.\n  --shed_tool_path TEXT           Location of shed tools directory\
      \ for Galaxy.\n  --galaxy_single_user / --no_galaxy_single_user\n          \
      \                        By default Planemo will configure Galaxy to\n     \
      \                             run in single-user mode where there is just\n\
      \                                  one user and this user is automatically\n\
      \                                  logged it. Use --no_galaxy_single_user to\n\
      \                                  prevent Galaxy from running this way.\n \
      \ --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
      \ FILE                 Location of pid file is executed with\n             \
      \                     --daemon.\n  --ignore_dependency_problems    When installing\
      \ shed repositories for\n                                  workflows, ignore\
      \ dependency issues. These\n                                  likely indicate\
      \ a problem but in some cases\n                                  may not prevent\
      \ a workflow from successfully\n                                  executing.\n\
      \  --shed_install / --no_shed_install\n                                  By\
      \ default Planemo will attempt to install\n                                \
      \  repositories needed for workflow testing.\n                             \
      \     This may not be appropriate for production\n                         \
      \         servers and so this can disabled by calling\n                    \
      \              planemo with --no_shed_install.\n  --cwl                    \
      \       Configure Galaxy for use with CWL tool.\n                          \
      \        (this option is experimental and will be\n                        \
      \          replaced when and if CWL support is merged\n                    \
      \              into Galaxy).\n  --cwl_galaxy_root DIRECTORY     Root of development\
      \ galaxy directory to\n                                  execute command with\
      \ (must be branch of\n                                  Galaxy with CWL support,\
      \ this option is\n                                  experimental and will be\
      \ replaced with\n                                  --galaxy_root when and if\
      \ CWL support is\n                                  merged into Galaxy.\n  --help\
      \                          Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - training_generate_from_wf
    positional:
    - !Positional
      description: '[required]'
      position: 0
      name: modify
      optional: false
    - !Positional
      description: --workflow_id TEXT              ID of the workflow on the Galaxy
        instance
      position: 1
      name: workflow
      optional: false
    - !Positional
      description: --galaxy_email TEXT             E-mail address to use when launching
        single-
      position: 2
      name: Galaxy.
      optional: false
    - !Positional
      description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
      position: 0
      name: resolvers.
      optional: false
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 1
      name: commands.
      optional: false
    - !Positional
      description: --shed_tool_conf TEXT           Location of shed tools conf file
        for Galaxy.
      position: 0
      name: Galaxy.
      optional: false
    named:
    - !Flag
      description: "Name (directory name) of the topic to create\nor in which a tutorial\
        \ should be created or\nupdates  [required]"
      synonyms:
      - --topic_name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Name (directory name) of the tutorial to
      synonyms:
      - --tutorial_name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Workflow of the tutorial (locally)
      synonyms:
      - --workflow
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: URL of a Galaxy instance with the workflow
      synonyms:
      - --galaxy_url
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: API key on the Galaxy instance with the
      synonyms:
      - --galaxy_api_key
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Root of development galaxy directory to\nexecute command with."
      synonyms:
      - --galaxy_root
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under"
      synonyms:
      - --galaxy_python_version
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Extra tool sources to include in Galaxy's\ntool panel (file or\
        \ directory). These will\nnot be linted/tested/etc... but they will be\navailable\
        \ to workflows and for interactive\nuse."
      synonyms:
      - --extra_tools
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Download and configure a disposable copy of\nGalaxy from github."
      synonyms:
      - --install_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
        \ isn't specified."
      synonyms:
      - --galaxy_branch
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
        \ github source if\na Galaxy root isn't specified."
      synonyms:
      - --galaxy_source
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Do not create or source a virtualenv\nenvironment for Galaxy,\
        \ this should be used\nor instance to preserve an externally\nconfigured virtual\
        \ environment or conda\nenvironment."
      synonyms:
      - --skip_venv
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip caching of Galaxy source and\ndependencies obtained with\
        \ --install_galaxy.\nNot caching this results in faster downloads\n(no git)\
        \ - so is better on throw away\ninstances such with TravisCI."
      synonyms:
      - --no_cache_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not cleanup temp files created for and by
      synonyms:
      - --no_cleanup
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: / --no_docker          Run Galaxy tools in Docker if enabled.
      synonyms:
      - --docker
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Command used to launch docker (defaults to\ndocker)."
      synonyms:
      - --docker_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Test tools against mulled containers (forces\n--docker)."
      synonyms:
      - --mulled_containers
      - --biocontainers
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Job configuration file for Galaxy to target.
      synonyms:
      - --job_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Tool dependency dir for Galaxy to target.
      synonyms:
      - --tool_dependency_dir
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: Port to serve Galaxy on (default is 9090).
      synonyms:
      - --port
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
        \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\n\
        Galaxy to all ports including potentially\npublicly accessible ones."
      synonyms:
      - --host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
        \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but\
        \ running Galaxy within a Docker\ncontainer."
      synonyms:
      - --engine
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Disable strict validation of CWL.
      synonyms:
      - --non_strict_cwl
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
        \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
      synonyms:
      - --docker_galaxy_image
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Extra path to mount if --engine docker.
      synonyms:
      - --docker_extra_volume
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "test-data directory to for specified\ntool(s)."
      synonyms:
      - --test_data
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
      synonyms:
      - --tool_data_table
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Dependency resolver configuration for Galaxy\nto target."
      synonyms:
      - --dependency_resolvers_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: "Configure Galaxy to use plain brew\ndependency resolution."
      synonyms:
      - --brew_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
      synonyms:
      - --shed_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Configure Galaxy with no dependency
      synonyms:
      - --no_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use only conda for\ndependency resolution."
      synonyms:
      - --conda_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Conda dependency resolution for Galaxy will\ncopy dependencies\
        \ instead of attempting to\nlink them."
      synonyms:
      - --conda_copy_dependencies
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_install\nConda dependency resolution for Galaxy\
        \ will\nattempt to install requested but missing\npackages."
      synonyms:
      - --conda_auto_install
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_init\nConda dependency resolution for Galaxy\
        \ will\nauto install conda itself using miniconda if\nnot availabe on conda_prefix."
      synonyms:
      - --conda_auto_init
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name of profile (created with the\nprofile_create command) to\
        \ use with this\ncommand."
      synonyms:
      - --profile
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Database connection string to use for
      synonyms:
      - --database_connection
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Location of shed tools directory for Galaxy.
      synonyms:
      - --shed_tool_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_galaxy_single_user\nBy default Planemo will configure Galaxy\
        \ to\nrun in single-user mode where there is just\none user and this user\
        \ is automatically\nlogged it. Use --no_galaxy_single_user to\nprevent Galaxy\
        \ from running this way."
      synonyms:
      - --galaxy_single_user
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Serve Galaxy process as a daemon.
      synonyms:
      - --daemon
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Location of pid file is executed with
      synonyms:
      - --pid_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --daemon.
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "When installing shed repositories for\nworkflows, ignore dependency\
        \ issues. These\nlikely indicate a problem but in some cases\nmay not prevent\
        \ a workflow from successfully\nexecuting."
      synonyms:
      - --ignore_dependency_problems
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_shed_install\nBy default Planemo will attempt to install\n\
        repositories needed for workflow testing.\nThis may not be appropriate for\
        \ production\nservers and so this can disabled by calling\nplanemo with --no_shed_install."
      synonyms:
      - --shed_install
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo training_generate_from_wf [OPTIONS] TOOL_PATH\n\n \
      \ Create tutorial skeleton from workflow.\n\nOptions:\n  --topic_name TEXT \
      \              Name (directory name) of the topic to create\n              \
      \                    or in which a tutorial should be created or\n         \
      \                         updates  [required]\n  --tutorial_name TEXT      \
      \      Name (directory name) of the tutorial to\n                          \
      \        modify  [required]\n  --workflow PATH                 Workflow of the\
      \ tutorial (locally)\n  --galaxy_url TEXT               URL of a Galaxy instance\
      \ with the workflow\n  --galaxy_api_key TEXT           API key on the Galaxy\
      \ instance with the\n                                  workflow\n  --workflow_id\
      \ TEXT              ID of the workflow on the Galaxy instance\n  --galaxy_root\
      \ DIRECTORY         Root of development galaxy directory to\n              \
      \                    execute command with.\n  --galaxy_python_version [2|2.7|3|3.5|3.6|3.7|3.8]\n\
      \                                  Python version to start Galaxy under\n  --extra_tools\
      \ PATH              Extra tool sources to include in Galaxy's\n            \
      \                      tool panel (file or directory). These will\n        \
      \                          not be linted/tested/etc... but they will be\n  \
      \                                available to workflows and for interactive\n\
      \                                  use.\n  --install_galaxy                Download\
      \ and configure a disposable copy of\n                                  Galaxy\
      \ from github.\n  --galaxy_branch TEXT            Branch of Galaxy to target\
      \ (defaults to\n                                  master) if a Galaxy root isn't\
      \ specified.\n  --galaxy_source TEXT            Git source of Galaxy to target\
      \ (defaults to\n                                  the official galaxyproject\
      \ github source if\n                                  a Galaxy root isn't specified.\n\
      \  --skip_venv                     Do not create or source a virtualenv\n  \
      \                                environment for Galaxy, this should be used\n\
      \                                  or instance to preserve an externally\n \
      \                                 configured virtual environment or conda\n\
      \                                  environment.\n  --no_cache_galaxy       \
      \        Skip caching of Galaxy source and\n                               \
      \   dependencies obtained with --install_galaxy.\n                         \
      \         Not caching this results in faster downloads\n                   \
      \               (no git) - so is better on throw away\n                    \
      \              instances such with TravisCI.\n  --no_cleanup               \
      \     Do not cleanup temp files created for and by\n                       \
      \           Galaxy.\n  --galaxy_email TEXT             E-mail address to use\
      \ when launching single-\n                                  user Galaxy server.\n\
      \  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n\
      \  --docker_cmd TEXT               Command used to launch docker (defaults to\n\
      \                                  docker).\n  --docker_sudo / --no_docker_sudo\n\
      \                                  Flag to use sudo when running docker.\n \
      \ --docker_host TEXT              Docker host to target when executing docker\n\
      \                                  commands (defaults to localhost).\n  --docker_sudo_cmd\
      \ TEXT          sudo command to use when --docker_sudo is\n                \
      \                  enabled (defaults to sudo).\n  --mulled_containers, --biocontainers\n\
      \                                  Test tools against mulled containers (forces\n\
      \                                  --docker).\n  --job_config_file FILE    \
      \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir\
      \ DIRECTORY\n                                  Tool dependency dir for Galaxy\
      \ to target.\n  --port INTEGER                  Port to serve Galaxy on (default\
      \ is 9090).\n  --host TEXT                     Host to bind Galaxy to. Default\
      \ is 127.0.0.1\n                                  that is restricted to localhost\
      \ connections\n                                  for security reasons set to\
      \ 0.0.0.0 to bind\n                                  Galaxy to all ports including\
      \ potentially\n                                  publicly accessible ones.\n\
      \  --engine [galaxy|docker_galaxy|external_galaxy]\n                       \
      \           Select an engine to serve artifacts such as\n                  \
      \                tools and workflows. Defaults to a local\n                \
      \                  Galaxy, but running Galaxy within a Docker\n            \
      \                      container.\n  --non_strict_cwl                Disable\
      \ strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker image\
      \ identifier for docker-galaxy-\n                                  flavor used\
      \ if engine type is specified as\n                                  ``docker-galaxy``.\
      \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\
      \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n\
      \  --test_data DIRECTORY           test-data directory to for specified\n  \
      \                                tool(s).\n  --tool_data_table PATH        \
      \  tool_data_table_conf.xml file to for\n                                  specified\
      \ tool(s).\n  --dependency_resolvers_config_file FILE\n                    \
      \              Dependency resolver configuration for Galaxy\n              \
      \                    to target.\n  --brew_dependency_resolution    Configure\
      \ Galaxy to use plain brew\n                                  dependency resolution.\n\
      \  --shed_dependency_resolution    Configure Galaxy to use brewed Tool Shed\n\
      \                                  dependency resolution.\n  --no_dependency_resolution\
      \      Configure Galaxy with no dependency\n                               \
      \   resolvers.\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
      \ dependency\n                                  commands.\n  --conda_exec FILE\
      \               Location of conda executable.\n  --conda_debug             \
      \      Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --conda_dependency_resolution   Configure\
      \ Galaxy to use only conda for\n                                  dependency\
      \ resolution.\n  --conda_copy_dependencies       Conda dependency resolution\
      \ for Galaxy will\n                                  copy dependencies instead\
      \ of attempting to\n                                  link them.\n  --conda_auto_install\
      \ / --no_conda_auto_install\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  attempt to install\
      \ requested but missing\n                                  packages.\n  --conda_auto_init\
      \ / --no_conda_auto_init\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  auto install\
      \ conda itself using miniconda if\n                                  not availabe\
      \ on conda_prefix.\n  --profile TEXT                  Name of profile (created\
      \ with the\n                                  profile_create command) to use\
      \ with this\n                                  command.\n  --postgres      \
      \                Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --file_path\
      \ DIRECTORY           Location for files created by Galaxy (e.g.\n         \
      \                         database/files).\n  --database_connection TEXT   \
      \   Database connection string to use for\n                                \
      \  Galaxy.\n  --shed_tool_conf TEXT           Location of shed tools conf file\
      \ for Galaxy.\n  --shed_tool_path TEXT           Location of shed tools directory\
      \ for Galaxy.\n  --galaxy_single_user / --no_galaxy_single_user\n          \
      \                        By default Planemo will configure Galaxy to\n     \
      \                             run in single-user mode where there is just\n\
      \                                  one user and this user is automatically\n\
      \                                  logged it. Use --no_galaxy_single_user to\n\
      \                                  prevent Galaxy from running this way.\n \
      \ --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
      \ FILE                 Location of pid file is executed with\n             \
      \                     --daemon.\n  --ignore_dependency_problems    When installing\
      \ shed repositories for\n                                  workflows, ignore\
      \ dependency issues. These\n                                  likely indicate\
      \ a problem but in some cases\n                                  may not prevent\
      \ a workflow from successfully\n                                  executing.\n\
      \  --shed_install / --no_shed_install\n                                  By\
      \ default Planemo will attempt to install\n                                \
      \  repositories needed for workflow testing.\n                             \
      \     This may not be appropriate for production\n                         \
      \         servers and so this can disabled by calling\n                    \
      \              planemo with --no_shed_install.\n  --help                   \
      \       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - conda_install
    positional:
    - !Positional
      description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
      position: 0
      name: subdirectories.
      optional: false
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 1
      name: commands.
      optional: false
    named:
    - !Flag
      description: Recursively perform command for
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Install Conda dependencies globally instead\nof in requirement\
        \ specific environments\npackaged for tools. If the Conda bin\ndirectory is\
        \ on your PATH, tools may still\nuse binaries but this is more designed for\n\
        interactive testing and debugging."
      synonyms:
      - --global
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_init\nConda dependency resolution for Galaxy\
        \ will\nauto install conda itself using miniconda if\nnot availabe on conda_prefix."
      synonyms:
      - --conda_auto_init
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo conda_install [OPTIONS] TARGET\n\n  Install conda packages\
      \ for tool requirements.\n\nOptions:\n  -r, --recursive                 Recursively\
      \ perform command for\n                                  subdirectories.\n \
      \ --conda_prefix DIRECTORY        Conda prefix to use for conda dependency\n\
      \                                  commands.\n  --conda_exec FILE          \
      \     Location of conda executable.\n  --conda_debug                   Enable\
      \ more verbose conda logging.\n  --conda_channels, --conda_ensure_channels TEXT\n\
      \                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --global                        Install\
      \ Conda dependencies globally instead\n                                  of\
      \ in requirement specific environments\n                                  packaged\
      \ for tools. If the Conda bin\n                                  directory is\
      \ on your PATH, tools may still\n                                  use binaries\
      \ but this is more designed for\n                                  interactive\
      \ testing and debugging.\n  --conda_auto_init / --no_conda_auto_init\n     \
      \                             Conda dependency resolution for Galaxy will\n\
      \                                  auto install conda itself using miniconda\
      \ if\n                                  not availabe on conda_prefix.\n  --help\
      \                          Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - conda_lint
    positional:
    - !Positional
      description: --help                          Show this message and exit.
      position: 0
      name: directories.
      optional: false
    named:
    - !Flag
      description: '[all|warn|error]'
      synonyms:
      - --report_level
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '[warn|error]'
      synonyms:
      - --fail_level
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Recursively perform command for nested conda
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage: planemo conda_lint [OPTIONS] RECIPE_DIR\n\n  Check conda recipe\
      \ for common issues.\n\n  Built in large part on the work from the BSD licensed\
      \ anaconda-verify\n  project. For more information on anacoda-verify see:\n\
      \  https://github.com/ContinuumIO/anaconda-verify.\n\nOptions:\n  --report_level\
      \ [all|warn|error]\n  --fail_level [warn|error]\n  -r, --recursive         \
      \        Recursively perform command for nested conda\n                    \
      \              directories.\n  --help                          Show this message\
      \ and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - for...
    positional:
    - !Positional
      description: ''
      position: 0
      name: planemo
      optional: false
    - !Positional
      description: ''
      position: 1
      name: COMMAND
      optional: false
    - !Positional
      description: ''
      position: 2
      name: ARGS
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "/usr/local/lib/python2.7/site-packages/cwltool/__init__.py:17: CWLToolDeprecationWarning:\
      \ \nDEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020.\n\
      Please upgrade your Python as the Python 2.7 version of cwltool won't be\nmaintained\
      \ after that date.\n\n  \"\"\",  category=CWLToolDeprecationWarning)\nProblem\
      \ loading command for..., exception No module named cmd_for...\nUsage: planemo\
      \ [OPTIONS] COMMAND [ARGS]...\nTry \"planemo --help\" for help.\n\nError: No\
      \ such command \"for...\".\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - shed_lint
    positional:
    - !Positional
      description: --ensure_metadata               Ensure .shed.yml files contain
        enough
      position: 0
      name: process.
      optional: false
    named:
    - !Flag
      description: "Recursively perform command for nested\nrepository directories."
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "If multiple repositories are specified and\nan error occurs stop\
        \ immediately instead of\nprocessing remaining repositories."
      synonyms:
      - --fail_fast
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '[all|warn|error]'
      synonyms:
      - --report_level
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: '[warn|error]'
      synonyms:
      - --fail_level
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Lint tools discovered in the process of\nlinting repositories."
      synonyms:
      - --tools
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: / --no_xsd                Include tool XSD validation in linting
      synonyms:
      - --xsd
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Check validity of URLs in XML files
      synonyms:
      - --urls
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo shed_lint [OPTIONS] PROJECT\n\n  Check Tool Shed repository\
      \ for common issues.\n\n  With the ``--tools`` flag, this command lints actual\
      \ Galaxy tools in\n  addition to tool shed artifacts.\n\n  With the ``--urls``\
      \ flag, this command searches for\n  ``<package>$URL</package>`` and download\
      \ actions which specify URLs. Each\n  of those are accessed individually. By\
      \ default, this tool requests the\n  first hundred or so bytes of each listed\
      \ URL and validates that a 200 OK\n  was received. In tool XML files, the ``--urls``\
      \ option checks through the\n  help text for mentioned URLs and checks those.\n\
      \nOptions:\n  -r, --recursive                 Recursively perform command for\
      \ nested\n                                  repository directories.\n  --fail_fast\
      \                     If multiple repositories are specified and\n         \
      \                         an error occurs stop immediately instead of\n    \
      \                              processing remaining repositories.\n  --report_level\
      \ [all|warn|error]\n  --fail_level [warn|error]\n  --tools                 \
      \        Lint tools discovered in the process of\n                         \
      \         linting repositories.\n  --xsd / --no_xsd                Include tool\
      \ XSD validation in linting\n                                  process.\n  --ensure_metadata\
      \               Ensure .shed.yml files contain enough\n                    \
      \              metadata for each repository to allow\n                     \
      \             automated creation and/or updates.\n  --urls                 \
      \         Check validity of URLs in XML files\n  --help                    \
      \      Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - docker_build
    positional:
    - !Positional
      description: "% planemo docker_build bowtie2.xml # asssumes Dockerfile in same\
        \ dir\n% planemo docker_shell --from_tag bowtie2.xml"
      position: 0
      name: image.
      optional: false
    named:
    - !Flag
      description: ''
      synonyms:
      - --dockerfile
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --docker_image_cache
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Command used to launch docker (defaults to\ndocker)."
      synonyms:
      - --docker_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo docker_build [OPTIONS] TOOL_PATH\n\n  Build (and optionally\
      \ cache) Docker images.\n\n  Loads the tool or tools referenced by ``TOOL_PATH``\
      \ (by default all tools\n  in current directory), and ensures they all reference\
      \ the same Docker\n  image and then attempts to find a Dockerfile for these\
      \ tools (can be\n  explicitly specified with ``--dockerfile`` but by default\
      \ it will check\n  the tool's directory and the current directory as well).\n\
      \n  This command will then build and tag the image so it is ready to be tested\n\
      \  and published. The docker_shell command be used to test out the built\n \
      \ image.\n\n      % planemo docker_build bowtie2.xml # asssumes Dockerfile in\
      \ same dir\n      % planemo docker_shell --from_tag bowtie2.xml\n\n  This can\
      \ optionally also cache the images.\n\nOptions:\n  --dockerfile TEXT\n  --docker_image_cache\
      \ TEXT\n  --docker_cmd TEXT               Command used to launch docker (defaults\
      \ to\n                                  docker).\n  --docker_sudo / --no_docker_sudo\n\
      \                                  Flag to use sudo when running docker.\n \
      \ --docker_sudo_cmd TEXT          sudo command to use when --docker_sudo is\n\
      \                                  enabled (defaults to sudo).\n  --docker_host\
      \ TEXT              Docker host to target when executing docker\n          \
      \                        commands (defaults to localhost).\n  --help       \
      \                   Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - shed_upload
    positional:
    - !Positional
      description: '...'
      position: 0
      name: test-data/blastdb.loc
      optional: false
    - !Positional
      description: '% tar -tzf shed_upload.tar.gz | wc -l'
      position: 1
      name: tools/ncbi_blast_plus/tool_dependencies.xml
      optional: false
    - !Positional
      description: 'Options:'
      position: 2
      name: '117'
      optional: false
    named:
    - !Flag
      description: "Recursively perform command for nested\nrepository directories."
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "If multiple repositories are specified and an\nerror occurs stop\
        \ immediately instead of\nprocessing remaining repositories."
      synonyms:
      - --fail_fast
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Tool Shed repository owner (username).
      synonyms:
      - --owner
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed repository name (defaults to the\ninferred tool directory\
        \ name)."
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_email
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
        \ and password is\nspecified. This key can be specified with\neither --shed_key\
        \ or --shed_key_from_env."
      synonyms:
      - --shed_key
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Environment variable to read API key for Tool\nShed access from."
      synonyms:
      - --shed_key_from_env
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
      synonyms:
      - --shed_password
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed',\
        \ 'local' (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings\
        \ defined ~/.planemo.yml."
      synonyms:
      - -t
      - --shed_target
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Commit message for tool shed upload.
      synonyms:
      - -m
      - --message
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "If a repository cannot be found for the\nspecified user/repo name\
        \ pair, then\nautomatically create the repository in the\ntoolshed."
      synonyms:
      - --force_repository_creation
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip uploading if the shed_diff detects there\nwould be no 'difference'\
        \ (only attributes\npopulated by the shed would be updated.)"
      synonyms:
      - --check_diff
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Produce tar file for upload but do not publish\nto a tool shed."
      synonyms:
      - --tar_only
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Specify a pre-existing tar file instead of\nautomatically building\
        \ one as part of this\ncommand."
      synonyms:
      - --tar
      args: !SimpleFlagArg
        name: FILE
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo shed_upload [OPTIONS] PROJECT\n\n  Low-level command\
      \ to upload tarballs.\n\n  Generally, ``shed_update`` should be used instead\
      \ since it also updates\n  both tool shed contents (via tar ball generation\
      \ and upload) as well as\n  metadata (to handle metadata changes in ``.shed.yml``\
      \ files).\n\n      % planemo shed_upload --tar_only  ~/\n      % tar -tzf shed_upload.tar.gz\n\
      \      test-data/blastdb.loc\n      ...\n      tools/ncbi_blast_plus/tool_dependencies.xml\n\
      \      % tar -tzf shed_upload.tar.gz | wc -l\n      117\n\nOptions:\n  -r, --recursive\
      \              Recursively perform command for nested\n                    \
      \           repository directories.\n  --fail_fast                  If multiple\
      \ repositories are specified and an\n                               error occurs\
      \ stop immediately instead of\n                               processing remaining\
      \ repositories.\n  --owner TEXT                 Tool Shed repository owner (username).\n\
      \  --name TEXT                  Tool Shed repository name (defaults to the\n\
      \                               inferred tool directory name).\n  --shed_email\
      \ TEXT            E-mail for Tool Shed auth (required unless\n             \
      \                  shed_key is specified).\n  --shed_key TEXT              API\
      \ key for Tool Shed access. An API key is\n                               required\
      \ unless e-mail and password is\n                               specified. This\
      \ key can be specified with\n                               either --shed_key\
      \ or --shed_key_from_env.\n  --shed_key_from_env TEXT     Environment variable\
      \ to read API key for Tool\n                               Shed access from.\n\
      \  --shed_password TEXT         Password for Tool Shed auth (required unless\n\
      \                               shed_key is specified).\n  -t, --shed_target\
      \ TEXT       Tool Shed to target (this can be 'toolshed',\n                \
      \               'testtoolshed', 'local' (alias for\n                       \
      \        http://localhost:9009/), an arbitrary url or\n                    \
      \           mappings defined ~/.planemo.yml.\n  -m, --message TEXT         \
      \  Commit message for tool shed upload.\n  --force_repository_creation  If a\
      \ repository cannot be found for the\n                               specified\
      \ user/repo name pair, then\n                               automatically create\
      \ the repository in the\n                               toolshed.\n  --check_diff\
      \                 Skip uploading if the shed_diff detects there\n          \
      \                     would be no 'difference' (only attributes\n          \
      \                     populated by the shed would be updated.)\n  --tar_only\
      \                   Produce tar file for upload but do not publish\n       \
      \                        to a tool shed.\n  --tar FILE                   Specify\
      \ a pre-existing tar file instead of\n                               automatically\
      \ building one as part of this\n                               command.\n  --help\
      \                       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - config_init
    positional:
    - !Positional
      description: ''
      position: 0
      name: PROJECT
      optional: false
    named:
    - !Flag
      description: ''
      synonyms:
      - --template
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo config_init [OPTIONS] PROJECT\n\n  Initialise global\
      \ configuration for Planemo.\n\n  Helps initialize global configuration (in\
      \ home directory) for Planemo.\n\nOptions:\n  --template TEXT\n  --help    \
      \       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - virtualenv
    positional:
    - !Positional
      description: ''
      position: 0
      name: VIRTUALENV_PATH
      optional: false
    named:
    - !Flag
      description: ''
      synonyms:
      - -p
      - --python
      args: !SimpleFlagArg
        name: PYTHON_EXE
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo virtualenv [OPTIONS] VIRTUALENV_PATH\n\n  Create a\
      \ virtualenv.\n\n  Use virtualenv as library to create a virtualenv for Galaxy\
      \ if virtualenv\n  is not available on the PATH.\n\nOptions:\n  -p, --python\
      \ PYTHON_EXE\n  --help                   Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - training_fill_data_library
    positional:
    - !Positional
      description: ''
      position: 0
      name: TOOL_PATH
      optional: false
    named:
    - !Flag
      description: "Name (directory name) of the topic to create or in\nwhich a tutorial\
        \ should be created or updates\n[required]"
      synonyms:
      - --topic_name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Name (directory name) of the tutorial to modify\n[required]"
      synonyms:
      - --tutorial_name
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Zenodo URL with the input data
      synonyms:
      - --zenodo_link
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "YAML file with the correspondance between Zenodo\nextension and\
        \ Galaxy datatypes"
      synonyms:
      - --datatypes
      args: !SimpleFlagArg
        name: PATH
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo training_fill_data_library [OPTIONS] TOOL_PATH\n\n\
      \  Build training template from workflow.\n\nOptions:\n  --topic_name TEXT \
      \    Name (directory name) of the topic to create or in\n                  \
      \      which a tutorial should be created or updates\n                     \
      \   [required]\n  --tutorial_name TEXT  Name (directory name) of the tutorial\
      \ to modify\n                        [required]\n  --zenodo_link TEXT    Zenodo\
      \ URL with the input data\n  --datatypes PATH      YAML file with the correspondance\
      \ between Zenodo\n                        extension and Galaxy datatypes\n \
      \ --help                Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - conda_init
    positional:
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 0
      name: commands.
      optional: false
    named:
    - !Flag
      description: Conda prefix to use for conda dependency
      synonyms:
      - --conda_prefix
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo conda_init [OPTIONS]\n\n  Download and install conda.\n\
      \n  This will download conda for managing dependencies for your platform using\n\
      \  the appropriate Miniconda installer.\n\n  By running this command, you are\
      \ agreeing to the terms of the conda\n  license a 3-clause BSD 3 license. Please\
      \ review full license at\n  http://docs.continuum.io/anaconda/eula.\n\n  Planemo\
      \ will print a warning and terminate with an exit code of 7 if Conda\n  is already\
      \ installed.\n\nOptions:\n  --conda_prefix DIRECTORY        Conda prefix to\
      \ use for conda dependency\n                                  commands.\n  --conda_exec\
      \ FILE               Location of conda executable.\n  --conda_debug        \
      \           Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --help                          Show\
      \ this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - brew_env
    positional:
    - !Positional
      description: "% . <(planemo brew_env bowtie2.xml)\n% which bowtie2\n/home/john/.linuxbrew/Cellar/bowtie2/2.1.0/bin/bowtie2"
      position: 0
      name: dependencies.
      optional: false
    - !Positional
      description: --shell
      position: 0
      name: available.
      optional: false
    named:
    - !Flag
      description: Homebrew 'brew' executable to use.
      synonyms:
      - --brew
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Skip installation - only source requirements already
      synonyms:
      - --skip_install
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo brew_env [OPTIONS] TOOL_PATH\n\n  List commands to\
      \ inject brew dependencies.\n\n  Display commands used to modify environment\
      \ to inject tool's brew\n  dependencies.\n\n      % . <(planemo brew_env bowtie2.xml)\n\
      \      % which bowtie2\n      /home/john/.linuxbrew/Cellar/bowtie2/2.1.0/bin/bowtie2\n\
      \n  By default this will attempt to attempt to install these recipes as\n  needed.\
      \ This automatic installation can be skipped with the\n  ``--skip_install``\
      \ flag.\n\n  Intead of injecting the enviornment into your current shell using\
      \ the\n  above idiom, the ``--shell`` flag can be sent to launch a new subshell\n\
      \  when sourced.\n\n      % . <(planemo brew_env --skip_install --shell bowtie2.xml)\n\
      \      (bowtie2) % which bowtie2\n      /home/john/.linuxbrew/Cellar/bowtie2/2.1.0/bin/bowtie2\n\
      \nOptions:\n  --brew FILE     Homebrew 'brew' executable to use.\n  --skip_install\
      \  Skip installation - only source requirements already\n                  available.\n\
      \  --shell\n  --help          Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - brew
    positional:
    - !Positional
      description: ''
      position: 0
      name: TOOL_PATH
      optional: false
    named:
    - !Flag
      description: Homebrew 'brew' executable to use.
      synonyms:
      - --brew
      args: !SimpleFlagArg
        name: FILE
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo brew [OPTIONS] TOOL_PATH\n\n  Install tool requirements\
      \ using brew.\n\n  An experimental approach to versioning brew recipes will\
      \ be used. See full\n  discussion on the homebrew-science issues page here -\n\
      \  https://github.com/Homebrew/homebrew-science/issues/1191. Information on\n\
      \  the implementation can be found at https://github.com/jmchilton/platform-\n\
      \  brew until a more permanent project home is setup.\n\nOptions:\n  --brew\
      \ FILE  Homebrew 'brew' executable to use.\n  --help       Show this message\
      \ and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - list_repos
    positional:
    - !Positional
      description: 'Options:'
      position: 0
      name: file.
      optional: false
    named:
    - !Flag
      description: Paths to exclude.
      synonyms:
      - --exclude
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: File of paths to exclude.
      synonyms:
      - --exclude_from
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Exclude paths unchanged in git commit range.
      synonyms:
      - --changed_in_commit_range
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Split output into chunks of this many item\nand print --chunk\
        \ such group."
      synonyms:
      - --chunk_count
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "When output is split into --chunk_count\ngroups, output the group\
        \ 0-indexedby this\noption."
      synonyms:
      - --chunk
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: File to output to, or - for standard output.
      synonyms:
      - --output
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo list_repos [OPTIONS] PROJECT\n\n  Find all shed repositories\
      \ in one or more directories and output as yaml.\n\n  Currently, a shed repository\
      \ is considered a directory with a .shed.yml\n  file.\n\nOptions:\n  --exclude\
      \ PATH                  Paths to exclude.\n  --exclude_from FILE           \
      \  File of paths to exclude.\n  --changed_in_commit_range TEXT  Exclude paths\
      \ unchanged in git commit range.\n  --chunk_count INTEGER           Split output\
      \ into chunks of this many item\n                                  and print\
      \ --chunk such group.\n  --chunk INTEGER                 When output is split\
      \ into --chunk_count\n                                  groups, output the group\
      \ 0-indexedby this\n                                  option.\n  --output TEXT\
      \                   File to output to, or - for standard output.\n  --help \
      \                         Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - open
    positional:
    - !Positional
      description: ''
      position: 0
      name: PATH
      optional: false
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo open [OPTIONS] PATH\n\n  Open latest Planemo test results\
      \ in a web browser.\n\nOptions:\n  --help  Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - clone
    positional:
    - !Positional
      description: ''
      position: 0
      name: TARGET
      optional: false
    - !Positional
      description: ''
      position: 1
      name: PROJECT
      optional: false
    named:
    - !Flag
      description: / --skip_fork
      synonyms:
      - --fork
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Create a named branch on result.
      synonyms:
      - --branch
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo clone [OPTIONS] TARGET PROJECT\n\n  Short-cut to quickly\
      \ clone, fork, and branch a relevant Github repo.\n\n  For instance, the following\
      \ will clone, fork, and branch the tools-iuc\n  repository to allow a subsequent\
      \ pull request to fix a problem with bwa.\n\n      $ planemo clone --branch\
      \ bwa-fix tools-iuc\n      $ cd tools-iuc\n      $ # Make changes.\n      $\
      \ git add -p # Add desired changes.\n      $ git commit -m \"Fix bwa problem.\"\
      \n      $ planemo pull_request -m \"Fix bwa problem.\"\n\n  These changes do\
      \ require that a github username and password are specified\n  in ~/.planemo.yml.\n\
      \nOptions:\n  --fork / --skip_fork\n  --branch TEXT         Create a named branch\
      \ on result.\n  --help                Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - pull_request
    positional:
    - !Positional
      description: ''
      position: 0
      name: PROJECT
      optional: false
    named:
    - !Flag
      description: Message describing the pull request to create.
      synonyms:
      - -m
      - --message
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo pull_request [OPTIONS] PROJECT\n\n  Short-cut to quickly\
      \ create a pull request for a relevant Github repo.\n\n  For instance, the following\
      \ will clone, fork, and branch the tools-iuc\n  repository to allow a subsequent\
      \ pull request to fix a problem with bwa.\n\n      $ planemo clone --branch\
      \ bwa-fix tools-iuc\n      $ cd tools-iuc\n      $ # Make changes.\n      $\
      \ git add -p # Add desired changes.\n      $ git commit -m \"Fix bwa problem.\"\
      \n      $ planemo pull_request -m \"Fix bwa problem.\"\n\n  These changes do\
      \ require that a github username and password are specified\n  in ~/.planemo.yml.\n\
      \nOptions:\n  -m, --message TEXT  Message describing the pull request to create.\n\
      \  --help              Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - dependency_script
    positional:
    - !Positional
      description: These are intended to be used via ``bash dep_install.sh`` (once),
        and as
      position: 0
      name: variables.
      optional: false
    named:
    - !Flag
      description: "Recursively perform command for nested\nrepository directories."
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "If multiple repositories are specified and an\nerror occurs stop\
        \ immediately instead of\nprocessing remaining repositories."
      synonyms:
      - --fail_fast
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Directory to cache downloaded files, default is\n$DOWNLOAD_CACHE"
      synonyms:
      - --download_cache
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo dependency_script [OPTIONS] PROJECT\n\n  Compile tool_dependencies.xml\
      \ to bash script.\n\n  An experimental approach parsing tool_dependencies.xml\
      \ files into bash\n  shell scripts, intended initially for use within Continuous\
      \ Integration\n  testing setups like TravisCI.\n\n  Parses the ``tool_dependencies.xml``\
      \ files from the specified projects,\n  and converts them into an installation\
      \ bash script (``dep_install.sh``),\n  and a shell script (``env.sh``) defining\
      \ any new/edited environment\n  variables.\n\n  These are intended to be used\
      \ via ``bash dep_install.sh`` (once), and as\n  ``source env.sh`` prior to running\
      \ any of the dependencies to set the\n  environment variable within the current\
      \ shell session.\n\n  Both ``dep_install.sh`` and ``env.sh`` require ``$INSTALL_DIR``\
      \ be defined\n  before running them, set to an existing directory with write\
      \ permissions.\n  Beware than if run on multiple tools, they can over-write\
      \ each other (for\n  example if you have packages for different versions of\
      \ the same tool). In\n  this case make separate calls to ``planemo dependency_script``\
      \ and call\n  the scripts with different installation directories.\n\n  This\
      \ command will download (and cache) any URLs specified via Galaxy\n  download\
      \ actions. This is in order to decompress them and determine the\n  relevant\
      \ sub-folder to change into as per the Tool Shed install mechanism,\n  so that\
      \ this can be recorded as a ``cd`` comand in the bash script.\n\n  The download\
      \ cache used by ``planemo dependency_script`` and the resulting\n  output script\
      \ ``dep_install.sh`` defaults to ``./download_cache`` (under\n  the current\
      \ working directory), and can be set with ``$DOWNLOAD_CACHE``.\n\n  If the ``tool_dependencies.xml``\
      \ file includes SHA256 checksums for\n  downloads, these will be verified after\
      \ downloading to the cache (by\n  either ``planemo dependency_script`` or ``bash\
      \ dep_install.sh``).\n\n  This is experimental, and is initially intended for\
      \ use within continuous\n  integration testing setups like TravisCI to both\
      \ verify the dependency\n  installation receipe works, and to use this to run\
      \ functional tests.\n\nOptions:\n  -r, --recursive             Recursively perform\
      \ command for nested\n                              repository directories.\n\
      \  --fail_fast                 If multiple repositories are specified and an\n\
      \                              error occurs stop immediately instead of\n  \
      \                            processing remaining repositories.\n  --download_cache\
      \ DIRECTORY  Directory to cache downloaded files, default is\n             \
      \                 $DOWNLOAD_CACHE\n  --help                      Show this message\
      \ and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - tool_factory
    positional:
    - !Positional
      description: --galaxy_email TEXT             E-mail address to use when launching
        single-
      position: 0
      name: Galaxy.
      optional: false
    - !Positional
      description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
      position: 0
      name: resolvers.
      optional: false
    - !Positional
      description: --conda_exec FILE               Location of conda executable.
      position: 1
      name: commands.
      optional: false
    - !Positional
      description: --shed_tool_conf TEXT           Location of shed tools conf file
        for Galaxy.
      position: 0
      name: Galaxy.
      optional: false
    named:
    - !Flag
      description: "Root of development galaxy directory to\nexecute command with."
      synonyms:
      - --galaxy_root
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "[2|2.7|3|3.5|3.6|3.7|3.8]\nPython version to start Galaxy under"
      synonyms:
      - --galaxy_python_version
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Extra tool sources to include in Galaxy's\ntool panel (file or\
        \ directory). These will\nnot be linted/tested/etc... but they will be\navailable\
        \ to workflows and for interactive\nuse."
      synonyms:
      - --extra_tools
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Download and configure a disposable copy of\nGalaxy from github."
      synonyms:
      - --install_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
        \ isn't specified."
      synonyms:
      - --galaxy_branch
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
        \ github source if\na Galaxy root isn't specified."
      synonyms:
      - --galaxy_source
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Do not create or source a virtualenv\nenvironment for Galaxy,\
        \ this should be used\nor instance to preserve an externally\nconfigured virtual\
        \ environment or conda\nenvironment."
      synonyms:
      - --skip_venv
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Skip caching of Galaxy source and\ndependencies obtained with\
        \ --install_galaxy.\nNot caching this results in faster downloads\n(no git)\
        \ - so is better on throw away\ninstances such with TravisCI."
      synonyms:
      - --no_cache_galaxy
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not cleanup temp files created for and by
      synonyms:
      - --no_cleanup
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: / --no_docker          Run Galaxy tools in Docker if enabled.
      synonyms:
      - --docker
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Command used to launch docker (defaults to\ndocker)."
      synonyms:
      - --docker_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_docker_sudo\nFlag to use sudo when running docker."
      synonyms:
      - --docker_sudo
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker host to target when executing docker\ncommands (defaults\
        \ to localhost)."
      synonyms:
      - --docker_host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
        \ sudo)."
      synonyms:
      - --docker_sudo_cmd
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Test tools against mulled containers (forces\n--docker)."
      synonyms:
      - --mulled_containers
      - --biocontainers
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Job configuration file for Galaxy to target.
      synonyms:
      - --job_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Tool dependency dir for Galaxy to target.
      synonyms:
      - --tool_dependency_dir
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: Port to serve Galaxy on (default is 9090).
      synonyms:
      - --port
      args: !SimpleFlagArg
        name: INTEGER
      optional: true
    - !Flag
      description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
        \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\n\
        Galaxy to all ports including potentially\npublicly accessible ones."
      synonyms:
      - --host
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
        \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but\
        \ running Galaxy within a Docker\ncontainer."
      synonyms:
      - --engine
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Disable strict validation of CWL.
      synonyms:
      - --non_strict_cwl
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
        \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
      synonyms:
      - --docker_galaxy_image
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Extra path to mount if --engine docker.
      synonyms:
      - --docker_extra_volume
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "test-data directory to for specified\ntool(s)."
      synonyms:
      - --test_data
      args: !SimpleFlagArg
        name: DIRECTORY
      optional: true
    - !Flag
      description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
      synonyms:
      - --tool_data_table
      args: !SimpleFlagArg
        name: PATH
      optional: true
    - !Flag
      description: "Dependency resolver configuration for Galaxy\nto target."
      synonyms:
      - --dependency_resolvers_config_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: "Configure Galaxy to use plain brew\ndependency resolution."
      synonyms:
      - --brew_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
      synonyms:
      - --shed_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Configure Galaxy with no dependency
      synonyms:
      - --no_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Enable more verbose conda logging.
      synonyms:
      - --conda_debug
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Ensure conda is configured with specified\ncomma separated list\
        \ of channels."
      synonyms:
      - --conda_channels
      - --conda_ensure_channels
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "Use locally built packages while building\nConda environments."
      synonyms:
      - --conda_use_local
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Configure Galaxy to use only conda for\ndependency resolution."
      synonyms:
      - --conda_dependency_resolution
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Conda dependency resolution for Galaxy will\ncopy dependencies\
        \ instead of attempting to\nlink them."
      synonyms:
      - --conda_copy_dependencies
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_install\nConda dependency resolution for Galaxy\
        \ will\nattempt to install requested but missing\npackages."
      synonyms:
      - --conda_auto_install
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_conda_auto_init\nConda dependency resolution for Galaxy\
        \ will\nauto install conda itself using miniconda if\nnot availabe on conda_prefix."
      synonyms:
      - --conda_auto_init
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name of profile (created with the\nprofile_create command) to\
        \ use with this\ncommand."
      synonyms:
      - --profile
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Use postgres database type.
      synonyms:
      - --postgres
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
        \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are\
        \ available options. Use\npostgres to use an existing postgres server\nyou\
        \ user can access without a password via\nthe psql command. Use postgres_docker\
        \ to\nhave Planemo manage a docker container\nrunning postgres. Data with\
        \ postgres_docker\nis not yet persisted past when you restart\nthe docker\
        \ container launched by Planemo so\nbe careful with this option."
      synonyms:
      - --database_type
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Name or or path to postgres client binary\n(psql)."
      synonyms:
      - --postgres_psql_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Postgres username for managed development
      synonyms:
      - --postgres_database_user
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Database connection string to use for
      synonyms:
      - --database_connection
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: Location of shed tools directory for Galaxy.
      synonyms:
      - --shed_tool_path
      args: !SimpleFlagArg
        name: TEXT
      optional: true
    - !Flag
      description: "/ --no_galaxy_single_user\nBy default Planemo will configure Galaxy\
        \ to\nrun in single-user mode where there is just\none user and this user\
        \ is automatically\nlogged it. Use --no_galaxy_single_user to\nprevent Galaxy\
        \ from running this way."
      synonyms:
      - --galaxy_single_user
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Serve Galaxy process as a daemon.
      synonyms:
      - --daemon
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Location of pid file is executed with
      synonyms:
      - --pid_file
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --daemon.
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "When installing shed repositories for\nworkflows, ignore dependency\
        \ issues. These\nlikely indicate a problem but in some cases\nmay not prevent\
        \ a workflow from successfully\nexecuting."
      synonyms:
      - --ignore_dependency_problems
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "/ --no_shed_install\nBy default Planemo will attempt to install\n\
        repositories needed for workflow testing.\nThis may not be appropriate for\
        \ production\nservers and so this can disabled by calling\nplanemo with --no_shed_install."
      synonyms:
      - --shed_install
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: Show this message and exit.
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "Usage: planemo tool_factory [OPTIONS]\n\n  (Experimental) Launch Galaxy\
      \ with Tool Factory 2.\n\n  For more information about the Galaxy Tool Factory\
      \ see the publication\n  Creating reusable tools from scripts: the Galaxy Tool\
      \ Factory by Lazarus\n  et. al. (10.1093/bioinformatics/bts573). Available at\n\
      \  http://www.ncbi.nlm.nih.gov/pubmed/23024011.\n\nOptions:\n  --galaxy_root\
      \ DIRECTORY         Root of development galaxy directory to\n              \
      \                    execute command with.\n  --galaxy_python_version [2|2.7|3|3.5|3.6|3.7|3.8]\n\
      \                                  Python version to start Galaxy under\n  --extra_tools\
      \ PATH              Extra tool sources to include in Galaxy's\n            \
      \                      tool panel (file or directory). These will\n        \
      \                          not be linted/tested/etc... but they will be\n  \
      \                                available to workflows and for interactive\n\
      \                                  use.\n  --install_galaxy                Download\
      \ and configure a disposable copy of\n                                  Galaxy\
      \ from github.\n  --galaxy_branch TEXT            Branch of Galaxy to target\
      \ (defaults to\n                                  master) if a Galaxy root isn't\
      \ specified.\n  --galaxy_source TEXT            Git source of Galaxy to target\
      \ (defaults to\n                                  the official galaxyproject\
      \ github source if\n                                  a Galaxy root isn't specified.\n\
      \  --skip_venv                     Do not create or source a virtualenv\n  \
      \                                environment for Galaxy, this should be used\n\
      \                                  or instance to preserve an externally\n \
      \                                 configured virtual environment or conda\n\
      \                                  environment.\n  --no_cache_galaxy       \
      \        Skip caching of Galaxy source and\n                               \
      \   dependencies obtained with --install_galaxy.\n                         \
      \         Not caching this results in faster downloads\n                   \
      \               (no git) - so is better on throw away\n                    \
      \              instances such with TravisCI.\n  --no_cleanup               \
      \     Do not cleanup temp files created for and by\n                       \
      \           Galaxy.\n  --galaxy_email TEXT             E-mail address to use\
      \ when launching single-\n                                  user Galaxy server.\n\
      \  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n\
      \  --docker_cmd TEXT               Command used to launch docker (defaults to\n\
      \                                  docker).\n  --docker_sudo / --no_docker_sudo\n\
      \                                  Flag to use sudo when running docker.\n \
      \ --docker_host TEXT              Docker host to target when executing docker\n\
      \                                  commands (defaults to localhost).\n  --docker_sudo_cmd\
      \ TEXT          sudo command to use when --docker_sudo is\n                \
      \                  enabled (defaults to sudo).\n  --mulled_containers, --biocontainers\n\
      \                                  Test tools against mulled containers (forces\n\
      \                                  --docker).\n  --job_config_file FILE    \
      \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir\
      \ DIRECTORY\n                                  Tool dependency dir for Galaxy\
      \ to target.\n  --port INTEGER                  Port to serve Galaxy on (default\
      \ is 9090).\n  --host TEXT                     Host to bind Galaxy to. Default\
      \ is 127.0.0.1\n                                  that is restricted to localhost\
      \ connections\n                                  for security reasons set to\
      \ 0.0.0.0 to bind\n                                  Galaxy to all ports including\
      \ potentially\n                                  publicly accessible ones.\n\
      \  --engine [galaxy|docker_galaxy|external_galaxy]\n                       \
      \           Select an engine to serve artifacts such as\n                  \
      \                tools and workflows. Defaults to a local\n                \
      \                  Galaxy, but running Galaxy within a Docker\n            \
      \                      container.\n  --non_strict_cwl                Disable\
      \ strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker image\
      \ identifier for docker-galaxy-\n                                  flavor used\
      \ if engine type is specified as\n                                  ``docker-galaxy``.\
      \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\
      \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n\
      \  --test_data DIRECTORY           test-data directory to for specified\n  \
      \                                tool(s).\n  --tool_data_table PATH        \
      \  tool_data_table_conf.xml file to for\n                                  specified\
      \ tool(s).\n  --dependency_resolvers_config_file FILE\n                    \
      \              Dependency resolver configuration for Galaxy\n              \
      \                    to target.\n  --brew_dependency_resolution    Configure\
      \ Galaxy to use plain brew\n                                  dependency resolution.\n\
      \  --shed_dependency_resolution    Configure Galaxy to use brewed Tool Shed\n\
      \                                  dependency resolution.\n  --no_dependency_resolution\
      \      Configure Galaxy with no dependency\n                               \
      \   resolvers.\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
      \ dependency\n                                  commands.\n  --conda_exec FILE\
      \               Location of conda executable.\n  --conda_debug             \
      \      Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
      \ TEXT\n                                  Ensure conda is configured with specified\n\
      \                                  comma separated list of channels.\n  --conda_use_local\
      \               Use locally built packages while building\n                \
      \                  Conda environments.\n  --conda_dependency_resolution   Configure\
      \ Galaxy to use only conda for\n                                  dependency\
      \ resolution.\n  --conda_copy_dependencies       Conda dependency resolution\
      \ for Galaxy will\n                                  copy dependencies instead\
      \ of attempting to\n                                  link them.\n  --conda_auto_install\
      \ / --no_conda_auto_install\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  attempt to install\
      \ requested but missing\n                                  packages.\n  --conda_auto_init\
      \ / --no_conda_auto_init\n                                  Conda dependency\
      \ resolution for Galaxy will\n                                  auto install\
      \ conda itself using miniconda if\n                                  not availabe\
      \ on conda_prefix.\n  --profile TEXT                  Name of profile (created\
      \ with the\n                                  profile_create command) to use\
      \ with this\n                                  command.\n  --postgres      \
      \                Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
      \                                  Type of database to use for profile -\n \
      \                                 'auto', 'sqlite', 'postgres', and\n      \
      \                            'postgres_docker' are available options. Use\n\
      \                                  postgres to use an existing postgres server\n\
      \                                  you user can access without a password via\n\
      \                                  the psql command. Use postgres_docker to\n\
      \                                  have Planemo manage a docker container\n\
      \                                  running postgres. Data with postgres_docker\n\
      \                                  is not yet persisted past when you restart\n\
      \                                  the docker container launched by Planemo\
      \ so\n                                  be careful with this option.\n  --postgres_psql_path\
      \ TEXT       Name or or path to postgres client binary\n                   \
      \               (psql).\n  --postgres_database_user TEXT   Postgres username\
      \ for managed development\n                                  databases.\n  --postgres_database_host\
      \ TEXT   Postgres host name for managed development\n                      \
      \            databases.\n  --postgres_database_port TEXT   Postgres port for\
      \ managed development\n                                  databases.\n  --file_path\
      \ DIRECTORY           Location for files created by Galaxy (e.g.\n         \
      \                         database/files).\n  --database_connection TEXT   \
      \   Database connection string to use for\n                                \
      \  Galaxy.\n  --shed_tool_conf TEXT           Location of shed tools conf file\
      \ for Galaxy.\n  --shed_tool_path TEXT           Location of shed tools directory\
      \ for Galaxy.\n  --galaxy_single_user / --no_galaxy_single_user\n          \
      \                        By default Planemo will configure Galaxy to\n     \
      \                             run in single-user mode where there is just\n\
      \                                  one user and this user is automatically\n\
      \                                  logged it. Use --no_galaxy_single_user to\n\
      \                                  prevent Galaxy from running this way.\n \
      \ --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
      \ FILE                 Location of pid file is executed with\n             \
      \                     --daemon.\n  --ignore_dependency_problems    When installing\
      \ shed repositories for\n                                  workflows, ignore\
      \ dependency issues. These\n                                  likely indicate\
      \ a problem but in some cases\n                                  may not prevent\
      \ a workflow from successfully\n                                  executing.\n\
      \  --shed_install / --no_shed_install\n                                  By\
      \ default Planemo will attempt to install\n                                \
      \  repositories needed for workflow testing.\n                             \
      \     This may not be appropriate for production\n                         \
      \         servers and so this can disabled by calling\n                    \
      \              planemo with --no_shed_install.\n  --help                   \
      \       Show this message and exit.\n"
    generated_using: *id002
  - !Command
    command:
    - planemo
    - a...
    positional:
    - !Positional
      description: ''
      position: 0
      name: planemo
      optional: false
    - !Positional
      description: ''
      position: 1
      name: COMMAND
      optional: false
    - !Positional
      description: ''
      position: 2
      name: ARGS
      optional: true
    named: []
    parent: *id001
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "/usr/local/lib/python2.7/site-packages/cwltool/__init__.py:17: CWLToolDeprecationWarning:\
      \ \nDEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020.\n\
      Please upgrade your Python as the Python 2.7 version of cwltool won't be\nmaintained\
      \ after that date.\n\n  \"\"\",  category=CWLToolDeprecationWarning)\nProblem\
      \ loading command a..., exception No module named cmd_a...\nUsage: planemo [OPTIONS]\
      \ COMMAND [ARGS]...\nTry \"planemo --help\" for help.\n\nError: No such command\
      \ \"a...\".\n"
    generated_using: *id002
  usage: []
  help_flag: !Flag
    description: Show this message and exit.
    synonyms:
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag: !Flag
    description: Show the version and exit.
    synonyms:
    - --version
    args: !EmptyFlagArg {}
    optional: true
  help_text: "Usage: planemo [OPTIONS] COMMAND [ARGS]...\n\n  A command-line toolkit\
    \ for building tools and workflows for Galaxy.\n\n  Check out the full documentation\
    \ for Planemo online\n  http://planemo.readthedocs.org or open with ``planemo\
    \ docs``.\n\n  All the individual planemo commands support the ``--help`` option,\
    \ for\n  example use ``planemo lint --help`` for more details on checking tools.\n\
    \nOptions:\n  --version         Show the version and exit.\n  -v, --verbose  \
    \   Enables verbose mode.\n  --config TEXT     Planemo configuration YAML file.\n\
    \  --directory TEXT  Workspace for planemo.\n  --help            Show this message\
    \ and exit.\n\nCommands:\n  brew                        Install tool requirements\
    \ using brew.\n  brew_env                    List commands to inject brew dependencies.\n\
    \  brew_init                   Download linuxbrew install & run it in ruby.\n\
    \  ci_find_repos               Find all shed repositories in one or more...\n\
    \  ci_find_tools               Find all tools in one or more directories.\n  clone\
    \                       Short-cut to quickly clone, fork, and branch\n       \
    \                       a...\n  conda_build                 Perform conda build\
    \ with Planemo's conda.\n  conda_env                   Activate a conda environment\
    \ for tool.\n  conda_init                  Download and install conda.\n  conda_install\
    \               Install conda packages for tool requirements.\n  conda_lint  \
    \                Check conda recipe for common issues.\n  conda_search       \
    \         Perform conda search with Planemo's conda.\n  config_init          \
    \       Initialise global configuration for Planemo.\n  create_gist          \
    \       Upload file to GitHub as a sharable gist.\n  cwl_script              \
    \    Compile simple CWL workflows to shell script.\n  database_create        \
    \     Create a *development* database.\n  database_delete             Delete a\
    \ *development* database.\n  database_list               List databases in configured\
    \ database source.\n  dependency_script           Compile tool_dependencies.xml\
    \ to bash script.\n  docker_build                Build (and optionally cache)\
    \ Docker images.\n  docker_shell                Launch shell in Docker container\
    \ for a tool.\n  docs                        Open Planemo documentation in web\
    \ browser.\n  lint                        Check for common errors and best practices.\n\
    \  list_repos                  Find all shed repositories in one or more...\n\
    \  merge_test_reports          Merge tool_test_output.json files from...\n  mull\
    \                        Build containers for specified tools.\n  mulled_init\
    \                 Download and install involucro for mull...\n  normalize    \
    \               Generate normalized tool XML from input.\n  open             \
    \           Open latest Planemo test results in a web...\n  profile_create   \
    \           Create a profile.\n  profile_delete              Delete a profile.\n\
    \  profile_list                List configured profile names.\n  project_init\
    \                (Experimental) Initialize a new tool project.\n  pull_request\
    \                Short-cut to quickly create a pull request\n                \
    \              for...\n  run                         Planemo command for running\
    \ tools and jobs.\n  serve                       Launch Galaxy instance with specified\
    \ tools.\n  share_test                  Publish JSON test results as sharable\
    \ Gist.\n  shed_build                  Create a Galaxy tool tarball.\n  shed_create\
    \                 Create a repository in a Galaxy Tool Shed.\n  shed_diff    \
    \               diff between local repository and Tool Shed.\n  shed_download\
    \               Download tool from Tool Shed into directory.\n  shed_init    \
    \               Bootstrap new Tool Shed .shed.yml file.\n  shed_lint         \
    \          Check Tool Shed repository for common issues.\n  shed_serve       \
    \           Launch Galaxy with Tool Shed dependencies.\n  shed_test          \
    \         Run tests of published shed artifacts.\n  shed_update              \
    \   Update Tool Shed repository.\n  shed_upload                 Low-level command\
    \ to upload tarballs.\n  syntax                      Open tool config syntax page\
    \ in web browser.\n  test                        Run specified tool's tests within\
    \ Galaxy.\n  test_reports                Generate human readable tool test reports.\n\
    \  tool_factory                (Experimental) Launch Galaxy with Tool\n      \
    \                        Factory...\n  tool_init                   Generate tool\
    \ outline from given arguments.\n  training_fill_data_library  Build training\
    \ template from workflow.\n  training_generate_from_wf   Create tutorial skeleton\
    \ from workflow.\n  training_init               Build training template from workflow.\n\
    \  travis_before_install       Internal command for GitHub/TravisCI testing.\n\
    \  travis_init                 Create files to use GitHub/TravisCI testing.\n\
    \  virtualenv                  Create a virtualenv.\n  workflow_convert      \
    \      Convert Format 2 workflows to native Galaxy...\n  workflow_edit       \
    \        Open a synchronized Galaxy workflow editor.\n"
  generated_using: *id002
subcommands: []
usage: []
help_flag: !Flag
  description: Show this message and exit.
  synonyms:
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "Usage: planemo shed_test [OPTIONS] PROJECT\n\n  Run tests of published\
  \ shed artifacts.\n\n  This command will start a Galaxy instance configured to target\
  \ the\n  specified shed, find published artifacts (tools and dependencies)\n  corresponding\
  \ to command-line arguments and ``.shed.yml`` file(s), install\n  these artifacts,\
  \ and run the tool tests for these commands.\n\n  This command requires the target\
  \ to be version 15.07 or newer.\n\nOptions:\n  -r, --recursive                 Recursively\
  \ perform command for nested\n                                  repository directories.\n\
  \  --fail_fast                     If multiple repositories are specified and\n\
  \                                  an error occurs stop immediately instead of\n\
  \                                  processing remaining repositories.\n  --owner\
  \ TEXT                    Tool Shed repository owner (username).\n  --name TEXT\
  \                     Tool Shed repository name (defaults to the\n             \
  \                     inferred tool directory name).\n  --shed_email TEXT      \
  \         E-mail for Tool Shed auth (required unless\n                         \
  \         shed_key is specified).\n  --shed_key TEXT                 API key for\
  \ Tool Shed access. An API key is\n                                  required unless\
  \ e-mail and password is\n                                  specified. This key\
  \ can be specified with\n                                  either --shed_key or\
  \ --shed_key_from_env.\n  --shed_key_from_env TEXT        Environment variable to\
  \ read API key for\n                                  Tool Shed access from.\n \
  \ --shed_password TEXT            Password for Tool Shed auth (required unless\n\
  \                                  shed_key is specified).\n  -t, --shed_target\
  \ TEXT          Tool Shed to target (this can be 'toolshed',\n                 \
  \                 'testtoolshed', 'local' (alias for\n                         \
  \         http://localhost:9009/), an arbitrary url or\n                       \
  \           mappings defined ~/.planemo.yml.\n  --galaxy_root DIRECTORY        \
  \ Root of development galaxy directory to\n                                  execute\
  \ command with.\n  --galaxy_python_version [2|2.7|3|3.5|3.6|3.7|3.8]\n         \
  \                         Python version to start Galaxy under\n  --extra_tools\
  \ PATH              Extra tool sources to include in Galaxy's\n                \
  \                  tool panel (file or directory). These will\n                \
  \                  not be linted/tested/etc... but they will be\n              \
  \                    available to workflows and for interactive\n              \
  \                    use.\n  --install_galaxy                Download and configure\
  \ a disposable copy of\n                                  Galaxy from github.\n\
  \  --galaxy_branch TEXT            Branch of Galaxy to target (defaults to\n   \
  \                               master) if a Galaxy root isn't specified.\n  --galaxy_source\
  \ TEXT            Git source of Galaxy to target (defaults to\n                \
  \                  the official galaxyproject github source if\n               \
  \                   a Galaxy root isn't specified.\n  --skip_venv              \
  \       Do not create or source a virtualenv\n                                 \
  \ environment for Galaxy, this should be used\n                                \
  \  or instance to preserve an externally\n                                  configured\
  \ virtual environment or conda\n                                  environment.\n\
  \  --no_cache_galaxy               Skip caching of Galaxy source and\n         \
  \                         dependencies obtained with --install_galaxy.\n       \
  \                           Not caching this results in faster downloads\n     \
  \                             (no git) - so is better on throw away\n          \
  \                        instances such with TravisCI.\n  --no_cleanup         \
  \           Do not cleanup temp files created for and by\n                     \
  \             Galaxy.\n  --galaxy_email TEXT             E-mail address to use when\
  \ launching single-\n                                  user Galaxy server.\n  --docker\
  \ / --no_docker          Run Galaxy tools in Docker if enabled.\n  --docker_cmd\
  \ TEXT               Command used to launch docker (defaults to\n              \
  \                    docker).\n  --docker_sudo / --no_docker_sudo\n            \
  \                      Flag to use sudo when running docker.\n  --docker_host TEXT\
  \              Docker host to target when executing docker\n                   \
  \               commands (defaults to localhost).\n  --docker_sudo_cmd TEXT    \
  \      sudo command to use when --docker_sudo is\n                             \
  \     enabled (defaults to sudo).\n  --mulled_containers, --biocontainers\n    \
  \                              Test tools against mulled containers (forces\n  \
  \                                --docker).\n  --job_config_file FILE          Job\
  \ configuration file for Galaxy to target.\n  --tool_dependency_dir DIRECTORY\n\
  \                                  Tool dependency dir for Galaxy to target.\n \
  \ --update_test_data              Update test-data directory with job outputs\n\
  \                                  (normally written to directory\n            \
  \                      --job_output_files if specified.)\n  --paste_test_data_paths\
  \ / --no_paste_test_data_paths\n                                  By default Planemo\
  \ will use or not use\n                                  Galaxy's path paste option\
  \ to load test data\n                                  into a history based on the\
  \ engine type it\n                                  is targeting. This can override\
  \ the logic to\n                                  explicitly enable or disable path\
  \ pasting.\n  --test_output PATH              Output test report (HTML - for humans)\n\
  \                                  defaults to tool_test_output.html.\n  --test_output_text\
  \ PATH         Output test report (Basic text - for display\n                  \
  \                in CI)\n  --test_output_markdown PATH     Output test report (Markdown\
  \ style - for\n                                  humans & computers)\n  --test_output_xunit\
  \ PATH        Output test report (xunit style - for CI\n                       \
  \           systems\n  --test_output_junit PATH        Output test report (jUnit\
  \ style - for CI\n                                  systems\n  --test_output_json\
  \ PATH         Output test report (planemo json) defaults\n                    \
  \              to tool_test_output.json.\n  --job_output_files DIRECTORY    Write\
  \ job outputs to specified directory.\n  --summary [none|minimal|compact]\n    \
  \                              Summary style printed to planemo's standard\n   \
  \                               output (see output reports for more complete\n \
  \                                 summary). Set to 'none' to disable\n         \
  \                         completely.\n  --skip_dependencies             Do not\
  \ install shed dependencies as part of\n                                  repository\
  \ installation.\n  --help                          Show this message and exit.\n"
generated_using: *id002
