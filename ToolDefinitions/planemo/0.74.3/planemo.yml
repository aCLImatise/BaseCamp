&id001 !Command
command:
- planemo
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -v
  - --verbose
  description: Enables verbose mode.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --config
  description: Planemo configuration YAML file.
  args: !SimpleFlagArg
    name: TEXT
- !Flag
  optional: true
  synonyms:
  - --directory
  description: Workspace for planemo.
  args: !SimpleFlagArg
    name: TEXT
parent:
subcommands:
- !Command
  command:
  - planemo
  - workflow_edit
  positional:
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --galaxy_email TEXT             E-mail address to use when launching
      single-
  - !Positional
    optional: false
    position: 0
    name: resolvers.
    description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
  - !Positional
    optional: false
    position: 1
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --shed_tool_conf TEXT           Location of shed tools conf file
      for Galaxy.
  - !Positional
    optional: false
    position: 0
    name: executing.
    description: --skip_client_build             Do not build Galaxy client when serving
  - !Positional
    optional: false
    position: 1
    name: Galaxy.
    description: --shed_install / --no_shed_install
  named:
  - !Flag
    optional: true
    synonyms:
    - --galaxy_root
    description: "Root of development galaxy directory to\nexecute command with."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --galaxy_python_version
    description: "[3|3.6|3.7|3.8|3.9]\nPython version to start Galaxy under"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --extra_tools
    description: "Extra tool sources to include in Galaxy's\ntool panel (file or directory).\
      \ These will\nnot be linted/tested/etc... but they will be\navailable to workflows\
      \ and for interactive\nuse."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --install_galaxy
    description: "Download and configure a disposable copy of\nGalaxy from github."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --galaxy_branch
    description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
      \ isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_source
    description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
      \ github source if\na Galaxy root isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --skip_venv
    description: "Do not create or source a virtualenv\nenvironment for Galaxy, this\
      \ should be used\nto preserve an externally configured virtual\nenvironment\
      \ or conda environment."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cache_galaxy
    description: "Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\n\
      Not caching this results in faster downloads\n(no git) - so is better on throw\
      \ away\ninstances such with TravisCI."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cleanup
    description: Do not cleanup temp files created for and by
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker
    - --no_docker
    description: Run Galaxy tools in Docker if enabled.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_cmd
    description: "Command used to launch docker (defaults to\ndocker)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_containers
    - --biocontainers
    description: "Test tools against mulled containers (forces\n--docker)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --job_config_file
    description: Job configuration file for Galaxy to target.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --tool_dependency_dir
    description: Tool dependency dir for Galaxy to target.
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --port
    description: Port to serve Galaxy on (default is 9090).
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --host
    description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
      \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\nGalaxy\
      \ to all ports including potentially\npublicly accessible ones."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --engine
    description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
      \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but running\
      \ Galaxy within a Docker\ncontainer."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --non_strict_cwl
    description: Disable strict validation of CWL.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_galaxy_image
    description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
      \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_extra_volume
    description: Extra path to mount if --engine docker.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_data
    description: "test-data directory to for specified\ntool(s)."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --tool_data_table
    description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --dependency_resolvers_config_file
    description: "Dependency resolver configuration for Galaxy\nto target."
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --brew_dependency_resolution
    description: "Configure Galaxy to use plain brew\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --shed_dependency_resolution
    description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_dependency_resolution
    description: Configure Galaxy with no dependency
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_dependency_resolution
    description: "Configure Galaxy to use only conda for\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_copy_dependencies
    description: "Conda dependency resolution for Galaxy will\ncopy dependencies instead\
      \ of attempting to\nlink them."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_install
    - --no_conda_auto_install
    description: "Conda dependency resolution for Galaxy will\nattempt to install\
      \ requested but missing\npackages."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_init
    - --no_conda_auto_init
    description: "Conda dependency resolution for Galaxy will\nauto install conda\
      \ itself using miniconda if\nnot availabe on conda_prefix."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the\nprofile_create command) to use\
      \ with this\ncommand."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --database_connection
    description: Database connection string to use for
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_tool_path
    description: Location of shed tools directory for Galaxy.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_single_user
    - --no_galaxy_single_user
    description: "By default Planemo will configure Galaxy to\nrun in single-user\
      \ mode where there is just\none user and this user is automatically\nlogged\
      \ it. Use --no_galaxy_single_user to\nprevent Galaxy from running this way."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --daemon
    description: Serve Galaxy process as a daemon.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --pid_file
    description: Location of pid file is executed with
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --daemon.
    - --ignore_dependency_problems
    description: When installing shed repositories for
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo workflow_edit [OPTIONS] WORKFLOW_PATH_OR_ID\n\n  Open\
    \ a synchronized Galaxy workflow editor.\n\nOptions:\n  --galaxy_root DIRECTORY\
    \         Root of development galaxy directory to\n                          \
    \        execute command with.\n\n  --galaxy_python_version [3|3.6|3.7|3.8|3.9]\n\
    \                                  Python version to start Galaxy under\n  --extra_tools\
    \ PATH              Extra tool sources to include in Galaxy's\n              \
    \                    tool panel (file or directory). These will\n            \
    \                      not be linted/tested/etc... but they will be\n        \
    \                          available to workflows and for interactive\n      \
    \                            use.\n\n  --install_galaxy                Download\
    \ and configure a disposable copy of\n                                  Galaxy\
    \ from github.\n\n  --galaxy_branch TEXT            Branch of Galaxy to target\
    \ (defaults to\n                                  master) if a Galaxy root isn't\
    \ specified.\n\n  --galaxy_source TEXT            Git source of Galaxy to target\
    \ (defaults to\n                                  the official galaxyproject github\
    \ source if\n                                  a Galaxy root isn't specified.\n\
    \n  --skip_venv                     Do not create or source a virtualenv\n   \
    \                               environment for Galaxy, this should be used\n\
    \                                  to preserve an externally configured virtual\n\
    \                                  environment or conda environment.\n\n  --no_cache_galaxy\
    \               Skip caching of Galaxy source and\n                          \
    \        dependencies obtained with --install_galaxy.\n                      \
    \            Not caching this results in faster downloads\n                  \
    \                (no git) - so is better on throw away\n                     \
    \             instances such with TravisCI.\n\n  --no_cleanup                \
    \    Do not cleanup temp files created for and by\n                          \
    \        Galaxy.\n\n  --galaxy_email TEXT             E-mail address to use when\
    \ launching single-\n                                  user Galaxy server.\n\n\
    \  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n  --docker_cmd\
    \ TEXT               Command used to launch docker (defaults to\n            \
    \                      docker).\n\n  --docker_sudo / --no_docker_sudo\n      \
    \                            Flag to use sudo when running docker.\n  --docker_host\
    \ TEXT              Docker host to target when executing docker\n            \
    \                      commands (defaults to localhost).\n\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --mulled_containers, --biocontainers\n\
    \                                  Test tools against mulled containers (forces\n\
    \                                  --docker).\n\n  --job_config_file FILE    \
    \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir DIRECTORY\n\
    \                                  Tool dependency dir for Galaxy to target.\n\
    \  --port INTEGER                  Port to serve Galaxy on (default is 9090).\n\
    \  --host TEXT                     Host to bind Galaxy to. Default is 127.0.0.1\n\
    \                                  that is restricted to localhost connections\n\
    \                                  for security reasons set to 0.0.0.0 to bind\n\
    \                                  Galaxy to all ports including potentially\n\
    \                                  publicly accessible ones.\n\n  --engine [galaxy|docker_galaxy|external_galaxy]\n\
    \                                  Select an engine to serve artifacts such as\n\
    \                                  tools and workflows. Defaults to a local\n\
    \                                  Galaxy, but running Galaxy within a Docker\n\
    \                                  container.\n\n  --non_strict_cwl          \
    \      Disable strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker\
    \ image identifier for docker-galaxy-\n                                  flavor\
    \ used if engine type is specified as\n                                  ``docker-galaxy``.\
    \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\n\
    \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n \
    \ --test_data DIRECTORY           test-data directory to for specified\n     \
    \                             tool(s).\n\n  --tool_data_table PATH          tool_data_table_conf.xml\
    \ file to for\n                                  specified tool(s).\n\n  --dependency_resolvers_config_file\
    \ FILE\n                                  Dependency resolver configuration for\
    \ Galaxy\n                                  to target.\n\n  --brew_dependency_resolution\
    \    Configure Galaxy to use plain brew\n                                  dependency\
    \ resolution.\n\n  --shed_dependency_resolution    Configure Galaxy to use brewed\
    \ Tool Shed\n                                  dependency resolution.\n\n  --no_dependency_resolution\
    \      Configure Galaxy with no dependency\n                                 \
    \ resolvers.\n\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
    \ dependency\n                                  commands.\n\n  --conda_exec FILE\
    \               Location of conda executable.\n  --conda_debug               \
    \    Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
    \ TEXT\n                                  Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --conda_dependency_resolution   Configure\
    \ Galaxy to use only conda for\n                                  dependency resolution.\n\
    \n  --conda_copy_dependencies       Conda dependency resolution for Galaxy will\n\
    \                                  copy dependencies instead of attempting to\n\
    \                                  link them.\n\n  --conda_auto_install / --no_conda_auto_install\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  attempt to install requested but missing\n\
    \                                  packages.\n\n  --conda_auto_init / --no_conda_auto_init\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  auto install conda itself using miniconda if\n\
    \                                  not availabe on conda_prefix.\n\n  --profile\
    \ TEXT                  Name of profile (created with the\n                  \
    \                profile_create command) to use with this\n                  \
    \                command.\n\n  --postgres                      Use postgres database\
    \ type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n          \
    \                        Type of database to use for profile -\n             \
    \                     'auto', 'sqlite', 'postgres', and\n                    \
    \              'postgres_docker' are available options. Use\n                \
    \                  postgres to use an existing postgres server\n             \
    \                     you user can access without a password via\n           \
    \                       the psql command. Use postgres_docker to\n           \
    \                       have Planemo manage a docker container\n             \
    \                     running postgres. Data with postgres_docker\n          \
    \                        is not yet persisted past when you restart\n        \
    \                          the docker container launched by Planemo so\n     \
    \                             be careful with this option.\n\n  --postgres_psql_path\
    \ TEXT       Name or or path to postgres client binary\n                     \
    \             (psql).\n\n  --postgres_database_user TEXT   Postgres username for\
    \ managed development\n                                  databases.\n\n  --postgres_database_host\
    \ TEXT   Postgres host name for managed development\n                        \
    \          databases.\n\n  --postgres_database_port TEXT   Postgres port for managed\
    \ development\n                                  databases.\n\n  --file_path DIRECTORY\
    \           Location for files created by Galaxy (e.g.\n                     \
    \             database/files).\n\n  --database_connection TEXT      Database connection\
    \ string to use for\n                                  Galaxy.\n\n  --shed_tool_conf\
    \ TEXT           Location of shed tools conf file for Galaxy.\n  --shed_tool_path\
    \ TEXT           Location of shed tools directory for Galaxy.\n  --galaxy_single_user\
    \ / --no_galaxy_single_user\n                                  By default Planemo\
    \ will configure Galaxy to\n                                  run in single-user\
    \ mode where there is just\n                                  one user and this\
    \ user is automatically\n                                  logged it. Use --no_galaxy_single_user\
    \ to\n                                  prevent Galaxy from running this way.\n\
    \n  --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
    \ FILE                 Location of pid file is executed with\n               \
    \                   --daemon.\n\n  --ignore_dependency_problems    When installing\
    \ shed repositories for\n                                  workflows, ignore dependency\
    \ issues. These\n                                  likely indicate a problem but\
    \ in some cases\n                                  may not prevent a workflow\
    \ from successfully\n                                  executing.\n\n  --skip_client_build\
    \             Do not build Galaxy client when serving\n                      \
    \            Galaxy.\n\n  --shed_install / --no_shed_install\n               \
    \                   By default Planemo will attempt to install\n             \
    \                     repositories needed for workflow testing.\n            \
    \                      This may not be appropriate for production\n          \
    \                        servers and so this can disabled by calling\n       \
    \                           planemo with --no_shed_install.\n\n  --help      \
    \                    Show this message and exit.\n"
  generated_using: &id002
  - --help
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - shed_lint
  positional:
  - !Positional
    optional: false
    position: 0
    name: process.
    description: --ensure_metadata               Ensure .shed.yml files contain enough
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: "Recursively perform command for nested\nrepository directories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --fail_fast
    description: "If multiple repositories are specified and\nan error occurs stop\
      \ immediately instead of\nprocessing remaining repositories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --tools
    description: "Lint tools discovered in the process of\nlinting repositories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --xsd
    - --no_xsd
    description: Include tool XSD validation in linting
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --urls
    description: Check validity of URLs in XML files
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo shed_lint [OPTIONS] PROJECT\n\n  Check Tool Shed repository\
    \ for common issues.\n\n  With the ``--tools`` flag, this command lints actual\
    \ Galaxy tools in\n  addition to tool shed artifacts.\n\n  With the ``--urls``\
    \ flag, this command searches for\n  ``<package>$URL</package>`` and download\
    \ actions which specify URLs. Each\n  of those are accessed individually. By default,\
    \ this tool requests the\n  first hundred or so bytes of each listed URL and validates\
    \ that a 200 OK\n  was received. In tool XML files, the ``--urls`` option checks\
    \ through the\n  help text for mentioned URLs and checks those.\n\nOptions:\n\
    \  -r, --recursive                 Recursively perform command for nested\n  \
    \                                repository directories.\n\n  --fail_fast    \
    \                 If multiple repositories are specified and\n               \
    \                   an error occurs stop immediately instead of\n            \
    \                      processing remaining repositories.\n\n  --report_level\
    \ [all|warn|error]\n  --fail_level [warn|error]\n  --tools                   \
    \      Lint tools discovered in the process of\n                             \
    \     linting repositories.\n\n  --xsd / --no_xsd                Include tool\
    \ XSD validation in linting\n                                  process.\n\n  --ensure_metadata\
    \               Ensure .shed.yml files contain enough\n                      \
    \            metadata for each repository to allow\n                         \
    \         automated creation and/or updates.\n\n  --urls                     \
    \     Check validity of URLs in XML files\n  --help                          Show\
    \ this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - ci_find_repos
  positional:
  - !Positional
    optional: false
    position: 0
    name: PROJECT
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --exclude
    description: Paths to exclude.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --exclude_from
    description: File of paths to exclude.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --changed_in_commit_range
    description: Exclude paths unchanged in git commit range.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --chunk_count
    description: "Split output into chunks of this many item\nand print --chunk such\
      \ group."
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --chunk
    description: "When output is split into --chunk_count\ngroups, output the group\
      \ 0-indexedby this\noption."
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --output
    description: File to output to, or - for standard output.
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo ci_find_repos [OPTIONS] PROJECT\n\n  Find all shed repositories\
    \ in one or more directories.\n\n  Currently, a repository is considered any directory\
    \ with a .shed.yml or\n  .dockstore.yml file.\n\nOptions:\n  --exclude PATH  \
    \                Paths to exclude.\n  --exclude_from FILE             File of\
    \ paths to exclude.\n  --changed_in_commit_range TEXT  Exclude paths unchanged\
    \ in git commit range.\n  --chunk_count INTEGER           Split output into chunks\
    \ of this many item\n                                  and print --chunk such\
    \ group.\n\n  --chunk INTEGER                 When output is split into --chunk_count\n\
    \                                  groups, output the group 0-indexedby this\n\
    \                                  option.\n\n  --output TEXT                \
    \   File to output to, or - for standard output.\n  --help                   \
    \       Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - test_reports
  positional:
  - !Positional
    optional: false
    position: 0
    name: FILE_PATH
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --test_output
    description: "Output test report (HTML - for humans)\ndefaults to tool_test_output.html."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_text
    description: "Output test report (Basic text - for display\nin CI)"
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_markdown
    description: "Output test report (Markdown style - for\nhumans & computers)"
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_xunit
    description: Output test report (xunit style - for CI
    args: !SimpleFlagArg
      name: PATH
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo test_reports [OPTIONS] FILE_PATH\n\n  Generate human\
    \ readable tool test reports.\n\n  Creates reports in various formats  (HTML,\
    \ text, markdown) from the\n  structured test output (tool_test_output.json).\n\
    \nOptions:\n  --test_output PATH              Output test report (HTML - for humans)\n\
    \                                  defaults to tool_test_output.html.\n\n  --test_output_text\
    \ PATH         Output test report (Basic text - for display\n                \
    \                  in CI)\n\n  --test_output_markdown PATH     Output test report\
    \ (Markdown style - for\n                                  humans & computers)\n\
    \n  --test_output_xunit PATH        Output test report (xunit style - for CI\n\
    \                                  systems\n\n  --test_output_junit PATH     \
    \   Output test report (jUnit style - for CI\n                               \
    \   systems\n\n  --test_output_allure DIRECTORY  Output test allure2 framework\
    \ resutls\n  --help                          Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - tool_init
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - -i
    - --id
    description: Short identifier for new tool (no whitespace)
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -f
    - --force
    description: Overwrite existing tool if present.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -t
    - --tool
    description: Output path for new tool (default is <id>.xml)
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - -n
    - --name
    description: Name for new tool (user facing)
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -d
    - --description
    description: Short description for new tool (user facing)
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -c
    - --command
    description: "Command potentially including cheetah variables\n()(e.g. 'seqtk\
      \ seq -a $input > $output')"
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --example_command
    description: "Example to command with paths to build Cheetah\ntemplate from (e.g.\
      \ 'seqtk seq -a 2.fastq >\n2.fasta'). Option cannot be used with --command,\n\
      should be used --example_input and\n--example_output."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --example_input
    description: "For use with --example_command, replace input file\n(e.g. 2.fastq\
      \ with a data input parameter)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --example_output
    description: "For use with --example_command, replace input file\n(e.g. 2.fastq\
      \ with a tool output)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --named_output
    description: "Create a named output for use with command block\nfor example specify\
      \ --named_output=output1.bam and\nthen use '-o $output1' in your command block."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --input
    description: An input description (e.g. input.fasta)
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --output
    description: "An output location (e.g. output.bam), the Galaxy\ndatatype is inferred\
      \ from the extension."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --help_text
    description: Help text (reStructuredText)
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --help_from_command
    description: Auto populate help from supplied command.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --doi
    description: "Supply a DOI (http://www.doi.org/) easing citation\nof the tool\
      \ for Galxy users (e.g. 10.1101/014043)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --cite_url
    description: Supply a URL for citation.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --test_case
    description: "For use with --example_commmand, generate a tool\ntest case from\
      \ the supplied example."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --macros
    description: Generate a macros.xml for reuse across many tools.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --version_command
    description: Command to print version (e.g. 'seqtk --version')
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --requirement
    description: "Add a tool requirement package (e.g. 'seqtk' or\n'seqtk@1.68')."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --container
    description: Add a Docker image identifier for this tool.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --cwl
    description: Build a CWL tool instead of a Galaxy tool.
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag: !Flag
    optional: true
    synonyms:
    - --version
    description: Tool XML version.
    args: !SimpleFlagArg
      name: TEXT
  help_text: "Usage: planemo tool_init [OPTIONS]\n\n  Generate tool outline from given\
    \ arguments.\n\nOptions:\n  -i, --id TEXT             Short identifier for new\
    \ tool (no whitespace)\n  -f, --force               Overwrite existing tool if\
    \ present.\n  -t, --tool FILE           Output path for new tool (default is <id>.xml)\n\
    \  -n, --name TEXT           Name for new tool (user facing)\n  --version TEXT\
    \            Tool XML version.\n  -d, --description TEXT    Short description\
    \ for new tool (user facing)\n  -c, --command TEXT        Command potentially\
    \ including cheetah variables\n                            ()(e.g. 'seqtk seq\
    \ -a $input > $output')\n\n  --example_command TEXT    Example to command with\
    \ paths to build Cheetah\n                            template from (e.g. 'seqtk\
    \ seq -a 2.fastq >\n                            2.fasta'). Option cannot be used\
    \ with --command,\n                            should be used --example_input\
    \ and\n                            --example_output.\n\n  --example_input TEXT\
    \      For use with --example_command, replace input file\n                  \
    \          (e.g. 2.fastq with a data input parameter).\n\n  --example_output TEXT\
    \     For use with --example_command, replace input file\n                   \
    \         (e.g. 2.fastq with a tool output).\n\n  --named_output TEXT       Create\
    \ a named output for use with command block\n                            for example\
    \ specify --named_output=output1.bam and\n                            then use\
    \ '-o $output1' in your command block.\n\n  --input TEXT              An input\
    \ description (e.g. input.fasta)\n  --output TEXT             An output location\
    \ (e.g. output.bam), the Galaxy\n                            datatype is inferred\
    \ from the extension.\n\n  --help_text TEXT          Help text (reStructuredText)\n\
    \  --help_from_command TEXT  Auto populate help from supplied command.\n  --doi\
    \ TEXT                Supply a DOI (http://www.doi.org/) easing citation\n   \
    \                         of the tool for Galxy users (e.g. 10.1101/014043).\n\
    \n  --cite_url TEXT           Supply a URL for citation.\n  --test_case      \
    \         For use with --example_commmand, generate a tool\n                 \
    \           test case from the supplied example.\n\n  --macros               \
    \   Generate a macros.xml for reuse across many tools.\n  --version_command TEXT\
    \    Command to print version (e.g. 'seqtk --version')\n  --requirement TEXT \
    \       Add a tool requirement package (e.g. 'seqtk' or\n                    \
    \        'seqtk@1.68').\n\n  --container TEXT          Add a Docker image identifier\
    \ for this tool.\n  --cwl                     Build a CWL tool instead of a Galaxy\
    \ tool.\n  --help                    Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - docker_shell
  positional:
  - !Positional
    optional: false
    position: 0
    name: TOOL_PATH
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --from_tag
    description: "Treat the tool's Docker container identifier\nas a locally cached\
      \ tag."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --shell
    description: "Shell to launch in container (defaults to\n/bin/bash)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_cmd
    description: "Command used to launch docker (defaults to\ndocker)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo docker_shell [OPTIONS] TOOL_PATH\n\n  Launch shell in\
    \ Docker container for a tool.\n\n  Will launch a shell in the Docker container\
    \ referenced by the specified\n  tool. Prints a command to do this the way Galaxy\
    \ would in job files it\n  generates - so be sure to wrap this in $(...) to launch\
    \ the subshell.\n\n      $ $(planemo docker_shell bowtie2.xml)\n      ...\n  \
    \    root@b8754062f875:/#\n\nOptions:\n  --from_tag                      Treat\
    \ the tool's Docker container identifier\n                                  as\
    \ a locally cached tag.\n\n  --shell TEXT                    Shell to launch in\
    \ container (defaults to\n                                  /bin/bash).\n\n  --docker_cmd\
    \ TEXT               Command used to launch docker (defaults to\n            \
    \                      docker).\n\n  --docker_sudo / --no_docker_sudo\n      \
    \                            Flag to use sudo when running docker.\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --docker_host TEXT         \
    \     Docker host to target when executing docker\n                          \
    \        commands (defaults to localhost).\n\n  --help                       \
    \   Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - config_init
  positional:
  - !Positional
    optional: false
    position: 0
    name: PROJECT
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --template
    - --help
    description: Show this message and exit.
    args: !SimpleFlagArg
      name: TEXT
  usage_flag:
  version_flag:
  help_text: "Usage: planemo config_init [OPTIONS] PROJECT\n\n  Initialise global\
    \ configuration for Planemo.\n\n  Helps initialize global configuration (in home\
    \ directory) for Planemo.\n\nOptions:\n  --template TEXT\n  --help           Show\
    \ this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - database_list
  positional:
  - !Positional
    optional: false
    position: 0
    name: local
    description: all   all                    trust
  named:
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo database_list [OPTIONS]\n\n  List databases in configured\
    \ database source.\n\n  Currently the only implementation is postgres which will\
    \ be managed with\n  ``psql``.\n\n  Planemo ``database_`` commands make it very\
    \ easy to create and destroy\n  databases, therefore it should not be used for\
    \ production data - and it\n  should not even be connnected to a production database\
    \ server. Planemo is\n  intended for development purposes only.\n\n  Planemo will\
    \ assume that it can manage and access postgres databases\n  without specifying\
    \ a password. This can be accomplished by configuring\n  postgres to not required\
    \ a password for the planemo user or by specifying\n  a password in a ``.pgpass``\
    \ file.\n\n  Planemo can be configured to not require a password for the planemo\
    \ user\n  in the postgres configuration file ``pg_hba.conf`` (on Ubuntu/Debian\
    \ linux\n  distros this file is in /etc/postgresql/<postgres_version>/main/\n\
    \  directory). Adding the following lines to that file will allow planemo and\n\
    \  Galaxy to access the databases without a password.\n\n      # \"local\" is\
    \ for Unix domain socket connections only\n      local   all   all           \
    \         trust\n      # IPv4 local connections:\n      host    all   all    127.0.0.1/32\
    \    trust\n      # IPv6 local connections:\n      host    all   all    ::1/128\
    \         trust\n\n  More information on the ``pg_hda.conf`` configuration file\
    \ can be found at\n  http://www.postgresql.org/docs/9.3/static/auth-pg-hba-conf.html.\n\
    \n  Information on ``.pgpass`` files can be found at at the following\n  location:\
    \ http://www.postgresql.org/docs/9.4/static/libpq-pgpass.html. In\n  Ubuntu and\
    \ Debian distros - a postgres user likely already exists and its\n  password can\
    \ be set by setting up a file ``~/.pgpass`` file with the\n  following contents.\n\
    \n      *:*:*:postgres:<postgres_password>\n\nOptions:\n  --postgres         \
    \             Use postgres database type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n\
    \                                  Type of database to use for profile -\n   \
    \                               'auto', 'sqlite', 'postgres', and\n          \
    \                        'postgres_docker' are available options. Use\n      \
    \                            postgres to use an existing postgres server\n   \
    \                               you user can access without a password via\n \
    \                                 the psql command. Use postgres_docker to\n \
    \                                 have Planemo manage a docker container\n   \
    \                               running postgres. Data with postgres_docker\n\
    \                                  is not yet persisted past when you restart\n\
    \                                  the docker container launched by Planemo so\n\
    \                                  be careful with this option.\n\n  --postgres_psql_path\
    \ TEXT       Name or or path to postgres client binary\n                     \
    \             (psql).\n\n  --postgres_database_user TEXT   Postgres username for\
    \ managed development\n                                  databases.\n\n  --postgres_database_host\
    \ TEXT   Postgres host name for managed development\n                        \
    \          databases.\n\n  --postgres_database_port TEXT   Postgres port for managed\
    \ development\n                                  databases.\n\n  --docker_cmd\
    \ TEXT               Command used to launch docker (defaults to\n            \
    \                      docker).\n\n  --docker_sudo / --no_docker_sudo\n      \
    \                            Flag to use sudo when running docker.\n  --docker_host\
    \ TEXT              Docker host to target when executing docker\n            \
    \                      commands (defaults to localhost).\n\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --help                     \
    \     Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - mull
  positional:
  - !Positional
    optional: false
    position: 0
    name: subdirectories.
    description: --mulled_conda_version TEXT     Install a specific version of Conda
      before
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: Recursively perform command for
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --mulled_namespace
    description: "Build a mulled image with the specified\nnamespace - defaults to\
      \ biocontainers.\nGalaxy currently only recognizes images with\nthe namespace\
      \ biocontainers."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_command
    description: "Mulled action to perform for targets - this\ndefaults to 'build-and-test'."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo mull [OPTIONS] TOOL_PATH\n\n  Build containers for specified\
    \ tools.\n\n  Supplied tools will be inspected for referenced requirement packages.\
    \ For\n  each combination of requirements a \"mulled\" container will be built.\n\
    \  Galaxy can automatically discover this container and subsequently use it\n\
    \  to run or test the tool.\n\n  For this to work, the tool's requirements will\
    \ need to be present in a\n  known Conda channel such as bioconda\n  (https://github.com/bioconda/bioconda-recipes).\
    \ This can be verified by\n  running ``planemo lint --conda_requirements`` on\
    \ the target tool(s).\n\nOptions:\n  -r, --recursive                 Recursively\
    \ perform command for\n                                  subdirectories.\n\n \
    \ --mulled_conda_version TEXT     Install a specific version of Conda before\n\
    \                                  running the command, by default the version\n\
    \                                  that comes with the continuumio miniconda3\n\
    \                                  image will be used under Linux and under Mac\n\
    \                                  OS X Conda will be upgraded to to work\n  \
    \                                around a bug in 4.2.\n\n  --mulled_namespace\
    \ TEXT         Build a mulled image with the specified\n                     \
    \             namespace - defaults to biocontainers.\n                       \
    \           Galaxy currently only recognizes images with\n                   \
    \               the namespace biocontainers.\n\n  --mulled_command TEXT      \
    \     Mulled action to perform for targets - this\n                          \
    \        defaults to 'build-and-test'.\n\n  --conda_channels, --conda_ensure_channels\
    \ TEXT\n                                  Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --help\
    \                          Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - for...
  positional:
  - !Positional
    optional: false
    position: 0
    name: planemo
    description: ''
  - !Positional
    optional: false
    position: 1
    name: COMMAND
    description: ''
  - !Positional
    optional: true
    position: 2
    name: ARGS
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "Problem loading command for..., exception No module named 'planemo.commands.cmd_for'\n\
    Usage: planemo [OPTIONS] COMMAND [ARGS]...\nTry 'planemo --help' for help.\n\n\
    Error: No such command 'for...'.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - training_init
  positional:
  - !Positional
    optional: false
    position: 0
    name: workflow
    description: --workflow_id TEXT              ID of the workflow on the Galaxy
      instance
  - !Positional
    optional: false
    position: 1
    name: Galaxy.
    description: --galaxy_email TEXT             E-mail address to use when launching
      single-
  - !Positional
    optional: false
    position: 0
    name: resolvers.
    description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
  - !Positional
    optional: false
    position: 1
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --shed_tool_conf TEXT           Location of shed tools conf file
      for Galaxy.
  - !Positional
    optional: false
    position: 0
    name: executing.
    description: --skip_client_build             Do not build Galaxy client when serving
  - !Positional
    optional: false
    position: 1
    name: Galaxy.
    description: --shed_install / --no_shed_install
  named:
  - !Flag
    optional: true
    synonyms:
    - --topic_name
    description: "Name (directory name) of the topic to create\nor in which a tutorial\
      \ should be created or\nupdates  [required]"
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --topic_title
    description: Title of the topic to create
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --topic_summary
    description: Summary of the topic
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --topic_target
    description: "[use|admin-dev|instructors]\nTarget audience for the topic"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --tutorial_name
    description: "Name (directory name) of the tutorial to\ncreate or to modify"
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --tutorial_title
    description: Title of the tutorial
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --hands_on
    description: Add hands-on for the new tutorial
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --slides
    description: Add slides for the new tutorial
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --workflow
    description: Workflow of the tutorial (locally)
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --galaxy_url
    description: URL of a Galaxy instance with the workflow
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_api_key
    description: API key on the Galaxy instance with the
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --zenodo_link
    description: Zenodo URL with the input data
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --datatypes
    description: "YAML file with the correspondance between\nZenodo extension and\
      \ Galaxy datatypes"
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --galaxy_root
    description: "Root of development galaxy directory to\nexecute command with."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --galaxy_python_version
    description: "[3|3.6|3.7|3.8|3.9]\nPython version to start Galaxy under"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --extra_tools
    description: "Extra tool sources to include in Galaxy's\ntool panel (file or directory).\
      \ These will\nnot be linted/tested/etc... but they will be\navailable to workflows\
      \ and for interactive\nuse."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --install_galaxy
    description: "Download and configure a disposable copy of\nGalaxy from github."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --galaxy_branch
    description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
      \ isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_source
    description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
      \ github source if\na Galaxy root isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --skip_venv
    description: "Do not create or source a virtualenv\nenvironment for Galaxy, this\
      \ should be used\nto preserve an externally configured virtual\nenvironment\
      \ or conda environment."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cache_galaxy
    description: "Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\n\
      Not caching this results in faster downloads\n(no git) - so is better on throw\
      \ away\ninstances such with TravisCI."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cleanup
    description: Do not cleanup temp files created for and by
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker
    - --no_docker
    description: Run Galaxy tools in Docker if enabled.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_cmd
    description: "Command used to launch docker (defaults to\ndocker)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_containers
    - --biocontainers
    description: "Test tools against mulled containers (forces\n--docker)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --job_config_file
    description: Job configuration file for Galaxy to target.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --tool_dependency_dir
    description: Tool dependency dir for Galaxy to target.
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --port
    description: Port to serve Galaxy on (default is 9090).
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --host
    description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
      \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\nGalaxy\
      \ to all ports including potentially\npublicly accessible ones."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --engine
    description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
      \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but running\
      \ Galaxy within a Docker\ncontainer."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --non_strict_cwl
    description: Disable strict validation of CWL.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_galaxy_image
    description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
      \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_extra_volume
    description: Extra path to mount if --engine docker.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_data
    description: "test-data directory to for specified\ntool(s)."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --tool_data_table
    description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --dependency_resolvers_config_file
    description: "Dependency resolver configuration for Galaxy\nto target."
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --brew_dependency_resolution
    description: "Configure Galaxy to use plain brew\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --shed_dependency_resolution
    description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_dependency_resolution
    description: Configure Galaxy with no dependency
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_dependency_resolution
    description: "Configure Galaxy to use only conda for\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_copy_dependencies
    description: "Conda dependency resolution for Galaxy will\ncopy dependencies instead\
      \ of attempting to\nlink them."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_install
    - --no_conda_auto_install
    description: "Conda dependency resolution for Galaxy will\nattempt to install\
      \ requested but missing\npackages."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_init
    - --no_conda_auto_init
    description: "Conda dependency resolution for Galaxy will\nauto install conda\
      \ itself using miniconda if\nnot availabe on conda_prefix."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the\nprofile_create command) to use\
      \ with this\ncommand."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --database_connection
    description: Database connection string to use for
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_tool_path
    description: Location of shed tools directory for Galaxy.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_single_user
    - --no_galaxy_single_user
    description: "By default Planemo will configure Galaxy to\nrun in single-user\
      \ mode where there is just\none user and this user is automatically\nlogged\
      \ it. Use --no_galaxy_single_user to\nprevent Galaxy from running this way."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --daemon
    description: Serve Galaxy process as a daemon.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --pid_file
    description: Location of pid file is executed with
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --daemon.
    - --ignore_dependency_problems
    description: When installing shed repositories for
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo training_init [OPTIONS] TOOL_PATH\n\n  Build training\
    \ template from workflow.\n\nOptions:\n  --topic_name TEXT               Name\
    \ (directory name) of the topic to create\n                                  or\
    \ in which a tutorial should be created or\n                                 \
    \ updates  [required]\n\n  --topic_title TEXT              Title of the topic\
    \ to create\n  --topic_summary TEXT            Summary of the topic\n  --topic_target\
    \ [use|admin-dev|instructors]\n                                  Target audience\
    \ for the topic\n  --tutorial_name TEXT            Name (directory name) of the\
    \ tutorial to\n                                  create or to modify\n\n  --tutorial_title\
    \ TEXT           Title of the tutorial\n  --hands_on                      Add\
    \ hands-on for the new tutorial\n  --slides                        Add slides\
    \ for the new tutorial\n  --workflow PATH                 Workflow of the tutorial\
    \ (locally)\n  --galaxy_url TEXT               URL of a Galaxy instance with the\
    \ workflow\n  --galaxy_api_key TEXT           API key on the Galaxy instance with\
    \ the\n                                  workflow\n\n  --workflow_id TEXT    \
    \          ID of the workflow on the Galaxy instance\n  --zenodo_link TEXT   \
    \           Zenodo URL with the input data\n  --datatypes PATH               \
    \ YAML file with the correspondance between\n                                \
    \  Zenodo extension and Galaxy datatypes\n\n  --galaxy_root DIRECTORY        \
    \ Root of development galaxy directory to\n                                  execute\
    \ command with.\n\n  --galaxy_python_version [3|3.6|3.7|3.8|3.9]\n           \
    \                       Python version to start Galaxy under\n  --extra_tools\
    \ PATH              Extra tool sources to include in Galaxy's\n              \
    \                    tool panel (file or directory). These will\n            \
    \                      not be linted/tested/etc... but they will be\n        \
    \                          available to workflows and for interactive\n      \
    \                            use.\n\n  --install_galaxy                Download\
    \ and configure a disposable copy of\n                                  Galaxy\
    \ from github.\n\n  --galaxy_branch TEXT            Branch of Galaxy to target\
    \ (defaults to\n                                  master) if a Galaxy root isn't\
    \ specified.\n\n  --galaxy_source TEXT            Git source of Galaxy to target\
    \ (defaults to\n                                  the official galaxyproject github\
    \ source if\n                                  a Galaxy root isn't specified.\n\
    \n  --skip_venv                     Do not create or source a virtualenv\n   \
    \                               environment for Galaxy, this should be used\n\
    \                                  to preserve an externally configured virtual\n\
    \                                  environment or conda environment.\n\n  --no_cache_galaxy\
    \               Skip caching of Galaxy source and\n                          \
    \        dependencies obtained with --install_galaxy.\n                      \
    \            Not caching this results in faster downloads\n                  \
    \                (no git) - so is better on throw away\n                     \
    \             instances such with TravisCI.\n\n  --no_cleanup                \
    \    Do not cleanup temp files created for and by\n                          \
    \        Galaxy.\n\n  --galaxy_email TEXT             E-mail address to use when\
    \ launching single-\n                                  user Galaxy server.\n\n\
    \  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n  --docker_cmd\
    \ TEXT               Command used to launch docker (defaults to\n            \
    \                      docker).\n\n  --docker_sudo / --no_docker_sudo\n      \
    \                            Flag to use sudo when running docker.\n  --docker_host\
    \ TEXT              Docker host to target when executing docker\n            \
    \                      commands (defaults to localhost).\n\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --mulled_containers, --biocontainers\n\
    \                                  Test tools against mulled containers (forces\n\
    \                                  --docker).\n\n  --job_config_file FILE    \
    \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir DIRECTORY\n\
    \                                  Tool dependency dir for Galaxy to target.\n\
    \  --port INTEGER                  Port to serve Galaxy on (default is 9090).\n\
    \  --host TEXT                     Host to bind Galaxy to. Default is 127.0.0.1\n\
    \                                  that is restricted to localhost connections\n\
    \                                  for security reasons set to 0.0.0.0 to bind\n\
    \                                  Galaxy to all ports including potentially\n\
    \                                  publicly accessible ones.\n\n  --engine [galaxy|docker_galaxy|external_galaxy]\n\
    \                                  Select an engine to serve artifacts such as\n\
    \                                  tools and workflows. Defaults to a local\n\
    \                                  Galaxy, but running Galaxy within a Docker\n\
    \                                  container.\n\n  --non_strict_cwl          \
    \      Disable strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker\
    \ image identifier for docker-galaxy-\n                                  flavor\
    \ used if engine type is specified as\n                                  ``docker-galaxy``.\
    \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\n\
    \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n \
    \ --test_data DIRECTORY           test-data directory to for specified\n     \
    \                             tool(s).\n\n  --tool_data_table PATH          tool_data_table_conf.xml\
    \ file to for\n                                  specified tool(s).\n\n  --dependency_resolvers_config_file\
    \ FILE\n                                  Dependency resolver configuration for\
    \ Galaxy\n                                  to target.\n\n  --brew_dependency_resolution\
    \    Configure Galaxy to use plain brew\n                                  dependency\
    \ resolution.\n\n  --shed_dependency_resolution    Configure Galaxy to use brewed\
    \ Tool Shed\n                                  dependency resolution.\n\n  --no_dependency_resolution\
    \      Configure Galaxy with no dependency\n                                 \
    \ resolvers.\n\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
    \ dependency\n                                  commands.\n\n  --conda_exec FILE\
    \               Location of conda executable.\n  --conda_debug               \
    \    Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
    \ TEXT\n                                  Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --conda_dependency_resolution   Configure\
    \ Galaxy to use only conda for\n                                  dependency resolution.\n\
    \n  --conda_copy_dependencies       Conda dependency resolution for Galaxy will\n\
    \                                  copy dependencies instead of attempting to\n\
    \                                  link them.\n\n  --conda_auto_install / --no_conda_auto_install\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  attempt to install requested but missing\n\
    \                                  packages.\n\n  --conda_auto_init / --no_conda_auto_init\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  auto install conda itself using miniconda if\n\
    \                                  not availabe on conda_prefix.\n\n  --profile\
    \ TEXT                  Name of profile (created with the\n                  \
    \                profile_create command) to use with this\n                  \
    \                command.\n\n  --postgres                      Use postgres database\
    \ type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n          \
    \                        Type of database to use for profile -\n             \
    \                     'auto', 'sqlite', 'postgres', and\n                    \
    \              'postgres_docker' are available options. Use\n                \
    \                  postgres to use an existing postgres server\n             \
    \                     you user can access without a password via\n           \
    \                       the psql command. Use postgres_docker to\n           \
    \                       have Planemo manage a docker container\n             \
    \                     running postgres. Data with postgres_docker\n          \
    \                        is not yet persisted past when you restart\n        \
    \                          the docker container launched by Planemo so\n     \
    \                             be careful with this option.\n\n  --postgres_psql_path\
    \ TEXT       Name or or path to postgres client binary\n                     \
    \             (psql).\n\n  --postgres_database_user TEXT   Postgres username for\
    \ managed development\n                                  databases.\n\n  --postgres_database_host\
    \ TEXT   Postgres host name for managed development\n                        \
    \          databases.\n\n  --postgres_database_port TEXT   Postgres port for managed\
    \ development\n                                  databases.\n\n  --file_path DIRECTORY\
    \           Location for files created by Galaxy (e.g.\n                     \
    \             database/files).\n\n  --database_connection TEXT      Database connection\
    \ string to use for\n                                  Galaxy.\n\n  --shed_tool_conf\
    \ TEXT           Location of shed tools conf file for Galaxy.\n  --shed_tool_path\
    \ TEXT           Location of shed tools directory for Galaxy.\n  --galaxy_single_user\
    \ / --no_galaxy_single_user\n                                  By default Planemo\
    \ will configure Galaxy to\n                                  run in single-user\
    \ mode where there is just\n                                  one user and this\
    \ user is automatically\n                                  logged it. Use --no_galaxy_single_user\
    \ to\n                                  prevent Galaxy from running this way.\n\
    \n  --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
    \ FILE                 Location of pid file is executed with\n               \
    \                   --daemon.\n\n  --ignore_dependency_problems    When installing\
    \ shed repositories for\n                                  workflows, ignore dependency\
    \ issues. These\n                                  likely indicate a problem but\
    \ in some cases\n                                  may not prevent a workflow\
    \ from successfully\n                                  executing.\n\n  --skip_client_build\
    \             Do not build Galaxy client when serving\n                      \
    \            Galaxy.\n\n  --shed_install / --no_shed_install\n               \
    \                   By default Planemo will attempt to install\n             \
    \                     repositories needed for workflow testing.\n            \
    \                      This may not be appropriate for production\n          \
    \                        servers and so this can disabled by calling\n       \
    \                           planemo with --no_shed_install.\n\n  --help      \
    \                    Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - ci_find_tools
  positional:
  - !Positional
    optional: false
    position: 0
    name: PROJECT
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --exclude
    description: Paths to exclude.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --exclude_from
    description: File of paths to exclude.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --changed_in_commit_range
    description: Exclude paths unchanged in git commit range.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --chunk_count
    description: "Split output into chunks of this many item\nand print --chunk such\
      \ group."
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --chunk
    description: "When output is split into --chunk_count\ngroups, output the group\
      \ 0-indexedby this\noption."
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --output
    description: File to output to, or - for standard output.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --group_tools
    description: "Group tools of the same repository on a\nsingle line."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo ci_find_tools [OPTIONS] PROJECT\n\n  Find all tools in\
    \ one or more directories.\n\n  Tools can be chunked up, filtered, etc... to build\
    \ lists of tools to\n  perform operations over for continuous integration operations.\n\
    \nOptions:\n  --exclude PATH                  Paths to exclude.\n  --exclude_from\
    \ FILE             File of paths to exclude.\n  --changed_in_commit_range TEXT\
    \  Exclude paths unchanged in git commit range.\n  --chunk_count INTEGER     \
    \      Split output into chunks of this many item\n                          \
    \        and print --chunk such group.\n\n  --chunk INTEGER                 When\
    \ output is split into --chunk_count\n                                  groups,\
    \ output the group 0-indexedby this\n                                  option.\n\
    \n  --output TEXT                   File to output to, or - for standard output.\n\
    \  --group_tools                   Group tools of the same repository on a\n \
    \                                 single line.\n\n  --help                   \
    \       Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- &id003 !Command
  command:
  - planemo
  - conda_lint
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: Recursively perform command for nested conda
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands:
  - !Command
    command:
    - planemo
    - conda_lint
    - directories.
    positional:
    - !Positional
      optional: false
      position: 0
      name: planemo
      description: ''
    - !Positional
      optional: false
      position: 1
      name: conda_lint
      description: ''
    - !Positional
      optional: false
      position: 2
      name: RECIPE_DIR
      description: ''
    named: []
    parent: *id003
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage: planemo conda_lint [OPTIONS] RECIPE_DIR\nTry 'planemo conda_lint\
      \ --help' for help.\n\nError: no such option: -h\n"
    generated_using: &id005
    - -h
    docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "Usage: planemo conda_lint [OPTIONS] RECIPE_DIR\n\n  Check conda recipe\
    \ for common issues.\n\n  Built in large part on the work from the BSD licensed\
    \ anaconda-verify\n  project. For more information on anacoda-verify see:\n  https://github.com/ContinuumIO/anaconda-verify.\n\
    \nOptions:\n  --report_level [all|warn|error]\n  --fail_level [warn|error]\n \
    \ -r, --recursive                 Recursively perform command for nested conda\n\
    \                                  directories.\n\n  --help                  \
    \        Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - workflow_test_init
  positional:
  - !Positional
    optional: false
    position: 0
    name: WORKFLOW_PATH_OR_ID
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - -f
    - --force
    description: Overwrite existing files if present.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -o
    - --output
    - --split_test
    - --no_split_test
    description: "Write workflow job and test definitions to\nseparate files."
    args: !SimpleFlagArg
      name: FILE
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo workflow_test_init [OPTIONS] WORKFLOW_PATH_OR_ID\n\n\
    \  Initialize a Galaxy workflow test description for supplied workflow.\n\n  Be\
    \ sure to your lint your workflow with ``workflow_lint`` before calling\n  this\
    \ to ensure inputs and outputs comply with best practices that make\n  workflow\
    \ testing easier.\n\nOptions:\n  -f, --force                     Overwrite existing\
    \ files if present.\n  -o, --output FILE\n  --split_test / --no_split_test  Write\
    \ workflow job and test definitions to\n                                  separate\
    \ files.\n\n  --help                          Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - workflow_upload
  positional:
  - !Positional
    optional: false
    position: 0
    name: TARGET
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --namespace
    description: "Organization or username under which to create or update\nworkflow\
      \ repository. Must be a valid github username or\norganization"
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --dry_run
    description: Don't execute action, show preview of action.
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo workflow_upload [OPTIONS] TARGET\n\n  Upload workflows\
    \ to github organization.\n\nOptions:\n  --namespace TEXT  Organization or username\
    \ under which to create or update\n                    workflow repository. Must\
    \ be a valid github username or\n                    organization\n\n  --dry_run\
    \         Don't execute action, show preview of action.\n  --help            Show\
    \ this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - list_repos
  positional:
  - !Positional
    optional: false
    position: 0
    name: file.
    description: 'Options:'
  named:
  - !Flag
    optional: true
    synonyms:
    - --exclude
    description: Paths to exclude.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --exclude_from
    description: File of paths to exclude.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --changed_in_commit_range
    description: Exclude paths unchanged in git commit range.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --chunk_count
    description: "Split output into chunks of this many item\nand print --chunk such\
      \ group."
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --chunk
    description: "When output is split into --chunk_count\ngroups, output the group\
      \ 0-indexedby this\noption."
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --output
    description: File to output to, or - for standard output.
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo list_repos [OPTIONS] PROJECT\n\n  Find all shed repositories\
    \ in one or more directories and output as yaml.\n\n  Currently, a shed repository\
    \ is considered a directory with a .shed.yml\n  file.\n\nOptions:\n  --exclude\
    \ PATH                  Paths to exclude.\n  --exclude_from FILE             File\
    \ of paths to exclude.\n  --changed_in_commit_range TEXT  Exclude paths unchanged\
    \ in git commit range.\n  --chunk_count INTEGER           Split output into chunks\
    \ of this many item\n                                  and print --chunk such\
    \ group.\n\n  --chunk INTEGER                 When output is split into --chunk_count\n\
    \                                  groups, output the group 0-indexedby this\n\
    \                                  option.\n\n  --output TEXT                \
    \   File to output to, or - for standard output.\n  --help                   \
    \       Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - serve
  positional:
  - !Positional
    optional: false
    position: 0
    name: tool.
    description: planemo will search parent directories to see if any is a Galaxy
      instance
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --galaxy_email TEXT             E-mail address to use when launching
      single-
  - !Positional
    optional: false
    position: 0
    name: resolvers.
    description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
  - !Positional
    optional: false
    position: 1
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --shed_tool_conf TEXT           Location of shed tools conf file
      for Galaxy.
  - !Positional
    optional: false
    position: 0
    name: executing.
    description: --skip_client_build             Do not build Galaxy client when serving
  - !Positional
    optional: false
    position: 1
    name: Galaxy.
    description: --shed_install / --no_shed_install
  named:
  - !Flag
    optional: true
    synonyms:
    - --galaxy_root
    description: "Root of development galaxy directory to\nexecute command with."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --galaxy_python_version
    description: "[3|3.6|3.7|3.8|3.9]\nPython version to start Galaxy under"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --extra_tools
    description: "Extra tool sources to include in Galaxy's\ntool panel (file or directory).\
      \ These will\nnot be linted/tested/etc... but they will be\navailable to workflows\
      \ and for interactive\nuse."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --install_galaxy
    description: "Download and configure a disposable copy of\nGalaxy from github."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --galaxy_branch
    description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
      \ isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_source
    description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
      \ github source if\na Galaxy root isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --skip_venv
    description: "Do not create or source a virtualenv\nenvironment for Galaxy, this\
      \ should be used\nto preserve an externally configured virtual\nenvironment\
      \ or conda environment."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cache_galaxy
    description: "Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\n\
      Not caching this results in faster downloads\n(no git) - so is better on throw\
      \ away\ninstances such with TravisCI."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cleanup
    description: Do not cleanup temp files created for and by
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker
    - --no_docker
    description: Run Galaxy tools in Docker if enabled.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_cmd
    description: "Command used to launch docker (defaults to\ndocker)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_containers
    - --biocontainers
    description: "Test tools against mulled containers (forces\n--docker)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --job_config_file
    description: Job configuration file for Galaxy to target.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --tool_dependency_dir
    description: Tool dependency dir for Galaxy to target.
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --port
    description: Port to serve Galaxy on (default is 9090).
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --host
    description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
      \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\nGalaxy\
      \ to all ports including potentially\npublicly accessible ones."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --engine
    description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
      \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but running\
      \ Galaxy within a Docker\ncontainer."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --non_strict_cwl
    description: Disable strict validation of CWL.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_galaxy_image
    description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
      \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_extra_volume
    description: Extra path to mount if --engine docker.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_data
    description: "test-data directory to for specified\ntool(s)."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --tool_data_table
    description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --dependency_resolvers_config_file
    description: "Dependency resolver configuration for Galaxy\nto target."
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --brew_dependency_resolution
    description: "Configure Galaxy to use plain brew\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --shed_dependency_resolution
    description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_dependency_resolution
    description: Configure Galaxy with no dependency
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_dependency_resolution
    description: "Configure Galaxy to use only conda for\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_copy_dependencies
    description: "Conda dependency resolution for Galaxy will\ncopy dependencies instead\
      \ of attempting to\nlink them."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_install
    - --no_conda_auto_install
    description: "Conda dependency resolution for Galaxy will\nattempt to install\
      \ requested but missing\npackages."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_init
    - --no_conda_auto_init
    description: "Conda dependency resolution for Galaxy will\nauto install conda\
      \ itself using miniconda if\nnot availabe on conda_prefix."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the\nprofile_create command) to use\
      \ with this\ncommand."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --database_connection
    description: Database connection string to use for
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_tool_path
    description: Location of shed tools directory for Galaxy.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_single_user
    - --no_galaxy_single_user
    description: "By default Planemo will configure Galaxy to\nrun in single-user\
      \ mode where there is just\none user and this user is automatically\nlogged\
      \ it. Use --no_galaxy_single_user to\nprevent Galaxy from running this way."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --daemon
    description: Serve Galaxy process as a daemon.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --pid_file
    description: Location of pid file is executed with
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --daemon.
    - --ignore_dependency_problems
    description: When installing shed repositories for
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --cwl
    description: "Configure Galaxy for use with CWL tool.\n(this option is experimental\
      \ and will be\nreplaced when and if CWL support is merged\ninto Galaxy)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --cwl_galaxy_root
    description: "Root of development galaxy directory to\nexecute command with (must\
      \ be branch of\nGalaxy with CWL support, this option is\nexperimental and will\
      \ be replaced with\n--galaxy_root when and if CWL support is\nmerged into Galaxy."
    args: !SimpleFlagArg
      name: DIRECTORY
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo serve [OPTIONS] TOOL_PATH\n\n  Launch Galaxy instance\
    \ with specified tools.\n\n  The Galaxy tool panel will include just the referenced\
    \ tool or tools (by\n  default all the tools in the current working directory)\
    \ and the upload\n  tool.\n\n  planemo will search parent directories to see if\
    \ any is a Galaxy instance\n  - but one can pick the Galaxy instance to use with\
    \ the ``--galaxy_root``\n  option or force planemo to download a disposable instance\
    \ with the\n  ``--install_galaxy`` flag.\n\n  ``planemo`` will run the Galaxy\
    \ instance in an existing virtualenv if one\n  exists in a ``.venv`` directory\
    \ in the specified ``--galaxy_root``.\n  Otherwise, the Galaxy instance will run\
    \ in a clean virtualenv created in\n  ``/tmp``.\n\n  ``planemo`` uses temporarily\
    \ generated config files and environment\n  variables to attempt to shield this\
    \ execution of Galaxy from manually\n  launched runs against that same Galaxy\
    \ root - but this may not be bullet\n  proof yet, so please be careful and do\
    \ not try this against a production\n  Galaxy instance.\n\nOptions:\n  --galaxy_root\
    \ DIRECTORY         Root of development galaxy directory to\n                \
    \                  execute command with.\n\n  --galaxy_python_version [3|3.6|3.7|3.8|3.9]\n\
    \                                  Python version to start Galaxy under\n  --extra_tools\
    \ PATH              Extra tool sources to include in Galaxy's\n              \
    \                    tool panel (file or directory). These will\n            \
    \                      not be linted/tested/etc... but they will be\n        \
    \                          available to workflows and for interactive\n      \
    \                            use.\n\n  --install_galaxy                Download\
    \ and configure a disposable copy of\n                                  Galaxy\
    \ from github.\n\n  --galaxy_branch TEXT            Branch of Galaxy to target\
    \ (defaults to\n                                  master) if a Galaxy root isn't\
    \ specified.\n\n  --galaxy_source TEXT            Git source of Galaxy to target\
    \ (defaults to\n                                  the official galaxyproject github\
    \ source if\n                                  a Galaxy root isn't specified.\n\
    \n  --skip_venv                     Do not create or source a virtualenv\n   \
    \                               environment for Galaxy, this should be used\n\
    \                                  to preserve an externally configured virtual\n\
    \                                  environment or conda environment.\n\n  --no_cache_galaxy\
    \               Skip caching of Galaxy source and\n                          \
    \        dependencies obtained with --install_galaxy.\n                      \
    \            Not caching this results in faster downloads\n                  \
    \                (no git) - so is better on throw away\n                     \
    \             instances such with TravisCI.\n\n  --no_cleanup                \
    \    Do not cleanup temp files created for and by\n                          \
    \        Galaxy.\n\n  --galaxy_email TEXT             E-mail address to use when\
    \ launching single-\n                                  user Galaxy server.\n\n\
    \  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n  --docker_cmd\
    \ TEXT               Command used to launch docker (defaults to\n            \
    \                      docker).\n\n  --docker_sudo / --no_docker_sudo\n      \
    \                            Flag to use sudo when running docker.\n  --docker_host\
    \ TEXT              Docker host to target when executing docker\n            \
    \                      commands (defaults to localhost).\n\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --mulled_containers, --biocontainers\n\
    \                                  Test tools against mulled containers (forces\n\
    \                                  --docker).\n\n  --job_config_file FILE    \
    \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir DIRECTORY\n\
    \                                  Tool dependency dir for Galaxy to target.\n\
    \  --port INTEGER                  Port to serve Galaxy on (default is 9090).\n\
    \  --host TEXT                     Host to bind Galaxy to. Default is 127.0.0.1\n\
    \                                  that is restricted to localhost connections\n\
    \                                  for security reasons set to 0.0.0.0 to bind\n\
    \                                  Galaxy to all ports including potentially\n\
    \                                  publicly accessible ones.\n\n  --engine [galaxy|docker_galaxy|external_galaxy]\n\
    \                                  Select an engine to serve artifacts such as\n\
    \                                  tools and workflows. Defaults to a local\n\
    \                                  Galaxy, but running Galaxy within a Docker\n\
    \                                  container.\n\n  --non_strict_cwl          \
    \      Disable strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker\
    \ image identifier for docker-galaxy-\n                                  flavor\
    \ used if engine type is specified as\n                                  ``docker-galaxy``.\
    \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\n\
    \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n \
    \ --test_data DIRECTORY           test-data directory to for specified\n     \
    \                             tool(s).\n\n  --tool_data_table PATH          tool_data_table_conf.xml\
    \ file to for\n                                  specified tool(s).\n\n  --dependency_resolvers_config_file\
    \ FILE\n                                  Dependency resolver configuration for\
    \ Galaxy\n                                  to target.\n\n  --brew_dependency_resolution\
    \    Configure Galaxy to use plain brew\n                                  dependency\
    \ resolution.\n\n  --shed_dependency_resolution    Configure Galaxy to use brewed\
    \ Tool Shed\n                                  dependency resolution.\n\n  --no_dependency_resolution\
    \      Configure Galaxy with no dependency\n                                 \
    \ resolvers.\n\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
    \ dependency\n                                  commands.\n\n  --conda_exec FILE\
    \               Location of conda executable.\n  --conda_debug               \
    \    Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
    \ TEXT\n                                  Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --conda_dependency_resolution   Configure\
    \ Galaxy to use only conda for\n                                  dependency resolution.\n\
    \n  --conda_copy_dependencies       Conda dependency resolution for Galaxy will\n\
    \                                  copy dependencies instead of attempting to\n\
    \                                  link them.\n\n  --conda_auto_install / --no_conda_auto_install\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  attempt to install requested but missing\n\
    \                                  packages.\n\n  --conda_auto_init / --no_conda_auto_init\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  auto install conda itself using miniconda if\n\
    \                                  not availabe on conda_prefix.\n\n  --profile\
    \ TEXT                  Name of profile (created with the\n                  \
    \                profile_create command) to use with this\n                  \
    \                command.\n\n  --postgres                      Use postgres database\
    \ type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n          \
    \                        Type of database to use for profile -\n             \
    \                     'auto', 'sqlite', 'postgres', and\n                    \
    \              'postgres_docker' are available options. Use\n                \
    \                  postgres to use an existing postgres server\n             \
    \                     you user can access without a password via\n           \
    \                       the psql command. Use postgres_docker to\n           \
    \                       have Planemo manage a docker container\n             \
    \                     running postgres. Data with postgres_docker\n          \
    \                        is not yet persisted past when you restart\n        \
    \                          the docker container launched by Planemo so\n     \
    \                             be careful with this option.\n\n  --postgres_psql_path\
    \ TEXT       Name or or path to postgres client binary\n                     \
    \             (psql).\n\n  --postgres_database_user TEXT   Postgres username for\
    \ managed development\n                                  databases.\n\n  --postgres_database_host\
    \ TEXT   Postgres host name for managed development\n                        \
    \          databases.\n\n  --postgres_database_port TEXT   Postgres port for managed\
    \ development\n                                  databases.\n\n  --file_path DIRECTORY\
    \           Location for files created by Galaxy (e.g.\n                     \
    \             database/files).\n\n  --database_connection TEXT      Database connection\
    \ string to use for\n                                  Galaxy.\n\n  --shed_tool_conf\
    \ TEXT           Location of shed tools conf file for Galaxy.\n  --shed_tool_path\
    \ TEXT           Location of shed tools directory for Galaxy.\n  --galaxy_single_user\
    \ / --no_galaxy_single_user\n                                  By default Planemo\
    \ will configure Galaxy to\n                                  run in single-user\
    \ mode where there is just\n                                  one user and this\
    \ user is automatically\n                                  logged it. Use --no_galaxy_single_user\
    \ to\n                                  prevent Galaxy from running this way.\n\
    \n  --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
    \ FILE                 Location of pid file is executed with\n               \
    \                   --daemon.\n\n  --ignore_dependency_problems    When installing\
    \ shed repositories for\n                                  workflows, ignore dependency\
    \ issues. These\n                                  likely indicate a problem but\
    \ in some cases\n                                  may not prevent a workflow\
    \ from successfully\n                                  executing.\n\n  --skip_client_build\
    \             Do not build Galaxy client when serving\n                      \
    \            Galaxy.\n\n  --shed_install / --no_shed_install\n               \
    \                   By default Planemo will attempt to install\n             \
    \                     repositories needed for workflow testing.\n            \
    \                      This may not be appropriate for production\n          \
    \                        servers and so this can disabled by calling\n       \
    \                           planemo with --no_shed_install.\n\n  --cwl       \
    \                    Configure Galaxy for use with CWL tool.\n               \
    \                   (this option is experimental and will be\n               \
    \                   replaced when and if CWL support is merged\n             \
    \                     into Galaxy).\n\n  --cwl_galaxy_root DIRECTORY     Root\
    \ of development galaxy directory to\n                                  execute\
    \ command with (must be branch of\n                                  Galaxy with\
    \ CWL support, this option is\n                                  experimental\
    \ and will be replaced with\n                                  --galaxy_root when\
    \ and if CWL support is\n                                  merged into Galaxy.\n\
    \n  --help                          Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - list_invocations
  positional:
  - !Positional
    optional: false
    position: 0
    name: WORKFLOW_IDENTIFIER
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the profile_create command) to\nuse\
      \ with this command.  [required]"
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo list_invocations [OPTIONS] WORKFLOW_IDENTIFIER\n\n  Get\
    \ a list of invocations for a particular workflow ID or alias.\n\nOptions:\n \
    \ --profile TEXT  Name of profile (created with the profile_create command) to\n\
    \                  use with this command.  [required]\n\n  --help          Show\
    \ this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - open
  positional:
  - !Positional
    optional: false
    position: 0
    name: PATH
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo open [OPTIONS] PATH\n\n  Open latest Planemo test results\
    \ in a web browser.\n\nOptions:\n  --help  Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - database_create
  positional:
  - !Positional
    optional: false
    position: 0
    name: local
    description: all   all                    trust
  named:
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo database_create [OPTIONS] IDENTIFIER\n\n  Create a *development*\
    \ database.\n\n  Currently the only implementation is postgres which will be managed\
    \ with\n  ``psql``.\n\n  Planemo ``database_`` commands make it very easy to create\
    \ and destroy\n  databases, therefore it should not be used for production data\
    \ - and it\n  should not even be connnected to a production database server. Planemo\
    \ is\n  intended for development purposes only.\n\n  Planemo will assume that\
    \ it can manage and access postgres databases\n  without specifying a password.\
    \ This can be accomplished by configuring\n  postgres to not required a password\
    \ for the planemo user or by specifying\n  a password in a ``.pgpass`` file.\n\
    \n  Planemo can be configured to not require a password for the planemo user\n\
    \  in the postgres configuration file ``pg_hba.conf`` (on Ubuntu/Debian linux\n\
    \  distros this file is in /etc/postgresql/<postgres_version>/main/\n  directory).\
    \ Adding the following lines to that file will allow planemo and\n  Galaxy to\
    \ access the databases without a password.\n\n      # \"local\" is for Unix domain\
    \ socket connections only\n      local   all   all                    trust\n\
    \      # IPv4 local connections:\n      host    all   all    127.0.0.1/32    trust\n\
    \      # IPv6 local connections:\n      host    all   all    ::1/128         trust\n\
    \n  More information on the ``pg_hda.conf`` configuration file can be found at\n\
    \  http://www.postgresql.org/docs/9.3/static/auth-pg-hba-conf.html.\n\n  Information\
    \ on ``.pgpass`` files can be found at at the following\n  location: http://www.postgresql.org/docs/9.4/static/libpq-pgpass.html.\
    \ In\n  Ubuntu and Debian distros - a postgres user likely already exists and\
    \ its\n  password can be set by setting up a file ``~/.pgpass`` file with the\n\
    \  following contents.\n\n      *:*:*:postgres:<postgres_password>\n\nOptions:\n\
    \  --postgres                      Use postgres database type.\n  --database_type\
    \ [postgres|postgres_docker|sqlite|auto]\n                                  Type\
    \ of database to use for profile -\n                                  'auto',\
    \ 'sqlite', 'postgres', and\n                                  'postgres_docker'\
    \ are available options. Use\n                                  postgres to use\
    \ an existing postgres server\n                                  you user can\
    \ access without a password via\n                                  the psql command.\
    \ Use postgres_docker to\n                                  have Planemo manage\
    \ a docker container\n                                  running postgres. Data\
    \ with postgres_docker\n                                  is not yet persisted\
    \ past when you restart\n                                  the docker container\
    \ launched by Planemo so\n                                  be careful with this\
    \ option.\n\n  --postgres_psql_path TEXT       Name or or path to postgres client\
    \ binary\n                                  (psql).\n\n  --postgres_database_user\
    \ TEXT   Postgres username for managed development\n                         \
    \         databases.\n\n  --postgres_database_host TEXT   Postgres host name for\
    \ managed development\n                                  databases.\n\n  --postgres_database_port\
    \ TEXT   Postgres port for managed development\n                             \
    \     databases.\n\n  --docker_cmd TEXT               Command used to launch docker\
    \ (defaults to\n                                  docker).\n\n  --docker_sudo\
    \ / --no_docker_sudo\n                                  Flag to use sudo when\
    \ running docker.\n  --docker_host TEXT              Docker host to target when\
    \ executing docker\n                                  commands (defaults to localhost).\n\
    \n  --docker_sudo_cmd TEXT          sudo command to use when --docker_sudo is\n\
    \                                  enabled (defaults to sudo).\n\n  --help   \
    \                       Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - shed_init
  positional:
  - !Positional
    optional: false
    position: 0
    name: PROJECT
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --from_workflow
    description: "Attempt to generate repository dependencies\nfrom specified workflow."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --description
    description: "Specify repository description for\n.shed.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --long_description
    description: "Specify repository long_description for\n.shed.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --remote_repository_url
    description: "Specify repository remote_repository_url for\n.shed.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --homepage_url
    description: "Specify repository homepage_url for\n.shed.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --category
    description: "[Assembly|ChIP-seq|Combinatorial Selections|Computational chemistry|Constructive\
      \ Solid Geometry|Convert Formats|Data Export|Data Managers|Data Source|Entomology|Epigenetics|Fasta\
      \ Manipulation|Fastq Manipulation|Flow Cytometry Analysis|Genome annotation|Genome\
      \ editing|Genome-Wide Association Study|Genomic Interval Operations|Graphics|Imaging|Machine\
      \ Learning|Metabolomics|Metagenomics|Micro-array Analysis|Molecular Dynamics|Next\
      \ Gen Mappers|NLP|Ontology Manipulation|Phylogenetics|Proteomics|RNA|SAM|Sequence\
      \ Analysis|Statistics|Systems Biology|Text Manipulation|Tool Dependency Packages|Tool\
      \ Generators|Transcriptomics|Variant Analysis|Visualization|Web Services]\n\
      Specify repository category for .shed.yml\n(may specify multiple)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --owner
    description: Tool Shed repository owner (username).
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --name
    description: "Tool Shed repository name (defaults to the\ninferred tool directory\
      \ name)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -f
    - --force
    description: Overwrite existing files if present.
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo shed_init [OPTIONS] PROJECT\n\n  Bootstrap new Tool Shed\
    \ .shed.yml file.\n\n  This Tool Shed configuration file is used by other ``planemo``\
    \ commands\n  such as ``shed_lint``, ``shed_create``, ``shed_upload``, and ``shed_diff``\n\
    \  to manage repositories in a Galaxy Tool Shed.\n\nOptions:\n  --from_workflow\
    \ PATH            Attempt to generate repository dependencies\n              \
    \                    from specified workflow.\n\n  --description TEXT        \
    \      Specify repository description for\n                                  .shed.yml.\n\
    \n  --long_description TEXT         Specify repository long_description for\n\
    \                                  .shed.yml.\n\n  --remote_repository_url TEXT\
    \    Specify repository remote_repository_url for\n                          \
    \        .shed.yml.\n\n  --homepage_url TEXT             Specify repository homepage_url\
    \ for\n                                  .shed.yml.\n\n  --category [Assembly|ChIP-seq|Combinatorial\
    \ Selections|Computational chemistry|Constructive Solid Geometry|Convert Formats|Data\
    \ Export|Data Managers|Data Source|Entomology|Epigenetics|Fasta Manipulation|Fastq\
    \ Manipulation|Flow Cytometry Analysis|Genome annotation|Genome editing|Genome-Wide\
    \ Association Study|Genomic Interval Operations|Graphics|Imaging|Machine Learning|Metabolomics|Metagenomics|Micro-array\
    \ Analysis|Molecular Dynamics|Next Gen Mappers|NLP|Ontology Manipulation|Phylogenetics|Proteomics|RNA|SAM|Sequence\
    \ Analysis|Statistics|Systems Biology|Text Manipulation|Tool Dependency Packages|Tool\
    \ Generators|Transcriptomics|Variant Analysis|Visualization|Web Services]\n  \
    \                                Specify repository category for .shed.yml\n \
    \                                 (may specify multiple).\n\n  --owner TEXT  \
    \                  Tool Shed repository owner (username).\n  --name TEXT     \
    \                Tool Shed repository name (defaults to the\n                \
    \                  inferred tool directory name).\n\n  -f, --force           \
    \          Overwrite existing files if present.\n  --help                    \
    \      Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - workflow_lint
  positional:
  - !Positional
    optional: false
    position: 0
    name: testing
    description: --fail_level [warn|error]
  named:
  - !Flag
    optional: true
    synonyms:
    - --report_xunit
    description: Output an XUnit report, useful for CI
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - -s
    - --skip
    description: "Comma-separated list of lint tests to skip\n(e.g. passing --skip\
      \ 'citations,xml_order'\nwould skip linting of citations and best-\npractice\
      \ XML ordering."
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo workflow_lint [OPTIONS] TARGET\n\n  Check workflows for\
    \ syntax errors and best practices.\n\nOptions:\n  --report_level [all|warn|error]\n\
    \  --report_xunit PATH             Output an XUnit report, useful for CI\n   \
    \                               testing\n\n  --fail_level [warn|error]\n  -s,\
    \ --skip TEXT                 Comma-separated list of lint tests to skip\n   \
    \                               (e.g. passing --skip 'citations,xml_order'\n \
    \                                 would skip linting of citations and best-\n\
    \                                  practice XML ordering.\n\n  --help        \
    \                  Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - conda_env
  positional:
  - !Positional
    optional: false
    position: 0
    name: tool.
    description: "$ . <(planemo conda_env seqtk_seq.xml)\nDeactivate environment with\
      \ conda_env_deactivate\n(seqtk_seq_v6) $ which seqtk\n/home/planemo/miniconda2/envs/jobdepsDkzcjjfecc6d406196737781ff4456ec60975c137e04884e4f4b05dc68192f7cec4656/bin/seqtk\n\
      (seqtk_seq_v6) $ conda_env_deactivate\n$"
  - !Positional
    optional: false
    position: 0
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  named:
  - !Flag
    optional: true
    synonyms:
    - --conda_prefix
    description: Conda prefix to use for conda dependency
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo conda_env [OPTIONS] TOOL_PATH\n\n  Activate a conda environment\
    \ for tool.\n\n  Source the output of this command to activate a conda environment\
    \ for this\n  tool.\n\n      $ . <(planemo conda_env seqtk_seq.xml)\n      Deactivate\
    \ environment with conda_env_deactivate\n      (seqtk_seq_v6) $ which seqtk\n\
    \      /home/planemo/miniconda2/envs/jobdepsDkzcjjfecc6d406196737781ff4456ec60975c137e04884e4f4b05dc68192f7cec4656/bin/seqtk\n\
    \      (seqtk_seq_v6) $ conda_env_deactivate\n      $\n\nOptions:\n  --conda_prefix\
    \ DIRECTORY        Conda prefix to use for conda dependency\n                \
    \                  commands.\n\n  --conda_exec FILE               Location of\
    \ conda executable.\n  --conda_debug                   Enable more verbose conda\
    \ logging.\n  --conda_channels, --conda_ensure_channels TEXT\n               \
    \                   Ensure conda is configured with specified\n              \
    \                    comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --help                          Show\
    \ this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - test
  positional:
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --galaxy_email TEXT             E-mail address to use when launching
      single-
  - !Positional
    optional: false
    position: 0
    name: resolvers.
    description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
  - !Positional
    optional: false
    position: 1
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --shed_tool_conf TEXT           Location of shed tools conf file
      for Galaxy.
  - !Positional
    optional: false
    position: 3
    name: engine.
    description: --galaxy_user_key TEXT          User key to use with external Galaxy
      engine.
  - !Positional
    optional: false
    position: 4
    name: created.
    description: --help                          Show this message and exit.
  named:
  - !Flag
    optional: true
    synonyms:
    - --failed
    description: "Re-run only failed tests. This command will\nread tool_test_output.json\
      \ to determine\nwhich tests failed so this file must have\nbeen produced with\
      \ the same set of tool ids\npreviously."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --polling_backoff
    description: "Poll resources with an increasing interval\nbetween requests. Useful\
      \ when testing\nagainst remote and/or production instances\nto limit generated\
      \ traffic."
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --galaxy_root
    description: "Root of development galaxy directory to\nexecute command with."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --galaxy_python_version
    description: "[3|3.6|3.7|3.8|3.9]\nPython version to start Galaxy under"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --extra_tools
    description: "Extra tool sources to include in Galaxy's\ntool panel (file or directory).\
      \ These will\nnot be linted/tested/etc... but they will be\navailable to workflows\
      \ and for interactive\nuse."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --install_galaxy
    description: "Download and configure a disposable copy of\nGalaxy from github."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --galaxy_branch
    description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
      \ isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_source
    description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
      \ github source if\na Galaxy root isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --skip_venv
    description: "Do not create or source a virtualenv\nenvironment for Galaxy, this\
      \ should be used\nto preserve an externally configured virtual\nenvironment\
      \ or conda environment."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cache_galaxy
    description: "Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\n\
      Not caching this results in faster downloads\n(no git) - so is better on throw\
      \ away\ninstances such with TravisCI."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cleanup
    description: Do not cleanup temp files created for and by
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker
    - --no_docker
    description: Run Galaxy tools in Docker if enabled.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_cmd
    description: "Command used to launch docker (defaults to\ndocker)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_containers
    - --biocontainers
    description: "Test tools against mulled containers (forces\n--docker)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --job_config_file
    description: Job configuration file for Galaxy to target.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --tool_dependency_dir
    description: Tool dependency dir for Galaxy to target.
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --test_data
    description: "test-data directory to for specified\ntool(s)."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --tool_data_table
    description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --dependency_resolvers_config_file
    description: "Dependency resolver configuration for Galaxy\nto target."
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --brew_dependency_resolution
    description: "Configure Galaxy to use plain brew\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --shed_dependency_resolution
    description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_dependency_resolution
    description: Configure Galaxy with no dependency
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_dependency_resolution
    description: "Configure Galaxy to use only conda for\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_copy_dependencies
    description: "Conda dependency resolution for Galaxy will\ncopy dependencies instead\
      \ of attempting to\nlink them."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_install
    - --no_conda_auto_install
    description: "Conda dependency resolution for Galaxy will\nattempt to install\
      \ requested but missing\npackages."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_init
    - --no_conda_auto_init
    description: "Conda dependency resolution for Galaxy will\nauto install conda\
      \ itself using miniconda if\nnot availabe on conda_prefix."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the\nprofile_create command) to use\
      \ with this\ncommand."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --database_connection
    description: Database connection string to use for
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_tool_path
    description: Location of shed tools directory for Galaxy.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_single_user
    - --no_galaxy_single_user
    description: "By default Planemo will configure Galaxy to\nrun in single-user\
      \ mode where there is just\none user and this user is automatically\nlogged\
      \ it. Use --no_galaxy_single_user to\nprevent Galaxy from running this way."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --update_test_data
    description: "Update test-data directory with job outputs\n(normally written to\
      \ directory\n--job_output_files if specified.)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --paste_test_data_paths
    - --no_paste_test_data_paths
    description: "By default Planemo will use or not use\nGalaxy's path paste option\
      \ to load test data\ninto a history based on the engine type it\nis targeting.\
      \ This can override the logic to\nexplicitly enable or disable path pasting."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --test_output
    description: "Output test report (HTML - for humans)\ndefaults to tool_test_output.html."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_text
    description: "Output test report (Basic text - for display\nin CI)"
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_markdown
    description: "Output test report (Markdown style - for\nhumans & computers)"
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_xunit
    description: Output test report (xunit style - for CI
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_json
    description: "Output test report (planemo json) defaults\nto tool_test_output.json."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --job_output_files
    description: Write job outputs to specified directory.
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --summary
    description: "[none|minimal|compact]\nSummary style printed to planemo's standard\n\
      output (see output reports for more complete\nsummary). Set to 'none' to disable\n\
      completely."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --engine
    description: "[galaxy|docker_galaxy|cwltool|toil|external_galaxy]\nSelect an engine\
      \ to run or test artifacts\nsuch as tools and workflows. Defaults to a\nlocal\
      \ Galaxy, but running Galaxy within a\nDocker container or the CWL reference\n\
      implementation 'cwltool' and 'toil' be\nselected."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --non_strict_cwl
    description: Disable strict validation of CWL.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no-container
    - --no_container
    description: "If cwltool engine is used, disable Docker\ncontainer usage."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_galaxy_image
    description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
      \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_extra_volume
    description: Extra path to mount if --engine docker.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --ignore_dependency_problems
    description: "When installing shed repositories for\nworkflows, ignore dependency\
      \ issues. These\nlikely indicate a problem but in some cases\nmay not prevent\
      \ a workflow from successfully\nexecuting."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --shed_install
    - --no_shed_install
    description: "By default Planemo will attempt to install\nrepositories needed\
      \ for workflow testing.\nThis may not be appropriate for production\nservers\
      \ and so this can disabled by calling\nplanemo with --no_shed_install."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --install_tool_dependencies
    - --no_install_tool_dependencies
    description: "Turn on installation of tool dependencies\nusing classic toolshed\
      \ packages."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --install_resolver_dependencies
    - --no_install_resolver_dependencies
    description: "Skip installing tool dependencies through\nresolver (e.g. conda)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --install_repository_dependencies
    - --no_install_repository_dependencies
    description: Skip installing the repository dependencies.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --galaxy_url
    description: "Remote Galaxy URL to use with external\nGalaxy engine."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_admin_key
    description: Admin key to use with external Galaxy
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --history_name
    description: Name to give a Galaxy history, if one is
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "Usage: planemo test [OPTIONS] TOOL_PATH\n\n  Run specified tool's tests\
    \ within Galaxy.\n\n  All referenced tools (by default all the tools in the current\
    \ working\n  directory) will be tested and the results quickly summarized.\n\n\
    \  To run these tests planemo needs a Galaxy instance to utilize, planemo\n  will\
    \ search parent directories to see if any is a Galaxy instance - but\n  one can\
    \ pick the Galaxy instance to use with the --galaxy_root option or\n  force planemo\
    \ to download a disposable instance with the\n  ``--install_galaxy`` flag.\n\n\
    \  In addition to to quick summary printed to the console - various detailed\n\
    \  output summaries can be configured. ``tool_test_output.html`` (settable\n \
    \ via ``--test_output``) will contain a human consumable HTML report\n  describing\
    \ the test run. A JSON file (settable via ``--test_output_json``\n  and defaulting\
    \ to ``tool_test_output.json``) will also be created. These\n  files can can be\
    \ disabled by passing in empty arguments or globally by\n  setting the values\
    \ ``default_test_output`` and/or\n  ``default_test_output_json`` in ``~/.planemo.yml``\
    \ to ``null``. For\n  continuous integration testing a xUnit-style report can\
    \ be configured\n  using the ``--test_output_xunit``.\n\n  planemo uses temporarily\
    \ generated config files and environment variables\n  to attempt to shield this\
    \ execution of Galaxy from manually launched runs\n  against that same Galaxy\
    \ root - but this may not be bullet proof yet so\n  please careful and do not\
    \ try this against production Galaxy instances.\n\nOptions:\n  --failed      \
    \                  Re-run only failed tests. This command will\n             \
    \                     read tool_test_output.json to determine\n              \
    \                    which tests failed so this file must have\n             \
    \                     been produced with the same set of tool ids\n          \
    \                        previously.\n\n  --polling_backoff INTEGER       Poll\
    \ resources with an increasing interval\n                                  between\
    \ requests. Useful when testing\n                                  against remote\
    \ and/or production instances\n                                  to limit generated\
    \ traffic.\n\n  --galaxy_root DIRECTORY         Root of development galaxy directory\
    \ to\n                                  execute command with.\n\n  --galaxy_python_version\
    \ [3|3.6|3.7|3.8|3.9]\n                                  Python version to start\
    \ Galaxy under\n  --extra_tools PATH              Extra tool sources to include\
    \ in Galaxy's\n                                  tool panel (file or directory).\
    \ These will\n                                  not be linted/tested/etc... but\
    \ they will be\n                                  available to workflows and for\
    \ interactive\n                                  use.\n\n  --install_galaxy  \
    \              Download and configure a disposable copy of\n                 \
    \                 Galaxy from github.\n\n  --galaxy_branch TEXT            Branch\
    \ of Galaxy to target (defaults to\n                                  master)\
    \ if a Galaxy root isn't specified.\n\n  --galaxy_source TEXT            Git source\
    \ of Galaxy to target (defaults to\n                                  the official\
    \ galaxyproject github source if\n                                  a Galaxy root\
    \ isn't specified.\n\n  --skip_venv                     Do not create or source\
    \ a virtualenv\n                                  environment for Galaxy, this\
    \ should be used\n                                  to preserve an externally\
    \ configured virtual\n                                  environment or conda environment.\n\
    \n  --no_cache_galaxy               Skip caching of Galaxy source and\n      \
    \                            dependencies obtained with --install_galaxy.\n  \
    \                                Not caching this results in faster downloads\n\
    \                                  (no git) - so is better on throw away\n   \
    \                               instances such with TravisCI.\n\n  --no_cleanup\
    \                    Do not cleanup temp files created for and by\n          \
    \                        Galaxy.\n\n  --galaxy_email TEXT             E-mail address\
    \ to use when launching single-\n                                  user Galaxy\
    \ server.\n\n  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n\
    \  --docker_cmd TEXT               Command used to launch docker (defaults to\n\
    \                                  docker).\n\n  --docker_sudo / --no_docker_sudo\n\
    \                                  Flag to use sudo when running docker.\n  --docker_host\
    \ TEXT              Docker host to target when executing docker\n            \
    \                      commands (defaults to localhost).\n\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --mulled_containers, --biocontainers\n\
    \                                  Test tools against mulled containers (forces\n\
    \                                  --docker).\n\n  --job_config_file FILE    \
    \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir DIRECTORY\n\
    \                                  Tool dependency dir for Galaxy to target.\n\
    \  --test_data DIRECTORY           test-data directory to for specified\n    \
    \                              tool(s).\n\n  --tool_data_table PATH          tool_data_table_conf.xml\
    \ file to for\n                                  specified tool(s).\n\n  --dependency_resolvers_config_file\
    \ FILE\n                                  Dependency resolver configuration for\
    \ Galaxy\n                                  to target.\n\n  --brew_dependency_resolution\
    \    Configure Galaxy to use plain brew\n                                  dependency\
    \ resolution.\n\n  --shed_dependency_resolution    Configure Galaxy to use brewed\
    \ Tool Shed\n                                  dependency resolution.\n\n  --no_dependency_resolution\
    \      Configure Galaxy with no dependency\n                                 \
    \ resolvers.\n\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
    \ dependency\n                                  commands.\n\n  --conda_exec FILE\
    \               Location of conda executable.\n  --conda_debug               \
    \    Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
    \ TEXT\n                                  Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --conda_dependency_resolution   Configure\
    \ Galaxy to use only conda for\n                                  dependency resolution.\n\
    \n  --conda_copy_dependencies       Conda dependency resolution for Galaxy will\n\
    \                                  copy dependencies instead of attempting to\n\
    \                                  link them.\n\n  --conda_auto_install / --no_conda_auto_install\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  attempt to install requested but missing\n\
    \                                  packages.\n\n  --conda_auto_init / --no_conda_auto_init\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  auto install conda itself using miniconda if\n\
    \                                  not availabe on conda_prefix.\n\n  --profile\
    \ TEXT                  Name of profile (created with the\n                  \
    \                profile_create command) to use with this\n                  \
    \                command.\n\n  --postgres                      Use postgres database\
    \ type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n          \
    \                        Type of database to use for profile -\n             \
    \                     'auto', 'sqlite', 'postgres', and\n                    \
    \              'postgres_docker' are available options. Use\n                \
    \                  postgres to use an existing postgres server\n             \
    \                     you user can access without a password via\n           \
    \                       the psql command. Use postgres_docker to\n           \
    \                       have Planemo manage a docker container\n             \
    \                     running postgres. Data with postgres_docker\n          \
    \                        is not yet persisted past when you restart\n        \
    \                          the docker container launched by Planemo so\n     \
    \                             be careful with this option.\n\n  --postgres_psql_path\
    \ TEXT       Name or or path to postgres client binary\n                     \
    \             (psql).\n\n  --postgres_database_user TEXT   Postgres username for\
    \ managed development\n                                  databases.\n\n  --postgres_database_host\
    \ TEXT   Postgres host name for managed development\n                        \
    \          databases.\n\n  --postgres_database_port TEXT   Postgres port for managed\
    \ development\n                                  databases.\n\n  --file_path DIRECTORY\
    \           Location for files created by Galaxy (e.g.\n                     \
    \             database/files).\n\n  --database_connection TEXT      Database connection\
    \ string to use for\n                                  Galaxy.\n\n  --shed_tool_conf\
    \ TEXT           Location of shed tools conf file for Galaxy.\n  --shed_tool_path\
    \ TEXT           Location of shed tools directory for Galaxy.\n  --galaxy_single_user\
    \ / --no_galaxy_single_user\n                                  By default Planemo\
    \ will configure Galaxy to\n                                  run in single-user\
    \ mode where there is just\n                                  one user and this\
    \ user is automatically\n                                  logged it. Use --no_galaxy_single_user\
    \ to\n                                  prevent Galaxy from running this way.\n\
    \n  --update_test_data              Update test-data directory with job outputs\n\
    \                                  (normally written to directory\n          \
    \                        --job_output_files if specified.)\n\n  --paste_test_data_paths\
    \ / --no_paste_test_data_paths\n                                  By default Planemo\
    \ will use or not use\n                                  Galaxy's path paste option\
    \ to load test data\n                                  into a history based on\
    \ the engine type it\n                                  is targeting. This can\
    \ override the logic to\n                                  explicitly enable or\
    \ disable path pasting.\n\n  --test_output PATH              Output test report\
    \ (HTML - for humans)\n                                  defaults to tool_test_output.html.\n\
    \n  --test_output_text PATH         Output test report (Basic text - for display\n\
    \                                  in CI)\n\n  --test_output_markdown PATH   \
    \  Output test report (Markdown style - for\n                                \
    \  humans & computers)\n\n  --test_output_xunit PATH        Output test report\
    \ (xunit style - for CI\n                                  systems\n\n  --test_output_junit\
    \ PATH        Output test report (jUnit style - for CI\n                     \
    \             systems\n\n  --test_output_allure DIRECTORY  Output test allure2\
    \ framework resutls\n  --test_output_json PATH         Output test report (planemo\
    \ json) defaults\n                                  to tool_test_output.json.\n\
    \n  --job_output_files DIRECTORY    Write job outputs to specified directory.\n\
    \  --summary [none|minimal|compact]\n                                  Summary\
    \ style printed to planemo's standard\n                                  output\
    \ (see output reports for more complete\n                                  summary).\
    \ Set to 'none' to disable\n                                  completely.\n\n\
    \  --engine [galaxy|docker_galaxy|cwltool|toil|external_galaxy]\n            \
    \                      Select an engine to run or test artifacts\n           \
    \                       such as tools and workflows. Defaults to a\n         \
    \                         local Galaxy, but running Galaxy within a\n        \
    \                          Docker container or the CWL reference\n           \
    \                       implementation 'cwltool' and 'toil' be\n             \
    \                     selected.\n\n  --non_strict_cwl                Disable strict\
    \ validation of CWL.\n  --no-container, --no_container  If cwltool engine is used,\
    \ disable Docker\n                                  container usage.\n\n  --docker_galaxy_image\
    \ TEXT      Docker image identifier for docker-galaxy-\n                     \
    \             flavor used if engine type is specified as\n                   \
    \               ``docker-galaxy``. Defaults to\n                             \
    \     quay.io/bgruening/galaxy.\n\n  --docker_extra_volume PATH      Extra path\
    \ to mount if --engine docker.\n  --ignore_dependency_problems    When installing\
    \ shed repositories for\n                                  workflows, ignore dependency\
    \ issues. These\n                                  likely indicate a problem but\
    \ in some cases\n                                  may not prevent a workflow\
    \ from successfully\n                                  executing.\n\n  --shed_install\
    \ / --no_shed_install\n                                  By default Planemo will\
    \ attempt to install\n                                  repositories needed for\
    \ workflow testing.\n                                  This may not be appropriate\
    \ for production\n                                  servers and so this can disabled\
    \ by calling\n                                  planemo with --no_shed_install.\n\
    \n  --install_tool_dependencies / --no_install_tool_dependencies\n           \
    \                       Turn on installation of tool dependencies\n          \
    \                        using classic toolshed packages.\n\n  --install_resolver_dependencies\
    \ / --no_install_resolver_dependencies\n                                  Skip\
    \ installing tool dependencies through\n                                  resolver\
    \ (e.g. conda).\n\n  --install_repository_dependencies / --no_install_repository_dependencies\n\
    \                                  Skip installing the repository dependencies.\n\
    \  --galaxy_url TEXT               Remote Galaxy URL to use with external\n  \
    \                                Galaxy engine.\n\n  --galaxy_admin_key TEXT \
    \        Admin key to use with external Galaxy\n                             \
    \     engine.\n\n  --galaxy_user_key TEXT          User key to use with external\
    \ Galaxy engine.\n  --history_name TEXT             Name to give a Galaxy history,\
    \ if one is\n                                  created.\n\n  --help          \
    \                Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - conda_search
  positional:
  - !Positional
    optional: false
    position: 0
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  named:
  - !Flag
    optional: true
    synonyms:
    - --conda_prefix
    description: Conda prefix to use for conda dependency
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo conda_search [OPTIONS] TERM\n\n  Perform conda search\
    \ with Planemo's conda.\n\n  Implicitly adds channels Planemo is configured with.\n\
    \nOptions:\n  --conda_prefix DIRECTORY        Conda prefix to use for conda dependency\n\
    \                                  commands.\n\n  --conda_exec FILE          \
    \     Location of conda executable.\n  --conda_debug                   Enable\
    \ more verbose conda logging.\n  --conda_channels, --conda_ensure_channels TEXT\n\
    \                                  Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --help                          Show\
    \ this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - conda_install
  positional:
  - !Positional
    optional: false
    position: 0
    name: subdirectories.
    description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
  - !Positional
    optional: false
    position: 1
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: Recursively perform command for
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --global
    description: "Install Conda dependencies globally instead\nof in requirement specific\
      \ environments\npackaged for tools. If the Conda bin\ndirectory is on your PATH,\
      \ tools may still\nuse binaries but this is more designed for\ninteractive testing\
      \ and debugging."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_init
    - --no_conda_auto_init
    description: "Conda dependency resolution for Galaxy will\nauto install conda\
      \ itself using miniconda if\nnot availabe on conda_prefix."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo conda_install [OPTIONS] TARGET\n\n  Install conda packages\
    \ for tool requirements.\n\nOptions:\n  -r, --recursive                 Recursively\
    \ perform command for\n                                  subdirectories.\n\n \
    \ --conda_prefix DIRECTORY        Conda prefix to use for conda dependency\n \
    \                                 commands.\n\n  --conda_exec FILE           \
    \    Location of conda executable.\n  --conda_debug                   Enable more\
    \ verbose conda logging.\n  --conda_channels, --conda_ensure_channels TEXT\n \
    \                                 Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --global                        Install\
    \ Conda dependencies globally instead\n                                  of in\
    \ requirement specific environments\n                                  packaged\
    \ for tools. If the Conda bin\n                                  directory is\
    \ on your PATH, tools may still\n                                  use binaries\
    \ but this is more designed for\n                                  interactive\
    \ testing and debugging.\n\n  --conda_auto_init / --no_conda_auto_init\n     \
    \                             Conda dependency resolution for Galaxy will\n  \
    \                                auto install conda itself using miniconda if\n\
    \                                  not availabe on conda_prefix.\n\n  --help \
    \                         Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - create_alias
  positional:
  - !Positional
    optional: false
    position: 0
    name: OBJ
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --alias
    description: Name of an alias.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the profile_create command) to\nuse\
      \ with this command.  [required]"
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo create_alias [OPTIONS] OBJ\n\n  Add an alias for a path\
    \ or a workflow or dataset ID. Aliases are\n  associated with a particular planemo\
    \ profile.\n\nOptions:\n  --alias TEXT    Name of an alias.\n  --profile TEXT\
    \  Name of profile (created with the profile_create command) to\n            \
    \      use with this command.  [required]\n\n  --help          Show this message\
    \ and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - mulled_init
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --mulled_conda_version
    description: "Install a specific version of Conda before\nrunning the command,\
      \ by default the version\nthat comes with the continuumio miniconda3\nimage\
      \ will be used under Linux and under Mac OS\nX Conda will be upgraded to to\
      \ work around a\nbug in 4.2."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_namespace
    description: "Build a mulled image with the specified\nnamespace - defaults to\
      \ biocontainers. Galaxy\ncurrently only recognizes images with the\nnamespace\
      \ biocontainers."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_command
    description: "Mulled action to perform for targets - this\ndefaults to 'build-and-test'."
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo mulled_init [OPTIONS]\n\n  Download and install involucro\
    \ for mull command.\n\n  This will happen automatically when using the mull command,\
    \ but this can\n  be pre-installed in an environment using this command.\n\nOptions:\n\
    \  --mulled_conda_version TEXT  Install a specific version of Conda before\n \
    \                              running the command, by default the version\n \
    \                              that comes with the continuumio miniconda3\n  \
    \                             image will be used under Linux and under Mac OS\n\
    \                               X Conda will be upgraded to to work around a\n\
    \                               bug in 4.2.\n\n  --mulled_namespace TEXT     \
    \ Build a mulled image with the specified\n                               namespace\
    \ - defaults to biocontainers. Galaxy\n                               currently\
    \ only recognizes images with the\n                               namespace biocontainers.\n\
    \n  --mulled_command TEXT        Mulled action to perform for targets - this\n\
    \                               defaults to 'build-and-test'.\n\n  --help    \
    \                   Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - merge_test_reports
  positional:
  - !Positional
    optional: false
    position: 0
    name: INPUT_PATHS
    description: ''
  - !Positional
    optional: false
    position: 1
    name: FILE_PATH
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo merge_test_reports [OPTIONS] INPUT_PATHS FILE_PATH\n\n\
    \  Merge tool_test_output.json files from multiple runs.\n\nOptions:\n  --help\
    \  Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - project_init
  positional:
  - !Positional
    optional: false
    position: 0
    name: PROJECT
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --template
    - --help
    description: Show this message and exit.
    args: !SimpleFlagArg
      name: TEXT
  usage_flag:
  version_flag:
  help_text: "Usage: planemo project_init [OPTIONS] PROJECT\n\n  (Experimental) Initialize\
    \ a new tool project.\n\n  This is only a proof-of-concept demo right now.\n\n\
    Options:\n  --template TEXT\n  --help           Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - shed_test
  positional:
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --galaxy_email TEXT             E-mail address to use when launching
      single-
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: "Recursively perform command for nested\nrepository directories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --fail_fast
    description: "If multiple repositories are specified and\nan error occurs stop\
      \ immediately instead of\nprocessing remaining repositories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --owner
    description: Tool Shed repository owner (username).
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --name
    description: "Tool Shed repository name (defaults to the\ninferred tool directory\
      \ name)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_email
    description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key
    description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
      \ and password is\nspecified. This key can be specified with\neither --shed_key\
      \ or --shed_key_from_env."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key_from_env
    description: "Environment variable to read API key for\nTool Shed access from."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_password
    description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -t
    - --shed_target
    description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local'\
      \ (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined\
      \ ~/.planemo.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_root
    description: "Root of development galaxy directory to\nexecute command with."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --galaxy_python_version
    description: "[3|3.6|3.7|3.8|3.9]\nPython version to start Galaxy under"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --extra_tools
    description: "Extra tool sources to include in Galaxy's\ntool panel (file or directory).\
      \ These will\nnot be linted/tested/etc... but they will be\navailable to workflows\
      \ and for interactive\nuse."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --install_galaxy
    description: "Download and configure a disposable copy of\nGalaxy from github."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --galaxy_branch
    description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
      \ isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_source
    description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
      \ github source if\na Galaxy root isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --skip_venv
    description: "Do not create or source a virtualenv\nenvironment for Galaxy, this\
      \ should be used\nto preserve an externally configured virtual\nenvironment\
      \ or conda environment."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cache_galaxy
    description: "Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\n\
      Not caching this results in faster downloads\n(no git) - so is better on throw\
      \ away\ninstances such with TravisCI."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cleanup
    description: Do not cleanup temp files created for and by
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker
    - --no_docker
    description: Run Galaxy tools in Docker if enabled.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_cmd
    description: "Command used to launch docker (defaults to\ndocker)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_containers
    - --biocontainers
    description: "Test tools against mulled containers (forces\n--docker)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --job_config_file
    description: Job configuration file for Galaxy to target.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --tool_dependency_dir
    description: Tool dependency dir for Galaxy to target.
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --update_test_data
    description: "Update test-data directory with job outputs\n(normally written to\
      \ directory\n--job_output_files if specified.)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --paste_test_data_paths
    - --no_paste_test_data_paths
    description: "By default Planemo will use or not use\nGalaxy's path paste option\
      \ to load test data\ninto a history based on the engine type it\nis targeting.\
      \ This can override the logic to\nexplicitly enable or disable path pasting."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --test_output
    description: "Output test report (HTML - for humans)\ndefaults to tool_test_output.html."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_text
    description: "Output test report (Basic text - for display\nin CI)"
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_markdown
    description: "Output test report (Markdown style - for\nhumans & computers)"
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_xunit
    description: Output test report (xunit style - for CI
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_output_json
    description: "Output test report (planemo json) defaults\nto tool_test_output.json."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --job_output_files
    description: Write job outputs to specified directory.
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --summary
    description: "[none|minimal|compact]\nSummary style printed to planemo's standard\n\
      output (see output reports for more complete\nsummary). Set to 'none' to disable\n\
      completely."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --skip_dependencies
    description: "Do not install shed dependencies as part of\nrepository installation."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo shed_test [OPTIONS] PROJECT\n\n  Run tests of published\
    \ shed artifacts.\n\n  This command will start a Galaxy instance configured to\
    \ target the\n  specified shed, find published artifacts (tools and dependencies)\n\
    \  corresponding to command-line arguments and ``.shed.yml`` file(s), install\n\
    \  these artifacts, and run the tool tests for these commands.\n\n  This command\
    \ requires the target to be version 15.07 or newer.\n\nOptions:\n  -r, --recursive\
    \                 Recursively perform command for nested\n                   \
    \               repository directories.\n\n  --fail_fast                     If\
    \ multiple repositories are specified and\n                                  an\
    \ error occurs stop immediately instead of\n                                 \
    \ processing remaining repositories.\n\n  --owner TEXT                    Tool\
    \ Shed repository owner (username).\n  --name TEXT                     Tool Shed\
    \ repository name (defaults to the\n                                  inferred\
    \ tool directory name).\n\n  --shed_email TEXT               E-mail for Tool Shed\
    \ auth (required unless\n                                  shed_key is specified).\n\
    \n  --shed_key TEXT                 API key for Tool Shed access. An API key is\n\
    \                                  required unless e-mail and password is\n  \
    \                                specified. This key can be specified with\n \
    \                                 either --shed_key or --shed_key_from_env.\n\n\
    \  --shed_key_from_env TEXT        Environment variable to read API key for\n\
    \                                  Tool Shed access from.\n\n  --shed_password\
    \ TEXT            Password for Tool Shed auth (required unless\n             \
    \                     shed_key is specified).\n\n  -t, --shed_target TEXT    \
    \      Tool Shed to target (this can be 'toolshed',\n                        \
    \          'testtoolshed', 'local' (alias for\n                              \
    \    http://localhost:9009/), an arbitrary url or\n                          \
    \        mappings defined ~/.planemo.yml.\n\n  --galaxy_root DIRECTORY       \
    \  Root of development galaxy directory to\n                                 \
    \ execute command with.\n\n  --galaxy_python_version [3|3.6|3.7|3.8|3.9]\n   \
    \                               Python version to start Galaxy under\n  --extra_tools\
    \ PATH              Extra tool sources to include in Galaxy's\n              \
    \                    tool panel (file or directory). These will\n            \
    \                      not be linted/tested/etc... but they will be\n        \
    \                          available to workflows and for interactive\n      \
    \                            use.\n\n  --install_galaxy                Download\
    \ and configure a disposable copy of\n                                  Galaxy\
    \ from github.\n\n  --galaxy_branch TEXT            Branch of Galaxy to target\
    \ (defaults to\n                                  master) if a Galaxy root isn't\
    \ specified.\n\n  --galaxy_source TEXT            Git source of Galaxy to target\
    \ (defaults to\n                                  the official galaxyproject github\
    \ source if\n                                  a Galaxy root isn't specified.\n\
    \n  --skip_venv                     Do not create or source a virtualenv\n   \
    \                               environment for Galaxy, this should be used\n\
    \                                  to preserve an externally configured virtual\n\
    \                                  environment or conda environment.\n\n  --no_cache_galaxy\
    \               Skip caching of Galaxy source and\n                          \
    \        dependencies obtained with --install_galaxy.\n                      \
    \            Not caching this results in faster downloads\n                  \
    \                (no git) - so is better on throw away\n                     \
    \             instances such with TravisCI.\n\n  --no_cleanup                \
    \    Do not cleanup temp files created for and by\n                          \
    \        Galaxy.\n\n  --galaxy_email TEXT             E-mail address to use when\
    \ launching single-\n                                  user Galaxy server.\n\n\
    \  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n  --docker_cmd\
    \ TEXT               Command used to launch docker (defaults to\n            \
    \                      docker).\n\n  --docker_sudo / --no_docker_sudo\n      \
    \                            Flag to use sudo when running docker.\n  --docker_host\
    \ TEXT              Docker host to target when executing docker\n            \
    \                      commands (defaults to localhost).\n\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --mulled_containers, --biocontainers\n\
    \                                  Test tools against mulled containers (forces\n\
    \                                  --docker).\n\n  --job_config_file FILE    \
    \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir DIRECTORY\n\
    \                                  Tool dependency dir for Galaxy to target.\n\
    \  --update_test_data              Update test-data directory with job outputs\n\
    \                                  (normally written to directory\n          \
    \                        --job_output_files if specified.)\n\n  --paste_test_data_paths\
    \ / --no_paste_test_data_paths\n                                  By default Planemo\
    \ will use or not use\n                                  Galaxy's path paste option\
    \ to load test data\n                                  into a history based on\
    \ the engine type it\n                                  is targeting. This can\
    \ override the logic to\n                                  explicitly enable or\
    \ disable path pasting.\n\n  --test_output PATH              Output test report\
    \ (HTML - for humans)\n                                  defaults to tool_test_output.html.\n\
    \n  --test_output_text PATH         Output test report (Basic text - for display\n\
    \                                  in CI)\n\n  --test_output_markdown PATH   \
    \  Output test report (Markdown style - for\n                                \
    \  humans & computers)\n\n  --test_output_xunit PATH        Output test report\
    \ (xunit style - for CI\n                                  systems\n\n  --test_output_junit\
    \ PATH        Output test report (jUnit style - for CI\n                     \
    \             systems\n\n  --test_output_allure DIRECTORY  Output test allure2\
    \ framework resutls\n  --test_output_json PATH         Output test report (planemo\
    \ json) defaults\n                                  to tool_test_output.json.\n\
    \n  --job_output_files DIRECTORY    Write job outputs to specified directory.\n\
    \  --summary [none|minimal|compact]\n                                  Summary\
    \ style printed to planemo's standard\n                                  output\
    \ (see output reports for more complete\n                                  summary).\
    \ Set to 'none' to disable\n                                  completely.\n\n\
    \  --skip_dependencies             Do not install shed dependencies as part of\n\
    \                                  repository installation.\n\n  --help      \
    \                    Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - file...
  positional:
  - !Positional
    optional: false
    position: 0
    name: planemo
    description: ''
  - !Positional
    optional: false
    position: 1
    name: COMMAND
    description: ''
  - !Positional
    optional: true
    position: 2
    name: ARGS
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "Problem loading command file..., exception No module named 'planemo.commands.cmd_file'\n\
    Usage: planemo [OPTIONS] COMMAND [ARGS]...\nTry 'planemo --help' for help.\n\n\
    Error: No such command 'file...'.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - shed_update
  positional:
  - !Positional
    optional: false
    position: 0
    name: shed.
    description: '% planemo shed_update --shed_target testtoolshed path/to/repo'
  - !Positional
    optional: false
    position: 0
    name: changes.
    description: The lower-level ``shed_upload`` command should be used instead if
      the
  named:
  - !Flag
    optional: true
    synonyms:
    - --report_xunit
    description: Output an XUnit report, useful for CI testing
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: "Recursively perform command for nested\nrepository directories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --fail_fast
    description: "If multiple repositories are specified and an\nerror occurs stop\
      \ immediately instead of\nprocessing remaining repositories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --owner
    description: Tool Shed repository owner (username).
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --name
    description: "Tool Shed repository name (defaults to the\ninferred tool directory\
      \ name)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_email
    description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key
    description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
      \ and password is\nspecified. This key can be specified with\neither --shed_key\
      \ or --shed_key_from_env."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key_from_env
    description: "Environment variable to read API key for Tool\nShed access from."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_password
    description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -t
    - --shed_target
    description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local'\
      \ (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined\
      \ ~/.planemo.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -m
    - --message
    description: Commit message for tool shed upload.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --force_repository_creation
    description: "If a repository cannot be found for the\nspecified user/repo name\
      \ pair, then\nautomatically create the repository in the\ntoolshed."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --check_diff
    description: "Skip uploading if the shed_diff detects there\nwould be no 'difference'\
      \ (only attributes\npopulated by the shed would be updated.)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --skip_upload
    description: "Skip upload contents as part of operation, only\nupdate metadata."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --skip_metadata
    description: "Skip metadata update as part of operation, only\nupload new contents."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo shed_update [OPTIONS] PROJECT\n\n  Update Tool Shed repository.\n\
    \n  By default this command will update both repository metadata from\n  ``.shed.yml``\
    \ and upload new contents from the repository directory.\n\n      % planemo shed_update\n\
    \n  This will update the main tool shed with the repository defined by a\n  ``.shed.yml``\
    \ file in the current working directory. Both the location of\n  the ``.shed.yml``\
    \ and the tool shed to upload to can be easily configured.\n  For instance, the\
    \ following command can be used if ``.shed.yml`` if\n  contained in ``path/to/repo``\
    \ and the desire is to update the test tool\n  shed.\n\n      % planemo shed_update\
    \ --shed_target testtoolshed path/to/repo\n\n  Another important option is ``--check_diff``\
    \ - this doesn't affect the\n  updating of shed metadata but it will check for\
    \ differences before\n  uploading new contents to the tool shed. This may important\
    \ because the\n  tool shed will automatically populate certain attributes in tool\
    \ shed\n  artifact files (such as ``tool_dependencies.xml``) and this may cause\n\
    \  unwanted installable revisions to be created when there are no important\n\
    \  changes.\n\n  The lower-level ``shed_upload`` command should be used instead\
    \ if the\n  repository doesn't define complete metadata in a ``.shed.yml``.\n\n\
    Options:\n  --report_xunit PATH          Output an XUnit report, useful for CI\
    \ testing\n  -r, --recursive              Recursively perform command for nested\n\
    \                               repository directories.\n\n  --fail_fast     \
    \             If multiple repositories are specified and an\n                \
    \               error occurs stop immediately instead of\n                   \
    \            processing remaining repositories.\n\n  --owner TEXT            \
    \     Tool Shed repository owner (username).\n  --name TEXT                  Tool\
    \ Shed repository name (defaults to the\n                               inferred\
    \ tool directory name).\n\n  --shed_email TEXT            E-mail for Tool Shed\
    \ auth (required unless\n                               shed_key is specified).\n\
    \n  --shed_key TEXT              API key for Tool Shed access. An API key is\n\
    \                               required unless e-mail and password is\n     \
    \                          specified. This key can be specified with\n       \
    \                        either --shed_key or --shed_key_from_env.\n\n  --shed_key_from_env\
    \ TEXT     Environment variable to read API key for Tool\n                   \
    \            Shed access from.\n\n  --shed_password TEXT         Password for\
    \ Tool Shed auth (required unless\n                               shed_key is\
    \ specified).\n\n  -t, --shed_target TEXT       Tool Shed to target (this can\
    \ be 'toolshed',\n                               'testtoolshed', 'local' (alias\
    \ for\n                               http://localhost:9009/), an arbitrary url\
    \ or\n                               mappings defined ~/.planemo.yml.\n\n  -m,\
    \ --message TEXT           Commit message for tool shed upload.\n  --force_repository_creation\
    \  If a repository cannot be found for the\n                               specified\
    \ user/repo name pair, then\n                               automatically create\
    \ the repository in the\n                               toolshed.\n\n  --check_diff\
    \                 Skip uploading if the shed_diff detects there\n            \
    \                   would be no 'difference' (only attributes\n              \
    \                 populated by the shed would be updated.)\n\n  --skip_upload\
    \                Skip upload contents as part of operation, only\n           \
    \                    update metadata.\n\n  --skip_metadata              Skip metadata\
    \ update as part of operation, only\n                               upload new\
    \ contents.\n\n  --help                       Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - create_gist
  positional:
  - !Positional
    optional: false
    position: 0
    name: FILE_PATH
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --link_type
    description: '[raw|html]  Link type to generate for the file.'
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo create_gist [OPTIONS] FILE_PATH\n\n  Upload file to GitHub\
    \ as a sharable gist.\n\nOptions:\n  --link_type [raw|html]  Link type to generate\
    \ for the file.\n  --help                  Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - a...
  positional:
  - !Positional
    optional: false
    position: 0
    name: planemo
    description: ''
  - !Positional
    optional: false
    position: 1
    name: COMMAND
    description: ''
  - !Positional
    optional: true
    position: 2
    name: ARGS
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "Problem loading command a..., exception No module named 'planemo.commands.cmd_a'\n\
    Usage: planemo [OPTIONS] COMMAND [ARGS]...\nTry 'planemo --help' for help.\n\n\
    Error: No such command 'a...'.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - shed_download
  positional:
  - !Positional
    optional: false
    position: 0
    name: directories.
    description: --fail_fast               If multiple repositories are specified
      and an
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: Recursively perform command for nested repository
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --owner
    description: Tool Shed repository owner (username).
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --name
    description: "Tool Shed repository name (defaults to the\ninferred tool directory\
      \ name)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_email
    description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key
    description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
      \ and password is specified.\nThis key can be specified with either --shed_key\n\
      or --shed_key_from_env."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key_from_env
    description: "Environment variable to read API key for Tool Shed\naccess from."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_password
    description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -t
    - --shed_target
    description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local'\
      \ (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined\
      \ ~/.planemo.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --destination
    description: "Destination pattern of tarball(s) to download - if\nthis doesn't\
      \ end in 'gz' it will be treated as a\ndirectory to extract tool contents into\
      \ (defaults\nto shed_download.tar.gz). If multiple repositories\nare discovered\
      \ in a .shed.yml file these will be\ncreated as shed_download_<name>.tar.gz\
      \ by default\nfor instance, simpler repositories will just be\ndownloaded to\
      \ the specified file."
    args: !SimpleFlagArg
      name: PATH
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo shed_download [OPTIONS] PROJECT\n\n  Download tool from\
    \ Tool Shed into directory.\n\n  Download a tool repository as a tarball from\
    \ the tool shed and extract to\n  the specified directory.\n\nOptions:\n  -r,\
    \ --recursive           Recursively perform command for nested repository\n  \
    \                          directories.\n\n  --fail_fast               If multiple\
    \ repositories are specified and an\n                            error occurs\
    \ stop immediately instead of\n                            processing remaining\
    \ repositories.\n\n  --owner TEXT              Tool Shed repository owner (username).\n\
    \  --name TEXT               Tool Shed repository name (defaults to the\n    \
    \                        inferred tool directory name).\n\n  --shed_email TEXT\
    \         E-mail for Tool Shed auth (required unless\n                       \
    \     shed_key is specified).\n\n  --shed_key TEXT           API key for Tool\
    \ Shed access. An API key is\n                            required unless e-mail\
    \ and password is specified.\n                            This key can be specified\
    \ with either --shed_key\n                            or --shed_key_from_env.\n\
    \n  --shed_key_from_env TEXT  Environment variable to read API key for Tool Shed\n\
    \                            access from.\n\n  --shed_password TEXT      Password\
    \ for Tool Shed auth (required unless\n                            shed_key is\
    \ specified).\n\n  -t, --shed_target TEXT    Tool Shed to target (this can be\
    \ 'toolshed',\n                            'testtoolshed', 'local' (alias for\n\
    \                            http://localhost:9009/), an arbitrary url or\n  \
    \                          mappings defined ~/.planemo.yml.\n\n  --destination\
    \ PATH        Destination pattern of tarball(s) to download - if\n           \
    \                 this doesn't end in 'gz' it will be treated as a\n         \
    \                   directory to extract tool contents into (defaults\n      \
    \                      to shed_download.tar.gz). If multiple repositories\n  \
    \                          are discovered in a .shed.yml file these will be\n\
    \                            created as shed_download_<name>.tar.gz by default\n\
    \                            for instance, simpler repositories will just be\n\
    \                            downloaded to the specified file.\n\n  --help   \
    \                 Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - shed_build
  positional:
  - !Positional
    optional: false
    position: 0
    name: TOOL_PATH
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo shed_build [OPTIONS] TOOL_PATH\n\n  Create a Galaxy tool\
    \ tarball.\n\n  This will use the .shed.yml file to prepare a tarball (which you\
    \ could\n  upload to the Tool Shed manually).\n\nOptions:\n  --help  Show this\
    \ message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - container_register
  positional:
  - !Positional
    optional: false
    position: 0
    name: tools.
    description: 'Options:'
  - !Positional
    optional: false
    position: 1
    name: subdirectories.
    description: --mulled_namespace TEXT         Build a mulled image with the specified
  - !Positional
    optional: false
    position: 0
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: Recursively perform command for
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_prefix
    description: Conda prefix to use for conda dependency
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --output_directory
    description: "Container registration directory (defaults\nto ~/.planemo/multi-package-containers."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - -m
    - --message
    description: "Commit and pull request message template for\nregistration interactions."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --pull_request
    - --no_pull_request
    description: "Fork and create a pull request against\nBioContainers/multi-package-containers\
      \ for\nthese changes."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --force_push
    - --no_force_push
    description: "Force push branch for pull request in case\nit already exists."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo container_register [OPTIONS] TOOL_PATH\n\n  Register\
    \ multi-requirement containers as needed.\n\n  BioContainers publishes all Bioconda\
    \ packages automatically as individual\n  container images. These however are\
    \ not enough for tools with multiple\n  best-practice requirements. Such requirements\
    \ should be recorded and\n  published so that a container can be created and registered\
    \ for these\n  tools.\n\nOptions:\n  -r, --recursive                 Recursively\
    \ perform command for\n                                  subdirectories.\n\n \
    \ --mulled_namespace TEXT         Build a mulled image with the specified\n  \
    \                                namespace - defaults to biocontainers.\n    \
    \                              Galaxy currently only recognizes images with\n\
    \                                  the namespace biocontainers.\n\n  --conda_prefix\
    \ DIRECTORY        Conda prefix to use for conda dependency\n                \
    \                  commands.\n\n  --conda_exec FILE               Location of\
    \ conda executable.\n  --conda_debug                   Enable more verbose conda\
    \ logging.\n  --conda_channels, --conda_ensure_channels TEXT\n               \
    \                   Ensure conda is configured with specified\n              \
    \                    comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --output_directory DIRECTORY    Container\
    \ registration directory (defaults\n                                  to ~/.planemo/multi-package-containers.\n\
    \n  -m, --message TEXT              Commit and pull request message template for\n\
    \                                  registration interactions.\n\n  --pull_request\
    \ / --no_pull_request\n                                  Fork and create a pull\
    \ request against\n                                  BioContainers/multi-package-containers\
    \ for\n                                  these changes.\n\n  --force_push / --no_force_push\
    \  Force push branch for pull request in case\n                              \
    \    it already exists.\n\n  --help                          Show this message\
    \ and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - conda_init
  positional:
  - !Positional
    optional: false
    position: 0
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  named:
  - !Flag
    optional: true
    synonyms:
    - --conda_prefix
    description: Conda prefix to use for conda dependency
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo conda_init [OPTIONS]\n\n  Download and install conda.\n\
    \n  This will download conda for managing dependencies for your platform using\n\
    \  the appropriate Miniconda installer.\n\n  By running this command, you are\
    \ agreeing to the terms of the conda\n  license a 3-clause BSD 3 license. Please\
    \ review full license at\n  http://docs.continuum.io/anaconda/eula.\n\n  Planemo\
    \ will print a warning and terminate with an exit code of 7 if Conda\n  is already\
    \ installed.\n\nOptions:\n  --conda_prefix DIRECTORY        Conda prefix to use\
    \ for conda dependency\n                                  commands.\n\n  --conda_exec\
    \ FILE               Location of conda executable.\n  --conda_debug          \
    \         Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
    \ TEXT\n                                  Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --help                          Show\
    \ this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - shed_serve
  positional:
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --galaxy_email TEXT             E-mail address to use when launching
      single-
  - !Positional
    optional: false
    position: 0
    name: resolvers.
    description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
  - !Positional
    optional: false
    position: 1
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --shed_tool_conf TEXT           Location of shed tools conf file
      for Galaxy.
  - !Positional
    optional: false
    position: 0
    name: executing.
    description: --skip_client_build             Do not build Galaxy client when serving
  - !Positional
    optional: false
    position: 1
    name: Galaxy.
    description: --shed_install / --no_shed_install
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: "Recursively perform command for nested\nrepository directories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --fail_fast
    description: "If multiple repositories are specified and\nan error occurs stop\
      \ immediately instead of\nprocessing remaining repositories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --owner
    description: Tool Shed repository owner (username).
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --name
    description: "Tool Shed repository name (defaults to the\ninferred tool directory\
      \ name)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_email
    description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key
    description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
      \ and password is\nspecified. This key can be specified with\neither --shed_key\
      \ or --shed_key_from_env."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key_from_env
    description: "Environment variable to read API key for\nTool Shed access from."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_password
    description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -t
    - --shed_target
    description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local'\
      \ (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined\
      \ ~/.planemo.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_root
    description: "Root of development galaxy directory to\nexecute command with."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --galaxy_python_version
    description: "[3|3.6|3.7|3.8|3.9]\nPython version to start Galaxy under"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --extra_tools
    description: "Extra tool sources to include in Galaxy's\ntool panel (file or directory).\
      \ These will\nnot be linted/tested/etc... but they will be\navailable to workflows\
      \ and for interactive\nuse."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --install_galaxy
    description: "Download and configure a disposable copy of\nGalaxy from github."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --galaxy_branch
    description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
      \ isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_source
    description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
      \ github source if\na Galaxy root isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --skip_venv
    description: "Do not create or source a virtualenv\nenvironment for Galaxy, this\
      \ should be used\nto preserve an externally configured virtual\nenvironment\
      \ or conda environment."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cache_galaxy
    description: "Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\n\
      Not caching this results in faster downloads\n(no git) - so is better on throw\
      \ away\ninstances such with TravisCI."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cleanup
    description: Do not cleanup temp files created for and by
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker
    - --no_docker
    description: Run Galaxy tools in Docker if enabled.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_cmd
    description: "Command used to launch docker (defaults to\ndocker)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_containers
    - --biocontainers
    description: "Test tools against mulled containers (forces\n--docker)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --job_config_file
    description: Job configuration file for Galaxy to target.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --tool_dependency_dir
    description: Tool dependency dir for Galaxy to target.
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --port
    description: Port to serve Galaxy on (default is 9090).
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --host
    description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
      \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\nGalaxy\
      \ to all ports including potentially\npublicly accessible ones."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --engine
    description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
      \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but running\
      \ Galaxy within a Docker\ncontainer."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --non_strict_cwl
    description: Disable strict validation of CWL.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_galaxy_image
    description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
      \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_extra_volume
    description: Extra path to mount if --engine docker.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_data
    description: "test-data directory to for specified\ntool(s)."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --tool_data_table
    description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --dependency_resolvers_config_file
    description: "Dependency resolver configuration for Galaxy\nto target."
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --brew_dependency_resolution
    description: "Configure Galaxy to use plain brew\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --shed_dependency_resolution
    description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_dependency_resolution
    description: Configure Galaxy with no dependency
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_dependency_resolution
    description: "Configure Galaxy to use only conda for\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_copy_dependencies
    description: "Conda dependency resolution for Galaxy will\ncopy dependencies instead\
      \ of attempting to\nlink them."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_install
    - --no_conda_auto_install
    description: "Conda dependency resolution for Galaxy will\nattempt to install\
      \ requested but missing\npackages."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_init
    - --no_conda_auto_init
    description: "Conda dependency resolution for Galaxy will\nauto install conda\
      \ itself using miniconda if\nnot availabe on conda_prefix."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the\nprofile_create command) to use\
      \ with this\ncommand."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --database_connection
    description: Database connection string to use for
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_tool_path
    description: Location of shed tools directory for Galaxy.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_single_user
    - --no_galaxy_single_user
    description: "By default Planemo will configure Galaxy to\nrun in single-user\
      \ mode where there is just\none user and this user is automatically\nlogged\
      \ it. Use --no_galaxy_single_user to\nprevent Galaxy from running this way."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --daemon
    description: Serve Galaxy process as a daemon.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --pid_file
    description: Location of pid file is executed with
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --daemon.
    - --ignore_dependency_problems
    description: When installing shed repositories for
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --skip_dependencies
    description: "Do not install shed dependencies as part of\nrepository installation."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo shed_serve [OPTIONS] PROJECT\n\n  Launch Galaxy with\
    \ Tool Shed dependencies.\n\n  This command will start a Galaxy instance configured\
    \ to target the\n  specified shed, find published artifacts (tools and dependencies)\n\
    \  corresponding to command-line arguments and ``.shed.yml`` file(s), install\n\
    \  these artifacts, and serve a Galaxy instances that can be logged into and\n\
    \  explored interactively.\n\nOptions:\n  -r, --recursive                 Recursively\
    \ perform command for nested\n                                  repository directories.\n\
    \n  --fail_fast                     If multiple repositories are specified and\n\
    \                                  an error occurs stop immediately instead of\n\
    \                                  processing remaining repositories.\n\n  --owner\
    \ TEXT                    Tool Shed repository owner (username).\n  --name TEXT\
    \                     Tool Shed repository name (defaults to the\n           \
    \                       inferred tool directory name).\n\n  --shed_email TEXT\
    \               E-mail for Tool Shed auth (required unless\n                 \
    \                 shed_key is specified).\n\n  --shed_key TEXT               \
    \  API key for Tool Shed access. An API key is\n                             \
    \     required unless e-mail and password is\n                               \
    \   specified. This key can be specified with\n                              \
    \    either --shed_key or --shed_key_from_env.\n\n  --shed_key_from_env TEXT \
    \       Environment variable to read API key for\n                           \
    \       Tool Shed access from.\n\n  --shed_password TEXT            Password for\
    \ Tool Shed auth (required unless\n                                  shed_key\
    \ is specified).\n\n  -t, --shed_target TEXT          Tool Shed to target (this\
    \ can be 'toolshed',\n                                  'testtoolshed', 'local'\
    \ (alias for\n                                  http://localhost:9009/), an arbitrary\
    \ url or\n                                  mappings defined ~/.planemo.yml.\n\
    \n  --galaxy_root DIRECTORY         Root of development galaxy directory to\n\
    \                                  execute command with.\n\n  --galaxy_python_version\
    \ [3|3.6|3.7|3.8|3.9]\n                                  Python version to start\
    \ Galaxy under\n  --extra_tools PATH              Extra tool sources to include\
    \ in Galaxy's\n                                  tool panel (file or directory).\
    \ These will\n                                  not be linted/tested/etc... but\
    \ they will be\n                                  available to workflows and for\
    \ interactive\n                                  use.\n\n  --install_galaxy  \
    \              Download and configure a disposable copy of\n                 \
    \                 Galaxy from github.\n\n  --galaxy_branch TEXT            Branch\
    \ of Galaxy to target (defaults to\n                                  master)\
    \ if a Galaxy root isn't specified.\n\n  --galaxy_source TEXT            Git source\
    \ of Galaxy to target (defaults to\n                                  the official\
    \ galaxyproject github source if\n                                  a Galaxy root\
    \ isn't specified.\n\n  --skip_venv                     Do not create or source\
    \ a virtualenv\n                                  environment for Galaxy, this\
    \ should be used\n                                  to preserve an externally\
    \ configured virtual\n                                  environment or conda environment.\n\
    \n  --no_cache_galaxy               Skip caching of Galaxy source and\n      \
    \                            dependencies obtained with --install_galaxy.\n  \
    \                                Not caching this results in faster downloads\n\
    \                                  (no git) - so is better on throw away\n   \
    \                               instances such with TravisCI.\n\n  --no_cleanup\
    \                    Do not cleanup temp files created for and by\n          \
    \                        Galaxy.\n\n  --galaxy_email TEXT             E-mail address\
    \ to use when launching single-\n                                  user Galaxy\
    \ server.\n\n  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n\
    \  --docker_cmd TEXT               Command used to launch docker (defaults to\n\
    \                                  docker).\n\n  --docker_sudo / --no_docker_sudo\n\
    \                                  Flag to use sudo when running docker.\n  --docker_host\
    \ TEXT              Docker host to target when executing docker\n            \
    \                      commands (defaults to localhost).\n\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --mulled_containers, --biocontainers\n\
    \                                  Test tools against mulled containers (forces\n\
    \                                  --docker).\n\n  --job_config_file FILE    \
    \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir DIRECTORY\n\
    \                                  Tool dependency dir for Galaxy to target.\n\
    \  --port INTEGER                  Port to serve Galaxy on (default is 9090).\n\
    \  --host TEXT                     Host to bind Galaxy to. Default is 127.0.0.1\n\
    \                                  that is restricted to localhost connections\n\
    \                                  for security reasons set to 0.0.0.0 to bind\n\
    \                                  Galaxy to all ports including potentially\n\
    \                                  publicly accessible ones.\n\n  --engine [galaxy|docker_galaxy|external_galaxy]\n\
    \                                  Select an engine to serve artifacts such as\n\
    \                                  tools and workflows. Defaults to a local\n\
    \                                  Galaxy, but running Galaxy within a Docker\n\
    \                                  container.\n\n  --non_strict_cwl          \
    \      Disable strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker\
    \ image identifier for docker-galaxy-\n                                  flavor\
    \ used if engine type is specified as\n                                  ``docker-galaxy``.\
    \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\n\
    \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n \
    \ --test_data DIRECTORY           test-data directory to for specified\n     \
    \                             tool(s).\n\n  --tool_data_table PATH          tool_data_table_conf.xml\
    \ file to for\n                                  specified tool(s).\n\n  --dependency_resolvers_config_file\
    \ FILE\n                                  Dependency resolver configuration for\
    \ Galaxy\n                                  to target.\n\n  --brew_dependency_resolution\
    \    Configure Galaxy to use plain brew\n                                  dependency\
    \ resolution.\n\n  --shed_dependency_resolution    Configure Galaxy to use brewed\
    \ Tool Shed\n                                  dependency resolution.\n\n  --no_dependency_resolution\
    \      Configure Galaxy with no dependency\n                                 \
    \ resolvers.\n\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
    \ dependency\n                                  commands.\n\n  --conda_exec FILE\
    \               Location of conda executable.\n  --conda_debug               \
    \    Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
    \ TEXT\n                                  Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --conda_dependency_resolution   Configure\
    \ Galaxy to use only conda for\n                                  dependency resolution.\n\
    \n  --conda_copy_dependencies       Conda dependency resolution for Galaxy will\n\
    \                                  copy dependencies instead of attempting to\n\
    \                                  link them.\n\n  --conda_auto_install / --no_conda_auto_install\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  attempt to install requested but missing\n\
    \                                  packages.\n\n  --conda_auto_init / --no_conda_auto_init\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  auto install conda itself using miniconda if\n\
    \                                  not availabe on conda_prefix.\n\n  --profile\
    \ TEXT                  Name of profile (created with the\n                  \
    \                profile_create command) to use with this\n                  \
    \                command.\n\n  --postgres                      Use postgres database\
    \ type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n          \
    \                        Type of database to use for profile -\n             \
    \                     'auto', 'sqlite', 'postgres', and\n                    \
    \              'postgres_docker' are available options. Use\n                \
    \                  postgres to use an existing postgres server\n             \
    \                     you user can access without a password via\n           \
    \                       the psql command. Use postgres_docker to\n           \
    \                       have Planemo manage a docker container\n             \
    \                     running postgres. Data with postgres_docker\n          \
    \                        is not yet persisted past when you restart\n        \
    \                          the docker container launched by Planemo so\n     \
    \                             be careful with this option.\n\n  --postgres_psql_path\
    \ TEXT       Name or or path to postgres client binary\n                     \
    \             (psql).\n\n  --postgres_database_user TEXT   Postgres username for\
    \ managed development\n                                  databases.\n\n  --postgres_database_host\
    \ TEXT   Postgres host name for managed development\n                        \
    \          databases.\n\n  --postgres_database_port TEXT   Postgres port for managed\
    \ development\n                                  databases.\n\n  --file_path DIRECTORY\
    \           Location for files created by Galaxy (e.g.\n                     \
    \             database/files).\n\n  --database_connection TEXT      Database connection\
    \ string to use for\n                                  Galaxy.\n\n  --shed_tool_conf\
    \ TEXT           Location of shed tools conf file for Galaxy.\n  --shed_tool_path\
    \ TEXT           Location of shed tools directory for Galaxy.\n  --galaxy_single_user\
    \ / --no_galaxy_single_user\n                                  By default Planemo\
    \ will configure Galaxy to\n                                  run in single-user\
    \ mode where there is just\n                                  one user and this\
    \ user is automatically\n                                  logged it. Use --no_galaxy_single_user\
    \ to\n                                  prevent Galaxy from running this way.\n\
    \n  --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
    \ FILE                 Location of pid file is executed with\n               \
    \                   --daemon.\n\n  --ignore_dependency_problems    When installing\
    \ shed repositories for\n                                  workflows, ignore dependency\
    \ issues. These\n                                  likely indicate a problem but\
    \ in some cases\n                                  may not prevent a workflow\
    \ from successfully\n                                  executing.\n\n  --skip_client_build\
    \             Do not build Galaxy client when serving\n                      \
    \            Galaxy.\n\n  --shed_install / --no_shed_install\n               \
    \                   By default Planemo will attempt to install\n             \
    \                     repositories needed for workflow testing.\n            \
    \                      This may not be appropriate for production\n          \
    \                        servers and so this can disabled by calling\n       \
    \                           planemo with --no_shed_install.\n\n  --skip_dependencies\
    \             Do not install shed dependencies as part of\n                  \
    \                repository installation.\n\n  --help                        \
    \  Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - workflow_convert
  positional:
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --galaxy_email TEXT             E-mail address to use when launching
      single-
  - !Positional
    optional: false
    position: 0
    name: resolvers.
    description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
  - !Positional
    optional: false
    position: 1
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --shed_tool_conf TEXT           Location of shed tools conf file
      for Galaxy.
  - !Positional
    optional: false
    position: 0
    name: executing.
    description: --skip_client_build             Do not build Galaxy client when serving
  - !Positional
    optional: false
    position: 1
    name: Galaxy.
    description: --shed_install / --no_shed_install
  named:
  - !Flag
    optional: true
    synonyms:
    - -f
    - --force
    description: Overwrite existing files if present.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -o
    - --output
    - --galaxy_root
    description: "Root of development galaxy directory to\nexecute command with."
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --galaxy_python_version
    description: "[3|3.6|3.7|3.8|3.9]\nPython version to start Galaxy under"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --extra_tools
    description: "Extra tool sources to include in Galaxy's\ntool panel (file or directory).\
      \ These will\nnot be linted/tested/etc... but they will be\navailable to workflows\
      \ and for interactive\nuse."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --install_galaxy
    description: "Download and configure a disposable copy of\nGalaxy from github."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --galaxy_branch
    description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
      \ isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_source
    description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
      \ github source if\na Galaxy root isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --skip_venv
    description: "Do not create or source a virtualenv\nenvironment for Galaxy, this\
      \ should be used\nto preserve an externally configured virtual\nenvironment\
      \ or conda environment."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cache_galaxy
    description: "Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\n\
      Not caching this results in faster downloads\n(no git) - so is better on throw\
      \ away\ninstances such with TravisCI."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cleanup
    description: Do not cleanup temp files created for and by
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker
    - --no_docker
    description: Run Galaxy tools in Docker if enabled.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_cmd
    description: "Command used to launch docker (defaults to\ndocker)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_containers
    - --biocontainers
    description: "Test tools against mulled containers (forces\n--docker)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --job_config_file
    description: Job configuration file for Galaxy to target.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --tool_dependency_dir
    description: Tool dependency dir for Galaxy to target.
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --port
    description: Port to serve Galaxy on (default is 9090).
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --host
    description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
      \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\nGalaxy\
      \ to all ports including potentially\npublicly accessible ones."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --engine
    description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
      \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but running\
      \ Galaxy within a Docker\ncontainer."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --non_strict_cwl
    description: Disable strict validation of CWL.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_galaxy_image
    description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
      \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_extra_volume
    description: Extra path to mount if --engine docker.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_data
    description: "test-data directory to for specified\ntool(s)."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --tool_data_table
    description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --dependency_resolvers_config_file
    description: "Dependency resolver configuration for Galaxy\nto target."
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --brew_dependency_resolution
    description: "Configure Galaxy to use plain brew\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --shed_dependency_resolution
    description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_dependency_resolution
    description: Configure Galaxy with no dependency
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_dependency_resolution
    description: "Configure Galaxy to use only conda for\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_copy_dependencies
    description: "Conda dependency resolution for Galaxy will\ncopy dependencies instead\
      \ of attempting to\nlink them."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_install
    - --no_conda_auto_install
    description: "Conda dependency resolution for Galaxy will\nattempt to install\
      \ requested but missing\npackages."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_init
    - --no_conda_auto_init
    description: "Conda dependency resolution for Galaxy will\nauto install conda\
      \ itself using miniconda if\nnot availabe on conda_prefix."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the\nprofile_create command) to use\
      \ with this\ncommand."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --database_connection
    description: Database connection string to use for
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_tool_path
    description: Location of shed tools directory for Galaxy.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_single_user
    - --no_galaxy_single_user
    description: "By default Planemo will configure Galaxy to\nrun in single-user\
      \ mode where there is just\none user and this user is automatically\nlogged\
      \ it. Use --no_galaxy_single_user to\nprevent Galaxy from running this way."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --daemon
    description: Serve Galaxy process as a daemon.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --pid_file
    description: Location of pid file is executed with
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --daemon.
    - --ignore_dependency_problems
    description: When installing shed repositories for
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo workflow_convert [OPTIONS] WORKFLOW_PATH_OR_ID\n\n  Convert\
    \ Format 2 workflows to native Galaxy workflows, and vice-versa.\n\nOptions:\n\
    \  -f, --force                     Overwrite existing files if present.\n  -o,\
    \ --output FILE\n  --galaxy_root DIRECTORY         Root of development galaxy\
    \ directory to\n                                  execute command with.\n\n  --galaxy_python_version\
    \ [3|3.6|3.7|3.8|3.9]\n                                  Python version to start\
    \ Galaxy under\n  --extra_tools PATH              Extra tool sources to include\
    \ in Galaxy's\n                                  tool panel (file or directory).\
    \ These will\n                                  not be linted/tested/etc... but\
    \ they will be\n                                  available to workflows and for\
    \ interactive\n                                  use.\n\n  --install_galaxy  \
    \              Download and configure a disposable copy of\n                 \
    \                 Galaxy from github.\n\n  --galaxy_branch TEXT            Branch\
    \ of Galaxy to target (defaults to\n                                  master)\
    \ if a Galaxy root isn't specified.\n\n  --galaxy_source TEXT            Git source\
    \ of Galaxy to target (defaults to\n                                  the official\
    \ galaxyproject github source if\n                                  a Galaxy root\
    \ isn't specified.\n\n  --skip_venv                     Do not create or source\
    \ a virtualenv\n                                  environment for Galaxy, this\
    \ should be used\n                                  to preserve an externally\
    \ configured virtual\n                                  environment or conda environment.\n\
    \n  --no_cache_galaxy               Skip caching of Galaxy source and\n      \
    \                            dependencies obtained with --install_galaxy.\n  \
    \                                Not caching this results in faster downloads\n\
    \                                  (no git) - so is better on throw away\n   \
    \                               instances such with TravisCI.\n\n  --no_cleanup\
    \                    Do not cleanup temp files created for and by\n          \
    \                        Galaxy.\n\n  --galaxy_email TEXT             E-mail address\
    \ to use when launching single-\n                                  user Galaxy\
    \ server.\n\n  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n\
    \  --docker_cmd TEXT               Command used to launch docker (defaults to\n\
    \                                  docker).\n\n  --docker_sudo / --no_docker_sudo\n\
    \                                  Flag to use sudo when running docker.\n  --docker_host\
    \ TEXT              Docker host to target when executing docker\n            \
    \                      commands (defaults to localhost).\n\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --mulled_containers, --biocontainers\n\
    \                                  Test tools against mulled containers (forces\n\
    \                                  --docker).\n\n  --job_config_file FILE    \
    \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir DIRECTORY\n\
    \                                  Tool dependency dir for Galaxy to target.\n\
    \  --port INTEGER                  Port to serve Galaxy on (default is 9090).\n\
    \  --host TEXT                     Host to bind Galaxy to. Default is 127.0.0.1\n\
    \                                  that is restricted to localhost connections\n\
    \                                  for security reasons set to 0.0.0.0 to bind\n\
    \                                  Galaxy to all ports including potentially\n\
    \                                  publicly accessible ones.\n\n  --engine [galaxy|docker_galaxy|external_galaxy]\n\
    \                                  Select an engine to serve artifacts such as\n\
    \                                  tools and workflows. Defaults to a local\n\
    \                                  Galaxy, but running Galaxy within a Docker\n\
    \                                  container.\n\n  --non_strict_cwl          \
    \      Disable strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker\
    \ image identifier for docker-galaxy-\n                                  flavor\
    \ used if engine type is specified as\n                                  ``docker-galaxy``.\
    \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\n\
    \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n \
    \ --test_data DIRECTORY           test-data directory to for specified\n     \
    \                             tool(s).\n\n  --tool_data_table PATH          tool_data_table_conf.xml\
    \ file to for\n                                  specified tool(s).\n\n  --dependency_resolvers_config_file\
    \ FILE\n                                  Dependency resolver configuration for\
    \ Galaxy\n                                  to target.\n\n  --brew_dependency_resolution\
    \    Configure Galaxy to use plain brew\n                                  dependency\
    \ resolution.\n\n  --shed_dependency_resolution    Configure Galaxy to use brewed\
    \ Tool Shed\n                                  dependency resolution.\n\n  --no_dependency_resolution\
    \      Configure Galaxy with no dependency\n                                 \
    \ resolvers.\n\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
    \ dependency\n                                  commands.\n\n  --conda_exec FILE\
    \               Location of conda executable.\n  --conda_debug               \
    \    Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
    \ TEXT\n                                  Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --conda_dependency_resolution   Configure\
    \ Galaxy to use only conda for\n                                  dependency resolution.\n\
    \n  --conda_copy_dependencies       Conda dependency resolution for Galaxy will\n\
    \                                  copy dependencies instead of attempting to\n\
    \                                  link them.\n\n  --conda_auto_install / --no_conda_auto_install\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  attempt to install requested but missing\n\
    \                                  packages.\n\n  --conda_auto_init / --no_conda_auto_init\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  auto install conda itself using miniconda if\n\
    \                                  not availabe on conda_prefix.\n\n  --profile\
    \ TEXT                  Name of profile (created with the\n                  \
    \                profile_create command) to use with this\n                  \
    \                command.\n\n  --postgres                      Use postgres database\
    \ type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n          \
    \                        Type of database to use for profile -\n             \
    \                     'auto', 'sqlite', 'postgres', and\n                    \
    \              'postgres_docker' are available options. Use\n                \
    \                  postgres to use an existing postgres server\n             \
    \                     you user can access without a password via\n           \
    \                       the psql command. Use postgres_docker to\n           \
    \                       have Planemo manage a docker container\n             \
    \                     running postgres. Data with postgres_docker\n          \
    \                        is not yet persisted past when you restart\n        \
    \                          the docker container launched by Planemo so\n     \
    \                             be careful with this option.\n\n  --postgres_psql_path\
    \ TEXT       Name or or path to postgres client binary\n                     \
    \             (psql).\n\n  --postgres_database_user TEXT   Postgres username for\
    \ managed development\n                                  databases.\n\n  --postgres_database_host\
    \ TEXT   Postgres host name for managed development\n                        \
    \          databases.\n\n  --postgres_database_port TEXT   Postgres port for managed\
    \ development\n                                  databases.\n\n  --file_path DIRECTORY\
    \           Location for files created by Galaxy (e.g.\n                     \
    \             database/files).\n\n  --database_connection TEXT      Database connection\
    \ string to use for\n                                  Galaxy.\n\n  --shed_tool_conf\
    \ TEXT           Location of shed tools conf file for Galaxy.\n  --shed_tool_path\
    \ TEXT           Location of shed tools directory for Galaxy.\n  --galaxy_single_user\
    \ / --no_galaxy_single_user\n                                  By default Planemo\
    \ will configure Galaxy to\n                                  run in single-user\
    \ mode where there is just\n                                  one user and this\
    \ user is automatically\n                                  logged it. Use --no_galaxy_single_user\
    \ to\n                                  prevent Galaxy from running this way.\n\
    \n  --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
    \ FILE                 Location of pid file is executed with\n               \
    \                   --daemon.\n\n  --ignore_dependency_problems    When installing\
    \ shed repositories for\n                                  workflows, ignore dependency\
    \ issues. These\n                                  likely indicate a problem but\
    \ in some cases\n                                  may not prevent a workflow\
    \ from successfully\n                                  executing.\n\n  --skip_client_build\
    \             Do not build Galaxy client when serving\n                      \
    \            Galaxy.\n\n  --shed_install / --no_shed_install\n               \
    \                   By default Planemo will attempt to install\n             \
    \                     repositories needed for workflow testing.\n            \
    \                      This may not be appropriate for production\n          \
    \                        servers and so this can disabled by calling\n       \
    \                           planemo with --no_shed_install.\n\n  --help      \
    \                    Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - docker_build
  positional:
  - !Positional
    optional: false
    position: 0
    name: image.
    description: "% planemo docker_build bowtie2.xml # asssumes Dockerfile in same\
      \ dir\n% planemo docker_shell --from_tag bowtie2.xml"
  named:
  - !Flag
    optional: true
    synonyms:
    - --dockerfile
    - --docker_image_cache
    - --docker_cmd
    description: "Command used to launch docker (defaults to\ndocker)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo docker_build [OPTIONS] TOOL_PATH\n\n  Build (and optionally\
    \ cache) Docker images.\n\n  Loads the tool or tools referenced by ``TOOL_PATH``\
    \ (by default all tools\n  in current directory), and ensures they all reference\
    \ the same Docker\n  image and then attempts to find a Dockerfile for these tools\
    \ (can be\n  explicitly specified with ``--dockerfile`` but by default it will\
    \ check\n  the tool's directory and the current directory as well).\n\n  This\
    \ command will then build and tag the image so it is ready to be tested\n  and\
    \ published. The docker_shell command be used to test out the built\n  image.\n\
    \n      % planemo docker_build bowtie2.xml # asssumes Dockerfile in same dir\n\
    \      % planemo docker_shell --from_tag bowtie2.xml\n\n  This can optionally\
    \ also cache the images.\n\nOptions:\n  --dockerfile TEXT\n  --docker_image_cache\
    \ TEXT\n  --docker_cmd TEXT               Command used to launch docker (defaults\
    \ to\n                                  docker).\n\n  --docker_sudo / --no_docker_sudo\n\
    \                                  Flag to use sudo when running docker.\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --docker_host TEXT         \
    \     Docker host to target when executing docker\n                          \
    \        commands (defaults to localhost).\n\n  --help                       \
    \   Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - dockstore_init
  positional:
  - !Positional
    optional: false
    position: 0
    name: PROJECT
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo dockstore_init [OPTIONS] PROJECT\n\n  Initialize a .dockstore.yml\
    \ configuration file for workflows in directory.\n\n  Walk supplied directory\
    \ and find all Galaxy workflows and test\n  configurations and create a ``.dockstore.yml``\
    \ with references to these\n  files. Be sure to push this file to Github before\
    \ registering your\n  workflow repository with Dockstore.\n\n  Visit Dockstore\
    \ at https://dockstore.org/. Find more about registering\n  workflows with Dockstore\
    \ at https://docs.dockstore.org/en/develop/getting-\n  started/dockstore-workflows.html.\n\
    \nOptions:\n  --help  Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - database_delete
  positional:
  - !Positional
    optional: false
    position: 0
    name: local
    description: all   all                    trust
  named:
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo database_delete [OPTIONS] IDENTIFIER\n\n  Delete a *development*\
    \ database.\n\n  Currently the only implementation is postgres which will be managed\
    \ with\n  ``psql``.\n\n  Planemo ``database_`` commands make it very easy to create\
    \ and destroy\n  databases, therefore it should not be used for production data\
    \ - and it\n  should not even be connnected to a production database server. Planemo\
    \ is\n  intended for development purposes only.\n\n  Planemo will assume that\
    \ it can manage and access postgres databases\n  without specifying a password.\
    \ This can be accomplished by configuring\n  postgres to not required a password\
    \ for the planemo user or by specifying\n  a password in a ``.pgpass`` file.\n\
    \n  Planemo can be configured to not require a password for the planemo user\n\
    \  in the postgres configuration file ``pg_hba.conf`` (on Ubuntu/Debian linux\n\
    \  distros this file is in /etc/postgresql/<postgres_version>/main/\n  directory).\
    \ Adding the following lines to that file will allow planemo and\n  Galaxy to\
    \ access the databases without a password.\n\n      # \"local\" is for Unix domain\
    \ socket connections only\n      local   all   all                    trust\n\
    \      # IPv4 local connections:\n      host    all   all    127.0.0.1/32    trust\n\
    \      # IPv6 local connections:\n      host    all   all    ::1/128         trust\n\
    \n  More information on the ``pg_hda.conf`` configuration file can be found at\n\
    \  http://www.postgresql.org/docs/9.3/static/auth-pg-hba-conf.html.\n\n  Information\
    \ on ``.pgpass`` files can be found at at the following\n  location: http://www.postgresql.org/docs/9.4/static/libpq-pgpass.html.\
    \ In\n  Ubuntu and Debian distros - a postgres user likely already exists and\
    \ its\n  password can be set by setting up a file ``~/.pgpass`` file with the\n\
    \  following contents.\n\n      *:*:*:postgres:<postgres_password>\n\nOptions:\n\
    \  --postgres                      Use postgres database type.\n  --database_type\
    \ [postgres|postgres_docker|sqlite|auto]\n                                  Type\
    \ of database to use for profile -\n                                  'auto',\
    \ 'sqlite', 'postgres', and\n                                  'postgres_docker'\
    \ are available options. Use\n                                  postgres to use\
    \ an existing postgres server\n                                  you user can\
    \ access without a password via\n                                  the psql command.\
    \ Use postgres_docker to\n                                  have Planemo manage\
    \ a docker container\n                                  running postgres. Data\
    \ with postgres_docker\n                                  is not yet persisted\
    \ past when you restart\n                                  the docker container\
    \ launched by Planemo so\n                                  be careful with this\
    \ option.\n\n  --postgres_psql_path TEXT       Name or or path to postgres client\
    \ binary\n                                  (psql).\n\n  --postgres_database_user\
    \ TEXT   Postgres username for managed development\n                         \
    \         databases.\n\n  --postgres_database_host TEXT   Postgres host name for\
    \ managed development\n                                  databases.\n\n  --postgres_database_port\
    \ TEXT   Postgres port for managed development\n                             \
    \     databases.\n\n  --docker_cmd TEXT               Command used to launch docker\
    \ (defaults to\n                                  docker).\n\n  --docker_sudo\
    \ / --no_docker_sudo\n                                  Flag to use sudo when\
    \ running docker.\n  --docker_host TEXT              Docker host to target when\
    \ executing docker\n                                  commands (defaults to localhost).\n\
    \n  --docker_sudo_cmd TEXT          sudo command to use when --docker_sudo is\n\
    \                                  enabled (defaults to sudo).\n\n  --help   \
    \                       Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- &id004 !Command
  command:
  - planemo
  - travis_init
  positional: []
  named: []
  parent: *id001
  subcommands:
  - !Command
    command:
    - planemo
    - travis_init
    - testing.
    positional:
    - !Positional
      optional: false
      position: 0
      name: planemo
      description: ''
    - !Positional
      optional: false
      position: 1
      name: travis_init
      description: ''
    - !Positional
      optional: false
      position: 2
      name: PROJECT
      description: ''
    named: []
    parent: *id004
    subcommands: []
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "Usage: planemo travis_init [OPTIONS] PROJECT\nTry 'planemo travis_init\
      \ --help' for help.\n\nError: no such option: -h\n"
    generated_using: *id005
    docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo travis_init [OPTIONS] PROJECT\n\n  Create files to use\
    \ GitHub/TravisCI testing.\n\n  Setup files in a github tool repository to enable\
    \ continuous integration\n  testing.\n\n      % planemo travis_init .\n      %\
    \ # setup Ubuntu 12.04 w/ dependencies in\n      % vim .travis/setup_custom_dependencies.bash\n\
    \      % git add .travis.yml .travis\n      % git commit -m \"Add Travis CI testing\
    \ infrastructure for tools.\"\n      % git push # and register repository @ http://travis-ci.org/\n\
    \n  These tests were inspired by work original done and documented by Peter\n\
    \  Cock here http://bit.ly/gxtravisci.\n\nOptions:\n  --help  Show this message\
    \ and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - profile_delete
  positional:
  - !Positional
    optional: false
    position: 0
    name: PROFILE_NAME
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo profile_delete [OPTIONS] PROFILE_NAME\n\n  Delete a profile.\n\
    \nOptions:\n  --postgres                      Use postgres database type.\n  --database_type\
    \ [postgres|postgres_docker|sqlite|auto]\n                                  Type\
    \ of database to use for profile -\n                                  'auto',\
    \ 'sqlite', 'postgres', and\n                                  'postgres_docker'\
    \ are available options. Use\n                                  postgres to use\
    \ an existing postgres server\n                                  you user can\
    \ access without a password via\n                                  the psql command.\
    \ Use postgres_docker to\n                                  have Planemo manage\
    \ a docker container\n                                  running postgres. Data\
    \ with postgres_docker\n                                  is not yet persisted\
    \ past when you restart\n                                  the docker container\
    \ launched by Planemo so\n                                  be careful with this\
    \ option.\n\n  --postgres_psql_path TEXT       Name or or path to postgres client\
    \ binary\n                                  (psql).\n\n  --postgres_database_user\
    \ TEXT   Postgres username for managed development\n                         \
    \         databases.\n\n  --postgres_database_host TEXT   Postgres host name for\
    \ managed development\n                                  databases.\n\n  --postgres_database_port\
    \ TEXT   Postgres port for managed development\n                             \
    \     databases.\n\n  --docker_cmd TEXT               Command used to launch docker\
    \ (defaults to\n                                  docker).\n\n  --docker_sudo\
    \ / --no_docker_sudo\n                                  Flag to use sudo when\
    \ running docker.\n  --docker_host TEXT              Docker host to target when\
    \ executing docker\n                                  commands (defaults to localhost).\n\
    \n  --docker_sudo_cmd TEXT          sudo command to use when --docker_sudo is\n\
    \                                  enabled (defaults to sudo).\n\n  --help   \
    \                       Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - list_alias
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the profile_create command) to\nuse\
      \ with this command.  [required]"
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo list_alias [OPTIONS]\n\n  List aliases for a path or\
    \ a workflow or dataset ID. Aliases are\n  associated with a particular planemo\
    \ profile.\n\nOptions:\n  --profile TEXT  Name of profile (created with the profile_create\
    \ command) to\n                  use with this command.  [required]\n\n  --help\
    \          Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - training_fill_data_library
  positional:
  - !Positional
    optional: false
    position: 0
    name: TOOL_PATH
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --topic_name
    description: "Name (directory name) of the topic to create or in\nwhich a tutorial\
      \ should be created or updates\n[required]"
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --tutorial_name
    description: "Name (directory name) of the tutorial to modify\n[required]"
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --zenodo_link
    description: Zenodo URL with the input data
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --datatypes
    description: "YAML file with the correspondance between Zenodo\nextension and\
      \ Galaxy datatypes"
    args: !SimpleFlagArg
      name: PATH
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo training_fill_data_library [OPTIONS] TOOL_PATH\n\n  Build\
    \ training template from workflow.\n\nOptions:\n  --topic_name TEXT     Name (directory\
    \ name) of the topic to create or in\n                        which a tutorial\
    \ should be created or updates\n                        [required]\n\n  --tutorial_name\
    \ TEXT  Name (directory name) of the tutorial to modify\n                    \
    \    [required]\n\n  --zenodo_link TEXT    Zenodo URL with the input data\n  --datatypes\
    \ PATH      YAML file with the correspondance between Zenodo\n               \
    \         extension and Galaxy datatypes\n\n  --help                Show this\
    \ message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - clone
  positional:
  - !Positional
    optional: false
    position: 0
    name: TARGET
    description: ''
  - !Positional
    optional: false
    position: 1
    name: PROJECT
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --fork
    - --skip_fork
    - --branch
    description: Create a named branch on result.
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo clone [OPTIONS] TARGET PROJECT\n\n  Short-cut to quickly\
    \ clone, fork, and branch a relevant Github repo.\n\n  For instance, the following\
    \ will clone, fork, and branch the tools-iuc\n  repository to allow a subsequent\
    \ pull request to fix a problem with bwa.\n\n      $ planemo clone --branch bwa-fix\
    \ tools-iuc\n      $ cd tools-iuc\n      $ # Make changes.\n      $ git add -p\
    \ # Add desired changes.\n      $ git commit -m \"Fix bwa problem.\"\n      $\
    \ planemo pull_request -m \"Fix bwa problem.\"\n\n  These changes do require that\
    \ a github access token is specified in\n  ~/.planemo.yml. An access token can\
    \ be generated by going to\n  https://github.com/settings/tokens.\n\nOptions:\n\
    \  --fork / --skip_fork\n  --branch TEXT         Create a named branch on result.\n\
    \  --help                Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - lint
  positional:
  - !Positional
    optional: false
    position: 0
    name: testing
    description: --fail_level [warn|error]
  - !Positional
    optional: false
    position: 1
    name: process.
    description: -r, --recursive                 Recursively perform command for
  - !Positional
    optional: false
    position: 2
    name: subdirectories.
    description: --urls                          Check validity of URLs in XML files
  named:
  - !Flag
    optional: true
    synonyms:
    - --report_xunit
    description: Output an XUnit report, useful for CI
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - -s
    - --skip
    description: "Comma-separated list of lint tests to skip\n(e.g. passing --skip\
      \ 'citations,xml_order'\nwould skip linting of citations and best-\npractice\
      \ XML ordering."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --xsd
    - --no_xsd
    description: Include tool XSD validation in linting
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --doi
    description: Check validity of DOIs in XML files
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_requirements
    description: "Check tool requirements for availability in\nbest practice Conda\
      \ channels."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --biocontainer
    - --biocontainers
    description: "Check best practice BioContainer namespaces\nfor a container definition\
      \ applicable for\nthis tool."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo lint [OPTIONS] TOOL_PATH\n\n  Check for common errors\
    \ and best practices.\n\nOptions:\n  --report_level [all|warn|error]\n  --report_xunit\
    \ PATH             Output an XUnit report, useful for CI\n                   \
    \               testing\n\n  --fail_level [warn|error]\n  -s, --skip TEXT    \
    \             Comma-separated list of lint tests to skip\n                   \
    \               (e.g. passing --skip 'citations,xml_order'\n                 \
    \                 would skip linting of citations and best-\n                \
    \                  practice XML ordering.\n\n  --xsd / --no_xsd              \
    \  Include tool XSD validation in linting\n                                  process.\n\
    \n  -r, --recursive                 Recursively perform command for\n        \
    \                          subdirectories.\n\n  --urls                       \
    \   Check validity of URLs in XML files\n  --doi                           Check\
    \ validity of DOIs in XML files\n  --conda_requirements            Check tool\
    \ requirements for availability in\n                                  best practice\
    \ Conda channels.\n\n  --biocontainer, --biocontainers\n                     \
    \             Check best practice BioContainer namespaces\n                  \
    \                for a container definition applicable for\n                 \
    \                 this tool.\n\n  --help                          Show this message\
    \ and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - normalize
  positional:
  - !Positional
    optional: false
    position: 0
    name: TOOL_PATH
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - --expand_macros
    description: "Expand macros while normalizing tool XML - useful to see\nhow macros\
      \ are evaluated."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --skip_reorder
    description: "Planemo will reorder top-level tool blocks according to\ntool development\
      \ best practices as part of this command,\nthis flag will disable that behavior."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --skip_reindent
    description: "Planemo will reindent the XML according to tool development\nbest\
      \ practices as part of this command, this flag will\ndisable that behavior."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo normalize [OPTIONS] TOOL_PATH\n\n  Generate normalized\
    \ tool XML from input.\n\n  This will break the formatting of your tool and is\
    \ currently only intended\n  for viewing macro expansions for for use with XSD\
    \ validation (see\n  https://github.com/JeanFred/Galaxy-XSD for instance). Please\
    \ do not use\n  the output as is - it frequently makes tool less readable not\
    \ more.\n\n  The top-level blocks will be reordered and whitespace fixed according\
    \ to\n  the tool development best practices outlined on the Galaxy wiki.\n\n \
    \     % # Print normalized version of tool.\n      % planemo normalize tool.xml\n\
    \      <tool>\n      ...\n      % # Print a variant of tool with all macros expanded\
    \ out, useful for\n      % # debugging complex macros.\n      % planemo normalize\
    \ --expand_macros tool.xml\n      <tool>\n      ...\n\nOptions:\n  --expand_macros\
    \  Expand macros while normalizing tool XML - useful to see\n                \
    \   how macros are evaluated.\n\n  --skip_reorder   Planemo will reorder top-level\
    \ tool blocks according to\n                   tool development best practices\
    \ as part of this command,\n                   this flag will disable that behavior.\n\
    \n  --skip_reindent  Planemo will reindent the XML according to tool development\n\
    \                   best practices as part of this command, this flag will\n \
    \                  disable that behavior.\n\n  --help           Show this message\
    \ and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - training_generate_from_wf
  positional:
  - !Positional
    optional: false
    position: 0
    name: modify
    description: '[required]'
  - !Positional
    optional: false
    position: 1
    name: workflow
    description: --workflow_id TEXT              ID of the workflow on the Galaxy
      instance
  - !Positional
    optional: false
    position: 2
    name: Galaxy.
    description: --galaxy_email TEXT             E-mail address to use when launching
      single-
  - !Positional
    optional: false
    position: 0
    name: resolvers.
    description: --conda_prefix DIRECTORY        Conda prefix to use for conda dependency
  - !Positional
    optional: false
    position: 1
    name: commands.
    description: --conda_exec FILE               Location of conda executable.
  - !Positional
    optional: false
    position: 0
    name: Galaxy.
    description: --shed_tool_conf TEXT           Location of shed tools conf file
      for Galaxy.
  - !Positional
    optional: false
    position: 0
    name: executing.
    description: --skip_client_build             Do not build Galaxy client when serving
  - !Positional
    optional: false
    position: 1
    name: Galaxy.
    description: --shed_install / --no_shed_install
  named:
  - !Flag
    optional: true
    synonyms:
    - --topic_name
    description: "Name (directory name) of the topic to create\nor in which a tutorial\
      \ should be created or\nupdates  [required]"
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --tutorial_name
    description: Name (directory name) of the tutorial to
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --workflow
    description: Workflow of the tutorial (locally)
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --galaxy_url
    description: URL of a Galaxy instance with the workflow
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_api_key
    description: API key on the Galaxy instance with the
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_root
    description: "Root of development galaxy directory to\nexecute command with."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --galaxy_python_version
    description: "[3|3.6|3.7|3.8|3.9]\nPython version to start Galaxy under"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --extra_tools
    description: "Extra tool sources to include in Galaxy's\ntool panel (file or directory).\
      \ These will\nnot be linted/tested/etc... but they will be\navailable to workflows\
      \ and for interactive\nuse."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --install_galaxy
    description: "Download and configure a disposable copy of\nGalaxy from github."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --galaxy_branch
    description: "Branch of Galaxy to target (defaults to\nmaster) if a Galaxy root\
      \ isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_source
    description: "Git source of Galaxy to target (defaults to\nthe official galaxyproject\
      \ github source if\na Galaxy root isn't specified."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --skip_venv
    description: "Do not create or source a virtualenv\nenvironment for Galaxy, this\
      \ should be used\nto preserve an externally configured virtual\nenvironment\
      \ or conda environment."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cache_galaxy
    description: "Skip caching of Galaxy source and\ndependencies obtained with --install_galaxy.\n\
      Not caching this results in faster downloads\n(no git) - so is better on throw\
      \ away\ninstances such with TravisCI."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_cleanup
    description: Do not cleanup temp files created for and by
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker
    - --no_docker
    description: Run Galaxy tools in Docker if enabled.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_cmd
    description: "Command used to launch docker (defaults to\ndocker)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --mulled_containers
    - --biocontainers
    description: "Test tools against mulled containers (forces\n--docker)."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --job_config_file
    description: Job configuration file for Galaxy to target.
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --tool_dependency_dir
    description: Tool dependency dir for Galaxy to target.
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --port
    description: Port to serve Galaxy on (default is 9090).
    args: !SimpleFlagArg
      name: INTEGER
  - !Flag
    optional: true
    synonyms:
    - --host
    description: "Host to bind Galaxy to. Default is 127.0.0.1\nthat is restricted\
      \ to localhost connections\nfor security reasons set to 0.0.0.0 to bind\nGalaxy\
      \ to all ports including potentially\npublicly accessible ones."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --engine
    description: "[galaxy|docker_galaxy|external_galaxy]\nSelect an engine to serve\
      \ artifacts such as\ntools and workflows. Defaults to a local\nGalaxy, but running\
      \ Galaxy within a Docker\ncontainer."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --non_strict_cwl
    description: Disable strict validation of CWL.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_galaxy_image
    description: "Docker image identifier for docker-galaxy-\nflavor used if engine\
      \ type is specified as\n``docker-galaxy``. Defaults to\nquay.io/bgruening/galaxy."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_extra_volume
    description: Extra path to mount if --engine docker.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --test_data
    description: "test-data directory to for specified\ntool(s)."
    args: !SimpleFlagArg
      name: DIRECTORY
  - !Flag
    optional: true
    synonyms:
    - --tool_data_table
    description: "tool_data_table_conf.xml file to for\nspecified tool(s)."
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --dependency_resolvers_config_file
    description: "Dependency resolver configuration for Galaxy\nto target."
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --brew_dependency_resolution
    description: "Configure Galaxy to use plain brew\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --shed_dependency_resolution
    description: "Configure Galaxy to use brewed Tool Shed\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --no_dependency_resolution
    description: Configure Galaxy with no dependency
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_debug
    description: Enable more verbose conda logging.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_channels
    - --conda_ensure_channels
    description: "Ensure conda is configured with specified\ncomma separated list\
      \ of channels."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --conda_use_local
    description: "Use locally built packages while building\nConda environments."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_dependency_resolution
    description: "Configure Galaxy to use only conda for\ndependency resolution."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_copy_dependencies
    description: "Conda dependency resolution for Galaxy will\ncopy dependencies instead\
      \ of attempting to\nlink them."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_install
    - --no_conda_auto_install
    description: "Conda dependency resolution for Galaxy will\nattempt to install\
      \ requested but missing\npackages."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --conda_auto_init
    - --no_conda_auto_init
    description: "Conda dependency resolution for Galaxy will\nauto install conda\
      \ itself using miniconda if\nnot availabe on conda_prefix."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the\nprofile_create command) to use\
      \ with this\ncommand."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --database_connection
    description: Database connection string to use for
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_tool_path
    description: Location of shed tools directory for Galaxy.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_single_user
    - --no_galaxy_single_user
    description: "By default Planemo will configure Galaxy to\nrun in single-user\
      \ mode where there is just\none user and this user is automatically\nlogged\
      \ it. Use --no_galaxy_single_user to\nprevent Galaxy from running this way."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --daemon
    description: Serve Galaxy process as a daemon.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --pid_file
    description: Location of pid file is executed with
    args: !SimpleFlagArg
      name: FILE
  - !Flag
    optional: true
    synonyms:
    - --daemon.
    - --ignore_dependency_problems
    description: When installing shed repositories for
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo training_generate_from_wf [OPTIONS] TOOL_PATH\n\n  Create\
    \ tutorial skeleton from workflow.\n\nOptions:\n  --topic_name TEXT          \
    \     Name (directory name) of the topic to create\n                         \
    \         or in which a tutorial should be created or\n                      \
    \            updates  [required]\n\n  --tutorial_name TEXT            Name (directory\
    \ name) of the tutorial to\n                                  modify  [required]\n\
    \n  --workflow PATH                 Workflow of the tutorial (locally)\n  --galaxy_url\
    \ TEXT               URL of a Galaxy instance with the workflow\n  --galaxy_api_key\
    \ TEXT           API key on the Galaxy instance with the\n                   \
    \               workflow\n\n  --workflow_id TEXT              ID of the workflow\
    \ on the Galaxy instance\n  --galaxy_root DIRECTORY         Root of development\
    \ galaxy directory to\n                                  execute command with.\n\
    \n  --galaxy_python_version [3|3.6|3.7|3.8|3.9]\n                            \
    \      Python version to start Galaxy under\n  --extra_tools PATH            \
    \  Extra tool sources to include in Galaxy's\n                               \
    \   tool panel (file or directory). These will\n                             \
    \     not be linted/tested/etc... but they will be\n                         \
    \         available to workflows and for interactive\n                       \
    \           use.\n\n  --install_galaxy                Download and configure a\
    \ disposable copy of\n                                  Galaxy from github.\n\n\
    \  --galaxy_branch TEXT            Branch of Galaxy to target (defaults to\n \
    \                                 master) if a Galaxy root isn't specified.\n\n\
    \  --galaxy_source TEXT            Git source of Galaxy to target (defaults to\n\
    \                                  the official galaxyproject github source if\n\
    \                                  a Galaxy root isn't specified.\n\n  --skip_venv\
    \                     Do not create or source a virtualenv\n                 \
    \                 environment for Galaxy, this should be used\n              \
    \                    to preserve an externally configured virtual\n          \
    \                        environment or conda environment.\n\n  --no_cache_galaxy\
    \               Skip caching of Galaxy source and\n                          \
    \        dependencies obtained with --install_galaxy.\n                      \
    \            Not caching this results in faster downloads\n                  \
    \                (no git) - so is better on throw away\n                     \
    \             instances such with TravisCI.\n\n  --no_cleanup                \
    \    Do not cleanup temp files created for and by\n                          \
    \        Galaxy.\n\n  --galaxy_email TEXT             E-mail address to use when\
    \ launching single-\n                                  user Galaxy server.\n\n\
    \  --docker / --no_docker          Run Galaxy tools in Docker if enabled.\n  --docker_cmd\
    \ TEXT               Command used to launch docker (defaults to\n            \
    \                      docker).\n\n  --docker_sudo / --no_docker_sudo\n      \
    \                            Flag to use sudo when running docker.\n  --docker_host\
    \ TEXT              Docker host to target when executing docker\n            \
    \                      commands (defaults to localhost).\n\n  --docker_sudo_cmd\
    \ TEXT          sudo command to use when --docker_sudo is\n                  \
    \                enabled (defaults to sudo).\n\n  --mulled_containers, --biocontainers\n\
    \                                  Test tools against mulled containers (forces\n\
    \                                  --docker).\n\n  --job_config_file FILE    \
    \      Job configuration file for Galaxy to target.\n  --tool_dependency_dir DIRECTORY\n\
    \                                  Tool dependency dir for Galaxy to target.\n\
    \  --port INTEGER                  Port to serve Galaxy on (default is 9090).\n\
    \  --host TEXT                     Host to bind Galaxy to. Default is 127.0.0.1\n\
    \                                  that is restricted to localhost connections\n\
    \                                  for security reasons set to 0.0.0.0 to bind\n\
    \                                  Galaxy to all ports including potentially\n\
    \                                  publicly accessible ones.\n\n  --engine [galaxy|docker_galaxy|external_galaxy]\n\
    \                                  Select an engine to serve artifacts such as\n\
    \                                  tools and workflows. Defaults to a local\n\
    \                                  Galaxy, but running Galaxy within a Docker\n\
    \                                  container.\n\n  --non_strict_cwl          \
    \      Disable strict validation of CWL.\n  --docker_galaxy_image TEXT      Docker\
    \ image identifier for docker-galaxy-\n                                  flavor\
    \ used if engine type is specified as\n                                  ``docker-galaxy``.\
    \ Defaults to\n                                  quay.io/bgruening/galaxy.\n\n\
    \  --docker_extra_volume PATH      Extra path to mount if --engine docker.\n \
    \ --test_data DIRECTORY           test-data directory to for specified\n     \
    \                             tool(s).\n\n  --tool_data_table PATH          tool_data_table_conf.xml\
    \ file to for\n                                  specified tool(s).\n\n  --dependency_resolvers_config_file\
    \ FILE\n                                  Dependency resolver configuration for\
    \ Galaxy\n                                  to target.\n\n  --brew_dependency_resolution\
    \    Configure Galaxy to use plain brew\n                                  dependency\
    \ resolution.\n\n  --shed_dependency_resolution    Configure Galaxy to use brewed\
    \ Tool Shed\n                                  dependency resolution.\n\n  --no_dependency_resolution\
    \      Configure Galaxy with no dependency\n                                 \
    \ resolvers.\n\n  --conda_prefix DIRECTORY        Conda prefix to use for conda\
    \ dependency\n                                  commands.\n\n  --conda_exec FILE\
    \               Location of conda executable.\n  --conda_debug               \
    \    Enable more verbose conda logging.\n  --conda_channels, --conda_ensure_channels\
    \ TEXT\n                                  Ensure conda is configured with specified\n\
    \                                  comma separated list of channels.\n\n  --conda_use_local\
    \               Use locally built packages while building\n                  \
    \                Conda environments.\n\n  --conda_dependency_resolution   Configure\
    \ Galaxy to use only conda for\n                                  dependency resolution.\n\
    \n  --conda_copy_dependencies       Conda dependency resolution for Galaxy will\n\
    \                                  copy dependencies instead of attempting to\n\
    \                                  link them.\n\n  --conda_auto_install / --no_conda_auto_install\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  attempt to install requested but missing\n\
    \                                  packages.\n\n  --conda_auto_init / --no_conda_auto_init\n\
    \                                  Conda dependency resolution for Galaxy will\n\
    \                                  auto install conda itself using miniconda if\n\
    \                                  not availabe on conda_prefix.\n\n  --profile\
    \ TEXT                  Name of profile (created with the\n                  \
    \                profile_create command) to use with this\n                  \
    \                command.\n\n  --postgres                      Use postgres database\
    \ type.\n  --database_type [postgres|postgres_docker|sqlite|auto]\n          \
    \                        Type of database to use for profile -\n             \
    \                     'auto', 'sqlite', 'postgres', and\n                    \
    \              'postgres_docker' are available options. Use\n                \
    \                  postgres to use an existing postgres server\n             \
    \                     you user can access without a password via\n           \
    \                       the psql command. Use postgres_docker to\n           \
    \                       have Planemo manage a docker container\n             \
    \                     running postgres. Data with postgres_docker\n          \
    \                        is not yet persisted past when you restart\n        \
    \                          the docker container launched by Planemo so\n     \
    \                             be careful with this option.\n\n  --postgres_psql_path\
    \ TEXT       Name or or path to postgres client binary\n                     \
    \             (psql).\n\n  --postgres_database_user TEXT   Postgres username for\
    \ managed development\n                                  databases.\n\n  --postgres_database_host\
    \ TEXT   Postgres host name for managed development\n                        \
    \          databases.\n\n  --postgres_database_port TEXT   Postgres port for managed\
    \ development\n                                  databases.\n\n  --file_path DIRECTORY\
    \           Location for files created by Galaxy (e.g.\n                     \
    \             database/files).\n\n  --database_connection TEXT      Database connection\
    \ string to use for\n                                  Galaxy.\n\n  --shed_tool_conf\
    \ TEXT           Location of shed tools conf file for Galaxy.\n  --shed_tool_path\
    \ TEXT           Location of shed tools directory for Galaxy.\n  --galaxy_single_user\
    \ / --no_galaxy_single_user\n                                  By default Planemo\
    \ will configure Galaxy to\n                                  run in single-user\
    \ mode where there is just\n                                  one user and this\
    \ user is automatically\n                                  logged it. Use --no_galaxy_single_user\
    \ to\n                                  prevent Galaxy from running this way.\n\
    \n  --daemon                        Serve Galaxy process as a daemon.\n  --pid_file\
    \ FILE                 Location of pid file is executed with\n               \
    \                   --daemon.\n\n  --ignore_dependency_problems    When installing\
    \ shed repositories for\n                                  workflows, ignore dependency\
    \ issues. These\n                                  likely indicate a problem but\
    \ in some cases\n                                  may not prevent a workflow\
    \ from successfully\n                                  executing.\n\n  --skip_client_build\
    \             Do not build Galaxy client when serving\n                      \
    \            Galaxy.\n\n  --shed_install / --no_shed_install\n               \
    \                   By default Planemo will attempt to install\n             \
    \                     repositories needed for workflow testing.\n            \
    \                      This may not be appropriate for production\n          \
    \                        servers and so this can disabled by calling\n       \
    \                           planemo with --no_shed_install.\n\n  --help      \
    \                    Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - profile_create
  positional:
  - !Positional
    optional: false
    position: 0
    name: container.
    description: --docker_cmd TEXT               Command used to launch docker (defaults
      to
  - !Positional
    optional: false
    position: 0
    name: engine.
    description: --help                          Show this message and exit.
  named:
  - !Flag
    optional: true
    synonyms:
    - --postgres
    description: Use postgres database type.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --database_type
    description: "[postgres|postgres_docker|sqlite|auto]\nType of database to use\
      \ for profile -\n'auto', 'sqlite', 'postgres', and\n'postgres_docker' are available\
      \ options. Use\npostgres to use an existing postgres server\nyou user can access\
      \ without a password via\nthe psql command. Use postgres_docker to\nhave Planemo\
      \ manage a docker container\nrunning postgres. Data with postgres_docker\nis\
      \ not yet persisted past when you restart\nthe docker container launched by\
      \ Planemo so\nbe careful with this option."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --postgres_psql_path
    description: "Name or or path to postgres client binary\n(psql)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --postgres_database_user
    description: Postgres username for managed development
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo
    - --no_docker_sudo
    description: Flag to use sudo when running docker.
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --docker_host
    description: "Docker host to target when executing docker\ncommands (defaults\
      \ to localhost)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --docker_sudo_cmd
    description: "sudo command to use when --docker_sudo is\nenabled (defaults to\
      \ sudo)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_url
    description: "Remote Galaxy URL to use with external\nGalaxy engine."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_user_key
    description: User key to use with external Galaxy engine.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --galaxy_admin_key
    description: Admin key to use with external Galaxy
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag:
  usage_flag:
  version_flag:
  help_text: "Usage: planemo profile_create [OPTIONS] PROFILE_NAME\n\n  Create a profile.\n\
    \nOptions:\n  --postgres                      Use postgres database type.\n  --database_type\
    \ [postgres|postgres_docker|sqlite|auto]\n                                  Type\
    \ of database to use for profile -\n                                  'auto',\
    \ 'sqlite', 'postgres', and\n                                  'postgres_docker'\
    \ are available options. Use\n                                  postgres to use\
    \ an existing postgres server\n                                  you user can\
    \ access without a password via\n                                  the psql command.\
    \ Use postgres_docker to\n                                  have Planemo manage\
    \ a docker container\n                                  running postgres. Data\
    \ with postgres_docker\n                                  is not yet persisted\
    \ past when you restart\n                                  the docker container\
    \ launched by Planemo so\n                                  be careful with this\
    \ option.\n\n  --postgres_psql_path TEXT       Name or or path to postgres client\
    \ binary\n                                  (psql).\n\n  --postgres_database_user\
    \ TEXT   Postgres username for managed development\n                         \
    \         databases.\n\n  --postgres_database_host TEXT   Postgres host name for\
    \ managed development\n                                  databases.\n\n  --postgres_database_port\
    \ TEXT   Postgres port for managed development\n                             \
    \     databases.\n\n  --engine [galaxy|docker_galaxy|external_galaxy]\n      \
    \                            Select an engine to serve artifacts such as\n   \
    \                               tools and workflows. Defaults to a local\n   \
    \                               Galaxy, but running Galaxy within a Docker\n \
    \                                 container.\n\n  --docker_cmd TEXT          \
    \     Command used to launch docker (defaults to\n                           \
    \       docker).\n\n  --docker_sudo / --no_docker_sudo\n                     \
    \             Flag to use sudo when running docker.\n  --docker_host TEXT    \
    \          Docker host to target when executing docker\n                     \
    \             commands (defaults to localhost).\n\n  --docker_sudo_cmd TEXT  \
    \        sudo command to use when --docker_sudo is\n                         \
    \         enabled (defaults to sudo).\n\n  --galaxy_url TEXT               Remote\
    \ Galaxy URL to use with external\n                                  Galaxy engine.\n\
    \n  --galaxy_user_key TEXT          User key to use with external Galaxy engine.\n\
    \  --galaxy_admin_key TEXT         Admin key to use with external Galaxy\n   \
    \                               engine.\n\n  --help                          Show\
    \ this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - shed_diff
  positional:
  - !Positional
    optional: false
    position: 0
    name: directories.
    description: --fail_fast                If multiple repositories are specified
      and an
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: Recursively perform command for nested repository
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --owner
    description: Tool Shed repository owner (username).
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --name
    description: "Tool Shed repository name (defaults to the\ninferred tool directory\
      \ name)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_email
    description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key
    description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
      \ and password is specified.\nThis key can be specified with either --shed_key\n\
      or --shed_key_from_env."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key_from_env
    description: "Environment variable to read API key for Tool\nShed access from."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_password
    description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -t
    - --shed_target
    description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local'\
      \ (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined\
      \ ~/.planemo.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -o
    - --output
    description: Send diff output to specified file.
    args: !SimpleFlagArg
      name: PATH
  - !Flag
    optional: true
    synonyms:
    - --shed_target_source
    description: "Source Tool Shed to diff against (will ignore\nlocal project info\
      \ specified). To compare the\nmain Tool Shed against the test, set this to\n\
      testtoolshed."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --raw
    description: "Do not attempt smart diff of XML to filter out\nattributes populated\
      \ by the Tool Shed."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --report_xunit
    description: Output an XUnit report, useful for CI testing
    args: !SimpleFlagArg
      name: PATH
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo shed_diff [OPTIONS] PROJECT\n\n  diff between local repository\
    \ and Tool Shed.\n\n  By default, this will produce a diff between this repository\
    \ and what\n  would be uploaded to the Tool Shed with the `shed_upload` command\
    \ - but\n  this command can be made to compare other combinations of repositories.\n\
    \  Here are some examples\n\n      $ # diff for this repository and the main Tool\
    \ Shed\n      $ planemo shed_diff\n      $ # diff for this repository and the\
    \ test Tool Shed\n      $ planemo shed_diff --shed_target testtoolshed\n     \
    \ $ # diff for the test Tool Shed and main Tool Shed\n      $ planemo shed_diff\
    \ --shed_target_source testtoolshed\n      $ # diff for two an explicitly specified\
    \ repositories (ignores\n      $ # current project's shed YAML file.)\n      $\
    \ planemo shed_diff --owner peterjc --name blast_rbh\n          --shed_target_source\
    \ testtoolshed\n\n  This command will return an exit code of:\n\n  - 0 if there\
    \ are no detected differences. - 1 if there are differences. -\n  2 if the target\
    \ repository doesn't exist. - >200 if there are errors\n  attempting to perform\
    \ a diff.\n\n  **Warning:** ``shed_diff`` doesn't inspect repository metadata,\
    \ this\n  difference applies only to the file contents of files that would actually\n\
    \  be uploaded to the repository.\n\nOptions:\n  -r, --recursive            Recursively\
    \ perform command for nested repository\n                             directories.\n\
    \n  --fail_fast                If multiple repositories are specified and an\n\
    \                             error occurs stop immediately instead of\n     \
    \                        processing remaining repositories.\n\n  --owner TEXT\
    \               Tool Shed repository owner (username).\n  --name TEXT        \
    \        Tool Shed repository name (defaults to the\n                        \
    \     inferred tool directory name).\n\n  --shed_email TEXT          E-mail for\
    \ Tool Shed auth (required unless\n                             shed_key is specified).\n\
    \n  --shed_key TEXT            API key for Tool Shed access. An API key is\n \
    \                            required unless e-mail and password is specified.\n\
    \                             This key can be specified with either --shed_key\n\
    \                             or --shed_key_from_env.\n\n  --shed_key_from_env\
    \ TEXT   Environment variable to read API key for Tool\n                     \
    \        Shed access from.\n\n  --shed_password TEXT       Password for Tool Shed\
    \ auth (required unless\n                             shed_key is specified).\n\
    \n  -t, --shed_target TEXT     Tool Shed to target (this can be 'toolshed',\n\
    \                             'testtoolshed', 'local' (alias for\n           \
    \                  http://localhost:9009/), an arbitrary url or\n            \
    \                 mappings defined ~/.planemo.yml.\n\n  -o, --output PATH    \
    \      Send diff output to specified file.\n  --shed_target_source TEXT  Source\
    \ Tool Shed to diff against (will ignore\n                             local project\
    \ info specified). To compare the\n                             main Tool Shed\
    \ against the test, set this to\n                             testtoolshed.\n\n\
    \  --raw                      Do not attempt smart diff of XML to filter out\n\
    \                             attributes populated by the Tool Shed.\n\n  --report_xunit\
    \ PATH        Output an XUnit report, useful for CI testing\n  --help        \
    \             Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - workflow_job_init
  positional:
  - !Positional
    optional: false
    position: 0
    name: WORKFLOW_PATH_OR_ID
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - -f
    - --force
    description: Overwrite existing files if present.
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -o
    - --output
    - --help
    description: Show this message and exit.
    args: !SimpleFlagArg
      name: FILE
  usage_flag:
  version_flag:
  help_text: "Usage: planemo workflow_job_init [OPTIONS] WORKFLOW_PATH_OR_ID\n\n \
    \ Initialize a Galaxy workflow job description for supplied workflow.\n\n  Be\
    \ sure to your lint your workflow with ``workflow_lint`` before calling\n  this\
    \ to ensure inputs and outputs comply with best practices that make\n  workflow\
    \ testing easier.\n\n  Jobs can be run with the planemo run command (``planemo\
    \ run workflow.ga\n  job.yml``). Planemo run works with Galaxy tools and CWL artifacts\
    \ (both\n  tools and workflows) as well so this command may be renamed to to job_init\n\
    \  at something along those lines at some point.\n\nOptions:\n  -f, --force  \
    \      Overwrite existing files if present.\n  -o, --output FILE\n  --help   \
    \          Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - delete_alias
  positional: []
  named:
  - !Flag
    optional: true
    synonyms:
    - --alias
    description: Name of an alias.  [required]
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --profile
    description: "Name of profile (created with the profile_create command) to\nuse\
      \ with this command.  [required]"
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo delete_alias [OPTIONS]\n\n  List aliases for a path or\
    \ a workflow or dataset ID. Aliases are\n  associated with a particular planemo\
    \ profile.\n\nOptions:\n  --alias TEXT    Name of an alias.  [required]\n  --profile\
    \ TEXT  Name of profile (created with the profile_create command) to\n       \
    \           use with this command.  [required]\n\n  --help          Show this\
    \ message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - shed_upload
  positional:
  - !Positional
    optional: false
    position: 0
    name: '117'
    description: 'Options:'
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: "Recursively perform command for nested\nrepository directories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --fail_fast
    description: "If multiple repositories are specified and an\nerror occurs stop\
      \ immediately instead of\nprocessing remaining repositories."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --owner
    description: Tool Shed repository owner (username).
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --name
    description: "Tool Shed repository name (defaults to the\ninferred tool directory\
      \ name)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_email
    description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key
    description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
      \ and password is\nspecified. This key can be specified with\neither --shed_key\
      \ or --shed_key_from_env."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key_from_env
    description: "Environment variable to read API key for Tool\nShed access from."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_password
    description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -t
    - --shed_target
    description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local'\
      \ (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined\
      \ ~/.planemo.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -m
    - --message
    description: Commit message for tool shed upload.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --force_repository_creation
    description: "If a repository cannot be found for the\nspecified user/repo name\
      \ pair, then\nautomatically create the repository in the\ntoolshed."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --check_diff
    description: "Skip uploading if the shed_diff detects there\nwould be no 'difference'\
      \ (only attributes\npopulated by the shed would be updated.)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --tar_only
    description: "Produce tar file for upload but do not publish\nto a tool shed."
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --tar
    description: "Specify a pre-existing tar file instead of\nautomatically building\
      \ one as part of this\ncommand."
    args: !SimpleFlagArg
      name: FILE
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo shed_upload [OPTIONS] PROJECT\n\n  Low-level command\
    \ to upload tarballs.\n\n  Generally, ``shed_update`` should be used instead since\
    \ it also updates\n  both tool shed contents (via tar ball generation and upload)\
    \ as well as\n  metadata (to handle metadata changes in ``.shed.yml`` files).\n\
    \n      % planemo shed_upload --tar_only  ~/\n      % tar -tzf shed_upload.tar.gz\n\
    \      test-data/blastdb.loc\n      ...\n      tools/ncbi_blast_plus/tool_dependencies.xml\n\
    \      % tar -tzf shed_upload.tar.gz | wc -l\n      117\n\nOptions:\n  -r, --recursive\
    \              Recursively perform command for nested\n                      \
    \         repository directories.\n\n  --fail_fast                  If multiple\
    \ repositories are specified and an\n                               error occurs\
    \ stop immediately instead of\n                               processing remaining\
    \ repositories.\n\n  --owner TEXT                 Tool Shed repository owner (username).\n\
    \  --name TEXT                  Tool Shed repository name (defaults to the\n \
    \                              inferred tool directory name).\n\n  --shed_email\
    \ TEXT            E-mail for Tool Shed auth (required unless\n               \
    \                shed_key is specified).\n\n  --shed_key TEXT              API\
    \ key for Tool Shed access. An API key is\n                               required\
    \ unless e-mail and password is\n                               specified. This\
    \ key can be specified with\n                               either --shed_key\
    \ or --shed_key_from_env.\n\n  --shed_key_from_env TEXT     Environment variable\
    \ to read API key for Tool\n                               Shed access from.\n\
    \n  --shed_password TEXT         Password for Tool Shed auth (required unless\n\
    \                               shed_key is specified).\n\n  -t, --shed_target\
    \ TEXT       Tool Shed to target (this can be 'toolshed',\n                  \
    \             'testtoolshed', 'local' (alias for\n                           \
    \    http://localhost:9009/), an arbitrary url or\n                          \
    \     mappings defined ~/.planemo.yml.\n\n  -m, --message TEXT           Commit\
    \ message for tool shed upload.\n  --force_repository_creation  If a repository\
    \ cannot be found for the\n                               specified user/repo\
    \ name pair, then\n                               automatically create the repository\
    \ in the\n                               toolshed.\n\n  --check_diff         \
    \        Skip uploading if the shed_diff detects there\n                     \
    \          would be no 'difference' (only attributes\n                       \
    \        populated by the shed would be updated.)\n\n  --tar_only            \
    \       Produce tar file for upload but do not publish\n                     \
    \          to a tool shed.\n\n  --tar FILE                   Specify a pre-existing\
    \ tar file instead of\n                               automatically building one\
    \ as part of this\n                               command.\n\n  --help       \
    \                Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - shed_create
  positional:
  - !Positional
    optional: false
    position: 0
    name: directories.
    description: --fail_fast               If multiple repositories are specified
      and an
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    - --recursive
    description: Recursively perform command for nested repository
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --owner
    description: Tool Shed repository owner (username).
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --name
    description: "Tool Shed repository name (defaults to the\ninferred tool directory\
      \ name)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_email
    description: "E-mail for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key
    description: "API key for Tool Shed access. An API key is\nrequired unless e-mail\
      \ and password is specified.\nThis key can be specified with either --shed_key\n\
      or --shed_key_from_env."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_key_from_env
    description: "Environment variable to read API key for Tool Shed\naccess from."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --shed_password
    description: "Password for Tool Shed auth (required unless\nshed_key is specified)."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -t
    - --shed_target
    description: "Tool Shed to target (this can be 'toolshed',\n'testtoolshed', 'local'\
      \ (alias for\nhttp://localhost:9009/), an arbitrary url or\nmappings defined\
      \ ~/.planemo.yml."
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - -m
    - --message
    description: Commit message for tool shed upload.
    args: !SimpleFlagArg
      name: TEXT
  - !Flag
    optional: true
    synonyms:
    - --skip_upload
    description: "Skip upload contents as part of operation, only\nupdate metadata."
    args: !EmptyFlagArg {}
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo shed_create [OPTIONS] PROJECT\n\n  Create a repository\
    \ in a Galaxy Tool Shed.\n\n  This will read the settings from the ``.shed.yml``\
    \ file.\n\nOptions:\n  -r, --recursive           Recursively perform command for\
    \ nested repository\n                            directories.\n\n  --fail_fast\
    \               If multiple repositories are specified and an\n              \
    \              error occurs stop immediately instead of\n                    \
    \        processing remaining repositories.\n\n  --owner TEXT              Tool\
    \ Shed repository owner (username).\n  --name TEXT               Tool Shed repository\
    \ name (defaults to the\n                            inferred tool directory name).\n\
    \n  --shed_email TEXT         E-mail for Tool Shed auth (required unless\n   \
    \                         shed_key is specified).\n\n  --shed_key TEXT       \
    \    API key for Tool Shed access. An API key is\n                           \
    \ required unless e-mail and password is specified.\n                        \
    \    This key can be specified with either --shed_key\n                      \
    \      or --shed_key_from_env.\n\n  --shed_key_from_env TEXT  Environment variable\
    \ to read API key for Tool Shed\n                            access from.\n\n\
    \  --shed_password TEXT      Password for Tool Shed auth (required unless\n  \
    \                          shed_key is specified).\n\n  -t, --shed_target TEXT\
    \    Tool Shed to target (this can be 'toolshed',\n                          \
    \  'testtoolshed', 'local' (alias for\n                            http://localhost:9009/),\
    \ an arbitrary url or\n                            mappings defined ~/.planemo.yml.\n\
    \n  -m, --message TEXT        Commit message for tool shed upload.\n  --skip_upload\
    \             Skip upload contents as part of operation, only\n              \
    \              update metadata.\n\n  --help                    Show this message\
    \ and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - share_test
  positional:
  - !Positional
    optional: false
    position: 0
    name: FILE_PATH
    description: ''
  named: []
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo share_test [OPTIONS] FILE_PATH\n\n  Publish JSON test\
    \ results as sharable Gist.\n\n  This will upload the JSON test results to Github\
    \ as a Gist and produce\n  sharable URL.\n\n  The sharable URL can be used to\
    \ share an HTML version of the report that\n  can be easily embedded in pull requests\
    \ or commit messages.\n\n  Requires a ~/.planemo.yml with a Github access token\
    \ defined in a 'github'\n  section of that configuration file. An access token\
    \ can be generated by\n  going to https://github.com/settings/tokens.\n\nOptions:\n\
    \  --help  Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
- !Command
  command:
  - planemo
  - pull_request
  positional:
  - !Positional
    optional: false
    position: 0
    name: PROJECT
    description: ''
  named:
  - !Flag
    optional: true
    synonyms:
    - -m
    - --message
    description: Message describing the pull request to create.
    args: !SimpleFlagArg
      name: TEXT
  parent: *id001
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - --help
    description: Show this message and exit.
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Usage: planemo pull_request [OPTIONS] PROJECT\n\n  Short-cut to quickly\
    \ create a pull request for a relevant Github repo.\n\n  For instance, the following\
    \ will clone, fork, and branch the tools-iuc\n  repository to allow a subsequent\
    \ pull request to fix a problem with bwa.\n\n      $ planemo clone --branch bwa-fix\
    \ tools-iuc\n      $ cd tools-iuc\n      $ # Make changes.\n      $ git add -p\
    \ # Add desired changes.\n      $ git commit -m \"Fix bwa problem.\"\n      $\
    \ planemo pull_request -m \"Fix bwa problem.\"\n\n  These changes do require that\
    \ a github access token is specified in\n  ~/.planemo.yml. An access token can\
    \ be generated by going to\n  https://github.com/settings/tokens.\n\nOptions:\n\
    \  -m, --message TEXT  Message describing the pull request to create.\n  --help\
    \              Show this message and exit.\n"
  generated_using: *id002
  docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - --help
  description: Show this message and exit.
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - --version
  description: Show the version and exit.
  args: !EmptyFlagArg {}
help_text: "Usage: planemo [OPTIONS] COMMAND [ARGS]...\n\n  A command-line toolkit\
  \ for building tools and workflows for Galaxy.\n\n  Check out the full documentation\
  \ for Planemo online\n  http://planemo.readthedocs.org or open with ``planemo docs``.\n\
  \n  All the individual planemo commands support the ``--help`` option, for\n  example\
  \ use ``planemo lint --help`` for more details on checking tools.\n\nOptions:\n\
  \  --version         Show the version and exit.\n  -v, --verbose     Enables verbose\
  \ mode.\n  --config TEXT     Planemo configuration YAML file.\n  --directory TEXT\
  \  Workspace for planemo.\n  --help            Show this message and exit.\n\nCommands:\n\
  \  ci_find_repos               Find all shed repositories in one or more...\n  ci_find_tools\
  \               Find all tools in one or more directories.\n  clone            \
  \           Short-cut to quickly clone, fork, and branch\n                     \
  \         a...\n\n  conda_build                 Perform conda build with Planemo's\
  \ conda.\n  conda_env                   Activate a conda environment for tool.\n\
  \  conda_init                  Download and install conda.\n  conda_install    \
  \           Install conda packages for tool requirements.\n  conda_lint        \
  \          Check conda recipe for common issues.\n  conda_search               \
  \ Perform conda search with Planemo's conda.\n  config_init                 Initialise\
  \ global configuration for Planemo.\n  container_register          Register multi-requirement\
  \ containers as...\n  create_alias                Add an alias for a path or a workflow\
  \ or...\n  create_gist                 Upload file to GitHub as a sharable gist.\n\
  \  database_create             Create a *development* database.\n  database_delete\
  \             Delete a *development* database.\n  database_list               List\
  \ databases in configured database source.\n  delete_alias                List aliases\
  \ for a path or a workflow or...\n  docker_build                Build (and optionally\
  \ cache) Docker images.\n  docker_shell                Launch shell in Docker container\
  \ for a tool.\n  dockstore_init              Initialize a .dockstore.yml configuration\n\
  \                              file...\n\n  docs                        Open Planemo\
  \ documentation in web browser.\n  lint                        Check for common\
  \ errors and best practices.\n  list_alias                  List aliases for a path\
  \ or a workflow or...\n  list_invocations            Get a list of invocations for\
  \ a particular...\n  list_repos                  Find all shed repositories in one\
  \ or more...\n  merge_test_reports          Merge tool_test_output.json files from...\n\
  \  mull                        Build containers for specified tools.\n  mulled_init\
  \                 Download and install involucro for mull...\n  normalize      \
  \             Generate normalized tool XML from input.\n  open                 \
  \       Open latest Planemo test results in a web...\n  profile_create         \
  \     Create a profile.\n  profile_delete              Delete a profile.\n  profile_list\
  \                List configured profile names.\n  project_init                (Experimental)\
  \ Initialize a new tool project.\n  pull_request                Short-cut to quickly\
  \ create a pull request\n                              for...\n\n  run         \
  \                Planemo command for running tools and jobs.\n  serve          \
  \             Launch Galaxy instance with specified tools.\n  share_test       \
  \           Publish JSON test results as sharable Gist.\n  shed_build          \
  \        Create a Galaxy tool tarball.\n  shed_create                 Create a repository\
  \ in a Galaxy Tool Shed.\n  shed_diff                   diff between local repository\
  \ and Tool Shed.\n  shed_download               Download tool from Tool Shed into\
  \ directory.\n  shed_init                   Bootstrap new Tool Shed .shed.yml file.\n\
  \  shed_lint                   Check Tool Shed repository for common issues.\n \
  \ shed_serve                  Launch Galaxy with Tool Shed dependencies.\n  shed_test\
  \                   Run tests of published shed artifacts.\n  shed_update      \
  \           Update Tool Shed repository.\n  shed_upload                 Low-level\
  \ command to upload tarballs.\n  syntax                      Open tool config syntax\
  \ page in web browser.\n  test                        Run specified tool's tests\
  \ within Galaxy.\n  test_reports                Generate human readable tool test\
  \ reports.\n  tool_init                   Generate tool outline from given arguments.\n\
  \  training_fill_data_library  Build training template from workflow.\n  training_generate_from_wf\
  \   Create tutorial skeleton from workflow.\n  training_init               Build\
  \ training template from workflow.\n  travis_before_install       Internal command\
  \ for GitHub/TravisCI testing.\n  travis_init                 Create files to use\
  \ GitHub/TravisCI testing.\n  workflow_convert            Convert Format 2 workflows\
  \ to native Galaxy...\n  workflow_edit               Open a synchronized Galaxy\
  \ workflow editor.\n  workflow_job_init           Initialize a Galaxy workflow job\
  \ description...\n  workflow_lint               Check workflows for syntax errors\
  \ and best...\n  workflow_test_init          Initialize a Galaxy workflow test description...\n\
  \  workflow_upload             Upload workflows to github organization.\n"
generated_using: *id002
docker_image: quay.io/biocontainers/planemo:0.74.3--py_0
