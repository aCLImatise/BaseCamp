!Command
command: &id001
- AMAS.py
positional: []
named: []
parent:
subcommands:
- !Command
  command: &id002
  - AMAS.py
  - split
  positional:
  - !Positional
    optional: false
    position: 0
    name: check
    description: -c CORES, --cores CORES
  named:
  - !Flag
    optional: true
    synonyms:
    - -l
    - --split-by
    description: "File name for partitions to be used for alignment\nsplitting."
    args: !SimpleFlagArg
      name: SPLIT_BY
  - !Flag
    optional: true
    synonyms:
    - -j
    - --remove-empty
    description: "Remove taxa with sequences composed of only\nundetermined characters?\
      \ Default: Don't remove"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -u
    - --out-format
    description: 'File format for the output alignment. Default: fasta'
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -e
    - --check-align
    description: 'Check if input sequences are aligned. Default: no'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -i
    - --in-files
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    args: !RepeatFlagArg
      name: IN_FILES
  - !Flag
    optional: true
    synonyms:
    - -f
    - --in-format
    description: The format of input alignment
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -d
    - --data-type
    description: "Type of data\n"
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
  parent: &id014 !Command
    command: *id001
    positional: []
    named: []
    parent:
    subcommands:
    - !Command
      command: *id002
      positional:
      - !Positional
        optional: false
        position: 0
        name: check
        description: -c CORES, --cores CORES
      named:
      - !Flag
        optional: true
        synonyms:
        - -i
        - -f
        description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
        args: !RepeatFlagArg
          name: IN_FILES
      - !Flag
        optional: true
        synonyms:
        - -l
        - --split-by
        description: "File name for partitions to be used for alignment\nsplitting."
        args: !SimpleFlagArg
          name: SPLIT_BY
      - !Flag
        optional: true
        synonyms:
        - -j
        - --remove-empty
        description: "Remove taxa with sequences composed of only\nundetermined characters?\
          \ Default: Don't remove"
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -u
        - --out-format
        description: 'File format for the output alignment. Default: fasta'
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -e
        - --check-align
        description: 'Check if input sequences are aligned. Default: no'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -i
        - --in-files
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        args: !RepeatFlagArg
          name: IN_FILES
      - !Flag
        optional: true
        synonyms:
        - -f
        - --in-format
        description: The format of input alignment
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -d
        - --data-type
        description: "Type of data\n"
        args: !ChoiceFlagArg
          choices: !!set
            ? dna
            ? aa
      parent: &id013 !Command
        command: *id001
        positional: []
        named: []
        parent:
        subcommands:
        - !Command
          command: *id002
          positional:
          - !Positional
            optional: false
            position: 0
            name: check
            description: -c CORES, --cores CORES
          named:
          - !Flag
            optional: true
            synonyms:
            - -i
            - -f
            description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
            args: !RepeatFlagArg
              name: IN_FILES
          - !Flag
            optional: true
            synonyms:
            - -l
            - --split-by
            description: "File name for partitions to be used for alignment\nsplitting."
            args: !SimpleFlagArg
              name: SPLIT_BY
          - !Flag
            optional: true
            synonyms:
            - -j
            - --remove-empty
            description: "Remove taxa with sequences composed of only\nundetermined\
              \ characters? Default: Don't remove"
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -u
            - --out-format
            description: 'File format for the output alignment. Default: fasta'
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -e
            - --check-align
            description: 'Check if input sequences are aligned. Default: no'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -i
            - --in-files
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            args: !RepeatFlagArg
              name: IN_FILES
          - !Flag
            optional: true
            synonyms:
            - -f
            - --in-format
            description: The format of input alignment
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -d
            - --data-type
            description: "Type of data\n"
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
          parent: &id012 !Command
            command: *id001
            positional: []
            named: []
            parent:
            subcommands:
            - !Command
              command: *id002
              positional:
              - !Positional
                optional: false
                position: 0
                name: check
                description: -c CORES, --cores CORES
              named:
              - !Flag
                optional: true
                synonyms:
                - -i
                - -f
                description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
                args: !RepeatFlagArg
                  name: IN_FILES
              - !Flag
                optional: true
                synonyms:
                - -l
                - --split-by
                description: "File name for partitions to be used for alignment\n\
                  splitting."
                args: !SimpleFlagArg
                  name: SPLIT_BY
              - !Flag
                optional: true
                synonyms:
                - -j
                - --remove-empty
                description: "Remove taxa with sequences composed of only\nundetermined\
                  \ characters? Default: Don't remove"
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -u
                - --out-format
                description: 'File format for the output alignment. Default: fasta'
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -e
                - --check-align
                description: 'Check if input sequences are aligned. Default: no'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -i
                - --in-files
                description: "Alignment files to be taken as input. You can specify\n\
                  multiple files using wildcards (e.g. --in-files\n*fasta)"
                args: !RepeatFlagArg
                  name: IN_FILES
              - !Flag
                optional: true
                synonyms:
                - -f
                - --in-format
                description: The format of input alignment
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -d
                - --data-type
                description: "Type of data\n"
                args: !ChoiceFlagArg
                  choices: !!set
                    ? dna
                    ? aa
              parent: &id011 !Command
                command: *id001
                positional: []
                named: []
                parent:
                subcommands:
                - !Command
                  command: *id002
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: check
                    description: -c CORES, --cores CORES
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - -f
                    description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
                    args: !RepeatFlagArg
                      name: IN_FILES
                  - !Flag
                    optional: true
                    synonyms:
                    - -l
                    - --split-by
                    description: "File name for partitions to be used for alignment\n\
                      splitting."
                    args: !SimpleFlagArg
                      name: SPLIT_BY
                  - !Flag
                    optional: true
                    synonyms:
                    - -j
                    - --remove-empty
                    description: "Remove taxa with sequences composed of only\nundetermined\
                      \ characters? Default: Don't remove"
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -u
                    - --out-format
                    description: 'File format for the output alignment. Default: fasta'
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -e
                    - --check-align
                    description: 'Check if input sequences are aligned. Default: no'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - --in-files
                    description: "Alignment files to be taken as input. You can specify\n\
                      multiple files using wildcards (e.g. --in-files\n*fasta)"
                    args: !RepeatFlagArg
                      name: IN_FILES
                  - !Flag
                    optional: true
                    synonyms:
                    - -f
                    - --in-format
                    description: The format of input alignment
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -d
                    - --data-type
                    description: "Type of data\n"
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? aa
                        ? dna
                  parent: &id003 !Command
                    command: *id001
                    positional: []
                    named: []
                    parent:
                    subcommands:
                    - !Command
                      command: *id002
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: check
                        description: -c CORES, --cores CORES
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - -f
                        description: ''
                        args: !RepeatFlagArg
                          name: IN_FILES
                      - !Flag
                        optional: true
                        synonyms:
                        - -l
                        - --split-by
                        description: "File name for partitions to be used for alignment\n\
                          splitting."
                        args: !SimpleFlagArg
                          name: SPLIT_BY
                      - !Flag
                        optional: true
                        synonyms:
                        - -j
                        - --remove-empty
                        description: "Remove taxa with sequences composed of only\n\
                          undetermined characters? Default: Don't remove"
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -u
                        - --out-format
                        description: 'File format for the output alignment. Default:
                          fasta'
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -e
                        - --check-align
                        description: 'Check if input sequences are aligned. Default:
                          no'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - --in-files
                        description: "Alignment files to be taken as input. You can\
                          \ specify\nmultiple files using wildcards (e.g. --in-files\n\
                          *fasta)"
                        args: !RepeatFlagArg
                          name: IN_FILES
                      - !Flag
                        optional: true
                        synonyms:
                        - -f
                        - --in-format
                        description: The format of input alignment
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        - --data-type
                        description: "Type of data\n"
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? aa
                            ? dna
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        - --help
                        description: show this help message and exit
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag:
                      help_text: "usage: AMAS.py [-h] -l SPLIT_BY [-j]\n         \
                        \      [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e]\
                        \ [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n\
                        \               {fasta,phylip,nexus,phylip-int,nexus-int}\
                        \ -d {aa,dna}\n\nSplit alignment according to a partitions\
                        \ file\n\noptional arguments:\n  -h, --help            show\
                        \ this help message and exit\n  -l SPLIT_BY, --split-by SPLIT_BY\n\
                        \                        File name for partitions to be used\
                        \ for alignment\n                        splitting.\n  -j,\
                        \ --remove-empty    Remove taxa with sequences composed of\
                        \ only\n                        undetermined characters? Default:\
                        \ Don't remove\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                        \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        File format for the output alignment.\
                        \ Default: fasta\n  -e, --check-align     Check if input sequences\
                        \ are aligned. Default: no\n                        check\n\
                        \  -c CORES, --cores CORES\n                        Number\
                        \ of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES\
                        \ [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n   \
                        \                     Alignment files to be taken as input.\
                        \ You can specify\n                        multiple files\
                        \ using wildcards (e.g. --in-files\n                     \
                        \   *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                        \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        The format of input alignment\n \
                        \ -d {aa,dna}, --data-type {aa,dna}\n                    \
                        \    Type of data\n"
                      generated_using: &id004
                      - --help
                      docker_image:
                    - !Command
                      command: &id005
                      - AMAS.py
                      - replicate
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: check
                        description: -c CORES, --cores CORES
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - -f
                        description: ''
                        args: !RepeatFlagArg
                          name: IN_FILES
                      - !Flag
                        optional: true
                        synonyms:
                        - -r
                        description: "REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n\
                          Create replicate data sets for phylogenetic jackknife\n\
                          [replicates, no alignments for each replicate]"
                        args: !SimpleFlagArg
                          name: REPLICATE_ARGS
                      - !Flag
                        optional: true
                        synonyms:
                        - -u
                        - --out-format
                        description: 'File format for the output alignment. Default:
                          fasta'
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -e
                        - --check-align
                        description: 'Check if input sequences are aligned. Default:
                          no'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - --in-files
                        description: "Alignment files to be taken as input. You can\
                          \ specify\nmultiple files using wildcards (e.g. --in-files\n\
                          *fasta)"
                        args: !RepeatFlagArg
                          name: IN_FILES
                      - !Flag
                        optional: true
                        synonyms:
                        - -f
                        - --in-format
                        description: The format of input alignment
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        - --data-type
                        description: "Type of data\n"
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? aa
                            ? dna
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        - --help
                        description: show this help message and exit
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag:
                      help_text: "usage: AMAS.py [-h] -r REPLICATE_ARGS REPLICATE_ARGS\n\
                        \               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
                        \ [-e] [-c CORES]\n               -i IN_FILES [IN_FILES ...]\
                        \ -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
                        \ -d {aa,dna}\n\nCreate replicate datasets for phylogenetic\
                        \ jackknife\n\noptional arguments:\n  -h, --help         \
                        \   show this help message and exit\n  -r REPLICATE_ARGS REPLICATE_ARGS,\
                        \ --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n              \
                        \          Create replicate data sets for phylogenetic jackknife\n\
                        \                        [replicates, no alignments for each\
                        \ replicate]\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                        \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        File format for the output alignment.\
                        \ Default: fasta\n  -e, --check-align     Check if input sequences\
                        \ are aligned. Default: no\n                        check\n\
                        \  -c CORES, --cores CORES\n                        Number\
                        \ of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES\
                        \ [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n   \
                        \                     Alignment files to be taken as input.\
                        \ You can specify\n                        multiple files\
                        \ using wildcards (e.g. --in-files\n                     \
                        \   *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                        \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        The format of input alignment\n \
                        \ -d {aa,dna}, --data-type {aa,dna}\n                    \
                        \    Type of data\n"
                      generated_using: *id004
                      docker_image:
                    - !Command
                      command: &id006
                      - AMAS.py
                      - concat
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: check
                        description: -c CORES, --cores CORES
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - -f
                        description: ''
                        args: !RepeatFlagArg
                          name: IN_FILES
                      - !Flag
                        optional: true
                        synonyms:
                        - -p
                        - --concat-part
                        description: "File name for th0e concatenated alignment partitions.\n\
                          Default: 'partitions.txt'"
                        args: !SimpleFlagArg
                          name: CONCAT_PART
                      - !Flag
                        optional: true
                        synonyms:
                        - -t
                        - --concat-out
                        description: "File name for the concatenated alignment. Default:\n\
                          'concatenated.out'"
                        args: !SimpleFlagArg
                          name: CONCAT_OUT
                      - !Flag
                        optional: true
                        synonyms:
                        - -u
                        - --out-format
                        description: 'File format for the output alignment. Default:
                          fasta'
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -e
                        - --check-align
                        description: 'Check if input sequences are aligned. Default:
                          no'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - --in-files
                        description: "Alignment files to be taken as input. You can\
                          \ specify\nmultiple files using wildcards (e.g. --in-files\n\
                          *fasta)"
                        args: !RepeatFlagArg
                          name: IN_FILES
                      - !Flag
                        optional: true
                        synonyms:
                        - -f
                        - --in-format
                        description: The format of input alignment
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        - --data-type
                        description: "Type of data\n"
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? aa
                            ? dna
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        - --help
                        description: show this help message and exit
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag:
                      help_text: "usage: AMAS.py [-h] [-p CONCAT_PART] [-t CONCAT_OUT]\n\
                        \               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
                        \ [-e] [-c CORES]\n               -i IN_FILES [IN_FILES ...]\
                        \ -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
                        \ -d {aa,dna}\n\nConcatenate input alignments\n\noptional\
                        \ arguments:\n  -h, --help            show this help message\
                        \ and exit\n  -p CONCAT_PART, --concat-part CONCAT_PART\n\
                        \                        File name for th0e concatenated alignment\
                        \ partitions.\n                        Default: 'partitions.txt'\n\
                        \  -t CONCAT_OUT, --concat-out CONCAT_OUT\n              \
                        \          File name for the concatenated alignment. Default:\n\
                        \                        'concatenated.out'\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                        \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        File format for the output alignment.\
                        \ Default: fasta\n  -e, --check-align     Check if input sequences\
                        \ are aligned. Default: no\n                        check\n\
                        \  -c CORES, --cores CORES\n                        Number\
                        \ of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES\
                        \ [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n   \
                        \                     Alignment files to be taken as input.\
                        \ You can specify\n                        multiple files\
                        \ using wildcards (e.g. --in-files\n                     \
                        \   *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                        \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        The format of input alignment\n \
                        \ -d {aa,dna}, --data-type {aa,dna}\n                    \
                        \    Type of data\n"
                      generated_using: *id004
                      docker_image:
                    - !Command
                      command: &id007
                      - AMAS.py
                      - summary
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: check
                        description: -c CORES, --cores CORES
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -o
                        - --summary-out
                        description: "File name for the alignment summary. Default:\n\
                          'summary.txt'"
                        args: !SimpleFlagArg
                          name: SUMMARY_OUT
                      - !Flag
                        optional: true
                        synonyms:
                        - -s
                        - --by-taxon
                        description: "In addition to alignment summary, write by\n\
                          sequence/taxon summaries. Default: Don't write"
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -e
                        - --check-align
                        description: 'Check if input sequences are aligned. Default:
                          no'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - --in-files
                        description: "Alignment files to be taken as input. You can\
                          \ specify\nmultiple files using wildcards (e.g. --in-files\n\
                          *fasta)"
                        args: !RepeatFlagArg
                          name: IN_FILES
                      - !Flag
                        optional: true
                        synonyms:
                        - -f
                        - --in-format
                        description: The format of input alignment
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        - --data-type
                        description: "Type of data\n"
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? aa
                            ? dna
                      - !Flag
                        optional: true
                        synonyms:
                        - -c
                        description: ''
                        args: !SimpleFlagArg
                          name: CORES
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        - --help
                        description: show this help message and exit
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag:
                      help_text: "usage: AMAS.py [-h] [-o SUMMARY_OUT] [-s] [-e] [-c\
                        \ CORES] -i IN_FILES\n               [IN_FILES ...] -f {fasta,phylip,nexus,phylip-int,nexus-int}\
                        \ -d\n               {aa,dna}\n\nWrite alignment summary\n\
                        \noptional arguments:\n  -h, --help            show this help\
                        \ message and exit\n  -o SUMMARY_OUT, --summary-out SUMMARY_OUT\n\
                        \                        File name for the alignment summary.\
                        \ Default:\n                        'summary.txt'\n  -s, --by-taxon\
                        \        In addition to alignment summary, write by\n    \
                        \                    sequence/taxon summaries. Default: Don't\
                        \ write\n  -e, --check-align     Check if input sequences\
                        \ are aligned. Default: no\n                        check\n\
                        \  -c CORES, --cores CORES\n                        Number\
                        \ of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES\
                        \ [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n   \
                        \                     Alignment files to be taken as input.\
                        \ You can specify\n                        multiple files\
                        \ using wildcards (e.g. --in-files\n                     \
                        \   *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                        \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        The format of input alignment\n \
                        \ -d {aa,dna}, --data-type {aa,dna}\n                    \
                        \    Type of data\n"
                      generated_using: *id004
                      docker_image:
                    - !Command
                      command: &id008
                      - AMAS.py
                      - convert
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: check
                        description: -c CORES, --cores CORES
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -u
                        - --out-format
                        description: 'File format for the output alignment. Default:
                          fasta'
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -e
                        - --check-align
                        description: 'Check if input sequences are aligned. Default:
                          no'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - --in-files
                        description: "Alignment files to be taken as input. You can\
                          \ specify\nmultiple files using wildcards (e.g. --in-files\n\
                          *fasta)"
                        args: !RepeatFlagArg
                          name: IN_FILES
                      - !Flag
                        optional: true
                        synonyms:
                        - -f
                        - --in-format
                        description: The format of input alignment
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        - --data-type
                        description: "Type of data\n"
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? aa
                            ? dna
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        - --help
                        description: show this help message and exit
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag:
                      help_text: "usage: AMAS.py [-h] [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
                        \ [-e]\n               [-c CORES] -i IN_FILES [IN_FILES ...]\
                        \ -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
                        \ -d {aa,dna}\n\nConvert to other file format\n\noptional\
                        \ arguments:\n  -h, --help            show this help message\
                        \ and exit\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                        \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        File format for the output alignment.\
                        \ Default: fasta\n  -e, --check-align     Check if input sequences\
                        \ are aligned. Default: no\n                        check\n\
                        \  -c CORES, --cores CORES\n                        Number\
                        \ of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES\
                        \ [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n   \
                        \                     Alignment files to be taken as input.\
                        \ You can specify\n                        multiple files\
                        \ using wildcards (e.g. --in-files\n                     \
                        \   *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                        \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        The format of input alignment\n \
                        \ -d {aa,dna}, --data-type {aa,dna}\n                    \
                        \    Type of data\n"
                      generated_using: *id004
                      docker_image:
                    - !Command
                      command: &id009
                      - AMAS.py
                      - command
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: concat
                        description: Concatenate input alignments
                      - !Positional
                        optional: false
                        position: 1
                        name: convert
                        description: Convert to other file format
                      - !Positional
                        optional: false
                        position: 2
                        name: replicate
                        description: Create replicate data sets for phylogenetic jackknife
                      - !Positional
                        optional: false
                        position: 3
                        name: split
                        description: Split alignment according to a partitions file
                      - !Positional
                        optional: false
                        position: 4
                        name: summary
                        description: Write alignment summary
                      - !Positional
                        optional: false
                        position: 5
                        name: remove
                        description: Remove taxa from alignment
                      - !Positional
                        optional: false
                        position: 0
                        name: command
                        description: Subcommand to run
                      named: []
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        - --help
                        description: show this help message and exit
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag:
                      help_text: "Unrecognized command\nusage: AMAS <command> [<args>]\n\
                        \nThe AMAS commands are:\n  concat      Concatenate input\
                        \ alignments\n  convert     Convert to other file format\n\
                        \  replicate   Create replicate data sets for phylogenetic\
                        \ jackknife\n  split       Split alignment according to a\
                        \ partitions file\n  summary     Write alignment summary\n\
                        \  remove      Remove taxa from alignment\n\nUse AMAS <command>\
                        \ -h for help with arguments of the command of interest\n\n\
                        positional arguments:\n  command     Subcommand to run\n\n\
                        optional arguments:\n  -h, --help  show this help message\
                        \ and exit\n"
                      generated_using: *id004
                      docker_image:
                    - !Command
                      command: &id010
                      - AMAS.py
                      - remove
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: check
                        description: -c CORES, --cores CORES
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -x
                        - --taxa-to-remove
                        description: Taxon/sequence names to be removed.
                        args: !RepeatFlagArg
                          name: TAXA_TO_REMOVE
                      - !Flag
                        optional: true
                        synonyms:
                        - -u
                        - --out-format
                        description: 'File format for the output alignment. Default:
                          fasta'
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -g
                        - --out-prefix
                        description: "File name prefix for the concatenated alignment.\n\
                          Default: 'reduced_'"
                        args: !SimpleFlagArg
                          name: OUT_PREFIX
                      - !Flag
                        optional: true
                        synonyms:
                        - -e
                        - --check-align
                        description: 'Check if input sequences are aligned. Default:
                          no'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - --in-files
                        description: "Alignment files to be taken as input. You can\
                          \ specify\nmultiple files using wildcards (e.g. --in-files\n\
                          *fasta)"
                        args: !RepeatFlagArg
                          name: IN_FILES
                      - !Flag
                        optional: true
                        synonyms:
                        - -f
                        - --in-format
                        description: The format of input alignment
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? fasta
                            ? phylip
                            ? nexus-int
                            ? phylip-int
                            ? nexus
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        - --data-type
                        description: "Type of data\n"
                        args: !ChoiceFlagArg
                          choices: !!set
                            ? aa
                            ? dna
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        - --help
                        description: show this help message and exit
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag:
                      help_text: "usage: AMAS.py [-h] -x TAXA_TO_REMOVE [TAXA_TO_REMOVE\
                        \ ...]\n               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
                        \ [-g OUT_PREFIX]\n               [-e] [-c CORES] -i IN_FILES\
                        \ [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
                        \ -d {aa,dna}\n\nRemove taxa from alignment\n\noptional arguments:\n\
                        \  -h, --help            show this help message and exit\n\
                        \  -x TAXA_TO_REMOVE [TAXA_TO_REMOVE ...], --taxa-to-remove\
                        \ TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n                  \
                        \      Taxon/sequence names to be removed.\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                        \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        File format for the output alignment.\
                        \ Default: fasta\n  -g OUT_PREFIX, --out-prefix OUT_PREFIX\n\
                        \                        File name prefix for the concatenated\
                        \ alignment.\n                        Default: 'reduced_'\n\
                        \  -e, --check-align     Check if input sequences are aligned.\
                        \ Default: no\n                        check\n  -c CORES,\
                        \ --cores CORES\n                        Number of cores used.\
                        \ Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES\
                        \ ...], --in-files IN_FILES [IN_FILES ...]\n             \
                        \           Alignment files to be taken as input. You can\
                        \ specify\n                        multiple files using wildcards\
                        \ (e.g. --in-files\n                        *fasta)\n  -f\
                        \ {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                        \                        The format of input alignment\n \
                        \ -d {aa,dna}, --data-type {aa,dna}\n                    \
                        \    Type of data\n"
                      generated_using: *id004
                      docker_image:
                    usage: []
                    help_flag: !Flag
                      optional: true
                      synonyms:
                      - -h
                      - --help
                      description: show this help message and exit
                      args: !EmptyFlagArg {}
                    usage_flag:
                    version_flag:
                    help_text: "usage: AMAS <command> [<args>]\n\nThe AMAS commands\
                      \ are:\n  concat      Concatenate input alignments\n  convert\
                      \     Convert to other file format\n  replicate   Create replicate\
                      \ data sets for phylogenetic jackknife\n  split       Split\
                      \ alignment according to a partitions file\n  summary     Write\
                      \ alignment summary\n  remove      Remove taxa from alignment\n\
                      \nUse AMAS <command> -h for help with arguments of the command\
                      \ of interest\n\npositional arguments:\n  command     Subcommand\
                      \ to run\n\noptional arguments:\n  -h, --help  show this help\
                      \ message and exit\n"
                    generated_using: *id004
                    docker_image:
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    - --help
                    description: show this help message and exit
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag:
                  help_text: "usage: AMAS.py [-h] -l SPLIT_BY [-j]\n             \
                    \  [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n\
                    \               -i IN_FILES [IN_FILES ...] -f\n              \
                    \ {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nSplit\
                    \ alignment according to a partitions file\n\noptional arguments:\n\
                    \  -h, --help            show this help message and exit\n  -l\
                    \ SPLIT_BY, --split-by SPLIT_BY\n                        File\
                    \ name for partitions to be used for alignment\n             \
                    \           splitting.\n  -j, --remove-empty    Remove taxa with\
                    \ sequences composed of only\n                        undetermined\
                    \ characters? Default: Don't remove\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n   \
                    \                     File format for the output alignment. Default:\
                    \ fasta\n  -e, --check-align     Check if input sequences are\
                    \ aligned. Default: no\n                        check\n  -c CORES,\
                    \ --cores CORES\n                        Number of cores used.\
                    \ Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...],\
                    \ --in-files IN_FILES [IN_FILES ...]\n                       \
                    \ Alignment files to be taken as input. You can specify\n    \
                    \                    multiple files using wildcards (e.g. --in-files\n\
                    \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n    \
                    \                    The format of input alignment\n  -d {aa,dna},\
                    \ --data-type {aa,dna}\n                        Type of data\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id005
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: check
                    description: -c CORES, --cores CORES
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - -f
                    description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
                    args: !RepeatFlagArg
                      name: IN_FILES
                  - !Flag
                    optional: true
                    synonyms:
                    - -r
                    description: "REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n\
                      Create replicate data sets for phylogenetic jackknife\n[replicates,\
                      \ no alignments for each replicate]"
                    args: !SimpleFlagArg
                      name: REPLICATE_ARGS
                  - !Flag
                    optional: true
                    synonyms:
                    - -u
                    - --out-format
                    description: 'File format for the output alignment. Default: fasta'
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -e
                    - --check-align
                    description: 'Check if input sequences are aligned. Default: no'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - --in-files
                    description: "Alignment files to be taken as input. You can specify\n\
                      multiple files using wildcards (e.g. --in-files\n*fasta)"
                    args: !RepeatFlagArg
                      name: IN_FILES
                  - !Flag
                    optional: true
                    synonyms:
                    - -f
                    - --in-format
                    description: The format of input alignment
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -d
                    - --data-type
                    description: "Type of data\n"
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? aa
                        ? dna
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    - --help
                    description: show this help message and exit
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag:
                  help_text: "usage: AMAS.py [-h] -r REPLICATE_ARGS REPLICATE_ARGS\n\
                    \               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
                    \ [-e] [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n\
                    \               {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\
                    \nCreate replicate datasets for phylogenetic jackknife\n\noptional\
                    \ arguments:\n  -h, --help            show this help message and\
                    \ exit\n  -r REPLICATE_ARGS REPLICATE_ARGS, --rep-aln REPLICATE_ARGS\
                    \ REPLICATE_ARGS\n                        Create replicate data\
                    \ sets for phylogenetic jackknife\n                        [replicates,\
                    \ no alignments for each replicate]\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n   \
                    \                     File format for the output alignment. Default:\
                    \ fasta\n  -e, --check-align     Check if input sequences are\
                    \ aligned. Default: no\n                        check\n  -c CORES,\
                    \ --cores CORES\n                        Number of cores used.\
                    \ Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...],\
                    \ --in-files IN_FILES [IN_FILES ...]\n                       \
                    \ Alignment files to be taken as input. You can specify\n    \
                    \                    multiple files using wildcards (e.g. --in-files\n\
                    \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n    \
                    \                    The format of input alignment\n  -d {aa,dna},\
                    \ --data-type {aa,dna}\n                        Type of data\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id006
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: check
                    description: -c CORES, --cores CORES
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - -f
                    description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
                    args: !RepeatFlagArg
                      name: IN_FILES
                  - !Flag
                    optional: true
                    synonyms:
                    - -p
                    - --concat-part
                    description: "File name for th0e concatenated alignment partitions.\n\
                      Default: 'partitions.txt'"
                    args: !SimpleFlagArg
                      name: CONCAT_PART
                  - !Flag
                    optional: true
                    synonyms:
                    - -t
                    - --concat-out
                    description: "File name for the concatenated alignment. Default:\n\
                      'concatenated.out'"
                    args: !SimpleFlagArg
                      name: CONCAT_OUT
                  - !Flag
                    optional: true
                    synonyms:
                    - -u
                    - --out-format
                    description: 'File format for the output alignment. Default: fasta'
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -e
                    - --check-align
                    description: 'Check if input sequences are aligned. Default: no'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - --in-files
                    description: "Alignment files to be taken as input. You can specify\n\
                      multiple files using wildcards (e.g. --in-files\n*fasta)"
                    args: !RepeatFlagArg
                      name: IN_FILES
                  - !Flag
                    optional: true
                    synonyms:
                    - -f
                    - --in-format
                    description: The format of input alignment
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -d
                    - --data-type
                    description: "Type of data\n"
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? aa
                        ? dna
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    - --help
                    description: show this help message and exit
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag:
                  help_text: "usage: AMAS.py [-h] [-p CONCAT_PART] [-t CONCAT_OUT]\n\
                    \               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
                    \ [-e] [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n\
                    \               {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\
                    \nConcatenate input alignments\n\noptional arguments:\n  -h, --help\
                    \            show this help message and exit\n  -p CONCAT_PART,\
                    \ --concat-part CONCAT_PART\n                        File name\
                    \ for th0e concatenated alignment partitions.\n              \
                    \          Default: 'partitions.txt'\n  -t CONCAT_OUT, --concat-out\
                    \ CONCAT_OUT\n                        File name for the concatenated\
                    \ alignment. Default:\n                        'concatenated.out'\n\
                    \  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format\
                    \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                \
                    \        File format for the output alignment. Default: fasta\n\
                    \  -e, --check-align     Check if input sequences are aligned.\
                    \ Default: no\n                        check\n  -c CORES, --cores\
                    \ CORES\n                        Number of cores used. Default:\
                    \ 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files\
                    \ IN_FILES [IN_FILES ...]\n                        Alignment files\
                    \ to be taken as input. You can specify\n                    \
                    \    multiple files using wildcards (e.g. --in-files\n       \
                    \                 *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n    \
                    \                    The format of input alignment\n  -d {aa,dna},\
                    \ --data-type {aa,dna}\n                        Type of data\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id007
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: check
                    description: -c CORES, --cores CORES
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -o
                    - --summary-out
                    description: "File name for the alignment summary. Default:\n\
                      'summary.txt'"
                    args: !SimpleFlagArg
                      name: SUMMARY_OUT
                  - !Flag
                    optional: true
                    synonyms:
                    - -s
                    - --by-taxon
                    description: "In addition to alignment summary, write by\nsequence/taxon\
                      \ summaries. Default: Don't write"
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -e
                    - --check-align
                    description: 'Check if input sequences are aligned. Default: no'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - --in-files
                    description: "Alignment files to be taken as input. You can specify\n\
                      multiple files using wildcards (e.g. --in-files\n*fasta)"
                    args: !RepeatFlagArg
                      name: IN_FILES
                  - !Flag
                    optional: true
                    synonyms:
                    - -f
                    - --in-format
                    description: The format of input alignment
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -d
                    - --data-type
                    description: "Type of data\n"
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? aa
                        ? dna
                  - !Flag
                    optional: true
                    synonyms:
                    - -c
                    description: ''
                    args: !SimpleFlagArg
                      name: CORES
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    - --help
                    description: show this help message and exit
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag:
                  help_text: "usage: AMAS.py [-h] [-o SUMMARY_OUT] [-s] [-e] [-c CORES]\
                    \ -i IN_FILES\n               [IN_FILES ...] -f {fasta,phylip,nexus,phylip-int,nexus-int}\
                    \ -d\n               {aa,dna}\n\nWrite alignment summary\n\noptional\
                    \ arguments:\n  -h, --help            show this help message and\
                    \ exit\n  -o SUMMARY_OUT, --summary-out SUMMARY_OUT\n        \
                    \                File name for the alignment summary. Default:\n\
                    \                        'summary.txt'\n  -s, --by-taxon     \
                    \   In addition to alignment summary, write by\n             \
                    \           sequence/taxon summaries. Default: Don't write\n \
                    \ -e, --check-align     Check if input sequences are aligned.\
                    \ Default: no\n                        check\n  -c CORES, --cores\
                    \ CORES\n                        Number of cores used. Default:\
                    \ 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files\
                    \ IN_FILES [IN_FILES ...]\n                        Alignment files\
                    \ to be taken as input. You can specify\n                    \
                    \    multiple files using wildcards (e.g. --in-files\n       \
                    \                 *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n    \
                    \                    The format of input alignment\n  -d {aa,dna},\
                    \ --data-type {aa,dna}\n                        Type of data\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id008
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: check
                    description: -c CORES, --cores CORES
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -u
                    - --out-format
                    description: 'File format for the output alignment. Default: fasta'
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -e
                    - --check-align
                    description: 'Check if input sequences are aligned. Default: no'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - --in-files
                    description: "Alignment files to be taken as input. You can specify\n\
                      multiple files using wildcards (e.g. --in-files\n*fasta)"
                    args: !RepeatFlagArg
                      name: IN_FILES
                  - !Flag
                    optional: true
                    synonyms:
                    - -f
                    - --in-format
                    description: The format of input alignment
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -d
                    - --data-type
                    description: "Type of data\n"
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? aa
                        ? dna
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    - --help
                    description: show this help message and exit
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag:
                  help_text: "usage: AMAS.py [-h] [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
                    \ [-e]\n               [-c CORES] -i IN_FILES [IN_FILES ...] -f\n\
                    \               {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\
                    \nConvert to other file format\n\noptional arguments:\n  -h, --help\
                    \            show this help message and exit\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n   \
                    \                     File format for the output alignment. Default:\
                    \ fasta\n  -e, --check-align     Check if input sequences are\
                    \ aligned. Default: no\n                        check\n  -c CORES,\
                    \ --cores CORES\n                        Number of cores used.\
                    \ Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...],\
                    \ --in-files IN_FILES [IN_FILES ...]\n                       \
                    \ Alignment files to be taken as input. You can specify\n    \
                    \                    multiple files using wildcards (e.g. --in-files\n\
                    \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n    \
                    \                    The format of input alignment\n  -d {aa,dna},\
                    \ --data-type {aa,dna}\n                        Type of data\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id009
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: concat
                    description: Concatenate input alignments
                  - !Positional
                    optional: false
                    position: 1
                    name: convert
                    description: Convert to other file format
                  - !Positional
                    optional: false
                    position: 2
                    name: replicate
                    description: Create replicate data sets for phylogenetic jackknife
                  - !Positional
                    optional: false
                    position: 3
                    name: split
                    description: Split alignment according to a partitions file
                  - !Positional
                    optional: false
                    position: 4
                    name: summary
                    description: Write alignment summary
                  - !Positional
                    optional: false
                    position: 5
                    name: remove
                    description: Remove taxa from alignment
                  - !Positional
                    optional: false
                    position: 0
                    name: command
                    description: Subcommand to run
                  named: []
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    - --help
                    description: show this help message and exit
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag:
                  help_text: "Unrecognized command\nusage: AMAS <command> [<args>]\n\
                    \nThe AMAS commands are:\n  concat      Concatenate input alignments\n\
                    \  convert     Convert to other file format\n  replicate   Create\
                    \ replicate data sets for phylogenetic jackknife\n  split    \
                    \   Split alignment according to a partitions file\n  summary\
                    \     Write alignment summary\n  remove      Remove taxa from\
                    \ alignment\n\nUse AMAS <command> -h for help with arguments of\
                    \ the command of interest\n\npositional arguments:\n  command\
                    \     Subcommand to run\n\noptional arguments:\n  -h, --help \
                    \ show this help message and exit\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id010
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: check
                    description: -c CORES, --cores CORES
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -x
                    - --taxa-to-remove
                    description: Taxon/sequence names to be removed.
                    args: !RepeatFlagArg
                      name: TAXA_TO_REMOVE
                  - !Flag
                    optional: true
                    synonyms:
                    - -u
                    - --out-format
                    description: 'File format for the output alignment. Default: fasta'
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -g
                    - --out-prefix
                    description: "File name prefix for the concatenated alignment.\n\
                      Default: 'reduced_'"
                    args: !SimpleFlagArg
                      name: OUT_PREFIX
                  - !Flag
                    optional: true
                    synonyms:
                    - -e
                    - --check-align
                    description: 'Check if input sequences are aligned. Default: no'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - --in-files
                    description: "Alignment files to be taken as input. You can specify\n\
                      multiple files using wildcards (e.g. --in-files\n*fasta)"
                    args: !RepeatFlagArg
                      name: IN_FILES
                  - !Flag
                    optional: true
                    synonyms:
                    - -f
                    - --in-format
                    description: The format of input alignment
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? phylip-int
                        ? fasta
                        ? nexus
                        ? nexus-int
                        ? phylip
                  - !Flag
                    optional: true
                    synonyms:
                    - -d
                    - --data-type
                    description: "Type of data\n"
                    args: !ChoiceFlagArg
                      choices: !!set
                        ? aa
                        ? dna
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    - --help
                    description: show this help message and exit
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag:
                  help_text: "usage: AMAS.py [-h] -x TAXA_TO_REMOVE [TAXA_TO_REMOVE\
                    \ ...]\n               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
                    \ [-g OUT_PREFIX]\n               [-e] [-c CORES] -i IN_FILES\
                    \ [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
                    \ -d {aa,dna}\n\nRemove taxa from alignment\n\noptional arguments:\n\
                    \  -h, --help            show this help message and exit\n  -x\
                    \ TAXA_TO_REMOVE [TAXA_TO_REMOVE ...], --taxa-to-remove TAXA_TO_REMOVE\
                    \ [TAXA_TO_REMOVE ...]\n                        Taxon/sequence\
                    \ names to be removed.\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n   \
                    \                     File format for the output alignment. Default:\
                    \ fasta\n  -g OUT_PREFIX, --out-prefix OUT_PREFIX\n          \
                    \              File name prefix for the concatenated alignment.\n\
                    \                        Default: 'reduced_'\n  -e, --check-align\
                    \     Check if input sequences are aligned. Default: no\n    \
                    \                    check\n  -c CORES, --cores CORES\n      \
                    \                  Number of cores used. Default: 1\n\nrequired\
                    \ arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES\
                    \ [IN_FILES ...]\n                        Alignment files to be\
                    \ taken as input. You can specify\n                        multiple\
                    \ files using wildcards (e.g. --in-files\n                   \
                    \     *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n    \
                    \                    The format of input alignment\n  -d {aa,dna},\
                    \ --data-type {aa,dna}\n                        Type of data\n"
                  generated_using: *id004
                  docker_image:
                usage: []
                help_flag:
                usage_flag:
                version_flag:
                help_text: "usage: AMAS <command> [<args>]\n\nThe AMAS commands are:\n\
                  \  concat      Concatenate input alignments\n  convert     Convert\
                  \ to other file format\n  replicate   Create replicate data sets\
                  \ for phylogenetic jackknife\n  split       Split alignment according\
                  \ to a partitions file\n  summary     Write alignment summary\n\
                  \  remove      Remove taxa from alignment\n\nUse AMAS <command>\
                  \ -h for help with arguments of the command of interest\n\npositional\
                  \ arguments:\n  command     Subcommand to run\n\noptional arguments:\n\
                  \  -h, --help  show this help message and exit\n"
                generated_using: *id004
                docker_image:
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                - --help
                description: show this help message and exit
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag:
              help_text: "usage: AMAS.py [-h] -l SPLIT_BY [-j]\n               [-u\
                \ {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n   \
                \            -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
                \ -d {aa,dna}\n\nSplit alignment according to a partitions file\n\n\
                optional arguments:\n  -h, --help            show this help message\
                \ and exit\n  -l SPLIT_BY, --split-by SPLIT_BY\n                 \
                \       File name for partitions to be used for alignment\n      \
                \                  splitting.\n  -j, --remove-empty    Remove taxa\
                \ with sequences composed of only\n                        undetermined\
                \ characters? Default: Don't remove\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n       \
                \                 File format for the output alignment. Default: fasta\n\
                \  -e, --check-align     Check if input sequences are aligned. Default:\
                \ no\n                        check\n  -c CORES, --cores CORES\n \
                \                       Number of cores used. Default: 1\n\nrequired\
                \ arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES\
                \ ...]\n                        Alignment files to be taken as input.\
                \ You can specify\n                        multiple files using wildcards\
                \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n        \
                \                The format of input alignment\n  -d {aa,dna}, --data-type\
                \ {aa,dna}\n                        Type of data\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id005
              positional:
              - !Positional
                optional: false
                position: 0
                name: check
                description: -c CORES, --cores CORES
              named:
              - !Flag
                optional: true
                synonyms:
                - -i
                - -f
                description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
                args: !RepeatFlagArg
                  name: IN_FILES
              - !Flag
                optional: true
                synonyms:
                - -r
                description: "REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n\
                  Create replicate data sets for phylogenetic jackknife\n[replicates,\
                  \ no alignments for each replicate]"
                args: !SimpleFlagArg
                  name: REPLICATE_ARGS
              - !Flag
                optional: true
                synonyms:
                - -u
                - --out-format
                description: 'File format for the output alignment. Default: fasta'
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -e
                - --check-align
                description: 'Check if input sequences are aligned. Default: no'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -i
                - --in-files
                description: "Alignment files to be taken as input. You can specify\n\
                  multiple files using wildcards (e.g. --in-files\n*fasta)"
                args: !RepeatFlagArg
                  name: IN_FILES
              - !Flag
                optional: true
                synonyms:
                - -f
                - --in-format
                description: The format of input alignment
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -d
                - --data-type
                description: "Type of data\n"
                args: !ChoiceFlagArg
                  choices: !!set
                    ? dna
                    ? aa
              parent: *id011
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                - --help
                description: show this help message and exit
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag:
              help_text: "usage: AMAS.py [-h] -r REPLICATE_ARGS REPLICATE_ARGS\n \
                \              [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e]\
                \ [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n     \
                \          {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\
                \nCreate replicate datasets for phylogenetic jackknife\n\noptional\
                \ arguments:\n  -h, --help            show this help message and exit\n\
                \  -r REPLICATE_ARGS REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n\
                \                        Create replicate data sets for phylogenetic\
                \ jackknife\n                        [replicates, no alignments for\
                \ each replicate]\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n       \
                \                 File format for the output alignment. Default: fasta\n\
                \  -e, --check-align     Check if input sequences are aligned. Default:\
                \ no\n                        check\n  -c CORES, --cores CORES\n \
                \                       Number of cores used. Default: 1\n\nrequired\
                \ arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES\
                \ ...]\n                        Alignment files to be taken as input.\
                \ You can specify\n                        multiple files using wildcards\
                \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n        \
                \                The format of input alignment\n  -d {aa,dna}, --data-type\
                \ {aa,dna}\n                        Type of data\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id006
              positional:
              - !Positional
                optional: false
                position: 0
                name: check
                description: -c CORES, --cores CORES
              named:
              - !Flag
                optional: true
                synonyms:
                - -i
                - -f
                description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
                args: !RepeatFlagArg
                  name: IN_FILES
              - !Flag
                optional: true
                synonyms:
                - -p
                - --concat-part
                description: "File name for th0e concatenated alignment partitions.\n\
                  Default: 'partitions.txt'"
                args: !SimpleFlagArg
                  name: CONCAT_PART
              - !Flag
                optional: true
                synonyms:
                - -t
                - --concat-out
                description: "File name for the concatenated alignment. Default:\n\
                  'concatenated.out'"
                args: !SimpleFlagArg
                  name: CONCAT_OUT
              - !Flag
                optional: true
                synonyms:
                - -u
                - --out-format
                description: 'File format for the output alignment. Default: fasta'
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -e
                - --check-align
                description: 'Check if input sequences are aligned. Default: no'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -i
                - --in-files
                description: "Alignment files to be taken as input. You can specify\n\
                  multiple files using wildcards (e.g. --in-files\n*fasta)"
                args: !RepeatFlagArg
                  name: IN_FILES
              - !Flag
                optional: true
                synonyms:
                - -f
                - --in-format
                description: The format of input alignment
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -d
                - --data-type
                description: "Type of data\n"
                args: !ChoiceFlagArg
                  choices: !!set
                    ? dna
                    ? aa
              parent: *id011
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                - --help
                description: show this help message and exit
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag:
              help_text: "usage: AMAS.py [-h] [-p CONCAT_PART] [-t CONCAT_OUT]\n \
                \              [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e]\
                \ [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n     \
                \          {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\
                \nConcatenate input alignments\n\noptional arguments:\n  -h, --help\
                \            show this help message and exit\n  -p CONCAT_PART, --concat-part\
                \ CONCAT_PART\n                        File name for th0e concatenated\
                \ alignment partitions.\n                        Default: 'partitions.txt'\n\
                \  -t CONCAT_OUT, --concat-out CONCAT_OUT\n                      \
                \  File name for the concatenated alignment. Default:\n          \
                \              'concatenated.out'\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n       \
                \                 File format for the output alignment. Default: fasta\n\
                \  -e, --check-align     Check if input sequences are aligned. Default:\
                \ no\n                        check\n  -c CORES, --cores CORES\n \
                \                       Number of cores used. Default: 1\n\nrequired\
                \ arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES\
                \ ...]\n                        Alignment files to be taken as input.\
                \ You can specify\n                        multiple files using wildcards\
                \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n        \
                \                The format of input alignment\n  -d {aa,dna}, --data-type\
                \ {aa,dna}\n                        Type of data\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id007
              positional:
              - !Positional
                optional: false
                position: 0
                name: check
                description: -c CORES, --cores CORES
              named:
              - !Flag
                optional: true
                synonyms:
                - -o
                - --summary-out
                description: "File name for the alignment summary. Default:\n'summary.txt'"
                args: !SimpleFlagArg
                  name: SUMMARY_OUT
              - !Flag
                optional: true
                synonyms:
                - -s
                - --by-taxon
                description: "In addition to alignment summary, write by\nsequence/taxon\
                  \ summaries. Default: Don't write"
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -e
                - --check-align
                description: 'Check if input sequences are aligned. Default: no'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -i
                - --in-files
                description: "Alignment files to be taken as input. You can specify\n\
                  multiple files using wildcards (e.g. --in-files\n*fasta)"
                args: !RepeatFlagArg
                  name: IN_FILES
              - !Flag
                optional: true
                synonyms:
                - -f
                - --in-format
                description: The format of input alignment
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -d
                - --data-type
                description: "Type of data\n"
                args: !ChoiceFlagArg
                  choices: !!set
                    ? dna
                    ? aa
              - !Flag
                optional: true
                synonyms:
                - -c
                description: ''
                args: !SimpleFlagArg
                  name: CORES
              parent: *id011
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                - --help
                description: show this help message and exit
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag:
              help_text: "usage: AMAS.py [-h] [-o SUMMARY_OUT] [-s] [-e] [-c CORES]\
                \ -i IN_FILES\n               [IN_FILES ...] -f {fasta,phylip,nexus,phylip-int,nexus-int}\
                \ -d\n               {aa,dna}\n\nWrite alignment summary\n\noptional\
                \ arguments:\n  -h, --help            show this help message and exit\n\
                \  -o SUMMARY_OUT, --summary-out SUMMARY_OUT\n                   \
                \     File name for the alignment summary. Default:\n            \
                \            'summary.txt'\n  -s, --by-taxon        In addition to\
                \ alignment summary, write by\n                        sequence/taxon\
                \ summaries. Default: Don't write\n  -e, --check-align     Check if\
                \ input sequences are aligned. Default: no\n                     \
                \   check\n  -c CORES, --cores CORES\n                        Number\
                \ of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES\
                \ [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n           \
                \             Alignment files to be taken as input. You can specify\n\
                \                        multiple files using wildcards (e.g. --in-files\n\
                \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n        \
                \                The format of input alignment\n  -d {aa,dna}, --data-type\
                \ {aa,dna}\n                        Type of data\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id008
              positional:
              - !Positional
                optional: false
                position: 0
                name: check
                description: -c CORES, --cores CORES
              named:
              - !Flag
                optional: true
                synonyms:
                - -u
                - --out-format
                description: 'File format for the output alignment. Default: fasta'
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -e
                - --check-align
                description: 'Check if input sequences are aligned. Default: no'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -i
                - --in-files
                description: "Alignment files to be taken as input. You can specify\n\
                  multiple files using wildcards (e.g. --in-files\n*fasta)"
                args: !RepeatFlagArg
                  name: IN_FILES
              - !Flag
                optional: true
                synonyms:
                - -f
                - --in-format
                description: The format of input alignment
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -d
                - --data-type
                description: "Type of data\n"
                args: !ChoiceFlagArg
                  choices: !!set
                    ? dna
                    ? aa
              parent: *id011
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                - --help
                description: show this help message and exit
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag:
              help_text: "usage: AMAS.py [-h] [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
                \ [-e]\n               [-c CORES] -i IN_FILES [IN_FILES ...] -f\n\
                \               {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\
                \nConvert to other file format\n\noptional arguments:\n  -h, --help\
                \            show this help message and exit\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
                \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n       \
                \                 File format for the output alignment. Default: fasta\n\
                \  -e, --check-align     Check if input sequences are aligned. Default:\
                \ no\n                        check\n  -c CORES, --cores CORES\n \
                \                       Number of cores used. Default: 1\n\nrequired\
                \ arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES\
                \ ...]\n                        Alignment files to be taken as input.\
                \ You can specify\n                        multiple files using wildcards\
                \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n        \
                \                The format of input alignment\n  -d {aa,dna}, --data-type\
                \ {aa,dna}\n                        Type of data\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id009
              positional:
              - !Positional
                optional: false
                position: 0
                name: concat
                description: Concatenate input alignments
              - !Positional
                optional: false
                position: 1
                name: convert
                description: Convert to other file format
              - !Positional
                optional: false
                position: 2
                name: replicate
                description: Create replicate data sets for phylogenetic jackknife
              - !Positional
                optional: false
                position: 3
                name: split
                description: Split alignment according to a partitions file
              - !Positional
                optional: false
                position: 4
                name: summary
                description: Write alignment summary
              - !Positional
                optional: false
                position: 5
                name: remove
                description: Remove taxa from alignment
              - !Positional
                optional: false
                position: 0
                name: command
                description: Subcommand to run
              named: []
              parent: *id011
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                - --help
                description: show this help message and exit
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag:
              help_text: "Unrecognized command\nusage: AMAS <command> [<args>]\n\n\
                The AMAS commands are:\n  concat      Concatenate input alignments\n\
                \  convert     Convert to other file format\n  replicate   Create\
                \ replicate data sets for phylogenetic jackknife\n  split       Split\
                \ alignment according to a partitions file\n  summary     Write alignment\
                \ summary\n  remove      Remove taxa from alignment\n\nUse AMAS <command>\
                \ -h for help with arguments of the command of interest\n\npositional\
                \ arguments:\n  command     Subcommand to run\n\noptional arguments:\n\
                \  -h, --help  show this help message and exit\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id010
              positional:
              - !Positional
                optional: false
                position: 0
                name: check
                description: -c CORES, --cores CORES
              named:
              - !Flag
                optional: true
                synonyms:
                - -x
                - --taxa-to-remove
                description: Taxon/sequence names to be removed.
                args: !RepeatFlagArg
                  name: TAXA_TO_REMOVE
              - !Flag
                optional: true
                synonyms:
                - -u
                - --out-format
                description: 'File format for the output alignment. Default: fasta'
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -g
                - --out-prefix
                description: "File name prefix for the concatenated alignment.\nDefault:\
                  \ 'reduced_'"
                args: !SimpleFlagArg
                  name: OUT_PREFIX
              - !Flag
                optional: true
                synonyms:
                - -e
                - --check-align
                description: 'Check if input sequences are aligned. Default: no'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -i
                - --in-files
                description: "Alignment files to be taken as input. You can specify\n\
                  multiple files using wildcards (e.g. --in-files\n*fasta)"
                args: !RepeatFlagArg
                  name: IN_FILES
              - !Flag
                optional: true
                synonyms:
                - -f
                - --in-format
                description: The format of input alignment
                args: !ChoiceFlagArg
                  choices: !!set
                    ? nexus-int
                    ? fasta
                    ? nexus
                    ? phylip
                    ? phylip-int
              - !Flag
                optional: true
                synonyms:
                - -d
                - --data-type
                description: "Type of data\n"
                args: !ChoiceFlagArg
                  choices: !!set
                    ? dna
                    ? aa
              parent: *id011
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                - --help
                description: show this help message and exit
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag:
              help_text: "usage: AMAS.py [-h] -x TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n\
                \               [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-g\
                \ OUT_PREFIX]\n               [-e] [-c CORES] -i IN_FILES [IN_FILES\
                \ ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
                \ -d {aa,dna}\n\nRemove taxa from alignment\n\noptional arguments:\n\
                \  -h, --help            show this help message and exit\n  -x TAXA_TO_REMOVE\
                \ [TAXA_TO_REMOVE ...], --taxa-to-remove TAXA_TO_REMOVE [TAXA_TO_REMOVE\
                \ ...]\n                        Taxon/sequence names to be removed.\n\
                \  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
                \                        File format for the output alignment. Default:\
                \ fasta\n  -g OUT_PREFIX, --out-prefix OUT_PREFIX\n              \
                \          File name prefix for the concatenated alignment.\n    \
                \                    Default: 'reduced_'\n  -e, --check-align    \
                \ Check if input sequences are aligned. Default: no\n            \
                \            check\n  -c CORES, --cores CORES\n                  \
                \      Number of cores used. Default: 1\n\nrequired arguments:\n \
                \ -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n\
                \                        Alignment files to be taken as input. You\
                \ can specify\n                        multiple files using wildcards\
                \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
                \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n        \
                \                The format of input alignment\n  -d {aa,dna}, --data-type\
                \ {aa,dna}\n                        Type of data\n"
              generated_using: *id004
              docker_image:
            usage: []
            help_flag:
            usage_flag:
            version_flag:
            help_text: "usage: AMAS <command> [<args>]\n\nThe AMAS commands are:\n\
              \  concat      Concatenate input alignments\n  convert     Convert to\
              \ other file format\n  replicate   Create replicate data sets for phylogenetic\
              \ jackknife\n  split       Split alignment according to a partitions\
              \ file\n  summary     Write alignment summary\n  remove      Remove\
              \ taxa from alignment\n\nUse AMAS <command> -h for help with arguments\
              \ of the command of interest\n\npositional arguments:\n  command   \
              \  Subcommand to run\n\noptional arguments:\n  -h, --help  show this\
              \ help message and exit\n"
            generated_using: *id004
            docker_image:
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            - --help
            description: show this help message and exit
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] -l SPLIT_BY [-j]\n               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
            \ [-e] [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n    \
            \           {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\n\
            Split alignment according to a partitions file\n\noptional arguments:\n\
            \  -h, --help            show this help message and exit\n  -l SPLIT_BY,\
            \ --split-by SPLIT_BY\n                        File name for partitions\
            \ to be used for alignment\n                        splitting.\n  -j,\
            \ --remove-empty    Remove taxa with sequences composed of only\n    \
            \                    undetermined characters? Default: Don't remove\n\
            \  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
            \                        File format for the output alignment. Default:\
            \ fasta\n  -e, --check-align     Check if input sequences are aligned.\
            \ Default: no\n                        check\n  -c CORES, --cores CORES\n\
            \                        Number of cores used. Default: 1\n\nrequired\
            \ arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES\
            \ ...]\n                        Alignment files to be taken as input.\
            \ You can specify\n                        multiple files using wildcards\
            \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id005
          positional:
          - !Positional
            optional: false
            position: 0
            name: check
            description: -c CORES, --cores CORES
          named:
          - !Flag
            optional: true
            synonyms:
            - -i
            - -f
            description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
            args: !RepeatFlagArg
              name: IN_FILES
          - !Flag
            optional: true
            synonyms:
            - -r
            description: "REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n\
              Create replicate data sets for phylogenetic jackknife\n[replicates,\
              \ no alignments for each replicate]"
            args: !SimpleFlagArg
              name: REPLICATE_ARGS
          - !Flag
            optional: true
            synonyms:
            - -u
            - --out-format
            description: 'File format for the output alignment. Default: fasta'
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -e
            - --check-align
            description: 'Check if input sequences are aligned. Default: no'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -i
            - --in-files
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            args: !RepeatFlagArg
              name: IN_FILES
          - !Flag
            optional: true
            synonyms:
            - -f
            - --in-format
            description: The format of input alignment
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -d
            - --data-type
            description: "Type of data\n"
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
          parent: *id012
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            - --help
            description: show this help message and exit
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] -r REPLICATE_ARGS REPLICATE_ARGS\n     \
            \          [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n\
            \               -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
            \ -d {aa,dna}\n\nCreate replicate datasets for phylogenetic jackknife\n\
            \noptional arguments:\n  -h, --help            show this help message\
            \ and exit\n  -r REPLICATE_ARGS REPLICATE_ARGS, --rep-aln REPLICATE_ARGS\
            \ REPLICATE_ARGS\n                        Create replicate data sets for\
            \ phylogenetic jackknife\n                        [replicates, no alignments\
            \ for each replicate]\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n           \
            \             File format for the output alignment. Default: fasta\n \
            \ -e, --check-align     Check if input sequences are aligned. Default:\
            \ no\n                        check\n  -c CORES, --cores CORES\n     \
            \                   Number of cores used. Default: 1\n\nrequired arguments:\n\
            \  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n  \
            \                      Alignment files to be taken as input. You can specify\n\
            \                        multiple files using wildcards (e.g. --in-files\n\
            \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id006
          positional:
          - !Positional
            optional: false
            position: 0
            name: check
            description: -c CORES, --cores CORES
          named:
          - !Flag
            optional: true
            synonyms:
            - -i
            - -f
            description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
            args: !RepeatFlagArg
              name: IN_FILES
          - !Flag
            optional: true
            synonyms:
            - -p
            - --concat-part
            description: "File name for th0e concatenated alignment partitions.\n\
              Default: 'partitions.txt'"
            args: !SimpleFlagArg
              name: CONCAT_PART
          - !Flag
            optional: true
            synonyms:
            - -t
            - --concat-out
            description: "File name for the concatenated alignment. Default:\n'concatenated.out'"
            args: !SimpleFlagArg
              name: CONCAT_OUT
          - !Flag
            optional: true
            synonyms:
            - -u
            - --out-format
            description: 'File format for the output alignment. Default: fasta'
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -e
            - --check-align
            description: 'Check if input sequences are aligned. Default: no'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -i
            - --in-files
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            args: !RepeatFlagArg
              name: IN_FILES
          - !Flag
            optional: true
            synonyms:
            - -f
            - --in-format
            description: The format of input alignment
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -d
            - --data-type
            description: "Type of data\n"
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
          parent: *id012
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            - --help
            description: show this help message and exit
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] [-p CONCAT_PART] [-t CONCAT_OUT]\n     \
            \          [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n\
            \               -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
            \ -d {aa,dna}\n\nConcatenate input alignments\n\noptional arguments:\n\
            \  -h, --help            show this help message and exit\n  -p CONCAT_PART,\
            \ --concat-part CONCAT_PART\n                        File name for th0e\
            \ concatenated alignment partitions.\n                        Default:\
            \ 'partitions.txt'\n  -t CONCAT_OUT, --concat-out CONCAT_OUT\n       \
            \                 File name for the concatenated alignment. Default:\n\
            \                        'concatenated.out'\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n           \
            \             File format for the output alignment. Default: fasta\n \
            \ -e, --check-align     Check if input sequences are aligned. Default:\
            \ no\n                        check\n  -c CORES, --cores CORES\n     \
            \                   Number of cores used. Default: 1\n\nrequired arguments:\n\
            \  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n  \
            \                      Alignment files to be taken as input. You can specify\n\
            \                        multiple files using wildcards (e.g. --in-files\n\
            \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id007
          positional:
          - !Positional
            optional: false
            position: 0
            name: check
            description: -c CORES, --cores CORES
          named:
          - !Flag
            optional: true
            synonyms:
            - -o
            - --summary-out
            description: "File name for the alignment summary. Default:\n'summary.txt'"
            args: !SimpleFlagArg
              name: SUMMARY_OUT
          - !Flag
            optional: true
            synonyms:
            - -s
            - --by-taxon
            description: "In addition to alignment summary, write by\nsequence/taxon\
              \ summaries. Default: Don't write"
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -e
            - --check-align
            description: 'Check if input sequences are aligned. Default: no'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -i
            - --in-files
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            args: !RepeatFlagArg
              name: IN_FILES
          - !Flag
            optional: true
            synonyms:
            - -f
            - --in-format
            description: The format of input alignment
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -d
            - --data-type
            description: "Type of data\n"
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
          - !Flag
            optional: true
            synonyms:
            - -c
            description: ''
            args: !SimpleFlagArg
              name: CORES
          parent: *id012
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            - --help
            description: show this help message and exit
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] [-o SUMMARY_OUT] [-s] [-e] [-c CORES] -i\
            \ IN_FILES\n               [IN_FILES ...] -f {fasta,phylip,nexus,phylip-int,nexus-int}\
            \ -d\n               {aa,dna}\n\nWrite alignment summary\n\noptional arguments:\n\
            \  -h, --help            show this help message and exit\n  -o SUMMARY_OUT,\
            \ --summary-out SUMMARY_OUT\n                        File name for the\
            \ alignment summary. Default:\n                        'summary.txt'\n\
            \  -s, --by-taxon        In addition to alignment summary, write by\n\
            \                        sequence/taxon summaries. Default: Don't write\n\
            \  -e, --check-align     Check if input sequences are aligned. Default:\
            \ no\n                        check\n  -c CORES, --cores CORES\n     \
            \                   Number of cores used. Default: 1\n\nrequired arguments:\n\
            \  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n  \
            \                      Alignment files to be taken as input. You can specify\n\
            \                        multiple files using wildcards (e.g. --in-files\n\
            \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id008
          positional:
          - !Positional
            optional: false
            position: 0
            name: check
            description: -c CORES, --cores CORES
          named:
          - !Flag
            optional: true
            synonyms:
            - -u
            - --out-format
            description: 'File format for the output alignment. Default: fasta'
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -e
            - --check-align
            description: 'Check if input sequences are aligned. Default: no'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -i
            - --in-files
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            args: !RepeatFlagArg
              name: IN_FILES
          - !Flag
            optional: true
            synonyms:
            - -f
            - --in-format
            description: The format of input alignment
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -d
            - --data-type
            description: "Type of data\n"
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
          parent: *id012
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            - --help
            description: show this help message and exit
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
            \ [-e]\n               [-c CORES] -i IN_FILES [IN_FILES ...] -f\n    \
            \           {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\n\
            Convert to other file format\n\noptional arguments:\n  -h, --help    \
            \        show this help message and exit\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n           \
            \             File format for the output alignment. Default: fasta\n \
            \ -e, --check-align     Check if input sequences are aligned. Default:\
            \ no\n                        check\n  -c CORES, --cores CORES\n     \
            \                   Number of cores used. Default: 1\n\nrequired arguments:\n\
            \  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n  \
            \                      Alignment files to be taken as input. You can specify\n\
            \                        multiple files using wildcards (e.g. --in-files\n\
            \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id009
          positional:
          - !Positional
            optional: false
            position: 0
            name: concat
            description: Concatenate input alignments
          - !Positional
            optional: false
            position: 1
            name: convert
            description: Convert to other file format
          - !Positional
            optional: false
            position: 2
            name: replicate
            description: Create replicate data sets for phylogenetic jackknife
          - !Positional
            optional: false
            position: 3
            name: split
            description: Split alignment according to a partitions file
          - !Positional
            optional: false
            position: 4
            name: summary
            description: Write alignment summary
          - !Positional
            optional: false
            position: 5
            name: remove
            description: Remove taxa from alignment
          - !Positional
            optional: false
            position: 0
            name: command
            description: Subcommand to run
          named: []
          parent: *id012
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            - --help
            description: show this help message and exit
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag:
          help_text: "Unrecognized command\nusage: AMAS <command> [<args>]\n\nThe\
            \ AMAS commands are:\n  concat      Concatenate input alignments\n  convert\
            \     Convert to other file format\n  replicate   Create replicate data\
            \ sets for phylogenetic jackknife\n  split       Split alignment according\
            \ to a partitions file\n  summary     Write alignment summary\n  remove\
            \      Remove taxa from alignment\n\nUse AMAS <command> -h for help with\
            \ arguments of the command of interest\n\npositional arguments:\n  command\
            \     Subcommand to run\n\noptional arguments:\n  -h, --help  show this\
            \ help message and exit\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id010
          positional:
          - !Positional
            optional: false
            position: 0
            name: check
            description: -c CORES, --cores CORES
          named:
          - !Flag
            optional: true
            synonyms:
            - -x
            - --taxa-to-remove
            description: Taxon/sequence names to be removed.
            args: !RepeatFlagArg
              name: TAXA_TO_REMOVE
          - !Flag
            optional: true
            synonyms:
            - -u
            - --out-format
            description: 'File format for the output alignment. Default: fasta'
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -g
            - --out-prefix
            description: "File name prefix for the concatenated alignment.\nDefault:\
              \ 'reduced_'"
            args: !SimpleFlagArg
              name: OUT_PREFIX
          - !Flag
            optional: true
            synonyms:
            - -e
            - --check-align
            description: 'Check if input sequences are aligned. Default: no'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -i
            - --in-files
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            args: !RepeatFlagArg
              name: IN_FILES
          - !Flag
            optional: true
            synonyms:
            - -f
            - --in-format
            description: The format of input alignment
            args: !ChoiceFlagArg
              choices: !!set
                ? nexus-int
                ? phylip-int
                ? phylip
                ? fasta
                ? nexus
          - !Flag
            optional: true
            synonyms:
            - -d
            - --data-type
            description: "Type of data\n"
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
          parent: *id012
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            - --help
            description: show this help message and exit
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] -x TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n\
            \               [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-g OUT_PREFIX]\n\
            \               [-e] [-c CORES] -i IN_FILES [IN_FILES ...] -f\n      \
            \         {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nRemove\
            \ taxa from alignment\n\noptional arguments:\n  -h, --help           \
            \ show this help message and exit\n  -x TAXA_TO_REMOVE [TAXA_TO_REMOVE\
            \ ...], --taxa-to-remove TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n       \
            \                 Taxon/sequence names to be removed.\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n           \
            \             File format for the output alignment. Default: fasta\n \
            \ -g OUT_PREFIX, --out-prefix OUT_PREFIX\n                        File\
            \ name prefix for the concatenated alignment.\n                      \
            \  Default: 'reduced_'\n  -e, --check-align     Check if input sequences\
            \ are aligned. Default: no\n                        check\n  -c CORES,\
            \ --cores CORES\n                        Number of cores used. Default:\
            \ 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES\
            \ [IN_FILES ...]\n                        Alignment files to be taken\
            \ as input. You can specify\n                        multiple files using\
            \ wildcards (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
          docker_image:
        usage: []
        help_flag:
        usage_flag:
        version_flag:
        help_text: "usage: AMAS <command> [<args>]\n\nThe AMAS commands are:\n  concat\
          \      Concatenate input alignments\n  convert     Convert to other file\
          \ format\n  replicate   Create replicate data sets for phylogenetic jackknife\n\
          \  split       Split alignment according to a partitions file\n  summary\
          \     Write alignment summary\n  remove      Remove taxa from alignment\n\
          \nUse AMAS <command> -h for help with arguments of the command of interest\n\
          \npositional arguments:\n  command     Subcommand to run\n\noptional arguments:\n\
          \  -h, --help  show this help message and exit\n"
        generated_using: *id004
        docker_image:
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        - --help
        description: show this help message and exit
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] -l SPLIT_BY [-j]\n               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
        \ [-e] [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n        \
        \       {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nSplit alignment\
        \ according to a partitions file\n\noptional arguments:\n  -h, --help    \
        \        show this help message and exit\n  -l SPLIT_BY, --split-by SPLIT_BY\n\
        \                        File name for partitions to be used for alignment\n\
        \                        splitting.\n  -j, --remove-empty    Remove taxa with\
        \ sequences composed of only\n                        undetermined characters?\
        \ Default: Don't remove\n  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format\
        \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                        File\
        \ format for the output alignment. Default: fasta\n  -e, --check-align   \
        \  Check if input sequences are aligned. Default: no\n                   \
        \     check\n  -c CORES, --cores CORES\n                        Number of\
        \ cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...],\
        \ --in-files IN_FILES [IN_FILES ...]\n                        Alignment files\
        \ to be taken as input. You can specify\n                        multiple\
        \ files using wildcards (e.g. --in-files\n                        *fasta)\n\
        \  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        The format of input alignment\n  -d {aa,dna}, --data-type\
        \ {aa,dna}\n                        Type of data\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id005
      positional:
      - !Positional
        optional: false
        position: 0
        name: check
        description: -c CORES, --cores CORES
      named:
      - !Flag
        optional: true
        synonyms:
        - -i
        - -f
        description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
        args: !RepeatFlagArg
          name: IN_FILES
      - !Flag
        optional: true
        synonyms:
        - -r
        description: "REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\nCreate\
          \ replicate data sets for phylogenetic jackknife\n[replicates, no alignments\
          \ for each replicate]"
        args: !SimpleFlagArg
          name: REPLICATE_ARGS
      - !Flag
        optional: true
        synonyms:
        - -u
        - --out-format
        description: 'File format for the output alignment. Default: fasta'
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -e
        - --check-align
        description: 'Check if input sequences are aligned. Default: no'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -i
        - --in-files
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        args: !RepeatFlagArg
          name: IN_FILES
      - !Flag
        optional: true
        synonyms:
        - -f
        - --in-format
        description: The format of input alignment
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -d
        - --data-type
        description: "Type of data\n"
        args: !ChoiceFlagArg
          choices: !!set
            ? dna
            ? aa
      parent: *id013
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        - --help
        description: show this help message and exit
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] -r REPLICATE_ARGS REPLICATE_ARGS\n         \
        \      [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n  \
        \             -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
        \ -d {aa,dna}\n\nCreate replicate datasets for phylogenetic jackknife\n\n\
        optional arguments:\n  -h, --help            show this help message and exit\n\
        \  -r REPLICATE_ARGS REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n\
        \                        Create replicate data sets for phylogenetic jackknife\n\
        \                        [replicates, no alignments for each replicate]\n\
        \  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        File format for the output alignment. Default: fasta\n\
        \  -e, --check-align     Check if input sequences are aligned. Default: no\n\
        \                        check\n  -c CORES, --cores CORES\n              \
        \          Number of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES\
        \ [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n                   \
        \     Alignment files to be taken as input. You can specify\n            \
        \            multiple files using wildcards (e.g. --in-files\n           \
        \             *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format\
        \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                        The format\
        \ of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n              \
        \          Type of data\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id006
      positional:
      - !Positional
        optional: false
        position: 0
        name: check
        description: -c CORES, --cores CORES
      named:
      - !Flag
        optional: true
        synonyms:
        - -i
        - -f
        description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
        args: !RepeatFlagArg
          name: IN_FILES
      - !Flag
        optional: true
        synonyms:
        - -p
        - --concat-part
        description: "File name for th0e concatenated alignment partitions.\nDefault:\
          \ 'partitions.txt'"
        args: !SimpleFlagArg
          name: CONCAT_PART
      - !Flag
        optional: true
        synonyms:
        - -t
        - --concat-out
        description: "File name for the concatenated alignment. Default:\n'concatenated.out'"
        args: !SimpleFlagArg
          name: CONCAT_OUT
      - !Flag
        optional: true
        synonyms:
        - -u
        - --out-format
        description: 'File format for the output alignment. Default: fasta'
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -e
        - --check-align
        description: 'Check if input sequences are aligned. Default: no'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -i
        - --in-files
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        args: !RepeatFlagArg
          name: IN_FILES
      - !Flag
        optional: true
        synonyms:
        - -f
        - --in-format
        description: The format of input alignment
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -d
        - --data-type
        description: "Type of data\n"
        args: !ChoiceFlagArg
          choices: !!set
            ? dna
            ? aa
      parent: *id013
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        - --help
        description: show this help message and exit
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] [-p CONCAT_PART] [-t CONCAT_OUT]\n         \
        \      [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n  \
        \             -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
        \ -d {aa,dna}\n\nConcatenate input alignments\n\noptional arguments:\n  -h,\
        \ --help            show this help message and exit\n  -p CONCAT_PART, --concat-part\
        \ CONCAT_PART\n                        File name for th0e concatenated alignment\
        \ partitions.\n                        Default: 'partitions.txt'\n  -t CONCAT_OUT,\
        \ --concat-out CONCAT_OUT\n                        File name for the concatenated\
        \ alignment. Default:\n                        'concatenated.out'\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
        \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n               \
        \         File format for the output alignment. Default: fasta\n  -e, --check-align\
        \     Check if input sequences are aligned. Default: no\n                \
        \        check\n  -c CORES, --cores CORES\n                        Number\
        \ of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES\
        \ ...], --in-files IN_FILES [IN_FILES ...]\n                        Alignment\
        \ files to be taken as input. You can specify\n                        multiple\
        \ files using wildcards (e.g. --in-files\n                        *fasta)\n\
        \  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        The format of input alignment\n  -d {aa,dna}, --data-type\
        \ {aa,dna}\n                        Type of data\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id007
      positional:
      - !Positional
        optional: false
        position: 0
        name: check
        description: -c CORES, --cores CORES
      named:
      - !Flag
        optional: true
        synonyms:
        - -o
        - --summary-out
        description: "File name for the alignment summary. Default:\n'summary.txt'"
        args: !SimpleFlagArg
          name: SUMMARY_OUT
      - !Flag
        optional: true
        synonyms:
        - -s
        - --by-taxon
        description: "In addition to alignment summary, write by\nsequence/taxon summaries.\
          \ Default: Don't write"
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -e
        - --check-align
        description: 'Check if input sequences are aligned. Default: no'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -i
        - --in-files
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        args: !RepeatFlagArg
          name: IN_FILES
      - !Flag
        optional: true
        synonyms:
        - -f
        - --in-format
        description: The format of input alignment
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -d
        - --data-type
        description: "Type of data\n"
        args: !ChoiceFlagArg
          choices: !!set
            ? dna
            ? aa
      - !Flag
        optional: true
        synonyms:
        - -c
        description: ''
        args: !SimpleFlagArg
          name: CORES
      parent: *id013
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        - --help
        description: show this help message and exit
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] [-o SUMMARY_OUT] [-s] [-e] [-c CORES] -i IN_FILES\n\
        \               [IN_FILES ...] -f {fasta,phylip,nexus,phylip-int,nexus-int}\
        \ -d\n               {aa,dna}\n\nWrite alignment summary\n\noptional arguments:\n\
        \  -h, --help            show this help message and exit\n  -o SUMMARY_OUT,\
        \ --summary-out SUMMARY_OUT\n                        File name for the alignment\
        \ summary. Default:\n                        'summary.txt'\n  -s, --by-taxon\
        \        In addition to alignment summary, write by\n                    \
        \    sequence/taxon summaries. Default: Don't write\n  -e, --check-align \
        \    Check if input sequences are aligned. Default: no\n                 \
        \       check\n  -c CORES, --cores CORES\n                        Number of\
        \ cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...],\
        \ --in-files IN_FILES [IN_FILES ...]\n                        Alignment files\
        \ to be taken as input. You can specify\n                        multiple\
        \ files using wildcards (e.g. --in-files\n                        *fasta)\n\
        \  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        The format of input alignment\n  -d {aa,dna}, --data-type\
        \ {aa,dna}\n                        Type of data\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id008
      positional:
      - !Positional
        optional: false
        position: 0
        name: check
        description: -c CORES, --cores CORES
      named:
      - !Flag
        optional: true
        synonyms:
        - -u
        - --out-format
        description: 'File format for the output alignment. Default: fasta'
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -e
        - --check-align
        description: 'Check if input sequences are aligned. Default: no'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -i
        - --in-files
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        args: !RepeatFlagArg
          name: IN_FILES
      - !Flag
        optional: true
        synonyms:
        - -f
        - --in-format
        description: The format of input alignment
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -d
        - --data-type
        description: "Type of data\n"
        args: !ChoiceFlagArg
          choices: !!set
            ? dna
            ? aa
      parent: *id013
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        - --help
        description: show this help message and exit
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
        \ [-e]\n               [-c CORES] -i IN_FILES [IN_FILES ...] -f\n        \
        \       {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nConvert to\
        \ other file format\n\noptional arguments:\n  -h, --help            show this\
        \ help message and exit\n  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format\
        \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                        File\
        \ format for the output alignment. Default: fasta\n  -e, --check-align   \
        \  Check if input sequences are aligned. Default: no\n                   \
        \     check\n  -c CORES, --cores CORES\n                        Number of\
        \ cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...],\
        \ --in-files IN_FILES [IN_FILES ...]\n                        Alignment files\
        \ to be taken as input. You can specify\n                        multiple\
        \ files using wildcards (e.g. --in-files\n                        *fasta)\n\
        \  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        The format of input alignment\n  -d {aa,dna}, --data-type\
        \ {aa,dna}\n                        Type of data\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id009
      positional:
      - !Positional
        optional: false
        position: 0
        name: concat
        description: Concatenate input alignments
      - !Positional
        optional: false
        position: 1
        name: convert
        description: Convert to other file format
      - !Positional
        optional: false
        position: 2
        name: replicate
        description: Create replicate data sets for phylogenetic jackknife
      - !Positional
        optional: false
        position: 3
        name: split
        description: Split alignment according to a partitions file
      - !Positional
        optional: false
        position: 4
        name: summary
        description: Write alignment summary
      - !Positional
        optional: false
        position: 5
        name: remove
        description: Remove taxa from alignment
      - !Positional
        optional: false
        position: 0
        name: command
        description: Subcommand to run
      named: []
      parent: *id013
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        - --help
        description: show this help message and exit
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag:
      help_text: "Unrecognized command\nusage: AMAS <command> [<args>]\n\nThe AMAS\
        \ commands are:\n  concat      Concatenate input alignments\n  convert   \
        \  Convert to other file format\n  replicate   Create replicate data sets\
        \ for phylogenetic jackknife\n  split       Split alignment according to a\
        \ partitions file\n  summary     Write alignment summary\n  remove      Remove\
        \ taxa from alignment\n\nUse AMAS <command> -h for help with arguments of\
        \ the command of interest\n\npositional arguments:\n  command     Subcommand\
        \ to run\n\noptional arguments:\n  -h, --help  show this help message and\
        \ exit\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id010
      positional:
      - !Positional
        optional: false
        position: 0
        name: check
        description: -c CORES, --cores CORES
      named:
      - !Flag
        optional: true
        synonyms:
        - -x
        - --taxa-to-remove
        description: Taxon/sequence names to be removed.
        args: !RepeatFlagArg
          name: TAXA_TO_REMOVE
      - !Flag
        optional: true
        synonyms:
        - -u
        - --out-format
        description: 'File format for the output alignment. Default: fasta'
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -g
        - --out-prefix
        description: "File name prefix for the concatenated alignment.\nDefault: 'reduced_'"
        args: !SimpleFlagArg
          name: OUT_PREFIX
      - !Flag
        optional: true
        synonyms:
        - -e
        - --check-align
        description: 'Check if input sequences are aligned. Default: no'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -i
        - --in-files
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        args: !RepeatFlagArg
          name: IN_FILES
      - !Flag
        optional: true
        synonyms:
        - -f
        - --in-format
        description: The format of input alignment
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip
            ? nexus-int
            ? fasta
            ? phylip-int
            ? nexus
      - !Flag
        optional: true
        synonyms:
        - -d
        - --data-type
        description: "Type of data\n"
        args: !ChoiceFlagArg
          choices: !!set
            ? dna
            ? aa
      parent: *id013
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        - --help
        description: show this help message and exit
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] -x TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n   \
        \            [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-g OUT_PREFIX]\n\
        \               [-e] [-c CORES] -i IN_FILES [IN_FILES ...] -f\n          \
        \     {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nRemove taxa\
        \ from alignment\n\noptional arguments:\n  -h, --help            show this\
        \ help message and exit\n  -x TAXA_TO_REMOVE [TAXA_TO_REMOVE ...], --taxa-to-remove\
        \ TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n                        Taxon/sequence\
        \ names to be removed.\n  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format\
        \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                        File\
        \ format for the output alignment. Default: fasta\n  -g OUT_PREFIX, --out-prefix\
        \ OUT_PREFIX\n                        File name prefix for the concatenated\
        \ alignment.\n                        Default: 'reduced_'\n  -e, --check-align\
        \     Check if input sequences are aligned. Default: no\n                \
        \        check\n  -c CORES, --cores CORES\n                        Number\
        \ of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES\
        \ ...], --in-files IN_FILES [IN_FILES ...]\n                        Alignment\
        \ files to be taken as input. You can specify\n                        multiple\
        \ files using wildcards (e.g. --in-files\n                        *fasta)\n\
        \  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        The format of input alignment\n  -d {aa,dna}, --data-type\
        \ {aa,dna}\n                        Type of data\n"
      generated_using: *id004
      docker_image:
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "usage: AMAS <command> [<args>]\n\nThe AMAS commands are:\n  concat\
      \      Concatenate input alignments\n  convert     Convert to other file format\n\
      \  replicate   Create replicate data sets for phylogenetic jackknife\n  split\
      \       Split alignment according to a partitions file\n  summary     Write\
      \ alignment summary\n  remove      Remove taxa from alignment\n\nUse AMAS <command>\
      \ -h for help with arguments of the command of interest\n\npositional arguments:\n\
      \  command     Subcommand to run\n\noptional arguments:\n  -h, --help  show\
      \ this help message and exit\n"
    generated_using: *id004
    docker_image:
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] -l SPLIT_BY [-j]\n               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
    \ [-e] [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n            \
    \   {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nSplit alignment according\
    \ to a partitions file\n\noptional arguments:\n  -h, --help            show this\
    \ help message and exit\n  -l SPLIT_BY, --split-by SPLIT_BY\n                \
    \        File name for partitions to be used for alignment\n                 \
    \       splitting.\n  -j, --remove-empty    Remove taxa with sequences composed\
    \ of only\n                        undetermined characters? Default: Don't remove\n\
    \  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
    \                        File format for the output alignment. Default: fasta\n\
    \  -e, --check-align     Check if input sequences are aligned. Default: no\n \
    \                       check\n  -c CORES, --cores CORES\n                   \
    \     Number of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES\
    \ ...], --in-files IN_FILES [IN_FILES ...]\n                        Alignment\
    \ files to be taken as input. You can specify\n                        multiple\
    \ files using wildcards (e.g. --in-files\n                        *fasta)\n  -f\
    \ {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
    \                        The format of input alignment\n  -d {aa,dna}, --data-type\
    \ {aa,dna}\n                        Type of data\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id005
  positional:
  - !Positional
    optional: false
    position: 0
    name: check
    description: -c CORES, --cores CORES
  named:
  - !Flag
    optional: true
    synonyms:
    - -r
    description: "REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\nCreate\
      \ replicate data sets for phylogenetic jackknife\n[replicates, no alignments\
      \ for each replicate]"
    args: !SimpleFlagArg
      name: REPLICATE_ARGS
  - !Flag
    optional: true
    synonyms:
    - -u
    - --out-format
    description: 'File format for the output alignment. Default: fasta'
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -e
    - --check-align
    description: 'Check if input sequences are aligned. Default: no'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -i
    - --in-files
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    args: !RepeatFlagArg
      name: IN_FILES
  - !Flag
    optional: true
    synonyms:
    - -f
    - --in-format
    description: The format of input alignment
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -d
    - --data-type
    description: "Type of data\n"
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
  parent: *id014
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] -r REPLICATE_ARGS REPLICATE_ARGS\n             \
    \  [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n          \
    \     -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
    \ -d {aa,dna}\n\nCreate replicate datasets for phylogenetic jackknife\n\noptional\
    \ arguments:\n  -h, --help            show this help message and exit\n  -r REPLICATE_ARGS\
    \ REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n                  \
    \      Create replicate data sets for phylogenetic jackknife\n               \
    \         [replicates, no alignments for each replicate]\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                   \
    \     File format for the output alignment. Default: fasta\n  -e, --check-align\
    \     Check if input sequences are aligned. Default: no\n                    \
    \    check\n  -c CORES, --cores CORES\n                        Number of cores\
    \ used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files\
    \ IN_FILES [IN_FILES ...]\n                        Alignment files to be taken\
    \ as input. You can specify\n                        multiple files using wildcards\
    \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                    \
    \    The format of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n    \
    \                    Type of data\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id006
  positional:
  - !Positional
    optional: false
    position: 0
    name: check
    description: -c CORES, --cores CORES
  named:
  - !Flag
    optional: true
    synonyms:
    - -p
    - --concat-part
    description: "File name for th0e concatenated alignment partitions.\nDefault:\
      \ 'partitions.txt'"
    args: !SimpleFlagArg
      name: CONCAT_PART
  - !Flag
    optional: true
    synonyms:
    - -t
    - --concat-out
    description: "File name for the concatenated alignment. Default:\n'concatenated.out'"
    args: !SimpleFlagArg
      name: CONCAT_OUT
  - !Flag
    optional: true
    synonyms:
    - -u
    - --out-format
    description: 'File format for the output alignment. Default: fasta'
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -e
    - --check-align
    description: 'Check if input sequences are aligned. Default: no'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -i
    - --in-files
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    args: !RepeatFlagArg
      name: IN_FILES
  - !Flag
    optional: true
    synonyms:
    - -f
    - --in-format
    description: The format of input alignment
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -d
    - --data-type
    description: "Type of data\n"
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
  parent: *id014
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] [-p CONCAT_PART] [-t CONCAT_OUT]\n             \
    \  [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n          \
    \     -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
    \ -d {aa,dna}\n\nConcatenate input alignments\n\noptional arguments:\n  -h, --help\
    \            show this help message and exit\n  -p CONCAT_PART, --concat-part\
    \ CONCAT_PART\n                        File name for th0e concatenated alignment\
    \ partitions.\n                        Default: 'partitions.txt'\n  -t CONCAT_OUT,\
    \ --concat-out CONCAT_OUT\n                        File name for the concatenated\
    \ alignment. Default:\n                        'concatenated.out'\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                   \
    \     File format for the output alignment. Default: fasta\n  -e, --check-align\
    \     Check if input sequences are aligned. Default: no\n                    \
    \    check\n  -c CORES, --cores CORES\n                        Number of cores\
    \ used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files\
    \ IN_FILES [IN_FILES ...]\n                        Alignment files to be taken\
    \ as input. You can specify\n                        multiple files using wildcards\
    \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                    \
    \    The format of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n    \
    \                    Type of data\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id007
  positional:
  - !Positional
    optional: false
    position: 0
    name: check
    description: -c CORES, --cores CORES
  named:
  - !Flag
    optional: true
    synonyms:
    - -o
    - --summary-out
    description: "File name for the alignment summary. Default:\n'summary.txt'"
    args: !SimpleFlagArg
      name: SUMMARY_OUT
  - !Flag
    optional: true
    synonyms:
    - -s
    - --by-taxon
    description: "In addition to alignment summary, write by\nsequence/taxon summaries.\
      \ Default: Don't write"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -e
    - --check-align
    description: 'Check if input sequences are aligned. Default: no'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -i
    - --in-files
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    args: !RepeatFlagArg
      name: IN_FILES
  - !Flag
    optional: true
    synonyms:
    - -f
    - --in-format
    description: The format of input alignment
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -d
    - --data-type
    description: "Type of data\n"
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
  - !Flag
    optional: true
    synonyms:
    - -c
    description: ''
    args: !SimpleFlagArg
      name: CORES
  parent: *id014
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] [-o SUMMARY_OUT] [-s] [-e] [-c CORES] -i IN_FILES\n\
    \               [IN_FILES ...] -f {fasta,phylip,nexus,phylip-int,nexus-int} -d\n\
    \               {aa,dna}\n\nWrite alignment summary\n\noptional arguments:\n \
    \ -h, --help            show this help message and exit\n  -o SUMMARY_OUT, --summary-out\
    \ SUMMARY_OUT\n                        File name for the alignment summary. Default:\n\
    \                        'summary.txt'\n  -s, --by-taxon        In addition to\
    \ alignment summary, write by\n                        sequence/taxon summaries.\
    \ Default: Don't write\n  -e, --check-align     Check if input sequences are aligned.\
    \ Default: no\n                        check\n  -c CORES, --cores CORES\n    \
    \                    Number of cores used. Default: 1\n\nrequired arguments:\n\
    \  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n          \
    \              Alignment files to be taken as input. You can specify\n       \
    \                 multiple files using wildcards (e.g. --in-files\n          \
    \              *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format\
    \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                        The format\
    \ of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n                  \
    \      Type of data\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id008
  positional:
  - !Positional
    optional: false
    position: 0
    name: check
    description: -c CORES, --cores CORES
  named:
  - !Flag
    optional: true
    synonyms:
    - -u
    - --out-format
    description: 'File format for the output alignment. Default: fasta'
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -e
    - --check-align
    description: 'Check if input sequences are aligned. Default: no'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -i
    - --in-files
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    args: !RepeatFlagArg
      name: IN_FILES
  - !Flag
    optional: true
    synonyms:
    - -f
    - --in-format
    description: The format of input alignment
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -d
    - --data-type
    description: "Type of data\n"
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
  parent: *id014
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e]\n\
    \               [-c CORES] -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
    \ -d {aa,dna}\n\nConvert to other file format\n\noptional arguments:\n  -h, --help\
    \            show this help message and exit\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                   \
    \     File format for the output alignment. Default: fasta\n  -e, --check-align\
    \     Check if input sequences are aligned. Default: no\n                    \
    \    check\n  -c CORES, --cores CORES\n                        Number of cores\
    \ used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files\
    \ IN_FILES [IN_FILES ...]\n                        Alignment files to be taken\
    \ as input. You can specify\n                        multiple files using wildcards\
    \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                    \
    \    The format of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n    \
    \                    Type of data\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id009
  positional:
  - !Positional
    optional: false
    position: 0
    name: concat
    description: Concatenate input alignments
  - !Positional
    optional: false
    position: 1
    name: convert
    description: Convert to other file format
  - !Positional
    optional: false
    position: 2
    name: replicate
    description: Create replicate data sets for phylogenetic jackknife
  - !Positional
    optional: false
    position: 3
    name: split
    description: Split alignment according to a partitions file
  - !Positional
    optional: false
    position: 4
    name: summary
    description: Write alignment summary
  - !Positional
    optional: false
    position: 5
    name: remove
    description: Remove taxa from alignment
  - !Positional
    optional: false
    position: 0
    name: command
    description: Subcommand to run
  named: []
  parent: *id014
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "Unrecognized command\nusage: AMAS <command> [<args>]\n\nThe AMAS commands\
    \ are:\n  concat      Concatenate input alignments\n  convert     Convert to other\
    \ file format\n  replicate   Create replicate data sets for phylogenetic jackknife\n\
    \  split       Split alignment according to a partitions file\n  summary     Write\
    \ alignment summary\n  remove      Remove taxa from alignment\n\nUse AMAS <command>\
    \ -h for help with arguments of the command of interest\n\npositional arguments:\n\
    \  command     Subcommand to run\n\noptional arguments:\n  -h, --help  show this\
    \ help message and exit\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id010
  positional:
  - !Positional
    optional: false
    position: 0
    name: check
    description: -c CORES, --cores CORES
  named:
  - !Flag
    optional: true
    synonyms:
    - -x
    - --taxa-to-remove
    description: Taxon/sequence names to be removed.
    args: !RepeatFlagArg
      name: TAXA_TO_REMOVE
  - !Flag
    optional: true
    synonyms:
    - -u
    - --out-format
    description: 'File format for the output alignment. Default: fasta'
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -g
    - --out-prefix
    description: "File name prefix for the concatenated alignment.\nDefault: 'reduced_'"
    args: !SimpleFlagArg
      name: OUT_PREFIX
  - !Flag
    optional: true
    synonyms:
    - -e
    - --check-align
    description: 'Check if input sequences are aligned. Default: no'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -i
    - --in-files
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    args: !RepeatFlagArg
      name: IN_FILES
  - !Flag
    optional: true
    synonyms:
    - -f
    - --in-format
    description: The format of input alignment
    args: !ChoiceFlagArg
      choices: !!set
        fasta:
        phylip-int:
        phylip:
        nexus-int:
        nexus:
  - !Flag
    optional: true
    synonyms:
    - -d
    - --data-type
    description: "Type of data\n"
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
  parent: *id014
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] -x TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n       \
    \        [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-g OUT_PREFIX]\n    \
    \           [-e] [-c CORES] -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
    \ -d {aa,dna}\n\nRemove taxa from alignment\n\noptional arguments:\n  -h, --help\
    \            show this help message and exit\n  -x TAXA_TO_REMOVE [TAXA_TO_REMOVE\
    \ ...], --taxa-to-remove TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n               \
    \         Taxon/sequence names to be removed.\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                   \
    \     File format for the output alignment. Default: fasta\n  -g OUT_PREFIX, --out-prefix\
    \ OUT_PREFIX\n                        File name prefix for the concatenated alignment.\n\
    \                        Default: 'reduced_'\n  -e, --check-align     Check if\
    \ input sequences are aligned. Default: no\n                        check\n  -c\
    \ CORES, --cores CORES\n                        Number of cores used. Default:\
    \ 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES\
    \ [IN_FILES ...]\n                        Alignment files to be taken as input.\
    \ You can specify\n                        multiple files using wildcards (e.g.\
    \ --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                    \
    \    The format of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n    \
    \                    Type of data\n"
  generated_using: *id004
  docker_image:
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "usage: AMAS <command> [<args>]\n\nThe AMAS commands are:\n  concat   \
  \   Concatenate input alignments\n  convert     Convert to other file format\n \
  \ replicate   Create replicate data sets for phylogenetic jackknife\n  split   \
  \    Split alignment according to a partitions file\n  summary     Write alignment\
  \ summary\n  remove      Remove taxa from alignment\n\nUse AMAS <command> -h for\
  \ help with arguments of the command of interest\n\npositional arguments:\n  command\
  \     Subcommand to run\n\noptional arguments:\n  -h, --help  show this help message\
  \ and exit\n"
generated_using: *id004
docker_image:
