!Command
command: &id001
- AMAS.py
positional: []
named: []
parent:
subcommands:
- !Command
  command: &id002
  - AMAS.py
  - split
  positional:
  - !Positional
    description: -c CORES, --cores CORES
    position: 0
    name: check
    optional: false
  named:
  - !Flag
    description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
    synonyms:
    - -i
    - -f
    args: !RepeatFlagArg
      name: IN_FILES
    optional: true
  - !Flag
    description: "File name for partitions to be used for alignment\nsplitting."
    synonyms:
    - -l
    - --split-by
    args: !SimpleFlagArg
      name: SPLIT_BY
    optional: true
  - !Flag
    description: "Remove taxa with sequences composed of only\nundetermined characters?\
      \ Default: Don't remove"
    synonyms:
    - -j
    - --remove-empty
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: 'File format for the output alignment. Default: fasta'
    synonyms:
    - -u
    - --out-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: 'Check if input sequences are aligned. Default: no'
    synonyms:
    - -e
    - --check-align
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    synonyms:
    - -i
    - --in-files
    args: !RepeatFlagArg
      name: IN_FILES
    optional: true
  - !Flag
    description: The format of input alignment
    synonyms:
    - -f
    - --in-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: "Type of data\n"
    synonyms:
    - -d
    - --data-type
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
    optional: true
  parent: &id011 !Command
    command: *id001
    positional: []
    named: []
    parent:
    subcommands:
    - !Command
      command: *id002
      positional:
      - !Positional
        description: -c CORES, --cores CORES
        position: 0
        name: check
        optional: false
      named:
      - !Flag
        description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
        synonyms:
        - -i
        - -f
        args: !RepeatFlagArg
          name: IN_FILES
        optional: true
      - !Flag
        description: "File name for partitions to be used for alignment\nsplitting."
        synonyms:
        - -l
        - --split-by
        args: !SimpleFlagArg
          name: SPLIT_BY
        optional: true
      - !Flag
        description: "Remove taxa with sequences composed of only\nundetermined characters?\
          \ Default: Don't remove"
        synonyms:
        - -j
        - --remove-empty
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: 'File format for the output alignment. Default: fasta'
        synonyms:
        - -u
        - --out-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: 'Check if input sequences are aligned. Default: no'
        synonyms:
        - -e
        - --check-align
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        synonyms:
        - -i
        - --in-files
        args: !RepeatFlagArg
          name: IN_FILES
        optional: true
      - !Flag
        description: The format of input alignment
        synonyms:
        - -f
        - --in-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: "Type of data\n"
        synonyms:
        - -d
        - --data-type
        args: !ChoiceFlagArg
          choices: !!set
            ? aa
            ? dna
        optional: true
      parent: &id003 !Command
        command: *id001
        positional: []
        named: []
        parent:
        subcommands:
        - !Command
          command: *id002
          positional:
          - !Positional
            description: -c CORES, --cores CORES
            position: 0
            name: check
            optional: false
          named:
          - !Flag
            description: ''
            synonyms:
            - -i
            - -f
            args: !RepeatFlagArg
              name: IN_FILES
            optional: true
          - !Flag
            description: "File name for partitions to be used for alignment\nsplitting."
            synonyms:
            - -l
            - --split-by
            args: !SimpleFlagArg
              name: SPLIT_BY
            optional: true
          - !Flag
            description: "Remove taxa with sequences composed of only\nundetermined\
              \ characters? Default: Don't remove"
            synonyms:
            - -j
            - --remove-empty
            args: !EmptyFlagArg {}
            optional: true
          - !Flag
            description: 'File format for the output alignment. Default: fasta'
            synonyms:
            - -u
            - --out-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: 'Check if input sequences are aligned. Default: no'
            synonyms:
            - -e
            - --check-align
            args: !EmptyFlagArg {}
            optional: true
          - !Flag
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            synonyms:
            - -i
            - --in-files
            args: !RepeatFlagArg
              name: IN_FILES
            optional: true
          - !Flag
            description: The format of input alignment
            synonyms:
            - -f
            - --in-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: "Type of data\n"
            synonyms:
            - -d
            - --data-type
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
            optional: true
          parent: *id003
          subcommands: []
          usage: []
          help_flag: !Flag
            description: show this help message and exit
            synonyms:
            - -h
            - --help
            args: !EmptyFlagArg {}
            optional: true
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] -l SPLIT_BY [-j]\n               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
            \ [-e] [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n    \
            \           {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\n\
            Split alignment according to a partitions file\n\noptional arguments:\n\
            \  -h, --help            show this help message and exit\n  -l SPLIT_BY,\
            \ --split-by SPLIT_BY\n                        File name for partitions\
            \ to be used for alignment\n                        splitting.\n  -j,\
            \ --remove-empty    Remove taxa with sequences composed of only\n    \
            \                    undetermined characters? Default: Don't remove\n\
            \  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
            \                        File format for the output alignment. Default:\
            \ fasta\n  -e, --check-align     Check if input sequences are aligned.\
            \ Default: no\n                        check\n  -c CORES, --cores CORES\n\
            \                        Number of cores used. Default: 1\n\nrequired\
            \ arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES\
            \ ...]\n                        Alignment files to be taken as input.\
            \ You can specify\n                        multiple files using wildcards\
            \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: &id004
          - --help
        - !Command
          command: &id005
          - AMAS.py
          - replicate
          positional:
          - !Positional
            description: -c CORES, --cores CORES
            position: 0
            name: check
            optional: false
          named:
          - !Flag
            description: ''
            synonyms:
            - -i
            - -f
            args: !RepeatFlagArg
              name: IN_FILES
            optional: true
          - !Flag
            description: "REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n\
              Create replicate data sets for phylogenetic jackknife\n[replicates,\
              \ no alignments for each replicate]"
            synonyms:
            - -r
            args: !SimpleFlagArg
              name: REPLICATE_ARGS
            optional: true
          - !Flag
            description: 'File format for the output alignment. Default: fasta'
            synonyms:
            - -u
            - --out-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: 'Check if input sequences are aligned. Default: no'
            synonyms:
            - -e
            - --check-align
            args: !EmptyFlagArg {}
            optional: true
          - !Flag
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            synonyms:
            - -i
            - --in-files
            args: !RepeatFlagArg
              name: IN_FILES
            optional: true
          - !Flag
            description: The format of input alignment
            synonyms:
            - -f
            - --in-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: "Type of data\n"
            synonyms:
            - -d
            - --data-type
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
            optional: true
          parent: *id003
          subcommands: []
          usage: []
          help_flag: !Flag
            description: show this help message and exit
            synonyms:
            - -h
            - --help
            args: !EmptyFlagArg {}
            optional: true
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] -r REPLICATE_ARGS REPLICATE_ARGS\n     \
            \          [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n\
            \               -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
            \ -d {aa,dna}\n\nCreate replicate datasets for phylogenetic jackknife\n\
            \noptional arguments:\n  -h, --help            show this help message\
            \ and exit\n  -r REPLICATE_ARGS REPLICATE_ARGS, --rep-aln REPLICATE_ARGS\
            \ REPLICATE_ARGS\n                        Create replicate data sets for\
            \ phylogenetic jackknife\n                        [replicates, no alignments\
            \ for each replicate]\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n           \
            \             File format for the output alignment. Default: fasta\n \
            \ -e, --check-align     Check if input sequences are aligned. Default:\
            \ no\n                        check\n  -c CORES, --cores CORES\n     \
            \                   Number of cores used. Default: 1\n\nrequired arguments:\n\
            \  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n  \
            \                      Alignment files to be taken as input. You can specify\n\
            \                        multiple files using wildcards (e.g. --in-files\n\
            \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
        - !Command
          command: &id006
          - AMAS.py
          - concat
          positional:
          - !Positional
            description: -c CORES, --cores CORES
            position: 0
            name: check
            optional: false
          named:
          - !Flag
            description: ''
            synonyms:
            - -i
            - -f
            args: !RepeatFlagArg
              name: IN_FILES
            optional: true
          - !Flag
            description: "File name for th0e concatenated alignment partitions.\n\
              Default: 'partitions.txt'"
            synonyms:
            - -p
            - --concat-part
            args: !SimpleFlagArg
              name: CONCAT_PART
            optional: true
          - !Flag
            description: "File name for the concatenated alignment. Default:\n'concatenated.out'"
            synonyms:
            - -t
            - --concat-out
            args: !SimpleFlagArg
              name: CONCAT_OUT
            optional: true
          - !Flag
            description: 'File format for the output alignment. Default: fasta'
            synonyms:
            - -u
            - --out-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: 'Check if input sequences are aligned. Default: no'
            synonyms:
            - -e
            - --check-align
            args: !EmptyFlagArg {}
            optional: true
          - !Flag
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            synonyms:
            - -i
            - --in-files
            args: !RepeatFlagArg
              name: IN_FILES
            optional: true
          - !Flag
            description: The format of input alignment
            synonyms:
            - -f
            - --in-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: "Type of data\n"
            synonyms:
            - -d
            - --data-type
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
            optional: true
          parent: *id003
          subcommands: []
          usage: []
          help_flag: !Flag
            description: show this help message and exit
            synonyms:
            - -h
            - --help
            args: !EmptyFlagArg {}
            optional: true
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] [-p CONCAT_PART] [-t CONCAT_OUT]\n     \
            \          [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n\
            \               -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
            \ -d {aa,dna}\n\nConcatenate input alignments\n\noptional arguments:\n\
            \  -h, --help            show this help message and exit\n  -p CONCAT_PART,\
            \ --concat-part CONCAT_PART\n                        File name for th0e\
            \ concatenated alignment partitions.\n                        Default:\
            \ 'partitions.txt'\n  -t CONCAT_OUT, --concat-out CONCAT_OUT\n       \
            \                 File name for the concatenated alignment. Default:\n\
            \                        'concatenated.out'\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n           \
            \             File format for the output alignment. Default: fasta\n \
            \ -e, --check-align     Check if input sequences are aligned. Default:\
            \ no\n                        check\n  -c CORES, --cores CORES\n     \
            \                   Number of cores used. Default: 1\n\nrequired arguments:\n\
            \  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n  \
            \                      Alignment files to be taken as input. You can specify\n\
            \                        multiple files using wildcards (e.g. --in-files\n\
            \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
        - !Command
          command: &id007
          - AMAS.py
          - summary
          positional:
          - !Positional
            description: -c CORES, --cores CORES
            position: 0
            name: check
            optional: false
          named:
          - !Flag
            description: "File name for the alignment summary. Default:\n'summary.txt'"
            synonyms:
            - -o
            - --summary-out
            args: !SimpleFlagArg
              name: SUMMARY_OUT
            optional: true
          - !Flag
            description: "In addition to alignment summary, write by\nsequence/taxon\
              \ summaries. Default: Don't write"
            synonyms:
            - -s
            - --by-taxon
            args: !EmptyFlagArg {}
            optional: true
          - !Flag
            description: 'Check if input sequences are aligned. Default: no'
            synonyms:
            - -e
            - --check-align
            args: !EmptyFlagArg {}
            optional: true
          - !Flag
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            synonyms:
            - -i
            - --in-files
            args: !RepeatFlagArg
              name: IN_FILES
            optional: true
          - !Flag
            description: The format of input alignment
            synonyms:
            - -f
            - --in-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: "Type of data\n"
            synonyms:
            - -d
            - --data-type
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
            optional: true
          - !Flag
            description: ''
            synonyms:
            - -c
            args: !SimpleFlagArg
              name: CORES
            optional: true
          parent: *id003
          subcommands: []
          usage: []
          help_flag: !Flag
            description: show this help message and exit
            synonyms:
            - -h
            - --help
            args: !EmptyFlagArg {}
            optional: true
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] [-o SUMMARY_OUT] [-s] [-e] [-c CORES] -i\
            \ IN_FILES\n               [IN_FILES ...] -f {fasta,phylip,nexus,phylip-int,nexus-int}\
            \ -d\n               {aa,dna}\n\nWrite alignment summary\n\noptional arguments:\n\
            \  -h, --help            show this help message and exit\n  -o SUMMARY_OUT,\
            \ --summary-out SUMMARY_OUT\n                        File name for the\
            \ alignment summary. Default:\n                        'summary.txt'\n\
            \  -s, --by-taxon        In addition to alignment summary, write by\n\
            \                        sequence/taxon summaries. Default: Don't write\n\
            \  -e, --check-align     Check if input sequences are aligned. Default:\
            \ no\n                        check\n  -c CORES, --cores CORES\n     \
            \                   Number of cores used. Default: 1\n\nrequired arguments:\n\
            \  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n  \
            \                      Alignment files to be taken as input. You can specify\n\
            \                        multiple files using wildcards (e.g. --in-files\n\
            \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
        - !Command
          command: &id008
          - AMAS.py
          - convert
          positional:
          - !Positional
            description: -c CORES, --cores CORES
            position: 0
            name: check
            optional: false
          named:
          - !Flag
            description: 'File format for the output alignment. Default: fasta'
            synonyms:
            - -u
            - --out-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: 'Check if input sequences are aligned. Default: no'
            synonyms:
            - -e
            - --check-align
            args: !EmptyFlagArg {}
            optional: true
          - !Flag
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            synonyms:
            - -i
            - --in-files
            args: !RepeatFlagArg
              name: IN_FILES
            optional: true
          - !Flag
            description: The format of input alignment
            synonyms:
            - -f
            - --in-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: "Type of data\n"
            synonyms:
            - -d
            - --data-type
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
            optional: true
          parent: *id003
          subcommands: []
          usage: []
          help_flag: !Flag
            description: show this help message and exit
            synonyms:
            - -h
            - --help
            args: !EmptyFlagArg {}
            optional: true
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
            \ [-e]\n               [-c CORES] -i IN_FILES [IN_FILES ...] -f\n    \
            \           {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\n\
            Convert to other file format\n\noptional arguments:\n  -h, --help    \
            \        show this help message and exit\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n           \
            \             File format for the output alignment. Default: fasta\n \
            \ -e, --check-align     Check if input sequences are aligned. Default:\
            \ no\n                        check\n  -c CORES, --cores CORES\n     \
            \                   Number of cores used. Default: 1\n\nrequired arguments:\n\
            \  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n  \
            \                      Alignment files to be taken as input. You can specify\n\
            \                        multiple files using wildcards (e.g. --in-files\n\
            \                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
        - !Command
          command: &id009
          - AMAS.py
          - command
          positional:
          - !Positional
            description: Concatenate input alignments
            position: 0
            name: concat
            optional: false
          - !Positional
            description: Convert to other file format
            position: 1
            name: convert
            optional: false
          - !Positional
            description: Create replicate data sets for phylogenetic jackknife
            position: 2
            name: replicate
            optional: false
          - !Positional
            description: Split alignment according to a partitions file
            position: 3
            name: split
            optional: false
          - !Positional
            description: Write alignment summary
            position: 4
            name: summary
            optional: false
          - !Positional
            description: Remove taxa from alignment
            position: 5
            name: remove
            optional: false
          - !Positional
            description: Subcommand to run
            position: 0
            name: command
            optional: false
          named: []
          parent: *id003
          subcommands: []
          usage: []
          help_flag: !Flag
            description: show this help message and exit
            synonyms:
            - -h
            - --help
            args: !EmptyFlagArg {}
            optional: true
          usage_flag:
          version_flag:
          help_text: "Unrecognized command\nusage: AMAS <command> [<args>]\n\nThe\
            \ AMAS commands are:\n  concat      Concatenate input alignments\n  convert\
            \     Convert to other file format\n  replicate   Create replicate data\
            \ sets for phylogenetic jackknife\n  split       Split alignment according\
            \ to a partitions file\n  summary     Write alignment summary\n  remove\
            \      Remove taxa from alignment\n\nUse AMAS <command> -h for help with\
            \ arguments of the command of interest\n\npositional arguments:\n  command\
            \     Subcommand to run\n\noptional arguments:\n  -h, --help  show this\
            \ help message and exit\n"
          generated_using: *id004
        - !Command
          command: &id010
          - AMAS.py
          - remove
          positional:
          - !Positional
            description: -c CORES, --cores CORES
            position: 0
            name: check
            optional: false
          named:
          - !Flag
            description: Taxon/sequence names to be removed.
            synonyms:
            - -x
            - --taxa-to-remove
            args: !RepeatFlagArg
              name: TAXA_TO_REMOVE
            optional: true
          - !Flag
            description: 'File format for the output alignment. Default: fasta'
            synonyms:
            - -u
            - --out-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: "File name prefix for the concatenated alignment.\nDefault:\
              \ 'reduced_'"
            synonyms:
            - -g
            - --out-prefix
            args: !SimpleFlagArg
              name: OUT_PREFIX
            optional: true
          - !Flag
            description: 'Check if input sequences are aligned. Default: no'
            synonyms:
            - -e
            - --check-align
            args: !EmptyFlagArg {}
            optional: true
          - !Flag
            description: "Alignment files to be taken as input. You can specify\n\
              multiple files using wildcards (e.g. --in-files\n*fasta)"
            synonyms:
            - -i
            - --in-files
            args: !RepeatFlagArg
              name: IN_FILES
            optional: true
          - !Flag
            description: The format of input alignment
            synonyms:
            - -f
            - --in-format
            args: !ChoiceFlagArg
              choices: !!set
                ? fasta
                ? phylip
                ? nexus-int
                ? phylip-int
                ? nexus
            optional: true
          - !Flag
            description: "Type of data\n"
            synonyms:
            - -d
            - --data-type
            args: !ChoiceFlagArg
              choices: !!set
                ? aa
                ? dna
            optional: true
          parent: *id003
          subcommands: []
          usage: []
          help_flag: !Flag
            description: show this help message and exit
            synonyms:
            - -h
            - --help
            args: !EmptyFlagArg {}
            optional: true
          usage_flag:
          version_flag:
          help_text: "usage: AMAS.py [-h] -x TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n\
            \               [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-g OUT_PREFIX]\n\
            \               [-e] [-c CORES] -i IN_FILES [IN_FILES ...] -f\n      \
            \         {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nRemove\
            \ taxa from alignment\n\noptional arguments:\n  -h, --help           \
            \ show this help message and exit\n  -x TAXA_TO_REMOVE [TAXA_TO_REMOVE\
            \ ...], --taxa-to-remove TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n       \
            \                 Taxon/sequence names to be removed.\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n           \
            \             File format for the output alignment. Default: fasta\n \
            \ -g OUT_PREFIX, --out-prefix OUT_PREFIX\n                        File\
            \ name prefix for the concatenated alignment.\n                      \
            \  Default: 'reduced_'\n  -e, --check-align     Check if input sequences\
            \ are aligned. Default: no\n                        check\n  -c CORES,\
            \ --cores CORES\n                        Number of cores used. Default:\
            \ 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES\
            \ [IN_FILES ...]\n                        Alignment files to be taken\
            \ as input. You can specify\n                        multiple files using\
            \ wildcards (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
            \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n            \
            \            The format of input alignment\n  -d {aa,dna}, --data-type\
            \ {aa,dna}\n                        Type of data\n"
          generated_using: *id004
        usage: []
        help_flag: !Flag
          description: show this help message and exit
          synonyms:
          - -h
          - --help
          args: !EmptyFlagArg {}
          optional: true
        usage_flag:
        version_flag:
        help_text: "usage: AMAS <command> [<args>]\n\nThe AMAS commands are:\n  concat\
          \      Concatenate input alignments\n  convert     Convert to other file\
          \ format\n  replicate   Create replicate data sets for phylogenetic jackknife\n\
          \  split       Split alignment according to a partitions file\n  summary\
          \     Write alignment summary\n  remove      Remove taxa from alignment\n\
          \nUse AMAS <command> -h for help with arguments of the command of interest\n\
          \npositional arguments:\n  command     Subcommand to run\n\noptional arguments:\n\
          \  -h, --help  show this help message and exit\n"
        generated_using: *id004
      subcommands: []
      usage: []
      help_flag: !Flag
        description: show this help message and exit
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] -l SPLIT_BY [-j]\n               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
        \ [-e] [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n        \
        \       {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nSplit alignment\
        \ according to a partitions file\n\noptional arguments:\n  -h, --help    \
        \        show this help message and exit\n  -l SPLIT_BY, --split-by SPLIT_BY\n\
        \                        File name for partitions to be used for alignment\n\
        \                        splitting.\n  -j, --remove-empty    Remove taxa with\
        \ sequences composed of only\n                        undetermined characters?\
        \ Default: Don't remove\n  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format\
        \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                        File\
        \ format for the output alignment. Default: fasta\n  -e, --check-align   \
        \  Check if input sequences are aligned. Default: no\n                   \
        \     check\n  -c CORES, --cores CORES\n                        Number of\
        \ cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...],\
        \ --in-files IN_FILES [IN_FILES ...]\n                        Alignment files\
        \ to be taken as input. You can specify\n                        multiple\
        \ files using wildcards (e.g. --in-files\n                        *fasta)\n\
        \  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        The format of input alignment\n  -d {aa,dna}, --data-type\
        \ {aa,dna}\n                        Type of data\n"
      generated_using: *id004
    - !Command
      command: *id005
      positional:
      - !Positional
        description: -c CORES, --cores CORES
        position: 0
        name: check
        optional: false
      named:
      - !Flag
        description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
        synonyms:
        - -i
        - -f
        args: !RepeatFlagArg
          name: IN_FILES
        optional: true
      - !Flag
        description: "REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\nCreate\
          \ replicate data sets for phylogenetic jackknife\n[replicates, no alignments\
          \ for each replicate]"
        synonyms:
        - -r
        args: !SimpleFlagArg
          name: REPLICATE_ARGS
        optional: true
      - !Flag
        description: 'File format for the output alignment. Default: fasta'
        synonyms:
        - -u
        - --out-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: 'Check if input sequences are aligned. Default: no'
        synonyms:
        - -e
        - --check-align
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        synonyms:
        - -i
        - --in-files
        args: !RepeatFlagArg
          name: IN_FILES
        optional: true
      - !Flag
        description: The format of input alignment
        synonyms:
        - -f
        - --in-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: "Type of data\n"
        synonyms:
        - -d
        - --data-type
        args: !ChoiceFlagArg
          choices: !!set
            ? aa
            ? dna
        optional: true
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: show this help message and exit
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] -r REPLICATE_ARGS REPLICATE_ARGS\n         \
        \      [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n  \
        \             -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
        \ -d {aa,dna}\n\nCreate replicate datasets for phylogenetic jackknife\n\n\
        optional arguments:\n  -h, --help            show this help message and exit\n\
        \  -r REPLICATE_ARGS REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n\
        \                        Create replicate data sets for phylogenetic jackknife\n\
        \                        [replicates, no alignments for each replicate]\n\
        \  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        File format for the output alignment. Default: fasta\n\
        \  -e, --check-align     Check if input sequences are aligned. Default: no\n\
        \                        check\n  -c CORES, --cores CORES\n              \
        \          Number of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES\
        \ [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n                   \
        \     Alignment files to be taken as input. You can specify\n            \
        \            multiple files using wildcards (e.g. --in-files\n           \
        \             *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format\
        \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                        The format\
        \ of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n              \
        \          Type of data\n"
      generated_using: *id004
    - !Command
      command: *id006
      positional:
      - !Positional
        description: -c CORES, --cores CORES
        position: 0
        name: check
        optional: false
      named:
      - !Flag
        description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
        synonyms:
        - -i
        - -f
        args: !RepeatFlagArg
          name: IN_FILES
        optional: true
      - !Flag
        description: "File name for th0e concatenated alignment partitions.\nDefault:\
          \ 'partitions.txt'"
        synonyms:
        - -p
        - --concat-part
        args: !SimpleFlagArg
          name: CONCAT_PART
        optional: true
      - !Flag
        description: "File name for the concatenated alignment. Default:\n'concatenated.out'"
        synonyms:
        - -t
        - --concat-out
        args: !SimpleFlagArg
          name: CONCAT_OUT
        optional: true
      - !Flag
        description: 'File format for the output alignment. Default: fasta'
        synonyms:
        - -u
        - --out-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: 'Check if input sequences are aligned. Default: no'
        synonyms:
        - -e
        - --check-align
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        synonyms:
        - -i
        - --in-files
        args: !RepeatFlagArg
          name: IN_FILES
        optional: true
      - !Flag
        description: The format of input alignment
        synonyms:
        - -f
        - --in-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: "Type of data\n"
        synonyms:
        - -d
        - --data-type
        args: !ChoiceFlagArg
          choices: !!set
            ? aa
            ? dna
        optional: true
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: show this help message and exit
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] [-p CONCAT_PART] [-t CONCAT_OUT]\n         \
        \      [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n  \
        \             -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
        \ -d {aa,dna}\n\nConcatenate input alignments\n\noptional arguments:\n  -h,\
        \ --help            show this help message and exit\n  -p CONCAT_PART, --concat-part\
        \ CONCAT_PART\n                        File name for th0e concatenated alignment\
        \ partitions.\n                        Default: 'partitions.txt'\n  -t CONCAT_OUT,\
        \ --concat-out CONCAT_OUT\n                        File name for the concatenated\
        \ alignment. Default:\n                        'concatenated.out'\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
        \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n               \
        \         File format for the output alignment. Default: fasta\n  -e, --check-align\
        \     Check if input sequences are aligned. Default: no\n                \
        \        check\n  -c CORES, --cores CORES\n                        Number\
        \ of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES\
        \ ...], --in-files IN_FILES [IN_FILES ...]\n                        Alignment\
        \ files to be taken as input. You can specify\n                        multiple\
        \ files using wildcards (e.g. --in-files\n                        *fasta)\n\
        \  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        The format of input alignment\n  -d {aa,dna}, --data-type\
        \ {aa,dna}\n                        Type of data\n"
      generated_using: *id004
    - !Command
      command: *id007
      positional:
      - !Positional
        description: -c CORES, --cores CORES
        position: 0
        name: check
        optional: false
      named:
      - !Flag
        description: "File name for the alignment summary. Default:\n'summary.txt'"
        synonyms:
        - -o
        - --summary-out
        args: !SimpleFlagArg
          name: SUMMARY_OUT
        optional: true
      - !Flag
        description: "In addition to alignment summary, write by\nsequence/taxon summaries.\
          \ Default: Don't write"
        synonyms:
        - -s
        - --by-taxon
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: 'Check if input sequences are aligned. Default: no'
        synonyms:
        - -e
        - --check-align
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        synonyms:
        - -i
        - --in-files
        args: !RepeatFlagArg
          name: IN_FILES
        optional: true
      - !Flag
        description: The format of input alignment
        synonyms:
        - -f
        - --in-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: "Type of data\n"
        synonyms:
        - -d
        - --data-type
        args: !ChoiceFlagArg
          choices: !!set
            ? aa
            ? dna
        optional: true
      - !Flag
        description: ''
        synonyms:
        - -c
        args: !SimpleFlagArg
          name: CORES
        optional: true
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: show this help message and exit
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] [-o SUMMARY_OUT] [-s] [-e] [-c CORES] -i IN_FILES\n\
        \               [IN_FILES ...] -f {fasta,phylip,nexus,phylip-int,nexus-int}\
        \ -d\n               {aa,dna}\n\nWrite alignment summary\n\noptional arguments:\n\
        \  -h, --help            show this help message and exit\n  -o SUMMARY_OUT,\
        \ --summary-out SUMMARY_OUT\n                        File name for the alignment\
        \ summary. Default:\n                        'summary.txt'\n  -s, --by-taxon\
        \        In addition to alignment summary, write by\n                    \
        \    sequence/taxon summaries. Default: Don't write\n  -e, --check-align \
        \    Check if input sequences are aligned. Default: no\n                 \
        \       check\n  -c CORES, --cores CORES\n                        Number of\
        \ cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...],\
        \ --in-files IN_FILES [IN_FILES ...]\n                        Alignment files\
        \ to be taken as input. You can specify\n                        multiple\
        \ files using wildcards (e.g. --in-files\n                        *fasta)\n\
        \  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        The format of input alignment\n  -d {aa,dna}, --data-type\
        \ {aa,dna}\n                        Type of data\n"
      generated_using: *id004
    - !Command
      command: *id008
      positional:
      - !Positional
        description: -c CORES, --cores CORES
        position: 0
        name: check
        optional: false
      named:
      - !Flag
        description: 'File format for the output alignment. Default: fasta'
        synonyms:
        - -u
        - --out-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: 'Check if input sequences are aligned. Default: no'
        synonyms:
        - -e
        - --check-align
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        synonyms:
        - -i
        - --in-files
        args: !RepeatFlagArg
          name: IN_FILES
        optional: true
      - !Flag
        description: The format of input alignment
        synonyms:
        - -f
        - --in-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: "Type of data\n"
        synonyms:
        - -d
        - --data-type
        args: !ChoiceFlagArg
          choices: !!set
            ? aa
            ? dna
        optional: true
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: show this help message and exit
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
        \ [-e]\n               [-c CORES] -i IN_FILES [IN_FILES ...] -f\n        \
        \       {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nConvert to\
        \ other file format\n\noptional arguments:\n  -h, --help            show this\
        \ help message and exit\n  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format\
        \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                        File\
        \ format for the output alignment. Default: fasta\n  -e, --check-align   \
        \  Check if input sequences are aligned. Default: no\n                   \
        \     check\n  -c CORES, --cores CORES\n                        Number of\
        \ cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...],\
        \ --in-files IN_FILES [IN_FILES ...]\n                        Alignment files\
        \ to be taken as input. You can specify\n                        multiple\
        \ files using wildcards (e.g. --in-files\n                        *fasta)\n\
        \  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        The format of input alignment\n  -d {aa,dna}, --data-type\
        \ {aa,dna}\n                        Type of data\n"
      generated_using: *id004
    - !Command
      command: *id009
      positional:
      - !Positional
        description: Concatenate input alignments
        position: 0
        name: concat
        optional: false
      - !Positional
        description: Convert to other file format
        position: 1
        name: convert
        optional: false
      - !Positional
        description: Create replicate data sets for phylogenetic jackknife
        position: 2
        name: replicate
        optional: false
      - !Positional
        description: Split alignment according to a partitions file
        position: 3
        name: split
        optional: false
      - !Positional
        description: Write alignment summary
        position: 4
        name: summary
        optional: false
      - !Positional
        description: Remove taxa from alignment
        position: 5
        name: remove
        optional: false
      - !Positional
        description: Subcommand to run
        position: 0
        name: command
        optional: false
      named: []
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: show this help message and exit
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "Unrecognized command\nusage: AMAS <command> [<args>]\n\nThe AMAS\
        \ commands are:\n  concat      Concatenate input alignments\n  convert   \
        \  Convert to other file format\n  replicate   Create replicate data sets\
        \ for phylogenetic jackknife\n  split       Split alignment according to a\
        \ partitions file\n  summary     Write alignment summary\n  remove      Remove\
        \ taxa from alignment\n\nUse AMAS <command> -h for help with arguments of\
        \ the command of interest\n\npositional arguments:\n  command     Subcommand\
        \ to run\n\noptional arguments:\n  -h, --help  show this help message and\
        \ exit\n"
      generated_using: *id004
    - !Command
      command: *id010
      positional:
      - !Positional
        description: -c CORES, --cores CORES
        position: 0
        name: check
        optional: false
      named:
      - !Flag
        description: Taxon/sequence names to be removed.
        synonyms:
        - -x
        - --taxa-to-remove
        args: !RepeatFlagArg
          name: TAXA_TO_REMOVE
        optional: true
      - !Flag
        description: 'File format for the output alignment. Default: fasta'
        synonyms:
        - -u
        - --out-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: "File name prefix for the concatenated alignment.\nDefault: 'reduced_'"
        synonyms:
        - -g
        - --out-prefix
        args: !SimpleFlagArg
          name: OUT_PREFIX
        optional: true
      - !Flag
        description: 'Check if input sequences are aligned. Default: no'
        synonyms:
        - -e
        - --check-align
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: "Alignment files to be taken as input. You can specify\nmultiple\
          \ files using wildcards (e.g. --in-files\n*fasta)"
        synonyms:
        - -i
        - --in-files
        args: !RepeatFlagArg
          name: IN_FILES
        optional: true
      - !Flag
        description: The format of input alignment
        synonyms:
        - -f
        - --in-format
        args: !ChoiceFlagArg
          choices: !!set
            ? phylip-int
            ? fasta
            ? nexus
            ? nexus-int
            ? phylip
        optional: true
      - !Flag
        description: "Type of data\n"
        synonyms:
        - -d
        - --data-type
        args: !ChoiceFlagArg
          choices: !!set
            ? aa
            ? dna
        optional: true
      parent: *id003
      subcommands: []
      usage: []
      help_flag: !Flag
        description: show this help message and exit
        synonyms:
        - -h
        - --help
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: AMAS.py [-h] -x TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n   \
        \            [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-g OUT_PREFIX]\n\
        \               [-e] [-c CORES] -i IN_FILES [IN_FILES ...] -f\n          \
        \     {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nRemove taxa\
        \ from alignment\n\noptional arguments:\n  -h, --help            show this\
        \ help message and exit\n  -x TAXA_TO_REMOVE [TAXA_TO_REMOVE ...], --taxa-to-remove\
        \ TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n                        Taxon/sequence\
        \ names to be removed.\n  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format\
        \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                        File\
        \ format for the output alignment. Default: fasta\n  -g OUT_PREFIX, --out-prefix\
        \ OUT_PREFIX\n                        File name prefix for the concatenated\
        \ alignment.\n                        Default: 'reduced_'\n  -e, --check-align\
        \     Check if input sequences are aligned. Default: no\n                \
        \        check\n  -c CORES, --cores CORES\n                        Number\
        \ of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES\
        \ ...], --in-files IN_FILES [IN_FILES ...]\n                        Alignment\
        \ files to be taken as input. You can specify\n                        multiple\
        \ files using wildcards (e.g. --in-files\n                        *fasta)\n\
        \  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
        \                        The format of input alignment\n  -d {aa,dna}, --data-type\
        \ {aa,dna}\n                        Type of data\n"
      generated_using: *id004
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "usage: AMAS <command> [<args>]\n\nThe AMAS commands are:\n  concat\
      \      Concatenate input alignments\n  convert     Convert to other file format\n\
      \  replicate   Create replicate data sets for phylogenetic jackknife\n  split\
      \       Split alignment according to a partitions file\n  summary     Write\
      \ alignment summary\n  remove      Remove taxa from alignment\n\nUse AMAS <command>\
      \ -h for help with arguments of the command of interest\n\npositional arguments:\n\
      \  command     Subcommand to run\n\noptional arguments:\n  -h, --help  show\
      \ this help message and exit\n"
    generated_using: *id004
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] -l SPLIT_BY [-j]\n               [-u {fasta,phylip,nexus,phylip-int,nexus-int}]\
    \ [-e] [-c CORES]\n               -i IN_FILES [IN_FILES ...] -f\n            \
    \   {fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}\n\nSplit alignment according\
    \ to a partitions file\n\noptional arguments:\n  -h, --help            show this\
    \ help message and exit\n  -l SPLIT_BY, --split-by SPLIT_BY\n                \
    \        File name for partitions to be used for alignment\n                 \
    \       splitting.\n  -j, --remove-empty    Remove taxa with sequences composed\
    \ of only\n                        undetermined characters? Default: Don't remove\n\
    \  -u {fasta,phylip,nexus,phylip-int,nexus-int}, --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
    \                        File format for the output alignment. Default: fasta\n\
    \  -e, --check-align     Check if input sequences are aligned. Default: no\n \
    \                       check\n  -c CORES, --cores CORES\n                   \
    \     Number of cores used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES\
    \ ...], --in-files IN_FILES [IN_FILES ...]\n                        Alignment\
    \ files to be taken as input. You can specify\n                        multiple\
    \ files using wildcards (e.g. --in-files\n                        *fasta)\n  -f\
    \ {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n\
    \                        The format of input alignment\n  -d {aa,dna}, --data-type\
    \ {aa,dna}\n                        Type of data\n"
  generated_using: *id004
- !Command
  command: *id005
  positional:
  - !Positional
    description: -c CORES, --cores CORES
    position: 0
    name: check
    optional: false
  named:
  - !Flag
    description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
    synonyms:
    - -i
    - -f
    args: !RepeatFlagArg
      name: IN_FILES
    optional: true
  - !Flag
    description: "REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\nCreate\
      \ replicate data sets for phylogenetic jackknife\n[replicates, no alignments\
      \ for each replicate]"
    synonyms:
    - -r
    args: !SimpleFlagArg
      name: REPLICATE_ARGS
    optional: true
  - !Flag
    description: 'File format for the output alignment. Default: fasta'
    synonyms:
    - -u
    - --out-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: 'Check if input sequences are aligned. Default: no'
    synonyms:
    - -e
    - --check-align
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    synonyms:
    - -i
    - --in-files
    args: !RepeatFlagArg
      name: IN_FILES
    optional: true
  - !Flag
    description: The format of input alignment
    synonyms:
    - -f
    - --in-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: "Type of data\n"
    synonyms:
    - -d
    - --data-type
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
    optional: true
  parent: *id011
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] -r REPLICATE_ARGS REPLICATE_ARGS\n             \
    \  [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n          \
    \     -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
    \ -d {aa,dna}\n\nCreate replicate datasets for phylogenetic jackknife\n\noptional\
    \ arguments:\n  -h, --help            show this help message and exit\n  -r REPLICATE_ARGS\
    \ REPLICATE_ARGS, --rep-aln REPLICATE_ARGS REPLICATE_ARGS\n                  \
    \      Create replicate data sets for phylogenetic jackknife\n               \
    \         [replicates, no alignments for each replicate]\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                   \
    \     File format for the output alignment. Default: fasta\n  -e, --check-align\
    \     Check if input sequences are aligned. Default: no\n                    \
    \    check\n  -c CORES, --cores CORES\n                        Number of cores\
    \ used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files\
    \ IN_FILES [IN_FILES ...]\n                        Alignment files to be taken\
    \ as input. You can specify\n                        multiple files using wildcards\
    \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                    \
    \    The format of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n    \
    \                    Type of data\n"
  generated_using: *id004
- !Command
  command: *id006
  positional:
  - !Positional
    description: -c CORES, --cores CORES
    position: 0
    name: check
    optional: false
  named:
  - !Flag
    description: '{fasta,phylip,nexus,phylip-int,nexus-int} -d {aa,dna}'
    synonyms:
    - -i
    - -f
    args: !RepeatFlagArg
      name: IN_FILES
    optional: true
  - !Flag
    description: "File name for th0e concatenated alignment partitions.\nDefault:\
      \ 'partitions.txt'"
    synonyms:
    - -p
    - --concat-part
    args: !SimpleFlagArg
      name: CONCAT_PART
    optional: true
  - !Flag
    description: "File name for the concatenated alignment. Default:\n'concatenated.out'"
    synonyms:
    - -t
    - --concat-out
    args: !SimpleFlagArg
      name: CONCAT_OUT
    optional: true
  - !Flag
    description: 'File format for the output alignment. Default: fasta'
    synonyms:
    - -u
    - --out-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: 'Check if input sequences are aligned. Default: no'
    synonyms:
    - -e
    - --check-align
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    synonyms:
    - -i
    - --in-files
    args: !RepeatFlagArg
      name: IN_FILES
    optional: true
  - !Flag
    description: The format of input alignment
    synonyms:
    - -f
    - --in-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: "Type of data\n"
    synonyms:
    - -d
    - --data-type
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
    optional: true
  parent: *id011
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] [-p CONCAT_PART] [-t CONCAT_OUT]\n             \
    \  [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e] [-c CORES]\n          \
    \     -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
    \ -d {aa,dna}\n\nConcatenate input alignments\n\noptional arguments:\n  -h, --help\
    \            show this help message and exit\n  -p CONCAT_PART, --concat-part\
    \ CONCAT_PART\n                        File name for th0e concatenated alignment\
    \ partitions.\n                        Default: 'partitions.txt'\n  -t CONCAT_OUT,\
    \ --concat-out CONCAT_OUT\n                        File name for the concatenated\
    \ alignment. Default:\n                        'concatenated.out'\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                   \
    \     File format for the output alignment. Default: fasta\n  -e, --check-align\
    \     Check if input sequences are aligned. Default: no\n                    \
    \    check\n  -c CORES, --cores CORES\n                        Number of cores\
    \ used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files\
    \ IN_FILES [IN_FILES ...]\n                        Alignment files to be taken\
    \ as input. You can specify\n                        multiple files using wildcards\
    \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                    \
    \    The format of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n    \
    \                    Type of data\n"
  generated_using: *id004
- !Command
  command: *id007
  positional:
  - !Positional
    description: -c CORES, --cores CORES
    position: 0
    name: check
    optional: false
  named:
  - !Flag
    description: "File name for the alignment summary. Default:\n'summary.txt'"
    synonyms:
    - -o
    - --summary-out
    args: !SimpleFlagArg
      name: SUMMARY_OUT
    optional: true
  - !Flag
    description: "In addition to alignment summary, write by\nsequence/taxon summaries.\
      \ Default: Don't write"
    synonyms:
    - -s
    - --by-taxon
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: 'Check if input sequences are aligned. Default: no'
    synonyms:
    - -e
    - --check-align
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    synonyms:
    - -i
    - --in-files
    args: !RepeatFlagArg
      name: IN_FILES
    optional: true
  - !Flag
    description: The format of input alignment
    synonyms:
    - -f
    - --in-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: "Type of data\n"
    synonyms:
    - -d
    - --data-type
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
    optional: true
  - !Flag
    description: ''
    synonyms:
    - -c
    args: !SimpleFlagArg
      name: CORES
    optional: true
  parent: *id011
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] [-o SUMMARY_OUT] [-s] [-e] [-c CORES] -i IN_FILES\n\
    \               [IN_FILES ...] -f {fasta,phylip,nexus,phylip-int,nexus-int} -d\n\
    \               {aa,dna}\n\nWrite alignment summary\n\noptional arguments:\n \
    \ -h, --help            show this help message and exit\n  -o SUMMARY_OUT, --summary-out\
    \ SUMMARY_OUT\n                        File name for the alignment summary. Default:\n\
    \                        'summary.txt'\n  -s, --by-taxon        In addition to\
    \ alignment summary, write by\n                        sequence/taxon summaries.\
    \ Default: Don't write\n  -e, --check-align     Check if input sequences are aligned.\
    \ Default: no\n                        check\n  -c CORES, --cores CORES\n    \
    \                    Number of cores used. Default: 1\n\nrequired arguments:\n\
    \  -i IN_FILES [IN_FILES ...], --in-files IN_FILES [IN_FILES ...]\n          \
    \              Alignment files to be taken as input. You can specify\n       \
    \                 multiple files using wildcards (e.g. --in-files\n          \
    \              *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int}, --in-format\
    \ {fasta,phylip,nexus,phylip-int,nexus-int}\n                        The format\
    \ of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n                  \
    \      Type of data\n"
  generated_using: *id004
- !Command
  command: *id008
  positional:
  - !Positional
    description: -c CORES, --cores CORES
    position: 0
    name: check
    optional: false
  named:
  - !Flag
    description: 'File format for the output alignment. Default: fasta'
    synonyms:
    - -u
    - --out-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: 'Check if input sequences are aligned. Default: no'
    synonyms:
    - -e
    - --check-align
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    synonyms:
    - -i
    - --in-files
    args: !RepeatFlagArg
      name: IN_FILES
    optional: true
  - !Flag
    description: The format of input alignment
    synonyms:
    - -f
    - --in-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: "Type of data\n"
    synonyms:
    - -d
    - --data-type
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
    optional: true
  parent: *id011
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-e]\n\
    \               [-c CORES] -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
    \ -d {aa,dna}\n\nConvert to other file format\n\noptional arguments:\n  -h, --help\
    \            show this help message and exit\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                   \
    \     File format for the output alignment. Default: fasta\n  -e, --check-align\
    \     Check if input sequences are aligned. Default: no\n                    \
    \    check\n  -c CORES, --cores CORES\n                        Number of cores\
    \ used. Default: 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files\
    \ IN_FILES [IN_FILES ...]\n                        Alignment files to be taken\
    \ as input. You can specify\n                        multiple files using wildcards\
    \ (e.g. --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                    \
    \    The format of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n    \
    \                    Type of data\n"
  generated_using: *id004
- !Command
  command: *id009
  positional:
  - !Positional
    description: Concatenate input alignments
    position: 0
    name: concat
    optional: false
  - !Positional
    description: Convert to other file format
    position: 1
    name: convert
    optional: false
  - !Positional
    description: Create replicate data sets for phylogenetic jackknife
    position: 2
    name: replicate
    optional: false
  - !Positional
    description: Split alignment according to a partitions file
    position: 3
    name: split
    optional: false
  - !Positional
    description: Write alignment summary
    position: 4
    name: summary
    optional: false
  - !Positional
    description: Remove taxa from alignment
    position: 5
    name: remove
    optional: false
  - !Positional
    description: Subcommand to run
    position: 0
    name: command
    optional: false
  named: []
  parent: *id011
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "Unrecognized command\nusage: AMAS <command> [<args>]\n\nThe AMAS commands\
    \ are:\n  concat      Concatenate input alignments\n  convert     Convert to other\
    \ file format\n  replicate   Create replicate data sets for phylogenetic jackknife\n\
    \  split       Split alignment according to a partitions file\n  summary     Write\
    \ alignment summary\n  remove      Remove taxa from alignment\n\nUse AMAS <command>\
    \ -h for help with arguments of the command of interest\n\npositional arguments:\n\
    \  command     Subcommand to run\n\noptional arguments:\n  -h, --help  show this\
    \ help message and exit\n"
  generated_using: *id004
- !Command
  command: *id010
  positional:
  - !Positional
    description: -c CORES, --cores CORES
    position: 0
    name: check
    optional: false
  named:
  - !Flag
    description: Taxon/sequence names to be removed.
    synonyms:
    - -x
    - --taxa-to-remove
    args: !RepeatFlagArg
      name: TAXA_TO_REMOVE
    optional: true
  - !Flag
    description: 'File format for the output alignment. Default: fasta'
    synonyms:
    - -u
    - --out-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: "File name prefix for the concatenated alignment.\nDefault: 'reduced_'"
    synonyms:
    - -g
    - --out-prefix
    args: !SimpleFlagArg
      name: OUT_PREFIX
    optional: true
  - !Flag
    description: 'Check if input sequences are aligned. Default: no'
    synonyms:
    - -e
    - --check-align
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "Alignment files to be taken as input. You can specify\nmultiple\
      \ files using wildcards (e.g. --in-files\n*fasta)"
    synonyms:
    - -i
    - --in-files
    args: !RepeatFlagArg
      name: IN_FILES
    optional: true
  - !Flag
    description: The format of input alignment
    synonyms:
    - -f
    - --in-format
    args: !ChoiceFlagArg
      choices: !!set
        nexus-int:
        fasta:
        nexus:
        phylip:
        phylip-int:
    optional: true
  - !Flag
    description: "Type of data\n"
    synonyms:
    - -d
    - --data-type
    args: !ChoiceFlagArg
      choices: !!set
        dna:
        aa:
    optional: true
  parent: *id011
  subcommands: []
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag:
  help_text: "usage: AMAS.py [-h] -x TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n       \
    \        [-u {fasta,phylip,nexus,phylip-int,nexus-int}] [-g OUT_PREFIX]\n    \
    \           [-e] [-c CORES] -i IN_FILES [IN_FILES ...] -f\n               {fasta,phylip,nexus,phylip-int,nexus-int}\
    \ -d {aa,dna}\n\nRemove taxa from alignment\n\noptional arguments:\n  -h, --help\
    \            show this help message and exit\n  -x TAXA_TO_REMOVE [TAXA_TO_REMOVE\
    \ ...], --taxa-to-remove TAXA_TO_REMOVE [TAXA_TO_REMOVE ...]\n               \
    \         Taxon/sequence names to be removed.\n  -u {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --out-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                   \
    \     File format for the output alignment. Default: fasta\n  -g OUT_PREFIX, --out-prefix\
    \ OUT_PREFIX\n                        File name prefix for the concatenated alignment.\n\
    \                        Default: 'reduced_'\n  -e, --check-align     Check if\
    \ input sequences are aligned. Default: no\n                        check\n  -c\
    \ CORES, --cores CORES\n                        Number of cores used. Default:\
    \ 1\n\nrequired arguments:\n  -i IN_FILES [IN_FILES ...], --in-files IN_FILES\
    \ [IN_FILES ...]\n                        Alignment files to be taken as input.\
    \ You can specify\n                        multiple files using wildcards (e.g.\
    \ --in-files\n                        *fasta)\n  -f {fasta,phylip,nexus,phylip-int,nexus-int},\
    \ --in-format {fasta,phylip,nexus,phylip-int,nexus-int}\n                    \
    \    The format of input alignment\n  -d {aa,dna}, --data-type {aa,dna}\n    \
    \                    Type of data\n"
  generated_using: *id004
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "usage: AMAS <command> [<args>]\n\nThe AMAS commands are:\n  concat   \
  \   Concatenate input alignments\n  convert     Convert to other file format\n \
  \ replicate   Create replicate data sets for phylogenetic jackknife\n  split   \
  \    Split alignment according to a partitions file\n  summary     Write alignment\
  \ summary\n  remove      Remove taxa from alignment\n\nUse AMAS <command> -h for\
  \ help with arguments of the command of interest\n\npositional arguments:\n  command\
  \     Subcommand to run\n\noptional arguments:\n  -h, --help  show this help message\
  \ and exit\n"
generated_using: *id004
