!Command
command:
- jq
positional:
- !Positional
  optional: false
  position: 0
  name: jq filter
  description: ''
- !Positional
  optional: true
  position: 1
  name: file...
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - -c
  description: compact instead of pretty-printed output;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -n
  description: use `null` as the single input value;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -e
  description: set the exit status code based on the output;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -s
  description: read (slurp) all inputs into an array; apply filter to it;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -r
  description: output raw strings, not JSON texts;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -R
  description: read raw strings, not JSON texts;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -C
  description: colorize JSON;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -M
  description: monochrome (don't colorize JSON);
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -S
  description: sort keys of objects on output;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --tab
  description: use tabs for indentation;
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --arg
  description: v      set variable $a to value <v>;
  args: !SimpleFlagArg
    name: a
- !Flag
  optional: true
  synonyms:
  - --argjson
  description: v  set variable $a to JSON value <v>;
  args: !SimpleFlagArg
    name: a
- !Flag
  optional: true
  synonyms:
  - --slurpfile
  description: f        set variable $a to an array of JSON texts read from <f>;
  args: !SimpleFlagArg
    name: a
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "jq - commandline JSON processor [version 1.5]\nUsage: jq [options] <jq\
  \ filter> [file...]\n\n\tjq is a tool for processing JSON inputs, applying the\n\
  \tgiven filter to its JSON text inputs and producing the\n\tfilter's results as\
  \ JSON on standard output.\n\tThe simplest filter is ., which is the identity filter,\n\
  \tcopying jq's input to its output unmodified (except for\n\tformatting).\n\tFor\
  \ more advanced filters see the jq(1) manpage (\"man jq\")\n\tand/or https://stedolan.github.io/jq\n\
  \n\tSome of the options include:\n\t -c\t\tcompact instead of pretty-printed output;\n\
  \t -n\t\tuse `null` as the single input value;\n\t -e\t\tset the exit status code\
  \ based on the output;\n\t -s\t\tread (slurp) all inputs into an array; apply filter\
  \ to it;\n\t -r\t\toutput raw strings, not JSON texts;\n\t -R\t\tread raw strings,\
  \ not JSON texts;\n\t -C\t\tcolorize JSON;\n\t -M\t\tmonochrome (don't colorize\
  \ JSON);\n\t -S\t\tsort keys of objects on output;\n\t --tab\tuse tabs for indentation;\n\
  \t --arg a v\tset variable $a to value <v>;\n\t --argjson a v\tset variable $a to\
  \ JSON value <v>;\n\t --slurpfile a f\tset variable $a to an array of JSON texts\
  \ read from <f>;\n\tSee the manpage for more options.\n"
generated_using:
- --help
docker_image:
