!Command
command:
- bl-randomize
positional:
- !Positional
  description: ''
  position: 0
  name: randomize
  optional: false
named:
- !Flag
  description: specify multiple INPUT files
  synonyms:
  - -i
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: specify multiple OUTPUT files
  synonyms:
  - -o
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: use the order in READ-ORDER instead of a random order
  synonyms:
  - -r
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: write the random order to WRITE-ORDER
  synonyms:
  - -w
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "\nusage: randomize [-i INPUT] [-o OUTPUT] [-r READ-ORDER] [-w WRITE-ORDER]\n\
  \nRandomizes the order of sequences in each INPUT file and writes these to a\ncorresponding\
  \ OUTPUT file. By default, a new random write order is generated\nand saved to WRITE-ORDER,\
  \ if specified. Alternatively, specifying a READ-ORDER\nfile uses that order instead\
  \ of a random one.\n\nIf no input files are specified, input is read from stdin.\
  \ FASTQ or FASTA\nformat is automatically detected. If no output is specified, stdout\
  \ is used.\n\n  -i  specify multiple INPUT files\n  -o  specify multiple OUTPUT\
  \ files\n  -r  use the order in READ-ORDER instead of a random order\n  -w  write\
  \ the random order to WRITE-ORDER\n\nExample usage for randomizing paired-end data\
  \ in the same order:\nrandomize -i 1.fastq -o 1.random.fastq -w order.txt\nrandomize\
  \ -i 2.fastq -o 2.random.fastq -r order.txt\n\nExample usage for randomizing single-end\
  \ data:\nrandomize -i s.fastq -o s.random.fastq\n\n"
generated_using:
- --help
