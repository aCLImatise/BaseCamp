!Command
command: &id001
- watchmedo
positional: []
named: []
parent:
subcommands:
- !Command
  command: &id002
  - watchmedo
  - shell-command
  positional:
  - !Positional
    optional: false
    position: 0
    name: directories
    description: "directories to watch (default: '.')"
  named:
  - !Flag
    optional: true
    synonyms:
    - -c
    - --command
    description: "shell command executed in response to matching events.\nThese interpolation\
      \ variables are available to your\ncommand string:: ${watch_src_path} - event\
      \ source\npath; ${watch_dest_path} - event destination path (for\nmoved events);\
      \ ${watch_event_type} - event type;\n${watch_object} - ``file`` or ``directory``\
      \ Note::\nPlease ensure you do not use double quotes (\") to\nquote your command\
      \ string. That will force your shell\nto interpolate before the command is processed\
      \ by this\nsubcommand. Example option usage:: --command='echo\n\"${watch_src_path}\"\
      ' (default: -)"
    args: !SimpleFlagArg
      name: COMMAND
  - !Flag
    optional: true
    synonyms:
    - -p
    - --pattern
    - --patterns
    description: "matches event paths with these patterns (separated by\n;). (default:\
      \ '*')"
    args: !SimpleFlagArg
      name: PATTERNS
  - !Flag
    optional: true
    synonyms:
    - -i
    - --ignore-pattern
    - --ignore-patterns
    description: "ignores event paths with these patterns (separated by\n;). (default:\
      \ '')"
    args: !SimpleFlagArg
      name: IGNORE_PATTERNS
  - !Flag
    optional: true
    synonyms:
    - -D
    - --ignore-directories
    description: 'ignores events for directories (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -R
    - --recursive
    description: 'monitors the directories recursively (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --interval
    - --timeout
    description: "use this as the polling interval/blocking timeout\n(default: 1.0)"
    args: !SimpleFlagArg
      name: TIMEOUT
  - !Flag
    optional: true
    synonyms:
    - -w
    - --wait
    description: "wait for process to finish to avoid multiple\nsimultaneous instances\
      \ (default: False)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -W
    - --drop
    description: "Ignore events that occur while command is still being\nexecuted\
      \ to avoid multiple simultaneous instances\n(default: False)\n"
    args: !EmptyFlagArg {}
  parent: &id011 !Command
    command: *id001
    positional: []
    named: []
    parent:
    subcommands:
    - !Command
      command: *id002
      positional:
      - !Positional
        optional: false
        position: 0
        name: directories
        description: "directories to watch (default: '.')"
      named:
      - !Flag
        optional: true
        synonyms:
        - -c
        - --command
        description: "shell command executed in response to matching events.\nThese\
          \ interpolation variables are available to your\ncommand string:: ${watch_src_path}\
          \ - event source\npath; ${watch_dest_path} - event destination path (for\n\
          moved events); ${watch_event_type} - event type;\n${watch_object} - ``file``\
          \ or ``directory`` Note::\nPlease ensure you do not use double quotes (\"\
          ) to\nquote your command string. That will force your shell\nto interpolate\
          \ before the command is processed by this\nsubcommand. Example option usage::\
          \ --command='echo\n\"${watch_src_path}\"' (default: -)"
        args: !SimpleFlagArg
          name: COMMAND
      - !Flag
        optional: true
        synonyms:
        - -p
        - --pattern
        - --patterns
        description: "matches event paths with these patterns (separated by\n;). (default:\
          \ '*')"
        args: !SimpleFlagArg
          name: PATTERNS
      - !Flag
        optional: true
        synonyms:
        - -i
        - --ignore-pattern
        - --ignore-patterns
        description: "ignores event paths with these patterns (separated by\n;). (default:\
          \ '')"
        args: !SimpleFlagArg
          name: IGNORE_PATTERNS
      - !Flag
        optional: true
        synonyms:
        - -D
        - --ignore-directories
        description: 'ignores events for directories (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -R
        - --recursive
        description: 'monitors the directories recursively (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - --interval
        - --timeout
        description: "use this as the polling interval/blocking timeout\n(default:\
          \ 1.0)"
        args: !SimpleFlagArg
          name: TIMEOUT
      - !Flag
        optional: true
        synonyms:
        - -w
        - --wait
        description: "wait for process to finish to avoid multiple\nsimultaneous instances\
          \ (default: False)"
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -W
        - --drop
        description: "Ignore events that occur while command is still being\nexecuted\
          \ to avoid multiple simultaneous instances\n(default: False)\n"
        args: !EmptyFlagArg {}
      parent: &id010 !Command
        command: *id001
        positional: []
        named: []
        parent:
        subcommands:
        - !Command
          command: *id002
          positional:
          - !Positional
            optional: false
            position: 0
            name: directories
            description: "directories to watch (default: '.')"
          named:
          - !Flag
            optional: true
            synonyms:
            - -c
            - --command
            description: "shell command executed in response to matching events.\n\
              These interpolation variables are available to your\ncommand string::\
              \ ${watch_src_path} - event source\npath; ${watch_dest_path} - event\
              \ destination path (for\nmoved events); ${watch_event_type} - event\
              \ type;\n${watch_object} - ``file`` or ``directory`` Note::\nPlease\
              \ ensure you do not use double quotes (\") to\nquote your command string.\
              \ That will force your shell\nto interpolate before the command is processed\
              \ by this\nsubcommand. Example option usage:: --command='echo\n\"${watch_src_path}\"\
              ' (default: -)"
            args: !SimpleFlagArg
              name: COMMAND
          - !Flag
            optional: true
            synonyms:
            - -p
            - --pattern
            - --patterns
            description: "matches event paths with these patterns (separated by\n\
              ;). (default: '*')"
            args: !SimpleFlagArg
              name: PATTERNS
          - !Flag
            optional: true
            synonyms:
            - -i
            - --ignore-pattern
            - --ignore-patterns
            description: "ignores event paths with these patterns (separated by\n\
              ;). (default: '')"
            args: !SimpleFlagArg
              name: IGNORE_PATTERNS
          - !Flag
            optional: true
            synonyms:
            - -D
            - --ignore-directories
            description: 'ignores events for directories (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -R
            - --recursive
            description: 'monitors the directories recursively (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - --interval
            - --timeout
            description: "use this as the polling interval/blocking timeout\n(default:\
              \ 1.0)"
            args: !SimpleFlagArg
              name: TIMEOUT
          - !Flag
            optional: true
            synonyms:
            - -w
            - --wait
            description: "wait for process to finish to avoid multiple\nsimultaneous\
              \ instances (default: False)"
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -W
            - --drop
            description: "Ignore events that occur while command is still being\n\
              executed to avoid multiple simultaneous instances\n(default: False)\n"
            args: !EmptyFlagArg {}
          parent: &id009 !Command
            command: *id001
            positional: []
            named: []
            parent:
            subcommands:
            - !Command
              command: *id002
              positional:
              - !Positional
                optional: false
                position: 0
                name: directories
                description: "directories to watch (default: '.')"
              named:
              - !Flag
                optional: true
                synonyms:
                - -c
                - --command
                description: "shell command executed in response to matching events.\n\
                  These interpolation variables are available to your\ncommand string::\
                  \ ${watch_src_path} - event source\npath; ${watch_dest_path} - event\
                  \ destination path (for\nmoved events); ${watch_event_type} - event\
                  \ type;\n${watch_object} - ``file`` or ``directory`` Note::\nPlease\
                  \ ensure you do not use double quotes (\") to\nquote your command\
                  \ string. That will force your shell\nto interpolate before the\
                  \ command is processed by this\nsubcommand. Example option usage::\
                  \ --command='echo\n\"${watch_src_path}\"' (default: -)"
                args: !SimpleFlagArg
                  name: COMMAND
              - !Flag
                optional: true
                synonyms:
                - -p
                - --pattern
                - --patterns
                description: "matches event paths with these patterns (separated by\n\
                  ;). (default: '*')"
                args: !SimpleFlagArg
                  name: PATTERNS
              - !Flag
                optional: true
                synonyms:
                - -i
                - --ignore-pattern
                - --ignore-patterns
                description: "ignores event paths with these patterns (separated by\n\
                  ;). (default: '')"
                args: !SimpleFlagArg
                  name: IGNORE_PATTERNS
              - !Flag
                optional: true
                synonyms:
                - -D
                - --ignore-directories
                description: 'ignores events for directories (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -R
                - --recursive
                description: 'monitors the directories recursively (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - --interval
                - --timeout
                description: "use this as the polling interval/blocking timeout\n\
                  (default: 1.0)"
                args: !SimpleFlagArg
                  name: TIMEOUT
              - !Flag
                optional: true
                synonyms:
                - -w
                - --wait
                description: "wait for process to finish to avoid multiple\nsimultaneous\
                  \ instances (default: False)"
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -W
                - --drop
                description: "Ignore events that occur while command is still being\n\
                  executed to avoid multiple simultaneous instances\n(default: False)\n"
                args: !EmptyFlagArg {}
              parent: &id008 !Command
                command: *id001
                positional: []
                named: []
                parent:
                subcommands:
                - !Command
                  command: *id002
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: directories
                    description: "directories to watch (default: '.')"
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -c
                    - --command
                    description: "shell command executed in response to matching events.\n\
                      These interpolation variables are available to your\ncommand\
                      \ string:: ${watch_src_path} - event source\npath; ${watch_dest_path}\
                      \ - event destination path (for\nmoved events); ${watch_event_type}\
                      \ - event type;\n${watch_object} - ``file`` or ``directory``\
                      \ Note::\nPlease ensure you do not use double quotes (\") to\n\
                      quote your command string. That will force your shell\nto interpolate\
                      \ before the command is processed by this\nsubcommand. Example\
                      \ option usage:: --command='echo\n\"${watch_src_path}\"' (default:\
                      \ -)"
                    args: !SimpleFlagArg
                      name: COMMAND
                  - !Flag
                    optional: true
                    synonyms:
                    - -p
                    - --pattern
                    - --patterns
                    description: "matches event paths with these patterns (separated\
                      \ by\n;). (default: '*')"
                    args: !SimpleFlagArg
                      name: PATTERNS
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - --ignore-pattern
                    - --ignore-patterns
                    description: "ignores event paths with these patterns (separated\
                      \ by\n;). (default: '')"
                    args: !SimpleFlagArg
                      name: IGNORE_PATTERNS
                  - !Flag
                    optional: true
                    synonyms:
                    - -D
                    - --ignore-directories
                    description: 'ignores events for directories (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -R
                    - --recursive
                    description: 'monitors the directories recursively (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - --interval
                    - --timeout
                    description: "use this as the polling interval/blocking timeout\n\
                      (default: 1.0)"
                    args: !SimpleFlagArg
                      name: TIMEOUT
                  - !Flag
                    optional: true
                    synonyms:
                    - -w
                    - --wait
                    description: "wait for process to finish to avoid multiple\nsimultaneous\
                      \ instances (default: False)"
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -W
                    - --drop
                    description: "Ignore events that occur while command is still\
                      \ being\nexecuted to avoid multiple simultaneous instances\n\
                      (default: False)\n"
                    args: !EmptyFlagArg {}
                  parent: &id003 !Command
                    command: *id001
                    positional: []
                    named: []
                    parent:
                    subcommands:
                    - !Command
                      command: *id002
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: directories
                        description: "directories to watch (default: '.')"
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -c
                        - --command
                        description: "shell command executed in response to matching\
                          \ events.\nThese interpolation variables are available to\
                          \ your\ncommand string:: ${watch_src_path} - event source\n\
                          path; ${watch_dest_path} - event destination path (for\n\
                          moved events); ${watch_event_type} - event type;\n${watch_object}\
                          \ - ``file`` or ``directory`` Note::\nPlease ensure you\
                          \ do not use double quotes (\") to\nquote your command string.\
                          \ That will force your shell\nto interpolate before the\
                          \ command is processed by this\nsubcommand. Example option\
                          \ usage:: --command='echo\n\"${watch_src_path}\"' (default:\
                          \ -)"
                        args: !SimpleFlagArg
                          name: COMMAND
                      - !Flag
                        optional: true
                        synonyms:
                        - -p
                        - --pattern
                        - --patterns
                        description: "matches event paths with these patterns (separated\
                          \ by\n;). (default: '*')"
                        args: !SimpleFlagArg
                          name: PATTERNS
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - --ignore-pattern
                        - --ignore-patterns
                        description: "ignores event paths with these patterns (separated\
                          \ by\n;). (default: '')"
                        args: !SimpleFlagArg
                          name: IGNORE_PATTERNS
                      - !Flag
                        optional: true
                        synonyms:
                        - -D
                        - --ignore-directories
                        description: 'ignores events for directories (default: False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -R
                        - --recursive
                        description: 'monitors the directories recursively (default:
                          False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - --interval
                        - --timeout
                        description: "use this as the polling interval/blocking timeout\n\
                          (default: 1.0)"
                        args: !SimpleFlagArg
                          name: TIMEOUT
                      - !Flag
                        optional: true
                        synonyms:
                        - -w
                        - --wait
                        description: "wait for process to finish to avoid multiple\n\
                          simultaneous instances (default: False)"
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -W
                        - --drop
                        description: "Ignore events that occur while command is still\
                          \ being\nexecuted to avoid multiple simultaneous instances\n\
                          (default: False)\n"
                        args: !EmptyFlagArg {}
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        - --help
                        description: show this help message and exit
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag:
                      help_text: "usage: watchmedo shell-command [-h] [-c COMMAND]\
                        \ [-p PATTERNS]\n                               [-i IGNORE_PATTERNS]\
                        \ [-D] [-R]\n                               [--interval TIMEOUT]\
                        \ [-w] [-W]\n                               [directories [directories\
                        \ ...]]\n\n    Subcommand to execute shell commands in response\
                        \ to file system events.\n\n    :param args:\n        Command\
                        \ line argument options.\n    \n\npositional arguments:\n\
                        \  directories           directories to watch (default: '.')\n\
                        \noptional arguments:\n  -h, --help            show this help\
                        \ message and exit\n  -c COMMAND, --command COMMAND\n    \
                        \                    shell command executed in response to\
                        \ matching events.\n                        These interpolation\
                        \ variables are available to your\n                      \
                        \  command string:: ${watch_src_path} - event source\n   \
                        \                     path; ${watch_dest_path} - event destination\
                        \ path (for\n                        moved events); ${watch_event_type}\
                        \ - event type;\n                        ${watch_object} -\
                        \ ``file`` or ``directory`` Note::\n                     \
                        \   Please ensure you do not use double quotes (\") to\n \
                        \                       quote your command string. That will\
                        \ force your shell\n                        to interpolate\
                        \ before the command is processed by this\n              \
                        \          subcommand. Example option usage:: --command='echo\n\
                        \                        \"${watch_src_path}\"' (default:\
                        \ -)\n  -p PATTERNS, --pattern PATTERNS, --patterns PATTERNS\n\
                        \                        matches event paths with these patterns\
                        \ (separated by\n                        ;). (default: '*')\n\
                        \  -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS, --ignore-patterns\
                        \ IGNORE_PATTERNS\n                        ignores event paths\
                        \ with these patterns (separated by\n                    \
                        \    ;). (default: '')\n  -D, --ignore-directories\n     \
                        \                   ignores events for directories (default:\
                        \ False)\n  -R, --recursive       monitors the directories\
                        \ recursively (default: False)\n  --interval TIMEOUT, --timeout\
                        \ TIMEOUT\n                        use this as the polling\
                        \ interval/blocking timeout\n                        (default:\
                        \ 1.0)\n  -w, --wait            wait for process to finish\
                        \ to avoid multiple\n                        simultaneous\
                        \ instances (default: False)\n  -W, --drop            Ignore\
                        \ events that occur while command is still being\n       \
                        \                 executed to avoid multiple simultaneous\
                        \ instances\n                        (default: False)\n"
                      generated_using: &id004
                      - --help
                      docker_image:
                    - !Command
                      command: &id005
                      - watchmedo
                      - log
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: directories
                        description: "directories to watch. (default: '.')"
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -p
                        - --pattern
                        - --patterns
                        description: "matches event paths with these patterns (separated\
                          \ by\n;). (default: '*')"
                        args: !SimpleFlagArg
                          name: PATTERNS
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - --ignore-pattern
                        - --ignore-patterns
                        description: "ignores event paths with these patterns (separated\
                          \ by\n;). (default: '')"
                        args: !SimpleFlagArg
                          name: IGNORE_PATTERNS
                      - !Flag
                        optional: true
                        synonyms:
                        - -D
                        - --ignore-directories
                        description: 'ignores events for directories (default: False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -R
                        - --recursive
                        description: 'monitors the directories recursively (default:
                          False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - --interval
                        - --timeout
                        description: "use this as the polling interval/blocking timeout\n\
                          (default: 1.0)"
                        args: !SimpleFlagArg
                          name: TIMEOUT
                      - !Flag
                        optional: true
                        synonyms:
                        - --trace
                        description: 'dumps complete dispatching trace (default: False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - --debug-force-polling
                        description: '[debug] forces polling (default: False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - --debug-force-kqueue
                        description: '[debug] forces BSD kqueue(2) (default: False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - --debug-force-winapi
                        description: '[debug] forces Windows API (default: False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - --debug-force-winapi-async
                        description: "[debug] forces Windows API + I/O completion\
                          \ (default:\nFalse)"
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - --debug-force-fsevents
                        description: '[debug] forces Mac OS X FSEvents (default: False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - --debug-force-inotify
                        description: "[debug] forces Linux inotify(7) (default: False)\n"
                        args: !EmptyFlagArg {}
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        - --help
                        description: show this help message and exit
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag:
                      help_text: "usage: watchmedo log [-h] [-p PATTERNS] [-i IGNORE_PATTERNS]\
                        \ [-D] [-R]\n                     [--interval TIMEOUT] [--trace]\
                        \ [--debug-force-polling]\n                     [--debug-force-kqueue]\
                        \ [--debug-force-winapi]\n                     [--debug-force-winapi-async]\
                        \ [--debug-force-fsevents]\n                     [--debug-force-inotify]\n\
                        \                     [directories [directories ...]]\n\n\
                        \    Subcommand to log file system events to the console.\n\
                        \n    :param args:\n        Command line argument options.\n\
                        \    \n\npositional arguments:\n  directories           directories\
                        \ to watch. (default: '.')\n\noptional arguments:\n  -h, --help\
                        \            show this help message and exit\n  -p PATTERNS,\
                        \ --pattern PATTERNS, --patterns PATTERNS\n              \
                        \          matches event paths with these patterns (separated\
                        \ by\n                        ;). (default: '*')\n  -i IGNORE_PATTERNS,\
                        \ --ignore-pattern IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n\
                        \                        ignores event paths with these patterns\
                        \ (separated by\n                        ;). (default: '')\n\
                        \  -D, --ignore-directories\n                        ignores\
                        \ events for directories (default: False)\n  -R, --recursive\
                        \       monitors the directories recursively (default: False)\n\
                        \  --interval TIMEOUT, --timeout TIMEOUT\n               \
                        \         use this as the polling interval/blocking timeout\n\
                        \                        (default: 1.0)\n  --trace       \
                        \        dumps complete dispatching trace (default: False)\n\
                        \  --debug-force-polling\n                        [debug]\
                        \ forces polling (default: False)\n  --debug-force-kqueue\
                        \  [debug] forces BSD kqueue(2) (default: False)\n  --debug-force-winapi\
                        \  [debug] forces Windows API (default: False)\n  --debug-force-winapi-async\n\
                        \                        [debug] forces Windows API + I/O\
                        \ completion (default:\n                        False)\n \
                        \ --debug-force-fsevents\n                        [debug]\
                        \ forces Mac OS X FSEvents (default: False)\n  --debug-force-inotify\n\
                        \                        [debug] forces Linux inotify(7) (default:\
                        \ False)\n"
                      generated_using: *id004
                      docker_image:
                    - !Command
                      command: &id006
                      - watchmedo
                      - options.
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: watchmedo
                        description: ''
                      named: []
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        description: ''
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag: !Flag
                        optional: true
                        synonyms:
                        - --version
                        description: ''
                        args: !EmptyFlagArg {}
                      help_text: "usage: watchmedo [-h] [--version]\n            \
                        \     {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
                        \                 ...\nwatchmedo: error: invalid choice: 'options.'\
                        \ (choose from 'tricks-from', 'tricks', 'tricks-generate-yaml',\
                        \ 'generate-tricks-yaml', 'log', 'shell-command', 'auto-restart')\n"
                      generated_using: *id004
                      docker_image:
                    - !Command
                      command: &id007
                      - watchmedo
                      - auto-restart
                      positional:
                      - !Positional
                        optional: false
                        position: 0
                        name: command
                        description: Long-running command to run in a subprocess.
                      - !Positional
                        optional: false
                        position: 1
                        name: arg
                        description: "Command arguments. Note: Use -- before the command\n\
                          arguments, otherwise watchmedo will try to interpret\nthem.\
                          \ (default: -)"
                      named:
                      - !Flag
                        optional: true
                        synonyms:
                        - -d
                        - --directory
                        description: "Directory to watch. Use another -d or --directory\n\
                          option for each directory. (default: -)"
                        args: !SimpleFlagArg
                          name: directory
                      - !Flag
                        optional: true
                        synonyms:
                        - -p
                        - --pattern
                        - --patterns
                        description: "matches event paths with these patterns (separated\
                          \ by\n;). (default: '*')"
                        args: !SimpleFlagArg
                          name: PATTERNS
                      - !Flag
                        optional: true
                        synonyms:
                        - -i
                        - --ignore-pattern
                        - --ignore-patterns
                        description: "ignores event paths with these patterns (separated\
                          \ by\n;). (default: '')"
                        args: !SimpleFlagArg
                          name: IGNORE_PATTERNS
                      - !Flag
                        optional: true
                        synonyms:
                        - -D
                        - --ignore-directories
                        description: 'ignores events for directories (default: False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - -R
                        - --recursive
                        description: 'monitors the directories recursively (default:
                          False)'
                        args: !EmptyFlagArg {}
                      - !Flag
                        optional: true
                        synonyms:
                        - --interval
                        - --timeout
                        description: "use this as the polling interval/blocking timeout\n\
                          (default: 1.0)"
                        args: !SimpleFlagArg
                          name: TIMEOUT
                      - !Flag
                        optional: true
                        synonyms:
                        - --signal
                        description: "stop the subprocess with this signal (default\
                          \ SIGINT)\n(default: 'SIGINT')"
                        args: !SimpleFlagArg
                          name: SIGNAL
                      - !Flag
                        optional: true
                        synonyms:
                        - --kill-after
                        description: "when stopping, kill the subprocess after the\
                          \ specified\ntimeout (default 10) (default: 10.0)\n"
                        args: !SimpleFlagArg
                          name: KILL_AFTER
                      parent: *id003
                      subcommands: []
                      usage: []
                      help_flag: !Flag
                        optional: true
                        synonyms:
                        - -h
                        - --help
                        description: show this help message and exit
                        args: !EmptyFlagArg {}
                      usage_flag:
                      version_flag:
                      help_text: "usage: watchmedo auto-restart [-h] [-d directory]\
                        \ [-p PATTERNS]\n                              [-i IGNORE_PATTERNS]\
                        \ [-D] [-R]\n                              [--interval TIMEOUT]\
                        \ [--signal SIGNAL]\n                              [--kill-after\
                        \ KILL_AFTER]\n                              command [arg\
                        \ [arg ...]]\n\n    Subcommand to start a long-running subprocess\
                        \ and restart it\n    on matched events.\n\n    :param args:\n\
                        \        Command line argument options.\n    \n\npositional\
                        \ arguments:\n  command               Long-running command\
                        \ to run in a subprocess.\n  arg                   Command\
                        \ arguments. Note: Use -- before the command\n           \
                        \             arguments, otherwise watchmedo will try to interpret\n\
                        \                        them. (default: -)\n\noptional arguments:\n\
                        \  -h, --help            show this help message and exit\n\
                        \  -d directory, --directory directory\n                 \
                        \       Directory to watch. Use another -d or --directory\n\
                        \                        option for each directory. (default:\
                        \ -)\n  -p PATTERNS, --pattern PATTERNS, --patterns PATTERNS\n\
                        \                        matches event paths with these patterns\
                        \ (separated by\n                        ;). (default: '*')\n\
                        \  -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS, --ignore-patterns\
                        \ IGNORE_PATTERNS\n                        ignores event paths\
                        \ with these patterns (separated by\n                    \
                        \    ;). (default: '')\n  -D, --ignore-directories\n     \
                        \                   ignores events for directories (default:\
                        \ False)\n  -R, --recursive       monitors the directories\
                        \ recursively (default: False)\n  --interval TIMEOUT, --timeout\
                        \ TIMEOUT\n                        use this as the polling\
                        \ interval/blocking timeout\n                        (default:\
                        \ 1.0)\n  --signal SIGNAL       stop the subprocess with this\
                        \ signal (default SIGINT)\n                        (default:\
                        \ 'SIGINT')\n  --kill-after KILL_AFTER\n                 \
                        \       when stopping, kill the subprocess after the specified\n\
                        \                        timeout (default 10) (default: 10.0)\n"
                      generated_using: *id004
                      docker_image:
                    usage: []
                    help_flag: !Flag
                      optional: true
                      synonyms:
                      - -h
                      - --help
                      description: show this help message and exit
                      args: !EmptyFlagArg {}
                    usage_flag:
                    version_flag: !Flag
                      optional: true
                      synonyms:
                      - --version
                      description: show program's version number and exit
                      args: !EmptyFlagArg {}
                    help_text: "usage: watchmedo [-h] [--version]\n              \
                      \   {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
                      \                 ...\n\npositional arguments:\n  {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
                      \    tricks-from (tricks)\n                        Subcommand\
                      \ to execute tricks from a tricks\n                        configuration\
                      \ file. :param args: Command line argument\n               \
                      \         options.\n    tricks-generate-yaml (generate-tricks-yaml)\n\
                      \                        Subcommand to generate Yaml configuration\
                      \ for tricks\n                        named on the command line.\
                      \ :param args: Command line\n                        argument\
                      \ options.\n    log                 Subcommand to log file system\
                      \ events to the console.\n                        :param args:\
                      \ Command line argument options.\n    shell-command       Subcommand\
                      \ to execute shell commands in response to\n               \
                      \         file system events. :param args: Command line argument\n\
                      \                        options.\n    auto-restart        Subcommand\
                      \ to start a long-running subprocess and\n                 \
                      \       restart it on matched events. :param args: Command\n\
                      \                        line argument options.\n\noptional\
                      \ arguments:\n  -h, --help            show this help message\
                      \ and exit\n  --version             show program's version number\
                      \ and exit\n\nCopyright 2011 Yesudeep Mangalapilly <yesudeep@gmail.com>.\n\
                      Copyright 2012 Google, Inc.\n\nLicensed under the terms of the\
                      \ Apache license, version 2.0. Please see\nLICENSE in the source\
                      \ code for more information.\n"
                    generated_using: *id004
                    docker_image:
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    - --help
                    description: show this help message and exit
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag:
                  help_text: "usage: watchmedo shell-command [-h] [-c COMMAND] [-p\
                    \ PATTERNS]\n                               [-i IGNORE_PATTERNS]\
                    \ [-D] [-R]\n                               [--interval TIMEOUT]\
                    \ [-w] [-W]\n                               [directories [directories\
                    \ ...]]\n\n    Subcommand to execute shell commands in response\
                    \ to file system events.\n\n    :param args:\n        Command\
                    \ line argument options.\n    \n\npositional arguments:\n  directories\
                    \           directories to watch (default: '.')\n\noptional arguments:\n\
                    \  -h, --help            show this help message and exit\n  -c\
                    \ COMMAND, --command COMMAND\n                        shell command\
                    \ executed in response to matching events.\n                 \
                    \       These interpolation variables are available to your\n\
                    \                        command string:: ${watch_src_path} -\
                    \ event source\n                        path; ${watch_dest_path}\
                    \ - event destination path (for\n                        moved\
                    \ events); ${watch_event_type} - event type;\n               \
                    \         ${watch_object} - ``file`` or ``directory`` Note::\n\
                    \                        Please ensure you do not use double quotes\
                    \ (\") to\n                        quote your command string.\
                    \ That will force your shell\n                        to interpolate\
                    \ before the command is processed by this\n                  \
                    \      subcommand. Example option usage:: --command='echo\n  \
                    \                      \"${watch_src_path}\"' (default: -)\n \
                    \ -p PATTERNS, --pattern PATTERNS, --patterns PATTERNS\n     \
                    \                   matches event paths with these patterns (separated\
                    \ by\n                        ;). (default: '*')\n  -i IGNORE_PATTERNS,\
                    \ --ignore-pattern IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n\
                    \                        ignores event paths with these patterns\
                    \ (separated by\n                        ;). (default: '')\n \
                    \ -D, --ignore-directories\n                        ignores events\
                    \ for directories (default: False)\n  -R, --recursive       monitors\
                    \ the directories recursively (default: False)\n  --interval TIMEOUT,\
                    \ --timeout TIMEOUT\n                        use this as the polling\
                    \ interval/blocking timeout\n                        (default:\
                    \ 1.0)\n  -w, --wait            wait for process to finish to\
                    \ avoid multiple\n                        simultaneous instances\
                    \ (default: False)\n  -W, --drop            Ignore events that\
                    \ occur while command is still being\n                       \
                    \ executed to avoid multiple simultaneous instances\n        \
                    \                (default: False)\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id005
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: directories
                    description: "directories to watch. (default: '.')"
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -p
                    - --pattern
                    - --patterns
                    description: "matches event paths with these patterns (separated\
                      \ by\n;). (default: '*')"
                    args: !SimpleFlagArg
                      name: PATTERNS
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - --ignore-pattern
                    - --ignore-patterns
                    description: "ignores event paths with these patterns (separated\
                      \ by\n;). (default: '')"
                    args: !SimpleFlagArg
                      name: IGNORE_PATTERNS
                  - !Flag
                    optional: true
                    synonyms:
                    - -D
                    - --ignore-directories
                    description: 'ignores events for directories (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -R
                    - --recursive
                    description: 'monitors the directories recursively (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - --interval
                    - --timeout
                    description: "use this as the polling interval/blocking timeout\n\
                      (default: 1.0)"
                    args: !SimpleFlagArg
                      name: TIMEOUT
                  - !Flag
                    optional: true
                    synonyms:
                    - --trace
                    description: 'dumps complete dispatching trace (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - --debug-force-polling
                    description: '[debug] forces polling (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - --debug-force-kqueue
                    description: '[debug] forces BSD kqueue(2) (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - --debug-force-winapi
                    description: '[debug] forces Windows API (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - --debug-force-winapi-async
                    description: "[debug] forces Windows API + I/O completion (default:\n\
                      False)"
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - --debug-force-fsevents
                    description: '[debug] forces Mac OS X FSEvents (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - --debug-force-inotify
                    description: "[debug] forces Linux inotify(7) (default: False)\n"
                    args: !EmptyFlagArg {}
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    - --help
                    description: show this help message and exit
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag:
                  help_text: "usage: watchmedo log [-h] [-p PATTERNS] [-i IGNORE_PATTERNS]\
                    \ [-D] [-R]\n                     [--interval TIMEOUT] [--trace]\
                    \ [--debug-force-polling]\n                     [--debug-force-kqueue]\
                    \ [--debug-force-winapi]\n                     [--debug-force-winapi-async]\
                    \ [--debug-force-fsevents]\n                     [--debug-force-inotify]\n\
                    \                     [directories [directories ...]]\n\n    Subcommand\
                    \ to log file system events to the console.\n\n    :param args:\n\
                    \        Command line argument options.\n    \n\npositional arguments:\n\
                    \  directories           directories to watch. (default: '.')\n\
                    \noptional arguments:\n  -h, --help            show this help\
                    \ message and exit\n  -p PATTERNS, --pattern PATTERNS, --patterns\
                    \ PATTERNS\n                        matches event paths with these\
                    \ patterns (separated by\n                        ;). (default:\
                    \ '*')\n  -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS,\
                    \ --ignore-patterns IGNORE_PATTERNS\n                        ignores\
                    \ event paths with these patterns (separated by\n            \
                    \            ;). (default: '')\n  -D, --ignore-directories\n \
                    \                       ignores events for directories (default:\
                    \ False)\n  -R, --recursive       monitors the directories recursively\
                    \ (default: False)\n  --interval TIMEOUT, --timeout TIMEOUT\n\
                    \                        use this as the polling interval/blocking\
                    \ timeout\n                        (default: 1.0)\n  --trace \
                    \              dumps complete dispatching trace (default: False)\n\
                    \  --debug-force-polling\n                        [debug] forces\
                    \ polling (default: False)\n  --debug-force-kqueue  [debug] forces\
                    \ BSD kqueue(2) (default: False)\n  --debug-force-winapi  [debug]\
                    \ forces Windows API (default: False)\n  --debug-force-winapi-async\n\
                    \                        [debug] forces Windows API + I/O completion\
                    \ (default:\n                        False)\n  --debug-force-fsevents\n\
                    \                        [debug] forces Mac OS X FSEvents (default:\
                    \ False)\n  --debug-force-inotify\n                        [debug]\
                    \ forces Linux inotify(7) (default: False)\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id006
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: watchmedo
                    description: ''
                  named: []
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    description: ''
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag: !Flag
                    optional: true
                    synonyms:
                    - --version
                    description: ''
                    args: !EmptyFlagArg {}
                  help_text: "usage: watchmedo [-h] [--version]\n                \
                    \ {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
                    \                 ...\nwatchmedo: error: invalid choice: 'options.'\
                    \ (choose from 'tricks-from', 'tricks', 'tricks-generate-yaml',\
                    \ 'generate-tricks-yaml', 'log', 'shell-command', 'auto-restart')\n"
                  generated_using: *id004
                  docker_image:
                - !Command
                  command: *id007
                  positional:
                  - !Positional
                    optional: false
                    position: 0
                    name: command
                    description: Long-running command to run in a subprocess.
                  - !Positional
                    optional: false
                    position: 1
                    name: arg
                    description: "Command arguments. Note: Use -- before the command\n\
                      arguments, otherwise watchmedo will try to interpret\nthem.\
                      \ (default: -)"
                  named:
                  - !Flag
                    optional: true
                    synonyms:
                    - -d
                    - --directory
                    description: "Directory to watch. Use another -d or --directory\n\
                      option for each directory. (default: -)"
                    args: !SimpleFlagArg
                      name: directory
                  - !Flag
                    optional: true
                    synonyms:
                    - -p
                    - --pattern
                    - --patterns
                    description: "matches event paths with these patterns (separated\
                      \ by\n;). (default: '*')"
                    args: !SimpleFlagArg
                      name: PATTERNS
                  - !Flag
                    optional: true
                    synonyms:
                    - -i
                    - --ignore-pattern
                    - --ignore-patterns
                    description: "ignores event paths with these patterns (separated\
                      \ by\n;). (default: '')"
                    args: !SimpleFlagArg
                      name: IGNORE_PATTERNS
                  - !Flag
                    optional: true
                    synonyms:
                    - -D
                    - --ignore-directories
                    description: 'ignores events for directories (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - -R
                    - --recursive
                    description: 'monitors the directories recursively (default: False)'
                    args: !EmptyFlagArg {}
                  - !Flag
                    optional: true
                    synonyms:
                    - --interval
                    - --timeout
                    description: "use this as the polling interval/blocking timeout\n\
                      (default: 1.0)"
                    args: !SimpleFlagArg
                      name: TIMEOUT
                  - !Flag
                    optional: true
                    synonyms:
                    - --signal
                    description: "stop the subprocess with this signal (default SIGINT)\n\
                      (default: 'SIGINT')"
                    args: !SimpleFlagArg
                      name: SIGNAL
                  - !Flag
                    optional: true
                    synonyms:
                    - --kill-after
                    description: "when stopping, kill the subprocess after the specified\n\
                      timeout (default 10) (default: 10.0)\n"
                    args: !SimpleFlagArg
                      name: KILL_AFTER
                  parent: *id003
                  subcommands: []
                  usage: []
                  help_flag: !Flag
                    optional: true
                    synonyms:
                    - -h
                    - --help
                    description: show this help message and exit
                    args: !EmptyFlagArg {}
                  usage_flag:
                  version_flag:
                  help_text: "usage: watchmedo auto-restart [-h] [-d directory] [-p\
                    \ PATTERNS]\n                              [-i IGNORE_PATTERNS]\
                    \ [-D] [-R]\n                              [--interval TIMEOUT]\
                    \ [--signal SIGNAL]\n                              [--kill-after\
                    \ KILL_AFTER]\n                              command [arg [arg\
                    \ ...]]\n\n    Subcommand to start a long-running subprocess and\
                    \ restart it\n    on matched events.\n\n    :param args:\n   \
                    \     Command line argument options.\n    \n\npositional arguments:\n\
                    \  command               Long-running command to run in a subprocess.\n\
                    \  arg                   Command arguments. Note: Use -- before\
                    \ the command\n                        arguments, otherwise watchmedo\
                    \ will try to interpret\n                        them. (default:\
                    \ -)\n\noptional arguments:\n  -h, --help            show this\
                    \ help message and exit\n  -d directory, --directory directory\n\
                    \                        Directory to watch. Use another -d or\
                    \ --directory\n                        option for each directory.\
                    \ (default: -)\n  -p PATTERNS, --pattern PATTERNS, --patterns\
                    \ PATTERNS\n                        matches event paths with these\
                    \ patterns (separated by\n                        ;). (default:\
                    \ '*')\n  -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS,\
                    \ --ignore-patterns IGNORE_PATTERNS\n                        ignores\
                    \ event paths with these patterns (separated by\n            \
                    \            ;). (default: '')\n  -D, --ignore-directories\n \
                    \                       ignores events for directories (default:\
                    \ False)\n  -R, --recursive       monitors the directories recursively\
                    \ (default: False)\n  --interval TIMEOUT, --timeout TIMEOUT\n\
                    \                        use this as the polling interval/blocking\
                    \ timeout\n                        (default: 1.0)\n  --signal\
                    \ SIGNAL       stop the subprocess with this signal (default SIGINT)\n\
                    \                        (default: 'SIGINT')\n  --kill-after KILL_AFTER\n\
                    \                        when stopping, kill the subprocess after\
                    \ the specified\n                        timeout (default 10)\
                    \ (default: 10.0)\n"
                  generated_using: *id004
                  docker_image:
                usage: []
                help_flag:
                usage_flag:
                version_flag:
                help_text: "usage: watchmedo [-h] [--version]\n                 {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
                  \                 ...\n\npositional arguments:\n  {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
                  \    tricks-from (tricks)\n                        Subcommand to\
                  \ execute tricks from a tricks\n                        configuration\
                  \ file. :param args: Command line argument\n                   \
                  \     options.\n    tricks-generate-yaml (generate-tricks-yaml)\n\
                  \                        Subcommand to generate Yaml configuration\
                  \ for tricks\n                        named on the command line.\
                  \ :param args: Command line\n                        argument options.\n\
                  \    log                 Subcommand to log file system events to\
                  \ the console.\n                        :param args: Command line\
                  \ argument options.\n    shell-command       Subcommand to execute\
                  \ shell commands in response to\n                        file system\
                  \ events. :param args: Command line argument\n                 \
                  \       options.\n    auto-restart        Subcommand to start a\
                  \ long-running subprocess and\n                        restart it\
                  \ on matched events. :param args: Command\n                    \
                  \    line argument options.\n\noptional arguments:\n  -h, --help\
                  \            show this help message and exit\n  --version      \
                  \       show program's version number and exit\n\nCopyright 2011\
                  \ Yesudeep Mangalapilly <yesudeep@gmail.com>.\nCopyright 2012 Google,\
                  \ Inc.\n\nLicensed under the terms of the Apache license, version\
                  \ 2.0. Please see\nLICENSE in the source code for more information.\n"
                generated_using: *id004
                docker_image:
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                - --help
                description: show this help message and exit
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag:
              help_text: "usage: watchmedo shell-command [-h] [-c COMMAND] [-p PATTERNS]\n\
                \                               [-i IGNORE_PATTERNS] [-D] [-R]\n \
                \                              [--interval TIMEOUT] [-w] [-W]\n  \
                \                             [directories [directories ...]]\n\n\
                \    Subcommand to execute shell commands in response to file system\
                \ events.\n\n    :param args:\n        Command line argument options.\n\
                \    \n\npositional arguments:\n  directories           directories\
                \ to watch (default: '.')\n\noptional arguments:\n  -h, --help   \
                \         show this help message and exit\n  -c COMMAND, --command\
                \ COMMAND\n                        shell command executed in response\
                \ to matching events.\n                        These interpolation\
                \ variables are available to your\n                        command\
                \ string:: ${watch_src_path} - event source\n                    \
                \    path; ${watch_dest_path} - event destination path (for\n    \
                \                    moved events); ${watch_event_type} - event type;\n\
                \                        ${watch_object} - ``file`` or ``directory``\
                \ Note::\n                        Please ensure you do not use double\
                \ quotes (\") to\n                        quote your command string.\
                \ That will force your shell\n                        to interpolate\
                \ before the command is processed by this\n                      \
                \  subcommand. Example option usage:: --command='echo\n          \
                \              \"${watch_src_path}\"' (default: -)\n  -p PATTERNS,\
                \ --pattern PATTERNS, --patterns PATTERNS\n                      \
                \  matches event paths with these patterns (separated by\n       \
                \                 ;). (default: '*')\n  -i IGNORE_PATTERNS, --ignore-pattern\
                \ IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n           \
                \             ignores event paths with these patterns (separated by\n\
                \                        ;). (default: '')\n  -D, --ignore-directories\n\
                \                        ignores events for directories (default:\
                \ False)\n  -R, --recursive       monitors the directories recursively\
                \ (default: False)\n  --interval TIMEOUT, --timeout TIMEOUT\n    \
                \                    use this as the polling interval/blocking timeout\n\
                \                        (default: 1.0)\n  -w, --wait            wait\
                \ for process to finish to avoid multiple\n                      \
                \  simultaneous instances (default: False)\n  -W, --drop         \
                \   Ignore events that occur while command is still being\n      \
                \                  executed to avoid multiple simultaneous instances\n\
                \                        (default: False)\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id005
              positional:
              - !Positional
                optional: false
                position: 0
                name: directories
                description: "directories to watch. (default: '.')"
              named:
              - !Flag
                optional: true
                synonyms:
                - -p
                - --pattern
                - --patterns
                description: "matches event paths with these patterns (separated by\n\
                  ;). (default: '*')"
                args: !SimpleFlagArg
                  name: PATTERNS
              - !Flag
                optional: true
                synonyms:
                - -i
                - --ignore-pattern
                - --ignore-patterns
                description: "ignores event paths with these patterns (separated by\n\
                  ;). (default: '')"
                args: !SimpleFlagArg
                  name: IGNORE_PATTERNS
              - !Flag
                optional: true
                synonyms:
                - -D
                - --ignore-directories
                description: 'ignores events for directories (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -R
                - --recursive
                description: 'monitors the directories recursively (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - --interval
                - --timeout
                description: "use this as the polling interval/blocking timeout\n\
                  (default: 1.0)"
                args: !SimpleFlagArg
                  name: TIMEOUT
              - !Flag
                optional: true
                synonyms:
                - --trace
                description: 'dumps complete dispatching trace (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - --debug-force-polling
                description: '[debug] forces polling (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - --debug-force-kqueue
                description: '[debug] forces BSD kqueue(2) (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - --debug-force-winapi
                description: '[debug] forces Windows API (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - --debug-force-winapi-async
                description: "[debug] forces Windows API + I/O completion (default:\n\
                  False)"
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - --debug-force-fsevents
                description: '[debug] forces Mac OS X FSEvents (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - --debug-force-inotify
                description: "[debug] forces Linux inotify(7) (default: False)\n"
                args: !EmptyFlagArg {}
              parent: *id008
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                - --help
                description: show this help message and exit
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag:
              help_text: "usage: watchmedo log [-h] [-p PATTERNS] [-i IGNORE_PATTERNS]\
                \ [-D] [-R]\n                     [--interval TIMEOUT] [--trace] [--debug-force-polling]\n\
                \                     [--debug-force-kqueue] [--debug-force-winapi]\n\
                \                     [--debug-force-winapi-async] [--debug-force-fsevents]\n\
                \                     [--debug-force-inotify]\n                  \
                \   [directories [directories ...]]\n\n    Subcommand to log file\
                \ system events to the console.\n\n    :param args:\n        Command\
                \ line argument options.\n    \n\npositional arguments:\n  directories\
                \           directories to watch. (default: '.')\n\noptional arguments:\n\
                \  -h, --help            show this help message and exit\n  -p PATTERNS,\
                \ --pattern PATTERNS, --patterns PATTERNS\n                      \
                \  matches event paths with these patterns (separated by\n       \
                \                 ;). (default: '*')\n  -i IGNORE_PATTERNS, --ignore-pattern\
                \ IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n           \
                \             ignores event paths with these patterns (separated by\n\
                \                        ;). (default: '')\n  -D, --ignore-directories\n\
                \                        ignores events for directories (default:\
                \ False)\n  -R, --recursive       monitors the directories recursively\
                \ (default: False)\n  --interval TIMEOUT, --timeout TIMEOUT\n    \
                \                    use this as the polling interval/blocking timeout\n\
                \                        (default: 1.0)\n  --trace               dumps\
                \ complete dispatching trace (default: False)\n  --debug-force-polling\n\
                \                        [debug] forces polling (default: False)\n\
                \  --debug-force-kqueue  [debug] forces BSD kqueue(2) (default: False)\n\
                \  --debug-force-winapi  [debug] forces Windows API (default: False)\n\
                \  --debug-force-winapi-async\n                        [debug] forces\
                \ Windows API + I/O completion (default:\n                       \
                \ False)\n  --debug-force-fsevents\n                        [debug]\
                \ forces Mac OS X FSEvents (default: False)\n  --debug-force-inotify\n\
                \                        [debug] forces Linux inotify(7) (default:\
                \ False)\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id006
              positional:
              - !Positional
                optional: false
                position: 0
                name: watchmedo
                description: ''
              named: []
              parent: *id008
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                description: ''
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag: !Flag
                optional: true
                synonyms:
                - --version
                description: ''
                args: !EmptyFlagArg {}
              help_text: "usage: watchmedo [-h] [--version]\n                 {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
                \                 ...\nwatchmedo: error: invalid choice: 'options.'\
                \ (choose from 'tricks-from', 'tricks', 'tricks-generate-yaml', 'generate-tricks-yaml',\
                \ 'log', 'shell-command', 'auto-restart')\n"
              generated_using: *id004
              docker_image:
            - !Command
              command: *id007
              positional:
              - !Positional
                optional: false
                position: 0
                name: command
                description: Long-running command to run in a subprocess.
              - !Positional
                optional: false
                position: 1
                name: arg
                description: "Command arguments. Note: Use -- before the command\n\
                  arguments, otherwise watchmedo will try to interpret\nthem. (default:\
                  \ -)"
              named:
              - !Flag
                optional: true
                synonyms:
                - -d
                - --directory
                description: "Directory to watch. Use another -d or --directory\n\
                  option for each directory. (default: -)"
                args: !SimpleFlagArg
                  name: directory
              - !Flag
                optional: true
                synonyms:
                - -p
                - --pattern
                - --patterns
                description: "matches event paths with these patterns (separated by\n\
                  ;). (default: '*')"
                args: !SimpleFlagArg
                  name: PATTERNS
              - !Flag
                optional: true
                synonyms:
                - -i
                - --ignore-pattern
                - --ignore-patterns
                description: "ignores event paths with these patterns (separated by\n\
                  ;). (default: '')"
                args: !SimpleFlagArg
                  name: IGNORE_PATTERNS
              - !Flag
                optional: true
                synonyms:
                - -D
                - --ignore-directories
                description: 'ignores events for directories (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - -R
                - --recursive
                description: 'monitors the directories recursively (default: False)'
                args: !EmptyFlagArg {}
              - !Flag
                optional: true
                synonyms:
                - --interval
                - --timeout
                description: "use this as the polling interval/blocking timeout\n\
                  (default: 1.0)"
                args: !SimpleFlagArg
                  name: TIMEOUT
              - !Flag
                optional: true
                synonyms:
                - --signal
                description: "stop the subprocess with this signal (default SIGINT)\n\
                  (default: 'SIGINT')"
                args: !SimpleFlagArg
                  name: SIGNAL
              - !Flag
                optional: true
                synonyms:
                - --kill-after
                description: "when stopping, kill the subprocess after the specified\n\
                  timeout (default 10) (default: 10.0)\n"
                args: !SimpleFlagArg
                  name: KILL_AFTER
              parent: *id008
              subcommands: []
              usage: []
              help_flag: !Flag
                optional: true
                synonyms:
                - -h
                - --help
                description: show this help message and exit
                args: !EmptyFlagArg {}
              usage_flag:
              version_flag:
              help_text: "usage: watchmedo auto-restart [-h] [-d directory] [-p PATTERNS]\n\
                \                              [-i IGNORE_PATTERNS] [-D] [-R]\n  \
                \                            [--interval TIMEOUT] [--signal SIGNAL]\n\
                \                              [--kill-after KILL_AFTER]\n       \
                \                       command [arg [arg ...]]\n\n    Subcommand\
                \ to start a long-running subprocess and restart it\n    on matched\
                \ events.\n\n    :param args:\n        Command line argument options.\n\
                \    \n\npositional arguments:\n  command               Long-running\
                \ command to run in a subprocess.\n  arg                   Command\
                \ arguments. Note: Use -- before the command\n                   \
                \     arguments, otherwise watchmedo will try to interpret\n     \
                \                   them. (default: -)\n\noptional arguments:\n  -h,\
                \ --help            show this help message and exit\n  -d directory,\
                \ --directory directory\n                        Directory to watch.\
                \ Use another -d or --directory\n                        option for\
                \ each directory. (default: -)\n  -p PATTERNS, --pattern PATTERNS,\
                \ --patterns PATTERNS\n                        matches event paths\
                \ with these patterns (separated by\n                        ;). (default:\
                \ '*')\n  -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS, --ignore-patterns\
                \ IGNORE_PATTERNS\n                        ignores event paths with\
                \ these patterns (separated by\n                        ;). (default:\
                \ '')\n  -D, --ignore-directories\n                        ignores\
                \ events for directories (default: False)\n  -R, --recursive     \
                \  monitors the directories recursively (default: False)\n  --interval\
                \ TIMEOUT, --timeout TIMEOUT\n                        use this as\
                \ the polling interval/blocking timeout\n                        (default:\
                \ 1.0)\n  --signal SIGNAL       stop the subprocess with this signal\
                \ (default SIGINT)\n                        (default: 'SIGINT')\n\
                \  --kill-after KILL_AFTER\n                        when stopping,\
                \ kill the subprocess after the specified\n                      \
                \  timeout (default 10) (default: 10.0)\n"
              generated_using: *id004
              docker_image:
            usage: []
            help_flag:
            usage_flag:
            version_flag:
            help_text: "usage: watchmedo [-h] [--version]\n                 {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
              \                 ...\n\npositional arguments:\n  {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
              \    tricks-from (tricks)\n                        Subcommand to execute\
              \ tricks from a tricks\n                        configuration file.\
              \ :param args: Command line argument\n                        options.\n\
              \    tricks-generate-yaml (generate-tricks-yaml)\n                 \
              \       Subcommand to generate Yaml configuration for tricks\n     \
              \                   named on the command line. :param args: Command\
              \ line\n                        argument options.\n    log         \
              \        Subcommand to log file system events to the console.\n    \
              \                    :param args: Command line argument options.\n \
              \   shell-command       Subcommand to execute shell commands in response\
              \ to\n                        file system events. :param args: Command\
              \ line argument\n                        options.\n    auto-restart\
              \        Subcommand to start a long-running subprocess and\n       \
              \                 restart it on matched events. :param args: Command\n\
              \                        line argument options.\n\noptional arguments:\n\
              \  -h, --help            show this help message and exit\n  --version\
              \             show program's version number and exit\n\nCopyright 2011\
              \ Yesudeep Mangalapilly <yesudeep@gmail.com>.\nCopyright 2012 Google,\
              \ Inc.\n\nLicensed under the terms of the Apache license, version 2.0.\
              \ Please see\nLICENSE in the source code for more information.\n"
            generated_using: *id004
            docker_image:
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            - --help
            description: show this help message and exit
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag:
          help_text: "usage: watchmedo shell-command [-h] [-c COMMAND] [-p PATTERNS]\n\
            \                               [-i IGNORE_PATTERNS] [-D] [-R]\n     \
            \                          [--interval TIMEOUT] [-w] [-W]\n          \
            \                     [directories [directories ...]]\n\n    Subcommand\
            \ to execute shell commands in response to file system events.\n\n   \
            \ :param args:\n        Command line argument options.\n    \n\npositional\
            \ arguments:\n  directories           directories to watch (default: '.')\n\
            \noptional arguments:\n  -h, --help            show this help message\
            \ and exit\n  -c COMMAND, --command COMMAND\n                        shell\
            \ command executed in response to matching events.\n                 \
            \       These interpolation variables are available to your\n        \
            \                command string:: ${watch_src_path} - event source\n \
            \                       path; ${watch_dest_path} - event destination path\
            \ (for\n                        moved events); ${watch_event_type} - event\
            \ type;\n                        ${watch_object} - ``file`` or ``directory``\
            \ Note::\n                        Please ensure you do not use double\
            \ quotes (\") to\n                        quote your command string. That\
            \ will force your shell\n                        to interpolate before\
            \ the command is processed by this\n                        subcommand.\
            \ Example option usage:: --command='echo\n                        \"${watch_src_path}\"\
            ' (default: -)\n  -p PATTERNS, --pattern PATTERNS, --patterns PATTERNS\n\
            \                        matches event paths with these patterns (separated\
            \ by\n                        ;). (default: '*')\n  -i IGNORE_PATTERNS,\
            \ --ignore-pattern IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n\
            \                        ignores event paths with these patterns (separated\
            \ by\n                        ;). (default: '')\n  -D, --ignore-directories\n\
            \                        ignores events for directories (default: False)\n\
            \  -R, --recursive       monitors the directories recursively (default:\
            \ False)\n  --interval TIMEOUT, --timeout TIMEOUT\n                  \
            \      use this as the polling interval/blocking timeout\n           \
            \             (default: 1.0)\n  -w, --wait            wait for process\
            \ to finish to avoid multiple\n                        simultaneous instances\
            \ (default: False)\n  -W, --drop            Ignore events that occur while\
            \ command is still being\n                        executed to avoid multiple\
            \ simultaneous instances\n                        (default: False)\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id005
          positional:
          - !Positional
            optional: false
            position: 0
            name: directories
            description: "directories to watch. (default: '.')"
          named:
          - !Flag
            optional: true
            synonyms:
            - -p
            - --pattern
            - --patterns
            description: "matches event paths with these patterns (separated by\n\
              ;). (default: '*')"
            args: !SimpleFlagArg
              name: PATTERNS
          - !Flag
            optional: true
            synonyms:
            - -i
            - --ignore-pattern
            - --ignore-patterns
            description: "ignores event paths with these patterns (separated by\n\
              ;). (default: '')"
            args: !SimpleFlagArg
              name: IGNORE_PATTERNS
          - !Flag
            optional: true
            synonyms:
            - -D
            - --ignore-directories
            description: 'ignores events for directories (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -R
            - --recursive
            description: 'monitors the directories recursively (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - --interval
            - --timeout
            description: "use this as the polling interval/blocking timeout\n(default:\
              \ 1.0)"
            args: !SimpleFlagArg
              name: TIMEOUT
          - !Flag
            optional: true
            synonyms:
            - --trace
            description: 'dumps complete dispatching trace (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - --debug-force-polling
            description: '[debug] forces polling (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - --debug-force-kqueue
            description: '[debug] forces BSD kqueue(2) (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - --debug-force-winapi
            description: '[debug] forces Windows API (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - --debug-force-winapi-async
            description: "[debug] forces Windows API + I/O completion (default:\n\
              False)"
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - --debug-force-fsevents
            description: '[debug] forces Mac OS X FSEvents (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - --debug-force-inotify
            description: "[debug] forces Linux inotify(7) (default: False)\n"
            args: !EmptyFlagArg {}
          parent: *id009
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            - --help
            description: show this help message and exit
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag:
          help_text: "usage: watchmedo log [-h] [-p PATTERNS] [-i IGNORE_PATTERNS]\
            \ [-D] [-R]\n                     [--interval TIMEOUT] [--trace] [--debug-force-polling]\n\
            \                     [--debug-force-kqueue] [--debug-force-winapi]\n\
            \                     [--debug-force-winapi-async] [--debug-force-fsevents]\n\
            \                     [--debug-force-inotify]\n                     [directories\
            \ [directories ...]]\n\n    Subcommand to log file system events to the\
            \ console.\n\n    :param args:\n        Command line argument options.\n\
            \    \n\npositional arguments:\n  directories           directories to\
            \ watch. (default: '.')\n\noptional arguments:\n  -h, --help         \
            \   show this help message and exit\n  -p PATTERNS, --pattern PATTERNS,\
            \ --patterns PATTERNS\n                        matches event paths with\
            \ these patterns (separated by\n                        ;). (default:\
            \ '*')\n  -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS, --ignore-patterns\
            \ IGNORE_PATTERNS\n                        ignores event paths with these\
            \ patterns (separated by\n                        ;). (default: '')\n\
            \  -D, --ignore-directories\n                        ignores events for\
            \ directories (default: False)\n  -R, --recursive       monitors the directories\
            \ recursively (default: False)\n  --interval TIMEOUT, --timeout TIMEOUT\n\
            \                        use this as the polling interval/blocking timeout\n\
            \                        (default: 1.0)\n  --trace               dumps\
            \ complete dispatching trace (default: False)\n  --debug-force-polling\n\
            \                        [debug] forces polling (default: False)\n  --debug-force-kqueue\
            \  [debug] forces BSD kqueue(2) (default: False)\n  --debug-force-winapi\
            \  [debug] forces Windows API (default: False)\n  --debug-force-winapi-async\n\
            \                        [debug] forces Windows API + I/O completion (default:\n\
            \                        False)\n  --debug-force-fsevents\n          \
            \              [debug] forces Mac OS X FSEvents (default: False)\n  --debug-force-inotify\n\
            \                        [debug] forces Linux inotify(7) (default: False)\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id006
          positional:
          - !Positional
            optional: false
            position: 0
            name: watchmedo
            description: ''
          named: []
          parent: *id009
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            description: ''
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag: !Flag
            optional: true
            synonyms:
            - --version
            description: ''
            args: !EmptyFlagArg {}
          help_text: "usage: watchmedo [-h] [--version]\n                 {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
            \                 ...\nwatchmedo: error: invalid choice: 'options.' (choose\
            \ from 'tricks-from', 'tricks', 'tricks-generate-yaml', 'generate-tricks-yaml',\
            \ 'log', 'shell-command', 'auto-restart')\n"
          generated_using: *id004
          docker_image:
        - !Command
          command: *id007
          positional:
          - !Positional
            optional: false
            position: 0
            name: command
            description: Long-running command to run in a subprocess.
          - !Positional
            optional: false
            position: 1
            name: arg
            description: "Command arguments. Note: Use -- before the command\narguments,\
              \ otherwise watchmedo will try to interpret\nthem. (default: -)"
          named:
          - !Flag
            optional: true
            synonyms:
            - -d
            - --directory
            description: "Directory to watch. Use another -d or --directory\noption\
              \ for each directory. (default: -)"
            args: !SimpleFlagArg
              name: directory
          - !Flag
            optional: true
            synonyms:
            - -p
            - --pattern
            - --patterns
            description: "matches event paths with these patterns (separated by\n\
              ;). (default: '*')"
            args: !SimpleFlagArg
              name: PATTERNS
          - !Flag
            optional: true
            synonyms:
            - -i
            - --ignore-pattern
            - --ignore-patterns
            description: "ignores event paths with these patterns (separated by\n\
              ;). (default: '')"
            args: !SimpleFlagArg
              name: IGNORE_PATTERNS
          - !Flag
            optional: true
            synonyms:
            - -D
            - --ignore-directories
            description: 'ignores events for directories (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - -R
            - --recursive
            description: 'monitors the directories recursively (default: False)'
            args: !EmptyFlagArg {}
          - !Flag
            optional: true
            synonyms:
            - --interval
            - --timeout
            description: "use this as the polling interval/blocking timeout\n(default:\
              \ 1.0)"
            args: !SimpleFlagArg
              name: TIMEOUT
          - !Flag
            optional: true
            synonyms:
            - --signal
            description: "stop the subprocess with this signal (default SIGINT)\n\
              (default: 'SIGINT')"
            args: !SimpleFlagArg
              name: SIGNAL
          - !Flag
            optional: true
            synonyms:
            - --kill-after
            description: "when stopping, kill the subprocess after the specified\n\
              timeout (default 10) (default: 10.0)\n"
            args: !SimpleFlagArg
              name: KILL_AFTER
          parent: *id009
          subcommands: []
          usage: []
          help_flag: !Flag
            optional: true
            synonyms:
            - -h
            - --help
            description: show this help message and exit
            args: !EmptyFlagArg {}
          usage_flag:
          version_flag:
          help_text: "usage: watchmedo auto-restart [-h] [-d directory] [-p PATTERNS]\n\
            \                              [-i IGNORE_PATTERNS] [-D] [-R]\n      \
            \                        [--interval TIMEOUT] [--signal SIGNAL]\n    \
            \                          [--kill-after KILL_AFTER]\n               \
            \               command [arg [arg ...]]\n\n    Subcommand to start a long-running\
            \ subprocess and restart it\n    on matched events.\n\n    :param args:\n\
            \        Command line argument options.\n    \n\npositional arguments:\n\
            \  command               Long-running command to run in a subprocess.\n\
            \  arg                   Command arguments. Note: Use -- before the command\n\
            \                        arguments, otherwise watchmedo will try to interpret\n\
            \                        them. (default: -)\n\noptional arguments:\n \
            \ -h, --help            show this help message and exit\n  -d directory,\
            \ --directory directory\n                        Directory to watch. Use\
            \ another -d or --directory\n                        option for each directory.\
            \ (default: -)\n  -p PATTERNS, --pattern PATTERNS, --patterns PATTERNS\n\
            \                        matches event paths with these patterns (separated\
            \ by\n                        ;). (default: '*')\n  -i IGNORE_PATTERNS,\
            \ --ignore-pattern IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n\
            \                        ignores event paths with these patterns (separated\
            \ by\n                        ;). (default: '')\n  -D, --ignore-directories\n\
            \                        ignores events for directories (default: False)\n\
            \  -R, --recursive       monitors the directories recursively (default:\
            \ False)\n  --interval TIMEOUT, --timeout TIMEOUT\n                  \
            \      use this as the polling interval/blocking timeout\n           \
            \             (default: 1.0)\n  --signal SIGNAL       stop the subprocess\
            \ with this signal (default SIGINT)\n                        (default:\
            \ 'SIGINT')\n  --kill-after KILL_AFTER\n                        when stopping,\
            \ kill the subprocess after the specified\n                        timeout\
            \ (default 10) (default: 10.0)\n"
          generated_using: *id004
          docker_image:
        usage: []
        help_flag:
        usage_flag:
        version_flag:
        help_text: "usage: watchmedo [-h] [--version]\n                 {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
          \                 ...\n\npositional arguments:\n  {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
          \    tricks-from (tricks)\n                        Subcommand to execute\
          \ tricks from a tricks\n                        configuration file. :param\
          \ args: Command line argument\n                        options.\n    tricks-generate-yaml\
          \ (generate-tricks-yaml)\n                        Subcommand to generate\
          \ Yaml configuration for tricks\n                        named on the command\
          \ line. :param args: Command line\n                        argument options.\n\
          \    log                 Subcommand to log file system events to the console.\n\
          \                        :param args: Command line argument options.\n \
          \   shell-command       Subcommand to execute shell commands in response\
          \ to\n                        file system events. :param args: Command line\
          \ argument\n                        options.\n    auto-restart        Subcommand\
          \ to start a long-running subprocess and\n                        restart\
          \ it on matched events. :param args: Command\n                        line\
          \ argument options.\n\noptional arguments:\n  -h, --help            show\
          \ this help message and exit\n  --version             show program's version\
          \ number and exit\n\nCopyright 2011 Yesudeep Mangalapilly <yesudeep@gmail.com>.\n\
          Copyright 2012 Google, Inc.\n\nLicensed under the terms of the Apache license,\
          \ version 2.0. Please see\nLICENSE in the source code for more information.\n"
        generated_using: *id004
        docker_image:
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        - --help
        description: show this help message and exit
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag:
      help_text: "usage: watchmedo shell-command [-h] [-c COMMAND] [-p PATTERNS]\n\
        \                               [-i IGNORE_PATTERNS] [-D] [-R]\n         \
        \                      [--interval TIMEOUT] [-w] [-W]\n                  \
        \             [directories [directories ...]]\n\n    Subcommand to execute\
        \ shell commands in response to file system events.\n\n    :param args:\n\
        \        Command line argument options.\n    \n\npositional arguments:\n \
        \ directories           directories to watch (default: '.')\n\noptional arguments:\n\
        \  -h, --help            show this help message and exit\n  -c COMMAND, --command\
        \ COMMAND\n                        shell command executed in response to matching\
        \ events.\n                        These interpolation variables are available\
        \ to your\n                        command string:: ${watch_src_path} - event\
        \ source\n                        path; ${watch_dest_path} - event destination\
        \ path (for\n                        moved events); ${watch_event_type} -\
        \ event type;\n                        ${watch_object} - ``file`` or ``directory``\
        \ Note::\n                        Please ensure you do not use double quotes\
        \ (\") to\n                        quote your command string. That will force\
        \ your shell\n                        to interpolate before the command is\
        \ processed by this\n                        subcommand. Example option usage::\
        \ --command='echo\n                        \"${watch_src_path}\"' (default:\
        \ -)\n  -p PATTERNS, --pattern PATTERNS, --patterns PATTERNS\n           \
        \             matches event paths with these patterns (separated by\n    \
        \                    ;). (default: '*')\n  -i IGNORE_PATTERNS, --ignore-pattern\
        \ IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n                   \
        \     ignores event paths with these patterns (separated by\n            \
        \            ;). (default: '')\n  -D, --ignore-directories\n             \
        \           ignores events for directories (default: False)\n  -R, --recursive\
        \       monitors the directories recursively (default: False)\n  --interval\
        \ TIMEOUT, --timeout TIMEOUT\n                        use this as the polling\
        \ interval/blocking timeout\n                        (default: 1.0)\n  -w,\
        \ --wait            wait for process to finish to avoid multiple\n       \
        \                 simultaneous instances (default: False)\n  -W, --drop  \
        \          Ignore events that occur while command is still being\n       \
        \                 executed to avoid multiple simultaneous instances\n    \
        \                    (default: False)\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id005
      positional:
      - !Positional
        optional: false
        position: 0
        name: directories
        description: "directories to watch. (default: '.')"
      named:
      - !Flag
        optional: true
        synonyms:
        - -p
        - --pattern
        - --patterns
        description: "matches event paths with these patterns (separated by\n;). (default:\
          \ '*')"
        args: !SimpleFlagArg
          name: PATTERNS
      - !Flag
        optional: true
        synonyms:
        - -i
        - --ignore-pattern
        - --ignore-patterns
        description: "ignores event paths with these patterns (separated by\n;). (default:\
          \ '')"
        args: !SimpleFlagArg
          name: IGNORE_PATTERNS
      - !Flag
        optional: true
        synonyms:
        - -D
        - --ignore-directories
        description: 'ignores events for directories (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -R
        - --recursive
        description: 'monitors the directories recursively (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - --interval
        - --timeout
        description: "use this as the polling interval/blocking timeout\n(default:\
          \ 1.0)"
        args: !SimpleFlagArg
          name: TIMEOUT
      - !Flag
        optional: true
        synonyms:
        - --trace
        description: 'dumps complete dispatching trace (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - --debug-force-polling
        description: '[debug] forces polling (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - --debug-force-kqueue
        description: '[debug] forces BSD kqueue(2) (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - --debug-force-winapi
        description: '[debug] forces Windows API (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - --debug-force-winapi-async
        description: "[debug] forces Windows API + I/O completion (default:\nFalse)"
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - --debug-force-fsevents
        description: '[debug] forces Mac OS X FSEvents (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - --debug-force-inotify
        description: "[debug] forces Linux inotify(7) (default: False)\n"
        args: !EmptyFlagArg {}
      parent: *id010
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        - --help
        description: show this help message and exit
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag:
      help_text: "usage: watchmedo log [-h] [-p PATTERNS] [-i IGNORE_PATTERNS] [-D]\
        \ [-R]\n                     [--interval TIMEOUT] [--trace] [--debug-force-polling]\n\
        \                     [--debug-force-kqueue] [--debug-force-winapi]\n    \
        \                 [--debug-force-winapi-async] [--debug-force-fsevents]\n\
        \                     [--debug-force-inotify]\n                     [directories\
        \ [directories ...]]\n\n    Subcommand to log file system events to the console.\n\
        \n    :param args:\n        Command line argument options.\n    \n\npositional\
        \ arguments:\n  directories           directories to watch. (default: '.')\n\
        \noptional arguments:\n  -h, --help            show this help message and\
        \ exit\n  -p PATTERNS, --pattern PATTERNS, --patterns PATTERNS\n         \
        \               matches event paths with these patterns (separated by\n  \
        \                      ;). (default: '*')\n  -i IGNORE_PATTERNS, --ignore-pattern\
        \ IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n                   \
        \     ignores event paths with these patterns (separated by\n            \
        \            ;). (default: '')\n  -D, --ignore-directories\n             \
        \           ignores events for directories (default: False)\n  -R, --recursive\
        \       monitors the directories recursively (default: False)\n  --interval\
        \ TIMEOUT, --timeout TIMEOUT\n                        use this as the polling\
        \ interval/blocking timeout\n                        (default: 1.0)\n  --trace\
        \               dumps complete dispatching trace (default: False)\n  --debug-force-polling\n\
        \                        [debug] forces polling (default: False)\n  --debug-force-kqueue\
        \  [debug] forces BSD kqueue(2) (default: False)\n  --debug-force-winapi \
        \ [debug] forces Windows API (default: False)\n  --debug-force-winapi-async\n\
        \                        [debug] forces Windows API + I/O completion (default:\n\
        \                        False)\n  --debug-force-fsevents\n              \
        \          [debug] forces Mac OS X FSEvents (default: False)\n  --debug-force-inotify\n\
        \                        [debug] forces Linux inotify(7) (default: False)\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id006
      positional:
      - !Positional
        optional: false
        position: 0
        name: watchmedo
        description: ''
      named: []
      parent: *id010
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        description: ''
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag: !Flag
        optional: true
        synonyms:
        - --version
        description: ''
        args: !EmptyFlagArg {}
      help_text: "usage: watchmedo [-h] [--version]\n                 {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
        \                 ...\nwatchmedo: error: invalid choice: 'options.' (choose\
        \ from 'tricks-from', 'tricks', 'tricks-generate-yaml', 'generate-tricks-yaml',\
        \ 'log', 'shell-command', 'auto-restart')\n"
      generated_using: *id004
      docker_image:
    - !Command
      command: *id007
      positional:
      - !Positional
        optional: false
        position: 0
        name: command
        description: Long-running command to run in a subprocess.
      - !Positional
        optional: false
        position: 1
        name: arg
        description: "Command arguments. Note: Use -- before the command\narguments,\
          \ otherwise watchmedo will try to interpret\nthem. (default: -)"
      named:
      - !Flag
        optional: true
        synonyms:
        - -d
        - --directory
        description: "Directory to watch. Use another -d or --directory\noption for\
          \ each directory. (default: -)"
        args: !SimpleFlagArg
          name: directory
      - !Flag
        optional: true
        synonyms:
        - -p
        - --pattern
        - --patterns
        description: "matches event paths with these patterns (separated by\n;). (default:\
          \ '*')"
        args: !SimpleFlagArg
          name: PATTERNS
      - !Flag
        optional: true
        synonyms:
        - -i
        - --ignore-pattern
        - --ignore-patterns
        description: "ignores event paths with these patterns (separated by\n;). (default:\
          \ '')"
        args: !SimpleFlagArg
          name: IGNORE_PATTERNS
      - !Flag
        optional: true
        synonyms:
        - -D
        - --ignore-directories
        description: 'ignores events for directories (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - -R
        - --recursive
        description: 'monitors the directories recursively (default: False)'
        args: !EmptyFlagArg {}
      - !Flag
        optional: true
        synonyms:
        - --interval
        - --timeout
        description: "use this as the polling interval/blocking timeout\n(default:\
          \ 1.0)"
        args: !SimpleFlagArg
          name: TIMEOUT
      - !Flag
        optional: true
        synonyms:
        - --signal
        description: "stop the subprocess with this signal (default SIGINT)\n(default:\
          \ 'SIGINT')"
        args: !SimpleFlagArg
          name: SIGNAL
      - !Flag
        optional: true
        synonyms:
        - --kill-after
        description: "when stopping, kill the subprocess after the specified\ntimeout\
          \ (default 10) (default: 10.0)\n"
        args: !SimpleFlagArg
          name: KILL_AFTER
      parent: *id010
      subcommands: []
      usage: []
      help_flag: !Flag
        optional: true
        synonyms:
        - -h
        - --help
        description: show this help message and exit
        args: !EmptyFlagArg {}
      usage_flag:
      version_flag:
      help_text: "usage: watchmedo auto-restart [-h] [-d directory] [-p PATTERNS]\n\
        \                              [-i IGNORE_PATTERNS] [-D] [-R]\n          \
        \                    [--interval TIMEOUT] [--signal SIGNAL]\n            \
        \                  [--kill-after KILL_AFTER]\n                           \
        \   command [arg [arg ...]]\n\n    Subcommand to start a long-running subprocess\
        \ and restart it\n    on matched events.\n\n    :param args:\n        Command\
        \ line argument options.\n    \n\npositional arguments:\n  command       \
        \        Long-running command to run in a subprocess.\n  arg             \
        \      Command arguments. Note: Use -- before the command\n              \
        \          arguments, otherwise watchmedo will try to interpret\n        \
        \                them. (default: -)\n\noptional arguments:\n  -h, --help \
        \           show this help message and exit\n  -d directory, --directory directory\n\
        \                        Directory to watch. Use another -d or --directory\n\
        \                        option for each directory. (default: -)\n  -p PATTERNS,\
        \ --pattern PATTERNS, --patterns PATTERNS\n                        matches\
        \ event paths with these patterns (separated by\n                        ;).\
        \ (default: '*')\n  -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS,\
        \ --ignore-patterns IGNORE_PATTERNS\n                        ignores event\
        \ paths with these patterns (separated by\n                        ;). (default:\
        \ '')\n  -D, --ignore-directories\n                        ignores events\
        \ for directories (default: False)\n  -R, --recursive       monitors the directories\
        \ recursively (default: False)\n  --interval TIMEOUT, --timeout TIMEOUT\n\
        \                        use this as the polling interval/blocking timeout\n\
        \                        (default: 1.0)\n  --signal SIGNAL       stop the\
        \ subprocess with this signal (default SIGINT)\n                        (default:\
        \ 'SIGINT')\n  --kill-after KILL_AFTER\n                        when stopping,\
        \ kill the subprocess after the specified\n                        timeout\
        \ (default 10) (default: 10.0)\n"
      generated_using: *id004
      docker_image:
    usage: []
    help_flag:
    usage_flag:
    version_flag:
    help_text: "usage: watchmedo [-h] [--version]\n                 {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
      \                 ...\n\npositional arguments:\n  {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
      \    tricks-from (tricks)\n                        Subcommand to execute tricks\
      \ from a tricks\n                        configuration file. :param args: Command\
      \ line argument\n                        options.\n    tricks-generate-yaml\
      \ (generate-tricks-yaml)\n                        Subcommand to generate Yaml\
      \ configuration for tricks\n                        named on the command line.\
      \ :param args: Command line\n                        argument options.\n   \
      \ log                 Subcommand to log file system events to the console.\n\
      \                        :param args: Command line argument options.\n    shell-command\
      \       Subcommand to execute shell commands in response to\n              \
      \          file system events. :param args: Command line argument\n        \
      \                options.\n    auto-restart        Subcommand to start a long-running\
      \ subprocess and\n                        restart it on matched events. :param\
      \ args: Command\n                        line argument options.\n\noptional\
      \ arguments:\n  -h, --help            show this help message and exit\n  --version\
      \             show program's version number and exit\n\nCopyright 2011 Yesudeep\
      \ Mangalapilly <yesudeep@gmail.com>.\nCopyright 2012 Google, Inc.\n\nLicensed\
      \ under the terms of the Apache license, version 2.0. Please see\nLICENSE in\
      \ the source code for more information.\n"
    generated_using: *id004
    docker_image:
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: watchmedo shell-command [-h] [-c COMMAND] [-p PATTERNS]\n   \
    \                            [-i IGNORE_PATTERNS] [-D] [-R]\n                \
    \               [--interval TIMEOUT] [-w] [-W]\n                             \
    \  [directories [directories ...]]\n\n    Subcommand to execute shell commands\
    \ in response to file system events.\n\n    :param args:\n        Command line\
    \ argument options.\n    \n\npositional arguments:\n  directories           directories\
    \ to watch (default: '.')\n\noptional arguments:\n  -h, --help            show\
    \ this help message and exit\n  -c COMMAND, --command COMMAND\n              \
    \          shell command executed in response to matching events.\n          \
    \              These interpolation variables are available to your\n         \
    \               command string:: ${watch_src_path} - event source\n          \
    \              path; ${watch_dest_path} - event destination path (for\n      \
    \                  moved events); ${watch_event_type} - event type;\n        \
    \                ${watch_object} - ``file`` or ``directory`` Note::\n        \
    \                Please ensure you do not use double quotes (\") to\n        \
    \                quote your command string. That will force your shell\n     \
    \                   to interpolate before the command is processed by this\n \
    \                       subcommand. Example option usage:: --command='echo\n \
    \                       \"${watch_src_path}\"' (default: -)\n  -p PATTERNS, --pattern\
    \ PATTERNS, --patterns PATTERNS\n                        matches event paths with\
    \ these patterns (separated by\n                        ;). (default: '*')\n \
    \ -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n\
    \                        ignores event paths with these patterns (separated by\n\
    \                        ;). (default: '')\n  -D, --ignore-directories\n     \
    \                   ignores events for directories (default: False)\n  -R, --recursive\
    \       monitors the directories recursively (default: False)\n  --interval TIMEOUT,\
    \ --timeout TIMEOUT\n                        use this as the polling interval/blocking\
    \ timeout\n                        (default: 1.0)\n  -w, --wait            wait\
    \ for process to finish to avoid multiple\n                        simultaneous\
    \ instances (default: False)\n  -W, --drop            Ignore events that occur\
    \ while command is still being\n                        executed to avoid multiple\
    \ simultaneous instances\n                        (default: False)\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id005
  positional:
  - !Positional
    optional: false
    position: 0
    name: directories
    description: "directories to watch. (default: '.')"
  named:
  - !Flag
    optional: true
    synonyms:
    - -p
    - --pattern
    - --patterns
    description: "matches event paths with these patterns (separated by\n;). (default:\
      \ '*')"
    args: !SimpleFlagArg
      name: PATTERNS
  - !Flag
    optional: true
    synonyms:
    - -i
    - --ignore-pattern
    - --ignore-patterns
    description: "ignores event paths with these patterns (separated by\n;). (default:\
      \ '')"
    args: !SimpleFlagArg
      name: IGNORE_PATTERNS
  - !Flag
    optional: true
    synonyms:
    - -D
    - --ignore-directories
    description: 'ignores events for directories (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -R
    - --recursive
    description: 'monitors the directories recursively (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --interval
    - --timeout
    description: "use this as the polling interval/blocking timeout\n(default: 1.0)"
    args: !SimpleFlagArg
      name: TIMEOUT
  - !Flag
    optional: true
    synonyms:
    - --trace
    description: 'dumps complete dispatching trace (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --debug-force-polling
    description: '[debug] forces polling (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --debug-force-kqueue
    description: '[debug] forces BSD kqueue(2) (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --debug-force-winapi
    description: '[debug] forces Windows API (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --debug-force-winapi-async
    description: "[debug] forces Windows API + I/O completion (default:\nFalse)"
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --debug-force-fsevents
    description: '[debug] forces Mac OS X FSEvents (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --debug-force-inotify
    description: "[debug] forces Linux inotify(7) (default: False)\n"
    args: !EmptyFlagArg {}
  parent: *id011
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: watchmedo log [-h] [-p PATTERNS] [-i IGNORE_PATTERNS] [-D] [-R]\n\
    \                     [--interval TIMEOUT] [--trace] [--debug-force-polling]\n\
    \                     [--debug-force-kqueue] [--debug-force-winapi]\n        \
    \             [--debug-force-winapi-async] [--debug-force-fsevents]\n        \
    \             [--debug-force-inotify]\n                     [directories [directories\
    \ ...]]\n\n    Subcommand to log file system events to the console.\n\n    :param\
    \ args:\n        Command line argument options.\n    \n\npositional arguments:\n\
    \  directories           directories to watch. (default: '.')\n\noptional arguments:\n\
    \  -h, --help            show this help message and exit\n  -p PATTERNS, --pattern\
    \ PATTERNS, --patterns PATTERNS\n                        matches event paths with\
    \ these patterns (separated by\n                        ;). (default: '*')\n \
    \ -i IGNORE_PATTERNS, --ignore-pattern IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n\
    \                        ignores event paths with these patterns (separated by\n\
    \                        ;). (default: '')\n  -D, --ignore-directories\n     \
    \                   ignores events for directories (default: False)\n  -R, --recursive\
    \       monitors the directories recursively (default: False)\n  --interval TIMEOUT,\
    \ --timeout TIMEOUT\n                        use this as the polling interval/blocking\
    \ timeout\n                        (default: 1.0)\n  --trace               dumps\
    \ complete dispatching trace (default: False)\n  --debug-force-polling\n     \
    \                   [debug] forces polling (default: False)\n  --debug-force-kqueue\
    \  [debug] forces BSD kqueue(2) (default: False)\n  --debug-force-winapi  [debug]\
    \ forces Windows API (default: False)\n  --debug-force-winapi-async\n        \
    \                [debug] forces Windows API + I/O completion (default:\n     \
    \                   False)\n  --debug-force-fsevents\n                       \
    \ [debug] forces Mac OS X FSEvents (default: False)\n  --debug-force-inotify\n\
    \                        [debug] forces Linux inotify(7) (default: False)\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id006
  positional:
  - !Positional
    optional: false
    position: 0
    name: watchmedo
    description: ''
  named: []
  parent: *id011
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    description: ''
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag: !Flag
    optional: true
    synonyms:
    - --version
    description: ''
    args: !EmptyFlagArg {}
  help_text: "usage: watchmedo [-h] [--version]\n                 {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
    \                 ...\nwatchmedo: error: invalid choice: 'options.' (choose from\
    \ 'tricks-from', 'tricks', 'tricks-generate-yaml', 'generate-tricks-yaml', 'log',\
    \ 'shell-command', 'auto-restart')\n"
  generated_using: *id004
  docker_image:
- !Command
  command: *id007
  positional:
  - !Positional
    optional: false
    position: 0
    name: command
    description: Long-running command to run in a subprocess.
  - !Positional
    optional: false
    position: 1
    name: arg
    description: "Command arguments. Note: Use -- before the command\narguments, otherwise\
      \ watchmedo will try to interpret\nthem. (default: -)"
  named:
  - !Flag
    optional: true
    synonyms:
    - -d
    - --directory
    description: "Directory to watch. Use another -d or --directory\noption for each\
      \ directory. (default: -)"
    args: !SimpleFlagArg
      name: directory
  - !Flag
    optional: true
    synonyms:
    - -p
    - --pattern
    - --patterns
    description: "matches event paths with these patterns (separated by\n;). (default:\
      \ '*')"
    args: !SimpleFlagArg
      name: PATTERNS
  - !Flag
    optional: true
    synonyms:
    - -i
    - --ignore-pattern
    - --ignore-patterns
    description: "ignores event paths with these patterns (separated by\n;). (default:\
      \ '')"
    args: !SimpleFlagArg
      name: IGNORE_PATTERNS
  - !Flag
    optional: true
    synonyms:
    - -D
    - --ignore-directories
    description: 'ignores events for directories (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - -R
    - --recursive
    description: 'monitors the directories recursively (default: False)'
    args: !EmptyFlagArg {}
  - !Flag
    optional: true
    synonyms:
    - --interval
    - --timeout
    description: "use this as the polling interval/blocking timeout\n(default: 1.0)"
    args: !SimpleFlagArg
      name: TIMEOUT
  - !Flag
    optional: true
    synonyms:
    - --signal
    description: "stop the subprocess with this signal (default SIGINT)\n(default:\
      \ 'SIGINT')"
    args: !SimpleFlagArg
      name: SIGNAL
  - !Flag
    optional: true
    synonyms:
    - --kill-after
    description: "when stopping, kill the subprocess after the specified\ntimeout\
      \ (default 10) (default: 10.0)\n"
    args: !SimpleFlagArg
      name: KILL_AFTER
  parent: *id011
  subcommands: []
  usage: []
  help_flag: !Flag
    optional: true
    synonyms:
    - -h
    - --help
    description: show this help message and exit
    args: !EmptyFlagArg {}
  usage_flag:
  version_flag:
  help_text: "usage: watchmedo auto-restart [-h] [-d directory] [-p PATTERNS]\n  \
    \                            [-i IGNORE_PATTERNS] [-D] [-R]\n                \
    \              [--interval TIMEOUT] [--signal SIGNAL]\n                      \
    \        [--kill-after KILL_AFTER]\n                              command [arg\
    \ [arg ...]]\n\n    Subcommand to start a long-running subprocess and restart\
    \ it\n    on matched events.\n\n    :param args:\n        Command line argument\
    \ options.\n    \n\npositional arguments:\n  command               Long-running\
    \ command to run in a subprocess.\n  arg                   Command arguments.\
    \ Note: Use -- before the command\n                        arguments, otherwise\
    \ watchmedo will try to interpret\n                        them. (default: -)\n\
    \noptional arguments:\n  -h, --help            show this help message and exit\n\
    \  -d directory, --directory directory\n                        Directory to watch.\
    \ Use another -d or --directory\n                        option for each directory.\
    \ (default: -)\n  -p PATTERNS, --pattern PATTERNS, --patterns PATTERNS\n     \
    \                   matches event paths with these patterns (separated by\n  \
    \                      ;). (default: '*')\n  -i IGNORE_PATTERNS, --ignore-pattern\
    \ IGNORE_PATTERNS, --ignore-patterns IGNORE_PATTERNS\n                       \
    \ ignores event paths with these patterns (separated by\n                    \
    \    ;). (default: '')\n  -D, --ignore-directories\n                        ignores\
    \ events for directories (default: False)\n  -R, --recursive       monitors the\
    \ directories recursively (default: False)\n  --interval TIMEOUT, --timeout TIMEOUT\n\
    \                        use this as the polling interval/blocking timeout\n \
    \                       (default: 1.0)\n  --signal SIGNAL       stop the subprocess\
    \ with this signal (default SIGINT)\n                        (default: 'SIGINT')\n\
    \  --kill-after KILL_AFTER\n                        when stopping, kill the subprocess\
    \ after the specified\n                        timeout (default 10) (default:\
    \ 10.0)\n"
  generated_using: *id004
  docker_image:
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "usage: watchmedo [-h] [--version]\n                 {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
  \                 ...\n\npositional arguments:\n  {tricks-from,tricks,tricks-generate-yaml,generate-tricks-yaml,log,shell-command,auto-restart}\n\
  \    tricks-from (tricks)\n                        Subcommand to execute tricks\
  \ from a tricks\n                        configuration file. :param args: Command\
  \ line argument\n                        options.\n    tricks-generate-yaml (generate-tricks-yaml)\n\
  \                        Subcommand to generate Yaml configuration for tricks\n\
  \                        named on the command line. :param args: Command line\n\
  \                        argument options.\n    log                 Subcommand to\
  \ log file system events to the console.\n                        :param args: Command\
  \ line argument options.\n    shell-command       Subcommand to execute shell commands\
  \ in response to\n                        file system events. :param args: Command\
  \ line argument\n                        options.\n    auto-restart        Subcommand\
  \ to start a long-running subprocess and\n                        restart it on\
  \ matched events. :param args: Command\n                        line argument options.\n\
  \noptional arguments:\n  -h, --help            show this help message and exit\n\
  \  --version             show program's version number and exit\n\nCopyright 2011\
  \ Yesudeep Mangalapilly <yesudeep@gmail.com>.\nCopyright 2012 Google, Inc.\n\nLicensed\
  \ under the terms of the Apache license, version 2.0. Please see\nLICENSE in the\
  \ source code for more information.\n"
generated_using: *id004
docker_image:
