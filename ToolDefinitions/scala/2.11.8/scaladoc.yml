!Command
command:
- scaladoc
positional:
- !Positional
  optional: false
  position: 0
  name: options
  description: ''
- !Positional
  optional: false
  position: 1
  name: source files
  description: ''
named:
- !Flag
  optional: true
  synonyms:
  - -author
  description: Include authors.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -diagrams
  description: Create inheritance diagrams for classes, traits and packages.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -diagrams-dot-path
  description: 'The path to the dot executable used to generate the inheritance diagrams.
    Eg: /usr/bin/dot'
  args: !SimpleFlagArg
    name: path
- !Flag
  optional: true
  synonyms:
  - -diagrams-dot-restart
  description: 'The number of times to restart a malfunctioning dot process before
    disabling diagrams (default: 5)'
  args: !SimpleFlagArg
    name: n
- !Flag
  optional: true
  synonyms:
  - -diagrams-dot-timeout
  description: 'The timeout before the graphviz dot util is forcefully closed, in
    seconds (default: 10)'
  args: !SimpleFlagArg
    name: n
- !Flag
  optional: true
  synonyms:
  - -diagrams-max-classes
  description: The maximum number of superclasses or subclasses to show in a diagram
  args: !SimpleFlagArg
    name: n
- !Flag
  optional: true
  synonyms:
  - -diagrams-max-implicits
  description: The maximum number of implicitly converted classes to show in a diagram
  args: !SimpleFlagArg
    name: n
- !Flag
  optional: true
  synonyms:
  - -doc-external-doc
  description: :<external-doc>            comma-separated list of classpath_entry_path#doc_URL
    pairs describing external dependencies.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -doc-footer
  description: A footer on every Scaladoc page, by default the EPFL/Lightbend copyright
    notice. Can be overridden with a custom footer.
  args: !SimpleFlagArg
    name: footer
- !Flag
  optional: true
  synonyms:
  - -doc-format
  description: :<format>                        Selects in which format documentation
    is rendered (html) default:html
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -doc-generator
  description: The fully qualified name of a doclet class, which will be used to generate
    the documentation
  args: !SimpleFlagArg
    name: class-name
- !Flag
  optional: true
  synonyms:
  - -doc-no-compile
  description: A directory containing sources which should be parsed, no more (e.g.
    AnyRef.scala)
  args: !SimpleFlagArg
    name: path
- !Flag
  optional: true
  synonyms:
  - -doc-root-content
  description: The file from which the root package documentation should be imported.
  args: !SimpleFlagArg
    name: path
- !Flag
  optional: true
  synonyms:
  - -doc-source-url
  description: 'A URL pattern used to link to the source file; the following variables
    are available: ?{TPL_NAME}, ?{TPL_OWNER} and respectively ?{FILE_PATH}. For example,
    for `scala.collection.Seq`, the variables will be expanded to `Seq`, `scala.collection`
    and respectively `scala/collection/Seq` (without the backquotes). To obtain a
    relative path for ?{FILE_PATH} instead of an absolute one, use the -sourcepath
    setting.'
  args: !SimpleFlagArg
    name: url
- !Flag
  optional: true
  synonyms:
  - -doc-title
  description: The overall name of the Scaladoc site
  args: !SimpleFlagArg
    name: title
- !Flag
  optional: true
  synonyms:
  - -doc-version
  description: An optional version number, to be appended to the title
  args: !SimpleFlagArg
    name: version
- !Flag
  optional: true
  synonyms:
  - -expand-all-types
  description: Expand all type aliases and abstract types into full template pages.
    (locally this can be done with the @template annotation)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -groups
  description: Group similar functions together (based on the @group annotation)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -implicits
  description: Document members inherited by implicit conversions.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -implicits-hide
  description: :<implicit(s)>               Hide the members inherited by the given
    comma separated, fully qualified implicit conversions. Add dot (.) to include
    default conversions.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -implicits-show-all
  description: Show members inherited by implicit conversions that are impossible
    in the default scope. (for example conversions that require Numeric[String] to
    be in scope)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -implicits-sound-shadowing
  description: "Use a sound implicit shadowing calculation. Note: this interacts badly\
    \ with usecases, so only use it if you haven't defined usecase for implicitly\
    \ inherited members."
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -no-link-warnings
  description: Avoid warnings for ambiguous and incorrect links.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -no-prefixes
  description: Prevents generating prefixes in types, possibly creating ambiguous
    references, but significantly speeding up scaladoc.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -raw-output
  description: For each html file, create another .html.raw file containing only the
    text. (can be used for quickly diffing two scaladoc outputs)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -skip-packages
  description: <<package1>:...:<packageN>>  A colon-delimited list of fully qualified
    package names that will be skipped from scaladoc.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -diagrams-debug
  description: Show debugging information for the diagram creation process.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -implicits-debug
  description: Show debugging information for members inherited by implicit conversions.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -Dproperty
  description: Pass -Dproperty=value directly to the runtime system.
  args: !SimpleFlagArg
    name: value
- !Flag
  optional: true
  synonyms:
  - -J
  description: <flag>                        Pass <flag> directly to the runtime system.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -P
  description: :<plugin>:<opt>               Pass an option to a plugin
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -X
  description: Print a synopsis of advanced options.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -bootclasspath
  description: Override location of bootstrap class files.
  args: !SimpleFlagArg
    name: path
- !Flag
  optional: true
  synonyms:
  - -classpath
  description: Specify where to find user class files.
  args: !SimpleFlagArg
    name: path
- !Flag
  optional: true
  synonyms:
  - -d
  description: destination for generated classfiles.
  args: !SimpleFlagArg
    name: directory|jar
- !Flag
  optional: true
  synonyms:
  - -dependencyfile
  description: Set dependency tracking file.
  args: !SimpleFlagArg
    name: file
- !Flag
  optional: true
  synonyms:
  - -deprecation
  description: Emit warning and location for usages of deprecated APIs.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -encoding
  description: Specify character encoding used by source files.
  args: !SimpleFlagArg
    name: encoding
- !Flag
  optional: true
  synonyms:
  - -explaintypes
  description: Explain type errors in more detail.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -extdirs
  description: Override location of installed extensions.
  args: !SimpleFlagArg
    name: path
- !Flag
  optional: true
  synonyms:
  - -feature
  description: Emit warning and location for usages of features that should be imported
    explicitly.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -g
  description: :<level>                      Set level of generated debugging info.
    (none,source,line,vars,notailcalls) default:vars
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -javabootclasspath
  description: Override java boot classpath.
  args: !SimpleFlagArg
    name: path
- !Flag
  optional: true
  synonyms:
  - -javaextdirs
  description: Override java extdirs classpath.
  args: !SimpleFlagArg
    name: path
- !Flag
  optional: true
  synonyms:
  - -language
  description: ":<_,feature,-feature>  Enable or disable language features: `_' for\
    \ all, `-language:help' to list"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -no-specialization
  description: Ignore @specialize annotations.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -nobootcp
  description: Do not use the boot classpath for the scala jars.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -nowarn
  description: Generate no warnings.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -optimise
  description: Generates faster bytecode by applying optimisations to the program
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -print
  description: Print program with Scala-specific features removed.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -sourcepath
  description: Specify location(s) of source files.
  args: !SimpleFlagArg
    name: path
- !Flag
  optional: true
  synonyms:
  - -target
  description: :<target>                Target platform for object files. All JVM
    1.5 targets are deprecated. (jvm-1.5,jvm-1.6,jvm-1.7,jvm-1.8) default:jvm-1.6
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -toolcp
  description: Add to the runner classpath.
  args: !SimpleFlagArg
    name: path
- !Flag
  optional: true
  synonyms:
  - -unchecked
  description: Enable additional warnings where generated code depends on assumptions.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -uniqid
  description: Uniquely tag all identifiers in debugging output.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -usejavacp
  description: Utilize the java.class.path in classpath resolution.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -usemanifestcp
  description: Utilize the manifest in classpath resolution.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -verbose
  description: Output messages about what the compiler is doing.
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -version
  description: Print product version and exit.
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -help
  description: Print a synopsis of standard options
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "Usage: scaladoc <options> <source files>\nwhere possible scaladoc options\
  \ include:\n  -author                                     Include authors.\n  -diagrams\
  \                                   Create inheritance diagrams for classes, traits\
  \ and packages.\n  -diagrams-dot-path <path>                   The path to the dot\
  \ executable used to generate the inheritance diagrams. Eg: /usr/bin/dot\n  -diagrams-dot-restart\
  \ <n>                   The number of times to restart a malfunctioning dot process\
  \ before disabling diagrams (default: 5)\n  -diagrams-dot-timeout <n>          \
  \         The timeout before the graphviz dot util is forcefully closed, in seconds\
  \ (default: 10)\n  -diagrams-max-classes <n>                   The maximum number\
  \ of superclasses or subclasses to show in a diagram\n  -diagrams-max-implicits\
  \ <n>                 The maximum number of implicitly converted classes to show\
  \ in a diagram\n  -doc-external-doc:<external-doc>            comma-separated list\
  \ of classpath_entry_path#doc_URL pairs describing external dependencies.\n  -doc-footer\
  \ <footer>                        A footer on every Scaladoc page, by default the\
  \ EPFL/Lightbend copyright notice. Can be overridden with a custom footer.\n  -doc-format:<format>\
  \                        Selects in which format documentation is rendered (html)\
  \ default:html\n  -doc-generator <class-name>                 The fully qualified\
  \ name of a doclet class, which will be used to generate the documentation\n  -doc-no-compile\
  \ <path>                      A directory containing sources which should be parsed,\
  \ no more (e.g. AnyRef.scala)\n  -doc-root-content <path>                    The\
  \ file from which the root package documentation should be imported.\n  -doc-source-url\
  \ <url>                       A URL pattern used to link to the source file; the\
  \ following variables are available: ?{TPL_NAME}, ?{TPL_OWNER} and respectively\
  \ ?{FILE_PATH}. For example, for `scala.collection.Seq`, the variables will be expanded\
  \ to `Seq`, `scala.collection` and respectively `scala/collection/Seq` (without\
  \ the backquotes). To obtain a relative path for ?{FILE_PATH} instead of an absolute\
  \ one, use the -sourcepath setting.\n  -doc-title <title>                      \
  \    The overall name of the Scaladoc site\n  -doc-version <version>           \
  \           An optional version number, to be appended to the title\n  -expand-all-types\
  \                           Expand all type aliases and abstract types into full\
  \ template pages. (locally this can be done with the @template annotation)\n  -groups\
  \                                     Group similar functions together (based on\
  \ the @group annotation)\n  -implicits                                  Document\
  \ members inherited by implicit conversions.\n  -implicits-hide:<implicit(s)>  \
  \             Hide the members inherited by the given comma separated, fully qualified\
  \ implicit conversions. Add dot (.) to include default conversions.\n  -implicits-show-all\
  \                         Show members inherited by implicit conversions that are\
  \ impossible in the default scope. (for example conversions that require Numeric[String]\
  \ to be in scope)\n  -implicits-sound-shadowing                  Use a sound implicit\
  \ shadowing calculation. Note: this interacts badly with usecases, so only use it\
  \ if you haven't defined usecase for implicitly inherited members.\n  -no-link-warnings\
  \                           Avoid warnings for ambiguous and incorrect links.\n\
  \  -no-prefixes                                Prevents generating prefixes in types,\
  \ possibly creating ambiguous references, but significantly speeding up scaladoc.\n\
  \  -raw-output                                 For each html file, create another\
  \ .html.raw file containing only the text. (can be used for quickly diffing two\
  \ scaladoc outputs)\n  -skip-packages <<package1>:...:<packageN>>  A colon-delimited\
  \ list of fully qualified package names that will be skipped from scaladoc.\n\n\
  Additional debug settings:\n  -diagrams-debug                             Show debugging\
  \ information for the diagram creation process.\n  -implicits-debug            \
  \                Show debugging information for members inherited by implicit conversions.\n\
  \nStandard scalac options also available:\n  -Dproperty=value                Pass\
  \ -Dproperty=value directly to the runtime system.\n  -J<flag>                 \
  \       Pass <flag> directly to the runtime system.\n  -P:<plugin>:<opt>       \
  \        Pass an option to a plugin\n  -X                              Print a synopsis\
  \ of advanced options.\n  -bootclasspath <path>           Override location of bootstrap\
  \ class files.\n  -classpath <path>               Specify where to find user class\
  \ files.\n  -d <directory|jar>              destination for generated classfiles.\n\
  \  -dependencyfile <file>          Set dependency tracking file.\n  -deprecation\
  \                    Emit warning and location for usages of deprecated APIs.\n\
  \  -encoding <encoding>            Specify character encoding used by source files.\n\
  \  -explaintypes                   Explain type errors in more detail.\n  -extdirs\
  \ <path>                 Override location of installed extensions.\n  -feature\
  \                        Emit warning and location for usages of features that should\
  \ be imported explicitly.\n  -g:<level>                      Set level of generated\
  \ debugging info. (none,source,line,vars,notailcalls) default:vars\n  -help    \
  \                       Print a synopsis of standard options\n  -javabootclasspath\
  \ <path>       Override java boot classpath.\n  -javaextdirs <path>            \
  \ Override java extdirs classpath.\n  -language:<_,feature,-feature>  Enable or\
  \ disable language features: `_' for all, `-language:help' to list\n  -no-specialization\
  \              Ignore @specialize annotations.\n  -nobootcp                    \
  \   Do not use the boot classpath for the scala jars.\n  -nowarn               \
  \          Generate no warnings.\n  -optimise                       Generates faster\
  \ bytecode by applying optimisations to the program\n  -print                  \
  \        Print program with Scala-specific features removed.\n  -sourcepath <path>\
  \              Specify location(s) of source files.\n  -target:<target>        \
  \        Target platform for object files. All JVM 1.5 targets are deprecated. (jvm-1.5,jvm-1.6,jvm-1.7,jvm-1.8)\
  \ default:jvm-1.6\n  -toolcp <path>                  Add to the runner classpath.\n\
  \  -unchecked                      Enable additional warnings where generated code\
  \ depends on assumptions.\n  -uniqid                         Uniquely tag all identifiers\
  \ in debugging output.\n  -usejavacp                      Utilize the java.class.path\
  \ in classpath resolution.\n  -usemanifestcp                  Utilize the manifest\
  \ in classpath resolution.\n  -verbose                        Output messages about\
  \ what the compiler is doing.\n  -version                        Print product version\
  \ and exit.\n  @<file>                         A text file containing compiler arguments\
  \ (options and source files)\n"
generated_using: []
docker_image:
