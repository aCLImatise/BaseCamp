!Command
command:
- test_haplotypes
positional:
- !Positional
  description: "\e[0;39;49m\e[1;32;49mtest_haplotypes [Boost.Test argument]... \e\
    [0;39;49m\e[1;33;49m[-- [custom test module argument]...]\e[0;39;49m"
  position: 0
  name: Usage
  optional: false
- !Positional
  description: "\e[1;32;49mtest_haplotypes --help\e[0;39;49m"
  position: 1
  name: Use
  optional: false
- !Positional
  description: "\e[1;32;49mtest_haplotypes --help=<parameter name>\e[0;39;49m"
  position: 2
  name: or
  optional: false
named:
- !Flag
  description: "\e[1;33;49m[=<boolean value>]"
  synonyms:
  - --auto_start_dbg
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m[=<boolean value>]"
  synonyms:
  - --build_info
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m[=<alloc order number>]"
  synonyms:
  - --detect_memory_leaks
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m[=<HRF|DOT>]"
  synonyms:
  - --list_content
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m[=<boolean value>]"
  synonyms:
  - --list_labels
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m=<all|success|test_suite|unit_scope|message|warning|error|cpp_exception|system_error|fatal_error|nothing>"
  synonyms:
  - --log_level
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m=<stderr|stdout|file name>"
  synonyms:
  - --log_sink
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m=log_format,log_level,log_sink[:log_format,log_level,log_sink]"
  synonyms:
  - --logger
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m=<confirm|short|detailed|no>"
  synonyms:
  - --report_level
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m=<file name>"
  synonyms:
  - --report_memory_leaks_to
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m=<stderr|stdout|file name>"
  synonyms:
  - --report_sink
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m=<test unit filter>"
  synonyms:
  - --run_test
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m[=<boolean value>]"
  synonyms:
  - --save_pattern
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m[=<boolean value>]"
  synonyms:
  - --show_progress
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "\e[1;33;49m[=<boolean value>]"
  synonyms:
  - --wait_for_debugger
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: "\e[1;33;49m[=<parameter name>]"
  synonyms:
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: "\e[1;33;49m[ <boolean value>]"
  synonyms:
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "\n  The program 'test_haplotypes' is a Boost.Test module containing unit\
  \ tests.\e[1;39;49m\n\n  Usage\n    \e[0;39;49m\e[1;32;49mtest_haplotypes [Boost.Test\
  \ argument]... \e[0;39;49m\e[1;33;49m[-- [custom test module argument]...]\e[0;39;49m\n\
  \n  Use\n      \e[1;32;49mtest_haplotypes --help\e[0;39;49m\n  or  \e[1;32;49mtest_haplotypes\
  \ --help=<parameter name>\e[0;39;49m\n  for detailed help on Boost.Test parameters.\n\
  \n\n\e[1;39;49m  Command line flags:\n\e[0;39;49m   The command line flags of Boost.Test\
  \ are listed below. All parameters are\n   optional. You can specify parameter value\
  \ either as a command line argument or\n   as a value of its corresponding environment\
  \ variable. If a flag is specified as\n   a command line argument and an environment\
  \ variable at the same time, the\n   command line takes precedence. The command\
  \ line argument support name guessing,\n   and works with shorter names as long\
  \ as those are not ambiguous.\n\n   All the arguments after the '\e[1;33;49m--\e\
  [0;39;49m' are ignored by Boost.Test.\e[1;39;49m\n\n  Environment variables:\n\e\
  [0;39;49m   Every argument listed below may also be set by a corresponding\n   environmentvariable.\
  \ For an argument '--argument_x=<value>', the corresponding\n   environment variable\
  \ is 'BOOST_TEST_ARGUMENT_X=value\n\n  The following parameters are supported:\n\
  \n  \e[1;32;49mauto_start_dbg\e[0;39;49m\n    Automatically attaches debugger in\
  \ case of system level failure (signal).\n    --auto_start_dbg\e[1;33;49m[=<boolean\
  \ value>]\n\e[0;39;49m    -d\e[1;33;49m[ <boolean value>]\n\e[0;39;49m\n  \e[1;32;49mbreak_exec_path\e\
  [0;39;49m\n    For the exception safety testing allows to break at specific execution\
  \ path.\n    --break_exec_path\e[1;33;49m=<value>\n\e[0;39;49m\n  \e[1;32;49mbuild_info\e\
  [0;39;49m\n    Displays library build information.\n    --build_info\e[1;33;49m[=<boolean\
  \ value>]\n\e[0;39;49m    -i\e[1;33;49m[ <boolean value>]\n\e[0;39;49m\n  \e[1;32;49mcatch_system_errors\e\
  [0;39;49m\n    Allows to switch between catching and ignoring system errors (signals).\n\
  \    --\e[1;33;49m[no_]\e[0;39;49mcatch_system_errors\e[1;33;49m[=<boolean value>]\n\
  \e[0;39;49m    -s\e[1;33;49m[ <boolean value>]\n\e[0;39;49m\n  \e[1;32;49mcolor_output\e\
  [0;39;49m\n    Enables color output of the framework log and report messages.\n\
  \    --\e[1;33;49m[no_]\e[0;39;49mcolor_output\e[1;33;49m[=<boolean value>]\n\e\
  [0;39;49m    -x\e[1;33;49m[ <boolean value>]\n\e[0;39;49m\n  \e[1;32;49mdetect_fp_exceptions\e\
  [0;39;49m\n    Enables/disables floating point exceptions traps.\n    --\e[1;33;49m[no_]\e\
  [0;39;49mdetect_fp_exceptions\e[1;33;49m[=<boolean value>]\n\e[0;39;49m\n  \e[1;32;49mdetect_memory_leaks\e\
  [0;39;49m\n    Turns on/off memory leaks detection (optionally breaking on specified\
  \ alloc\n    order number).\n    --detect_memory_leaks\e[1;33;49m[=<alloc order\
  \ number>]\n\e[0;39;49m\n  \e[1;32;49mhelp\e[0;39;49m\n    Help for framework parameters.\n\
  \    --help\e[1;33;49m[=<parameter name>]\n\e[0;39;49m\n  \e[1;32;49mlist_content\e\
  [0;39;49m\n    Lists the content of test tree - names of all test suites and test\
  \ cases.\n    --list_content\e[1;33;49m[=<HRF|DOT>]\n\e[0;39;49m\n  \e[1;32;49mlist_labels\e\
  [0;39;49m\n    Lists all available labels.\n    --list_labels\e[1;33;49m[=<boolean\
  \ value>]\n\e[0;39;49m\n  \e[1;32;49mlog_format\e[0;39;49m\n    Specifies log format.\n\
  \    --log_format\e[1;33;49m=<HRF|CLF|XML|JUNIT>\n\e[0;39;49m    -f\e[1;33;49m <HRF|CLF|XML|JUNIT>\n\
  \e[0;39;49m\n  \e[1;32;49mlog_level\e[0;39;49m\n    Specifies the logging level\
  \ of the test execution.\n    --log_level\e[1;33;49m=<all|success|test_suite|unit_scope|message|warning|error|cpp_exception|system_error|fatal_error|nothing>\n\
  \e[0;39;49m    -l\e[1;33;49m <all|success|test_suite|unit_scope|message|warning|error|cpp_exception|system_error|fatal_error|nothing>\n\
  \e[0;39;49m\n  \e[1;32;49mlog_sink\e[0;39;49m\n    Specifies log sink: stdout (default),\
  \ stderr or file name.\n    --log_sink\e[1;33;49m=<stderr|stdout|file name>\n\e\
  [0;39;49m    -k\e[1;33;49m <stderr|stdout|file name>\n\e[0;39;49m\n  \e[1;32;49mlogger\e\
  [0;39;49m\n    Specifies log level and sink for one or several log format\n    --logger\e\
  [1;33;49m=log_format,log_level,log_sink[:log_format,log_level,log_sink]\n\e[0;39;49m\n\
  \  \e[1;32;49moutput_format\e[0;39;49m\n    Specifies output format (both log and\
  \ report).\n    --output_format\e[1;33;49m=<HRF|CLF|XML>\n\e[0;39;49m    -o\e[1;33;49m\
  \ <HRF|CLF|XML>\n\e[0;39;49m\n  \e[1;32;49mrandom\e[0;39;49m\n    Allows to switch\
  \ between sequential and random order of test units execution.\n    Optionally allows\
  \ to specify concrete seed for random number generator.\n    --random\e[1;33;49m[=<seed>]\n\
  \e[0;39;49m\n  \e[1;32;49mreport_format\e[0;39;49m\n    Specifies the test report\
  \ format.\n    --report_format\e[1;33;49m=<HRF|CLF|XML>\n\e[0;39;49m    -m\e[1;33;49m\
  \ <HRF|CLF|XML>\n\e[0;39;49m\n  \e[1;32;49mreport_level\e[0;39;49m\n    Specifies\
  \ test report level.\n    --report_level\e[1;33;49m=<confirm|short|detailed|no>\n\
  \e[0;39;49m    -r\e[1;33;49m <confirm|short|detailed|no>\n\e[0;39;49m\n  \e[1;32;49mreport_memory_leaks_to\e\
  [0;39;49m\n    File where to report memory leaks to.\n    --report_memory_leaks_to\e\
  [1;33;49m=<file name>\n\e[0;39;49m\n  \e[1;32;49mreport_sink\e[0;39;49m\n    Specifies\
  \ report sink: stderr(default), stdout or file name.\n    --report_sink\e[1;33;49m=<stderr|stdout|file\
  \ name>\n\e[0;39;49m    -e\e[1;33;49m <stderr|stdout|file name>\n\e[0;39;49m\n \
  \ \e[1;32;49mresult_code\e[0;39;49m\n    Disables test modules's result code generation.\n\
  \    --\e[1;33;49m[no_]\e[0;39;49mresult_code\e[1;33;49m[=<boolean value>]\n\e[0;39;49m\
  \    -c\e[1;33;49m[ <boolean value>]\n\e[0;39;49m\n  \e[1;32;49mrun_test\e[0;39;49m\n\
  \    Filters which tests to execute.\n    --run_test\e[1;33;49m=<test unit filter>\n\
  \e[0;39;49m    -t\e[1;33;49m <test unit filter>\n\e[0;39;49m\n  \e[1;32;49msave_pattern\e\
  [0;39;49m\n    Allows to switch between saving or matching test pattern file.\n\
  \    --save_pattern\e[1;33;49m[=<boolean value>]\n\e[0;39;49m\n  \e[1;32;49mshow_progress\e\
  [0;39;49m\n    Turns on progress display.\n    --show_progress\e[1;33;49m[=<boolean\
  \ value>]\n\e[0;39;49m    -p\e[1;33;49m[ <boolean value>]\n\e[0;39;49m\n  \e[1;32;49musage\e\
  [0;39;49m\n    Short message explaining usage of Boost.Test parameters.\n    -?\e\
  [1;33;49m[ <boolean value>]\n\e[0;39;49m\n  \e[1;32;49muse_alt_stack\e[0;39;49m\n\
  \    Turns on/off usage of an alternative stack for signal handling.\n    --\e[1;33;49m[no_]\e\
  [0;39;49muse_alt_stack\e[1;33;49m[=<boolean value>]\n\e[0;39;49m\n  \e[1;32;49mversion\e\
  [0;39;49m\n    Prints Boost.Test version and exits.\n    --version\e[1;33;49m[ <boolean\
  \ value>]\n\e[0;39;49m\n  \e[1;32;49mwait_for_debugger\e[0;39;49m\n    Forces test\
  \ module to wait for button to be pressed before starting test run.\n    --wait_for_debugger\e\
  [1;33;49m[=<boolean value>]\n\e[0;39;49m    -w\e[1;33;49m[ <boolean value>]\n\e\
  [0;39;49m"
generated_using:
- --help
