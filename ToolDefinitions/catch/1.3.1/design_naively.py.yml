!Command
command:
- design_naively.py
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -pl
  - --probe-length
  description: (Optional) The number of bp in each probe
  args: !SimpleFlagArg
    name: PROBE_LENGTH
- !Flag
  optional: true
  synonyms:
  - -ps
  - --probe-stride
  description: "(Optional) Generate candidate probes from the input\nthat are separated\
    \ by this number of bp"
  args: !SimpleFlagArg
    name: PROBE_STRIDE
- !Flag
  optional: true
  synonyms:
  - -nrf
  description: "NAIVE_REDUNDANT_FILTER, --naive-redundant-filter NAIVE_REDUNDANT_FILTER\
    \ NAIVE_REDUNDANT_FILTER\nArgs: <MISMATCHES> <LCF_THRES>. Use the 'naive\nredundant\
    \ filter' -- i.e., iterate through a list of\nprobes and, for each probe p, remove\
    \ the following\nprobes that are redundant to p. Deem one probe\nredundant to\
    \ another if the longest common substring\nbetween them, up to MISMATCHES mismatches,\
    \ is >=\nLCF_THRES."
  args: !SimpleFlagArg
    name: NAIVE_REDUNDANT_FILTER
- !Flag
  optional: true
  synonyms:
  - -dsf
  description: "DOMINATING_SET_FILTER, --dominating-set-filter DOMINATING_SET_FILTER\
    \ DOMINATING_SET_FILTER\nArgs: <MISMATCHES> <LCF_THRES>. Use the 'dominating\n\
    set filter' -- i.e., filter redundant probes by\nconstructing a graph connecting\
    \ redundant probes and\napproximating the smallest dominating set. Deem one\n\
    probe redundant to another if the longest common\nsubstring between them, up to\
    \ MISMATCHES mismatches,\nis >= LCF_THRES."
  args: !SimpleFlagArg
    name: DOMINATING_SET_FILTER
- !Flag
  optional: true
  synonyms:
  - --add-reverse-complements
  description: Add to the output the reverse complement of each probe
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --limit-target-genomes
  description: "(Optional) Use only the first N target genomes in the\ndataset"
  args: !SimpleFlagArg
    name: LIMIT_TARGET_GENOMES
- !Flag
  optional: true
  synonyms:
  - --limit-target-genomes-randomly-with-replacement
  description: "(Optional) Randomly select N target genomes in the\ndataset with replacement"
  args: !SimpleFlagArg
    name: LIMIT_TARGET_GENOMES_RANDOMLY_WITH_REPLACEMENT
- !Flag
  optional: true
  synonyms:
  - --print-analysis
  description: Print analysis of the probe set's coverage
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --debug
  description: Debug output
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --verbose
  description: Verbose output
  args: !EmptyFlagArg {}
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag: !Flag
  optional: true
  synonyms:
  - -V
  - --version
  description: show program's version number and exit
  args: !EmptyFlagArg {}
help_text: "usage: design_naively.py [-h] [-pl PROBE_LENGTH] [-ps PROBE_STRIDE]\n\
  \                         [-nrf NAIVE_REDUNDANT_FILTER NAIVE_REDUNDANT_FILTER]\n\
  \                         [-dsf DOMINATING_SET_FILTER DOMINATING_SET_FILTER]\n \
  \                        [--add-reverse-complements]\n                         [--limit-target-genomes\
  \ LIMIT_TARGET_GENOMES]\n                         [--limit-target-genomes-randomly-with-replacement\
  \ LIMIT_TARGET_GENOMES_RANDOMLY_WITH_REPLACEMENT]\n                         [--print-analysis]\
  \ [--debug] [--verbose] [-V]\n                         dataset\n\npositional arguments:\n\
  \  dataset               Label for the target dataset\n\noptional arguments:\n \
  \ -h, --help            show this help message and exit\n  -pl PROBE_LENGTH, --probe-length\
  \ PROBE_LENGTH\n                        (Optional) The number of bp in each probe\n\
  \  -ps PROBE_STRIDE, --probe-stride PROBE_STRIDE\n                        (Optional)\
  \ Generate candidate probes from the input\n                        that are separated\
  \ by this number of bp\n  -nrf NAIVE_REDUNDANT_FILTER NAIVE_REDUNDANT_FILTER, --naive-redundant-filter\
  \ NAIVE_REDUNDANT_FILTER NAIVE_REDUNDANT_FILTER\n                        Args: <MISMATCHES>\
  \ <LCF_THRES>. Use the 'naive\n                        redundant filter' -- i.e.,\
  \ iterate through a list of\n                        probes and, for each probe\
  \ p, remove the following\n                        probes that are redundant to\
  \ p. Deem one probe\n                        redundant to another if the longest\
  \ common substring\n                        between them, up to MISMATCHES mismatches,\
  \ is >=\n                        LCF_THRES.\n  -dsf DOMINATING_SET_FILTER DOMINATING_SET_FILTER,\
  \ --dominating-set-filter DOMINATING_SET_FILTER DOMINATING_SET_FILTER\n        \
  \                Args: <MISMATCHES> <LCF_THRES>. Use the 'dominating\n         \
  \               set filter' -- i.e., filter redundant probes by\n              \
  \          constructing a graph connecting redundant probes and\n              \
  \          approximating the smallest dominating set. Deem one\n               \
  \         probe redundant to another if the longest common\n                   \
  \     substring between them, up to MISMATCHES mismatches,\n                   \
  \     is >= LCF_THRES.\n  --add-reverse-complements\n                        Add\
  \ to the output the reverse complement of each probe\n  --limit-target-genomes LIMIT_TARGET_GENOMES\n\
  \                        (Optional) Use only the first N target genomes in the\n\
  \                        dataset\n  --limit-target-genomes-randomly-with-replacement\
  \ LIMIT_TARGET_GENOMES_RANDOMLY_WITH_REPLACEMENT\n                        (Optional)\
  \ Randomly select N target genomes in the\n                        dataset with\
  \ replacement\n  --print-analysis      Print analysis of the probe set's coverage\n\
  \  --debug               Debug output\n  --verbose             Verbose output\n\
  \  -V, --version         show program's version number and exit\n"
generated_using:
- --help
docker_image:
