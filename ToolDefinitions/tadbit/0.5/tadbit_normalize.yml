!Command
command:
- tadbit
- normalize
positional: []
named:
- !Flag
  optional: true
  synonyms:
  - -w
  - --workdir
  description: path to working directory (generated with the tool tadbit mapper)
  args: !SimpleFlagArg
    name: PATH
- !Flag
  optional: true
  synonyms:
  - -r
  - --resolution
  description: resolution at which to output matrices
  args: !SimpleFlagArg
    name: INT
- !Flag
  optional: true
  synonyms:
  - --bam
  description: "path to a TADbit-generated BAM file with all reads (other wise the\n\
    tool will guess from the working directory database)"
  args: !SimpleFlagArg
    name: PATH
- !Flag
  optional: true
  synonyms:
  - -j
  - --jobid
  description: "Use as input data generated by a job with a given jobid. Use tadbit\n\
    describe to find out which."
  args: !SimpleFlagArg
    name: INT
- !Flag
  optional: true
  synonyms:
  - --max_njobs
  description: "[100] Define maximum number of jobs for reading BAM file (set to\n\
    higher numbers for large files and low RAM memory)."
  args: !SimpleFlagArg
    name: INT
- !Flag
  optional: true
  synonyms:
  - --force
  description: overwrite previously run job
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --tmpdb
  description: if provided uses this directory to manipulate the database
  args: !SimpleFlagArg
    name: PATH
- !Flag
  optional: true
  synonyms:
  - -C
  - --cpus
  description: "[8] Maximum number of CPU cores available in the execution host. If\n\
    higher than 1, tasks with multi-threading capabilities will enabled\n(if 0 all\
    \ available) cores will be used"
  args: !SimpleFlagArg
    name: CPUS
- !Flag
  optional: true
  synonyms:
  - --normalize_only
  description: skip calculation of Cis-percentage and decay
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --noX
  description: no display server (X screen)
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --perc_zeros
  description: '[95%] maximum percentage of zeroes allowed per column.'
  args: !SimpleFlagArg
    name: FLOAT
- !Flag
  optional: true
  synonyms:
  - --min_count
  description: "[None] minimum number of reads mapped to a bin (recommended value\n\
    could be 2500). If set this option overrides the perc_zero\nfiltering... This\
    \ option is slightly slower."
  args: !SimpleFlagArg
    name: INT
- !Flag
  optional: true
  synonyms:
  - --min_perc
  description: '[None] lower percentile from which consider bins as good.'
  args: !SimpleFlagArg
    name: INT
- !Flag
  optional: true
  synonyms:
  - --max_perc
  description: '[None] upper percentile until which consider bins as good.'
  args: !SimpleFlagArg
    name: INT
- !Flag
  optional: true
  synonyms:
  - --filter_only
  description: skip normalization
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --fast_filter
  description: "only filter according to the percentage of zero count or minimum\n\
    count of reads"
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - -B
  description: ":POS1-POS2 [CHR:POS1-POS2 ...], --badcols CHR:POS1-POS2 [CHR:POS1-POS2\
    \ ...]\nextra regions to be added to bad-columns (ingenomic position). e.g.:\n\
    --badcols 1:150000000-160000000 2:1200000-1300000"
  args: !SimpleFlagArg
    name: CHR
- !Flag
  optional: true
  synonyms:
  - -F
  - --filter
  description: "[[1, 2, 3, 4, 6, 7, 9, 10]] Use filters to define a set os valid\n\
    pair of reads e.g.: '--apply 1 2 3 4 8 9 10'. Where these\nnumberscorrespond to:\
    \ 1: self-circle, 2: dangling-end, 3: error, 4:\nextra dangling-end, 5: too close\
    \ from RES, 6: too short, 7: too\nlarge, 8: over-represented, 9: duplicated, 10:\
    \ random breaks, 11:\ntrans-chromosomic"
  args: !RepeatFlagArg
    name: INT
- !Flag
  optional: true
  synonyms:
  - --valid
  description: input BAM file contains only valid pairs (already filtered).
  args: !EmptyFlagArg {}
- !Flag
  optional: true
  synonyms:
  - --normalization
  description: "[Vanilla] normalization(s) to apply. Order matters. Choices:\nVanilla,\
    \ ICE, SQRT, oneD, custom"
  args: !SimpleFlagArg
    name: STR
- !Flag
  optional: true
  synonyms:
  - --biases_path
  description: "biases file to compute decay. REQUIRED with \"custom\" normalization.\n\
    Format: single column with header"
  args: !SimpleFlagArg
    name: BIASES_PATH
- !Flag
  optional: true
  synonyms:
  - --mappability
  description: "Path to mappability bedGraph file, required for oneD normalization.\n\
    Mappability file can be generated with GEM (example from the genomic FASTA file\
    \ hg38.fa):\ngem-indexer -i hg38.fa -o hg38\ngem-mappability -I hg38.gem -l 50\
    \ -o hg38.50mer -T 8\ngem-2-wig -I hg38.gem -i hg38.50mer.mappability -o hg38.50mer\n\
    wigToBigWig hg38.50mer.wig hg38.50mer.sizes hg38.50mer.bw\nbigWigToBedGraph hg38.50mer.bw\
    \  hg38.50mer.bedGraph"
  args: !SimpleFlagArg
    name: PATH
- !Flag
  optional: true
  synonyms:
  - --fasta
  description: "Path to FASTA file with genome sequence, to compute GC content and\n\
    number of restriction sites per bin. Required for oneD normalization"
  args: !SimpleFlagArg
    name: PATH
- !Flag
  optional: true
  synonyms:
  - --renz
  description: restriction enzyme name(s). Required for oneD normalization
  args: !SimpleFlagArg
    name: STR
- !Flag
  optional: true
  synonyms:
  - --factor
  description: "[1] target mean value of a cell after normalization (can be used to\n\
    weight experiments before merging)"
  args: !SimpleFlagArg
    name: NUM
- !Flag
  optional: true
  synonyms:
  - --prop_data
  description: "[1] Only for oneD normalization: proportion of data to be used in\n\
    fitting (for very large datasets). Number between 0 and 1."
  args: !SimpleFlagArg
    name: FLOAT
- !Flag
  optional: true
  synonyms:
  - --seed
  description: "[1] Only for oneD normalization: seed number for the random picking\n\
    of data when using the \"prop_data\" parameter\n"
  args: !SimpleFlagArg
    name: INT
parent:
subcommands: []
usage: []
help_flag: !Flag
  optional: true
  synonyms:
  - -h
  - --help
  description: show this help message and exit
  args: !EmptyFlagArg {}
usage_flag:
version_flag:
help_text: "usage: tadbit normalize [-h] -w PATH -r INT [--bam PATH] [-j INT] [--max_njobs\
  \ INT] [--force]\n                        [--tmpdb PATH] [-C CPUS] [--normalize_only]\
  \ [--noX]\n                        [--normalization STR] [--biases_path BIASES_PATH]\
  \ [--mappability PATH]\n                        [--fasta PATH] [--renz STR] [--factor\
  \ NUM] [--prop_data FLOAT]\n                        [--seed INT] [--perc_zeros FLOAT]\
  \ [--min_count INT] [--min_perc INT]\n                        [--max_perc INT] [--filter_only]\
  \ [--fast_filter]\n                        [-B CHR:POS1-POS2 [CHR:POS1-POS2 ...]]\
  \ [-F INT [INT ...]] [--valid]\n\nnormalize Hi-C data and generates array of biases\n\
  \noptional arguments:\n  -h, --help               show this help message and exit\n\
  \nRequired options:\n  -w PATH, --workdir PATH  path to working directory (generated\
  \ with the tool tadbit mapper)\n  -r INT, --resolution INT\n                   \
  \        resolution at which to output matrices\n\nGeneral options:\n  --bam PATH\
  \               path to a TADbit-generated BAM file with all reads (other wise the\n\
  \                           tool will guess from the working directory database)\n\
  \  -j INT, --jobid INT      Use as input data generated by a job with a given jobid.\
  \ Use tadbit\n                           describe to find out which.\n  --max_njobs\
  \ INT          [100] Define maximum number of jobs for reading BAM file (set to\n\
  \                           higher numbers for large files and low RAM memory).\n\
  \  --force                  overwrite previously run job\n  --tmpdb PATH       \
  \      if provided uses this directory to manipulate the database\n  -C CPUS, --cpus\
  \ CPUS     [8] Maximum number of CPU cores available in the execution host. If\n\
  \                           higher than 1, tasks with multi-threading capabilities\
  \ will enabled\n                           (if 0 all available) cores will be used\n\
  \  --normalize_only         skip calculation of Cis-percentage and decay\n  --noX\
  \                    no display server (X screen)\n\nBin filtering options:\n  --perc_zeros\
  \ FLOAT       [95%] maximum percentage of zeroes allowed per column.\n  --min_count\
  \ INT          [None] minimum number of reads mapped to a bin (recommended value\n\
  \                           could be 2500). If set this option overrides the perc_zero\n\
  \                           filtering... This option is slightly slower.\n  --min_perc\
  \ INT           [None] lower percentile from which consider bins as good.\n  --max_perc\
  \ INT           [None] upper percentile until which consider bins as good.\n  --filter_only\
  \            skip normalization\n  --fast_filter            only filter according\
  \ to the percentage of zero count or minimum\n                           count of\
  \ reads\n  -B CHR:POS1-POS2 [CHR:POS1-POS2 ...], --badcols CHR:POS1-POS2 [CHR:POS1-POS2\
  \ ...]\n                           extra regions to be added to bad-columns (ingenomic\
  \ position). e.g.:\n                           --badcols 1:150000000-160000000 2:1200000-1300000\n\
  \nRead filtering options:\n  -F INT [INT ...], --filter INT [INT ...]\n        \
  \                   [[1, 2, 3, 4, 6, 7, 9, 10]] Use filters to define a set os valid\n\
  \                           pair of reads e.g.: '--apply 1 2 3 4 8 9 10'. Where\
  \ these\n                           numberscorrespond to: 1: self-circle, 2: dangling-end,\
  \ 3: error, 4:\n                           extra dangling-end, 5: too close from\
  \ RES, 6: too short, 7: too\n                           large, 8: over-represented,\
  \ 9: duplicated, 10: random breaks, 11:\n                           trans-chromosomic\n\
  \  --valid                  input BAM file contains only valid pairs (already filtered).\n\
  \nNormalization options:\n  --normalization STR      [Vanilla] normalization(s)\
  \ to apply. Order matters. Choices:\n                           Vanilla, ICE, SQRT,\
  \ oneD, custom\n  --biases_path BIASES_PATH\n                           biases file\
  \ to compute decay. REQUIRED with \"custom\" normalization.\n                  \
  \         Format: single column with header\n  --mappability PATH       Path to\
  \ mappability bedGraph file, required for oneD normalization.\n                \
  \           Mappability file can be generated with GEM (example from the genomic\
  \ FASTA file hg38.fa):\n                           \n                          \
  \      gem-indexer -i hg38.fa -o hg38\n                                gem-mappability\
  \ -I hg38.gem -l 50 -o hg38.50mer -T 8\n                                gem-2-wig\
  \ -I hg38.gem -i hg38.50mer.mappability -o hg38.50mer\n                        \
  \        wigToBigWig hg38.50mer.wig hg38.50mer.sizes hg38.50mer.bw\n           \
  \                     bigWigToBedGraph hg38.50mer.bw  hg38.50mer.bedGraph\n  --fasta\
  \ PATH             Path to FASTA file with genome sequence, to compute GC content\
  \ and\n                           number of restriction sites per bin. Required\
  \ for oneD normalization\n  --renz STR               restriction enzyme name(s).\
  \ Required for oneD normalization\n  --factor NUM             [1] target mean value\
  \ of a cell after normalization (can be used to\n                           weight\
  \ experiments before merging)\n  --prop_data FLOAT        [1] Only for oneD normalization:\
  \ proportion of data to be used in\n                           fitting (for very\
  \ large datasets). Number between 0 and 1.\n  --seed INT               [1] Only\
  \ for oneD normalization: seed number for the random picking\n                 \
  \          of data when using the \"prop_data\" parameter\n"
generated_using:
- --help
docker_image:
