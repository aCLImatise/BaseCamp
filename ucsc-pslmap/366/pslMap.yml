!Command
positional:
- !Positional
  description: ''
  position: 0
  name: inPsl
  optional: false
- !Positional
  description: ''
  position: 1
  name: mapFile
  optional: false
- !Positional
  description: ''
  position: 2
  name: outPsl
  optional: false
named: []
command:
- pslMap
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "Error: wrong number of arguments\npslMap - map PSLs alignments to new\
  \ targets using alignments of\nthe old target to the new target.  Given inPsl and\
  \ mapPsl, where\nthe target of inPsl is the query of mapPsl, create a new PSL\n\
  with the query of inPsl aligned to all the targets of mapPsl.\nIf inPsl is a protein\
  \ to nucleotide alignment and mapPsl is a\nnucleotide to nucleotide alignment, the\
  \ resulting alignment is\nnucleotide to nucleotide alignment of a hypothetical mRNA\
  \ that\nwould code for the protein.  This is useful as it gives base\nalignments\
  \ of spliced codons.  A chain file may be used instead\nmapPsl.\n\nusage:\n   pslMap\
  \ [options] inPsl mapFile outPsl\n\nOptions:\n  -chainMapFile - mapFile is a chain\
  \ file instead of a psl file\n  -swapMap - swap query and target sides of map file.\n\
  \  -swapIn - swap query and target sides of inPsl file.\n  -suffix=str - append\
  \ str to the query ids in the output\n   alignment.  Useful with protein alignments,\
  \ where the result\n   is not actually and alignment of the protein.\n  -keepTranslated\
  \ - if either psl is translated, the output psl\n   will be translated (both strands\
  \ explicted).  Normally an\n   untranslated psl will always be created\n  -mapFileWithInQName\
  \ - The first column of the mapFile PSL records are a qName,\n   the remainder is\
  \ a standard PSL.  When an inPsl record is mapped, only\n   mapping records are\
  \ used with the corresponding qName.\n  -mapInfo=file - output a file with information\
  \ about each mapping.\n   The file has the following columns:\n     o srcQName,\
  \ srcQStart, srcQEnd, srcQSize - qName, etc of\n       psl being mapped (source\
  \ alignment)\n     o srcTName, srcTStart, srcTEnd - tName, etc of psl being\n  \
  \     mapped\n     o srcStrand - strand of psl being mapped\n     o srcAligned -\
  \ number of aligned based in psl being mapped\n     o mappingQName, mappingQStart,\
  \ mappingQEnd - qName, etc of\n       mapping psl used to map alignment\n     o\
  \ mappingTName, mappingTStart, mappingTEnd - tName, etc of\n       mapping psl\n\
  \     o mappingStrand - strand of mapping psl\n     o mappingId - chain id, or psl\
  \ file row\n     o mappedQName mappedQStart, mappedQEnd - qName, etc of\n      \
  \ mapped psl\n     o mappedTName, mappedTStart, mappedTEnd - tName, etc of\n   \
  \    mapped psl\n     o mappedStrand - strand of mapped psl\n     o mappedAligned\
  \ - number of aligned bases that were mapped\n     o qStartTrunc - aligned bases\
  \ at qStart not mapped due to\n       mapping psl/chain not covering the entire\
  \ soruce psl.\n       This is from the start of the query in the positive\n    \
  \   direction.\n     o qEndTrunc - similary for qEnd\n   If the psl count not be\
  \ mapped, the mapping* and mapped* columns are empty.\n  -mappingPsls=pslFile -\
  \ write mapping alignments that were used in\n   PSL format to this file.  Transformations\
  \ that were done, such as\n   -swapMap, will be reflected in this file.  There will\
  \ be a one-to-one\n   correspondence of rows of this file to rows of the outPsl\
  \ file.\n  -simplifyMappingIds - simplifying mapping ids (inPsl target\n   name\
  \ and mapFile query name) before matching them. This\n   first drops everything\
  \ after the last `-', and then drops\n   everything after the last remaining `.'.\n\
  \  -verbose=n  - verbose output\n     2 - show each overlap and the mapping\n\n"
generated_using: []
