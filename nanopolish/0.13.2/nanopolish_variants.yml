&id003 !Command
command:
- nanopolish
- variants
positional: []
named:
- !Flag
  description: display verbose output
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: only call SNPs
  synonyms:
  - --snps
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: run in consensus calling mode
  synonyms:
  - --consensus
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: run the experimental homopolymer caller
  synonyms:
  - --fix-homopolymers
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: minimize compute time while slightly reducing consensus accuracy
  synonyms:
  - --faster
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'find variants in window STR (format: <chromsome_name>:<start>-<end>)'
  synonyms:
  - -w
  - --window
  args: !SimpleFlagArg
    name: STR
  optional: true
- !Flag
  description: the ONT reads are in fasta FILE
  synonyms:
  - -r
  - --reads
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: the reads aligned to the reference genome are in bam FILE
  synonyms:
  - -b
  - --bam
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: the events aligned to the reference genome are in bam FILE
  synonyms:
  - -e
  - --event-bam
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: the reference genome is in FILE
  synonyms:
  - -g
  - --genome
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: the ploidy level of the sequenced genome
  synonyms:
  - -p
  - --ploidy
  args: !SimpleFlagArg
    name: NUM
  optional: true
- !Flag
  description: 'turn on methylation aware polishing and test motifs given in STR (example:
    -q dcm,dam)'
  synonyms:
  - -q
  - --methylation-aware
  args: !SimpleFlagArg
    name: STR
  optional: true
- !Flag
  description: call genotypes for the variants in the vcf FILE
  synonyms:
  - --genotype
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: 'write result to FILE [default: stdout]'
  synonyms:
  - -o
  - --outfile
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: 'use NUM threads (default: 1)'
  synonyms:
  - -t
  - --threads
  args: !SimpleFlagArg
    name: NUM
  optional: true
- !Flag
  description: extract candidate variants from the aligned reads when the variant
    frequency is at least F (default 0.2)
  synonyms:
  - -m
  - --min-candidate-frequency
  args: !SimpleFlagArg
    name: F
  optional: true
- !Flag
  description: "bias HMM transition parameters to favor insertions (F<1) or deletions\
    \ (F>1).\nthis value is automatically set depending on --consensus, but can be\
    \ manually set if spurious indels are called"
  synonyms:
  - -i
  - --indel-bias
  args: !SimpleFlagArg
    name: F
  optional: true
- !Flag
  description: 'extract candidate variants from the aligned reads when the depth is
    at least D (default: 20)'
  synonyms:
  - -d
  - --min-candidate-depth
  args: !SimpleFlagArg
    name: D
  optional: true
- !Flag
  description: 'consider at most N haplotype combinations (default: 1000)'
  synonyms:
  - -x
  - --max-haplotypes
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: 'distance from alignment end to calculate variants (default: 30)'
  synonyms:
  - --min-flanking-sequence
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: 'perform N rounds of consensus sequence improvement (default: 50)'
  synonyms:
  - --max-rounds
  args: !SimpleFlagArg
    name: N
  optional: true
- !Flag
  description: read variant candidates from VCF, rather than discovering them from
    aligned reads
  synonyms:
  - -c
  - --candidates
  args: !SimpleFlagArg
    name: VCF
  optional: true
- !Flag
  description: only use alignments with read group tag RG
  synonyms:
  - --read-group
  args: !SimpleFlagArg
    name: RG
  optional: true
- !Flag
  description: "if an alternative basecaller was used that does not output event annotations\n\
    then use basecalled sequences from FILE. The signal-level events will still be\
    \ taken from the -b bam."
  synonyms:
  - -a
  - --alternative-basecalls-bam
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: when making a call, also calculate the support of the 3 other possible
    bases
  synonyms:
  - --calculate-all-support
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: read alternative k-mer models from FILE
  synonyms:
  - --models-fofn
  args: !SimpleFlagArg
    name: FILE
  optional: true
parent: &id001 !Command
  command:
  - nanopolish
  positional: []
  named: []
  parent:
  subcommands:
  - !Command
    command:
    - nanopolish
    - methyltrain
    positional: []
    named:
    - !Flag
      description: display verbose output
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: read the models to be trained from the FOFN
      synonyms:
      - -m
      - --models-fofn
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: train methylated, unmethylated or all kmers
      synonyms:
      - --train-kmers
      args: !SimpleFlagArg
        name: STR
      optional: true
    - !Flag
      description: recalibrate aligned reads to model before training
      synonyms:
      - -c
      - --calibrate
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: do not write out trained models
      synonyms:
      - --no-update-models
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: optionally output read scores during training
      synonyms:
      - --output-scores
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: the ONT reads are in fasta FILE
      synonyms:
      - -r
      - --reads
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: the reads aligned to the genome assembly are in bam FILE
      synonyms:
      - -b
      - --bam
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: the reference genome is in FILE
      synonyms:
      - -g
      - --genome
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: 'use NUM threads (default: 1)'
      synonyms:
      - -t
      - --threads
      args: !SimpleFlagArg
        name: NUM
      optional: true
    - !Flag
      description: filter reads for [R7] or [R9] project
      synonyms:
      - --filter-policy
      args: !SimpleFlagArg
        name: STR
      optional: true
    - !Flag
      description: name output files like <strand>.out_suffix
      synonyms:
      - -s
      - --out-suffix
      args: !SimpleFlagArg
        name: STR
      optional: true
    - !Flag
      description: write the names of the output models into FILE
      synonyms:
      - --out-fofn
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: number of training rounds to perform
      synonyms:
      - --rounds
      args: !SimpleFlagArg
        name: NUM
      optional: true
    - !Flag
      description: stop after processing NUM reads in each round
      synonyms:
      - --max-reads
      args: !SimpleFlagArg
        name: NUM
      optional: true
    - !Flag
      description: print out a progress message
      synonyms:
      - --progress
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: enable stdv modelling
      synonyms:
      - --stdv
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'use NUM events for training (default: 1000)'
      synonyms:
      - --max-events
      args: !SimpleFlagArg
        name: NUM
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: display this help and exit
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: display version
      synonyms:
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "Usage: nanopolish methyltrain [OPTIONS] --reads reads.fa --bam alignments.bam\
      \ --genome genome.fa\nTrain a methylation model\n\n  -v, --verbose         \
      \               display verbose output\n      --version                    \
      \    display version\n      --help                           display this help\
      \ and exit\n  -m, --models-fofn=FILE               read the models to be trained\
      \ from the FOFN\n      --train-kmers=STR                train methylated, unmethylated\
      \ or all kmers\n  -c  --calibrate                      recalibrate aligned reads\
      \ to model before training\n      --no-update-models               do not write\
      \ out trained models\n      --output-scores                  optionally output\
      \ read scores during training\n  -r, --reads=FILE                     the ONT\
      \ reads are in fasta FILE\n  -b, --bam=FILE                       the reads\
      \ aligned to the genome assembly are in bam FILE\n  -g, --genome=FILE      \
      \              the reference genome is in FILE\n  -t, --threads=NUM        \
      \            use NUM threads (default: 1)\n      --filter-policy=STR       \
      \       filter reads for [R7] or [R9] project\n  -s, --out-suffix=STR      \
      \           name output files like <strand>.out_suffix\n      --out-fofn=FILE\
      \                  write the names of the output models into FILE\n      --rounds=NUM\
      \                     number of training rounds to perform\n      --max-reads=NUM\
      \                  stop after processing NUM reads in each round\n      --progress\
      \                       print out a progress message\n      --stdv         \
      \                  enable stdv modelling\n      --max-events=NUM           \
      \      use NUM events for training (default: 1000)\n\nReport bugs to https://github.com/jts/nanopolish/issues\n\
      \n"
    generated_using: &id002
    - --help
  - !Command
    command:
    - nanopolish
    - call-methylation
    positional: []
    named:
    - !Flag
      description: display verbose output
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: the ONT reads are in fasta/fastq FILE
      synonyms:
      - -r
      - --reads
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: the reads aligned to the genome assembly are in bam FILE
      synonyms:
      - -b
      - --bam
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: the genome we are calling methylation for is in fasta FILE
      synonyms:
      - -g
      - --genome
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: the type of methylation (cpg,gpc,dam,dcm)
      synonyms:
      - -q
      - --methylation
      args: !SimpleFlagArg
        name: STRING
      optional: true
    - !Flag
      description: 'use NUM threads (default: 1)'
      synonyms:
      - -t
      - --threads
      args: !SimpleFlagArg
        name: NUM
      optional: true
    - !Flag
      description: watch the sequencing run directory DIR and call methylation as
        data is generated
      synonyms:
      - --watch
      args: !SimpleFlagArg
        name: DIR
      optional: true
    - !Flag
      description: in watch mode, write the alignments for each fastq
      synonyms:
      - --watch-write-bam
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: in watch mode, there are TOTAL calling processes running against
        this directory
      synonyms:
      - -c
      - --watch-process-total
      args: !SimpleFlagArg
        name: TOTAL
      optional: true
    - !Flag
      description: "in watch mode, the index of this process is IDX\nthe previous\
        \ two options allow you to run multiple independent methylation\ncalling processes\
        \ against a single directory. Each process will only call\nfiles when X mod\
        \ TOTAL == IDX, where X is the suffix of the fast5 file."
      synonyms:
      - -i
      - --watch-process-index
      args: !SimpleFlagArg
        name: IDX
      optional: true
    - !Flag
      description: print out a progress message
      synonyms:
      - --progress
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'the batch size (default: 512)'
      synonyms:
      - -K
      - --batchsize
      args: !SimpleFlagArg
        name: NUM
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: display this help and exit
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: display version
      synonyms:
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "Usage: nanopolish call-methylation [OPTIONS] --reads reads.fa --bam\
      \ alignments.bam --genome genome.fa --methylation cpg\nClassify nucleotides\
      \ as methylated or not.\n\n  -v, --verbose                        display verbose\
      \ output\n      --version                        display version\n      --help\
      \                           display this help and exit\n  -r, --reads=FILE \
      \                    the ONT reads are in fasta/fastq FILE\n  -b, --bam=FILE\
      \                       the reads aligned to the genome assembly are in bam\
      \ FILE\n  -g, --genome=FILE                    the genome we are calling methylation\
      \ for is in fasta FILE\n  -q, --methylation=STRING             the type of methylation\
      \ (cpg,gpc,dam,dcm)\n  -t, --threads=NUM                    use NUM threads\
      \ (default: 1)\n      --watch=DIR                      watch the sequencing\
      \ run directory DIR and call methylation as data is generated\n      --watch-write-bam\
      \                in watch mode, write the alignments for each fastq\n  -c, --watch-process-total=TOTAL\
      \      in watch mode, there are TOTAL calling processes running against this\
      \ directory\n  -i, --watch-process-index=IDX        in watch mode, the index\
      \ of this process is IDX\n                                       the previous\
      \ two options allow you to run multiple independent methylation\n          \
      \                             calling processes against a single directory.\
      \ Each process will only call\n                                       files\
      \ when X mod TOTAL == IDX, where X is the suffix of the fast5 file.\n      --progress\
      \                       print out a progress message\n  -K  --batchsize=NUM\
      \                  the batch size (default: 512)\n\nReport bugs to https://github.com/jts/nanopolish/issues\n\
      \n"
    generated_using: *id002
  - *id003
  - !Command
    command:
    - nanopolish
    - extract
    positional:
    - !Positional
      description: ''
      position: 0
      name: Extract
      optional: false
    - !Positional
      description: ''
      position: 1
      name: reads
      optional: false
    - !Positional
      description: ''
      position: 2
      name: in
      optional: false
    - !Positional
      description: ''
      position: 3
      name: fasta
      optional: false
    - !Positional
      description: ''
      position: 4
      name: format
      optional: false
    named:
    - !Flag
      description: display verbose output
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: recurse into subdirectories
      synonyms:
      - -r
      - --recurse
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'extract fastq (default: fasta)'
      synonyms:
      - -q
      - --fastq
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "read type: template, complement, 2d, 2d-or-template, any\n(default:\
        \ 2d-or-template)"
      synonyms:
      - -t
      - --type
      args: !SimpleFlagArg
        name: TYPE
      optional: true
    - !Flag
      description: "[:VERSION]      consider only data produced by basecaller NAME,\n\
        optionally with given exact VERSION"
      synonyms:
      - -b
      - --basecaller
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: write output to FILE
      synonyms:
      - -o
      - --output
      args: !SimpleFlagArg
        name: FILE
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: display this help and exit
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: display version
      synonyms:
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "Usage: nanopolish extract [OPTIONS] <fast5|dir>...\nExtract reads\
      \ in fasta format\n\n      --help                           display this help\
      \ and exit\n      --version                        display version\n  -v, --verbose\
      \                        display verbose output\n  -r, --recurse           \
      \             recurse into subdirectories\n  -q, --fastq                   \
      \       extract fastq (default: fasta)\n  -t, --type=TYPE                  \
      \    read type: template, complement, 2d, 2d-or-template, any\n            \
      \                             (default: 2d-or-template)\n  -b, --basecaller=NAME[:VERSION]\
      \      consider only data produced by basecaller NAME,\n                   \
      \                      optionally with given exact VERSION\n  -o, --output=FILE\
      \                    write output to FILE\n\nReport bugs to https://github.com/jts/nanopolish/issues\n\
      \n"
    generated_using: *id002
  - !Command
    command:
    - nanopolish
    - polya
    positional: []
    named:
    - !Flag
      description: display verbose output
      synonyms:
      - -v
      - --verbose
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: 'only compute the poly-A lengths for reads in window STR (format:
        ctg:start_id-end_id)'
      synonyms:
      - -w
      - --window
      args: !SimpleFlagArg
        name: STR
      optional: true
    - !Flag
      description: the 1D ONT direct RNA reads are in fasta FILE
      synonyms:
      - -r
      - --reads
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: the reads aligned to the genome assembly are in bam FILE
      synonyms:
      - -b
      - --bam
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: the reference genome assembly for the reads is in FILE
      synonyms:
      - -g
      - --genome
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: 'use NUM threads (default: 1)'
      synonyms:
      - -t
      - --threads
      args: !SimpleFlagArg
        name: NUM
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: display this help and exit
      synonyms:
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: display version
      synonyms:
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "Usage: nanopolish polya [OPTIONS] --reads reads.fa --bam alignments.bam\
      \ --genome genome.fa\nEstimate the length of the poly-A tail on direct RNA reads\n\
      \n  -v, --verbose                        display verbose output\n      --version\
      \                        display version\n      --help                     \
      \      display this help and exit\n  -w, --window=STR                     only\
      \ compute the poly-A lengths for reads in window STR (format: ctg:start_id-end_id)\n\
      \  -r, --reads=FILE                     the 1D ONT direct RNA reads are in fasta\
      \ FILE\n  -b, --bam=FILE                       the reads aligned to the genome\
      \ assembly are in bam FILE\n  -g, --genome=FILE                    the reference\
      \ genome assembly for the reads is in FILE\n  -t, --threads=NUM            \
      \        use NUM threads (default: 1)\n\nReport bugs to https://github.com/jts/nanopolish/issues\n\
      \n"
    generated_using: *id002
  usage: []
  help_flag: !Flag
    description: ''
    synonyms:
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag: !Flag
    description: ''
    synonyms:
    - --version
    args: !EmptyFlagArg {}
    optional: true
  help_text: "usage: nanopolish [command] [options]\n  valid commands: \n    --help\n\
    \    --version\n    call-methylation\n    eventalign\n    extract\n    getmodel\n\
    \    help\n    index\n    methyltrain\n    phase-reads\n    polya\n    scorereads\n\
    \    variants\n    vcf2fasta\n  for help on given command, type nanopolish command\
    \ --help\n"
  generated_using: *id002
subcommands: []
usage: []
help_flag: !Flag
  description: display this help and exit
  synonyms:
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: display version
  synonyms:
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "Usage: nanopolish variants [OPTIONS] --reads reads.fa --bam alignments.bam\
  \ --genome genome.fa\nFind SNPs using a signal-level HMM\n\n  -v, --verbose    \
  \                    display verbose output\n      --version                   \
  \     display version\n      --help                           display this help\
  \ and exit\n      --snps                           only call SNPs\n      --consensus\
  \                      run in consensus calling mode\n      --fix-homopolymers \
  \              run the experimental homopolymer caller\n      --faster         \
  \                minimize compute time while slightly reducing consensus accuracy\n\
  \  -w, --window=STR                     find variants in window STR (format: <chromsome_name>:<start>-<end>)\n\
  \  -r, --reads=FILE                     the ONT reads are in fasta FILE\n  -b, --bam=FILE\
  \                       the reads aligned to the reference genome are in bam FILE\n\
  \  -e, --event-bam=FILE                 the events aligned to the reference genome\
  \ are in bam FILE\n  -g, --genome=FILE                    the reference genome is\
  \ in FILE\n  -p, --ploidy=NUM                     the ploidy level of the sequenced\
  \ genome\n  -q  --methylation-aware=STR          turn on methylation aware polishing\
  \ and test motifs given in STR (example: -q dcm,dam)\n      --genotype=FILE    \
  \              call genotypes for the variants in the vcf FILE\n  -o, --outfile=FILE\
  \                   write result to FILE [default: stdout]\n  -t, --threads=NUM\
  \                    use NUM threads (default: 1)\n  -m, --min-candidate-frequency=F\
  \      extract candidate variants from the aligned reads when the variant frequency\
  \ is at least F (default 0.2)\n  -i, --indel-bias=F                   bias HMM transition\
  \ parameters to favor insertions (F<1) or deletions (F>1).\n                   \
  \                    this value is automatically set depending on --consensus, but\
  \ can be manually set if spurious indels are called\n  -d, --min-candidate-depth=D\
  \          extract candidate variants from the aligned reads when the depth is at\
  \ least D (default: 20)\n  -x, --max-haplotypes=N               consider at most\
  \ N haplotype combinations (default: 1000)\n      --min-flanking-sequence=N    \
  \    distance from alignment end to calculate variants (default: 30)\n      --max-rounds=N\
  \                   perform N rounds of consensus sequence improvement (default:\
  \ 50)\n  -c, --candidates=VCF                 read variant candidates from VCF,\
  \ rather than discovering them from aligned reads\n      --read-group=RG       \
  \           only use alignments with read group tag RG\n  -a, --alternative-basecalls-bam=FILE\
  \ if an alternative basecaller was used that does not output event annotations\n\
  \                                       then use basecalled sequences from FILE.\
  \ The signal-level events will still be taken from the -b bam.\n      --calculate-all-support\
  \          when making a call, also calculate the support of the 3 other possible\
  \ bases\n      --models-fofn=FILE               read alternative k-mer models from\
  \ FILE\n\nReport bugs to https://github.com/jts/nanopolish/issues\n\n"
generated_using: *id002
