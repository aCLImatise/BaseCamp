!Command
command:
- bedextract-megarow
positional:
- !Positional
  description: ''
  position: 0
  name: '0'
  optional: false
- !Positional
  description: ''
  position: 0
  name: '1'
  optional: false
- !Positional
  description: ''
  position: 0
  name: '2'
  optional: false
- !Positional
  description: ''
  position: 0
  name: '3'
  optional: false
named: []
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "bedextract\n  citation: http://bioinformatics.oxfordjournals.org/content/28/14/1919.abstract\n\
  \            https://doi.org/10.1093/bioinformatics/bts277\n  version:  2.4.39 (typical)\n\
  \  authors:  Shane Neph & Alex Reynolds\n\n    Every input file must be sorted per\
  \ sort-bed.\n\n USAGE:\n   0) --help or --version           Print requested info\
  \ and exit successfully\n   1) --list-chr <input.bed>        Print all unique chromosome\
  \ names found in <input.bed>\n   2) <chromosome> <input.bed>      Retrieve all rows\
  \ for chr8 with:  bedextract chr8 <input.bed>\n   3) <query.bed> <target>      \
  \    Grab elements from the <query.bed> that overlap elements in <target>. Same\
  \ as\n                                     `bedops -e 1 <query.bed> <target>`, except\
  \ that this option fails silently\n                                      if <query.bed>\
  \ contains fully-nested BED elements.  If no fully-nested\n                    \
  \                  element exists, bedextract can vastly improve upon the performance\
  \ of bedops.\n                                      <target> may be a BED or Starch\
  \ file (with or without fully-nested elements).\n                              \
  \        Using '-' for <target> indicates input (in BED format) comes from stdin.\n\
  \n"
generated_using:
- --help
