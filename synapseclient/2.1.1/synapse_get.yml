&id003 !Command
command:
- synapse
- get
positional:
- !Positional
  description: Synapse ID of form syn123 of desired data object.
  position: 0
  name: syn123
  optional: false
named:
- !Flag
  description: "Optional query parameter, will fetch all of the\nentities returned\
    \ by a query (see query for help)."
  synonyms:
  - -q
  - --query
  args: !SimpleFlagArg
    name: queryString
  optional: true
- !Flag
  description: "Fetches content in Synapse recursively contained in\nthe parentId\
    \ specified by id."
  synonyms:
  - -r
  - --recursive
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Determines whether the link returns the target Entity.
  synonyms:
  - --followLink
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Synapse ID of a container such as project or folder to\nlimit search\
    \ for files if using a path."
  synonyms:
  - --limitSearch
  args: !SimpleFlagArg
    name: projId
  optional: true
- !Flag
  description: 'Directory to download file to [default: ./].'
  synonyms:
  - --downloadLocation
  args: !SimpleFlagArg
    name: path
  optional: true
- !Flag
  description: "Download file using a multiple threaded\nimplementation. This flag\
    \ will be removed in the\nfuture when multi-threaded download is deemed fully\n\
    stable and becomes the default implementation.\n"
  synonyms:
  - --multiThreaded
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ''
  synonyms:
  - -v
  args: !SimpleFlagArg
    name: VERSION
  optional: true
parent: &id001 !Command
  command:
  - synapse
  positional: []
  named:
  - !Flag
    description: Username used to connect to Synapse
    synonyms:
    - -u
    - --username
    args: !SimpleFlagArg
      name: SYNAPSEUSER
    optional: true
  - !Flag
    description: Password used to connect to Synapse
    synonyms:
    - -p
    - --password
    args: !SimpleFlagArg
      name: SYNAPSEPASSWORD
    optional: true
  - !Flag
    description: "Path to configuration file used to connect to Synapse\n[default:\
      \ /root/.synapseConfig]"
    synonyms:
    - -c
    - --configPath
    args: !SimpleFlagArg
      name: CONFIGPATH
    optional: true
  - !Flag
    description: ''
    synonyms:
    - --debug
    args: !EmptyFlagArg {}
    optional: true
  - !Flag
    description: "suppress checking for version upgrade messages and\nendpoint redirection"
    synonyms:
    - -s
    - --skip-checks
    args: !EmptyFlagArg {}
    optional: true
  parent:
  subcommands:
  - !Command
    command:
    - synapse
    - set-provenance
    positional: []
    named:
    - !Flag
      description: "Synapse ID of entity whose provenance we are\naccessing."
      synonyms:
      - -id
      - --id
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: Name of the activity that generated the entity
      synonyms:
      - -name
      - --name
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Description of the activity that generated the entity
      synonyms:
      - -description
      - --description
      args: !SimpleFlagArg
        name: DESCRIPTION
      optional: true
    - !Flag
      description: "[OUTPUT_FILE], -output [OUTPUT_FILE], --output [OUTPUT_FILE]\n\
        Output the provenance record in JSON format"
      synonyms:
      - -o
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[target [target ...]], --used [target [target ...]]\nSynapse ID,\
        \ a url, or a local file path (of a file\npreviouslyuploaded to Synapse) from\
        \ which the\nspecified entity is derived"
      synonyms:
      - -used
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[target [target ...]], --executed [target [target ...]]\nSynapse\
        \ ID, a url, or a local file path (of a file\npreviouslyuploaded to Synapse)\
        \ that was executed to\ngenerate the specified entity"
      synonyms:
      - -executed
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Synapse ID of a container such as project or folder to\nlimit\
        \ search for provenance files.\n"
      synonyms:
      - -limitSearch
      - --limitSearch
      args: !SimpleFlagArg
        name: projId
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse set-provenance [-h] -id syn123 [-name NAME]\n     \
      \                         [-description DESCRIPTION] [-o [OUTPUT_FILE]]\n  \
      \                            [-used [target [target ...]]]\n               \
      \               [-executed [target [target ...]]]\n                        \
      \      [-limitSearch projId]\n\noptional arguments:\n  -h, --help          \
      \  show this help message and exit\n  -id syn123, --id syn123\n            \
      \            Synapse ID of entity whose provenance we are\n                \
      \        accessing.\n  -name NAME, --name NAME\n                        Name\
      \ of the activity that generated the entity\n  -description DESCRIPTION, --description\
      \ DESCRIPTION\n                        Description of the activity that generated\
      \ the entity\n  -o [OUTPUT_FILE], -output [OUTPUT_FILE], --output [OUTPUT_FILE]\n\
      \                        Output the provenance record in JSON format\n  -used\
      \ [target [target ...]], --used [target [target ...]]\n                    \
      \    Synapse ID, a url, or a local file path (of a file\n                  \
      \      previouslyuploaded to Synapse) from which the\n                     \
      \   specified entity is derived\n  -executed [target [target ...]], --executed\
      \ [target [target ...]]\n                        Synapse ID, a url, or a local\
      \ file path (of a file\n                        previouslyuploaded to Synapse)\
      \ that was executed to\n                        generate the specified entity\n\
      \  -limitSearch projId, --limitSearch projId\n                        Synapse\
      \ ID of a container such as project or folder to\n                        limit\
      \ search for provenance files.\n"
    generated_using: &id002
    - --help
  - !Command
    command:
    - synapse
    - store-table
    positional: []
    named:
    - !Flag
      description: Name of Table
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Synapse ID of project
      synonyms:
      - --parentid
      - --parentId
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: Path to csv
      synonyms:
      - --csv
      args: !SimpleFlagArg
        name: foo.csv
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse store-table [-h] --name NAME [--parentid syn123]\n\
      \                           [--csv foo.csv]\n\noptional arguments:\n  -h, --help\
      \            show this help message and exit\n  --name NAME           Name of\
      \ Table\n  --parentid syn123, --parentId syn123\n                        Synapse\
      \ ID of project\n  --csv foo.csv         Path to csv\n"
    generated_using: *id002
  - !Command
    command:
    - synapse
    - query
    positional:
    - !Positional
      description: ''
      position: 0
      name: synapse
      optional: false
    named:
    - !Flag
      description: ''
      synonyms:
      - -p
      args: !SimpleFlagArg
        name: SYNAPSEPASSWORD
      optional: true
    - !Flag
      description: ''
      synonyms:
      - -u
      args: !SimpleFlagArg
        name: SYNAPSEUSER
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: ''
      synonyms:
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "usage: synapse [-h] [--version] [-u SYNAPSEUSER] [-p SYNAPSEPASSWORD]\n\
      \               [-c CONFIGPATH] [--debug] [-s]\n               {get,sync,store,add,mv,cp,associate,delete,query,submit,show,cat,list,set-provenance,get-provenance,set-annotations,get-annotations,create,store-table,onweb,login,test-encoding,get-sts-token}\n\
      \               ...\nsynapse: error: unrecognized arguments: --usage\n"
    generated_using: &id005
    - --usage
  - !Command
    command:
    - synapse
    - mv
    positional: []
    named:
    - !Flag
      description: Id of entity in Synapse to be moved.
      synonyms:
      - --id
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: "Synapse ID of project or folder where file/folder will\nbe moved\n"
      synonyms:
      - --parentid
      - --parentId
      - -parentid
      - -parentId
      args: !SimpleFlagArg
        name: syn123
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse mv [-h] --id syn123 --parentid syn123\n\noptional arguments:\n\
      \  -h, --help            show this help message and exit\n  --id syn123    \
      \       Id of entity in Synapse to be moved.\n  --parentid syn123, --parentId\
      \ syn123, -parentid syn123, -parentId syn123\n                        Synapse\
      \ ID of project or folder where file/folder will\n                        be\
      \ moved\n"
    generated_using: *id002
  - !Command
    command:
    - synapse
    - associate
    positional:
    - !Positional
      description: local file path
      position: 0
      name: path
      optional: false
    named:
    - !Flag
      description: "Synapse ID of a container such as project or folder to\nlimit\
        \ search to."
      synonyms:
      - --limitSearch
      args: !SimpleFlagArg
        name: projId
      optional: true
    - !Flag
      description: "Perform recursive association with all local files in\na folder\n"
      synonyms:
      - -r
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse associate [-h] [--limitSearch projId] [-r] path\n\n\
      positional arguments:\n  path                  local file path\n\noptional arguments:\n\
      \  -h, --help            show this help message and exit\n  --limitSearch projId\
      \  Synapse ID of a container such as project or folder to\n                \
      \        limit search to.\n  -r                    Perform recursive association\
      \ with all local files in\n                        a folder\n"
    generated_using: *id002
  - *id003
  - &id004 !Command
    command:
    - synapse
    - onweb
    positional: []
    named: []
    parent: *id001
    subcommands:
    - !Command
      command:
      - synapse
      - onweb
      - id
      positional:
      - !Positional
        description: ''
        position: 0
        name: synapse
        optional: false
      named:
      - !Flag
        description: ''
        synonyms:
        - -p
        args: !SimpleFlagArg
          name: SYNAPSEPASSWORD
        optional: true
      - !Flag
        description: ''
        synonyms:
        - -u
        args: !SimpleFlagArg
          name: SYNAPSEUSER
        optional: true
      parent: *id004
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag: !Flag
        description: ''
        synonyms:
        - --version
        args: !EmptyFlagArg {}
        optional: true
      help_text: "usage: synapse [-h] [--version] [-u SYNAPSEUSER] [-p SYNAPSEPASSWORD]\n\
        \               [-c CONFIGPATH] [--debug] [-s]\n               {get,sync,store,add,mv,cp,associate,delete,query,submit,show,cat,list,set-provenance,get-provenance,set-annotations,get-annotations,create,store-table,onweb,login,test-encoding,get-sts-token}\n\
        \               ...\nsynapse: error: unrecognized arguments: --usage\n"
      generated_using: *id005
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse onweb [-h] id\n\npositional arguments:\n  id      \
      \    Synapse id\n\noptional arguments:\n  -h, --help  show this help message\
      \ and exit\n"
    generated_using: *id002
  - !Command
    command:
    - synapse
    - submit
    positional: []
    named:
    - !Flag
      description: Evaluation ID where the entity/file will be submitted
      synonyms:
      - --evaluationID
      - --evaluationId
      - --evalID
      args: !SimpleFlagArg
        name: EVALUATIONID
      optional: true
    - !Flag
      description: "Evaluation Name where the entity/file will be\nsubmitted"
      synonyms:
      - --evaluationName
      - --evalN
      args: !SimpleFlagArg
        name: EVALUATIONNAME
      optional: true
    - !Flag
      description: Synapse ID of the entity to be submitted
      synonyms:
      - --entity
      - --eid
      - --entityId
      - --id
      args: !SimpleFlagArg
        name: ENTITY
      optional: true
    - !Flag
      description: File to be submitted to the challenge
      synonyms:
      - --file
      - -f
      args: !SimpleFlagArg
        name: FILE
      optional: true
    - !Flag
      description: Synapse ID of project or folder where to upload data
      synonyms:
      - --parentId
      - --parentid
      - --parent
      args: !SimpleFlagArg
        name: PARENTID
      optional: true
    - !Flag
      description: Name of the submission
      synonyms:
      - --name
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Submit of behalf of a registered team
      synonyms:
      - --teamName
      - --team
      args: !SimpleFlagArg
        name: TEAMNAME
      optional: true
    - !Flag
      description: A nickname, possibly for display in leaderboards
      synonyms:
      - --submitterAlias
      - --alias
      args: !SimpleFlagArg
        name: ALIAS
      optional: true
    - !Flag
      description: "[target [target ...]]\nSynapse ID, a url, or a local file path\
        \ (of a file\npreviouslyuploaded to Synapse) from which the\nspecified entity\
        \ is derived"
      synonyms:
      - --used
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[target [target ...]]\nSynapse ID, a url, or a local file path\
        \ (of a file\npreviouslyuploaded to Synapse) that was executed to\ngenerate\
        \ the specified entity"
      synonyms:
      - --executed
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Synapse ID of a container such as project or folder to\nlimit\
        \ search for provenance files.\n"
      synonyms:
      - --limitSearch
      args: !SimpleFlagArg
        name: projId
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse submit [-h] [--evaluationID EVALUATIONID]\n       \
      \               [--evaluationName EVALUATIONNAME] [--entity ENTITY]\n      \
      \                [--file FILE] [--parentId PARENTID] [--name NAME]\n       \
      \               [--teamName TEAMNAME] [--submitterAlias ALIAS]\n           \
      \           [--used [target [target ...]]]\n                      [--executed\
      \ [target [target ...]]]\n                      [--limitSearch projId]\n\noptional\
      \ arguments:\n  -h, --help            show this help message and exit\n  --evaluationID\
      \ EVALUATIONID, --evaluationId EVALUATIONID, --evalID EVALUATIONID\n       \
      \                 Evaluation ID where the entity/file will be submitted\n  --evaluationName\
      \ EVALUATIONNAME, --evalN EVALUATIONNAME\n                        Evaluation\
      \ Name where the entity/file will be\n                        submitted\n  --entity\
      \ ENTITY, --eid ENTITY, --entityId ENTITY, --id ENTITY\n                   \
      \     Synapse ID of the entity to be submitted\n  --file FILE, -f FILE  File\
      \ to be submitted to the challenge\n  --parentId PARENTID, --parentid PARENTID,\
      \ --parent PARENTID\n                        Synapse ID of project or folder\
      \ where to upload data\n  --name NAME           Name of the submission\n  --teamName\
      \ TEAMNAME, --team TEAMNAME\n                        Submit of behalf of a registered\
      \ team\n  --submitterAlias ALIAS, --alias ALIAS\n                        A nickname,\
      \ possibly for display in leaderboards\n  --used [target [target ...]]\n   \
      \                     Synapse ID, a url, or a local file path (of a file\n \
      \                       previouslyuploaded to Synapse) from which the\n    \
      \                    specified entity is derived\n  --executed [target [target\
      \ ...]]\n                        Synapse ID, a url, or a local file path (of\
      \ a file\n                        previouslyuploaded to Synapse) that was executed\
      \ to\n                        generate the specified entity\n  --limitSearch\
      \ projId  Synapse ID of a container such as project or folder to\n         \
      \               limit search for provenance files.\n"
    generated_using: *id002
  - &id006 !Command
    command:
    - synapse
    - get-provenance
    positional: []
    named:
    - !Flag
      description: "Synapse ID of entity whose provenance we are\naccessing."
      synonyms:
      - -id
      - --id
      args: !SimpleFlagArg
        name: syn123
      optional: true
    parent: *id001
    subcommands:
    - !Command
      command:
      - synapse
      - get-provenance
      - accessing.
      positional:
      - !Positional
        description: ''
        position: 0
        name: synapse
        optional: false
      - !Positional
        description: ''
        position: 1
        name: get-provenance
        optional: false
      named:
      - !Flag
        description: ''
        synonyms:
        - -id
        args: !SimpleFlagArg
          name: syn123
        optional: true
      parent: *id006
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag: !Flag
        description: ''
        synonyms:
        - --version
        args: !SimpleFlagArg
          name: version
        optional: true
      help_text: "usage: synapse get-provenance [-h] -id syn123 [--version version]\n\
        \                              [-o [OUTPUT_FILE]]\nsynapse get-provenance:\
        \ error: the following arguments are required: -id/--id\n"
      generated_using: &id011 []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: version of Synapse entity whose provenance we are
      synonyms:
      - --version
      args: !SimpleFlagArg
        name: version
      optional: true
    help_text: "usage: synapse get-provenance [-h] -id syn123 [--version version]\n\
      \                              [-o [OUTPUT_FILE]]\n\noptional arguments:\n \
      \ -h, --help            show this help message and exit\n  -id syn123, --id\
      \ syn123\n                        Synapse ID of entity whose provenance we are\n\
      \                        accessing.\n  --version version     version of Synapse\
      \ entity whose provenance we are\n                        accessing.\n  -o [OUTPUT_FILE],\
      \ -output [OUTPUT_FILE], --output [OUTPUT_FILE]\n                        Output\
      \ the provenance record in JSON format\n"
    generated_using: *id002
  - &id007 !Command
    command:
    - synapse
    - cat
    positional: []
    named:
    - !Flag
      description: ''
      synonyms:
      - -v
      args: !SimpleFlagArg
        name: VERSION
      optional: true
    parent: *id001
    subcommands:
    - !Command
      command:
      - synapse
      - cat
      - syn123
      positional:
      - !Positional
        description: ''
        position: 0
        name: synapse
        optional: false
      named:
      - !Flag
        description: ''
        synonyms:
        - -p
        args: !SimpleFlagArg
          name: SYNAPSEPASSWORD
        optional: true
      - !Flag
        description: ''
        synonyms:
        - -u
        args: !SimpleFlagArg
          name: SYNAPSEUSER
        optional: true
      parent: *id007
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag: !Flag
        description: ''
        synonyms:
        - --version
        args: !EmptyFlagArg {}
        optional: true
      help_text: "usage: synapse [-h] [--version] [-u SYNAPSEUSER] [-p SYNAPSEPASSWORD]\n\
        \               [-c CONFIGPATH] [--debug] [-s]\n               {get,sync,store,add,mv,cp,associate,delete,query,submit,show,cat,list,set-provenance,get-provenance,set-annotations,get-annotations,create,store-table,onweb,login,test-encoding,get-sts-token}\n\
        \               ...\nsynapse: error: unrecognized arguments: --usage\n"
      generated_using: *id005
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: "Synapse version number of entity to display. Defaults\nto most\
        \ recent version.\n"
      synonyms:
      - -v
      - --version
      args: !SimpleFlagArg
        name: VERSION
      optional: true
    help_text: "usage: synapse cat [-h] [-v VERSION] syn123\n\npositional arguments:\n\
      \  syn123                Synapse ID of form syn123 of desired data object\n\n\
      optional arguments:\n  -h, --help            show this help message and exit\n\
      \  -v VERSION, --version VERSION\n                        Synapse version number\
      \ of entity to display. Defaults\n                        to most recent version.\n"
    generated_using: *id002
  - !Command
    command:
    - synapse
    - cp
    positional: []
    named:
    - !Flag
      description: "Synapse ID of project or folder where file will be\ncopied to."
      synonyms:
      - --destinationId
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: "Has three values to set the provenance of the copied\nentity-traceback:\
        \ Sets to the source entityexisting:\nSets to source entity's original provenance\
        \ (if it\nexists)None/none: No provenance is set"
      synonyms:
      - --setProvenance
      args: !SimpleFlagArg
        name: traceback
      optional: true
    - !Flag
      description: "Will update the file if there is already a file that\nis named\
        \ the same in the destination"
      synonyms:
      - --updateExisting
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not copy the annotations
      synonyms:
      - --skipCopyAnnotations
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[file table [file table ...]]\nAccepts a list of entity types\
        \ (file, table, link)\nwhich determines which entity types to not copy."
      synonyms:
      - --excludeTypes
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: Do not copy the wiki pages
      synonyms:
      - --skipCopyWiki
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: "Synapse version number of File or Link to retrieve.\nThis parameter\
        \ cannot be used when copying Projects or\nFolders. Defaults to most recent\
        \ version."
      synonyms:
      - --version
      - -v
      args: !SimpleFlagArg
        name: '1'
      optional: true
    help_text: "usage: synapse cp [-h] --destinationId syn123 [--version 1]\n    \
      \              [--setProvenance traceback] [--updateExisting]\n            \
      \      [--skipCopyAnnotations]\n                  [--excludeTypes [file table\
      \ [file table ...]]]\n                  [--skipCopyWiki]\n                 \
      \ syn123\n\npositional arguments:\n  syn123                Id of entity in Synapse\
      \ to be copied.\n\noptional arguments:\n  -h, --help            show this help\
      \ message and exit\n  --destinationId syn123\n                        Synapse\
      \ ID of project or folder where file will be\n                        copied\
      \ to.\n  --version 1, -v 1     Synapse version number of File or Link to retrieve.\n\
      \                        This parameter cannot be used when copying Projects\
      \ or\n                        Folders. Defaults to most recent version.\n  --setProvenance\
      \ traceback\n                        Has three values to set the provenance\
      \ of the copied\n                        entity-traceback: Sets to the source\
      \ entityexisting:\n                        Sets to source entity's original\
      \ provenance (if it\n                        exists)None/none: No provenance\
      \ is set\n  --updateExisting      Will update the file if there is already a\
      \ file that\n                        is named the same in the destination\n\
      \  --skipCopyAnnotations\n                        Do not copy the annotations\n\
      \  --excludeTypes [file table [file table ...]]\n                        Accepts\
      \ a list of entity types (file, table, link)\n                        which\
      \ determines which entity types to not copy.\n  --skipCopyWiki        Do not\
      \ copy the wiki pages\n"
    generated_using: *id002
  - &id008 !Command
    command:
    - synapse
    - delete
    positional: []
    named: []
    parent: *id001
    subcommands:
    - !Command
      command:
      - synapse
      - delete
      - syn123
      positional:
      - !Positional
        description: ''
        position: 0
        name: synapse
        optional: false
      named:
      - !Flag
        description: ''
        synonyms:
        - -p
        args: !SimpleFlagArg
          name: SYNAPSEPASSWORD
        optional: true
      - !Flag
        description: ''
        synonyms:
        - -u
        args: !SimpleFlagArg
          name: SYNAPSEUSER
        optional: true
      parent: *id008
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag: !Flag
        description: ''
        synonyms:
        - --version
        args: !EmptyFlagArg {}
        optional: true
      help_text: "usage: synapse [-h] [--version] [-u SYNAPSEUSER] [-p SYNAPSEPASSWORD]\n\
        \               [-c CONFIGPATH] [--debug] [-s]\n               {get,sync,store,add,mv,cp,associate,delete,query,submit,show,cat,list,set-provenance,get-provenance,set-annotations,get-annotations,create,store-table,onweb,login,test-encoding,get-sts-token}\n\
        \               ...\nsynapse: error: unrecognized arguments: --usage\n"
      generated_using: *id005
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: Version number to delete of given entity.
      synonyms:
      - --version
      args: !SimpleFlagArg
        name: VERSION
      optional: true
    help_text: "usage: synapse delete [-h] [--version VERSION] syn123\n\npositional\
      \ arguments:\n  syn123             Synapse ID of form syn123 of desired data\
      \ object\n\noptional arguments:\n  -h, --help         show this help message\
      \ and exit\n  --version VERSION  Version number to delete of given entity.\n"
    generated_using: *id002
  - !Command
    command:
    - synapse
    - create
    positional: []
    named:
    - !Flag
      description: "Synapse ID of project or folder where to place folder\n[not used\
        \ with project]"
      synonyms:
      - -parentid
      - -parentId
      - --parentid
      - --parentId
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: Name of folder/project.
      synonyms:
      - -name
      - --name
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Description of project/folder
      synonyms:
      - -description
      - --description
      args: !SimpleFlagArg
        name: DESCRIPTION
      optional: true
    - !Flag
      description: "Path to a markdown file containing description of\nproject/folder\n"
      synonyms:
      - -descriptionFile
      - --descriptionFile
      args: !SimpleFlagArg
        name: DESCRIPTION_FILE_PATH
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse create [-h] [-parentid syn123] -name NAME\n       \
      \               [-description DESCRIPTION | -descriptionFile DESCRIPTION_FILE_PATH]\n\
      \                      type\n\npositional arguments:\n  type               \
      \   Type of object to create in synapse one of {Project,\n                 \
      \       Folder}\n\noptional arguments:\n  -h, --help            show this help\
      \ message and exit\n  -parentid syn123, -parentId syn123, --parentid syn123,\
      \ --parentId syn123\n                        Synapse ID of project or folder\
      \ where to place folder\n                        [not used with project]\n \
      \ -name NAME, --name NAME\n                        Name of folder/project.\n\
      \  -description DESCRIPTION, --description DESCRIPTION\n                   \
      \     Description of project/folder\n  -descriptionFile DESCRIPTION_FILE_PATH,\
      \ --descriptionFile DESCRIPTION_FILE_PATH\n                        Path to a\
      \ markdown file containing description of\n                        project/folder\n"
    generated_using: *id002
  - !Command
    command:
    - synapse
    - store
    positional:
    - !Positional
      description: file to be added to synapse.
      position: 0
      name: FILE
      optional: false
    named:
    - !Flag
      description: "Synapse ID of project or folder where to upload data\n(must be\
        \ specified if --id is not used."
      synonyms:
      - --parentid
      - --parentId
      - -parentid
      - -parentId
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: Optional Id of entity in Synapse to be updated.
      synonyms:
      - --id
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: "Type of object, such as \"File\", \"Folder\", or\n\"Project\"\
        , to create in Synapse. Defaults to \"File\""
      synonyms:
      - --type
      args: !SimpleFlagArg
        name: TYPE
      optional: true
    - !Flag
      description: Name of data object in Synapse
      synonyms:
      - --name
      - -name
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Description of data object in Synapse.
      synonyms:
      - --description
      - -description
      args: !SimpleFlagArg
        name: DESCRIPTION
      optional: true
    - !Flag
      description: "Path to a markdown file containing description of\nproject/folder"
      synonyms:
      - --descriptionFile
      - -descriptionFile
      args: !SimpleFlagArg
        name: DESCRIPTION_FILE_PATH
      optional: true
    - !Flag
      description: "[target [target ...]], -used [target [target ...]]\nSynapse ID,\
        \ a url, or a local file path (of a file\npreviouslyuploaded to Synapse) from\
        \ which the\nspecified entity is derived"
      synonyms:
      - --used
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[target [target ...]], -executed [target [target ...]]\nSynapse\
        \ ID, a url, or a local file path (of a file\npreviouslyuploaded to Synapse)\
        \ that was executed to\ngenerate the specified entity"
      synonyms:
      - --executed
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Synapse ID of a container such as project or folder to\nlimit\
        \ search for provenance files."
      synonyms:
      - --limitSearch
      args: !SimpleFlagArg
        name: projId
      optional: true
    - !Flag
      description: "Do not force a new version to be created if the\ncontents of the\
        \ file have not changed. The default is\na new version is created."
      synonyms:
      - --noForceVersion
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Annotations to add as a JSON formatted string, should\nevaluate\
        \ to a dictionary (key/value pairs). Example:\n'{\"foo\": 1, \"bar\":\"quux\"\
        }'"
      synonyms:
      - --annotations
      args: !SimpleFlagArg
        name: ANNOTATIONS
      optional: true
    - !Flag
      description: "Replace all existing annotations with the given\nannotations\n"
      synonyms:
      - --replace
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse store [-h] (--parentid syn123 | --id syn123 | --type\
      \ TYPE)\n                     [--name NAME]\n                     [--description\
      \ DESCRIPTION | --descriptionFile DESCRIPTION_FILE_PATH]\n                 \
      \    [--used [target [target ...]]]\n                     [--executed [target\
      \ [target ...]]] [--limitSearch projId]\n                     [--noForceVersion]\
      \ [--annotations ANNOTATIONS]\n                     [--replace]\n          \
      \           [FILE]\n\npositional arguments:\n  FILE                  file to\
      \ be added to synapse.\n\noptional arguments:\n  -h, --help            show\
      \ this help message and exit\n  --parentid syn123, --parentId syn123, -parentid\
      \ syn123, -parentId syn123\n                        Synapse ID of project or\
      \ folder where to upload data\n                        (must be specified if\
      \ --id is not used.\n  --id syn123           Optional Id of entity in Synapse\
      \ to be updated.\n  --type TYPE           Type of object, such as \"File\",\
      \ \"Folder\", or\n                        \"Project\", to create in Synapse.\
      \ Defaults to \"File\"\n  --name NAME, -name NAME\n                        Name\
      \ of data object in Synapse\n  --description DESCRIPTION, -description DESCRIPTION\n\
      \                        Description of data object in Synapse.\n  --descriptionFile\
      \ DESCRIPTION_FILE_PATH, -descriptionFile DESCRIPTION_FILE_PATH\n          \
      \              Path to a markdown file containing description of\n         \
      \               project/folder\n  --used [target [target ...]], -used [target\
      \ [target ...]]\n                        Synapse ID, a url, or a local file\
      \ path (of a file\n                        previouslyuploaded to Synapse) from\
      \ which the\n                        specified entity is derived\n  --executed\
      \ [target [target ...]], -executed [target [target ...]]\n                 \
      \       Synapse ID, a url, or a local file path (of a file\n               \
      \         previouslyuploaded to Synapse) that was executed to\n            \
      \            generate the specified entity\n  --limitSearch projId  Synapse\
      \ ID of a container such as project or folder to\n                        limit\
      \ search for provenance files.\n  --noForceVersion      Do not force a new version\
      \ to be created if the\n                        contents of the file have not\
      \ changed. The default is\n                        a new version is created.\n\
      \  --annotations ANNOTATIONS\n                        Annotations to add as\
      \ a JSON formatted string, should\n                        evaluate to a dictionary\
      \ (key/value pairs). Example:\n                        '{\"foo\": 1, \"bar\"\
      :\"quux\"}'\n  --replace             Replace all existing annotations with the\
      \ given\n                        annotations\n"
    generated_using: *id002
  - &id009 !Command
    command:
    - synapse
    - show
    positional: []
    named:
    - !Flag
      description: "Synapse ID of a container such as project or folder to\nlimit\
        \ search for provenance files.\n"
      synonyms:
      - --limitSearch
      args: !SimpleFlagArg
        name: projId
      optional: true
    parent: *id001
    subcommands:
    - !Command
      command:
      - synapse
      - show
      - syn123
      positional:
      - !Positional
        description: ''
        position: 0
        name: synapse
        optional: false
      named:
      - !Flag
        description: ''
        synonyms:
        - -p
        args: !SimpleFlagArg
          name: SYNAPSEPASSWORD
        optional: true
      - !Flag
        description: ''
        synonyms:
        - -u
        args: !SimpleFlagArg
          name: SYNAPSEUSER
        optional: true
      parent: *id009
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag: !Flag
        description: ''
        synonyms:
        - --version
        args: !EmptyFlagArg {}
        optional: true
      help_text: "usage: synapse [-h] [--version] [-u SYNAPSEUSER] [-p SYNAPSEPASSWORD]\n\
        \               [-c CONFIGPATH] [--debug] [-s]\n               {get,sync,store,add,mv,cp,associate,delete,query,submit,show,cat,list,set-provenance,get-provenance,set-annotations,get-annotations,create,store-table,onweb,login,test-encoding,get-sts-token}\n\
        \               ...\nsynapse: error: unrecognized arguments: --usage\n"
      generated_using: *id005
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse show [-h] [--limitSearch projId] syn123\n\npositional\
      \ arguments:\n  syn123                Synapse ID of form syn123 of desired synapse\
      \ object\n\noptional arguments:\n  -h, --help            show this help message\
      \ and exit\n  --limitSearch projId  Synapse ID of a container such as project\
      \ or folder to\n                        limit search for provenance files.\n"
    generated_using: *id002
  - !Command
    command:
    - synapse
    - list
    positional:
    - !Positional
      description: Synapse ID of a project or folder
      position: 0
      name: syn123
      optional: false
    named:
    - !Flag
      description: "recursively list contents of the subtree descending from\nthe\
        \ given Synapse ID"
      synonyms:
      - -r
      - --recursive
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: List synapse entities in long format
      synonyms:
      - -l
      - --long
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: List modified by and modified date
      synonyms:
      - -m
      - --modified
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse list [-h] [-r] [-l] [-m] syn123\n\npositional arguments:\n\
      \  syn123           Synapse ID of a project or folder\n\noptional arguments:\n\
      \  -h, --help       show this help message and exit\n  -r, --recursive  recursively\
      \ list contents of the subtree descending from\n                   the given\
      \ Synapse ID\n  -l, --long       List synapse entities in long format\n  -m,\
      \ --modified   List modified by and modified date\n"
    generated_using: *id002
  - &id010 !Command
    command:
    - synapse
    - set-annotations
    positional: []
    named:
    - !Flag
      description: Synapse ID of entity whose annotations we are
      synonyms:
      - --id
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: "Replace all existing annotations with the given\nannotations\n"
      synonyms:
      - -r
      - --replace
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --annotations
      args: !SimpleFlagArg
        name: ANNOTATIONS
      optional: true
    parent: *id001
    subcommands:
    - !Command
      command:
      - synapse
      - set-annotations
      - accessing.
      positional:
      - !Positional
        description: ''
        position: 0
        name: synapse
        optional: false
      - !Positional
        description: ''
        position: 1
        name: set-annotations
        optional: false
      named:
      - !Flag
        description: ''
        synonyms:
        - -r
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: ''
        synonyms:
        - --annotations
        args: !SimpleFlagArg
          name: ANNOTATIONS
        optional: true
      - !Flag
        description: ''
        synonyms:
        - --id
        args: !SimpleFlagArg
          name: syn123
        optional: true
      parent: *id010
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: synapse set-annotations [-h] --id syn123 --annotations ANNOTATIONS\
        \ [-r]\nsynapse set-annotations: error: the following arguments are required:\
        \ --id, --annotations\n"
      generated_using: *id011
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse set-annotations [-h] --id syn123 --annotations ANNOTATIONS\
      \ [-r]\n\noptional arguments:\n  -h, --help            show this help message\
      \ and exit\n  --id syn123           Synapse ID of entity whose annotations we\
      \ are\n                        accessing.\n  --annotations ANNOTATIONS\n   \
      \                     Annotations to add as a JSON formatted string, should\n\
      \                        evaluate to a dictionary (key/value pairs). Example:\n\
      \                        '{\"foo\": 1, \"bar\":\"quux\"}'\n  -r, --replace \
      \        Replace all existing annotations with the given\n                 \
      \       annotations\n"
    generated_using: *id002
  - !Command
    command:
    - synapse
    - test-encoding
    positional:
    - !Positional
      description: ''
      position: 0
      name: synapse
      optional: false
    named:
    - !Flag
      description: ''
      synonyms:
      - -p
      args: !SimpleFlagArg
        name: SYNAPSEPASSWORD
      optional: true
    - !Flag
      description: ''
      synonyms:
      - -u
      args: !SimpleFlagArg
        name: SYNAPSEUSER
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: ''
      synonyms:
      - -h
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag: !Flag
      description: ''
      synonyms:
      - --version
      args: !EmptyFlagArg {}
      optional: true
    help_text: "usage: synapse [-h] [--version] [-u SYNAPSEUSER] [-p SYNAPSEPASSWORD]\n\
      \               [-c CONFIGPATH] [--debug] [-s]\n               {get,sync,store,add,mv,cp,associate,delete,query,submit,show,cat,list,set-provenance,get-provenance,set-annotations,get-annotations,create,store-table,onweb,login,test-encoding,get-sts-token}\n\
      \               ...\nsynapse: error: unrecognized arguments: --usage\n"
    generated_using: *id005
  - !Command
    command:
    - synapse
    - sync
    positional:
    - !Positional
      description: A tsv file with file locations and metadata to be pushed to
      position: 0
      name: FILE
      optional: false
    - !Positional
      description: 'optional arguments:'
      position: 1
      name: Synapse.
      optional: false
    named:
    - !Flag
      description: Perform validation without uploading.
      synonyms:
      - --dryRun
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Send notifications via Synapse messaging (email) at specific\n\
        intervals, on errors and on completion."
      synonyms:
      - --sendMessages
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: ''
      synonyms:
      - --retries
      args: !SimpleFlagArg
        name: INT
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse sync [-h] [--dryRun] [--sendMessages] [--retries INT]\
      \ FILE\n\npositional arguments:\n  FILE            A tsv file with file locations\
      \ and metadata to be pushed to\n                  Synapse.\n\noptional arguments:\n\
      \  -h, --help      show this help message and exit\n  --dryRun        Perform\
      \ validation without uploading.\n  --sendMessages  Send notifications via Synapse\
      \ messaging (email) at specific\n                  intervals, on errors and\
      \ on completion.\n  --retries INT\n"
    generated_using: *id002
  - &id012 !Command
    command:
    - synapse
    - get-annotations
    positional: []
    named:
    - !Flag
      description: Synapse ID of entity whose annotations we are
      synonyms:
      - --id
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: ''
      synonyms:
      - -o
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands:
    - !Command
      command:
      - synapse
      - get-annotations
      - accessing.
      positional:
      - !Positional
        description: ''
        position: 0
        name: synapse
        optional: false
      - !Positional
        description: ''
        position: 1
        name: get-annotations
        optional: false
      - !Positional
        description: ''
        position: 2
        name: OUTPUT_FILE
        optional: true
      named:
      - !Flag
        description: ''
        synonyms:
        - -o
        args: !EmptyFlagArg {}
        optional: true
      - !Flag
        description: ''
        synonyms:
        - --id
        args: !SimpleFlagArg
          name: syn123
        optional: true
      parent: *id012
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: synapse get-annotations [-h] --id syn123 [-o [OUTPUT_FILE]]\n\
        synapse get-annotations: error: the following arguments are required: --id\n"
      generated_using: *id011
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse get-annotations [-h] --id syn123 [-o [OUTPUT_FILE]]\n\
      \noptional arguments:\n  -h, --help            show this help message and exit\n\
      \  --id syn123           Synapse ID of entity whose annotations we are\n   \
      \                     accessing.\n  -o [OUTPUT_FILE], --output [OUTPUT_FILE]\n\
      \                        Output the annotations record in JSON format\n"
    generated_using: *id002
  - &id013 !Command
    command:
    - synapse
    - get-sts-token
    positional: []
    named:
    - !Flag
      description: ''
      synonyms:
      - -o
      - --output
      args: !ChoiceFlagArg
        choices: !!set
          ? shell
          ? boto
          ? bash
          ? powershell
          ? json
          ? cmd
      optional: true
    parent: *id001
    subcommands:
    - !Command
      command:
      - synapse
      - get-sts-token
      - id
      positional:
      - !Positional
        description: ''
        position: 0
        name: synapse
        optional: false
      - !Positional
        description: ''
        position: 1
        name: get-sts-token
        optional: false
      named:
      - !Flag
        description: ''
        synonyms:
        - -o
        args: !ChoiceFlagArg
          choices: !!set
            ? shell
            ? boto
            ? bash
            ? powershell
            ? json
            ? cmd
        optional: true
      parent: *id013
      subcommands: []
      usage: []
      help_flag: !Flag
        description: ''
        synonyms:
        - -h
        args: !EmptyFlagArg {}
        optional: true
      usage_flag:
      version_flag:
      help_text: "usage: synapse get-sts-token [-h] [-o {json,boto,shell,bash,cmd,powershell}]\n\
        \                             id {read_write,read_only}\nsynapse get-sts-token:\
        \ error: the following arguments are required: permission\n"
      generated_using: *id011
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse get-sts-token [-h] [-o {json,boto,shell,bash,cmd,powershell}]\n\
      \                             id {read_write,read_only}\n\npositional arguments:\n\
      \  id                    Synapse id\n  {read_write,read_only}\n\noptional arguments:\n\
      \  -h, --help            show this help message and exit\n  -o {json,boto,shell,bash,cmd,powershell},\
      \ --output {json,boto,shell,bash,cmd,powershell}\n"
    generated_using: *id002
  - !Command
    command:
    - synapse
    - add
    positional:
    - !Positional
      description: file to be added to synapse.
      position: 0
      name: FILE
      optional: false
    named:
    - !Flag
      description: "Synapse ID of project or folder where to upload data\n(must be\
        \ specified if --id is not used."
      synonyms:
      - --parentid
      - --parentId
      - -parentid
      - -parentId
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: Optional Id of entity in Synapse to be updated.
      synonyms:
      - --id
      args: !SimpleFlagArg
        name: syn123
      optional: true
    - !Flag
      description: "Type of object, such as \"File\", \"Folder\", or\n\"Project\"\
        , to create in Synapse. Defaults to \"File\""
      synonyms:
      - --type
      args: !SimpleFlagArg
        name: TYPE
      optional: true
    - !Flag
      description: Name of data object in Synapse
      synonyms:
      - --name
      - -name
      args: !SimpleFlagArg
        name: NAME
      optional: true
    - !Flag
      description: Description of data object in Synapse.
      synonyms:
      - --description
      - -description
      args: !SimpleFlagArg
        name: DESCRIPTION
      optional: true
    - !Flag
      description: "Path to a markdown file containing description of\nproject/folder"
      synonyms:
      - --descriptionFile
      - -descriptionFile
      args: !SimpleFlagArg
        name: DESCRIPTION_FILE_PATH
      optional: true
    - !Flag
      description: "[target [target ...]], -used [target [target ...]]\nSynapse ID,\
        \ a url, or a local file path (of a file\npreviouslyuploaded to Synapse) from\
        \ which the\nspecified entity is derived"
      synonyms:
      - --used
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "[target [target ...]], -executed [target [target ...]]\nSynapse\
        \ ID, a url, or a local file path (of a file\npreviouslyuploaded to Synapse)\
        \ that was executed to\ngenerate the specified entity"
      synonyms:
      - --executed
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Synapse ID of a container such as project or folder to\nlimit\
        \ search for provenance files."
      synonyms:
      - --limitSearch
      args: !SimpleFlagArg
        name: projId
      optional: true
    - !Flag
      description: "Do not force a new version to be created if the\ncontents of the\
        \ file have not changed. The default is\na new version is created."
      synonyms:
      - --noForceVersion
      args: !EmptyFlagArg {}
      optional: true
    - !Flag
      description: "Annotations to add as a JSON formatted string, should\nevaluate\
        \ to a dictionary (key/value pairs). Example:\n'{\"foo\": 1, \"bar\":\"quux\"\
        }'"
      synonyms:
      - --annotations
      args: !SimpleFlagArg
        name: ANNOTATIONS
      optional: true
    - !Flag
      description: "Replace all existing annotations with the given\nannotations\n"
      synonyms:
      - --replace
      args: !EmptyFlagArg {}
      optional: true
    parent: *id001
    subcommands: []
    usage: []
    help_flag: !Flag
      description: show this help message and exit
      synonyms:
      - -h
      - --help
      args: !EmptyFlagArg {}
      optional: true
    usage_flag:
    version_flag:
    help_text: "usage: synapse add [-h] (--parentid syn123 | --id syn123 | --type\
      \ TYPE)\n                   [--name NAME]\n                   [--description\
      \ DESCRIPTION | --descriptionFile DESCRIPTION_FILE_PATH]\n                 \
      \  [--used [target [target ...]]]\n                   [--executed [target [target\
      \ ...]]] [--limitSearch projId]\n                   [--noForceVersion] [--annotations\
      \ ANNOTATIONS] [--replace]\n                   [FILE]\n\npositional arguments:\n\
      \  FILE                  file to be added to synapse.\n\noptional arguments:\n\
      \  -h, --help            show this help message and exit\n  --parentid syn123,\
      \ --parentId syn123, -parentid syn123, -parentId syn123\n                  \
      \      Synapse ID of project or folder where to upload data\n              \
      \          (must be specified if --id is not used.\n  --id syn123          \
      \ Optional Id of entity in Synapse to be updated.\n  --type TYPE           Type\
      \ of object, such as \"File\", \"Folder\", or\n                        \"Project\"\
      , to create in Synapse. Defaults to \"File\"\n  --name NAME, -name NAME\n  \
      \                      Name of data object in Synapse\n  --description DESCRIPTION,\
      \ -description DESCRIPTION\n                        Description of data object\
      \ in Synapse.\n  --descriptionFile DESCRIPTION_FILE_PATH, -descriptionFile DESCRIPTION_FILE_PATH\n\
      \                        Path to a markdown file containing description of\n\
      \                        project/folder\n  --used [target [target ...]], -used\
      \ [target [target ...]]\n                        Synapse ID, a url, or a local\
      \ file path (of a file\n                        previouslyuploaded to Synapse)\
      \ from which the\n                        specified entity is derived\n  --executed\
      \ [target [target ...]], -executed [target [target ...]]\n                 \
      \       Synapse ID, a url, or a local file path (of a file\n               \
      \         previouslyuploaded to Synapse) that was executed to\n            \
      \            generate the specified entity\n  --limitSearch projId  Synapse\
      \ ID of a container such as project or folder to\n                        limit\
      \ search for provenance files.\n  --noForceVersion      Do not force a new version\
      \ to be created if the\n                        contents of the file have not\
      \ changed. The default is\n                        a new version is created.\n\
      \  --annotations ANNOTATIONS\n                        Annotations to add as\
      \ a JSON formatted string, should\n                        evaluate to a dictionary\
      \ (key/value pairs). Example:\n                        '{\"foo\": 1, \"bar\"\
      :\"quux\"}'\n  --replace             Replace all existing annotations with the\
      \ given\n                        annotations\n"
    generated_using: *id002
  usage: []
  help_flag: !Flag
    description: show this help message and exit
    synonyms:
    - -h
    - --help
    args: !EmptyFlagArg {}
    optional: true
  usage_flag:
  version_flag: !Flag
    description: show program's version number and exit
    synonyms:
    - --version
    args: !EmptyFlagArg {}
    optional: true
  help_text: "usage: synapse [-h] [--version] [-u SYNAPSEUSER] [-p SYNAPSEPASSWORD]\n\
    \               [-c CONFIGPATH] [--debug] [-s]\n               {get,sync,store,add,mv,cp,associate,delete,query,submit,show,cat,list,set-provenance,get-provenance,set-annotations,get-annotations,create,store-table,onweb,login,test-encoding,get-sts-token}\n\
    \               ...\n\nInterfaces with the Synapse repository.\n\noptional arguments:\n\
    \  -h, --help            show this help message and exit\n  --version        \
    \     show program's version number and exit\n  -u SYNAPSEUSER, --username SYNAPSEUSER\n\
    \                        Username used to connect to Synapse\n  -p SYNAPSEPASSWORD,\
    \ --password SYNAPSEPASSWORD\n                        Password used to connect\
    \ to Synapse\n  -c CONFIGPATH, --configPath CONFIGPATH\n                     \
    \   Path to configuration file used to connect to Synapse\n                  \
    \      [default: /root/.synapseConfig]\n  --debug\n  -s, --skip-checks     suppress\
    \ checking for version upgrade messages and\n                        endpoint\
    \ redirection\n\ncommands:\n  The following commands are available:\n\n  {get,sync,store,add,mv,cp,associate,delete,query,submit,show,cat,list,set-provenance,get-provenance,set-annotations,get-annotations,create,store-table,onweb,login,test-encoding,get-sts-token}\n\
    \                        For additional help: \"synapse <COMMAND> -h\"\n    get\
    \                 downloads a file from Synapse\n    sync                Synchronize\
    \ files described in a manifest to Synapse\n    store               uploads and\
    \ adds a file to Synapse\n    add                 uploads and adds a file to Synapse\n\
    \    mv                  Moves a file/folder in Synapse\n    cp              \
    \    Copies specific versions of synapse content such as\n                   \
    \     files, folders and projects by recursively copying all\n               \
    \         sub-content\n    associate           Associate local files with the\
    \ files stored in Synapse\n                        so that calls to \"synapse\
    \ get\" and \"synapse show\"\n                        don't re-download the files\
    \ but use the already\n                        existing file.\n    delete    \
    \          removes a dataset from Synapse\n    query               Performs SQL\
    \ like queries on Synapse\n    submit              submit an entity or a file\
    \ for evaluation\n    show                show metadata for an entity\n    cat\
    \                 prints a dataset from Synapse\n    list                List\
    \ Synapse entities contained by the given Project\n                        or\
    \ Folder. Note: May not be supported in future\n                        versions\
    \ of the client.\n    set-provenance      create provenance records\n    get-provenance\
    \      show provenance records\n    set-annotations     create annotations records\n\
    \    get-annotations     show annotations records\n    create              Creates\
    \ folders or projects on Synapse\n    store-table         Creates a Synapse Table\
    \ given a csv\n    onweb               opens Synapse website for Entity\n    login\
    \               login to Synapse and (optionally) cache credentials\n    test-encoding\
    \       test character encoding to help diagnose problems\n    get-sts-token \
    \      Get an STS token for access to AWS S3 storage\n                       \
    \ underlying Synapse\n"
  generated_using: *id002
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: "Synapse version number of entity to retrieve. Defaults\nto most recent\
    \ version."
  synonyms:
  - -v
  - --version
  args: !SimpleFlagArg
    name: VERSION
  optional: true
help_text: "usage: synapse get [-h] [-q queryString] [-v VERSION] [-r] [--followLink]\n\
  \                   [--limitSearch projId] [--downloadLocation path]\n         \
  \          [--multiThreaded]\n                   [syn123]\n\npositional arguments:\n\
  \  syn123                Synapse ID of form syn123 of desired data object.\n\noptional\
  \ arguments:\n  -h, --help            show this help message and exit\n  -q queryString,\
  \ --query queryString\n                        Optional query parameter, will fetch\
  \ all of the\n                        entities returned by a query (see query for\
  \ help).\n  -v VERSION, --version VERSION\n                        Synapse version\
  \ number of entity to retrieve. Defaults\n                        to most recent\
  \ version.\n  -r, --recursive       Fetches content in Synapse recursively contained\
  \ in\n                        the parentId specified by id.\n  --followLink    \
  \      Determines whether the link returns the target Entity.\n  --limitSearch projId\
  \  Synapse ID of a container such as project or folder to\n                    \
  \    limit search for files if using a path.\n  --downloadLocation path\n      \
  \                  Directory to download file to [default: ./].\n  --multiThreaded\
  \       Download file using a multiple threaded\n                        implementation.\
  \ This flag will be removed in the\n                        future when multi-threaded\
  \ download is deemed fully\n                        stable and becomes the default\
  \ implementation.\n"
generated_using: *id002
