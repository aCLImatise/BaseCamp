!Command
positional:
- !Positional
  description: ''
  position: 0
  name: inputVarData.tab
  optional: false
- !Positional
  description: ''
  position: 1
  name: inputFacData.tab
  optional: true
named:
- !Flag
  description: '[ --ppFile ] arg                   Calculate posterior probabilities
    for  each state of each random variable and  output to file.'
  synonyms:
  - -o
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --ncFile ] arg                   Calculate normalization constant
    output to file.'
  synonyms:
  - -n
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --mpsFile ] arg                  Calculate most probable state for
    each  random variable and output to file.'
  synonyms:
  - -m
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Calculate expectancies and output to  file
  synonyms:
  - --expFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: '[ --precision ] arg (=5)           Output precision of real numbers.'
  synonyms:
  - -p
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: For post probs, for each state output  sum of post probs for all the
    other  states for that variable. This retains  precision for post probs very close
    to  one.
  synonyms:
  - --ppSumOther
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: '[ --minusLogarithm ]               Output minus the natural logarithm
    of  result values (program will terminate  on negative results...).'
  synonyms:
  - -l
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'Define the random variables for which  the most probable state (mps)
    should be output. Default is to output the mps  for all random variables. The  specification
    string must be enclosed  in citation marks and whitespace  separated if it includes
    more than one  random variable, e.g.: "X Y".'
  synonyms:
  - --mpsVars
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: "Define the random variables for which  the posterior state probabilities\
    \ (pp)  should be calculated. Default is to  output the pp for all states of all\
    \  random variables (may generate much  output!). Random variables are  specified\
    \ similar to mpsVars, but must  be semicolon (';') separated. It is  possible\
    \ to only output pp's for  certain states, in which case the  following specification\
    \ format is used: \"X=a b c; Y=a b\"."
  synonyms:
  - --ppVars
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: '[ --dfgSpecPrefix ] arg (=./dfgSpec/) Prefix of DFG specification
    files..'
  synonyms:
  - -s
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: (=factorGraph.txt) Specification of the factor graph  structure.
  synonyms:
  - --factorGraphFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: (=variables.txt)  Specification of the state map used by  each variable.
  synonyms:
  - --variablesFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: (=stateMaps.txt)   Specification of state maps.
  synonyms:
  - --stateMapFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: (=factorPotentials.txt) Specification of factor potentials.
  synonyms:
  - --facPotFile
  args: !SimpleFlagArg
    name: arg
  optional: true
- !Flag
  description: Input subscribed variables file in  named data format. Must use same  identifiers
    in same order as varFile
  synonyms:
  - --subVarFile
  args: !SimpleFlagArg
    name: arg
  optional: true
command:
- dfgEval
parent:
subcommands: []
help_flag: !Flag
  description: '[ --help ]                         produce help message'
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "dfgEval allows implementation of discrete factor graphs and evaluates\
  \ the probability of data sets under these models.\n\n  Usage: dfgEval [options]\
  \ <inputVarData.tab> [inputFacData.tab]\n\nThe arguments inputVarData.tab and inputFacData.tab\
  \ are both in named data format.\nAllowed options:\n  -h [ --help ]            \
  \             produce help message\n  -o [ --ppFile ] arg                   Calculate\
  \ posterior probabilities for \n                                        each state\
  \ of each random variable and \n                                        output to\
  \ file.\n  -n [ --ncFile ] arg                   Calculate normalization constant\
  \ output\n                                        to file.\n  -m [ --mpsFile ] arg\
  \                  Calculate most probable state for each \n                   \
  \                     random variable and output to file.\n  --expFile arg     \
  \                    Calculate expectancies and output to \n                   \
  \                     file\n  -p [ --precision ] arg (=5)           Output precision\
  \ of real numbers.\n  --ppSumOther                          For post probs, for\
  \ each state output \n                                        sum of post probs\
  \ for all the other \n                                        states for that variable.\
  \ This retains \n                                        precision for post probs\
  \ very close to \n                                        one.\n  -l [ --minusLogarithm\
  \ ]               Output minus the natural logarithm of \n                     \
  \                   result values (program will terminate \n                   \
  \                     on negative results...).\n  --mpsVars arg                \
  \         Define the random variables for which \n                             \
  \           the most probable state (mps) should be\n                          \
  \              output. Default is to output the mps \n                         \
  \               for all random variables. The \n                               \
  \         specification string must be enclosed \n                             \
  \           in citation marks and whitespace \n                                \
  \        separated if it includes more than one \n                             \
  \           random variable, e.g.: \"X Y\".\n  --ppVars arg                    \
  \      Define the random variables for which \n                                \
  \        the posterior state probabilities (pp) \n                             \
  \           should be calculated. Default is to \n                             \
  \           output the pp for all states of all \n                             \
  \           random variables (may generate much \n                             \
  \           output!). Random variables are \n                                  \
  \      specified similar to mpsVars, but must \n                               \
  \         be semicolon (';') separated. It is \n                               \
  \         possible to only output pp's for \n                                  \
  \      certain states, in which case the \n                                    \
  \    following specification format is used:\n                                 \
  \       \"X=a b c; Y=a b\".\n  -s [ --dfgSpecPrefix ] arg (=./dfgSpec/)\n      \
  \                                  Prefix of DFG specification files..\n  --factorGraphFile\
  \ arg (=factorGraph.txt)\n                                        Specification\
  \ of the factor graph \n                                        structure.\n  --variablesFile\
  \ arg (=variables.txt)  Specification of the state map used by \n              \
  \                          each variable.\n  --stateMapFile arg (=stateMaps.txt)\
  \   Specification of state maps.\n  --facPotFile arg (=factorPotentials.txt)\n \
  \                                       Specification of factor potentials.\n  --subVarFile\
  \ arg                      Input subscribed variables file in \n               \
  \                         named data format. Must use same \n                  \
  \                      identifiers in same order as varFile\n\n"
generated_using:
- --help
