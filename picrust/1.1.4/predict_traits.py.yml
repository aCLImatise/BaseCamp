!Command
command:
- predict_traits.py
positional:
- !Positional
  description: For each terminal (tip) node where a prediction is to be performed,
    the algorithm through the reconstructed ancestral states, and finds the last node
    in the ancestry of our organism of interest for which a prediction is available
  position: 0
  name: '1.'
  optional: false
- !Positional
  description: The trait for the organism is then predicted based on a branch-length
    weighted average of the ancestral node and it's close relatives. (This is necessary
    because technical limitations involving the handling of ambiguous characters in
    many Ancestral State Reconstruction programs prevent the parent node of the organism
    from being directly reconstructed in most cases.)
  position: 1
  name: '2.'
  optional: false
named:
- !Flag
  description: "Print information during execution -- useful for\ndebugging [default:\
    \ False]"
  synonyms:
  - -v
  - --verbose
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "the output filepath for trait predictions [default:\npredicted_states.tsv]"
  synonyms:
  - -o
  - --output_trait_table
  args: !SimpleFlagArg
    name: OUTPUT_TRAIT_TABLE
  optional: true
- !Flag
  description: "if specified, calculate accuracy metrics (i.e. how\naccurate does\
    \ PICRUSt expect its predictions to be?)\nand add to output file [default: False]"
  synonyms:
  - -a
  - --calculate_accuracy_metrics
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "if specified, calculate accuracy metrics (e.g. NSTI),\noutput them\
    \ to this filepath, and do not do anything\nelse. [default: none]"
  synonyms:
  - --output_accuracy_metrics_only
  args: !SimpleFlagArg
    name: OUTPUT_ACCURACY_METRICS_ONLY
  optional: true
- !Flag
  description: "Specify prediction method to use.  The recommended\nprediction method\
    \ is set as default, so other options\nare primarily useful for control experiments\
    \ and\nmethods validation, not typical use.  Valid choices ar\ne:asr_and_weighting,nearest_neighbor,asr_only,weightin\n\
    g_only,random_neighbor.\n\"asr_and_weighting\"(recommended): use ancestral state\n\
    reconstructions plus local weighting with known tip\nnodes.  \"nearest_neighbor\"\
    : predict the closest tip on\nthe tree with trait information.\n\"random_annotated_neighbor\"\
    : predict a random tip on\nthe tree with trait information. \"asr_only\": predict\n\
    the traits of the last reconstructed ancestor, without\nweighting. \"weighting_only\"\
    : weight all genomes by\ndistance, to the organism of interest using the\nspecified\
    \ weighting function and predict the weighted\naverage.   [default: asr_and_weighting]"
  synonyms:
  - -m
  - --prediction_method
  args: !SimpleFlagArg
    name: PREDICTION_METHOD
  optional: true
- !Flag
  description: "Specify prediction the weighting function to use.\nThis only applies\
    \ to prediction methods that\nincorporate local weighting (\"asr_and_weighting\"\
    \ or\n\"weighting_only\")  The recommended weighting  method\nis set as default,\
    \ so other options are primarily\nuseful for control experiments and methods validation,\n\
    not typical use.  Valid choices\nare:exponential,linear,equal.\n\"exponential\"\
    (recommended): weight genomes as a\nnegative exponent of distance.  That is 2^-d,\
    \ where d\nis the tip-to-tip distance from the genome to the tip.\n\"linear\"\
    : weight tips as a linear function of weight,\nnormalized to the maximum possible\
    \ distance (max_d\n-d)/d. \"equal_weights\": set all weights to a constant\n(ignoring\
    \ branch length).   [default: exponential]"
  synonyms:
  - -w
  - --weighting_method
  args: !SimpleFlagArg
    name: WEIGHTING_METHOD
  optional: true
- !Flag
  description: "Specify a valid path to a legacy QIIME OTU table to\nperform predictions\
    \ only for tips that are listed in\nthe OTU table (regardless of abundance)"
  synonyms:
  - -l
  - --limit_predictions_by_otu_table
  args: !SimpleFlagArg
    name: LIMIT_PREDICTIONS_BY_OTU_TABLE
  optional: true
- !Flag
  description: "Limit predictions to specific, comma-separated\norganims ids. (Generally\
    \ only useful for lists of < 10\norganism ids, for example when performing leave-one-\n\
    out cross-validation)."
  synonyms:
  - -g
  - --limit_predictions_to_organisms
  args: !SimpleFlagArg
    name: LIMIT_PREDICTIONS_TO_ORGANISMS
  optional: true
- !Flag
  description: "the input trait table describing reconstructed traits\n(from ancestral_state_reconstruction.py)\
    \ in tab-\ndelimited format [default: none]"
  synonyms:
  - -r
  - --reconstructed_trait_table
  args: !SimpleFlagArg
    name: RECONSTRUCTED_TRAIT_TABLE
  optional: true
- !Flag
  description: "the format for the confidence intervals from ancestral\nstate reconstruction.\
    \ Only needed if passing a\nreconstruction confidence file with -c or\n--reconstruction_confidence.\
    \  These are typically\nsigma values for maximum likelihood ASR  methods, but\n\
    95% confidence intervals for phylogenetic independent\ncontrasts (e.g. from the\
    \ ape R packages ace function\nwith pic as the reconstruction method).  Valid\
    \ choices\nare:sigma,confidence_interval. [default: sigma]"
  synonyms:
  - --confidence_format
  args: !SimpleFlagArg
    name: CONFIDENCE_FORMAT
  optional: true
- !Flag
  description: "the input trait table describing confidence intervals\nfor reconstructed\
    \ traits (from\nancestral_state_reconstruction.py) in tab-delimited\nformat [default:\
    \ none]"
  synonyms:
  - -c
  - --reconstruction_confidence
  args: !SimpleFlagArg
    name: RECONSTRUCTION_CONFIDENCE
  optional: true
- !Flag
  description: "Instead of outputting the precalculated file in tab-\ndelimited format\
    \ (with otu ids as row ids and traits\nas columns) output the data in biom format\
    \ (with otu\nas SampleIds and traits as ObservationIds) [default:\nFalse]"
  synonyms:
  - --output_precalc_file_in_biom
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Flag to set if you do not want predictions to be\nrounded to the nearest\
    \ integer [default: False]"
  synonyms:
  - --no_round
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "the input trait table describing directly observed\ntraits (e.g. sequenced\
    \ genomes) in tab-delimited\nformat [REQUIRED]"
  synonyms:
  - -i
  - --observed_trait_table
  args: !SimpleFlagArg
    name: OBSERVED_TRAIT_TABLE
  optional: true
- !Flag
  description: "the full reference tree, in Newick format [REQUIRED]\n"
  synonyms:
  - -t
  - --tree
  args: !SimpleFlagArg
    name: TREE
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: show program's version number and exit
  synonyms:
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "Usage: predict_traits.py [options] {-i/--observed_trait_table OBSERVED_TRAIT_TABLE\
  \ -t/--tree TREE}\n\n[] indicates optional input (order unimportant)\n{} indicates\
  \ required input (order unimportant)\n\n\nThis script produces predictions of unobserved\
  \ traits given a phylogenetic tree and a table that summarizes which traits are\
  \ present in which ancestral organisms.\nIn the most common usage, this script is\
  \ used to predict which gene families are present in each OTU (Operational Taxonomic\
  \ Unit; roughly equivalent to a bacterial 'species'), given a tree and a set of\
  \ ancestral state reconstructions.\n\nThe output of the script is a trait prediction\
  \ file, which summarizes the predicted traits of each organism of interest (by default,\
  \ this is all of the organisms that are tips in the phylogenetic tree).\n\nThe prediction\
  \ method works as follows:\n\n    1.  For each terminal (tip) node where a prediction\
  \ is to be performed, the algorithm through the reconstructed ancestral states,\
  \ and finds the last node in the ancestry of our organism of interest for which\
  \ a prediction is available\n\n    2.  The trait for the organism is then predicted\
  \ based on a branch-length weighted average of the ancestral node and it's close\
  \ relatives. (This is necessary because technical limitations involving the handling\
  \ of ambiguous characters in many Ancestral State Reconstruction programs prevent\
  \ the parent node of the organism from being directly reconstructed in most cases.)\n\
  \n    The exact weight function to use can be specified from the commandline (see\
  \ options below).\n\n    In general, this approach causes the prediction to be a\
  \ weighted average of the closest reconstructed ancestor, and the either reconstructed\
  \ or directly observed trait value of the organism of interest's sibling node(s).\n\
  \n\nExample usage: \nPrint help message and exit\n predict_traits.py -h\n\nRequired\
  \ options with NSTI\n predict_traits.py -a -i trait_table.tab -t reference_tree.newick\
  \ -r asr_counts.tab -o predict_traits.tab\n\nLimit predictions to particular tips\
  \ in OTU table\n predict_traits.py -a -i trait_table.tab -t reference_tree.newick\
  \ -r asr_counts.tab -o predict_traits_limited.tab -l otu_table.tab\n\nReconstruct\
  \ confidence\n predict_traits.py -a -i trait_table.tab -t reference_tree.newick\
  \ -r asr_counts.tab -c asr_ci.tab -o predict_traits.tab\n\nOptions:\n  --version\
  \             show program's version number and exit\n  -h, --help            show\
  \ this help message and exit\n  -v, --verbose         Print information during execution\
  \ -- useful for\n                        debugging [default: False]\n  -o OUTPUT_TRAIT_TABLE,\
  \ --output_trait_table=OUTPUT_TRAIT_TABLE\n                        the output filepath\
  \ for trait predictions [default:\n                        predicted_states.tsv]\n\
  \  -a, --calculate_accuracy_metrics\n                        if specified, calculate\
  \ accuracy metrics (i.e. how\n                        accurate does PICRUSt expect\
  \ its predictions to be?)\n                        and add to output file [default:\
  \ False]\n  --output_accuracy_metrics_only=OUTPUT_ACCURACY_METRICS_ONLY\n      \
  \                  if specified, calculate accuracy metrics (e.g. NSTI),\n     \
  \                   output them to this filepath, and do not do anything\n     \
  \                   else. [default: none]\n  -m PREDICTION_METHOD, --prediction_method=PREDICTION_METHOD\n\
  \                        Specify prediction method to use.  The recommended\n  \
  \                      prediction method is set as default, so other options\n \
  \                       are primarily useful for control experiments and\n     \
  \                   methods validation, not typical use.  Valid choices ar\n   \
  \                     e:asr_and_weighting,nearest_neighbor,asr_only,weightin\n \
  \                       g_only,random_neighbor.\n                        \"asr_and_weighting\"\
  (recommended): use ancestral state\n                        reconstructions plus\
  \ local weighting with known tip\n                        nodes.  \"nearest_neighbor\"\
  : predict the closest tip on\n                        the tree with trait information.\n\
  \                        \"random_annotated_neighbor\": predict a random tip on\n\
  \                        the tree with trait information. \"asr_only\": predict\n\
  \                        the traits of the last reconstructed ancestor, without\n\
  \                        weighting. \"weighting_only\": weight all genomes by\n\
  \                        distance, to the organism of interest using the\n     \
  \                   specified weighting function and predict the weighted\n    \
  \                    average.   [default: asr_and_weighting]\n  -w WEIGHTING_METHOD,\
  \ --weighting_method=WEIGHTING_METHOD\n                        Specify prediction\
  \ the weighting function to use.\n                        This only applies to prediction\
  \ methods that\n                        incorporate local weighting (\"asr_and_weighting\"\
  \ or\n                        \"weighting_only\")  The recommended weighting  method\n\
  \                        is set as default, so other options are primarily\n   \
  \                     useful for control experiments and methods validation,\n \
  \                       not typical use.  Valid choices\n                      \
  \  are:exponential,linear,equal.\n                        \"exponential\"(recommended):\
  \ weight genomes as a\n                        negative exponent of distance.  That\
  \ is 2^-d, where d\n                        is the tip-to-tip distance from the\
  \ genome to the tip.\n                        \"linear\": weight tips as a linear\
  \ function of weight,\n                        normalized to the maximum possible\
  \ distance (max_d\n                        -d)/d. \"equal_weights\": set all weights\
  \ to a constant\n                        (ignoring branch length).   [default: exponential]\n\
  \  -l LIMIT_PREDICTIONS_BY_OTU_TABLE, --limit_predictions_by_otu_table=LIMIT_PREDICTIONS_BY_OTU_TABLE\n\
  \                        Specify a valid path to a legacy QIIME OTU table to\n \
  \                       perform predictions only for tips that are listed in\n \
  \                       the OTU table (regardless of abundance)\n  -g LIMIT_PREDICTIONS_TO_ORGANISMS,\
  \ --limit_predictions_to_organisms=LIMIT_PREDICTIONS_TO_ORGANISMS\n            \
  \            Limit predictions to specific, comma-separated\n                  \
  \      organims ids. (Generally only useful for lists of < 10\n                \
  \        organism ids, for example when performing leave-one-\n                \
  \        out cross-validation).\n  -r RECONSTRUCTED_TRAIT_TABLE, --reconstructed_trait_table=RECONSTRUCTED_TRAIT_TABLE\n\
  \                        the input trait table describing reconstructed traits\n\
  \                        (from ancestral_state_reconstruction.py) in tab-\n    \
  \                    delimited format [default: none]\n  --confidence_format=CONFIDENCE_FORMAT\n\
  \                        the format for the confidence intervals from ancestral\n\
  \                        state reconstruction. Only needed if passing a\n      \
  \                  reconstruction confidence file with -c or\n                 \
  \       --reconstruction_confidence.  These are typically\n                    \
  \    sigma values for maximum likelihood ASR  methods, but\n                   \
  \     95% confidence intervals for phylogenetic independent\n                  \
  \      contrasts (e.g. from the ape R packages ace function\n                  \
  \      with pic as the reconstruction method).  Valid choices\n                \
  \        are:sigma,confidence_interval. [default: sigma]\n  -c RECONSTRUCTION_CONFIDENCE,\
  \ --reconstruction_confidence=RECONSTRUCTION_CONFIDENCE\n                      \
  \  the input trait table describing confidence intervals\n                     \
  \   for reconstructed traits (from\n                        ancestral_state_reconstruction.py)\
  \ in tab-delimited\n                        format [default: none]\n  --output_precalc_file_in_biom\n\
  \                        Instead of outputting the precalculated file in tab-\n\
  \                        delimited format (with otu ids as row ids and traits\n\
  \                        as columns) output the data in biom format (with otu\n\
  \                        as SampleIds and traits as ObservationIds) [default:\n\
  \                        False]\n  --no_round            Flag to set if you do not\
  \ want predictions to be\n                        rounded to the nearest integer\
  \ [default: False]\n\n  REQUIRED options:\n    The following options must be provided\
  \ under all circumstances.\n\n    -i OBSERVED_TRAIT_TABLE, --observed_trait_table=OBSERVED_TRAIT_TABLE\n\
  \                        the input trait table describing directly observed\n  \
  \                      traits (e.g. sequenced genomes) in tab-delimited\n      \
  \                  format [REQUIRED]\n    -t TREE, --tree=TREE\n               \
  \         the full reference tree, in Newick format [REQUIRED]\n"
generated_using:
- --help
