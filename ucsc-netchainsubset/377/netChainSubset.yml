!Command
command:
- netChainSubset
positional:
- !Positional
  description: ''
  position: 0
  name: in.net
  optional: false
- !Positional
  description: ''
  position: 1
  name: in.chain
  optional: false
named:
- !Flag
  description: '- Output gap sizes to file'
  synonyms:
  - -gapOut
  args: !SimpleFlagArg
    name: gap.tab
  optional: true
- !Flag
  description: '- Restrict output to particular type in net file'
  synonyms:
  - -type
  args: !SimpleFlagArg
    name: XXX
  optional: true
- !Flag
  description: '- Split chain when get an insertion of another chain'
  synonyms:
  - -splitOnInsert
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "- Write entire chain references by net, don't split\nwhen a high-level\
    \ net is encoundered.  This is useful when nets\nhave been filtered."
  synonyms:
  - -wholeChains
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "- skip chains that are not found instead of generating\nan error.\
    \  Useful if chains have been filtered.\n"
  synonyms:
  - -skipMissing
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "netChainSubset - Create chain file with subset of chains that appear in\
  \ the net\nusage:\n   netChainSubset in.net in.chain out.chain\noptions:\n   -gapOut=gap.tab\
  \ - Output gap sizes to file\n   -type=XXX - Restrict output to particular type\
  \ in net file\n   -splitOnInsert - Split chain when get an insertion of another\
  \ chain\n   -wholeChains - Write entire chain references by net, don't split\n \
  \   when a high-level net is encoundered.  This is useful when nets\n    have been\
  \ filtered.\n   -skipMissing - skip chains that are not found instead of generating\n\
  \    an error.  Useful if chains have been filtered.\n\n"
generated_using: []
