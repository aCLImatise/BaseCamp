#!/usr/bin/env cwl-runner

baseCommand:
- anvi-gen-fixation-index-matrix
class: CommandLineTool
cwlVersion: v1.0
id: anvi-gen-fixation-index-matrix
inputs:
- doc: Anvi'o profile database
  id: profile_db
  inputBinding:
    prefix: --profile-db
  type: string
- doc: Anvi'o contigs database generated by 'anvi-gen- contigs'
  id: contigs_db
  inputBinding:
    prefix: --contigs-db
  type: string
- doc: Anvi'o structure database.
  id: structure_db
  inputBinding:
    prefix: --structure-db
  type: string
- doc: The output of anvi-gen-variability-profile, or a different variant-calling
    output that has been converted to the anvi'o format.
  id: variability_profile
  inputBinding:
    prefix: --variability-profile
  type: string
- doc: Collection name.
  id: collection_name
  inputBinding:
    prefix: --collection-name
  type: string
- doc: Bin name you are interested in.
  id: bin_id
  inputBinding:
    prefix: --bin-id
  type: string
- doc: A file with split names. There should be only one column in the file, and each
    line should correspond to a unique split name.
  id: splits_of_interest
  inputBinding:
    prefix: --splits-of-interest
  type: File
- doc: A file with anvi'o gene caller IDs. There should be only one column in the
    file, and each line should correspond to a unique gene caller id (without a column
    header).
  id: genes_of_interest
  inputBinding:
    prefix: --genes-of-interest
  type: File
- doc: Gene caller ids. Multiple of them can be declared separated by a delimiter
    (the default is a comma). In anvi-gen-variability-profile, if you declare nothing
    you will get all genes matching your other filtering criteria. In other programs,
    you may get everything, nothing, or an error. It really depends on the situation.
    Fortunately, mistakes are cheap, so it's worth a try.
  id: gene_caller_ids
  inputBinding:
    prefix: --gene-caller-ids
  type: string
- doc: If provided, your genes of interest will be further subset to only include
    genes with structures in your structure database, and therefore must be supplied
    in conjunction with a structure database, i.e. `-s <your_structure_database>`.
    If you did not specify genes of interest, ALL genes will be subset to those that
    have structures.
  id: only_if_structure
  inputBinding:
    prefix: --only-if-structure
  type: boolean
- doc: A file with samples names. There should be only one column in the file, and
    each line should correspond to a unique sample name (without a column header).
  id: samples_of_interest
  inputBinding:
    prefix: --samples-of-interest
  type: File
- doc: Variability engine. The default is 'NT'.
  id: engine
  inputBinding:
    prefix: --engine
  type: string
- doc: Minimum number of samples a nucleotide position should be reported as variable.
    Default is 1. If you set it to 2, for instance, each eligible variable position
    will be expected to appear in at least two samples, which will reduce the impact
    of stochastic, or unintelligible variable positions.
  id: min_occurrence
  inputBinding:
    prefix: --min-occurrence
  type: string
- doc: Minimum coverage of a given variable nucleotide position in all samples. If
    a nucleotide position is covered less than this value even in one sample, it will
    be removed from the analysis. Default is 0.
  id: min_coverage_in_each_sample
  inputBinding:
    prefix: --min-coverage-in-each-sample
  type: long
- doc: File path to store results.
  id: output_file
  inputBinding:
    prefix: --output-file
  type: string
- doc: Negative numbers are theoretically possible, and are sometimes interpreted
    as out-breeding. By default, we set negative numbers to 0 so the results are reflective
    of a standard distance metric. Provide this flag if you would prefer otherwise.
  id: keep_negatives
  inputBinding:
    prefix: --keep-negatives
  type: boolean
