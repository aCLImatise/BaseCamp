!Command
positional: []
named:
- !Flag
  description: The user for an anvi'server.
  synonyms:
  - --user
  args: !SimpleFlagArg
    name: USERNAME
  optional: true
- !Flag
  description: Anvi'server url
  synonyms:
  - --api-url
  args: !SimpleFlagArg
    name: API_URL
  optional: true
- !Flag
  description: Name of the project. Please choose a short but descriptive name (so
    anvi'o can use it whenever she needs to name an output file, or add a new table
    in a database, or name her first born).
  synonyms:
  - -n
  - --project-name
  args: !SimpleFlagArg
    name: PROJECT_NAME
  optional: true
- !Flag
  description: NEWICK formatted tree structure
  synonyms:
  - -t
  - --tree
  args: !SimpleFlagArg
    name: NEWICK
  optional: true
- !Flag
  description: "A flat file that contains the order of items you wish the display\
    \ using the interactive interface. You may want to use this if you have a specific\
    \ order of items in your mind, and do not want to display a tree in the middle\
    \ (or simply you don't have one). The file format is simple: each line should\
    \ have an item name, and there should be no header."
  synonyms:
  - --items-order
  args: !SimpleFlagArg
    name: FLAT_FILE
  optional: true
- !Flag
  description: A FASTA-formatted input file
  synonyms:
  - -f
  - --fasta-file
  args: !SimpleFlagArg
    name: FASTA
  optional: true
- !Flag
  description: A TAB-delimited file for view data
  synonyms:
  - -d
  - --view-data
  args: !SimpleFlagArg
    name: VIEW_DATA
  optional: true
- !Flag
  description: A TAB-delimited file for additional layers for splits. The first column
    of this file must be split names, and the remaining columns should be unique attributes.
    The file does not need to contain all split names, or values for each split in
    every column. Anvi'o will try to deal with missing data nicely. Each column in
    this file will be visualized as a new layer in the tree.
  synonyms:
  - -A
  - --additional-layers
  args: !SimpleFlagArg
    name: ADDITIONAL_LAYERS
  optional: true
- !Flag
  description: State file, you can export states from database using anvi-export-state
    program
  synonyms:
  - -s
  - --state
  args: !SimpleFlagArg
    name: STATE
  optional: true
- !Flag
  description: A plain text file that contains some description about the project.
    You can use Markdwon syntax. The description text will be rendered and shown in
    all relevant interfaces, including the anvi'o interactive interface, or anvi'o
    summary outputs.
  synonyms:
  - --description
  args: !SimpleFlagArg
    name: TEXT_FILE
  optional: true
- !Flag
  description: Tab-delimited file, first column contains tree leaves (gene clusters,
    splits, contigs etc.) and second column contains which Bin they belong.
  synonyms:
  - --bins
  args: !SimpleFlagArg
    name: BINS_DATA
  optional: true
- !Flag
  description: Additional information for bins. The file must contain three TAB-delimited
    columns, where the first one must be a unique bin name, the second should be a
    'source', and the last one should be a 7 character HTML color code (i.e., '#424242').
    Source column must contain information about the origin of the bin. If these bins
    are automatically identified by a program like CONCOCT, this column could contain
    the program name and version. The source information will be associated with the
    bin in various interfaces so in a sense it is not *that* critical what it says
    there, but on the other hand it is, becuse we should also think about people who
    may end up having to work with what we put together later.
  synonyms:
  - --bins-info
  args: !SimpleFlagArg
    name: BINS_INFO
  optional: true
- !Flag
  description: Be bold (at your own risk), and delete if exists.
  synonyms:
  - --delete-if-exists
  args: !EmptyFlagArg {}
  optional: true
command:
- anvi-push
subcommands: []
help_flag: !Flag
  description: show this help message and exit
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
