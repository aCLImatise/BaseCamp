class: CommandLineTool
id: ../../../anvi_profile.cwl
inputs:
- id: input_file
  doc: Sorted and indexed BAM file to analyze. Takes a long time depending on the
    length of the file and parameters used for profiling.
  type: string
  inputBinding:
    prefix: --input-file
- id: contigs_db
  doc: Anvi'o contigs database generated by 'anvi-gen- contigs'
  type: string
  inputBinding:
    prefix: --contigs-db
- id: blank_profile
  doc: If you only have contig sequences, but no mapping data (i.e., you found a genome
    and would like to take a look from it), this flag will become very hand. After
    creating a contigs database for your contigs, you can create a blank anvi'o profile
    database to use anvi'o interactive interface with that contigs database without
    any mapping data.
  type: boolean
  inputBinding:
    prefix: --blank-profile
- id: output_dir
  doc: Directory path for output files
  type: string
  inputBinding:
    prefix: --output-dir
- id: overwrite_output_destinations
  doc: Overwrite if the output files and/or directories exist.
  type: boolean
  inputBinding:
    prefix: --overwrite-output-destinations
- id: sample_name
  doc: It is important to set a sample name (using only ASCII letters and digits and
    without spaces) that is unique (considering all others). If you do not provide
    one, anvi'o will try to make up one for you based on other information, although,
    you should never let the software to decide these things).
  type: string
  inputBinding:
    prefix: --sample-name
- id: report_variability_full
  doc: One of the things anvi-profile does is to store information about variable
    nucleotide positions. Usually it does not report every variable position, since
    not every variable position is genuine variation. Say, if you have 1,000 coverage,
    and all nucleotides at that position are Ts and only one of them is a C, the confidence
    of that C being a real variation is quite low. anvi'o has a simple algorithm in
    place to reduce the impact of noise. However, using this flag you can disable
    it and ask profiler to report every single variation (which may result in very
    large output files and millions of reports, but you are the boss). Do not forget
    to take a look at '-- min-coverage-for-variability' parameter
  type: boolean
  inputBinding:
    prefix: --report-variability-full
- id: skip_snv_profiling
  doc: By default, anvi'o characterizes single-nucleotide variation in each sample.
    The use of this flag will instruct profiler to skip that step. Please remember
    that parameters and flags must be identical between different profiles using the
    same contigs database for them to merge properly.
  type: boolean
  inputBinding:
    prefix: --skip-SNV-profiling
- id: profile_s_cvs
  doc: Anvi'o can perform accurate characterization of codon frequencies in genes
    during profiling. While having codon frequencies opens doors to powerful evolutionary
    insights in downstream analyses, due to its computational complexity, this feature
    comes 'off' by default. Using this flag you can rise against the authority, as
    you always should, and make anvi'o profile codons.
  type: boolean
  inputBinding:
    prefix: --profile-SCVs
- id: description
  doc: A plain text file that contains some description about the project. You can
    use Markdwon syntax. The description text will be rendered and shown in all relevant
    interfaces, including the anvi'o interactive interface, or anvi'o summary outputs.
  type: string
  inputBinding:
    prefix: --description
- id: cluster_contigs
  doc: Single profiles are rarely used for genome binning or visualization, and since
    clustering step increases the profiling runtime for no good reason, the default
    behavior is to not cluster contigs for individual runs. However, if you are planning
    to do binning on one sample, you must use this flag to tell anvi'o to run cluster
    configurations for single runs on your sample.
  type: boolean
  inputBinding:
    prefix: --cluster-contigs
- id: skip_hierarchical_clustering
  doc: If you are not planning to use the interactive interface (or if you have other
    means to add a tree of contigs in the database) you may skip the step where hierarchical
    clustering of your items are preformed based on default clustering recipes matching
    to your database type.
  type: boolean
  inputBinding:
    prefix: --skip-hierarchical-clustering
- id: distance
  doc: The distance metric for the hierarchical clustering. Only relevant if you are
    using `--cluster-contigs` flag. The default is "euclidean".
  type: string
  inputBinding:
    prefix: --distance
- id: linkage
  doc: The linkage method for the hierarchical clustering. Just like the distance
    metric this is only relevant if you are using it with `--cluster-contigs` flag.
    The default is "ward".
  type: string
  inputBinding:
    prefix: --linkage
- id: min_contig_length
  doc: Minimum length of contigs in a BAM file to analyze. The minimum length should
    be long enough for tetra- nucleotide frequency analysis to be meaningful. There
    is no way to define a golden number of minimum length that would be applicable
    to genomes found in all environments, but we chose the default to be 1000, and
    have been happy with it. You are welcome to experiment, but we advise to never
    go below 1,000. You also should remember that the lower you go, the more time
    it will take to analyze all contigs. You can use --list-contigs parameter to have
    an idea how many contigs would be discarded for a given M.
  type: long
  inputBinding:
    prefix: --min-contig-length
- id: max_contig_length
  doc: Just like the minimum contig length parameter, but to set a maximum. Basically
    this will remove any contig longer than a certain value. Why would anyone need
    this? Who knows. But if you ever do, it is here.
  type: long
  inputBinding:
    prefix: --max-contig-length
- id: min_mean_coverage
  doc: Minimum mean coverage for contigs to be kept in the analysis. The default value
    is 0, which is for your best interest if you are going to profile multiple BAM
    files which are then going to be merged for a cross- sectional or time series
    analysis. Do not change it if you are not sure this is what you want to do.
  type: long
  inputBinding:
    prefix: --min-mean-coverage
- id: min_coverage_for_variability
  doc: Minimum coverage of a nucleotide position to be subjected to SNV profiling.
    By default, anvi'o will not attempt to make sense of variation in a given nucleotide
    position if it is covered less than 10X. You can change that minimum using this
    parameter.
  type: long
  inputBinding:
    prefix: --min-coverage-for-variability
- id: list_contigs
  doc: When declared, the program will list contigs in the BAM file and exit gracefully
    without any further analysis.
  type: boolean
  inputBinding:
    prefix: --list-contigs
- id: contigs_of_interest
  doc: It is possible to analyze only a group of contigs from a given BAM file. If
    you provide a text file, in which every contig of interest is listed line by line,
    the profiler would engine only on those contigs in the BAM file and ignore the
    rest. This can be used for debugging purposes, or to engine on a particular group
    of contigs that were identified as relevant during the interactive analysis.
  type: File
  inputBinding:
    prefix: --contigs-of-interest
- id: num_threads
  doc: Maximum number of threads to use for multithreading whenever possible. Very
    conservatively, the default is 1. It is a good idea to not exceed the number of
    CPUs / cores on your system. Plus, please be careful with this option if you are
    running your commands on a SGE --if you are clusterizing your runs, and asking
    for multiple threads to use, you may deplete your resources very fast.
  type: string
  inputBinding:
    prefix: --num-threads
- id: queue_size
  doc: The queue size for worker threads to store data to communicate to the main
    thread. The default is set by the class based on the number of threads. If you
    have *any* hesitation about whether you know what you are doing, you should not
    change this value.
  type: long
  inputBinding:
    prefix: --queue-size
- id: write_buffer_size_per_thread
  doc: How many items should be kept in memory before they are written do the disk.
    The default is 500 per thread. So a single-threaded job would have a write buffer
    size of 500, whereas a job with 4 threads would have a write buffer size of 4*500.
    The larger the buffer size, the less frequent the program will access to the disk,
    yet the more memory will be consumed since the processed items will be cleared
    off the memory only after they are written to the disk. The default buffer size
    will likely work for most cases. Please keep an eye on the memory usage output
    to make sure the memory use never exceeds the size of the physical memory.
  type: long
  inputBinding:
    prefix: --write-buffer-size-per-thread
- id: force_multi
  doc: This is not useful to non-developers. It forces the multi-process routine even
    when 1 thread is chosen.
  type: boolean
  inputBinding:
    prefix: --force-multi
outputs: []
cwlVersion: v1.1
baseCommand:
- anvi-profile
