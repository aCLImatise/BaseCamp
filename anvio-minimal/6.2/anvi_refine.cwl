class: CommandLineTool
id: ../../../anvi_refine.cwl
inputs:
- id: profile_db
  doc: Anvi'o profile database
  type: string
  inputBinding:
    prefix: --profile-db
- id: contigs_db
  doc: Anvi'o contigs database generated by 'anvi-gen- contigs'
  type: string
  inputBinding:
    prefix: --contigs-db
- id: collection_name
  doc: Collection name.
  type: string
  inputBinding:
    prefix: --collection-name
- id: bin_id
  doc: Bin name you are interested in.
  type: string
  inputBinding:
    prefix: --bin-id
- id: bin_ids_file
  doc: Text file for bins (each line should be a unique bin id).
  type: File
  inputBinding:
    prefix: --bin-ids-file
- id: find_from_split_name
  doc: If you don't know the bin name you want to work with but if you know the split
    name it contains you can use this parameter to tell anvi'o the split name, and
    so it can find the bin for you automatically. This is something extremely difficult
    for anvi'o to do, but it does it anyway because you.
  type: string
  inputBinding:
    prefix: --find-from-split-name
- id: tree
  doc: NEWICK formatted tree structure
  type: string
  inputBinding:
    prefix: --tree
- id: skip_hierarchical_clustering
  doc: Skip hierarchical clustering for the splits in the refined bin, if you skip
    clustering you need to provide your own newick formatted tree using --tree parameter.
  type: boolean
  inputBinding:
    prefix: --skip-hierarchical-clustering
- id: load_full_state
  doc: Often the minimum and maximum values defined for the an entire profile database
    that contains all contigs do not scale well when you wish to work with a single
    bin in the refine mode. For this reason, the default behavior of anvi-refine is
    to ignore min/max values set in the default state. This flag is your way of telling
    anvi'o to not do that, and load the state stored in the profile database as is.
  type: boolean
  inputBinding:
    prefix: --load-full-state
- id: additional_view
  doc: A TAB-delimited file for an additional view to be used in the interface. This
    file should contain all split names, and values for each of them in all samples.
    Each column in this file must correspond to a sample name. Content of this file
    will be called 'user_view', which will be available as a new item in the 'views'
    combo box in the interface
  type: string
  inputBinding:
    prefix: --additional-view
- id: additional_layers
  doc: A TAB-delimited file for additional layers for splits. The first column of
    this file must be split names, and the remaining columns should be unique attributes.
    The file does not need to contain all split names, or values for each split in
    every column. Anvi'o will try to deal with missing data nicely. Each column in
    this file will be visualized as a new layer in the tree.
  type: string
  inputBinding:
    prefix: --additional-layers
- id: split_hmm_layers
  doc: When declared, this flag tells the interface to split every gene found in HMM
    searches that were performed against non-singlecopy gene HMM profiles into their
    own layer. Please see the documentation for details.
  type: boolean
  inputBinding:
    prefix: --split-hmm-layers
- id: taxonomic_level
  doc: The taxonomic level to use whenever relevant and/or available. The default
    taxonomic level is t_genus, but if you choose something specific, anvi'o will
    focus on that whenever possible.
  type: string
  inputBinding:
    prefix: --taxonomic-level
- id: hide_outlier_sn_vs
  doc: "During profiling, anvi'o marks positions of single- nucleotide variations\
    \ (SNVs) that originate from places in contigs where coverage values are a bit\
    \ 'sketchy'. If you would like to avoid SNVs in those positions of splits in applicable\
    \ projects you can use this flag, and the interface would hide SNVs that are marked\
    \ as 'outlier' (although it is clearly the best to see everything, no one will\
    \ judge you if you end up using this flag) (plus, there may or may not be some\
    \ historical data on this here: https://github.com/meren/anvio/issues/309)."
  type: boolean
  inputBinding:
    prefix: --hide-outlier-SNVs
- id: title
  doc: Title for the interface. If you are working with a RUNINFO dict, the title
    will be determined based on information stored in that file. Regardless, you can
    override that value using this parameter.
  type: string
  inputBinding:
    prefix: --title
- id: export_svg
  doc: The SVG output file path.
  type: File
  inputBinding:
    prefix: --export-svg
- id: dry_run
  doc: Don't do anything real. Test everything, and stop right before wherever the
    developer said 'well, this is enough testing', and decided to print out results.
  type: boolean
  inputBinding:
    prefix: --dry-run
- id: skip_in_it_functions
  doc: When declared, function calls for genes will not be initialized (therefore
    will be missing from all relevant interfaces or output files). The use of this
    flag may reduce the memory fingerprint and processing time for large datasets.
  type: boolean
  inputBinding:
    prefix: --skip-init-functions
- id: skip_auto_ordering
  doc: When declared, the attempt to include automatically generated orders of items
    based on additional data is skipped. In case those buggers cause issues with your
    data, and you still want to see your stuff and deal with the other issue maybe
    later.
  type: boolean
  inputBinding:
    prefix: --skip-auto-ordering
- id: ip_address
  doc: IP address for the HTTP server. The default ip address (0.0.0.0) should work
    just fine for most.
  type: string
  inputBinding:
    prefix: --ip-address
- id: port_number
  doc: Port number to use for anvi'o services. If nothing is declared, anvi'o will
    try to find a suitable port number, starting from the default port number, 8080.
  type: long
  inputBinding:
    prefix: --port-number
- id: browser_path
  doc: By default, anvi'o will use your default browser to launch the interactive
    interface. If you would like to use something else than your system default, you
    can provide a full path for an alternative browser using this parameter, and hope
    for the best. For instance we are using this parameter to call Google's experimental
    browser, Canary, which performs better with demanding visualizations.
  type: File
  inputBinding:
    prefix: --browser-path
- id: read_only
  doc: When the interactive interface is started with this flag, all 'database write'
    operations will be disabled.
  type: boolean
  inputBinding:
    prefix: --read-only
- id: server_only
  doc: The default behavior is to start the local server, and fire up a browser that
    connects to the server. If you have other plans, and want to start the server
    without calling the browser, this is the flag you need.
  type: boolean
  inputBinding:
    prefix: --server-only
- id: password_protected
  doc: If this flag is set, command line tool will ask you to enter a password and
    interactive interface will be only accessible after entering same password. This
    option is recommended for shared machines like clusters or shared networks where
    computers are not isolated.
  type: boolean
  inputBinding:
    prefix: --password-protected
outputs: []
cwlVersion: v1.1
baseCommand:
- anvi-refine
