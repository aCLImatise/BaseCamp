#!/usr/bin/env cwl-runner

baseCommand:
- anvi-mcg-classifier
class: CommandLineTool
cwlVersion: v1.0
id: anvi-mcg-classifier
inputs:
- doc: Anvi'o profile database
  id: profile_db
  inputBinding:
    prefix: --profile-db
  type: string
- doc: Anvi'o contigs database generated by 'anvi-gen- contigs'
  id: contigs_db
  inputBinding:
    prefix: --contigs-db
  type: string
- doc: A prefix to be used while naming the output files (no file type extensions
    please; just a prefix).
  id: output_file_prefix
  inputBinding:
    prefix: --output-file-prefix
  type: File
- doc: Collection name.
  id: collection_name
  inputBinding:
    prefix: --collection-name
  type: string
- doc: Bin name you are interested in.
  id: bin_id
  inputBinding:
    prefix: --bin-id
  type: string
- doc: Text file for bins (each line should be a unique bin id).
  id: bin_ids_file
  inputBinding:
    prefix: --bin-ids-file
  type: File
- doc: List of samples to exclude for the analysis.
  id: exclude_samples
  inputBinding:
    prefix: --exclude-samples
  type: File
- doc: List of samples to include for the analysis.
  id: include_samples
  inputBinding:
    prefix: --include-samples
  type: File
- doc: "For those of you who wish to dig deeper, a collection of figures could be\
    \ created to allow you to get insight into how the classification was generated.\
    \ This is especially useful to identify cases in which you shouldn't trust the\
    \ classification (for example due to a large number of outliers). NOTICE: if you\
    \ ask anvi'o to generate these figures then it will significantly extend the execution\
    \ time. To learn about which figures are created and what they mean, contact your\
    \ nearest anvi'o developer, because currently it is a well-hidden secret."
  id: gen_figures
  inputBinding:
    prefix: --gen-figures
  type: boolean
- doc: If you only wish to get statistics regarding the occurrence of bins in samples,
    then use this flag. Especially when dealing with many samples or large genomes,
    gene stats could be a long time to compute. By using this flag you could save
    a lot of computation time.
  id: get_samples_stats_only
  inputBinding:
    prefix: --get-samples-stats-only
  type: boolean
- doc: Overwrite if the output files and/or directories exist.
  id: overwrite_output_destinations
  inputBinding:
    prefix: --overwrite-output-destinations
  type: boolean
- doc: Determines the range of sample detection values that are considered negative,
    ambiguous or positive. Min of 0 and smaller than 0.5, default of 0.25. For exmaple
    for the default samples with detection below 0.5-0.25 = 0.25 will be considered
    negative (i.e. donot contain the genome), samples with detection between 0.25
    and 0.75 would be ambiguous (and hence would not be used for the classification),
    and samples with detection above 0.75 would be considered positive (i.e. contain
    the genome).
  id: genome_detection_uncertainty
  inputBinding:
    prefix: --genome-detection-uncertainty
  type: string
- doc: "Threshold to use for the outlier detection. The default value is '1.5'. Absolute\
    \ deviation around the median is used. To read more about the method please refer\
    \ to: 'How to Detect and Handle Outliers' by Boris Iglewicz and David Hoaglin\
    \ (doi:10.1016/j.jesp.2013.03.013)."
  id: outliers_threshold
  inputBinding:
    prefix: --outliers-threshold
  type: string
- doc: If you want all zero coverage positions to be treated like outliers then use
    this flag. The reason to treat zero coverage as outliers is because when mapping
    reads to a reference we could get many zero positions due to accessory genes.
    These positions then skew the average values that we compute.
  id: zeros_are_outliers
  inputBinding:
    prefix: --zeros-are-outliers
  type: boolean
