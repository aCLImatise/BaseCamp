#!/usr/bin/env cwl-runner

baseCommand:
- anvi-interactive
class: CommandLineTool
cwlVersion: v1.0
id: anvi-interactive
inputs:
- doc: Anvi'o profile database
  id: profile_db
  inputBinding:
    prefix: --profile-db
  type: string
- doc: Anvi'o contigs database generated by 'anvi-gen- contigs'
  id: contigs_db
  inputBinding:
    prefix: --contigs-db
  type: string
- doc: If you have a collection in your profile database, you can use this flag to
    start the interactive interface with a tree showing your bins in your collection,
    instead of each split. This is very useful when you have imported your external
    binning results into anvi'o, and want to see the distribution of your bins across
    samples. In these cases anvi'o will cluster your bins and based on multiple metrics.
    Because this particular clustering will be done on the fly within anvi'o interactive
    class, you get to define a disntance metric and a linkage method using --linkage
    and --distance parameters if you want!
  id: collection_name
  inputBinding:
    prefix: --collection-name
  type: string
- doc: Using this flag, you can run the interactive interface in an ad hoc manner
    using input files you curated instead of standard output files generated by an
    anvi'o run. In the manual mode you will be asked to provide a profile database.
    In this mode a profile database is only used to store 'state' of the interactive
    interface so you can reload your visual settings when you re-analyze the same
    files again. If the profile database you provide does not exist, anvi'o will create
    an empty one for you.
  id: manual_mode
  inputBinding:
    prefix: --manual-mode
  type: boolean
- doc: A FASTA-formatted input file
  id: fast_a_file
  inputBinding:
    prefix: --fasta-file
  type: string
- doc: A TAB-delimited file for view data
  id: view_data
  inputBinding:
    prefix: --view-data
  type: string
- doc: NEWICK formatted tree structure
  id: tree
  inputBinding:
    prefix: --tree
  type: string
- doc: "A flat file that contains the order of items you wish the display using the\
    \ interactive interface. You may want to use this if you have a specific order\
    \ of items in your mind, and do not want to display a tree in the middle (or simply\
    \ you don't have one). The file format is simple: each line should have an item\
    \ name, and there should be no header."
  id: items_order
  inputBinding:
    prefix: --items-order
  type: string
- doc: A TAB-delimited file for an additional view to be used in the interface. This
    file should contain all split names, and values for each of them in all samples.
    Each column in this file must correspond to a sample name. Content of this file
    will be called 'user_view', which will be available as a new item in the 'views'
    combo box in the interface
  id: additional_view
  inputBinding:
    prefix: --additional-view
  type: string
- doc: A TAB-delimited file for additional layers for splits. The first column of
    this file must be split names, and the remaining columns should be unique attributes.
    The file does not need to contain all split names, or values for each split in
    every column. Anvi'o will try to deal with missing data nicely. Each column in
    this file will be visualized as a new layer in the tree.
  id: additional_layers
  inputBinding:
    prefix: --additional-layers
  type: string
- doc: "Initiate the interactive interface in 'gene mode'. In this mode, the items\
    \ are genes (instead of splits of contigs). The following views are available:\
    \ detection (the detection value of each gene in each sample). The mean_coverage\
    \ (the mean coverage of genes). The non_outlier_mean_coverage (the mean coverage\
    \ of the non-outlier nucleotide positions of each gene in each sample (median\
    \ absolute deviation is used to remove outliers per gene per sample)). The non_outlier_coverage_std\
    \ view (standard deviation of the coverage of non-outlier positions of genes in\
    \ samples). You can also choose to order items and layers according to each one\
    \ of the aforementioned views. In addition, all layer ordering that are available\
    \ in the regular mode (i.e. the full mode where you have contigs/splits) are also\
    \ available in 'gene mode', so that, for example, you can choose to order the\
    \ layers according to 'detection', and that would be the order according to the\
    \ detection values of splits, whereas if you choose 'genes_detections' then the\
    \ order of layers would be according to the detection values of genes. Inspection\
    \ and sequence functionality are available (through the right-click menu), except\
    \ now sequences are of the specific gene. Inspection has now two options available:\
    \ 'Inspect Context', which brings you to the inspection page of the split to which\
    \ the gene belongs where the inspected gene will be highlighted in yellow in the\
    \ bottom, and 'Inspect Gene', which opens the inspection page only for the gene\
    \ and 100 nts around each side of it (the purpose of this option is to make the\
    \ inspection page load faster if you only want to look at the nucleotide coverage\
    \ of a specific gene). NOTICE: You can't store states or collections in 'gene\
    \ mode'. However, you still can make fake selections, and create fake bins for\
    \ your viewing convenience only (smiley). Search options are available, and you\
    \ can even search for functions if you have them in your contigs database. ANOTHER\
    \ NOTICE: loading this mode might take a while if your bin has many genes, and\
    \ your profile database has many samples, this is because the gene coverages stats\
    \ are computed in an ad-hoc manner when you load this mode, we know this is not\
    \ ideal and we plan to improve that (along with other things). If you have suggestions/complaints\
    \ regarding this mode please comment on this github issue: https://goo.gl/yHhRei.\
    \ Please refer to the online tutorial for more information."
  id: gene_mode
  inputBinding:
    prefix: --gene-mode
  type: boolean
- doc: Provide if working with INSeq/Tn-Seq genomic data. With this, all gene level
    coverage stats will be calculated using INSeq/Tn-Seq statistical methods.
  id: in_seq_stats
  inputBinding:
    prefix: --inseq-stats
  type: boolean
- doc: Bin name you are interested in.
  id: bin_id
  inputBinding:
    prefix: --bin-id
  type: string
- doc: Start the interface with a pre-selected view. To see a list of available views,
    use --show-views flag.
  id: view
  inputBinding:
    prefix: --view
  type: string
- doc: Title for the interface. If you are working with a RUNINFO dict, the title
    will be determined based on information stored in that file. Regardless, you can
    override that value using this parameter.
  id: title
  inputBinding:
    prefix: --title
  type: string
- doc: The taxonomic level to use whenever relevant and/or available. The default
    taxonomic level is t_genus, but if you choose something specific, anvi'o will
    focus on that whenever possible.
  id: taxonomic_level
  inputBinding:
    prefix: --taxonomic-level
  type: string
- doc: When declared, this flag tells the interface to split every gene found in HMM
    searches that were performed against non-singlecopy gene HMM profiles into their
    own layer. Please see the documentation for details.
  id: split_hmm_layers
  inputBinding:
    prefix: --split-hmm-layers
  type: boolean
- doc: "During profiling, anvi'o marks positions of single- nucleotide variations\
    \ (SNVs) that originate from places in contigs where coverage values are a bit\
    \ 'sketchy'. If you would like to avoid SNVs in those positions of splits in applicable\
    \ projects you can use this flag, and the interface would hide SNVs that are marked\
    \ as 'outlier' (although it is clearly the best to see everything, no one will\
    \ judge you if you end up using this flag) (plus, there may or may not be some\
    \ historical data on this here: https://github.com/meren/anvio/issues/309)."
  id: hide_outlier_sn_vs
  inputBinding:
    prefix: --hide-outlier-SNVs
  type: boolean
- doc: Automatically load previous saved state and draw tree. To see a list of available
    states, use --show-states flag.
  id: state_autoload
  inputBinding:
    prefix: --state-autoload
  type: string
- doc: Automatically load a collection and draw tree. To see a list of available collections,
    use --list- collections flag.
  id: collection_autoload
  inputBinding:
    prefix: --collection-autoload
  type: string
- doc: The SVG output file path.
  id: export_svg
  inputBinding:
    prefix: --export-svg
  type: File
- doc: When declared, the program will show a list of available views, and exit.
  id: show_views
  inputBinding:
    prefix: --show-views
  type: boolean
- doc: For debugging purposes. You should never really need it.
  id: skip_check_names
  inputBinding:
    prefix: --skip-check-names
  type: boolean
- doc: Directory path for output files
  id: output_dir
  inputBinding:
    prefix: --output-dir
  type: string
- doc: Don't do anything real. Test everything, and stop right before wherever the
    developer said 'well, this is enough testing', and decided to print out results.
  id: dry_run
  inputBinding:
    prefix: --dry-run
  type: boolean
- doc: When declared the program will print all available states and exit.
  id: show_states
  inputBinding:
    prefix: --show-states
  type: boolean
- doc: Show available collections and exit.
  id: list_collections
  inputBinding:
    prefix: --list-collections
  type: boolean
- doc: When declared, function calls for genes will not be initialized (therefore
    will be missing from all relevant interfaces or output files). The use of this
    flag may reduce the memory fingerprint and processing time for large datasets.
  id: skip_in_it_functions
  inputBinding:
    prefix: --skip-init-functions
  type: boolean
- doc: When declared, the attempt to include automatically generated orders of items
    based on additional data is skipped. In case those buggers cause issues with your
    data, and you still want to see your stuff and deal with the other issue maybe
    later.
  id: skip_auto_ordering
  inputBinding:
    prefix: --skip-auto-ordering
  type: boolean
- doc: The distance metric for the hierarchical clustering. Only relevant if you are
    running the interactive interface in "collection" mode. The default is "euclidean".
  id: distance
  inputBinding:
    prefix: --distance
  type: string
- doc: The linkage method for the hierarchical clustering. Only relevant if you are
    running the interactive interface in "collection" mode. The default is "ward".
  id: linkage
  inputBinding:
    prefix: --linkage
  type: string
- doc: IP address for the HTTP server. The default ip address (0.0.0.0) should work
    just fine for most.
  id: ip_address
  inputBinding:
    prefix: --ip-address
  type: string
- doc: Port number to use for anvi'o services. If nothing is declared, anvi'o will
    try to find a suitable port number, starting from the default port number, 8080.
  id: port_number
  inputBinding:
    prefix: --port-number
  type: long
- doc: By default, anvi'o will use your default browser to launch the interactive
    interface. If you would like to use something else than your system default, you
    can provide a full path for an alternative browser using this parameter, and hope
    for the best. For instance we are using this parameter to call Google's experimental
    browser, Canary, which performs better with demanding visualizations.
  id: browser_path
  inputBinding:
    prefix: --browser-path
  type: File
- doc: When the interactive interface is started with this flag, all 'database write'
    operations will be disabled.
  id: read_only
  inputBinding:
    prefix: --read-only
  type: boolean
- doc: The default behavior is to start the local server, and fire up a browser that
    connects to the server. If you have other plans, and want to start the server
    without calling the browser, this is the flag you need.
  id: server_only
  inputBinding:
    prefix: --server-only
  type: boolean
- doc: If this flag is set, command line tool will ask you to enter a password and
    interactive interface will be only accessible after entering same password. This
    option is recommended for shared machines like clusters or shared networks where
    computers are not isolated.
  id: password_protected
  inputBinding:
    prefix: --password-protected
  type: boolean
- doc: Allow users to shutdown an anvi'server via web interface.
  id: user_server_shutdown
  inputBinding:
    prefix: --user-server-shutdown
  type: boolean
