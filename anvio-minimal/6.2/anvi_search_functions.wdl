version 1.0

task Anvisearchfunctions {
  input {
    String? contigs_db
    String? pan_db
    File? genomes_storage
    String? search_terms
    String? delimiter
    Int? annotation_sources
    Boolean? list_annotation_sources
    File? output_file
    File? full_report
    Boolean? include_sequences
    Boolean? verbose
  }
  command <<<
    anvi_search_functions \
      ~{if defined(contigs_db) then ("--contigs-db " +  '"' + contigs_db + '"') else ""} \
      ~{if defined(pan_db) then ("--pan-db " +  '"' + pan_db + '"') else ""} \
      ~{if defined(genomes_storage) then ("--genomes-storage " +  '"' + genomes_storage + '"') else ""} \
      ~{if defined(search_terms) then ("--search-terms " +  '"' + search_terms + '"') else ""} \
      ~{if defined(delimiter) then ("--delimiter " +  '"' + delimiter + '"') else ""} \
      ~{if defined(annotation_sources) then ("--annotation-sources " +  '"' + annotation_sources + '"') else ""} \
      ~{if (list_annotation_sources) then "--list-annotation-sources" else ""} \
      ~{if defined(output_file) then ("--output-file " +  '"' + output_file + '"') else ""} \
      ~{if defined(full_report) then ("--full-report " +  '"' + full_report + '"') else ""} \
      ~{if (include_sequences) then "--include-sequences" else ""} \
      ~{if (verbose) then "--verbose" else ""}
  >>>
  parameter_meta {
    contigs_db: "Anvi'o contigs database generated by 'anvi-gen-\\ncontigs'"
    pan_db: "Anvi'o pan database"
    genomes_storage: "Anvi'o genomes storage file"
    search_terms: "Search terms. Multiple of them can be declared\\nseparated by a delimiter (the default is a comma)."
    delimiter: "The delimiter to parse multiple input terms. The\\ndefault is ','."
    annotation_sources: "NAME[S]\\nGet functional annotations for a specific list of\\nannotation sources. You can specify one or more\\nsources by separating them from each other with a\\ncomma character (i.e., '--annotation-sources\\nsource_1,source_2,source_3'). The default behavior is\\nto return everything"
    list_annotation_sources: "List available functional annotation sources."
    output_file: "File path to store results."
    full_report: "Optional output file with a fuller description of\\nfindings."
    include_sequences: "Include sequences in the report."
    verbose: "Be verbose, print more messages whenever possible."
  }
  output {
    File out_stdout = stdout()
    File out_output_file = "${in_output_file}"
    File out_full_report = "${in_full_report}"
  }
}