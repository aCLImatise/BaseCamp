!Command
positional: []
named: []
command:
- gff3sort.pl
parent:
subcommands: []
help_flag:
usage_flag:
version_flag:
help_text: "\e[1mNAME\e[0m\n    gff3sort.pl - Sort GFF3 file for tabix indexing\n\n\
  \e[1mSYNOPSIS\e[0m\n    gff3sort.pl [OPTIONS] input.file.gff3 >output.sort.gff3\n\
  \n\e[1mCOMMAND-LINE OPTIONS\e[0m\n    These optional options could be placed either\
  \ before or after the I/O\n    files in the commandline\n\n    --precise Run in\
  \ precise mode, about 2X~3X slower than the default mode.\n    Only needed to be\
  \ used if your original GFF3 files have parent features\n    appearing behind their\
  \ children features.\n\n    --chr_order Select how the chromosome IDs should be\
  \ sorted. Acceptable\n    values are: alphabet, natural, original [Default: alphabet]\n\
  \n    --extract_FASTA If the input GFF3 file contains FASTA sequence at the end,\n\
  \    use this option to extract the FASTA sequence and place in a separate file\n\
  \    with the extention '.fasta'. By default, the FASTA sequences would be\n   \
  \ discarded.\n\n\e[1mDESCRIPTION\e[0m\n    The tabix tool requires GFF3 files to\
  \ be sorted by chromosomes and\n    positions, which could be performed in the GNU\
  \ sort program or the\n    GenomeTools package. However, when dealing with feature\
  \ lines in the same\n    chromosome and position, both of the tools would sort them\
  \ in an ambiguous\n    way that usually results in parent features being placed\
  \ behind their\n    children. This would cause erroneous in some genome browsers\
  \ such as\n    JBrowse. GFF3sort can properly deal with the order of features that\
  \ have\n    the same chromosome and start position, therefore generating suitable\n\
  \    results for JBrowse display.\n\n  \e[1mPrecise mode\e[0m\n    In most situations,\
  \ the original GFF3 annotations produced by genome\n    annotation projects have\
  \ already placed parent features before their\n    children. Therefore, GFF3sort\
  \ would remember their original order and\n    placed them accordingly within the\
  \ same chromosome and start position\n    block, which is the default behavior.\n\
  \n    Sometimes the order in the input file has already been disturbed (for\n  \
  \  example, by GNU sort or GenomeTools). In this situation, GFF3sort would\n   \
  \ sort them according to the parent-child topology using the sorting\n    algorithm\
  \ of directed acyclic graph\n    (https://metacpan.org/pod/Sort::Topological), which\
  \ is the most precise\n    behavior but 2X~3X slower than the default mode.\n\n\
  \  \e[1mThe chromosome order\e[0m\n    In default, chromosomes are sorted alphabetly.\
  \ Users can choose to sort\n    naturally (see https://metacpan.org/pod/Sort::Naturally)\
  \ or keep their\n    original orders.\n\n    Therefore, chromosomes \"Chr7 Chr1\
  \ Chr10 Chr2 Chr1\" would be sorted as:\n\n    By alphabet (default): Chr1 Chr10\
  \ Chr2 Chr7\n\n    By natural: Chr1 Chr2 Chr7 Chr10\n\n    Kepp original: Chr7 Chr1\
  \ Chr10 Chr2 (Note: tabix requires continuous\n    chromosome blocks. Therefore\
  \ the same chromosomes such as Chr1 must be\n    grouped together)\n\n\e[1mAUTHOR\e\
  [0m\n    Tao Zhu <zhutao@caas.cn>\n\n    Copyright (c) 2017\n\n    This script is\
  \ free software; you can redistribute it and/or modify it\n    under the same terms\
  \ as Perl itself.\n\n"
generated_using:
- --help
