!Command
command:
- gff3sort.pl
positional: []
named:
- !Flag
  description: in precise mode, about 2X~3X slower than the default mode.
  synonyms:
  - --precise
  args: !SimpleFlagArg
    name: Run
  optional: true
- !Flag
  description: how the chromosome IDs should be sorted. Acceptable
  synonyms:
  - --chr_order
  args: !SimpleFlagArg
    name: Select
  optional: true
- !Flag
  description: the input GFF3 file contains FASTA sequence at the
  synonyms:
  - --extract_FASTA
  args: !SimpleFlagArg
    name: If
  optional: true
parent:
subcommands: []
usage: []
help_flag:
usage_flag:
version_flag:
help_text: "NAME\n    gff3sort.pl - Sort GFF3 file for tabix indexing\n\nSYNOPSIS\n\
  \    gff3sort.pl [OPTIONS] input.file.gff3 >output.sort.gff3\n\nCOMMAND-LINE OPTIONS\n\
  \    These optional options could be placed either before or after the I/O\n   \
  \ files in the commandline\n\n    --precise Run in precise mode, about 2X~3X slower\
  \ than the default mode.\n    Only needed to be used if your original GFF3 files\
  \ have parent features\n    appearing behind their children features.\n\n    --chr_order\
  \ Select how the chromosome IDs should be sorted. Acceptable\n    values are: alphabet,\
  \ natural, original [Default: alphabet]\n\n    --extract_FASTA If the input GFF3\
  \ file contains FASTA sequence at the\n    end, use this option to extract the FASTA\
  \ sequence and place in a\n    separate file with the extention '.fasta'. By default,\
  \ the FASTA\n    sequences would be discarded.\n\nDESCRIPTION\n    The tabix tool\
  \ requires GFF3 files to be sorted by chromosomes and\n    positions, which could\
  \ be performed in the GNU sort program or the\n    GenomeTools package. However,\
  \ when dealing with feature lines in the\n    same chromosome and position, both\
  \ of the tools would sort them in an\n    ambiguous way that usually results in\
  \ parent features being placed\n    behind their children. This would cause erroneous\
  \ in some genome\n    browsers such as JBrowse. GFF3sort can properly deal with\
  \ the order of\n    features that have the same chromosome and start position, therefore\n\
  \    generating suitable results for JBrowse display.\n\n  Precise mode\n    In\
  \ most situations, the original GFF3 annotations produced by genome\n    annotation\
  \ projects have already placed parent features before their\n    children. Therefore,\
  \ GFF3sort would remember their original order and\n    placed them accordingly\
  \ within the same chromosome and start position\n    block, which is the default\
  \ behavior.\n\n    Sometimes the order in the input file has already been disturbed\
  \ (for\n    example, by GNU sort or GenomeTools). In this situation, GFF3sort would\n\
  \    sort them according to the parent-child topology using the sorting\n    algorithm\
  \ of directed acyclic graph\n    (https://metacpan.org/pod/Sort::Topological), which\
  \ is the most precise\n    behavior but 2X~3X slower than the default mode.\n\n\
  \  The chromosome order\n    In default, chromosomes are sorted alphabetly. Users\
  \ can choose to sort\n    naturally (see https://metacpan.org/pod/Sort::Naturally)\
  \ or keep their\n    original orders.\n\n    Therefore, chromosomes \"Chr7 Chr1\
  \ Chr10 Chr2 Chr1\" would be sorted as:\n\n    By alphabet (default): Chr1 Chr10\
  \ Chr2 Chr7\n\n    By natural: Chr1 Chr2 Chr7 Chr10\n\n    Kepp original: Chr7 Chr1\
  \ Chr10 Chr2 (Note: tabix requires continuous\n    chromosome blocks. Therefore\
  \ the same chromosomes such as Chr1 must be\n    grouped together)\n\nAUTHOR\n \
  \   Tao Zhu <zhutao@caas.cn>\n\n    Copyright (c) 2017\n\n    This script is free\
  \ software; you can redistribute it and/or modify it\n    under the same terms as\
  \ Perl itself.\n\n"
generated_using:
- --help
