!Command
positional: []
named:
- !Flag
  description: Prevent nose from byte-compiling the source into .pyc files while nose
    is scanning for and running tests.
  synonyms:
  - --no-byte-compile
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Run only tests that have attributes specified by ATTR [NOSE_ATTR]
  synonyms:
  - -a
  - --attr
  args: !SimpleFlagArg
    name: ATTR
  optional: true
- !Flag
  description: Run only tests for whose attributes the Python expression EXPR evaluates
    to True [NOSE_EVAL_ATTR]
  synonyms:
  - -A
  - --eval-attr
  args: !SimpleFlagArg
    name: EXPR
  optional: true
- !Flag
  description: Don't capture stdout (any stdout output will be printed immediately)
    [NOSE_NOCAPTURE]
  synonyms:
  - -s
  - --nocapture
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Disable logging capture plugin. Logging configuration will be left
    intact. [NOSE_NOLOGCAPTURE]
  synonyms:
  - --nologcapture
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Specify custom format to print statements. Uses the same format as
    used by standard logging handlers. [NOSE_LOGFORMAT]
  synonyms:
  - --logging-format
  args: !SimpleFlagArg
    name: FORMAT
  optional: true
- !Flag
  description: Specify custom date/time format to print statements. Uses the same
    format as used by standard logging handlers. [NOSE_LOGDATEFMT]
  synonyms:
  - --logging-datefmt
  args: !SimpleFlagArg
    name: FORMAT
  optional: true
- !Flag
  description: 'Specify which statements to filter in/out. By default, everything
    is captured. If the output is too verbose, use this option to filter out needless
    output. Example: filter=foo will capture statements issued ONLY to  foo or foo.what.ever.sub
    but not foobar or other logger. Specify multiple loggers with comma: filter=foo,bar,baz.
    If any logger name is prefixed with a minus, eg filter=-foo, it will be excluded
    rather than included. Default: exclude logging messages from nose itself (-nose).
    [NOSE_LOGFILTER]'
  synonyms:
  - --logging-filter
  args: !SimpleFlagArg
    name: FILTER
  optional: true
- !Flag
  description: Clear all other logging handlers
  synonyms:
  - --logging-clear-handlers
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Set the log level to capture
  synonyms:
  - --logging-level
  args: !SimpleFlagArg
    name: LOGCAPTURE_LEVEL
  optional: true
- !Flag
  description: "Enable plugin Coverage:  Activate a coverage report using Ned Batchelder's\
    \ coverage module. [NOSE_WITH_COVERAGE]"
  synonyms:
  - --with-coverage
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Restrict coverage output to selected packages [NOSE_COVER_PACKAGE]
  synonyms:
  - --cover-package
  args: !SimpleFlagArg
    name: PACKAGE
  optional: true
- !Flag
  description: Erase previously collected coverage statistics before run
  synonyms:
  - --cover-erase
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Include test modules in coverage report [NOSE_COVER_TESTS]
  synonyms:
  - --cover-tests
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Minimum percentage of coverage for tests to pass [NOSE_COVER_MIN_PERCENTAGE]
  synonyms:
  - --cover-min-percentage
  args: !SimpleFlagArg
    name: COVER_MIN_PERCENTAGE
  optional: true
- !Flag
  description: Include all python files under working directory in coverage report.  Useful
    for discovering holes in test coverage if not all files are imported by the test
    suite. [NOSE_COVER_INCLUSIVE]
  synonyms:
  - --cover-inclusive
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Produce HTML coverage information
  synonyms:
  - --cover-html
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Produce HTML coverage information in dir
  synonyms:
  - --cover-html-dir
  args: !SimpleFlagArg
    name: DIR
  optional: true
- !Flag
  description: Include branch coverage in coverage report [NOSE_COVER_BRANCHES]
  synonyms:
  - --cover-branches
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Produce XML coverage information
  synonyms:
  - --cover-xml
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Produce XML coverage information in file
  synonyms:
  - --cover-xml-file
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: Drop into debugger on failures or errors
  synonyms:
  - --pdb
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Drop into debugger on failures
  synonyms:
  - --pdb-failures
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Drop into debugger on errors
  synonyms:
  - --pdb-errors
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Disable special handling of DeprecatedTest exceptions.
  synonyms:
  - --no-deprecated
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'Enable plugin Doctest:  Activate doctest plugin to find and run doctests
    in non-test modules. [NOSE_WITH_DOCTEST]'
  synonyms:
  - --with-doctest
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Also look for doctests in test modules. Note that classes, methods
    and functions should have either doctests or non-doctest tests, not both. [NOSE_DOCTEST_TESTS]
  synonyms:
  - --doctest-tests
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Also look for doctests in files with this extension [NOSE_DOCTEST_EXTENSION]
  synonyms:
  - --doctest-extension
  args: !SimpleFlagArg
    name: EXT
  optional: true
- !Flag
  description: Change the variable name set to the result of the last interpreter
    command from the default '_'. Can be used to avoid conflicts with the _() function
    used for text translation. [NOSE_DOCTEST_RESULT_VAR]
  synonyms:
  - --doctest-result-variable
  args: !SimpleFlagArg
    name: VAR
  optional: true
- !Flag
  description: Find fixtures for a doctest file in module with this name appended
    to the base name of the doctest file
  synonyms:
  - --doctest-fixtures
  args: !SimpleFlagArg
    name: SUFFIX
  optional: true
- !Flag
  description: Specify options to pass to doctest. Eg. '+ELLIPSIS,+NORMALIZE_WHITESPACE'
  synonyms:
  - --doctest-options
  args: !SimpleFlagArg
    name: OPTIONS
  optional: true
- !Flag
  description: 'Enable plugin IsolationPlugin:  Activate the isolation plugin to isolate
    changes to external modules to a single test module or package. The isolation
    plugin resets the contents of sys.modules after each test module or package runs
    to its state before the test. PLEASE NOTE that this plugin should not be used
    with the coverage plugin, or in any other case where module reloading may produce
    undesirable side-effects. [NOSE_WITH_ISOLATION]'
  synonyms:
  - --with-isolation
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Add detail to error output by attempting to evaluate failed asserts
    [NOSE_DETAILED_ERRORS]
  synonyms:
  - -d
  - --detailed-errors
  - --failure-detail
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Disable special handling of SkipTest exceptions.
  synonyms:
  - --no-skip
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'Enable plugin TestId:  Activate to add a test id (like #1) to each
    test name output. Activate with --failed to rerun failing tests only.  [NOSE_WITH_ID]'
  synonyms:
  - --with-id
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Store test ids found in test runs in this file. Default is the file
    .noseids in the working directory.
  synonyms:
  - --id-file
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: Run the tests that failed in the last test run.
  synonyms:
  - --failed
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Spread test run among this many processes. Set a number equal to the
    number of processors or cores in your machine for best results. Pass a negative
    number to have the number of processes automatically set to the number of cores.
    Passing 0 means to disable parallel testing. Default is 0 unless NOSE_PROCESSES
    is set. [NOSE_PROCESSES]
  synonyms:
  - --processes
  args: !SimpleFlagArg
    name: NUM
  optional: true
- !Flag
  description: Set timeout for return of results from each test runner process. Default
    is 10. [NOSE_PROCESS_TIMEOUT]
  synonyms:
  - --process-timeout
  args: !SimpleFlagArg
    name: SECONDS
  optional: true
- !Flag
  description: If set, will restart each worker process once their tests are done,
    this helps control memory leaks from killing the system. [NOSE_PROCESS_RESTARTWORKER]
  synonyms:
  - --process-restartworker
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: 'Enable plugin Xunit: This plugin provides test results in the standard
    XUnit XML format. [NOSE_WITH_XUNIT]'
  synonyms:
  - --with-xunit
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: Path to xml file to store the xunit report in. Default is nosetests.xml
    in the working directory [NOSE_XUNIT_FILE]
  synonyms:
  - --xunit-file
  args: !SimpleFlagArg
    name: FILE
  optional: true
- !Flag
  description: Name of the testsuite in the xunit xml, generated by plugin. Default
    test suite name is nosetests.
  synonyms:
  - --xunit-testsuite-name
  args: !SimpleFlagArg
    name: PACKAGE
  optional: true
- !Flag
  description: 'Enable plugin AllModules: Collect tests from all python modules.  [NOSE_ALL_MODULES]'
  synonyms:
  - --all-modules
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "Enable collect-only:  Collect and output test names only, don't run\
    \ any tests.  [COLLECT_ONLY]"
  synonyms:
  - --collect-only
  args: !EmptyFlagArg {}
  optional: true
command:
- nosetests-3.6
subcommands: []
help_flag:
usage_flag:
version_flag:
