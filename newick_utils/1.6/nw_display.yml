!Command
command:
- nw_display
positional: []
named:
- !Flag
  description: ": rotate all labels by this amount (radians, default: 0)\n[only SVG\
    \ radial]"
  synonyms:
  - -a
  args: !SimpleFlagArg
    name: number
  optional: true
- !Flag
  description: ": rotate left-side labels by this amount (radians,\ndefault: 0.0349\
    \ (=~ 2°)) [only SVG radial]"
  synonyms:
  - -A
  args: !SimpleFlagArg
    name: number
  optional: true
- !Flag
  description: ": CSS for branch length labels. [only SVG]\nDefault: 'font-size:small;font-family:sans'.\n\
    setting 'opacity:0' disables printing of branch lengths."
  synonyms:
  - -b
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: ": use specified file as CSS map [only SVG]. A CSS map\nis a text file\
    \ which specifies a style (CSS) for a clade.\nEach line has the following structure:\n\
    <CSS> <flag> <label>+\n<CSS> is a valid CSS style specification (no spaces allowed)\n\
    e.g. 'font-size:small;font-family:italics;stroke:green'.\n<flag> is 'Individual',\
    \ 'Clade', or 'Label' (case is not important,\ncan be abbreviated down to 'I',\
    \ 'C'i or 'L').\nIf set to 'Clade', the style is applied to the clade defined\
    \ by\nthe labels. If 'Individual', the style is applied to each node\nindividually.\n\
    <label>+ is a nonempty, whitespace-separated list of Newick labels\n(spaces are\
    \ allowed IFF the label is enclosed in ''). If a label\nmatches more than one\
    \ node, all matching nodes are used.\nDefault: no CSS map, whole tree is black\
    \ (unless specified otherwise\nvia option -d).\n<CSS>, <flag>, and <labels>+ are\
    \ separated by whitespace.\nThe following specifies red stroke for a clade defined\
    \ by A, B and C;\n2-pixel wide, blue stroke for individual nodes D, E, and F,\
    \ and\ngreen italics for the labels 'A' and 'D'.\nstroke:red                 \
    \      Clade   A B C\nstroke:blue;stroke-width:2       I       D E F\nfill:green;font-style:italic\
    \     L       A D\nIf no colormap is specified, the default is (but see option\
    \ -d):\nstroke:black;fill:none;stroke-width:1;stroke-linecap:round"
  synonyms:
  - -c
  args: !SimpleFlagArg
    name: filename
  optional: true
- !Flag
  description: ": CSS for 'plain' tree nodes (i.e., unless overridden by -c)\n[only\
    \ SVG]\nDefault: stroke:black;fill:none;stroke-width:1;stroke-linecap:round"
  synonyms:
  - -d
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: ": graph style (Text only). Values are:\nraw:             uses |, -\
    \ , + and = .\ncommas:          angles with , and'\nslashes: angles with \\ and\
    \ /\nvt100:           use VT-100 box-drawing characters\nOnly the first character\
    \ is looked at, and case is not significant.\nThe default is slashes. This can\
    \ be overridden by setting environment\nvariable NW_DISPLAY_TEXT_STYLE to one\
    \ of the above values.\nNOTE: this is a rare case of a Newick Utils program not\
    \ being\nbackward-compatible. Even the 'raw' style does not exactly match the\n\
    previous output (but this was buggy, the current output is different\nbecause\
    \ it fixes problems)."
  synonyms:
  - -e
  args: !SimpleFlagArg
    name: raw|commas|slashes|vt100|utf8
  optional: true
- !Flag
  description: ": CSS for inner node labels. [only SVG]\nDefault: 'font-size:small;font-family:sans'.\n\
    setting 'visibility:hidden' disables printing of inner node labels."
  synonyms:
  - -i
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: "sets the position of the inner node label. Valid options are\n'l'\
    \ (near the leaves), 'm' (middle) or 'r' (near the root). Default\nis 'l'."
  synonyms:
  - -I
  args: !SimpleFlagArg
    name: char
  optional: true
- !Flag
  description: ": CSS for leaf node labels. [only SVG]\nDefault: 'font-size:medium;font-family:sans'.\n\
    setting 'visibility:hidden' disables printing of leaf node labels.\nNote: if you\
    \ change this, you will probably need to adjust the\nspace allocated to leaf labels\
    \ - see option -W."
  synonyms:
  - -l
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: "add this number of pixels to the horizontal position of\nnode labels.\
    \ [SVG only]"
  synonyms:
  - -n
  args: !SimpleFlagArg
    name: number
  optional: true
- !Flag
  description: ": use specified file as ornament map. Works like the CSS\nmap (see\
    \ option -c), except that it specifies arbitrary SVG snippets\ninstead of CSS\
    \ styles. For example, the following\n\"<circle style='fill:red' r='5'>\" Clade\
    \ A B C\nwill draw a red circle of radius 5 at the root of the clade defined\n\
    by nodes A, B, and C. Keyword 'Individual' is also accepted and\nworks like for\
    \ CSS."
  synonyms:
  - -o
  args: !SimpleFlagArg
    name: filename
  optional: true
- !Flag
  description: ": if <integer> is > 0, use that many pixels for the root\nif it has\
    \ no length[only SVG]; if it is 0, suppress the root's edge\nlength, if it has\
    \ a length.\nThe default is 10 pixels (SVG) or 1 character (text)."
  synonyms:
  - -R
  args: !SimpleFlagArg
    name: integer
  optional: true
- !Flag
  description: ': draw a radial tree (default: orthogonal) [only SVG]'
  synonyms:
  - -r
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ": output graph as SVG (default: ASCII graphics). All output is on\n\
    stdout, so if there is more than one tree, stdout will be a\nconcatenation of\
    \ SVG documents. These can be split into individual\nfiles with the csplit(1)\
    \ command:\n$ nw_display -s many_trees.nw > multiple_svg\n$ csplit -zs -f tree_\
    \ -b '%02d.svg' multiple_svg '/<?xml/' {*}\nwill generate as many SVG files as\
    \ there are Newick trees in\nmany_trees.nw. The files will be named tree_01.svg,\
    \ tree_02.svg, etc."
  synonyms:
  - -s
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ': suppress scale bar (ignored for cladograms)'
  synonyms:
  - -S
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ": set the zero of the scale at the maximum depth instead of the root.\n\
    This is useful when the branch lengths are in time units: zero marks\nthe present,\
    \ and the scale shows the age of the ancestral nodes."
  synonyms:
  - -t
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: ": string is used as unit name for scale bar (ignored\nif no scale\
    \ bar is drawn)."
  synonyms:
  - -u
  args: !SimpleFlagArg
    name: string
  optional: true
- !Flag
  description: ": use specified URL map [only SVG]. A URL map\nis a text file which\
    \ specifies a URL for a label.\nEach line has the following structure:\n<label>\
    \ <URL>\nClicking on a label will follow the link (if any)."
  synonyms:
  - -U
  args: !SimpleFlagArg
    name: URL_filename
  optional: true
- !Flag
  description: ": number of pixels between leaves (default: 40) [only SVG\northogonal]"
  synonyms:
  - -v
  args: !SimpleFlagArg
    name: number
  optional: true
- !Flag
  description: ": set width or scale (exclusive or...)\no If <number> is positive,\
    \ then it fixes the width - the graph will\nbe no wider than <number>, measured\
    \ in columns for text and pixels\nfor SVG. Defaults: 80 columns (text) or 300\
    \ px (SVG).\no If <number> is _negative_, then its absolute value is used as a\n\
    fixed scale, expressed in pixels/length units (SVG), or in\ncolumns/length units\
    \ (text), in which length units are usually\nsubstitutions/site (but see option\
    \ -u). If there are more than\none tree, then this fixed scale is applied to all\
    \ of them."
  synonyms:
  - -w
  args: !SimpleFlagArg
    name: number
  optional: true
- !Flag
  description: ": use this as an estimate of the width of a leaf label\ncharacter\
    \ (in pixels) [only SVG]. This affects the space left for\nthe tree nodes. Default:\
    \ 5.0 You will probably need this if you\nchange the leaf label font properties\
    \ (option -l), especially size.\nYou will probably need trial and error to find\
    \ the right value."
  synonyms:
  - -W
  args: !SimpleFlagArg
    name: number
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: ': prints this message and exits'
  synonyms:
  - -h
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag:
help_text: "Displays a tree as a graph, as text or SVG.\n\nSynopsis\n--------\n\n\
  nw_display [options] <tree filename|->\n\nInput\n-----\n\nArgument is the name of\
  \ the file containing one or more trees,\nor '-' (in which case the tree is read\
  \ on stdin).\n\nOutput\n------\n\nOutputs a graph representing the tree, either\
  \ as text (default) or\nas SVG (option -s). Underscores in labels are replaced with\
  \ spaces.\nTrees with no branch lengths are taken to be cladograms and are\ndrawn\
  \ with leaves aligned. Otherwise, the tree is assumed to be a\nphylogram: branch\
  \ lengths are honored and a scale bar is drawn.\n\nSVG graphics can be converted\
  \ to other formats with converters\nsuch as Inkscape (e.g. to PDF) or ImageMagick\
  \ (e.g. to PNG or JPEG).\nInkscape is available from www.inkscape.org and ImageMagick\
  \ from\nwww.imagemagick.org.\n\nOptions\n-------\n\n    -a <number>: rotate all\
  \ labels by this amount (radians, default: 0)\n       [only SVG radial]\n    -A\
  \ <number>: rotate left-side labels by this amount (radians,\n       default: 0.0349\
  \ (=~ 2°)) [only SVG radial]\n    -b <string>: CSS for branch length labels. [only\
  \ SVG]\n       Default: 'font-size:small;font-family:sans'.\n       setting 'opacity:0'\
  \ disables printing of branch lengths.\n    -c <filename>: use specified file as\
  \ CSS map [only SVG]. A CSS map\n       is a text file which specifies a style (CSS)\
  \ for a clade.\n       Each line has the following structure:\n       <CSS> <flag>\
  \ <label>+\n       <CSS> is a valid CSS style specification (no spaces allowed)\n\
  \       e.g. 'font-size:small;font-family:italics;stroke:green'.\n       <flag>\
  \ is 'Individual', 'Clade', or 'Label' (case is not important,\n       can be abbreviated\
  \ down to 'I', 'C'i or 'L').\n       If set to 'Clade', the style is applied to\
  \ the clade defined by\n       the labels. If 'Individual', the style is applied\
  \ to each node\n       individually.\n       <label>+ is a nonempty, whitespace-separated\
  \ list of Newick labels\n       (spaces are allowed IFF the label is enclosed in\
  \ ''). If a label\n       matches more than one node, all matching nodes are used.\n\
  \       Default: no CSS map, whole tree is black (unless specified otherwise\n \
  \      via option -d).\n       <CSS>, <flag>, and <labels>+ are separated by whitespace.\n\
  \       The following specifies red stroke for a clade defined by A, B and C;\n\
  \       2-pixel wide, blue stroke for individual nodes D, E, and F, and\n      \
  \ green italics for the labels 'A' and 'D'.\n       stroke:red\t\t\tClade\tA B C\n\
  \       stroke:blue;stroke-width:2\tI\tD E F\n       fill:green;font-style:italic\t\
  L\tA D\n       If no colormap is specified, the default is (but see option -d):\n\
  \       stroke:black;fill:none;stroke-width:1;stroke-linecap:round\n    -d <string>:\
  \ CSS for 'plain' tree nodes (i.e., unless overridden by -c)\n       [only SVG]\n\
  \       Default: stroke:black;fill:none;stroke-width:1;stroke-linecap:round\n  \
  \  -e <raw|commas|slashes|vt100|utf8>: graph style (Text only). Values are:\n  \
  \     raw:\t\tuses |, - , + and = .\n       commas:\t\tangles with , and'\n    \
  \   slashes:\tangles with \\ and /\n       vt100:\t\tuse VT-100 box-drawing characters\n\
  \       Only the first character is looked at, and case is not significant.\n  \
  \     The default is slashes. This can be overridden by setting environment\n  \
  \     variable NW_DISPLAY_TEXT_STYLE to one of the above values.\n       NOTE: this\
  \ is a rare case of a Newick Utils program not being\n       backward-compatible.\
  \ Even the 'raw' style does not exactly match the\n       previous output (but this\
  \ was buggy, the current output is different\n       because it fixes problems).\n\
  \    -h: prints this message and exits\n    -i <string>: CSS for inner node labels.\
  \ [only SVG]\n       Default: 'font-size:small;font-family:sans'.\n       setting\
  \ 'visibility:hidden' disables printing of inner node labels.\n    -I <char> sets\
  \ the position of the inner node label. Valid options are\n       'l' (near the\
  \ leaves), 'm' (middle) or 'r' (near the root). Default\n       is 'l'.\n    -l\
  \ <string>: CSS for leaf node labels. [only SVG]\n       Default: 'font-size:medium;font-family:sans'.\n\
  \       setting 'visibility:hidden' disables printing of leaf node labels.\n   \
  \    Note: if you change this, you will probably need to adjust the\n       space\
  \ allocated to leaf labels - see option -W.\n    -n <number> add this number of\
  \ pixels to the horizontal position of\n       node labels. [SVG only]\n    -o <filename>:\
  \ use specified file as ornament map. Works like the CSS\n       map (see option\
  \ -c), except that it specifies arbitrary SVG snippets\n       instead of CSS styles.\
  \ For example, the following\n       \"<circle style='fill:red' r='5'>\" Clade A\
  \ B C\n       will draw a red circle of radius 5 at the root of the clade defined\n\
  \       by nodes A, B, and C. Keyword 'Individual' is also accepted and\n      \
  \ works like for CSS.\n    -R <integer>: if <integer> is > 0, use that many pixels\
  \ for the root\n       if it has no length[only SVG]; if it is 0, suppress the root's\
  \ edge\n       length, if it has a length.\n       The default is 10 pixels (SVG)\
  \ or 1 character (text).\n    -r: draw a radial tree (default: orthogonal) [only\
  \ SVG]\n    -s: output graph as SVG (default: ASCII graphics). All output is on\n\
  \       stdout, so if there is more than one tree, stdout will be a\n       concatenation\
  \ of SVG documents. These can be split into individual\n       files with the csplit(1)\
  \ command:\n\n       $ nw_display -s many_trees.nw > multiple_svg\n       $ csplit\
  \ -zs -f tree_ -b '%02d.svg' multiple_svg '/<?xml/' {*}\n\n       will generate\
  \ as many SVG files as there are Newick trees in\n       many_trees.nw. The files\
  \ will be named tree_01.svg, tree_02.svg, etc.\n    -S: suppress scale bar (ignored\
  \ for cladograms)\n    -t: set the zero of the scale at the maximum depth instead\
  \ of the root.\n       This is useful when the branch lengths are in time units:\
  \ zero marks\n       the present, and the scale shows the age of the ancestral nodes.\n\
  \    -u <string>: string is used as unit name for scale bar (ignored\n       if\
  \ no scale bar is drawn).\n    -U <URL_filename>: use specified URL map [only SVG].\
  \ A URL map\n       is a text file which specifies a URL for a label.\n       Each\
  \ line has the following structure:\n       <label> <URL>\n       Clicking on a\
  \ label will follow the link (if any).\n    -v <number>: number of pixels between\
  \ leaves (default: 40) [only SVG\n       orthogonal]\n    -w <number>: set width\
  \ or scale (exclusive or...)\n       o If <number> is positive, then it fixes the\
  \ width - the graph will\n         be no wider than <number>, measured in columns\
  \ for text and pixels\n         for SVG. Defaults: 80 columns (text) or 300 px (SVG).\n\
  \       o If <number> is _negative_, then its absolute value is used as a\n    \
  \     fixed scale, expressed in pixels/length units (SVG), or in\n         columns/length\
  \ units (text), in which length units are usually\n         substitutions/site (but\
  \ see option -u). If there are more than\n         one tree, then this fixed scale\
  \ is applied to all of them.\n    -W <number>: use this as an estimate of the width\
  \ of a leaf label\n       character (in pixels) [only SVG]. This affects the space\
  \ left for\n       the tree nodes. Default: 5.0 You will probably need this if you\n\
  \       change the leaf label font properties (option -l), especially size.\n  \
  \     You will probably need trial and error to find the right value.\n\nLibXML\n\
  ......\n\nIf LibXML is being used, the handling of ornaments (-o) is more elaborate.\n\
  See the tutorial, section 2.2 (displaying) for details.\nThis executable does NOT\
  \ use LibXML2.\n\nExamples\n--------\n\n# display tree as ASCII\n$ nw_display data/catarrhini\n\
  \n# display tree as SVG, using a color map\n$ nw_display -s -c data/color.map data/catarrhini\n\
  \n# ditto, convert to other graphics formats\n$ nw_display -s -c data/color.map\
  \ data/catarrhini > catarrhini.svg\n$ convert catarrhini.svg catarrhini.png\t# PNG,\
  \ with ImageMagick\n$ convert catarrhini.svg catarrhini.jpeg\t# JPEG, with ImageMagick\n\
  $ inkscape -z -f catarrhini.svg -A catarrhini.pdf # PDF, with Inkscape\n\n# the\
  \ same; no branch lengths\n$ nw_display -s -b 'visibility:hidden' -c data/color.map\
  \ data/catarrhini\n\n# radial tree, leaf labels in italics\n$ nw_display -s -r -l\
  \ 'font-style:italics' data/catarrhini\n"
generated_using:
- --help
