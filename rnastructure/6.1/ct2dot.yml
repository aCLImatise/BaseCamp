!Command
command:
- ct2dot
positional:
- !Positional
  description: ''
  position: 0
  name: ct file
  optional: false
- !Positional
  description: ''
  position: 1
  name: structure number
  optional: false
- !Positional
  description: ''
  position: 2
  name: bracket file
  optional: false
named:
- !Flag
  description: "Suppress unnecessary output. This option is implied when the output\
    \ file is\n'-' (STDOUT)."
  synonyms:
  - -q
  - --quiet
  args: !EmptyFlagArg {}
  optional: true
- !Flag
  description: "A number or name that indicates how subsequent sub-structures are\
    \ formatted\n(relevant only when more than one structure is being written).\n\
    Valid values are:\n(1) simple -- Susbequent structures (after the first one) are\
    \ written with\na Structure-Line  '(((....)))' only -- (no title or sequence)\n\
    (2) side   -- A structure label is appended to the right side of each\nStructure-Line\
    \ e.g. '(((....)))  ENERGY= -3.6  E.coli'.\n(3) multi  -- Susbequent structures\
    \ are each written with a Title-Line\n'>TITLE' followed by a Structure-Line.\n\
    (4) full   -- All structures written with a full header, including a\n'>TITLE'\
    \ line followed by a Sequence-Line and then a Structure-Line.\nThe default is\
    \ 'multi'.\n"
  synonyms:
  - -f
  - --format
  args: !EmptyFlagArg {}
  optional: true
parent:
subcommands: []
usage: []
help_flag: !Flag
  description: Display the usage details message.
  synonyms:
  - -h
  - --help
  args: !EmptyFlagArg {}
  optional: true
usage_flag:
version_flag: !Flag
  description: Display version and copyright information for this interface.
  synonyms:
  - -v
  - --version
  args: !EmptyFlagArg {}
  optional: true
help_text: "USAGE: ct2dot <ct file> <structure number> <bracket file> [options]\n\
  All flags are case-insensitive, and grouping of flags is not allowed.\n\n=============================\n\
  ==== Required Parameters ====\n=============================\n<ct file>\n    The\
  \ name of a file containing the CT structure to convert.\n    If the name is a hyphen\
  \ (-) the file will be read from standard input\n    (STDIN).\n\n<structure number>\n\
  \    The number, one-indexed, of the structure to convert in the CT file (use -1\n\
  \    or \"ALL\" to convert all structures).\n\n<bracket file>\n    The name of a\
  \ dot bracket file to which output will be written.\n    If the name is a hyphen\
  \ (-), the converted file will be written to standard\n    output (STDOUT) instead\
  \ of a file.\n\n=========================================\n==== Option Flags Without\
  \ Parameters ====\n=========================================\n-h --help \n    Display\
  \ the usage details message.\n\n-q --quiet \n    Suppress unnecessary output. This\
  \ option is implied when the output file is\n    '-' (STDOUT).\n\n-v --version \n\
  \    Display version and copyright information for this interface.\n\n======================================\n\
  ==== Option Flags With Parameters ====\n======================================\n\
  All parameters must follow their associated flag directly.\nFailure to do so may\
  \ result in aberrant program behavior.\n\n-f --format \n    A number or name that\
  \ indicates how subsequent sub-structures are formatted\n    (relevant only when\
  \ more than one structure is being written).\n    Valid values are:\n      (1) simple\
  \ -- Susbequent structures (after the first one) are written with\n        a Structure-Line\
  \  '(((....)))' only -- (no title or sequence)\n      (2) side   -- A structure\
  \ label is appended to the right side of each\n        Structure-Line e.g. '(((....)))\
  \  ENERGY= -3.6  E.coli'.\n      (3) multi  -- Susbequent structures are each written\
  \ with a Title-Line\n        '>TITLE' followed by a Structure-Line.\n      (4) full\
  \   -- All structures written with a full header, including a\n        '>TITLE'\
  \ line followed by a Sequence-Line and then a Structure-Line.\n    The default is\
  \ 'multi'.\n\n"
generated_using:
- --help
